[
  {
    "owner": "microsoftdocs",
    "repo": "power-platform",
    "content": "TITLE: Extracting Time Components with Match and With in Power Fx\nDESCRIPTION: This example uses the With function in combination with Match to extract hours, minutes, and seconds from an ISO 8601 duration value and create a Date/Time value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-with.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nWith(\n    Match( \"PT2H1M39S\", \"PT(?:(?<hours>\\d+)H)?(?:(?<minutes>\\d+)M)?(?:(?<seconds>\\d+)S)?\" ),\n    Time( Value( hours ), Value( minutes ), Value( seconds ) )\n)\n// Result: 2:01 AM (as shown in a label control, use the Text function to see the seconds)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Notifications in Power Apps\nDESCRIPTION: Demonstrates how to use IfError with Notify function to provide user feedback when operations fail, stopping further execution on errors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_2\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nIfError(\n    Patch( DS1, ... ), Notify( \"problem in the first action\" ),\n    Patch( DS2, ... ), Notify( \"problem in the second action\" )\n)\n```\n\n----------------------------------------\n\nTITLE: Running Power Platform Static Analysis Checks in Azure Pipelines\nDESCRIPTION: This YAML snippet performs static analysis on solutions to check for adherence to best-practice rules with the Power Platform Checker. It provides an integration point for automated quality checks in the CI/CD pipeline. The task requires a configured service connection and can analyze solution files from a SAS URI or local paths.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n# Static analysis check of your solution\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.checker.PowerPlatformChecker@2\n  displayName: 'Power Platform Checker '\n  inputs:\n    PowerPlatformSPN: 'Dataverse service connection'\n    RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'\n```\n\nLANGUAGE: yml\nCODE:\n```\n# Static analysis check of your solution\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.checker.PowerPlatformChecker@2\n  displayName: 'Power Platform Checker '\n  inputs:\n    PowerPlatformSPN: 'Dataverse service connection'\n    UseDefaultPACheckerEndpoint: false\n    CustomPACheckerEndpoint: 'https://japan.api.advisor.powerapps.com/'\n    FileLocation: sasUriFile\n    FilesToAnalyzeSasUri: 'SAS URI'\n    FilesToAnalyze: '**\\*.zip'\n    FilesToExclude: '**\\*.tzip'\n    RulesToOverride: 'JSON array'\n    RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'\n```\n\n----------------------------------------\n\nTITLE: Nesting Tables in Power Fx\nDESCRIPTION: Shows how to nest tables within a record, utilizing the Table function for capturing historical 'Quantity' data over quarters. This represents advanced table constructions involving hierarchical data structures.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_9\n\nLANGUAGE: power-fx\nCODE:\n```\nTable( \n\t{ Name: \"Chocolate\", \n\t  'Quantity History': Table( { Quarter: \"Q1\", OnHand: 10, OnOrder: 10 },\n\t                             { Quarter: \"Q2\", OnHand: 18, OnOrder: 0 } ) \n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Decrement Units in Stock using UpdateIf in Power Fx\nDESCRIPTION: This example illustrates a complete step-by-step setup for decrementing the units in stock for a selected product using a slider and button control in a gallery.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-update-updateif.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"UpdateIf(Inventory, ProductName = ProductGallery.Selected.ProductName, {UnitsInStock:UnitsInStock-UnitsSold.Value})\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Settings in JSON\nDESCRIPTION: This JSON snippet specifies how to structure a deployment settings file to pre-populate connection references and environment variables for a Power Platform solution deployment. The file contains sections for 'EnvironmentVariables' and 'ConnectionReferences' which need to be filled with the appropriate values corresponding to the target environment. These values are essential for automating CI/CD deployments without user interaction post-import.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/conn-ref-env-variables-build-tools.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EnvironmentVariables\": [\n    {\n      \"SchemaName\": \"tst_Deployment_env\",\n      \"Value\": \"\"\n    },\n    {\n      \"SchemaName\": \"tst_EnvironmentType\",\n      \"Value\": \"\"\n    }\n  ],\n  \"ConnectionReferences\": [\n    {\n      \"LogicalName\": \"tst_sharedtst5fcreateuserandjob5ffeb85c4c63870282_b4cc7\",\n      \"ConnectionId\": \"\",\n      \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_tst-5fcreateuserandjob-5ff805fab2693f57dc\"\n    },\n    {\n      \"LogicalName\": \"tst_SharepointSiteURL\",\n      \"ConnectionId\": \"\",\n      \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_sharepointonline\"\n    },\n    {\n      \"LogicalName\": \"tst_AzureDevopsConnRef\",\n      \"ConnectionId\": \"\",\n      \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_visualstudioteamservices\"\n    },\n    {\n      \"LogicalName\": \"tst_GHConn\",\n      \"ConnectionId\": \"\",\n      \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_github\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning an Application User in Power Platform Environment\nDESCRIPTION: This PowerShell command assigns an application user to a specified environment with a specific role in Microsoft Power Platform. It ensures that the application user has a system administrator role, which is necessary for appropriate permissions in the environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tools.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\>pac admin assign-user --user \"adde6d52-9582-4932-a43a-beca5d182301\" --role \"System administrator\" --environment d3fcc479-0122-e7af-9965-bde57f69ee1d --application-user\n```\n\n----------------------------------------\n\nTITLE: Setting TextInput default value to Blank\nDESCRIPTION: This sets the default value of the TextInput1 control to Blank(). This will result in a division by zero error in the label if the label's formula is 1/Value(TextInput1.Text), because Blank() is coerced to 0.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nBlank()\n```\n\n----------------------------------------\n\nTITLE: Error Handling with IfError in Data Collection Operations\nDESCRIPTION: Example demonstrating how to use IfError to catch errors during a Collect operation and display a custom error message using the Notify function. This pattern allows for graceful error handling in data operations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_9\n\nLANGUAGE: power-fx\nCODE:\n```\nIfError( Collect( Names, { Name: \"duplicate\" } ),\n         Notify( $\"OOPS: { FirstError.Message }\", NotificationType.Warning ) )\n```\n\n----------------------------------------\n\nTITLE: Using Assert in Power Apps\nDESCRIPTION: The Assert function in Power Apps evaluates an expression to true or false within Test Studio. It is used in test scenarios to validate expected outcomes against actual results, failing the test if the expression evaluates to false. Available only in Power Apps Test Studio, the key parameters include 'Expression', which is a required boolean expression, and 'Message', an optional descriptive string for failed assertions. Outputs include assertion messages stored in a Traces table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-assert.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Apps\nCODE:\n```\nAssert(lblResult.Text = \"Success\", \"lblResult value Expected : Success , Actual : \" & lblResult.Text)\n```\n\nLANGUAGE: Power Apps\nCODE:\n```\nAssert(ListBox1.Selected.Value = \"Success\", \"ListBox1 selection Expected : Success, Actual : \" & ListBox1.Selected.Value)\n```\n\nLANGUAGE: Power Apps\nCODE:\n```\nAssert(kudosAfterTest = kudosBeforeTest + 1, \"Kudos count. Expected : \" & kudosBeforeTest + 1 & \" Actual :\" & kudosAfterTest)\n```\n\n----------------------------------------\n\nTITLE: Filtering Records by Names or Companies Starting with Search Text in Power Apps\nDESCRIPTION: This formula filters the Customers data source for records where either the Name or Company column starts with the search text. It uses multiple StartsWith functions combined with the logical OR operator.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_8\n\nLANGUAGE: PowerApps\nCODE:\n```\nFilter(Customers, StartsWith(Name, SearchInput.Text) || StartsWith(Company, SearchInput.Text) )\n```\n\n----------------------------------------\n\nTITLE: Creating Catalog Item from Solution using Power Platform SDK for .NET\nDESCRIPTION: This C# method processes a solution to create a catalog item. It handles package submission, monitors status, retrieves file details, submits for approval, and returns the catalog item ID. The method requires an authenticated IOrganizationService instance and solution details as input.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstatic string CatalogItemFromSolution(\n    IOrganizationService service,\n    string solutionName,\n    string solutionUniqueName,\n    string catalogItemSubmissionJsonString\n    )\n{\n    Entity packageStoreRecord = new(\"mspcat_packagestore\")\n    {\n        Attributes = {\n            {\"mspcat_name\", solutionName},\n            {\"mspcat_solutionuniquename\", solutionUniqueName},\n            {\"mspcat_intendeddeploymenttype\", new OptionSetValue(526430000)}, // Standard\n            {\"mspcat_operation\", new OptionSetValue(958090001)} //Create Package\n        }\n    };\n\n    Guid packageStoreRecordId = service.Create(packageStoreRecord);\n    Console.WriteLine($\"Created package store record with ID {packageStoreRecordId}\");\n\n    packageStoreRecord.Attributes.Clear(); //Don't send values again\n\n    packageStoreRecord.Id = packageStoreRecordId;\n    int statusCodeValue = 958090004; // Submitted\n\n    string statusReason; // Set in the loop\n    packageStoreRecord[\"statuscode\"] = new OptionSetValue(statusCodeValue);\n\n    service.Update(packageStoreRecord); //Set status to Submitted\n    Console.WriteLine(\"Updated package store record status to Submitted\");\n    // Columns to retrieve while polling the package store record\n    ColumnSet packageStoreColumns = new(\"statuscode\");\n\n    do\n    {\n        Task.Delay(10000).Wait(); //Wait 10 seconds between polling\n\n        // Retrieve the record\n        packageStoreRecord = service.Retrieve(\n            \"mspcat_packagestore\",\n            packageStoreRecord.Id,\n            packageStoreColumns);\n\n        // Get the status code value\n        statusCodeValue = packageStoreRecord\n            .GetAttributeValue<OptionSetValue>(\"statuscode\").Value;\n\n        statusReason = packageStoreRecord\n            .FormattedValues[\"statuscode\"];\n\n        Console.WriteLine($\" - Package store record status is {statusReason}\");\n\n        // Continue while statusCodeValue is Submitted, Pending, or Running\n    } while (statusCodeValue.Equals(958090004) ||\n             statusCodeValue.Equals(1) ||\n             statusCodeValue.Equals(958090000));\n\n    // If it isn't Completed, throw an exception\n    if (!statusCodeValue.Equals(958090001))\n    {\n        statusReason = packageStoreRecord\n            .FormattedValues[\"statuscode\"];\n\n        // 958090002 is 'Failed'\n        throw new Exception($\"Package submission {statusReason}\");\n    }\n    Console.WriteLine($\"Package submission {statusReason}\");\n\n    // If successful, retrieve the details about the file to download\n    GetFileSasUrlRequest getFileSasUrlRequest = new()\n    {\n        Target = new EntityReference(\"mspcat_packagestore\", packageStoreRecord.Id),\n        FileAttributeName = \"mspcat_packagefile\"\n    };\n\n    var getFileSasUrlResponse = (GetFileSasUrlResponse)service\n        .Execute(getFileSasUrlRequest);\n    FileSasUrlResponse getFileSasUrlResponseResult = getFileSasUrlResponse.Result;\n    Console.WriteLine($\"Retrieved SAS URL for {getFileSasUrlResponseResult.FileName}\");\n\n    // Add the packageFile to the catalog item submission\n    var catalogItemSubmissionJsonObject = JsonNode.Parse(catalogItemSubmissionJsonString).AsObject();\n\n    var packageFile = new JsonObject\n    {\n        [\"name\"] = getFileSasUrlResponseResult.FileName,\n        [\"filesaslink\"] = getFileSasUrlResponseResult.SasUrl\n    };\n\n    // Add the packageFile to the catalog item submission\n    catalogItemSubmissionJsonObject[\"catalogItemDefinition\"][\"packageFile\"] = packageFile;\n\n    catalogItemSubmissionJsonString = catalogItemSubmissionJsonObject.ToJsonString();\n\n    string encodedSubmissionJson = Convert\n        .ToBase64String(Encoding.UTF8.GetBytes(catalogItemSubmissionJsonString));\n\n    var submitCatalogApprovalRequest = new mspcat_SubmitCatalogApprovalRequestRequest\n    {\n        EncodedApprovalRequest = encodedSubmissionJson\n    };\n\n    var submitCatalogApprovalResponse = (mspcat_SubmitCatalogApprovalRequestResponse)service\n        .Execute(submitCatalogApprovalRequest);\n    \n    Guid certificationRequestId = submitCatalogApprovalResponse.CertificationRequestId;\n\n    Console.WriteLine($\"Submitted catalog approval request with ID {certificationRequestId}\");\n\n    // Approval must be in either InProgress or Submitted to be processed\n\n    // Columns to retrieve while polling the certification request record\n    ColumnSet certificationRequestColumns = new(\"statuscode\", \"mspcat_application\");\n    Entity certificationRequestRecord;\n\n    do\n    {\n        Task.Delay(10000).Wait(); //Wait 10 seconds between polling\n\n        // Retrieve the record\n        certificationRequestRecord = service.Retrieve(\n           \"mspcat_certificationrequest\",\n           certificationRequestId,\n           certificationRequestColumns);\n\n        // Get the status code value\n        statusCodeValue = certificationRequestRecord\n            .GetAttributeValue<OptionSetValue>(\"statuscode\").Value;\n\n        statusReason = packageStoreRecord\n            .FormattedValues[\"statuscode\"];\n\n        Console.WriteLine($\" - Approval Request status is {statusReason}\");\n\n        // Continue while statusCodeValue is:\n    } while (statusCodeValue.Equals(526430002) || // Waiting On Submitter,\n             statusCodeValue.Equals(526430003) || // Pending Deployment,\n             statusCodeValue.Equals(526430008) || // Draft\n             statusCodeValue.Equals(526430009));  // Processing\n\n    // If it isn't Submitted or InProgress, throw an exception\n    if (!(statusCodeValue.Equals(1) || statusCodeValue.Equals(526430001)))\n    {\n        string statusreason = certificationRequestRecord\n            .FormattedValues[\"statuscode\"];\n\n        throw new Exception($\"Certification request {statusreason}\");\n    }\n\n\n    // Approve the request\n    mspcat_ResolveApprovalRequest resolveApprovalRequest = new()\n    {\n        Target = new EntityReference(\"mspcat_certificationrequest\", certificationRequestId),\n        requestsuccess = true, //Approve the request\n        message = \"Approved by CatalogItemFromSolution function\"\n    };\n\n    // mspcat_ResolveApprovalResponse has no properties to return\n    service.Execute(resolveApprovalRequest);\n    Console.WriteLine(\"Approved the certification request\");\n\n    // Get the Catalog Item\n    EntityReference catalogItemReference = certificationRequestRecord\n            .GetAttributeValue<EntityReference>(\"mspcat_application\");\n\n    Entity catalogItem = service.Retrieve(\n        \"mspcat_applications\",\n        catalogItemReference.Id,\n        new ColumnSet(\"mspcat_tpsid\"));\n\n    string tpsid = catalogItem.GetAttributeValue<string>(\"mspcat_tpsid\");\n    Console.WriteLine($\"Returning Catalog Item ID: {tpsid}\");\n\n    return tpsid;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ForAll with Sequence to Collect Random Numbers\nDESCRIPTION: This snippet demonstrates how to use the Sequence function in conjunction with the ForAll function to add random numbers to a specified collection. The Sequence function generates a sequence of numbers that acts as an index for the ForAll loop.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sequence.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll( Sequence( 10 ), Collect( MyRandomNumbers, Rand() ) )\n```\n\n----------------------------------------\n\nTITLE: Updating Catalog Settings in Power Platform CLI\nDESCRIPTION: This command updates settings for the catalog using the path to a settings document, allowing users to modify their catalog configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/catalog.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## pac catalog update\n\nUpdate settings for the catalog.\n\n### Required Parameters for catalog update\n\n#### `--path` `-p`\n\nPath to catalog settings document\n```\n\n----------------------------------------\n\nTITLE: Displaying \"#Error\" instead of error banner\nDESCRIPTION: This formula uses IfError to display the string \"#Error\" in the label control when an error occurs. The Text function ensures the numerical result is converted to a text string. The inner If handles the division by zero case specifically.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nIfError( Text( 1/Value( TextInput1.Text ) ), \n             If( FirstError.Kind = ErrorKind.Div0, Blank(), \"#Error\" ) )\n```\n\n----------------------------------------\n\nTITLE: Creating New Records with Form Controls in Power Apps\nDESCRIPTION: Sets up a New button that prepares a Form control for creating a new record and navigates to the edit screen. This allows users to add new data entries through the same form interface used for editing.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerFx\nCODE:\n```\nNewForm( EditForm ); Navigate( EditScreen, None )\n```\n\n----------------------------------------\n\nTITLE: Clearing and adding records to a data source in Power Apps\nDESCRIPTION: These examples demonstrate how to use ClearCollect, Collect, and Clear functions to manipulate the IceCream collection in Power Apps. ClearCollect clears the collection and adds a new record, Collect adds new records, and Clear removes all records from the collection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-clear-collect-clearcollect.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"ClearCollect( IceCream, {&nbsp;Flavor:&nbsp;\\\"Strawberry\\\",&nbsp;Quantity:&nbsp;300&nbsp;} )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Collect( IceCream, {&nbsp;Flavor:&nbsp;\\\"Pistachio\\\",&nbsp;Quantity:&nbsp;40&nbsp;}, {&nbsp;Flavor:&nbsp;\\\"Orange\\\",&nbsp;Quantity:&nbsp;200&nbsp;} )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Clear( IceCream )\"\n```\n\n----------------------------------------\n\nTITLE: Reverting Changes on Conflict Detection\nDESCRIPTION: This snippet shows how to define the OnSelect property of a button to revert changes in case of an error detected by the Errors function, enabling the user to resolve conflicts efficiently.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-errors.md#2025-04-20_snippet_4\n\nLANGUAGE: Power FX\nCODE:\n```\nReloadButton.OnSelect = Revert( IceCream, EditRecord )\n```\n\n----------------------------------------\n\nTITLE: Using IfError for Input Validation and Handling\nDESCRIPTION: This step-by-step guide shows how to use IfError for validating user input in a TextInput control, returning a default value when input cannot be parsed. Dependencies include TextInput and Label controls with specific property configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_9\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nIfError( Value( TextInput1.Text ), -1 )\n```\n\n----------------------------------------\n\nTITLE: SortByColumns with Custom Sort Order Table in Power Fx\nDESCRIPTION: Alternative syntax for SortByColumns that allows sorting based on a custom order table, taking a table to sort, a column name, and a single-column table defining the sort order.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSortByColumns( Table, ColumnName, SortOrderTable )\n```\n\n----------------------------------------\n\nTITLE: Using Param Function in Power Fx\nDESCRIPTION: Demonstrates the usage of the Param function to retrieve a parameter passed to the app when it was launched. The ParameterName is required, and the function returns blank if the parameter isn't passed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\n**Param**( _ParameterName_ )\n```\n\n----------------------------------------\n\nTITLE: Creating Application User in Power Platform Admin Center\nDESCRIPTION: Procedure for creating an unlicensed application user in a specific environment using Microsoft Entra application registration. Involves selecting an environment, adding an app, choosing a business unit, and assigning security roles.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-application-users.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Sample PowerShell command for creating application user\n# Note: Actual implementation requires interactive admin center steps\n```\n\n----------------------------------------\n\nTITLE: Preparing JSON Payload for SAP Requisition in Power Apps\nDESCRIPTION: This Power Fx code snippet demonstrates how to construct a JSON payload for a purchase requisition in a Power Apps canvas app. It builds the header and items JSON, and replaces null values with empty strings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/extend-cloud-flows.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSet(\n   varRequisitionJSON,\n   \"{Header: \" & JSON(\n       {\n           PurchaseRequisitionNumber: varRequisition,\n           Vendor: Trim(txtRequisitionDetailsVendor.Text),\n           PurchasingOrganization: cmbRequisitionDetailsPurchasingOrg.Selected.'Value Code',\n           PurchasingGroup: cmbRequisitionDetailsPurchasingGroup.Selected.'Value Code',\n           Currency: cmbRequisitionDetailsCurrency.Selected.'Value Code'\n       },\n       JSONFormat.IndentFour\n   ) & \", items: \" & JSON(\n       colRequisitionItems,\n       JSONFormat.IndentFour\n   ) & \"}\"\n);\nSet(\n   varRequisitionJSON,\n   Substitute(\n       varRequisitionJSON,\n       \"null\",\n       \"\"\"\"\n   )\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Using Localized Strings in Dynamics 365 Plug-in\nDESCRIPTION: This C# code demonstrates how to retrieve and use localized strings from XML web resources in a Dynamics 365 plug-in. It includes methods for determining the organization's base language, the user's UI language, retrieving the appropriate XML web resource, and extracting the localized string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/create-solutions-support-multiple-languages.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected void ExecutePreValidateAccountDelete(LocalPluginContext localContext)\n  {\n   if (localContext == null)\n   {\n    throw new ArgumentNullException(\"localContext\");\n   }\n   int OrgLanguage = RetrieveOrganizationBaseLanguageCode(localContext.OrganizationService);\n   int UserLanguage = RetrieveUserUILanguageCode(localContext.OrganizationService,\n localContext.PluginExecutionContext.InitiatingUserId);\n   String fallBackResourceFile = \"\";\n   switch (OrgLanguage)\n   {\n    case 1033:\n     fallBackResourceFile = \"new_localizedStrings.en_US\";\n     break;\n    case 1041:\n     fallBackResourceFile = \"new_localizedStrings.ja_JP\";\n     break;\n    case 1031:\n     fallBackResourceFile = \"new_localizedStrings.de_DE\";\n     break;\n    case 1036:\n     fallBackResourceFile = \"new_localizedStrings.fr_FR\";\n     break;\n    case 1034:\n     fallBackResourceFile = \"new_localizedStrings.es_ES\";\n     break;\n    case 1049:\n     fallBackResourceFile = \"new_localizedStrings.ru_RU\";\n     break;\n    default:\n     fallBackResourceFile = \"new_localizedStrings.en_US\";\n     break;\n   }\n   String ResourceFile = \"\";\n   switch (UserLanguage)\n   {\n    case 1033:\n     ResourceFile = \"new_localizedStrings.en_US\";\n     break;\n    case 1041:\n     ResourceFile = \"new_localizedStrings.ja_JP\";\n     break;\n    case 1031:\n     ResourceFile = \"new_localizedStrings.de_DE\";\n     break;\n    case 1036:\n     ResourceFile = \"new_localizedStrings.fr_FR\";\n     break;\n    case 1034:\n     ResourceFile = \"new_localizedStrings.es_ES\";\n     break;\n    case 1049:\n     ResourceFile = \"new_localizedStrings.ru_RU\";\n     break;\n    default:\n     ResourceFile = fallBackResourceFile;\n     break;\n   }\n   XmlDocument messages = RetrieveXmlWebResourceByName(localContext, ResourceFile);\n   String message = RetrieveLocalizedStringFromWebResource(localContext, messages, \"ErrorMessage\");\n   throw new InvalidPluginExecutionException(message);\n  }\n  protected static int RetrieveOrganizationBaseLanguageCode(IOrganizationService service)\n  {\n   QueryExpression organizationEntityQuery = new QueryExpression(\"organization\");\n   organizationEntityQuery.ColumnSet.AddColumn(\"languagecode\");\n   EntityCollection organizationEntities = service.RetrieveMultiple(organizationEntityQuery);\n   return (int)organizationEntities[0].Attributes[\"languagecode\"];\n  }\n  protected static int RetrieveUserUILanguageCode(IOrganizationService service, Guid userId)\n  {\n   QueryExpression userSettingsQuery = new QueryExpression(\"usersettings\");\n   userSettingsQuery.ColumnSet.AddColumns(\"uilanguageid\", \"systemuserid\");\n   userSettingsQuery.Criteria.AddCondition(\"systemuserid\", ConditionOperator.Equal, userId);\n   EntityCollection userSettings = service.RetrieveMultiple(userSettingsQuery);\n   if (userSettings.Entities.Count > 0)\n   {\n    return (int)userSettings.Entities[0][\"uilanguageid\"];\n   }\n   return 0;\n  }\n  protected static XmlDocument RetrieveXmlWebResourceByName(LocalPluginContext context, string webresourceSchemaName)\n  {\n   context.TracingService.Trace(\"Begin:RetrieveXmlWebResourceByName, webresourceSchemaName={0}\", webresourceSchemaName);\n   QueryExpression webresourceQuery = new QueryExpression(\"webresource\");\n   webresourceQuery.ColumnSet.AddColumn(\"content\");\n   webresourceQuery.Criteria.AddCondition(\"name\", ConditionOperator.Equal, webresourceSchemaName);\n   EntityCollection webresources = context.OrganizationService.RetrieveMultiple(webresourceQuery);\n   context.TracingService.Trace(\"Webresources Returned from server. Count={0}\", webresources.Entities.Count);\n   if (webresources.Entities.Count > 0)\n   {\n    byte[] bytes = Convert.FromBase64String((string)webresources.Entities[0][\"content\"]);\n    // The bytes would contain the ByteOrderMask. Encoding.UTF8.GetString() does not remove the BOM.\n    // Stream Reader auto detects the BOM and removes it on the text\n    XmlDocument document = new XmlDocument();\n    document.XmlResolver = null;\n    using (MemoryStream ms = new MemoryStream(bytes))\n    {\n     using (StreamReader sr = new StreamReader(ms))\n     {\n      document.Load(sr);\n     }\n    }\n    context.TracingService.Trace(\"End:RetrieveXmlWebResourceByName , webresourceSchemaName={0}\", webresourceSchemaName);\n    return document;\n   }\n   else\n   {\n    context.TracingService.Trace(\"{0} Webresource missing. Reinstall the solution\", webresourceSchemaName);\n    throw new InvalidPluginExecutionException(String.Format(\"Unable to locate the web resource {0}.\", webresourceSchemaName));\n    return null;\n // This line never reached\n   }\n  }\n  protected static string RetrieveLocalizedStringFromWebResource(LocalPluginContext context, XmlDocument resource, string resourceId)\n  {\n   XmlNode valueNode = resource.SelectSingleNode(string.Format(CultureInfo.InvariantCulture, \"./root/data[@name='{0}']/value\", resourceId));\n   if (valueNode != null)\n   {\n    return valueNode.InnerText;\n   }\n   else\n   {\n    context.TracingService.Trace(\"No Node Found for {0} \", resourceId);\n    throw new InvalidPluginExecutionException(String.Format(\"ResourceID {0} was not found.\", resourceId));\n   }\n  }\n```\n\n----------------------------------------\n\nTITLE: Filtering Records by Names or Companies Containing Search Text in Power Apps\nDESCRIPTION: This formula filters the Customers data source for records where the search text appears anywhere within either the Name or Company columns. It uses multiple 'in' operators with a logical OR operator.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerApps\nCODE:\n```\nFilter(Customers, SearchInput.Text in Name || SearchInput.Text in Company)\n```\n\n----------------------------------------\n\nTITLE: Localization Table Lookup in PowerFx\nDESCRIPTION: Formula for looking up localized text strings from an Excel table based on the user's language. The formula finds text matching the specified ID and the current language, falling back to a default if not found.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-language.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerFx\nCODE:\n```\nLookUp( Table1, TextID = \"Hello\" && (LanguageTag = Left( Language(), 2 ) || IsBlank( LanguageTag ))).LocalizedText\n```\n\n----------------------------------------\n\nTITLE: Retrieving Catalog Items with PowerShell using Web API\nDESCRIPTION: A PowerShell function that retrieves catalog items and their packages using the Dataverse Web API. It builds a query with specific columns, filters, and expands the package relationship, then formats the results as a table. Requires the Get-Records helper function from the Dataverse Web API PowerShell module.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-CatalogItems{\n\n   $columns = @(\n      \"mspcat_tpsid\",\n      \"mspcat_deploytype\",\n      \"mspcat_applicationtype\",\n      \"mspcat_businesscategory\",\n      \"mspcat_description\",\n      \"mspcat_applicationsid\",\n      \"_mspcat_publisherid_value\",\n      \"mspcat_name\",\n      \"statuscode\"\n   )\n   $select = \"?`$select=\" + ($columns -join ',')\n\n   $filter = \"&`$filter=statecode eq 0 and _mspcat_packageasset_value ne null\"\n\n   $expandColumns = @(\n      \"statecode\",\n      \"mspcat_uniquename\",\n      \"mspcat_version\",\n      \"statuscode\"\n   )\n\n   $expand = \"&`$expand=mspcat_PackageAsset\"\n   $expand += \"(`$select=\" + ($expandColumns -join ',')+ \")\"\n\n   (Get-Records `\n      -setName 'mspcat_applicationses' `\n      -query ($select + $filter + $expand)).value \n      | Format-Table @{Name='Catalog Item Name' ; Expression={$_.mspcat_name}}, `\n         @{Name='Publisher Name' ; Expression={$_.'_mspcat_publisherid_value@OData.Community.Display.V1.FormattedValue'}}, `\n         @{Name='Catalog Item ID' ; Expression={$_.mspcat_tpsid}}, `\n         @{Name='Revision ID' ; Expression={$_.mspcat_applicationsid }}, `\n         @{Name='Version' ; Expression={$_.mspcat_PackageAsset.mspcat_version}}, `\n         @{Name='Status' ; Expression={$_.mspcat_PackageAsset.'statuscode@OData.Community.Display.V1.FormattedValue'}}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Catalog Item in PowerShell\nDESCRIPTION: Installs a catalog item using the Microsoft Dynamics CRM API by constructing a URL with specified parameters. The function accepts catalogItemId and deployToOrgUrl as required parameters, sends a GET request to the API, and optionally includes settings and skipSendToCatalogService. It returns the mspcat_installhistoryid from the API response.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/install-items.md#2025-04-20_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n<#\\n.SYNOPSIS\\nInstalls a catalog item to a specified organization URL.\\n\\n.DESCRIPTION\\nThe `Install-CatalogItem` function installs a catalog item to a specified organization URL using the Microsoft Dynamics CRM API. \\nIt constructs the appropriate URL with mandatory and optional parameters and sends a GET request to the API.\\n\\n.PARAMETER catalogItemId\\nThe GUID ID of the catalog item to be installed. This parameter is mandatory.\\n\\n.PARAMETER deployToOrgUrl\\nThe URL of the organization where the catalog item will be deployed. This parameter is mandatory.\\n\\n.PARAMETER settings\\nOptional settings for the installation. This parameter is optional.\\n\\n.PARAMETER skipSendToCatalogService\\nA boolean flag indicating whether to skip sending to the catalog service. This parameter is optional.\\n\\n.RETURNVALUE\\nReturns the `mspcat_installhistoryid` value from the API response, which is the ID of the installation history record.\\n\\n.EXAMPLE\\n\\nInstall-CatalogItem `\\n   -catalogItemId df32c7c8-2137-ef11-8409-6045bdd3aec3 `\\n   -deployToOrgUrl 'https://<org to install item>.crm.dynamics.com/' `\\n   -settings = 'Key=Value|Key1=Value1'\\n#>\\nfunction Install-CatalogItem {\\n   param (\\n      [Parameter(Mandatory)]\\n      [string]\\n      $catalogItemId,\\n      [Parameter(Mandatory)]\\n      [string]\\n      $deployToOrgUrl,\\n      [string]\\n      $settings,\\n      [bool]\\n      $skipSendToCatalogService\\n   )\\n\\n   # This is a bound function that requires a GUID identifier for the \\n   # catalog item\\n   $url = $baseURI + 'mspcat_applicationses(' + $catalogItemId + ')'\\n   $url += '/Microsoft.Dynamics.CRM.mspcat_InstallCatalogItem'\\n   $url += '(DeployToOrganizationUrl=@deployToOrgUrl'\\n\\n   # Set optional parameters\\n   if ($settings) {\\n      $url += ',Settings=@settings'\\n   }\\n   if ($skipSendToCatalogService) {\\n      $url += ',SkipSendToCatalogService=@skipSendToCatalogService'\\n   }\\n\\n   $url += \")?@deployToOrgUrl='\" + $deployToOrgUrl +\"'\"\\n\\n   # Set optional parameter values\\n   if ($settings) {\\n      $url += \"&@settings='\" + $settings +\"'\"\\n   }\\n   if ($skipSendToCatalogService) {\\n      $url += '&@skipSendToCatalogService=' + $skipSendToCatalogService\\n   }\\n\\n   $results = Invoke-RestMethod `\\n      -Method Get `\\n      -Uri $url `\\n      -Headers $baseHeaders\\n\\n   return  $results.mspcat_installhistoryid\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Collections with IsEmpty Function in Power Fx\nDESCRIPTION: The IsEmpty function checks if a collection or table is empty. This snippet describes manipulating collections and determining whether they contain data, utilizing Power Fx's Collect and Clear functions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-isblank-isempty.md#2025-04-20_snippet_6\n\nLANGUAGE: Power Fx\nCODE:\n```\nCollect( IceCream, { Flavor: \\\"Strawberry\\\", Quantity: 300 }, { Flavor: \\\"Chocolate\\\", Quantity: 100 } )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nClear( IceCream )\n```\n\n----------------------------------------\n\nTITLE: Using AISummarize Function in Power Apps Canvas\nDESCRIPTION: This snippet demonstrates how to use the AISummarize function in a Power Apps canvas app. It sets up a button that, when pressed, summarizes a predefined text and displays the result in a text control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ai.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Summary, Environment.AISummarize( {Text: \"2, 4, 6, 8, 10, 12, 14, 16\"} ).SummarizedText )\n```\n\n----------------------------------------\n\nTITLE: Filtering Accounts with Multiple Choice Column Criteria in Power Apps\nDESCRIPTION: This formula filters an Accounts table based on values selected in three combo boxes. It uses logical OR conditions to include records that match the selected industry, relationship type, and preferred contact method, or to ignore the filter when no selection is made (IsBlank).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nFilter(Accounts,\n 'Industry' = ComboBox3.Selected.Industry Or IsBlank(ComboBox3.Selected.Industry),\n 'Relationship Type' = ComboBox2.Selected.'Relationship Type' Or\n   IsBlank(ComboBox2.Selected.'Relationship Type'),\n 'Preferred Method of Contact' = ComboBox1.Selected.'Preferred Method of Contact' Or\n   IsBlank(ComboBox1.Selected.'Preferred Method of Contact'))\n```\n\n----------------------------------------\n\nTITLE: Named Authentication with Service Principal in Power Platform CLI\nDESCRIPTION: This example authenticates using a service principal, naming the authentication 'MyOrg-SPN'. It requires an application ID, client secret, and tenant ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-create-intro.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npac auth create --name MyOrg-SPN --applicationId 00000000-0000-0000-0000-000000000000 --clientSecret $clientSecret --tenant 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Table Shaping on Demand in Power Apps\nDESCRIPTION: Filters products where quantity requested exceeds quantity available, adds a column for the order amount needed, and shows only relevant columns. This approach avoids making a copy of the data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\n// Table shaping on demand, no need for a copy of the result\nShowColumns(\n    AddColumns(\n        Filter( Products, 'Quantity Requested' > 'Quantity Available' ),\n        \"Quantity To Order\", 'Quantity Requested' - 'Quantity Available'\n    ),\n    \"Product\",\n    \"Quantity To Order\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Filter Function in Power Fx\nDESCRIPTION: The Filter function retrieves records from a table that satisfy a specified formula. The function evaluates each record and returns those that match the criteria, allowing for complex filtering.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_0\n\nLANGUAGE: powerfx\nCODE:\n```\n\"Filter(Table, Formula1 [, Formula2, ...])\"\n```\n\n----------------------------------------\n\nTITLE: Resolving Approval Requests with .NET SDK\nDESCRIPTION: Static method that resolves a catalog submission approval using the mspcat_ResolveApproval message in the Dataverse SDK for .NET. It requires an authenticated IOrganizationService instance, the certification request ID, approval decision, and message for the submitter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Resolves a catalog submission approval\n/// </summary>\n/// <param name=\"service\">The authenticated IOrganizationService instance.</param>\n/// <param name=\"certificationRequestId\">The ID of the certification request.</param>\n/// <param name=\"requestsuccess\">The decision to approve or reject the request.</param>\n/// <param name=\"message\">Information for the submitter about the resolution</param>\nstatic void ResolveApproval(\n   IOrganizationService service,\n   Guid certificationRequestId,\n   bool requestsuccess,\n   string message)\n{\n\n   mspcat_ResolveApprovalRequest request = new()\n   {\n         Target = new EntityReference(\"mspcat_certificationrequest\", certificationRequestId),\n         requestsuccess = requestsuccess,\n         message = message\n   };\n\n   // mspcat_ResolveApprovalResponse has no properties to return\n   service.Execute(request);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Unmanaged Solution in Dataverse using C#\nDESCRIPTION: Creates an unmanaged solution in Dataverse using a publisher reference. The code checks if the solution already exists by querying for its unique name, and only creates a new solution if it doesn't exist. This is a key step in implementing proper application lifecycle management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a solution\nSolution solution = new Solution\n{\n   UniqueName = \"sample-solution\",\n   FriendlyName = \"Sample solution\",\n   PublisherId = new EntityReference(Publisher.EntityLogicalName, _publisherId),\n   Description = \"This solution was created by sample code.\",\n   Version = \"1.0\"\n};\n\n// Check whether the solution already exists\nQueryExpression queryCheckForSampleSolution = new QueryExpression\n{\n   EntityName = Solution.EntityLogicalName,\n   ColumnSet = new ColumnSet(),\n   Criteria = new FilterExpression()\n};\n\nqueryCheckForSampleSolution.Criteria.AddCondition(\"uniquename\",\n   ConditionOperator.Equal, solution.UniqueName);\n\n// Attempt to retrieve the solution\nEntityCollection querySampleSolutionResults =\n   _serviceProxy.RetrieveMultiple(queryCheckForSampleSolution);\n\n// Create the solution if it doesn't already exist\nSolution SampleSolutionResults = null;\n\nif (querySampleSolutionResults.Entities.Count > 0)\n{\n   SampleSolutionResults = (Solution)querySampleSolutionResults.Entities[0];\n   _solutionsSampleSolutionId = (Guid)SampleSolutionResults.SolutionId;\n}\n\nif (SampleSolutionResults == null)\n{\n   _solutionsSampleSolutionId = _serviceProxy.Create(solution);\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Removing Role Assignments After Expiration\nDESCRIPTION: Example PowerShell script that uses the Remove-RoleAssignmentFromUsers cmdlet to remove users from the System Administrator security role after their assignment expires in PIM. This script is part of the clean-up activity needed since role assignments aren't automatically removed upon expiration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-high-privileged-admin-roles.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-RoleAssignmentFromUsers\n-roleName \"System Administrator\" \n-usersFilePath \"C:\\Users\\<My-Name>\\Desktop\\<names.csv>\"\n-environmentUrl \"<my-name>-environment.crm.dynamics.com\"\n# Or, include all your environments\n-processAllEnvironments $true\n-geo \"NA\"\n-outputLogsDirectory \"C:\\Users\\<My-Name>\\Desktop\\<log-files>\"\n```\n\n----------------------------------------\n\nTITLE: Predefined Pattern Matching\nDESCRIPTION: Examples using predefined patterns to validate common data formats like SSN, email, and numeric patterns\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ismatch.md#2025-04-20_snippet_5\n\nLANGUAGE: powerapps\nCODE:\n```\nIsMatch( \"123-45-7890\", Digit & Digit & Digit & Hyphen & Digit & Digit & Hyphen & Digit & Digit & Digit & Digit )\nIsMatch( \"joan@contoso.com\", Email )\nIsMatch( \"123.456\", MultipleDigits & Period & OptionalDigits )\nIsMatch( \"123\", MultipleDigits & Period & OptionalDigits )\n```\n\n----------------------------------------\n\nTITLE: Using With and Patch for Order and OrderDetails in Power Fx\nDESCRIPTION: This example demonstrates using With and Patch functions to add a record to the Orders table and create related records in the OrderDetails table using the returned primary key.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-with.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nWith( Patch( Orders, Defaults( Orders ), { OrderStatus: \"New\" } ),\n      ForAll( NewOrderDetails,\n              Patch( OrderDetails, Defaults( OrderDetails ),\n                     { Order: OrderID,          // from With's first argument, primary key of Patch result\n                       Quantity: Quantity,      // from ForAll's NewOrderDetails table\n                       ProductID: ProductID }   // from ForAll's NewOrderDetails table\n              )\n      )\n)\n```\n\n----------------------------------------\n\nTITLE: Using AIClassify Function in Power Apps Canvas\nDESCRIPTION: This snippet demonstrates how to use the AIClassify function in a Power Apps canvas app. It classifies the text in the 'Subject' variable into predefined categories and displays the result.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ai.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Result, Environment.AIClassify( {Text:Subject, Categories: [\"Housing\", \"Food\"]} ).Classification )\n```\n\n----------------------------------------\n\nTITLE: Example: If Statement with Multiple Conditions and DefaultResult\nDESCRIPTION: An If statement with multiple conditions and a DefaultResult. When all conditions are false, the DefaultResult is returned.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_8\n\nLANGUAGE: PowerFx\nCODE:\n```\nIf( Slider1.Value > 1000, \"Result1\", Slider1.Value > 50, \"Result2\", \"Result3\")\n```\n\n----------------------------------------\n\nTITLE: Using IsToday() with DateAdd() and Today() function in Power Fx\nDESCRIPTION: This example retrieves the current date, adds 12 days to it using the DateAdd() function, and then checks if the resulting date falls between midnight today and midnight tomorrow using IsToday().\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\n\"IsToday( DateAdd( Today(), 12 ) )\"\n```\n\n----------------------------------------\n\nTITLE: Using AIReply Function in Power Apps Canvas\nDESCRIPTION: This snippet demonstrates how to use the AIReply function in a Power Apps canvas app. It generates a reply to the text in the 'Subject' variable and displays the result.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ai.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Result, Environment.AIReply( {Text:Subject} ).PreparedResponse )\n```\n\n----------------------------------------\n\nTITLE: Sort by Numeric Column Example in Power Fx\nDESCRIPTION: Examples showing how to sort a table numerically by a number column using both Sort and SortByColumns functions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nSort( IceCream, Quantity )\n\nSortByColumns( IceCream, \"Quantity\" )\n```\n\n----------------------------------------\n\nTITLE: Switch Function Syntax in PowerFx\nDESCRIPTION: Syntax for the Switch function in PowerFx. The Switch function evaluates a formula and determines if the result matches any value in a sequence, returning a corresponding value when a match is found.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerFx\nCODE:\n```\nSwitch( Formula, Match1, Result1 [, Match2, Result2, ... [, DefaultResult ] ] )\n```\n\n----------------------------------------\n\nTITLE: Using IsToday() function in Power Fx\nDESCRIPTION: This example tests whether the current date and time, obtained using Now(), falls between midnight today and midnight tomorrow. The IsToday() function returns a boolean value indicating whether the given DateTime value falls within the current day.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\n\"IsToday( Now() )\"\n```\n\n----------------------------------------\n\nTITLE: Creating Connector in Specified Environment using pac connector create\nDESCRIPTION: This PowerShell command creates a connector in a specified environment. It uses the 'pac connector create' command with API definition and properties files, along with an environment GUID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-create-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac connector create `\n  --api-definition-file ./apiDefinition.json `\n  --api-properties-file ./apiProperties.json\n  --environment 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Storing a Single Random Number in a Variable using Rand in Power Fx\nDESCRIPTION: This example illustrates how to use the Set function to store a single random number generated by Rand or RandBetween into a variable for later use in the application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-rand.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\nSet(RandomNumber, Rand())\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nSet(RandNumber, RandBetween(1, 20))\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Behavior using SearchBox Control in Power Platform\nDESCRIPTION: This snippet demonstrates how to create a search experience by utilizing the SearchBox control. The example uses the 'Search' function to filter the accounts based on the input provided in the SearchBox. It is intended to be used in the context of canvas apps or custom pages where a dynamic search interface is needed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/searchbox.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSearch( Accounts, SearchBox.SearchText, \"name\" )\n```\n\n----------------------------------------\n\nTITLE: Using AISummarize Function in Power Apps Canvas\nDESCRIPTION: This snippet shows how to use the AISummarize function in a Power Apps canvas app. It summarizes the text in the 'Subject' variable and displays the result.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ai.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Result, Environment.AISummarize( {Text:Subject} ).SummarizedText )\n```\n\n----------------------------------------\n\nTITLE: Using Param for App Navigation - Power FX\nDESCRIPTION: This example demonstrates how to use the Param function within the StartScreen property to conditionally set the starting screen of a Power App based on URL parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_9\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Param(\"screen\") = \"techspecs\", TechSpecs )\n```\n\n----------------------------------------\n\nTITLE: Parsing Nested JSON Objects\nDESCRIPTION: This snippet shows how to parse a nested JSON structure into an Untyped object and access its fields using dot notation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( jsonObject, ParseJSON( jsonStringVariable ) );\n\nSet( parentName, Text( jsonObject.RootElement.Parent.Name ) ); // \"This is the parent\"\n\nSet( childName, Text( jsonObject.RootElement.Parent.Child.Name ) ); // \"This is the child\"\n```\n\n----------------------------------------\n\nTITLE: Adding New Column to Existing Dataverse Table\nDESCRIPTION: Process for extending an existing Dataverse table by adding new columns within a solution, including table selection and column configuration steps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/modify-components.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to make.powerapps.com\n2. Go to CoE development environment\n3. Go to Solutions\n4. Select solution\n5. Select Add existing > Table\n6. Search and select table\n7. Select Add\n8. Select table\n9. In Columns tab, select Add Column\n10. Fill in field details\n11. Select Save Table\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Pattern Matching\nDESCRIPTION: Advanced pattern matching using regular expressions for validating currency amounts, SSNs, and password strength\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ismatch.md#2025-04-20_snippet_6\n\nLANGUAGE: regex\nCODE:\n```\nIsMatch( \"986\", \"\\d+\" )\nIsMatch( \"1.02\", \"\\d+(\\.\\d\\d)?\" )\nIsMatch( \"-4.95\", \"(-)?\\d+(\\.\\d\\d)?\" )\nIsMatch( \"111-11-1111\", \"\\d{3}-\\d{2}-\\d{4}\" )\nIsMatch( \"111-111-111\", \"\\d{3}-\\d{2}-\\d{4}\" )\nIsMatch( \"AStrongPasswordNot\", \"(?!^[0-9]*$)(?!^[a-zA-Z]*$)([a-zA-Z0-9]{8,10})\" )\n```\n\n----------------------------------------\n\nTITLE: Rendering Links in DetailsList - Power Fx\nDESCRIPTION: Configures a column in a DetailsList to render its content as a clickable link, triggering an OnChange event when selected. This setup uses the ColCellType property set to 'link'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\n  {\n        ColName: \"name\",\n        ColDisplayName: \"Account Name\",\n        ColWidth: 150,\n        ColIsBold:true,\n        ColCellType: \"link\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Using IsNumeric Function in Power FX\nDESCRIPTION: The IsNumeric function tests whether a value is numeric and returns a Boolean true or false. It accepts a single required parameter that represents the value to test.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-isnumeric.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\nIsNumeric( Value )\n```\n\n----------------------------------------\n\nTITLE: Converting Date/Time Value to String in Power Platform\nDESCRIPTION: This formula converts a date/time value into a text string using the Text function. One can control the output format by supplying a format string or using members of the DateTimeFormat enumeration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nText(DateTimeValue(\"01/04/2003\"))\n```\n\n----------------------------------------\n\nTITLE: Using Upper Function with Table Column in Power Fx\nDESCRIPTION: Converts all characters in a column of text to uppercase. The function works with a single-column table created from the 'Address' column of the 'People' data source.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-lower-upper-proper.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Fx\nCODE:\n```\nUpper( ShowColumns( People, \"Address\" ) )\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas App Using Connector ID - PowerShell\nDESCRIPTION: Creates a canvas app (.msapp file) from an OpenAPI Definition using the custom connector's unique identifier. This approach provides a more specific way to target the exact connector when multiple connectors might share similar names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-create-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac canvas create --msapp HelloWorld.msapp --connector-id 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Updating Context Variables Using Power Fx\nDESCRIPTION: The provided Power Fx code snippets demonstrate the basic usage of the UpdateContext function to create or update context variables within a screen in Power Apps. This function is essential for handling temporary data storage when building applications. The variables are scoped to the screen and persist until the app is closed. Commonly, UpdateContext is used in behavior formulas and requires no explicit declaration of variables.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-updatecontext.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nUpdateContext( { Counter: 1 } )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nUpdateContext( { Counter: 2 } )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nUpdateContext( { Name: \"Lily\", Score: 10 } )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nUpdateContext( { Person: { Name: \"Milton\", Address: \"1 Main St\" } } )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nUpdateContext( { Person: Patch( Person, { Address: \"2 Main St\" } ) } )\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message from Errors Function\nDESCRIPTION: This snippet explains how to set a label's Text property to show error messages returned by the Errors function. It helps in informing the user about any errors encountered during data modifications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-errors.md#2025-04-20_snippet_2\n\nLANGUAGE: Power FX\nCODE:\n```\nLabel.Text = First(Errors( IceCream, EditRecord )).Message\n```\n\n----------------------------------------\n\nTITLE: Detecting Delete Dependencies for Solution Components in C#\nDESCRIPTION: This code demonstrates how to use the RetrieveDependenciesForDeleteRequest message to identify solution components that would prevent a specific component from being deleted. In this example, it checks for attributes that use a global choice column which would prevent that global choice from being deleted.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Use the RetrieveOptionSetRequest message to retrieve  \n// a global option set by it's name.\nRetrieveOptionSetRequest retrieveOptionSetRequest =\n    new RetrieveOptionSetRequest\n    {\n     Name = _globalOptionSetName\n    };\n\n// Execute the request.\nRetrieveOptionSetResponse retrieveOptionSetResponse =\n    (RetrieveOptionSetResponse)_serviceProxy.Execute(\n    retrieveOptionSetRequest);\n_globalOptionSetId = retrieveOptionSetResponse.OptionSetMetadata.MetadataId;\nif (_globalOptionSetId != null)\n{ \n // Use the global OptionSet MetadataId with the appropriate componenttype\n // to call RetrieveDependenciesForDeleteRequest\n RetrieveDependenciesForDeleteRequest retrieveDependenciesForDeleteRequest = new RetrieveDependenciesForDeleteRequest \n{ \n ComponentType = (int)componenttype.OptionSet,\n ObjectId = (Guid)_globalOptionSetId\n};\n\n RetrieveDependenciesForDeleteResponse retrieveDependenciesForDeleteResponse =\n  (RetrieveDependenciesForDeleteResponse)_serviceProxy.Execute(retrieveDependenciesForDeleteRequest);\n Console.WriteLine(\"\");\n foreach (Dependency d in retrieveDependenciesForDeleteResponse.EntityCollection.Entities)\n {\n\n  if (d.DependentComponentType.Value == 2)//Just testing for Attributes\n  {\n   String attributeLabel = \"\";\n   RetrieveAttributeRequest retrieveAttributeRequest = new RetrieveAttributeRequest\n   {\n    MetadataId = (Guid)d.DependentComponentObjectId\n   };\n   RetrieveAttributeResponse retrieveAttributeResponse = (RetrieveAttributeResponse)_serviceProxy.Execute(retrieveAttributeRequest);\n\n   AttributeMetadata attmet = retrieveAttributeResponse.AttributeMetadata;\n\n   attributeLabel = attmet.DisplayName.UserLocalizedLabel.Label;\n  \n    Console.WriteLine(\"An {0} named {1} will prevent deleting the {2} global option set.\", \n   (componenttype)d.DependentComponentType.Value, \n   attributeLabel, \n   _globalOptionSetName);\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Cylinder Volume with Named Values in Power Fx\nDESCRIPTION: This example uses the With function to calculate the volume of a cylinder using named values for radius and height.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-with.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nWith( { radius: 10,\n        height: 15 },\n    Pi() * (radius*radius) * height\n)\n// Result: 4712.38898038 (as shown in a label control)\n```\n\n----------------------------------------\n\nTITLE: Using Hour() with UTCNow() function in Power Fx\nDESCRIPTION: This example retrieves the current date and time in UTC using UTCNow(), and then extracts the hour component using the Hour() function. It demonstrates how to work with UTC time values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\n\"Hour( UTCNow() )\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Records in Power Fx\nDESCRIPTION: Utilizes the Filter function to identify products in the Products table where the quantity requested exceeds the quantity available. This function evaluates a formula within a record scope to include only matching records.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nFilter( Products, 'Quantity Requested' > 'Quantity Available' )\n```\n\n----------------------------------------\n\nTITLE: Nested With Function for Interest Calculation in Power Fx\nDESCRIPTION: This example demonstrates nested With functions to create a two-tier calculation for monthly mortgage payments, using slider controls for input values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-with.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nWith( { AnnualRate: RateSlider/8/100,        // slider moves in 1/8th increments and convert to decimal\n        Amount: AmountSlider*10000,          // slider moves by 10,000 increment\n        Years: YearsSlider,                  // slider moves in single year increments, no adjustment required\n        AnnualPayments: 12 },                // number of payments per year\n      With( { r: AnnualRate/AnnualPayments,  // interest rate\n              P: Amount,                     // loan amount\n              n: Years*AnnualPayments },     // number of payments\n            r*P / (1 - (1+r)^-n)             // standard interest calculation\n      )\n)\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time in PowerApps\nDESCRIPTION: This snippet shows how to format current date and time in various ways using the Text function, including long date, long date and time, and formats for short date and custom patterns. The result varies based on current user settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( Now(), DateTimeFormat.LongDate )\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( Now(), DateTimeFormat.LongDateTime )\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( Now(), DateTimeFormat.LongTime24 )\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( Now(), DateTimeFormat.ShortDate )\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( Now(), \"d-mmm-yy\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText(1448318857*1000, \"mmm. dd, yyyy (hh:mm:ss AM/PM)\")\n```\n\n----------------------------------------\n\nTITLE: Removing an Item Using a Trash Icon (Power Fx)\nDESCRIPTION: This snippet shows how to remove an item from a data source using a trash icon inside a Power Apps gallery. It uses the `Remove` function with the `ThisItem` property to specify the record to be removed from the `Contacts` data source. The `[@Contacts]` syntax is used for global disambiguation to avoid conflicts with one-to-many relationships.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-remove-removeif.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nRemove( [@Contacts], ThisItem )\n```\n\n----------------------------------------\n\nTITLE: Power Platform Create Environment with Advanced Configuration\nDESCRIPTION: Azure DevOps task for creating a Power Platform environment with detailed configuration options, including service principal authentication, production SKU, template apps, location, language, and currency.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_18\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.create-environment.PowerPlatformCreateEnvironment@2\n  displayName: 'Power Platform Create Environment '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n    DisplayName: 'First Coffee prod'\n    EnvironmentSku: Production\n    AppsTemplate: 'D365_CustomerService,D365_FieldService'\n    LocationName: canada\n    LanguageName: 1036\n    CurrencyName: ALL\n    DomainName: firstcoffee\n```\n\n----------------------------------------\n\nTITLE: Creating CommandBar Items with Power Fx\nDESCRIPTION: This Power Fx snippet demonstrates defining items for the CommandBar control by specifying their display names, icons, and unique keys. It acts as a foundational code for setting up the items displayed in the CommandBar. These items form the action commands when integrated in canvas apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/commandbar.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    {\n        ItemKey: \"new\",\n        ItemDisplayName: \"New\",\n        ItemIconName: \"Add\"\n    },\n    {\n        ItemKey: \"edit\",\n        ItemDisplayName: \"Edit\",\n        ItemIconName: \"Edit\"\n    },{\n        ItemKey: \"delete\",\n        ItemDisplayName: \"Delete\",\n        ItemIconName: \"Delete\"\n    },{\n        ItemKey: \"refresh\",\n        ItemDisplayName: \"Refresh\",\n        ItemIconName: \"refresh\"\n    },{\n        ItemKey: \"help\",\n        ItemDisplayName: \"Help\",\n        ItemIconName: \"help\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Power Platform API using PowerShell\nDESCRIPTION: Script to authenticate using MSAL.PS module and obtain access token for Power Platform API. Requires the MSAL.PS module and uses a specific client ID for authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-environmentmanagement-settings.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module \"MSAL.PS\"\n$AuthResult = Get-MsalToken -ClientId '49676daf-ff23-4aac-adcc-55472d4e2ce0' -Scope 'https://api.powerplatform.com/.default'\n$Headers = @{Authorization = \"Bearer $($AuthResult.AccessToken)\"}\n```\n\n----------------------------------------\n\nTITLE: Example: Basic Switch Statement\nDESCRIPTION: A simple Switch statement that evaluates a value and checks for a match. When the value matches, it returns the corresponding result.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerFx\nCODE:\n```\nSwitch( Slider1.Value, 25, \"Result1\" )\n```\n\n----------------------------------------\n\nTITLE: Creating Functions with LibraryType and BookType - Power Fx\nDESCRIPTION: This snippet illustrates the creation of two user-defined functions, SortedBooks and PublishedInLeapYear, that utilize the previously defined LibraryType and BookType. The SortedBooks function sorts the library by author and title, while the PublishedInLeapYear function checks if a book was published in a leap year.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-type.md#2025-04-20_snippet_1\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nSortedBooks( books: LibraryType ): LibraryType = \n    SortByColumns( Library, Author, SortOrder.Ascending, Title, SortOrder.Ascending );\n\nPublishedInLeapYear( book: BookType ): Boolean = \n    Mod( book.Published, 4 ) = 0 And \n    (Mod( book.Published, 100 ) <> 0 Or Mod( book.Published, 400 ) = 0);\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Sales Using Sum Function in Power Apps\nDESCRIPTION: This snippet demonstrates how to use the Sum function to calculate total sales by multiplying cost per unit and units sold for each record in a Sales data source.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-aggregates.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerFx\nCODE:\n```\nSum(Sales, CostPerUnit * UnitsSold)\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Sort Example in Power Fx\nDESCRIPTION: Examples showing how to sort a table by multiple columns using both nested Sort functions and SortByColumns with multiple column parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nSort( Sort( IceCream, OnOrder ), Quantity )\n\nSortByColumns( IceCream, \"OnOrder\", SortOrder.Ascending, \"Quantity\", SortOrder.Ascending )\n```\n\n----------------------------------------\n\nTITLE: Using Back Function in Power Fx\nDESCRIPTION: The Back function returns to the previously displayed screen, typically using the inverse of the transition that was used to navigate forward. It returns true unless the user hasn't navigated since starting the app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-navigate.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nBack( [ Transition ] )\n```\n\n----------------------------------------\n\nTITLE: Creating Connection with pac CLI in PowerShell\nDESCRIPTION: This snippet demonstrates how to use the 'pac connection create' command to establish a new connection in the Power Platform environment. The command is part of the Power Platform CLI toolset for managing connections.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connection-create-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac connection create\n```\n\n----------------------------------------\n\nTITLE: Basic LoadData Usage in Power Fx\nDESCRIPTION: Loads a previously saved collection named 'MyCache' into the LocalCache collection from device storage.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-savedata-loaddata.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nLoadData( LocalCache, \"MyCache\" )\n```\n\n----------------------------------------\n\nTITLE: Initializing Power Apps Component Framework Project with CLI\nDESCRIPTION: The 'pac pcf init' command initializes a new Power Apps component framework project. It includes optional parameters for specifying the rendering framework, component name, namespace, output directory, and template.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/pcf.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## pac pcf init\n\nInitializes a directory with a new Power Apps component framework project\n\n### Optional Parameters for pcf init\n\n#### `--framework` `-fw`\n\nThe rendering framework for control. The default value is 'none', which means HTML.\n\nUse one of these values:\n\n- `none`\n- `react`\n\n#### `--name` `-n`\n\nThe name for the component.\n\n**Note**: Only characters within the ranges [A - Z], [a - z] or [0 - 9] are allowed. The first character may not be a number.\n\n#### `--namespace` `-ns`\n\nThe namespace for the component.\n\n**Note**: Only characters within the ranges [A - Z], [a - z], [0 - 9], or '.' are allowed. The first and last character may not be the '.' character. Consecutive '.' characters are not allowed. Numbers are not allowed as the first character or immediately after a period.\n\n#### `--outputDirectory` `-o`\n\nOutput directory\n\n#### `--run-npm-install` `-npm`\n\nAuto run 'npm install' after the control is created. The default value is 'false'.\n\nThis parameter requires no value. It's a switch.\n\n#### `--template` `-t`\n\nChoose a template for the component.\n\nUse one of these values:\n\n- `field`\n- `dataset`\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Boolean Values in Power Fx\nDESCRIPTION: Examples of using the Boolean function to convert text strings to Boolean values, including handling of case-insensitive variations and error cases.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-boolean.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nBoolean( \"true\" )\nBoolean( \"false\" )\nBoolean( \"TRUE\" )\nBoolean( \"TrUe\" )\nBoolean( \"Truthful\" )\nBoolean( Blank() )\n```\n\n----------------------------------------\n\nTITLE: Loading Data Sequentially in Power Fx\nDESCRIPTION: This code demonstrates how to load data sequentially using ClearCollect in Power Fx. Each ClearCollect call retrieves data from a data source, and the next call starts only after the previous one completes. This method can be slower than loading data concurrently, especially with multiple data sources.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-concurrent.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( Product, '[SalesLT].[Product]' );\nClearCollect( Customer, '[SalesLT].[Customer]' );\nClearCollect( SalesOrderDetail, '[SalesLT].[SalesOrderDetail]' );\nClearCollect( SalesOrderHeader, '[SalesLT].[SalesOrderHeader]' )\n```\n\n----------------------------------------\n\nTITLE: Basic Split Function Usage in Power Fx\nDESCRIPTION: Examples of basic Split function usage to break text strings using comma separators and forward slashes. Shows how to split lists of items and dates.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-split.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nSplit( \"Apples, Oranges, Bananas\", \",\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nTrimEnds( Split( \"Apples, Oranges, Bananas\", \",\" ) )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nSplit( \"08/28/17\", \"/\" )\n```\n\n----------------------------------------\n\nTITLE: Convert date and time string to long date time in Power Fx\nDESCRIPTION: This snippet converts a date and time string from a text input control to a date/time value and displays it as a long date/time format, using the user's locale. It uses the `DateTimeValue` function to convert the string and the `Text` function with `DateTimeFormat.LongDateTime` to format the output.  The input is taken from `Start.Text`.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datevalue-timevalue.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nText( DateTimeValue( Start.Text ), DateTimeFormat.LongDateTime )\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Power Fx\nDESCRIPTION: This snippet creates a collection named IceCreamSales using the ClearCollect function. It initializes the collection with a table of dictionaries, each representing a type of ice cream with attributes like Flavor, UnitPrice, and QuantitySold. This example requires the Button control in Power Apps to execute the formula on interaction.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-table-shaping.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( IceCreamSales,\n   Table(\n       { Flavor: \"Strawberry\", UnitPrice: 1.99, QuantitySold: 20 },\n       { Flavor: \"Chocolate\", UnitPrice: 2.99, QuantitySold: 45 },\n       { Flavor: \"Vanilla\", UnitPrice: 1.50, QuantitySold: 35 }\n   )\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Initial Screen Navigation Using Parameters in Power Apps\nDESCRIPTION: This function uses the 'Param' function to check if the 'admin-mode' parameter is set to 1, determining whether to display the 'HomeScreen' or 'AdminScreen' first. It highlights how conditional logic can influence the StartScreen property.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_13\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Param( \"admin-mode\" ) = 1, HomeScreen, AdminScreen )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Cloud Flow Copy in Power Platform\nDESCRIPTION: Step-by-step instructions for creating a copy of an existing cloud flow for customization within the CoE Starter Kit. Includes steps for saving, renaming, and importing the flow into an unmanaged solution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/modify-components.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to make.powerapps.com\n2. Go to your CoE development environment\n3. Go to Solutions\n4. Select CoE StaterKit solution\n5. Select Cloud Flows\n6. Select desired flow\n7. Click Save as\n8. Change flow name\n9. Open target solution\n10. Select Add existing > Automation > Cloud flow\n11. Select Outside Dataverse\n12. Select copied flow\n13. Click Save as\n14. Click Edit\n```\n\n----------------------------------------\n\nTITLE: Removing a Selected Record with a Button (Power Fx)\nDESCRIPTION: This snippet shows how to remove a selected record from a Power Apps gallery using a button placed outside the gallery. It uses the `Remove` function in Power Fx to delete the record currently selected in `Gallery1` from the `Contacts` data source. The `Gallery1.Selected` property provides the record to be removed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-remove-removeif.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nRemove( Contacts, Gallery1.Selected )\n```\n\n----------------------------------------\n\nTITLE: ForAll with Power Function in Power Apps\nDESCRIPTION: Example showing how to use ForAll to raise each value in the collection to the third power. This requires ForAll since the Power function doesn't support single-column tables directly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll( Squares, Power( Value, 3 ) )\n```\n\n----------------------------------------\n\nTITLE: Configuring OnSelect Behavior in CommandBar\nDESCRIPTION: This Power Fx code demonstrates how to configure specific actions for each CommandBar item by using the Switch function based on the selected ItemKey. Replace the 'false' with valid expressions to perform tasks like patching, removing, or refreshing data for the corresponding item key in a Power Apps canvas application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/commandbar.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSwitch( Self.Selected.ItemKey,\n  /* Action for ItemKey 'new' (e.g., Patch function) */\n  \"new\", false,\n  \n  /* Action for 'edit' (e.g., Patch function) */\n  \"edit\", false,\n  \n  /* Action for 'delete' (e.g., Remove function ) */\n  \"delete\", false,\n  \n  /* Action for 'refresh' (e.g., Refresh function) */\n  \"refresh\", false,\n  \n  /* Action for 'help' (e.g., email support with the Office 365 connector ) */\n  \"help\", false,\n\n  /* Default action */\n  false\n)\n```\n\n----------------------------------------\n\nTITLE: AddColumns with Delegated Filter Example in Power Apps\nDESCRIPTION: Demonstrates how to add a new column to a table of real estate agents containing their listings by using a delegated Filter operation. Note that while the Filter is delegated, the overall result is limited by the non-delegation record limit.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-table-shaping.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nAddColumns( RealEstateAgents,\n   Listings,\n   Filter(  '[dbo].[AllListings]', ListingAgentName = AgentName )\n)\n```\n\n----------------------------------------\n\nTITLE: Serializing Runtime Settings for Catalog Item Installation\nDESCRIPTION: Method to convert a dictionary of settings into a serialized string for catalog item installation parameters\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/install-items.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstring serializedSettings = string.Join(\"|\", settings.Select(kvp => $\"{kvp.Key}:{kvp.Value}\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Colors with RGBA Function in Power Fx\nDESCRIPTION: Demonstrates the usage of the RGBA function to create colors by specifying red, green, blue, and alpha components. The alpha value ranges from 0 (transparent) to 1 (opaque).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\nRGBA( Red, Green, Blue, Alpha )\n```\n\n----------------------------------------\n\nTITLE: Using If Statement for Navigation Based on Text Input in Power Apps\nDESCRIPTION: This formula uses the If and IsBlank functions to check if a text input control has a value. If the control is not blank, it navigates to Screen1 with no transition effect.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_12\n\nLANGUAGE: PowerApps\nCODE:\n```\nIf( ! IsBlank( FirstName.Text ), Navigate( Screen1, ScreenTransition.None ) )\n```\n\n----------------------------------------\n\nTITLE: Convert date and time string with fractional seconds in Power Fx\nDESCRIPTION: This snippet converts a date and time string from a text input control to a date/time value and displays it with fractional seconds. It uses the `DateTimeValue` function to convert the string and the `Text` function with a custom format string to display the fractional seconds.  The input is read from `Start.Text`.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datevalue-timevalue.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nText( DateTimeValue( Start.Text ), \"dddd, mmmm dd, yyyy hh:mm:ss.fff AM/PM\" )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Connector Actions Using PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to use the Get-AdminPowerAppConnectorAction cmdlet to retrieve a list of available actions for a specific connector. The example shows both the basic command and its application for the MSN Weather connector.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-action-control.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminPowerAppConnectorAction\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminPowerAppConnectorAction -ConnectorName shared_msnweather\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Cancel Functionality in Power Apps\nDESCRIPTION: Creates a Cancel button that resets the form to its original values and navigates back to the previous screen. This provides users with a way to abandon form edits without saving changes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_8\n\nLANGUAGE: PowerFx\nCODE:\n```\nResetForm( EditForm ); Back()\n```\n\n----------------------------------------\n\nTITLE: Using Navigate Function in Power Fx\nDESCRIPTION: The Navigate function displays a specified screen with an optional visual transition effect. It can also pass context variables to the target screen, allowing data to be transferred between screens. It returns true unless an error occurs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-navigate.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nNavigate( Screen [, Transition [, UpdateContextRecord ] ] )\n```\n\n----------------------------------------\n\nTITLE: Updating Power Platform DLP Policies to Include Flow Triggers in PowerShell\nDESCRIPTION: This PowerShell script updates Power Platform data loss prevention policies to include triggers identified as at risk of being blocked. It takes a CSV file of impacted flows as input, processes each policy, and adds missing trigger operations to the appropriate connector configurations. The script requires Microsoft Entra tenant ID and Administrator access to Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/identify-blocked-flows-data-policies.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Prompt user to capture TenantId\n$TenantId = Read-Host \"Please provide your Microsoft Entra TenantId Guid\"\nif($TenantId -eq \"\")\n{\n    Write-Host \"TenantId is required. Exiting...\" -ForegroundColor Red\n    Exit;\n}\n\nfunction Is-Guid {\n    param (\n        [string]$Guid\n    )\n    try {\n        [Guid]::Parse($Guid) | Out-Null\n        return $true\n    } catch {\n        return $false\n    }\n}\n\nif (-not (Is-Guid -Guid $TenantId)) {\n    Write-Host \"TenantId is not a valid Guid format. Exiting...\" -ForegroundColor Red\n    Exit;\n}\n\n# Load Power Platform Administration PowerShell module\nImport-Module Microsoft.PowerApps.Administration.PowerShell -ErrorAction Stop\nImport-Module Microsoft.PowerApps.PowerShell -ErrorAction Stop\n\nAdd-PowerAppsAccount\n\n# Prompt for CSV file path\n$csvPath = Read-Host \"Enter the path to ImpactedFlows.csv\"\nif (-not (Test-Path $csvPath)) {\n    Write-Host \"File not found at $csvPath. Exiting...\" -ForegroundColor Red\n    Exit;\n}\n\n# Import the CSV data\n$impactedFlows = Import-Csv -Path $csvPath\n\n# Group by PolicyId for efficient updates\n$groupedPolicies = $impactedFlows | Group-Object -Property PolicyId\n\nforeach ($policyGroup in $groupedPolicies) {\n    $policyId = $policyGroup.Name\n    $flowsInPolicy = $policyGroup.Group\n    $policyNeedsUpdated = $false\n\n    Write-Host \"Processing DLP Policy: $policyId\" -ForegroundColor Cyan\n\n    # Get existing connector configurations for the policy\n    try {\n        $connectorConfigurations = Get-PowerAppDlpPolicyConnectorConfigurations -TenantId $TenantId -PolicyName $policyId\n    } catch {\n        Write-Host \"Failed to retrieve connector configurations for policy $policyId : $_\" -ForegroundColor Red\n        continue\n    }\n\n    foreach ($flow in $flowsInPolicy) {\n        $connectorId = $flow.ConnectorId\n        $triggerOperationId = $flow.TriggerOperationId\n\n        # Check if the connector already has configurations\n        $existingConfig = $connectorConfigurations.connectorActionConfigurations | Where-Object { $_.connectorId -eq $connectorId }\n\n        if ($existingConfig) {\n\n            # Check if the triggerOperationId already exists in the actionRules array\n            $triggerExists = $existingConfig.actionRules | Where-Object { $_.actionId -eq $triggerOperationId } \n            if($triggerExists -ne $null)\n            {\n                Write-Host \"TriggerOperationId $triggerOperationId already exists for connector $connectorId in policy $policyId\" -ForegroundColor Yellow\n            } else {\n                # Add the new triggerOperationId to the existing configuration\n                $triggerRule = [pscustomobject]@{\n                    actionId = $triggerOperationId\n                    behavior = \"Allow\"\n                }\n                $existingConfig.actionRules+= $triggerRule\n                $policyNeedsUpdated = $true\n                \n                Write-Host \"Adding TriggerOperationId $triggerOperationId to connector $connectorId in policy $policyId\" -ForegroundColor Green\n            }\n        }\n    }\n\n    if($policyNeedsUpdated)\n    {\n        # Update the DLP policy with modified configurations\n        try {\n            Set-PowerAppDlpPolicyConnectorConfigurations -TenantId $TenantId -PolicyName $policyId -UpdatedConnectorConfigurations $connectorConfigurations\n            Write-Host \"Successfully updated DLP Policy: $policyId\" -ForegroundColor Cyan\n        } catch {\n            Write-Host \"Failed to update DLP Policy $policyId : $_\" -ForegroundColor Red\n        }\n    }\n}\n\nWrite-Host \"All impacted flows processed and DLP policies updated.\" -ForegroundColor Cyan\n```\n\n----------------------------------------\n\nTITLE: Using ViewForm Function in PowerFx\nDESCRIPTION: The ViewForm function changes a Form control to FormMode.View mode, which displays data from the Item property in read-only format. In this mode, the SubmitForm and ResetForm functions have no effect.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerFx\nCODE:\n```\nViewForm( FormName )\n```\n\n----------------------------------------\n\nTITLE: Utilizing Choices in Power Fx\nDESCRIPTION: This snippet demonstrates how to implement the Choices function to retrieve possible values for lookup columns in a Power Fx app. Dependencies include having the relevant data tables accessible in Power Apps Dataverse. Key parameters include the column reference, which is necessary and should be directly from a data source, and an optional text filter to constrain results. Expected output is a table of lookup values determined from the specified column.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-choices.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Choices( Accounts.'Primary Contact' )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Choices( Accounts.primarycontactid )\"\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Column Value from JSON Object using Power FX\nDESCRIPTION: This snippet shows how to retrieve a specific column value from a JSON string variable using the Column function. The example outlines extracting the 'population' value from the parsed JSON.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-columnnames-column.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nValue( Column( ParseJSON( JsonString ), \"population\" ) )\n```\n\n----------------------------------------\n\nTITLE: EDate Function Example in Power Fx\nDESCRIPTION: This example demonstrates how to use the EDate function in Power Fx to add or subtract months from a given date. The function returns a Date value with the specified number of months added or subtracted, while preserving the day of the month unless it exceeds the number of days in the resulting month.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-edate-eomonth.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"EDate( Date(2023,5,15), 4 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"EDate( Date(2023,5,15), -1002 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"EDate( Date(2023,5,15), 0 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"EDate( Date(2023,5,31), 1 )\"\n```\n\n----------------------------------------\n\nTITLE: Filtering SharePoint List in Power Fx\nDESCRIPTION: This snippet shows how to set a gallery's Items property to display filtered results from a SharePoint list. It demonstrates how Power Fx can automatically update the display when the data source changes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nFilter( SharePointList )\n```\n\n----------------------------------------\n\nTITLE: Using pac env fetch to execute FetchXML queries against Dataverse\nDESCRIPTION: This command performs a FetchXML query against a Dataverse environment. It supports specifying the target environment and providing FetchXML either directly or from a file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/env.md#2025-04-20_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\npac env fetch --environment <url or guid> --xml \"<fetch>...</fetch>\"\n```\n\nLANGUAGE: cli\nCODE:\n```\npac env fetch --environment <url or guid> --xmlFile path/to/query.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Localized Data Files with LCID\nDESCRIPTION: Example showing how to specify localized configuration data files with locale IDs and optional user map files. This is used for importing configuration data exported with the Configuration Migration tool.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/importconfig-reference.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<cmtdatafiles>\n   <cmtdatafile filename=\"data_1033.zip\"\n      lcid=\"1033\"\n      usermapfilename=\"UserMap.xml\" />\n   <cmtdatafile filename=\"data_1041.zip\"\n      lcid=\"1041\"\n      usermapfilename=\"\" />\n</cmtdatafiles>\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Array of Records to Typed Table in Power Fx\nDESCRIPTION: This snippet demonstrates how to convert a JSON array of records into a typed table using the ForAll() function in Power Fx. It accesses untyped object fields and converts them to known types.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"array\": [\n    { \"id\": 1, \"name\": \"One\"},\n    { \"id\": 2, \"name\": \"Two\"}\n    ] }\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll( ParseJSON( JsonString ).array, { id: Value(ThisRecord.id), name: Text(ThisRecord.name) })\n```\n\n----------------------------------------\n\nTITLE: Summing Values in Power Apps Collection\nDESCRIPTION: This snippet calculates the sum of the 'Value' column in the 'PaperTape' collection.  The Sum function iterates through the collection and adds up the values in the specified column.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_13\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\nSum( PaperTape, Value )\n```\n\n----------------------------------------\n\nTITLE: Relating Records Using Power FX\nDESCRIPTION: The Relate function connects two records across a one-to-many or many-to-many relationship in Microsoft Dataverse. Proper utilization of this function requires understanding both the source and target tables involved in the relationship.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-relate-unrelate.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nRelate( First( Products ).Reservations, First( Reservations ) )\n```\n\n----------------------------------------\n\nTITLE: Updating a Global Variable with Power Fx Set\nDESCRIPTION: This example shows how to update an existing global variable's value using the `Set` function. The `Counter` variable is updated from its previous value to a new specified value, in this case, 2. Note that the Set function does not return a value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-set.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Set( Counter, 2 )\"\n```\n\n----------------------------------------\n\nTITLE: Converting Time components to DateTime - Power FX\nDESCRIPTION: This snippet shows how to use the Time function to combine individual Hour, Minute, and Second values into a DateTime string format. The input values are sourced from text controls, and the output format is specified for readability.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-date-time.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nText( \n    Time(Value(BirthHour.Text), Value(BirthMinute.Text), Value(BirthSecond.Text)), \n    \"hh:mm:ss A/P\" \n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Solution Asynchronously with Dataverse SDK in C#\nDESCRIPTION: This code snippet demonstrates how to export a solution asynchronously using the Dataverse SDK for .NET. It uses the `ExportSolutionAsync` message to initiate the export operation. The service must be a pre-configured `IOrganizationService` instance. Parameters include the solution name and whether the export is managed. The response contains `AsyncOperationId` and `ExportJobId` for further verification and actions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-async.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Where 'service' is a pre-configured IOrganizationService instance.\\nvar service = (OrganizationServiceProxy)xsc.CreateOrganizationService();\\n\\nvar req = new OrganizationRequest(\\\"ExportSolutionAsync\\\");\\nreq.Parameters.Add(\\\"SolutionName\\\", \\\"ExportSolutionAsyncTest\\\");\\nreq.Parameters.Add(\\\"Managed\\\", false);\\nvar response = service.Execute(req);\n```\n\n----------------------------------------\n\nTITLE: Using ResetForm Function in PowerFx\nDESCRIPTION: The ResetForm function resets a Form control's contents to their initial values, discarding any user changes. If the form is in FormMode.New mode, it will be switched back to FormMode.Edit mode. The form's OnReset behavior is also triggered.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerFx\nCODE:\n```\nResetForm( FormName )\n```\n\n----------------------------------------\n\nTITLE: Using AISentiment Function in Power Platform\nDESCRIPTION: Shows how to analyze text sentiment using the AISentiment function. The function takes text input and returns a sentiment analysis result (Positive, Negative, or Neutral). Two variations are provided - one for canvas apps that uses the Environment object and another for other Power Platform products.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ai.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Result, Environment.AISentiment( {Text:Subject} ).AnalyzedSentiment )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Result, AISentiment( Subject ) )\n```\n\n----------------------------------------\n\nTITLE: Sort in Descending Order Example in Power Fx\nDESCRIPTION: Examples showing how to sort a table in descending order using both Sort and SortByColumns functions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nSort( IceCream, Quantity, SortOrder.Descending )\n\nSortByColumns( IceCream, \"Quantity\", SortOrder.Descending )\n```\n\n----------------------------------------\n\nTITLE: Importing Power Platform Solution in Azure DevOps Pipeline\nDESCRIPTION: YAML configuration for importing a Power Platform solution using username/password authentication. This snippet shows how to import a solution with holding solution status and various customization overwrite options.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@2\n  displayName: 'Power Platform Import Solution '\n  inputs:\n    PowerPlatformEnvironment: 'My service connection'\n    SolutionInputFile: 'C:\\Public\\Contoso_sample_1_0_0_1_managed.zip'\n    HoldingSolution: true\n    OverwriteUnmanagedCustomizations: true\n    SkipProductUpdateDependencies: true\n    ConvertToManaged: true\n```\n\n----------------------------------------\n\nTITLE: Using UpdateIf Function in Power Fx\nDESCRIPTION: This code snippet illustrates the usage of the UpdateIf function to modify values in records matching a specific condition. The function evaluates conditions on each record and applies change records to those for which the condition is true.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-update-updateif.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"UpdateIf(IceCream, Quantity > 175, { Quantity: Quantity + 10 })\"\n```\n\n----------------------------------------\n\nTITLE: Combining Date and Time components into DateTime - Power FX\nDESCRIPTION: This snippet illustrates the use of the DateTime function to merge separate Year, Month, Day, Hour, Minute, Second, and Millisecond values into a single formatted DateTime string. Users provide inputs via text controls, and the output is a formatted string representing the complete date and time.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-date-time.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nText(\n    DateTime(Value(EclipseYear.Text), Value(EclipseMonth.Text), Value(EclipseDate.Text), \n        Value(EclipseHour.Text), Value(EclipseMinute.Text), \n        Value(EclipseSecond.Text), Value(EclipseSecond.Millisecond)\n    ), \n    \"yy/mm/dd hh:mm:ss.000 AM/PM\"\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping Data to DonutChart in Power Apps\nDESCRIPTION: This Power Apps snippet demonstrates how to map data values to the Items property of the DonutChart control. The snippet shows how to set item legends, values, and colors. This is aimed at visually representing data proportions within the chart. The CustomColors property must be enabled to apply custom colors to the chart.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/donutchart.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nTable(\n    {\n        ItemLegend: \"First\",\n        ItemValue: 60,\n        ItemColor:\"#00A892\"\n    },\n    {\n        ItemLegend: \"Second\",\n        ItemValue: 10,\n        ItemColor:\"#9A44FC\"\n    },\n    {\n        ItemLegend: \"Third\",\n        ItemValue: 30,\n        ItemColor:\"#3483FA\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Working with JSON Arrays in Power Fx\nDESCRIPTION: Examples of accessing and converting JSON array data using ParseJSON in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_14\n\nLANGUAGE: power-fx\nCODE:\n```\nValue( Index( ParseJSON( JsonString ).array, 2 ) )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll( ParseJSON( JsonString ).array, Value( ThisRecord ) )\n```\n\n----------------------------------------\n\nTITLE: Nested If Statements for Inventory Level Alerts in Power Apps\nDESCRIPTION: This formula demonstrates nested If statements to display different messages based on a numeric value. It evaluates whether the value is less than 20, less than 40, or above 40 to provide appropriate inventory alerts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_15\n\nLANGUAGE: PowerApps\nCODE:\n```\nIf( Value(Text1.Text) < 20, \"Order MANY more!\", Value(Text1.Text) < 40, \"Order more!\", Text1.Text )\n```\n\n----------------------------------------\n\nTITLE: Power Platform Deploy Package in YAML\nDESCRIPTION: Azure DevOps task for deploying a Power Platform package containing multiple solutions, data, and code into a specified environment using service principal authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_16\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.deploy-package.PowerPlatformDeployPackage@2\n  displayName: 'Power Platform Deploy Package '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n    PackageFile: 'C:\\Users\\Public\\package.dll'\n    MaxAsyncWaitTime: 120\n```\n\n----------------------------------------\n\nTITLE: Using Len with Single-Column Tables in Power Fx\nDESCRIPTION: Examples of using the Len function with tables, including measuring the length of each string in a column of a data source and in an inline table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-len.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nLen( ShowColumns( People, \"Address\" ) )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nLen( [ \"Hello\", \"to the\", \"World\", \"\" ] )\n```\n\n----------------------------------------\n\nTITLE: Defining TagList Items in Power Fx\nDESCRIPTION: This Power Fx snippet defines a table of items to be displayed in the TagList control. Each item includes properties such as display name, unique key, and styling options for icon and text color. The table data is crucial for rendering items in the TagList with user interaction capabilities defined by the `SelectedKey` and `OnChange` properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/taglist.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    {\n    \tItemDisplayName: \"Power Apps\",\n    \tItemKey: \"1\",\n    \tItemEnabled: true,\n        ItemChecked: true,\n    \tItemIconName: \"Powerapps\",\n    \tItemIconColor: \"purple\",\n    \tItemTextColor: \"purple\",\n    \tItemBackgroundColor: \"lightpurple\"\n    },\n    {\n    \tItemDisplayName: \"Power Automate\",\n    \tItemKey: \"2\",\n    \tItemEnabled: false,\n    \tItemIconName: \"MicrosoftFlowLogo\",\n    \tItemIconColor: \"Blue\",\n    \tItemTextColor: \"blue\",\n    \tItemBackgroundColor: \"lightBlue\"\n    },\n    {\n    \tItemDisplayName: \"Power BI\",\n    \tItemKey: \"3\",\n    \tItemEnabled: false,\n    \tItemIconName: \"Powerbilogo\",\n    \tItemIconColor: \"black\",\n    \tItemTextColor: \"black\",\n    \tItemBackgroundColor: \"#fce100\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Using the Find Function in Power FX\nDESCRIPTION: This code snippet demonstrates the usage of the Find function in Power FX, which looks for a specified string within another string and returns the starting position. It features parameters like _FindString_ and _WithinString_, alongside an optional _StartingPosition_. The output could be an integer (starting position) or blank if the string isn't found.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-find.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\nFind( _FindString_, _WithinString_ [, *StartingPosition* ] )\n```\n\n----------------------------------------\n\nTITLE: Filtering Records by Names Starting with Search Text in Power Apps\nDESCRIPTION: This formula filters a Customers data source to show only records where the Name starts with the text entered in a SearchInput control. It uses the StartsWith function for prefix matching and is case insensitive.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerApps\nCODE:\n```\nFilter(Customers, StartsWith(Name, SearchInput.Text) )\n```\n\n----------------------------------------\n\nTITLE: Basic Sort Function Syntax in Power Fx\nDESCRIPTION: The basic syntax for the Sort function, which takes a table, a formula to evaluate for each record, and an optional sort order parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSort( Table, Formula [, SortOrder ] )\n```\n\n----------------------------------------\n\nTITLE: Using Search Function in Power Fx\nDESCRIPTION: The Search function finds records in a table that contain a specified string in one or more columns. It allows for case-insensitive matching, returning records where the search string appears as a substring.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_1\n\nLANGUAGE: powerfx\nCODE:\n```\n\"Search(Table, SearchString, Column1 [, Column2, ...])\"\n```\n\n----------------------------------------\n\nTITLE: Authentication Token Response - JSON\nDESCRIPTION: JSON response containing the authentication token and related metadata, including token type, scope, expiration times, and the access token used for subsequent API calls.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"scope\": \"https://service.powerapps.com//User https://service.powerapps.com//.default\",\n  \"expires_in\": 3599,\n  \"ext_expires_in\": 3599,\n  \"access_token\": \"eyJ0eXAiOi...UBkeW5hbWljc2F4ZGVtby5vbm1pY3Jvc29mdC5jb20iLCJ1dGkiOiI1Q1Fnb25PR0dreWlTc1I2SzR4TEFBIiwidmVyIjoiMS4wIn0.N_oCJiEz2tRU9Ls9nTmbZF914MyU_u7q6bIUJdhXd9AQM2ZK-OijiKtMGfvvVmTYZp4C6sgkxSt0mOGcpmvTSagSRDY92M2__p-pEuKqva5zxXXXmpC-t9lKYDlXRcKq1m5xv-q6buntnLrvZIdd6ReD3n3_pnGAa6OxU0s82f7DqAjSQgXR3hwq_NZOa0quCUN9X-TvpIYrJfVgQfVu0R189hWmUzbYpuoPrUMj2vQI_19gEHz_FryXolM4RMStugYrC0Z72ND5vFlGgvYhZfbWJRC6hGvQQin_eAASmmjLwhRBGMJd6IdbgEXAkFF2rFITFFtFY_4hrN3bvHsveg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Function syntax for rounding functions in Power Fx\nDESCRIPTION: Syntax definitions for the Round, RoundDown, RoundUp, Int, and Trunc functions, showing required parameters and their purposes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-round.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nRound(Number, DecimalPlaces)\nRoundDown(Number, DecimalPlaces)\nRoundUp(Number, DecimalPlaces)\n\nInt(Number)\nTrunc(Number)\n```\n\n----------------------------------------\n\nTITLE: Navigating and Setting Context Variable in Power Apps\nDESCRIPTION: This snippet navigates to Screen1 and sets the context variable 'RunningTotal' to -1000 simultaneously using the Navigate function.  This demonstrates how to pass data between screens by setting a context variable during navigation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_10\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\nNavigate( Screen1, None, { RunningTotal: -1000 } )\n```\n\n----------------------------------------\n\nTITLE: Saving Collection Data to Local Storage\nDESCRIPTION: Formula to save the MyItems collection to local device storage with identifier 'LocalSavedItems'. Limited to 1MB when running in Teams or web browser.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-savedata-loaddata.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nSaveData( MyItems, \"LocalSavedItems\" )\n```\n\n----------------------------------------\n\nTITLE: Restricting Developer Environment Creation Using PowerShell\nDESCRIPTION: This PowerShell script disables the ability for non-admin users to create developer environments in Power Platform by setting the tenant governance configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/control-environment-creation.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$requestBody = [pscustomobject]@{\npowerPlatform = [pscustomobject]@{\ngovernance = [pscustomobject]@{\ndisableDeveloperEnvironmentCreationByNonAdminUsers  = $True\n}\n}\n}\n\nSet-TenantSettings -RequestBody $requestBody\n```\n\n----------------------------------------\n\nTITLE: Using Search Function Across Multiple Columns in Power Apps\nDESCRIPTION: This formula uses the Search function to find records in the Customers data source where the search text appears in either the Name or Company columns. The Search function provides a more concise way to search across multiple columns.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_10\n\nLANGUAGE: PowerApps\nCODE:\n```\nSearch(Customers, SearchInput.Text, Name, Company)\n```\n\n----------------------------------------\n\nTITLE: Updating Record with Patch and Handling Conflicts\nDESCRIPTION: This snippet illustrates how to use the Patch function to update a record in a data source and check for errors due to conflicts. The examples show how to handle the situation where another user has modified the record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-errors.md#2025-04-20_snippet_1\n\nLANGUAGE: Power FX\nCODE:\n```\nPatch( IceCream, EditRecord, Gallery.Updates )\n```\n\n----------------------------------------\n\nTITLE: Expressing Inline Tables in Power Fx\nDESCRIPTION: Demonstrates how to express inline tables with the Table function, including records with fields like 'Name', 'Price', and 'Quantity'. This is foundational for understanding table creation and manipulation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nTable( \n\t{ Name: \"Chocolate\", Price: 3.95, 'Quantity on Hand': 12, 'Quantity on Order': 10 },\n\t{ Name: \"Bread\", Price: 4.95, 'Quantity on Hand': 34, 'Quantity on Order': 0 },\n\t{ Name: \"Water\", Price: 4.95, 'Quantity on Hand': 10, 'Quantity on Order': 0 } \n)\n```\n\n----------------------------------------\n\nTITLE: Importing a Staged Solution Asynchronously in Dataverse using C#\nDESCRIPTION: This code snippet shows how to import a staged solution asynchronously in Dataverse. It handles connection references and environment variables, creates the ImportSolutionAsyncRequest, and executes it.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-async.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static ImportSolutionAsyncResponse ImportSolution(\n    IOrganizationService service,\n    StageSolutionResults stagingResults,\n    Dictionary<string,Guid> connectionIds,\n    Dictionary<string,string> envarValues )\n{\n    // Import the staged solution\n    var componentDetails = stagingResults.SolutionComponentsDetails;\n\n    // TODO These are not referenced in the code but are useful to explore\n    var missingDependencies = stagingResults.MissingDependencies;   // Contains missing dependencies\n    var solutionDetails = stagingResults.SolutionDetails;           // Contains solution details\n\n    var connectionReferences = componentDetails.Where(x => string.Equals(x.ComponentTypeName, \"connectionreference\"));\n    var envVarDef = componentDetails.Where(x => string.Equals(x.ComponentTypeName, \"environmentvariabledefinition\"));\n    var envVarValue = componentDetails.Where(x => string.Equals(x.ComponentTypeName, \"environmentvariablevalue\"));\n\n    var componentParams = new EntityCollection();\n\n    // Add each connection reference to the component parmameters entity collection.\n    foreach (var conn in connectionReferences)\n    {\n        var e = new Entity(\"connectionreference\")\n        {\n            [\"connectionreferencelogicalname\"] = conn.Attributes[\"connectionreferencelogicalname\"].ToString(),\n            [\"connectionreferencedisplayname\"] = conn.Attributes[\"connectionreferencedisplayname\"].ToString(),\n            [\"connectorid\"] = conn.Attributes[\"connectorid\"].ToString(),\n            [\"connectionid\"] = connectionIds[conn.ComponentName]\n        };\n        componentParams.Entities.Add(e);\n    }\n            \n    // Add each environment variable to the component parmameters entity collection.\n    foreach (var value in envVarValue)\n    {\n        var e = new Entity(\"environmentvariablevalue\")\n        {\n            [\"schemaname\"] = value.Attributes[\"schemaname\"].ToString(),\n            [\"value\"] = envarValues[value.ComponentName]\n        };\n\n        if (value.Attributes.ContainsKey(\"environmentvariablevalueid\"))\n        {\n            e[\"environmentvariablevalueid\"] = value.Attributes[\"environmentvariablevalueid\"].ToString();\n        }\n        componentParams.Entities.Add(e);\n    }\n\n    // Import the solution\n    var importSolutionReq = new ImportSolutionAsyncRequest();\n    importSolutionReq.ComponentParameters = componentParams;\n    importSolutionReq.SolutionParameters = new SolutionParameters { StageSolutionUploadId = stagingResults.StageSolutionUploadId };\n    var response = service.Execute(importSolutionReq) as ImportSolutionAsyncResponse;\n\n    return (response);\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Function Syntax Examples\nDESCRIPTION: Examples demonstrating the syntax and usage of the Validate function for single column and complete record validation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-validate.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Validate**( _DataSource_, _Column_, _Value_ )\n\n**Validate**( _DataSource_, _OriginalRecord_, _Updates_ )\n```\n\n----------------------------------------\n\nTITLE: Convert date string with French locale in Power Fx\nDESCRIPTION: This snippet converts a date string from a text input control to a date/time value using the French locale (\"fr\") and displays it as a long date format. It demonstrates how to override the default locale for date interpretation. The `DateValue` function is used with the \"fr\" language code, and the result is formatted using `Text` and `DateTimeFormat.LongDate`.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datevalue-timevalue.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nText( DateValue( Startdate.Text, \"fr\" ), DateTimeFormat.LongDate )\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with the Table Function in Power Fx\nDESCRIPTION: This snippet demonstrates how to create a table in Power Fx using the Table function with a set of records. The Table function is used to define tables programmatically in the language. Each record in the table is enclosed in curly braces, and you can define multiple such records within a table. No external dependencies are required. The function takes records as arguments and returns a table containing these records.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nTable( { Value: \"Strawberry\" }, { Value: \"Vanilla\" } )\n```\n\n----------------------------------------\n\nTITLE: ForAll with Microsoft Translator Connection in Power Apps\nDESCRIPTION: Examples demonstrating how to use ForAll with the Microsoft Translator connection to translate all text values in a collection to Spanish and French.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll(Expressions, MicrosoftTranslator.Translate( Value, \"es\"))\n\nForAll(Expressions, MicrosoftTranslator.Translate( Value, \"fr\"))\n```\n\n----------------------------------------\n\nTITLE: Populated Deployment Settings in JSON\nDESCRIPTION: A populated deployment settings JSON file where connection references and environment variable values have been filled in. This file example illustrates the completed structure ready for importing into Power Platform, ensuring automated deployment with the specified configurations. Each connection reference and environment variable now has a designated value relevant to its deployment context.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/conn-ref-env-variables-build-tools.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EnvironmentVariables\": [\n    {\n      \"SchemaName\": \"tst_Deployment_env\",\n      \"Value\": \"Test\"\n    },\n    {\n      \"SchemaName\": \"tst_EnvironmentType\",\n      \"Value\": \"UAT\"\n    }\n  ],\n  \"ConnectionReferences\": [\n    {\n      \"LogicalName\": \"tst_sharedtst5fcreateuserandjob5ffeb85c4c63870282_b4cc7\",\n      \"ConnectionId\": \"4445162937b84457a3465d2f0c2cab7e\",\n      \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_tst-5fcreateuserandjob-5ff805fab2693f57dc\"\n    },\n    {\n      \"LogicalName\": \"tst_SharepointSiteURL\",\n      \"ConnectionId\": \"ef3d1cbb2c3b4e7987e02486584689d3\",\n      \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_sharepointonline\"\n    },\n    {\n      \"LogicalName\": \"tst_AzureDevopsConnRef\",\n      \"ConnectionId\": \"74e578ccc24846729f32fcee83b630de\",\n      \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_visualstudioteamservices\"\n    },\n    {\n      \"LogicalName\": \"tst_GHConn\",\n      \"ConnectionId\": \"d8beb0fb533442c6aee5c18ae164f13d\",\n      \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_github\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Record with Missing Properties in Power Fx\nDESCRIPTION: Demonstrates replacing a record where the replacement excludes certain properties, resulting in those properties being set to blank in the data source.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-update-updateif.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Update(IceCream, First(Filter(IceCream, Flavor=\\\"Strawberry\\\")), { ID: 3, Flavor: \\\"Strawberry Swirl\\\" })\"\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Data Source in Power FX\nDESCRIPTION: This snippet demonstrates how to use the Refresh function to update a data source in Power FX. The function retrieves the latest changes made to the data source by other users and is utilized within behavior formulas. The _DataSource_ parameter is the required input representing the data source to be refreshed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-refresh.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nRefresh( IceCream )\n```\n\n----------------------------------------\n\nTITLE: Installing Power Platform Tools using GitHub Actions\nDESCRIPTION: This snippet demonstrates how to install Power Platform Tools in a GitHub Actions workflow. It shows how to use version 1 (@v1) with the actions-install action to avoid timeout errors when installing the Power Platform CLI in the context of a runner. It also includes an example of exporting a solution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-github-available-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\njobs:\n    builds:\n        runs-on: windows-latest   # alternate runner OS is: ubuntu-latest\n\n    steps:\n    - name: Install Power Platform Tools\n        uses: microsoft/powerplatform-actions/actions-install@v1\n\n    - name: Export Solution\n         uses: microsoft/powerplatform-actions/export-solution@v1\n      with:\n         environment-url: 'https://myenv.crm.dynamics.com'\n         user-name: 'me@myenv.onmicrosoft.com'\n         password-secret: ${{ secrets.MYPASSWORD }}\n         solution-name: aSolution\n         solution-output-file: 'aSolution.zip'\n         working-directory: 'out'\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Self-Service Disaster Recovery in Power Platform Admin Center\nDESCRIPTION: Step-by-step instructions for enabling self-service disaster recovery for a production-type environment in the new Power Platform admin center. This process provisions resources and initiates data replication between primary and secondary locations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/business-continuity-disaster-recovery.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com) as a system administrator.\n1. In the navigation pane, select **Manage**.\n1. In the Manage pane, select **Environments**. The Environments page is displayed.\n1. Select the production-type environment where you want to turn on self-service disaster recovery.\n1. Select **Disaster Recovery** in the command bar at the top of the page. The **Disaster Recovery** pane appears.\n1.\tSelect the toggle to change it to **Enabled**.\n1.\tSelect **Save**.\n1.\tThe environment is placed in the **Edit details** page briefly.\n1.\tThe **Environment details** page appears, indicating that the process of turning on the feature has started.\n```\n\n----------------------------------------\n\nTITLE: SortByColumns Function Syntax in Power Fx\nDESCRIPTION: The syntax for SortByColumns function with multiple columns, which takes a table, column names as strings, and optional sort order parameters for each column.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSortByColumns( Table, ColumnName1 [, SortOrder1, ColumnName2, SortOrder2, ... ] )\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of DLP Policy Endpoint Filtering Rules Configuration\nDESCRIPTION: A complete example demonstrating how to configure endpoint filtering rules for SQL Server, SMTP, and HTTP connectors in a DLP policy. The example shows how to allow or deny specific database servers, email servers, and HTTP endpoints based on detailed rules with proper ordering.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-endpoint-filtering.md#2025-04-20_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$ConnectorConfigurations = @{ \n  endpointConfigurations = @(\n    @{  \n      connectorId = \"/providers/Microsoft.PowerApps/apis/shared_sql\" \n      endpointRules = @(\n        @{ \n          order = 1 \n          endpoint = \"myservername.database.windows.net,testdatabase\" \n          behavior = \"Deny\"\n        }, \n        @{ \n          order = 2 \n          endpoint = \"myservername.database.windows.net,*\" \n          behavior = \"Allow\"\n        }, \n        @{ \n          order = 3\n          endpoint = \"*\" \n          behavior = \"Deny\"\n        } \n      ) \n    }, \n    @{  \n      connectorId = \"/providers/Microsoft.PowerApps/apis/shared_smtp\" \n      endpointRules = @(\n        @{ \n          order = 1 \n          endpoint = \"smtp.gmail.com,587\" \n          behavior = \"Allow\"\n        }, \n        @{ \n          order = 2 \n          endpoint = \"*\" \n          behavior = \"Deny\"\n        } \n      ) \n    },\n    @{  \n      connectorId = \"http\" \n      endpointRules = @(\n        @{ \n          order = 1 \n          endpoint = \"https://mywebsite.com/allowedPath1\" \n          behavior = \"Allow\"\n        }, \n        @{ \n          order = 2\n          endpoint = \"https://mywebsite.com/allowedPath2\" \n          behavior = \"Allow\"\n        }, \n        @{ \n          order = 3\n          endpoint = \"*\" \n          behavior = \"Deny\"\n        } \n      ) \n    } \n  ) \n}\nNew-PowerAppDlpPolicyConnectorConfigurations -TenantId $TenantId -PolicyName $PolicyName -NewDlpPolicyConnectorConfigurations $ConnectorConfigurations\n```\n\n----------------------------------------\n\nTITLE: Automating Configuration Migration with PowerShell\nDESCRIPTION: Using the Microsoft.Xrm.Tooling.ConfigurationMigration PowerShell module to automate configuration data migration between environments. This module provides programmatic access to the Configuration Migration tool's functionality.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/configure-and-deploy-tools.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# Install the Configuration Migration module\nInstall-Module -Name Microsoft.Xrm.Tooling.ConfigurationMigration\n```\n\n----------------------------------------\n\nTITLE: Exporting a Dataverse Solution with C#\nDESCRIPTION: Exports a Dataverse solution as a zip file using the ExportSolutionRequest class. The sample shows how to export an unmanaged solution by setting the Managed property to false. The resulting solution file is saved to the specified output directory.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Export a solution\nExportSolutionRequest exportSolutionRequest = new ExportSolutionRequest();\nexportSolutionRequest.Managed = false;\nexportSolutionRequest.SolutionName = solution.UniqueName;\n\nExportSolutionResponse exportSolutionResponse =\n   (ExportSolutionResponse)_serviceProxy.Execute(exportSolutionRequest);\n\nbyte[] exportXml = exportSolutionResponse.ExportSolutionFile;\nstring filename = solution.UniqueName + \".zip\";\n\nFile.WriteAllBytes(outputDir + filename, exportXml);\n\nConsole.WriteLine(\"Solution exported to {0}.\", outputDir + filename);\n```\n\n----------------------------------------\n\nTITLE: Creating a Publisher in Dataverse using C#\nDESCRIPTION: Creates a custom publisher for Dataverse solutions by defining a publisher with required properties and checking if it already exists. If the publisher exists, it captures the current customization prefix; otherwise, it creates a new publisher using the IOrganizationService.Create method.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Define a new publisher\nPublisher _myPublisher = new Publisher\n{\n   UniqueName = \"contoso-publisher\",\n   FriendlyName = \"Contoso publisher\",\n   SupportingWebsiteUrl =\n      \"https://learn.microsoft.com/powerapps/developer/data-platform/overview\",\n   CustomizationPrefix = \"contoso\",\n   EMailAddress = \"someone@contoso.com\",\n   Description = \"This publisher was created from sample code\"\n};\n\n// Does the publisher already exist?\nQueryExpression querySamplePublisher = new QueryExpression\n{\n   EntityName = Publisher.EntityLogicalName,\n   ColumnSet = new ColumnSet(\"publisherid\", \"customizationprefix\"),\n   Criteria = new FilterExpression()\n};\n\nquerySamplePublisher.Criteria.AddCondition(\"uniquename\", ConditionOperator.Equal,\n   _myPublisher.UniqueName);\n\nEntityCollection querySamplePublisherResults =\n   _serviceProxy.RetrieveMultiple(querySamplePublisher);\n\nPublisher SamplePublisherResults = null;\n\n// If the publisher already exists, use it\nif (querySamplePublisherResults.Entities.Count > 0)\n{\n   SamplePublisherResults = (Publisher)querySamplePublisherResults.Entities[0];\n   _publisherId = (Guid)SamplePublisherResults.PublisherId;\n   _customizationPrefix = SamplePublisherResults.CustomizationPrefix;\n}\n\n// If the publisher doesn't exist, create it\nif (SamplePublisherResults == null)\n{\n   _publisherId = _serviceProxy.Create(_myPublisher);\n\n   Console.WriteLine(String.Format(\"Created publisher: {0}.\",\n   _myPublisher.FriendlyName));\n\n   _customizationPrefix = _myPublisher.CustomizationPrefix;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in ForAll Iterations in Power Fx\nDESCRIPTION: Example showing how ForAll continues processing iterations despite errors. The formula clears a Collection and then attempts to process a list of values, resulting in division by zero errors for zero values while successfully collecting non-zero values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nClear( Collection ); \nForAll( [1,0,2,0,3], If( 1/Value > 0, Collect( Collection, Value ) ) );\n```\n\n----------------------------------------\n\nTITLE: Updating Context Variable in Power Apps\nDESCRIPTION: This snippet updates the context variable 'RunningTotal' by adding the value from 'TextInput1.Text' to its current value. The UpdateContext function is used to modify the context variable, and the '+' operator ensures that 'RunningTotal' is treated as a number.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_8\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\nUpdateContext( { RunningTotal: RunningTotal + TextInput1.Text } )\n```\n\n----------------------------------------\n\nTITLE: Implementing Unit Tests with SysTest Framework in X++\nDESCRIPTION: A sample test class that demonstrates how to create unit tests for the Fleet Management application. The class includes setup methods, test methods for testing calculation engines and field validation, with proper test isolation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/unified-experience/finance-operations-testing.md#2025-04-20_snippet_0\n\nLANGUAGE: X++\nCODE:\n```\nclass FMUnitTestSample extends SysTestCase\n{\n    public void setup()\n    {\n        // Reset the test data to be sure things are clean\n        FMDataHelper::main(null);\n    }\n\n    [SysTestMethod, Hookable(false)]\n    public void testFMTotalsEngine()\n    {\n        FMRental rental;\n        FMTotalsEngine fmTotals;\n        FMRentalTotal fmRentalTotal;\n        FMRentalCharge rentalCharge;\n        FMRentalTotal expectedtotal;\n        str rentalID = '000022';\n\n        // Find a known rental\n        rental = FMRental::find(rentalID);\n\n        // Get the rental charges associated with the rental\n        // Data is seeded randomly, so this will change for each run\n        select sum(ExtendedAmount) from rentalCharge\n                where rentalCharge.RentalId == rental.RentalId;\n\n        fmTotals = FMTotalsEngine::construct();\n        fmTotals.calculateRentalVehicleRate(rental);\n\n        // Get the totals from the engine\n        fmRentalTotal = fmTotals.totals(rental);\n\n        // Set the expected amount\n        expectedTotal = rental.VehicleRateTotal + rentalCharge.ExtendedAmount;\n\n        this.assertEquals(expectedTotal,fmRentalTotal);\n    }\n\n    [SysTestMethod, Hookable(false)]\n    public void testFMCarValidateField()\n    {\n        FMCarClass fmCar;\n\n        fmCar.NumberOfDoors = -1;\n        this.assertFalse(fmCar.validateField(Fieldnum(\"FMCarClass\", \"NumberOfDoors\")));\n\n        fmCar.NumberOfDoors = 4;\n        this.assertTrue(fmCar.validateField(Fieldnum(\"FMCarClass\", \"NumberOfDoors\")));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data Concurrently in Power Fx\nDESCRIPTION: This code demonstrates how to load data concurrently using the Concurrent function in Power Fx. The ClearCollect calls are executed in parallel, reducing the overall time to load data from multiple data sources. This is particularly useful in the OnStart property of an app to improve loading performance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-concurrent.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nConcurrent(\n    ClearCollect( Product, '[SalesLT].[Product]' ),\n    ClearCollect( Customer, '[SalesLT].[Customer]' ),\n    ClearCollect( SalesOrderDetail, '[SalesLT].[SalesOrderDetail]' ),\n    ClearCollect( SalesOrderHeader, '[SalesLT].[SalesOrderHeader]' )\n)\n```\n\n----------------------------------------\n\nTITLE: Requesting Bearer Token with Client Secret - HTTP\nDESCRIPTION: This HTTP snippet shows how to obtain an access bearer token from Microsoft Entra using a client secret, suitable for service principal authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-authentication-v2.md#2025-04-20_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nContent-Type: application/x-www-form-urlencoded\nHost: login.microsoftonline.com\nAccept: application/json\nPOST https://login.microsoftonline.com/YOUR_TENANT.COM/oauth2/v2.0/token\nBODY:\nclient_id={CLIENT_ID_FROM_AZURE_CLIENT_APP}&scope=https://api.powerplatform.com/.default&client_secret={SECRET_FROM_AZURE_CLIENT_APP}&grant_type=client_credentials\n```\n\n----------------------------------------\n\nTITLE: Summarizing City Population Data by Country\nDESCRIPTION: Demonstrates using Summarize function to group cities by country, calculating total population and concatenating city names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-summarize.md#2025-04-20_snippet_1\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nSummarize( CityPopulations, Country,\n           Sum( ThisGroup, Population ) As 'Total Population',\n           Concat( ThisGroup, City, \", \" ) As Cities \n)\n```\n\n----------------------------------------\n\nTITLE: Using pac copilot model list command\nDESCRIPTION: Lists AI Builder models available in the current environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\npac copilot model list\n```\n\n----------------------------------------\n\nTITLE: Collecting Ice Cream Data - Power FX\nDESCRIPTION: This code snippet demonstrates how to create a collection of ice cream flavors and their quantities in Power FX. It initializes a table with predefined records using the Collect function, suitable for use in canvas apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-first-last.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nCollect( IceCream, Table( { Flavor: \"Chocolate\", Quantity: 100 },\n                          { Flavor: \"Vanilla\", Quantity: 200 },\n                          { Flavor: \"Strawberry\", Quantity: 300 },\n                          { Flavor: \"Mint Chocolate\", Quantity: 60 },\n                          { Flavor: \"Pistachio\", Quantity: 200 } ) )\n```\n\n----------------------------------------\n\nTITLE: Calculating Date Differences - Power FX\nDESCRIPTION: The DateDiff function computes the difference between two date/time values, returning a whole number in specified units like days, months, or seconds. This function helps determine intervals and durations by outputting the exact number of units between the provided start and end dates.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-dateadd-datediff.md#2025-04-20_snippet_1\n\nLANGUAGE: Power FX\nCODE:\n```\n**DateDiff**( _StartDateTime_, _EndDateTime_ [, *Units* ] )\n```\n\n----------------------------------------\n\nTITLE: Char Function - Single-Column Table Example\nDESCRIPTION: This example showcases how to use the Char function with a single-column table to translate multiple ASCII character codes into their corresponding string representations.  The function iterates through each number in the 'Value' column of the table and returns a new single-column table containing the translated characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-char.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"`Char( [ 65, 105 ] )`\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"`Char( [ 35, 52 ] )`\"\n```\n\n----------------------------------------\n\nTITLE: Screen OnStart Property for Real-Time Clock in Power Fx\nDESCRIPTION: This code snippet sets the OnStart property of a Screen to initialize the CurrentTime variable with the current time using the Now() function. This ensures that the label displaying the time has a valid value immediately when the app starts, before the timer begins running.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_14\n\nLANGUAGE: power-fx\nCODE:\n```\n\"Set(CurrentTime, Now())\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up App-Level Variables in Power Apps Canvas\nDESCRIPTION: This snippet shows how to set up app-level variables in a Power Apps canvas app. It defines a 'Subject' variable containing a text about Washington state's food experiences.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ai.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSubject = \"Washington is a state that offers a variety of food experiences for locals and visitors alike. \\nWhether you are looking for fresh seafood, farm-to-table produce, ethnic specialties, or gourmet treats, \\nyou will find something to satisfy your taste buds in Washington. Washington is famous for its seafood, \\nespecially salmon, oysters, crab, and clams. The state has a long coastline and numerous rivers and lakes \\nthat provide abundant and high-quality seafood.\";\n```\n\n----------------------------------------\n\nTITLE: Using Today() function in Power Fx\nDESCRIPTION: This example retrieves the current date, setting the time portion to midnight, and displays it as a string with the format \"mm/dd/yyyy hh:mm:ss\". The Text function is used to format the date and time value returned by the Today() function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\n\"Text( Today(), \\\"mm/dd/yyyy hh:mm:ss\\\" )\"\n```\n\n----------------------------------------\n\nTITLE: Creating Catalog Item from Solution using PowerShell in Power Platform\nDESCRIPTION: This PowerShell function automates the process of creating a new catalog item from a specified solution and submitting it for approval. It handles solution validation, package creation, submission, approval monitoring, and certification.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nfunction New-CatalogItemFromSolution {\n   param(\n      [Parameter(Mandatory)]\n      [string]\n      $solutionName,\n      [Parameter(Mandatory)]\n      [string]\n      $solutionUniqueName,\n      [Parameter(Mandatory)]\n      [string]\n      $catalogItemSubmissionJsonString\n   )\n   $statusCodeLabelName = 'statuscode@OData.Community.Display.V1.FormattedValue'\n\n   $solutionQuery = \"?`$filter=uniquename eq '$solutionUniqueName'&`$select=solutionid\"\n   $solutionCollection = (Get-Records `\n         -setName 'solutions' `\n         -query $solutionQuery).value\n\n   if (!$solutionCollection.Count -eq 1) {\n      throw \"Solution with unique name $solutionUniqueName does not exist\"\n   }\n\n   $packageStoreRecord = @{\n      mspcat_name                   = $solutionName\n      mspcat_solutionuniquename     = $solutionUniqueName\n      mspcat_intendeddeploymenttype = 526430000 # Standard\n      mspcat_operation              = 958090001 # Create Package\n   }\n\n   $packageId = New-Record `\n      -setName 'mspcat_packagestores' `\n      -body $packageStoreRecord\n   \n   Write-Host ('Created package store record with ID ' + $packageId)\n\n   # Set statuscode to Submitted\n   $packageStoreRecord = @{\n      statuscode = 958090004\n   }\n\n   Update-Record `\n      -setName 'mspcat_packagestores' `\n      -id $packageId `\n      -body $packageStoreRecord | Out-Null\n\n   Write-Host  'Updated package store record status to Submitted'\n\n   do {\n      Start-Sleep -Seconds 10\n\n      $packageStore = Get-Record `\n         -setName 'mspcat_packagestores' `\n         -id $packageId `\n         -query '?$select=statuscode,mspcat_processingmessage'\n      \n      $statusCodeValue = $packageStore.statuscode\n      $statusCodeLabel = $packageStore.$statusCodeLabelName\n\n      Write-Host (' - Package store record status is ' + $statusCodeLabel)\n\n   } while ($statusCodeValue -eq 958090004 -or # Submitted\n      $statusCodeValue -eq 1 -or # Pending\n      $statusCodeValue -eq 958090000) # Running\n   \n   if ($statusCodeValue -ne 958090001) {\n\n      # 958090002 is 'Failed'\n      throw \"Package submission $statusCodeLabel\"\n   }\n\n   # If successful, retrieve the details about the file to download\n\n   $fileSasUrlResponse = Get-FileSasUrl `\n      -setName 'mspcat_packagestores' `\n      -id $packageId `\n      -columnName 'mspcat_packagefile'\n\n   Write-Host ('Retrieved SAS URL for ' + $fileSasUrlResponse.FileName)\n\n   $catalogItemSubmission = $catalogItemSubmissionJsonString | ConvertFrom-Json\n\n   $packageFile = @{\n      name        = $fileSasUrlResponse.FileName\n      filesaslink = $fileSasUrlResponse.SasUrl\n   }\n\n   $catalogItemSubmission.catalogItemDefinition.packageFile = $packageFile\n\n   $catalogItemSubmissionJsonString = $catalogItemSubmission | ConvertTo-Json -Depth 10\n\n   $encodedCatalogItemSubmission = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($catalogItemSubmissionJsonString))\n\n   \n   $body = @{\n      EncodedApprovalRequest = $encodedCatalogItemSubmission \n   } | ConvertTo-Json\n\n   $postHeaders = $baseHeaders.Clone()\n   $postHeaders.Add('Content-Type', 'application/json')\n\n   $results = Invoke-RestMethod `\n      -Method Post `\n      -Uri ($baseURI + 'mspcat_SubmitCatalogApprovalRequest') `\n      -Headers $postHeaders `\n      -Body $body\n   \n   $certificationRequestId = $results.CertificationRequestId\n\n   Write-Host ('Submitted catalog approval request with ID ' + $certificationRequestId)\n\n   # Approval must be in either InProgress or Submitted to be processed\n\n   do {\n      Start-Sleep -Seconds 10\n   \n      # Retrieve the record\n      $approvalRequestRecord = Get-Record `\n         -setName 'mspcat_certificationrequests' `\n         -id $certificationRequestId `\n         -query '?$select=statuscode'\n\n      # Get the status code value\n      $statusCodeValue = $approvalRequestRecord.statuscode\n      $statusCodeLabel = $approvalRequestRecord.$statusCodeLabelName\n   \n      Write-Host (' - Approval request status is ' + $statusCodeLabel)\n\n   } while ($statusCodeValue -eq 526430002 -or # Waiting On Submitter\n      $statusCodeValue -eq 526430003 -or # Pending Deployment\n      $statusCodeValue -eq 526430008 -or # Draft\n      $statusCodeValue -eq 526430009) # Processing\n   \n   # If statuscode isn't Submitted or InProgress, throw an exception\n   if (!($statusCodeValue -eq 1 -or $statusCodeValue -eq 526430001)) {\n      throw \"Certification request $statusCodeLabel\"\n   }\n\n   # Approve the request\n   ResolveApproval `\n      -certificationRequestId $certificationRequestId `\n      -requestsuccess $true `\n      -message 'Approved by script'\n\n   Write-Host 'Approved the certification request'\n\n   # Get the Catalog Item\n\n   $query = '?$select=mspcat_certificationrequestid'\n   $query += '&$expand=mspcat_Application($select=mspcat_tpsid)'\n\n   $approvalRequestRecord = Get-Record `\n         -setName 'mspcat_certificationrequests' `\n         -id $certificationRequestId `\n         -query $query\n\n   $tpsid = $approvalRequestRecord.mspcat_Application.mspcat_tpsid\n\n   Write-Host ('Returning Catalog Item ID:' + $tpsid)\n\n   return $tpsid\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Field from Untyped Object Record in Power Fx\nDESCRIPTION: This snippet shows how to access a nested field 'ChildField' within 'Field' from an untyped object record 'UORecord' and convert it to a number.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_3\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nValue(UORecord.Field.ChildField)\n```\n\n----------------------------------------\n\nTITLE: Returning Current User Information - Power Apps - Markdown\nDESCRIPTION: Utilizes the User function to return a record of the current user's email, full name, Entra Object ID, and image URL. Each property is detailed along with how to use it effectively in Power Apps applications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-user.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[function-user-applies-to](includes/function-user-applies-to.md)]\n\n\n\nReturns information about the current user.\n\n## Description\n\nThe **User** function returns a [record](/power-apps/maker/canvas-apps/working-with-tables#records) of information about the current user:\n\n| Property            | Description                                                                                                                                                                                                                                                                                                  |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **User().Email**    | Email address of the current user. The `User().Email` function returns the user's UPN and not the SMTP email address.                                                                                                                                                                                        |\n| **User().EntraObjectId**    | Microsoft Entra Object ID of the current user, useful for calling APIs that use this value. This is a GUID value and unique for each user.                                                                                                                                                                                     |\n| **User().FullName** | Full name of the current user, including first and last names.                                                                                                                                                                                                                                               |\n| **User().Image**    | Image of the current user. This will be an image URL of the form \"blob:_identifier_\". Set the **[Image](/power-apps/maker/canvas-apps/controls/properties-visual)** property of the **[Image](/power-apps/maker/canvas-apps/controls/control-image)** control to this value to display the image in the app. |\n\n> [!NOTE]\n> The information returned is for the current Power Apps user. It will match the \"Account\" information that is displayed in the Power Apps players and studio, which can be found outside of any authored apps. This may not match the current user's information in Office 365 or other services.\n\n> [!NOTE]\n> If you published your application with a User function prior to March 2020, you may find that it, intermittently, will not retrieve photos. The issues were fixed in the late March 2020 release. To take advantage of the updated implementation, simply re-open your application, save it, and republish it.\n\n## Syntax\n\n**User**()\n\n## Examples\n\nThe current Power Apps user has the following information:\n\n- Full Name: **\"John Doe\"**\n- Email address: **\"john.doe@contoso.com\"**\n- Entra Object Id: **aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb** _(GUID)_\n- Image: ![Image icon.](media/function-user/john-doe-picture.png \"Image icon\")\n\n| Formula             | Description                                                                                                                                       | Result                                                                                                                              |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- |\n| **User()**          | Record of all information for the current Power Apps user.                                                                                        | { FullName:&nbsp;\"John Doe\", Email:&nbsp;\"john.doe@contoso.com\", Image:&nbsp;\"blob:1234...5678\", EntraObjectId:&nbsp;a90c6800&#8209;e58c&#8209;4495&#8209;81f7&#8209;55819b56fe2a }                                   |\n| **User().Email**    | The email address of the current Power Apps user.                                                                                                 | \"john.doe@contoso.com\"                                                                                                              |\n| **User().FullName** | The full name of the current Power Apps user.                                                                                                     | \"John Doe\"                                                                                                                          |\n| **User().EntraObjectId** | Microsoft Entra Object ID of the current user.                                                                                                   | aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb _(GUID)_                                                                                           |\n| **User().Image**    | The image URL for the current Power Apps user. Set the **Image** property of the **Image** control to this value to display the image in the app. | \"blob:1234...5678\"<br><br>With **ImageControl.Image**:<br>![Image icon 1.](media/function-user/john-doe-picture.png \"Image icon 1\") |\n\n```\n\n----------------------------------------\n\nTITLE: Adding Environment to Group - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: Defines parameters for adding an environment to a specified group in the Microsoft Power Platform. Required parameters include the environment group, with optional specification of the environment. This command is essential for organizing environments within the Dataverse ecosystem.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## pac admin add-group\n\nAdd environment to a group.\n\n### Required Parameters for admin add-group\n\n#### `--environment-group` `-eg`\n\nEnvironment group.\n\n### Optional Parameters for admin add-group\n\n#### `--environment` `-env`\n\nEnvironment (ID, org ID, url, unique name, or partial name).\n```\n\n----------------------------------------\n\nTITLE: Setting a Global Theme Variable in Power Fx\nDESCRIPTION: This Power Fx formula sets a global variable `AppTheme` with a theme object generated from the Fluent UI Theme Designer app and `AppThemeJson` by converting AppTheme to JSON format. This variable can then be referenced by all components in the app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/theme.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nSet(\n    AppTheme,\n    /* START THEME OBJECT */\n    {\n        palette: {\n            themePrimary: \"#0078d4\",\n            themeLighterAlt: \"#eff6fc\",\n            themeLighter: \"#deecf9\",\n            themeLight: \"#c7e0f4\",\n            themeTertiary: \"#71afe5\",\n            themeSecondary: \"#2b88d8\",\n            themeDarkAlt: \"#106ebe\",\n            themeDark: \"#005a9e\",\n            themeDarker: \"#004578\",\n            neutralLighterAlt: \"#faf9f8\",\n            neutralLighter: \"#f3f2f1\",\n            neutralLight: \"#edebe9\",\n            neutralQuaternaryAlt: \"#e1dfdd\",\n            neutralQuaternary: \"#d0d0d0\",\n            neutralTertiaryAlt: \"#c8c6c4\",\n            neutralTertiary: \"#a19f9d\",\n            neutralSecondary: \"#605e5c\",\n            neutralPrimaryAlt: \"#3b3a39\",\n            neutralPrimary:\"#323130\",\n            neutralDark: \"#201f1e\",\n            black: \"#000000\",\n            white: \"#ffffff\"\n        }\n    }\n    /* END THEME OBJECT */\n);\nSet(\n    AppThemeJson,\n    JSON(\n        AppTheme,\n        JSONFormat.IndentFour\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting Power Platform Solution with Service Principal\nDESCRIPTION: YAML configuration for exporting a Power Platform solution using Service Principal authentication. Includes comprehensive export settings for various configuration types.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@2\n  displayName: 'Power Platform Export Solution '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n    SolutionName: 'Contoso_sample'\n    SolutionOutputFile: 'C:\\Public\\Contoso_sample_1_0_0_1_managed.zip'\n    Managed: true\n    MaxAsyncWaitTime: 120\n    ExportAutoNumberingSettings: true\n    ExportCalendarSettings: true\n    ExportCustomizationSettings: true\n    ExportEmailTrackingSettings: true\n    ExportGeneralSettings: true\n    ExportIsvConfig: true\n    ExportMarketingSettings: true\n    ExportOutlookSynchronizationSettings: true\n    ExportRelationshipRoles: true\n    ExportSales: true\n```\n\n----------------------------------------\n\nTITLE: Filtering Records by Names Containing Search Text in Power Apps\nDESCRIPTION: This formula filters a Customers data source to show records where the search text appears anywhere within the Name column. It uses the 'in' operator for substring matching and is case insensitive.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_6\n\nLANGUAGE: PowerApps\nCODE:\n```\nFilter(Customers, SearchInput.Text in Name)\n```\n\n----------------------------------------\n\nTITLE: EndsWith Basic Examples in Power Fx\nDESCRIPTION: Examples demonstrating the EndsWith function usage with different text patterns and case sensitivity behavior.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-startswith.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nEndsWith(\"Hello World\", \"world\")     // Returns true\nEndsWith(\"Good bye\", \"good\")         // Returns false\nEndsWith(\"Always say hello\", \"hello\") // Returns true\nEndsWith(\"Bye bye\", \"\")              // Returns true\n```\n\n----------------------------------------\n\nTITLE: Output to Table - PowerShell\nDESCRIPTION: This PowerShell snippet takes a fully populated array, `$capacityDetailsList`, and formats it into a table using the `Format-Table` commandlet. The `-AutoSize` parameter ensures that the columns are automatically sized to fit the content. This allows for easy readability of the environment capacity data in a tabular format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-create-daily-capacity-report.md#2025-04-20_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$capacityDetailsList | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Defining Power Platform Environment JSON Schema\nDESCRIPTION: Detailed JSON schema describing the structure of Power Platform environment objects, including nested properties for locations, states, and types\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-create-daily-capacity-report.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"type\": {\n            \"type\": \"string\"\n        },\n        \"location\": {\n            \"type\": \"object\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"properties\": {\n            \"states\": {\n                \"management\": {\n                    \"id\": \"string\"\n                },\n                \"runtime\": {\n                    \"id\": \"string\"\n                }\n            }\n        }\n    },\n    \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Confirmation Dialog in Power Fx\nDESCRIPTION: Displays a basic confirmation dialog asking the user to confirm before deleting a record. The record is only removed if the user selects 'OK'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-confirm.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Confirm( \"Are you sure?\" ), Remove( ThisItem ) )\n```\n\n----------------------------------------\n\nTITLE: Composite Regular Expression for Multiple Data Types\nDESCRIPTION: A comprehensive regular expression that combines patterns for multiple sensitive data types including SSNs, email addresses, account numbers, and credit card numbers. The patterns are separated by the pipe (|) character.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-manage-masking-rules.md#2025-04-20_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n\\d(?=\\d{2}-\\d{2}-\\d{4}|\\d-\\d{2}-\\d{4}|-\\d{2}-\\d{4}|\\d-\\d{4}|-\\d{4})| \\S+@\\S+\\.\\S+|[STFGM]\\d{4}|(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})\n```\n\n----------------------------------------\n\nTITLE: Setting Date Values in Power Apps Test Studio\nDESCRIPTION: Sets the SelectedDate property of a DatePicker control to a specific date.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setproperty.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerFx\nCODE:\n```\nSetProperty(DatePicker1.SelectedDate, Date(2020,3,10))\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for DLP Policy Flow Analysis\nDESCRIPTION: A comprehensive PowerShell script that scans all DLP policies in a tenant, identifies flows with blocked triggers, and generates a detailed report. The script requires Power Platform Administrator privileges and uses both PowerApps Administration and PowerShell modules. It checks each environment and flow against existing DLP policies and outputs results to a CSV file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/identify-blocked-flows-data-policies.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# Prompt user to capture TenantId\n$TenantId = Read-Host \"Please provide your Microsoft Entra TenantId Guid\"\nif($TenantId -eq \"\")\n{\n    Write-Host \"TenantId is required. Exiting...\" -ForegroundColor Red\n    Exit;\n}\n\nfunction Is-Guid {\n    param (\n        [string]$Guid\n    )\n    try {\n        [Guid]::Parse($Guid) | Out-Null\n        return $true\n    } catch {\n        return $false\n    }\n}\n\nif(Is-Guid -Guid $TenantId)\n{\n    ##We can proceed\n}\nelse\n{\n    Write-Host \"TenantId is not a valid Guid format. Exiting...\" -ForegroundColor Red\n    Exit;\n}\n\n# Load Power Platform Administration PowerShell module\nImport-Module Microsoft.PowerApps.Administration.PowerShell -ErrorAction Stop\nImport-Module Microsoft.PowerApps.PowerShell -ErrorAction Stop\n\nAdd-PowerAppsAccount\n\n# Initialize output\n$output = @()\n\nWrite-Host \"Fetching all DLP policies in the tenant...\" -ForegroundColor Cyan\n\ntry {\n    # Fetch all DLP policies\n    $dlpPolicies = Get-AdminDlpPolicy\n    $totalPolicies = $dlpPolicies.Count\n    if($totalPolicies -eq $null)\n    {\n        $totalPolicies = 1\n    }\n\n    Write-Host \"Done. Fetching all Environments in the tenant...\" -ForegroundColor Cyan\n    $allEnvironments = Get-AdminPowerAppEnvironment\n    Write-Host \"Done.\"\n} catch {\n    Write-Host \"Failed to fetch DLP policies: $_\" -ForegroundColor Red\n    exit\n}\n\n$policyIndex = 0\nforeach ($policy in $dlpPolicies) {\n\n$policyIndex++\nWrite-Progress -Activity \"Processing Policies\" -Status \"Processing $policyIndex of $totalPolicies\" -PercentComplete (($policyIndex / $totalPolicies) * 100)\n\n    try {\n        Write-Host \"Processing DLP Policy: $($policy.DisplayName)\" -ForegroundColor Cyan\n\n        # Initialize actionBlockedConnectorIds\n        $actionBlockedConnectorIds = @()\n\n        # Retrieve connector configurations for the policy\n        $connectorConfigurations = Get-PowerAppDlpPolicyConnectorConfigurations -TenantId $TenantId -PolicyName $policy.PolicyName\n\n        if (-not $connectorConfigurations.connectorActionConfigurations) {\n            Write-Host \"Skipping policy $($policy.DisplayName) - No action control policy settings defined.\" -ForegroundColor Gray\n            continue\n        }\n\n        foreach ($connectorConfig in $connectorConfigurations.connectorActionConfigurations) {\n            $connectorId = $connectorConfig.connectorId\n\n            # Check if the connector has actions blocked by default\n            if ($connectorConfig.defaultConnectorActionRuleBehavior -eq 'Block') {\n                Write-Host \"Connector with default blocked actions found: $connectorId in Policy $($policy.DisplayName)\" -ForegroundColor Yellow\n\n                $actionBlockedConnectorIds += $connectorId\n            }\n        }\n\n        # Determine environments impacted by the policy\n        Write-Host \"Determining environments impacted by the policy...\" -ForegroundColor Cyan\n        $environments = @()\n\n        switch ($policy.FilterType) {\n            \"\" {\n                $environments = $allEnvironments\n            }\n            \"include\" {\n                $environments = $policy.Environments | ForEach-Object { $_.name }\n            }\n            \"exclude\" {\n                $policyEnvironmentNames = $policy.Environments | ForEach-Object { $_.name }\n                $environments = $allEnvironments | Where-Object { $_.EnvironmentName -notin $policyEnvironmentNames }\n            }\n        }\n\n        $environmentIndex = 0\n        $environmentCount = $environments.Count\n        if($environmentCount -eq $null)\n        {\n            $environmentCount = 1\n        }\n        foreach ($environment in $environments) {\n            $environmentIndex++\n            Write-Progress -Activity \"Processing Environments\" -Status \"Environment $environmentIndex of $environmentCount\" -PercentComplete (($environmentIndex / $environmentCount) * 100)\n\n            $environmentId = if ($environment -is [string]) { $environment } else { $environment.EnvironmentName }\n\n            $environmentDetails = Get-AdminPowerAppEnvironment -EnvironmentName $environmentId\n            Write-Host \"Processing environment: $environmentId - \" + $environmentDetails.DisplayName -ForegroundColor Green\n\n            # Capture Flow Management API URI\n            $flowBaseUri = $environmentDetails.Internal.properties.runtimeEndpoints.'microsoft.Flow'\n\n            # Fetch flows in the environment\n            try {\n                $flowsUri = $flowBaseUri + '/providers/Microsoft.ProcessSimple/scopes/admin/environments/' + $environmentId + '/v2/flows'\n                $flowsOutput = InvokeAPi -Method Get -Route $flowsUri -Body \"\"\n                        \n            } catch {\n                Write-Host \"Failed to fetch flows for environment $environmentId : $_\" -ForegroundColor Red\n                continue\n            }\n\n            $flows = $flowsOutput\n            $flowIndex = 0\n            $flowsCount = $flows.value.Count\n            if($flowsCount -eq $null)\n            {\n                $flowsCount = 1\n            }\n            foreach ($flow in $flows.value) {\n                $flowIndex++\n                Write-Progress -Activity \"Processing Flows\" -Status \"Flow $flowIndex of $flowsCount \" -PercentComplete (($flowIndex / $flowsCount) * 100)\n\n                # Check if flow's trigger uses the restricted connector\n                Write-Host \"Flow display name: \" $flow.properties.displayName \n                Write-Host \"Flow status: \" $flow.properties.state\n                        \n                $flowDetailsUri = $flowBaseUri + '/providers/Microsoft.ProcessSimple/scopes/admin/environments/' + $environmentId + '/flows/' + $flow.name\n                $flowDetailsOutput = InvokeAPi -Method Get -Route $flowDetailsUri -Body \"\"\n\n                $HasBlockedTriggers = \"No\"\n                foreach($trig in $flowDetailsOutput.properties.definitionSummary.triggers)\n                {\n                    Write-Host $trig.type $trig.swaggerOperationId $trig.api\n                    if($trig.api.id -in $actionBlockedConnectorIds)\n                    {\n                        Write-Host \"Flow using restricted trigger connector found: $($flow.properties.displayName)\" -ForegroundColor Yellow\n                        $output += [PSCustomObject]@{\n                            FlowId            = $flow.name\n                            FlowName          = $flow.properties.displayName\n                            EnvironmentId     = $environmentId\n                            PolicyId          = $policy.PolicyName\n                            ConnectorId       = $trig.api.id\n                            TriggerOperationId = $trig.swaggerOperationId\n                            PolicyUrl         = \"https://admin.powerplatform.microsoft.com/policies/dlp/policyId/$($policy.PolicyName)\"\n                        }\n                        $HasBlockedTriggers = \"Yes\"\n                    }\n\n                }\n\n                if($HasBlockedTriggers -eq \"No\")\n                {\n                    Write-Host \"No blocked triggers found.\"\n                }\n            }\n        }\n    } catch {\n        Write-Host \"Error processing policy $($policy.DisplayName): $_\" -ForegroundColor Red\n    }\n}\n\n# Final Output\nWrite-Host \"`nResults Summary:\" -ForegroundColor Cyan\n$output | Format-Table -AutoSize\n\nif($output.Count -gt 0)\n{\n    # Prompt user to save output as CSV\n    $saveCsv = Read-Host \"Do you want to save the results to ImpactedFlows.csv? (Y/N)\"\n    if ($saveCsv -eq 'Y') {\n        $output | Export-Csv -Path \"$(Get-Location)\\ImpactedFlows.csv\" -NoTypeInformation -Force\n        Write-Host \"Results saved to ImpactedFlows.csv\" -ForegroundColor Green\n    } else {\n        Write-Host \"Results not saved.\" -ForegroundColor Yellow\n    }\n}\nelse\n{\n    Write-Host \"No triggers were found in violation of your DLP policies.  Please let Microsoft know via Support Ticket that you would like to be removed from runtime enforcement exclusion for DLP policies.\"\n}\n\n# Instructions for deep linking\nWrite-Host \"`nTo review a DLP policy, navigate to:\" -ForegroundColor Cyan\nWrite-Host \"https://admin.powerplatform.microsoft.com/policies/dlp/policyId/{PolicyId}\" -ForegroundColor Green\nWrite-Host \"You may need to adjust the PPAC Admin URL for GCC, GCCH, Mooncake, DoD, and other clouds.\" -ForegroundColor Cyan\n```\n\n----------------------------------------\n\nTITLE: Using SubmitForm Function in PowerFx\nDESCRIPTION: The SubmitForm function saves changes from a Form control to the data source after validating all required fields and constraints. It's typically used in a Button control's OnSelect property and triggers different behaviors based on success or failure.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerFx\nCODE:\n```\nSubmitForm( FormName )\n```\n\n----------------------------------------\n\nTITLE: Form Validation with SetFocus in Power Apps\nDESCRIPTION: Complex validation formula that checks multiple form fields for blank values, displays error notifications, and sets focus to the first empty required field. Used in a scrollable screen form context.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setfocus.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( IsBlank( Name ),\n        Notify( \"Name requires a value\", Error ); SetFocus( Name ),\n    IsBlank( Street1 ),\n        Notify( \"Street Address 1 requires a value\", Error ); SetFocus( Street1 ),\n    IsBlank( Street2 ),\n        Notify( \"Street Address 2 requires a value\", Error ); SetFocus( Street2 ),\n    IsBlank( City ),\n        Notify( \"City requires a value\", Error ); SetFocus( City ),\n    IsBlank( County ),\n        Notify( \"County requires a value\", Error ); SetFocus( County ),\n    IsBlank( StateProvince ),\n        Notify( \"State or Province requires a value\", Error ); SetFocus( StateProvince ),\n    IsBlank( PostalCode ),\n        Notify( \"Postal Code requires a value\", Error ); SetFocus( PostalCode ),\n    IsBlank( Phone ),\n        Notify( \"Contact Phone requires a value\", Error ); SetFocus( Phone ),\n    Notify( \"Form is Complete\", Success )\n)\n```\n\n----------------------------------------\n\nTITLE: Polling Catalog Install Success with .NET SDK\nDESCRIPTION: A static method that checks the success of a catalog item installation using the .NET SDK by polling the Install History record. It takes an IOrganizationService instance, installation history ID, and interval in seconds as parameters and returns a boolean indicating success. The polling is limited to 10 attempts and checks for the 'Completed' status code (526430003) in the response.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/install-items.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\\n/// Polls the install success of a catalog item\\n/// </summary>\\n/// <param name=\"service\">The authenticated IOrganizationService instance.</param>\\n/// <param name=\"id\">The mspcat_installhistoryid value</param>\\n/// <param name=\"intervalInSeconds\">The number of seconds of interval</param>\\n/// <returns>Whether the installation succeeded</returns>\\n/// <exception cref=\"Exception\">The polling is limited to 10 attempts.</exception>\\nstatic bool GetInstallSuccess(IOrganizationService service, Guid id, int intervalInSeconds = 60) {\\n\\n    int maxAttempts = 10;\\n    int attempts = 0;\\n\\n    while (attempts < maxAttempts)\\n    {\\n        attempts++;\\n        Entity currentValue = service.Retrieve(\"mspcat_installhistory\", id, new ColumnSet(\"statecode\", \"statuscode\"));\\n\\n        // Wait until the state of the operation is inactive\\n        if (currentValue.GetAttributeValue<OptionSetValue>(\"statecode\").Value.Equals(1))\\n        {\\n            if  (currentValue.GetAttributeValue<OptionSetValue>(\"statuscode\").Value.Equals(526430003))\\n            {\\n               // When the statuscode values is 'Completed'\\n                return true;\\n            }\\n            // Any other status code: 'Inactive' or 'Failed'.\\n            return false;\\n        }\\n        Thread.Sleep(intervalInSeconds * 1000);\\n    }\\n\\n    throw new Exception(\"Maximum number of polling attempts exceeded.\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Date and Time - Power FX\nDESCRIPTION: The DateAdd function adds or subtracts a specified number of units to/from a given date/time value. It supports units such as milliseconds, minutes, and months. This function can adjust date/time values by adding positive or negative integers and converting local time to UTC when used with TimeZoneOffset.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-dateadd-datediff.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\n**DateAdd**( _DateTime_, _Addition_ [, *Units* ] )\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Access Location Restrictions for Microsoft Dataverse\nDESCRIPTION: Steps to create a Conditional Access policy that blocks access to Microsoft Dataverse based on specific location constraints. Requires Microsoft Entra ID P1 or P3 subscription.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/restrict-access-online-trusted-ip-rules.md#2025-04-20_snippet_0\n\nLANGUAGE: Azure Portal Steps\nCODE:\n```\n1. Create Named Location\n2. Create Conditional Access Policy\n3. Select Cloud App: Common Data Service\n4. Define Location Restrictions\n5. Configure Access Controls\n```\n\n----------------------------------------\n\nTITLE: Setting Selection Controls in Power Apps Test Studio\nDESCRIPTION: Sets values for Radio, Dropdown, Combobox, and ListBox controls with various selection properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setproperty.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerFx\nCODE:\n```\nSetProperty(Radio1.Selected, \"Yes\")\nSetProperty(Dropdown1.Selected, {Value:\"Sample value\"})\nSetProperty(ComboBox1.SelectedItems, Table({Value:\"Sample value\"},({Value:\"Sample value\"})))\nSetProperty(Listbox1.SelectedItems, Table({Value:\"Sample value\"},({Value:\"Sample value\"})))\n```\n\n----------------------------------------\n\nTITLE: Example: If Statement with DefaultResult\nDESCRIPTION: An If statement that evaluates a condition and provides both a ThenResult and DefaultResult. When the condition is true, it returns the ThenResult.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerFx\nCODE:\n```\nIf( Slider1.Value = 25, \"Result1\", \"Result2\" )\n```\n\n----------------------------------------\n\nTITLE: Checking edit permission for a record in Power Apps using RecordInfo\nDESCRIPTION: This example demonstrates how to use the RecordInfo function to check if the current user has edit permissions for the first record in the Accounts data source. The Accounts data source could be in Dataverse, SharePoint, SQL Server, or another tabular data source. The function returns true if the user has permission to edit the record and modify the Accounts data source.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-recordinfo.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nRecordInfo( First(Accounts), RecordInfo.EditPermission )\n```\n\n----------------------------------------\n\nTITLE: Setting a Table Variable in Power Fx\nDESCRIPTION: This snippet demonstrates the use of the Set function to assign a table to a global variable named Products, containing multiple records of product data. It requires no external dependencies and sets up the context for further table manipulations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Products,\n    Table(\n        { Product: \"Widget\",    'Quantity Requested': 6,  'Quantity Available': 3 },\n        { Product: \"Gadget\",    'Quantity Requested': 10, 'Quantity Available': 20 },\n        { Product: \"Gizmo\",     'Quantity Requested': 4,  'Quantity Available': 11 },\n        { Product: \"Apparatus\", 'Quantity Requested': 7,  'Quantity Available': 6 }\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Using EditForm Function in PowerFx\nDESCRIPTION: The EditForm function changes a Form control to FormMode.Edit mode, which populates the form with existing data from the Item property. In this mode, submitting the form will update an existing record rather than create a new one.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerFx\nCODE:\n```\nEditForm( FormName )\n```\n\n----------------------------------------\n\nTITLE: Converting Array of Records to Typed Table After Table Conversion in Power Fx\nDESCRIPTION: This example shows how to convert an untyped object array of records 'UORecordArray' to a typed table using ForAll function after first converting it to a table, requiring the use of the 'Value' column.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_11\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nForAll( Table(UORecordArray), { FirstField: Value(ThisRecord.Value.FirstField), SecondField: Text(ThisRecord.Value.SecondField) } )\n```\n\n----------------------------------------\n\nTITLE: Complete Record Validation Examples\nDESCRIPTION: Examples demonstrating validation of complete records using EditRecord and Gallery.Updates.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-validate.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Validate( Scores, EditRecord, Gallery.Updates )**\n**Validate( Scores, EditRecord, Gallery.Updates )**\n```\n\n----------------------------------------\n\nTITLE: Setting Current User as Owner of a Canvas App via PowerShell\nDESCRIPTION: Modifies the ownership of a specified app to the current user's session ID. Requires the app and environment names, which are unique identifiers, not display names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AdminPowerAppOwner –AppName 'AppName' -AppOwner $Global:currentSession.userId –EnvironmentName 'EnvironmentName'\n```\n\n----------------------------------------\n\nTITLE: Opening Dialog with Power Fx\nDESCRIPTION: This snippet demonstrates how to open a dialog by setting a Boolean context variable to true using Power Fx. This variable controls the dialog's visibility, and configuring it in an action formula enables dynamic dialog display in the app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/dialog.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ showHideDialog: true })\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Fields from JSON in Power Fx\nDESCRIPTION: Example of accessing nested fields from a JSON object using ParseJSON in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_11\n\nLANGUAGE: power-fx\nCODE:\n```\nText( ParseJSON( JsonString ).parent.child )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nValue( ParseJSON( JsonString ).number )\n```\n\n----------------------------------------\n\nTITLE: Resetting a Power Platform Environment using YAML in Azure DevOps\nDESCRIPTION: This YAML snippet demonstrates the use of the PowerPlatformResetEnvironment task to reset a Power Platform environment. It uses a Service Principal for authentication and allows specifying currency and apps to be included in the reset.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.reset-environment.PowerPlatformResetEnvironment@2\n  displayName: 'Power Platform Reset Environment '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    CurrencyName: ALL\n    Purpose: 'Reset to PointInTime'\n    AppsTemplate: 'D365_CustomerService,D365_FieldService'\n```\n\n----------------------------------------\n\nTITLE: Closing Dialog with Power Fx\nDESCRIPTION: Utilizing Power Fx, this snippet closes a dialog by updating the same context variable to false. Assign this logic to the dialog's 'OnCloseSelect' property to ensure it closes when required.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/dialog.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ showHideDialog: false })\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with StartsWith in Power Apps\nDESCRIPTION: This Power Fx formula filters the 'Customers' collection to display records where the 'Name' field starts with the text entered in the 'SearchInput' control. The StartsWith function performs a case-insensitive comparison to find matching records.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-startswith.md#2025-04-20_snippet_3\n\nLANGUAGE: powerfx\nCODE:\n```\nFilter( Customers, StartsWith( Name, SearchInput.Text ) )\n```\n\n----------------------------------------\n\nTITLE: Using FirstN Function - Power FX\nDESCRIPTION: This snippet demonstrates the FirstN function, allowing retrieval of the first two records from the IceCream table, returning a subset of the data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-first-last.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nFirstN( IceCream, 2 )\n```\n\n----------------------------------------\n\nTITLE: Updating Employee Status with ThisRecord - Power FX\nDESCRIPTION: This snippet shows how to use ThisRecord within a With and ForAll construct to update the status of all inactive employees to active. It portrays the practical application of record manipulation in Power FX.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_20\n\nLANGUAGE: Power FX\nCODE:\n```\nWith( { InactiveEmployees: Filter( Employees, Status = 'Status (Employees)'.Inactive ) },\n      ForAll( InactiveEmployees,\n              Patch( Employees, ThisRecord, { Status: 'Status (Employees)'.Active } ) ) ) )\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection Sorting for Fluent Detail List\nDESCRIPTION: Expression for the Items property that sorts a collection based on the user-selected column and direction using the SortByColumns function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_10\n\nLANGUAGE: power-fx\nCODE:\n```\nSortByColumns(colData,ctxSortCol,If(ctxSortAsc,SortOrder.Ascending,SortOrder.Descending))\n```\n\n----------------------------------------\n\nTITLE: Detecting Solution Component Dependencies\nDESCRIPTION: Retrieves and reports dependencies between solution components, helping identify potential blocking issues during solution management\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nQueryByAttribute componentQuery = new QueryByAttribute\n{\n    EntityName = SolutionComponent.EntityLogicalName,\n    ColumnSet = new ColumnSet(\"componenttype\", \"objectid\", \"solutioncomponentid\", \"solutionid\"),\n    Attributes = { \"solutionid\" },\n    Values = { _primarySolutionId }\n};\n\nIEnumerable<SolutionComponent> allComponents =\n    _serviceProxy.RetrieveMultiple(componentQuery).Entities.Cast<SolutionComponent>();\n\nforeach (SolutionComponent component in allComponents)\n{\n    RetrieveDependentComponentsRequest dependentComponentsRequest =\n        new RetrieveDependentComponentsRequest\n        {\n            ComponentType = component.ComponentType.Value,\n            ObjectId = component.ObjectId.Value\n        };\n    RetrieveDependentComponentsResponse dependentComponentsResponse =\n        (RetrieveDependentComponentsResponse)_serviceProxy.Execute(dependentComponentsRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Method Using Variables in Power Apps\nDESCRIPTION: This example demonstrates resetting a control using a variable. It sets the Reset property to a variable value and toggles that variable using a Button's OnSelect property, providing a way to control reset behavior programmatically.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-reset.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nReset = MyVar\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nButton.OnSelect = Set( MyVar, true ); Set( MyVar, false )\n```\n\n----------------------------------------\n\nTITLE: Configuring OnChange Event Behavior in Fluent Detail List\nDESCRIPTION: Comprehensive formula for the OnChange property to handle different event types including row selection changes and cell actions for link-type columns.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_14\n\nLANGUAGE: power-fx\nCODE:\n```\n/* Runs when selected row changes and control property 'Raise OnRowSelection event' is true */\nIf( Self.EventName = \"OnRowSelectionChange\",\n    Notify( \"Row Select \" & Self.EventRowKey )\n);\n\n/* Runs when a user selects a column with ColCellType set to 'link' */\nIf( Self.EventName = \"CellAction\",\n    Notify( \"Open Link \" &  Self.EventColumn & \" \" & Self.EventRowKey )\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Polymorphic Lookups in Power Apps using IsType and AsType\nDESCRIPTION: Formula for a subtitle in a gallery that displays different text based on the type of record reference in the 'Company Name' field. It checks if the field is blank, if it's an Account record, or if it's a Contact record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( IsBlank( ThisItem.'Company Name' ), \"--\",\n    IsType( ThisItem.'Company Name', Accounts ),\n        \"Account: \" & AsType( ThisItem.'Company Name', Accounts ).'Account Name',\n    \"Contact: \" & AsType( ThisItem.'Company Name', Contacts ).'Full Name'\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Collection with Sample Data in Power Fx\nDESCRIPTION: This code snippet initializes a collection named 'IceCream' with sample records containing 'ID', 'Flavor', and 'Quantity' fields. The ClearCollect function clears any existing data in the 'IceCream' collection and adds the specified records. This snippet is typically used within the OnSelect property of a Button control to populate the collection when the button is pressed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-remove-removeif.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( IceCream,\n                 { ID: 1, Flavor: \"Chocolate\",  Quantity: 100 },\n                 { ID: 2, Flavor: \"Vanilla\",    Quantity: 200 },\n                 { ID: 3, Flavor: \"Strawberry\", Quantity: 300 }\n   )\n```\n\n----------------------------------------\n\nTITLE: Incrementing a Global Variable with Power Fx Set\nDESCRIPTION: This code snippet demonstrates incrementing a global variable's value using the `Set` function.  The current value of `Counter` is retrieved, incremented by 1, and then assigned back to the `Counter` variable. This is a common pattern for keeping track of counts or iterations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-set.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Set( Counter, Counter + 1 )\"\n```\n\n----------------------------------------\n\nTITLE: Basic IfError Usage for Division by Zero Handling in Power Apps\nDESCRIPTION: Demonstrates how to use the IfError function to handle a potential division by zero error by providing a fallback value of 0.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nIfError( 1/x, 0 )\n```\n\n----------------------------------------\n\nTITLE: Installing Catalog Item in Power Platform CLI\nDESCRIPTION: This command installs a specified catalog item to the target environment, with parameters that control the target environment, status polling, and installation settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/catalog.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## pac catalog install\n\nInstall a catalog item to the target environment.\n\n### Required Parameters for catalog install\n\n#### `--catalog-item-id` `-cid`\n\nCatalog item to be installed on the target environment.\n\n### Optional Parameters for catalog install\n\n#### `--environment` `-env`\n\nUrl or ID of the environment that has catalog installed. When not specified, the active organization selected for the current auth profile will be used.\n\n#### `--poll-status` `-ps`\n\nPoll to check status of your request\n\n#### `--settings` `-s`\n\nRuntime Package Settings for the installation framework to execute. The format of the string must be `key=value|key=value`.\n\n#### `--target-env` `-te`\n\nUrl or ID of the target environment for catalog item installation\n\n#### `--target-version` `-tv`\n\nTarget version to install. If left empty, the published version is selected.\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to Date and Time in Power Fx\nDESCRIPTION: Examples of converting JSON date and time string representations to Date, Time, or DateTime data types in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nDateValue( ParseJSON(\"{ \\\"appointment\\\": \\\"2022-05-10\\\" }\").appointment )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nDateValue( Text( ParseJSON(\"{ \\\"appointment\\\": \\\"May 5, 2022\\\" }\").appointment ) )\n```\n\n----------------------------------------\n\nTITLE: Displaying TenantID with Power Fx\nDESCRIPTION: This code snippet demonstrates how to use Power Fx to display the TenantID, a GUID representing the Microsoft Entra tenant for the current user, in the text property of a label. Useful for assessing current user domain without external dependencies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-host.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nLabel1.Text: Host.TenantID\n```\n\n----------------------------------------\n\nTITLE: Route Environments to Environment Group in Classic Admin Center\nDESCRIPTION: This snippet describes how to route new developer environments to a specific environment group in the classic Power Platform Admin Center. It involves navigating to Environment groups, selecting Environment Routing, and choosing the desired group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Select **Environment groups** in the navigation pane.\n2. Select the **Environment Routing** button in the command bar.\n3. Under the **Environment group** section, choose the group you want your new developer environments to be created in.\n4. Select **Save**.\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Status Return Value in Power Apps\nDESCRIPTION: Shows how to use IfError to both handle errors and return a success/failure status for the overall operation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_3\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nIfError(\n    Patch( DS1, ... ), Notify( \"problem in the first action\" );  false,\n    Patch( DS2, ... ), Notify( \"problem in the second action\" ); false,\n    true\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON into Untyped Object Using ParseJSON\nDESCRIPTION: This snippet illustrates how to read a JSON string and convert it into an Untyped object. It uses the ParseJSON function to create a variable representing the item details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( untyped, ParseJSON( jsonStringVariable ) );\n\nSet( item, Text ( untyped.ItemName ) );\nSet( quantity, Value ( untyped.Quantity ) );\nSet( release, DateValue ( untyped.ReleaseDate ) );\nSet( preorder, Boolean ( untyped.AvailableForPreOrder ) );\n```\n\n----------------------------------------\n\nTITLE: Creating Sample City Population Data Table in Power FX\nDESCRIPTION: Creates a table containing city population data with columns for City, Country, and Population used to demonstrate the Summarize function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-summarize.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nSet( CityPopulations,\n   Table(\n        { City: \"London\",    Country: \"United Kingdom\", Population: 8615000},\n        { City: \"Berlin\",    Country: \"Germany\",        Population: 3562000},\n        { City: \"Madrid\",    Country: \"Spain\",          Population: 3165000},\n        { City: \"Rome\",      Country: \"Italy\",          Population: 2874000},\n        { City: \"Paris\",     Country: \"France\",         Population: 2273000},\n        { City: \"Hamburg\",   Country: \"Germany\",        Population: 1760000},\n        { City: \"Barcelona\", Country: \"Spain\",          Population: 1602000},\n        { City: \"Munich\",    Country: \"Germany\",        Population: 1494000},\n        { City: \"Milan\",     Country: \"Italy\",          Population: 1344000}\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting and Grouping City Data using Power Fx\nDESCRIPTION: This snippet demonstrates how to collect city population data and group it by country using Power Fx. It requires a Button control in Power Apps to trigger the collection and grouping of the data structure. The result is stored in a collection that can be inspected through the Power Apps interface.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( CityPopulations,\n    { City: \"London\",    Country: \"United Kingdom\", Population: 8615000 },\n    { City: \"Berlin\",    Country: \"Germany\",        Population: 3562000 },\n    { City: \"Madrid\",    Country: \"Spain\",          Population: 3165000 },\n    { City: \"Hamburg\",   Country: \"Germany\",        Population: 1760000 },\n    { City: \"Barcelona\", Country: \"Spain\",          Population: 1602000 },\n    { City: \"Munich\",    Country: \"Germany\",        Population: 1494000 }\n);\nClearCollect( CitiesByCountry, GroupBy( CityPopulations, \"Country\", \"Cities\" ) )\n```\n\n----------------------------------------\n\nTITLE: Referencing Power Platform CLI Commands\nDESCRIPTION: Code samples showing how to reference the pack, unpack, and create commands in Power Platform CLI\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npack\nunpack\ncreate\n```\n\n----------------------------------------\n\nTITLE: Parent Operator Example in Power Platform\nDESCRIPTION: This snippet demonstrates the 'Parent' operator to access properties of a control container in Power Platform, such as Parent.Fill.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_14\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Parent.Fill\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Color Brightness with ColorFade Function in Power Fx\nDESCRIPTION: Shows how to use the ColorFade function to create brighter or darker versions of a color. The fade amount ranges from -1 (black) to 0 (no change) to 1 (white).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Fx\nCODE:\n```\nColorFade( Color, FadeAmount )\n```\n\n----------------------------------------\n\nTITLE: Using Disambiguation Operator in Power Fx\nDESCRIPTION: Shows how to use the disambiguation operator to reference a global variable when a context variable has the same name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_7\n\nLANGUAGE: Power Fx\nCODE:\n```\n[@Radius]\n```\n\n----------------------------------------\n\nTITLE: Deleting Power Platform Authentication Profile Using PAC CLI\nDESCRIPTION: Demonstrates how to remove a specific authentication profile from Power Platform CLI using the index parameter. The command deletes the profile at index position 2 from the stored authentication profiles.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-delete-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac auth delete --index 2\n```\n\n----------------------------------------\n\nTITLE: Enforcing DLP Policy for Violating Connections - Environment (PowerShell)\nDESCRIPTION: This section refers to PowerShell commands that can be used to enforce data loss prevention policies for connections that violate the defined rules within a specific environment. The referenced documentation likely contains specific PowerShell cmdlets and parameters needed to enable and manage this enforcement.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/prevent-data-loss.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\n   > [!NOTE]\n   > (Optional) If necessary, consider enforcing data policies on connections. Learn more: [Enforce data policy for violating connections](powerapps-powershell.md#enforce-dlp-policy-for-violating-connections---environment)\n\n   > [!NOTE]\n   >  Enforcing data policies will disable existing connections that violate any data policies and enable any previously disabled connections that no longer violate any data policies.\n\n```\n\n----------------------------------------\n\nTITLE: Table Privilege Types in Security Roles\nDESCRIPTION: Outlines the different types of privileges that can be assigned to users when configuring security roles, including create, read, write, delete, and sharing permissions\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/security-roles-privileges.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Privilege** | **Description** |\n|---------------|------------------|\n| Create | Required to make a new record |\n| Read | Required to open a record to view the contents |\n| Write | Required to make changes to a record |\n| Delete | Required to permanently remove a record |\n| Append | Required to associate the current record with another record |\n| Append to | Required to associate a record with the current record |\n| Assign | Required to give ownership of a record to another user |\n| Share | Required to give access to a record to another user while keeping your own access |\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to a Record in Power Fx\nDESCRIPTION: Example of extracting fields from JSON to construct a Power Fx record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\n{ field: Text( ParseJSON( \"{ \\\"field\\\": \\\"value\\\" }\" ).field ) }\n```\n\n----------------------------------------\n\nTITLE: Managing Power Apps Component Framework Control Versions\nDESCRIPTION: The 'pac pcf version' command manages patch versions for Power Apps component framework controls. It includes optional parameters for updating all manifests, specifying a tracker file, setting patch version, and choosing update strategies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/pcf.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## pac pcf version\n\nPatch version for controls\n\n### Optional Parameters for pcf version\n\n#### `--allmanifests` `-a`\n\nUpdates patch version for all 'ControlManifest.xml' files\n\nThis parameter requires no value. It's a switch.\n\n#### `--filename` `-fn`\n\nTracker CSV file name to be used when using filetracking as a strategy. The default value is 'ControlsStateVersionInfo.csv'.\n\n#### `--patchversion` `-pv`\n\nPatch version for controls\n\n**Note**: The value must be an integer with minimum value of 0.\n\n#### `--path` `-p`\n\nAbsolute/Relative path of the 'ControlManifest.xml' for updating.\n\n#### `--strategy` `-s`\n\nUpdates patch version for 'ControlManifest.xml' files using specified strategy. If using gittags, set a personal access token in the following environment variable \"PacCli.PAT\"\n\nUse one of these values:\n\n- `None`\n- `GitTags`\n- `FileTracking`\n- `Manifest`\n\n#### `--updatetarget` `-ut`\n\nSpecify which target manifest needs to be updated.\n\nUse one of these values:\n\n- `build`\n- `project`\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Inventory Data Table in Power FX\nDESCRIPTION: Creates a table containing inventory data with columns for Supplier, Fruit, Price, Purchase date, and Tags to demonstrate multiple group columns.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-summarize.md#2025-04-20_snippet_2\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nSet( Inventory, \n   Table(\n      {Supplier:\"Contoso\",  Fruit:\"Grapes\",  Price:220, Purchase:Date(2015,10,1), Tags: [\"Red\",\"Seedless\"]},\n      {Supplier:\"Fabrikam\", Fruit:\"Lemons\",  Price:31,  Purchase:Date(2015,10,1), Tags: [\"Colombia\"]},\n      {Supplier:\"Contoso\",  Fruit:\"Lemons\",  Price:29,  Purchase:Date(2015,10,2), Tags: [\"Peru\"]},\n      {Supplier:\"Contoso\",  Fruit:\"Grapes\",  Price:210, Purchase:Date(2015,10,2), Tags: [\"Green\",\"Seedless\"]},\n      {Supplier:\"Fabrikam\", Fruit:\"Lemons\",  Price:30,  Purchase:Date(2015,10,3), Tags: [\"Mexico\",\"Seedless\"]},\n      {Supplier:\"Contoso\",  Fruit:\"Bananas\", Price:12,  Purchase:Date(2015,10,3), Tags: [\"Mexico\"]}\n   )\n)\n```\n\n----------------------------------------\n\nTITLE: Using LookUp Function in Power Fx\nDESCRIPTION: The LookUp function retrieves the first record from a table that meets the conditions of a specified formula. It can also reduce the result to a single value based on an optional reduction formula.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_2\n\nLANGUAGE: powerfx\nCODE:\n```\n\"LookUp(Table, Formula [, ReductionFormula])\"\n```\n\n----------------------------------------\n\nTITLE: Displaying OSType with Power Fx\nDESCRIPTION: This Power Fx code snippet is used to display the OSType, which is a text value representing the operating system of the device running the app. The example shows how to concatenate this property with a string for display in a label's text property. No additional dependencies are required.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-host.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nLabel1.Text: \"You're running \" & Host.OSType\n```\n\n----------------------------------------\n\nTITLE: Unpacking Power Platform Solution with PowerShell\nDESCRIPTION: This command uses the Power Platform CLI (pac) to unpack a solution zip file into a specified folder. It takes two parameters: the path to the zip file and the destination folder for the unpacked contents.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-unpack-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution unpack --zipfile C:\\SampleSolution.zip --folder .\\SampleSolutionUnpacked\\.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Power Platform Environments with Capacity Information\nDESCRIPTION: PowerShell script to fetch a list of environments where the user is an administrator, including detailed capacity consumption information using the '-Capacity' flag\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-create-daily-capacity-report.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$environmentsList = Get-AdminPowerAppEnvironment -Capacity\n```\n\n----------------------------------------\n\nTITLE: Configuring PeoplePicker with Dataverse Tables in Power Fx\nDESCRIPTION: This snippet provides guidance on configuring the PeoplePicker component to utilize Dataverse tables for populating suggestions. It includes Power Fx code for querying the AAD Users and Users tables, demonstrating how to bind table columns to PeoplePicker properties using the AddColumns function. This setup ensures selected entities are accurately captured within the control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/peoplepicker.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSearch('AAD Users', Self.SearchText,\"displayname\" ,\"mail\")\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nSearch('Users', Self.SearchText,\"fullname\",\"internalemailaddress\")\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nPeoplePicker1.SelectedPeople\n```\n\n----------------------------------------\n\nTITLE: Updating a Record Variable with Power Fx Set and Patch\nDESCRIPTION: This code combines the `Set` and `Patch` functions to update a specific column within a record stored in a global variable.  The `Patch` function modifies the `Address` column of the `Person` record to \"2 Main St\", and the updated record is then assigned back to the `Person` variable using `Set`.  Requires prior definition of the `Person` variable as a record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-set.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Set( Person, Patch( Person, { Address: \\\"2 Main St\\\" } ) )\"\n```\n\n----------------------------------------\n\nTITLE: Handling division by zero errors with IfError\nDESCRIPTION: This formula uses IfError to specifically handle division by zero errors (ErrorKind.Div0). If a division by zero error occurs, it's replaced with Blank().  Other errors are re-thrown using the Error function, preserving the original error.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nIfError( 1/Value( TextInput1.Text ), \n         If( FirstError.Kind = ErrorKind.Div0, Blank(), Error( FirstError ) ) )\n```\n\n----------------------------------------\n\nTITLE: Collecting Data in Power Apps Collection\nDESCRIPTION: This snippet adds the text from TextInput1.Text to the PaperTape collection. The Collect function is used to add a new row to the collection with the value from the text input.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_11\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\nCollect( PaperTape, TextInput1.Text )\n```\n\n----------------------------------------\n\nTITLE: Split Function with Different Delimiters in Power Fx\nDESCRIPTION: Examples demonstrating how the Split function handles various delimiter types including single characters, multiple characters, non-existent delimiters, and empty string delimiters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-split.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nSplit( \"Hello, World\", \",\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nSplit( \"Hello, World\", \"o\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nSplit( \"Hello, World\", \"l\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nSplit( \"Hello, World\", \"ll\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nSplit( \"Hello, World\", \"%\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nSplit( \"Hello, World\", \"\" )\n```\n\n----------------------------------------\n\nTITLE: Adding Calculated Columns in Power Fx\nDESCRIPTION: The AddColumns function is used to augment the filtered results with a new calculated column, 'Quantity To Order', which calculates the shortage in product quantities. It requires a foundational understanding of record scope and dependencies on previously defined tables.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nAddColumns( \n    Filter( Products, 'Quantity Requested' > 'Quantity Available' ), \n    \"Quantity To Order\", 'Quantity Requested' - 'Quantity Available'\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Trace Function Usage in Power Apps Button Control\nDESCRIPTION: Example showing how to use the Trace function to log incremental changes to a variable when a button is clicked. The code increments a variable x and logs its value using Trace.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-trace.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( x, x+1 );\nTrace( x );\n```\n\n----------------------------------------\n\nTITLE: Using Search Function to Find Names Containing Search Text in Power Apps\nDESCRIPTION: This formula uses the Search function to find records in the Customers data source where the text in SearchInput appears anywhere within the Name column. It's similar to using the 'in' operator but with different syntax.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_7\n\nLANGUAGE: PowerApps\nCODE:\n```\nSearch(Customers, SearchInput.Text, Name)\n```\n\n----------------------------------------\n\nTITLE: Configuring OnSelect Behavior for Facepile Control Using Power Fx\nDESCRIPTION: This code snippet illustrates how to configure the `OnSelect` property of the `Facepile` control using the `Switch()` function in Power Fx. It allows you to define specific actions to be performed when a persona is clicked, when the add button is clicked, or when the overflow button is clicked. The actions are triggered based on the selected `ItemPersonaKey` or specific events.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/facepile.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSwitch( Self.EventName,\n      /* Define action when persona clicked */\n      \"PersonaEvent\", \n      Notify(\"Persona clicked: \" & Self.Selected.ItemPersonaKey);\n      ,\n      \n      /* Define logic when the add button clicked */\n      \"AddButtonEvent\", \n      Notify(\"Add button was clicked\");\n      ,\n    \n      /* Define logic when overflow button clicked*/\n      \"OverFlowButtonEvent\",\n      Notify(\"Overflow button clicked\");\n    )\n  \n```\n\n----------------------------------------\n\nTITLE: Centralized error handling in App.OnError\nDESCRIPTION: This formula in App.OnError re-throws any error that is not a division by zero error. This allows for centralized error handling and specific behavior for different error types across the app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( FirstError.Kind <> ErrorKind.Div0, Error( FirstError ) )\n```\n\n----------------------------------------\n\nTITLE: Service Principal Authentication for Power Platform PowerShell\nDESCRIPTION: Authenticates to Power Platform using service principal credentials with client ID, secret, and tenant ID from Azure application registration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powershell-getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$appId = \"CLIENT_ID_FROM_AZURE_APP\"\n$secret = \"SECRET_FROM_AZURE_APP\"\n$tenantId = \"TENANT_ID_FROM_AZURE_APP\"\n\nAdd-PowerAppsAccount -Endpoint prod -TenantID $tenantId -ApplicationId $appId -ClientSecret $secret -Verbose\n```\n\n----------------------------------------\n\nTITLE: Configuring Image and Clickable Image Columns - Power Fx\nDESCRIPTION: Demonstrates how to configure an image column in a DetailsList, including clickable images that trigger events. Images can be external, based on Fluent UI icons, or inlined as SVGs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\n{\n        id: \"1\",\n        name: \"Contoso\",\n        city: \"Redmond\",\n        country: \"U.S.\",\n        ImageColor: \"rgb(0, 183, 195)\",\n        externalimage: \"https://via.placeholder.com/100x70\",\n        iconimage: \"icon:SkypeCircleCheck\"\n    },\n    {\n        id: \"2\",\n        name: \"Litware, Inc\",\n        city: \"Dallas\",\n        country: \"U.S.\",\n        ImageColor: \"rgb(255, 140, 0)\",\n        externalimage: \"https://via.placeholder.com/100x70\",\n        iconimage: \"icon:SkypeCircleCheck\"\n    }\n```\n\nLANGUAGE: power-fx\nCODE:\n```\n {\n        ColName: \"externalimage\",\n        ColDisplayName: \"Image\",\n        ColCellType:\"image\",\n        ColWidth: 60,\n        ColImageWidth: 60,\n        ColImagePadding: 8,\n        ColVerticalAlign: \"Top\"\n},\n{\n        ColName: \"iconimage\",\n        ColDisplayName: \"Clickable Image\",\n        ColCellType:\"clickableimage\",\n        ColWidth: 60,\n        ColImageWidth: 60,\n        ColImagePadding: 8,\n        ColVerticalAlign: \"Top\"\n}\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nIf(Self.EventName=\"CellAction\",\n\tNotify(\"CellAction \" & Self.EventColumn & \" \" & Self.EventRowKey)\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flows to Dataverse Solutions\nDESCRIPTION: This command allows for the migration of flows into a specified Dataverse solution within the environment, facilitating better organizational management of flows.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_33\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-AdminFlowsToSolution -EnvironmentName <String>\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions with Slider Values in Power Apps\nDESCRIPTION: These examples show how to use various aggregate functions (Sum, Average, Max, Min, StdevP, VarP) with values from multiple sliders in Power Apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-aggregates.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerFx\nCODE:\n```\nSum(Slider1.Value, Slider2.Value, Slider3.Value)\n```\n\nLANGUAGE: PowerFx\nCODE:\n```\nAverage(Slider1.Value, Slider2.Value, Slider3.Value)\n```\n\nLANGUAGE: PowerFx\nCODE:\n```\nMax(Slider1.Value, Slider2.Value, Slider3.Value)\n```\n\nLANGUAGE: PowerFx\nCODE:\n```\nMin(Slider1.Value, Slider2.Value, Slider3.Value)\n```\n\nLANGUAGE: PowerFx\nCODE:\n```\nStdevP(Slider1.Value, Slider2.Value, Slider3.Value)\n```\n\nLANGUAGE: PowerFx\nCODE:\n```\nVarP(Slider1.Value, Slider2.Value, Slider3.Value)\n```\n\n----------------------------------------\n\nTITLE: Collecting Filtered Results Using ForAll in Power Apps\nDESCRIPTION: Creates a new collection (NewOrder) using the ForAll approach to store products that need to be ordered. This is an alternative to the ShowColumns method.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_9\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( NewOrder,\n    ForAll( Products,\n        If( 'Quantity Requested' > 'Quantity Available',\n            {\n                Product: Product,\n                'Quantity To Order': 'Quantity Requested' - 'Quantity Available'\n            }\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Using AITranslate Function in Power Platform\nDESCRIPTION: Demonstrates how to translate text using the AITranslate function. The function takes source text and target language code as inputs and returns the translated text. Two variations are provided - one for canvas apps using the Environment object and another for other Power Platform products.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ai.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Result, Environment.AITranslate( {Text:Subject, Language: \"fr\"} ).TranslatedText )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Result, AITranslate( Subject, \"fr\" ) )\n```\n\n----------------------------------------\n\nTITLE: Power Apps Canvas App Custom Connector Development\nDESCRIPTION: Create custom connectors to integrate external data sources and services into Power Apps canvas applications using tools like Azure Functions and Azure API Management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Create [custom connectors](/connectors/custom-connectors/) to communicate to your external data sources and services. A custom connector is a wrapper around a REST API and can be created using tools like Azure Functions and Azure API Management\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to Text in Power Fx\nDESCRIPTION: Example of extracting a text field from JSON in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_9\n\nLANGUAGE: power-fx\nCODE:\n```\nText( ParseJSON( \"{ \\\"stringField\\\": \\\"this is text\\\" }\").stringField )\n```\n\n----------------------------------------\n\nTITLE: Extracting Characters from Single String with Left, Mid, and Right Functions in Power Fx\nDESCRIPTION: Examples of using Left, Mid, and Right functions with a text input control named 'Author' containing the string 'E. E. Cummings'. Left extracts from the start, Mid extracts from a specified position, and Right extracts from the end of the string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-left-mid-right.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nLeft( Author.Text, 5 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nMid( Author.Text, 7, 4 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nMid( Author.Text, 7 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nRight( Author.Text, 5 )\n```\n\n----------------------------------------\n\nTITLE: Generating Dependency Reports for Solution Components in C#\nDESCRIPTION: This method provides a friendlier message based on information found within a dependency. It retrieves component names, types, and solution information to display a readable dependency relationship. Note that this implementation is partial and only works for attribute and option set components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Shows how to get a more friendly message based on information within the dependency\n/// <param name=\"dependency\">A Dependency returned from the RetrieveDependentComponents message</param>\n/// </summary> \npublic void DependencyReport(Dependency dependency)\n{\n // These strings represent parameters for the message.\n    String dependentComponentName = \"\";\n    String dependentComponentTypeName = \"\";\n    String dependentComponentSolutionName = \"\";\n    String requiredComponentName = \"\";\n    String requiredComponentTypeName = \"\";\n    String requiredComponentSolutionName = \"\";\n\n // The ComponentType global Option Set contains options for each possible component.\n    RetrieveOptionSetRequest componentTypeRequest = new RetrieveOptionSetRequest\n    {\n     Name = \"componenttype\"\n    };\n\n    RetrieveOptionSetResponse componentTypeResponse = (RetrieveOptionSetResponse)_serviceProxy.Execute(componentTypeRequest);\n    OptionSetMetadata componentTypeOptionSet = (OptionSetMetadata)componentTypeResponse.OptionSetMetadata;\n // Match the Component type with the option value and get the label value of the option.\n    foreach (OptionMetadata opt in componentTypeOptionSet.Options)\n    {\n     if (dependency.DependentComponentType.Value == opt.Value)\n     {\n      dependentComponentTypeName = opt.Label.UserLocalizedLabel.Label;\n     }\n     if (dependency.RequiredComponentType.Value == opt.Value)\n     {\n      requiredComponentTypeName = opt.Label.UserLocalizedLabel.Label;\n     }\n    }\n // The name or display name of the component is retrieved in different ways depending on the component type\n    dependentComponentName = getComponentName(dependency.DependentComponentType.Value, (Guid)dependency.DependentComponentObjectId);\n    requiredComponentName = getComponentName(dependency.RequiredComponentType.Value, (Guid)dependency.RequiredComponentObjectId);\n\n // Retrieve the friendly name for the dependent solution.\n    Solution dependentSolution = (Solution)_serviceProxy.Retrieve\n     (\n      Solution.EntityLogicalName,\n      (Guid)dependency.DependentComponentBaseSolutionId,\n      new ColumnSet(\"friendlyname\")\n     );\n    dependentComponentSolutionName = dependentSolution.FriendlyName;\n    \n // Retrieve the friendly name for the required solution.\n    Solution requiredSolution = (Solution)_serviceProxy.Retrieve\n      (\n       Solution.EntityLogicalName,\n       (Guid)dependency.RequiredComponentBaseSolutionId,\n       new ColumnSet(\"friendlyname\")\n      );\n    requiredComponentSolutionName = requiredSolution.FriendlyName;\n\n // Display the message\n     Console.WriteLine(\"The {0} {1} in the {2} depends on the {3} {4} in the {5} solution.\",\n     dependentComponentName,\n     dependentComponentTypeName,\n     dependentComponentSolutionName,\n     requiredComponentName,\n     requiredComponentTypeName,\n     requiredComponentSolutionName);\n}\n```\n\n----------------------------------------\n\nTITLE: Using RecordInfo with a collection derived from a data source in Power Apps\nDESCRIPTION: This example demonstrates using the RecordInfo function with a collection created from a data source (Accounts). It captures the first 10 records into the MyAccounts collection, then checks the edit permission for the first record in the collection. The records originated from a data source, they can be used with the RecordInfo function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-recordinfo.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nCollect( MyAccounts, FirstN( Accounts, 10 ) );\nRecordInfo( First( MyAccounts ), RecordInfo.EditPermission ) )\n```\n\n----------------------------------------\n\nTITLE: Processing Text Columns in Tables with Left, Mid, and Right Functions in Power Fx\nDESCRIPTION: Examples of extracting substrings from the 'Address' column in a data source named 'People'. Each function returns a single-column table with the processed values from each row in the source table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-left-mid-right.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nLeft( ShowColumns( People, \"Address\" ), 8 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nMid( ShowColumns( People, \"Address\" ), 5, 7 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nRight( ShowColumns( People, \"Address\" ), 7 )\n```\n\n----------------------------------------\n\nTITLE: Filtering Inventory Data with exactin Operator - Power FX\nDESCRIPTION: This snippet utilizes the exactin operator to filter the Inventory collection to display only products whose names contain the letter 'E' with case sensitivity. This is useful for precise string matching in a gallery control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_16\n\nLANGUAGE: Power FX\nCODE:\n```\nFilter(Inventory, \"E\" exactin ProductName)\n```\n\n----------------------------------------\n\nTITLE: Enabling OneDrive for Business Integration with PowerShell\nDESCRIPTION: PowerShell commands to integrate OneDrive for Business with customer engagement apps and SharePoint on-premises. This creates a Well-Known App principal with the necessary permissions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Pssnapin *  \n# Access WellKnown App principal  \n[Microsoft.SharePoint.Administration.SPWebService]::ContentService.WellKnownAppPrincipals  \n  \n# Create WellKnown App principal  \n$ClientId = \"00000007-0000-0000-c000-000000000000\"  \n$PermissionXml = \"<AppPermissionRequests AllowAppOnlyPolicy=\\\"true\\\"><AppPermissionRequest Scope=\\\"http://sharepoint/content/tenant\\\" Right=\\\"FullControl\\\" /><AppPermissionRequest Scope=\\\"http://sharepoint/social/tenant\\\" Right=\\\"Read\\\" /><AppPermissionRequest Scope=\\\"http://sharepoint/search\\\" Right=\\\"QueryAsUserIgnoreAppPrincipal\\\" /></AppPermissionRequests>\"  \n  \n$wellKnownApp= New-Object -TypeName \"Microsoft.SharePoint.Administration.SPWellKnownAppPrincipal\" -ArgumentList ($ClientId, $PermissionXml)  \n  \n$wellKnownApp.Update()\n```\n\n----------------------------------------\n\nTITLE: JSON Table Example\nDESCRIPTION: Example showing how table structures are represented as arrays of records.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[ { \"First Name\": \"Fred\", \"Age\": 21 }, { \"First Name\": \"Jean\", \"Age\": 20 } ]\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to a Webpage using Launch (Record) in Power Fx\nDESCRIPTION: This snippet shows how to pass parameters to a webpage using the Launch function in Power Fx with a record of field values. This method can improve code readability. The URL is encoded before being passed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nLaunch( \"https://bing.com/search\", { q: \"Power Apps\", count: 1 } )\n```\n\n----------------------------------------\n\nTITLE: Querying Individual Masked Columns in a Record via HTTP API\nDESCRIPTION: This HTTP GET request retrieves specific masked columns in a record with unmasked data. It requires replacing placeholders with actual values for the URL, table collection name, record ID, and column name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-manage-masking-rules.md#2025-04-20_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nhttps://<url>/api/data/v9.1/<table collection name>(<recordid>)?$select=<column_name>&UnMaskedData=true\n```\n\n----------------------------------------\n\nTITLE: Polling Operation Status using HTTP GET in Power Platform\nDESCRIPTION: HTTP GET request to poll for the status of an application installation operation. The operationId from the installation response is required to monitor progress.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.powerplatform.com/appmanagement/environments/{environmentId}/operations/{operationId}?api-version=2022-03-01-preview\n```\n\n----------------------------------------\n\nTITLE: Using ForAll and Ungroup Functions in Power Fx\nDESCRIPTION: Combines nested ForAll functions along with Ungroup to iterate over collections X and Y, concatenating values while managing scope with the disambiguation operator. This robust setup requires predefined collections and context variables.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nUngroup(\n    ForAll( X,\n        ForAll( Y,\n            Y[@Value] & Text( X[@Value] ) & [@Value]\n        )\n    ),\n    \"Value\"\n)\n```\n\n----------------------------------------\n\nTITLE: Character Map - Second Label Text Property\nDESCRIPTION: This snippet defines the Text property for the second Label control in the inner gallery of the character map. It uses the Char function to convert the numerical ASCII code ('FullCode.Value') into its corresponding character for display.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-char.md#2025-04-20_snippet_7\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"`Char( FullCode.Value )`\"\n```\n\n----------------------------------------\n\nTITLE: Image Selection Notification in Gallery\nDESCRIPTION: Sets the OnSelect property of an image control in a gallery to provide feedback when the image is selected, demonstrating differing actions from the gallery’s default action.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-select.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nNotify( \"Image Selected\", Success )\n```\n\n----------------------------------------\n\nTITLE: Exporting User Connections Using PowerShell\nDESCRIPTION: Exports all connections accessible to the user using the Get-AdminPowerAppConnection function. This requires the App creator PowerShell cmdlets.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\nGet-AdminPowerAppConnection | ConvertTo-Json | out-file -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Random Number Generation with Slider Control in Power Fx\nDESCRIPTION: This example demonstrates how to use Rand in conjunction with a Slider control to create a dynamic label that updates with a new random number whenever the slider value changes, illustrating the volatile nature of the function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-rand.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nSlider1.Value + Rand()\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum in Power Fx\nDESCRIPTION: This snippet shows how to calculate the sum of two text input values in Power Fx, similar to Excel's cell-based calculations. It demonstrates the automatic recalculation feature of Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nTextInput1.Text + TextInput2.Text\n```\n\n----------------------------------------\n\nTITLE: Exporting Power Platform Solution with pac CLI in PowerShell\nDESCRIPTION: This PowerShell command uses the Power Platform CLI (pac) to export a solution. It specifies the export path, solution name, sets it as a managed solution, and includes general components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-export-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution export --path c:\\Users\\Documents\\Solution.zip --name SampleComponentSolution --managed true --include general\n```\n\n----------------------------------------\n\nTITLE: Creating IceCream Collection in Power Apps\nDESCRIPTION: This snippet creates a collection named 'IceCream' with flavor data including quantity and order information. It uses the ClearCollect function to populate the collection with initial data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerApps\nCODE:\n```\nClearCollect( IceCream, { Flavor: \"Chocolate\", Quantity: 100, OnOrder: 150 }, { Flavor: \"Vanilla\", Quantity: 200, OnOrder: 20 }, { Flavor: \"Strawberry\", Quantity: 300, OnOrder: 0 }, { Flavor: \"Mint Chocolate\", Quantity: 60, OnOrder: 100 }, { Flavor: \"Pistachio\", Quantity: 200, OnOrder: 10 } )\n```\n\n----------------------------------------\n\nTITLE: Creating Color Table in Power FX\nDESCRIPTION: Creates a table of color records to populate a listbox control with red, green and blue options.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-table.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable( {Color: \"red\"}, {Color: \"green\"}, {Color: \"blue\" } )\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in Power Fx\nDESCRIPTION: This Power Fx snippet demonstrates how to set global variables using the Set function and create a table. It defines FirstName, LastName, and a Products table with Name and Type columns.  The button's OnSelect property will execute this code when the button is selected.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-concatenate.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( FirstName, \"Jane\" ); Set( LastName, \"Doe\" );\nSet( Products,\n    Table(\n        { Name: \"Violin\", Type: \"String\" },\n        { Name: \"Cello\", Type: \"String\" },\n        { Name: \"Trumpet\", Type: \"Wind\" }\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Rows Properties in Shimmer Control - Power Fx\nDESCRIPTION: This Power Fx formula example showcases how to define the rows for the Shimmer control using properties including `RowKey`, `RowOrder`, `RowCount`, and `RowWidth`. These properties dictate the rendering order and appearance of the shimmer rows. This formula must be integrated within a canvas app or custom page to take effect.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/shimmer.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nTable(\n    {\n        RowKey: \"1\",\n        RowOrder:1,\n        RowCount:5,\n        RowWidth: 100\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Role Access Levels in Power Platform\nDESCRIPTION: Demonstrates the different access levels available when defining privileges for tables in a security role, including organization, business unit, and user-level access controls\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/security-roles-privileges.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Type** | **Description** |\n|----------|------------------|\n| Organization | Users can access all records in the organization, regardless of the business unit hierarchical level they or the environment belong to. |\n| Parent: Child Business Unit | Users can access records in their business unit and all business units subordinate to it. |\n| Business Unit | Users can access records in their business unit. |\n| User | Users can access records they own, objects that are shared with the organization, objects that are shared with them, and objects that are shared with a team that they're a member of. |\n| None | No access is allowed. |\n```\n\n----------------------------------------\n\nTITLE: Exporting Data from Dataverse using Power Platform CLI\nDESCRIPTION: The 'pac data export' command exports data from Dataverse using a schema file. It requires the --schemaFile parameter and supports optional parameters like --dataFile, --environment, --overwrite, and --verbose.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/data.md#2025-04-20_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\npac data export --schemaFile <schema-file-path> [--dataFile <data-file-path>] [--environment <environment-url-or-guid>] [--overwrite] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Disable Environment Routing with PowerShell\nDESCRIPTION: This PowerShell code snippet disables environment routing by setting `enableDefaultEnvironmentRouting` to `$False`. It demonstrates how to modify and save tenant settings using PowerShell.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/default-environment-routing.md#2025-04-20_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\ntenantSettings = Get-TenantSettings  \n\ntenantSettings.powerPlatform.governance.enableDefaultEnvironmentRouting = $False\n\nSet-TenantSettings -RequestBody $tenantSettings\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Location Longitude - Power Platform - Formula\nDESCRIPTION: Returns the longitude of the current location as part of location tracking in a mobile application. This value is subject to change as movement occurs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n**Location.Longitude**\n```\n\n----------------------------------------\n\nTITLE: Enabling Tab Completion in PowerShell for PAC CLI - PowerShell\nDESCRIPTION: PowerShell script snippet for adding tab completion functionality for the PAC CLI command, enhancing user experience by allowing command auto-completion.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/introduction.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$scriptblock = {\n    param($wordToComplete, $commandAst, $cursorPosition)\n\n    &pac complete -s \"$($commandAst.ToString())\" | ForEach-Object {\n        [System.Management.Automation.CompletionResult]::new($_, $_, 'ParameterValue', $_)\n    }\n}\n\nRegister-ArgumentCompleter -Native -CommandName pac -ScriptBlock $scriptblock\n```\n\n----------------------------------------\n\nTITLE: Basic Text Matching with IsMatch\nDESCRIPTION: Basic examples of using IsMatch to validate exact text matches and case-sensitive/insensitive contains operations\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ismatch.md#2025-04-20_snippet_4\n\nLANGUAGE: powerapps\nCODE:\n```\nIsMatch( TextInput1.Text, \"Hello world\" )\nIsMatch( TextInput1.Text, \"Good bye\" )\nIsMatch( TextInput1.Text, \"hello\", Contains )\nIsMatch( TextInput1.Text, \"hello\", Contains & IgnoreCase )\n```\n\n----------------------------------------\n\nTITLE: Selecting a default Dataverse environment with pac env select\nDESCRIPTION: This command selects a default Dataverse organization for the current authentication profile. It can accept an environment ID, URL, unique name, or partial name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/env.md#2025-04-20_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\npac env select\n```\n\nLANGUAGE: cli\nCODE:\n```\npac env select --environment <ID, url, unique name, or partial name>\n```\n\n----------------------------------------\n\nTITLE: Defining Library and Book Types using Type function - Power Fx\nDESCRIPTION: This snippet demonstrates how to define types for a collection of books and a single book using the Type function. The BookType is a record containing the fields Title, Author, and Published, while LibraryType represents a table of books. Both types facilitate the creation of user-defined functions that operate on book data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-type.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nLibrary = \n  [ { Title: \"A Study in Scarlet\", Author: \"Sir Arthur Conan Doyle\", Published: 1887 }, \n    { Title: \"And Then There Were None\", Author: \"Agatha Christie\", Published: 1939 },\n    { Title: \"The Marvelous Land of Oz\", Author: \"L. Frank Baum\", Published: 1904 } ];\n\n// Type definition for a single book\nBookType := Type( { Title: Text, Author: Text, Published: Number } );\n\n// Type definition for a table of books\nLibraryType := Type( [ BookType ] );\n```\n\n----------------------------------------\n\nTITLE: Filtering Inventory Data with in Operator - Power FX\nDESCRIPTION: This snippet demonstrates how to filter a collection named Inventory to show products containing the letter 'E'. It uses the in operator to achieve a case-insensitive match for filtering gallery items.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_15\n\nLANGUAGE: Power FX\nCODE:\n```\nFilter(Inventory, \"E\" in ProductName)\n```\n\n----------------------------------------\n\nTITLE: Lookup Localized Text in Power Fx\nDESCRIPTION: This snippet demonstrates how to retrieve localized text from a table based on the user's language. It uses the Language function to match the appropriate translation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/global.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nLookUp( Table1, TextID = \"Hello\" && (LanguageTag = Left( Language(), 2 ) || IsBlank( LanguageTag ))).LocalizedText\n```\n\n----------------------------------------\n\nTITLE: Displaying a Warning Message using Notify in Power Apps with Custom Timeout\nDESCRIPTION: This snippet illustrates how to display a warning message using the Notify function with a custom timeout value. It uses NotificationType.Warning to signify a warning state and specifies a timeout of 4000 milliseconds to control how long the message is displayed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-showerror.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nNotify( \"Hello, World\", NotificationType.Warning, 4000 )\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers and Dates for Various Locales in PowerApps\nDESCRIPTION: This snippet illustrates how to use the Text function to format numbers and date outputs while specifying different locale settings. It addresses the usage of currency signs and language-dependent format separators.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_6\n\nLANGUAGE: PowerApps\nCODE:\n```\nText(1234567.89, \"[$-fr-FR]# ###,## &euro;\", \"fr-FR\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText(1234567,89; \"[$-fr-FR]# ###,## &euro;\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( Date(2016,1,31), \"dddd mmmm d\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( Date(2016,1,31), \"dddd mmmm d\", \"es-ES\")\n```\n\n----------------------------------------\n\nTITLE: Converting Array of Records to Typed Table in Power Fx\nDESCRIPTION: This snippet demonstrates how to convert an untyped object array of records 'UORecordArray' to a typed table using ForAll function, converting individual fields to their appropriate types.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_10\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nForAll( UORecordArray, { FirstField: Value(ThisRecord.FirstField), SecondField: Text(ThisRecord.SecondField) } )\n```\n\n----------------------------------------\n\nTITLE: Creating Tag and Indicator Tag Columns - Power Fx\nDESCRIPTION: Shows how to add tag and indicator tag columns within a DetailsList, using a custom color for each tag based on row data. The color information is stored in separate columns to customize the appearance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect(\n    colAccounts,\n    {\n        name: \"Contoso\",\n        city: \"Redmond\",\n        country: \"U.S.\",\n        TagColor: \"rgb(0, 183, 195)\",\n        TagBorderColor: \"rgb(0,137,147)\"\n    },\n    {\n        name: \"Litware, Inc\",\n        city: \"Dallas\",\n        country: \"U.S.\",\n        TagColor: \"rgb(255, 140, 0)\",\n        TagBorderColor: \"rgb(194,107,0)\"\n    }\n);\n```\n\nLANGUAGE: power-fx\nCODE:\n```\n{\n        ColName: \"country\",\n        ColDisplayName: \"Country\",\n        ColCellType:\"tag\",\n        ColWidth: 60,\n        ColTagColorColumn: \"TagColor\",\n        ColTagBorderColorColumn: \"TagBorderColor\"\n},\n{\n        ColName: \"country\",\n        ColDisplayName: \"Country\",\n        ColCellType:\"indicatortag\",\n        ColWidth: 60,\n        ColTagColorColumn: \"TagColor\",\n        ColTagBorderColorColumn: \"TagBorderColor\"\n}\n```\n\n----------------------------------------\n\nTITLE: Copying a Power Platform Environment using YAML in Azure DevOps (Advanced)\nDESCRIPTION: This YAML snippet shows an advanced configuration of the PowerPlatformCopyEnvironment task. It uses a Service Principal for authentication, specifies a minimal copy type, overrides the friendly name, and skips audit data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.copy-environment.PowerPlatformCopyEnvironment@2\n  displayName: 'Power Platform Copy Environment '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n    TargetEnvironmentUrl: 'https://contoso-test.crm.dynamics.com'\n    CopyType: MinimalCopy\n    OverrideFriendlyName: true\n    FriendlyName: 'Contoso Test'\n    SkipAuditData: true\n```\n\n----------------------------------------\n\nTITLE: Relating Records in Many-to-Many Relationships Using Power FX\nDESCRIPTION: This Relate function example illustrates how to associate records between two tables in a many-to-many relationship. It's crucial to understand that the relationships are symmetric and can be applied in either direction.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-relate-unrelate.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nRelate( First( Products ).Contacts, First( Contacts ) )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Month Component in Power FX\nDESCRIPTION: The **Month** function extracts the month component from a provided Date/Time value, returning a number between 1 and 12.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datetime-parts.md#2025-04-20_snippet_1\n\nLANGUAGE: Power FX\nCODE:\n```\nMonth( _DateTime_ )\n```\n\n----------------------------------------\n\nTITLE: Updating Context and Navigating in Microsoft Power Fx\nDESCRIPTION: This snippet demonstrates how to perform multiple actions in sequence when a button control is selected. It shows how to update a context variable and then return to the previous screen using semicolons to separate the actions in the Power Fx language.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/imperative.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext( { x: 1 } ); Back()\n```\n\n----------------------------------------\n\nTITLE: Using Reset Function with a Button Control in Power Apps\nDESCRIPTION: This example demonstrates how to use the Reset function to restore a Text input control to its default value. The code is applied to a Button's OnSelect property to trigger the reset action when the button is pressed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-reset.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nReset( TextInput1 )\n```\n\n----------------------------------------\n\nTITLE: Label Control Text property for Real-Time Clock in Power Fx\nDESCRIPTION: This code demonstrates setting the Text property of a Label control to display the current time, formatted using the LongTime24 format. The CurrentTime variable, updated by a Timer, provides the current time value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_13\n\nLANGUAGE: power-fx\nCODE:\n```\n\"Text( CurrentTime, LongTime24 )\"\n```\n\n----------------------------------------\n\nTITLE: Using Lower Function with String Input in Power Fx\nDESCRIPTION: Converts any uppercase letters in a string to lowercase. The example uses a text-input control named 'Author' containing 'E. E. CummINGS' as input.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-lower-upper-proper.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nLower( Author.Text )\n```\n\n----------------------------------------\n\nTITLE: Azure Function API - Damage Assessment Processing\nDESCRIPTION: Custom .NET-based Azure Function that receives vehicle damage images, interfaces with Azure OpenAI Service to analyze damage, and returns AI-generated assessment results\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/solution-ideas/app-evvie.md#2025-04-20_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Invoking CreateRequisition Flow in Power Apps\nDESCRIPTION: This Power Fx code snippet shows how to invoke the CreateRequisition flow from a Power Apps canvas app using the Run function and passing the constructed JSON string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/extend-cloud-flows.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSet(\n   varRequisitionReturn,\n   CreateRequisition.Run(varRequisitionJSON)\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Number Conversion Examples in Power Fx\nDESCRIPTION: Examples demonstrating conversion of text strings to numbers using Value and Decimal functions, showing behavior with different decimal separators based on locale settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-value.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nValue(\"123.456\")\nDecimal(\"123.456\")\n// Result: 123.456 (Decimal)\n\nValue(\"123.456\", \"es-ES\")\nDecimal(\"123.456\", \"es-ES\")\n// Result: 123456 (Decimal)\n```\n\n----------------------------------------\n\nTITLE: Lockbox Request Operation Metadata Example\nDESCRIPTION: Example JSON payload showing metadata properties for a lockbox request operation, including request ID, state, support ticket ID, expiration time, and user details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/admin-activity-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.lockbox.data_access.duration\",\n        \"Value\": \"8\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.lockbox.support_ticket.id\",\n        \"Value\": \"MSFT initiated\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.lockbox.request.state\",\n        \"Value\": \"Created\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.lockbox.request.expiration_time\",\n        \"Value\": \"6/1/2024 11:59:15 PM +00:00\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.lockbox.request.id\",\n        \"Value\": \"dfdead68-3263-4c05-9e8a-5b61ddb5878c\"\n    },\n    {\n        \"Name\": \"version\",\n        \"Value\": \"1.0\"\n    },\n    {\n        \"Name\": \"type\",\n        \"Value\": \"PowerPlatformAdministratorActivityRecord\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.activity.name\",\n        \"Value\": \"LockboxRequestOperation\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.activity.id\",\n        \"Value\": \"cb18351c-fa1c-4f34-a6d9-f8cb91636009\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.environment.id\",\n        \"Value\": \"ed92c80e-89ef-e0c8-a9eb-98559ca07809\"\n    },\n    {\n        \"Name\": \"enduser.id\",\n        \"Value\": \"\"\n    },\n    {\n        \"Name\": \"enduser.principal_name\",\n        \"Value\": \"Test user\"\n    },\n    {\n        \"Name\": \"enduser.role\",\n        \"Value\": \"Admin\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.id\",\n        \"Value\": \"3a568f62-11ff-4e89-bee8-4d47041b0003\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Loading Collection Data from Local Storage\nDESCRIPTION: Formula to load previously saved data from local device storage into the MyItems collection. Data is appended to existing collection items.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-savedata-loaddata.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nLoadData( MyItems, \"LocalSavedItems\" )\n```\n\n----------------------------------------\n\nTITLE: Using Expand/Collapse Rows - Power Fx\nDESCRIPTION: This example demonstrates adding a column for expanding and collapsing row content in a DetailsList table. It involves setting the ColCellType to 'expand' and handling the OnChange event to toggle expanded row states.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ColName:\"expand\",ColDisplayName:\"\",ColWidth:32,ColResponsive:false, ColRightAligned:true, ColCellType:\"expand\"}\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nIf(Self.EventName=\"CellAction\" && Self.EventColumn=\"expand\",\n    With(LookUp(colExpand,index=Self.EventRowKey) As Row,\n        Patch(colExpand,Row,{expand:!Row.expand})\n        )\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Column with AddColumns in Power Fx\nDESCRIPTION: This snippet uses the AddColumns function to add a new Revenue column to the IceCreamSales data source, calculated as UnitPrice multiplied by QuantitySold. The ClearCollect function stores the result in a new collection called FirstExample. This approach highlights the use of Power Fx for data transformation without modifying the original dataset.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-table-shaping.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( FirstExample,\n   AddColumns( IceCreamSales, Revenue, UnitPrice * QuantitySold )\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Row Selection Change Events in Fluent Detail List\nDESCRIPTION: Conditional expression for the OnChange property to detect when a user selects a row, allowing for custom actions when selection changes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_12\n\nLANGUAGE: power-fx\nCODE:\n```\nIf(\n    Self.EventName = \"OnRowSelectionChange\",\n        If(!IsBlank(Self.EventRowKey),\n        \t// Row Selected\n        )\n);\n```\n\n----------------------------------------\n\nTITLE: Using Ungroup Function in Power Apps\nDESCRIPTION: Demonstrates how to ungroup the filtered records, converting the nested tables back into individual records in a new collection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-groupby.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( CityPopulationsUngrouped, Ungroup( CitiesByCountryFiltered, Cities ) )\n```\n\n----------------------------------------\n\nTITLE: Updating DLP Policy\nDESCRIPTION: This command allows modification of an existing DLP policy's details, such as its display name, to ensure it aligns with organizational standards.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_39\n\nLANGUAGE: powershell\nCODE:\n```\nSet-DlpPolicy\n```\n\n----------------------------------------\n\nTITLE: Saving Data from Power Apps Collection\nDESCRIPTION: This snippet saves the data from the PaperTape collection to stored data named \"StoredPaperTape\". The SaveData function persists the collection's data for later use.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_15\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\nSaveData( PaperTape, \"StoredPaperTape\" )\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Actions Using Switch Statement in Power Fx\nDESCRIPTION: This Power Fx code uses a `Switch` statement within the `OnButtonSelect` property of the Panel control to define actions based on the label of the selected button. In this example, if the selected button's label is \"Ok\", it displays a notification. After processing the button action, it updates the context variable to hide the panel.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/panel.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nSwitch( Self.SelectedButton.Label,\n  \"Ok\", Notify(\"The Ok button was pressed.\");\n);\n\n// Closes the panel\nUpdateContext({ showHideDialog: false })\n```\n\n----------------------------------------\n\nTITLE: Patching a Record in Power Apps\nDESCRIPTION: Example of using the Patch function to update a record in the IceCream data source, changing the Quantity property of the Strawberry record to 500.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-revert.md#2025-04-20_snippet_1\n\nLANGUAGE: Power FX\nCODE:\n```\nPatch( IceCream, LookUp( IceCream, Flavor = \"Strawberry\" ), { Quantity: 500 } )\n```\n\n----------------------------------------\n\nTITLE: Switch Function for Conditional Navigation in Power Apps\nDESCRIPTION: This formula uses the Switch function to compare the value of FirstName.Text against multiple options and navigate to different screens based on the match found.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_14\n\nLANGUAGE: PowerApps\nCODE:\n```\nSwitch( FirstName.Text, \"Carlos\", Navigate( Screen1, ScreenTransition.None ), \"Kirstin\", Navigate( Screen2, ScreenTransition.None ), \"John\", Navigate( Screen3, ScreenTransition.None ) )\n```\n\n----------------------------------------\n\nTITLE: Handling Data Source Errors with Errors Function in Power FX\nDESCRIPTION: This snippet demonstrates how to use the Errors function combined with the IsEmpty function to check for errors when attempting to modify a record in a data source. It explains the conditions where conflicting changes may occur and how to use the result for error management in user interfaces.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-errors.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\nIsEmpty( Errors( IceCream, EditRecord ) )\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Search Function on Multiple Columns in Power Apps\nDESCRIPTION: This Power Fx formula uses the 'Search' function to filter the 'Customers' collection, displaying records where the text entered in the 'SearchInput' control is found anywhere within either the 'Name' or 'Company' field. It simplifies searching across multiple columns with a single function call.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-startswith.md#2025-04-20_snippet_8\n\nLANGUAGE: powerfx\nCODE:\n```\nSearch( Customers, SearchInput.Text, \"Name\", \"Company\" )\n```\n\n----------------------------------------\n\nTITLE: Using Update Function in Power Fx\nDESCRIPTION: This code snippet demonstrates how to use the Update function to replace an entire record in a data source. The function requires a data source, an old record to replace, and the new record. Optional RemoveFlags.All can be used to update all incidences of the record in a collection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-update-updateif.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Update(IceCream, First(Filter(IceCream, Flavor=\\\"Chocolate\\\")), { ID: 1, Flavor: \\\"Mint Chocolate\\\", Quantity:150 })\"\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to a Table in Power Fx\nDESCRIPTION: Example of converting a JSON array to a typed table in Power Fx using ForAll.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll( Table( ParseJSON( \"[ { \\\"id\\\": 1, \\\"name\\\": \\\"one\\\" }, { \\\"id\\\": 2, \\\"name\\\": \\\"two\\\" } ]\" ) ), { id: Value(ThisRecord.Value.id), name: Text(ThisRecord.Value.name) } )\n```\n\n----------------------------------------\n\nTITLE: Examples with IsEmpty Function in Power Fx\nDESCRIPTION: Demonstrates the use of the IsEmpty function to verify if calculated tables or collections have no records. Useful for data validation in calculated fields or collections.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-isblank-isempty.md#2025-04-20_snippet_7\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"IsEmpty( [ 1, 2, 3 ] )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"IsEmpty( [ ] )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"IsEmpty( Filter( [ 1, 2, 3 ], Value > 5 ) )\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Rand and RandBetween Functions in Power Fx\nDESCRIPTION: The Rand function generates a pseudo-random number in the range [0, 1) and RandBetween generates a random integer between two specified values, inclusive. Both functions are volatile and can change their output based on context, such as when a formula is reevaluated.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-rand.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nRand()\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nRand() * 100\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nInt(Rand() * 100)\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nRandBetween(0, 99)\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nRandBetween(-1, 1)\n```\n\n----------------------------------------\n\nTITLE: Calculate date difference in days in Power Fx\nDESCRIPTION: This snippet calculates the difference in days between a date entered in a text input control and the current date. It uses the `DateValue` function to convert the input string to a date/time value and the `DateDiff` function to calculate the difference. The `Today()` function returns the current date.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datevalue-timevalue.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nDateDiff( DateValue( Startdate.Text ), Today() )\n```\n\n----------------------------------------\n\nTITLE: Example: Switch Statement with DefaultResult\nDESCRIPTION: A Switch statement with a DefaultResult. When no match is found, the DefaultResult is returned.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_11\n\nLANGUAGE: PowerFx\nCODE:\n```\nSwitch( Slider1.Value, 20, \"Result1\", 10, \"Result2\", 0, \"Result3\", \"DefaultResult\" )\n```\n\n----------------------------------------\n\nTITLE: Setting a Field to Blank in Power Apps\nDESCRIPTION: This Power Fx formula uses Patch() with Blank() to remove the value from the Weather field in the first record of the Cities collection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-isblank-isempty.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nPatch( Cities, First( Cities ), { Weather: Blank() } )\n```\n\n----------------------------------------\n\nTITLE: Using ThisRecord in Filter Function Without Explicit Reference\nDESCRIPTION: This snippet demonstrates filtering the Employees collection without using ThisRecord explicitly, showing its optional nature in the Filter function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_14\n\nLANGUAGE: power-fx\nCODE:\n```\nFilter( Employees, StartsWith( 'First Name', \"M\" ) )\n```\n\n----------------------------------------\n\nTITLE: Using Shuffle Function in Power Apps\nDESCRIPTION: Example shows how to use the Shuffle function to randomly reorder records in a collection named Deck, typically used for shuffling playing cards or any tabular data that needs randomization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-shuffle.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-formula\nCODE:\n```\nShuffle(Deck)\n```\n\n----------------------------------------\n\nTITLE: Adding Component Reference to Solution (dotnetcli)\nDESCRIPTION: This snippet shows how to add a reference to a Power Apps component framework project within a solution by using the Power Platform CLI. This specifies which components should be included during the solution's build process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/component-framework.md#2025-04-20_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\npac solution add-reference --path \\<path to your Power Apps component framework project\\>\n```\n\n----------------------------------------\n\nTITLE: Formatting Number with Decimal Places in PowerApps\nDESCRIPTION: This snippet demonstrates formatting numbers with a specific number of decimal places using the Text function. The required parameter is the number itself and a format string indicating decimal places. Outputs the formatted number as a string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( 1234.59, \"####.#\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( 8.9, \"#.000\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( 0.631, \"0.#\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( 12, \"#.0#\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( 1234.568, \"#.0#\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( 12000, \"$ #,###\")\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\nText( 1200000, \"$ #,###\")\n```\n\n----------------------------------------\n\nTITLE: Restricting Trial Environment Creation Using PowerShell\nDESCRIPTION: This PowerShell command specifically disables the ability for non-admin users to create trial environments in Power Platform by setting the appropriate tenant configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/control-environment-creation.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$settings = @{ DisableTrialEnvironmentCreationByNonAdminUsers = $true }\nSet-TenantSettings $settings\n```\n\n----------------------------------------\n\nTITLE: Downloading Power Pages Website Content using YAML Pipeline\nDESCRIPTION: YAML configuration for downloading Power Pages website content from a Dataverse environment. Includes website ID and path specifications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.download-paportal.PowerPlatformDownloadPaportal@2\n  displayName: 'Power Platform Download PAPortal '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    DownloadPath: 'C:\\portals'\n    WebsiteId: 'f88b70cc-580b-4f1a-87c3-41debefeb902'\n    Overwrite: true\n```\n\n----------------------------------------\n\nTITLE: Adding a Connection to an Environment\nDESCRIPTION: This command adds a connection to a specified Power Platform environment within Azure DevOps. It creates a service connection that allows Azure Pipelines to interact with the environment for deployment and other ALM operations.  The `-o` parameter specifies the Azure DevOps organization URL, `-p` specifies the project name, `-e` specifies the environment URL, and `-a` the application name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm connection add \\\n  -o https://dev.azure.com/contoso \\\n  -p alm-sandbox \\\n  -e https://contoso-build.crm.dynamics.com \\\n  -a ALMAcceleratorServicePrincipal\n```\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm connection add \\\n  -o https://dev.azure.com/contoso \\\n  -p alm-sandbox \\\n  -e https://contoso-test.crm.dynamics.com \\\n  -a ALMAcceleratorServicePrincipal\n```\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm connection add \\\n  -o https://dev.azure.com/contoso \\\n  -p alm-sandbox \\\n  -e https://contoso-prod.crm.dynamics.com \\\n  -a ALMAcceleratorServicePrincipal\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with StartsWith on Multiple Columns in Power Apps\nDESCRIPTION: This Power Fx formula filters the 'Customers' collection, displaying records where either the 'Name' or 'Company' field starts with the text entered in the 'SearchInput' control. It uses the StartsWith function and the '||' operator to combine the conditions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-startswith.md#2025-04-20_snippet_6\n\nLANGUAGE: powerfx\nCODE:\n```\nFilter( Customers, StartsWith( Name, SearchInput.Text ) || StartsWith( Company, SearchInput.Text ) )\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Sorting Event Handling in Fluent Detail List\nDESCRIPTION: Code for handling sort events in the OnChange property of the Table component to enable manual sorting. This captures the sort column and direction when a user clicks a column header.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nIf(Self.EventName=\"Sort\", \nUpdateContext({\n                   ctxSortCol:Self.SortEventColumn,\n                   ctxSortAsc:If(Self.SortEventDirection='PowerCAT.FluentDetailsList.SortEventDirection'.Ascending,true,false)\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Button Text Confirmation Dialog in Power Fx\nDESCRIPTION: Presents a dialog with custom button text to ask for the user's favorite color. The result is stored in a global variable. This example only works on platforms supporting ConfirmButton and CancelButton options.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-confirm.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( FavColor, \n     If( Confirm( \"What is your favorite color?\", \n                  { ConfirmButton: \"Red\", CancelButton: \"Green\" } \n         ), \n         \"Red\", \n         \"Green\" \n     ) \n)\n```\n\n----------------------------------------\n\nTITLE: Listing Dataverse Applications - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: This snippet describes the command for listing available Dataverse applications from AppSource using the Microsoft Power Platform CLI. It specifies optional parameters to filter results based on environment and install state.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/application.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## pac application list\n\nList available Dataverse applications from AppSource\n\n### Optional Parameters for application list\n\n#### `--environment` `-env`\n\nList available Dataverse applications for given environment (by ID or url); if not specified, list all applications in the tenant\n\n#### `--installState` `-s`\n\nFilter by application install state\n\nUse one of these values:\n\n- `NotInstalled`\n- `Installed`\n- `All`\n\n#### `--output` `-o`\n\nLocation of the JSON file to be created with list of the Dataverse applications from AppSource\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Single New GUID\nDESCRIPTION: Shows how to generate a single new GUID value and store it in a variable using the Set function. This can be used when only one unique identifier is needed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-guid.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( NewGUID, GUID() )\n```\n\n----------------------------------------\n\nTITLE: Using Collect Within ForAll Loop in Power Apps\nDESCRIPTION: Performs collection operations directly within a ForAll loop. Clears the NewOrder collection first, then adds records one by one as they match the filter condition.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_10\n\nLANGUAGE: power-fx\nCODE:\n```\nClear( NewOrder );\nForAll( Products,\n    If( 'Quantity Requested' > 'Quantity Available',\n        Collect( NewOrder,\n            {\n                Product: Product,\n                'Quantity To Order': 'Quantity Requested' - 'Quantity Available'\n            }\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Handling all errors with IfError\nDESCRIPTION: This formula uses the IfError function to handle any errors that occur when dividing 1 by the value entered in TextInput1. If any error occurs, it is replaced with Blank().  This covers all errors, including non-numeric input.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nIfError( 1/Value( TextInput1.Text ), Blank() )\n```\n\n----------------------------------------\n\nTITLE: Using IsType and AsType Functions for Typed Records - Power FX\nDESCRIPTION: This code snippet demonstrates how to utilize the IsType function to check the type of a record reference and then cast it to the appropriate type using the AsType function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( IsType( First( Accounts ).Owner, Users ),\n    AsType( First( Accounts ).Owner, Users ).'Full Name',\n    AsType( First( Accounts ).Owner, Teams ).'Team Name'\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the Sequence Function\nDESCRIPTION: This snippet illustrates the basic usage of the Sequence function to generate a table of sequential numbers. It demonstrates the behavior with different inputs and how the function adjusts records based on the provided parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sequence.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSequence( 4 )\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft 365 Groups in Dynamics 365\nDESCRIPTION: Steps for enabling Microsoft 365 Groups for specific entities in Dynamics 365. This allows you to choose which entity records can use Groups functionality and whether groups should be automatically created for new records.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/deploy-office-365-groups.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n1. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n2. Select **Settings** > **Office 365 Groups**.\n\n3. On the **Microsoft 365 Groups Integration Settings** page, select ![Add properties button.](../admin/media/add-properties-button.png \"Add properties button\")**Add entity** and choose an entity from the drop-down list. Repeat this step for each entity you want to enable, including custom entities.  \n  \n4. Optionally, you can select **Auto-create** for an entity to have a new group automatically created when a new record for that entity is created. However, we recommend you choose this option only for entities that typically require large groups to collaborate.  \n  \n5. When you have added all the entities you want to enable for Microsoft 365 Groups, select **Publish All**.\n```\n\n----------------------------------------\n\nTITLE: Counting User Access by Host Type using Kusto\nDESCRIPTION: This Kusto query counts the number of users accessing the system from different host types, such as browser, mobile, or embedded applications, using the hostType attribute within the customDimensions field of the pageViews table. It summarizes the count of page views by host type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-model-driven-apps.md#2025-04-20_snippet_4\n\nLANGUAGE: kusto\nCODE:\n```\n```kusto\npageViews\n| summarize count() by tostring(customDimensions.hostType)\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Catalog Request Status with Power Platform Build Tools in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the PowerPlatforCatalogStatus task to check the status of a catalog install or submit request. It specifies authentication type, environment URL, tracking ID, and request type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools-DEV.catalog-status.PowerPlatforCatalogStatus@2\n  displayName: 'Power Platform Catalog Status '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    Environment: '$(BuildTools.EnvironmentUrl)'\n    TrackingId: '00000000-0000-0000-0000-000000000002'\n    RequestType: Submit\n```\n\n----------------------------------------\n\nTITLE: Using Abs Function with Table in Power Fx\nDESCRIPTION: Example of using the Abs function with a table of values to return the absolute value of each number in the table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_7\n\nLANGUAGE: Power Fx\nCODE:\n```\nAbs( ValueTable )\n```\n\n----------------------------------------\n\nTITLE: Logical Operators in Power Fx\nDESCRIPTION: Power Fx supports logical operators such as AND (&& or And), OR (|| or Or), and NOT (! or Not).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_6\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Price < 100 && Slider1.Value = 20<br>or Price < 100 And Slider1.Value = 20\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Price < 100 || Slider1.Value = 20 or Price < 100 Or Slider1.Value = 20\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"!(Price < 100) or Not (Price < 100)\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Gallery Items with 'exactin' Operator in Power Apps\nDESCRIPTION: This snippet shows how to use the 'exactin' operator to filter items in a gallery control based on an exact, case-sensitive match of a substring in the ProductName field.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerApps\nCODE:\n```\nFilter(Inventory, \"E\" exactin ProductName)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Field Values from JSON Object in Power FX\nDESCRIPTION: This snippet illustrates how to concatenate field values from a JSON object into a formatted string using With and Concat functions. It shows how to iterate over column names and retrieve their corresponding values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-columnnames-column.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nWith(\n    { untyped: ParseJSON( JsonString ) },\n    Concat(\n        ColumnNames( untyped ),\n        \"${Value}: ${Column( untyped, Value )}\",\n        \", \"))\n```\n\n----------------------------------------\n\nTITLE: Timer control properties for Real-Time Clock in Power Fx\nDESCRIPTION: This code demonstrates setting up a Timer control to update a clock in real time. The Duration is set to 1000 milliseconds (1 second), Repeat is set to true to continuously update, and the OnTimerEnd property is used to set the CurrentTime variable to the current time using the Now() function every second.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_12\n\nLANGUAGE: power-fx\nCODE:\n```\n\"Set( CurrentTime, Now() )\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Button Visibility Based on Errors\nDESCRIPTION: This snippet demonstrates how to control the visibility of a button using the Lookup function on the errors returned for specific conflict error types. It allows for dynamic UI updates based on the presence of errors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-errors.md#2025-04-20_snippet_3\n\nLANGUAGE: Power FX\nCODE:\n```\n!IsEmpty( Lookup( Errors( IceCream, EditRecord ), Error = ErrorKind.Conflict ) )\n```\n\n----------------------------------------\n\nTITLE: Listing All Power Apps Using PowerShell\nDESCRIPTION: This command lists all Power Apps within a Microsoft Dataverse tenant, providing details such as application name, display name, and creator. It's useful for administrators managing app inventories.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerApp\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Array of Values\nDESCRIPTION: This snippet demonstrates how to retrieve a specific string from a JSON array by using the Index function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_11\n\nLANGUAGE: power-fx\nCODE:\n```\nText( Index( ParseJSON( jsonStringVariable ), 2 ) ) // \"Second Item\"\n```\n\n----------------------------------------\n\nTITLE: Environment Unlock Process in Power Platform\nDESCRIPTION: Detailed steps for unlocking encrypted environments in Power Platform admin center\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-encryption-key.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select the **Environments** tab, select locked environment name\n2. In **Details** section, select **See all**\n3. In **Environment encryption** section, select **Manage**\n4. On **Environment encryption** page, select **Unlock**\n5. Select **Confirm**\n6. Repeat for other environments\n```\n\n----------------------------------------\n\nTITLE: Sorting IceCream Collection by Flavor in Power Apps\nDESCRIPTION: This snippet creates a new collection 'SortByFlavor' by sorting the 'IceCream' collection alphabetically by the Flavor column in ascending order. It uses the Sort function to achieve this.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_10\n\nLANGUAGE: PowerApps\nCODE:\n```\nClearCollect( SortByFlavor, Sort( IceCream, Flavor ) )\n```\n\n----------------------------------------\n\nTITLE: Displaying an Informational Message using Notify in Power Apps\nDESCRIPTION: This snippet demonstrates how to use the Notify function to display a simple informational message. The Notify function is called with a message parameter only, which defaults to the informational notification type. It is intended for use in a Power Fx button's OnSelect property to provide feedback to the user.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-showerror.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nNotify( \"Hello, World\" )\n```\n\n----------------------------------------\n\nTITLE: Updating PowerShell Modules\nDESCRIPTION: Commands to update all PowerShell modules or specific Power Platform modules to their latest versions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module\nUpdate-Module -Name \"Microsoft.PowerApps.Administration.PowerShell\"\nUpdate-Module -Name \"Microsoft.PowerApps.PowerShell\"\n```\n\n----------------------------------------\n\nTITLE: Using NewForm Function in PowerFx\nDESCRIPTION: The NewForm function changes a Form control to FormMode.New mode, which populates the form with default values from the DataSource. In this mode, submitting the form will create a new record rather than update an existing one.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerFx\nCODE:\n```\nNewForm( FormName )\n```\n\n----------------------------------------\n\nTITLE: Setting Sort Direction in Fluent Detail List\nDESCRIPTION: Expression for the Sort Direction property that determines ascending or descending sort based on context variables set by the sort event handler.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_9\n\nLANGUAGE: power-fx\nCODE:\n```\nIf(ctxSortAsc,\n       'PowerCAT.FluentDetailsList.CurrentSortDirection'.Ascending,\n       'PowerCAT.FluentDetailsList.CurrentSortDirection'.Descending)\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Management Settings with PowerShell\nDESCRIPTION: Script to create new environment management settings for SAS IP restrictions and audit logging. Sets initial values to false and includes error handling with detailed response information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-environmentmanagement-settings.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n#Set your environment ID\n$environmentId = \"ENV_ID_HERE\"\n\n# Please uncomment the values that need to be updated\n$EnvironmentManagementSettings = @{\n    \"EnableIpBasedStorageAccessSignatureRule\" = $false\n    \"LoggingEnabledForIpBasedStorageAccessSignature\" = $false\n}\n\n$body = $json = $EnvironmentManagementSettings | ConvertTo-Json\n\ntry \n{\n    # Create the new setting value\n    Write-Host \"Invoking Create Management Setting for Environment $environmentId with body $body\"\n    $apiResponse = Invoke-WebRequest -Method Post -Uri \"https://api.powerplatform.com/environmentmanagement/environments/$environmentId/settings/?api-version=2022-03-01-preview\" -Headers $Headers -Body $body\n\n    Write-Host \"Operation Status: $apiResponse.StatusDescription\"\n} \ncatch \n{\n    # Dig into the exception to get the Response details.\n    Write-Host \"Response CorrelationId:\" $_.Exception.Response.Headers[\"x-ms-correlation-id\"]\n    Write-Host \"StatusCode:\" $_.Exception.Response.StatusCode.value__ \n    Write-Host \"StatusDescription:\" $_.Exception.Response.StatusDescription\n    $result = $_.Exception.Response.GetResponseStream()\n        $reader = New-Object System.IO.StreamReader($result)\n        $reader.BaseStream.Position = 0\n        $reader.DiscardBufferedData()\n        $responseBody = $reader.ReadToEnd();\n\n        Write-Host $responseBody\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Flow Context with PowerShell\nDESCRIPTION: This PowerShell command removes the app context from a specific flow within a specified environment. It is used to unbind the flow from its associated app, and can take an optional API version.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_27\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-AdminFlowPowerAppContext -EnvironmentName <String> -FlowName <String> -AppName <String> [-ApiVersion <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields with Invalid Identifiers in Untyped Object in Power Fx\nDESCRIPTION: These examples demonstrate how to access fields with names that are invalid identifiers (starting with a number or containing hyphens) in an untyped object.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_4\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nuntyped.'01'\nuntyped.'my-field'\n```\n\n----------------------------------------\n\nTITLE: Creating a Chessboard Pattern with Nested ForAll Functions\nDESCRIPTION: This snippet generates a chessboard pattern as a string using nested ForAll functions together with the Mod operator to alternate values for graphical representation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_20\n\nLANGUAGE: power-fx\nCODE:\n```\nConcat( \n    ForAll( Sequence(8) As Rank,\n        Concat( \n            ForAll( Sequence(8) As File, \n                    If( Mod(Rank.Value + File.Value, 2) = 1, \" X \", \" . \" ) \n            ),\n            Value \n        ) & Char(10) \n    ), \n    Value \n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Weekday Component in Power FX\nDESCRIPTION: The **Weekday** function determines the weekday from a Date/Time value, allowing optional specification of which day marks the start of the week.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datetime-parts.md#2025-04-20_snippet_6\n\nLANGUAGE: Power FX\nCODE:\n```\nWeekday( _DateTime_ [, _WeekdayFirst_ ] )\n```\n\n----------------------------------------\n\nTITLE: Convert date string to long date in Power Fx\nDESCRIPTION: This snippet converts a date string from a text input control to a date/time value and displays it as a long date format, using the user's locale.  It uses the `DateValue` function to convert the string and the `Text` function with `DateTimeFormat.LongDate` to format the output. The input comes from the `Startdate.Text` property of a text input control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datevalue-timevalue.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nText( DateValue( Startdate.Text ), DateTimeFormat.LongDate )\n```\n\n----------------------------------------\n\nTITLE: Using Distinct Function in a Data Table with Power Fx\nDESCRIPTION: This code snippet demonstrates how to use the Distinct function to filter unique countries from a collection of city data. It requires an existing collection named CityPopulations. The function outputs a one-column table with unique country names based on the provided collection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-distinct.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nDistinct( CityPopulations, Country )\n```\n\n----------------------------------------\n\nTITLE: Setting Variable with Selected Date Using Power Fx\nDESCRIPTION: This Power Fx snippet demonstrates how to set a variable with a selected date from the Calendar control using the 'OnChange' event property. It includes examples for different date formats using language settings. Dependencies include Power Apps environment with the Calendar control setup.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/calendar.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nSet(var_SelectedDate, If(!IsBlank(Self.selectedDateValue), Text(Self.selectedDateValue, ShortDate, Language())));\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nSet(var_SelectedDate, If(!IsBlank(Self.selectedDateValue), Text(Self.selectedDateValue, LongDate, Language())));\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nSet(var_SelectedDate, If(!IsBlank(Self.selectedDateValue), Text(Self.selectedDateValue, ShortDate, \"en-GB\")));\n```\n\n----------------------------------------\n\nTITLE: Using GroupBy Function in Power Apps\nDESCRIPTION: Groups records in the CityPopulations collection by country and stores the result in a new CitiesByCountry collection. Each country record contains a nested Cities table with city data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-groupby.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( CitiesByCountry, GroupBy( CityPopulations, Country, Cities ) )\n```\n\n----------------------------------------\n\nTITLE: Submit Catalog Item using .NET SDK\nDESCRIPTION: This C# code shows how to submit a catalog item using the Dataverse SDK for .NET and the `mspcat_SubmitCatalogApprovalRequest` message.  It reads the contents of the submission file as a byte array, converts it to a base64 string, and then sets the `EncodedApprovalRequest` property on the request. The code then executes the request against the IOrganizationService and returns a `mspcat_SubmitCatalogApprovalRequestResponse` object containing the `AsyncOperationId` and `CertificationRequestId`.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Submits a Catalog item for approval\n/// </summary>\n/// <param name=\"service\">The authenticated IOrganizationService instance.</param>\n/// <param name=\"pathToSubmissionFile\">The location of the submission file</param>\n/// <returns>\n///   mspcat_SubmitCatalogApprovalRequestResponse contains AsyncOperationId \n///   and CertificationRequestId\n/// </returns>\nstatic mspcat_SubmitCatalogApprovalRequestResponse SubmitCatalogApprovalRequest(\n   IOrganizationService service,\n   FileInfo pathToSubmissionFile)\n{\n\n   byte[] fileBytes = File.ReadAllBytes(pathToSubmissionFile.FullName);\n   string encodedSubmissionFile = Convert.ToBase64String(fileBytes);\n\n\n   var request = new mspcat_SubmitCatalogApprovalRequestRequest\n   {\n         EncodedApprovalRequest = encodedSubmissionFile\n   };\n\n   return (mspcat_SubmitCatalogApprovalRequestResponse)service.Execute(request);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flow with SAP OData Query Action in Power Automate\nDESCRIPTION: This snippet outlines the steps to create a new flow in Power Automate using the SAP OData query action. It emphasizes the importance of selecting the correct data gateway when the SAP system is behind a corporate firewall and provides an example of the OData Base URI.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/sap-odata-connector.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to Power Automate\\n1. Create a new flow with a trigger of your choice, such as the *SAP OData query action*.\\n1. Set up a connection to your SAP system. To connect to a system that is only available from within the company firewall (where the on-premises data gateway is installed), select **Data Gateway** and then select your gateway from the list.\\n1. Provide the required information using the *OData Base URI L* from your local SAP system. It will look something like this:\\n`https://mylocal.sap.system:50000/sap/opu/odata/iwbep/GWSAMPLE_BASIC`\\n1. Test the URL internally to verify that it's not accessible from outside the intranet. Once you know it's working properly you can start creating flows and testing how they work with your SAP system.\n```\n\n----------------------------------------\n\nTITLE: Bulk Conversion of Untyped Object to Typed Record in Power Fx\nDESCRIPTION: This example demonstrates how to use ParseJSON and Type functions to convert an untyped JSON object to a typed record, interpreting string fields as DateTime values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_12\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nEclipse = ParseJSON( \"{ \\\"Start\\\": \\\"2026-08-12T18:26:00.000Z\\\", \\\"End\\\": \\\"2026-08-12T18:33:00.000Z\\\" }\",\n                     Type( { Start: DateTime, End: DateTime } ) );\n\nDateDiff( Eclipse.Start, Eclipse.End, TimeUnit.Minutes )\n// 7\n```\n\n----------------------------------------\n\nTITLE: Using IsToday() with DateAdd() and Now() function in Power Fx\nDESCRIPTION: This example retrieves the current date and time, adds 12 days to it using the DateAdd() function, and then checks if the resulting date falls between midnight today and midnight tomorrow using IsToday().\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\n\"IsToday( DateAdd( Now(), 12 ) )\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Power Apps\nDESCRIPTION: Creates a collection named CityPopulations that contains city data including name, country, and population information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-groupby.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( CityPopulations,\n    { City: \"London\",    Country: \"United Kingdom\", Population: 8615000},\n    { City: \"Berlin\",    Country: \"Germany\",        Population: 3562000},\n    { City: \"Madrid\",    Country: \"Spain\",          Population: 3165000},\n    { City: \"Rome\",      Country: \"Italy\",          Population: 2874000},\n    { City: \"Paris\",     Country: \"France\",         Population: 2273000},\n    { City: \"Hamburg\",   Country: \"Germany\",        Population: 1760000},\n    { City: \"Barcelona\", Country: \"Spain\",          Population: 1602000},\n    { City: \"Munich\",    Country: \"Germany\",        Population: 1494000},\n    { City: \"Milan\",     Country: \"Italy\",          Population: 1344000}\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Day Component in Power FX\nDESCRIPTION: The **Day** function extracts the day component from a provided Date/Time value, returning a number between 1 and 31.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datetime-parts.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\nDay( _DateTime_ )\n```\n\n----------------------------------------\n\nTITLE: Testing with Coalesce Function in Power Fx\nDESCRIPTION: The Coalesce function evaluates a list of arguments and returns the first non-blank and non-empty string value. It is useful for fetching default values when dealing with possible null or empty inputs in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-isblank-isempty.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Coalesce( Blank(), 1 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Coalesce( \\\"\\\", \\\"2\\\" )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Coalesce( Blank(), \\\"\\\", Blank(), \\\"\\\", \\\"3\\\", \\\"4\\\" )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Coalesce( \\\"\\\" )\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Data in Power Apps Collection\nDESCRIPTION: This snippet clears all data from the PaperTape collection. The Clear function removes all rows from the collection, effectively resetting it.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_12\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\nClear( PaperTape )\n```\n\n----------------------------------------\n\nTITLE: Custom Connector URL Pattern Structure Definition in PowerShell\nDESCRIPTION: Defines the PowerShell object structure for custom connector URL pattern rules in a DLP policy, including order, classification, and pattern properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dlp-custom-connector-parity.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$UrlPatterns = @{ \n  rules = @(\n    @{  \n      order # integer (starting at 1)\n      customConnectorRuleClassification # supported values: General | Confidential | Blocked | Ignore\n      pattern # string\n    } \n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data into Power Apps Collection\nDESCRIPTION: This snippet clears the PaperTape collection and then loads saved data into it from stored data named \"StoredPaperTape\". The LoadData function is used with the third argument set to true to append the loaded data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_14\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\nClear( PaperTape ); LoadData( PaperTape, \"StoredPaperTape\", true )\n```\n\n----------------------------------------\n\nTITLE: Installing Catalog Item with Power Platform Build Tools in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the PowerPlatformInstallCatalog task to install a catalog item to a target environment. It specifies authentication type, environment URLs, catalog item ID, and polling status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools-DEV.install-catalog.PowerPlatformInstallCatalog@2\n  displayName: 'Power Platform Install Catalog '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    Environment: '$(BuildTools.EnvironmentUrl)'\n    CatalogItemId: '00000000-0000-0000-0000-000000000001'\n    TargetEnvironmentUrl: 'https://test.crm.dynamics.com/'\n    PollStatus: true\n```\n\n----------------------------------------\n\nTITLE: Using IsUTCToday() with UTCToday() function in Power Fx\nDESCRIPTION: This example retrieves the current date in UTC using UTCToday(), and then tests whether this date falls between midnight today and midnight tomorrow in UTC time using IsUTCToday().\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_11\n\nLANGUAGE: power-fx\nCODE:\n```\n\"IsUTCToday( UTCToday() )\"\n```\n\n----------------------------------------\n\nTITLE: Example Request Body with Service Principal ID\nDESCRIPTION: An example JSON request body with a specific service principal application ID for creating a Dataverse application user.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-dataverseapplicationuser.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servicePrincipalAppId\": \"9995c1c2-619a-4b72-9ee6-4c44f5f586c5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Component Definition with Properties in Power Fx YAML\nDESCRIPTION: Example of defining a custom component with input and output properties. Input properties provide default values that can be modified by the app maker, while output properties provide calculations that are encapsulated within the component.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/yaml-formula-grammar.md#2025-04-20_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nDateRangePicker As CanvasComponent:\n    DefaultStart: |-\n\t\t=// input property, customizable default for the component instance\n\t\tNow()                      \n    DefaultEnd: |-\n\t\t=// input property, customizable default for the component instance\n\t\tDateAdd( Now(), 1, Days )    \n    SelectedStart: =DatePicker1.SelectedDate   // output property\n    SelectedEnd: =DatePicker2.SelectedDate     // output property\n```\n\n----------------------------------------\n\nTITLE: Defining Nav Control Items - Power Fx\nDESCRIPTION: This Power Fx snippet shows how to structure the data source items table for rendering in the Nav control. Each item is specified with properties like `ItemKey`, `ItemDisplayName`, and `ItemIconName` to effectively customize the navigation pane. Dependencies include setting up a table structure to define each navigation item's characteristics.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/nav.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nTable(\n    {\n        ItemKey: \"1\",\n        ItemDisplayName: \"Home with Icon & Custom color\",\n        ItemIconName: \"Home\",\n        ItemIconColor: \"Green\"\n    },\n    {\n        ItemKey: \"2\",\n        ItemDisplayName: \"Documents\",\n        ItemExpanded: true\n    },\n    {\n        ItemKey: \"3\",\n        ItemDisplayName: \"Contents\"\n    },\n    {\n        ItemKey: \"4\",\n        ItemDisplayName: \"Item Invisible\",\n        ItemVisible: false\n    },\n    {\n        ItemKey: \"5\",\n        ItemDisplayName: \"Quick Reference Guide\",\n        ItemParentKey: \"3\",\n        ItemIconName: \"Document\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Focus Using Power Fx\nDESCRIPTION: This Power Fx code snippet updates the context variable to trigger focus on a control by concatenating 'SetFocus' with a unique random string. This ensures the app recognizes it as a change and triggers the focus behavior on the specified component.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/setfocus.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ ctxComponentEvent: \"SetFocus\" & Text(Rand()) });\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in Power Fx\nDESCRIPTION: Power Fx includes comparison operators such as equal to (=), greater than (>), greater than or equal to (>=), less than (<), less than or equal to (<=), and not equal to (<>).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Price = 100\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Price > 100\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Price >= 100\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Price < 100\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Price <= 100\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Price <> 100\"\n```\n\n----------------------------------------\n\nTITLE: Registering Application - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: Details the command and parameters required to register a Microsoft Entra ID application under a specific tenant. The primary requirement is the application ID, which uniquely identifies the application being registered.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## pac admin application register\n\nRegister Microsoft Entra ID application with your tenant.\n\n### Required Parameters for admin application register\n\n#### `--application-id` `-id`\n\nApplication Id.\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Firewall using Dataverse OData API (PATCH Request)\nDESCRIPTION: This code snippet demonstrates how to configure the IP firewall using the Dataverse OData API. It involves sending a PATCH request to the organizations endpoint with a JSON payload that specifies the desired firewall settings such as enabling the firewall, defining allowed IP ranges, enabling audit-only mode, and specifying allowed service tags. The request requires appropriate authentication and authorization headers to be included.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/ip-firewall.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"PATCH https://{yourorg}.api.crm*.dynamics.com/api/data/v9.2/organizations({yourorgID})\nHTTP/1.1\nContent-Type: application/json\nOData-MaxVersion: 4.0\nOData-Version: 4.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for upgrade-solution Action in Markdown\nDESCRIPTION: This snippet defines the parameters for the upgrade-solution action, which upgrades a solution. It includes details on required and optional parameters such as environment URL, authentication credentials, and solution name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-github-available-actions.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter    | Description       |\n|---------------|-------------------|\n| environment-url| (Required) The URL for the  environment that you want to clone the solution from (for example, `https://YourOrg.crm.dynamics.com`).|\n|user-name|(Required) If you're using username/password authentication, the username of the account you're using to connect with.|\n| password-secret | (Required) If you're using username/password authentication, the password for the account you're using to connect with. |\n| solution-file        | (Required) The path and name of the solution file you want to import.   |\n|app-id| The application ID to authenticate with. This parameter is **required** when authenticating with Service Principal credentials.|\n|client-secret| The client secret used to authenticate the GitHub pipeline. This parameter is **required** when authenticating with Service Principal credentials.|\n|tenant-id| The tenant ID when authenticating with `app-id` and `client-secret`.|\n|solution-name | (Required) Name of the solution to upgrade.|\n|async| Upgrades the solution asynchronously.|\n|max-async-wait-time| Maximum asynchronous wait time in minutes. Default value is 60 minutes.|\n```\n\n----------------------------------------\n\nTITLE: Handling Errors Globally in Power Fx with OnError\nDESCRIPTION: This example illustrates how to implement the OnError property to manage errors within a Power Fx application. It allows for global error handling and the ability to log errors using the Trace function. The OnError function can prevent default error banners from displaying to the user by customizing the error handling process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_10\n\nLANGUAGE: power-fx\nCODE:\n```\nTrace( \"$\"Error {FirstError.Message} in {FirstError.Source}\" )\n```\n\n----------------------------------------\n\nTITLE: Verifying Data Source Permissions\nDESCRIPTION: Checks user permissions for various operations on a data source, enabling conditional UI and access control in applications\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datasourceinfo.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nDataSourceInfo(IceCream, DataSourceInfo.ReadPermission)\nDataSourceInfo(IceCream, DataSourceInfo.EditPermission)\nDataSourceInfo(IceCream, DataSourceInfo.CreatePermission)\nDataSourceInfo(IceCream, DataSourceInfo.DeletePermission)\n```\n\n----------------------------------------\n\nTITLE: Adding a Table as a Record in PowerApps\nDESCRIPTION: This code snippet illustrates how to use ClearCollect to clear an existing collection and add records wrapped in a record structure. Instead of individual records, a whole table is included as a cell within the record, which allows for a different data organization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-clear-collect-clearcollect.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerApps\nCODE:\n```\nClearCollect( IceCream,{MyFavorites: Table( {Flavor:\"Chocolate\",Quantity:100}, {Flavor:\"Vanilla\",Quantity:200} ) } )\n```\n\n----------------------------------------\n\nTITLE: Displaying an Error Message using Notify in Power Apps\nDESCRIPTION: This snippet shows how to display an error message using the Notify function. It includes the message along with the NotificationType.Error as the second argument, indicating that the message should be treated as an error. This can be used for error handling in apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-showerror.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nNotify( \"Hello, World\", NotificationType.Error )\n```\n\n----------------------------------------\n\nTITLE: Parsing and Handling JSON Response from HTTP Request in Canvas Apps\nDESCRIPTION: This example demonstrates how to parse and handle a JSON response from an HTTP request. It shows how to extract specific fields from the JSON response and handle potential errors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-readnfc-applies-to.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nSet(\n    varResponseData,\n    JSON(\n        Office365.HttpRequest(\n            \"https://api.contoso.com/data\",\n            \"GET\",\n            {},\n            { 'Accept': 'application/json' }\n        ).Body\n    )\n);\n\nIf(\n    !IsBlank(varResponseData.results),\n    ForAll(\n        varResponseData.results,\n        Patch(\n            colResults,\n            Defaults(colResults),\n            {\n                ID: Value.id,\n                Name: Value.name,\n                Description: Value.description,\n                Status: Value.status\n            }\n        )\n    ),\n    Notify(\"No results found or error in response\", NotificationType.Warning)\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Column Constraints and Metadata\nDESCRIPTION: Demonstrates retrieving various column-level metadata such as maximum length, required status, and value constraints for data validation\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datasourceinfo.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nDataSourceInfo(IceCream, DataSourceInfo.MaxLength, Flavor)\nDataSourceInfo(IceCream, DataSourceInfo.Required, Flavor)\nDataSourceInfo(IceCream, DataSourceInfo.MaxValue, Quantity)\n```\n\n----------------------------------------\n\nTITLE: Exporting Cities Data to JSON Format in Power Fx\nDESCRIPTION: This snippet sets a Power Apps global variable to a JSON representation of the grouped city data. A Button trigger is required, and the output is suitable for network transmission, containing no extra whitespace. Dependencies include the previous collection of city data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( CitiesByCountryJSON, JSON( CitiesByCountry ) )\n```\n\n----------------------------------------\n\nTITLE: Defining Items Property for SubwayNav\nDESCRIPTION: This code defines the `Items` property for the `SubwayNav` control, creating a table with sample steps. Each step has properties like `ItemKey`, `ItemLabel`, and `ItemState` to define its appearance and behavior in the navigation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/subwaynav.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    { ItemKey:\"1\", ItemLabel:\"Step 1\", ItemState:\"Current\" },\n    { ItemKey:\"2\", ItemLabel:\"Step 2\", ItemState:\"Completed\" },\n    { ItemKey:\"3\", ItemLabel:\"Step 3\", ItemState:\"Unsaved\" },\n    { ItemKey:\"4\", ItemLabel:\"Step 4\", ItemState:\"ViewedNotCompleted\" },\n    { ItemKey:\"5\", ItemLabel:\"Step 5\", ItemState:\"Error\" },\n    { ItemKey:\"6\", ItemLabel:\"Step 6\", ItemState:\"WizardComplete\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Navigating Screens with Language Parameter in Power Apps\nDESCRIPTION: This snippet sets the OnSelect property of a button to navigate to the 'Target' screen with a fade transition. It also passes a 'Language' parameter to the target screen to indicate the selected language. This allows the target screen to display content specific to that language.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-updatecontext.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\n\"Navigate(Target, ScreenTransition.Fade, {Language:\\\"English\\\"})\"\n```\n\n----------------------------------------\n\nTITLE: Admin Center License Management Steps\nDESCRIPTION: Step-by-step process for administrators to access and manage Power Automate trial licenses through the Microsoft 365 admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/deep-dive-on-specific-license.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to [the Microsoft 365 admin center](https://admin.microsoft.com/)\n2. Go to **Billing** > **Purchase services**\n3. Search for **Power Automate**\n4. Select license details\n5. Choose **Start free trial**\n```\n\n----------------------------------------\n\nTITLE: Setting a Record Variable with Power Fx Set\nDESCRIPTION: This snippet shows how to create or modify a global variable and assign a record to it. The `Person` variable is set to a record containing two columns: `Name` with the value \"Milton\" and `Address` with the value \"1 Main St\". This allows you to store structured data within a global variable.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-set.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Set( Person, { Name: \\\"Milton\\\", Address: \\\"1 Main St\\\" } )\"\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON Data in a Label Control\nDESCRIPTION: This snippet sets the Text property of a Label control to a JSON string stored in a variable. The label displays the JSON representation of the cities data. It requires the data to be pre-converted to JSON and stored in a variable.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_9\n\nLANGUAGE: power-fx\nCODE:\n```\nCitiesByCountryJSON\n```\n\n----------------------------------------\n\nTITLE: Set Property for All Records in Power Fx\nDESCRIPTION: This code snippet sets the Quantity property to 0 for all records in the data source, using the UpdateIf function with a condition that always evaluates to true.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-update-updateif.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"UpdateIf(IceCream, true, { Quantity: 0 })\"\n```\n\n----------------------------------------\n\nTITLE: Placeholder Example - Language Tag Usage\nDESCRIPTION: Example showing the syntax for specifying language tags in Text function formatting. The language placeholder [$-LanguageTag] can be used to specify formatting rules for different locales and regions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[$-_LanguageTag_]\n```\n\n----------------------------------------\n\nTITLE: Example: If Statement with IsBlank and IsNumeric Functions\nDESCRIPTION: An If statement that uses IsBlank and IsNumeric functions as conditions. It demonstrates how to check different aspects of a control's value in sequence.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_7\n\nLANGUAGE: PowerFx\nCODE:\n```\nIf( IsBlank( Slider1.Value ), \"Result1\", IsNumeric( Slider1.Value ), \"Result2\" )\n```\n\n----------------------------------------\n\nTITLE: Using the pac admin assign-group Command in PowerShell\nDESCRIPTION: Example showing how to use the Power Platform CLI 'pac admin assign-group' command. This command is likely used for assigning security groups in Power Platform administrative tasks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-assign-group-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin assign-group\n```\n\n----------------------------------------\n\nTITLE: Handling Race Conditions with Concurrent in Power Fx\nDESCRIPTION: This code demonstrates how the Concurrent function can lead to race conditions when translating text using the Microsoft Translator service. The code measures the time it takes to translate text into French and German concurrently, and then stores the results. The order in which the translations complete can vary due to network latency and server-side processing, highlighting the potential for race conditions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-concurrent.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( StartTime, Value( Now() ) );\nConcurrent(\n    Set( FRTrans, MicrosoftTranslator.Translate( TextInput1.Text, \"fr\" ) );\n        Set( FRTransTime, Value( Now() ) ),\n    Set( DETrans, MicrosoftTranslator.Translate( TextInput1.Text, \"de\" ) );\n        Set( DETransTime, Value( Now() ) )\n);\nCollect( Results,\n    {\n        Input: TextInput1.Text,\n        French: FRTrans, FrenchTime: FRTransTime - StartTime,\n        German: DETrans, GermanTime: DETransTime - StartTime,\n        FrenchFaster: FRTransTime < DETransTime\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing a Dataverse Solution with C#\nDESCRIPTION: Demonstrates how to import or upgrade a Dataverse solution using the ImportSolutionRequest class. The code reads a solution zip file as a byte array and then passes it to the ImportSolutionRequest for execution by the service proxy.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Install or upgrade a solution\nbyte[] fileBytes = File.ReadAllBytes(ManagedSolutionLocation);\n\nImportSolutionRequest impSolReq = new ImportSolutionRequest()\n{\n   CustomizationFile = fileBytes\n};\n\n_serviceProxy.Execute(impSolReq);\n```\n\n----------------------------------------\n\nTITLE: Defining Items for ContextMenu Control\nDESCRIPTION: This Power Fx formula creates a table of menu items for the ContextMenu control. Each item contains key properties such as display name and icon. Ensure unique keys for proper item identification.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/contextmenu.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nTable(\n    {\n        ItemKey: \"File\",\n        ItemIconName: \"save\",\n        ItemDisplayName: \"Save\",\n        ItemOverflow:true\n    },\n     {\n        ItemKey: \"Delete\",\n        ItemIconName: \"Delete\",\n        ItemDisplayName: \"Delete\",\n        ItemOverflow:true\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Unrelating Records Using Power FX\nDESCRIPTION: The Unrelate function removes the link between two records used in a relationship within Microsoft Dataverse. It is essential to specify the correct records to ensure the desired relationship is removed without affecting others.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-relate-unrelate.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nUnrelate( First( Products ).Reservations, First( Reservations ) )\n```\n\n----------------------------------------\n\nTITLE: Handling Form Success with Back Navigation in Power Apps\nDESCRIPTION: Sets the OnSuccess property of a Form control to navigate back to the previous screen after a successful form submission. This creates a smooth user experience when form data is saved correctly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_6\n\nLANGUAGE: PowerFx\nCODE:\n```\nBack()\n```\n\n----------------------------------------\n\nTITLE: Suppressing and Replacing Errors in PowerApps\nDESCRIPTION: In this snippet, IfError is used to suppress and replace expected errors during division operations. It requires predefined variables a and b and checks for division by zero to either return an error or a replacement value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_7\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nWith( {a: 1, b: Value(\"a\")},\n      IfError( a/b, If( FirstError.Kind <> ErrorKind.Div0, Error( FirstError ), -1 ) ) )\n```\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nWith( {a: 1, b: 0} )\n      IfError( a/b, If( FirstError.Kind <> ErrorKind.Div0, Error( FirstError ), -1 ) )\n```\n\n----------------------------------------\n\nTITLE: Example: Multiple Conditions in If Statement\nDESCRIPTION: An If statement with multiple conditions. Conditions are evaluated in order, and the result corresponding to the first true condition is returned. Subsequent conditions are not evaluated.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_6\n\nLANGUAGE: PowerFx\nCODE:\n```\nIf( Slider1.Value = 25, \"Result1\", Slider1.Value > 0, \"Result2\" )\n```\n\n----------------------------------------\n\nTITLE: Handling Blanks and Nulls in JSON with Power Fx\nDESCRIPTION: Examples of working with non-existent fields and null values in JSON using ParseJSON in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_13\n\nLANGUAGE: power-fx\nCODE:\n```\nIsBlank( Text( ParseJSON( JsonString ).parent.child ) )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nIsBlank( Text( ParseJSON( JsonString ).empty ) )\n```\n\n----------------------------------------\n\nTITLE: Mapping to Dataverse System Table - Power Fx\nDESCRIPTION: This snippet demonstrates how to map columns of a DetailsList to a Dataverse system table using Power Fx. The table configuration defines display names, widths, and additional properties for columns like sorting and resizability.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    {\n        ColName: \"name\",\n        ColDisplayName: \"Name\",\n        ColWidth: 200,\n        ColSortable: true,\n        ColIsBold: true,\n        ColResizable: true\n    },{\n        ColName: \"address1_city\",\n        ColDisplayName: \"City:\",\n        ColShowAsSubTextOf: \"name\"\n    },{\n        ColName: \"address1_country\",\n        ColDisplayName: \"Country:\",\n        ColShowAsSubTextOf: \"name\"\n    },{\n        ColName: \"telephone1\",\n        ColDisplayName: \"Telephone\",\n        ColWidth: 100,\n        ColSortable: true,\n        ColResizable: true\n    },{\n        ColName: \"primarycontactid\",\n        ColDisplayName: \"Primary Contact\",\n        ColWidth: 200,\n        ColSortable: true,\n        ColSortBy: \"_primarycontactid_value\",\n        ColResizable: true,\n        ColCellType: \"link\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to a Boolean in Power Fx\nDESCRIPTION: Example of converting a JSON boolean field to a Boolean data type in Power Fx using the ParseJSON function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nBoolean( ParseJSON(\"{ \\\"bool\\\": true }\").bool )\n```\n\n----------------------------------------\n\nTITLE: Simulating Gallery Row Selection in Power Apps\nDESCRIPTION: This snippet uses the Select function to simulate a user selecting a specific row in a gallery control, which results in the OnSelect formula of the gallery being evaluated.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-select.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSelect(Gallery1, 1)\n```\n\n----------------------------------------\n\nTITLE: Handling Conditional Error with IfError in PowerApps\nDESCRIPTION: This example demonstrates using the IfError function to conditionally handle errors by validating if the StartDate is greater than the EndDate. Error handling uses an ErrorRecord with specified Kind and Message. It requires valid dates for comparison.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_6\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nIf( StartDate > EndDate,\n    Error( { Kind: ErrorKind.Validation, Message: \"Start Date must be before End Date\" } ) )\n```\n\n----------------------------------------\n\nTITLE: Using IsBlank Function in Power Fx for Validation\nDESCRIPTION: The IsBlank function tests if a value or control input is blank. It's commonly used for validation purposes in forms or user inputs in Power Fx applications. This example provides a typical use case in a label control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-isblank-isempty.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Fx\nCODE:\n```\nIf( IsBlank( FirstName.Text ), \\\"First Name is a required field.\\\" )\n```\n\n----------------------------------------\n\nTITLE: Formula Chaining in Power Platform\nDESCRIPTION: This snippet shows how to chain formulas using the semicolon (;) in Power Platform. This allows multiple function invocations within behavior properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_11\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Collect(T, A); Navigate(S1, \\\"\\\" )\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Data Values to HorizontalBarChart Properties in PowerApps\nDESCRIPTION: This snippet illustrates how to map data values to the properties of the HorizontalBarChart control using a table structure. It showcases the necessary fields for each item and demonstrates how to utilize the 'CustomColors' property to define consistent colors for the bars in the chart.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/horizontalbarchart.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nTable(\n    {\n        ItemTitle: \"First\",\n        ItemLegend: \"First\",\n        ItemValue: 40,\n        ItemTotalValue: 100,\n        ItemXPopOver: \"10/2/2024\",\n        ItemYPopOver: \"10%\",\n        ItemColor: \"#00A892\"\n    },\n    {\n        ItemTitle: \"Second\",\n        ItemLegend: \"Second\",\n        ItemValue: 20,\n        ItemTotalValue: 100,\n        ItemXPopOver: \"20/4/2024\",\n        ItemYPopOver: \"20%\",\n        ItemColor: \"#9A44FC\"\n    },\n    {\n        ItemTitle: \"Third\",\n        ItemLegend: \"Third\",\n        ItemValue: 120,\n        ItemTotalValue: 100,\n        ItemXPopOver: \"10/6/2024\",\n        ItemYPopOver: \"30%\",\n        ItemColor: \"#3483FA\"\n    },\n    {\n        ItemTitle: \"Fourth\",\n        ItemLegend: \"Fourth\",\n        ItemValue: 90,\n        ItemTotalValue: 100,\n        ItemXPopOver: \"20/4/2024\",\n        ItemYPopOver: \"40%\",\n        ItemColor: \"#EBA800\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Listing All Supported Dataverse Database Templates in PowerShell\nDESCRIPTION: This command lists all supported Dataverse database templates of model-driven apps in Dynamics 365. It shows template names, locations, display names, and disabled status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-app-templates-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin list-app-templates\n```\n\n----------------------------------------\n\nTITLE: Filtering User Access by User ID in Kusto\nDESCRIPTION: This Kusto query narrows down the analysis to a specific user by filtering the pageViews table based on the user_Id. It then summarizes the count of page views by host type for that specific user.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-model-driven-apps.md#2025-04-20_snippet_5\n\nLANGUAGE: kusto\nCODE:\n```\n```kusto\npageViews\n| where user_Id == \"[userid]\"\n| summarize count() by tostring(customDimensions.hostType)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Configuration Object Structure in PowerShell\nDESCRIPTION: This snippet demonstrates the structure of the connector configurations object used for defining endpoint filtering rules in DLP policies. The object includes connector action configurations and endpoint configurations with rules that specify the order, endpoint, and behavior (Allow/Deny).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-endpoint-filtering.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$ConnectorConfigurations = @{ \n  connectorActionConfigurations = @() # used for connector action rules\n  endpointConfigurations = @( # array – one entry per \n    @{  \n      connectorId # string\n      endpointRules = @( # array – one entry per rule \n        @{ \n          order # number \n          endpoint # string\n          behavior # supported values: Allow/Deny\n        }\n      ) \n    }\n  ) \n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Power Apps User Details Using PowerShell\nDESCRIPTION: Exports Power Apps user details into a specified text file. Requires user principal name and generates or overwrites a file with the provided path. Assumes admin access in Power Apps environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppsUserDetails -OutputFilePath '.\\adminUserDetails.txt' –UserPrincipalName 'admin@bappartners.onmicrosoft.com'\n```\n\n----------------------------------------\n\nTITLE: Installing Catalog Item by CID in PowerShell\nDESCRIPTION: Installs a catalog item to a specified organization URL using its catalog item ID (CID). The function requires parameters like catalogItemId and deployToOrgUrl, and sends a POST request to the Microsoft Dynamics CRM API. Optionally, settings and skipSendToCatalogService parameters can be passed. The function returns the mspcat_installhistoryid from the API response.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/install-items.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n<#\\n.SYNOPSIS\\nInstalls a catalog item to a specified organization URL using its catalog item ID (CID).\\n\\n.DESCRIPTION\\nThe `Install-CatalogItemByCID` function installs a catalog item to a specified organization URL using the Microsoft Dynamics CRM API. \\nIt constructs the appropriate request body with mandatory and optional parameters and sends a POST request to the API.\\n\\n.PARAMETER catalogItemId\\nThe ID of the catalog item to be installed. This parameter is mandatory.\\n\\n.PARAMETER deployToOrgUrl\\nThe URL of the organization where the catalog item will be deployed. This parameter is mandatory.\\n\\n.PARAMETER settings\\nOptional settings for the installation. This parameter is optional.\\n\\n.PARAMETER skipSendToCatalogService\\nA boolean flag indicating whether to skip sending to the catalog service. This parameter is optional.\\n\\n.RETURNVALUE\\n[string] The `mspcat_installhistoryid` value from the API response, which is the ID of the installation history record.\\n\\n.EXAMPLE\\nInstall-CatalogItemByCID `\\n   -catalogItemId 'ContosoConferencesCustomConnector' `\\n   -deployToOrgUrl 'https://<org to install item>.crm.dynamics.com/' `\\n   -settings = 'Key=Value|Key1=Value1'\\n\\n#>\\nfunction Install-CatalogItemByCID {\\n   param (\\n      [Parameter(Mandatory)]\\n      [string]\\n      $catalogItemId,\\n      [Parameter(Mandatory)]\\n      [string]\\n      $deployToOrgUrl,\\n      [string]\\n      $settings,\\n      [bool]\\n      $skipSendToCatalogService\\n   )\\n\\n   $body = @{\\n      CID                    = $catalogItemId\\n      DeployToOrganizationUrl = $deployToOrgUrl\\n   }\\n\\n   if ($settings) {\\n      $body.Add('Settings', $settings)\\n   }\\n\\n   if ($skipSendToCatalogService) {\\n      $body.Add('SkipSendToCatalogService', $skipSendToCatalogService)\\n   }\\n\\n   $postHeaders = $baseHeaders.Clone()\\n   $postHeaders.Add('Content-Type', 'application/json')\\n\\n   $results = Invoke-RestMethod `\\n      -Method Post `\\n      -Uri $baseURI\"mspcat_InstallCatalogItemByCID\" `\\n      -Headers $postHeaders `\\n      -Body ($body | ConvertTo-Json)\\n   \\n   return $results.mspcat_installhistoryid\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Now() function in Power Fx\nDESCRIPTION: This example retrieves the current date and time in the user's time zone and displays it as a string with the format \"mm/dd/yyyy hh:mm:ss\". The Text function is used to format the date and time value returned by the Now() function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\n\"Text( Now(), \\\"mm/dd/yyyy hh:mm:ss\\\" )\"\n```\n\n----------------------------------------\n\nTITLE: Defining Collection for Sub Text Columns - Power Fx\nDESCRIPTION: This snippet demonstrates how to use the ClearCollect function to define a data collection in PowerApps and how to configure the DetailsList's columns to show secondary information as subtext using the ColShowAsSubTextOf property.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect(colAccounts,\n{id:\"1\",name:\"Contoso\",city:\"Redmond\",country:\"U.S.\",description:\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",expand:false},\n{id:\"2\",name:\"Litware, Inc\",city:\"Dallas\",country:\"U.S.\",description:\"Donec vel pellentesque turpis.\",expand:false});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Catalog Details with .NET SDK\nDESCRIPTION: This static method retrieves catalog details using the mspcat_GetPowerCatalogDetailsRequest. It executes the request, parses the JSON response, and outputs relevant catalog information to the console. Dependencies include the IOrganizationService interface and the JSON document handling classes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\\\n/// Outputs details of the catalog in Power Platform.\\\n/// </summary>\\\n/// <param name=\"service\">The authenticated IOrganizationService instance.</param>\\\nstatic void GetPowerCatalogDetailsExample(IOrganizationService service) {\\\n\\\n    var request = new mspcat_GetPowerCatalogDetailsRequest();\\\n    var response = (mspcat_GetPowerCatalogDetailsResponse)service.Execute(request);\\\n\\\n   JsonDocument catalogDetails = JsonDocument.Parse(response.CatalogDetails);\\\n\\\n    string catalogId = catalogDetails.RootElement.GetProperty(\"catalogId\").GetString();\\\n    bool isSuccess = catalogDetails.RootElement.GetProperty(\"isSuccess\").GetBoolean();\\\n    JsonElement sourceOptions = catalogDetails.RootElement.GetProperty(\"sourceOptions\");\\\n    JsonElement categoryOptions = catalogDetails.RootElement.GetProperty(\"categoryOptions\");\\\n    string publisherLocalizedDisplayName = catalogDetails.RootElement.GetProperty(\"publisherLocalizedDisplayName\").GetString();\\\n    string catalogItemLocalizedDisplayName = catalogDetails.RootElement.GetProperty(\"catalogItemLocalizedDisplayName\").GetString();\\\n\\\n\\\n    Console.WriteLine($\"catalogId: {catalogId}\");\\\n    Console.WriteLine($\"isSuccess: {isSuccess}\");\\\n    Console.WriteLine(\"sourceOptions:\");\\\n    foreach (JsonElement element in sourceOptions.EnumerateArray())\\\n    {\\\n        int id = element.GetProperty(\"id\").GetInt32();\\\n        string label = element.GetProperty(\"userLocalziedLabel\").GetString();\\\n        Console.WriteLine($\"  {id} {label}\");\\\n    }\\\n    Console.WriteLine(\"categoryOptions:\");\\\n    foreach (JsonElement element in categoryOptions.EnumerateArray())\\\n    {\\\n        int id = element.GetProperty(\"id\").GetInt32();\\\n        string label = element.GetProperty(\"userLocalziedLabel\").GetString();\\\n        Console.WriteLine($\"  {id} {label}\");\\\n    }\\\n    Console.WriteLine($\"publisherLocalizedDisplayName: {publisherLocalizedDisplayName}\");\\\n    Console.WriteLine($\"catalogItemLocalizedDisplayName: {catalogItemLocalizedDisplayName}\");\\\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying the Spinner when Loading - Power FX\nDESCRIPTION: This code snippet demonstrates how to manage the visibility of the spinner control during a loading process in Power Apps using context variables. It sets a variable to true before processing begins and resets it to false after the process completes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/spinner.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ var_showLoader: true });\n\n/* Some code ... */\n\nUpdateContext({ var_showLoader: false });\n\nThen, provide the `var_showLoader` variable as the value for the `IsLoading` property of the spinner.\n```\n\n----------------------------------------\n\nTITLE: Using Exp Function with Table in Power Fx\nDESCRIPTION: Example of using the Exp function with a table of values to calculate e raised to the power of each number in the table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_8\n\nLANGUAGE: Power Fx\nCODE:\n```\nExp( ValueTable )\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Visibility with Power Fx\nDESCRIPTION: This Power Fx code snippet sets the `Visible` property of a dependent control (e.g., a container representing a page) based on the selected tab in the Pivot control. It demonstrates how to coordinate tab pages by associating their visibility with the `ItemKey` of the selected pivot item.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/pivot.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nPivot1.Selected.ItemKey = \"tabFile\"\n```\n\n----------------------------------------\n\nTITLE: Using HashTags Function with Text Input in Power Apps\nDESCRIPTION: This example demonstrates using the HashTags function to extract hashtags from text input and display them in a gallery. The function identifies valid hashtags which can contain letters, numbers, underscores, and currency symbols.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-hashtags.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerFx\nCODE:\n```\nHashTags(Tweet.Text)\n```\n\n----------------------------------------\n\nTITLE: Using Len with a Single String in Power Fx\nDESCRIPTION: Examples of using the Len function to measure the length of individual text strings, including a string from a text-input control and an empty string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-len.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nLen( Author.Text )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nLen( \"\" )\n```\n\n----------------------------------------\n\nTITLE: Exporting User Environment Role Assignments with PowerShell for Admins\nDESCRIPTION: This PowerShell snippet exports all environment role assignments for a user across environments without a Dataverse database. It uses the Get-AdminPowerAppEnvironmentRoleAssignment function from the Power Apps Admin PowerShell cmdlets and saves the output as a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$userId = \"11bb11bb-cc22-dd33-ee44-55ff55ff55ff\"\nGet-AdminPowerAppEnvironmentRoleAssignment -UserId $userId | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Extract an msapp file into sources using Power Platform CLI (Preview)\nDESCRIPTION: This command extracts an msapp file into sources using the Microsoft Power Platform CLI. This is a preview feature. It requires the path to the .msapp file. Optionally, you can specify the directory to extract the sources to.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/canvas.md#2025-04-20_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Defining Parameters for deploy-package Action in Markdown\nDESCRIPTION: This snippet defines the parameters for the deploy-package action, which deploys a package dll or zip file. It includes details on required and optional parameters such as environment URL, authentication credentials, and package path.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-github-available-actions.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter    | Description       |\n|---------------|-------------------|\n| environment-url| (Required) The URL for the  environment that you want to clone the solution from (for example, `https://YourOrg.crm.dynamics.com`).|\n|user-name|(Required) If you're using username/password authentication, the username of the account you're using to connect with.|\n| password-secret | (Required) If you're using username/password authentication, the password for the account you're using to connect with. |\n|app-id| The application ID to authenticate with. This parameter is **required** when authenticating with Service Principal credentials.|\n|client-secret| The client secret used to authenticate the GitHub pipeline. This parameter is **required** when authenticating with Service Principal credentials.|\n|tenant-id| The tenant ID when authenticating with `app-id` and `client-secret`.|\n|package| (Required) The path to the package dll or zip file with a package.|\n```\n\n----------------------------------------\n\nTITLE: Implicit Type Conversion of Untyped JSON Fields\nDESCRIPTION: Example showing how an untyped JSON field is implicitly converted to a number when used in a numerical context, by adding 1 to the field 'a'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_7\n\nLANGUAGE: powerapps-dot\nCODE:\n```\n>> 1 + rec.a\n2\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Navigation Bar in Power Fx\nDESCRIPTION: This Power Fx snippet demonstrates how to hide the default Power Apps navigation bar using a query parameter in the app link. By embedding the `hidenavbar=true` parameter within the app URL, it allows the Header control to display without the default navigation bar, applicable only to canvas apps. Replace `APPID` with the actual application ID when using this method.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/header.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"https://apps.powerapps.com/play/APPID?source=iframe&hidenavbar=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub Text Columns - Power Fx\nDESCRIPTION: Defines columns with subtext capabilities and custom display names. The subtext appears below the main text in a related column.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    {\n        ColName: \"name\",\n        ColDisplayName: \"Account Name\",\n        ColWidth: Self.Width-100,\n        ColIsBold:true\n    },\n    {\n        ColName: \"city\",\n        ColDisplayName: \"City:\",\n        ColShowAsSubTextOf:\"name\",\n        ColLabelAbove:false,\n        ColIsBold:true,\n        ColSubTextRow: 1\n    },\n    {\n        ColName: \"country\",\n        ColDisplayName: \"Country:\",\n        ColShowAsSubTextOf:\"name\",\n        ColLabelAbove:false,\n        ColIsBold:true,\n        ColSubTextRow: 1\n    },\n    {\n        ColName: \"description\",\n        ColDisplayName: \"\",\n        ColShowAsSubTextOf:\"name\",\n        ColLabelAbove:false,\n        ColIsBold:false,\n        ColSubTextRow: 2\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Simulating Child Control Selection in a Gallery\nDESCRIPTION: This snippet shows how the Select function can also target a child control within a specified row of a gallery to evaluate its OnSelect property.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-select.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSelect(Gallery1, 1, ChildControl1)\n```\n\n----------------------------------------\n\nTITLE: Collecting Records from a Table in PowerApps\nDESCRIPTION: This example demonstrates the use of ClearCollect to clear an existing collection and add records encapsulated in a single table argument. The records within the table represent ice cream flavors and quantities and are seamlessly added to the IceCream collection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-clear-collect-clearcollect.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerApps\nCODE:\n```\nClearCollect( IceCream, Table( {Flavor:\"Chocolate\",Quantity:100}, {Flavor:\"Vanilla\",Quantity:200} ) )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Column Display Name\nDESCRIPTION: Retrieves the display name for a specific column in a data source, allowing developers to access user-friendly column labels\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datasourceinfo.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nDataSourceInfo(IceCream, DataSourceInfo.DisplayName, Quantity)\n```\n\n----------------------------------------\n\nTITLE: Using Microsoft Translator Service in PowerFx\nDESCRIPTION: Formula for dynamically translating text using the Microsoft Translator service, which automatically translates the text to the user's current language.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-language.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerFx\nCODE:\n```\nMicrosoftTranslator.Translate( \"Hello\", Language() )\n```\n\n----------------------------------------\n\nTITLE: Configuring OnSelect Behavior - Power Fx\nDESCRIPTION: This snippet demonstrates using the `Switch()` function in Power Fx to configure actions for each navigation item based on its selected `ItemKey`. It outlines how to replace placeholder values to execute specific actions, such as navigation or triggering effects, when an item is selected.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/nav.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nSwitch( Self.Selected.ItemKey,\n  /* Action for ItemKey 1 */\n  \"1\", false,\n\n  /* Action for ItemKey 2 */\n  \"2\", false,\n\n  /* Action for ItemKey 3 */\n  \"3\", false,\n\n  /* Action for ItemKey 4 */\n  \"4\", false,\n\n  /* Action for ItemKey 5 */\n  \"5\", false,\n\n  /* Default action */\n  false\n)\n```\n\n----------------------------------------\n\nTITLE: Angle Conversion and Pi Function Examples in PowerFX\nDESCRIPTION: Examples demonstrating angle conversion functions (Degrees, Radians) and the Pi constant function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-trig.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerFX\nCODE:\n```\nDegrees(1.047197)  // Returns 60\nPi()              // Returns 3.141592...\nRadians(15)        // Returns 0.261799...\n```\n\n----------------------------------------\n\nTITLE: Role Access Scenarios Table in Markdown\nDESCRIPTION: Markdown table outlining different scenarios for role-based access control in Dataverse, showing the required access levels for different business unit relationships.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/how-record-access-determined.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| &nbsp;  | &nbsp;  |\n|---------|---------|  \n| **The record belongs to the user or to a team the user is a member of**     | In this case, the user must either have or belong to a team that has a role assigned with at least User-level access privilege.    |\n|**The record belongs to the same business unit as the user**  | In this case, the user must either have or belong to a team that has a role assigned with at least Business Unit-level access privilege.         |\n|**The record belongs to the same business unit as the team of which the user is a member of**  | In this case, the user must either have or belong to the team that has a role assigned with at least Business Unit-level access privilege.       |\n|**The record belongs to a business unit that is a descendant of the user's business unit**   | In this case, the user must either have or belong to a team that has a role assigned with at least Parent:Child business units access privilege.        |\n|**The record belongs to a business unit that is a descendant of the user's business unit or a descendant of the team's business unit of which the user is a member of**    | In this case, the user must either have or belong to a team that has a role assigned with at least Parent: Child Business Units access privilege.         |\n|**The record belongs to a business unit that is not a descendant of the user's business unit**  |  In this case, the user must either have or belong to a team that has a role assigned with Organization-level access privilege.       |\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Array of Objects to Untyped Table in Power Fx\nDESCRIPTION: This snippet demonstrates how to convert a JSON array of objects into an untyped table using the Table() function in Power Fx. The resulting table has a single column of untyped objects representing each JSON object in the array.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"array\": [\n    { \"id\": 1, \"name\": \"One\"},\n    { \"id\": 2, \"name\": \"Two\"}\n    ] }\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nSet(untypedTable, Table( ParseJSON( JsonString ).array ) );\n\nText( Index(untypedTable, 1).Value.name )\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Application Server Connection String (ASHOST)\nDESCRIPTION: This JSON snippet demonstrates the configuration for an SAP Application Server connection string. It includes parameters like the application server host, client ID, logon type, and system number. This type of connection is defined by providing the application server details directly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/configure-environment-variables.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\n{\n\n    \"AppServerHost\": \"sap.example.com\",\n\n    \"Client\": \"100\",\n\n    \"LogonType\": \"ApplicationServer\",\n\n    \"SystemNumber\": \"00\"\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Packing Power Platform Solution using PowerShell\nDESCRIPTION: This PowerShell command uses the `pac solution pack` command to pack an unpacked Power Platform solution into a zip file. It requires the Power Platform CLI (pac) to be installed and configured. The `--zipfile` parameter specifies the path and name of the output zip file, and the `--folder` parameter specifies the path to the folder containing the unpacked solution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-pack-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n```powershell\npac solution pack --zipfile C:\\SampleSolution.zip --folder .\\SampleSolutionUnpacked\\.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Item Inventory Table in Power FX\nDESCRIPTION: Creates a table of item records with varying properties including Item name, Location, and Owner for display in a gallery control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-table.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nTable( {Item: \"Violin123\", Location:\"France\", Owner:\"Fabrikam\"}, {Item:\"Violin456\", Location:\"Chile\"} )\n```\n\n----------------------------------------\n\nTITLE: Named Sub-matches Pattern Syntax\nDESCRIPTION: Syntax for creating named sub-matches (capture groups) in regular expressions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ismatch.md#2025-04-20_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n(?<name> ...)\n```\n\n----------------------------------------\n\nTITLE: Sample Output from C# SDK Query\nDESCRIPTION: Example console output from the RetrieveCatalogItems C# method showing formatted catalog item data in a table with columns for item name, publisher, IDs, version, and status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n -----------------------------------------------------------------------------------------------------------------------------------------------------------------\n | Catalog Item Name                  | Publisher Name          | Catalog Item ID                   | Revision ID                          | Version | Status    |\n -----------------------------------------------------------------------------------------------------------------------------------------------------------------\n | Contoso Conference Custom Connector| Catalog Conferences Team| ContosoConferencesCustomConnector | 4e882dd6-74f3-ed11-8849-000d3a0a286b | 1.0.0.1 | Published |\n -----------------------------------------------------------------------------------------------------------------------------------------------------------------\n | Contoso Themed Components          | ContosoPublisher        | ContosoThemedComponents           | efbc469d-f1b2-ed11-83fd-000d3a0a2d9d | 1.0.0.1 | Published |\n -----------------------------------------------------------------------------------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Setting Online Version for Power Platform Solution using PowerShell\nDESCRIPTION: This command uses the Power Platform CLI (pac) to set the online version of a solution named 'Samplesolution' to version 1.0.0.2. It demonstrates how to manage solution versions in the Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-online-version-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution online-version --solution-name Samplesolution --solution-version 1.0.0.2\n```\n\n----------------------------------------\n\nTITLE: Using Disambiguation Operator in Power Fx\nDESCRIPTION: These snippets demonstrate the use of the '@' disambiguation operator in Power Fx to access values from nested record scopes and global values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_28\n\nLANGUAGE: Power Fx\nCODE:\n```\nTable[@FieldName]\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n[@ObjectName]\n```\n\n----------------------------------------\n\nTITLE: Querying Acceleration Z - Power Platform - Formula\nDESCRIPTION: Evaluates and returns the top-to-bottom acceleration effect, especially the influence of gravity while the device is airborne.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n**Acceleration.Z**\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on the Breadcrumb Control with Power Fx\nDESCRIPTION: This example demonstrates how to set an explicit focus on the Breadcrumb control using a Power Fx context variable. The variable is updated with a random string to indicate a change, triggering the Input Event property.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/breadcrumb.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ ctxResizableTextareaEvent:\"SetFocus\" & Text(Rand()) });\n```\n\n----------------------------------------\n\nTITLE: Setting a Global Variable with Power Fx Set\nDESCRIPTION: This code demonstrates how to use the `Set` function in Power Fx to create or modify a global variable.  The `Set` function assigns a specified value to the variable, making it accessible throughout the app. The variable is implicitly created if it doesn't already exist.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-set.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Set( Counter, 1 )\"\n```\n\n----------------------------------------\n\nTITLE: Using IsToday() with Today() function in Power Fx\nDESCRIPTION: This example tests whether the current date, obtained using Today(), falls between midnight today and midnight tomorrow. The IsToday() function returns a boolean value indicating whether the given DateTime value (representing only the date) falls within the current day.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\n\"IsToday( Today() )\"\n```\n\n----------------------------------------\n\nTITLE: Filtering and Managing Errors in Error Table\nDESCRIPTION: This example uses the Error function to filter an error table to exclude specific expected errors like division by zero, allowing reporting of other types of errors. It requires an AllErrors table with different error types.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_8\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nError( Filter( AllErrors, Kind <> ErrorKind.Div0 ) )\n```\n\n----------------------------------------\n\nTITLE: Installing CreatorKitCore with Power Platform CLI\nDESCRIPTION: This snippet demonstrates the use of the Power Platform CLI to install the CreatorKitCore application into a specified environment using the environment ID or URL. This method requires authentication setup and access to the environment through either method of identification.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/setup.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npac application install --environment-id 00000000-0000-0000-0000-000000000000 --application-name CreatorKitCore\n```\n\nLANGUAGE: shell\nCODE:\n```\npac application install --environment https://orgname.crm.dynamics.com/ --application-name CreatorKitCore\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Connector Blocking Policy in PowerShell\nDESCRIPTION: Demonstrates how to retrieve a specific connector blocking policy using both the tenant ID and policy ID parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-off-by-default.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PowerAppDlpConnectorBlockingPolicy -TenantId \"aaaabbbb-0000-cccc-1111-dddd2222eeee\" -PolicyId \"1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5\"\n```\n\n----------------------------------------\n\nTITLE: Extracting decimal portion using Trunc function in Power Fx\nDESCRIPTION: Example showing how to extract the decimal portion of a number by subtracting the truncated value from the original number.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-round.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nX - Trunc(X)    // returns the decimal portion of X\n```\n\n----------------------------------------\n\nTITLE: Verifying Power Platform Environment Connection Using YAML\nDESCRIPTION: This snippet verifies a Power Platform environment service connection using the WhoAmI task. It helps in ensuring connectivity to the environment using either a Service Principal or username/password authentication method before running downstream tasks. Requires a defined service connection in the Azure Pipelines project settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n# Verifies an environment service connection\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.whoami.PowerPlatformWhoAmi@2\n  displayName: 'Power Platform WhoAmI'\n  inputs: \n#   Service Principal/client secret (supports MFA)\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'My service connection'\n```\n\nLANGUAGE: yml\nCODE:\n```\n# Verifies an environment service connection\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.whoami.PowerPlatformWhoAmi@2\n  displayName: 'Power Platform WhoAmI'\n  inputs:\n#   Username/password (no MFA support)\n    PowerPlatformEnvironment: 'My service connection'\n```\n\n----------------------------------------\n\nTITLE: Updating Context Variables in Power Apps\nDESCRIPTION: This snippet sets the OnSelect property of a button to update context variables 'Name' and 'Score' using the UpdateContext function. When the button is pressed, 'Name' will be set to \"Lily\" and 'Score' will be set to 10.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-updatecontext.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\n\"UpdateContext( { Name: \\\"Lily\\\", Score: 10 } )\"\n```\n\n----------------------------------------\n\nTITLE: in substring test in Power Platform\nDESCRIPTION: This snippet demonstrates the 'in' operator as a case-insensitive substring test in Power Platform. It checks if the string \"The\" is a substring of the given sentence.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_7\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"\\\"The\\\" in \\\"The keyboard and the monitor...\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Abs Function with Single Number in Power Fx\nDESCRIPTION: Example of using the Abs function to return the absolute value of a negative number. The function removes the negative sign, converting -55 to 55.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nAbs( -55 )\n```\n\n----------------------------------------\n\nTITLE: Syntax for WeekNum Function\nDESCRIPTION: Calculates the week number of a date with an optional parameter to specify the start of the week. Supports Excel code and StartOfWeek enumeration for defining week start.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-weeknum.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nWeekNum(DateTime [, StartOfWeek])\n```\n\n----------------------------------------\n\nTITLE: Fetching Power Platform Environment Configuration\nDESCRIPTION: A PowerShell command that retrieves environment configuration details for a Power Platform deployment, allowing developers to fetch current environment settings and metadata.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-fetch-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac env fetch\n```\n\n----------------------------------------\n\nTITLE: Defining CreatedBy Attributes in Power Platform\nDESCRIPTION: This snippet outlines the CreatedBy attribute, which stores information about the user who created the record, including its logical name and data type. It is essential for tracking ownership and auditing records in the system.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_staticanalysispolicy.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Unique identifier of the user who created the record.**|\n|DisplayName|**Created By**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`createdby`|\n|RequiredLevel|None|\n|Type|Lookup|\n|Targets|systemuser|\n```\n\n----------------------------------------\n\nTITLE: Exporting Power Platform Solution with Basic Authentication\nDESCRIPTION: YAML configuration for exporting a Power Platform solution using username/password authentication. Includes basic export settings with managed solution output.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-solution.PowerPlatformExportSolution@2\n  displayName: 'Power Platform Export Solution '\n  inputs:\n    PowerPlatformEnvironment: 'My service connection'\n    SolutionName: 'Contoso_sample'\n    SolutionOutputFile: 'C:\\Public\\Contoso_sample_1_0_0_1_managed.zip'\n    Managed: true\n    MaxAsyncWaitTime: 120\n```\n\n----------------------------------------\n\nTITLE: Analyzing Unified Interface Performance Data using Kusto\nDESCRIPTION: This Kusto query summarizes average latency and throughput metrics for UCI requests and page views, allowing developers to assess performance related to individual users. It is useful for identifying slowness or performance bottlenecks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-model-driven-apps.md#2025-04-20_snippet_2\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where ['type'] == \"UCI REQUEST\"\n| summarize avg(toint(customDimensions.warmLatency)), avg(toint(customDimensions.coldLatency)), avg(toint(customDimensions.warmThroughput)) by user_Id\n\npageViews\n| summarize avg(toint(customDimensions.warmLatency)), avg(toint(customDimensions.coldLatency)), avg(toint(customDimensions.warmThroughput)) by user_Id\n```\n\n----------------------------------------\n\nTITLE: Concatenating Employee Name with Named Record in Power FX\nDESCRIPTION: Demonstrates concatenating the first and last name of an employee using a record that has been named with the As operator in a gallery control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_23\n\nLANGUAGE: power-fx\nCODE:\n```\nEmployee.'First Name' & \" \" & Employee.'Last Name'\n```\n\n----------------------------------------\n\nTITLE: Displaying Sorted Distinct Values in a Label Using Power Fx\nDESCRIPTION: This snippet illustrates how to combine the First, Sort, and Distinct functions to display the first sorted distinct country name in a Power Apps label. Dependencies include a previously created collection named CityPopulations. The inputs include the collection and fields; the output is the first country name sorted alphabetically.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-distinct.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nFirst( Sort( Distinct( CityPopulations, Country ), Value ) ).Value\n```\n\n----------------------------------------\n\nTITLE: Exporting a Power Platform Solution using CLI\nDESCRIPTION: The 'pac solution export' command exports a solution as a zip file, similar to exporting from the maker portal. This is useful when you want to modify existing content without adding new components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-remarks.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npac solution export\n```\n\n----------------------------------------\n\nTITLE: Retrieving Catalog Items with C# using .NET SDK\nDESCRIPTION: A C# method that queries Dataverse to retrieve catalog items and their associated packages. It uses QueryExpression with linked entities and displays the results in a formatted console table. This method requires the ConsoleTables NuGet package and an authenticated IOrganizationService instance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Retrieves information about catalog items and writes it to the console\n/// </summary>\n/// <param name=\"service\">The authenticated IOrganizationService instance.</param>\nstatic void RetrieveCatalogItems(IOrganizationService service)\n{\n    QueryExpression query = new(\"mspcat_applications\")\n    {\n        ColumnSet = new ColumnSet(\n             \"mspcat_tpsid\",\n             \"mspcat_deploytype\",\n             \"mspcat_applicationtype\",\n             \"mspcat_businesscategory\",\n             \"mspcat_description\",\n             \"mspcat_applicationsid\",\n             \"mspcat_publisherid\",\n             \"mspcat_name\",\n             \"statuscode\"),\n        Criteria = new FilterExpression(LogicalOperator.And)\n        {\n            Conditions = {\n                {\n                    new ConditionExpression(\n                        attributeName: \"statecode\",\n                        conditionOperator: ConditionOperator.Equal,\n                        value: 0)\n                }\n            }\n        }\n    };\n\n    LinkEntity linkToPackages = query.AddLink(\n       linkToEntityName: \"mspcat_packages\",\n       linkFromAttributeName: \"mspcat_packageasset\",\n       linkToAttributeName: \"mspcat_packagesid\",\n       joinOperator: JoinOperator.Inner);\n\n    linkToPackages.Columns = new ColumnSet(\n        \"statecode\",\n        \"mspcat_uniquename\",\n        \"mspcat_version\",\n        \"statuscode\");\n\n    linkToPackages.EntityAlias = \"pkg\";\n\n    EntityCollection catalogs = service.RetrieveMultiple(query);\n\n    var table = new ConsoleTables.ConsoleTable(\n        \"Catalog Item Name\",\n        \"Publisher Name\",\n        \"Catalog Item ID\",\n        \"Revision ID\",\n        \"Version\",\n        \"Status\");\n\n    foreach (Entity catalog in catalogs.Entities)\n    {\n        string catalogItemName = catalog.GetAttributeValue<string>(\"mspcat_name\");\n        string publisherName = catalog.FormattedValues[\"mspcat_publisherid\"];\n        string catalogItemId = catalog.GetAttributeValue<string>(\"mspcat_tpsid\");\n        Guid revisionId = catalog.GetAttributeValue<Guid>(\"mspcat_applicationsid\");\n        string version = (string)catalog.GetAttributeValue<AliasedValue>(\"pkg.mspcat_version\").Value;\n        string status = catalog.FormattedValues[\"statuscode\"];\n\n        string[] rowData = {\n            catalogItemName,\n            publisherName,\n            catalogItemId,\n            revisionId.ToString(),\n            version,\n            status\n        };\n\n        table.Rows.Add(rowData);\n    }\n    table.Write();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Shortcuts with JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the `KeyConfig` property of the `KeyboardShortcuts` control with an array of key combinations. These combinations are the keyboard shortcuts the control will listen for within the canvas app or custom page. The JSON string must be properly serialized when setting the property.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/keyboardshortcuts.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\n[\"alt + r\",\"alt + a\",\"alt + d\",\"alt + b\",\"alt + p\",\"alt + l\",\"alt + t\",\"alt + k\"]\n\n```\n\n----------------------------------------\n\nTITLE: Converting Text to Numeric Value in Power Apps\nDESCRIPTION: The Value function in Power Apps converts a number represented as a text string to an actual number, ready for calculations. This function requires a text string and can optionally accept a language parameter, defaulting to the user's language settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/global.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Apps\nCODE:\n```\nValue( \"12,345.678\", \"en-US\" )\nValue( \"12,345.678\" )\n```\n\n----------------------------------------\n\nTITLE: Multi-Character Pattern Matching Example\nDESCRIPTION: Example pattern combining a literal character with a predefined pattern to match a letter followed by digits.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ismatch.md#2025-04-20_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n\"A\" & MultipleDigits\n```\n\n----------------------------------------\n\nTITLE: Installing CoE ALM from Configuration File\nDESCRIPTION: This command installs the CoE ALM Accelerator using the provided configuration file (quickstart.json). The command reads the configuration from the JSON file and performs the steps required for installation, such as importing managed solutions and setting up security.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm install -f quickstart.json\n```\n\n----------------------------------------\n\nTITLE: Generate canvas app from custom connector using Power Platform CLI\nDESCRIPTION: This command generates a canvas app from a custom connector using the Microsoft Power Platform CLI. It requires the path to the .msapp file to be generated. Optionally, you can specify the connector display name, connector ID, and target environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/canvas.md#2025-04-20_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Connecting to Azure AD and retrieving tenant ID using PowerShell\nDESCRIPTION: PowerShell commands to login to Microsoft Entra ID and retrieve the tenant ID which is required for various API operations. The tenant ID is extracted from the ObjectId property returned by Get-AzureADTenantDetail.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/overview.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Login to Microsoft Entra ID as your user\nConnect-AzureAD\n\n# Establish your tenant ID\n$tenantId = (Get-AzureADTenantDetail).ObjectId\n```\n\n----------------------------------------\n\nTITLE: Clearing Context Variable in Power Apps\nDESCRIPTION: This snippet clears the context variable 'RunningTotal' by setting it to 0 using the UpdateContext function. This effectively resets the running total in the adding machine application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_9\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\nUpdateContext( { RunningTotal: 0 } )\n```\n\n----------------------------------------\n\nTITLE: Syntax for AsType and IsType Functions - Power FX\nDESCRIPTION: Syntax definitions for AsType and IsType functions, detailing required parameters such as RecordReference and TableType.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\n**AsType**( _RecordReference_, _TableType_ )\n\n- _RecordReference_ - Required. A record reference, often a lookup field that can refer to a record in any of multiple tables.\n- _TableType_ - Required. The specific table to which the record should be cast.\n \n**IsType**( _RecordReference_, _TableType_ )\n\n- _RecordReference_ - Required. A record reference, often a lookup field that can refer to a record in any of multiple tables.\n- _TableType_ - Required. The specific table for which to test.\n```\n\n----------------------------------------\n\nTITLE: Using Patch with Record References - Power FX\nDESCRIPTION: This example shows how to use record references in the Patch function to modify a record in Accounts without type checking.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nPatch( Accounts, First( Accounts ), { Owner: First( Teams ) } )\n```\n\n----------------------------------------\n\nTITLE: If-Else Navigation Control in Power Apps\nDESCRIPTION: This formula demonstrates an If-Else structure that navigates to Screen1 when a text field is empty, otherwise it goes back to the previous screen using the Back function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_13\n\nLANGUAGE: PowerApps\nCODE:\n```\nIf( IsBlank( FirstName.Text ), Navigate( Screen1, ScreenTransition.None ), Back() )\n```\n\n----------------------------------------\n\nTITLE: Replace Function Basic Example in Power Fx\nDESCRIPTION: Demonstrates basic usage of Replace function to modify a portion of text by specifying start position and length to replace.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-replace-substitute.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nReplace(\"abcdefghijk\", 6, 5, \"*\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection for Examples in Power Apps\nDESCRIPTION: Formula to create a collection named 'Squares' containing sample data for demonstration purposes. This is used as the data source for the ForAll examples.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( Squares, [ \"1\", \"4\", \"9\" ] )\n```\n\n----------------------------------------\n\nTITLE: Updating Tenant Settings with Power Platform CLI\nDESCRIPTION: This command uses the Power Platform CLI to update tenant settings. The 'pac admin update-tenant-settings' command is used to modify configuration at the tenant level.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-update-tenant-settings-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin update-tenant-settings\n```\n\n----------------------------------------\n\nTITLE: Using pac copilot create command\nDESCRIPTION: Creates a new copilot using an existing template file as a reference. Requires display name, schema name, solution name, and template file path parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\npac copilot create --displayName \"My Custom Copilot\" --schemaName \"myCustomCopilot\" --solution \"MySolution\" --templateFileName \"path/to/template.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Using Revert Function in Power Apps\nDESCRIPTION: Basic syntax of the Revert function that refreshes a data source or a specific record to reflect changes made by other users and clear any errors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-revert.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\nRevert( DataSource [, Record ] )\n```\n\n----------------------------------------\n\nTITLE: Unregistering Application - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: Outlines the command for unregistering a Microsoft Entra ID application from the tenant. The application ID is required to specify which application should be removed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## pac admin application unregister\n\nUnregister Microsoft Entra ID application from your tenant.\n\n### Required Parameters for admin application unregister\n\n#### `--application-id` `-id`\n\nApplication Id.\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Message Server Connection String (MSHOST)\nDESCRIPTION: This JSON snippet shows the configuration for an SAP Message Server connection string. It defines the parameters needed for connecting through a message server, including the client ID, logon group, logon type, message server host, message server service, and system ID. This type of connection allows for load balancing and improved performance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/configure-environment-variables.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\n    \"Client\": \"102\",\n\n    \"LogonGroup\": \"FICO\",\n\n    \"LogonType\": \"Group\",\n\n    \"MessageServerHost\": \"sapserverdv6\",\n\n    \"MessageServerService\": \"3601\",\n\n    \"SystemID\": \"DV6\"\n\n} \n\n```\n\n----------------------------------------\n\nTITLE: Chaining Formulas with Error Handling in Power Apps\nDESCRIPTION: Shows how to use IfError to control execution flow by only proceeding with subsequent operations if the previous ones succeed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_1\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nPatch( DS1, ... );\nPatch( DS2, ... )\n```\n\n----------------------------------------\n\nTITLE: Resolving Approval Requests with PowerShell and Web API\nDESCRIPTION: PowerShell function that resolves a catalog submission approval using the mspcat_ResolveApproval action in the Dataverse Web API. It depends on established connection variables and requires the certification request ID, approval decision, and message for the submitter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n   This function resolves an approval request.\n\n.DESCRIPTION\n   mspcat_ResolveApproval is an action bound to the mspcat_certificationrequests table.\n\n.PARAMETER certificationRequestId\n   This is a mandatory GUID parameter that represents the ID of the certification request.\n\n.PARAMETER requestsuccess\n   This is a mandatory Boolean parameter that indicates the decision to approve or reject the request..\n\n.PARAMETER message\n   This is a mandatory string parameter that contains information for the submitter about the resolution.\n\n.EXAMPLE\n   ResolveApproval `\n      -certificationRequestId \"<Guid>\" `\n      -requestsuccess $true `\n      -message \"Request processed successfully.\"\n\n.NOTES\n   The function does not return any value.\n   Any output from the Invoke-RestMethod cmdlet is sent to Out-Null.\n#>\nfunction ResolveApproval {\n   param (\n      [Parameter(Mandatory)]\n      [guid]\n      $certificationRequestId,\n      [Parameter(Mandatory)]\n      [bool]\n      $requestsuccess,\n      [Parameter(Mandatory)]\n      [string]\n      $message\n   )\n\n   $uri = $baseURI + \"mspcat_certificationrequests($certificationRequestId)\"\n   $uri += \"/Microsoft.Dynamics.CRM.mspcat_ResolveApproval\"\n\n   $body = @{\n      requestsuccess = $requestsuccess\n      message        = $message\n   } | ConvertTo-Json\n\n   $postHeaders = $baseHeaders.Clone()\n   $postHeaders.Add('Content-Type', 'application/json')\n\n   Invoke-RestMethod `\n      -Method Post `\n      -Uri $uri `\n      -Headers $postHeaders `\n      -Body $body | Out-Null\n}\n```\n\n----------------------------------------\n\nTITLE: Unrelating Records in Many-to-Many Relationships Using Power FX\nDESCRIPTION: This Unrelate function example demonstrates how to remove the association between records in a many-to-many setup. Accurate specification of the records is necessary to avoid unintended deletions of relationships.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-relate-unrelate.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nUnrelate( First( Products ).Contacts, First( Contacts ) )\n```\n\n----------------------------------------\n\nTITLE: Enabling Analytics Data for Makers in PowerShell\nDESCRIPTION: PowerShell command to enable maker access to analytics data in a specific Power Platform environment. This setting controls general analytics access but does not include EUPI (End User Pseudonymous Identifiers).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/monitoring/monitoring-overview.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AdminPowerAppEnvironmentMakerAnalyticsSettings -EnvironmentName\n     {environment id} -EnableAnalyticsForMakers $true\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Step Information\nDESCRIPTION: This code retrieves information about the selected step in the `SubwayNav` control using the `OnSelect` or `OnChange` property. It then displays a notification with the label and status of the selected step, providing feedback to the user.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/subwaynav.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nNotify( Concatenate(Self.Selected.ItemLabel, \" selected and its status is \", Self.Selected.ItemState ));\n```\n\n----------------------------------------\n\nTITLE: Applying Consistent Background Color in Power Fx\nDESCRIPTION: Defines a formula to consistently apply a background color across multiple labels in a Power App by using the 'ColorValue' function with a parameter. It reuses the formula using global variable management in 'OnStart'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nLabel1.Fill: ColorValue( Param( \"BackgroundColor\" ) )\nLabel2.Fill: ColorValue( Param( \"BackgroundColor\" ) )\nLabel3.Fill: ColorValue( Param( \"BackgroundColor\" ) )\n```\n\n----------------------------------------\n\nTITLE: Querying Compass Heading - Power Platform - Formula\nDESCRIPTION: Returns the compass heading indicating the orientation of the device, useful for navigation features in mobile applications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n**Compass.Heading**\n```\n\n----------------------------------------\n\nTITLE: Combining Size Tables in Power FX\nDESCRIPTION: Demonstrates combining standard sizes with extended sizes into a single table using mixed syntax of records and arrays.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-table.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nTable( { Value: \"XS\" }, [ \"S\", \"M\", \"L\" ], { Value: \"XL\" } )\n```\n\n----------------------------------------\n\nTITLE: Implementing Back Navigation in Power Apps\nDESCRIPTION: Power Fx formula to return to the previous screen using the Back() function with default transition.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-navigate.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nBack()\n```\n\n----------------------------------------\n\nTITLE: Using ThisItem for Current Record in Gallery - Power FX\nDESCRIPTION: This snippet shows how to use the ThisItem operator in a Gallery control to reference the current item's picture property. This allows the display of a dynamic image based on the currently selected record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_17\n\nLANGUAGE: Power FX\nCODE:\n```\nThisItem.Picture\n```\n\n----------------------------------------\n\nTITLE: Confirmation Dialog with Custom Title in Power Fx\nDESCRIPTION: Shows a confirmation dialog with a custom title, asking the user to confirm before deleting a record. The record is only removed if the user selects 'OK'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-confirm.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Confirm( \"Are you sure?\", {Title: \"Delete Confirmation\"} ), Remove( ThisItem ) )\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP ERP Connection Parameters in JSON\nDESCRIPTION: This JSON configuration defines the parameters required to connect to an SAP ERP system via the Power Automate flow. It includes settings for server host, client number, logon type, and other authentication details necessary for the connection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-kerberos.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"AppServerHost\": \"\\<SAP Server Name>\",\n        \"Client\": \"\\<SAP Client>\",\n        \"LogonType\": \"ApplicationServer\",\n        \"SncLibraryPath\": \"C:\\\\Program Files\\\\On-premises data gateway\\\\sapcrypto.dll\",\n        \"SncPartnerName\": \"p:\\<SAP Partner Name>\",\n        \"SncQOP\": \"Default\",\n        \"SncSso\": \"On\",\n        \"SystemNumber\": \"\\<SAP System Number>\",\n        \"UseSnc\": \"true\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting GUID String to GUID Value in Power FX\nDESCRIPTION: Demonstrates converting a hyphenated GUID string to a GUID value. The function accepts strings with or without hyphens to create a valid GUID object.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-guid.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nGUID( \"0f8fad5b-d9cb-469f-a165-70867728950e\" )\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Platform Environments with PowerShell\nDESCRIPTION: This snippet uses the `Get-AdminPowerAppEnvironment` cmdlet to retrieve a list of Power Platform environments along with key information such as Display Name and GUID. It can be extended with parameters like `-Default` to identify default environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-task-automation-powershell.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-AdminPowerAppEnvironment\"\n```\n\n----------------------------------------\n\nTITLE: Converting Date components to DateTime - Power FX\nDESCRIPTION: This snippet demonstrates how to use the Date function to convert individual Year, Month, and Day values into a Date/Time value, with a time portion set to midnight. The input values are derived from text controls in a user interface.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-date-time.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nDate( Value(HireYear.Text), Value(HireMonth.Text), Value(HireDay.Text) )\n```\n\n----------------------------------------\n\nTITLE: Accessing Field in Array of Records in Untyped Object in Power Fx\nDESCRIPTION: This snippet demonstrates how to access the 'Field' of the second record in an untyped object array of records 'UORecordArray' and convert it to text.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_8\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nText( Index( UORecordArray, 2 ).Field )\n```\n\n----------------------------------------\n\nTITLE: Using Power Function with Single Numbers in Power Fx\nDESCRIPTION: Example of using the Power function to raise 5 to the power of 3, resulting in 125.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Fx\nCODE:\n```\nPower( 5, 3 )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Connections in Power Platform Using PowerShell\nDESCRIPTION: This example retrieves a list of connections from the default environment by piping the `Get-AdminPowerAppEnvironment` cmdlet into the `Get-AdminPowerAppConnection` cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-task-automation-powershell.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-AdminPowerAppEnvironment -Default | Get-AdminPowerAppConnection\"\n```\n\n----------------------------------------\n\nTITLE: Using IsUTCToday() with UTCNow() function in Power Fx\nDESCRIPTION: This example retrieves the current date and time in UTC using UTCNow(), and then tests whether this time falls between midnight today and midnight tomorrow in UTC time using IsUTCToday().\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_10\n\nLANGUAGE: power-fx\nCODE:\n```\n\"IsUTCToday( UTCNow() )\"\n```\n\n----------------------------------------\n\nTITLE: Validating Power Platform Canvas Application\nDESCRIPTION: Executes a validation process for canvas applications using the Power Platform CLI (pac) tool. Used to check and ensure application integrity and configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-validate-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac canvas validate\n```\n\n----------------------------------------\n\nTITLE: Building Dataverse Model Code with Command Prompt\nDESCRIPTION: Example showing how to use the 'pac modelbuilder build' command with Command Prompt to generate C# code for account and contact entities with custom messages. It includes various parameters like entity filtering, namespace definition, and output directory specification.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/modelbuilder-build-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: dos\nCODE:\n```\npac modelbuilder build ^\n  --entitynamesfilter account;contact ^\n  --generatesdkmessages ^\n  --messagenamesfilter examp_* ^\n  --emitfieldsclasses ^\n  --emitVirtualAttributes ^\n  --namespace MyApps.Model ^\n  --outdirectory c:\\src\\MyApps\\Model ^\n  --writesettingsTemplateFile ^\n  --serviceContextName OrgContext\n```\n\n----------------------------------------\n\nTITLE: Displaying Record Count Information in Fluent Detail List\nDESCRIPTION: Expression for a label showing total records and selected items count, which updates dynamically based on user interactions with the grid.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_11\n\nLANGUAGE: power-fx\nCODE:\n```\ngrid.TotalRecords & \" record(s)  \" & Text(CountRows(grid.SelectedItems)+0) & \" selected\"\n```\n\n----------------------------------------\n\nTITLE: Submitting Form Data with Button Control in Power Apps\nDESCRIPTION: Uses a Button control with the SubmitForm function to save changes in a Form control to the underlying data source. This is typically used as a Save button in form screens.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerFx\nCODE:\n```\nSubmitForm( EditForm )\n```\n\n----------------------------------------\n\nTITLE: Installing CoE ALM for Azure AD Configuration\nDESCRIPTION: This command installs the CoE ALM Accelerator configurations related to Azure Active Directory (Azure AD).  The `-c aad` parameter indicates that the installation focuses on setting up Azure AD components, such as service principals and application registrations.  This ensures that the ALM Accelerator can interact with Azure AD for authentication and authorization purposes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm install -c aad\n```\n\n----------------------------------------\n\nTITLE: Using ForAll to Generate Random Numbers from Sequence\nDESCRIPTION: This code snippet illustrates the use of the Combined Sequence and ForAll functions to generate a table of random numbers, leveraging the sequence count as a base for how many random values to produce.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sequence.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll( Sequence( 4 ), Rand() )\n```\n\n----------------------------------------\n\nTITLE: Using Lower Function with Table Column in Power Fx\nDESCRIPTION: Converts all characters in a column of text to lowercase. The function works with a single-column table created from the 'Address' column of the 'People' data source.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-lower-upper-proper.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\nLower( ShowColumns( People, \"Address\" ) )\n```\n\n----------------------------------------\n\nTITLE: Defining Pivot Items Table in Power Fx\nDESCRIPTION: This Power Fx code defines a table structure for the `Items` property of the Pivot control. Each entry in the table represents a tab with properties such as `ItemKey` and `ItemDisplayName`. It is used to define the tabs that are displayed in the Pivot control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/pivot.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    {\n        ItemKey: \"tabFile\",\n        ItemDisplayName: \"File\"\n    },\n    {\n        ItemKey: \"tabHome\",\n        ItemDisplayName: \"Home\"\n    },\n    {\n        ItemKey: \"tabView\",\n        ItemDisplayName: \"View\"\n    },\n    {\n        ItemKey: \"tabAction\",\n        ItemDisplayName: \"Action\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Parameterized Named Formulas in Power Fx\nDESCRIPTION: Enhances named formula flexibility by parameterizing library genre filtering, showing the 'LibraryGenre' function that takes the selected genre and filters the library accordingly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_7\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nLibraryType := Type( [ { Title: Text, Author: Text, Genre: Text } ] );\n\nLibraryGenre( SelectedGenre: Text ): LibraryType = Filter( Library, Genre = SelectedGenre );\n```\n\n----------------------------------------\n\nTITLE: Assigning a User to a Power Platform Environment using YAML in Azure DevOps\nDESCRIPTION: This YAML snippet shows how to use the PowerPlatformAssignUser task to assign a user to a Power Platform environment with a specified security role. It uses a Service Principal for authentication and can be configured for application users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.assign-user.PowerPlatformAssignUser@2\n  displayName: 'Power Platform Assign User '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    User: EnvironmentUsername\n    Role: 'Environment Maker'\n    ApplicationUser: true\n```\n\n----------------------------------------\n\nTITLE: Using RGBA Function for Color Definition in Power Apps\nDESCRIPTION: Examples of using the RGBA function to define colors by specifying individual red, green, blue, and alpha channel values. This provides precise control over each color component and transparency.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_7\n\nLANGUAGE: Power Fx\nCODE:\n```\nRGBA( 240, 248, 255, 1 )\n```\n\n----------------------------------------\n\nTITLE: Converting Text to Time Value in Power Apps\nDESCRIPTION: The TimeValue function converts a time represented in a text string to a date/time value, ignoring the date if specified. It can interpret the text according to a specified language, defaulting to the user's settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/global.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Apps\nCODE:\n```\nTimeValue( \"11:43:02\", \"fr-FR\" )\nTimeValue( \"11:43:02\" )\n```\n\n----------------------------------------\n\nTITLE: Clearing and Collecting Multiple Records in PowerApps\nDESCRIPTION: This snippet shows how to use ClearCollect to clear an existing collection and add multiple records simultaneously by providing them as individual arguments to the function. The IceCream collection is updated to include specified flavors and quantities of ice cream.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-clear-collect-clearcollect.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerApps\nCODE:\n```\nClearCollect( IceCream, {Flavor:\"Chocolate\",Quantity:100}, {Flavor:\"Vanilla\",Quantity:200} )\n```\n\n----------------------------------------\n\nTITLE: Showing Host Information in Power Apps\nDESCRIPTION: This snippet illustrates how to use the ShowHostInfo function to display information about the sync status of a canvas app when the Sync icon is selected. The HostInfo parameter is essential and specifies the type of information being displayed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/showhostinfo.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nShowHostInfo(HostInfo.OfflineSync)\n```\n\n----------------------------------------\n\nTITLE: Installing AzureAD Module - PowerShell\nDESCRIPTION: This PowerShell snippet installs the AzureAD module and creates a service principal for the Power Platform API using the specified AppId.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-authentication-v2.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n#Install the Microsoft Entra the module\nInstall-Module AzureAD\n\nConnect-AzureAD\nNew-AzureADServicePrincipal -AppId 8578e004-a5c6-46e7-913e-12f58912df43 -DisplayName \"Power Platform API\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Environments Using PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of all environments across your Microsoft Dataverse tenant. It provides details such as environment name, display name, location, and creator. No additional parameters are needed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppEnvironment\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resources for Data Export Service using PowerShell\nDESCRIPTION: PowerShell script to create or verify Azure Resource Group and Key Vault, store connection string as a secret with organization tags, and configure Key Vault access policies. The script sets up the necessary infrastructure for Data Export Service.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/replicate-data-microsoft-azure-sql-database.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Create new resource group if not exists.\n$rgAvail = Get-AzResourceGroup -Name $resourceGroupName -Location $location -ErrorAction SilentlyContinue\nif(!$rgAvail){\n    New-AzResourceGroup -Name $resourceGroupName -Location $location\n}\n\n# Create new key vault if not exists.\n$kvAvail = Get-AzKeyVault -VaultName $keyvaultName -ResourceGroupName $resourceGroupName -ErrorAction SilentlyContinue\nif(!$kvAvail){\n    New-AzKeyVault -VaultName $keyvaultName -ResourceGroupName $resourceGroupName -Location $location\n    # Wait few seconds for DNS entry to propagate\n    Start-Sleep -Seconds 15\n}\n\n# Create tags to store allowed set of Organizations.\n$secretTags = @{}\nforeach ($orgId in $organizationIdList.Split(',')) {\n    $secretTags.Add($orgId.Trim(), $tenantId)\n}\n\n# Add or update a secret to key vault.\n$secretValue = ConvertTo-SecureString $connectionString -AsPlainText -Force\n$secret = Set-AzKeyVaultSecret -VaultName $keyvaultName -Name $secretName -SecretValue $secretValue -Tags $secretTags\n\n# Authorize application to access key vault.\n$servicePrincipal = 'b861dbcc-a7ef-4219-a005-0e4de4ea7dcf'\nSet-AzKeyVaultAccessPolicy -VaultName $keyvaultName -ServicePrincipalName $servicePrincipal -PermissionsToSecrets get\n\n# Display secret url.\nWrite-Host \"Connection key vault URL is \"$secret.id.TrimEnd($secret.Version)\"\"\n```\n\n----------------------------------------\n\nTITLE: Summarizing Inventory Data by Multiple Columns\nDESCRIPTION: Shows how to use Summarize function with multiple group columns (Supplier and Fruit) to calculate average prices.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-summarize.md#2025-04-20_snippet_3\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nSummarize( Inventory, Supplier, Fruit, Average( ThisGroup, Price ) As 'Average Price' )\n```\n\n----------------------------------------\n\nTITLE: Handling Time Zone Offset - Power FX\nDESCRIPTION: The TimeZoneOffset function returns the time difference in minutes between the local user timezone and UTC. It plays a crucial role in converting and adjusting time zones in applications, especially when dealing with global time synchronization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-dateadd-datediff.md#2025-04-20_snippet_2\n\nLANGUAGE: Power FX\nCODE:\n```\n**TimeZoneOffset**( [ *DateTime* ] )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Year Component in Power FX\nDESCRIPTION: The **Year** function retrieves the year component from a specific Date/Time value, starting from the year 1900.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datetime-parts.md#2025-04-20_snippet_2\n\nLANGUAGE: Power FX\nCODE:\n```\nYear( _DateTime_ )\n```\n\n----------------------------------------\n\nTITLE: Using DateAdd() with Now() function in Power Fx\nDESCRIPTION: This example retrieves the current date and time, adds 12 days to it using the DateAdd() function, and displays the result as a string with the format \"mm/dd/yyyy hh:mm:ss\".\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\n\"Text( DateAdd( Now(), 12 ), \\\"mm/dd/yyyy hh:mm:ss\\\" )\"\n```\n\n----------------------------------------\n\nTITLE: Handling Flow Response in Power Apps\nDESCRIPTION: This Power Fx code snippet demonstrates how to handle the response from the CreateRequisition flow in a Power Apps canvas app. It uses a Switch statement to check the status and display appropriate notifications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/extend-cloud-flows.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSwitch(\n    varRequisitionReturn.Status,\n    \"Error\",\n    Notify(\n        Concat(\n            varRequisitionReturn.Messages,\n            Message,\n            \" \"\n        ),\n        NotificationType.Error\n    ),\n    \"Success\",\n    Notify(\n        Concat(\n            varRequisitionReturn.Messages,\n            Message,\n            \" \"\n        ),\n        NotificationType.Success\n);\n```\n\n----------------------------------------\n\nTITLE: Launching a webpage using Launch function in Power Fx\nDESCRIPTION: This code snippet demonstrates how to launch a webpage using the Launch function in Power Fx. It opens the specified URL in a new browser tab or window.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nLaunch( \"https://bing.com\" )\n```\n\n----------------------------------------\n\nTITLE: Deleting a Solution\nDESCRIPTION: Demonstrates how to retrieve a solution by its unique name and then delete it using the IOrganizationService\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nQueryExpression queryImportedSolution = new QueryExpression\n{\n    EntityName = Solution.EntityLogicalName,\n    ColumnSet = new ColumnSet(new string[] { \"solutionid\", \"friendlyname\" }),\n    Criteria = new FilterExpression()\n};\n\nqueryImportedSolution.Criteria.AddCondition(\"uniquename\", ConditionOperator.Equal, ImportedSolutionName);\n\nSolution ImportedSolution = (Solution)_serviceProxy.RetrieveMultiple(queryImportedSolution).Entities[0];\n\n_serviceProxy.Delete(Solution.EntityLogicalName, (Guid)ImportedSolution.SolutionId);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Catalog Information - C# SDK\nDESCRIPTION: This C# method retrieves catalog information, including details such as solution version and user permissions, using the Power Platform SDK. It leverages the mspcat_GetPowerCatalogInformation API.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Returns data about the catalog for an environment\n/// </summary>\n/// <param name=\"service\">The authenticated IOrganizationService instance.</param>\n/// <param name=\"permissionsonly\">Whether to only return information about permissions.</param>\nstatic void GetPowerCatalogInformationExample(IOrganizationService service, bool permissionsonly = false)\n{\n   var request = new mspcat_GetPowerCatalogInformationRequest();\n   if (permissionsonly) {\n         request.permissionsonly = true;\n   }\n   var response = (mspcat_GetPowerCatalogInformationResponse)service.Execute(request);\n\n   Console.WriteLine($\"SolutionVersion: {response.SolutionVersion}\");\n   Console.WriteLine($\"CatalogDescription: {response.CatalogDescription}\");\n   Console.WriteLine($\"CanRead: {response.CanRead}\");\n   Console.WriteLine($\"CatalogName: {response.CatalogName}\");\n   Console.WriteLine($\"ImageLink: {response.ImageLink}\");\n   Console.WriteLine($\"CanSubmit: {response.CanSubmit}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables for Color Management in Power Fx\nDESCRIPTION: Demonstrates setting a global variable 'BGColor' to store a color value at 'App.OnStart', reducing repetition by using this variable in subsequent controls.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nApp.OnStart: Set( BGColor, ColorValue( Param( \"BackgroundColor\" ) ) )\nLabel1.Fill: BGColor\nLabel2.Fill: BGColor\nLabel3.Fill: BGColor\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Connector Authentication\nDESCRIPTION: This snippet configures the authentication settings for the CustomAzureDevOps custom connector in Power Platform. It sets the authentication type to OAuth 2.0, specifies Microsoft Entra ID as the identity provider, and uses client ID, client secret, and resource URL obtained from the app registration in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-admin-tasks.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"| Name | Value |\n|--|--|\n| **Authentication Type** | **OAuth 2.0** |\n| **Identity provider** | **Microsoft Entra ID** |\n| **Client ID** | The **Application (client) ID** you copied when you [created the app registration](#create-an-app-registration-in-your-microsoft-entra-environment) |\n| **Client secret** | The **Application (client) secret value** you copied when you [created the app registration](#create-an-app-registration-in-your-microsoft-entra-environment) |\n| **Tenant ID** | Leave the default value, **common** |\n| **Resource URL** | The **DevOps Application (client) ID** you copied when you [added permissions to your app registration](#create-an-app-registration-in-your-microsoft-entra-environment) |\"\n```\n\n----------------------------------------\n\nTITLE: Pushing PCF Component with PowerShell\nDESCRIPTION: This PowerShell command utilizes the PowerApps CLI to deploy a PowerApps Component Framework (PCF) component to the specified environment. The '--publisher-prefix' parameter is used to define the prefix associated with the environment's publisher. This operation requires that the user has the PowerApps CLI ('pac') installed and authenticated, and that the command is executed within a valid PCF project directory. Successful execution pushes the latest PCF changes to the environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/pcf-push-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac pcf push --publisher-prefix dev\n```\n\n----------------------------------------\n\nTITLE: Working with Tables and Places Parameter in Dec2Hex\nDESCRIPTION: Examples of using Dec2Hex with single-column tables and the Places parameter. The function can process tables of numbers and apply different padding options to each value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-hexdec.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( [ 10, 255, -16 ], [ 1, 2, 3 ] )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( [ 10, 255, -16 ], 4 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 255, [0, 1, 2, 3] )\n```\n\n----------------------------------------\n\nTITLE: Listing All Environments with PAC CLI\nDESCRIPTION: Lists all environments in the tenant using the pac admin list command. Shows environment details including name, ID, URL, type, and organization ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin list\n```\n\nLANGUAGE: powershell\nCODE:\n```\nEnvironment   Environment Id                        Environment Url                        Type        Organization Id\nContoso       00000000-0000-0000-0000-000000000000  https://contoso.crm.dynamics.com/      Production  00000000-0000-0000-0000-000000000000\nContoso Dev   00000000-0000-0000-0000-000000000000  https://contoso-dev.crm.dynamics.com/  Sandbox     00000000-0000-0000-0000-000000000000\nContoso Test  00000000-0000-0000-0000-000000000000  https://commdemos.crm.dynamics.com/    Sandbox     00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to a Webpage using Launch (Argument List) in Power Fx\nDESCRIPTION: This snippet shows how to pass parameters to a webpage using the Launch function in Power Fx.  Parameters are passed as an argument list of name-value pairs. The URL is encoded before being passed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nLaunch( \"https://bing.com/search\", \"q\", \"Power Apps\", \"count\", 1 )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sync Details by User in Kusto\nDESCRIPTION: This Kusto query provides a per-user view of synchronization, including last sync date, last error, duration of sync, and records synced.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-mobile.md#2025-04-20_snippet_3\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where name == \"Offline.SyncDatabase\"\n| extend cd = parse_json(customDimensions)\n| extend ActiveDuration = toint(tostring(cd.ActiveDuration))\n| extend WithBackgroundTime = duration\n| extend DataSyncMode = tostring(cd.DataSyncMode)\n| extend ErrorMessage = tostring(cd.ErrorMessage)\n| summarize percentile(ActiveDuration, 50), percentile(WithBackgroundTime, 50), arg_max(timestamp, ErrorMessage), countif(success == false) by user_Id, DataSyncMode\n```\n\n----------------------------------------\n\nTITLE: API Version Support Table\nDESCRIPTION: Table showing currently available API versions with their stability status, reference documentation links, and deprecation/decommission dates.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-versioning-support.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Type | Reference | Deprecation date | Decommission date\n| --- | --- | --- | --- |\n| 2024-10-01 | Stable | [Reference](/rest/api/power-platform) | N/A | N/A |\n| 2022-03-01-preview | Public preview | [2022-03-01-preview Ref](/rest/api/power-platform) | 2025-03-01 | 2026-03-01 |\n| 2020-10-01 | Generally available | [2020-10-01 Ref](list-environments.md) | N/A | N/A |\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL PowerShell Module for Power Platform Authentication\nDESCRIPTION: Installs the Microsoft Authentication Library (MSAL) PowerShell module required for authenticating with the Power Platform API. This is a one-time installation prerequisite for running the self-elevation script.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-high-privileged-admin-roles.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name MSAL.PS\n```\n\n----------------------------------------\n\nTITLE: Creating a Finance and Operations Environment with PowerShell\nDESCRIPTION: This PowerShell script creates a new environment with finance and operations apps pre-installed. It installs the required module, authenticates with the Power Platform API, and provisions a new environment using specified parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/unified-experience/tutorial-deploy-new-environment-with-ERP-template.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n#Install the module\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\n\nWrite-Host \"Creating a session against the Power Platform API\"\n\nAdd-PowerAppsAccount -Endpoint prod\n\n#To construct the json object to pass in\n$jsonObject= @\" \n{ \n \"PostProvisioningPackages\": \n [ \n { \n \"applicationUniqueName\": \"msdyn_FinanceAndOperationsProvisioningAppAnchor\", \n\"parameters\": \"DevToolsEnabled=true|DemoDataEnabled=true\" \n } \n ] \n} \n\"@ | ConvertFrom-Json\n\n# To kick off new environment Provisionment\n# IMPORTANT - This has to be a single line, after the copy & paste the command\nNew-AdminPowerAppEnvironment -DisplayName \"MyUniqueNameHere\" -EnvironmentSku Sandbox -Templates \"D365_FinOps_Finance\" -TemplateMetadata $jsonObject -LocationName \"Canada\" -ProvisionDatabase\n```\n\n----------------------------------------\n\nTITLE: Handling App Errors with Power Fx\nDESCRIPTION: Implements error handling for SAP integration flows by capturing error details, creating error records, and tracing exceptions using Power Fx\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/extend-canvas-apps.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nIf(\n    !IsBlank(FirstError.Message),\n    Patch(\n        'SAP Integration Errors',\n        Defaults('SAP Integration Errors'),\n        {\n            Action: FirstError.Source,\n            'Additional Information': App.ActiveScreen.Name,\n            'Error Message': FirstError.Message,\n            Name: \"SAP Vendor Management\",\n            'Source Type': 'Source Type (SAP Integration Errors)'.'Power App',\n            'Workflow Status': 'Workflow Status (SAP Integration Errors)'.Failed\n        }\n    );\nTrace(FirstError.Message);\nError(FirstError);  \n)\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to a Color in Power Fx\nDESCRIPTION: Examples of converting JSON color representations (hex string and RGBA values) to Color data type in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nColorValue( ParseJSON( \"{ \\\"color\\\": \\\"#102030\\\" }\" ).color )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nWith( { uo: ParseJSON( \"{ \\\"r\\\": 255, \\\"g\\\": 128, \\\"b\\\": 0, \\\"a\\\": 0.5 }\" ) }, RGBA( Value( uo.r ), Value( uo.g ), Value( uo.b ), Value( uo.a ) ) )\n```\n\n----------------------------------------\n\nTITLE: Accessing Column Names from JSON Object using Power FX\nDESCRIPTION: This snippet demonstrates how to retrieve the column names from a JSON string variable using the ColumnNames function. The ParseJSON function is utilized to convert the JSON string into an untyped record for processing.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-columnnames-column.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nColumnNames( ParseJSON( JsonString ) )\n```\n\n----------------------------------------\n\nTITLE: Converting Hexadecimal Strings to Numbers with Hex2Dec in Power Fx\nDESCRIPTION: Basic examples of using the Hex2Dec function to convert hexadecimal text strings to decimal numbers. The function handles both positive and negative values using two's-complement representation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-hexdec.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nHex2Dec( \"A5\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nHex2Dec( \"FFFFFFFF5B\")\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nHex2Dec( \"c8d\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nHex2Dec( \"fffffff373\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nHex2Dec( \"ffffffffff\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nHex2Dec( \"ffffffffffff\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nHex2Dec( \"43j\" )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nHex2Dec( [ \"A\", \"12\", \"FFFF\" ] )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nHex2Dec( [ \"3\", \"E\", \"I\", \"B\" ] )\n```\n\n----------------------------------------\n\nTITLE: Managing Power Apps License Assignments with PowerShell\nDESCRIPTION: This PowerShell script helps administrators unassign direct Power Apps licenses from users and add them to Microsoft Entra groups for group-based licensing. It connects to Azure AD, identifies users with auto-assigned licenses, removes their direct license assignments, and adds them to licensed security groups.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/auto-claim-licensing.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n##\n#Install and import AzureAD PowerShell module prior to running these commands\n##\n##You may be able to get a list of users, that have been auto-assigned a \n##license directly, via Microsoft Admin Center. Follow instructions at \n##https://learn.microsoft.com/en-us/microsoft-365/commerce/licenses/manage-auto-claim-policies?view=o365-worldwide#view-an-auto-claim-policy-report\n##\n##Once you have a list of users, you can use the following commands to remove \n##the direct license assignment and add the user to a licensed group, or \n##you may tweak the script to iterate through a list of users and \n##perform this in bulk\n##\n##Please note that adding a user to a licensed group may not result in an \n##immediate license assignment. Refer to https://learn.microsoft.com/en-us/entra/identity/users/licensing-group-advanced for more information\n#############################################>\n\n$Credential = Get-Credential\n\n# Connect to Azure AD\nConnect-AzureAD -Credential $Credential\n\n#The user that will get a group based license\n$LicensedUser = Get-AzureADUser -SearchString \"<UPN, display name or object ID of the user for which you want to assign a license>\"\n\n#The group that has the license assigned\n$LicensedGroup = Get-AzureADGroup -SearchString \"<Object ID or name of the group that has a relevant license assigned>\"\n\n#SKU part number of the sku that needs to be unassigned (Power Apps Premium)\n$SkuPartName = \"POWERAPPS_PER_USER\"\n\n#Get the SkuID of the license that needs to be unassigned from the user\n$LicenseSku = Get-AzureADSubscribedSku | Where-Object {$_.SkuPartNumber -eq $SkuPartName}\n\n#Create the AssignedLicenses Object, used for removing direct license assignment from the user\n$LicensesToRemove = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses\n$LicensesToRemove.RemoveLicenses = $LicenseSku.SkuId\n\n#Remove directly assigned license from the user\n#Note that this command will result in an error if the user does not have the relevant license assigned directly\nSet-AzureADUserLicense -ObjectId $LicensedUser.ObjectId -AssignedLicenses $LicensesToRemove\n\n#Add user to a licensed group\nAdd-AzureADGroupMember -ObjectId $LicensedGroup.ObjectId -RefObjectId $LicensedUser.ObjectId\n```\n\n----------------------------------------\n\nTITLE: Rethrowing Errors for Custom Handling in Power Fx\nDESCRIPTION: This snippet shows how to rethrow an error in Power Fx after logging it, allowing for both error logging and default error messaging to occur simultaneously. This is useful for maintaining visibility of error conditions while also customizing error handling in the application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_11\n\nLANGUAGE: power-fx\nCODE:\n```\nTrace( \"$\"Error {FirstError.Message} in {FirstError.Source}\" );\nError( FirstError )\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Logic to Direct Initial Screen in Power Apps\nDESCRIPTION: This example uses the 'LookUp' function to verify if the user is a staff member, directing them to either the 'StaffPortal' or 'HomeScreen'. This showcases using user attributes or roles for initial screen determination.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_14\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( LookUp( Attendees, User = User().Email ).Staff, StaffPortal, HomeScreen )\n```\n\n----------------------------------------\n\nTITLE: CountA Function Example in Power Fx\nDESCRIPTION: This example demonstrates how to use the CountA function in Power Fx to count the number of non-empty cells in the 'UnitsInStock' column of the 'Inventory' collection. It assumes an existing collection named 'Inventory' with a 'UnitsInStock' column is available.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-table-counts.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\n\"CountA(Inventory.UnitsInStock)\"\n```\n\n----------------------------------------\n\nTITLE: Using Log Function with Single Number in Power Fx\nDESCRIPTION: Example of using the Log function to calculate the base-10 logarithm of 100, resulting in 2.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\nLog( 100 )\n```\n\n----------------------------------------\n\nTITLE: As Operator Example in Power Platform\nDESCRIPTION: This snippet demonstrates the 'As' operator to override ThisItem and ThisRecord in galleries and record scope functions. This provides a better, specific name for referencing the current item, especially useful in nested scenarios.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_12\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"AllCustomers As Customer\"\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Arrays\nDESCRIPTION: This example shows how to handle JSON that includes arrays of records and convert them to Power Fx tables.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( jsonOrder, ParseJSON( jsonStringVariable ) );\n```\n\n----------------------------------------\n\nTITLE: Converting Non-hyphenated GUID String to GUID Value in Power FX\nDESCRIPTION: Shows how to convert a GUID string without hyphens to a GUID value. This returns the same result as the hyphenated version.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-guid.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nGUID( \"0f8fad5bd9cb469fa16570867728950e\" )\n```\n\n----------------------------------------\n\nTITLE: Using Ln Function with Table in Power Fx\nDESCRIPTION: Example of using the Ln function with a table of values to calculate the natural logarithm of each number in the table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_9\n\nLANGUAGE: Power Fx\nCODE:\n```\nLn( ValueTable )\n```\n\n----------------------------------------\n\nTITLE: Creating Solution Deployment Settings with PAC CLI\nDESCRIPTION: Uses the pac solution create-settings command to generate a deployment settings file from a solution zip. Takes a solution zip file as input and outputs settings to a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-create-settings-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution create-settings --solution-zip C:\\SampleSolution.zip --settings-file .\\SampleDeploymentSettingsDev.json\n```\n\n----------------------------------------\n\nTITLE: Navigating Back to Source Screen in Power Apps\nDESCRIPTION: This snippet sets the OnSelect property of a back arrow to navigate back to the 'Source' screen with a fade transition. It is used to return from the 'Target' screen after a language has been selected.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-updatecontext.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\n\"Navigate(Source, ScreenTransition.Fade)\"\n```\n\n----------------------------------------\n\nTITLE: Unpacking Canvas App to Custom Directory\nDESCRIPTION: Command to unpack a Canvas app .msapp file into a specified custom directory using the Power Platform CLI. Uses the --sources parameter to specify the output directory.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-unpack-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac canvas unpack --msapp HelloWorld.msapp --sources MyHelloWorldFiles\n```\n\n----------------------------------------\n\nTITLE: Generating Deployment Settings with Power Platform CLI\nDESCRIPTION: A Shell command using Power Platform CLI to create a deployment settings file for a specified solution. The command utilizes the 'create-settings' property to generate a JSON file that will be used for automating deployments. The command requires two parameters: the path to the solution zip file and the intended name for the settings file. This prepares a deployment settings file with empty values needing further population.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/conn-ref-env-variables-build-tools.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nC:\\> pac solution create-settings --solution-zip <solution_zip_file_path> --settings-file <settings_file_name>\n```\n\n----------------------------------------\n\nTITLE: Regional Single Sign-on URL Patterns for Different Geographic Deployments\nDESCRIPTION: URL patterns for single sign-on across different geographic regions where Microsoft Power Platform is deployed. Each region has a specific URL format that includes the region-specific endpoint.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-user-account-synchronization.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- LATAM/SAM: https://<*yourCRMorganizationname*>.crm2.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- CAN: https://<*yourCRMorganizationname*>.crm3.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- EMEA: https://<*yourCRMorganizationname*>.crm4.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- APAC: https://<*yourCRMorganizationname*>.crm5.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- OCE: https://<*yourCRMorganizationname*>.crm6.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- JPN: https://<*yourCRMorganizationname*>.crm7.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- IND: https://<*yourCRMorganizationname*>.crm8.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- United States of America Government: https://<*yourCRMorganizationname*>.crm9.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- UK: https://<*yourCRMorganizationname*>.crm11.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- FRA: https://<*yourCRMorganizationname*>.crm12.dynamics.com?whr=<*yourFederationServiceIdentifier*>  \n- UAE: https://<*yourCRMorganizationname*>.crm15.dynamics.com?whr=<*yourFederationServiceIdentifier*>\n- DEU: https://<*yourCRMorganizationname*>.crm.microsoftdynamics.de?whr=<*yourFederationServiceIdentifier*>\n```\n\n----------------------------------------\n\nTITLE: Inverse Trigonometric Function Examples in PowerFX\nDESCRIPTION: Examples showing inverse trigonometric functions (Acos, Acot, Asin, Atan, Atan2) with their inputs and corresponding outputs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-trig.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerFX\nCODE:\n```\nAcos(0.5)           // Returns 1.047197...\nAcot(1)            // Returns 0.785398...\nAsin(1)            // Returns 1.570796...\nAtan(1.732050)      // Returns 1.047197...\nAtan2(5, 3)         // Returns 0.540419...\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Button Actions in Dialog - Power Fx\nDESCRIPTION: This Power Fx code serves to define conditional actions within the 'OnButtonSelect' property of a dialog. Actions depend on the label of the selected button. The snippet showcases an example where a notification is sent if the 'Send' button is clicked, followed by closing the dialog.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/dialog.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Self.SelectedButton.Label = \"Send\", \n        Notify(\"Email Sent\")\n    );\n    UpdateContext({ showHideDialog: false })\n```\n\n----------------------------------------\n\nTITLE: Using Ln Function with Single Number in Power Fx\nDESCRIPTION: Example of using the Ln function to calculate the natural logarithm (base e) of 100, resulting in approximately 4.605170.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nLn( 100 )\n```\n\n----------------------------------------\n\nTITLE: Querying Full Location - Power Platform - Formula\nDESCRIPTION: Returns both latitude and longitude of the current location combined into a single record for better management of geographical data in applications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n**Location**\n```\n\n----------------------------------------\n\nTITLE: Downloading Exported Solution File with Dataverse SDK in C#\nDESCRIPTION: This snippet outlines how to download an exported solution file using the `DownloadSolutionExportData` message in the Dataverse SDK for .NET. The export is completed by providing the `ExportJobId` from the response of the `ExportSolutionAsync`. The service should be a pre-configured `IOrganizationService` instance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-async.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Where 'service' is a pre-configured IOrganizationService instance.\\nvar service = (OrganizationServiceProxy)xsc.CreateOrganizationService();\\n\\nvar req = new OrganizationRequest(\\\"DownloadSolutionExportData\\\");\\nreq.Parameters.Add(\\\"ExportJobId\\\", Guid.Parse(\\\"a9089b53-a1c7-ea11-a813-000d3a14420d\\\"));\\nvar response = service.Execute(req);\n```\n\n----------------------------------------\n\nTITLE: Setting and Using Global Variable in Power Fx\nDESCRIPTION: Demonstrates setting a global variable 'Radius' and then using it in a calculation. This example calculates the area of a circle.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_6\n\nLANGUAGE: Power Fx\nCODE:\n```\nSet( Radius, 12 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nPi() * Power( Radius, 2 )\n```\n\n----------------------------------------\n\nTITLE: Parsing Simple JSON Values\nDESCRIPTION: This snippet shows how to parse simple JSON values without using records, illustrating direct value extraction.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_10\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( myText, Boolean( ParseJSON( \"true\" ) ) );\n\nSet( myNumber, Value( ParseJSON( \"123.456\" ) ) );\n```\n\n----------------------------------------\n\nTITLE: Creating a Trial (Subscription-Based) Environment in Power Platform Admin Center\nDESCRIPTION: Detailed configuration process for creating a subscription-based trial environment with options for Dynamics 365 apps and database settings\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/trial-environments.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/) with admin credentials.\n\n2. Go to **Environments**, and then select **New**.\n\n3. Select **Trial (subscription-based)** type\n\n4. Configure environment settings:\n   - Name\n   - Region\n   - Language\n   - Currency\n   - Enable Dynamics 365 apps\n```\n\n----------------------------------------\n\nTITLE: Exporting Admin Custom Connectors Using PowerShell\nDESCRIPTION: Administrators export all custom connectors created by a user using the Get-AdminPowerAppConnector function. It requires the user's ID and outputs a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\n$userId = \"11bb11bb-cc22-dd33-ee44-55ff55ff55ff\"\nGet-AdminPowerAppConnector -CreatedBy $userId | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Cross-Tenant Connection Report using PowerShell\nDESCRIPTION: PowerShell script to retrieve a specific cross-tenant connection report using its report ID. The script authenticates using MSAL.PS and makes a GET request to fetch the detailed report information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-cross-tenant-reporting.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module \"MSAL.PS\"\n$AuthResult = Get-MsalToken -ClientId '49676daf-ff23-4aac-adcc-55472d4e2ce0' -Scope 'https://api.powerplatform.com/.default'\n$Headers = @{Authorization = \"Bearer $($AuthResult.AccessToken)\"}\n\ntry \n{\n   # Get one cross tenant connections report for a tenant\n    $tenantListReportResponse = Invoke-RestMethod -Method Get -Uri \"https://api.powerplatform.com/governance/crossTenantConnectionReports/{$reportId}?api-version=2022-03-01-preview\" -Headers $Headers\n    $report = $tenantListReportResponse | ConvertTo-Json -Depth 2 \n    Write-Host $report\n    Write-Host \"\" \n\n} catch {\n    # Go through the exception to get the Response details.\n    Write-Host \"Response CorrelationId:\" $_.Exception.Response.Headers[\"x-ms-correlation-id\"]\n    Write-Host \"StatusCode:\" $_.Exception.Response.StatusCode.value__ \n    Write-Host \"StatusDescription:\" $_.Exception.Response.StatusDescription\n    $result = $_.Exception.Response.GetResponseStream()\n        $reader = New-Object System.IO.StreamReader($result)\n        $reader.BaseStream.Position = 0\n        $reader.DiscardBufferedData()\n        $responseBody = $reader.ReadToEnd();\n\n        Write-Host $responseBody\n}\n```\n\n----------------------------------------\n\nTITLE: Logical OR operator in Power Platform\nDESCRIPTION: This snippet demonstrates the logical OR operator ('||' or 'Or') in Power Platform. It combines two boolean expressions and returns true if at least one is true.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Price < 100 || Slider1.Value = 20\"\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Price < 100 Or Slider1.Value = 20\"\n```\n\n----------------------------------------\n\nTITLE: Adding PowerApps Account with Specific Endpoint\nDESCRIPTION: Command to authenticate with PowerApps targeting a specific endpoint like GCC.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount -Endpoint \"usgov\"\n```\n\n----------------------------------------\n\nTITLE: Converting Numbers to Boolean Values in Power Fx\nDESCRIPTION: Demonstrates how the Boolean function converts different numeric values to Boolean, where 0 becomes false and all other numbers become true.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-boolean.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nBoolean( 0 )\nBoolean( 1 )\nBoolean( -1234 )\n```\n\n----------------------------------------\n\nTITLE: Pack sources into an msapp file using Power Platform CLI (Preview)\nDESCRIPTION: This command packs sources into an msapp file using the Microsoft Power Platform CLI. This is a preview feature. It requires the path to the .msapp file and the directory containing the sources to be packed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/canvas.md#2025-04-20_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Example: Switch Statement with Multiple Matches\nDESCRIPTION: A Switch statement with multiple possible matches. It returns the result corresponding to the matched value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_10\n\nLANGUAGE: PowerFx\nCODE:\n```\nSwitch( Slider1.Value, 20, \"Result1\", 25, \"Result2\", 30, \"Result3\" )\n```\n\n----------------------------------------\n\nTITLE: Launching from Canvas App to Canvas App - Power FX\nDESCRIPTION: This Power FX snippet demonstrates how to launch another canvas app by providing the app ID and navigation parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nLaunch( \"/providers/Microsoft.PowerApps/apps/YOUR-APP-ID\", { Navigate: \"Second Screen\", Record: 34 } )\n```\n\n----------------------------------------\n\nTITLE: Push Changes to Git Branch using PowerShell\nDESCRIPTION: This PowerShell script pushes the committed changes to the specified Git branch. It checks if a `target_branch` is specified. If it is, it pushes to the `target_branch`; otherwise, it pushes to the `source_branch`. This ensures the changes are pushed to the correct branch in the Git repository.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines-github-export.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"if('${{ github.event.inputs.target_branch }}' -ne '') {\n    git push origin ${{ github.event.inputs.target_branch }}\n} else {\n    git push origin ${{ github.event.inputs.source_branch }}\n}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Policy Template via Web API\nDESCRIPTION: This snippet demonstrates the Web API operation to retrieve a Policy Template (mspcat_ssPolicyTemplate) record based on its ID. It uses the GET method on the /mspcat_sspolicytemplates endpoint, including the mspcat_sspolicytemplateid in the URL. See the linked documentation for details on the response format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\n\"GET /mspcat_sspolicytemplates(*mspcat_sspolicytemplateid*)\"\n```\n\n----------------------------------------\n\nTITLE: Power Platform Tools Project Structure\nDESCRIPTION: Shows the folder structure created when using the Power Platform Package Deployment Project template in Visual Studio. Includes project files, configuration files, and the content folder structure.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nC:.\n│   Deployment-package.csproj\n│   Deployment-package.sln\n│   GettingStarted.html\n│   PackageTemplate.cs\n│\n├───PkgFolder\n│   │   ImportConfig.xml\n│   │\n│   └───Content\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft PowerApps Administration PowerShell Module\nDESCRIPTION: Command to install the necessary PowerShell module for managing PowerApps administration, which is required for applying data policies to Dataverse for Teams environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/about-teams-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force \n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Random Numbers using RandBetween in Power Fx\nDESCRIPTION: This snippet shows how to create a collection of random numbers using the RandBetween function in a ForAll loop, triggered by a Button control, resulting in a data table displaying the generated random numbers between a specified range.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-rand.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nClearCollect(RandomNumbers, ForAll(Sequence(100), RandBetween(1, 20)))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Audit Storage Details via HTTP POST Request\nDESCRIPTION: This HTTP POST request allows the retrieval of audit storage details such as size and object type code by interacting with the GetAuditStorageDetails action in the Dynamics 365 Web API. Dependencies include authentication to the Power Platform and appropriate API permissions. Expected input is the organization URI, and it returns a JSON response containing audit storage information. Note that the OData-MaxVersion and OData-Version must be set to 4.0.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/recover-database-space-deleting-audit-logs.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST [Organization Uri]/api/data/v9.2/GetAuditStorageDetails\nAccept: application/json\nContent-Type: application/json; charset=utf-8\nOData-MaxVersion: 4.0\nOData-Version: 4.0\n```\n\n----------------------------------------\n\nTITLE: Using As Operator with Record Scope Functions in Power FX\nDESCRIPTION: Shows how to use the As operator with record scope functions like With and ForAll to clarify which record is being referenced, replacing the default ThisRecord name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_24\n\nLANGUAGE: power-fx\nCODE:\n```\nWith( { InactiveEmployees: Filter( Employees, Status = 'Status (Employees)'.Inactive ) },\n      ForAll( InactiveEmployees As Employee,\n              Patch( Employees, Employee, { Status: 'Status (Employees)'.Active } ) ) )\n```\n\n----------------------------------------\n\nTITLE: Querying User Agent in Dataverse API Calls\nDESCRIPTION: This Kusto query summarizes the count of requests by user agent, allowing analysis of which clients are making API calls to Dataverse.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-dataverse.md#2025-04-20_snippet_0\n\nLANGUAGE: kusto\nCODE:\n```\nrequests\n| summarize count() by tostring(customDimensions.userAgent)\n```\n\n----------------------------------------\n\nTITLE: Catalog Security Roles Table\nDESCRIPTION: Markdown table defining the four security roles available in the Power Platform catalog system and their associated permissions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/administer-catalog.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Role|Enables user to:|\n|---------|----------|\n|**Catalog Submitter**|Submit items to the catalog|\n|**Catalog Read-Only Member**|Discover and install items from the catalog|\n|**Catalog Approver**|Approve submissions to the catalog.<br />Catalog approvers can be users from your central IT department or line of business that your organization wants to empower to participate in the approvals process.|\n|**Catalog Administrator**|Can administer the catalog.|\n```\n\n----------------------------------------\n\nTITLE: Disabling Managed Environments with PowerShell\nDESCRIPTION: PowerShell script to disable Managed Environments by setting the protection level to Basic. Requires verification that no Managed Environment capabilities are in use before execution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-enable.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$UpdatedGovernanceConfiguration = [pscustomobject]@{\n    protectionLevel = \"Basic\"\n}\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <EnvironmentID> -UpdatedGovernanceConfiguration $UpdatedGovernanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Executing PAC Test Run with Required Parameters\nDESCRIPTION: Command to run tests using PAC CLI with mandatory environment ID, tenant ID, and test plan file parameters. This preview feature allows executing automated tests for a Power App.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/test.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npac test run --environment-id <env-id> --tenant <tenant-id> --test-plan-file <path-to-test-plan>\n```\n\n----------------------------------------\n\nTITLE: Querying Events by Operation ID in Application Insights\nDESCRIPTION: This Kusto query filters pageViews in Application Insights based on a specific operation_Id, allowing you to retrieve all related events for a particular interaction in Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/overview-integration-application-insights.md#2025-04-20_snippet_1\n\nLANGUAGE: kusto\nCODE:\n```\npageViews\n| where operation_Id == \"[insert id here]\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Single-Column Table in Power Fx\nDESCRIPTION: This code snippet shows how to define a single-column table in Power Fx using square brackets. This is equivalent to defining a table with single-value records using the Table function. It simplifies creating single-column tables without explicitly specifying a set of records. The snippet expects a list of values and returns a simple table with one column containing these values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\n[ \"Strawberry\", \"Vanilla\" ]\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Conversion Using ParseJSON with Type Parameter\nDESCRIPTION: Example demonstrating how to explicitly convert JSON to a typed Power Fx record by providing a type parameter to the ParseJSON function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_8\n\nLANGUAGE: powerapps-dot\nCODE:\n```\n>> ParseJSON( \"{\\\"a\\\":1}\", Type( {a: Number} ) )\n{a:1}\n```\n\n----------------------------------------\n\nTITLE: Table Operations with Trigonometric Functions in PowerFX\nDESCRIPTION: Examples showing how trigonometric functions work with single-column tables as input, returning tables of results.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-trig.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerFX\nCODE:\n```\nCos(ValueTable)  // Returns table with values: [0.877582..., -0.416146..., 0]\nSin(ValueTable)  // Returns table with values: [0.479425, -0.909297..., 1]\nTan(ValueTable)  // Returns table with values: [0.546302..., 2.185039..., 3060023.306952...]\n```\n\n----------------------------------------\n\nTITLE: Simulating Image Selection in Gallery with Button\nDESCRIPTION: This snippet illustrates using a button to simulate the selection of an image within a specified row of a gallery, displaying a notification upon selection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-select.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nSelect(Gallery1, 2, Image1)\n```\n\n----------------------------------------\n\nTITLE: Sorting IceCream Collection by Multiple Columns in Power Apps\nDESCRIPTION: This snippet creates a new collection 'SortByQuantity' by sorting the 'IceCream' collection first by Quantity in ascending order, then by Flavor in descending order. It uses the SortByColumns function for multi-column sorting.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_11\n\nLANGUAGE: PowerApps\nCODE:\n```\nClearCollect( SortByQuantity, SortByColumns( IceCream, \"Quantity\", SortOrder.Ascending, \"Flavor\", SortOrder.Descending ) )\n```\n\n----------------------------------------\n\nTITLE: CountRows Function Example in Power Fx\nDESCRIPTION: This example demonstrates how to use the CountRows function in Power Fx to count the total number of rows in the 'Inventory' collection.  It assumes an existing collection named 'Inventory' is available.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-table-counts.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\n\"CountRows(Inventory)\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Characters from GUID in Power Platform\nDESCRIPTION: This formula combines the Text and Left functions to extract the first four characters from a generated GUID. This is useful for scenarios where a shorter representation of the GUID is needed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nLeft(Text(GUID()), 4)\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Using FullCopy Type in Power Platform CLI\nDESCRIPTION: This command copies the entire environment from a source to a target environment. It uses the 'pac admin copy' command with the '--type FullCopy' parameter to specify a full copy operation that includes all data and components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-copy-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac admin copy `\n  --name \"Environment Name\" `\n  --source-env 00000000-0000-0000-0000-000000000000 `\n  --target-env 00000000-0000-0000-0000-000000000000 `\n  --type FullCopy\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid JSON Field Names\nDESCRIPTION: This snippet illustrates how to access fields in an Untyped object that have invalid identifiers by using single quotes around field names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nuntyped.'01'\nuntyped.'my-field'\n```\n\n----------------------------------------\n\nTITLE: Defining a Text Literal in Power FX\nDESCRIPTION: This code snippet illustrates how to define a text literal in Power FX, demonstrating how to escape double quotes by doubling them within a string. A text literal is a sequence of Unicode characters defined within double quotes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/expression-grammar.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\n\"The \"\"quoted\"\" text\" // The \"quoted\" text\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to a HyperLink in Power Fx\nDESCRIPTION: Example of extracting a URI from JSON to use for HyperLink, Image, or Media data types in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nText( ParseJSON(\"{ \\\"URI\\\": \\\"https://northwindtraders.com/logo.jpg\\\" }\").URI )\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction-less Copy Using PowerShell in Power Platform\nDESCRIPTION: This PowerShell script demonstrates how to perform a transaction-less copy between environments in Power Platform. It installs the necessary module, sets up variables for authentication, and executes the copy operation while skipping transaction data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/unified-experience/tutorial-perform-transactionless-copy.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n#Install the module\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\n\n# Set variables for your session\n$TenantId = \"YOUR_TENANT_GUID_FROM_Microsoft Entra ID\"\n$SPNId = \"YOUR_AZURE_APPLICATION_REGISTRATION_CLIENT_ID\"\n$ClientSecret = \"YOUR_AZURE_APPLICATION_CLIENT_SECRET\"\n$SourceEnvironmentID = \"YOUR_SOURCE_ENVIRONMENT_ID_HERE\"\n$TargetEnvironmentID = \"YOUR_TARGET_ENVIRONMENT_ID_HERE\"\n\nWrite-Host \"Creating a session against the Power Platform API\"\n\nAdd-PowerAppsAccount -Endpoint prod -TenantID $TenantId -ApplicationId $SPNId -ClientSecret $ClientSecret\n\n    $copyToRequest = [pscustomobject]@{\n        SourceEnvironmentId = $SourceEnvironmentID\n        TargetEnvironmentName = \"Copied from source\"\n        CopyType = \"FullCopy\"\n        SkipAuditData = true\n        ExecuteAdvancedCopyForFinanceAndOperations = true\n    }\n\nCopy-PowerAppEnvironment -EnvironmentName $TargetEnvironmentID -CopyToRequestDefinition $copyToRequest\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Power Platform Environment Creation\nDESCRIPTION: This JSON snippet shows the structure of the configuration file used for creating a Power Platform environment with specific settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-create-intro.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Contoso Marketing\",\n  \"currency\": \"EUR\",\n  \"region\": \"europe\",\n  \"type\": \"Production\",\n  \"domain\": \"ContosoMarketing\"\n}\n```\n\n----------------------------------------\n\nTITLE: Admin Custom Connector Role Deletion - PowerShell\nDESCRIPTION: This PowerShell snippet allows an admin to remove all custom connector role assignments for a specified user by their unique identifier. After adding the PowerApps account, it uses the user's PrincipalObjectId to filter and delete role assignments. This script is part of Power Apps' administrative capabilities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n\n#Retrieves all custom connector role assignments for the DSR user and deletes them\nGet-AdminPowerAppConnectorRoleAssignment -PrincipalObjectId $deleteDsrUserId | Remove-AdminPowerAppConnectorRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: Importing Solution in Power Platform Environment\nDESCRIPTION: Step-by-step procedure for importing a CoE Starter Kit solution into a Power Platform environment, including connection establishment and environment variable configuration\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/faq.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Solution -Path \"CoEStarterKit.zip\" -TargetEnvironment \"Contoso CoE\"\n```\n\n----------------------------------------\n\nTITLE: Pipeline Deploy Command Usage\nDESCRIPTION: Command for starting a pipeline deployment with required parameters for solution version control and deployment stage configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/pipeline.md#2025-04-20_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\npac pipeline deploy --currentVersion <version> --newVersion <version> --solutionName <name> --stageId <id> [--environment <env>] [--wait]\n```\n\n----------------------------------------\n\nTITLE: Creating Breadcrumb Items using Power Fx\nDESCRIPTION: This Power Fx formula creates a table of breadcrumb items, each with display names, keys, and clickability attributes. The items are necessary for rendering the Breadcrumb control in Power Apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/breadcrumb.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    {\n        ItemKey: \"1\",\n        ItemDisplayName: \"General\",\n        ItemClickable: true\n    },\n    {\n        ItemKey: \"2\",\n        ItemDisplayName: \"Document\",\n        ItemClickable: true\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading a File using Power Fx\nDESCRIPTION: This Power Fx snippet demonstrates using the Download function to retrieve a PDF file from the web. The function takes a URL as a parameter and supports different behaviors on various platforms, prompting for save location on mobile or opening a new tab on web browsers. The snippet is designed to be used within behavior formulas in Power Apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-download.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nDownload( \\\"https://go.microsoft.com/fwlink/?linkid=827480\\\" )\n```\n\n----------------------------------------\n\nTITLE: Analyzing Average Records Synced by Table in Kusto\nDESCRIPTION: This Kusto query calculates the average number of records synced per table, helping administrators optimize offline profiles and reduce data transfer.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-mobile.md#2025-04-20_snippet_1\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where name endswith_cs \"Offline.DdsClient.GetRecords\"\n| extend cd = parse_json(customDimensions)\n| extend ec = parse_json(tostring(cd.eventContext))\n| extend RecordCount = toint(ec.RecordCount)\n| extend EntityName = tostring(ec.EntityName)\n| extend syncid = tostring(ec.CurrentSyncId)\n| extend DataSyncMode = tostring(cd.DataSyncMode)\n//| where DataSyncMode == \"FIRST_SYNC\" //This is used to pivot on the type of sync being executed.\n| summarize sum(RecordCount) by syncid, EntityName, DataSyncMode, user_Id\n| summarize percentile(sum_RecordCount, 50), arg_max(sum_RecordCount, user_Id), count() by EntityName, DataSyncMode\n```\n\n----------------------------------------\n\nTITLE: Implementing Proper Function in a Text Label in Power Fx\nDESCRIPTION: Sets the Text property of a label control to display the proper case version of text entered in a text input control. This step-by-step example demonstrates real-time case conversion.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-lower-upper-proper.md#2025-04-20_snippet_6\n\nLANGUAGE: Power Fx\nCODE:\n```\nProper(Source.Text)\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Element in Untyped Object in Power Fx\nDESCRIPTION: This snippet demonstrates how to access the second element of an untyped object array 'UOArray' and convert it to a number.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_6\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nValue( Index( UOArray, 2 ) )\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Billing Name Control in Power Apps\nDESCRIPTION: Example showing how to set focus to a billing name input control when a checkbox is unchecked, used in a shipping/billing address form scenario.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setfocus.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapp-dot\nCODE:\n```\nSetFocus( BillingName )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Second Component in Power FX\nDESCRIPTION: The **Second** function returns the second component from a specified Date/Time value, yielding a number from 0 to 59.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datetime-parts.md#2025-04-20_snippet_5\n\nLANGUAGE: Power FX\nCODE:\n```\nSecond( _DateTime_ )\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Settings - JSON\nDESCRIPTION: This JSON snippet is used to define environment variables and connection references necessary for deploying solutions using the ALM Accelerator. It configures the environment-specific details such as environment variables and connection IDs. Important parameters include 'EnvironmentVariables' for dynamic environment values and 'ConnectionReferences' for linking solutions to existing connections.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-data-deployment-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"EnvironmentVariables\": [\n        {\n            \"SchemaName\": \"cat_shared_sharepointonline_97456712308a4e65aae18bafcd84c81f\",\n            \"Value\": \"#{environmentvariable.cat_shared_sharepointonline_97456712308a4e65aae18bafcd84c81f}#\"\n        },\n        {\n            \"SchemaName\": \"cat_shared_sharepointonline_21f63b2d26f043fb85a5c32fc0c65924\",\n            \"Value\": \"#{environmentvariable.cat_shared_sharepointonline_21f63b2d26f043fb85a5c32fc0c65924}#\"\n        },\n        {\n            \"SchemaName\": \"cat_TextEnvironmentVariable\",\n            \"Value\": \"#{environmentvariable.cat_TextEnvironmentVariable}#\"\n        },\n        {\n            \"SchemaName\": \"cat_ConnectorBaseUrl\",\n            \"Value\": \"#{environmentvariable.cat_ConnectorBaseUrl}#\"\n        },\n        {\n            \"SchemaName\": \"cat_DecimalEnvironmentVariable\",\n            \"Value\": \"#{environmentvariable.cat_DecimalEnvironmentVariable}#\"\n        },\n        {\n            \"SchemaName\": \"cat_JsonEnvironmentVariable\",\n            \"Value\": \"#{environmentvariable.cat_JsonEnvironmentVariable}#\"\n        },\n        {\n            \"SchemaName\": \"cat_ConnectorHostUrl\",\n            \"Value\": \"#{environmentvariable.cat_ConnectorHostUrl}#\"\n        }\n    ],\n    \"ConnectionReferences\": [\n        {\n            \"LogicalName\": \"new_sharedsharepointonline_b49bb\",\n            \"ConnectionId\": \"#{connectionreference.new_sharedsharepointonline_b49bb}#\",\n            \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_sharepointonline\"\n        },\n        {\n            \"LogicalName\": \"cat_CDS_Current\",\n            \"ConnectionId\": \"#{connectionreference.cat_CDS_Current}#\",\n            \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a DLP Policy\nDESCRIPTION: This command creates a new Data Loss Prevention policy for the organization's tenant, helping to enforce data governance and compliance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_37\n\nLANGUAGE: powershell\nCODE:\n```\nNew-DlpPolicy\n```\n\n----------------------------------------\n\nTITLE: Handling OnChange Event for Tag Updates\nDESCRIPTION: This snippet contains expressions that define behavior when tags are added or removed in the Tag Picker, handling events accordingly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/picker.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( TagPicker.TagEvent = \"Add\" && CountRows(Filter(colTags,name=TagPicker.TagsDisplayName)) = 0,\n    Collect( colTags, { name:TagPicker.TagsDisplayName })\n);\n\nIf( TagPicker.TagEvent=\"Remove\",\n RemoveIf( colTags,name=Text(TagPicker.TagsDisplayName) )\n);\n```\n\n----------------------------------------\n\nTITLE: Responding to Keystroke Events with Power Fx\nDESCRIPTION: This Power Fx code demonstrates how to respond to keystroke events triggered by the `KeyboardShortcuts` control. The `OnChange` event is used to detect when a key combination is used, and the `OnKey` property holds the detected combination.  The code sets focus on different controls based on the detected key combination.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/keyboardshortcuts.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Self.OnKey = \"alt + a\",\n    SetFocus(txtTextbox1)\n);\nIf( Self.OnKey = \"alt + r\",\n    UpdateContext({ ctxResizableTextareaEvent:\"SetFocus\" & Text(Rand()) })\n);\nIf( Self.OnKey = \"alt + b\",\n    SetFocus(txtTextbox2)\n);\nIf( Self.OnKey = \"alt + k\",\n    UpdateContext({ ctxPickerEvent:\"SetFocus\" & Text(Rand()) })\n);\nIf( Self.OnKey = \"alt + d\",\n    UpdateContext({ ctxDropdownEvent:\"SetFocus\" & Text(Rand()) })\n);\nIf( Self.OnKey = \"alt + l\",\n    UpdateContext({ ctxTagListEvent:\"SetFocus\" & Text(Rand()) })\n);\nIf( Self.OnKey = \"alt + t\", \n    UpdateContext({ ctxTableEvent:\"SetFocusOnRow\" & Text(Rand()) })\n);\n\n```\n\n----------------------------------------\n\nTITLE: Example: Basic If Statement with True Condition\nDESCRIPTION: A simple If statement that evaluates if a Slider control has a value of 25 and returns \"Result1\" if true. Since the condition is true, it returns the corresponding result.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerFx\nCODE:\n```\nIf( Slider1.Value = 25, \"Result1\" )\n```\n\n----------------------------------------\n\nTITLE: Filtering Environment List with PAC CLI in PowerShell\nDESCRIPTION: This command lists Power Platform environments filtered by a specific environment name. The 'pac env list' command is used with the '--filter' parameter to apply a regular expression based filter that matches environments containing 'myenv' in their name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-list-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac env list --filter myenv\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-Tenant Connection Report using PowerShell\nDESCRIPTION: PowerShell script to create a new cross-tenant connections report using the Power Platform API. The script authenticates using MSAL.PS module and makes a POST request to create the report. Only one report can be created per tenant per calendar day.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-cross-tenant-reporting.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module \"MSAL.PS\"\n$AuthResult = Get-MsalToken -ClientId '49676daf-ff23-4aac-adcc-55472d4e2ce0' -Scope 'https://api.powerplatform.com/.default'\n$Headers = @{Authorization = \"Bearer $($AuthResult.AccessToken)\"}\n\ntry \n{\n    # Create a cross tenant connections report\n    $tenantReportCreateResponse = Invoke-RestMethod -Method Post -Uri \"https://api.powerplatform.com/governance/crossTenantConnectionReports?api-version=2022-03-01-preview\" -Headers $Headers -Body \"\"\n    $reportId = $tenantReportCreateResponse.reportId\n    $reportStatus = $tenantReportCreateResponse.status\n\n    Write-Host \"Cross tenant connections report created with ID=$reportId and status=$reportStatus\" \n\n} catch {\n    # Dig into the exception to get the Response details.\n    Write-Host \"Response CorrelationId:\" $_.Exception.Response.Headers[\"x-ms-correlation-id\"]\n    Write-Host \"StatusCode:\" $_.Exception.Response.StatusCode.value__ \n    Write-Host \"StatusDescription:\" $_.Exception.Response.StatusDescription\n    $result = $_.Exception.Response.GetResponseStream()\n        $reader = New-Object System.IO.StreamReader($result)\n        $reader.BaseStream.Position = 0\n        $reader.DiscardBufferedData()\n        $responseBody = $reader.ReadToEnd();\n\n        Write-Host $responseBody\n}\n```\n\n----------------------------------------\n\nTITLE: Construct Detailed Capacity Array - PowerShell\nDESCRIPTION: This PowerShell snippet constructs a PSObject containing relevant properties from each environment's capacity metadata. It iterates through a list of environments and their capacity objects, creating a new object with properties like EnvironmentName, Description, Type, ActualConsumption, CapacityType, CapacityUnit, and UpdatedOn. It then adds the new object to a list for later use.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-create-daily-capacity-report.md#2025-04-20_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nforeach($environment in $environmentsList)\n{\n    Write-Host \"Traversing environment \" $environment.DisplayName \" capacity metadata...\"\n    #Write-Host $environment\n   \n    foreach($capacityObject in $environment.Capacity)\n    {\n        $EnvironmentCapacity = New-Object -TypeName PSObject `\n        | Add-Member -PassThru -MemberType NoteProperty -Name EnvironmentName -Value $environment.DisplayName `\n        | Add-Member -PassThru -MemberType NoteProperty -Name Description -Value $environment.Description `\n        | Add-Member -PassThru -MemberType NoteProperty -Name Type -Value $environment.EnvironmentType `\n        | Add-Member -PassThru -MemberType NoteProperty -Name ActualConsumption -Value $capacityObject.actualConsumption `\n        | Add-Member -PassThru -MemberType NoteProperty -Name CapacityType -Value $capacityObject.capacityType `\n        | Add-Member -PassThru -MemberType NoteProperty -Name CapacityUnit -Value $capacityObject.capacityUnit `\n        | Add-Member -PassThru -MemberType NoteProperty -Name UpdatedOn -Value $capacityObject.updatedOn\n        \n        $capacityDetailsList += $EnvironmentCapacity\n    }\n    \n    Write-Host \"===============================\"\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Convert date and time string with French locale in Power Fx\nDESCRIPTION: This snippet converts a date and time string from a text input control to a date/time value using the French locale (\"fr\") and displays it as a long date/time format. It demonstrates locale-specific date and time interpretation. The `DateTimeValue` function is used with the \"fr\" language code, and the result is formatted using `Text` and `DateTimeFormat.LongDateTime`.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datevalue-timevalue.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nText( DateTimeValue( Start.Text, \"fr\"), DateTimeFormat.LongDateTime )\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection References - JSON\nDESCRIPTION: This JSON snippet specifies connection references by detailing the logical names and IDs for connections after importing a solution into an environment. It's crucial for enabling flows and setting up connections based on defined variables. Key elements are the 'LogicalName', 'ConnectionId', and 'ConnectorId' which link to the respective PowerApps APIs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-data-deployment-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"ConnectionReferences\": \n[\n        {\n            \"LogicalName\": \"new_sharedsharepointonline_b49bb\",\n            \"ConnectionId\": \"#{connectionreference.new_sharedsharepointonline_b49bb}#\",\n            \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_sharepointonline\"\n        },\n        {\n            \"LogicalName\": \"cat_CDS_Current\",\n            \"ConnectionId\": \"#{connectionreference.cat_CDS_Current}#\",\n            \"ConnectorId\": \"/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps\"\n        }\n]\n```\n\n----------------------------------------\n\nTITLE: UniChar Function - Single Number Example\nDESCRIPTION: This example demonstrates how to use the UniChar function to translate a single Unicode character code into its corresponding string representation. The UniChar function takes an integer representing a Unicode code point and returns the character associated with that code point.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-char.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"UniChar( 35 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"UniChar( 233 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"UniChar( 9829 )\"\n```\n\n----------------------------------------\n\nTITLE: Download canvas app as .msapp file using Power Platform CLI\nDESCRIPTION: This command downloads a canvas app as an .msapp file using the Microsoft Power Platform CLI. It requires the name or ID of the canvas app to download. Optionally, you can specify the target Dataverse environment, the directory to extract the canvas app to, the file name, and whether to allow file overwrite.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/canvas.md#2025-04-20_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Encoding URL for Safe Transmission\nDESCRIPTION: The **EncodeUrl** function encodes a URL string by replacing non-alphanumeric characters with their percent-encoded equivalents, making it safe for transmission in web contexts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-encode-decode.md#2025-04-20_snippet_1\n\nLANGUAGE: Power FX\nCODE:\n```\nEncodeUrl(yourUrlString)\n```\n\n----------------------------------------\n\nTITLE: Using Day() with UTCToday() function in Power Fx\nDESCRIPTION: This example retrieves the current date in UTC using UTCToday(), and then extracts the day component using the Day() function. It demonstrates how to work with UTC date values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_9\n\nLANGUAGE: power-fx\nCODE:\n```\n\"Day( UTCToday() )\"\n```\n\n----------------------------------------\n\nTITLE: Dataverse Plug-ins Development\nDESCRIPTION: Custom .NET event handlers that execute in response to specific Dataverse operations, providing a powerful mechanism for consistently enforcing business logic across all data interactions\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/application-modernization.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| **Dataverse plug-ins** | A Dataverse plug-in is a custom event handler that executes in response to a specific event. Think of plug-ins like stored procedures in a database engine but written in .NET.\n```\n\n----------------------------------------\n\nTITLE: Submission Metadata JSON Example\nDESCRIPTION: This JSON example represents the structure and properties required for a catalog item submission. It includes details like the model version, operation type, source portal, business justification, publisher details, and catalog item definition, which encompasses ID, display name, description, and offer details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modelVersion\": \"1.0.0.0\",\n  \"operation\": \"CreateOrUpdate\",\n  \"sourcePortal\": 526430005,\n  \"businessJustification\": \"Power Platform custom connector for Conference API\",\n  \"publisherDetails\": {\n    \"publisherId\": \"ContosoConferencesTeam\",\n    \"publisherDisplayName\": \"Catalog Conferences Team\"\n  },\n  \"catalogItemDefinition\": {\n    \"id\": \"ContosoConferencesCustomConnector\",\n    \"displayName\": \"Contoso Conference Custom Connector\",\n    \"description\": \"Demo Custom connector to query Conference Speakers & Sessions\",\n    \"offer\": {\n      \"type\": \"Component_Collection\",\n      \"deploymentType\": \"Normal\",\n      \"engineeringName\": {\n        \"firstName\": \"Jennifer\",\n        \"lastName\": \"Wilkins\",\n        \"email\": \"jwilkins@contoso.com\",\n        \"phoneNumber\": \"555-111-1234\"\n      },\n      \"supportName\": {\n        \"firstName\": \"Aidan\",\n        \"lastName\": \"Hunt\",\n        \"email\": \"ahunt@contoso.com\",\n        \"phoneNumber\": \"555-111-1234\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Power Platform Solution Asynchronously with PowerShell\nDESCRIPTION: This PowerShell command uses the Power Platform CLI to upgrade a solution named 'SampleSolution' asynchronously. It sets a maximum wait time of 60 seconds for the asynchronous operation to complete.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-upgrade-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution upgrade --solution-name SampleSolution --async --max-async-wait-time 60\n```\n\n----------------------------------------\n\nTITLE: Accessing System Settings in Dynamics 365 Sales\nDESCRIPTION: Provides instructions for navigating to the System Settings page in both the Sales web application and the Sales Hub App.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-sales-tab.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n2. If you are using a Sales web application, go to **Settings** > **Administration** > **System Settings**, and then select the **Sales** tab.\n\n   OR\n\n   If you are using the Sales Hub App, select the Site map icon ![Site map icon](media/site-map-icon.png \"Site map icon\"), then select ellipsis ![Ellipsis to open more options](media/ellipsis-more-options.png \"Ellipsis to open more options\") , then select **App Settings**, and then select **Product Catalog Settings**.\n```\n\n----------------------------------------\n\nTITLE: Navigating to Screen with Cover Transition in Power Apps\nDESCRIPTION: Power Fx formula to navigate from Screen2 to Screen1 using a Cover transition effect.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-navigate.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nNavigate( Screen1, ScreenTransition.Cover )\n```\n\n----------------------------------------\n\nTITLE: Using ThisItem to Concatenate Employee Names\nDESCRIPTION: This snippet illustrates how to use ThisItem to concatenate the First Name and Last Name properties of the current employee in the gallery.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_12\n\nLANGUAGE: power-fx\nCODE:\n```\nThisItem.'First Name' & \" \" & ThisItem.'Last Name'\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Environment Location with PowerShell\nDESCRIPTION: This PowerShell script sets the preferred environment location for Power Platform environments. It requires PowerShell and appropriate permissions to use the Set-TenantSettings command. The key parameter is 'preferredEnvironmentLocation', which designates where new environments will be created. The input is a location string, and the output updates the tenant settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environments-overview.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$requestBody = [pscustomobject]@{\npowerPlatform = [pscustomobject]@{\nenvironments = [pscustomobject]@{\npreferredEnvironmentLocation = \"unitedstates\"\n}\n}\n}\nSet-TenantSettings -RequestBody $requestBody\n```\n\n----------------------------------------\n\nTITLE: EOMonth Function Example in Power Fx\nDESCRIPTION: This example demonstrates how to use the EOMonth function in Power Fx to add or subtract months from a given date and return the last day of the resulting month. The function returns a Date value representing the last day of the month after adding or subtracting the specified number of months.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-edate-eomonth.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"EOMonth( Date(2023,5,15);, 4 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"EOMonth( Date(2023,5,15);, -1002 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"EOMonth( Date(2023,5,15);, 0 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"EOMonth( Date(2023,5,31);, 1 )\"\n```\n\n----------------------------------------\n\nTITLE: Listing Connectors in Current Environment with Power Platform CLI\nDESCRIPTION: Lists all connectors available in the environment associated with the currently active authentication profile using the pac connector list command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-list-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac connector list\n```\n\n----------------------------------------\n\nTITLE: Color Value Definitions in PowerFx\nDESCRIPTION: Defines color values using three different notations: Color enum values, ColorValue() function with hex codes and color names, and RGBA() function with direct color component values. Each color can be referenced using any of these three methods.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerFx\nCODE:\n```\n// Hex code method\nColorValue(\"#ffb6c1\")\n\n// Color name method\nColorValue(\"LIGHTPINK\")\n\n// RGBA method\nRGBA(255, 182, 193, 1)\n```\n\nLANGUAGE: PowerFx\nCODE:\n```\n// Enum method\nColor.LightPink\n```\n\n----------------------------------------\n\nTITLE: Removing Canvas App Sharing Limits with PowerShell\nDESCRIPTION: PowerShell script that removes previously configured sharing limitations for canvas apps in a Managed Environment, allowing unrestricted sharing.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-sharing-limits.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Retrieve the environment\n$environment = Get-AdminPowerAppEnvironment -EnvironmentName <EnvironmentId>\n\n# Update the Managed Environment settings\n$governanceConfiguration = $environment.Internal.properties.governanceConfiguration\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'limitSharingMode' -Value \"noLimit\" -Force\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'maxLimitUserSharing' -Value \"-1\" -Force\n\n# Save the updated Managed Environment settings\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <EnvironmentId> -UpdatedGovernanceConfiguration $governanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Using pac admin commands for environment management\nDESCRIPTION: Examples of Power Platform CLI administrative commands such as creating/deleting environments, managing service principals, and handling environment backups. These commands provide programmatic control over Power Platform administrative tasks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\npac admin create --name \"My Environment\" --type Sandbox --currency USD --language English\n\npac admin delete --environment \"https://myenv.crm.dynamics.com\"\n\npac admin list --type Sandbox\n\npac admin create-service-principal --environment \"https://myenv.crm.dynamics.com\" --name \"My Application\"\n\npac admin list-backups --environment \"https://myenv.crm.dynamics.com\"\n\npac admin restore --source-env \"https://myenv.crm.dynamics.com\" --selected-backup \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Alerts for Failures in Dataverse API using Kusto\nDESCRIPTION: This Kusto query enables organizations to create custom alerts to monitor failures in cloud flows within Dataverse environments, helping to identify and address operational issues.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/managed-environment-activation.md#2025-04-20_snippet_5\n\nLANGUAGE: Kusto\nCODE:\n```\nlet myEnvironmentId = **'Insert your environment ID here**;\nlet myFlowId = **Insert your flow ID here** ';\nrequests\n| where timestamp > ago(**1d**)\n| where customDimensions ['resourceProvider'] == 'Cloud Flow'\n| where customDimensions ['signalCategory'] == 'Cloud flow runs'\n| where customDimensions ['environmentId'] == myEnvironmentId\n| where customDimensions ['resourceId'] == myFlowId\n| where success == false\n```\n\n----------------------------------------\n\nTITLE: Sequence Function with Start Parameter\nDESCRIPTION: This example showcases the ability of the Sequence function to accept a starting value for the sequence. By changing the start parameter, users can control where the sequence begins.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sequence.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nSequence( 4, 24 )\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Element After Table Conversion in Power Fx\nDESCRIPTION: This example shows how to access the second element of an untyped object array 'UOArray' after converting it to a table, and then convert it to a number.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_7\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nValue( Index( Table( UOArray ), 2 ).Value )\n```\n\n----------------------------------------\n\nTITLE: Stripping HTML and XML Tags\nDESCRIPTION: The **PlainText** function removes HTML and XML tags from a string, converting it into plain text, while transforming specific entities to their corresponding symbols.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-encode-decode.md#2025-04-20_snippet_2\n\nLANGUAGE: Power FX\nCODE:\n```\nPlainText(ThisItem.description)\n```\n\n----------------------------------------\n\nTITLE: Default Gallery Action Notification\nDESCRIPTION: This snippet specifies the OnSelect property for a gallery control to notify users when the gallery is selected or an item in the gallery is interacted with.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-select.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nNotify( \"Gallery Selected\" )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Approval Request Data with .NET SDK\nDESCRIPTION: Static method that retrieves selected columns from an Approval Request record using the Dataverse SDK for .NET. It requires an authenticated IOrganizationService instance and the tracking ID (GUID) of the approval request.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Retrieves an Approval Request with selected columns\n/// </summary>\n/// <param name=\"service\">The authenticated IOrganizationService instance.</param>\n/// <param name=\"trackingId\">The ID of the approval request</param>\n/// <returns>The approval request record</returns>\nstatic Entity GetApprovalRequest(IOrganizationService service, Guid trackingId)\n{\n    ColumnSet columns = new(\"createdby\",\n        \"createdon\",\n        \"modifiedby\",\n        \"modifiedon\",\n        \"mspcat_autoapproved\",\n        \"mspcat_certstartdate\",\n        \"mspcat_codereview\",\n        \"mspcat_dropcontainsmultiplepackages\",\n        \"mspcat_functionalvalidation\",\n        \"mspcat_internalreview\",\n        \"mspcat_isvduration\",\n        \"mspcat_marketingonlychange\",\n        \"mspcat_packagedeployment\",\n        \"mspcat_publisher\",\n        \"mspcat_requestname\",\n        \"mspcat_requestsource\",\n        \"mspcat_requestsaccesstotspevents\",\n        \"mspcat_requestssecurestoreaccess\",\n        \"mspcat_stagename\",\n        \"mspcat_totalduration\",\n        \"ownerid\",\n        \"statecode\",\n        \"statuscode\");\n\n    return service.Retrieve(\"mspcat_certificationrequest\", trackingId, columns);\n}\n```\n\n----------------------------------------\n\nTITLE: Example: If Statement with False Condition and DefaultResult\nDESCRIPTION: An If statement with a false condition and a DefaultResult. When the condition is false and a DefaultResult is provided, the DefaultResult is returned.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerFx\nCODE:\n```\nIf( Slider1.Value > 1000, \"Result1\", \"Result2\" )\n```\n\n----------------------------------------\n\nTITLE: Mapping Data to HorizontalBarChart\nDESCRIPTION: This snippet demonstrates how to map data to the chart properties in the Items property of the control. The example uses the Table function to define the chart data, which includes keys, titles, values, colors, and callout values. This setup is required for the chart to render the data correctly, with optional custom colors enabled.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/stackedbarchart.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nTable(\n    {\n        ItemKey: \"1\",\n        ItemTitle: \"First\",\n        ItemCallout:\"First item callout title\",\n        ItemValue: 40,\n        ItemColor: \"#00A892\"\n    },\n    {\n        ItemKey: \"2\",\n        ItemTitle: \"Second\",\n        ItemCallout:\"Second item callout title\",\n        ItemValue: 20,\n        ItemColor: \"#9A44FC\"\n    },\n    {\n        ItemKey: \"3\",\n        ItemTitle: \"Third\",\n        ItemCallout:\"Third item callout title\",\n        ItemValue: 120,\n        ItemColor: \"#3483FA\"\n    },\n    {\n        ItemKey: \"4\",\n        ItemTitle: \"Fourth\",\n        ItemCallout:\"Fourth item callout title\",\n        ItemValue: 90,\n        ItemColor: \"#EBA800\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Products Data Source in Power Apps\nDESCRIPTION: This Power Apps formula refreshes the Products data source. It's used in the OnVisible property of a screen to ensure the data is up-to-date when the screen becomes visible.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-relate-unrelate.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nRefresh( Products )\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields from a Power Fx Table Derived from JSON\nDESCRIPTION: This example shows how to access specific fields from a record in a Power Fx table created from a JSON array.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( jsonRecord, Index( orderLines, 2 ) ); // Get the second record in the table\n\nSet( line2Item, Text( jsonRecord.Value.Item ) ); // \"Widget 2\"\n```\n\n----------------------------------------\n\nTITLE: Listing environment settings with pac env list-settings\nDESCRIPTION: This command lists all settings for a Dataverse environment. It supports targeting a specific environment and filtering to show only settings containing specific criteria.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/env.md#2025-04-20_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\npac env list-settings\n```\n\nLANGUAGE: cli\nCODE:\n```\npac env list-settings --environment <url or guid> --filter \"<filter criteria>\"\n```\n\n----------------------------------------\n\nTITLE: Generating JSON from List in Power-Fx\nDESCRIPTION: This snippet demonstrates the use of the JSON function in Power-Fx to generate a JSON string from a list. The function outputs a string in the format of a list of objects where each object contains a single key-value pair. This requires no additional dependencies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_12\n\nLANGUAGE: power-fx\nCODE:\n```\nJSON( [1,2,3] )\n```\n\n----------------------------------------\n\nTITLE: Deleting User Connections (Admin Context) in Power Platform\nDESCRIPTION: PowerShell script for admins to delete all connections for a specific user using Remove-AdminPowerAppConnection cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n\n#Retrieves all connections for the DSR user and deletes them\nGet-AdminPowerAppConnection -CreatedBy $deleteDsrUserId | Remove-AdminPowerAppConnection\n```\n\n----------------------------------------\n\nTITLE: Updating DLP Policy Connector Configurations in PowerShell\nDESCRIPTION: Command to update existing connector configurations for a Data Loss Prevention policy in Power Platform. This PowerShell cmdlet allows you to modify endpoint filtering rules for an existing policy.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-endpoint-filtering.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PowerAppDlpPolicyConnectorConfigurations\n```\n\n----------------------------------------\n\nTITLE: Retrieving Catalog Data with Dataverse Web API\nDESCRIPTION: Demonstrates how to use PowerShell with Dataverse Web API to interact with catalog items. Supports cross-platform catalog operations for developers.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/overview.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Example PowerShell Web API interaction for catalog\n# Actual implementation details would be in the referenced documentation\n```\n\n----------------------------------------\n\nTITLE: Exporting Connector Role Assignments Using PowerShell\nDESCRIPTION: Exports connector role assignments using the Get-AdminPowerAppConnectorRoleAssignment function from the App creator PowerShell cmdlets, with JSON output.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount  \nGet-AdminPowerAppConnectorRoleAssignment | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Checking App Quarantine Status using PowerShell\nDESCRIPTION: PowerShell command to retrieve the current quarantine state of a specific Power App in a given environment, allowing administrators to verify an app's accessibility status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/admin-manage-apps.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AppQuarantineState -EnvironmentName <EnvironmentName> -AppName <AppName>\n```\n\n----------------------------------------\n\nTITLE: Disambiguation Operator Pattern for Table Fields\nDESCRIPTION: Pattern for accessing values from nested record scopes using the @ operator with table names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_31\n\nLANGUAGE: powerapp-formula\nCODE:\n```\nTable[@FieldName]\n```\n\n----------------------------------------\n\nTITLE: Filter Power Apps by Display Name with PowerShell\nDESCRIPTION: This snippet demonstrates how to list Power Apps that match a specified display name, assisting administrators in managing apps based on user-friendly names. Ensure input values with spaces are quoted.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerApp 'DisplayName'\n```\n\n----------------------------------------\n\nTITLE: Set a Power App as Featured in PowerShell\nDESCRIPTION: This command sets a specific Power App as featured, grouping it towards the top within the Power Apps mobile player. Administrators should use the unique AppName for this operation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AdminPowerAppAsFeatured –AppName 'AppName'\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structure for DLP Update Event\nDESCRIPTION: This JSON example captures the structured format required for logging DLP policy update events. It includes fields such as policyId, policyType, and defaultConnectorClassification that describe the DLP policy. The changeSet object provides details regarding changes in property values, including connector reclassifications, and illustrates the transition from old to new states.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dlp-activity-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"policyId\": \"1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5\", \n  \"policyType\": \"ExceptEnvironments\", \n  \"defaultConnectorClassification\": \"Confidential\", \n  \"changeSet\": { \n    \"changedProperties\": [ \n      { \n        \"name\": \"ApiPolicyName\", \n        \"previousValue\": \"oldPolicyName\", \n        \"currentValue\": \"newPolicyName\" \n      }, \n      { \n        \"name\": \"DefaultConnectorClassification\", \n        \"previousValue\": \"General\", \n        \"currentValue\": \"Confidential\" \n      }, \n      { \n        \"name\": \"DlpPolicyType\", \n        \"previousValue\": \"OnlyEnvironments\", \n        \"currentValue\": \"ExceptEnvironments\" \n      } \n    ], \n    \"connectorChanges\": [ \n      { \n        \"name\": \"Azure Blob Storage\", \n        \"id\": \"/providers/Microsoft.PowerApps/apis/shared_azureblob\", \n        \"previousValue\": { \n          \"classification\": \"General\" \n        }, \n        \"currentValue\": { \n          \"classification\": \"Confidential\" \n        } \n      }, \n      { \n        \"name\": \"Bing Maps\", \n        \"id\": \"/providers/Microsoft.PowerApps/apis/shared_bingmaps\", \n        \"previousValue\": { \n          \"classification\": \"General\" \n        }, \n        \"currentValue\": { \n          \"classification\": \"Blocked\" \n        } \n      }, \n      { \n        \"name\": \"Azure Automation\", \n        \"id\": \"/providers/Microsoft.PowerApps/apis/shared_azureautomation\", \n        \"previousValue\": { \n          \"classification\": \"Confidential\" \n        }, \n        \"currentValue\": { \n          \"classification\": \"Blocked\" \n        } \n      } \n    ] \n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Setting Untyped JSON Objects in Power Apps\nDESCRIPTION: Example of parsing a simple JSON record without type information using ParseJSON, resulting in an untyped object that is stored in a variable named 'rec'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_6\n\nLANGUAGE: powerapps-dot\nCODE:\n```\n>> Set( rec, ParseJSON( \"{\\\"a\\\":1}\" ) )\nrec: <Untyped: Use Value, Text, Boolean, or other functions to establish the type>\n```\n\n----------------------------------------\n\nTITLE: Accessing Fields with Invalid Identifiers in JSON with Power Fx\nDESCRIPTION: Example of accessing JSON fields that contain invalid identifier characters using single quotes in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_12\n\nLANGUAGE: power-fx\nCODE:\n```\nText( ParseJSON( JsonString ).'0'.'child-field' )\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme Color in Power Apps Component\nDESCRIPTION: This Power Fx formula shows how to reference a specific color (themePrimary) from the `AppTheme` global variable and use it as the Fill property of a Button control. The ColorValue() function is used to cast the palette color to a Color data type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/theme.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nColorValue(AppTheme.palette.themePrimary)\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-valued Columns - Power Fx\nDESCRIPTION: This snippet provides a way to display a column with multiple values rendered as separate elements within a single cell. It includes settings for delimiter and formatting.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\n {\n        id: \"1\",\n        name: \"Contoso\",\n        tags:[\"#PowerApps\",\"#PowerPlatform\"]\n    },\n```\n\nLANGUAGE: power-fx\nCODE:\n```\n {\n        ColName: \"tags\",\n        ColDisplayName: \"Tags\",\n        ColWidth: 250,\n        ColFirstMultiValueBold :true,\n        ColMultiValueDelimiter:\" \"\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing Backups by Environment ID in Power Platform CLI (PowerShell)\nDESCRIPTION: This command lists the backups of an environment using its ID. It demonstrates how to use the 'pac admin list-backups' command with the '--environment' parameter followed by the environment's GUID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-backups-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin list-backups --environment 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Identifying Power Apps That Need Re-publishing for DLP Compliance\nDESCRIPTION: PowerShell script that identifies Power Apps published before October 1, 2020, which need to be re-published for DLP connector action rules and endpoint rules to be enforced. The script connects to Power Apps, checks the last modified time of each app, and determines if it needs to be republished based on whether it was created before the granular DLP feature implementation date.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-endpoint-filtering.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n\n$GranularDLPDate = Get-Date -Date \"2020-10-01 00:00:00Z\"\n\nForEach ($app in Get-AdminPowerApp){\n\n    $versionAsDate = [datetime]::Parse($app.LastModifiedTime)\n\n    $olderApp = $versionAsDate -lt $GranularDLPDate\n\n    $wasBackfilled = $app.Internal.properties.executionRestrictions -ne $null -and $app.Internal.properties.executionRestrictions.dataLossPreventionEvaluationResult -ne $null -and ![string]::IsNullOrEmpty($app.Internal.properties.executionRestrictions.dataLossPreventionEvaluationResult.lastAdvancedBackfillDate) \n\n    If($($olderApp -and !$wasBackfilled)){\n        Write-Host \"App must be republished to be Granular DLP compliant: \" $app.AppName \" \"  $app.Internal.properties.displayName \" \" $app.Internal.properties.owner.email\n    } \n    Else{ \n        Write-Host \"App is already Granular DLP compliant: \" $app.AppName \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring On Select Behavior\nDESCRIPTION: This Power Fx Switch formula customizes actions for each ContextMenu item when selected. Modify 'false' values with specific expressions for different ItemKeys.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/contextmenu.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nSwitch( Self.Selected.ItemKey,\n  /* Action for ItemKey 1 */\n  \"File\", false,\n  \n  /* Action for ItemKey 2 */\n  \"Delete\", false,\n\n  /* Default action */\n      false\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Extension in C#\nDESCRIPTION: This method allows for the execution of custom code when the package is initialized, validating runtime settings and processing any runtime parameters specified by the user. It checks for a specific runtime parameter 'SkipChecks' to determine if safety checks should be skipped during import.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void InitializeCustomExtension()  \n{  \n// Do nothing.  \n\n// Validate the state of the runtime settings object.  \nif (RuntimeSettings != null)  \n{  \nPackageLog.Log(string.Format(\"Runtime Settings populated.  Count = {0}\", RuntimeSettings.Count));  \nforeach (var setting in RuntimeSettings)  \n{  \nPackageLog.Log(string.Format(\"Key={0} | Value={1}\", setting.Key, setting.Value.ToString()));  \n}  \n\n// Check to see if skip checks is present.  \nif ( RuntimeSettings.ContainsKey(\"SkipChecks\") )  \n{  \nbool bSkipChecks = false;  \nif (bool.TryParse((string)RuntimeSettings[\"SkipChecks\"], out bSkipChecks))  \nOverrideDataImportSafetyChecks = bSkipChecks;  \n}  \n}  \nelse  \nPackageLog.Log(\"Runtime Settings not populated\");  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal for Power Platform Build Tools\nDESCRIPTION: This PowerShell command creates and configures a service principal to be utilized with Microsoft Power Platform Build Tools tasks. It registers an Application object and a Service Principal Name (SPN) in Microsoft Entra ID, and adds the application as an administrator to the Dataverse environment. The command requires the environment ID as a required parameter and has an optional role parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tools.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\> pac admin create-service-principal  --environment <environment id>\n```\n\n----------------------------------------\n\nTITLE: Removing Nested Tables with DropColumns in Power Apps\nDESCRIPTION: Removes the nested Cities tables from the results after aggregation, leaving only the countries and their total population sums.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-groupby.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( CityPopulationsSumOnly, DropColumns( CityPopulationsSum, Cities ) )\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Search Function in Power Apps\nDESCRIPTION: This Power Fx formula uses the 'Search' function to filter the 'Customers' collection, displaying records where the text entered in the 'SearchInput' control is found anywhere within the 'Name' field. The 'Search' function simplifies searching across one or more columns.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-startswith.md#2025-04-20_snippet_5\n\nLANGUAGE: powerfx\nCODE:\n```\nSearch( Customers, SearchInput.Text, \"Name\" )\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to a GUID in Power Fx\nDESCRIPTION: Example of converting a JSON string field containing a GUID to a GUID data type in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nGUID( ParseJSON(\"{ \\\"id\\\": \\\"123e4567-e89b-12d3-a456-426655440000\\\" }\").id )\n```\n\n----------------------------------------\n\nTITLE: Read NFC Tag and Collect Data\nDESCRIPTION: This Power Fx code reads an NFC tag using the `ReadNFC()` function. It retrieves the identifier and NDEF records, then collects the data into a collection named `tagRecords` for later use, such as displaying it in a gallery.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-readnfc.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nWith(ReadNFC(),\n        Set(id, Coalesce(Identifier, \\\"No ID\\\"));\n        ForAll(NDEFRecords, Collect(tagRecords, {ID: id, Value: Coalesce(Text, URI)})))\n```\n\n----------------------------------------\n\nTITLE: PowerShell Setup for Power Platform API Connection\nDESCRIPTION: PowerShell script to initialize variables and establish connection to Power Platform API using service principal authentication. Includes module installation and session setup.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-create-daily-capacity-report.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n#Install the module\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\n\n# Set variables for your session\n$TenantId = \"YOUR_TENANT_GUID_FROM_Microsoft Entra ID\"\n$SPNId = \"YOUR_AZURE_APPLICATION_REGISTRATION_CLIENT_ID\"\n$ClientSecret = \"YOUR_AZURE_APPLICATION_CLIENT_SECRET\"\n$capacityDetailsList = @()\n\nWrite-Host \"Creating a session against the Power Platform API\"\n\nAdd-PowerAppsAccount -Endpoint prod -TenantID $TenantId -ApplicationId $SPNId -ClientSecret $ClientSecret\n```\n\n----------------------------------------\n\nTITLE: Example ImportConfig.xml Structure for Package Deployer\nDESCRIPTION: A complete example of the ImportConfig.xml file structure showing how to configure solution imports, data imports, and other deployment settings. The file defines solution packages, data files, import maps, and configuration migration tool data files.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/importconfig-reference.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-16\"?>\n<configdatastorage \n   installsampledata=\"true\"\n   waitforsampledatatoinstall=\"true\"\n   agentdesktopzipfile=\"\"\n   agentdesktopexename=\"\"\n   crmmigdataimportfile=\"data_1033.zip\">\n   <solutions>\n      <configsolutionfile \n         solutionpackagefilename=\"SampleSolutionOne_1_0_managed.zip\"\n         overwriteunmanagedcustomizations=\"false\"\n         publishworkflowsandactivateplugins=\"true\" />\n      <configsolutionfile \n         solutionpackagefilename=\"SampleSolutionTwo_1_0_managed.zip\"\n         overwriteunmanagedcustomizations=\"false\"\n         publishworkflowsandactivateplugins=\"true\" />\n      <configsolutionfile \n         solutionpackagefilename=\"SampleSolutionThree_1_0_managed.zip\" />\n   </solutions>\n   <filestoimport>\n      <configimportfile filename=\"SampleOption.csv\"\n         filetype=\"CSV\"\n         associatedmap=\"SampleOption\"\n         importtoentity=\"sample_option\"\n         datadelimiter=\"\"\n         fielddelimiter=\"comma\"\n         enableduplicatedetection=\"true\"\n         isfirstrowheader=\"true\"\n         isrecordownerateam=\"false\"\n         owneruser=\"\"\n         waitforimporttocomplete=\"false\" />\n      <configimportfile filename=\"File.zip\"\n         filetype=\"ZIP\"\n         associatedmap=\"FileMapName\"\n         importtoentity=\"FileEntity\"\n         datadelimiter=\"\"\n         fielddelimiter=\"comma\"\n         enableduplicatedetection=\"true\"\n         isfirstrowheader=\"true\"\n         isrecordownerateam=\"false\"\n         owneruser=\"\"\n         waitforimporttocomplete=\"true\" />\n      <zipimportdetails>\n         <zipimportdetail filename=\"subfile1.csv\"\n            filetype=\"csv\"\n            importtoentity=\"account\" />\n         <zipimportdetail filename=\"subfile2.csv\"\n            filetype=\"csv\"\n            importtoentity=\"contact\" />\n      </zipimportdetails>\n   </filestoimport>\n   <filesmapstoimport>\n      <configimportmapfile filename=\"SampleOption.xml\" />\n   </filesmapstoimport>\n   <cmtdatafiles>\n      <cmtdatafile filename=\"data_1033.zip\"\n         lcid=\"1033\"\n         usermapfilename=\"UserMap.xml\" />\n      <cmtdatafile filename=\"data_1041.zip\"\n         lcid=\"1041\"\n         usermapfilename=\"\" />\n   </cmtdatafiles>\n</configdatastorage>\n```\n\n----------------------------------------\n\nTITLE: Sort Using Custom Order Table in Power Fx\nDESCRIPTION: Example showing how to sort a table using a custom order defined in a single-column table of values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nSortByColumns( IceCream, \"Flavor\", [ \"Pistachio\", \"Strawberry\" ] )\n```\n\n----------------------------------------\n\nTITLE: Character Map - First Label Text Property\nDESCRIPTION: This snippet defines the Text property for the first Label control within the inner gallery of the character map. It displays the numerical value of 'FullCode.Value', which represents the ASCII code for the character being displayed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-char.md#2025-04-20_snippet_6\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"`FullCode.Value`\"\n```\n\n----------------------------------------\n\nTITLE: Substring Extraction with Split and Alternatives in Power Fx\nDESCRIPTION: Examples showing how to extract substrings using the Split function in combination with First and Last functions, compared with the more concise Match function approach using regular expressions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-split.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nFirst( Split( Last( Split( \"Bob Jones <bob.jones@contoso.com>\", \"<\" ) ).Result, \">\" ) ).Result\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nMatch( \"Bob Jones <bob.jones@contoso.com>\", \"<(?<email>.+)>\" ).email\n```\n\n----------------------------------------\n\nTITLE: Downloading Connector to Specified Directory in PowerShell\nDESCRIPTION: This command downloads a specified connector from a specific environment to a specified directory. It uses the connector-id, environment, and outputDirectory parameters to control the download location.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-download-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npac connector download `\n  --connector-id 00000000-0000-0000-0000-000000000000 `\n  --environment 00000000-0000-0000-0000-000000000000 `\n  --outputDirectory \"contoso_Connector\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tenant Settings with PowerShell\nDESCRIPTION: These PowerShell commands retrieve and modify the tenant settings for sharing applications within the default environment. Dependencies include PowerShell module for PowerApps administration and administrative access to execute scripts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/secure-default-environment.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$settings=Get-TenantSettings \n$settings.powerPlatform.powerApps.disableShareWithEveryone=$false\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-TenantSettings $settings\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for Version Field\nDESCRIPTION: Specifies the logical name for the Version field in the Package Solutions entity. This is used to reference the field in code and configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagesolutions.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_version`\n```\n\n----------------------------------------\n\nTITLE: Listing HTTP Action Flows\nDESCRIPTION: This command lists all flows that contain HTTP actions within a specified environment, aiding in the management of flows that interact with web applications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_34\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminFlowWithHttpAction -EnvironmentName <String>\n```\n\n----------------------------------------\n\nTITLE: Counting Workflows by Type in SQL\nDESCRIPTION: SQL query to analyze workflow distribution by counting different types of workflows stored in the AsyncOperationBase table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT friendlymessage, count(*) as job_count\nFROM asyncoperationbase WITH (NOLOCK)\nWHERE operationtype = 10\nGROUP BY friendlymessage\nORDER BY job_count DESC\n```\n\n----------------------------------------\n\nTITLE: Clearing Global Variable in Power Fx\nDESCRIPTION: Shows how to reset the 'RunningTotal' global variable to zero using the Set function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Fx\nCODE:\n```\nSet( RunningTotal, 0 )\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to Two Options in Power Fx\nDESCRIPTION: Example of using Switch to map JSON boolean values to Two Options data type values in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_10\n\nLANGUAGE: power-fx\nCODE:\n```\nSwitch( Boolean( ParseJSON( \"{ \\\"available\\\": true }\" ).available ), false, Availability.No, true, Availability.Yes )\n```\n\n----------------------------------------\n\nTITLE: Using GUID in Patch Function for Database Operations\nDESCRIPTION: Example of using the GUID function to set a Status field to a specific GUID value when creating a new record in a database using the Patch function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-guid.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nPatch( Products, Default( Products ), { Status: GUID( \"F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4\" ) } )\n```\n\n----------------------------------------\n\nTITLE: Assigning User by GUID with System Administrator Role and Business Unit in Power Platform (PowerShell)\nDESCRIPTION: This command assigns a user to an environment using their GUID, grants them the 'System Administrator' role, and adds them to a specified business unit. It requires the environment GUID, user GUID, business unit GUID, and role specification.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-assign-user-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac admin assign-user `\n  --environment 00000000-0000-0000-0000-000000000000 `\n  --user 00000000-0000-0000-0000-000000000000 `\n  --business-unit` 00000000-0000-0000-0000-000000000000 `\n  --role \"System Administrator\"\n```\n\n----------------------------------------\n\nTITLE: Component Instance Definition in Power Fx YAML\nDESCRIPTION: Example of instantiating a component in Power Fx YAML using the 'As' operator to specify component type. This shows nesting of controls and combining single-line formulas with multiline formulas that contain conditional logic.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/yaml-formula-grammar.md#2025-04-20_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nGallery1 As Gallery.horizontalGallery:\n    Fill: = Color.White\n    Label1 As Label:\n        Text: =\"Hello, World\"\n        X: =20\n        Y: =40\n        Fill: |\n            =If( Lower( Left( Self.Text, 6 ) ) = \"error:\",\n                Color.Red,\n                Color.Black\n            )\n```\n\n----------------------------------------\n\nTITLE: Using Round function with different decimal places in Power Fx\nDESCRIPTION: Examples of the Round function with various decimal place parameters, including rounding to the right of the decimal separator, to the nearest integer, and to the left of the decimal separator.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-round.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nRound( 12.37, 1 )    // returns 12.4 - round to 1 decimal place\nRound( 12.37, 0 )    // returns 12   - round to nearest integer\nRound( 12.37, -1 )   // returns 10   - round to tens place\n```\n\n----------------------------------------\n\nTITLE: Sort by Formula Example in Power Fx\nDESCRIPTION: Example showing how to sort a table using a formula that calculates a value for each record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nSort( IceCream, Quantity + OnOrder )\n```\n\n----------------------------------------\n\nTITLE: Showing Specific Columns in Power Fx\nDESCRIPTION: Uses the ShowColumns function to produce a result table with only the specified columns, \"Product\" and \"Quantity To Order\", from the previously augmented table with calculated columns.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nShowColumns(\n    AddColumns(\n        Filter( Products, 'Quantity Requested' > 'Quantity Available' ),\n        \"Quantity To Order\", 'Quantity Requested' - 'Quantity Available'\n    ),\n    \"Product\",\n    \"Quantity To Order\"\n)\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Array to Power Fx Table\nDESCRIPTION: This snippet illustrates how to convert a JSON array into a Power Fx table for easier manipulation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( orderLines, Table( jsonOrder.OrderLines ) );\n```\n\n----------------------------------------\n\nTITLE: PAC Test Run with Output Directory Configuration\nDESCRIPTION: Shows how to specify an output directory for saving test logs and results, which helps in tracking and analyzing test execution outcomes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/test.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npac test run --environment-id <env-id> --tenant <tenant-id> --test-plan-file <path-to-test-plan> --output-directory ./test-results\n```\n\n----------------------------------------\n\nTITLE: Using Proper Function with Table Column in Power Fx\nDESCRIPTION: Converts text in a table column to proper case (first letter of each word capitalized). The function works with a single-column table created from the 'Address' column of the 'People' data source.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-lower-upper-proper.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Fx\nCODE:\n```\nProper( ShowColumns( People, \"Address\" ) )\n```\n\n----------------------------------------\n\nTITLE: Listing Canvas Apps with Power Platform CLI\nDESCRIPTION: Example PowerShell command using the Power Platform CLI (pac) to list Canvas apps in the environment. The pac canvas list command displays information about Canvas apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-list-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac canvas list\n```\n\n----------------------------------------\n\nTITLE: Checking Power Platform CLI Installation on Windows - PowerShell\nDESCRIPTION: This PowerShell snippet helps users check if the Power Platform CLI is installed on their Windows system by executing a specific command in the terminal.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command pac | Format-List\n```\n\n----------------------------------------\n\nTITLE: Resetting an Environment in Power Platform Tenant using PowerShell\nDESCRIPTION: This command resets a specific environment in the Power Platform tenant. It requires the environment GUID as a parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-reset-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin reset --environment 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Building Package using Power Platform CLI\nDESCRIPTION: This snippet demonstrates the command used to build a package with the Power Platform CLI. The command utilizes the dotnet CLI to publish the project, creating a deployment package in the specified path.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n> dotnet publish\n\nDeploymentPackage -> C:\\Users\\peter\\Downloads\\DeploymentPackage\\bin\\Debug\\DeploymentPackage.1.0.0.pdpkg.zip\n```\n\n----------------------------------------\n\nTITLE: Installing Required PowerShell Modules and Creating Power App Management App\nDESCRIPTION: This snippet demonstrates how to install the necessary PowerShell modules for managing Power Apps and create a new Power App Management app registration. Required permissions should be checked before execution, and this command needs to be run only once after the app registration is created.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-admin-tasks.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\nInstall-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber\nNew-PowerAppManagementApp -ApplicationId <the Application (client) ID you copied when you created the app registration>\n```\n\n----------------------------------------\n\nTITLE: Packing Power Platform Solution\nDESCRIPTION: YAML configuration for packing a solution from source control into a deployable solution.zip file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.pack-solution.PowerPlatformPackSolution@2\n  displayName: 'Power Platform Pack Solution '\n  inputs:\n    SolutionSourceFolder: 'C:\\Public'\n    SolutionOutputFile: 'Contoso_sample_1_0_0_1_managed.zip'\n    SolutionType: Managed\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Function in Power Apps Button\nDESCRIPTION: This snippet shows how to add the Print function to a button's OnSelect property in Power Apps. When the button is pressed, it will open the default print browser dialog.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-print.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nPrint()\n```\n\n----------------------------------------\n\nTITLE: Parsing Microsoft Entra Token Response Schema in JSON\nDESCRIPTION: JSON schema definition used to parse the Microsoft Entra token response into a typed object within Azure Logic Apps. Defines the structure for access token, expiration times, and token type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-create-daily-capacity-report.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\"\n        },\n        \"expires_in\": {\n            \"type\": \"integer\"\n        },\n        \"ext_expires_in\": {\n            \"type\": \"integer\"\n        },\n        \"token_type\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Counting AsyncOperation File Storage Entries in SQL\nDESCRIPTION: SQL query to count the number of AsyncOperationBase records using file storage through the datablobid field.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT count(*)\nFROM asyncoperationbase WITH (NOLOCK)\nWHERE datablobid IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Masking Social Security Numbers\nDESCRIPTION: A regular expression pattern that identifies the first five digits of a social security number for masking. This pattern detects SSN formats like 123-45-6789.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-manage-masking-rules.md#2025-04-20_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\\d(?=\\d{2}-\\d{2}-\\d{4}|\\d-\\d{2}-\\d{4}|-\\d{2}-\\d{4}|\\d-\\d{4}|-\\d{4})\n```\n\n----------------------------------------\n\nTITLE: Listing Solutions with Power Platform CLI\nDESCRIPTION: Command to display a list of all available solutions in the current Power Platform environment using the pac CLI tool. This command returns metadata about each solution including name, version, and publisher.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-list-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution list\n```\n\n----------------------------------------\n\nTITLE: Backup Environment - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: Details the command used to manually backup the Dataverse environment. The label for the backup is a required parameter to help identify the backup later.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## pac admin backup\n\nTakes a manual backup of your environment.\n\n### Required Parameters for admin backup\n\n#### `--label` `-l`\n\nSets the backup label as provided.\n```\n\n----------------------------------------\n\nTITLE: Using the Places Parameter with Dec2Hex in Power Fx\nDESCRIPTION: Examples demonstrating how to use the Places parameter with Dec2Hex to specify the minimum number of characters in the output. This parameter adds leading zeros to positive numbers but is ignored for negative numbers.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-hexdec.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 45780 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 45780, 4 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 45780, 5 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 45780, 6 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 45780, 3 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 45780, 11 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( -45780 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( -45780, 4 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( -45780, 6 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( -45780, 10 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( -45780, 11 )\n```\n\n----------------------------------------\n\nTITLE: Conditional Display of Contact Names in a Gallery - Power FX\nDESCRIPTION: This formula is used within a gallery to check the type of a lookup field and access the corresponding account or contact name properly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( IsType( ThisItem.'Company Name', Accounts ),\n    AsType( ThisItem.'Company Name', Accounts ).'Account Name',\n    AsType( ThisItem.'Company Name', Contacts ).'Full Name'\n)\n```\n\n----------------------------------------\n\nTITLE: Single-line Formula Examples in Power Fx YAML\nDESCRIPTION: Examples of single-line Power Fx formulas in YAML format. This shows different data types including text, numbers, boolean values, and time expressions. Each formula begins with a leading equal sign.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/yaml-formula-grammar.md#2025-04-20_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nText1: =\"Hello, World\"\nText2: =\"Hello \" & \", \" & \"World\"\nNumber1: =34\nBoolean1: =true\nTime1: =1:34\n```\n\n----------------------------------------\n\nTITLE: Retrieving Office 365 Tenant ID and SharePoint SPN\nDESCRIPTION: Gets the Office 365 object (tenant) ID and SharePoint Server Service Principal Name (SPN). These values are necessary for configuring the proper integration between systems.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$SPOAppId = \"00000003-0000-0ff1-ce00-000000000000\"  \n$SPOContextId = (Get-MsolCompanyInformation).ObjectID  \n$SharePoint = Get-MsolServicePrincipal -AppPrincipalId $SPOAppId  \n$ServicePrincipalName = $SharePoint.ServicePrincipalNames  \n```\n\n----------------------------------------\n\nTITLE: DLP Policy URL Pattern Management Commands in PowerShell\nDESCRIPTION: PowerShell commands for managing custom connector URL patterns in DLP policies, including retrieving, creating, and removing patterns.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dlp-custom-connector-parity.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PowerAppPolicyUrlPatterns -TenantId -PolicyName\nNew-PowerAppPolicyUrlPatterns -TenantId -PolicyName -NewUrlPatterns\nRemove-PowerAppPolicyUrlPatterns -TenantId -PolicyName\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Connectors Using PowerShell\nDESCRIPTION: Users export all custom connectors created by them using the Get-AdminPowerAppConnector function from the App creator PowerShell cmdlets. Outputs to a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount  \nGet-AdminPowerAppConnector | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Using Power FX to Load Weather Data\nDESCRIPTION: This snippet demonstrates how to use Power FX to load weather data from a custom connector in a canvas app. The data is collected into a local collection named 'weatherCollection'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/visual-studio-create-canvas-app.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\nClearCollect(weatherCollection, WeatherSample_Connector.GetWeatherForecast())\n```\n\n----------------------------------------\n\nTITLE: Creating a Runnable X++ Class with Infolog Message\nDESCRIPTION: A simple X++ class demonstrating basic code structure and logging functionality in a finance and operations application development environment\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/unified-experience/finance-operations-debug.md#2025-04-20_snippet_0\n\nLANGUAGE: xpp\nCODE:\n```\ninternal final class MyRunnableClass\n{\n    public static void main(Args _args)\n    {\n        Info('Hello World from the Server Side');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using pac power-fx repl Command\nDESCRIPTION: This command launches an interactive Power Fx Read-Eval-Print Loop. It includes an optional environment parameter to specify the target Dataverse environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/power-fx.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npac power-fx repl --environment <Guid or URL>\n```\n\n----------------------------------------\n\nTITLE: Accessing Field in Array of Records After Table Conversion in Power Fx\nDESCRIPTION: This example shows how to access the 'Field' of the second record in an untyped object array of records 'UORecordArray' after converting it to a table, and then convert it to text.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_9\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nText( Index( Table( UORecordArray ), 2 ).Value.Field )\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operators in Power Fx\nDESCRIPTION: Power Fx supports standard arithmetic operators such as addition (+), subtraction (-), multiplication (*), division (/), exponentiation (^), and percentage (%).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"1 + 2\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"2 - 1\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"2 * 3\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"2 / 3\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"2 ^ 3\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"20%\"\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to a Choice in Power Fx\nDESCRIPTION: Example of using Switch to map JSON values to Choice data type values in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nSwitch( Value( ParseJSON( \"{ \\\"status\\\": 1 }\" ).status ), 0, Status.Open, 1, Status.Closed )\n```\n\n----------------------------------------\n\nTITLE: Defining Colors Using RGBA Function in PowerFx\nDESCRIPTION: This snippet shows how to define colors using the RGBA function in PowerFx. It specifies the red, green, blue, and alpha values to create a color. The alpha value ranges from 0 (fully transparent) to 1 (fully opaque).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_11\n\nLANGUAGE: PowerFx\nCODE:\n```\nRGBA( 255, 239, 213, 1 )\n```\n\n----------------------------------------\n\nTITLE: Capturing Capacity Details with JSON Schema in Power Platform\nDESCRIPTION: This JSON schema defines the structure for capturing capacity details when building environment reports in Power Platform. It specifies properties for actualConsumption, capacityType, capacityUnit, ratedConsumption, and updatedOn.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-create-daily-capacity-report.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"actualConsumption\": {\n            \"type\": \"number\"\n        },\n        \"capacityType\": {\n            \"type\": \"string\"\n        },\n        \"capacityUnit\": {\n            \"type\": \"string\"\n        },\n        \"ratedConsumption\": {\n            \"type\": \"number\"\n        },\n        \"updatedOn\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Management Application List as Service Principal\nDESCRIPTION: This HTTP GET request retrieves the management application list using a bearer token obtained through client credential authentication flow.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerplatform-api-create-service-principal.md#2025-04-20_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://api.bap.microsoft.com/providers/Microsoft.BusinessAppPlatform/adminApplications?api-version=2020-10-01\nHost: api.bap.microsoft.com\nAccept: application/json\nAuthorization: Bearer eyJ0eXAiOi...\n```\n\n----------------------------------------\n\nTITLE: Setting X-Content-Type-Options Header\nDESCRIPTION: The X-Content-Type-Options HTTP header is set to prevent MIME-sniffing vulnerabilities. By setting the value to `nosniff`, the browser is instructed to strictly interpret the Content-Type declared by the server and not try to guess it based on the file content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/security/faqs.md#2025-04-20_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\n\"X-Content-Type-Options: nosniff\"\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Using PowerShell in Power Platform\nDESCRIPTION: This PowerShell script installs the necessary module, sets up variables for authentication, and executes the environment copy operation. It uses the Copy-PowerAppEnvironment cmdlet to perform a full copy from a source Lifecycle Services environment to a target unified environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/unified-experience/tutorial-copy-lifecycle-services-environment-unified-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n#Install the module\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\n\n# Set variables for your session\n$TenantId = \"YOUR_TENANT_GUID_FROM_Microsoft Entra ID\"\n$SPNId = \"YOUR_AZURE_APPLICATION_REGISTRATION_CLIENT_ID\"\n$ClientSecret = \"YOUR_AZURE_APPLICATION_CLIENT_SECRET\"\n$SourceEnvironmentID = \"YOUR_SOURCE_ENVIRONMENT_ID_HERE\"\n$TargetEnvironmentID = \"YOUR_TARGET_ENVIRONMENT_ID_HERE\"\n\nWrite-Host \"Creating a session against the Power Platform API\"\n\nAdd-PowerAppsAccount -Endpoint prod -TenantID $TenantId -ApplicationId $SPNId -ClientSecret $ClientSecret\n\n    $copyToRequest = [pscustomobject]@{\n        SourceEnvironmentId = $SourceEnvironmentID\n        TargetEnvironmentName = \"Copied from source\"\n        CopyType = \"FullCopy\"\n        SkipAuditData: true\n    }\n\nCopy-PowerAppEnvironment -EnvironmentName $TargetEnvironmentID -CopyToRequestDefinition $copyToRequest\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication in Power Platform CLI\nDESCRIPTION: This example prompts for credentials and connects to the tenant the credentials belong to. It triggers a device code login when running in Codespaces.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-create-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac auth create\n```\n\n----------------------------------------\n\nTITLE: Identifying Solution Component Types\nDESCRIPTION: References the system componenttype global choice column to list available solution component types. Includes references to OptionSets files for retrieving component type values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/dependency-tracking-solution-components.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe complete list of available solutions component types is located in the system `componenttype` global choice column. The supported range of values for this property is available by including the file `OptionSets.cs` or `OptionSets.vb` in your project.\n```\n\n----------------------------------------\n\nTITLE: Querying Acceleration X - Power Platform - Formula\nDESCRIPTION: Returns the side-to-side acceleration of the device, critical for understanding device movement during various actions such as throwing.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n**Acceleration.X**\n```\n\n----------------------------------------\n\nTITLE: Listing Dataverse Database Templates for a Specific Region in PowerShell\nDESCRIPTION: This command lists all supported Dataverse database templates for the Europe region. It uses the --region parameter to filter the results to a specific geographic location.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-app-templates-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npac admin list-app-templates --region Europe\n```\n\n----------------------------------------\n\nTITLE: Exporting Solution in PowerShell\nDESCRIPTION: Examples of exporting a solution using the Microsoft.Xrm.Data.PowerShell module. The first command exports an unmanaged solution, while the second exports a managed solution with specific parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/powershell-api.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CrmSolution \"MySolution\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CrmSolution -conn $conn -SolutionName \"MySolution\" -Managed -SolutionFilePath \"C:\\temp\" -SolutionZipFileName \"MySolution_Managed.zip\"\n```\n\n----------------------------------------\n\nTITLE: Delete Policy Template via Web API\nDESCRIPTION: This snippet shows the Web API operation to delete a Policy Template (mspcat_ssPolicyTemplate) record using its ID. It utilizes the DELETE method on the /mspcat_sspolicytemplates endpoint, including the mspcat_sspolicytemplateid in the URL. See the linked documentation for further details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\n\"DELETE /mspcat_sspolicytemplates(*mspcat_sspolicytemplateid*)\"\n```\n\n----------------------------------------\n\nTITLE: Updating Exempt Resources for DLP Policy\nDESCRIPTION: This command updates the list of exempt resources for a DLP policy, ensuring that the exclusions are kept up to date based on organizational needs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_43\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PowerAppDlpPolicyExemptResources -TenantId -PolicyName -UpdatedExemptResources\n```\n\n----------------------------------------\n\nTITLE: Character Map - Outer Gallery Items Property (Extended ASCII)\nDESCRIPTION: This snippet modifies the Items property of the outer horizontal gallery to display extended ASCII characters. By changing the starting point of the Sequence function to 128, the character map now displays characters from the extended ASCII range (128-255).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-char.md#2025-04-20_snippet_8\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"`Sequence( 8, 128, 16 ) As HighNibble`\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Localized Values in Power Apps Combo Box\nDESCRIPTION: This snippet demonstrates how to filter values from the 'SAP List of Value' table based on the user's language for a combo box control. It applies the user's ISO language code to the filter criteria, defaulting to English if no localized values are available.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/extend-canvas-apps.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nSort(\n    Filter(\n        'SAP List of Values',\n        Status = 'Status (SAP List of Values)'.Active,\n        Domain = 'Domain (SAP List of Values)'.Country,\n        Language = varISOUserLanguageCode\n    ),\n    'Display Value'\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Boolean to String in Power Platform\nDESCRIPTION: This formula converts a Boolean value to its string representation. It takes a Boolean input and outputs 'true' or 'false' as a string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nText(true)\n```\n\n----------------------------------------\n\nTITLE: Converting Number to String in Power Platform\nDESCRIPTION: This formula uses the Text function to convert a numerical value into its string representation. The function does not provide control over formatting such as thousands separators or decimal places. For more customization, number placeholders should be employed as a second argument.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nText(1234567.89)\n```\n\n----------------------------------------\n\nTITLE: Limiting Agent Sharing with PowerShell\nDESCRIPTION: PowerShell script that restricts agent sharing by preventing users from sharing with security groups and limiting viewer access to 20 users per agent in a Managed Environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-sharing-limits.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Retrieve the environment\n$environment = Get-AdminPowerAppEnvironment -EnvironmentName <EnvironmentId>\n\n# Update the Managed Environment settings\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'bot-limitSharingMode' -Value \"ExcludeSharingToSecurityGroups\" -Force\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'bot-maxLimitUserSharing' -Value \"20\" -Force\n\n# Save the updated Managed Environment settings\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <EnvironmentId> -UpdatedGovernanceConfiguration $governanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Submit Catalog Item using PAC CLI\nDESCRIPTION: This PowerShell code demonstrates how to submit a catalog item using the `pac catalog submit` command. It uses the `--path` parameter to specify the path to the submission metadata JSON document and either the `--package-zip` or `--solution-zip` parameter to provide the package deployer package or solution zip file, respectively. It includes the `--poll-status` parameter to track submission status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac catalog submit -p \"BuildDemoSubmission.json\" -sz \"ContosoConference_1_0_0_1_managed.zip\"\nCreating package for catalog submit request...\nConnected to... TestCatalog\nConnected as user@domain\nTracking id for this submission is 0e6b119d-80f3-ed11-8849-000d3a0a2d9d\n```\n\n----------------------------------------\n\nTITLE: Formatting Current Date with Global Awareness in Power Fx\nDESCRIPTION: This example shows how to format the current date using a language-aware enumeration. It uses the Text function with DateTimeFormat.LongDate to display the date in the user's language format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/global.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nText( Now(), DateTimeFormat.LongDate )\n```\n\n----------------------------------------\n\nTITLE: Using LastN Function - Power FX\nDESCRIPTION: This snippet utilizes the LastN function to get the last two records from the IceCream table, returning a subset with the final flavors and quantities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-first-last.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nLastN( IceCream, 2 )\n```\n\n----------------------------------------\n\nTITLE: Flattening Value Tables with JSON in Power-Fx\nDESCRIPTION: This code snippet illustrates the use of the JSON function with the JSONFormat.FlattenValueTables option in Power-Fx, which produces a simpler JSON string without wrapping the numbers in objects. Suitable for lists which are simple arrays, the function flattens the structure for each item in the array.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_13\n\nLANGUAGE: power-fx\nCODE:\n```\nJSON( [1,2,3], JSONFormat.FlattenValueTables )\n```\n\n----------------------------------------\n\nTITLE: Handling Conflicts with Revert in Power Apps\nDESCRIPTION: Example of using the Revert function to resolve a conflict when the same record has been modified by another user, by setting the OnSelect property of a Reload button.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-revert.md#2025-04-20_snippet_2\n\nLANGUAGE: Power FX\nCODE:\n```\nRevert( IceCream, LookUp( IceCream, Flavor = \"Strawberry\" ) )\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with 'in' Operator on Multiple Columns in Power Apps\nDESCRIPTION: This Power Fx formula filters the 'Customers' collection, displaying records where the text entered in the 'SearchInput' control is found anywhere within either the 'Name' or 'Company' field. It uses the 'in' operator and the '||' operator to combine the conditions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-startswith.md#2025-04-20_snippet_7\n\nLANGUAGE: powerfx\nCODE:\n```\nFilter( Customers, SearchInput.Text in Name || SearchInput.Text in Company )\n```\n\n----------------------------------------\n\nTITLE: Initializing Solution Project with Power Platform CLI (dotnetcli)\nDESCRIPTION: This snippet demonstrates initializing a new solution project using the Power Platform CLI, which is used for bundling a code component into a solution zip file for import into Dataverse. It requires a unique publisher name and prefix for the environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/component-framework.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\npac solution init --publisher-name \\<enter your publisher name\\>\n--publisher-prefix \\<enter your publisher prefix\\>\n```\n\n----------------------------------------\n\nTITLE: Syntax for ISOWeekNum Function\nDESCRIPTION: Calculates the week number of a date following the ISO 8601 date standard, always using Monday as the start of the week.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-weeknum.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nISOWeekNum(DateTime)\n```\n\n----------------------------------------\n\nTITLE: Making Service Principal Requests in PowerShell\nDESCRIPTION: Script to authenticate as a service principal and query environment list. Requires application ID, secret, and tenant ID from the Microsoft Entra application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powershell-create-service-principal.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$appId = \"CLIENT_ID_FROM_AZURE_APP\"\n$secret = \"SECRET_FROM_AZURE_APP\"\n$tenantId = \"TENANT_ID_FROM_AZURE_APP\"\n\nAdd-PowerAppsAccount -Endpoint prod -TenantID $tenantId -ApplicationId $appId -ClientSecret $secret -Verbose\nGet-AdminPowerAppEnvironment\n```\n\n----------------------------------------\n\nTITLE: Managing Application User Roles and Permissions\nDESCRIPTION: Process for editing security roles of an application user in the Power Platform admin center. Allows selecting or deselecting roles to modify user permissions across environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-application-users.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Sample role management command\n# Actual implementation is performed through admin center UI\n```\n\n----------------------------------------\n\nTITLE: CLI Command Structure for Modelbuilder Build\nDESCRIPTION: Shows the basic command structure for building a code model for Dataverse APIs and Tables using the modelbuilder command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/modelbuilder.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npac modelbuilder build --outdirectory <directory>\n```\n\n----------------------------------------\n\nTITLE: Using FirstError Properties in Button OnSelect Property in Power Apps\nDESCRIPTION: Example of accessing error details through FirstError object to display informative messages to users, showing source and location of errors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_5\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nSet( a, 1/0 )\n```\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nIfError( a, Notify( \"Internal error: originated on \" & FirstError.Source & \", surfaced on \" & FirstError.Observed ) )\n```\n\n----------------------------------------\n\nTITLE: Binding Plug-in Assembly with Managed Identity Record\nDESCRIPTION: To link a previously created managed identity with a plug-in assembly in Dataverse, perform a PATCH request. Replace placeholders with the specific organization URL and Plug-in Assembly ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/set-up-managed-identity.md#2025-04-20_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPATCH https:// <<orgURL>>/api/data/v9.0/pluginassemblies(<<PluginAssemblyId>>)\n\nSample Payload:\n{\n  \"managedidentityid@odata.bind\": \"/managedidentities(<<ManagedIdentityGuid>>)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Initial Screen with StartScreen in Power Apps\nDESCRIPTION: This snippet sets 'Screen9' as the initial screen to display when the app starts. It uses the StartScreen property, which is evaluated when the app is loaded and determines which screen is presented first.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_12\n\nLANGUAGE: power-fx\nCODE:\n```\nScreen9\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with potential division by zero\nDESCRIPTION: This formula demonstrates that errors are not observed until their value is used.  The `If` function does not report an error because the division by zero is not evaluated due to the `false` condition.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( false, 1/0, 3 )\n```\n\n----------------------------------------\n\nTITLE: DateTimeFormat Enumeration Examples\nDESCRIPTION: Code table showing various predefined date/time format examples using the sample datetime 'Tuesday, April 7, 2020 8:26:59.180 PM' in UTC-7.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| DateTimeFormat enum | Examples (using **en-US**)          |\n| LongDate           | \"Tuesday, April 7, 2020\"            |\n| LongDateTime       | \"Tuesday, April 7, 2020 8:26:59 PM\" |\n| LongDateTime24     | \"Tuesday, April 7, 2020 20:26:59\"   |\n| LongTime           | \"8:26:59 PM\"                        |\n| LongTime24         | \"20:26:59\"                          |\n| ShortDate          | \"4/7/2020\"                          |\n| ShortDateTime      | \"4/7/2020 8:26 PM\"                  |\n| ShortDateTime24    | \"4/7/2020 20:26\"                    |\n| ShortTime          | \"8:26 PM\"                           |\n| ShortTime24        | \"20:26\"                             |\n| UTC                | \"2020-04-08T03:26:59.180Z\"          |\n```\n\n----------------------------------------\n\nTITLE: Assigning Group to Environment - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: Defines the command for assigning a Microsoft Entra ID group to a Dataverse environment with a specified security role. It requires multiple parameters including group identity and role specifications, thus ensuring proper role assignments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## pac admin assign-group\n\nAssign group to target Dataverse environment with specified security role.\n\n### Required Parameters for admin assign-group\n\n#### `--group` `-g`\n\nMicrosoft Entra ID object ID of group to assign to target Dataverse environment.\n\n#### `--role` `-r`\n\nName or ID of security role to be applied to user.\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for HR Team - CoE ALM CLI\nDESCRIPTION: This snippet demonstrates creating a new branch labeled 'Onboarding' for the HR team using CoE ALM CLI. The command requires the Azure DevOps organization URL, project name, and repository name as prerequisites. It also specifies validation and test environment URLs, constructing an essential part of the CI/CD pipeline integration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/branching-and-merging.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm branch \\\n   -o https://dev.azure.com/contoso \\\n   -p HR \\\n   -r HR-Solutions \\\n   -d Onboarding \\\n   -s validation=https://contoso-hr-validation.crm.dynamics.com,test=https://contoso-hr-test.crm.dynamics.com,https://contoso-hr.crm.dynamics.com\n```\n\n----------------------------------------\n\nTITLE: Power Fx Delimited Comment Example\nDESCRIPTION: This example illustrates the use of delimited comments in Power Fx. Delimited comments begin with `/*` and end with `*/`, allowing for multi-line comments. They're useful for commenting out larger blocks of code or providing more detailed explanations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/expression-grammar.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\n/* Hello, world\n*/\n\"Hello, world\"    /* This is an example of a text literal */\n```\n\n----------------------------------------\n\nTITLE: PowerShell/Azure CLI Environment Variables for GCC\nDESCRIPTION: Environment variable setup for Graph URL in GCC, GCC High, and DoD environments. Required for non-commercial cloud deployments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-core-components.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGraph URL Environment Variable = https://graph.microsoft.com/\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Finance Team - CoE ALM CLI\nDESCRIPTION: This example shows how the Finance team can create a solution branch named 'Expense' using the CoE ALM CLI. It requires inputs such as the organization URL, finance project, and pertinent repository details along with environment URLs to support deployment pipelines specific to Finance solutions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/branching-and-merging.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm branch \\\n   -o https://dev.azure.com/contoso \\\n   -p Finance \\\n   -r Finance-Solutions \\\n   -d Expense \\\n   -s validation=https://contoso-fin-validation.crm.dynamics.com,test=https://contoso-fin-test.crm.dynamics.com,https://contoso-fin.crm.dynamics.com\n```\n\n----------------------------------------\n\nTITLE: Exporting Connection Role Assignments Using PowerShell\nDESCRIPTION: Exports all connection role assignments accessible to the user by using the Get-AdminPowerAppConnectionRoleAssignment function in PowerShell, saving output as a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\nGet-AdminPowerAppConnectionRoleAssignment | ConvertTo-Json | Out-file -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Sync State - Power Platform - Formula\nDESCRIPTION: Returns the current synchronization state of the connection, helping apps manage data consistency.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n**Connection.Sync**\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Deployment Settings\nDESCRIPTION: This snippet provides a sample JSON payload structure utilized in the ALM Accelerator pipelines. It represents the required and optional parameters to customize deployments across different environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/deployment-settings-payload.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"ApprovalType\": null,\n \"BuildName\": \"string\",\n \"BuildTemplate\": null,\n \"DeploymentEnvironmentName\": \"string\",\n \"DeploymentEnvironmentUrl\": \"string\",\n \"ServiceConnectionName\": \"string\",\n \"StepType\": null,\n \"environmentvariable.environment-variable-schema-name\": null,\n \"canvasshare.aadGroupId.canvas-app-schema-name\": null,\n \"canvasshare.roleName.canvas-app-schema-name\": null,\n \"owner.ownerEmail.flow-name.flow-id\": null,\n \"flow.sharing.flow-name.flow-id\": null,\n \"activateflow.activateas.flow-name.flow-id\": null,\n \"activateflow.order.flow-name.flow-id\": null,\n \"activateflow.activate.flow-name.flow-id\": null,\n \"connector.teamname.connector-name.connector-id\": null,\n \"groupTeam.teamid.aadGroupId\": null,\n \"businessUnit.teamid.aadGroupId\": null,\n \"webhookurl.webookname\": null,\n \"sdkstep.unsec.sdkstepid\": null,\n \"sdkstep.sec.sdkstepid\": null,\n \"TriggerSolutionUpgrade\": null}\n```\n\n----------------------------------------\n\nTITLE: Power Apps Checker API Geography Request Example\nDESCRIPTION: HTTP request example showing how to specify a geography-specific API endpoint with a version parameter for retrieving rulesets. Demonstrates using the United States First Release geography and API version 2.0.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/overview.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://unitedstatesfirstrelease.api.advisor.powerapps.com/api/ruleset?api-version=2.0\n```\n\n----------------------------------------\n\nTITLE: Querying Acceleration Y - Power Platform - Formula\nDESCRIPTION: Calculates and returns the front-to-back acceleration experienced by the device, which is important to track during motion sequences like throwing.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n**Acceleration.Y**\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameters in Power FX\nDESCRIPTION: This snippet illustrates how to retrieve parameters passed to a canvas app using the Param function. It shows how to handle parameters that are provided and those that are not.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nParam( \"Navigate\" )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nParam( \"Record\" )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nParam( \"User\" )\n```\n\n----------------------------------------\n\nTITLE: Creating Global Variables in Power Apps with Set Function\nDESCRIPTION: Creates global variables for testing Boolean logic functions in a Power Apps canvas app by setting the OnSelect property of a Button control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-logicals.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( a, false ); Set( b, true ); Set( x, 10 ); Set( y, 100 ); Set( s, \"Hello World\" )\n```\n\n----------------------------------------\n\nTITLE: PowerShell Add-on Unassignment Script\nDESCRIPTION: Script to unassign PowerAutomatePerProcess add-on from a specific Power Platform environment. Similar to the allocation script but sets the allocated value to 0. Requires tenant ID and environment ID as inputs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-allocate-capacity-addons.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n#Install the module\nInstall-Module -Name Az.Accounts\n\n# Set variables for your session\n$TenantId = \"YOUR_TENANT_GUID_FROM_Microsoft Entra ID\"\n$EnvironmentId = \"YOUR_POWER_PLATFORM_ENVIRONMENT_ID_HERE\"\n\nWrite-Host \"Creating a session against the Power Platform API\"\n\nConnect-AzAccount\n$AccessToken = Get-AzAccessToken -TenantId $TenantId -ResourceUrl \"https://api.powerplatform.com/\"\n\n$headers = @{ 'Authorization' = 'Bearer '+$AccessToken.Token }\n$headers.Add('Content-Type', 'application/json')\n\n$patchRequestBody =  \"{`\"currencyAllocations`\": `\"[{currencyType: `\"PowerAutomatePerProcess`\", allocated:0}]`\" }\"\n\nWrite-Host \"Calling patch to adjust add-on allocations...\"\n\n$patchRequestResponse = Invoke-RestMethod -Method Patch -Uri \"https://api.powerplatform.com/licensing/environments/$EnvironmentId/allocations?api-version=2022-03-01-preview\" -Headers $headers -Body $patchRequestBody\n\n$patchRequestResponse\n```\n\n----------------------------------------\n\nTITLE: Microsoft Entra Group and Team Configuration JSON\nDESCRIPTION: This JSON snippet demonstrates how to map Dataverse teams and roles to Microsoft Entra groups using the AadGroupTeamConfiguration property in the customDeploymentSettings.json file. It includes the Dataverse team name, Microsoft Entra group ID, and an array of Dataverse security role names to be associated with the team.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-data-deployment-configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AadGroupTeamConfiguration\": [\n    {\n      \"aadGroupTeamName\": \"alm-accelerator-sample-solution\",\n      \"aadSecurityGroupId\": \"#{team.aadSecurityGroupId}#\",\n      \"dataverseSecurityRoleNames\": [\n        \"ALM Accelerator Sample Role\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Power Automate Workflow Definition Function Development\nDESCRIPTION: Utilize workflow definition functions to build complex expressions for automating tasks and orchestrating activities across services in Power Automate.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Use [workflow definition functions](/power-automate/developer/custom-cds-for-apps-workflow-activities) to build complex expressions\n```\n\n----------------------------------------\n\nTITLE: Power Platform CLI Authentication Command\nDESCRIPTION: Command line instruction for authenticating with Power Platform CLI using an existing authentication profile.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\npac auth select --name \"NameOfProfile\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Relate and Unrelate Functions for One-to-Many Relationship in Power Apps\nDESCRIPTION: This code snippet demonstrates how to use the Relate and Unrelate functions in a Power Apps formula. It checks if a ComboBox selection is blank, then either unrelates the current item from the gallery or relates it to the selected item. Finally, it refreshes the Reservations data source.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-relate-unrelate.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( IsBlank( ComboBox1.Selected ),\n    Unrelate( Gallery1.Selected.Reservations, ThisItem ),\n    Relate( ComboBox1.Selected.Reservations, ThisItem )\n);\nRefresh( Reservations )\n```\n\n----------------------------------------\n\nTITLE: Example of Enforcing DLP Policies in a Specific Power Platform Environment\nDESCRIPTION: This PowerShell script demonstrates how to enforce DLP policies on connections in a specific Power Platform environment using its unique Environment ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_49\n\nLANGUAGE: powershell\nCODE:\n```\nStart-DLPEnforcementOnConnectionsInEnvironment -EnvironmentName c4a07cd6-cb14-e987-b5a2-a1dd61346963 \n```\n\n----------------------------------------\n\nTITLE: Dynamic Column Access in Untyped Object using ColumnNames and Column Functions in Power Fx\nDESCRIPTION: This example shows how to use ColumnNames and Column functions to dynamically access and manipulate columns in an untyped object parsed from JSON.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_5\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nLettersUsed = ParseJSON( \"{ \\\"d\\\": 2, \\\"p\\\": 3 }\" );\n\nConcat( ColumnNames( LettersUsed ) As Names, Names.Value, \", \" )\n// returns \"d, p\"\n\nSum( ForAll( ColumnNames( LettersUsed ) As Names, Column( LettersUsed, Names.Value ) ), Value )\n// returns 5\n```\n\n----------------------------------------\n\nTITLE: Enabling Ad-Hoc Subscriptions in Tenant\nDESCRIPTION: PowerShell command to temporarily enable AllowAdHocSubscriptions, which allows viral sign-up for Power Platform developer licenses\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/development-environments.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-MsolCompanySettings -AllowAdHocSubscriptions $true\n```\n\n----------------------------------------\n\nTITLE: Set Environment Group for Routing with PowerShell\nDESCRIPTION: This PowerShell command sets the `environmentRoutingTargetEnvironmentGroupId` to the specified GUID. This assigns newly created developer environments to a specific environment group, inheriting its rules and settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/default-environment-routing.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\ntenantSettings.powerPlatform.governance | Add-Member -MemberType NoteProperty -Name 'environmentRoutingTargetEnvironmentGroupId' -Value \"<GUID for the group that has published rules>\" -Force\n```\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Documentation\nDESCRIPTION: YAML configuration block defining metadata for the documentation page including title, description, author information, and audience targeting.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/appsource/publish-app.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Publish your app on AppSource | Microsoft Docs\"\ndescription: \"Learn about how to publish your Power Apps on Microsoft AppSource so that subscribers can find it, try it, and buy it.\"\nms.date: 04/03/2023\nms.reviewer: pehecke\nms.topic: overview\nauthor: angela21k\nms.author: angelakim\nms.subservice: developer\nsearch.audienceType: \n  - developer\n---\n```\n\n----------------------------------------\n\nTITLE: Removing Exempt Resources for DLP Policy\nDESCRIPTION: This command removes the list of exempt resources for a specified DLP policy, effectively revoking any exemptions previously granted.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_44\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-PowerAppDlpPolicyExemptResources -TenantId -PolicyName\n```\n\n----------------------------------------\n\nTITLE: Exporting User Licenses to CSV with PowerShell\nDESCRIPTION: Exports all assigned user licenses into a CSV file. This includes self-service plans and plans from Microsoft Entra ID, with a note that unseen plans won’t appear in the admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppLicenses -OutputFilePath '<licenses.csv>'\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer Collection for Search Examples in Power Apps\nDESCRIPTION: This code creates a collection named 'Customers' with sample data of names and companies to be used in search functionality examples. It's designed to be placed in a Button control's OnSelect property.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-filter-lookup.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerApps\nCODE:\n```\nClearCollect(Customers, Table({ Name: \"Fred Garcia\", Company: \"Northwind Traders\" }, { Name: \"Cole Miller\", Company: \"Contoso\" }, { Name: \"Glenda Johnson\", Company: \"Contoso\" }, { Name: \"Mike Collins\", Company: \"Adventure Works\" }, { Name: \"Colleen Jones\", Company: \"Adventure Works\" }) )\n```\n\n----------------------------------------\n\nTITLE: Import Sample Data to Power Platform Admin Tasks App\nDESCRIPTION: This snippet describes how to import sample admin tasks from an Excel file into the Admin Tasks app in Power Platform. The sample data provides a list of common administrative tasks to help users get started.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-admin-tasks-component.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Platform\nCODE:\n```\n1. Open the Admin Tasks app, which you installed as part of this component.\n\n2. From the command bar, select **...** > **Import from Excel**.\n\n3. Select **Choose File**.\n\n4. Go to the location where you saved the file **Sample-task-data.xlsx**, and then select **Open**.\n\n5. Select **Next** > **Review mapping**.\n\n6. Select the fields you want to import.\n\n   > [!NOTE]\n   > If you're new to Microsoft Power Platform administration, we recommend that you import all sample columns data.\n\n7. Select **Finish**.\n\nAn import job is created. You can track its progress by selecting **Track Progress**.\n```\n\n----------------------------------------\n\nTITLE: Displaying Form Error Messages in Power Apps\nDESCRIPTION: Sets a Label control's Text property to display form submission errors. This provides user-friendly feedback when form submissions fail, allowing users to understand and correct issues.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-form.md#2025-04-20_snippet_7\n\nLANGUAGE: PowerFx\nCODE:\n```\nEditForm.Error\n```\n\n----------------------------------------\n\nTITLE: Setting Rank Gallery Items with As Operator in Power FX\nDESCRIPTION: Sets the Items property of a vertical gallery to create rows for a chessboard, using the As operator to name each record as 'Rank'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_26\n\nLANGUAGE: power-fx\nCODE:\n```\nSequence(8) as Rank\n```\n\n----------------------------------------\n\nTITLE: Modifying Tenant Setting for App Sharing with PowerShell\nDESCRIPTION: Alters tenant setting to enable or disable the option for sharing apps with \"Everyone\". Requires PowerShell and sufficient admin privileges to adjust settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\n$settings = Get-TenantSettings \n$settings.powerPlatform.powerApps.disableShareWithEveryone = $True \nSet-TenantSettings -RequestBody $settings\n```\n\n----------------------------------------\n\nTITLE: Basic SaveData Usage in Power Fx\nDESCRIPTION: Saves a collection named LocalCache to the user's device under the name 'MyCache' for later retrieval.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-savedata-loaddata.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nSaveData( LocalCache, \"MyCache\" )\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Timeout in Power Platform Admin Center\nDESCRIPTION: Steps to configure session timeout settings for a Power Platform environment. This includes setting both the session expiration and inactivity timeout values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/user-session-management.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the Power Platform admin center, select an environment. \n\n2. Select **Settings** > **Product** > **Privacy + Security**.  \n\n3. Set **Session Expiration** and **Inactivity timeout**. These settings apply to all users.\n```\n\n----------------------------------------\n\nTITLE: Marking a Flow as Solution Aware using PowerShell\nDESCRIPTION: This PowerShell command marks an existing flow as solution-aware, associating it with a specific solution within a Power Platform environment. This is necessary for managing and migrating the flow as part of a solution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/migrating-from-default-environment.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\nSet-FlowAsSolutionAware -EnvironmentName {Environment ID} -FlowName {Flow ID} - SolutionId {Solution ID}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the As Operator with Gallery Controls in Power FX\nDESCRIPTION: Demonstrates how to use the As operator to name a record in a gallery, making formulas more readable by replacing the default ThisItem reference with a custom name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_21\n\nLANGUAGE: power-fx\nCODE:\n```\nEmployees As Employee\n```\n\n----------------------------------------\n\nTITLE: Tracking Solution Import Success with ImportJob\nDESCRIPTION: Demonstrates how to monitor solution import process, retrieve import results, and parse XML data to extract solution import details and component status\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Monitor solution import success\nbyte[] fileBytesWithMonitoring = File.ReadAllBytes(ManagedSolutionLocation);\n\nImportSolutionRequest impSolReqWithMonitoring = new ImportSolutionRequest()\n{\n   CustomizationFile = fileBytes,\n   ImportJobId = Guid.NewGuid()\n};\n\n_serviceProxy.Execute(impSolReqWithMonitoring);\n```\n\n----------------------------------------\n\nTITLE: User Information Retrieval Using Named Formulas\nDESCRIPTION: Extracts user-specific information from Dataverse using named formulas to compute values like 'UserEmail', 'UserInfo', 'UserTitle', and 'UserPhone'. It capitalizes on automatic recalculation and type inference in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nUserEmail = User().Email;\nUserInfo = LookUp( Users, 'Primary Email' = User().Email );\nUserTitle = UserInfo.Title;\nUserPhone = Switch( UserInfo.'Preferred Phone',\n                    'Preferred Phone (Users)'.'Mobile Phone', UserInfo.'Mobile Phone',\n                    UserInfo.'Main Phone' );\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Rule Retrieval via Power Apps Checker\nDESCRIPTION: These examples demonstrate using HTTP GET requests to retrieve rules from the Power Apps checker API. There are examples for retrieving rules in a specified language and including message formats. The requests require the 'Accept-Language' and other headers. The API expects a response in JSON format with various rule details. To use this API, an OAuth token is required.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/retrieve-rules.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET [Geographical URI]/api/rule?ruleset=083A2EF5-7E0E-4754-9D88-9455142DC08B&api-version=2.0\nx-ms-correlation-id: aaaa0000-bb11-2222-33cc-444444dddddd\nAccept: application/json\nContent-Type: application/json; charset=utf-8\nAccept-Language: fr\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n\n[\n    {\n        \"description\": \"Ne pas implémenter d’activités de workflow Microsoft Dynamics CRM 4.0\",\n        \"guidanceUrl\": \"https://go.microsoft.com/fwlink/?LinkID=398563&error=il-avoid-crm4-wf&client=PAChecker\",\n        \"include\": true,\n        \"code\": \"il-avoid-crm4-wf\",\n        \"summary\": \"Ne pas implémenter d’activités de workflow Microsoft Dynamics CRM 4.0\",\n        \"howToFix\": {\n            \"summary\": \"\"\n        }\n    },\n    {\n        \"description\": \"Utiliser InvalidPluginExecutionException dans des plug-ins et activités de workflow\",\n        \"guidanceUrl\": \"https://go.microsoft.com/fwlink/?LinkID=398563&error=il-use-standard-exception&client=PAChecker\",\n        \"include\": true,\n        \"code\": \"il-use-standard-exception\",\n        \"summary\": \"Utiliser InvalidPluginExecutionException dans des plug-ins et activités de workflow\",\n        \"howToFix\": {\n            \"summary\": \"\"\n        }\n    }\n]\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nGET [Geographical URI]/api/rule?api-version=2.0\nAccept: application/json\nContent-Type: application/json; charset=utf-8\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n\n[\n    {\n        \"description\": \"Retrieve specific columns for an entity via query APIs\",\n        \"guidanceUrl\": \"https://go.microsoft.com/fwlink/?LinkID=398563&error=il-specify-column&client=PAChecker\",\n        \"include\": true,\n        \"code\": \"il-specify-column\",\n        \"summary\": \"Retrieve specific columns for an entity via query APIs\",\n        \"howToFix\": {\n            \"summary\": \"\"\n        }\n    },\n    {\n        \"description\": \"Do not duplicate plug-in step registration\",\n        \"guidanceUrl\": \"https://go.microsoft.com/fwlink/?LinkID=398563&error=meta-remove-dup-reg&client=PAChecker\",\n        \"include\": true,\n        \"code\": \"meta-remove-dup-reg\",\n        \"summary\": \"Do not duplicate plug-in step registration\",\n        \"howToFix\": {\n            \"summary\": \"\"\n        }\n    }\n]\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nGET [Geographical URI]/api/rule?ruleset=083A2EF5-7E0E-4754-9D88-9455142DC08B&includeMessageFormats=true&api-version=2.0\nAccept: application/json\nContent-Type: application/json; charset=utf-8\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n\n[\n    {\n        \"description\": \"Do not implement Microsoft Dynamics CRM 4.0 workflow activities\",\n        \"guidanceUrl\": \"https://go.microsoft.com/fwlink/?LinkID=398563&error=il-avoid-crm4-wf&client=PAChecker\",\n        \"include\": true,\n        \"code\": \"il-avoid-crm4-wf\",\n        \"summary\": \"Do not implement Microsoft Dynamics CRM 4.0 workflow activities\",\n        \"howToFix\": {\n            \"summary\": \"\"\n        },\n        \"messageTemplates\": [\n            {\n                \"ruleId\": \"il-avoid-crm4-wf\",\n                \"messageTemplateId\": \"message1\",\n                \"messageTemplate\": \"Update the {0} class to derive from System.Workflow.Activities.CodeActivity, refactor Execute method implementation, and remove Microsoft.Crm.Workflow.CrmWorkflowActivityAttribute from type\"\n            },\n            {\n                \"ruleId\": \"il-avoid-crm4-wf\",\n                \"messageTemplateId\": \"message2\",\n                \"messageTemplate\": \"Change the {0} property\\'s type from {1} to {2} Argument &lt;T&gt; type\"\n            },\n            {\n                \"ruleId\": \"il-avoid-crm4-wf\",\n                \"messageTemplateId\": \"message3\",\n                \"messageTemplate\": \"Replace the Microsoft.Crm.Workflow.Crm{0}Attribute with Microsoft.Xrm.Sdk.Workflow.{0}Attribute\"\n            },\n            {\n                \"ruleId\": \"il-avoid-crm4-wf\",\n                \"messageTemplateId\": \"message4\",\n                \"messageTemplate\": \"Remove the {0} System.Workflow.ComponentModel.DependencyProperty type field\"\n            }\n        ]\n    },\n    {\n        \"description\": \"Use InvalidPluginExecutionException in plug-ins and workflow activities\",\n        \"guidanceUrl\": \"https://go.microsoft.com/fwlink/?LinkID=398563&error=il-use-standard-exception&client=PAChecker\",\n        \"include\": true,\n        \"code\": \"il-use-standard-exception\",\n        \"summary\": \"Use InvalidPluginExecutionException in plug-ins and workflow activities\",\n        \"howToFix\": {\n            \"summary\": \"\"\n        },\n        \"messageTemplates\": [\n            {\n                \"ruleId\": \"il-use-standard-exception\",\n                \"messageTemplateId\": \"message1\",\n                \"messageTemplate\": \"An unguarded throw of type {0} was detected. Refactor this code to either throw an exception of type InvalidPluginExecutionException or guard against thrown exceptions of other types.\"\n            },\n            {\n                \"ruleId\": \"il-use-standard-exception\",\n                \"messageTemplateId\": \"message2\",\n                \"messageTemplate\": \"An unguarded rethrow of type {0} was detected. Refactor this code to either throw an exception of type InvalidPluginExecutionException or guard against thrown exceptions of other types.\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Access Level Table Configuration in Markdown\nDESCRIPTION: Markdown table defining access levels for different user roles regarding mobile phone numbers in contacts\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/column-level-security-example.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|User or Team|Access|\\n|------------------|------------|\\n|Sales managers|Read-only. Can only view mobile phone numbers in [masked form](create-manage-masking-rules.md) for contacts.|\\n|Vice presidents|Full. Can create, update, and view mobile phone numbers for contacts.|\\n|Salespersons and all other users|None. Can't create, update, or view mobile phone numbers for contacts.|\n```\n\n----------------------------------------\n\nTITLE: Querying Localized Strings in Power Apps\nDESCRIPTION: This snippet demonstrates how to query and cache localized strings from a Dataverse entity based on the user's language. It filters the 'SAP Localizations' entity for active localizations matching the user's language code.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/extend-canvas-apps.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect(\n    colUserLocalizedStrings,\n    Filter(\n        'SAP Localizations',\n        Language = varISOUserLanguageCode,\n        'SAP Localizations (Views)'.'Active SAP Localizations'\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Copying Environment - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: Explains the command to copy a source environment to a destination environment, providing options for asynchronous operations and data handling during the copy process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## pac admin copy\n\nCopy Source Environment to Destination Environment.\n\n### Optional Parameters for admin copy\n\n#### `--source-env` `-se`\n\nEnvironment URL or ID of the source environment that is being copied.\n```\n\n----------------------------------------\n\nTITLE: User Synchronization Tip Block\nDESCRIPTION: Markdown tip block providing instructions for forcing immediate synchronization between Office 365 admin center and customer engagement apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-users.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!TIP]\n> To force an immediate synchronization between the [!INCLUDE[pn_office_365_admin_center](../includes/pn-office-365-admin-center.md)] and customer engagement apps, do the following:  \n> \n> - Sign out of the customer engagement app and the [!INCLUDE[pn_office_365_admin_center](../includes/pn-office-365-admin-center.md)].  \n> - Close all open browsers used for the customer engagement app and the [!INCLUDE[pn_office_365_admin_center](../includes/pn-office-365-admin-center.md)].  \n> - Sign back in to the customer engagement app and the [!INCLUDE[pn_office_365_admin_center](../includes/pn-office-365-admin-center.md)].\n```\n\n----------------------------------------\n\nTITLE: Using ForAll with Sequence to Generate Future Dates\nDESCRIPTION: This snippet shows how to use the Sequence function with ForAll to create a table of the next 10 days starting from the current date. Value from Sequence is utilized to calculate the upcoming dates.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sequence.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll( Sequence( 10 ), DateAdd( Today(), Value, Days ) )\n```\n\n----------------------------------------\n\nTITLE: Examples with IsBlank Function in Power Fx\nDESCRIPTION: Illustrates how IsBlank evaluates different expressions, such as blank functions, empty strings, and collections. It helps in determining whether values or expressions are blank in various scenarios.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-isblank-isempty.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"IsBlank( Blank() )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"IsBlank( \\\"\\\" )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"IsBlank( \\\"Hello\\\" )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"IsBlank( _AnyCollection_ )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"IsBlank( Mid( \\\"Hello\\\", 17, 2 ) )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"IsBlank( If( false, false ) )\"\n```\n\n----------------------------------------\n\nTITLE: Using Index Function - Power FX\nDESCRIPTION: This snippet shows how to use the Index function to access a record by its position in the IceCream table, specifically retrieving the third record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-first-last.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nIndex( IceCream, 3 )\n```\n\n----------------------------------------\n\nTITLE: Example JSON Configuration for ALM Setup\nDESCRIPTION: This JSON configuration is used for setting up the ALM accelerator. It includes parameters for logging, components, Azure Active Directory, DevOps organization, and other environment settings. The file must be customized to replace 'contoso' with the relevant tenant name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/overview.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"log\": [\n      \"info\"\n   ],\n   \"components\": [\n      \"all\"\n   ],\n   \"aad\": \"ALMAcceleratorServicePrincipal\",\n   \"group\": \"ALMAcceleratorForMakers\",\n   \"devOpsOrganization\": \"https://dev.azure.com/contoso\",\n   \"project\": \"alm-sandbox\",\n   \"repository\": \"alm-sandbox\",\n   \"pipelineRepository\": \"coe-alm-accelerator-templates\",\n   \"environments\": \"https://contoso-prod.crm.dynamics.com/\",\n   \"settings\": {\n      \"installEnvironments\": [\n         \"validation\",\n         \"test\",\n         \"prod\"\n      ],\n      \"validation\": \"https://contoso-validation.crm.dynamics.com/\",\n      \"test\": \"https://contoso-test.crm.dynamics.com/\",\n      \"prod\": \"https://contoso-prod.crm.dynamics.com/\",\n      \"createSecret\": \"true\",\n      \"region\": [\n         \"NAM\"\n      ]\n   },\n   \"importMethod\": \"api\",\n   \"endpoint\": \"prod\",\n   \"$schema\": \"./alm.schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Configuring Exchange Online EWS Endpoint in China\nDESCRIPTION: This PowerShell script modifies the Exchange Web Services (EWS) endpoint in an email server profile to enable server-side synchronization with Exchange Online in China. It requires the email server profile ID, organization URL, and uses the Microsoft.Xrm.Data.PowerShell module to connect to the CRM instance and update the configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connect-exchange-online.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n#Specify email server profile Id and orgUrl\nparam ( \n    [string]$emailServerProfileId = \"<profile id>\", \n    [string]$orgUrl = \"<org url>\", \n    [string]$defaultserverlocation = \"https://partner.outlook.cn/EWS/Exchange.asmx\" \n) \nInstall-Module Microsoft.Xrm.Data.PowerShell -Force\n$conn = Connect-CrmOnline -Credential $cred -ServerUrl $orgUrl \n$emailserverprofile = Get-CrmRecord -conn $conn -EntityLogicalName emailserverprofile -Id $emailServerProfileId -Fields defaultserverlocation\n$emailserverprofile.defaultserverlocation = $defaultserverlocation; \nSet-CrmRecord -conn $conn -CrmRecord $emailserverprofile  \n```\n\n----------------------------------------\n\nTITLE: Building Solution with MSBuild (dotnetcli)\nDESCRIPTION: This snippet explains how to build a solution project using MSBuild, including pulling down necessary NuGet dependencies. It covers both initial and subsequent builds and allows for specifying configurations such as release mode for a managed solution package.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/component-framework.md#2025-04-20_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\nmsbuild /t:build /restore\n```\n\n----------------------------------------\n\nTITLE: Basic Connector Update in Specified Environment using Power Platform CLI\nDESCRIPTION: Updates a custom connector in a specifically designated environment using the Power Platform CLI. This command requires both an API definition file and the GUID of the target environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-update-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac connector update `\n  --api-definition-file ./apiDefinition.json `\n  --environment 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Button Set in Dialog Control - Power Fx\nDESCRIPTION: This Power Fx snippet defines a table of buttons with their labels and types for use in the Dialog control. These buttons have properties such as 'Label' and 'ButtonType', differentiating between 'Standard' and 'Primary' styles. This table is crucial for creating actionable buttons within a dialog.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/dialog.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    {\n        Label: \"Cancel\", \n        ButtonType:'Microsoft.CoreControls.Button.ButtonType'.Standard \n    },{\n        Label: \"Ok\", \n        ButtonType:'Microsoft.CoreControls.Button.ButtonType'.Primary\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structure for DLP Create/Delete Event\nDESCRIPTION: This JSON example represents the structure for logging an event related to creating or deleting a DLP policy. The JSON object includes mandatory fields such as policyId, policyType, and defaultConnectorClassification, which indicate the associated policy's unique identifier, type, and default classification respectively. An optional environmentName field is included when the policy is limited to a single environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dlp-activity-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"policyId\": \"1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5\", \n  \"policyType\": \"SingleEnvironment\", \n  \"defaultConnectorClassification\": \"General\", \n  \"environmentName\": \"8a11a4a6-d8a4-4c47-96d7-3c2a60efe2f5\" \n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Localized Content from Copilots Using PowerShell\nDESCRIPTION: This PowerShell command extracts localized content from copilots using the 'pac copilot extract-translation' command. It specifies the environment ID, bot ID, extracts all content, sets the output directory to the current directory, and formats the output as JSON.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-extract-translation-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac copilot extract-translation `\n   --environment 2e250e7a-5607-4fea-aa4e-1aeb7bf79118 `\n   --bot 9ee3f7aa-ab79-4cf6-a726-d85c8c18cc3e `\n   --all `\n   --outdir . `\n   --format json\n```\n\n----------------------------------------\n\nTITLE: Updating Catalog using Power Platform CLI in PowerShell\nDESCRIPTION: This snippet demonstrates how to use the 'pac catalog update' command in Power Platform CLI. The command is used to update the catalog in a Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/catalog-update-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac catalog update\n```\n\n----------------------------------------\n\nTITLE: Checking Allowed Consent Plans\nDESCRIPTION: PowerShell script to verify and manage consent plans for Power Platform developer license assignment\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/development-environments.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name Microsoft.PowerApps.Administration.PowerShell\nGet-AllowedConsentPlans\n```\n\n----------------------------------------\n\nTITLE: Loading Teams Environments from Text File for Policy Exclusions\nDESCRIPTION: Example of using Get-Content to load environment IDs from a text file that should be excluded from a policy, in addition to Teams environments. This is used with the UpdatePolicyEnvironmentsForTeams function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/about-teams-environment.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Content -Path \"C:\\Path\\To\\EnvironmentIds.txt\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Connector Action Rules for a DLP Policy\nDESCRIPTION: This PowerShell example shows how to create connector action configurations for a DLP policy. It demonstrates blocking specific actions for MSN Weather while allowing others, and configuring GitHub connector to allow only one specific action while blocking all others by default.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-action-control.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$ConnectorConfigurations = @{ \n  connectorActionConfigurations = @(\n    @{  \n      connectorId = \"/providers/Microsoft.PowerApps/apis/shared_msnweather\" \n      actionRules = @(\n        @{ \n          actionId = \"TodaysForecast\" \n          behavior = \"Block\"\n        }, \n        @{ \n          actionId = \"CurrentWeather\" \n          behavior = \"Block\"\n        } \n      ) \n      defaultConnectorActionRuleBehavior = \"Allow\"\n    },\n    @{  \n      connectorId = \"/providers/Microsoft.PowerApps/apis/shared_github\" \n      actionRules = @(\n        @{ \n          actionId = \"GetRepositoryById\" \n          behavior = \"Allow\"\n        }\n      ) \n      defaultConnectorActionRuleBehavior = \"Block\"\n    } \n  ) \n}\nNew-PowerAppDlpPolicyConnectorConfigurations -TenantId $TenantId -PolicyName $PolicyName -NewDlpPolicyConnectorConfigurations $ConnectorConfigurations\n```\n\n----------------------------------------\n\nTITLE: Power Platform Set Solution Version in YAML\nDESCRIPTION: Azure DevOps task for updating the version of a Power Platform solution using a service principal or environment connection. Supports dynamic version number generation using build variables.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.set-solution-version.PowerPlatformSetSolutionVersion@2\n  displayName: 'Power Platform Set Solution Version '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n    SolutionName: 'Contoso_sample'\n    SolutionVersionNumber: 1.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Deleting a Power Platform Environment by GUID Using CLI\nDESCRIPTION: This example demonstrates how to delete a Power Platform environment by specifying its GUID. The command uses the `pac admin delete` command with the `--environment` parameter followed by the environment's GUID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-delete-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin delete --environment 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Setting Items Property for Rank Gallery in Chessboard Example\nDESCRIPTION: This snippet sets the Items property of a gallery control to iterate over a sequence of 8 ranks, which serves as rows in a chessboard representation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_21\n\nLANGUAGE: power-fx\nCODE:\n```\nSequence(8) as Rank\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Project with Power Platform CLI\nDESCRIPTION: Commands to initialize a Package Deployer project using the Power Platform CLI. The 'pac package init' command creates the initial package structure in the specified output directory.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npac package init help\npac package init --outputDirectory DeploymentPackage\n```\n\n----------------------------------------\n\nTITLE: Example: If Statement with False Condition\nDESCRIPTION: An If statement with a false condition and no DefaultResult. When the condition is false and no DefaultResult is provided, blank is returned.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerFx\nCODE:\n```\nIf( Slider1.Value > 1000, \"Result1\" )\n```\n\n----------------------------------------\n\nTITLE: Downloading Canvas App using PowerShell PAC CLI\nDESCRIPTION: Basic command structure showing how to use the PowerShell PAC CLI to download a canvas app. This is used as a template example for documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-download-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac canvas download\n```\n\n----------------------------------------\n\nTITLE: Importing Power Platform Solution with Service Principal Authentication\nDESCRIPTION: YAML configuration for importing a Power Platform solution using Service Principal authentication. This snippet demonstrates asynchronous operation with specified wait time and workflow publishing options.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-solution.PowerPlatformImportSolution@2\n  displayName: 'Power Platform Import Solution '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n    SolutionInputFile: 'C:\\Public\\Contoso_sample_1_0_0_1_managed.zip'\n    AsyncOperation: true\n    MaxAsyncWaitTime: 60\n    PublishWorkflows: false\n```\n\n----------------------------------------\n\nTITLE: Importing Solution Asynchronously in PowerShell\nDESCRIPTION: Example of importing a solution asynchronously using the Microsoft.Xrm.Data.PowerShell module. This command imports a solution, activates workflows, overwrites unmanaged customizations, and sets a maximum wait time.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/powershell-api.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CrmSolutionAsync -SolutionFilePath c:\\temp\\mysolution.zip -ActivateWorkflows -OverwriteUnManagedCustomizations -MaxWaitTimeInSeconds 600\n```\n\n----------------------------------------\n\nTITLE: Polling Installation Status with PowerShell for Microsoft Dataverse Web API\nDESCRIPTION: Implementation of Get-InstallSuccess function that polls the installation status of a catalog item by checking its state and status codes in Microsoft Dataverse. The function makes Web API calls to retrieve install history records and continues polling at specified intervals until installation completes, fails, or reaches maximum attempts. Depends on Get-Record function for actual API communication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/install-items.md#2025-04-20_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\nPolls the install success of a catalog item.\n\n.DESCRIPTION\nThe `Get-InstallSuccess` function polls the install success of a catalog item by retrieving its state \nand status codes. It continues polling at specified intervals until the installation is either \ncompleted or failed, or until the maximum number of attempts is reached.\n\n.PARAMETER id\nThe ID of the catalog item to be checked. This parameter is mandatory.\n\n.PARAMETER intervalInSeconds\nThe interval in seconds between each polling attempt. This parameter is optional and defaults to \n60 seconds.\n\n.RETURNVALUE\n[bool] Returns `$true` if the installation is completed successfully, `$false` if the installation \nis inactive or failed.\n\n.EXAMPLE\n$id = \"b54f3dff-b297-ef11-8a69-7c1e520056af\"\n$intervalInSeconds = 60\n\n$result = Get-InstallSuccess -id b54f3dff-b297-ef11-8a69-7c1e520056af\nWrite-Output \"Installation success: $result\"\n\n#>\nfunction Get-InstallSuccess {\n   param (\n       [Parameter(Mandatory)]\n       [string]$id,\n       [int]$intervalInSeconds = 60\n   )\n\n   $maxAttempts = 10\n   $attempts = 0\n\n   while ($attempts -lt $maxAttempts) {\n       $attempts++\n   \n       # Retrieve the record\n       $response = Get-Record `\n         -setName 'mspcat_installhistories' `\n         -id $id `\n         -query '?$select=statecode,statuscode'\n       \n       # Retrieve the record\n\n       # Wait until the state of the operation is inactive\n       if ($response.statecode -eq 1) {\n           if ($response.statuscode -eq 526430003) {\n               # When the statuscode value is 'Completed'\n               return $true\n           }\n           # Any other status code: 'Inactive' or 'Failed'\n           return $false\n       }\n       Start-Sleep -Seconds $intervalInSeconds\n   }\n\n   throw \"Maximum number of polling attempts exceeded.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Power Platform Authentication Profile\nDESCRIPTION: Switches to a different authentication profile using the pac auth select command with the profile's index number.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npac auth select --index 2\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Xrm.Data.PowerShell Module and Configuring Rich Text Editor\nDESCRIPTION: This PowerShell script installs the required module, connects to the organization, updates the appointment enriched editor experience, and confirms the update. It is necessary to have the Microsoft.Xrm.Data.PowerShell module installed for these commands to function properly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/enable-rich-text-experience.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n#Install the module\nInstall-Module Microsoft.Xrm.Data.PowerShell -Scope CurrentUser\n\n# Connect to the organization\nConnect-CrmOnPremDiscovery -InteractiveMode #(or Connect-CrmOnlineDiscovery -InteractiveMode)\n\n# Retrieve the organization entity\n$entities = $organizationEntity = Get-CrmRecords -conn $conn -EntityLogicalName organization -Fields appointmentricheditorexperience -TopCount 1\n$organizationEntity = $entities.CrmRecords[0]\n\nWrite-Host \"Appointment RTE existing value: \" $organizationEntity.appointmentricheditorexperience\n\n# Set the appointmentricheditorexperience field\n$organizationEntity.appointmentricheditorexperience = $true #(or $false)\n\n# Update the record\nSet-CrmRecord -conn $conn -CrmRecord $organizationEntity  \n$entities = $organizationEntity = Get-CrmRecords -conn $conn -EntityLogicalName organization -Fields appointmentricheditorexperience -TopCount 1\n$organizationEntity = $entities.CrmRecords[0]\n\nWrite-Host \"Appointment RTE updated value: \" $organizationEntity.appointmentricheditorexperience\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - System Settings Configuration Options\nDESCRIPTION: Detailed table showing synchronization settings configuration options for Microsoft Outlook and Exchange integration, including system filters and field synchronization management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-synchronization-tab.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                                                                                                              Settings                                                                                                                                              |escription|\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------||\n|                                            **Synchronize items with [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)] or [!INCLUDE[pn_Exchange](../includes/pn-exchange.md)]**                                             ||\n| Manage **system filters** for your entire organization to determine the records that are synchronized to [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)] or [!INCLUDE[pn_Exchange](../includes/pn-exchange.md)] folders. |                                                                                                                                                                                                                                                                                              This setting provides access to the **User Filters** tab in the **Synchronization Settings for [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)] or [!INCLUDE[pn_Exchange](../includes/pn-exchange.md)]** dialog box. You may want to view this tab to see the default online synchronization filter settings for users in your organization. [!INCLUDE[proc_more_information](../includes/proc-more-information.md)] [Choose the records to synchronize between customer engagement apps and Outlook or Exchange](choose-records-synchronize-dynamics-365-outlook-exchange.md)                                                                                                                                                                                                                                                                                               |\n|                             Manage the **synchronized fields** of [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)] or [!INCLUDE[pn_Exchange](../includes/pn-exchange.md)] items including appointments, contacts, and tasks for your entire organization.                             |                                                                                                                                     This setting provides access to the **Synchronization Fields** tab in the **Synchronization Settings for [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)] or [!INCLUDE[pn_Exchange](../includes/pn-exchange.md)]** dialog box. Use this tab to view how appointments, contacts, and tasks fields are mapped between customer engagement apps and [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)], and to change the synchronization direction or restrict synchronization for contacts and tasks fields. For example, if you want the contents of the contacts Notes field to be private, you can keep that field from synchronizing. [!INCLUDE[proc_more_information](../includes/proc-more-information.md)] [Control field synchronization between customer engagement apps and Outlook or Exchange](control-field-synchronization-outlook.md)                                                                                                                                     |\n|                                                                                                   **Manage your offline filters and take your information offline in Dynamics 365 for Outlook**                                                                                                    ||\n```\n\n----------------------------------------\n\nTITLE: Importing Data to Dataverse using Power Platform CLI\nDESCRIPTION: The 'pac data import' command imports data to Dataverse from a zip file or directory. It requires the --data parameter and supports optional parameters like --connection-count, --environment, and --verbose.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/data.md#2025-04-20_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\npac data import --data <zip-file-or-directory-path> [--connection-count <number>] [--environment <environment-url-or-guid>] [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Building the Application\nDESCRIPTION: This command builds the CoE CLI application from its source code using npm, preparing it for execution after all dependencies have been installed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/install.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variable in Power Fx\nDESCRIPTION: Demonstrates how to set a global variable 'RunningTotal' using the Set function. This formula adds the value from a text input to the existing running total.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\nSet( RunningTotal, RunningTotal + TextInput1.Text )\n```\n\n----------------------------------------\n\nTITLE: Dataverse Plugin Development\nDESCRIPTION: Develop custom plugins to extend or customize Dataverse data processing with specialized business logic, functioning similarly to event handlers.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Create [plug-ins](/power-apps/developer/data-platform/plug-ins), similar to event handlers, that customize or extend Dataverse data processing with custom business logic (code)\n```\n\n----------------------------------------\n\nTITLE: Displaying Governance Error Message Content\nDESCRIPTION: This command retrieves the governance error message settings for a tenant, allowing admins to review and modify the messages displayed to users during governance actions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_46\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PowerAppDlpErrorSettings -TenantId 'TenantId'\n```\n\n----------------------------------------\n\nTITLE: Submitting Catalog Approval with Power Platform Build Tools in YAML\nDESCRIPTION: This YAML snippet shows how to use the PowerPlatformSubmitCatalog task to submit a catalog approval request. It includes parameters for authentication, environment URL, submission file, solution zip file, and polling status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools-DEV.submit-catalog.PowerPlatformSubmitCatalog@2\n  displayName: 'Power Platform Submit Catalog '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    Environment: '$(BuildTools.EnvironmentUrl)'\n    CatalogSubmissionFile: submission.json\n    UsePackageSolutionZipFile: true\n    FileType: SolutionZipFile\n    SolutionZipFile: solution.zip\n    PollStatus: true\n```\n\n----------------------------------------\n\nTITLE: Number Format Placeholders Reference\nDESCRIPTION: Table defining the number formatting placeholders available in the Text function for custom number formatting.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Placeholder      | Description                                                                                                                                                                                                                                                                                             |\n| 0 (zero)         | Displays insignificant zeros if a number has fewer digits than there are zeros in the format. For example, use the format #.00 if you want to display 8.9 as 8.90.                                                                                                          |\n| #                | Follows the same rules as 0 (zero). However, Text doesn't return extra zeros when the number has fewer digits on either side of the decimal than there are # symbols in the format. For example, 8.9 is displayed if the custom format is #.## and the number to format is 8.9. |\n| . (period)       | Displays the decimal point in a number. Depends on the language of the custom format.                                                                                                                                                                 |\n| , (comma)        | Displays the grouping separator in a number, often used for thousands. Text separates groups by commas if the format contains a comma that's enclosed by number signs (#) or by zeros. Depends on the language of the custom format.          |\n```\n\n----------------------------------------\n\nTITLE: Parsing Environment Data with JSON Schema in Power Platform\nDESCRIPTION: This JSON schema defines the structure for parsing environment data in Power Platform, including properties like description, ID, location, and capacity metrics. It contains nested objects for environment properties such as addons, capacity, clientUris, and runtimeEndpoints.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-create-daily-capacity-report.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"location\": {\n            \"type\": \"string\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"properties\": {\n            \"properties\": {\n                \"addons\": {\n                    \"type\": \"array\"\n                },\n                \"azureRegion\": {\n                    \"type\": \"string\"\n                },\n                \"capacity\": {\n                    \"items\": {\n                        \"properties\": {\n                            \"actualConsumption\": {\n                                \"type\": \"number\"\n                            },\n                            \"capacityType\": {\n                                \"type\": \"string\"\n                            },\n                            \"capacityUnit\": {\n                                \"type\": \"string\"\n                            },\n                            \"ratedConsumption\": {\n                                \"type\": \"number\"\n                            },\n                            \"updatedOn\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\n                            \"capacityType\",\n                            \"actualConsumption\",\n                            \"ratedConsumption\",\n                            \"capacityUnit\",\n                            \"updatedOn\"\n                        ],\n                        \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                },\n                \"clientUris\": {\n                    \"properties\": {\n                        \"admin\": {\n                            \"type\": \"string\"\n                        },\n                        \"maker\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"type\": \"object\"\n                },\n                \"cluster\": {\n                    \"properties\": {\n                        \"number\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"type\": \"object\"\n                },\n                \"connectedGroups\": {\n                    \"type\": \"array\"\n                },\n                \"createdBy\": {\n                    \"properties\": {\n                        \"displayName\": {\n                            \"type\": \"string\"\n                        },\n                        \"id\": {\n                            \"type\": \"string\"\n                        },\n                        \"type\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"type\": \"object\"\n                },\n                \"createdTime\": {\n                    \"type\": \"string\"\n                },\n                \"creationType\": {\n                    \"type\": \"string\"\n                },\n                \"databaseType\": {\n                    \"type\": \"string\"\n                },\n                \"displayName\": {\n                    \"type\": \"string\"\n                },\n                \"environmentSku\": {\n                    \"type\": \"string\"\n                },\n                \"isDefault\": {\n                    \"type\": \"boolean\"\n                },\n                \"linkedEnvironmentMetadata\": {\n                    \"properties\": {\n                        \"backgroundOperationsState\": {\n                            \"type\": \"string\"\n                        },\n                        \"baseLanguage\": {\n                            \"type\": \"integer\"\n                        },\n                        \"createdTime\": {\n                            \"type\": \"string\"\n                        },\n                        \"domainName\": {\n                            \"type\": \"string\"\n                        },\n                        \"friendlyName\": {\n                            \"type\": \"string\"\n                        },\n                        \"instanceApiUrl\": {\n                            \"type\": \"string\"\n                        },\n                        \"instanceState\": {\n                            \"type\": \"string\"\n                        },\n                        \"instanceUrl\": {\n                            \"type\": \"string\"\n                        },\n                        \"resourceId\": {\n                            \"type\": \"string\"\n                        },\n                        \"scaleGroup\": {\n                            \"type\": \"string\"\n                        },\n                        \"uniqueName\": {\n                            \"type\": \"string\"\n                        },\n                        \"version\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"type\": \"object\"\n                },\n                \"protectionStatus\": {\n                    \"properties\": {\n                        \"keyManagedBy\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"type\": \"object\"\n                },\n                \"provisioningState\": {\n                    \"type\": \"string\"\n                },\n                \"retentionDetails\": {\n                    \"properties\": {\n                        \"backupsAvailableFromDateTime\": {\n                            \"type\": \"string\"\n                        },\n                        \"retentionPeriod\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"type\": \"object\"\n                },\n                \"retentionPeriod\": {\n                    \"type\": \"string\"\n                },\n                \"runtimeEndpoints\": {\n                    \"properties\": {\n                        \"microsoft.ApiManagement\": {\n                            \"type\": \"string\"\n                        },\n                        \"microsoft.BusinessAppPlatform\": {\n                            \"type\": \"string\"\n                        },\n                        \"microsoft.CommonDataModel\": {\n                            \"type\": \"string\"\n                        },\n                        \"microsoft.Flow\": {\n                            \"type\": \"string\"\n                        },\n                        \"microsoft.PowerApps\": {\n                            \"type\": \"string\"\n                        },\n                        \"microsoft.PowerAppsAdvisor\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"type\": \"object\"\n                },\n                \"states\": {\n                    \"properties\": {\n                        \"management\": {\n                            \"properties\": {\n                                \"id\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        },\n                        \"runtime\": {\n                            \"properties\": {\n                                \"id\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    },\n                    \"type\": \"object\"\n                },\n                \"updateCadence\": {\n                    \"properties\": {\n                        \"id\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"type\": \"object\"\n                }\n            },\n            \"type\": \"object\"\n        },\n        \"type\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Top 100 Form Load Records in Application Insights\nDESCRIPTION: This Kusto query retrieves the top 100 records from the pageViews table in Application Insights, which represents form load data for Power Platform applications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/overview-integration-application-insights.md#2025-04-20_snippet_0\n\nLANGUAGE: kusto\nCODE:\n```\npageViews\n| take 100\n```\n\n----------------------------------------\n\nTITLE: Viewing Email Server Profile Alerts in Power Platform Admin Center\nDESCRIPTION: This snippet provides instructions for viewing alerts specific to an email server profile in the Power Platform admin center. It guides users through the process of accessing server profile records and their alerts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/monitor-email-processing-errors.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the Power Platform admin center, select an environment.\n2. Select **Settings** > **Email** > **Server profiles**. \n3.  Open an email server profile record, and on the left navigation bar, under **Common**, click or tap **Alerts**.\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Automate Inventory Report Filters in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the filters available for the Power Automate Inventory report, including last opened date, environment name, type, and region.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-analytics-reports.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|Level  |Filter  |Description  |\n|---------|---------|----------|\n|App     | Last opened         | Used to filter results based on 'Last run' date         |\n|Environment     | Name        | Friendly name used to identify a given environment        |\n|     | Type        | Type of environments to include in the current view         |\n|     | Region         | Global regions hosting environments          |\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Data Collection (Power Fx)\nDESCRIPTION: This snippet shows how to create a sample data collection named `SampleContacts` in Power Apps using the `ClearCollect` function. It adds several records with 'Full Name' and 'Primary Email' fields. This is often used for testing and demonstration purposes when a real data source is not available.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-remove-removeif.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( SampleContacts,\n         { 'Full Name': \"Yvonne McKay (sample)\",      'Primary Email': \"someone_a@example.com\" },\n         { 'Full Name': \"Susanna Stubberod (sample)\", 'Primary Email': \"someone_b@example.com\" },\n         { 'Full Name': \"Nancy Anderson (sample)\",    'Primary Email': \"someone_c@example.com\" },\n         { 'Full Name': \"Maria Campbell (sample)\",    'Primary Email': \"someone_d@example.com\" },\n         { 'Full Name': \"Robert Lyon (sample)\",       'Primary Email': \"someone_e@example.com\" },\n         { 'Full Name': \"Paul Cannon (sample)\",       'Primary Email': \"someone_f@example.com\" },\n         { 'Full Name': \"Rene Valdes (sample)\",       'Primary Email': \"someone_g@example.com\" }\n   )\n```\n\n----------------------------------------\n\nTITLE: Querying System Jobs by State, Status, and Type in SQL\nDESCRIPTION: SQL query to diagnose problems related to AsyncOperationBase by retrieving jobs and grouping them by state, status, and type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT statecode, statuscode, operationtype, count(*) as job_count\nFROM asyncoperationbase WITH (NOLOCK)\nGROUP BY statecode, statuscode, operationtype\nORDER BY job_count DESC\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Creating Dataverse Application User\nDESCRIPTION: The HTTP request format for creating a Dataverse application user. The request requires an authorization bearer token and targets a specific environment ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-dataverseapplicationuser.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Bearer eyJ0eXAiOi...\nHost: api.bap.microsoft.com\nAccept: application/json\nPOST https://api.bap.microsoft.com/providers/Microsoft.BusinessAppPlatform/scopes/admin/environments/{environmentIdGuid}/addAppUser?api-version=2020-10-01\n```\n\n----------------------------------------\n\nTITLE: Displaying division result of TextInput value\nDESCRIPTION: This formula calculates the result of dividing 1 by the value entered in the TextInput1 control. If the value is not a number, it will result in an error which will be displayed to the user.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\n1/Value( TextInput1.Text )\n```\n\n----------------------------------------\n\nTITLE: Executing Power Platform CLI Admin Command in PowerShell\nDESCRIPTION: This snippet demonstrates how to run the 'pac tool admin' command using PowerShell. The Power Platform CLI (pac) is used for various administrative tasks in the Power Platform ecosystem.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-admin-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac tool admin\n```\n\n----------------------------------------\n\nTITLE: Setting Control Color Based on Value in Microsoft Power Fx\nDESCRIPTION: This snippet illustrates how to dynamically set the color property of a label control based on the value entered in a text box. If the value is less than zero, the color is set to red; otherwise, it is set to black. This demonstrates basic conditional logic in the Power Fx language.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/imperative.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Value(TextBox1.Text) >= 0, Color.Black, Color.Red )\n```\n\n----------------------------------------\n\nTITLE: Setting Governance Configuration with PAC CLI\nDESCRIPTION: Example command for setting governance configuration using the Power Platform CLI pac admin command. This is shown as a template structure for documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-set-governance-config-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin set-governance-config\n```\n\n----------------------------------------\n\nTITLE: Power Apps US Government Service URLs\nDESCRIPTION: Detailed listing of service URLs for different US Government cloud environments, including commercial and government-specific access points\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-us-government.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Commercial version URL**     | **US Government version URL**         |\n|--------------------------------|---------------------------------------|\n| <https://make.powerapps.com>    | <https://make.gov.powerapps.us> (GCC)<br/><https://make.high.powerapps.us> (GCC High)<br /> <https://make.apps.appsplatform.us> (DoD)  |\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Self-Elevation to System Administrator Role\nDESCRIPTION: Complete PowerShell script that authenticates with the Power Platform API and calls the endpoint to request elevation to the System Administrator role for a specific environment. The script requires an environment ID and handles both successful responses and error conditions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-high-privileged-admin-roles.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Set your environment ID\n$environmentId = \"<your environment id>\"\n\nImport-Module MSAL.PS\n\n# Authenticate\n$AuthResult = Get-MsalToken -ClientId '49676daf-ff23-4aac-adcc-55472d4e2ce0' -Scope 'https://api.powerplatform.com/.default' \n\n\n$Headers = @{\n   Authorization  = \"Bearer $($AuthResult.AccessToken)\"\n   'Content-Type' = \"application/json\"\n} \n\n$uri = \"https://api.powerplatform.com/usermanagement/environments/$environmentId/user/applyAdminRole?api-version=2022-03-01-preview\";\n\ntry { \n\n   $postRequestResponse = Invoke-RestMethod -Method Post -Headers $Headers -Uri $uri \n   \n} \n   \ncatch { \n   \n   # Dig into the exception to get the Response details. \n   \n   Write-Host \"Response CorrelationId:\" $_.Exception.Response.Headers[\"x-ms-correlation-id\"] \n   \n   Write-Host \"StatusCode:\" $_.Exception.Response.StatusCode.value__  \n   \n   Write-Host \"StatusDescription:\" $_.Exception.Response.StatusDescription \n   \n   $result = $_.Exception.Response.GetResponseStream() \n   \n   $reader = New-Object System.IO.StreamReader($result) \n   \n   $reader.BaseStream.Position = 0 \n   \n   $reader.DiscardBufferedData() \n   \n   $responseBody = $reader.ReadToEnd(); \n   \n   Write-Host $responseBody \n   \n} \n   \n$output = $postRequestResponse | ConvertTo-Json -Depth 2 \n   \nWrite-Host $output\n```\n\n----------------------------------------\n\nTITLE: Updating Pipeline YAML for New Solution - YAML\nDESCRIPTION: This code snippet outlines the changes needed in the YAML configuration of the pipeline to adapt it for a new solution in Azure DevOps. Key adjustments include changing repository names, solution names, and setting branch configurations for triggering builds.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-components-manually.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Update YAML pipeline configurations\n\nresources:\n  repositories:\n    - repository: templates\n      name: coe-alm-accelerator-templates\n      ref: refs/heads/your-branch-name\n\n# Update parameters for your solution\nparameters:\n  solutionName: MyNewSolution\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Parsed JSON Fields\nDESCRIPTION: The snippet demonstrates accessing fields of an Untyped object after parsing a JSON string. It shows various operations performed on the individual fields.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nLeft( untyped.ItemName, 1 ); // \"W\"\nRadians( untyped.Quantity ); // 0.80285146\nIf (untyped.AvailableForPreOrder, \"Available\", \"Not Available\" ); // \"Available\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Template to Export Solution Pre Hook\nDESCRIPTION: Demonstrates how to add a custom YAML template to the Export Solution Pre Hook in ALM Accelerator pipelines. This example assumes the template file is within the CustomTemplates directory, whose location and existence are prerequisites.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-hook-extensions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- template: CustomTemplates/output-environment-variables.yml\n```\n\n----------------------------------------\n\nTITLE: Verifying Environment Backup Retention Period with PowerShell\nDESCRIPTION: PowerShell command to verify the current backup retention period settings for a Power Platform environment by retrieving the environment details using its ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/backup-restore-environments.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppEnvironment -EnvironmentName \"Environment ID\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Input XML for AppSource Package\nDESCRIPTION: XML configuration that defines package metadata including provider details, package files, solution anchor, availability dates, supported countries, and localization settings. Essential for AppSource package deployment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/appsource/create-package-app.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<PvsPackageData>\n  <ProviderName>Microsoft</ProviderName>\n  <PackageFile>package.zip</PackageFile>\n  <SolutionAnchorName>SampleSolution.zip</SolutionAnchorName>\n  <StartDate>12/01/2017</StartDate>\n  <EndDate>01/01/2031</EndDate>\n  <SupportedCountries>US,CA</SupportedCountries>\n  <LearnMoreLink>https://www.microsoft.com</LearnMoreLink>\n  <Locales>\n    <PackageLocale Code=\"1033\" IsDefault=\"true\">\n      <Logo>logo32x32.png</Logo>\n      <Terms>\n        <PackageTerm File=\"TermsOfUse.html\" />\n      </Terms>\n    </PackageLocale>\n  </Locales>\n</PvsPackageData>\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Applications from JSON File in Power Platform Environment\nDESCRIPTION: Shows how to install multiple applications defined in a JSON file into a specified Power Platform environment using the pac CLI command. Requires environment ID and path to the JSON file containing the list of applications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/application-install-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac application install --environment-id 00000000-0000-0000-0000-000000000000 --application-list c:\\home\\applicationslist.json\n```\n\n----------------------------------------\n\nTITLE: Finding Jobs Using File Storage in SQL\nDESCRIPTION: SQL query to identify the names of system jobs that are using file storage, helping with storage management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP 100 name\nFROM asyncoperationbase WITH (NOLOCK)\nWHERE datablobid IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Counting Apps in Each Environment Using PowerShell\nDESCRIPTION: Counts and displays the number of apps in each Power Apps environment by generating a custom PowerShell object. Requires access to Power Apps and PowerShell scripting capabilities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerApp | Select -ExpandProperty EnvironmentName | Group | %{ New-Object -TypeName PSObject -Property @{ DisplayName = (Get-AdminPowerAppEnvironment -EnvironmentName $_.Name | Select -ExpandProperty displayName); Count = $_.Count } }\n```\n\n----------------------------------------\n\nTITLE: Publishing Solution using PowerShell\nDESCRIPTION: This snippet uses the PowerShell command 'pac solution publish' to publish a specified solution in the Power Platform. It enables developers to deploy their solutions efficiently. No additional dependencies are required beyond a configured PowerShell environment with the appropriate Power Platform tools.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-publish-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac solution publish\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Tenant Connection Settings\nDESCRIPTION: Instructions for configuring host domains to define local connection identities in the Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/faq.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n1. Access the **Host Domains** environment variable\n2. Enter hosts as a comma-separated string\n3. Update the environment variable value\n```\n\n----------------------------------------\n\nTITLE: Adding a Maker to an Environment\nDESCRIPTION: This command adds a maker to the specified Power Platform environment and Azure DevOps project.  It creates the necessary service connections and adds the maker to a security group, granting them access to ALM resources. This allows the maker to participate in the application lifecycle management process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm maker add \\\n  -e https://user-Dev.crm.dynamics.com \\\n  -o https://dev.azure.com/dev12345 \\\n  -p alm-sandbox \\\n  -u user@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Exporting Assigned User Licenses in PowerShell\nDESCRIPTION: This PowerShell command exports all assigned user licenses for Power Apps and Power Automate into a CSV file. It captures both internal trial plans and plans sourced from Microsoft Entra ID. This export is useful for administrators to view licensing details in a tabular format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pricing-billing-skus.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminPowerAppLicenses -OutputFilePath '<licenses.csv>'\n```\n\n----------------------------------------\n\nTITLE: Using pac copilot extract-template command\nDESCRIPTION: Extracts a template file from an existing copilot in an environment. Requires the copilot ID or schema name and the output template file path.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\npac copilot extract-template --bot \"myCopilotName\" --templateFileName \"path/to/output-template.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing User Access Sources via User Agent in Kusto\nDESCRIPTION: This Kusto query analyzes the userAgent attribute within the customDimensions field of the Application Insights requests table to provide an overview of the different sources from where users are accessing the system. It summarizes the count of page views by user agent and user ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-model-driven-apps.md#2025-04-20_snippet_3\n\nLANGUAGE: kusto\nCODE:\n```\n```kusto\npageViews\n| summarize count() by tostring(customDimensions.userAgent), user_Id\n\ndependencies\n| where ['type'] == \"UCI REQUEST\"\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Sandbox Environments with PAC CLI\nDESCRIPTION: Lists only sandbox environments in the tenant by using the pac admin list command with the --type Sandbox filter parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac admin list --type Sandbox\n```\n\nLANGUAGE: powershell\nCODE:\n```\nEnvironment  Environment Id                        Environment Url                        Type        Organization Id\nContoso Dev  00000000-0000-0000-0000-000000000000  https://contoso-dev.crm.dynamics.com/  Sandbox     00000000-0000-0000-0000-000000000000\nContoso Test 00000000-0000-0000-0000-000000000000  https://commdemos.crm.dynamics.com/    Sandbox     00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Using the --json flag in command line\nDESCRIPTION: The --json flag can be added to commands to receive the output as a JSON formatted string instead of standard text output. This is particularly useful for automated processing or when integrating with other tools.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-create-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--json\n```\n\n----------------------------------------\n\nTITLE: Setting Git Tags Version Strategy for PAC Solution\nDESCRIPTION: Configures the solution versioning strategy to use git tags for version management. This approach allows automatic version numbering based on git repository tags.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-version-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac solution version --strategy gittags\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection with Data in Power Apps\nDESCRIPTION: This Power Fx formula creates a collection named Cities containing a single record with Name and Weather fields.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-isblank-isempty.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( Cities, { Name: \"Seattle\", Weather: \"Rainy\" } )\n```\n\n----------------------------------------\n\nTITLE: Listing Power Platform CLI Tools\nDESCRIPTION: Executes the pac tool list command to display all available tools, their installation status, and installed versions in the Power Platform CLI environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac tool list\n```\n\n----------------------------------------\n\nTITLE: Assigning User to Environment - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: Documents the command for assigning a user to a Dataverse environment with a defined security role. Parameters allow for the identification of the user and the role they will assume within the environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## pac admin assign-user\n\nAssign a user to a target Dataverse environment with specified security role.\n\n### Required Parameters for admin assign-user\n\n#### `--user` `-u`\n\nObject ID or user principal name (UPN) of Microsoft Entra ID user to be assigned to the environment.\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Entity Data Export Profile Objects with SQL\nDESCRIPTION: SQL script to remove tables, types, and stored procedures for a specific entity in Data Export Service. The script targets only objects related to the specified entity name, making it useful for selective cleanup.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/replicate-data-microsoft-azure-sql-database.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-----------------------------------------------------------------\n-- Provide the value for the following parameters\nDECLARE @prefix nvarchar(32) ='crm'\nDECLARE @schema nvarchar(32) ='dbo'\nDECLARE @entityName nvarchar(32) ='lead'\n-----------------------------------------------------------------\nDECLARE @sql nvarchar(max) = '';\n\nIF @prefix != '' \nBEGIN\n       SET @prefix = @prefix + '_'\nEND\n\nSELECT @sql += 'DROP TABLE ' + QUOTENAME([TABLE_SCHEMA]) + '.' + QUOTENAME([TABLE_NAME]) + ';'\nFROM [INFORMATION_SCHEMA].[TABLES]\nWHERE [TABLE_TYPE] = 'BASE TABLE' AND [TABLE_NAME] like @prefix + @entityName  AND [TABLE_SCHEMA]= @schema;\nPRINT @sql\nEXEC SP_EXECUTESQL @sql;\nPRINT 'Finished dropping the entity. Starting to drop the types associated with the entity'\n\nSELECT @sql='';\nSELECT @sql += 'DROP TYPE ' + QUOTENAME(SCHEMA_NAME([SCHEMA_ID])) + '.' + QUOTENAME([NAME]) + ';'\nFROM SYS.TYPES\nWHERE\n  is_user_defined = 1\n  AND (\n    [NAME] LIKE @prefix + @entityName +'Type' \n    OR [NAME] LIKE @prefix + @entityName +'IdType'\n  )\n  AND [SCHEMA_ID] = SCHEMA_ID(@schema);\n```\n\n----------------------------------------\n\nTITLE: Adding Solutions to Package with CLI\nDESCRIPTION: Commands to add a solution file to the package using Power Platform CLI. The 'pac package add-solution' command takes the path to the solution file and adds it to the package configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> pac package add-solution help\n\nCommands:\nUsage: pac package add-solution --path [--import-order] [--skip-validation] [--publish-workflows-activate-plugins] [--overwrite-unmanaged-customizations] [--import-mode] [--missing-dependency-behavior] [--dependency-overrides]\n\n> cd .\\DeploymentPackage\\\n> pac package add-solution --path ..\\TestSolution_1_0_0_1_managed.zip\n\nThe item was added successfully.\n```\n\n----------------------------------------\n\nTITLE: Notification from Button Selection in Power Apps\nDESCRIPTION: Demonstrates how to set the OnSelect property of Button1 to trigger a notification when selected through another button's OnSelect property.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-select.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nNotify( \"Hello World\" )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nSelect(Button1)\n```\n\n----------------------------------------\n\nTITLE: Exporting Admin Power Apps User Details Using PowerShell\nDESCRIPTION: Administrators export Power Apps-related user details using the Get-AdminPowerAppsUserDetails function. It requires the user's ID and email and outputs results to a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\n$userId = \"11bb11bb-cc22-dd33-ee44-55ff55ff55ff\"\nGet-AdminPowerAppsUserDetails -OutputFilePath \"UserDetails.json\" -UserPrincipalName name@microsoft.com\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Identity Record in Dataverse\nDESCRIPTION: To set up a managed identity record in Dataverse, make a POST request using a tool like Insomnia. Replace placeholders with your organization URL and IDs. This operation requires setting Credentialsource and SubjectScope for environment-specific conditions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/set-up-managed-identity.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST https://<<orgURL>>/api/data/v9.0/managedidentities\n\nSample payload\n{\n   \"applicationid\":\"<<appId>>\",\n   \"managedidentityid\":\"<<anyGuid>>\",\n   \"credentialsource\":2,\n   \"subjectscope\":1,\n   \"tenantid\":\"<<tenantId>>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up CoE CLI Command\nDESCRIPTION: Links the built CoE CLI command to the npm, allowing global access to the CLI tool. This requires administrative permissions for global installs and builds a direct link to the compiled CLI tool.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/overview.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Setting a String Variable with Power Fx Set\nDESCRIPTION: This example demonstrates setting a global variable to a string value using the `Set` function. The global variable `Name` is created or modified and assigned the string value \"Lily\".  The variable is now accessible across the application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-set.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Set( Name, \\\"Lily\\\" )\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Cloud Flow Failures in KQL\nDESCRIPTION: This KQL query filters for a specific cloud flow's failures by using environment ID and flow ID parameters. It searches the requests table for failed cloud flow runs within the last day.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/app-insights-cloud-flow.md#2025-04-20_snippet_0\n\nLANGUAGE: kql\nCODE:\n```\nlet myEnvironmentId = **'Insert your environment ID here**;\nlet myFlowId = **Insert your flow ID here** ';\nrequests\n| where timestamp > ago(**1d**)\n| where customDimensions ['resourceProvider'] == 'Cloud Flow'\n| where customDimensions ['signalCategory'] == 'Cloud flow runs'\n| where customDimensions ['environmentId'] == myEnvironmentId\n| where customDimensions ['resourceId'] == myFlowId\n| where success == false\n```\n\n----------------------------------------\n\nTITLE: Recovering Deleted Canvas Apps with PowerShell\nDESCRIPTION: Recovers deleted canvas apps from a list generated by `Get-AdminDeletedPowerAppsList`. Only apps from this list can be recovered. Requires app and environment names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminRecoverDeletedPowerApp -AppName 'AppName' -EnvironmentName 'EnvironmentName'\n```\n\n----------------------------------------\n\nTITLE: Generating User Certificate for TESTUSER01 - PowerShell\nDESCRIPTION: This code generates a user-specific certificate for a given SAP username, complete with signing using the intermediate user certificate.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n# Create the private key.\nopenssl genrsa -out userCerts/TESTUSER01.key.pem 2048\n\n# Generate the certificate signing request\nopenssl req -key userCerts/TESTUSER01.key.pem -new -sha256 -out userCerts/TESTUSER01.csr.pem -subj \"/CN=TESTUSER01\"\n\n# Sign the certificate + add extensions with the intermediate cert.\nopenssl x509 -req -days 365 -in userCerts/TESTUSER01.csr.pem -sha256 `\n  -CA signingUsersCert/users.cert.pem -CAkey signingUsersCert/users.key.pem `\n  -out userCerts/TESTUSER01.cert.pem -extfile userCerts/extensions.cnf `\n  -CAserial signingUsersCert/serial\n```\n\n----------------------------------------\n\nTITLE: Custom Settings Template JSON Configuration\nDESCRIPTION: JSON configuration file that can be used as a settings template for the modelbuilder build command. It contains all the options that would otherwise be specified as command-line parameters, including entity filters, namespace settings, and code generation options.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/modelbuilder-build-intro.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"suppressINotifyPattern\": false,\n  \"suppressGeneratedCodeAttribute\": false,\n  \"language\": \"CS\",\n  \"namespace\": \"MyApps.Model\",\n  \"serviceContextName\": \"OrgContext\",\n  \"generateSdkMessages\": true,\n  \"generateGlobalOptionSets\": false,\n  \"emitFieldsClasses\": true,\n  \"entityTypesFolder\": \"Entities\",\n  \"messagesTypesFolder\": \"Messages\",\n  \"optionSetsTypesFolder\": \"OptionSets\",\n  \"entityNamesFilter\": [\n    \"account\",\n    \"contact\"\n  ],\n  \"messageNamesFilter\": [\n    \"examp_*\"\n  ],\n  \"emitEntityETC\": false,\n  \"emitVirtualAttributes\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Power BI Dashboard Configuration\nDESCRIPTION: This snippet describes the steps to configure the Power BI dashboard to view pulse feedback. It involves downloading and installing Power BI Desktop, enabling the TDS endpoint, getting the environment URL, opening the dashboard file, entering the environment URL, saving or publishing the dashboard, and configuring scheduled refresh for daily updates.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-nurture-components.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"1. Download and install [Microsoft Power BI Desktop](https://www.microsoft.com/download/details.aspx?id=58494).\n1. Enable the [TDS endpoint](/power-platform//admin/settings-features) on your environment.\n1. Get the [environment URL](setup-powerbi.md#get-the-environment-url).\n1. In Power BI Desktop, open the Pulse_CoEDashboard.pbit file, which can be found in the CoE Starter Kit you downloaded from [aka.ms/CoeStarterKitDownload](https://aka.ms/CoEStarterKitDownload).\n1. Enter the URL of your environment instance. Don't include the `https://` prefix or `/` postfix for **OrgUrl**.\n1. Save the dashboard locally, or select **Publish** and choose the workspace you want to publish the report to.\n1. [Configure scheduled refresh](/power-bi/connect-data/refresh-data#configure-scheduled-refresh) for your Power BI Dataset to update the report daily.\"\n```\n\n----------------------------------------\n\nTITLE: Backing up Environments with PowerShell in Power Platform\nDESCRIPTION: This PowerShell script creates a backup of a Power Platform environment. It installs the required module, authenticates using an SPN with client secret (or user credentials), and creates a backup with a custom label and notes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/unified-experience/tutorial-backup-restore-unified-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n#Install the module\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\n\n# Set variables for your session\n$TenantId = \"YOUR_TENANT_GUID_FROM_Microsoft Entra ID\"\n$SPNId = \"YOUR_AZURE_APPLICATION_REGISTRATION_CLIENT_ID\"\n$ClientSecret = \"YOUR_AZURE_APPLICATION_CLIENT_SECRET\"\n$EnvironmentID = \"YOUR_ENVIRONMENT_ID_HERE\"\n\nWrite-Host \"Creating a session against the Power Platform API\"\n\nAdd-PowerAppsAccount -Endpoint prod -TenantID $TenantId -ApplicationId $SPNId -ClientSecret $ClientSecret\n\n    $backupRequest = \\[pscustomobject\\]@{\n        Label = \"this is a label\"\n        Notes = \"this is a note\"\n    }\n\nBackup-PowerAppEnvironment -EnvironmentName $EnvironmentID -BackupRequestDefinition $backupRequest\n```\n\n----------------------------------------\n\nTITLE: Sharing Apps in Production Environment\nDESCRIPTION: Steps for sharing applications in a production environment with different security roles using the Power Platform admin interface.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/faq.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [Power Apps](https://make.powerapps.com) and select your CoE environment\n2. On the app that you want to share, select the overflow menu **...** > **Share**\n3. Select the Dataverse security role\n4. Select **Share**\n```\n\n----------------------------------------\n\nTITLE: Compare time with TimeValue function in Power Fx\nDESCRIPTION: This snippet compares the time entered in a text input control with a specific time (5:00:00.000 PM) and displays a message based on the comparison. It uses the `TimeValue` function to convert the input string and the comparison time to date/time values. An `If` function then checks if the entered time is earlier than 5:00 PM.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datevalue-timevalue.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( TimeValue( FinishedAt.Text ) < TimeValue( \"5:00:00.000 PM\" ),\n    \"You made it!\",\n    \"Too late!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using ColorValue with Hex Values in Power Apps\nDESCRIPTION: Examples of using the ColorValue function with hexadecimal color codes to define colors in Power Apps. This syntax allows for precise color definition using standard hex color notation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Fx\nCODE:\n```\nColorValue( \"#f0f8ff\" )\n```\n\n----------------------------------------\n\nTITLE: Creating a New Activity for a Trace Message in C#\nDESCRIPTION: This code snippet demonstrates how to create a new activity for a trace message using C#. It initializes an activity, sets its parent ID, and then tracks a telemetry record based on the trace data. This functionality is crucial for effective logging and performance monitoring within Dataverse plug-ins.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/distributed-tracing-details.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a new activity for the trace message\nvar activity = new Activity(\"CustomActivity\");\nactivity.SetParentId(traceParent);\nactivity.Start();\n// Create a trace telemetry record\nvar traceTelemetry = new TraceTelemetry(message, ConvertLogLevel(level))\n{\n    Message = message,\n    Context = { Operation = { ParentId = dependencyTelemetry.Id, Id = activity.Id } }\n};\n// Track the trace telemetry\ntelemetryClient.TrackTrace(traceTelemetry);\n```\n\n----------------------------------------\n\nTITLE: Identifying Full FormXml in XML Exports\nDESCRIPTION: This XML snippet shows how to identify a full FormXml in a solution export. Full FormXml contains the entire form definition and does not include solutionaction attributes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/form-alm.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<FormXml>\n  <!-- Full form definition without solutionaction attributes -->\n</FormXml>\n```\n\n----------------------------------------\n\nTITLE: Copying Text to Clipboard - Power FX\nDESCRIPTION: The Copy function in Power FX copies a given text value to the device's clipboard where the app is running. It is a side-effect function, applicable in behavior properties only. Limited by clipboard access permissions in embedded apps (e.g., Power Apps in SharePoint or Teams).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-copy.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nCopy( TextInput1.Text )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nCopy( \\\"${employeeRecord.Name} ${employeeRecord.LastName} (${employeeRecord.Title})\\\" )\n```\n\n----------------------------------------\n\nTITLE: Showing Package Details with Power Platform CLI\nDESCRIPTION: This snippet shows the command to view details of a built package. It utilizes the pac CLI to display information about the package located at the specified path.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n> pac package show --package .\\bin\\Debug\\DeploymentPackage.1.0.0.pdpkg.zip\n```\n\n----------------------------------------\n\nTITLE: Checking Language Tag Format in PowerFx\nDESCRIPTION: Using the Value function to see the list of supported language tags in Power Apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-language.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerFx\nCODE:\n```\nValue( \"1\", )\n```\n\n----------------------------------------\n\nTITLE: Audited Power Pages Administrative Events Table\nDESCRIPTION: Comprehensive table detailing the various administrative events that can be tracked and logged for Power Pages, including event names, operation names, and descriptions\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/logging-power-pages.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Activity Name**                              | **Operation Name**                     | **Description**                                                               |\n|------------------------------------------------|----------------------------------------|-------------------------------------------------------------------------------|\n| Enable Power BI visualization                  | PowerBIVisualizationEnabled            | When Power BI visualization is enabled for the site                           |\n| Disable Power BI visualization                 | PowerBIVisualizationDisabled           | When Power BI visualization is disabled for the site                          |\n```\n\n----------------------------------------\n\nTITLE: Admin Connector Reference Resources\nDESCRIPTION: Links to documentation for key administrative connectors in Power Platform, including management capabilities for Power Automate, Power Apps, and platform-wide administration\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-management-monitoring.md#2025-04-20_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nhttps://github.com/microsoft/powerapps-tools/tree/master/Administration/AdminInADay\n```\n\n----------------------------------------\n\nTITLE: User Requirements Documentation for Dataverse\nDESCRIPTION: Details the criteria that must be met for successfully adding users to Dataverse, including Microsoft Entra ID requirements, licensing conditions, and security group considerations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-users.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. User must be enabled and not deleted or soft-deleted in Microsoft Entra ID\n2. User must have a valid license with specified exceptions\n3. User must be part of the respective security group if environment has security group defined\n```\n\n----------------------------------------\n\nTITLE: Default Environment Variables in customDeploymentConfiguration.json\nDESCRIPTION: This JSON snippet outlines default environment variables for deployment, used in export pipelines to ensure that values are appropriate and not directly source-controlled. Dependencies include pipeline configuration and schema names. Key parameters are variable tokens and schema names for default values, ensuring consistency in deployment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-data-deployment-configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DefaultEnvironmentVariables\": [\n    [ \"cat_TextEnvironmentVariable\", \"#{defaultvariable.cat_TextEnvironmentVariable}#\" ],\n    [ \"cat_DecimalEnvironmentVariable\", \"#{defaultvariable.cat_DecimalEnvironmentVariable}#\" ],\n    [ \"cat_jsonEnvironmentVariable\", \"{\\\"name\\\":\\\"#{defaultvariable.cat_jsonEnvironmentVariable.name}#\\\"}\" ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Products Collection in Power Apps with ClearCollect\nDESCRIPTION: Creates a sample Products collection with four items containing product names, quantities requested, and quantities available. This is used as the source data for subsequent examples.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( Products,\n    Table(\n        { Product: \"Widget\",    'Quantity Requested': 6,  'Quantity Available': 3 },\n        { Product: \"Gadget\",    'Quantity Requested': 10, 'Quantity Available': 20 },\n        { Product: \"Gizmo\",     'Quantity Requested': 4,  'Quantity Available': 11 },\n        { Product: \"Apparatus\", 'Quantity Requested': 7,  'Quantity Available': 6 }\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON with BookType - Power Fx\nDESCRIPTION: This snippet demonstrates how to use the BookType as a parameter in the ParseJSON function to convert a JSON string into a typed record. The result is a structured representation of a book that conforms to the BookType schema.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-type.md#2025-04-20_snippet_2\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nParseJSON( \"{\\\"Title\\\":\\\"Gulliver's Travels\\\", \\\"Author\\\": \\\"Jonathan Swift\\\", \\\"Published\\\": 1900}\", BookType\n)\n```\n\n----------------------------------------\n\nTITLE: Staging a Solution in Dataverse using C#\nDESCRIPTION: This code snippet demonstrates how to stage a solution in Dataverse using the StageSolutionRequest. It reads the solution file as bytes and executes the request, returning the staging results.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-async.md#2025-04-20_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static StageSolutionResults StageSolution(\n    IOrganizationService service,\n    string solutionFilePath)\n{\n  // Stage the solution\n  var req = new StageSolutionRequest();\n\n  byte[] fileBytes = File.ReadAllBytes(solutionFilePath);\n  req[\"CustomizationFile\"] = fileBytes;\n  var res = service.Execute(req);\n\n  return (res[\"StageSolutionResults\"] as StageSolutionResults);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Flow User Details\nDESCRIPTION: This command completely removes the details of a flow user from the database after all flows owned by the user are deleted. This is important for data privacy and management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_31\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-AdminFlowUserDetails –UserId 'UserId'\n```\n\n----------------------------------------\n\nTITLE: Copying Managed Environment Settings with PowerShell\nDESCRIPTION: PowerShell commands to copy settings from one Managed Environment to another, including enabling Managed Environment status if the target environment isn't already managed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-enable.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n#Get settings from the source Managed Environment\n$sourceEnvironment = Get-AdminPowerAppEnvironment -EnvironmentName <SourceEnvironmentId>\n\n# Copy the settings from the source Managed Environment above to the target environment\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <TargetEnvironmentId> -UpdatedGovernanceConfiguration $sourceEnvironment.Internal.properties.governanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: PowerShell: Enabling Role Assignment for Disabled Users\nDESCRIPTION: Configuration setting to allow security role assignments for disabled users using OrgDBOrgSettings\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-users.md#2025-04-20_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nallowRoleAssignmentOnDisabledUsers\n```\n\n----------------------------------------\n\nTITLE: SAP System Configuration JSON\nDESCRIPTION: JSON configuration for SAP system parameters including AppServerHost, Client, SystemNumber, and LogonType settings required for the SAP ERP connector setup.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/sap-erp-connector.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"AppServerHost\": \"sap.example.com\",\"Client\": \"100\" \"SystemNumber\": \"00\", \"LogonType\": \"ApplicationServer\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Trusted Security Token Issuer for Microsoft Entra ID\nDESCRIPTION: Creates a new trusted security token issuer in SharePoint on-premises for Microsoft Entra ID. This final step completes the trust relationship between SharePoint Server and Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$acs = New-SPTrustedSecurityTokenIssuer –Name \"ACSInternal\" –IsTrustBroker:$true –MetadataEndpoint $metadataEndpoint -RegisteredIssuerName $acsissuer  \n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft PowerApps Administration PowerShell Module\nDESCRIPTION: Installs the Microsoft PowerApps Administration PowerShell module required for accessing the DLP APIs. This module provides cmdlets for managing Power Platform administration functions including DLP policies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/data-loss-prevention-sdk.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force\n```\n\n----------------------------------------\n\nTITLE: Listing PAC Solution Commands in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the available subcommands for the 'pac solution' command group, along with brief descriptions for each.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/solution.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Command|Description|\n|---------|----------|\n|[pac solution add-license](#pac-solution-add-license)|Add license and plan info to the solution.|\n|[pac solution add-reference](#pac-solution-add-reference)|Adds a reference from the project in the current directory to the project at 'path'|\n|[pac solution add-solution-component](#pac-solution-add-solution-component)|Add one or more solution components to the target unmanaged solution in Dataverse.|\n|[pac solution check](#pac-solution-check)|Upload a Dataverse solution project to run against the Power Apps Checker service.|\n|[pac solution clone](#pac-solution-clone)|Create a solution project based on an existing solution in your organization.|\n|[pac solution create-settings](#pac-solution-create-settings)|Create a settings file from solution zip or solution folder.|\n|[pac solution delete](#pac-solution-delete)|Delete a solution from Dataverse in the current environment.|\n|[pac solution export](#pac-solution-export)|Export a solution from Dataverse.|\n|[pac solution import](#pac-solution-import)|Import the solution into Dataverse.|\n|[pac solution init](#pac-solution-init)|Initializes a directory with a new Dataverse solution project|\n|[pac solution list](#pac-solution-list)|List all Solutions from the current Dataverse organization|\n|[pac solution online-version](#pac-solution-online-version)|Sets version for solution loaded in Dataverse.|\n|[pac solution pack](#pac-solution-pack)|Package solution components on local filesystem into solution.zip (SolutionPackager).|\n|[pac solution publish](#pac-solution-publish)|Publishes all customizations|\n|[pac solution sync](#pac-solution-sync)|Sync the current Dataverse solution project to the current state of the solution in your organization.|\n|[pac solution unpack](#pac-solution-unpack)|Extract solution components from solution.zip onto local filesystem (SolutionPackager).|\n|[pac solution upgrade](#pac-solution-upgrade)|Apply solution upgrade|\n|[pac solution version](#pac-solution-version)|Update build or revision version for the solution.|\n```\n\n----------------------------------------\n\nTITLE: Pushing PAC Plugin with PowerShell\nDESCRIPTION: This PowerShell command is used to push a plugin to the PAC environment. It requires that the PAC CLI is installed and configured in the user's environment. The command does not accept any parameters and outputs the result of the plugin push operation to the console.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/plugin-push-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: Powershell\nCODE:\n```\npac plugin push\n```\n\n----------------------------------------\n\nTITLE: Defining Substeps in SubwayNav Items Property\nDESCRIPTION: This example demonstrates how to define substeps within the `Items` property of the `SubwayNav` control. It uses the `ParentItemKey` property to link substeps to their parent steps, allowing for a hierarchical navigation structure.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/subwaynav.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    { ItemKey:\"1\", ItemLabel:\"Step 1\", ItemState:\"Current\" },\n    { ItemKey:\"2\", ItemLabel:\"Step 2 have sub-steps\", ItemState:\"WizardComplete\" },\n    { ItemKey:\"3\", ItemLabel:\"Sub Step 2.1\", ParentItemKey:\"2\", ItemState:\"Error\" },\n    { ItemKey:\"4\", ItemLabel:\"Sub Step 2.2\", ParentItemKey:\"2\", ItemState:\"WizardComplete\" }, \n    { ItemKey:\"5\", ItemLabel:\"Sub Step 3.1\", ParentItemKey:\"8\", ItemState:\"ViewedNotCompleted\" }, \n    { ItemKey:\"6\", ItemLabel:\"Sub Step 3.2\", ParentItemKey:\"8\", ItemState:\"Unsaved\" }, \n    { ItemKey:\"7\", ItemLabel:\"Sub Step 3.2\", ParentItemKey:\"8\", ItemState:\"Unsaved\" }, \n    { ItemKey:\"8\", ItemLabel:\"Step 3 too have sub-steps\", ItemState:\"Unsaved\" }, \n    { ItemKey:\"9\", ItemLabel:\"Step 4\", ItemState:\"Error\" }, \n    { ItemKey:\"10\", ItemLabel:\"Step 5\", ItemState:\"WizardComplete\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Copilots in a Dataverse Environment with PowerShell\nDESCRIPTION: This command uses the Power Platform CLI (pac) to list all copilots in a specific Dataverse environment. The --environment parameter specifies the target environment GUID to query.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-list-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac copilot list --environment 2e250e7a-5607-4fea-aa4e-1aeb7bf79118\n```\n\n----------------------------------------\n\nTITLE: Setting Backup Retention Period with PowerShell in Power Platform\nDESCRIPTION: PowerShell command to set the backup retention period for production environments without Dynamics 365 applications. This allows administrators to extend retention from the default 7 days to 14, 21, or 28 days.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/backup-restore-environments.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AdminPowerAppEnvironmentBackupRetentionPeriod\n```\n\n----------------------------------------\n\nTITLE: Creating RSA-HSM Key in Managed HSM\nDESCRIPTION: Procedure for generating an RSA-HSM key in Azure Key Vault Managed HSM, providing FIPS 140-2 Level 3 support with key sizes of 2048 bits\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/customer-managed-key.md#2025-04-20_snippet_1\n\nLANGUAGE: azure\nCODE:\n```\n1. Provision Managed HSM\n2. Activate Managed HSM\n3. Enable Purge Protection\n4. Create RSA-HSM key:\n   - Options: \"Generate\"\n   - Name: [Custom Key Name]\n   - Key type: \"RSA-HSM\"\n   - RSA key size: \"2048\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Cloud Trigger Failures in KQL\nDESCRIPTION: This KQL query filters for a specific cloud trigger's failures by searching the dependencies table. It identifies failed trigger executions within a specific environment and flow over the last day.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/app-insights-cloud-flow.md#2025-04-20_snippet_1\n\nLANGUAGE: kql\nCODE:\n```\nlet myEnvironmentId = **'Insert your environment ID here**;\nlet myFlowId = **Insert your flow ID here** ';\ndependencies\n| where timestamp > ago(**1d**)\n| where customDimensions['resourceProvider'] == 'Cloud Flow'\n| where customDimensions['signalCategory'] == 'Cloud flow triggers'\n| where customDimensions['environmentId'] == myEnvironmentId\n| where name == myTriggerName\n| where success == false\n```\n\n----------------------------------------\n\nTITLE: Listing Number Settings in Power Platform Environment using PowerShell\nDESCRIPTION: This command uses the Power Platform CLI (pac) to list all number-related settings in the current environment. The command filters settings by the word 'number' and displays their current values. The user is shown as connected with their organizational account.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-list-settings-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Users\\you>pac env list-settings --filter number\nConnected as you@yourorg.com\nSetting                              Value\ncurrentbulkoperationnumber           1,000\ncurrentcampaignnumber                1,000\ncurrentcasenumber                    1\ncurrentcategorynumber                1,000\ncurrentcontractnumber                1,000\ncurrentimportsequencenumber          1\ncurrentinvoicenumber                 1,000\ncurrentkanumber                      1,000\ncurrentkbnumber                      1,000\ncurrentordernumber                   1,000\ncurrentparsedtablenumber             1\ncurrentquotenumber                   1,000\nmaximumtrackingnumber                999\nnexttrackingnumber                   0\nnumberformat                         us\nnumbergroupformat                    3\nnumberseparator                      ,\nrecurrencedefaultnumberofoccurrences 10\nshowweeknumber                       No\ntimezoneruleversionnumber            0\nversionnumber                        19,810,412\n```\n\n----------------------------------------\n\nTITLE: Triggering a Flow for a Specific Stage in Power Automate\nDESCRIPTION: This code snippet is used to trigger a flow for a specific deployment stage in a pipeline, where the stage name must equal 'Contoso UAT'. This functionality ensures that the flow is executed only for the designated pipeline stage.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Automate\nCODE:\n```\n@equals(triggerOutputs()?['body/OutputParameters/DeploymentStageName'], 'Contoso UAT')\n```\n\n----------------------------------------\n\nTITLE: Restoring Backup by Timestamp in Power Platform CLI using PowerShell\nDESCRIPTION: This command restores a backup created at a specific timestamp from a specified source environment to the currently selected environment. It uses the 'pac admin restore' command with the '--selected-backup' option set to a date and time.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-restore-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac admin restore --selected-backup '12/01/2022 09:00' --source-env 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Using ThisItem for Employee Names in Gallery - Power FX\nDESCRIPTION: This snippet illustrates the usage of the ThisItem operator to concatenate an employee's first and last name from a Gallery control. It emphasizes the dynamic attributes based on user selections.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_18\n\nLANGUAGE: Power FX\nCODE:\n```\nThisItem.'First Name' & \" \" & ThisItem.'Last Name'\n```\n\n----------------------------------------\n\nTITLE: Using pac copilot list command\nDESCRIPTION: Lists all copilots in the current or target Dataverse environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\npac copilot list --environment \"https://myorg.crm.dynamics.com\"\n```\n\n----------------------------------------\n\nTITLE: Security Role Table Privileges Configuration\nDESCRIPTION: Table showing the required privilege settings for the Security Role table when creating a new custom security role. This configuration allows business unit level access for most operations and organization-wide read access.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/prevent-elevation-security-role-privilege.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Privilege  |Setting  |\n|---------|----------|\n|Create     |Business Unit         |\n|Read     |Organization         |\n|Write     |Business Unit         |\n|Delete     |Business Unit         |\n|Append     |Business Unit         |\n|Append To     |Business Unit         |\n|Assign     |Business Unit         |\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Sync Duration by Sync Mode in Kusto\nDESCRIPTION: This Kusto query evaluates the average sync duration for users in an organization, broken down by sync mode and client type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-mobile.md#2025-04-20_snippet_2\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where name == \"Offline.SyncDatabase\"\n| extend cd = parse_json(customDimensions)\n| extend ActiveDuration = toint(tostring(cd.ActiveDuration))\n| extend WithBackgroundTime = duration\n| extend DataSyncMode = tostring(cd.DataSyncMode)\n| summarize percentile(ActiveDuration, 50), percentile(WithBackgroundTime, 50) by client_Type, DataSyncMode\n```\n\n----------------------------------------\n\nTITLE: SMTP Header Example with Forward Operation Type\nDESCRIPTION: Example showing how Power Platform identifies the operation type by inserting a reserved word (Forward, Reply, or Send) in the 'x-ms-mail-operation-type' header field. This can be used by Exchange admins to specifically target forwarded emails for exfiltration control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/block-forwarded-email-from-power-automate.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nx-ms-mail-application: Microsoft Power Automate; User-Agent: \nazure-logic-apps/1.0 (workflow afa0fb167803450aa650267e95d43287; version \n08586093372199532216) microsoft-flow/1.0 \n**x-ms-mail-operation-type: Forward**\n```\n\n----------------------------------------\n\nTITLE: Installing CoE ALM for a Specific Environment\nDESCRIPTION: This command installs the CoE ALM Accelerator configurations specifically for the provided environment.  The `-c environment` parameter specifies that the installation is environment-specific, and the `-e` parameter defines the URL of the target environment (e.g., https://contoso-maker.crm.dynamics.com). This command is useful for setting up ALM in individual environments within the Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm install \\\n  -c environment \\\n  -e https://contoso-maker.crm.dynamics.com\n```\n\n----------------------------------------\n\nTITLE: Exporting Power Apps/Automate Licenses via PowerShell\nDESCRIPTION: This PowerShell command exports assigned user licenses for Power Apps and Power Automate in a tenant into a .csv file. It provides a tabular view of licenses, including self-service sign-up trial plans not visible in the Microsoft 365 admin center. This is useful for auditing and managing user licenses.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/governance-considerations.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppLicenses -OutputFilePath '<licenses.csv>'\n```\n\n----------------------------------------\n\nTITLE: Required Service Tags for IP Configuration\nDESCRIPTION: List of Azure service tags that need to be configured for Power Platform and Dynamics 365 services, including their purposes\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/online-requirements.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAzureCloud - Needed for all Power Platform and Dynamics 365 services\nMicrosoftAzureFluidRelay - Needed for real-time collaboration features\nOneDsCollector - Needed for gathering telemetry\n```\n\n----------------------------------------\n\nTITLE: Power Platform CLI Runtime State Commands\nDESCRIPTION: Command syntax showing valid runtime state values for environment administration configuration using pac admin set-runtime-state.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- `AdminMode`\n- `Enabled`\n```\n\n----------------------------------------\n\nTITLE: Generating Install Configuration JSON with CoE CLI\nDESCRIPTION: This command uses the CoE CLI to generate an install configuration file (quickstart.json) for setting up the ALM Accelerator.  This file needs to be reviewed and adjusted before being used to install the ALM Accelerator components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/admin-install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"coe alm generate install -o quickstart.json\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Suggestions Using Search Term\nDESCRIPTION: This snippet demonstrates how to filter the suggestions dataset based on a search term provided by the user within the Tag Picker.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/picker.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSearch(colSuggestions,TagPicker.SearchTerm,\"name\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Trial (Standard) Environment in Power Platform Admin Center\nDESCRIPTION: Step-by-step process for creating a standard trial environment with configuration options for name, region, language, and database settings\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/trial-environments.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/) with admin credentials.\n\n2. Go to **Environments**, and then select **+ New**.\n\n3. Enter environment details:\n   - Name\n   - Type: **Trial**\n   - Region\n   - Purpose\n   - Create a database\n```\n\n----------------------------------------\n\nTITLE: Deleting Power Platform Solution\nDESCRIPTION: YAML configuration for deleting a solution from a target Power Platform environment using Service Principal authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.delete-solution.PowerPlatformDeleteSolution@2\n  displayName: 'Power Platform Delete Solution '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n    SolutionName: 'Contoso_sample'\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Credit Card Numbers\nDESCRIPTION: A complex pattern that identifies various credit card formats including Visa, MasterCard, American Express, and others. The pattern matches the complete card number for masking.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-manage-masking-rules.md#2025-04-20_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Existing DLP Policy Connector Configurations in PowerShell\nDESCRIPTION: Command to retrieve existing connector configurations for a Data Loss Prevention policy in Power Platform. This PowerShell cmdlet returns the current endpoint filtering rules configured for a specified policy.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-endpoint-filtering.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PowerAppDlpPolicyConnectorConfigurations\n```\n\n----------------------------------------\n\nTITLE: Assigning Ownership in Power Platform\nDESCRIPTION: This snippet demonstrates how to update the owner of the Approval Rejection Applied Policy table using a PATCH request via the Web API.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrejectionappliedpolicy.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`PATCH` /mspcat_certificationrejectionappliedpolicies(*mspcat_certificationrejectionappliedpolicyid*)<br />[Update](/powerapps/developer/data-platform/webapi/update-delete-entities-using-web-api#basic-update) the `ownerid` property.\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP with Microsoft Entra ID Connection in Power Apps\nDESCRIPTION: This snippet shows how to configure the HTTP with Microsoft Entra ID (preauthorized) connection when first launching the CoE Admin Command Center app. It specifies the Base Resource URL and Microsoft Entra Resource URI for commercial tenants and mentions checking service root endpoints for government cloud environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/core-components.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBase Resource URL: https://graph.microsoft.com\nMicrosoft Entra Resource URI (Application ID URI): https://graph.microsoft.com\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variable Values\nDESCRIPTION: Steps for updating environment variables in the Power Platform CoE environment through the Admin Command Center or directly in the environment settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/faq.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [Power Automate](https://make.powerautomate.com)\n2. On the left pane, select **Solutions**\n3. Select the **Default Solution**, and change the filter to show **Environment variables**\n4. Select a variable that you want to update, and then configure its **Current Value**\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Deleting Reinserted Records After Synchronization Failure\nDESCRIPTION: SQL query to clean up records that may have been reinserted after a Data Export Service synchronization failure. It detects and removes entity records that were previously deleted by comparing version numbers with the DeleteLog table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/replicate-data-microsoft-azure-sql-database.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDELETE A FROM [dbo].[prefix_account] A\nWHERE id IN (SELECT CONVERT(uniqueidentifier, recordid) FROM [dbo].[prefix_DeleteLog] DL WHERE DL.entityname ='account'\nAND DL.VersionNumber > A.VersionNumber)\n```\n\n----------------------------------------\n\nTITLE: Updating environment settings with pac env update-settings\nDESCRIPTION: This command updates a specific setting in a Dataverse environment. It requires the name of the setting to update and optionally accepts a target environment and the new value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/env.md#2025-04-20_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\npac env update-settings --name \"<setting name>\" --value \"<new value>\"\n```\n\nLANGUAGE: cli\nCODE:\n```\npac env update-settings --environment <url or guid> --name \"<setting name>\" --value \"<new value>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Colors Using ColorValue Function in PowerFx\nDESCRIPTION: This snippet demonstrates how to define colors using the ColorValue function in PowerFx. It shows two methods: using hex codes and using color names. The function returns an RGBA color value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_10\n\nLANGUAGE: PowerFx\nCODE:\n```\nColorValue( \"#ffefd5\" )\nColorValue( \"papayawhip\" )\n```\n\n----------------------------------------\n\nTITLE: Exporting User Environments with PowerShell for App Creators\nDESCRIPTION: This PowerShell snippet exports all environments a user has access to in Power Apps. It uses the Get-PowerAppEnvironment function from the App creator PowerShell cmdlets and saves the output as a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\nGet-PowerAppEnvironment | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Management Settings with PowerShell\nDESCRIPTION: Script to update existing environment management settings, specifically enabling SAS logging. Includes comprehensive error handling and response logging.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-environmentmanagement-settings.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n#Set your environment ID\n$environmentId = \"ENV_ID_HERE\"\n\n# Please uncomment the values that need to be updated\n$EnvironmentManagementSettings = @{\n    \"LoggingEnabledForIpBasedStorageAccessSignature\" = $true\n}\n\n$body = $json = $EnvironmentManagementSettings | ConvertTo-Json\n\ntry \n{\n    # Updating the setting value\n    Write-Host \"Invoking Update Management Setting for Environment $environmentId with body $body\"\n    $apiResponse = Invoke-WebRequest -Method Patch -Uri \"https://api.powerplatform.com/environmentmanagement/environments/$environmentId/settings/?api-version=2022-03-01-preview\" -Headers $Headers -Body $body\n\n    Write-Host \"Operation Status: $apiResponse.StatusDescription\"\n} \ncatch \n{\n    # Dig into the exception to get the Response details.\n    Write-Host \"Response CorrelationId:\" $_.Exception.Response.Headers[\"x-ms-correlation-id\"]\n    Write-Host \"StatusCode:\" $_.Exception.Response.StatusCode.value__ \n    Write-Host \"StatusDescription:\" $_.Exception.Response.StatusDescription\n    $result = $_.Exception.Response.GetResponseStream()\n        $reader = New-Object System.IO.StreamReader($result)\n        $reader.BaseStream.Position = 0\n        $reader.DiscardBufferedData()\n        $responseBody = $reader.ReadToEnd();\n\n        Write-Host $responseBody\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Connector Update in Current Environment using Power Platform CLI\nDESCRIPTION: Updates a custom connector in the environment of the currently active authentication profile using the Power Platform CLI. This command requires an API definition file that contains the connector's specification.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-update-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac connector update `\n  --api-definition-file ./apiDefinition.json\n```\n\n----------------------------------------\n\nTITLE: Installing Power Platform CLI with .NET Tool\nDESCRIPTION: Command to install Power Platform CLI globally using the dotnet tool install command. This requires an internet connection to access the Microsoft.PowerApps.CLI.Tool NuGet package.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/howto/install-cli-net-tool.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install --global Microsoft.PowerApps.CLI.Tool\n```\n\n----------------------------------------\n\nTITLE: Displaying current Dataverse organization info with pac env who\nDESCRIPTION: This command displays information about the current or specified Dataverse organization. It helps identify the environment you are currently working with.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/env.md#2025-04-20_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\npac env who\n```\n\nLANGUAGE: cli\nCODE:\n```\npac env who --environment <url or guid>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Settings Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table listing various user settings available in the Power Platform admin center. It includes setting names, descriptions, and links to further information for each setting.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/users-settings.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting | Description | For more information |\n| ------- | ----------- | -------------------- |\n| Run diagnostics | Access diagnostics on a user in an environment. | [User diagnostics](troubleshooting-user-needs-read-write-access-organization.md#user-diagnostics) |\n| Manage security roles | Assign security roles to users to control access to data, using access levels and permissions.| [Assign a security role to a user](assign-security-roles.md) |\n| Refresh user | Resync the **User** page from Microsoft Entra ID. | |\n| Change position | Assign a position to a user. | [Hierarchy security to control access](hierarchy-security.md) |\n| Change manager  | Assign a manager to a user. | [Hierarchy security to control access](hierarchy-security.md) |\n| Reassign records | Assign all records owned by the current user or team to another user or team. | |\n| Change business unit | Assign a different business unit to the user. | [Change the business unit for a user](create-edit-business-units.md#change-the-business-unit-for-a-user) |\n| Manage teams | Add or remove a user from a team. | [Microsoft Dataverse teams management](manage-teams.md) |\n| Change channel | Change the release channel for a user, overriding the environment or app release channel. | [User channel override](user-channel-override.md) |\n```\n\n----------------------------------------\n\nTITLE: Viewing Known Issues When Creating Support Request\nDESCRIPTION: Steps to access known issues information while creating a support request in the Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-known-issues.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. When [creating a support request](get-help-support.md#view-solutions-or-create-a-support-request), if a known issue is applicable to the search query, it displays at the top of the **Solutions** tab.\n\n2. Select the title of the known issue to view details.\n     \n3. If the information resolved your query, click **Yes** to close the support request. To see more solutions, select **No, I still need help**.\n```\n\n----------------------------------------\n\nTITLE: Field Mapping Customization Steps\nDESCRIPTION: Steps for customizing field mappings in data integration projects, including accessing mapping interface and saving changes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/data-integrator.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [Power Apps admin center](https://admin.powerapps.com).\n\n2. Select project and arrow between source/destination fields.\n\n3. Add new mapping or customize existing mappings.\n\n4. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection of New GUIDs\nDESCRIPTION: Demonstrates how to generate a collection of five new GUIDs using ForAll and Sequence functions, which can be displayed in a data table or used elsewhere in an app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-guid.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( NewGUIDs, ForAll( Sequence(5), GUID() ) )\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Managing Power Automate License Assignments\nDESCRIPTION: PowerShell commands to remove direct license assignments and add users to licensed groups in Azure AD. The script includes authentication, user lookup, and group management functionality for transitioning from auto-claim to group-based licensing.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/power-automate-auto-claim.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Credential = Get-Credential\n\n# Connect to Azure AD\nConnect-AzureAD -Credential $Credential\n\n#The user that will get a group based license\n$LicensedUser = Get-AzureADUser -SearchString \"<UPN, display name or object ID of the user for which you want to assign a license>\"\n\n#The group that has the license assigned\n$LicensedGroup = Get-AzureADGroup -SearchString \"<Object ID or name of the group that has a relevant license assigned>\"\n\n#SKU part number of the sku that needs to be unassigned\n# Power Automate premium = \"POWER_AUTOMATE_ATTENDED_RPA\"\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Array to Untyped Table in Power Fx\nDESCRIPTION: This snippet shows how to convert a JSON array of numbers into an untyped table using the Table() function in Power Fx. The resulting table has a single column of untyped objects that need to be accessed using the Value column.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"array\": [1, 2, 3] }\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nSet(untypedTable, Table( ParseJSON( JsonString ).array ));\n\nValue( Index(untypedTable, 1).Value.Value )\n```\n\n----------------------------------------\n\nTITLE: Multiline Formula Notation in Power Fx YAML\nDESCRIPTION: Examples of Power Fx formulas that span multiple lines using YAML's block scalar indicators. The pipe character (|) is used to maintain line breaks, and all lines must be indented at least one space from the first line.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/yaml-formula-grammar.md#2025-04-20_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nText1: |\n    =\"Hello, World\"\nText2: |\n    =\"Hello\" &\n    \",\" &\n    \"World\"\n```\n\n----------------------------------------\n\nTITLE: Marking a Canvas App as Solution Aware using PowerShell\nDESCRIPTION: This PowerShell command marks an existing canvas app as solution-aware, associating it with a specific solution within a Power Platform environment. This is necessary for managing and migrating the app as part of a solution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/migrating-from-default-environment.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\nSet-PowerAppAsSolutionAware -EnvironmentName {Environment ID} -AppName {App ID} -SolutionId {Solution ID}\n```\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with HTTP POST Request\nDESCRIPTION: This code snippet demonstrates how to upload a file for analysis using an HTTP POST request to the Power Apps checker web API. It includes the necessary headers such as Authorization, x-ms-tenant-id, x-ms-correlation-id, Content-Type, and Content-Disposition. The file size should be less than 30MB.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/upload-file.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST [Geographical URI]/api/upload\nAccept: application/json\nx-ms-correlation-id: aaaa0000-bb11-2222-33cc-444444dddddd\nx-ms-tenant-id: aaaabbbb-0000-cccc-1111-dddd2222eeee\nContent-Type: multipart/form-data\nContent-Disposition: form-data; name=mySolution.zip; filename=mySolution.zip\n```\n\n----------------------------------------\n\nTITLE: PAC Test Run with Optional Domain Configuration\nDESCRIPTION: Demonstrates running a test with optional domain specification, which defines the player domain for the app being tested across different environments like Public, Preview, or Government clouds.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/test.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npac test run --environment-id <env-id> --tenant <tenant-id> --test-plan-file <path-to-test-plan> --domain UsGov\n```\n\n----------------------------------------\n\nTITLE: Updating Component Styles Property\nDESCRIPTION: This snippet emphasizes the requirement for makers to update the **Style** property of a component to use the theme. It also explains how to set it to the pre-defined collection of styles intended for components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/theming-components.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nFor a component to also use the theme, makers will need to update the **Style** property and set it to **ComponentStyles**. **ComponentStyles** is a collection of styles specially formatted for components and is initialized as part of the app start code.\n```\n\n----------------------------------------\n\nTITLE: Using pac copilot model predict command\nDESCRIPTION: Sends text or prompt to an AI model for prediction. Requires either model ID or model name parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\npac copilot model predict --model-name \"MyAIModel\" --prompt \"Summarize the sales data for Q2\"\n```\n\n----------------------------------------\n\nTITLE: Triggering a Flow for Specific Stages Containing QA in Power Automate\nDESCRIPTION: This snippet triggers a flow for deployment stages that contain 'QA' in their names. This is done using the contains expression, allowing the flow to execute for any stage with 'QA' in its title.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Automate\nCODE:\n```\n@contains(triggerOutputs()?['body/OutputParameters/DeploymentStageName'], 'QA')\n```\n\n----------------------------------------\n\nTITLE: Payload for Configuring IP Firewall using Dataverse OData API\nDESCRIPTION: This JSON payload configures the IP firewall using the Dataverse OData API. It enables the firewall, sets allowed IP ranges (CIDR notation), enables audit-only mode, specifies allowed service tags, and allows access for application users and Microsoft trusted services. Adapt these values as needed for your specific configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/ip-firewall.md#2025-04-20_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"[\\n    {\\n        \\\"enableipbasedfirewallrule\\\": true,\\n        \\\"allowediprangeforfirewall\\\": \\\"18.205.0.0/24,21.200.0.0/16\\\",\\n        \\\"enableipbasedfirewallruleinauditmode\\\": true,\\n        \\\"allowedservicetagsforfirewall\\\": \\\"AppService,ActionGroup,ApiManagement,AppConfiguration,AppServiceManagement,ApplicationInsightsAvailability,AutonomousDevelopmentPlatform,AzureActiveDirectory,AzureAdvancedThreatProtection,AzureArcInfrastructure,AzureAttestation,AzureBackup,AzureBotService\\\",\\n        \\\"allowapplicationuseraccess\\\": true,\\n        \\\"allowmicrosofttrustedservicetags\\\": true\\n    }\\n]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Rating Meter Items in PowerApps\nDESCRIPTION: This snippet shows how to define ranges for a rating meter gauge chart. Each object in the `Table` represents a segment with `ItemLegend` for label, `ItemSize` for the segment size, and `ItemColor` for the color. The sum of all `ItemSize` values must equal 100% of the chart's total value range.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/gaugechart.md#2025-04-20_snippet_1\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nTable(\n    {\n        ItemLegend: \"Critical\",\n        ItemSize: 11,\n        ItemColor: \"#C50F1F\"\n    },\n    {\n        ItemLegend: \"Warning\",\n        ItemSize: 25,\n        ItemColor: \"#F2610C\"\n    },\n    {\n        ItemLegend: \"No risk\",\n        ItemSize: 30,\n        ItemColor: \"#107C10\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Building Dataverse Model Code with PowerShell\nDESCRIPTION: PowerShell equivalent of the modelbuilder build command that generates C# code for Dataverse entities. Note that string parameters must be surrounded with single quotes when using PowerShell.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/modelbuilder-build-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac modelbuilder build `\n  --entitynamesfilter 'account;contact' `\n  --generatesdkmessages `\n  --messagenamesfilter 'examp_*' `\n  --emitfieldsclasses `\n  --emitVirtualAttributes `\n  --namespace 'MyApps.Model' `\n  --outdirectory 'c:\\src\\MyApps\\Model' `\n  --writesettingsTemplateFile `\n  --serviceContextName 'OrgContext'\n```\n\n----------------------------------------\n\nTITLE: Including Footer in Power Platform Documentation\nDESCRIPTION: This code snippet shows how to include a footer in Power Platform documentation using a special include directive. It references a footer banner file to be inserted at the end of the document.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/opt-in-early-access-updates.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[footer-include](../includes/footer-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Disabling App Creation by Guest Users using PowerShell\nDESCRIPTION: PowerShell script to disable the ability for guest users to create apps in Power Platform by setting the enableGuestsToMake property to false in tenant settings. This option defaults to false.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$tenantSettings = Get-TenantSettings\n$tenantSettings.powerPlatform.powerApps.enableGuestsToMake = $false\nSet-TenantSettings $tenantSettings\n```\n\n----------------------------------------\n\nTITLE: Defining Speedometer Items in PowerApps\nDESCRIPTION: This snippet demonstrates how to define a `Table` representing a single data point for a speedometer type gauge chart. The `ItemSize` denotes the size, and the `ItemColor` specifies the color of the data segment. The `ChartValue` indicates the target position on the chart.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/gaugechart.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nTable(\n    {\n        ItemSize: 15,\n        ItemColor: \"#3483FA\"\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Clearing and Collecting Data in Power Fx\nDESCRIPTION: This snippet demonstrates how to use the ClearCollect function to create a collection with city data. Required dependencies include a Power Apps environment that supports Power Fx. The ClearCollect function initializes or clears the CityPopulations collection with provided city records.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-distinct.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( CityPopulations,\n    { City: \"London\",    Country: \"United Kingdom\", Population: 8615000 },\n    { City: \"Berlin\",    Country: \"Germany\",        Population: 3562000 },\n    { City: \"Madrid\",    Country: \"Spain\",          Population: 3165000 },\n    { City: \"Hamburg\",   Country: \"Germany\",        Population: 1760000 },\n    { City: \"Barcelona\", Country: \"Spain\",          Population: 1602000 },\n    { City: \"Munich\",    Country: \"Germany\",        Population: 1494000 }\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Allowed Consent Plans for Trial Licenses in Power Platform\nDESCRIPTION: These PowerShell commands are used to manage allowed consent plans for trial licenses in a Power Platform tenant. They allow administrators to add, remove, or view access to specific types of consent plans, such as internal trials or ad-hoc subscriptions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_51\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-AllowedConsentPlans\nAdd-AllowedConsentPlans\nGet-AllowedConsentPlans\n```\n\n----------------------------------------\n\nTITLE: Deleting a Finance and Operations Environment with PowerShell\nDESCRIPTION: This PowerShell script deletes a previously created environment. It requires the environment ID to be set appropriately.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/unified-experience/tutorial-deploy-new-environment-with-ERP-template.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n#Remove the previously created environment by ID\nRemove-AdminPowerAppEnvironment -EnvironmentName [Guid]\n```\n\n----------------------------------------\n\nTITLE: Filtering Gallery Items with 'in' Operator in Power Apps\nDESCRIPTION: This snippet demonstrates how to use the 'in' operator to filter items in a gallery control based on a substring match in the ProductName field. It's case-insensitive.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_8\n\nLANGUAGE: PowerApps\nCODE:\n```\nFilter(Inventory, \"E\" in ProductName)\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Access Authentication Context IDs for Power Apps via PowerShell\nDESCRIPTION: PowerShell command to add authentication context IDs to a specific app in a Managed Environment. This allows admins to apply conditional access policies that require specific authentication methods (like MFA) for individual apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/admin-manage-apps.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AdminPowerAppConditionalAccessAuthenticationContextIds –EnvironmentName <EnvironmentName> -AppName <AppName> -AuthenticationContextIds <id1, id2, etc...>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flows at Risk of Suspension Across Environments Using PowerShell\nDESCRIPTION: This PowerShell script retrieves all flows that are at risk of suspension across multiple environments in a tenant. It iterates through environments, collects at-risk flows, and exports the results to a CSV file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/faqs.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$environments = Get-AdminPowerAppEnvironment\n\n$allFlows = @()\nforeach ($env in $environments) {\n    Write-Host \"Getting flows at risk of suspension for environment $($env.DisplayName)...\"\n    $flows = Get-AdminFlowAtRiskOfSuspension -EnvironmentName $env.EnvironmentName\n    Write-Host \"Found $($flows.Count) flows at risk of suspension.\"\n    $allFlows += $flows\n}\n\n#### Write all flows to a CSV file\n\n$allFlows | Export-Csv -Path \"flows.csv\" -NoTypeInformation\n\nWrite-Host \"All flows at risk of suspension written to flows.csv\"\n```\n\n----------------------------------------\n\nTITLE: Creating Service Principal with Power Platform CLI in PowerShell\nDESCRIPTION: This command creates a service principal for a specified Power Platform environment. When executed successfully, it returns the Tenant ID, Application ID, Client Secret, and Expiration date for the newly created service principal.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-create-service-principal-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\>pac admin create-service-principal --environment d3fcc479-0122-e7af-9965-bde57f69ee1d\nConnected as admin@M365x57236226.onmicrosoft.com\nSuccessfully assigned user adde6d52-9582-4932-a43a-beca5d182301 to environment d3fcc479-0122-e7af-9965-bde57f69eeld with security role System Administrator\nTenant ID                            Application ID                       Client Secret                           Expiration\n2b0463ed-efd7-419d-927d-a9dca49d899c adde6d52-9582-4932-a43a-beca5d182301 beY8Q~JBZ~CBDgIKKBjbZ3g6BofKzoZkYj23Hbf 7/31/2024 4:27:03 PM\n```\n\n----------------------------------------\n\nTITLE: Adding a Language in Microsoft Power Platform Admin Center\nDESCRIPTION: This snippet demonstrates how to add a language to a Microsoft Power Platform environment using both the new and classic admin center interfaces. It includes steps for navigating to the language settings and selecting languages to provision.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/enable-languages.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [New admin center](#tab/new)\n 1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/).\n 1. In the navigation pane, select **Manage**.\n 1. In the **Manage** pane, select **Environments**, and then select an environment.\n 1. Select **Settings** in the command bar.\n 1. Expand **Product**, and then select **Languages**.\n \n ## [Classic admin center](#tab/classic)\n 1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/).\n 1. Select **Environments**, and then select an environment.\n 1. Select **Settings**.\n 1. Expand **Product**, and then select **Languages**.\n```\n\n----------------------------------------\n\nTITLE: Building the CoE CLI Source Code\nDESCRIPTION: Compiles and builds the source code for the CoE CLI. Requires completion of prior steps to set up the environment and dependencies. Executing this command outputs a build ready for linking and use.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/overview.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Git Pull Upgrade Command\nDESCRIPTION: Pull latest changes from Git repository for CoE CLI\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/upgrade.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Checking Catalog Submission Status using PAC CLI in Power Platform\nDESCRIPTION: This CLI command checks the status of catalog submissions using the pac catalog status command. It requires a tracking ID and submission type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\npac catalog status --tracking-id 0e6b119d-80f3-ed11-8849-000d3a0a2d9d --type submit\n```\n\n----------------------------------------\n\nTITLE: Enabling Managed Environments with PowerShell\nDESCRIPTION: PowerShell script to enable Managed Environments for a single Power Platform environment by setting the governance configuration with standard protection level.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-enable.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$GovernanceConfiguration = [pscustomobject] @{ \n    protectionLevel = \"Standard\" \n    settings = [pscustomobject]@{ \n        extendedSettings = @{} \n    }\n} \n\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <EnvironmentID> -UpdatedGovernanceConfiguration $GovernanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Restricting All Environment Creation Using PowerShell\nDESCRIPTION: This PowerShell command restricts environment creation to only Global admins, Dynamics 365 admins, and Power Platform admins by configuring tenant settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/control-environment-creation.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$settings = @{ DisableEnvironmentCreationByNonAdminUsers = $true }\nSet-TenantSettings $settings\n```\n\n----------------------------------------\n\nTITLE: Power Apps Canvas App - Vehicle Damage Capture\nDESCRIPTION: Mobile application interface for capturing vehicle damage photos, encoding images as base64 strings and initiating the inspection workflow through a custom connector\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/solution-ideas/app-evvie.md#2025-04-20_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: SDK Operations Reference in Dataverse\nDESCRIPTION: List of core SDK operations tracked across the analytics dashboard including Create, Update, Delete, Retrieve, and Retrieve Multiple calls.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/analytics-common-data-service.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRetrieve, Retrieve Multiple, Delete, Create, Update\n```\n\n----------------------------------------\n\nTITLE: Initializing Package with PowerShell\nDESCRIPTION: This PowerShell command initializes a new package using the Power Apps CLI (pac). It specifies the output directory where the package files will be created. Requires the Power Apps CLI to be installed and configured.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/package-init-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n```powershell\npac package init --outputdirectory c:\\samplepackage\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Output from PowerShell Web API Query\nDESCRIPTION: Example console output from the Get-CatalogItems PowerShell function showing formatted catalog item data in a table with columns for item name, publisher, IDs, version, and status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nCatalog Item Name                   Publisher Name           Catalog Item ID                   Revision ID                          Version Status\n----------------------------------- ------------------------ --------------------------------- -----------------------------------  ------- ---------\nContoso Conference Custom Connector Catalog Conferences Team ContosoConferencesCustomConnector 4e882dd6-74f3-ed11-8849-000d3a0a286b 1.0.0.1 Published\nContoso Themed Components           ContosoPublisher         ContosoThemedComponents           efbc469d-f1b2-ed11-83fd-000d3a0a2d9d 1.0.0.1 Published\n```\n\n----------------------------------------\n\nTITLE: Encoding HTML for Display\nDESCRIPTION: The **EncodeHTML** function encodes special HTML characters in a string to their respective HTML entities, which allows them to be displayed correctly in an HTML context.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-encode-decode.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\nEncodeHTML(ThisItem.description)\n```\n\n----------------------------------------\n\nTITLE: Configure Power BI Dashboard for Power Platform Admin Planning\nDESCRIPTION: This snippet guides the user through setting up the Power BI dashboard for the Power Platform administration planning component. It includes downloading Power BI Desktop, opening the .pbit file, entering the environment URL, saving or publishing the dashboard, and configuring scheduled refresh.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-admin-tasks-component.md#2025-04-20_snippet_1\n\nLANGUAGE: Power BI\nCODE:\n```\n1. Download and install [Microsoft Power BI Desktop](https://www.microsoft.com/download/details.aspx?id=58494).\n\n2. In Power BI Desktop, open the file **Power Platform Administration Planning.pbit**, which can be found in the CoE Starter Kit you downloaded and extracted.\n\n3. Enter the URL of the environment where you imported the solution.\n\n   > [!IMPORTANT]\n   > Don't include the `https://` prefix or the `/` suffix when you enter the environment URL.\n\n4. Save the dashboard locally, or select **Publish** and choose the workspace you want to publish the report to.\n\n5. [Configure scheduled refresh](/power-bi/connect-data/refresh-data#configure-scheduled-refresh) for your Power BI dataset to update the report daily.\n```\n\n----------------------------------------\n\nTITLE: Float Function Range Examples in Power Fx\nDESCRIPTION: Examples demonstrating the behavior of Float function with large numbers and precision limits compared to Decimal function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-value.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nFloat(\"1e100\")\n// Result: 1e100 (Float)\n\nFloat(\"10000000000.0000000001\")\n// Result: 1 (Float)\n\nDecimal(\"10000000000.0000000001\")\n// Result: 10000000000.0000000001 (Decimal)\n```\n\n----------------------------------------\n\nTITLE: Granular App Registration Strategy for Azure DevOps and Power Platform\nDESCRIPTION: A more secure approach creating separate app registrations for Azure DevOps and Power Platform, aligning with the principle of least privilege by limiting API access for each registration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/app-registration-strategy.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| App registration | API permission and type | Description |\n|------------------|-------------------------|-------------|\n| App registration for Azure DevOps | Azure DevOps - user_impersonation - Delegated | The ALM Accelerator canvas app needs Azure DevOps API permissions to communicate with Azure DevOps. |\n| App registration for Power Platform | Dynamics CRM - user_impersonation - Delegated | The pipeline to export solutions from maker development environments and deploy solutions to the validation environment needs permissions to use the Power Platform (Dynamics CRM) API to perform solution operations. |\n| App registration for Power Platform | Power Apps Advisor - user_impersonation - Delegated | The pipeline to deploy solutions to the validation environment needs permissions to use the Power Apps Advisor service to run the solution checker task. |\n```\n\n----------------------------------------\n\nTITLE: Initializing Power Platform Plugin with CLI\nDESCRIPTION: A simple PowerShell command to initialize a new plugin using the Power Platform CLI tool. This command prepares the development environment for creating a new plugin with default configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/plugin-init-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac plugin init\n```\n\n----------------------------------------\n\nTITLE: Exported Versioning Logic for ALM Accelerator Pipelines in YAML\nDESCRIPTION: This snippet shows how to customize the versioning of solutions during export by creating a variable in the export pipeline to preserve version numbers across environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/configure-azuredevops-pipelines.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"build:\n  - name: 1.0.$(Date:yyyyMMdd)$(Rev:.r)\\n    ...\"\n```\n\n----------------------------------------\n\nTITLE: Date Movement Formula and Example for Demo Data\nDESCRIPTION: Formula explaining how date values are automatically moved forward in Power Platform demo data when importing, based on the difference between export and import times. Includes an example of how to manipulate the timestamp to achieve specific date shifts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-date-settings-for-demo-data.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFormula: Imported date = exported date + (date of data import – date of data export)\n\nExample: To move dates forward by 3 months, and import the data on 10/1/2017: change the timestamp in the data.xml file to 7/1/2017.\n```\n\n----------------------------------------\n\nTITLE: Creating an Environment Group in Classic Admin Center - Markdown\nDESCRIPTION: This snippet outlines the steps for creating an environment group in the Classic admin center for Power Platform administrators. It specifies the process of signing in and the steps to select options pertaining to environment groups.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform Admin center](https://admin.powerplatform.microsoft.com/) as a [Power Platform tenant administrator](use-service-admin-role-manage-tenant.md).\n1. Select **Environment groups** in the navigation pane.\n1. On the **Environment groups** page, select **New group**.\n1. In the **Create group** pane that appears:\n   1. Add a name for your group in the **Name** field such as **Personal Productivity**.\n   1. Add a brief description of the group in the **Description** field.\n   1. Select **Create**.\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Name Field in Power Apps\nDESCRIPTION: This snippet demonstrates how to use the SetFocus function in Power Fx to automatically focus the Name field of a data entry screen when it becomes visible. This enhances user experience by allowing for immediate input without additional actions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setfocus.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSetFocus( Name )\n```\n\n----------------------------------------\n\nTITLE: Training Checklist in Markdown\nDESCRIPTION: A markdown checklist highlighting key training strategies to help organizations upskill their makers and develop their Microsoft Power Platform capabilities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/nurture-best-practices.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"checklist\"]\n> * [Set training and upskilling strategy for makers](training-strategy.md)\n> * [Provide internal training events](in-a-day.md)\n> * [Offer solution envisioning workshops](solution-envisioning.md)\n```\n\n----------------------------------------\n\nTITLE: Save Tenant Settings with PowerShell\nDESCRIPTION: This PowerShell command saves the modified tenant settings back to the system. This applies the changes made to environment routing and other governance configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/default-environment-routing.md#2025-04-20_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\nSet-TenantSettings -RequestBody $tenantSettings\n```\n```\n\n----------------------------------------\n\nTITLE: Collecting Item Data with Camera in Power Apps\nDESCRIPTION: Formula to collect item name and camera photo into a collection named MyItems. Creates a new record with text input and camera photo values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-savedata-loaddata.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nCollect( MyItems, { Item: TextInput1.Text, Picture: Camera1.Photo } )\n```\n\n----------------------------------------\n\nTITLE: Aggregating Grouped Data with Sum Function in Power Apps\nDESCRIPTION: Adds a column to the grouped data that contains the sum of the population values for all cities in each country group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-groupby.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( CityPopulationsSum, AddColumns( CitiesByCountry, 'Sum of City Populations', Sum( Cities, Population ) ) )\n```\n\n----------------------------------------\n\nTITLE: Triggering a Flow for a Specific Pipeline in Power Automate\nDESCRIPTION: This snippet shows how to trigger a flow specifically for a pipeline named 'Contoso Pipeline' using Power Automate. It utilizes the equals expression to match the DeploymentPipelineName from the trigger outputs. This approach ensures that the flow runs only when the specified pipeline is involved.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Automate\nCODE:\n```\n@equals(triggerOutputs()?['body/OutputParameters/DeploymentPipelineName'], 'Contoso Pipeline')\n```\n\n----------------------------------------\n\nTITLE: Adding Maker to DevOps and Sharing ALM Accelerator in Bash\nDESCRIPTION: This Bash command adds a maker to Azure DevOps and shares the ALM Accelerator for Power Platform canvas app with them. The 'coe alm maker add' command is used alongside parameters for organization, project, environment, and user credentials.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/overview.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm maker add \n   -o https://dev.azure.com/contoso \n   -p alm-sandbox \n   -e https://contoso-userdev.crm.dynamics.com \n   -aad ALMAcceleratorServicePrincipal \n   -g ALMAcceleratorForMakers -u user@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Listing All Cross-Tenant Connection Reports using PowerShell\nDESCRIPTION: PowerShell script to retrieve all available cross-tenant connection reports for a tenant. The script uses MSAL.PS for authentication and makes a GET request to list all reports.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-cross-tenant-reporting.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module \"MSAL.PS\"\n$AuthResult = Get-MsalToken -ClientId '49676daf-ff23-4aac-adcc-55472d4e2ce0' -Scope 'https://api.powerplatform.com/.default'\n$Headers = @{Authorization = \"Bearer $($AuthResult.AccessToken)\"}\n\ntry \n{\n     # Get all available cross tenant connections reports for a tenant\n    $tenantListReportResponse = Invoke-RestMethod -Method Get -Uri \"https://api.powerplatform.com/governance/crossTenantConnectionReports?api-version=2022-03-01-preview\" -Headers $Headers\n    $report = $tenantListReportResponse | ConvertTo-Json -Depth 3 \n    Write-Host $report \n\n} catch {\n    # Dig into the exception to get the Response details.\n    Write-Host \"Response CorrelationId:\" $_.Exception.Response.Headers[\"x-ms-correlation-id\"]\n    Write-Host \"StatusCode:\" $_.Exception.Response.StatusCode.value__ \n    Write-Host \"StatusDescription:\" $_.Exception.Response.StatusDescription\n    $result = $_.Exception.Response.GetResponseStream()\n        $reader = New-Object System.IO.StreamReader($result)\n        $reader.BaseStream.Position = 0\n        $reader.DiscardBufferedData()\n        $responseBody = $reader.ReadToEnd();\n\n        Write-Host $responseBody\n}\n```\n\n----------------------------------------\n\nTITLE: Pipeline Templates Configuration in ALM Accelerator\nDESCRIPTION: List of default pipeline templates used in ALM Accelerator for Power Platform deployments, including templates for validation, test, and production environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/customize-deployment-pipelines.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild-deploy-validation-SampleSolution.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild-deploy-test-SampleSolution.yml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild-deploy-prod-SampleSolution.yml\n```\n\n----------------------------------------\n\nTITLE: Finding Logs Using Activity ID with Kusto\nDESCRIPTION: This Kusto query finds logs related to a specific action by searching for the activity ID within the operation_Id field in all tables. It uses a union to search across all tables and filters the results based on the provided activity ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-model-driven-apps.md#2025-04-20_snippet_6\n\nLANGUAGE: kusto\nCODE:\n```\n```kusto\nunion *\n| where operation_Id contains \"[ActivityIdHere]\"\n```\n```\n\n----------------------------------------\n\nTITLE: Membership Operator (exactin) in Power Fx\nDESCRIPTION: The 'exactin' operator is used to check if a value belongs to a collection or table in Power Fx, or to perform a case-sensitive substring test.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_7\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Gallery1.Selected exactin SavedItems\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"\\\"Windows\\\" exactin “To display windows in the Windows operating system…”\"\n```\n\n----------------------------------------\n\nTITLE: Creating Service Principal Application Using PAC CLI\nDESCRIPTION: This PowerShell command uses the Microsoft Power Platform CLI to create a Microsoft Entra ID application (SPN) and register it with Microsoft Power Platform for a specific environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerplatform-api-create-service-principal.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\npac admin create-service-principal  --environment <environment id>\n```\n\n----------------------------------------\n\nTITLE: Defining Items property for ExpandMenu in Power Fx\nDESCRIPTION: This code snippet demonstrates how to define the `Items` property for the `ExpandMenu` control using a `Table` function in Power Fx. Each item in the table represents a navigation link, including the icon, label, and the screen to navigate to when selected. This example uses sample screen names that should be replaced with actual screen names in your app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/expandmenu.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n    {\n        Icon: \"PowerApps\", \n        Label: \"Power Apps\", \n        Screen:PowerAppsScreen\n    },{\n        Icon: \"PowerBILogo\", \n        Label: \"Power BI\", \n        Screen:PowerBIScreen\n    },{\n        Icon: \"PowerAutomateLogo\", \n        Label: \"Power Automate\", \n        Screen:PowerAutomateScreen\n    },{\n        Icon: \"Dataverse\", \n        Label: \"Dataverse\", \n        Screen:DataverseScreen\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a UNIVERSAL Authentication Profile with pac auth create\nDESCRIPTION: This snippet demonstrates how to create a UNIVERSAL authentication profile connected to a Dataverse environment using the pac auth create command with the --environment parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-remarks.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\test> pac auth create --environment f2cef599-b112-4803-bb5d-090077017685 --name ConnectionName\n'you@yourcompany.onmicrosoft.com' authenticated successfully.\nValidating connection...\nDefault organization: YourOrganization\nConnected to... YourOrganization\nConnected as you@yourcompany.onmicrosoft.com\nAuthentication profile created\n   * UNIVERSAL ConnectionName                 https://yourcompany.crm.dynamics.com/          : you@yourcompany.onmicrosoft.com              Public\n\nPS C:\\test>\n```\n\n----------------------------------------\n\nTITLE: Defining Search Criteria for Bulk Deletion of System Jobs (Markdown)\nDESCRIPTION: Markdown table showing the search criteria for bulk deleting AsyncOperationBase records older than seven days. It specifies the status, completion date, and excluded system job types.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Group  | Setting   | Criteria | Selected values |\n|---------|---------|---------|------|\n| AND    | Status      | Equals             | Completed   |\n| AND    | Completed On | Older Than X Days  | 7<br><br>Always start with a narrow condition that limits deleted records (**older than 3 years**), then move to progressively wider delete criteria (**older than 3 months**) and then to wider delete criteria (**older than 7 days**). |\n| AND    | System Job Type | Does Not Equal   | Bulk Email <br>Import File Parse<br>Workflow |\n```\n\n----------------------------------------\n\nTITLE: List Soft-Deleted Environments with PowerShell\nDESCRIPTION: PowerShell cmdlet to retrieve a list of soft-deleted environments in Microsoft Power Platform. Used by administrators to identify recoverable environments before restoration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/recover-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n## List soft-deleted environments\nGet-AdminPowerAppSoftDeletedEnvironment\n```\n\n----------------------------------------\n\nTITLE: Initializing PeoplePicker with Office 365 Users Connector in Power Fx\nDESCRIPTION: This snippet demonstrates how to use the Office 365 Users connector to integrate with the PeoplePicker component in Power Apps. It outlines a Power Fx formula to populate a collection named UserCollection, using a search term. This setup is designed to retrieve and display user information, ensuring that selected users can be tracked via the PeoplePicker control's Suggestions_Items property.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/peoplepicker.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect(\n    UserCollection,\n    AddColumns(\n        Filter(\n            Office365Users.SearchUser(\n                {\n                    searchTerm: Self.SearchText,\n                    top: 500\n                }\n            ),\n            !(Mail in Self.SelectedPeople.PersonaKey)\n        ),\n        \"SuggestionImgUrl\",\n        Substitute(\n            JSON(\n                Office365Users.UserPhotoV2(Id),\n                JSONFormat.IncludeBinaryData\n            ),\n            \"\"\"\",\n            \"\"\n        ),\n        \"SuggestionKey\",\n        Mail,\n        \"SuggestionName\",\n        DisplayName,\n        \"SuggestionRole\",\n        JobTitle,\n        \"SuggestionPresence\",\n        \"away\"\n    )\n)\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nAddColumns(\n    Office365Users.SearchUser({ searchTerm: Self.SearchText, top: 500 }),\n    \"SuggestionKey\", Mail, \n    \"SuggestionName\", DisplayName,\n    \"SuggestionRole\", JobTitle\n)\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nPeoplePicker1.SelectedPeople\n```\n\n----------------------------------------\n\nTITLE: Define GitHub Actions Workflow\nDESCRIPTION: This GitHub Actions workflow automates the process of downloading a solution artifact from a Power Platform pipeline, unpacking it, and committing the changes to a Git repository.  It utilizes several steps including checking out the repository, creating a new branch (if specified), downloading the solution, unpacking it, committing changes, and pushing to the branch. The workflow requires specific inputs such as artifact URL, solution name, source branch, and commit message, and it uses secrets for authentication with Dataverse.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines-github-export.md#2025-04-20_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n\"name: Download, unpack and commit the solution to git\nrun-name: Getting ${{ github.event.inputs.solution_name }} from pipelines host environment and committing\non:\n  workflow_dispatch:\n    inputs:\n      artifact_url:\n        description: \\\"The url of the Dataverse record ID for the artifact created by the pipelines (Example: https://[your-env].crm.dynamics.com/api/data/v9.0/deploymentartifacts([your-artifact-id])/artifactfile/$value).\\\"\n        required: true\n      solution_name:\n        description: \\\"Name of the Solution in Dataverse environment\\\"\n        required: true\n      user_name: \n        description: \\\"User name for the commit\\\"\n        required: true\n      source_branch:\n        description: \\\"Branch for the solution commit\\\"\n        required: true\n      target_branch:\n        description: \\\"Branch to create for the solution commit\\\"\n        required: false\n      commit_message:\n        description: \\\"Message to provide for the commit\\\"\n        required: true\npermissions:\n  contents: write\njobs:\n  export-unpack-commit:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n            ref: ${{ github.event.inputs.source_branch }}\n\n      # Commit changes to the existing or new branch\n      - name: create new branch if specified\n        shell: pwsh\n        run: |\n            if('${{ github.event.inputs.target_branch }}' -ne '') {\n                git checkout -b ${{ github.event.inputs.target_branch }} ${{ github.event.inputs.source_branch }}\n            }\n\n      # Export the solution from the artifact created by pipelines\n      - name: download solution from artifact\n        env:\n            CLIENT_ID: ${{secrets.CLIENT_ID}}   \n            TENANT_ID: ${{secrets.TENANT_ID}}   \n            CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}\n        shell: pwsh\n        run: |\n            $aadHost = \\\"login.microsoftonline.com\\\"\n            $url = \\\"${{ github.event.inputs.artifact_url }}\\\"\n            $options = [System.StringSplitOptions]::RemoveEmptyEntries\n            $dataverseHost = $url.Split(\\\"://\\\", $options)[1].Split(\\\"/\\\")[0]\n\n            $body = @{client_id = $env:CLIENT_ID; client_secret = $env:CLIENT_SECRET; grant_type = \\\"client_credentials\\\"; scope = \\\"https://$dataverseHost/.default\\\"; }\n            $OAuthReq = Invoke-RestMethod -Method Post -Uri \\\"https://$aadHost/$env:TENANT_ID/oauth2/v2.0/token\\\" -Body $body\n            $spnToken = $OAuthReq.access_token\n            $headers = New-Object \\\"System.Collections.Generic.Dictionary[[String],[String]]\\\"\n            $headers.Add(\\\"Authorization\\\", \\\"Bearer $spnToken\\\")\n            $headers.Add(\\\"Content-Type\\\", \\\"application/json\\\")\n\n            # Download the managed solution\n            $response = Invoke-RestMethod \\\"${{ github.event.inputs.artifact_url }}\\\" -Method 'GET' -Headers $headers\n            $bytes = [Convert]::FromBase64String($response.value)\n            [IO.File]::WriteAllBytes(\\\"${{ github.event.inputs.solution_name }}_managed.zip\\\", $bytes)\n\n            # Download the unmanaged solution (for now we will need to use string manipulation to get the unmanaged solution URL, until the API provides this value)\n            $unmanaged_artifact_url = \\\"${{ github.event.inputs.artifact_url }}\\\".Replace(\\\"artifactfile\\\", \\\"artifactfileunmanaged\\\")\n            $response = Invoke-RestMethod \\\"$unmanaged_artifact_url\\\" -Method 'GET' -Headers $headers\n            $bytes = [Convert]::FromBase64String($response.value)\n            [IO.File]::WriteAllBytes(\\\"${{ github.event.inputs.solution_name }}.zip\\\", $bytes)\n\n      # Unpack the solution\n      - name: unpack solution\n        uses: microsoft/powerplatform-actions/unpack-solution@v0\n        with:\n          solution-file: \\\"${{ github.event.inputs.solution_name }}.zip\\\"\n          solution-folder: \\\"${{ github.event.repository.name }}\\\"\n          solution-type: 'Both'\n          process-canvas-apps: false\n          overwrite-files: true\n\n      # Commit changes to the existing or new branch\n      - name: commit changes\n        shell: pwsh\n        run: |\n          rm -rf ${{ github.event.inputs.solution_name }}.zip\n          rm -rf ${{ github.event.inputs.solution_name }}_managed.zip\n          git config user.name ${{ github.event.inputs.user_name }}\n          git pull \n          git add --all\n          git commit -am \\\"${{ github.event.inputs.commit_message }}\\\" --allow-empty\n\n      # Push the committed changes to the source branch\n      - name: push to branch\n        shell: pwsh\n        run: |\n          if('${{ github.event.inputs.target_branch }}' -ne '') {\n              git push origin ${{ github.event.inputs.target_branch }}\n          } else {\n              git push origin ${{ github.event.inputs.source_branch }}\n          }\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hour Component in Power FX\nDESCRIPTION: The **Hour** function obtains the hour component of a Date/Time value, returning a number from 0 to 23.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datetime-parts.md#2025-04-20_snippet_3\n\nLANGUAGE: Power FX\nCODE:\n```\nHour( _DateTime_ )\n```\n\n----------------------------------------\n\nTITLE: Merging Localized Content for Copilots with PowerShell PAC Command\nDESCRIPTION: This PowerShell command merges files containing localized content (German in this example) for copilots. It requires specifying the environment ID, translation file path, and solution name as parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-merge-translation-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac copilot merge-translation `\n   --environment 2e250e7a-5607-4fea-aa4e-1aeb7bf79118 `\n   --file ms_store_newTestCopilot.de-DE.json `\n   --solution SolutionName\n```\n\n----------------------------------------\n\nTITLE: Installing MSOnlineExt Module for SharePoint Integration\nDESCRIPTION: PowerShell command to install the MSOnlineExt module required for server-based authentication configuration between Dynamics 365 and SharePoint on-premises. This module must be installed from an administrator PowerShell session.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> Install-Module -Name \"MSOnlineExt\"\n```\n\n----------------------------------------\n\nTITLE: Listing Power Platform Authentication Profiles\nDESCRIPTION: Lists all available authentication profiles on the machine using the pac auth list command. Shows details like index, name, URL, and user information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac auth list\n```\n\nLANGUAGE: powershell\nCODE:\n```\nIndex Active Kind      Name Friendly Name                   Url                                 User                                     Cloud  Type\n[1]   *      UNIVERSAL      Personal Productivity (Default) https://x.crm.dynamics.com/         user@contoso.onmicrosoft.com             Public User\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Nav Control - Power Fx\nDESCRIPTION: Illustrates how to set focus on the Nav control by updating a context variable within Power Fx. The provided formula handles focus changes by appending a random element to the string, ensuring the control responds to focus changes dynamically.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/nav.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nUpdateContext({ctxResizableTextareaEvent:\"SetFocus\" & Text(Rand())});\n```\n\n----------------------------------------\n\nTITLE: Determining User Language ISO Code in Power Apps\nDESCRIPTION: This code snippet sets the user's ISO language code based on their browser language setting. It uses a Switch statement to map the browser language to the corresponding ISO language code choice value, defaulting to English if no match is found.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/extend-canvas-apps.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSet(\n  varISOUserLanguageCode,\n  Switch(\n      Left(\n          Language(),\n          2\n      ),\n      \"ar\",\n      'ISO Language Code'.ar,\n      \"de\",\n      'ISO Language Code'.de,\n      \"en\",\n      'ISO Language Code'.en,\n      \"es\",\n      'ISO Language Code'.es,\n      \"fr\",\n      'ISO Language Code'.fr,\n      \"he\",\n      'ISO Language Code'.he,\n      \"it\",\n      'ISO Language Code'.it,\n      \"ja\",\n      'ISO Language Code'.ja,\n      \"pt\",\n      'ISO Language Code'.pt,\n      \"zh\",\n      'ISO Language Code'.zh,\n      'ISO Language Code'.en\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Connector Blocking Policy in PowerShell\nDESCRIPTION: Shows how to update an existing connector blocking policy for a tenant using the policy ID and a connector blocking definition object.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-off-by-default.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PowerAppDlpConnectorBlockingPolicy -TenantId \"aaaabbbb-0000-cccc-1111-dddd2222eeee\" -PolicyId \"1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5\" -ConnectorBlockingDefinition $connectorBlockingDefinition\n```\n\n----------------------------------------\n\nTITLE: PowerShell Environment Access Assignment\nDESCRIPTION: Script to assign admin access to environments created by a specific user using PowerShell cmdlets\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n$myUserId = $global:currentSession.UserId\n\n#Assign yourself as an admin to each environment created by the user\nGet-AdminPowerAppEnvironment -CreatedBy $deleteDsrUserId | Set-AdminPowerAppEnvironmentRoleAssignment -RoleName EnvironmentAdmin -PrincipalType User -PrincipalObjectId $myUserId\n\n#Retrieve the environment role assignments to confirm\nGet-AdminPowerAppEnvironment -CreatedBy $deleteDsrUserId | Get-AdminPowerAppEnvironmentRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: GitHub Configuration Parameters\nDESCRIPTION: Placeholder values that need to be replaced with actual GitHub configuration settings for the Power Automate flow to work correctly. These include PAT, organization name, repository details, and branch information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines-github-export.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n[GitHub Personal Access Token]\n[GitHub Organization]\n[GitHub Repository]\n[GitHub Workflow YAML File]\n[Source Branch]\n[Target Branch]\n```\n\n----------------------------------------\n\nTITLE: JSON DateTime Example\nDESCRIPTION: Example showing how datetime values are represented in ISO 8601 format with UTC timezone.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"2019-03-31T22:32:06.822Z\"\n```\n\n----------------------------------------\n\nTITLE: Setting Toggle and Checkbox States in Power Apps Test Studio\nDESCRIPTION: Sets the Value property of Toggle and Checkbox controls to false.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setproperty.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerFx\nCODE:\n```\nSetProperty(Toggle1.Value, false)\nSetProperty(Checkbox1.Value, false)\n```\n\n----------------------------------------\n\nTITLE: Storage Overage Image Reference\nDESCRIPTION: Markdown image reference block showing capacity overage UI.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/whats-new-storage.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"mx-imgBorder\"] \n> ![Capacity overage.](media/capacity-overage.png \"Overage\")\n```\n\n----------------------------------------\n\nTITLE: Adding service principal to environment\nDESCRIPTION: Adds the service principal to the specified Power Platform environment. This command grants the service principal access to the environment, enabling the ALM Accelerator to perform operations such as importing and exporting solutions. The service principal is assigned the system administrator security role.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/maker-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"coe alm user add -e https://contoso-dev-user1.crm.dynamics.com\n\"\n```\n\n----------------------------------------\n\nTITLE: Create Environments in a Group - New Admin Center\nDESCRIPTION: This snippet describes how to manually create a new environment within a specified environment group using the new Power Platform Admin Center. It involves navigating to the Environments page, selecting New, choosing a group, and entering environment details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Select **Manage** in the navigation pane.\n2. Go to the **Environments** page.\n3. Select **New** in the command bar.\n4. Select a **group** for your created environment.\n5. Enter the other details.\n6. Select **Save**.\"\n```\n\n----------------------------------------\n\nTITLE: exactin operator usage in Power Platform\nDESCRIPTION: This snippet demonstrates the 'exactin' operator in Power Platform for checking membership. It checks if the selected item in Gallery1 is present in the SavedItems collection or table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Gallery1.Selected exactin SavedItems\"\n```\n\n----------------------------------------\n\nTITLE: One App Registration Strategy for All Purposes\nDESCRIPTION: The simplest app registration strategy involving a single app registration with broad permissions across Azure DevOps and Power Platform services. While easy to manage, this approach violates the principle of least privilege.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/app-registration-strategy.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| App registration | API permission and type | Description |\n|------------------|-------------------------|-------------|\n| Single app registration for all purposes | Azure DevOps - user_impersonation - Delegated | The ALM Accelerator canvas app needs Azure DevOps API permissions to communicate with Azure DevOps. |\n| Single app registration for all purposes | Dynamics CRM - user_impersonation - Delegated | The pipeline to export solutions from maker development environments and deploy solutions to the validation, test, and production environments needs permissions to use the Power Platform (Dynamics CRM) API to perform solution operations. |\n| Single app registration for all purposes | Power Apps Advisor - user_impersonation - Delegated | The pipeline to deploy solutions to the validation environment needs permissions to use the Power Apps Advisor service to run the solution checker task. |\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: This command verifies the currently installed version of Node.js to ensure it meets the prerequisite of version 16 or higher for the CoE CLI application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/install.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Adding PowerApps Account with Credentials\nDESCRIPTION: Commands to authenticate with PowerApps using predefined credentials to avoid prompt.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$pass = ConvertTo-SecureString \"password\" -AsPlainText -Force\nAdd-PowerAppsAccount -Username user@contoso.com -Password $pass\n```\n\n----------------------------------------\n\nTITLE: Querying All Masked Columns in a Record via HTTP API\nDESCRIPTION: This HTTP GET request retrieves all masked columns in a specific record with unmasked data. It requires replacing placeholders with actual values for the URL, table collection name, and record ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-manage-masking-rules.md#2025-04-20_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttps://<url>/api/data/v9.1/<table collection name>(<recordid>)?UnMaskedData=true\n```\n\n----------------------------------------\n\nTITLE: Granting Customer Engagement Apps Access to SharePoint Site in PowerShell\nDESCRIPTION: PowerShell commands to grant customer engagement apps access to the SharePoint site with specified scope (site, sitecollection, or sitesubscription) and permission level.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n$app = Get-SPAppPrincipal -NameIdentifier $issuer -Site \"https://sharepoint.contoso.com/sites/crm/\"  \nSet-SPAppPrincipalPermission -AppPrincipal $app -Site $site.Rootweb -Scope \"sitecollection\" -Right \"FullControl\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Help URL for Entities\nDESCRIPTION: Allows administrators to replace default help content with a custom global help URL for customizable entities. Provides options to append dynamic parameters to the help URL for more context-specific assistance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-general-tab.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nGlobal custom Help URL: To replace the default Help with a single URL for all customizable tables, enter the URL here.\n```\n\n----------------------------------------\n\nTITLE: Add Environments to Environment Group in Classic Admin Center\nDESCRIPTION: This snippet describes how to manually add existing environments to an environment group using the classic Power Platform Admin Center. It requires navigating to the Environment groups, selecting the target group, and then selecting environments to add.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Select **Environment groups** in the navigation pane.\n2. Select the target group (the group you want to add environments into).\n3. Select the **Add environments** button in the command bar.\n4. Select one or more environments from the list.\n5. Select **Add**.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Learn More URL via PowerShell\nDESCRIPTION: PowerShell command to set the Learn More URL for maker onboarding in a specific Managed Environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/welcome-content.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSetManagedEnvironmentMakerOnboardingLearnMoreUrl -EnvironmentId 8d996ece-8558-4c4e-b459-a51b3beafdb4 -LearnMoreUrl \"www.microsoft.com\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Migration Request Status (Source Admin)\nDESCRIPTION: Command to view the status and MigrationID of the submitted migration request.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nTenantToTenant-ViewMigrationRequest\n```\n\n----------------------------------------\n\nTITLE: Creating Dataverse Instance - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: Describes the command to create a new Dataverse instance within the tenant, outlining required and optional parameters including environment type and various attributes related to the instance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## pac admin create\n\nCreates a Dataverse instance in your tenant.\n\n### Required Parameters for admin create\n\n#### `--type` `-t`\n\nSets the environment Type.\n\nUse one of these values:\n- `Trial`\n- `Sandbox`\n- `Production`.\n```\n\n----------------------------------------\n\nTITLE: Displaying Last Characters of Product Names in a Gallery using Right Function in Power Fx\nDESCRIPTION: Example of setting the Text property of a label in a gallery to show the last three characters of each product name in an Inventory collection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-left-mid-right.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nRight(ThisItem.ProductName, 3)\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Connectors\nDESCRIPTION: This command returns a list detailing all custom connectors available in the tenant, which can be useful for assessing integration capabilities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_36\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminPowerAppConnector\n```\n\n----------------------------------------\n\nTITLE: Installing Power Platform Build Tools Using YAML in Azure Pipelines\nDESCRIPTION: This snippet installs the default set or specific versions of Power Platform Build Tools in your Azure Pipelines environment. It ensures that the necessary tools are available for executing other build tasks on the pipeline agent. Dependencies include the Azure Pipelines agent and network connectivity for downloading tool versions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n# Installs default Power Platform Build Tools\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2\n  displayName: 'Power Platform Tool Installer'\n```\n\nLANGUAGE: yml\nCODE:\n```\n# Installs specific versions of the Power Platform Build Tools\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.tool-installer.PowerPlatformToolInstaller@2\n  displayName: 'Power Platform Tool Installer'\n  inputs:\n    DefaultVersion: false\n    XrmToolingPackageDeploymentVersion: 3.3.0.928\n```\n\n----------------------------------------\n\nTITLE: Analyzing Form Usage and Performance by Location with Kusto\nDESCRIPTION: This Kusto query analyzes form usage and performance in different locations by calculating the average duration of page views based on the form name, client city, and client country or region.  It summarizes the average duration by these dimensions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-model-driven-apps.md#2025-04-20_snippet_8\n\nLANGUAGE: kusto\nCODE:\n```\n```kusto\npageViews\n| summarize avg(duration) by name, client_City, client_CountryOrRegion\n```\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for mspcat_lastsyncdate Field\nDESCRIPTION: Defines the logical name for the Last Sync Date field, which represents the last time this field was synced with TPS.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`mspcat_lastsyncdate`\n```\n\n----------------------------------------\n\nTITLE: Requirements Notice Block for User Management\nDESCRIPTION: Markdown note block describing requirements and limitations for user account management, including security group behavior and admin access modes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-users.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> You can also remove all security roles from a user to prevent the user from signing in to and accessing customer engagement apps. However, this doesn't remove the license from the user, and the user will remain in the list of enabled users. We don't recommend using this method to remove access from a user.  \n>\n> When you use a security group to manage enabling or disabling users or provisioning access to an org, nested security groups within the selected security group aren't supported and are ignored.\n>\n> You can [assign records](/powerapps/user/assign-or-share-records) to a disabled user account and also [share reports](/dynamics365/customer-engagement/basics/share-report-users-teams) and accounts with them.\n```\n\n----------------------------------------\n\nTITLE: Converting Untyped JSON Values to Boolean in Power Fx\nDESCRIPTION: Shows how to use the Boolean function with untyped JSON values, including handling of true, false, and null values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-boolean.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nBoolean( ParseJSON( \"{ \\\"bool\\\": true }\" ).bool )\nBoolean( ParseJSON( \"{ \\\"bool\\\": null }\" ).bool )\nBoolean( ParseJSON( \"{ \\\"bool\\\": \\\"true\\\" }\" ).bool )\nBoolean( ParseJSON( \"[ true, false, null ]\" ).bool )\n```\n\n----------------------------------------\n\nTITLE: Query Multiple Policy Templates via SDK for .NET\nDESCRIPTION: This snippet demonstrates how to query for multiple Policy Template records using the SDK for .NET. It utilizes the Query data operation. Refer to the linked documentation for details on constructing queries and handling the results.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n\"Query data\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Grouped Records in Power Apps\nDESCRIPTION: Filters the grouped records to include only countries that have the letter 'e' in their names, excluding Spain and Italy from the results.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-groupby.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( CitiesByCountryFiltered, Filter( CitiesByCountry, \"e\" in Country ) )\n```\n\n----------------------------------------\n\nTITLE: Installing ALM Accelerator with CoE CLI in Bash\nDESCRIPTION: This Bash command installs the ALM accelerator using the configuration file generated previously. It utilizes the 'coe alm install' command and requires the 'quickstart.json' configuration file as input.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/overview.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm install -f quickstart.json\n```\n\n----------------------------------------\n\nTITLE: Deleting Bulk Deletion Jobs Process\nDESCRIPTION: Step-by-step instructions for creating a bulk deletion job to remove old system job instances. This process helps manage storage by cleaning up historical bulk deletion job records while allowing for scheduled automated cleanup.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/free-storage-space.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSystem Job Type – Equals – Bulk Delete\nStatus Reason – Equals – Succeeded\nCompleted On – Older Than X Months – 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving DLP Policy List\nDESCRIPTION: This command retrieves a list of existing Data Loss Prevention policies for the signed-in admin's tenant, facilitating policy management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_38\n\nLANGUAGE: powershell\nCODE:\n```\nGet-DlpPolicy\n```\n\n----------------------------------------\n\nTITLE: Identifying Resource-Waiting Jobs in SQL\nDESCRIPTION: SQL query to find system jobs that are waiting for system resources to become available, helping identify potential bottlenecks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT name, statuscode, postponeuntil, createdon, modifiedon\nFROM asyncoperationbase WITH (NOLOCK)\nWHERE statuscode = 0\nORDER BY postponeuntil DESC\n```\n\n----------------------------------------\n\nTITLE: Updating Context Variable and Binding to Panel Properties\nDESCRIPTION: This set of Power Fx expressions first updates the context variable `showHideDialog` to `false` when the close button is selected in the Panel (`OnCloseSelect`). Then, the `Visible` property of the Panel is bound to the `showHideDialog` variable, allowing it to be shown or hidden based on the variable's value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/panel.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ showHideDialog: false })\n```\n\n----------------------------------------\n\nTITLE: Exporting Dataverse Data using YAML Pipeline\nDESCRIPTION: YAML configuration for exporting data from a Power Platform environment using a schema file. Includes authentication and file output settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.export-data.PowerPlatformExportData@2\n  displayName: 'Power Platform Export Data '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    SchemaFile: 'C:\\tempschema.xml'\n    DataFile: exportdata.zip\n    Overwrite: true\n```\n\n----------------------------------------\n\nTITLE: PowerShell Add-on Allocation Script\nDESCRIPTION: Script to allocate PowerAutomatePerProcess add-on to a specific Power Platform environment. Uses Azure PowerShell module for authentication and makes REST API calls to the Power Platform API. Requires tenant ID and environment ID as inputs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-allocate-capacity-addons.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n#Install the module\nInstall-Module -Name Az.Accounts\n\n# Set variables for your session\n$TenantId = \"YOUR_TENANT_GUID_FROM_Microsoft Entra ID\"\n$EnvironmentId = \"YOUR_POWER_PLATFORM_ENVIRONMENT_ID_HERE\"\n\nWrite-Host \"Creating a session against the Power Platform API\"\n\nConnect-AzAccount\n$AccessToken = Get-AzAccessToken -TenantId $TenantId -ResourceUrl \"https://api.powerplatform.com/\"\n\n$headers = @{ 'Authorization' = 'Bearer '+$AccessToken.Token }\n$headers.Add('Content-Type', 'application/json')\n\n$patchRequestBody =  \"{`\"currencyAllocations`\": `\"[{currencyType: `\"PowerAutomatePerProcess`\", allocated:1}]`\" }\"\n\nWrite-Host \"Calling patch to adjust add-on allocations...\"\n\n$patchRequestResponse = Invoke-RestMethod -Method Patch -Uri \"https://api.powerplatform.com/licensing/environments/$EnvironmentId/allocations?api-version=2022-03-01-preview\" -Headers $headers -Body $patchRequestBody\n\n$patchRequestResponse\n```\n\n----------------------------------------\n\nTITLE: Using the Theme Gallery App\nDESCRIPTION: This snippet describes the procedure for app makers to browse existing themes in the Theme Gallery app and download corresponding template apps in either Phone or Tablet layout. It guides users on accessing templates based on their chosen layouts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/theming-components.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [make.powerapps.com](<https://make.powerapps.com>).\n1. Select **New** > **Canvas App**.\n1. Select ***...*** > **Open** > **Browse Files**, and then select the template file downloaded from the theme gallery.\n1. After it's opened, the theme will automatically be applied to controls or components that you add to the screen.\n    ![New app with theme.](media/theming-16.png \"New app with theme\")\n```\n\n----------------------------------------\n\nTITLE: Removing Email Attachments using Advanced Find in Dynamics 365\nDESCRIPTION: This snippet outlines the steps to use Advanced Find within Dynamics 365 to locate and remove email attachments based on criteria such as file size. It describes how to access Advanced Find, specify criteria for attachments, and delete the attachments from the identified email messages.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/free-storage-space.md#2025-04-20_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n1. Sign in to the [Power Platform Admin center](https://admin.powerplatform.microsoft.com).\n\n2. Select **Environments**, select an environment from the list, and then select **Open**.\n\n3. In the upper-right corner, select **Advanced Find** (![Advanced find button.](media/advanced-find-button2.png)).  \n  \n4. In the **Look for** list, select **Email Messages**.  \n  \n5. In the search criteria area, add criteria, for example:  \n  \n   **Attachments (Item)**  \n  \n   **File Size (Bytes)** – **Is Greater Than** - In the text box, type a byte value, such as 1,048,576 (binary for 1 MB).  \n\n   :::image type=\"content\" source=\"media/free-storage-method3a.png\" alt-text=\"Screenshot that shows where you can find attachments in an Advanced Find.\" lightbox=\"media/free-storage-method3a.png\":::\n\n6. Choose **Results**.  \n  \n7. You now have a list of email messages that have attachments that are larger than 'X' bytes. Review the emails and delete the attachments as needed.  \n  \n   :::image type=\"content\" source=\"media/free-storage-method3b.png\" alt-text=\"Screenshot that shows the selected emails list based on a search criteria.\" lightbox=\"media/free-storage-method3b.png\" :::\n```\n\n----------------------------------------\n\nTITLE: Generating ALM Configuration with CoE CLI in Bash\nDESCRIPTION: This Bash command generates a JSON configuration file for installing the ALM accelerator. It uses the 'coe alm generate install' command to produce a 'quickstart.json' file. Prerequisites include installing the CoE CLI and having an Azure DevOps setup. The generated file specifies parameters for Microsoft Entra ID and other resources.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/overview.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm generate install -o quickstart.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minute Component in Power FX\nDESCRIPTION: The **Minute** function retrieves the minute component from a Date/Time value, returning a number from 0 to 59.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-datetime-parts.md#2025-04-20_snippet_4\n\nLANGUAGE: Power FX\nCODE:\n```\nMinute( _DateTime_ )\n```\n\n----------------------------------------\n\nTITLE: Registering Admin Management Application with Power Platform API\nDESCRIPTION: This HTTP PUT request registers a new management application with Power Platform. It requires a bearer token obtained using username and password authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerplatform-api-create-service-principal.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT https://api.bap.microsoft.com/providers/Microsoft.BusinessAppPlatform/adminApplications/{CLIENT_ID_FROM_AZURE_APP}?api-version=2020-10-01\nHost: api.bap.microsoft.com\nAccept: application/json\nAuthorization: Bearer eyJ0eXAiOi...\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Dataverse Model Using Settings Template File\nDESCRIPTION: PowerShell command that regenerates code using a previously saved settings template file. This allows for quick regeneration of files when changes occur without having to specify all parameters again.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/modelbuilder-build-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npac modelbuilder build `\n  --outdirectory c:\\src\\MyApps\\Model `\n  --settingsTemplateFile c:\\src\\MyApps\\Model\\builderSettings.json\n```\n\n----------------------------------------\n\nTITLE: Submit Catalog Item using Web API\nDESCRIPTION: This PowerShell function demonstrates how to submit a catalog item using the Dataverse Web API and the `mspcat_SubmitCatalogApprovalRequest` message. The function converts the submission file to a base64 encoded string and includes it in the request body. The function depends on `$baseURI` and `$baseHeaders` being defined using the `Connect` function. It returns a hashtable containing the `CertificationRequestId` and `AsyncOperationId`.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nfunction SubmitCatalogApprovalRequest {\n   param (\n      [Parameter(Mandatory)]\n      [System.IO.FileInfo]\n      $pathToSubmissionFile\n   )\n\n   $uri = $baseURI + 'mspcat_SubmitCatalogApprovalRequest'\n\n   $encodedApprovalRequest = [System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes($pathToSubmissionFile.FullName))\n\n   $body = @{\n      EncodedApprovalRequest = $encodedApprovalRequest\n   } | ConvertTo-Json\n\n   $postHeaders = $baseHeaders.Clone()\n   $postHeaders.Add('Content-Type', 'application/json')\n\n   $results = Invoke-RestMethod `\n      -Method Post `\n      -Uri $uri `\n      -Headers $postHeaders `\n      -Body $body\n\n   return   @{\n      CertificationRequestId = $results.CertificationRequestId\n      AsyncOperationId = $results.AsyncOperationId\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Solution Upgrade with Service Principal Authentication\nDESCRIPTION: YAML configuration for upgrading a Power Platform solution using Service Principal authentication. This snippet shows how to specify a custom maximum wait time for the asynchronous operation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.apply-solution-upgrade.PowerPlatformApplySolutionUpgrade@2\n  displayName: 'Power Platform Apply Solution Upgrade '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n    SolutionName: 'Contoso_sample'\n    MaxAsyncWaitTime: 45\n```\n\n----------------------------------------\n\nTITLE: Conditional Text Display based on Language in Power Apps\nDESCRIPTION: This snippet sets the Text property of a label on the 'Target' screen to display different text based on the value of the 'Language' context variable. If the 'Language' variable is \"English\", it displays \"Hello!\"; otherwise, it displays \"Hola!\".\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-updatecontext.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\n\"If(Language=\\\"English\\\", \\\"Hello!\\\", \\\"Hola!\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Finding Issues Using Session ID with Kusto\nDESCRIPTION: This Kusto query finds issues related to a specific user session by searching for the session ID in all tables. It uses a union to search across all tables and filters the results based on the provided session ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-model-driven-apps.md#2025-04-20_snippet_7\n\nLANGUAGE: kusto\nCODE:\n```\n```kusto\nunion *\n| where session_Id == '[sessionIdHere]'\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Solution Checker via PowerShell\nDESCRIPTION: PowerShell command to disable solution checker enforcement for a specific environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-solution-checker.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSetManagedEnvironmentSolutionCheckerEnforcementLevel -EnvironmentId 8d996ece-8558-4c4e-b459-a51b3beafdb4 -Level none\n```\n\n----------------------------------------\n\nTITLE: Using ForAll for On-Demand Table Filtering in Power Apps\nDESCRIPTION: Alternative approach using ForAll to filter products and create a new table with order quantities. This may be simpler to read but has limitations with delegation for large datasets.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll( Products,\n    If( 'Quantity Requested' > 'Quantity Available',\n        {\n            Product: Product,\n            'Quantity To Order': 'Quantity Requested' - 'Quantity Available'\n        }\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Using Proper Function with String Input in Power Fx\nDESCRIPTION: Converts the first letter of each word to uppercase if it's lowercase, and converts any other uppercase letters to lowercase. The example uses a text-input control named 'Author' containing 'E. E. CummINGS' as input.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-lower-upper-proper.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nProper( Author.Text )\n```\n\n----------------------------------------\n\nTITLE: Retrieve Tenant Settings with PowerShell\nDESCRIPTION: This PowerShell command retrieves the tenant settings and stores them in the `$tenantSettings` variable. This is necessary to modify and update tenant-level configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/default-environment-routing.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\n$tenantSettings = Get-TenantSettings  \n```\n```\n\n----------------------------------------\n\nTITLE: Creating solution branch in Azure DevOps\nDESCRIPTION: Creates a solution branch in an Azure DevOps repository for a specific Power Platform solution. This command configures the necessary Azure Pipelines for the created branch, enabling makers to build and test changes in isolation before merging them into the main branch.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/maker-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"coe alm branch \\\n-o https://dev.azure.com/dev12345 \\\n-p alm-sandbox \\\n-d MySolution1\n\"\n```\n\n----------------------------------------\n\nTITLE: Remove Environment from Group - Classic Admin Center\nDESCRIPTION: This snippet outlines the process of removing an environment from an environment group using the classic Power Platform Admin Center. This process involves navigating to Environment groups, selecting the target group and environment, and then choosing to remove it from the group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Select **Environment groups** in the navigation pane.\n2. Select the group.\n3. Select the environment you wish to remove.\n4. Select **Remove from group** in the command bar.\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Sandbox Environment with pac admin create in PowerShell\nDESCRIPTION: This snippet demonstrates how to create a sandbox environment with default settings (USD currency, English language, and United States region) using the pac admin create command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-create-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin create `\n  --name \"Contoso Test\" `\n  --type Sandbox `\n  --domain ContosoTest\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Policies for Pull Request Validation - YAML\nDESCRIPTION: Provides the YAML setup needed for triggering the pipeline execution when a pull request is created on a specified branch. It includes configuration for build validation and determining the conditions under which builds are executed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-components-manually.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Branch policy configuration\npolicies:\n  - build:\n      pipeline: YourPipelineName\n      path: '/path/to/trigger'\n      trigger: automatic\n      requirement: required\n\n```\n\n----------------------------------------\n\nTITLE: Generating Environment-Specific Configuration\nDESCRIPTION: This command generates an environment-specific configuration file (data.json) for the CoE ALM Accelerator. This allows tailored configurations for each environment, such as connection details and user assignments.  The resulting JSON can then be used to install or update ALM configurations specific to the target environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm generate install -o data.json\n```\n\n----------------------------------------\n\nTITLE: Recover Deleted Environment with PowerShell\nDESCRIPTION: PowerShell cmdlet to recover a soft-deleted environment by specifying the environment name. Includes a wait parameter to ensure completion of the recovery process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/recover-environment.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n## Attempt a recover operation on a soft-deleted environment\nRecover-AdminPowerAppEnvironment -EnvironmentName $environmentName -WaitUntilFinished $true\n```\n\n----------------------------------------\n\nTITLE: Updating SameSite Attribute via API in Dynamics 365\nDESCRIPTION: This JavaScript code snippet is used to update the 'samesitemodeforsessioncookie' attribute of the organization entity in Dynamics 365 via a PATCH request. The code constructs an API request with the desired SameSite value (1 for None, 2 for Lax) and sends it to the Dynamics 365 organization.  It requires the organization ID and appropriate permissions to modify the organization entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/samesite-cookie-mgmt.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst orgId = \"<dynamics-org-id>\"; \n\n    const url = `/api/data/v9.0/organizations(${orgId})`; \n\n    fetch(url, { \n        method: \"PATCH\", \n        headers: { \n            \"OData-MaxVersion\": \"4.0\", \n            \"OData-Version\": \"4.0\", \n            \"Accept\": \"application/json\", \n            \"Content-Type\": \"application/json; charset=utf-8\", \n            \"Prefer\": \"return=representation\" \n        }, \n        body: JSON.stringify({ \n            samesitemodeforsessioncookie: 1 // 1:None, 2:Lax \n        }) \n    }) \n    .then(response => { \n        if (response.ok) { \n            return response.json(); \n        } else { \n            throw new Error(\"Error updating: \" + response.statusText); \n        } \n    }) \n    .then(data => console.log(\" Update successful:\", data)) \n    .catch(error => console.error(\"Update failed:\", error));\n```\n\n----------------------------------------\n\nTITLE: Invoking Dataverse Web API with Trace Context\nDESCRIPTION: Examples of how to pass the trace-parent value to the Dataverse Web API, either in the POST body or as a query string parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/distributed-tracing-details.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npostData(environmentUrl + \"api/data/v9.0/\" + customApiName, token, ...)\n```\n\nLANGUAGE: javascript\nCODE:\n```\npostData(environmentUrl + \"api/data/v9.0/\" + customApiName + \"?tag=01-0af...\")\n```\n\n----------------------------------------\n\nTITLE: Downloading Connector with Basic Configuration in PowerShell\nDESCRIPTION: This command downloads a specified connector to the current directory. It requires the connector-id parameter to identify the connector to be downloaded.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-download-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac connector download `\n  --connector-id 00000000-0000-0000-0000-000000000000 \n```\n\n----------------------------------------\n\nTITLE: AadGroupCanvasConfiguration in customDeploymentConfiguration.json\nDESCRIPTION: This snippet configures the sharing of canvas apps with Microsoft Entra groups after solution importation using configuration files. Prerequisites include obtaining schema names and group IDs. Critical parameters are group IDs and canvas names for sharing apps with specific role permissions like `CanView`, `CanEdit`. The configuration ensures secure, role-based access management in Power Platform environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-data-deployment-configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AadGroupCanvasConfiguration\": [\n    {\n      \"aadGroupId\": \"#{canvasshare.aadGroupId}#\",\n      \"canvasNameInSolution\": \"cat_devopskitsamplecanvasapp_c7ec5\",\n      \"roleName\": \"#{canvasshare.roleName}#\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Connector in Current Environment using pac connector create\nDESCRIPTION: This PowerShell command creates a connector in the environment of the currently active auth profile. It uses the 'pac connector create' command with API definition and properties files.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-create-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac connector create `\n  --api-definition-file ./apiDefinition.json `\n  --api-properties-file ./apiProperties.json\n```\n\n----------------------------------------\n\nTITLE: Listing Dataverse environments with pac env list\nDESCRIPTION: This command lists all Dataverse environments available from the Global Discovery Service. It supports filtering to show only environments containing specific criteria.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/env.md#2025-04-20_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\npac env list\n```\n\nLANGUAGE: cli\nCODE:\n```\npac env list --filter \"<filter criteria>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query String Parameters in JavaScript for Microsoft Power Platform\nDESCRIPTION: Illustrates the deprecated getQueryStringParameters method and its replacement using formContext.data.attributes. This change makes retrieval of non-entity bound data consistent across entity forms, metadata-driven dialogs, and task-based flows.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nXrm.Page.context.getQueryStringParameters()\n\n// Replacement\nformContext.data.attributes\n```\n\n----------------------------------------\n\nTITLE: Language Tag Function Example\nDESCRIPTION: Example demonstrating how to use the Text function with language formatting parameters to display supported languages.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nText( 1234, \"\", )\n```\n\n----------------------------------------\n\nTITLE: Exporting Flows to CSV\nDESCRIPTION: This command exports all flows in the tenant into a CSV file for review or backup, allowing for easier data management and reporting.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_32\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminFlow | Export-Csv -Path '.\\FlowExport.csv'\n```\n\n----------------------------------------\n\nTITLE: Importing Dataverse Data using YAML Pipeline\nDESCRIPTION: YAML configuration for importing data into a Power Platform environment. Specifies authentication and data file input settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.import-data.PowerPlatformImportData@2\n  displayName: 'Power Platform Import Data '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    DataFile: 'C:\\Data\\Import.zip'\n```\n\n----------------------------------------\n\nTITLE: Listing Authentication Profiles with pac auth list\nDESCRIPTION: This snippet shows the output of the pac auth list command, revealing a UNIVERSAL authentication profile without a specified Dataverse environment URL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-remarks.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nIndex Active Kind      Name Friendly Name Url User                Cloud  Type\n[1]   *      UNIVERSAL                        you@yourcompany.com Public OperatingSystem\n```\n\n----------------------------------------\n\nTITLE: Displaying Restricted Data Access Table in HTML\nDESCRIPTION: An HTML table showing the screening and background checks required for Microsoft personnel to access Dynamics 365 US Government customer content. It includes various checks such as U.S. citizenship verification, employment history, and criminal background checks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/microsoft-dynamics-365-government.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n<thead>\n  <tr>\n    <th colspan=\"2\">Restricted Data Access</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><b>Microsoft personnel screening and background checks</b></td>\n    <td><b>Description</b></td>\n  </tr>\n  <tr>\n    <td>U.S. Citizenship</td>\n    <td>Verification of U.S. citizenship</td>\n  </tr>\n  <tr>\n    <td>Employment History Check</td>\n    <td>Verification of seven (7) year employment history</td>\n  </tr>\n  <tr>\n    <td>Education Verification</td>\n    <td>Verification of highest degree attained</td>\n  <tr>\n    <td>Social Security Number (SSN) Search</td>\n    <td>Verification that the provided SSN is valid</td>\n  </tr>\n  <tr>\n    <td>Criminal History Check</td>\n    <td>A seven (7) year criminal record check for felony and misdemeanor offenses at the state, county, and local level and at the federal level</td>\n  </tr>\n  <tr>\n    <td>Office of Foreign Assets Control List (OFAC)</td>\n    <td>Validation against the Department of Treasury list of groups with whom U.S. persons are not allowed to engage in trade or financial transactions</td>\n  </tr>\n  <tr>\n    <td>Bureau of Industry and Security List (BIS)</td>\n    <td>Validation against the Department of Commerce list of individuals and tables barred from engaging in export activities</td>\n  </tr>\n  <tr>State-adjudicated review of federal and state criminal history by state CSA appointed authority within each state that has signed up for the Microsoft CJIS IA program\n    <td>Office of Defense Trade Controls Debarred Persons List (DDTC)</td>\n    <td>Validation against the Department of State list of individuals and tables barred from engaging in export activities related to the defense industry</td>\n  </tr>\n    <td>Fingerprinting Check</td>\n    <td>Fingerprint background check against FBI databases</td>\n  </tr>\n  <tr>\n    <td>CJIS Background Screening</td>\n    <td>State-adjudicated review of federal and state criminal history by state CSA appointed authority within each state that has signed up for the Microsoft CJIS IA program</td>\n  </tr>\n  <tr>\n    <td>Department of Defense IT-2</td>\n    <td>Staff requesting elevated permissions to customer data or privileged administrative access must pass Department of Defense IT-2 adjudication based on a successful OPM Tier 3 investigation</td>\n  </tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Encoding Images as Base64 JSON in Power Fx\nDESCRIPTION: This snippet demonstrates encoding an image control's content into a base64 JSON string. A Button press triggers the conversion, which includes binary data in the JSON output suitable for embedding in JSON documents.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_11\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( ImageJSON, JSON( SampleImage, JSONFormat.IncludeBinaryData ) )\n```\n\n----------------------------------------\n\nTITLE: Generic External URL Pattern\nDESCRIPTION: Example of how keywords are formatted in the external URL for document suggestions. Shows the basic structure with multiple keywords separated by ampersands.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/enable-document-suggestions.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://contoso.com/search?keywordA&keywordB&keywordC\n```\n\n----------------------------------------\n\nTITLE: Installing Application Dependencies using npm (cmd)\nDESCRIPTION: This command installs the necessary application dependencies required for the CoE CLI from the package.json file. It's a standard Node.js practice for preparing the project environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/non-administrator-local-install.md#2025-04-20_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding Email Recipients to Weekly Digest Using PowerShell\nDESCRIPTION: PowerShell script that adds email addresses to receive the Power Platform weekly admin digest. After running this script, the added email addresses will appear in the Additional recipients box in the Usage insights section of the Managed Environments settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-usage-insights.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$tenantSettings = Get-TenantSettings  \n($tenantSettings.powerPlatform.governance) | Add-Member -MemberType NoteProperty -Name additionalAdminDigestEmailRecipients -Value 'fakeEmail@contoso.com;otherFakeEmail@contoso.com'  \nSet-TenantSettings -RequestBody $tenantSettings\n```\n\n----------------------------------------\n\nTITLE: Using ColorValue Function with Hex Values in Power Fx\nDESCRIPTION: Illustrates how to use the ColorValue function with 6-digit and 8-digit hexadecimal color values. The examples show gold color and coral with 50% alpha.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nColorValue(\"#ffd700\")  // Same as \"Gold\"\nColorValue(\"#ff7f5080\")  // \"Coral\" with 50% alpha\n```\n\n----------------------------------------\n\nTITLE: Clearing Selected Items in Fluent Detail List\nDESCRIPTION: Code to clear the current selection in the grid by setting an InputEvent with a random suffix to ensure the event is processed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/detailslist.md#2025-04-20_snippet_13\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ctxTableEvent:\"ClearSelection\"&Text(Rand())})\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Backup for Power Platform Environment using PowerShell\nDESCRIPTION: This PowerShell command creates a manual backup for a specific Power Platform environment using the Power Platform CLI (pac). The command requires an environment GUID and allows setting a custom label for the backup.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-backup-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin backup `\n  --environment 00000000-0000-0000-0000-000000000000 `\n  --label \"Manual Backup October 2022\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Plug-in Performance After Upgrade\nDESCRIPTION: This Kusto query calculates the average duration of plug-in executions, helping to identify performance changes after a plug-in upgrade.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-dataverse.md#2025-04-20_snippet_4\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where ['type'] == \"Plugin\"\n| where name startswith \"[InsertYourPluginName]\"\n| summarize avg(duration) by name\n```\n\n----------------------------------------\n\nTITLE: Removing Members from a Sales Territory Procedure in Markdown\nDESCRIPTION: Step-by-step instructions for removing members from a sales territory in Power Platform, including selecting members from the existing list and using the removal function with a note about refreshing to see updated results.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/add-remove-territory-members.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n   **Remove people from a sales territory**  \n  \n   1.  In the list of members, select the people you want to remove from the sales territory, and then on the ribbon, choose **Remove Members**.  \n  \n   2.  In the **Remove Members** dialog box, choose **Remove**.  \n  \n       > [!NOTE]\n       >  When you remove someone from a sales territory, the updated list of members isn't displayed until you refresh the page.\n```\n\n----------------------------------------\n\nTITLE: Launching Plugin Registration Tool with Power Platform CLI\nDESCRIPTION: Command to download and launch the Plugin Registration Tool (PRT). On first execution, it downloads and launches the tool. On subsequent executions, it only launches the existing installation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-prt-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac tool prt\n```\n\n----------------------------------------\n\nTITLE: Creating RSA Key in Azure Key Vault\nDESCRIPTION: Process for generating an RSA encryption key with specific configurations in Azure Key Vault, supporting key sizes of 2048 or 3072 bits\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/customer-managed-key.md#2025-04-20_snippet_0\n\nLANGUAGE: azure\nCODE:\n```\n1. Select \"Generate/Import\"\n2. Set options:\n   - Options: \"Generate\"\n   - Name: [Custom Key Name]\n   - Key type: \"RSA\"\n   - RSA key size: \"2048\" or \"3072\"\n```\n\n----------------------------------------\n\nTITLE: Catalog Item Definition Submission - JSON Example\nDESCRIPTION: This JSON example defines the structure for submitting a catalog item with specific details including ID, display name, description, and offer details. It's crucial for identifying and managing the catalog item within the platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submission-reference.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"catalogItemDefinition\": {\n   \"id\": \"ContosoTravelsApp\",\n   \"displayName\": \"Contoso Travel Expense App\",\n   \"description\": \"Submit expenses on the go!\",\n   \"offer\": {\n   \"businessCategories\": [526430000, 526430001, 526430002],\n   \"type\": \"Component_Collection\",\n   \"deploymentType\": \"Normal\",\n   \"small48x48Image\": {\n      \"name\": \"Small48Image\",\n      \"fileSasLink\": \"https://www.contoso.com/icon48.jpg\"      \n   },\n   \"large216x216Image\": {\n      \"name\": \"Large216image2\",\n      \"fileSasLink\": \"https://www.contoso.com/icon216.jpg\"\n   },\n   \"documents\": [\n      {\n         \"name\": \"ImaNewfile\",\n         \"fileSasLink\": \"https://www.contoso.com/screenshot1.jpg\"\n      },\n      {\n         \"name\": \"ImaNewfile2\",\n         \"fileSasLink\": \"https://www.contoso.com/screenshot2.jpg\"\n      }\n   ],\n   \"helpLink\": \"https://www.contoso.com/help.html\",\n   \"privacyPolicyLink\": \"https://www.contoso.com/privacy.html\",\n   \"legalTerms\": \"https://www.contoso.com/legal.html\",\n   \"engineeringName\": {\n      \"firstName\": \"John\",\n      \"lastName\": \"Roon\",\n      \"email\": \"john@contoso.com\",\n      \"phoneNumber\": \"999-111-1234\"\n   },\n   \"supportName\": {\n      \"firstName\": \"Jane\",\n      \"lastName\": \"Drill\",\n      \"email\": \"jane@contoso.com\",\n      \"phoneNumber\": \"999-111-1234\"\n   }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing DLP Policies for Violating Connections Across an Entire Power Platform Tenant\nDESCRIPTION: This PowerShell command enforces DLP policies on connections across an entire Power Platform tenant. It disables existing connections that violate DLP policies and enables previously disabled connections that no longer violate the policies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_50\n\nLANGUAGE: powershell\nCODE:\n```\nStart-DLPEnforcementOnConnectionsInTenant\n```\n\n----------------------------------------\n\nTITLE: Counting Apps in Each Power Platform Environment with PowerShell\nDESCRIPTION: This script uses several cmdlets to group Power Platform environments and count the number of apps in each using `Get-AdminPowerApp`, grouping logic, and object properties. It uses pipeline operations to achieve this.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-task-automation-powershell.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-AdminPowerApp | select -ExpandProperty EnvironmentName | Group | %{ New-Object -TypeName PSObject -Property @{ DisplayName = (Get-AdminPowerAppEnvironment -EnvironmentName $_.Name | select -ExpandProperty displayName); Count = $_.Count } }\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Built-in Colors with Color Enumeration in Power Fx\nDESCRIPTION: Demonstrates how to use the Color enumeration to access predefined CSS colors. This example shows how to reference pure red.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nColor.Red\n```\n\n----------------------------------------\n\nTITLE: Unquarantining a Power Apps Application using PowerShell\nDESCRIPTION: PowerShell command to remove an app from the quarantined state, making it accessible to end users again after compliance issues have been resolved.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/admin-manage-apps.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AppAsUnquarantined -EnvironmentName <EnvironmentName> -AppName <AppName>\n```\n\n----------------------------------------\n\nTITLE: Wildcard Pattern Example in DLP Policy\nDESCRIPTION: Demonstrates the usage of wildcard character (*) in DLP policy rules for custom connectors. The wildcard pattern is always the last entry and can be tagged as Blocked, Business, Non-business, or Ignore.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dlp-connector-classification.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`*`\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault for Data Export Service\nDESCRIPTION: PowerShell script to set up Azure Key Vault for Data Export Service. The script gives permission to the Data Export Service to access the Azure Key Vault by configuring necessary parameters including subscription ID, resource group, connection string, and organization IDs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/replicate-data-microsoft-azure-sql-database.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# -------------------------------------------------------------------------------- #\n    #  Provide the value for the following parameters before executing the script\n$subscriptionId = 'ContosoSubscriptionId'    \n$keyvaultName = 'ContosoKeyVault'\n    $secretName = 'ContosoDataExportSecret'\n    $resourceGroupName = 'ContosoResourceGroup1'\n    $location = 'West US'\n    $connectionString = 'AzureSQLconnectionString'\n$organizationIdList = 'ContosoSalesOrg1_id, ContosoSalesOrg2_id'\n$tenantId = 'tenantId'\n    # -------------------------------------------------------------------------------- #\n\n# Login to Azure account, select subscription and tenant Id\nConnect-AzAccount -Tenant $tenantId -Subscription $subscriptionId\n```\n\n----------------------------------------\n\nTITLE: Initializing Power Platform Solution with CLI\nDESCRIPTION: Initializes a new solution using the Power Platform CLI with a specified publisher name and prefix. This command sets up the initial configuration for a solution development project.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-init-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution init --publisher-name developer --publisher-prefix dev\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Identity Record in Dataverse using JSON POST Request\nDESCRIPTION: This JSON example shows how to insert a row into the managedidentities table in Dataverse with the required fields including applicationid, managedidentityid, credentialsource, subjectscope, and tenantid.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-azure-app-with-sharepoint-access.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"applicationid\": \"<appId>\",\n\"managedidentityid\": \"<newGuid>\",\n\"credentialsource\": 2,\n\"subjectscope\": 1,\n\"tenantid\": \"<tenantId>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Catalog Install/Submit Status in Power Platform CLI\nDESCRIPTION: This command retrieves the status of catalog install or submit requests using a tracking ID and request type, allowing users to monitor their ongoing requests.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/catalog.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## pac catalog status\n\nGet status of the catalog install/submit request.\n\n### Required Parameters for catalog status\n\n#### `--tracking-id` `-id`\n\nRequest tracking ID.\n\n#### `--type` `-t`\n\nRequest type\n\nUse one of these values:\n\n- `Install`\n- `Submit`\n```\n\n----------------------------------------\n\nTITLE: Download Solution from Artifact using PowerShell\nDESCRIPTION: This PowerShell script downloads a managed and an unmanaged solution artifact from a specified URL using a service principal. The script retrieves secrets such as CLIENT_ID, TENANT_ID and CLIENT_SECRET from the environment to authenticate against the Dataverse API, and then downloads the solution as a ZIP file to the runner. The script uses the Dataverse Web API to download the managed and unmanaged solution artifact and has a maximum file size limit of 16MB.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines-github-export.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"$aadHost = \\\"login.microsoftonline.com\\\"\n$url = \\\"${{ github.event.inputs.artifact_url }}\\\"\n$options = [System.StringSplitOptions]::RemoveEmptyEntries\n$dataverseHost = $url.Split(\\\"://\\\", $options)[1].Split(\\\"/\\\")[0]\n\n$body = @{client_id = $env:CLIENT_ID; client_secret = $env:CLIENT_SECRET; grant_type = \\\"client_credentials\\\"; scope = \\\"https://$dataverseHost/.default\\\"; }\n$OAuthReq = Invoke-RestMethod -Method Post -Uri \\\"https://$aadHost/$env:TENANT_ID/oauth2/v2.0/token\\\" -Body $body\n$spnToken = $OAuthReq.access_token\n$headers = New-Object \\\"System.Collections.Generic.Dictionary[[String],[String]]\\\"\n$headers.Add(\\\"Authorization\\\", \\\"Bearer $spnToken\\\")\n$headers.Add(\\\"Content-Type\\\", \\\"application/json\\\")\n\n# Download the managed solution\n$response = Invoke-RestMethod \\\"${{ github.event.inputs.artifact_url }}\\\" -Method 'GET' -Headers $headers\n$bytes = [Convert]::FromBase64String($response.value)\n[IO.File]::WriteAllBytes(\\\"${{ github.event.inputs.solution_name }}_managed.zip\\\", $bytes)\n\n# Download the unmanaged solution (for now we will need to use string manipulation to get the unmanaged solution URL, until the API provides this value)\n$unmanaged_artifact_url = \\\"${{ github.event.inputs.artifact_url }}\\\".Replace(\\\"artifactfile\\\", \\\"artifactfileunmanaged\\\")\n$response = Invoke-RestMethod \\\"$unmanaged_artifact_url\\\" -Method 'GET' -Headers $headers\n$bytes = [Convert]::FromBase64String($response.value)\n[IO.File]::WriteAllBytes(\\\"${{ github.event.inputs.solution_name }}.zip\\\", $bytes)\"\n```\n\n----------------------------------------\n\nTITLE: Importing Power Platform Solution using PowerShell\nDESCRIPTION: This command imports a Power Platform solution using the 'pac' CLI tool. It specifies the path to the solution zip file to be imported.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-import-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution import --path c:\\Users\\Documents\\Solution.zip\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example for SAP Sales Order Creation\nDESCRIPTION: Example JSON payload structure used in Power Automate flows for creating sales orders in SAP through BAPI_SALESORDER_CREATEFROMDAT2. Shows the typical data flow pattern from trigger to response handling.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/roles-guidance/power-platform-app-maker.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Trigger: A Power App triggers a Power Automate flow to create a sales order in SAP.\n2. Construct JSON: The flow constructs a JSON payload with the sales order details.\n3. Call BAPI: The flow calls the BAPI BAPI_SALESORDER_CREATEFROMDAT2 using the SAP ERP Connector.\n4. Parse Response: The flow parses the JSON response to extract the sales order number.\n5. Update App: The Power App is updated with the sales order number for user reference.\n```\n\n----------------------------------------\n\nTITLE: Route Environments to Environment Group in New Admin Center\nDESCRIPTION: This snippet describes how to route new developer environments to a specific environment group in the new Power Platform Admin Center. It involves navigating to Environment groups, selecting Environment Routing, and choosing the desired group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Select **Manage** in the navigation pane.\n2. In the **Manage** pane, select **Environment groups**.\n3. Select the **Environment Routing** button in the command bar.\n4. Under the **Environment group** section, choose the group you want your new developer environments to be created in.\n5. Select **Save**.\"\n```\n\n----------------------------------------\n\nTITLE: Creating New Connector Blocking Policy in PowerShell\nDESCRIPTION: Demonstrates how to create a new connector blocking policy for a tenant. The example includes defining two connectors with different behavior settings and review statuses.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-off-by-default.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PowerAppDlpConnectorBlockingPolicy –TenantId \"aaaabbbb-0000-cccc-1111-dddd2222eeee\" -ConnectorBlockingDefinition $connectorBlockingDefinition\n  Where $connectorBlockingDefinition = [pscustomobject] @{\n    ConnectorSettings= @\n      [pscustomobject] @{\n        id  = \"/providers/Microsoft.PowerApps/apis/connector1\"\n        behavior = \"Allow\"\n        isReviewed = $true\n      },\n      [pscustomobject] @{\n        id = \"/providers/Microsoft.PowerApps/apis/connector2\"\n        behavior=\"Deny\"\n        IsReviewed=$false\n      }\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Last Function - Power FX\nDESCRIPTION: This snippet uses the Last function to retrieve the last record from the IceCream table, which will return the last flavor and quantity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-first-last.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nLast( IceCream )\n```\n\n----------------------------------------\n\nTITLE: Using First Function - Power FX\nDESCRIPTION: This snippet demonstrates the use of the First function in Power FX, which retrieves the first record from the IceCream table, returning the first flavor and quantity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-first-last.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nFirst( IceCream )\n```\n\n----------------------------------------\n\nTITLE: Substitute Function Basic Example in Power Fx\nDESCRIPTION: Shows how to use Substitute function to replace all occurrences of a substring with another string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-replace-substitute.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSubstitute(\"Sales Data\", \"Sales\", \"Cost\")\n```\n\n----------------------------------------\n\nTITLE: Business Value Toolkit Components Table Structure\nDESCRIPTION: Table structure showing the core components of the Business Value Toolkit, including Dataverse tables, AI prompts, apps, cloud flows, connection references, and environment variables.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-business-value-toolkit.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type | Name | Description |\n|----|-----|----|\\n| Dataverse table | Average cost | Stores the _average cost of things_ - used to help calculate tangible value of a solution. |\\n| Dataverse table | Business unit | Stores the hierarchical structure of the organization. |\\n| Dataverse table | Personal productivity collected data | Stores value data associated with personal productivity use cases. |\\n| Dataverse table | Proposal assessment collected data | Stores data captured during proposal analysis. |\\n| Dataverse table | Strategic objective | Stores data used to describe strategic objectives of business units. |\\n| Dataverse table | Value assessment collected data | Stores data captured during the analysis of an app, including calculated value. |\\n| Dataverse table | Value assessment story | Stores the raw and enhanced versions of a success story. |\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON with Indentation using Power Fx\nDESCRIPTION: This snippet modifies the JSON export command to produce a more human-readable, indented JSON format. Triggered by a Button in Power Apps, it outputs data with nested objects clearly displayed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_10\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( CitiesByCountryJSON, JSON(CitiesByCountry, JSONFormat.IndentFour ))\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Maker Setup for Development Environment\nDESCRIPTION: Bash command to add a service connection and configure security for a Power Platform development environment in Azure DevOps\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/development-environments.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm maker add \\\n-o https://dev.azure.com/dev12345 \\\n-p alm-sandbox \\\n-e https://contoso-dev-user1.crm.dynamics.com \\\n-u username@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Markdown Tables for Power Platform Licensing Documentation\nDESCRIPTION: Structured markdown tables documenting licensing settings and configurations for Power Apps and Power Automate, including license types, usage metrics, and administrative actions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-license-consumption-issues.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting | Description |\n| ------- | ----------- |\n| **Power Apps licensing overview** | The number of users actively using licenses in the last 30 days, and whether any actions are recommended. If you change a standard environment to a Managed Environment, any users who open an app with only a Microsoft 365 license will require a standalone Power Apps license to run the app. |\n| License type | The type of license—Dynamics 365, Microsoft 365, per app, per user, pay-as-you-go, trial, or developer—the actual license is mapped to. |\n| Active users | The number of unique users who opened apps in the environment at least once in the last 30 days. |\n```\n\n----------------------------------------\n\nTITLE: Converting Text to Date Value in Power Apps\nDESCRIPTION: The DateValue function takes a date represented as a text string and converts it to a date/time format, ignoring the time if specified. It can optionally interpret the string according to a given language, defaulting to the user's settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/global.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Apps\nCODE:\n```\nDateValue( \"1/2/01\", \"es-ES\" )\nDateValue( \"1/2/01\" )\n```\n\n----------------------------------------\n\nTITLE: Solution Deployment Configuration Steps\nDESCRIPTION: A markdown-formatted list of steps describing how to configure deployment settings including connection references, environment variables, canvas apps sharing, group teams, flows, and custom connectors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/new-maker-experience.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Configure deployment settings\n\n1. Find your solution in the list and select **Choose a Profile**. Your selection determines which environments you can deploy the solution to.\n\n1. Select a profile, and then select **Save**.\n\n   > [!NOTE]\n   > If you don't find a solution profile that suits your needs, ask your administrator to create one for you.\n\n1. Under the name of the solution, select **Configure Deployment Settings**.\n\n1. Configure the following settings:\n\n   - **Deployment Environment List**\n     - The environments in the list are the ones that are specified in the solution profile.\n\n   - **Connection References**\n      - All the connection references in your solution are listed\n\n   - **Environment Variables**\n      - All the environment variables in your solution are listed\n\n   - **Canvas Apps**\n      - All the apps in your solution are listed\n\n   - **Group Teams**\n      - Dataverse Teams of type **AAD Security Group** are listed\n\n   - **Flows**\n      - All the flows in your solution are listed\n\n   - **Custom Connectors**\n      - All the custom connectors in the solution are listed\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Modules for Current User\nDESCRIPTION: Alternative installation commands for users without admin rights, installing modules in the current user scope.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell -Scope CurrentUser\nInstall-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Flow Archive Score Calculation\nDESCRIPTION: Detailed scoring criteria for Power Platform flows. Score ranges from 0-10 based on various factors including modification history, naming, complexity, and ownership status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/power-bi-govern.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Has the flow been modified since it was created? (+1)\n- Does the flow name use nonproduction words such as *test*, *demo*, or *sample*? (+1)\n- When was the flow last modified? (+3 for more than two years ago, +2 for more than one year ago, +1 for more than three months ago)\n- Is this flow likely a template, or are there multiple flows with the same name? (+1)\n- What is the flow state? (+2 for suspended)\n- Is the flow orphaned? (+2)\n- Does the flow have an owner?(+2 if no owner)\n- How complex is the flow, based on the number of unique actions? (-1 if it's complex)\n```\n\n----------------------------------------\n\nTITLE: Interactive PowerShell Authentication for Power Platform\nDESCRIPTION: Signs into Power Platform interactively using the Add-PowerAppsAccount cmdlet with production endpoint.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powershell-getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount -Endpoint prod\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Operations in JavaScript for Microsoft Power Platform\nDESCRIPTION: Illustrates deprecated methods for alert and confirm dialogs, along with their replacements. The new methods provide a more consistent signature with other APIs and offer more flexibility.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nXrm.Utility.alertDialog()\nXrm.Utility.confirmDialog()\n\n// Replacement\nXrm.Navigation.openAlertDialog()\nXrm.Navigation.openConfirmDialog()\n```\n\n----------------------------------------\n\nTITLE: Adding a Maker with Specific Permissions\nDESCRIPTION: This command adds a maker to the specified environment, granting access to ALM resources. It uses several parameters to define the environment, Azure DevOps project, service principal, and security group. The `-a` parameter represents the application name, `-g` is the security group, and `-u` is the user's email.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm maker add \\\n  -o https://dev.azure.com/contoso \\\n  -p alm-sandbox \\\n  -e https://contoso-userdev.crm.dynamics.com \\\n  -a ALMAcceleratorServicePrincipal \\\n  -g ALMAcceleratorForMakers \\\n  -u alan-s@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Packing Canvas App with Power Apps CLI in PowerShell\nDESCRIPTION: This command uses the Power Apps CLI (pac) to package a canvas app. It specifies the source files directory and the output .msapp file name. This is typically used in the app development process to create a deployable package.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-pack-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac canvas pack --sources MyHelloWorldFiles --msapp HelloWorld.msapp\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on CommandBar Control\nDESCRIPTION: This Power Fx snippet illustrates setting focus on the CommandBar control by updating a context variable tied to the Input Event property. The 'SetFocus' functionality is crucial when a new dialog is shown and default focus needs to be explicitly specified, ensuring the app detects a change.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/commandbar.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ ctxResizableTextareaEvent:\"SetFocus\" & Text(Rand()) })\n```\n\n----------------------------------------\n\nTITLE: Administrative User Creation Steps\nDESCRIPTION: Step-by-step instructions for creating an administrative user account in Dataverse with specific access mode settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-users.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. Create user account in Office 365 admin center\n2. Assign initial license\n3. Set Power Platform Administrator or Dynamics 365 Administrator role\n4. Set Access Mode to Administrative\n5. Remove license after setup\n```\n\n----------------------------------------\n\nTITLE: Creating Dataverse Records using Power Fx Collection\nDESCRIPTION: Creates multiple contact records in Dataverse using the Collect function to add records to the Contacts table. Each record contains firstname and lastname fields.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-run-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nCollect(Contacts, { firstname: \"Megan\", lastname: \"Bowen\" })\nCollect(Contacts, { firstname: \"Garth\", lastname: \"Forth\" })\nCollect(Contacts, { firstname: \"Adele\", lastname: \"Vance\" })\nCollect(Contacts, { firstname: \"Patti\", lastname: \"Fernandez\" })\n```\n\n----------------------------------------\n\nTITLE: Adding License Information to Solution\nDESCRIPTION: Command to add license information from CSV files to the solution using pac solution add-license\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/appsource/appendix-add-license-information-to-your-solution.md#2025-04-20_snippet_2\n\nLANGUAGE: CLI\nCODE:\n```\npac solution add-license -pd <path to plan definition file> -pm <path to plan mapping file>\n```\n\n----------------------------------------\n\nTITLE: Listing Backups by Environment URL in Power Platform CLI (PowerShell)\nDESCRIPTION: This command lists the backups of an environment using its URL. It demonstrates how to use the 'pac admin list-backups' command with the '--environment' parameter followed by the environment's URL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-backups-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npac admin list-backups --environment https://contoso.crm.dynamics.com\n```\n\n----------------------------------------\n\nTITLE: Adding Component to Power Platform Solution\nDESCRIPTION: YAML configuration for adding a component to an unmanaged Power Platform solution. This snippet uses Service Principal authentication to add a contact component to the solution without including required components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.add-solution-component.PowerPlatformAddSolutionComponent@2\n  displayName: 'Power Platform Add Solution Component '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    SolutionName: 'SampleSolution '\n    Component: contact\n    ComponentType: 1\n    AddRequiredComponents: false\n```\n\n----------------------------------------\n\nTITLE: Adding a Reference to a Cloned Power Platform Solution\nDESCRIPTION: After cloning a solution, you can use 'pac solution add-reference' to update the .cdsproj file and add new components like plug-ins to the solution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-remarks.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npac solution add-reference\n```\n\n----------------------------------------\n\nTITLE: JSON Record Example\nDESCRIPTION: Example showing how record structures are represented with named fields.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"First Name\": \"Fred\", \"Age\": 21 }\n```\n\n----------------------------------------\n\nTITLE: Custom Date Formatting with Language Specification in Power Fx\nDESCRIPTION: This snippet demonstrates how to use a custom format string with the Text function to format a date. It includes a language specifier to ensure correct interpretation of the format string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/global.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nText( Now(), \"[$-en-US]dddd, mmmm dd, yyyy\" )\n```\n\n----------------------------------------\n\nTITLE: Branching a Solution in Azure DevOps\nDESCRIPTION: This command creates a new solution branch in Azure DevOps for the specified solution. It's used to manage solution changes and promote them through ALM pipelines. The `-o` parameter specifies the Azure DevOps organization URL, `-p` specifies the project name, and `-d` specifies the name of the solution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm branch \\\n  -o https://dev.azure.com/contoso \\\n  -p alm-sandbox \\\n  -d MySolution\n```\n\n----------------------------------------\n\nTITLE: CountIf Function Example in Power Fx\nDESCRIPTION: This example demonstrates how to use the CountIf function in Power Fx to count the number of products in the 'Inventory' collection that have fewer than 30 units in stock. It assumes an existing collection named 'Inventory' with a 'UnitsInStock' column is available.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-table-counts.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\n\"CountIf(Inventory, UnitsInStock < 30)\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Approval Request Data with PowerShell and Web API\nDESCRIPTION: PowerShell function that retrieves selected columns from an Approval Request record using the Dataverse Web API. It depends on the Get-Record function and requires the tracking ID (GUID) of the approval request.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submit-items.md#2025-04-20_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-ApprovalRequest{\n   param(\n      [Parameter(Mandatory)]\n      [guid]\n      $trackingId\n   )\n\n   $columns = @(\n         '_createdby_value',\n         '_modifiedby_value',\n         '_mspcat_publisher_value',\n         '_ownerid_value',\n         'createdon',\n         'modifiedon',\n         'mspcat_autoapproved',\n         'mspcat_certstartdate',\n         'mspcat_codereview',\n         'mspcat_dropcontainsmultiplepackages',\n         'mspcat_functionalvalidation',\n         'mspcat_internalreview ',\n         'mspcat_isvduration',\n         'mspcat_marketingonlychange',\n         'mspcat_packagedeployment',\n         'mspcat_requestname',\n         'mspcat_requestsource',\n         'mspcat_requestsaccesstotspevents',\n         'mspcat_requestssecurestoreaccess',\n         'mspcat_stagename',\n         'mspcat_totalduration',\n         'statecode',\n         'statuscode'\n      )\n\n      $selectcolumns = '?$select=' + ($columns -join ',')\n\n      return Get-Record `\n         -setName 'mspcat_certificationrequests' `\n         -id $trackingId `\n         -query $selectcolumns\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration of Extensions for User Certificates - File Creation\nDESCRIPTION: This snippet creates a configuration file for user certificates, specifying the relevant certificate properties and constraints required for user authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n`userCerts/extensions.cnf`\n\n``` basicConstraints=CA:FALSE\nsubjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid,issuer\nkeyUsage = digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth\n```\n```\n\n----------------------------------------\n\nTITLE: Enable Guest Users to Create Power Apps using PowerShell\nDESCRIPTION: PowerShell script to enable B2B guest users to create and make Power Apps in a tenant by modifying tenant settings and setting the enable guest maker flag to true\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/invite-users-azure-active-directory-b2b-collaboration.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$requestBody = Get-TenantSettings \n$requestBody.powerPlatform.powerApps.enableGuestsToMake = $True \nSet-TenantSettings $requestBody\n```\n\n----------------------------------------\n\nTITLE: Managing SharePoint Custom Form Environments with PowerShell\nDESCRIPTION: Includes commands to get, set, or reset the designated environment for SharePoint custom forms. Designation influences where new forms are saved, requiring the Environment Maker role for user operations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppSharepointFormEnvironment \n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AdminPowerAppSharepointFormEnvironment –EnvironmentName 'EnvironmentName' \n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-AdminPowerAppSharepointFormEnvironment\n```\n\n----------------------------------------\n\nTITLE: Associating Context Flows with Apps Using PowerShell\nDESCRIPTION: Associates flows with an app to create a dependency. Requires environment and flow names, which can be extracted from flow URLs, and the app name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-AdminFlowPowerAppContext -EnvironmentName <String> -FlowName <String> -AppName <String> [-ApiVersion <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Character Map - Inner Gallery Items Property\nDESCRIPTION: This snippet sets the Items property for the inner vertical gallery within the character map example. It uses the Sequence function to create a sequence of 16 numbers, starting with the 'Value' from the 'HighNibble' sequence of the outer gallery.  The result is assigned to 'FullCode' for use in displaying characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-char.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"`Sequence( 16, HighNibble.Value ) As FullCode`\"\n```\n\n----------------------------------------\n\nTITLE: Checking Azure CLI Version\nDESCRIPTION: This command checks the installed version of the Azure CLI, which should be version 2.37.0 or higher to support the CoE CLI application functionality.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/install.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz --version\n```\n\n----------------------------------------\n\nTITLE: Importing PowerShell Module for Power Platform Administration\nDESCRIPTION: PowerShell command to import the Microsoft PowerApps Administration module required for managing welcome content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/welcome-content.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nimport-Module -Name Microsoft.PowerApps.Administration.PowerShell\n```\n\n----------------------------------------\n\nTITLE: Client Secret Token Request - HTTP POST\nDESCRIPTION: HTTP POST request to obtain an authentication token using client secret authentication (service principal). This request includes client_id, scope, client_secret, and grant type parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nContent-Type: application/x-www-form-urlencoded\nHost: login.microsoftonline.com\nAccept: application/json\nPOST https://login.microsoftonline.com/YOUR_TENANT.COM/oauth2/v2.0/token\nBODY:\nclient_id={CLIENT_ID_FROM_AZURE_CLIENT_APP}&scope=https://service.powerapps.com//.default&client_secret={SECRET_FROM_AZURE_CLIENT_APP}&grant_type=client_credentials\n```\n\n----------------------------------------\n\nTITLE: Installing Dataverse Application - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: This snippet outlines the command for installing a Dataverse application to a specified environment using the Power Platform CLI. It details the optional parameters needed for the installation, including application list location and target environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/application.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## pac application install\n\nInstalls Dataverse application to given environment.\n\n### Optional Parameters for application install\n\n#### `--application-list` `-al`\n\nLocation of the JSON file with list of the Dataverse applications from AppSource to be installed\n\n#### `--application-name` `-an`\n\nUnique name of the application to install to the target environment.\n\n#### `--environment` `-env`\n\nList available Dataverse applications for given environment (by ID or url); if not specified, list all applications in the tenant\n\n```\n\n----------------------------------------\n\nTITLE: Application Installation Response JSON in Power Platform\nDESCRIPTION: JSON response from the application installation request, containing details about the installation operation including the operationId which is needed for monitoring the installation progress.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"id\": \"9a44d33b-6055-4c9b-aa4a-4c410a22e9ad\",\n        \"packageId\": \"ce3bab3c-ada1-40cf-b84b-49b26603a281\",\n        \"applicationId\": \"2f17f077-4175-4d82-b82b-17cd8950b74f\",\n        \"applicationName\": \"Office365Groups\",\n        \"applicationDescription\": \"\",\n        \"singlePageApplicationUrl\": \"\",\n        \"publisherName\": \"Microsoft CRM Package\",\n        \"publisherId\": \"255953fd-9ab8-4146-bfa1-859aae326ae9\",\n        \"packageUniqueName\": \"Office365Groups\",\n        \"packageVersion\": \"2.9.0.3\",\n        \"localizedDescription\": \"With Office 365 groups, you can collaborate with people across your company even if they aren't Dynamics 365 users. Groups provide a single location to share conversations, meetings, documents, and more.\",\n        \"localizedName\": \"Office 365 Groups\",\n        \"learnMoreUrl\": \"http://go.microsoft.com/fwlink/?LinkID=525719\",\n        \"termsOfServiceBlobUris\": [\n            \"https://crmprodnam.blob.core.windows.net/preferredsolution/microsoft_tos_dbd53f75-b571-46ad-b9ce-21b5656b85dd_1?sv=2018-03-28&sr=c&sig=v5iBtDum0N6A0sqyyhIkPECibmpGOKGiSmmm3ALGIR0%3D&se=2022-03-23T19%3A35%3A59Z&sp=r\"\n        ],\n        \"applicationVisibility\": \"All\",\n        \"lastOperation\": {\n            \"state\": \"InstallRequested\",\n            \"createdOn\": \"2022-03-22T19:35:59.7425066Z\",\n            \"modifiedOn\": null,\n            \"errorDetails\": null,\n            \"statusMessage\": null,\n            \"instancePackageId\": \"9a44d33b-6055-4c9b-aa4a-4c410a22e9ad\",\n            \"operationId\": \"4fde996a-bf68-413c-b2bf-33f21a7e9afb\"\n        },\n        \"customHandleUpgrade\": false\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Isolation with SysTestTransaction in X++\nDESCRIPTION: Example of how to implement test isolation using the SysTestTransaction attribute with different transaction modes to ensure reliable test execution and proper cleanup of test data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/unified-experience/finance-operations-testing.md#2025-04-20_snippet_1\n\nLANGUAGE: X++\nCODE:\n```\n    [SysTestTransaction(TestTransactionMode::LegacyRollback)]\n    class MyTestSample extends SysTestCase\n```\n\n----------------------------------------\n\nTITLE: Adding an Existing Solution Component (Entity)\nDESCRIPTION: Demonstrates how to add an existing entity (Account) to an unmanaged solution using AddSolutionComponentRequest\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nRetrieveEntityRequest retrieveForAddAccountRequest = new RetrieveEntityRequest()\n{\n    LogicalName = Account.EntityLogicalName\n};\nRetrieveEntityResponse retrieveForAddAccountResponse = (RetrieveEntityResponse)_serviceProxy.Execute(retrieveForAddAccountRequest);\nAddSolutionComponentRequest addReq = new AddSolutionComponentRequest()\n{\n    ComponentType = (int)componenttype.Entity,\n    ComponentId = (Guid)retrieveForAddAccountResponse.EntityMetadata.MetadataId,\n    SolutionUniqueName = solution.UniqueName\n};\n_serviceProxy.Execute(addReq);\n```\n\n----------------------------------------\n\nTITLE: Deploying Package with PAC CLI\nDESCRIPTION: Command to deploy a package with a specified log file location using Power Platform CLI. Requires .NET Full Framework version of PAC CLI. Allows specifying package and log file paths.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/package-deploy-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac package deploy --logFile c:\\samplelogdata --package c:\\samplepackage\n```\n\n----------------------------------------\n\nTITLE: Add Power Apps Account with PowerShell\nDESCRIPTION: This PowerShell command adds a Power Apps account, specifying the endpoint and tenant ID. This is a prerequisite for interacting with Power Apps using PowerShell.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/default-environment-routing.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\nAdd-PowerAppsAccount -Endpoint \"prod\" -TenantID <Tenant_ID>\n```\n```\n\n----------------------------------------\n\nTITLE: Delete Environment Group - Classic Admin Center\nDESCRIPTION: This snippet describes the steps to delete an environment group using the classic Power Platform Admin Center. The process includes navigating to the Environment groups, selecting the group to delete, and then choosing the delete option. It's crucial to remove all environments from the group beforehand.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Select **Environment groups** in the navigation pane.\n2. Select the environment group that you wish to delete.\n3. Select **Delete group** in the command bar.\"\n```\n\n----------------------------------------\n\nTITLE: Solution Component Dependency Types\nDESCRIPTION: Defines three primary types of solution component dependencies: solution internal, published, and unpublished dependencies, explaining their unique characteristics and behaviors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/dependency-tracking-solution-components.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThere are three types of solution component dependencies:\n\n- Solution internal. Internal dependencies are managed by Dataverse.\n- Published. Published dependencies are created when two solution components are related.\n- Unpublished. Unpublished dependencies apply to unpublished versions of solution components.\n```\n\n----------------------------------------\n\nTITLE: Converting Numbers to Hexadecimal Strings with Dec2Hex in Power Fx\nDESCRIPTION: Basic examples of using the Dec2Hex function to convert decimal numbers to hexadecimal text strings. The function truncates decimal values and handles negative numbers using two's-complement representation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-hexdec.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 165 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( -165 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 3213 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( -3213 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( -1 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 3.74 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( -3.74 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( [ 10, 255, -16 ] )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( 1e45 )\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\nDec2Hex( [ 1, 1e-45, 1e45, 2 ] )\n```\n\n----------------------------------------\n\nTITLE: Alternative Reset Method Using Button.Pressed Property in Power Apps\nDESCRIPTION: This code shows an alternative approach to reset controls by toggling the Reset property of input controls using a Button control. This method can be useful when multiple controls need to be reset together from multiple formulas.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-reset.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nReset = Button.Pressed\n```\n\n----------------------------------------\n\nTITLE: Output from Copilot Translation Extraction Command\nDESCRIPTION: This shows the expected output after running the PowerShell command to extract translations. The output indicates a successful connection, and provides information about the loaded components, including the bot name, ID, primary language, and supported languages.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-extract-translation-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nConnected as user@contoso.org\n\nLoaded 32 components for bot 'New Test Copilot' with id 9ee3f7aa-ab79-4cf6-a726-d85c8c18cc3e. Primary language: English, supported languages: German\n```\n\n----------------------------------------\n\nTITLE: Resetting Ad-Hoc Subscriptions\nDESCRIPTION: PowerShell command to disable ad-hoc subscriptions after completing the developer license setup process\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/development-environments.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-MsolCompanySettings -AllowAdHocSubscriptions $false\n```\n\n----------------------------------------\n\nTITLE: PowerPlatform Admin Settings Configuration Steps\nDESCRIPTION: Step-by-step markdown instructions for enabling Power Automate integration in Microsoft Power Platform admin center, including important prerequisites and conditional access requirements.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/enable-embedded-flow-in-your-organization.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the Microsoft Power Platform admin center, select an environment. \n\n2. Select **Settings** > **Product** > **Behavior**.   \n  \n3. Under **Display behavior**, select **Show Power Automate on forms and in the site map** to enable Power Automate. Once enabled, this setting cannot be disabled.\n\n4. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Setting Global Color Theme Variables in Power Apps\nDESCRIPTION: This snippet demonstrates how to set global color theme variables in the App.OnStart property of a Power Apps canvas app. It defines a color palette that can be used consistently across the app, allowing for easy theme customization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/extend-canvas-apps.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSet(\n    varThemeColors,\n    {\n        background: ColorValue(\"#FAF9F8\"),\n        backgroundFill: ColorValue(\"#FFFFFF\"),\n        backgroundFillDisabled: ColorValue(\"#F3F2F1\"),\n        text: ColorValue(\"#201F1E\"),\n        altText: ColorValue(\"#FFFFFF\"),\n        disabledText: ColorValue(\"#A19F9D\"),\n        primary: ColorValue(\"#0078D4\"),\n        secondary: ColorValue(\"#EFF6FC\"),\n        tertiary: ColorValue(\"#005A9E\"),\n        primaryGray: ColorValue(\"#8A8886\"),\n        secondaryGray: ColorValue (\"#C8C6C4\"),\n        tertiaryGray: ColorValue(\"#605E5C\"),\n        requiredRed: ColorValue(\"#A80000\"),\n        lookupBlue: ColorValue(\"#0078D4\")\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding ISV Extensions Privilege for Microsoft 365 Groups Access\nDESCRIPTION: Steps to add the ISV Extensions security privilege required for users to access Microsoft 365 Groups functionality within Dynamics 365. This privilege must be assigned in the user's security role for them to see the Microsoft 365 Groups item in record navigation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/deploy-office-365-groups.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com) as an admin (Service admin or Delegated admin).\n\n2. From the left-side menu, select **Environments**, and then select an environment.\n  \n3. Select **Settings** > **Users + permissions** > **Security roles**.\n  \n4. Choose the security role to check and then select the **Customization** tab.  \n  \n5. In the **Miscellaneous Privileges** section, review the **ISV Extensions** privilege setting. If the security role doesn't have the **ISV Extensions** privilege, select it to set it to Organization.  \n  \n6. Select **Save and Close**.\n```\n\n----------------------------------------\n\nTITLE: Connecting to Power Platform Environment using PAC CLI\nDESCRIPTION: Creates an authentication profile for a specific environment using the pac auth create command. This example demonstrates connecting to the HR-Dev environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac auth create --environment \"HR-Dev\"\n```\n\n----------------------------------------\n\nTITLE: Assigning User by Email with Basic User Role in Power Platform (PowerShell)\nDESCRIPTION: This command assigns a user to an environment using their email address and grants them the 'Basic User' role. It requires specifying the environment GUID and the user's email address.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-assign-user-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin assign-user `\n  --environment 00000000-0000-0000-0000-000000000000 `\n  --user \"user@company.com\" `\n  --role \"Basic User\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Bearer Token with Username and Password - HTTP\nDESCRIPTION: This HTTP snippet demonstrates how to send a request to Microsoft Entra to obtain an access bearer token using username and password.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-authentication-v2.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nContent-Type: application/x-www-form-urlencoded\nHost: login.microsoftonline.com\nAccept: application/json\nPOST https://login.microsoftonline.com/YOUR_TENANT.COM/oauth2/v2.0/token\nBODY:\nclient_id={CLIENT_ID_FROM_AZURE_CLIENT_APP}&scope=https://api.powerplatform.com/.default&username={USER_EMAIL_ADDRESS}&password={PASSWORD}&grant_type=password\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Context in JavaScript for Microsoft Power Platform\nDESCRIPTION: Demonstrates the deprecated Xrm.Page method for accessing form context and its replacement using ExecutionContext.getFormContext(). For commands, the PrimaryControl parameter is used instead.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nXrm.Page\n\n// Replacement for Forms\nExecutionContext.getFormContext()\n\n// Replacement for Commands\n// Pass as PrimaryControl parameter\n```\n\n----------------------------------------\n\nTITLE: Checking Power Platform Catalog Status with PowerShell\nDESCRIPTION: This PowerShell command uses the `pac` command-line interface to check the status of the Power Platform catalog. This command allows users to verify the availability and health of the catalog, which is essential for discovering and managing Power Platform components. The command requires the Power Platform CLI to be installed and configured.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/catalog-status-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"pac catalog status\"\n```\n\n----------------------------------------\n\nTITLE: Basic Trigonometric Function Examples in PowerFX\nDESCRIPTION: Examples demonstrating basic trigonometric functions (Cos, Cot, Sin, Tan) with single number inputs and their expected outputs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-trig.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerFX\nCODE:\n```\nCos(1.047197)    // Returns 0.5\nCot(Pi()/4)      // Returns 1\nSin(Pi()/2)      // Returns 1\nTan(Radians(60))  // Returns 1.732050...\n```\n\n----------------------------------------\n\nTITLE: Example Response for Environments Listing - Power Platform API\nDESCRIPTION: This JSON response represents the data structure returned on a successful execution of the environment listing request in the Power Platform API. It details environment properties such as location, display name, capacity, addons, and other metadata. The response indicates how each environment is characterized and available features, capacities, and identifiers.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/list-environments.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": [\n    {\n      \"id\": \"/providers/Microsoft.BusinessAppPlatform/scopes/admin/environments/aaaabbbb-0000-cccc-1111-dddd2222eeee\",\n      \"type\": \"Microsoft.BusinessAppPlatform/scopes/environments\",\n      \"location\": \"unitedstates\",\n      \"name\": \"aaaabbbb-0000-cccc-1111-dddd2222eeee\",\n      \"properties\": {\n        \"azureRegion\": \"westus\",\n        \"displayName\": \"My Power Platform Environment\",\n        \"description\": \"This is my environment purpose description\",\n        \"createdTime\": \"2020-10-22T04:38:17.8550157Z\",\n        \"createdBy\": {\n          \"id\": \"0f747967-84c4-4f29-84c2-682fb00390c8\",\n          \"displayName\": \"ServicePrincipal\",\n          \"type\": \"ServicePrincipal\",\n          \"tenantId\": \"aaaabbbb-0000-cccc-1111-dddd2222eeee\"\n        },\n        \"lastModifiedTime\": \"2021-02-22T18:38:08.4718532Z\",\n        \"provisioningState\": \"Succeeded\",\n        \"creationType\": \"User\",\n        \"environmentSku\": \"Sandbox\",\n        \"isDefault\": false,\n        \"capacity\": [\n          {\n            \"capacityType\": \"Database\",\n            \"actualConsumption\": 1392.68,\n            \"ratedConsumption\": 1392.68,\n            \"capacityUnit\": \"MB\",\n            \"updatedOn\": \"2021-02-23T04:41:01Z\"\n          },\n          {\n            \"capacityType\": \"File\",\n            \"actualConsumption\": 1567.697,\n            \"ratedConsumption\": 1567.697,\n            \"capacityUnit\": \"MB\",\n            \"updatedOn\": \"2021-02-23T04:41:01Z\"\n          },\n          {\n            \"capacityType\": \"Log\",\n            \"actualConsumption\": 0,\n            \"ratedConsumption\": 0,\n            \"capacityUnit\": \"MB\",\n            \"updatedOn\": \"2021-02-23T04:41:01Z\"\n          }\n        ],\n        \"addons\": [\n          {\n            \"addonType\": \"AppPass\",\n            \"allocated\": 1,\n            \"addonUnit\": \"Unit\"\n          },\n          {\n            \"addonType\": \"PerFlowPlan\",\n            \"allocated\": 0,\n            \"addonUnit\": \"Unit\"\n          },\n          {\n            \"addonType\": \"PortalViews\",\n            \"allocated\": 0,\n            \"addonUnit\": \"Unit\"\n          },\n          {\n            \"addonType\": \"PortalLogins\",\n            \"allocated\": 0,\n            \"addonUnit\": \"Unit\"\n          },\n          {\n            \"addonType\": \"AI\",\n            \"allocated\": 0,\n            \"addonUnit\": \"Unit\"\n          },\n          {\n            \"addonType\": \"AppPassForTeams\",\n            \"allocated\": 0,\n            \"addonUnit\": \"Unit\"\n          },\n          {\n            \"addonType\": \"PAUnattendedRPA\",\n            \"allocated\": 0,\n            \"addonUnit\": \"Unit\"\n          }\n        ],\n        \"clientUris\": {\n          \"admin\": \"https://admin.powerplatform.microsoft.com/environments/5ca1c616-6060-46ba-abc1-18d312f1cb3a/hub\",\n          \"maker\": \"https://make.powerapps.com/environments/5ca1c616-6060-46ba-abc1-18d312f1cb3a/home\"\n        },\n        \"runtimeEndpoints\": {\n          \"microsoft.BusinessAppPlatform\": \"https://unitedstates.api.bap.microsoft.com\",\n          \"microsoft.CommonDataModel\": \"https://unitedstates.api.cds.microsoft.com\",\n          \"microsoft.PowerApps\": \"https://unitedstates.api.powerapps.com\",\n          \"microsoft.Flow\": \"https://unitedstates.api.flow.microsoft.com\",\n          \"microsoft.PowerAppsAdvisor\": \"https://unitedstates.api.advisor.powerapps.com\",\n          \"microsoft.ApiManagement\": \"https://management.usa.azure-apihub.net\"\n        },\n        \"databaseType\": \"CommonDataService\",\n        \"linkedEnvironmentMetadata\": {\n          \"resourceId\": \"a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1\",\n          \"friendlyName\": \"My Power Platform Environment\",\n          \"uniqueName\": \"96c28a9e98934bf798bb71c9d92134\",\n          \"domainName\": \"org0fadb1dd\",\n          \"version\": \"9.2.21013.00152\",\n          \"instanceUrl\": \"https://org0fadb1dd.crm.dynamics.com/\",\n          \"instanceApiUrl\": \"https://org0fadb1dd.api.crm.dynamics.com\",\n          \"baseLanguage\": 1033,\n          \"instanceState\": \"Ready\",\n          \"createdTime\": \"2020-10-22T04:38:24.003Z\",\n          \"backgroundOperationsState\": \"Enabled\",\n          \"scaleGroup\": \"NAMCRMLIVESG644\",\n          \"platformSku\": \"Standard\"\n        },\n        \"notificationMetadata\": {\n          \"state\": \"NotSpecified\",\n          \"branding\": \"NotSpecific\"\n        },\n        \"retentionPeriod\": \"P7D\",\n        \"states\": {\n          \"management\": {\n            \"id\": \"Ready\"\n          },\n          \"runtime\": {\n            \"id\": \"Enabled\"\n          }\n        },\n        \"updateCadence\": {\n          \"id\": \"Frequent\"\n        },\n        \"retentionDetails\": {\n          \"retentionPeriod\": \"P7D\",\n          \"backupsAvailableFromDateTime\": \"2021-02-16T05:42:52.2822636Z\"\n        },\n        \"protectionStatus\": {\n          \"keyManagedBy\": \"Microsoft\"\n        },\n        \"cluster\": {\n          \"number\": \"108\"\n        },\n        \"connectedGroups\": []\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Power Fx Built-in Functions\nDESCRIPTION: Demonstrates the use of multiple Power Fx functions including Set, Mid, and If. Sets a variable x to 1 and performs a string comparison using Mid function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-run-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nSet(x, 1)\nResult = If( Mid( \"asdf\",x,1 ) = \"a\", \"X\", \"Y\" )\n```\n\n----------------------------------------\n\nTITLE: Adding Package Reference Using Power Platform CLI in PowerShell\nDESCRIPTION: This command adds a reference to an existing package located at the specified path. The command targets a sample solution directory where the reference will be added.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/package-add-reference-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac package add-reference --path c:\\Users\\Downloads\\SampleSolution\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions in SQL\nDESCRIPTION: This SQL query uses the COUNT aggregate function to count the number of orders for each customer. It demonstrates grouping and sorting in SQL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/pn-sql.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT CustomerID, COUNT(OrderID) as OrderCount\nFROM Orders\nGROUP BY CustomerID\nORDER BY OrderCount DESC;\n```\n\n----------------------------------------\n\nTITLE: Adding Remarks Template for Microsoft Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for adding remarks to Microsoft Power Platform documentation. It instructs users to remove the comments and add appropriate remarks below the specified heading.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connection-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Publishing Power Platform Customizations\nDESCRIPTION: YAML configuration for publishing all customizations in a Power Platform environment using Service Principal authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.publish-customizations.PowerPlatformPublishCustomizations@2\n  displayName: 'Power Platform Publish Customizations '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Connectors (User Context) in Power Platform\nDESCRIPTION: PowerShell script for users to delete all their custom connectors using Remove-AdminPowerAppConnector cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n\n#Retrieves all custom connectors for the calling user and deletes them\nGet-AdminPowerAppConnector | Remove-AdminPowerAppConnector\n```\n\n----------------------------------------\n\nTITLE: Launching from Canvas App to Web Page - Power FX\nDESCRIPTION: This snippet illustrates how to use the Launch function in Power FX to open a webpage with specified parameters. It demonstrates various ways to launch with different target specifications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nLaunch( \"http://bing.com/search\", \"q\", \"Power Apps\", \"count\", 1 )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nLaunch( \"http://bing.com/search\", { q: \"Power Apps\", count: 1 } )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nLaunch( \"http://bing.com/search\", { q: \"Power Apps\", count: 1 }, LaunchTarget.Replace )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nLaunch( \"http://bing.com/search\", { q: \"Power Apps\", count: 1 }, \"Search Results\" )\n```\n\n----------------------------------------\n\nTITLE: Filtering Employees by First Name with ThisRecord - Power FX\nDESCRIPTION: This snippet demonstrates how to filter Employee records in a gallery using the Filter function with ThisRecord to display only those starting with the letter 'M'. It provides an example of record scope application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_19\n\nLANGUAGE: Power FX\nCODE:\n```\nFilter( Employees, StartsWith( ThisRecord.Employee.'First Name', \"M\" ) )\n```\n\n----------------------------------------\n\nTITLE: Linking to the CoE CLI Application (cmd)\nDESCRIPTION: This command creates a symbolic link to the CoE CLI application, making it available globally on the user's system for easier access. This ensures that the CLI can be invoked from anywhere.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/non-administrator-local-install.md#2025-04-20_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Non-Licensed User Request Limits Table\nDESCRIPTION: Markdown table showing the daily request limits for non-licensed users at the tenant level across different Power Platform products.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/api-request-limits-allocations.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Products | Pooled non-licensed tenant-level requests per 24 hours |\n|-----------------------------------------------------------------|-------------------------------------------------------------------------|\n| Dynamics 365 Enterprise & Professional applications | 500,000 base requests + 5,000 requests accrued per USL up to 10,000,000 max |\n| Power Apps (all licenses) | 25,000 base requests with no per-license accrual for the tenant |\n| Power Automate (all licenses) | 25,000 base requests with no per-license accrual for the tenant |\n```\n\n----------------------------------------\n\nTITLE: Creating Fully Typed Record from JSON\nDESCRIPTION: This snippet demonstrates how to use the ForAll function to convert an Untyped object into a fully typed record in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_9\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( typedOrderLines, ForAll( jsonOrder.OrderLines, { Item : Text( ThisRecord.Item ), Quantity : Value( ThisRecord.Quantity ) } ) );\n```\n\n----------------------------------------\n\nTITLE: Providing SessionID with Power Fx\nDESCRIPTION: This Power Fx example shows how to display the SessionID, a GUID identifying the current session, in a label's text property. It's particularly useful for troubleshooting by providing session details to administrators. No external dependencies are required.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-host.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nLabel1.Text: $\"Provide session ID { Host.SessionID } to your administrator.\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Sample Command in CoE CLI - Bash\nDESCRIPTION: This snippet demonstrates how to add a new sample command template in the CoE CLI. It initializes the command setup in the coe-cli directory.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/adding-new-command.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd coe-cli\ncoe cli add -n sample\n```\n\n----------------------------------------\n\nTITLE: UniChar Function - Single-Column Table Example\nDESCRIPTION: This example demonstrates the use of the UniChar function with a single-column table to translate multiple Unicode character codes into their string equivalents. The function returns a new table where each numerical code from the input table's 'Value' column is converted to its corresponding Unicode character.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-char.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"`UniChar( [ 71, 97, 114, 231, 111, 110 ] )`\"\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Module - PowerShell\nDESCRIPTION: This snippet installs the required PowerApps Administration PowerShell module necessary for app creators by utilizing the Install-Module cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powershell-installation.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status (Source Admin)\nDESCRIPTION: Command to check the status of the migration preparation process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nTenantToTenant-GetMigrationStatus -MigrationId {MigrationId}\n```\n\n----------------------------------------\n\nTITLE: ForAll with Square Root Calculation in Power Apps\nDESCRIPTION: Examples showing how to calculate the square root of values in a collection using ForAll and the direct Sqrt function with a table. Both approaches produce identical results.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nForAll( Squares, Sqrt( Value ) )\n\nSqrt( Squares )\n```\n\n----------------------------------------\n\nTITLE: Exporting Admin App Role Assignments Using PowerShell\nDESCRIPTION: Allows administrators to export all app role assignments for a specific user across all apps using the Get-AdminPowerAppRoleAssignment function. User ID is required as input, and results are saved as a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\n$userId = \"11bb11bb-cc22-dd33-ee44-55ff55ff55ff\"\nGet-AdminPowerAppRoleAssignment -UserId $userId | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Username Password Token Request - HTTP POST\nDESCRIPTION: HTTP POST request to obtain an authentication token using username and password authentication. This request is sent to Microsoft Entra ID with required payload parameters including client_id, scope, username, and password.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nContent-Type: application/x-www-form-urlencoded\nHost: login.microsoftonline.com\nAccept: application/json\nPOST https://login.microsoftonline.com/YOUR_TENANT.COM/oauth2/v2.0/token\nBODY:\nclient_id={CLIENT_ID_FROM_AZURE_CLIENT_APP}&scope=https://service.powerapps.com//.default&username={USER_EMAIL_ADDRESS}&password={PASSWORD}&grant_type=password\n```\n\n----------------------------------------\n\nTITLE: Updating PowerShell Module - PowerShell\nDESCRIPTION: This snippet updates the installed PowerApps Administration PowerShell module to the latest version using the Update-Module cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powershell-installation.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module -Name Microsoft.PowerApps.Administration.PowerShell\n```\n\n----------------------------------------\n\nTITLE: Setting the Trash Icon (Power Fx)\nDESCRIPTION: This snippet shows how to set the icon property for an icon control inside a gallery to display a trash can icon. This is done by setting the `Icon` property of the icon control to `Icon.Trash`. This provides a visual cue to the user that the icon represents a delete action.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-remove-removeif.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nIcon.Trash\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Missing Power Platform CLI on Windows - PowerShell\nDESCRIPTION: Error message displayed in PowerShell when the Power Platform CLI is not recognized, guiding users to check their installation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/introduction.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command: The term 'pac' is not recognized as a name of a cmdlet, function, script file, or executable program.\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Note Block in Power Platform Documentation\nDESCRIPTION: This code snippet demonstrates how to create a note block in Markdown format for Power Platform documentation. It uses the blockquote syntax to highlight important information about creating a sandbox environment copy.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/opt-in-early-access-updates.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> If you don't have a sandbox copy of your production environment, you can [create a copy](copy-environment.md) in the Power Platform admin center.\n```\n\n----------------------------------------\n\nTITLE: Identifying Power Apps That Need Republishing for Connector Action DLP\nDESCRIPTION: This PowerShell script helps administrators identify Power Apps published before October 1, 2020 that need to be republished for connector action DLP rules to take effect. It loops through all Power Apps and checks their last modified time and backfill status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-action-control.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n\n$GranularDLPDate = Get-Date -Date \"2020-10-01 00:00:00Z\"\n\nForEach ($app in Get-AdminPowerApp){\n\n    $versionAsDate = [datetime]::Parse($app.LastModifiedTime)\n    \n    $olderApp = $versionAsDate -lt $GranularDLPDate\n\n    $wasBackfilled = $app.Internal.properties.executionRestrictions -ne $null -and $app.Internal.properties.executionRestrictions.dataLossPreventionEvaluationResult -ne $null -and ![string]::IsNullOrEmpty($app.Internal.properties.executionRestrictions.dataLossPreventionEvaluationResult.lastAdvancedBackfillDate) \n\n    If($($olderApp -and !$wasBackfilled)){\n        Write-Host \"App must be republished to be Granular DLP compliant: \" $app.AppName \" \"  $app.Internal.properties.displayName \" \" $app.Internal.properties.owner.email\n    } \n    Else{ \n        Write-Host \"App is already Granular DLP compliant: \" $app.AppName \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Environment by URL in PowerShell\nDESCRIPTION: Demonstrates how to select a Dynamics 365 environment using its full URL with the pac env select command\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-select-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac env select --environment \"https://contosotest.crm.dynamics.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining ShowOnQuickAction Rule for Dataverse Search in XML\nDESCRIPTION: This XML code demonstrates how to configure a command to appear only as a quick action in Dataverse search results. The example shows a contact call command with necessary enable rules and JavaScript function implementation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-relevance-search-organization.md#2025-04-20_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<CommandDefinition Id=\"new.contact.Command.Call\">\n  <EnableRules>\n    <EnableRule Id=\"Mscrm.SelectionCountExactlyOne\" />\n    <EnableRule Id=\"Mscrm.ShowOnQuickAction\" />\n  </EnableRules>\n  <DisplayRules />\n  <Actions>\n    <JavaScriptFunction FunctionName=\"simplealert\" />\n  </Actions>\n</CommandDefinition>\n```\n\n----------------------------------------\n\nTITLE: Canvas App Navigation with Creator Kit Controls\nDESCRIPTION: Describes the use of Creator Kit controls, like the Nav control for primary navigation, tab lists for secondary navigation within a screen, and link controls to launch web pages or canvas apps. Universal navigation is implemented using app headers and clickable icons.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/information-architecture.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Platform\nCODE:\n```\n\"[Nav control](/power-platform/guidance/creator-kit/nav)\",\n\"[tab list](/power-apps/maker/canvas-apps/controls/modern-controls/modern-control-tabs-or-tabs-list)\",\n\"[link modern control](/power-apps/maker/canvas-apps/controls/modern-controls/modern-control-link)\",\n\"[launch a webpage or canvas app](/power-platform/power-fx/reference/function-param)\",\n\"[app header](/power-apps/maker/canvas-apps/controls/modern-controls/modern-controls-header)\",\n\"[icons](/power-apps/maker/canvas-apps/controls/control-shapes-icons)\",\n\"[Fluent icons](/power-platform/guidance/creator-kit/icon)\",\n\"[container](/power-apps/maker/canvas-apps/controls/control-container)\"\n```\n\n----------------------------------------\n\nTITLE: Constructing JSON Payload for SAP Sales Order Creation in Power Automate\nDESCRIPTION: This snippet represents a step in a Power Automate flow where a JSON payload is constructed with sales order details for creating a sales order in SAP. It's part of an example workflow that demonstrates SAP integration with Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/roles-guidance/sap-consultant.md#2025-04-20_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"SALES_ORDER_DETAILS\": {\n    \"CUSTOMER_ID\": \"1234567\",\n    \"ORDER_DATE\": \"2024-10-21\",\n    \"ITEMS\": [\n      {\n        \"MATERIAL\": \"MAT001\",\n        \"QUANTITY\": 10\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Contact Table to Solution using Power Platform CLI\nDESCRIPTION: This PowerShell command adds the contact table as a component to the 'SampleSolution' using the Power Platform CLI. It specifies the solution name, component (contact table), and component type (1 for table).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-add-solution-component-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution add-solution-component --solutionUniqueName SampleSolution --component contact --componentType 1\n```\n\n----------------------------------------\n\nTITLE: Cloning Solution with Power Platform CLI\nDESCRIPTION: Command to clone an existing solution using pac solution clone\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/appsource/appendix-add-license-information-to-your-solution.md#2025-04-20_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\npac solution clone --name <your solution name> --outputDirectory <your chosen output directory>\n```\n\n----------------------------------------\n\nTITLE: Configuring Guest Access in Power Platform\nDESCRIPTION: This snippet outlines the steps required to configure guest access in the Power Platform admin center. It includes navigating to the Security settings, selecting the desired environment, and toggling the 'Turn off guest access' option.  The configuration will restrict or allow guest access based on the selected option.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/security/identity-access-management.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com) as a system administrator.\n2. In the navigation pane, select **Security**.\n3. In the **Security** section, select **Identity and access**.\n4. In the **Identity and access** section, select **Guest access**.\n5. In the **Guest access** pane, select the environment for which you want to turn off guest access.\n6. Select **Configure guest access**.\n7. Turn on the **Turn off guest access** option.\n8. Select **Save**. The **Guest access** pane reappears.\n9. Repeat steps 5 through 8 for other environments as required.\n10. When you finish, close the **Guest access** pane.\n```\n\n----------------------------------------\n\nTITLE: Filtering Employees by First Name Using ThisRecord\nDESCRIPTION: This snippet filters the Employees collection to include only those whose First Name starts with 'M' using the ThisRecord operator.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_13\n\nLANGUAGE: power-fx\nCODE:\n```\nFilter( Employees, StartsWith( ThisRecord.Employee.'First Name', \"M\" ) )\n```\n\n----------------------------------------\n\nTITLE: Simple Message Dialog in Power Fx\nDESCRIPTION: Displays a message dialog that requires user acknowledgment before proceeding. This is useful when it's important for the user to read the message, but the specific button choice isn't relevant.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-confirm.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nConfirm( \"There was a problem, please review your order.\" )\n```\n\n----------------------------------------\n\nTITLE: Setting Numeric Control Values in Power Apps Test Studio\nDESCRIPTION: Sets numeric values for Slider and Rating controls.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setproperty.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerFx\nCODE:\n```\nSetProperty(Slider1.Value, 10)\nSetProperty(Rating1.Value, 5)\n```\n\n----------------------------------------\n\nTITLE: Executing GET Request for Listing Environments - Power Platform API\nDESCRIPTION: This HTTP request snippet demonstrates how to retrieve a list of environments from the Power Platform API. The request requires a Bearer token for authentication and expects an application/json response format. No request body is needed for this call. Successful requests return HTTP status **200 OK**, along with environment data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/list-environments.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Bearer eyJ0eXAiOi...\nHost: api.bap.microsoft.com\nAccept: application/json\nGET https://api.bap.microsoft.com/providers/Microsoft.BusinessAppPlatform/scopes/admin/environments?api-version=2020-10-01&$expand=properties.capacity,properties.addons\n```\n\n----------------------------------------\n\nTITLE: Launching a Canvas App with Web Link in Power Fx\nDESCRIPTION: This example shows how to launch a canvas app using its web link with the Launch function in Power Fx.  The web link includes the environment ID, app ID, and tenant ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nLaunch( \"https://apps.powerapps.com/e/{environment id}/a/{app id}?tenantId={tenantId}\" )\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container\nDESCRIPTION: This command runs an interactive session of the CoE CLI application in a Docker container. It ensures that any cached credentials are cleared upon exit.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/install.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm coe-cli\n```\n\n----------------------------------------\n\nTITLE: Setting Up Weekly Message Center Digest Steps\nDESCRIPTION: Step-by-step instructions for configuring weekly digest notifications in the Microsoft 365 Message Center through the Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/notifications-explained.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Log in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/)\n2. In the navigation pane, select **Admin centers**\n3. Select **Microsoft 365**\n4. Expand **Health** and select **Message Center**\n5. On the page that loads, select **Preferences**\n6. A flyout appears on the right, select the **Email** tab\n7. Make sure the email notification settings are as expected\n8. Select the **Send me a weekly digest about services I select** box\n9. Press **Save**\n```\n\n----------------------------------------\n\nTITLE: Defining Items Properties in Shimmer Control - Power Fx\nDESCRIPTION: This Power Fx formula example demonstrates how to define multiple Shimmer elements with properties such as width, height, type, and unique keys. It is intended for creating visually uniform loading indicators by defining `ItemKey`, `ItemWidth`, `ItemHeight`, `ItemRowKey`, and `ItemType` for each shimmer element in a table structure. The formula must be used within a canvas app or custom page.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/shimmer.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\nTable({ItemKey:\"1\",ItemWidth:\"3.8\",ItemHeight:60,ItemRowKey:\"1\",ItemType:\"circle\"},{ItemKey:\"2\",ItemWidth:\"2\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"gap\"},{ItemKey:\"3\",ItemWidth:\"20\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"line\"},{ItemKey:\"4\",ItemWidth:\"2\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"gap\"},{ItemKey:\"5\",ItemWidth:\"2.8\",ItemHeight:30,ItemRowKey:\"1\",ItemType:\"line\"},{ItemKey:\"6\",ItemWidth:\"2\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"gap\"},{ItemKey:\"7\",ItemWidth:\"20\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"line\"},{ItemKey:\"8\",ItemWidth:\"1\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"gap\"},{ItemKey:\"9\",ItemWidth:\"3.8\",ItemHeight:40,ItemRowKey:\"1\",ItemType:\"line\"},{ItemKey:\"10\",ItemWidth:\"2\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"gap\"},{ItemKey:\"11\",ItemWidth:\"20\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"line\"},{ItemKey:\"12\",ItemWidth:\"2\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"gap\"},{ItemKey:\"13\",ItemWidth:\"2.8\",ItemHeight:30,ItemRowKey:\"1\",ItemType:\"line\"},{ItemKey:\"14\",ItemWidth:\"2\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"gap\"},{ItemKey:\"15\",ItemWidth:\"20\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"line\"},{ItemKey:\"16\",ItemWidth:\"1\",ItemHeight:10,ItemRowKey:\"1\",ItemType:\"gap\"})\n```\n\n----------------------------------------\n\nTITLE: Custom Connector - Vehicle Inspection Integration\nDESCRIPTION: Custom connector enabling communication between Power Apps mobile application and backend Azure Function API for seamless vehicle damage assessment workflow\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/solution-ideas/app-evvie.md#2025-04-20_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CoE CLI\nDESCRIPTION: Installs the necessary Node.js dependencies for the CoE CLI using npm. Ensure Node.js is installed on the system. This step requires an internet connection to fetch packages and libraries.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/overview.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Validate .pa.yaml source using Power Platform CLI (Preview)\nDESCRIPTION: This command validates the .pa.yaml source for an unzipped msapp file using the Microsoft Power Platform CLI. This is a preview feature. It requires the path to the extracted msapp directory containing .pa.yaml files to validate.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/canvas.md#2025-04-20_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Installing ALM Accelerator using CoE CLI and JSON\nDESCRIPTION: This command executes the ALM Accelerator installation using the configuration file (quickstart.json) created in the previous step. It leverages the CoE CLI to automate the deployment process based on the settings defined in the JSON file. Make sure to review quickstart.json and modify the file for your needs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/admin-install.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"coe alm install -f quickstart.json\"\n```\n\n----------------------------------------\n\nTITLE: Power Apps Application Types\nDESCRIPTION: Detailed overview of two primary Power Apps application types: canvas apps with highly customizable layouts and model-driven apps using Dataverse as the primary data source\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/application-modernization.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Type of ap | Description |\n|---|---|\n| **Canvas apps** | Canvas apps are highly customizable. They consist of one or more screens that users interact with. |\n| **Model-driven apps** | Model-driven apps use Dataverse as the primary data source. They consist of one or more pages, which can be Dataverse tables or custom pages.\n```\n\n----------------------------------------\n\nTITLE: Forcing Full Inventory Update\nDESCRIPTION: Process for performing a complete inventory update by modifying the Full Inventory environment variable and triggering synchronization\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/faq.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EnvironmentVariable -Name \"Full inventory\" -Value \"Yes\"\nInvoke-SyncTemplateFlow\n```\n\n----------------------------------------\n\nTITLE: Redirect to Announcement Page using HTML\nDESCRIPTION: This HTML snippet is used to redirect users to the announcements page within Dynamics 365 when included as a web resource. Requires customizing the system settings to include this as a web resource. Expected output is a redirection to '/home/homepage/home_news.aspx?pagemode=iframe'. No complex inputs required; just hosting this HTML as part of a dashboard.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/settings-announcements.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body>\n<script type=\"text/javascript\">window.location.href=\"/home/homepage/home_news.aspx?pagemode=iframe\";</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Screen with Button Control in Power Apps\nDESCRIPTION: This snippet illustrates how to navigate to a different screen in Power Apps using a Button control's OnSelect property. The Navigate function allows for seamless movement between screens in the app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setfocus.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nNavigate( Screen1 )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Catalog Details with PowerShell\nDESCRIPTION: This PowerShell function fetches catalog details using the mspcat_GetPowerCatalogDetails API. It relies on previously set base URI and headers through a Connect function. The function processes JSON response and displays catalog information in a formatted manner.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nfunction GetPowerCatalogDetails {\\\n   $results = Invoke-RestMethod `\\\n      -Method Get `\\\n      -Uri $baseURI\"mspcat_GetPowerCatalogDetails\" `\\\n      -Headers $baseHeaders\\\n\\\n   $catalogDetails =  $results.CatalogDetails \\ \n   | ConvertFrom-Json\\\n\\\n   Write-Host \"catalogId: $($catalogDetails.catalogId)\"\\\n   Write-Host \"isSuccess: $($catalogDetails.isSuccess)\"\\\n   Write-Host \"sourceOptions:\"\\\n   foreach($option in $catalogDetails.sourceOptions) {\\\n      Write-Host ('   {0} {1}' -f $option.id, $option.userLocalziedLabel)\\\n   }\\\n   Write-Host \"categoryOptions:\"\\\n   foreach($option in $catalogDetails.categoryOptions) {\\\n      Write-Host ('   {0} {1}' -f $option.id, $option.userLocalziedLabel)\\\n   }\\\n   Write-Host \"publisherLocalizedDisplayName: $($catalogDetails.publisherLocalizedDisplayName)\"\\\n   Write-Host \"catalogItemLocalizedDisplayName: $($catalogDetails.catalogItemLocalizedDisplayName)\"\\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Power Platform Environment Settings with CLI\nDESCRIPTION: Command-line instruction for modifying Power Platform environment configuration using the PAC (Power Platform Administration Center) tool. Used for managing and updating environment-specific settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-update-settings-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac env update-settings\n```\n\n----------------------------------------\n\nTITLE: Allocating Capacity to an Environment in Power Platform Admin Center\nDESCRIPTION: Step-by-step instructions to allocate capacity to a specific Dataverse environment and set up email alerts for capacity thresholds.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/capacity-storage.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com).\n1. In the navigation pane, select **Billing** > **Licenses**.\n1. On the **Summary** page, select the **Dataverse** tab and select **Manage Capacity**. The **Manage capacity** pane is displayed on the right side of the page.\n1. Select the environment for which you want to allocate capacity.\n1. In the **Manage capacity** pane, view the currently allocated and consumed capacity for the environment.\n1. Allocate capacity by entering the desired value in the **Database**, **File**, and **Log** fields. Ensure the capacity values are positive integers and don't exceed the available capacity displayed at the top of the panel.\n1. Opt in to receive daily email alerts sent to tenant and environment admins when the consumed capacity (Database, Log, or File) reaches a set percentage of the allocated capacity.\n1. Select **Save** to apply the changes.\n```\n\n----------------------------------------\n\nTITLE: Using the 'pac connection update' Command in PowerShell\nDESCRIPTION: Example PowerShell command demonstrating how to update a connection using the Power Platform CLI. This is a template example that would need to be completed with proper parameters and options.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connection-update-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac connection update\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Strings in XML Web Resource\nDESCRIPTION: This XML structure defines localized strings in a web resource named 'localizedString.en_US'. It follows the pattern used by .resx files, containing 'data' elements with 'name' attributes and 'value' child elements for each localized string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/create-solutions-support-multiple-languages.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<root>\n <data name=\"ErrorMessage\">\n  <value>There was an error completing this action. Please try again.</value>\n </data>\n <data name=\"Welcome\">\n  <value>Welcome</value>\n </data>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Displaying all Flows\nDESCRIPTION: This command retrieves and displays a list of all flows available in the tenant's environment. It provides administrative oversight of the flows created.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_28\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminFlow\n```\n\n----------------------------------------\n\nTITLE: Type Checking with IsType Function\nDESCRIPTION: Example demonstrating how to test if an untyped JSON object matches a specific type structure before converting it, using the IsType function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_10\n\nLANGUAGE: powerapps-dot\nCODE:\n```\n>> IsType( ParseJSON( \"{\\\"a\\\":1}\" ), Type( {a: Number} ) )\ntrue\n```\n\n----------------------------------------\n\nTITLE: Setting Focus on Calendar Control Using Power Fx\nDESCRIPTION: This Power Fx snippet shows how to set focus on the Calendar control when a new dialog is shown, ensuring user interaction is properly facilitated. It uses a context variable bound to the 'InputEvent' property to manage focus dynamically. Requires familiarity with Power Apps and the context variable setup.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/calendar.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nUpdateContext({ctxResizableTextareaEvent:\"SetFocus\" & Text(Rand())}));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Individual Records from JSON Arrays\nDESCRIPTION: This snippet demonstrates retrieving specific records from an array in a parsed JSON object using the Index function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( line2Quantity, Value( Index( jsonOrder.OrderLines, 2 ).Quantity ); // 5\n```\n\n----------------------------------------\n\nTITLE: Set Security Group for Routing with PowerShell\nDESCRIPTION: This PowerShell command sets the `environmentRoutingTargetSecurityGroupId` to the specified GUID. This limits environment routing to the member makers of the configured security group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/default-environment-routing.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\ntenantSettings.powerPlatform.governance | Add-Member -MemberType NoteProperty -Name 'environmentRoutingTargetSecurityGroupId' -Value \"<GUID for the security group>\" -Force\n\n```\n```\n\n----------------------------------------\n\nTITLE: Launching from Web Page to Canvas App - HTML\nDESCRIPTION: This HTML snippet shows how to create a link that launches a canvas app with specifics such as tenant ID, app ID, and parameters for navigation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-param.md#2025-04-20_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <a\n      href=\"https://apps.powerapps.com/play/e/YOUR-APP-ENVIRONMENT-ID/a/YOUR-APP-ID?tenantId=YOUR-TENANT-ID&Navigate=Second%20Screen&Record=34\"\n    >\n      Launch canvas app\n    </a>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Power Fx Single-Line Comment Example\nDESCRIPTION: This example demonstrates how to use single-line comments in Power Fx. Single-line comments start with `//` and continue until the end of the line. They are used to add explanatory notes within the code that are ignored by the Power Fx interpreter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/expression-grammar.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\n// Hello, world\n//\n\"Hello, world\"    // This is an example of a text literal\n```\n\n----------------------------------------\n\nTITLE: Preparing PowerShell Session for SharePoint Integration\nDESCRIPTION: Enables remote command reception and imports necessary Office 365 modules to the PowerShell session. This is the first step in configuring SharePoint Server integration with Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-PSRemoting -force  \nNew-PSSession  \nImport-Module MSOnline -force  \nImport-Module MSOnlineExtended -force  \n```\n\n----------------------------------------\n\nTITLE: Setting Canvas App Sharing Limits with PowerShell\nDESCRIPTION: PowerShell script that configures sharing limitations for canvas apps in a Managed Environment by preventing sharing with security groups and limiting individual sharing to 20 users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-sharing-limits.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Retrieve the environment\n$environment = Get-AdminPowerAppEnvironment -EnvironmentName <EnvironmentId>\n\n# Update the Managed Environment settings\n$governanceConfiguration = $environment.Internal.properties.governanceConfiguration\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'limitSharingMode' -Value \"excludeSharingToSecurityGroups\" -Force\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'maxLimitUserSharing' -Value \"20\" -Force\n\n# Save the updated Managed Environment settings\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <EnvironmentId> -UpdatedGovernanceConfiguration $governanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Querying Dataverse SDK Logs\nDESCRIPTION: This Kusto query retrieves the 10 most recent SDK operation logs from the dependencies table in Application Insights.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-dataverse.md#2025-04-20_snippet_2\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where type startswith \"SDK\"\n| take 10\n```\n\n----------------------------------------\n\nTITLE: Sending API Request - Power Platform API HTTP\nDESCRIPTION: This HTTP request snippet demonstrates how to list tenant settings using the Power Platform API. It requires an Authorization Bearer token to be included in the headers, and no request body is needed. The endpoint URL specifies the API version to be used.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/list-tenantsettings.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nAuthorization: Bearer eyJ0eXAiOi..\nHost: api.bap.microsoft.com\nAccept: application/json\nPOST https://api.bap.microsoft.com/providers/Microsoft.BusinessAppPlatform/listtenantsettings?api-version=2020-10-01\n```\n\n----------------------------------------\n\nTITLE: Targeted ClearData Usage in Power Fx\nDESCRIPTION: Clears storage for a specific named cache ('MyCache'), making it unavailable for future LoadData operations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-savedata-loaddata.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\nClearData( \"MyCache\" )\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables and Activating Conda in Windows (cmd)\nDESCRIPTION: This snippet modifies the user environment path to include NodeJs and activates the Miniconda environment for the CoE CLI installation. It is part of the steps required to set up the command line interface correctly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/non-administrator-local-install.md#2025-04-20_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nSET PATH=%PATH%;%USERPROFILE%/nodejs\n%windir%\\System32\\cmd.exe \"/K\" %USERPROFILE%\\miniconda3\\Scripts\\activate.bat %USERPROFILE%\\miniconda3\n```\n\n----------------------------------------\n\nTITLE: Meter Usage Table Markdown\nDESCRIPTION: Markdown table showing how different meters count and bill usage in Power Platform services.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-meters.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Meter | What is counted? | What is billed? |\n|------|--------|--------|\n| Power Apps per-app | The total number of unique monthly active users of each app in a pay-as-you-go environment. </br>An active user is someone who opens an app at least once in the given month. </br>Repeat access of an app by a user isn't counted. Users with Power Apps per-user licenses aren't counted. Users with a Dynamics 365 license that provides access to per user license aren't counted.| $10 per active user/app/month |\n```\n\n----------------------------------------\n\nTITLE: Installing Catalog Item using .NET SDK - InstallCatalogItemByCID\nDESCRIPTION: .NET method to install a catalog item by its ID, with support for version specification and environment targeting\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/install-items.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstatic EntityReference InstallCatalogItemByCIDExample(IOrganizationService service,\n    string catalogItemId,\n    Uri deployToOrgUrl,\n    string? settings = null)\n{\n    var request = new mspcat_InstallCatalogItemByCIDRequest\n    {\n        CID = catalogItemId,\n        DeployToOrganizationUrl = deployToOrgUrl.ToString(),\n    };\n    if (string.IsNullOrEmpty(settings))\n    {\n        request.Settings = settings;\n    }\n\n    var response = (mspcat_InstallCatalogItemByCIDResponse)service.Execute(request);\n\n    return response.InstallHistoryReferance;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Strict-Transport-Security Header\nDESCRIPTION: The Strict-Transport-Security HTTP header is set to enforce HTTPS connections and prevent man-in-the-middle attacks. The `max-age` directive specifies the duration (in seconds) that the browser should remember to only access the site via HTTPS. The `includeSubDomains` directive indicates that this policy also applies to all subdomains.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/security/faqs.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\n\"Strict-Transport-Security: max-age=31536000; includeSubDomains\"\n```\n\n----------------------------------------\n\nTITLE: Granting Power App Management Permissions using PowerShell\nDESCRIPTION: This PowerShell script is used to grant elevated permissions to an app registration, which are required for the ALM Accelerator pipelines to perform necessary actions in Power Platform environments. Ensure that your organization's security policies allow such permissions before proceeding.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-components-manually.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\nInstall-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber\nNew-PowerAppManagementApp -ApplicationId <the Application (client) ID you copied when you created the app registration>\n```\n\n----------------------------------------\n\nTITLE: Navigate to CoE CLI Folder\nDESCRIPTION: Change directory to the coe-cli folder for upgrade process\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/upgrade.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd coe-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring BAPI_PO_GETLIST Function for Power Automate Flow (JSON)\nDESCRIPTION: JSON configuration for the BAPI_PO_GETLIST function in a Power Automate flow. It sets parameters for retrieving purchase orders within a specific date range and optional filters for purchasing organization, vendor, material, and plant.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/integration-assistant/use.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rfcName\": \"BAPI_PO_GETLIST\",\n  \"parameters\": {\n   \"DOC_DATE\": {\n     \"SIGN\": \"I\",\n     \"OPTION\": \"BT\",\n      \"LOW\": \"20240101\",\n      \"HIGH\": \"20241231\"\n    },\n    \"PURCHASING_ORG\": \"1000\",\n    \"VENDOR\": \"\",\n    \"MATERIAL\": \"\",\n    \"PLANT\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining convert-to-managed Parameter in pac solution import\nDESCRIPTION: The 'convert-to-managed' parameter allows a managed solution being imported to convert unmanaged components to managed. Without this flag, the import fails if managed layers are being placed on unmanaged base components. Using this parameter results in the inbound managed solution becoming the base layer for these components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-import-remarks.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### convert-to-managed\n\nThe `convert-to-managed` parameter doesn't take an unmanaged solution and import it as managed. This parameter allows a managed solution that is being imported into an environment convert unmanaged components to managed. \n\nIf this flag isn't explicitly set, the solution system will fail the import request because managed layers can't go on top of unmanaged base components. This switch allows the solution import to succeed and the net result is that the inbound managed solution will be the base layer for each of these components – the components in the destination environment are converted from being an unmanaged component to being a managed component.\n```\n\n----------------------------------------\n\nTITLE: Sort by Text Column Example in Power Fx\nDESCRIPTION: Examples showing how to sort a table alphabetically by a text column using both Sort and SortByColumns functions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sort.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nSort( IceCream, Flavor )\n\nSortByColumns( IceCream, \"Flavor\" )\n```\n\n----------------------------------------\n\nTITLE: Defining Cognitive Design Principles in UI Development\nDESCRIPTION: Explores key cognitive concepts that influence user interface design, including mental models, affordances, and cognitive biases\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/interaction-design.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Key design strategies\n\nFor a successful workload, visual design and user interactions must work in harmony to create the user experience.\n```\n\n----------------------------------------\n\nTITLE: Mapping Government Cloud Environment Parameters\nDESCRIPTION: Maps common government cloud acronyms (GCC, GCC High, DoD) to their corresponding cloud parameter values used in the system. Used for specifying the target government cloud environment in API calls or configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-create-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- GCC = `UsGov`\n- GCC High = `UsGovHigh`\n- DoD = `UsGovDod`\n```\n\n----------------------------------------\n\nTITLE: JSON GUID Example\nDESCRIPTION: Example showing how GUID values are represented as lowercase strings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"751b58ac-380e-4a04-a925-9f375995cc40\"\n```\n\n----------------------------------------\n\nTITLE: Setting Label Fill Color Based on Position in Chessboard in Power FX\nDESCRIPTION: Determines the background color of a label based on its position in a chessboard pattern, referencing both Rank and File values from parent galleries.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_28\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Mod( Rank.Value + File.Value, 2 ) = 1, Green, Beige )\n```\n\n----------------------------------------\n\nTITLE: Configuring Inactivity Timeout in Power Platform Admin Center\nDESCRIPTION: Steps to configure inactivity timeout settings for a Power Platform environment. This is similar to configuring session timeout but focuses specifically on inactivity settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/user-session-management.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the Power Platform admin center, select an environment. \n\n2. Select **Settings** > **Product** > **Privacy + Security**.  \n\n3. Set **Session Expiration** and **Inactivity timeout**. These settings apply to all users.\n```\n\n----------------------------------------\n\nTITLE: Getting Detailed Help for CoE CLI Commands\nDESCRIPTION: This snippet explains how to retrieve more detailed help for specific commands in the CoE CLI by using the `--help` option. It is tailored for obtaining help on the ALM Accelerator installation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/overview.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncoe help alm install\n```\n\n----------------------------------------\n\nTITLE: Provisioning Microsoft 365 Groups Solution\nDESCRIPTION: Steps for installing the Microsoft 365 Groups solution from the Microsoft 365 admin center. This process provisions the Groups functionality for use with Dynamics 365 customer engagement apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/deploy-office-365-groups.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com).\n\n2. Select **Resources** > **Dynamics 365 apps**.\n  \n3. Select **Office365Groups** and then select **Install**.\n```\n\n----------------------------------------\n\nTITLE: Displaying OfflineEnabled Status\nDESCRIPTION: This Power Fx snippet describes how to display the OfflineEnabled status, indicating the app's capability to run offline on various devices. The property returns true only for apps enabled for offline use when not on the web. The output can be bound to a label's text property seamlessly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-host.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nLabel1.Text: Host.OfflineEnabled\n```\n\n----------------------------------------\n\nTITLE: Certification Request Entity Relationship Properties\nDESCRIPTION: Table defining the properties of entity relationships including referenced entities, attributes, navigation properties and cascade configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|ReferencedEntity|`mspcat_certificationrequest`|\n|ReferencedAttribute|`mspcat_certificationrequestid`|\n|ReferencingAttribute|`mspcat_supersededby`|\n|ReferencingEntityNavigationPropertyName|`mspcat_Supersededby`|\n|IsHierarchical||\n|CascadeConfiguration|Archive: `NoCascade`<br />Assign: `NoCascade`<br />Delete: `RemoveLink`<br />Merge: `NoCascade`<br />Reparent: `NoCascade`<br />RollupView: `NoCascade`<br />Share: `NoCascade`<br />Unshare: `NoCascade`|\n```\n\n----------------------------------------\n\nTITLE: Exporting User Signing Certificate as .p12 File - PowerShell\nDESCRIPTION: This code exports the user signing certificate and its corresponding private key into a .p12 file format for Windows Store import.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nopenssl pkcs12 -export -out user_signing_cert.p12 -inkey .\\signingUsersCert\\users.key.pem -in .\\signingUsersCert\\users.cert.pem\n```\n\n----------------------------------------\n\nTITLE: SAP CommonCryptoLib Configuration\nDESCRIPTION: This snippet configures CommonCryptoLib for Kerberos SSO by enabling Kerberos in the client role. It's used to configure single sign-on (SSO) in the gateway scenario when accessing SAP servers. The `.ini` file is placed in the same directory as `sapcrypto.dll` and contains configuration settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/configure-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n\"ccl/snc/enable_kerberos_in_client_role = 1\"\n```\n\n----------------------------------------\n\nTITLE: Exporting User-Created Environments with PowerShell for Admins\nDESCRIPTION: This PowerShell snippet exports all environments created by a specific user. It uses the Get-AdminPowerAppEnvironment function from the Power Apps Admin PowerShell cmdlets, filtering by the user's ID, and saves the output as a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$userId = \"00aa00aa-bb11-cc22-dd33-44ee44ee44ee\"\nGet-AdminPowerAppEnvironment -CreatedBy $userId | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Dataverse Virtual Tables Integration\nDESCRIPTION: Virtual tables provide seamless integration of external system data into Microsoft Dataverse without data replication, supporting various data providers and custom connector scenarios\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/application-modernization.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **Virtual tables** | Virtual tables make it easier to integrate data that resides in external systems. They seamlessly represent the external data as tables in Microsoft Dataverse, without replicating the data\n```\n\n----------------------------------------\n\nTITLE: Licensed User Request Limits Table\nDESCRIPTION: Markdown table showing the daily request limits for different types of licensed users across Power Platform products.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/api-request-limits-allocations.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Products | Requests per paid license per 24 hours |\n|--------------|-------------------|\n| Paid licensed users for Power Platform (excludes Power Apps per App, Power Automate per flow, and Microsoft Copilot Studio) and Dynamics 365 excluding Dynamics 365 Team Member    | 40,000     |\n| Power Apps pay-as-you-go plan, and paid licensed users for Power Apps per app, Microsoft 365 apps with Power Platform access, and Dynamics 365 Team Member | 6,000        |\n| Power Automate per flow plan, Microsoft Copilot Studio base offer, and Microsoft Copilot Studio add-on pack   | 250,000    |\n| Paid Power Apps Portals login | 200 |\n```\n\n----------------------------------------\n\nTITLE: Converting GUID to String in Power Platform\nDESCRIPTION: This formula generates a GUID and converts it to its string representation using the Text function. The output is a standard string format for GUID values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-text.md#2025-04-20_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nText(GUID())\n```\n\n----------------------------------------\n\nTITLE: Testing Screen Layout in Power Apps for Surface Duo\nDESCRIPTION: Formula for testing screen layouts specifically for Surface Duo devices. This pattern helps determine the current state of the app across dual screens to implement responsive design patterns.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/cc-microsoft.md#2025-04-20_snippet_1\n\nLANGUAGE: powerapps-formula\nCODE:\n```\nIf(App.ActiveLayout = App.SupportedLayouts.Tablet,\"Spanning\", If(App.ActiveLayout = App.SupportedLayouts.Phone, \"Single Screen\", \"Other\"))\n```\n\n----------------------------------------\n\nTITLE: Getting Catalog Information Using PowerShell\nDESCRIPTION: This PowerShell function invokes the GetPowerCatalogInformation API to fetch and return catalog information, dependent on a base URI and headers set for the REST call.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfunction GetPowerCatalogInformationExample {\n   param (\n      [bool]\n      $permissionsonly\n   )\n\n   $uri = $baseURI + 'mspcat_GetPowerCatalogInformation'\n   if ($permissionsonly) {\n      $uri += '(?permissionsonly=true)'\n   }\n   $results = Invoke-RestMethod `\n      -Method Get `\n      -Uri $uri `\n      -Headers $baseHeaders \n\n   return  @{\n      SolutionVersion     = $results.SolutionVersion\n      CatalogDescription  = $results.CatalogDescription\n      CanRead             = $results.CanRead\n      CatalogName         = $results.CatalogName\n      ImageLink           = $results.ImageLink\n      CanSubmit           = $results.CanSubmit\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Profile with Environment URL in PowerShell\nDESCRIPTION: Updates an authentication profile at index 1 by setting a custom name 'Contoso Dev' and specifying the environment URL. This command modifies an existing authentication profile with new environment details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-update-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac auth update --index 1 --name \"Contoso Dev\" --environment \"https://contosodev.crm.dynamics.com\"\n```\n\n----------------------------------------\n\nTITLE: Using With function with RecordInfo in Power Apps\nDESCRIPTION: This example shows how to use the With function to capture a record and then pass it to the RecordInfo function to check edit permissions. This is useful for storing the record in a variable before checking its permissions. The result will be the same as the first example.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-recordinfo.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nWith( { MyRecord: First( Accounts ) },\n      RecordInfo( MyRecord, RecordInfo.EditPermission ) )\n```\n\n----------------------------------------\n\nTITLE: Listing Applications in Specific Environment using Power Platform CLI\nDESCRIPTION: Shows how to list all available applications in a specified Power Platform environment using the pac application list command with an environment ID parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/application-list-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac application list --environment-id 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Enabling Content Security Policy with Frame Ancestors in Power Platform\nDESCRIPTION: This JavaScript function enables Content Security Policy (CSP) settings by configuring frame-ancestor sources. It retrieves organization information, updates CSP configuration with specified sources, and enables CSP if not already enabled. The function requires a user with organization entity update privileges.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/content-security-policy.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function enableFrameAncestors(sources) {\n    const baseUrl = Xrm.Utility.getGlobalContext().getClientUrl();\n\n    if (!Array.isArray(sources) || sources.some(s => typeof s !== 'string')) {\n        throw new Error('sources must be a string array');\n    }\n\n    const orgResponse = await fetch(`${baseUrl}/api/data/v9.1/organizations`);\n    if (!orgResponse.ok) throw new Error('Failed to retrieve org info');\n    const orgs = await orgResponse.json();\n    const { organizationid, contentsecuritypolicyconfiguration, iscontentsecuritypolicyenabled } = orgs.value[0];\n\n    console.log(`Organization Id: ${organizationid}`);\n    console.log(`CSP Enabled?: ${iscontentsecuritypolicyenabled}`);\n    console.log(`CSP Config: ${contentsecuritypolicyconfiguration}`);\n\n    const orgProperty = prop => `${baseUrl}/api/data/v9.1/organizations(${organizationid})/${prop}`;\n\n    console.log('Updating CSP configuration...')\n    const config = {\n        'Frame-Ancestor': {\n            sources: sources.map(source => ({ source })),\n        },\n    };\n    const cspConfigResponse = await fetch(orgProperty('contentsecuritypolicyconfiguration'), {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            value: JSON.stringify(config),\n        }),\n    });\n\n    if (!cspConfigResponse.ok) {\n        throw new Error('Failed to update csp configuration');\n    }\n    console.log('Successfully updated CSP configuration!')\n\n    if (iscontentsecuritypolicyenabled) {\n        console.log('CSP is already enabled! Skipping update.')\n        return;\n    }\n\n    console.log('Enabling CSP...')\n    const cspEnableResponse = await fetch(orgProperty('iscontentsecuritypolicyenabled'), {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            value: true,\n        }),\n    });\n\n    if (!cspEnableResponse.ok) {\n        throw new Error('Failed to enable csp');\n    }\n    console.log('Successfully enabled CSP!')\n}\n```\n\n----------------------------------------\n\nTITLE: Get Migration Status using PowerShell\nDESCRIPTION: This PowerShell command retrieves the status of a Power App environment migration using the provided MigrationId. The MigrationId uniquely identifies the migration process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nTenantToTenant-GetMigrationStatus -MigrationId {MigrationId}\n```\n\n----------------------------------------\n\nTITLE: Using With and Time Functions in Power Fx\nDESCRIPTION: Demonstrates the use of the With function to convert a string extracted with Match into a time value using the Time function. The Match function extracts hours, minutes, and seconds from a string formatted as an ISO 8601 duration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ismatch.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nWith(\n    Match( \"PT2H1M39S\", \"PT(?:(?<hours>\\d+)H)?(?:(?<minutes>\\d+)M)?(?:(?<seconds>\\d+)S)?\" ),\n   Time( Value( hours ), Value( minutes ), Value( seconds ) )\n)\n```\n\n----------------------------------------\n\nTITLE: Navigating to the CoE CLI Directory\nDESCRIPTION: The command moves the current directory to coe-cli. Ensure the coe-starter-kit is cloned or downloaded before executing this. This step is crucial for executing subsequent setup and installation steps within the CLI directory.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/overview.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd coe-cli\n```\n\n----------------------------------------\n\nTITLE: Displaying Predefined Security Roles Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing predefined security roles for environments without a Dataverse database, including Environment Admin and Environment Maker roles with their descriptions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/database-security.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Security role |  Description |\n|---------|---------|\n| Environment Admin | The Environment Admin role can perform all administrative actions on an environment, including:<br/><ul><li>Add or remove a user from either the Environment Admin or Environment Maker role.</li><li>Provision a Dataverse database for the environment. After a database is provisioned, assign the System Customizer role to an Environment Admin to give them access to the environment's data.</li><li>View and manage all resources created in an environment.</li><li>Create [data loss prevention policies](prevent-data-loss.md).</li></ul> |\n| Environment Maker |Can create new resources associated with an environment, including apps, connections, custom APIs, and flows using Microsoft Power Automate. However, this role doesn't have privileges to access data in an environment.<br/><br/>Environment makers can also [distribute the apps they build](/powerapps/maker/canvas-apps/share-app) in an environment to other users in your organization. They can share the app with individual users, security groups, or all users in the organization. |\n```\n\n----------------------------------------\n\nTITLE: Using As Operator in Patching Records in a Loop\nDESCRIPTION: This snippet illustrates the use of the As operator to clarify the record context within nested ForAll loops when patching inactive employee statuses.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_19\n\nLANGUAGE: power-fx\nCODE:\n```\nWith( { InactiveEmployees: Filter( Employees, Status = 'Status (Employees)'.Inactive ) },\n      ForAll( InactiveEmployees As Employee, \n              Patch( Employees, Employee, { Status: 'Status (Employees)'.Active } ) ) )\n```\n\n----------------------------------------\n\nTITLE: Sequence Function with Step Parameter\nDESCRIPTION: In this example, the Sequence function generates numbers by providing a negative step parameter. This allows the generation of a backward counting sequence.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sequence.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nSequence( 4, 4, -1 )\n```\n\n----------------------------------------\n\nTITLE: AA4PP Installation Commands\nDESCRIPTION: This snippet shows the commands used to generate the installation configuration and then execute the installation of AA4PP.  The `generate install` command creates an `install.json` file containing the configuration, and the `install` command uses this file to perform the installation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm generate install -o install.json\ncoe alm install -f install.json\n```\n\n----------------------------------------\n\nTITLE: Querying Location Latitude - Power Platform - Formula\nDESCRIPTION: Returns the latitude of the current location, providing the coordinate used in a mobile application context. The latitude can change continuously as the object moves.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n**Location.Latitude**\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationships in Power Platform\nDESCRIPTION: This snippet outlines the many-to-many relationship between mspcat_app_policy_reln and associated entities, detailing intersect entity names and configuration. This is crucial for understanding complex interactions between data entities in Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_staticanalysispolicy.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|IntersectEntityName|`mspcat_app_policy_reln_entity`|\n|IsCustomizable|True|\n|SchemaName|`mspcat_app_policy_reln`|\n|IntersectAttribute|`mspcat_staticanalysispolicyid`|\n|NavigationPropertyName|`mspcat_app_policy_reln`|\n|AssociatedMenuConfiguration|AvailableOffline: True<br />Behavior: `DoNotDisplay`<br />Group: `Details`<br />Label: <br />MenuId: null<br />Order: <br />QueryApi: null<br />ViewId: `00000000-0000-0000-0000-000000000000`|\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Usage Details in Dataverse\nDESCRIPTION: Steps to track usage for a specific environment by navigating from the Dataverse page.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/capacity-storage.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the **Dataverse** page, select **Environment** and choose an environment from the list. \n1. Alternatively in the **Top environment consuming storage** tile, select **See all environments** and select an environment name.\n```\n\n----------------------------------------\n\nTITLE: Using Log Function with Custom Base in Power Fx\nDESCRIPTION: Example of using the Log function with a custom base to calculate the base-2 logarithm of 64, resulting in 6.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Fx\nCODE:\n```\nLog( 64, 2 )\n```\n\n----------------------------------------\n\nTITLE: Creating SharePoint Managed Identity Record in Dataverse using JSON POST Request\nDESCRIPTION: This JSON example demonstrates how to insert a row into the sharepointmanagedidentity table in Dataverse with required fields including a unique identifier, name, uniquename, and a reference to the previously created managed identity record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-azure-app-with-sharepoint-access.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"sharepointmanagedidentityid\": \"<newGuid>\",\n\"uniquename\": \"msft_ppmiforsharepointauth\",\n\"name\": \"Managed Identity For SharePoint Auth\",\n\"ManagedIdentityId@odata.bind\": \"/managedidentities(<managedIdentityId>)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PCF Component Using PowerShell\nDESCRIPTION: This snippet initializes a new PowerApps Component Framework (PCF) component using PowerShell. It requires the 'pac' command line interface to be installed and configured, as well as the PowerApps environment set up. The parameters include 'namespace' for defining the component's scope, 'name' for the component's identifier, and 'template' for setting the type of component (in this case, a field).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/pcf-init-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac pcf init --namespace SampleNameSpace --name SampleComponent --template field\n```\n\n----------------------------------------\n\nTITLE: Initiating Analysis Job with Power Apps Checker Web API in HTTP\nDESCRIPTION: This snippet illustrates how to initiate an analysis job by sending a POST request to the Power Apps checker API. It includes necessary headers and a JSON body that specifies the ruleset and files for analysis. Ensure an OAuth token is included for authorization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/analyze.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST [Geographical URI]/api/analyze?api-version=1.0\nAccept: application/json\nContent-Type: application/json; charset=utf-8\nx-ms-correlation-id: aaaa0000-bb11-2222-33cc-444444dddddd\nx-ms-tenant-id: aaaabbbb-0000-cccc-1111-dddd2222eeee\n\n{\n    \"ruleSets\": [{\n        \"id\": \"0ad12346-e108-40b8-a956-9a8f95ea18c9\"\n    }],\n    \"sasUriList\": [\"https://testenvfakelocation.blob.core.windows.net/mySolution.zip\"],\n    \"fileExclusions\": [\"*jquery*\", \"*json*\"]\n}\n\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\nContent-Type: application/json; charset=utf-8\nLocation: [Geographical URI]/api/status/aaaa0000-bb11-2222-33cc-444444dddddd&api-version=1.0\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Formula for Fiction Books in Power Fx\nDESCRIPTION: Demonstrates defining a named formula to filter fiction books from a library using Power Fx custom data types and Filter operation without parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_6\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nLibrary = [ { Title: \"The Hobbit\", Author: \"J. R. R. Tolkien\", Genre: \"Fiction\" },\n            { Title: \"Oxford English Dictionary\", Author: \"Oxford University\", Genre: \"Reference\" } ];\n\nLibraryFiction = Filter( Library, Genre = \"Fiction\" );\n```\n\n----------------------------------------\n\nTITLE: Navigating to CoE Starter Kit Repository (cmd)\nDESCRIPTION: This snippet demonstrates how to navigate to the CoE Starter Kit directory after downloading or cloning the repository. It's a crucial step before setting up the CoE CLI.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/non-administrator-local-install.md#2025-04-20_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\ncd coe-starter-kit\n```\n\n----------------------------------------\n\nTITLE: Admin Portal Access URLs\nDESCRIPTION: Key administrative portal URLs for Microsoft Power Platform and Microsoft 365 management interfaces\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-management-monitoring.md#2025-04-20_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://aka.ms/ppac\n```\n\nLANGUAGE: url\nCODE:\n```\nhttps://admin.microsoft.com/\n```\n\n----------------------------------------\n\nTITLE: Updating an Approval Rejection Applied Policy\nDESCRIPTION: This snippet illustrates how to update an existing approval rejection entry in the Power Platform using a PATCH request.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrejectionappliedpolicy.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n`PATCH` /mspcat_certificationrejectionappliedpolicies(*mspcat_certificationrejectionappliedpolicyid*)<br />See [Update](/powerapps/developer/data-platform/webapi/update-delete-entities-using-web-api#basic-update)\n```\n\n----------------------------------------\n\nTITLE: Adding Reference to Power Platform Solution using PowerShell\nDESCRIPTION: This command adds a reference to a Power Platform solution using the Power Platform CLI. It specifies the path to the component that should be added as a reference.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-add-reference-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution add-reference --path c:\\Users\\Downloads\\SampleComponent\n```\n\n----------------------------------------\n\nTITLE: Fetching Default Environment in Power Platform with PowerShell\nDESCRIPTION: This command finds the default environment in the tenant using the `Get-AdminPowerAppEnvironment` cmdlet with the `-Default` parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-task-automation-powershell.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"Get-AdminPowerAppEnvironment -Default\"\n```\n\n----------------------------------------\n\nTITLE: Viewing All Alerts in Microsoft Power Platform\nDESCRIPTION: This snippet demonstrates how to access and manage all alerts in the Microsoft Power Platform web app. It includes steps for deleting alerts, filtering by type, and handling synchronization issues.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/monitor-email-processing-errors.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIn the web app, use the [Area switcher](/powerapps/user/navigation#area-switcher) to select **Sales**, and then go to  **Sales** > **Alerts**.\n\n-   To delete all alerts at once, click or tap the Delete all alerts icon on the alerts wall.\n-   To view just errors, warnings, or information, click or tap **Errors**, **Warnings**, or **Information** respectively.\n\nIf you are also synchronizing appointments, contacts, and tasks through server-side synchronization, you'll see alerts for the following:\n\n-   When one or more duplicate records are found in customer engagement apps when saving a record from [!INCLUDE[pn_Exchange](../includes/pn-exchange.md)] to customer engagement apps.\n-   When a scheduling conflict is found when saving an appointment from [!INCLUDE[pn_Exchange](../includes/pn-exchange.md)] to customer engagement apps because a mailbox is unavailable at the time.\n-   When previously linked items are found for a specific mailbox.\n\nYou'll be prompted to take actions on the errors about the appointment, contacts, and tasks synchronization.\n```\n\n----------------------------------------\n\nTITLE: Complete Mapping File Example\nDESCRIPTION: This XML snippet demonstrates a complete mapping file for the SolutionPackager tool, showing how to map web resources and default generated assemblies from a specific developer toolkit project.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-packager-tool.md#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Mapping>\n       <!-- Match specific named files to an alternate folder -->\n       <FileToFile map=\"CRMDevTookitSamplePlugins.dll\" to=\"..\\..\\Plugins\\bin\\**\\CRMDevTookitSample.plugins.dll\" />\n       <FileToFile map=\"CRMDevTookitSampleWorkflow.dll\" to=\"..\\..\\Workflow\\bin\\**\\CRMDevTookitSample.Workflow.dll\" />\n       <!-- Match any file in and under WebResources to an alternate set of subfolders -->\n       <FileToPath map=\"WebResources\\*.*\" to=\"..\\..\\CrmPackage\\WebResources\\**\" />\n       <FileToPath map=\"WebResources\\**\\*.*\" to=\"..\\..\\CrmPackage\\WebResources\\**\" />\n</Mapping>\n```\n\n----------------------------------------\n\nTITLE: Listing Service Principals using Power Platform CLI\nDESCRIPTION: PowerShell command to list service principals using the Power Platform CLI pac admin command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-service-principal-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin list-service-principal\n```\n\n----------------------------------------\n\nTITLE: Displaying Flow User Details\nDESCRIPTION: This command retrieves user details related to a flow's usage, specifically for the currently logged-in user. It helps in monitoring flow utilization by users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_30\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminFlowUserDetails –UserId $Global:currentSession.userId\n```\n\n----------------------------------------\n\nTITLE: Responsive Layout Strategy with Breakpoints\nDESCRIPTION: Explains the concept of viewport and breakpoints for creating adaptive layouts that dynamically adjust content based on screen dimensions. Provides guidance on responsive design techniques for different device classes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/layout.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Term | Definition |\n|---|---|\n| Viewport | Visible portion of a digital interface, such as a web browser or mobile app, where content is displayed. |\n| Breakpoints | Specific pixel values that define viewport ranges used to determine adaptive layout behavior. |\n```\n\n----------------------------------------\n\nTITLE: Displaying Required Parameters for 'pac plugin push' in Markdown\nDESCRIPTION: This snippet shows the required parameter for the 'pac plugin push' command in a markdown format, including its description.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/plugin.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#### `--pluginId` `-id`\n\nID of plug-in assembly or plug-in package\n```\n\n----------------------------------------\n\nTITLE: Converting Untyped Object to Text in Power Fx\nDESCRIPTION: This snippet demonstrates how to convert an untyped object variable 'UOValue' to text using the Text() function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nText(UOValue)\n```\n\n----------------------------------------\n\nTITLE: Publisher Entity Relationship Properties\nDESCRIPTION: Table defining the properties of publisher entity relationships including referenced entities, attributes, navigation properties and cascade configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|ReferencedEntity|`mspcat_publisher`|\n|ReferencedAttribute|`mspcat_publisherid`|\n|ReferencingAttribute|`mspcat_publisher`|\n|ReferencingEntityNavigationPropertyName|`mspcat_Publisher`|\n|IsHierarchical||\n|CascadeConfiguration|Archive: `NoCascade`<br />Assign: `NoCascade`<br />Delete: `RemoveLink`<br />Merge: `NoCascade`<br />Reparent: `NoCascade`<br />RollupView: `NoCascade`<br />Share: `NoCascade`<br />Unshare: `NoCascade`|\n```\n\n----------------------------------------\n\nTITLE: Importing Single Exchange Rate Data in CSV Format\nDESCRIPTION: An example of a CSV line for importing exchange rate data with a single rate for the whole date range, specifying the currency codes, valid date range, and exchange rate value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/change-base-currency-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: CSV\nCODE:\n```\nfromcurrencyid,tocurrencyid,vaIidfrom,vaIidto,exchangerate USD,EUR,2022-01-01 08:00,2023-01-01 08:00,2.0\n```\n\n----------------------------------------\n\nTITLE: Email Pattern Matching Regular Expression\nDESCRIPTION: Regular expression pattern for matching email addresses. Requires an '@' symbol and domain name containing a dot.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ismatch.md#2025-04-20_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n.+\\@.+\\.[^\\.]{2,}\n```\n\n----------------------------------------\n\nTITLE: Update CoE CLI Link\nDESCRIPTION: Update local installation of CoE CLI using npm link\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/upgrade.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm link --force\n```\n\n----------------------------------------\n\nTITLE: Power Query Performance Configuration Options\nDESCRIPTION: Configuration strategies for optimizing data integration performance across finance, operations, and Dataverse applications through various export and import settings\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/data-integrator.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Performance tuning\n```\n\n----------------------------------------\n\nTITLE: Basic Power Fx Formulas in YAML\nDESCRIPTION: Examples of basic Power Fx expressions in YAML format showing the required leading equal sign syntax. These examples demonstrate simple boolean, numeric, and text expressions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/yaml-formula-grammar.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nVisible: =true\nX: =34\nText: |\n\t=\"Hello, \" &\n\t\"World\"\n```\n\n----------------------------------------\n\nTITLE: Learning Path Organization Settings\nDESCRIPTION: Provides an organization-wide configuration to enable or disable Learning Path (guided help) for users. Allows administrators to control access to interactive learning resources.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-general-tab.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nEnable Learning Path: Changes access to Learning Path for an entire organization.\n```\n\n----------------------------------------\n\nTITLE: Updating SAP System Parameters for SSO - Settings\nDESCRIPTION: This snippet shows how to update specific SAP system parameters to enable SSO integration with Microsoft Entra ID using certificates.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n\"SsoCertificateSubject\": \"CN=Users Intermediate Cert, O=Contoso\",\n\nAlso enable\n\n\"SncSso\": \"On\"\n\nReplace the connection with a new one that uses `Microsoft Entra ID (using certificates)` to sign in to SAP with your Microsoft Entra ID account.\n```\n\n----------------------------------------\n\nTITLE: Application Installation Request Body JSON for Office 365 Groups\nDESCRIPTION: JSON request body containing application details for the Office 365 Groups application installation, including ID, version, description, and supported countries.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n                \"id\": \"ce3bab3c-ada1-40cf-b84b-49b26603a281\",\n                \"uniqueName\": \"Office365Groups\",\n                \"version\": \"2.9.0.3\",\n                \"localizedDescription\": \"With Office 365 groups, you can collaborate with people across your company even if they aren't Dynamics 365 users. Groups provide a single location to share conversations, meetings, documents, and more.\",\n                \"localizedName\": \"Office 365 Groups\",\n                \"applicationId\": \"2f17f077-4175-4d82-b82b-17cd8950b74f\",\n                \"applicationName\": \"Office365Groups\",\n                \"applicationDescription\": \"\",\n                \"singlePageApplicationUrl\": \"\",\n                \"publisherName\": \"Microsoft CRM Package\",\n                \"publisherId\": \"255953fd-9ab8-4146-bfa1-859aae326ae9\",\n                \"learnMoreUrl\": \"http://go.microsoft.com/fwlink/?LinkID=525719\",\n                \"crmMinversion\": \"8.0\",\n                \"crmMaxVersion\": null,\n                \"customHandleUpgrade\": false,\n                \"instancePackageId\": null,\n                \"state\": \"None\",\n                \"catalogVisibility\": \"None\",\n                \"applicationVisibility\": \"All\",\n                \"errorDetails\": null,\n                \"startDateUtc\": \"2016-01-01T00:00:00Z\",\n                \"endDateUtc\": \"2050-01-01T00:00:00Z\",\n                \"supportedCountries\": [\n                    \"AE\",\n                    \"AL\",\n                    \"AM\",\n                    \"AO\",\n                    \"VN\",\n                    \"ZA\",\n                    \"ZW\"\n                ]\n            }\n```\n\n----------------------------------------\n\nTITLE: Setting Rule Exclusions via PowerShell\nDESCRIPTION: PowerShell command to configure solution checker enforcement with specific rule exclusions for a managed environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-solution-checker.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSetManagedEnvironmentSolutionCheckerEnforcementLevel -EnvironmentId 8d996ece-8558-4c4e-b459-a51b3beafdb4 -Level none -RuleExclusions \"web-use-async,web-use-offline\"\n```\n\n----------------------------------------\n\nTITLE: Canvas App Navigation with Screens and Components\nDESCRIPTION: Explains how canvas apps use screens and native components for navigation, including galleries, vertical layout containers, and buttons. It also suggests using custom components for reusable global navigation elements.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/information-architecture.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Platform\nCODE:\n```\n\"[screens](/power-apps/maker/canvas-apps/controls/control-screen)\",\n\"[navigation](/power-apps/maker/canvas-apps/add-screen-context-variables)\",\n\"[gallery](/power-apps/maker/canvas-apps/controls/control-gallery)\",\n\"[vertical layout container](/power-apps/maker/canvas-apps/controls/control-vertical-container)\",\n\"[button](/power-apps/maker/canvas-apps/controls/modern-controls/modern-control-button)\",\n\"[navigate](/power-platform/power-fx/reference/function-navigate)\",\n\"[custom components](/power-apps/maker/canvas-apps/create-component)\"\n```\n\n----------------------------------------\n\nTITLE: Adding SharePoint Online Parameter to Canvas App URL\nDESCRIPTION: This code snippet shows how to add a story ID parameter to the canvas app URL when embedding it in a SharePoint Online page. This allows the app to display specific value cards for a given success story.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-business-value-toolkit.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n?&storyId=<paste story Id>\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading Progress Using ProgressIndicator in Power Fx\nDESCRIPTION: This code snippet demonstrates how to utilize the ProgressIndicator control to visually indicate loading progress in a Power Apps canvas application. It shows how to update the visibility and the progress value dynamically during a processing operation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/progressindicator.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ var_showProgress: true , var_progressValue: 0 });\n\n/* Some code ... */\n\nUpdateContext({ var_progressValue: 25 });\n\n/* Some code ... */\n\nUpdateContext({ var_progressValue: 50 });\n\n/* Some code ... */\n\nUpdateContext({ var_progressValue: 75 });\n\n/* Some code ... */\n\nUpdateContext({ var_progressValue: 100 });\n\nNotify(\"Successfully completed process\", NotificationType.Success);\n\nUpdateContext({ var_showProgress: false });\n```\n\n----------------------------------------\n\nTITLE: Permanently Delete Users in Power Platform Bulk\nDESCRIPTION: Procedure for bulk deletion of soft-deleted users from Power Platform environments with system job scheduling\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/delete-users.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to Power Platform admin center\n2. Select Environments\n3. Choose specific environment\n4. Go to Settings > Users + permissions > Users\n5. Select Bulk delete from action bar\n6. Choose \"Soft Deleted Users\" view\n7. Review and schedule deletion job\n8. Configure email notifications\n9. Run bulk delete job\n```\n\n----------------------------------------\n\nTITLE: Creating Data Integration Project Instructions\nDESCRIPTION: Step-by-step markdown instructions for creating a new data integration project in Power Apps admin center, including template selection and connection set configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/data-integrator.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [Power Apps admin center](https://admin.powerapps.com).\n\n2. Select the **Data Integration** tab in the left navigation pane.\n\n3. While in the **Projects** tab, select **New Project** in the top right corner.\n\n4. Provide a name for your integration project.\n\n5. Select one of the available templates.\n\n6. Select **Next** and choose a connection set.\n\n7. Confirm connection and environment names.\n\n8. Select **Next** and choose legal entity mappings.\n\n9. Review and accept privacy notice.\n\n10. Create and run the project.\n```\n\n----------------------------------------\n\nTITLE: Generating and Using a User Configuration File in Bash\nDESCRIPTION: These Bash commands generate and utilize a user configuration file for adding makers. The 'coe alm generate maker add' command creates a 'user.config' file, which is then used by 'coe alm maker add'. This approach allows for review and customization of parameters before executing operations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/overview.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm generate maker add -o user.config\ncoe alm maker add -f user.config\n```\n\n----------------------------------------\n\nTITLE: Property Selector in Power Fx\nDESCRIPTION: The '.' operator is used to extract a property from a table control or enumeration in Power Fx. For backward compatibility, the '!' operator can also be used.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Slider1.Value<br>Color.Red\"\n```\n\n----------------------------------------\n\nTITLE: Backing up a Power Platform Environment using YAML in Azure DevOps\nDESCRIPTION: This YAML snippet shows how to use the PowerPlatformBackupEnvironment task to create a backup of a Power Platform environment. It requires specifying a service connection and a backup label.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.backup-environment.PowerPlatformBackupEnvironment@2\n  displayName: 'Power Platform Backup Environment '\n  inputs:\n    PowerPlatformEnvironment: 'My service connection'\n    BackupLabel: 'Full backup - $(Build.BuildNumber)'\n```\n\n----------------------------------------\n\nTITLE: Route All Makers to Dev Environments with PowerShell\nDESCRIPTION: This PowerShell command sets the `environmentRoutingAllMakers` flag to `$True` to route all makers or `$False` to route only new makers into personal developer environments. It demonstrates how to add a member to the PowerShell object.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/default-environment-routing.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\ntenantSettings = Get-TenantSettings\ntenantSettings.powerPlatform.governance | Add-Member -MemberType NoteProperty -Name 'environmentRoutingAllMakers' -Value $True -Force\n```\n```\n\n----------------------------------------\n\nTITLE: Exporting Application List to JSON using Power Platform CLI\nDESCRIPTION: Demonstrates how to export a list of all available applications in the connected tenant to a JSON file in a specified directory using the pac application list command with output parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/application-list-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac application list --output c:\\home\\applicationslist.json\n```\n\n----------------------------------------\n\nTITLE: Setting a Variable in Power Fx\nDESCRIPTION: Sets the 'pangram' variable to the provided text string. This example is used for demonstrating various Match and MatchAll operations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ismatch.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( pangram, \"The quick brown fox jumps over the lazy dog.\" )\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting in Power Fx\nDESCRIPTION: This snippet demonstrates how to apply conditional formatting to a label's color based on its value. It uses the If function to change the label's color to red for negative values and black for non-negative values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nIf( Value(Label1.Text) < 0, Color.Red, Color.Black )\n```\n\n----------------------------------------\n\nTITLE: Downloading Portals with Power Platform CLI in PowerShell\nDESCRIPTION: This snippet uses the \\'pac\\' CLI tool to download portal pages. It requires the Power Platform CLI (pac) to be installed and configured properly. The key parameters include \\'--path\\' to specify the download directory and \\'--webSiteId\\' to identify the portal to be downloaded. The \\'--modelVersion\\' is used to specify the model version. The command downloads the portal content to the specified path.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/pages-download-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac pages download --path \\\"C:\\\\portals\\\" --webSiteId f88b70cc-580b-4f1a-87c3-41debefeb902 --modelVersion 2\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding a New Solution Component (Global Option Set)\nDESCRIPTION: Shows how to create a new global option set and associate it with a specific solution using CreateOptionSetRequest with a solution unique name\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nOptionSetMetadata optionSetMetadata = new OptionSetMetadata()\n{\n    Name = _globalOptionSetName,\n    DisplayName = new Label(\"Example Option Set\", _languageCode),\n    IsGlobal = true,\n    OptionSetType = OptionSetType.Picklist,\n    Options =\n    {\n        new OptionMetadata(new Label(\"Option 1\", _languageCode), 1),\n        new OptionMetadata(new Label(\"Option 2\", _languageCode), 2)\n    }\n};\n\nCreateOptionSetRequest createOptionSetRequest = new CreateOptionSetRequest\n{\n    OptionSet = optionSetMetadata                \n};\n\ncreateOptionSetRequest.SolutionUniqueName = _primarySolutionName;\n_serviceProxy.Execute(createOptionSetRequest);\n```\n\n----------------------------------------\n\nTITLE: Showing Version with Power Fx\nDESCRIPTION: This Power Fx code snippet is used to showcase the Version property, indicating the app player version running the app. In Power Apps Studio, this property returns an empty string. The output can be directly set in a label's text property without needing additional dependencies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-host.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nLabel1.Text: Host.Version\n```\n\n----------------------------------------\n\nTITLE: CLI Output Directory Structure\nDESCRIPTION: Shows the folder structure created by the Power Platform CLI when initializing a package project. Includes the main project file, the extension class, and the PkgAssets folder with configuration files.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nC:.\n└───DeploymentPackage\n    │   DeploymentPackage.csproj\n    │   PackageImportExtension.cs\n    │\n    └───PkgAssets\n            ImportConfig.xml\n            manifest.ppkg.json\n```\n\n----------------------------------------\n\nTITLE: Initializing Buttons Dataset with Table Function in Power Fx\nDESCRIPTION: This code initializes a dataset for the `Buttons` property of the Panel control using the `Table` function in Power Fx. It defines two buttons, \"Cancel\" (Standard type) and \"Ok\" (Primary type), specifying their labels and button types. The ButtonType is set using an enumeration from the Microsoft.CoreControls namespace.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/panel.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nTable(\n  {\n    Label: \"Cancel\",\n    ButtonType: 'Microsoft.CoreControls.Button.ButtonType'.Standard \n  },{\n    Label: \"Ok\", \n    ButtonType: 'Microsoft.CoreControls.Button.ButtonType'.Primary\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Global Disambiguation Operator in Power Platform\nDESCRIPTION: This snippet demonstrates the '@' operator for global disambiguation in Power Platform. It accesses a global variable named MyVariable.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"[@MyVariable]\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Authentication Header Example for Power Platform Checker API\nDESCRIPTION: Example of the WWW-Authenticate response header returned from an API request when authentication is required. It contains the authorization URI and resource ID needed for token acquisition.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/overview.md#2025-04-20_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nWWW-Authenticate →Bearer authorization_uri=\"https://login.microsoftonline.com/0082fff7-33c5-44c9-920c-c2009943fd1e\", resource_id=\"https://api.advisor.powerapps.com/\"\n```\n\n----------------------------------------\n\nTITLE: Using Sqrt Function with Single Number in Power Fx\nDESCRIPTION: Example of using the Sqrt function to calculate the square root of 9, resulting in 3.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_6\n\nLANGUAGE: Power Fx\nCODE:\n```\nSqrt( 9 )\n```\n\n----------------------------------------\n\nTITLE: Checking PowerShell Version - PowerShell\nDESCRIPTION: This snippet checks the currently installed version of PowerShell on the machine, which is required before proceeding with further installations or upgrades.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powershell-installation.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$PSVersionTable.PSVersion\n```\n\n----------------------------------------\n\nTITLE: Output of Listing Dataverse Database Templates for Europe Region\nDESCRIPTION: Example output displaying the list of supported Dataverse database templates for the Europe region, showing template names, locations, display names and disabled status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-app-templates-intro.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nTemplate Name               Template Location Template Display Name Is Disabled\nD365_CDSSampleApp           Europe            Sample App            False\nD365_CustomerService        Europe            Customer Service      True\nD365_CustomerServicePro     Europe            Customer Service Pro  True\nD365_DeveloperEdition       Europe            Developer Edition     True\nD365_FieldService           Europe            Field Service         True\nD365_Guides                 Europe            Guides                True\nD365_PowerFrameworkTemplate Europe            Power Framework       True\nD365_ProjectOperations      Europe            Project Operations    True\nD365_RemoteAssist           Europe            Remote Assist         True\nD365_Sales                  Europe            Sales Enterprise      True\nD365_SalesPro               Europe            Sales Pro             True\nD365_SmbMarketing           Europe            SMB Marketing         True\n```\n\n----------------------------------------\n\nTITLE: Delete Policy Template via SDK for .NET\nDESCRIPTION: This snippet shows how to delete a Policy Template record using the SDK for .NET, by specifying the entity id. It uses the Delete records operation. See the documentation for more details on deleting entities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\"Delete records\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Self-Service Purchase for Power Automate using PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to disable self-service purchasing for Power Automate. It uses the MSCommerce PowerShell module to connect to the admin account, identify the Power Automate product policy, and update it to disable self-service purchasing functionality.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/capacity-and-licenses.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name MSCommerce\nConnect-MSCommerce #sign-in with your global or billing administrator account\nwhen prompted\n$product = Get-MSCommerceProductPolicies -PolicyId AllowSelfServicePurchase |\nwhere {$_.ProductName -match 'Power Automate'}\nUpdate-MSCommerceProductPolicy -Policy\n```\n\n----------------------------------------\n\nTITLE: Create new Git branch using PowerShell\nDESCRIPTION: This PowerShell script creates a new Git branch if a `target_branch` is specified in the GitHub Actions workflow inputs. It checks if the `target_branch` input is not empty. If it is not empty, the script executes a `git checkout` command to create a new branch based on the `source_branch` and switches to it.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines-github-export.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"if('${{ github.event.inputs.target_branch }}' -ne '') {\n    git checkout -b ${{ github.event.inputs.target_branch }} ${{ github.event.inputs.source_branch }}\n}\"\n```\n\n----------------------------------------\n\nTITLE: Migrate Power App Environment using PowerShell\nDESCRIPTION: This PowerShell command initiates the migration of a Power App environment to a new tenant. It requires the MigrationId, which can be obtained using the TenantToTenant-ViewMigrationRequest command, and the TargetTenantId of the destination tenant.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nTenantToTenant-MigratePowerAppEnvironment\n-MigrationId {MigrationId}\n-TargetTenantId {TargetTenantId}\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Extensions Configuration\nDESCRIPTION: Configuration settings for OpenSSL certificate extensions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/secure-network-communications.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[ v3_leaf ]\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer\nbasicConstraints = critical,CA:false\nkeyUsage = critical,digitalSignature,keyEncipherment,dataEncipherment\nextendedKeyUsage = clientAuth,emailProtection\n```\n\n----------------------------------------\n\nTITLE: Assigning Application User with System Administrator Role in Power Platform (PowerShell)\nDESCRIPTION: This command assigns an application user to an environment and grants them the 'System Administrator' role. It requires the environment GUID, application user GUID, role specification, and the '--application-user' flag.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-assign-user-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npac admin assign-user `\n  --environment 00000000-0000-0000-0000-000000000000 `\n  --user 00000000-0000-0000-0000-000000000000 `\n  --role \"System Administrator\"\n  --application-user\n```\n\n----------------------------------------\n\nTITLE: Customizing ConfirmExitMessage in Power Apps\nDESCRIPTION: This snippet shows how to set a custom message for the ConfirmExit dialog box, providing specific information about which form has unsaved changes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( AccountsForm.Unsaved,\n    \"Accounts form has unsaved changes.\",\n    \"Contacts form has unsaved changes.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Email Addresses\nDESCRIPTION: A pattern that identifies email addresses by matching text containing an @ symbol with characters before and after it, and a domain extension. This masks complete email addresses.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-manage-masking-rules.md#2025-04-20_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n\\S+@\\S+\\.\\S+\n```\n\n----------------------------------------\n\nTITLE: Merging Navigation Customizations in XML\nDESCRIPTION: For managed solutions, SiteMap XML is compared to the original and other customizations. Only differences are included in the package. During installation, these changes are merged with the existing SiteMap XML in the target environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/how-managed-solutions-merged.md#2025-04-20_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\nSiteMap XML\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with 'in' Operator in Power Apps\nDESCRIPTION: This Power Fx formula filters the 'Customers' collection to display records where the text entered in the 'SearchInput' control is found anywhere within the 'Name' field. The 'in' operator performs a case-insensitive search.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-startswith.md#2025-04-20_snippet_4\n\nLANGUAGE: powerfx\nCODE:\n```\nFilter( Customers, SearchInput.Text in Name )\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Security Policy in Power Platform\nDESCRIPTION: This JavaScript function disables Content Security Policy (CSP) settings for a Power Platform environment. It retrieves organization information and sets the iscontentsecuritypolicyenabled property to false. The function requires a user with organization entity update privileges and is executed in the browser console.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/content-security-policy.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function disableCSP() {\n    const baseUrl = Xrm.Utility.getGlobalContext().getClientUrl();\n\n    const orgResponse = await fetch(`${baseUrl}/api/data/v9.1/organizations`);\n    if (!orgResponse.ok) throw new Error('Failed to retrieve org info');\n    const orgs = await orgResponse.json();\n    const { organizationid, iscontentsecuritypolicyenabled } = orgs.value[0];\n\n    console.log(`Organization Id: ${organizationid}`);\n    console.log(`CSP Enabled?: ${iscontentsecuritypolicyenabled}`);\n\n    const orgProperty = prop => `${baseUrl}/api/data/v9.1/organizations(${organizationid})/${prop}`;\n\n    if (!iscontentsecuritypolicyenabled) {\n        console.log('CSP is already disabled! Skipping update.')\n        return;\n    }\n\n    console.log('Disabling CSP...')\n    const cspEnableResponse = await fetch(orgProperty('iscontentsecuritypolicyenabled'), {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            value: false,\n        }),\n    });\n\n    if (!cspEnableResponse.ok) {\n        throw new Error('Failed to disable csp');\n    }\n    console.log('Successfully disabled CSP!')\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Solution Checker Block Mode via PowerShell\nDESCRIPTION: PowerShell command to enable solution checker enforcement in block mode for a specific environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-solution-checker.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSetManagedEnvironmentSolutionCheckerEnforcementLevel -EnvironmentId 8d996ece-8558-4c4e-b459-a51b3beafdb4 -Level block\n```\n\n----------------------------------------\n\nTITLE: Signing Out from Azure CLI Sessions\nDESCRIPTION: Logs out from any active Azure CLI sessions. This command is particularly useful when testing commands on multiple accounts. The command ensures users are fully signed out, essential for clean testing processes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/overview.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz logout\n```\n\n----------------------------------------\n\nTITLE: User-Agent Header with Workflow Identifier\nDESCRIPTION: Example of the User-Agent header format that includes the workflow identifier (app or flow ID). Exchange admins can use this identifier to exempt specific flows from exfiltration blocking rules when needed for legitimate business scenarios.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/block-forwarded-email-from-power-automate.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nx-ms-mail-application: Microsoft Power Automate; User-Agent: \nazure-logic-apps/1.0 (workflow afa0fb167803450aa650267e95d43287; version \n08586093372199532216) microsoft-flow/1.0 \n**x-ms-mail-operation-type: Forward**\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Exchange Rate Data in CSV Format\nDESCRIPTION: An example of multiple CSV lines for importing exchange rate data with different rates for different date ranges, showing how to structure the data when exchange rates vary over time.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/change-base-currency-environment.md#2025-04-20_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nfromcurrencyid,tocurrencyid,vaIidfrom,vaIidto,exchangerate INR,EUR,2022-01-01 08:00,2022-04-01 08:00,72.0\nINR,EUR,2022-04-01 08:00,2022-07-01 08:00,75.0\nINR,EUR,2022-07-01 08:00,2022-10-01 08:00,78.0\nINR,EUR,2022-10-01 08:00,2023-01-01 08:00,80.0\n```\n\n----------------------------------------\n\nTITLE: Using AIExtract Function in Power Apps Canvas\nDESCRIPTION: This snippet shows how to use the AIExtract function in a Power Apps canvas app. It extracts the 'State' entity from the text in the 'Subject' variable and displays the result.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ai.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( Result, Environment.AIExtract( {Text:Subject, Entity: \"State\"} ).ExtractedText )\n```\n\n----------------------------------------\n\nTITLE: Configuring New Model-Driven App in Power Platform\nDESCRIPTION: Instructions for creating and configuring a new model-driven application in Power Platform, including setup of navigation, content types, and custom pages.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/modify-components.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to make.powerapps.com\n2. Go to CoE development environment\n3. Go to Solutions\n4. Select solution\n5. Select + New\n6. Select App > Model-driven app\n7. Enter Name and click Create\n8. Use App Designer menu\n9. Configure app navigation\n10. Add content types\n11. Select Save and Publish\n12. Select Play to test\n```\n\n----------------------------------------\n\nTITLE: Downloading Connector from Specified Environment in PowerShell\nDESCRIPTION: This command downloads a specified connector from a specific environment to the current directory. It requires both the connector-id and environment parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-download-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac connector download `\n  --connector-id 00000000-0000-0000-0000-000000000000 `\n  --environment 00000000-0000-0000-0000-000000000000 \n```\n\n----------------------------------------\n\nTITLE: Assign Process License to Environment Steps\nDESCRIPTION: Markdown code block showing the step-by-step process to assign Process licenses to an environment in Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/buy-licenses.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select **Resources** > **Capacity** on the left side of the screen.\n2. Select **Add-ons** > in the capacity page.\n3. Select the edit button on an environment.\n4. Enter the amount of each add-on you would like to allocate to each environment.\n5. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Installing CoE ALM for Azure DevOps Configuration\nDESCRIPTION: This command installs the CoE ALM Accelerator configurations related to Azure DevOps.  It configures the necessary connections and settings within Azure DevOps to support ALM processes, such as pipelines and repositories. The `-o` parameter specifies the Azure DevOps organization URL and `-p` specifies the project name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm install -c devops \\\n  -o https://dev.azure.com/dev12345 \\\n  -p alm-sandbox\n```\n\n----------------------------------------\n\nTITLE: Create Policy Template via SDK for .NET\nDESCRIPTION: This snippet shows how to create a new Policy Template record using the SDK for .NET.  It uses the Create records operation. Refer to the documentation for information on constructing the entity object.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\"Create records\"\n```\n\n----------------------------------------\n\nTITLE: License Type Billing Matrix Markdown\nDESCRIPTION: Markdown table showing how different license types are billed for standard and premium connector usage.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-meters.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|License type  |App with standard connectors|App with premium connectors|\n|----|------|-------|\n| Unlicensed user   | Charged via Azure subscription.  | Charged via Azure subscription.  |\n| Unlicensed user but Power Apps per-app license is available in an environment   | Charged via Azure subscription. App passes aren't consumed.    | Charged via Azure subscription. App passes aren't consumed.  |\n| User with Power Apps for Microsoft 365 plan          | Not counted in the meter.    | Charged via Azure subscription.    |\n| User with Power Apps per-user plan          | Not counted in the meter.    | Not counted in the meter.    |\n```\n\n----------------------------------------\n\nTITLE: Enable Audit Log Search in PowerShell\nDESCRIPTION: PowerShell commands to enable unified audit log ingestion and organization customization, which allows tracking of Power Platform user activities. These commands must be run with appropriate administrative permissions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/access-usage.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-OrganizationCustomization\nSet-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Data Policy Event Metadata Example\nDESCRIPTION: Example JSON payload showing metadata properties for a data policy operation, including operation name, policy details, and user information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/admin-activity-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.governance.api_policy.additional_resources\",\n        \"Value\": \"<<json>>\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.display_name\",\n        \"Value\": \"ConnectorBlockingPolicy\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.governance.api_policy.operation_result\",\n        \"Value\": \"True\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.id\",\n        \"Value\": \"ConnectorBlockingPolicy\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.type\",\n        \"Value\": \"ApiPolicy\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.governance.api_policy.operation_name\",\n        \"Value\": \"DeleteDlpPolicy\"\n    },\n    {\n        \"Name\": \"version\",\n        \"Value\": \"1.0\"\n    },\n    {\n        \"Name\": \"type\",\n        \"Value\": \"PowerPlatformAdministratorActivityRecord\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.activity.name\",\n        \"Value\": \"GovernanceApiPolicyOperation\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.activity.id\",\n        \"Value\": \"99ac5d50-a0f4-4878-8ff4-e02b7da3a510\"\n    },\n    {\n        \"Name\": \"enduser.id\",\n        \"Value\": \"888c1bf5-3127-4c8c-84ee-b6a9c684e315\"\n    },\n    {\n        \"Name\": \"enduser.principal_name\",\n        \"Value\": \"admin@contosotest.onmicrosoft.com\"\n    },\n    {\n        \"Name\": \"enduser.role\",\n        \"Value\": \"Admin\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.id\",\n        \"Value\": \"ce65293a-e07d-4638-9dfa-79483fcd5136\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating PCF Component Version with Patch Version\nDESCRIPTION: Sets a specific patch version for a PCF component located in a specified path, applying the version to all manifests in the project\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/pcf-version-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac pcf version --patchversion 1.0.0.0 --path c:\\Users\\Downloads\\SampleComponent --allmanifests\n```\n\n----------------------------------------\n\nTITLE: Displaying Tenant Setting for App Sharing with PowerShell\nDESCRIPTION: Checks if sharing canvas apps with \"Everyone\" is disabled in a tenant. The setting controls this share option for users with Environment Maker roles.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\n$settings = Get-TenantSettings \n$settings.PowerPlatform.PowerApps.disableShareWithEveryone\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connector Information from Tenant DLP Policy in Power Automate\nDESCRIPTION: This JSON snippet shows the structure of connector information returned when using the 'Get Tenant DLP Policy' action in Power Automate. It demonstrates how connector details like id, name, and type are returned in an array format that can be used for DLP impact analysis.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/migrating-from-default-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"/providers/Microsoft.PowerApps/apis/shared_twitter\",\n    \"name\": \"Twitter\",\n    \"type\": \"Microsoft.PowerApps/apis\"\n  }\n……\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Entity Type in JavaScript for Microsoft Power Platform\nDESCRIPTION: Demonstrates the deprecated isActivityType method and its replacement using getEntityMetadata. Note that the replacement method is asynchronous and not suitable for ribbon rules.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nXrm.Utility.isActivityType()\n\n// Replacement\nXrm.Utility.getEntityMetadata()\n```\n\n----------------------------------------\n\nTITLE: Copying a Power Platform Environment using YAML in Azure DevOps (Basic)\nDESCRIPTION: This YAML snippet demonstrates a basic configuration of the PowerPlatformCopyEnvironment task to copy a Power Platform environment. It requires specifying source and target environment URLs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.copy-environment.PowerPlatformCopyEnvironment@2\n  displayName: 'Power Platform Copy Environment '\n  inputs:\n    PowerPlatformEnvironment: 'My service connection'\n    TargetEnvironmentUrl: 'https://contoso-test.crm.dynamics.com'\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Index Function - Power FX\nDESCRIPTION: This snippet illustrates error handling when using the Index function to access a record that exceeds the table's bounds, resulting in an error for invalid index requests.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-first-last.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nIndex( IceCream, 10 )\n```\n\n----------------------------------------\n\nTITLE: Submitting Catalog Approval Request in Power Platform CLI\nDESCRIPTION: This command submits a catalog approval request based on a specified submission document, with additional options for providing environment context and package details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/catalog.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## pac catalog submit\n\nSubmit catalog approval request.\n\n### Required Parameters for catalog submit\n\n#### `--path` `-p`\n\nPath to catalog submission document\n\n### Optional Parameters for catalog submit\n\n#### `--environment` `-env`\n\nUrl or ID of the environment that has catalog installed.\n```\n\n----------------------------------------\n\nTITLE: Adding Table Form to Solution\nDESCRIPTION: Steps for adding an existing table form to a solution in Power Platform. Includes navigation through the Power Apps maker portal and selection of specific forms for customization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/modify-components.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. Add the table linked to the form to your solution:\n    1. Go to [make.powerapps.com](<https://make.powerapps.com>).\n    1. Go to your CoE development environment.\n    1. Go to **Solutions**.\n    1. Select your solution.\n    1. Select **Add existing**.\n    1. Choose **Table**.\n    1. Search for the table you want to add and select **Next**.\n    1. Select **Add**.\n```\n\n----------------------------------------\n\nTITLE: Retrieve Default Environment Details with PowerShell\nDESCRIPTION: This command fetches details specific to the default environment in a Microsoft Dataverse tenant. It is particularly useful for administrators needing quick access to default settings or for troubleshooting purposes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppEnvironment –Default\n```\n\n----------------------------------------\n\nTITLE: Creating an Expressions Collection in Power Apps\nDESCRIPTION: Formula to create a collection named 'Expressions' containing sample text phrases for translation examples using the Microsoft Translator connection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( Expressions, [ \"Hello\", \"Good morning\", \"Thank you\", \"Goodbye\" ] )\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Authentication in Power Platform CLI\nDESCRIPTION: This example prompts for credentials and connects to a specific Power Platform environment using the provided environment ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-create-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac auth create --environment < Your environment ID >\n```\n\n----------------------------------------\n\nTITLE: Getting Help with CoE CLI Commands\nDESCRIPTION: This snippet demonstrates how to use the CoE CLI to view help options for commands. It illustrates the usage of the `-h` argument to get basic help.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/overview.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncoe -h\n```\n\n----------------------------------------\n\nTITLE: Generating Empty Table with Sequence\nDESCRIPTION: This snippet demonstrates how to generate an empty table using the Sequence function by specifying a decimal value that rounds down to zero.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sequence.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nSequence( 0.9 )\n```\n\n----------------------------------------\n\nTITLE: Displaying GUID Values from Database Records\nDESCRIPTION: Shows how to display a GUID value from a database record. When used in a string context, GUID values are automatically converted to lowercase hyphenated string representation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-guid.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nFirst( Products ).Status\n```\n\n----------------------------------------\n\nTITLE: Generating Intermediate User Certificate - PowerShell\nDESCRIPTION: This snippet generates a private key and an intermediate user certificate for SAP users, including a certificate signing request and signing operations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nopenssl genrsa -out signingUsersCert/users.key.pem 2048\n\n# Create Certificate Signing Request\nopenssl req -new -key signingUsersCert/users.key.pem -sha256 -out signingUsersCert/users.csr.pem -subj \"/O=Contoso/CN=Users Intermediate Cert\"\n\n# Sign the certificate with the rootCA cert.\nopenssl x509 -req -in signingUsersCert/users.csr.pem -days 3650 `\n  -CA rootCA/ca.cert.pem -CAkey rootCA/ca.key.pem `\n  -out signingUsersCert/users.cert.pem `\n  -extfile signingUsersCert/extensions.cnf -extensions v3_ca `\n  -CAserial rootCA/serial\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Lake Storage Export in Power Platform Admin Center\nDESCRIPTION: Step-by-step configuration process for setting up tenant-level analytics export to Azure Data Lake Storage with specific prerequisites and role requirements\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/self-service-analytics.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the Power Platform admin center as a Microsoft Entra Global Admin\n2. Select **Export to Azure Data Lake**\n3. Choose **Power Apps** or **Power Automate**\n4. Set **Enable tenant-level analytics** to **On**\n5. Select a subscription\n6. Choose a resource group\n7. Select the Azure storage account\n8. Click **Create**\n```\n\n----------------------------------------\n\nTITLE: Demonstrates error when using RecordInfo with a non-data source collection in Power Apps\nDESCRIPTION: This example illustrates the error that occurs when the RecordInfo function is used with a collection not derived from a data source. Since the MyCollection is created directly and not connected to a data source, RecordInfo will return an error when attempting to check delete permissions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-recordinfo.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nCollect( MyCollection, [ 1, 2, 3 ] );\nRecordInfo( First(MyCollection), RecordInfo.DeletePermission )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Exception Details in Dataverse\nDESCRIPTION: This Kusto query fetches the 10 most recent exception records from the exceptions table in Application Insights.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-dataverse.md#2025-04-20_snippet_3\n\nLANGUAGE: kusto\nCODE:\n```\nexceptions\n| take 10\n```\n\n----------------------------------------\n\nTITLE: Installing Catalog Item using .NET SDK - Alternative Method\nDESCRIPTION: Alternative .NET method to install a catalog item using an entity reference, with optional package and settings parameters\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/install-items.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nstatic EntityReference InstallCatalogItemExample(IOrganizationService service,\n    EntityReference target,\n    Uri deployToOrgUrl,\n    string? settings = null,\n    Guid? packageId = null)\n{\n    var request = new mspcat_InstallCatalogItemRequest\n    {\n        Target = target,\n        DeployToOrganizationUrl = deployToOrgUrl.ToString(),\n    };\n\n    if (packageId.HasValue)\n    {\n        request.PackageId = packageId.Value;\n    }\n\n    if (string.IsNullOrEmpty(settings))\n    {\n        request.Settings = settings;\n    }\n\n    var response = (mspcat_InstallCatalogItemResponse)service.Execute(request);\n\n    return response.InstallHistoryReferance;\n}\n```\n\n----------------------------------------\n\nTITLE: Read-Only Columns Metadata for Dataverse Entity\nDESCRIPTION: List of system-managed columns that are read-only, including creation and modification tracking attributes like CreatedBy, CreatedOn, ModifiedBy, and OrganizationId\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_configurationforpowerapps.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nReadOnlyColumns:\n  - CreatedBy\n  - CreatedOn\n  - ModifiedBy\n  - ModifiedOn\n  - OrganizationId\n  - VersionNumber\n```\n\n----------------------------------------\n\nTITLE: Identifying Differential FormXml in XML Exports\nDESCRIPTION: This XML snippet demonstrates how to identify a differential (diff) FormXml in a solution export. Diff FormXml contains only the changes made to the form and includes solutionaction attributes to define the types of changes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/form-alm.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<FormXml>\n  <control solutionaction=\"Added\">\n    <!-- Added control definition -->\n  </control>\n  <control solutionaction=\"Removed\">\n    <!-- Removed control definition -->\n  </control>\n  <control solutionaction=\"Modified\">\n    <!-- Modified control definition -->\n  </control>\n</FormXml>\n```\n\n----------------------------------------\n\nTITLE: Using pac copilot model prepare-fetch command\nDESCRIPTION: Prepares a FetchXML file from an AI Large Language Model for execution against the current environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\npac copilot model prepare-fetch --inputFile \"llm-fetch.xml\" --outputFile \"prepared-fetch.xml\"\n```\n\n----------------------------------------\n\nTITLE: Executing pac power-fx run Command with Missing Authentication Profile\nDESCRIPTION: This snippet demonstrates the error output when attempting to run a pac power-fx command without a proper Dataverse authentication profile. It shows multiple errors related to unrecognized names and invalid columns.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\test> pac power-fx run --file test-pfx.txt\nError 8-16: Name isn't valid. 'Contacts' isn't recognized.\nError 18-59: The specified column 'firstname' does not exist.\nError 0-60: The function 'Collect' has some invalid arguments.\nError 8-16: Name isn't valid. 'Contacts' isn't recognized.\nError 18-59: The specified column 'firstname' does not exist.\nError 0-60: The function 'Collect' has some invalid arguments.\nError 8-16: Name isn't valid. 'Contacts' isn't recognized.\nError 18-59: The specified column 'firstname' does not exist.\nError 0-60: The function 'Collect' has some invalid arguments.\nError 8-16: Name isn't valid. 'Contacts' isn't recognized.\nError 18-63: The specified column 'firstname' does not exist.\nError 0-64: The function 'Collect' has some invalid arguments.\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Deployment Script Variables\nDESCRIPTION: Set up key configuration variables for deploying the Power Platform communication site template, including tenant name, site URL, company details, and administrative settings\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/wiki-community.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$adminTenantName = 'contoso'\n$adminURL = 'https://' + $adminTenantName + '-admin.sharepoint.com'\n$companyName = 'Contoso'\n$lcid = 1033\n$newSiteURL = 'https://' + $adminTenantName + '.sharepoint.com/sites/powerplatformhub'\n$ownerEmail = 'owner@contoso.com'\n$siteTemplate = 'SITEPAGEPUBLISHING#0'\n$siteTitle = 'Power Platform Communication Site'\n$timeZone = 2\n```\n\n----------------------------------------\n\nTITLE: Accessing System Settings in Microsoft Power Platform\nDESCRIPTION: Steps to open the System Settings dialog box in the Microsoft Power Platform web app. This process requires system administrator or customizer permissions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-auditing-tab.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [!INCLUDE[proc_permissions_system_admin_and_customizer](../includes/proc-permissions-system-admin-and-customizer.md)]  \n  \n    Check your security role  \n  \n   - [!INCLUDE[proc_follow_steps_in_link](../includes/proc-follow-steps-in-link.md)]  \n  \n   - [!INCLUDE[proc_dont_have_correct_permissions](../includes/proc-dont-have-correct-permissions.md)]  \n  \n2. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n3. Select **Settings** > **Administration**.\n \n4. Select **System Settings**, and then select the **Auditing** tab.\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Web API Catalog Item Query\nDESCRIPTION: The raw HTTP GET request that is generated by the PowerShell Get-CatalogItems function. Shows the URL structure with query parameters for selecting fields, filtering records, and expanding related entities in OData format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET [Organization URI]/api/data/v9.2/mspcat_applicationses?$select=mspcat_tpsid,mspcat_deploytype,mspcat_applicationtype,mspcat_businesscategory,mspcat_description,mspcat_applicationsid,_mspcat_publisherid_value,mspcat_name,statuscode&$filter=statecode%20eq%200%20and%20_mspcat_packageasset_value%20ne%20null&$expand=mspcat_PackageAsset($select=statecode,mspcat_uniquename,mspcat_version,statuscode) HTTP/1.1\nOData-MaxVersion: 4.0\nAuthorization: Bearer [REDACTED]\nPrefer: odata.include-annotations=\"*\"\nOData-Version: 4.0\nAccept: application/json\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Microsoft Windows 10.0.22631; en-US) PowerShell/7.4.2\nAccept-Encoding: gzip, deflate, br\n```\n\n----------------------------------------\n\nTITLE: Managing Power Platform CLI Versions using PowerShell\nDESCRIPTION: Example showing how to list and switch between different installed versions of the Power Platform CLI. This demonstrates the 'pac use' command to view available versions and change to a specific version.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/howto/install-cli-msi.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\> pac use\n  1.29.11 (In Use)\n  1.30.3\n  1.30.6 (Latest)\nC:\\> pac use 1.30.6\nNow using version 1.30.6 of the Microsoft PowerApps CLI.\nC:\\>\nC:\\> pac use\n  1.29.11\n  1.30.3\n  1.30.6 (In Use) (Latest)\nC:\\>\n```\n\n----------------------------------------\n\nTITLE: Color Value Functions in PowerFx\nDESCRIPTION: Demonstrates different ways to reference colors using ColorValue() function and RGBA values in Power Platform. Shows hex codes, named colors, and equivalent RGBA values for standard colors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_8\n\nLANGUAGE: PowerFx\nCODE:\n```\nColorValue(\"#2f4f4f\")\nColorValue(\"darkslategray\")\nRGBA(47, 79, 79, 1)\n\nColorValue(\"#00ced1\")\nColorValue(\"DARKTURQUOISE\")\nRGBA(0, 206, 209, 1)\n\nColorValue(\"#ff1493\")\nColorValue(\"deeppink\")\nRGBA(255, 20, 147, 1)\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Chain - PowerShell\nDESCRIPTION: This snippet uses OpenSSL to verify the certificate chain for user certificates against the root certificate authority.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$ openssl verify -CAfile rootCA/ca.cert.pem -untrusted signingUsersCert/users.cert.pem userCerts/TESTUSER01.cert.pem\n\nuserCerts/TESTUSER01.cert.pem: OK\n```\n\n----------------------------------------\n\nTITLE: PowerShell DLP Policy Commands Reference\nDESCRIPTION: Reference to PowerShell commands for managing DLP policies and custom connector classifications in Microsoft Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dlp-connector-classification.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npowerapps-powershell.md#data-loss-prevention-dlp-policy-commands\n```\n\n----------------------------------------\n\nTITLE: Complete ClearData Usage in Power Fx\nDESCRIPTION: Clears all app-specific storage data from the device, affecting all saved collections for the current app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-savedata-loaddata.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\nClearData()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connector Blocking Policies in PowerShell\nDESCRIPTION: Shows how to retrieve existing connector blocking policies for a tenant using PowerShell. The command returns connectors that are blocked or allowed along with the policy ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-off-by-default.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PowerAppDlpConnectorBlockingPolicies\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PowerAppDlpConnectorBlockingPolicies -TenantId \"aaaabbbb-0000-cccc-1111-dddd2222eeee\"\n```\n\n----------------------------------------\n\nTITLE: Configuring License Consumption Views\nDESCRIPTION: Settings and parameters for filtering and analyzing license consumption, including environment selection, product type, and license type filtering.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-license-consumption-issues.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting | Description |\n| ------- | ----------- |\n| Include standard environments | Select this option to view results for standard, or unmanaged, environments. |\n```\n\n----------------------------------------\n\nTITLE: Checking if a Field Value is Blank in Power Apps\nDESCRIPTION: This Power Fx formula uses IsBlank() to test whether the Weather field in the first record of the Cities collection is blank or an empty string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-isblank-isempty.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nIsBlank( First( Cities ).Weather )\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering Sample Command in TypeScript\nDESCRIPTION: This TypeScript snippet outlines the necessary steps to integrate a new sample command into the CoE CLI, including function definitions and command registration in the command line interface.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/adding-new-command.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SampleArguments, SampleCommand} from './sample';\n```\n\nLANGUAGE: typescript\nCODE:\n```\n        createSampleCommand: () => SampleCommand\n```\n\nLANGUAGE: typescript\nCODE:\n```\n          this.createSampleCommand = () => new SampleCommand\n```\n\nLANGUAGE: typescript\nCODE:\n```\n       AddSampleCommand(program: commander.Command) {\n           var run = program.command('sample')\n               .description('A new sample command')\n               .option('-c, --comment <comment>', 'The comment for the command')\n               .action(async (options: any) : Promise<void> => {\n                   let args = new SampleArguments();\n                   args.comment = options.comment;\n                   let command = this.createSampleCommand();\n                   await command.execute(args)\n               });\n       }\n```\n\nLANGUAGE: typescript\nCODE:\n```\n           this.AddSampleCommand(program);\n```\n\n----------------------------------------\n\nTITLE: Rectifying Personal Data in Dataverse Tables\nDESCRIPTION: Step-by-step procedure for updating personal data in Dataverse tables using Excel export/import functionality. Process includes exporting table data, making modifications in Excel, and reimporting the updated data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dataverse-privacy-dsr-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the navigation pane, select **Dataverse**, and then select **Tables**.\n2. From the list of tables, select a table (for example, the Account table)\n3. On the menu bar, select **Export** > **Export data**.\n4. When the export is complete, select **Download exported data**. \n5. When the export is complete, select the .zip file in the **Downloads** folder and extract the file. Open the .csv file.\n6. In the menu bar, select **File**, select **Save As**, and then select a location in which to save the file.\n7. Make the necessary personal data updates and save the spreadsheet.\n8. In Power Apps, go back to the selected table, and then select **Import** > **Import data**.\n9. Select **Search**, and then select and open the Excel spreadsheet that you updated.\n10. Select **Import**.\n```\n\n----------------------------------------\n\nTITLE: Model-Driven App Navigation Configuration\nDESCRIPTION: Describes how to configure groupings of pages at various levels within model-driven apps. It highlights the app designer's ability to manage forms, views, and custom pages.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/information-architecture.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Platform\nCODE:\n```\n\"[configure groupings of pages](/power-apps/maker/model-driven-apps/app-navigation)\"\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Conversion Using AsType Function\nDESCRIPTION: Example showing how to explicitly convert an untyped JSON object to a typed Power Fx record using the AsType function with a Type parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_9\n\nLANGUAGE: powerapps-dot\nCODE:\n```\n>> AsType( ParseJSON( \"{\\\"a\\\":1}\" ), Type( {a: Number} ) )\n{a:1}\n```\n\n----------------------------------------\n\nTITLE: Disabling Agent Editor Sharing with PowerShell\nDESCRIPTION: PowerShell script that turns off the ability for users to share agents with individuals as Editors in a Managed Environment, while still allowing Viewer sharing.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-sharing-limits.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Retrieve the environment\n$environment = Get-AdminPowerAppEnvironment -EnvironmentName <EnvironmentId>\n\n# Update the Managed Environment settings\n$governanceConfiguration = $environment.Internal.properties.governanceConfiguration\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'bot-authoringSharingDisabled' -Value True -Force\n\n# Save the updated Managed Environment settings\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <EnvironmentId> -UpdatedGovernanceConfiguration $governanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Delete Environment Group - New Admin Center\nDESCRIPTION: This snippet describes the steps to delete an environment group using the new Power Platform Admin Center. The process includes navigating to the Environment groups, selecting the group to delete, and then choosing the delete option. It's crucial to remove all environments from the group beforehand.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Select **Manage** in the navigation pane.\n2. In the **Manage** pane, select **Environment groups**.\n3. Select the environment group that you wish to delete.\n4. Select **Delete group** in the command bar.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Automate Process License Scenarios Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table describing various scenarios for the Power Automate Process license, including environment assignment, cloud flow allocation, and machine allocation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/deep-dive-on-specific-license.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Process license scenarios |Description |\n|----------|-------|\n|__Environment assignment__|To be used by a cloud flow or a machine, a Process capacity license first needs to be assigned to the environment where the cloud flow or the machine is located. Learn [how to allocate a Process capacity license to an environment](/power-platform/admin/capacity-add-on#allocate-or-change-capacity-in-an-environment).|\n|__Cloud flow allocation__<sup>1</sup>|Allocated to a cloud flow, a Power Automate Process license entitles it to use standard, premium, and custom connectors while being accessed by unlimited users within the organization (regardless of their user license). Each Process license allocated to a cloud flow entitles it to 250k daily Power Platform Request (stackable limit). <br><br>Discover [how to allocate a Process license to a cloud flow](/power-automate/desktop-flows/capacity-process#allocate-process-capacity-to-a-cloud-flow).<br><br>A cloud flow that was allocated a Process license becomes a 'process flow.' Process flows have their plan switch to \"Process plan\" and a process-flow can be associated to other cloud flows (excluding other process-flows). <br><br>A cloud flow associated to a process-flow is also covered by the Process license allocated to the process-flow. Its plan switches to \"This flow is associated to run on process plan,\" its runs are considered 'in-context' or the Process license and its PPR consumption is counted against the Process license PPR entitlement. A process-flow can be associated to a maximum of 25 cloud flows. <br><br>Discover [how to associate flows to a process flow](/power-automate/desktop-flows/capacity-process#associate-flows-to-a-process-flow).|\n|__Machine allocation__|Allocated to a machine, it becomes an unattended bot<sup>2</sup>. Each unattended bot on a machine entitles the machine to carry one unattended desktop flow run at a time.<br><br>Machines can be manually allocated unattended bots or be set to auto-allocate themselves when required by a run in unattended mode. Any unattended bot allocation (manual or automatic) on a machine remains until a manual de-allocation occurs. To prevent a machine from auto-allocating itself Process capacity, disable its auto-allocation setting.<br><br>Any cloud flow targeting a machine with unattended bot(s) is automatically covered by the machine's bot(s) and considered to be a 'process flow' (with the flow association capability) and is entitled to a 250k daily Power Platform Request (non-stackable limit). Those cloud flows have their plan automatically switch to \"Process plan inherited from machine\"<sup>3</sup>.<br><br>Discover [how to allocate a Process license to a machine](/power-automate/desktop-flows/capacity-process#allocate-process-capacity-to-a-machine).|\n|__Utilization management__|You can visualize and manage all Process licenses allocated to cloud flows and machines within an environment using the [Process capacity utilization](/power-automate/desktop-flows/capacity-utilization-process) page<sup>4</sup>.|\n```\n\n----------------------------------------\n\nTITLE: Accessing Steps Output Property\nDESCRIPTION: This code demonstrates how to access the `Steps` output property of the `SubwayNav` control to determine the current status of each step. It shows accessing the steps directly from the control itself and referencing the steps from another control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/subwaynav.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nSelf.Steps\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nSubwayNav1.Steps\n```\n\n----------------------------------------\n\nTITLE: Configuring Organizational Standards and Formats in Dynamics 365\nDESCRIPTION: This snippet presents a table describing the settings available in the Formats tab of System Settings. It includes options for setting the current format and previewing format settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-formats-tab.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Settings|Description|  \n|--------------|-----------------|  \n|**Organizational Standards and Formats**||  \n|**Current Format**|Default: your organization's language and locale. Choose **Customize** to customize number, currency, time, and date formats for your organization.|  \n|Format Preview|Preview the settings for the selected language and locale.|\n```\n\n----------------------------------------\n\nTITLE: Managing Migration Requests (Target Admin)\nDESCRIPTION: Commands for the target tenant admin to view and manage migration requests.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\n\nTenantToTenant-ViewApprovalRequest\n\nTenantToTenant-ManageMigrationRequest -MigrationId {MigrationId from above command to approve or deny}\n```\n\n----------------------------------------\n\nTITLE: Power Automate Management Connector Example\nDESCRIPTION: A template for listing new Microsoft Flow connectors that triggers daily and sends an email with connector information using the Power Automate Management connector\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-task-automation-flow.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Common Power Automate tasks\n\n*List new Microsoft Flow connectors* is a simple template you can get started with right away. It triggers daily on schedule, and uses the Power Automate Management connector to get a list of the connections in the environment and sends you an email.\n```\n\n----------------------------------------\n\nTITLE: Exporting Data Using Power Apps CLI\nDESCRIPTION: Example of using the 'pac data export' command in PowerShell to export data from a Power Apps environment. This is a template example that would be expanded with actual parameters and usage context.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/data-export-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac data export\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Profile with Environment ID in PowerShell\nDESCRIPTION: Updates an authentication profile at index 1 by specifying the environment ID. This command modifies an existing authentication profile using a GUID to identify the target environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-update-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac auth update --index 1 --environment 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Listing Environments with Catalogs - PowerShell\nDESCRIPTION: This PowerShell code snippet lists all environments associated with a specific application ID that has catalogs installed. It requires administrative authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Users\\you> pac admin list --application 83a35943-cb41-4266-b7d2-81d60f383695\nConnected as you@yourorg.onmicrosoft.com\n\nListing all environments from your tenant...\nActive Environment Environment ID                       Environment Url                   Type       Organization ID\n*      Your Org    b16bdb7a-e023-4158-a839-4f8831ed2432 https://yourorg.crm.dynamics.com/ Production e20be4c1-02ce-4e81-93c6-6e95ff053943\n```\n\n----------------------------------------\n\nTITLE: Assigning Licenses to User Accounts via Microsoft Graph PowerShell SDK\nDESCRIPTION: This PowerShell script demonstrates how to assign Power Apps per user licenses to a list of user accounts from a CSV file using the Microsoft Graph PowerShell SDK. Dependencies include Microsoft Graph PowerShell SDK and required scopes 'User.ReadWrite.All' and 'Organization.Read.All'. Input is a CSV file with user email addresses, and output is the logging of assigned users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/license-assignment-strategies.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Connect to Microsoft 365 tenant.\nConnect-MgGraph -Scopes User.ReadWrite.All, Organization.Read.All\n\n# Get the Power Apps per user license object.\n$pAppsPerUser = Get-MgSubscribedSku | Where-Object {$_.SkuPartNumber -eq \"POWERAPPS_PER_USER\"}\n\n# Import list of users and assign license to each.\n$usersToAssign = Import-Csv \"C:\\UserImport\\userEmail.csv\" -Encoding ASCII\n\n# Assign Power Apps per user license\nforeach ($user in $usersToAssign) {\n    $userCurrent = Get-MgUser -UserId $user.UserEmail\n    Set-MgUserLicense -UserId $userCurrent.Mail -AddLicenses @{SkuId = $pAppsPerUser.SkuId} -RemoveLicenses @()  \n    Write-Host $userCurrent\n}\n```\n\n----------------------------------------\n\nTITLE: Unpacking Power Platform Solution\nDESCRIPTION: YAML configuration for unpacking a compressed Power Platform solution file into XML files for source control management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.unpack-solution.PowerPlatformUnpackSolution@2\n  displayName: 'Power Platform Unpack Solution '\n  inputs:\n    SolutionInputFile: 'C:\\Public\\Contoso_sample_1_0_0_1_managed.zip'\n    SolutionTargetFolder: 'C:\\Public'\n    SolutionType: Both\n```\n\n----------------------------------------\n\nTITLE: Updating Context Variable to Show/Hide Panel\nDESCRIPTION: This Power Fx formula updates a context variable named `showHideDialog` to `true`, which can be used to control the visibility of the Panel control. This is typically used in the `OnSelect` property of a button or other control to trigger the display of the panel.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/panel.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nUpdateContext({ showHideDialog: true })\n```\n\n----------------------------------------\n\nTITLE: Simulating Button Selection in Power Apps\nDESCRIPTION: This snippet demonstrates how to use the Select function to simulate a user selecting a button control. The OnSelect property is set up to trigger a notification when the button is selected.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-select.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nSelect(button1)\n```\n\n----------------------------------------\n\nTITLE: Creating Exempt Resources for DLP Policy\nDESCRIPTION: This command is used to create a new list of exempt resources for a specific DLP policy, allowing specific resources to be excluded from compliance measures.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_42\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PowerAppDlpPolicyExemptResources -TenantId -PolicyName -NewDlpPolicyExemptResources\n```\n\n----------------------------------------\n\nTITLE: Bearer Token Response for Service Principal Flow - JSON\nDESCRIPTION: This JSON snippet shows the expected response structure from Microsoft Entra after successfully requesting an access token using the service principal method.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-authentication-v2.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3599,\n  \"ext_expires_in\": 3599,\n  \"access_token\": \"eyJ0eXAiOiJKV1...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting variable with division by zero in App.OnStart\nDESCRIPTION: This formula assigns a division by zero error to the variable `x` within the `App.OnStart` event. The error is not immediately reported because the variable is not being referenced. This shows that errors aren't observed until their value is used.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/error-handling.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nSet( x, 1/0 )\n```\n\n----------------------------------------\n\nTITLE: Plugin Package Update Message\nDESCRIPTION: Example output message displayed in the Visual Studio output window after successfully updating an existing plugin package. It confirms the update operation was completed successfully.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/howto/vs-create-package.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n6/22/2022 3:20:14 PM : update of Plugin Package sample_PowerPlatformVSSolution.ExamplePlugins, at\nE:\\projects\\PowerPlatformVSSolution\\ExamplePlugins\\bin\\outputPackages\\PowerPlatformVSSolution.ExamplePlugins.1.0.0.nupkg was successful.\n```\n\n----------------------------------------\n\nTITLE: Deleting a Solution Using PowerShell\nDESCRIPTION: This snippet shows how to delete a solution in the Power Platform by using the 'pac solution delete' command. The command requires the name of the solution to be deleted as a parameter. Ensure that you have the correct permissions and that the solution name is accurate before executing this command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-delete-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n\"pac solution delete --solution-name Samplesolution\"\n```\n\n----------------------------------------\n\nTITLE: Configuring User Functions for ALM Accelerator\nDESCRIPTION: Configuration settings for controlling user access and functionality in the ALM Accelerator app, including solution import, deletion, management, and deployment options\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/new-maker-experience.md#2025-04-20_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n{\n  \"User Functions\": {\n    \"Import Solutions\": \"Not Allowed\",\n    \"Delete Solutions\": \"Not Allowed\",\n    \"Manage Solutions\": \"Allowed\",\n    \"Drillthrough Status\": \"Not Allowed\",\n    \"Profile Creation\": \"Not Allowed\",\n    \"Profile Updates\": \"Not Allowed\",\n    \"Advanced Promote\": \"Not Allowed\",\n    \"Advanced Deploy\": \"Not Allowed\",\n    \"Bypass Prepare\": \"Not Allowed\",\n    \"Show All Solutions\": \"Not Allowed\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SDK Call Operations in Dataverse Analytics\nDESCRIPTION: Lists the common SDK call operations tracked in Dataverse analytics reports for monitoring user activity and entity usage. These operations include Retrieve, Retrieve Multiple, Delete, Create, and Update calls.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/analytics-common-data-service.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nRetrieve, Retrieve Multiple, Delete, Create, and Update\n```\n\n----------------------------------------\n\nTITLE: Update Policy Template via Web API\nDESCRIPTION: This snippet shows the Web API operation to update a Policy Template (mspcat_ssPolicyTemplate) record. It uses the PATCH method on the /mspcat_sspolicytemplates endpoint, including the mspcat_sspolicytemplateid in the URL.  See the linked documentation for details on the request body.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\n\"PATCH /mspcat_sspolicytemplates(*mspcat_sspolicytemplateid*)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom View for Delegated Admin Users in Microsoft Power Platform\nDESCRIPTION: This snippet provides step-by-step instructions for creating a custom view in the Microsoft Power Platform web app to display delegated admin users. It involves navigating through settings, selecting security options, and configuring view parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/for-partners-delegated-administrator.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n2. Select **Settings** > **Security** > **Users**.\n  \n3. Choose **Select a view** (![Drop-down button.](../admin/media/dropdown-button.png \"Drop-down button\")) and then choose **Create Personal View**.  \n  \n4. Verify **Users** is selected in **Look for**.  \n  \n5. Choose **User** > **Contains Data**, and then choose **Results**.  \n  \n   ![Create a custom user view.](../admin/media/user-custom-view.png \"Create a custom user view\")  \n  \n   Delegated Admin will appear in the list of users.  \n  \n   ![Delegated admin appears in user list.](../admin/media/delegated-admin-user.png \"Delegated admin appears in user list\")\n```\n\n----------------------------------------\n\nTITLE: SLAId Property Definition in Power Platform\nDESCRIPTION: Definition of the SLAId property which identifies the service level agreement to apply to a case record. This Lookup field targets the sla entity type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Choose the service level agreement (SLA) that you want to apply to the case record.**|\n|DisplayName|**SLA**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`slaid`|\n|RequiredLevel|None|\n|Type|Lookup|\n|Targets|sla|\n```\n\n----------------------------------------\n\nTITLE: Checking PowerShell Module Versions\nDESCRIPTION: Commands to check installed PowerShell module versions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Module\nGet-Module -Name \"Microsoft.PowerApps.Administration.PowerShell\"\nGet-Module -Name \"Microsoft.PowerApps.PowerShell\"\n```\n\n----------------------------------------\n\nTITLE: Adding PowerApps Account with Prompt\nDESCRIPTION: Command to authenticate with PowerApps by opening a credential prompt.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n```\n\n----------------------------------------\n\nTITLE: Filtering Cloud Action Failures in KQL\nDESCRIPTION: This KQL query filters for a specific cloud action's failures by searching the dependencies table. It identifies failed action executions with a specified name within a specific environment over the last day.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/app-insights-cloud-flow.md#2025-04-20_snippet_2\n\nLANGUAGE: kql\nCODE:\n```\nlet myEnvironmentId = **'Insert your environment ID here**;\nlet myActionName = **'Delete a row'**;\ndependencies\n| where timestamp > ago(**1d**)\n| where customDimensions['resourceProvider'] == 'Cloud Flow'\n| where customDimensions['signalCategory'] == 'Cloud flow actions'\n| where customDimensions['environmentId'] == myEnvironmentId\n| where name == myActionName\n| where success == false\n```\n\n----------------------------------------\n\nTITLE: Dynamics 365 Environment URLs\nDESCRIPTION: URL pattern for accessing Dynamics 365 environments across different geographical regions with region-specific numbers\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/online-requirements.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://*.crm#.dynamics.com\nhttp://*.crm#.dynamics.com\n\nRegion numbers:\nAsia/Pacific: 5\nCanada: 3\nEurope, Africa, and Middle East: 15 and 4\nFrance: 12\nGermany: 16\nIndia: 8\nJapan: 7\nKorea: 21\nNorth America: no number\nNorway: 19\nOceania: 6\nSingapore: 20\nSouth Africa: 14\nSouth America: 2\nSwitzerland: 17\nUAE: 15\nUnited Kingdom: 11\nDynamics 365 US Government: 9\n```\n\n----------------------------------------\n\nTITLE: Environment Unlock Key Process in Power Platform\nDESCRIPTION: Step-by-step instructions for unlocking an encryption key in Power Platform admin center\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-encryption-key.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the Power Platform admin center as an admin\n2. Select the **Environments** tab and then select **Manage encryption keys**\n3. Select the key that has a **Locked** state, and then select **Unlock key**\n4. Select **Upload locked key**, browse to select the key, enter password, select **Unlock**\n```\n\n----------------------------------------\n\nTITLE: Polling Deployment Status in PowerShell\nDESCRIPTION: This PowerShell command checks the deployment status of a specified copilot in a Dataverse environment. It requires the environment ID and the bot ID as parameters for execution. The expected output includes the connection status and information about the provisioned bot.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-status-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac copilot status `\n   --environment 2e250e7a-5607-4fea-aa4e-1aeb7bf79118 `\n   --bot-id 9ee3f7aa-ab79-4cf6-a726-d85c8c18cc3e\n```\n\n----------------------------------------\n\nTITLE: Restoring Latest Backup in Power Platform CLI using PowerShell\nDESCRIPTION: This command restores the latest backup from a specified source environment to the currently selected environment. It uses the 'pac admin restore' command with the '--selected-backup latest' option.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-restore-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin restore --selected-backup latest --source-env 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Displaying Optional Parameters for 'pac plugin push' in Markdown\nDESCRIPTION: This snippet lists the optional parameters for the 'pac plugin push' command in a markdown format, including their descriptions and usage.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/plugin.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### `--configuration` `-c`\n\nBuild configuration. The default value is: 'Debug'.\n\n#### `--environment` `-env`\n\nSpecifies the target Dataverse. The value may be a Guid or absolute https URL. When not specified, the active organization selected for the current auth profile will be used.\n\n#### `--pluginFile` `-pf`\n\nFile name of plug-in assembly or plug-in package\n\n#### `--type` `-t`\n\nType of item if not specified explicitly through --pluginFile. The default value is: 'Nuget'.\n\nUse one of these values:\n\n- `Nuget`\n- `Assembly`\n```\n\n----------------------------------------\n\nTITLE: Task Entity Field Mapping Table\nDESCRIPTION: Markdown table showing the field mappings between Outlook and Customer Engagement apps, including sync directions and special notes for each field.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/what-fields-synchronized-outlook.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Outlook fields |                                                   Default sync                                                    |                                                                                                                                                                                                                                                        Settable sync                                                                                                                                                                                                                                                         | Customer engagement apps field |                                                                                                                                Notes                                                                                                                                 |\n|----------------|-------------------------------------------------------------------------------------------------------------------||--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|   % Complete   | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\") | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\"), ![One-way sync arrow (right)](../admin/media/one-way-sync-arrow-right.png \"One-way sync arrow (right)\"), ![One-way sync arrow (left)](../admin/media/one-way-sync-arrow-left.png \"One-way sync arrow (left)\"), ![No synchronization arrow](../admin/media/no-sync-arrow.png \"No synchronization arrow\") |  Percent Complete  |                                                                                                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Displaying Global Variable in Power Fx\nDESCRIPTION: Illustrates how to display the value of the 'RunningTotal' global variable in a label control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/variables.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Fx\nCODE:\n```\nRunningTotal\n```\n\n----------------------------------------\n\nTITLE: Enable Environment Routing with PowerShell\nDESCRIPTION: This PowerShell command sets the `enableDefaultEnvironmentRouting` flag to `$True` in the tenant settings. This enables environment routing, directing makers to their personal developer environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/default-environment-routing.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n```powershell\ntenantSettings.powerPlatform.governance.enableDefaultEnvironmentRouting = $True\nSet-TenantSettings -RequestBody $tenantSettings\n```\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Modules with Admin Rights\nDESCRIPTION: Commands to install the necessary PowerApps Administration and PowerShell modules with administrator privileges.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\nInstall-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Run-Only User Permissions\nDESCRIPTION: Detailed process for managing run-only user permissions and connections for Power Automate flows in the CoE Starter Kit\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/faq.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Automate\nCODE:\n```\nUpdate-FlowRunOnlyUsers -ConnectionType \"Microsoft Dataverse\" -PermissionLevel \"Blank\"\n```\n\n----------------------------------------\n\nTITLE: Discount Calculation Method Comparison in Dynamics 365 Sales\nDESCRIPTION: A table illustrating the difference between line item and per unit discount calculation methods, showing how the final amount is calculated for each method.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-sales-tab.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Discount method|Product|Price per unit|Quantity|Discount|Amount|  \n|---------------------|-------------|--------------------|--------------|--------------|------------|\n|Line item|Product 1|100|11|10|(100*11)-10=1090|\n|Per unit|Product 2|100|11|10|(100-10)*11=990|\n```\n\n----------------------------------------\n\nTITLE: SAP Connection JSON Configuration\nDESCRIPTION: JSON configuration parameters for establishing SNC connection in Power Automate.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/secure-network-communications.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"AppServerHost\": \"xxx\",\n\"Client\": \"xx\",\n\"SystemNumber\": \"xx\",\n\"LogonType\": \"ApplicationServer\",\n\"SncLibraryPath\": \"C:\\\\sap\\\\libs\\\\sapcryptolib\\\\sapcrypto.dll\",\n\"SncMyName\": \"p:CN=SNC, O=Contoso\",\n\"SncPartnerName\": \"p:CN=ID3, O=Contoso\",\n\"SncQop\": \"Default\",\n\"UseSnc\": \"true\",\n\"SncSso\": \"Off\"\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Filtered Results Using ShowColumns in Power Apps\nDESCRIPTION: Creates a new collection (NewOrder) containing filtered and transformed product data. Uses the ShowColumns approach to store products that need to be ordered.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-forall.md#2025-04-20_snippet_8\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect( NewOrder,\n    ShowColumns(\n        AddColumns(\n            Filter( Products, 'Quantity Requested' > 'Quantity Available' ),\n            \"Quantity To Order\", 'Quantity Requested' - 'Quantity Available'\n        ),\n        \"Product\",\n        \"Quantity To Order\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Schedule-based Refresh Configuration\nDESCRIPTION: Instructions for setting up automatic refresh schedules for integration projects, including frequency settings and email notifications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/data-integrator.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [Power Apps admin center](https://admin.powerapps.com).\n\n2. Select project and **Scheduling** tab or launch scheduler from project list.\n\n3. Select **Recur every** and complete fields.\n\n4. Select **Save schedule**.\n```\n\n----------------------------------------\n\nTITLE: Setting Patch Version for PAC Solution\nDESCRIPTION: Sets the patch version number to 2 for a Power Platform solution using the pac CLI tool. This command is used to manually specify the patch segment of the solution version number.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-version-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution version --patchversion 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Role for Email Delegation\nDESCRIPTION: Admin must verify user has 'Send Email as Another User' privilege in security roles. Requires accessing advanced settings and navigating to security roles configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/send-email-on-behalf.md#2025-04-20_snippet_0\n\nLANGUAGE: dynamics-crm-config\nCODE:\n```\nSettings > Advanced settings > Settings > Security > Security Roles > select a role > Business Management tab > Miscellaneous Privileges > Send Email as Another User\n```\n\n----------------------------------------\n\nTITLE: Classic Admin Center Billing Plan Setup\nDESCRIPTION: Step-by-step instructions for creating a new billing plan through the classic admin center interface. Covers configuration of Microsoft 365 Copilot Chat billing and environment provisioning.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-set-up.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the navigation pane, select **Billing** > **Billing plans**. The **Billing plans** page is displayed.\n\n1. Select **New billing plan**. The **New billing plan** pane is displayed.\n\n1. Select **Microsoft 365 Copilot Chat**.\n\n1. In the **Name** field, provide a name for your new billing plan.\n\n1. From the **Azure subscription** dropdown list, select the Azure subscription you'd like to bill.\n\n1. From the **Resource group** dropdown list, specify a resource group with that subscription.\n\n1. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Error Code Mapping Table in Markdown\nDESCRIPTION: A markdown table that maps error codes to failure types and provides definitions for various system errors in the Power Platform. Includes configuration errors, access errors, authentication errors, and general system errors with references to web service error code documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-mobile.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Error code\t| Failure type |\tDefinition|\n| ------ | ------ | ------ |\n|-2146864604 |\tCONFIG_ERROR |\tApp or user configuration error. See [Web service error codes](/power-apps/developer/data-platform/reference/web-service-error-codes). |\n|-2146864606 |\tCONFIG_ERROR |\tApp or user configuration error. See [Web service error codes](/power-apps/developer/data-platform/reference/web-service-error-codes). |\n|-2146864607 |\tCONFIG_ERROR |\tApp or user configuration error. See [Web service error codes](/power-apps/developer/data-platform/reference/web-service-error-codes). |\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Power BI Connection Error\nDESCRIPTION: This section addresses the error message related to failing to connect to the tabular data stream (TDS) endpoint. The error can be resolved by removing the \"https://\" prefix and the trailing slash \"/\" from the URL. The provided image visually depicts the error.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-powerbi.md#2025-04-20_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Disabling App Sharing with Everyone using PowerShell\nDESCRIPTION: PowerShell script to disable the ability to share Power Platform applications with everyone (including guests) by modifying tenant settings. This helps restrict access to Dataverse organizations for external users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$tenantSettings = Get-TenantSettings\n$tenantSettings.powerPlatform.powerApps.disableShareWithEveryone = $true\nSet-TenantSettings $tenantSettings\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Access Control Service Application Proxy\nDESCRIPTION: Creates a new SharePoint Azure Access Control Service application proxy with the specified metadata endpoint. This establishes the connection between SharePoint and Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-SPAzureAccessControlServiceApplicationProxy -Name \"Internal\" -MetadataServiceEndpointUri $metadataEndpoint -DefaultProxyGroup  \n```\n\n----------------------------------------\n\nTITLE: Power Apps Source File Structure Overview\nDESCRIPTION: Defines the standard folder and file structure for unpacked Power Apps source files, including key directories and file types used in source management\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-unpack-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Folder Structure\n\\src:\n  - \"*.fx.yaml\"  # Formula files\n  - \"CanvasManifest.json\"  # App manifest\n  - \"*.json\"  # Control definitions\n\\DataSources: # Data source configurations\n\\Connections: # Connection instances\n\\Assets: # Embedded media files\n\\pkgs: # External references\n\\other:\n  - \"entropy.json\"  # Volatile elements\n```\n\n----------------------------------------\n\nTITLE: Finding AsyncOperations Not in Blob Storage in SQL\nDESCRIPTION: SQL query to identify AsyncOperationBase records that are not using blob storage, which might affect storage utilization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT count(*)\nFROM asyncoperationbase WITH (NOLOCK)\nWHERE datablobid IS NULL AND data IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Removing App Role Assignments in Power Platform\nDESCRIPTION: PowerShell script to remove all canvas app role assignments for a specific user using Remove-AdminPowerAppRoleAssignment cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n\n#find all app role assignments for the DSR user and deletes them\nGet-AdminPowerAppRoleAssignment -UserId $deleteDsrUserId | Remove-AdminPowerAppRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: Registering Power Platform Management Application in PowerShell\nDESCRIPTION: Script to register a new management application in Power Platform using an administrator account. Requires an existing Microsoft Entra application ID and administrator credentials.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powershell-create-service-principal.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$appId = \"CLIENT_ID_FROM_AZURE_APP\"\n\n# Login interactively with a tenant administrator for Power Platform\nAdd-PowerAppsAccount -Endpoint prod -TenantID $tenantId \n\n# Register a new application, this gives the SPN / client application same permissions as a tenant admin\nNew-PowerAppManagementApp -ApplicationId $appId\n```\n\n----------------------------------------\n\nTITLE: Listing Connectors in Specified Environment with Power Platform CLI\nDESCRIPTION: Lists all connectors in a specific Power Platform environment by providing the environment GUID as a parameter to the pac connector list command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-list-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac connector list `\n  --environment 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for modifiedby Field\nDESCRIPTION: Defines the logical name for the Modified By field, which represents the unique identifier of the user who modified the record. This is a read-only lookup field that targets systemuser.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`modifiedby`\n```\n\n----------------------------------------\n\nTITLE: AI Agent Integration Documentation\nDESCRIPTION: Markdown documentation describing the AI agent workflow and integration with Copilot Studio for intelligent search assistance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/solution-ideas/agent-rental-portal.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. **User interacts with Portal AI agent**\n    - The user engages with the portal agent for assistance.\n    - The agent uses Copilot Studio, which is configured to search the portal content.\n\n1. **AI agent searches listings**\n    - The agent extracts search terms using an AI Builder prompt.\n    - The agent uses the Dataverse connector to search for listings.\n```\n\n----------------------------------------\n\nTITLE: Listing Applications - Microsoft Power Platform CLI - Markdown\nDESCRIPTION: Provides documentation for listing Microsoft Entra ID applications that are registered under a specific tenant, facilitating the management of applications associated with the Dataverse environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## pac admin application list\n\nList Microsoft Entra ID applications registered under your tenant.\n```\n\n----------------------------------------\n\nTITLE: Setting Governance Error Message Content\nDESCRIPTION: This command establishes the error message content shown to end users regarding governance compliance, including URLs and contact information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_45\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PowerAppDlpErrorSettings -TenantId 'TenantId' -ErrorSettings @{  ErrorMessageDetails = @{ enabled = $True  url = \"https://contoso.org/governanceMaterial\"  }  ContactDetails= @{  enabled = $True  email = \"admin@contoso.com\"  }} }\n```\n\n----------------------------------------\n\nTITLE: Authentication Commands with Azure CLI\nDESCRIPTION: This snippet shows how to authenticate for tasks using the Azure CLI, including login, command execution, and logout. It specifies the use of `az login` to start the session and ends with `az logout`.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/overview.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz login\ncoe alm install -c aad\naz logout\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to coe-cli Folder (cmd)\nDESCRIPTION: Navigates into the coe-cli folder within the CoE Starter Kit repository where the CoE CLI specific setup takes place. This is part of preparing the environment for installation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/non-administrator-local-install.md#2025-04-20_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\ncd coe-cli\n```\n\n----------------------------------------\n\nTITLE: Converting Text to DateTime Value in Power Apps\nDESCRIPTION: The DateTimeValue function in Power Apps converts a text string containing date and time into a single date/time value. It accepts an optional language parameter to guide the conversion, defaulting to the user's language setting.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/global.md#2025-04-20_snippet_6\n\nLANGUAGE: Power Apps\nCODE:\n```\nDateTimeValue( \"11:43:02 1/2/01\", \"de-DE\" )\nDateTimeValue( \"11:43:02 1/2/01\" )\n```\n\n----------------------------------------\n\nTITLE: Community Checklist in Markdown\nDESCRIPTION: A markdown checklist highlighting key strategies for building and supporting a community of makers within an organization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/nurture-best-practices.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"checklist\"]\n> * [Find and support champions in your organization](champions.md)\n> * [On-boarding new makers](onboard-makers.md)\n> * [Create an internal wiki and community](wiki-community.md)\n> * [Share your own templates and reusable components](reusable.md)\n```\n\n----------------------------------------\n\nTITLE: Creating New DLP Policy Connector Configurations in PowerShell\nDESCRIPTION: Command to create new connector configurations for a Data Loss Prevention policy in Power Platform. This PowerShell cmdlet allows you to define new endpoint filtering rules for a policy.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-endpoint-filtering.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nNew-PowerAppDlpPolicyConnectorConfigurations\n```\n\n----------------------------------------\n\nTITLE: Querying Dataverse Table with FirstN Function\nDESCRIPTION: Retrieves the first five records from the Contacts table in Dataverse using the FirstN function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-run-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nFirstN(Contacts, 5)\n```\n\n----------------------------------------\n\nTITLE: Uploading User Mapping File (Source Admin)\nDESCRIPTION: Script to upload the user mapping file to the previously generated SAS URL using Azure PowerShell commands.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$SASUri =\"Update the SAS Uri from previous step\"\n$Uri = [System.Uri] $SASUri\n\n$storageAccountName = $uri.DnsSafeHost.Split(\".\")[0]\n$container = $uri.LocalPath.Substring(1)\n$sasToken = $uri.Query\n\n# File to upload\n# Note that the file name should be usermapping.csv (case sensitive) with comma separated values.\n$fileToUpload = 'C:\\filelocation\\usermapping.csv'\n\n# Create a storage context\n$storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -SasToken $sasToken\n\n# Upload the file to Azure Blob Storage\nSet-AzStorageBlobContent -File $fileToUpload -Container $container -Context $storageContext -Force\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-One Relationships in Power Platform\nDESCRIPTION: This snippet describes the many-to-one relationship between mspcat_ruleset_policy_reln and mspcat_rulesetforpowerappschecker, detailing the properties defining this relationship such as the referenced entity and cascading behavior, important for data integrity and relationship management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_staticanalysispolicy.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|ReferencedEntity|`mspcat_rulesetforpowerappschecker`|\n|ReferencedAttribute|`mspcat_rulesetforpowerappscheckerid`|\n|ReferencingAttribute|`mspcat_ruleset`|\n|ReferencingEntityNavigationPropertyName|`mspcat_ruleset`|\n|IsHierarchical||\n|CascadeConfiguration|Archive: `NoCascade`<br />Assign: `NoCascade`<br />Delete: `RemoveLink`<br />Merge: `NoCascade`<br />Reparent: `NoCascade`<br />RollupView: `NoCascade`<br />Share: `NoCascade`<br />Unshare: `NoCascade`|\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for Time Zone Rule Version Number Field\nDESCRIPTION: Specifies the logical name for the Time Zone Rule Version Number field in the Package Solutions entity. This field is for internal use only.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagesolutions.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`timezoneruleversionnumber`\n```\n\n----------------------------------------\n\nTITLE: Catalog Items View Table\nDESCRIPTION: Markdown table detailing the columns displayed in the catalog items view and their descriptions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/administer-catalog.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Column|Description|\n|---------|----------|\n|**Name (Publishers)** |Name of the publisher|\n|**Name**|Display Name|\n|**Catalog Item Id**|ID provided by publisher|\n|**Engineering Contact**|The engineering contact|\n|**Status Reason**|The reason for the status of the item. Options: <br /> - **Active**<br /> - **Published**<br /> - **Pending Approval**<br /> - **Inactive**<br /> - **Rejected**|\n|**Modified On**|When the item was last modified|\n|**Modified By**|Who last modified the item|\n```\n\n----------------------------------------\n\nTITLE: StatusCode Property Definition with Options in Power Platform\nDESCRIPTION: Definition of the StatusCode property which provides detailed status reasons for an activity. This Status field includes predefined option values that correspond to the StateCode values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Reason for the status of the activity.**|\n|DisplayName|**Status Reason**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`statuscode`|\n|RequiredLevel|None|\n|Type|Status|\n|DefaultFormValue|-1|\n|GlobalChoiceName|`mspcat_installactivity_statuscode`|\n\n#### StatusCode Choices/Options\n\n|Value|Details|\n|---|---|\n|1|Label: **Open**<br />State:0<br />TransitionData: None|\n|2|Label: **Completed**<br />State:1<br />TransitionData: None|\n|3|Label: **Canceled**<br />State:2<br />TransitionData: None|\n|4|Label: **Scheduled**<br />State:3<br />TransitionData: None|\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for createdonbehalfby Field\nDESCRIPTION: Defines the logical name for the Created By (Delegate) field, which represents the unique identifier of the delegate user who created the record. This is a read-only lookup field that targets systemuser.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`createdonbehalfby`\n```\n\n----------------------------------------\n\nTITLE: Named Authentication in Power Platform CLI\nDESCRIPTION: This example authenticates with the tenant and assigns a custom name 'MyOrg' to the authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-create-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npac auth create --name MyOrg\n```\n\n----------------------------------------\n\nTITLE: Designate SharePoint Form Environment PowerShell Command\nDESCRIPTION: PowerShell command to set a specific environment for storing custom SharePoint forms, helping to reduce clutter in the default environment\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/manage-default-environment.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AdminPowerAppSharepointFormEnvironment --EnvironmentName '<EnvironmentName>'\n```\n\n----------------------------------------\n\nTITLE: Converting Unmanaged Solution to Managed Solution in Power Platform\nDESCRIPTION: A detailed workflow for transforming unmanaged components into managed solutions across development, test, and production environments. Includes prerequisites, component identification, solution creation, and deployment strategies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/move-from-unmanaged-managed-alm.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerPlatform CLI\nCODE:\n```\nsolution import --convert-to-managed\n```\n\n----------------------------------------\n\nTITLE: Preparing Environment Migration (Source Admin)\nDESCRIPTION: Command to prepare the migration by validating users in the mapping file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nTenantToTenant-PrepareMigration \n-MigrationId {MigrationId} \n-TargetTenantId {TargetTenantId} \n-ReadOnlyUserMappingFileContainerUri {SasUri}\n```\n\n----------------------------------------\n\nTITLE: Defining component manifest for custom control in PowerApps\nDESCRIPTION: YAML configuration that defines a custom control manifest for PowerApps. This file specifies control properties, dependencies, and capabilities needed for the control to function properly within the canvas app environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-pdf-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nControl:\n  Name: CanvasThumbnail\n  DisplayName: CanvasThumbnail\n  Icon: ícone.png\n  FontIcon: 😊\n  CustomProperties:\n   - Name: ImageField\n     DisplayName: ImageField\n     PropertyType: Text\n     Required: true\n   - Name: ImageProperty\n     DisplayName: Image\n     PropertyType: ImageUri\n     Required: true\n   - Name: AltTextProperty\n     DisplayName: Alt Text\n     PropertyType: Text\n     Required: false\n     Tooltip: The alternate text for the image\n     IsResizable: false\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Trim and TrimEnds Functions\nDESCRIPTION: This segment illustrates how to utilize the Trim and TrimEnds functions with specific examples, showing the expected results of trimming spaces from strings and collections, thus demonstrating their functionality.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-trim.md#2025-04-20_snippet_1\n\nLANGUAGE: Power FX\nCODE:\n```\n| Formula | Description | Result |\\n| --- | --- | --- |\\n| **Trim(&nbsp;\"&nbsp;&nbsp;&nbsp;Hello&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;World&nbsp;&nbsp;&nbsp;\"&nbsp;)** | Removes all spaces from the start and end of a string and extra spaces from within the string. | \"Hello World\" |\\n| **TrimEnds(&nbsp;\"&nbsp;&nbsp;&nbsp;Hello&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;World&nbsp;&nbsp;&nbsp;\"&nbsp;)** | Removes all spaces from the start and end of a string. | \"Hello&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;World\" |\n```\n\nLANGUAGE: Power FX\nCODE:\n```\nClearCollect( Spaces, [ \"&nbsp;&nbsp;&nbsp;Jane&nbsp;&nbsp;&nbsp;Doe&nbsp;&nbsp;&nbsp;\", \"&nbsp;&nbsp;&nbsp;&nbsp;Jack&nbsp;&nbsp;&nbsp;and&nbsp;&nbsp;&nbsp;Jill\", \"Already&nbsp;trimmed\", \"&nbsp;&nbsp;&nbsp;Venus,&nbsp;&nbsp;&nbsp;Earth,&nbsp;&nbsp;&nbsp;Mars&nbsp;&nbsp;\", \"Oil&nbsp;and&nbsp;Water&nbsp;&nbsp;&nbsp;\" ] )\n```\n\nLANGUAGE: Power FX\nCODE:\n```\n| Formula | Description | Result |\\n| --- | --- | --- |\\n| **Trim(&nbsp;Spaces&nbsp;)** | Trims all spaces from the start and end of each string and extra spaces from within each string in the **Spaces** collection. | A single-column table with a `Value` column containing the following values: \"Jane&nbsp;Doe\", \"Jack&nbsp;and&nbsp;Jill\", \"Already&nbsp;trimmed\", \"Venus,&nbsp;Earth,&nbsp;Mars\", \"Oil&nbsp;and&nbsp;Water\" |\\n| **TrimEnds(&nbsp;Spaces&nbsp;)** | Trims all spaces from the start and end of each string in the **Spaces** collection. | A single-column table with a `Value` column containing the following values: \"Jane&nbsp;&nbsp;&nbsp;Doe\", \"Jack&nbsp;&nbsp;&nbsp;and&nbsp;&nbsp;&nbsp;Jill\", \"Already&nbsp;trimmed\", \"Venus,&nbsp;&nbsp;&nbsp;Earth,&nbsp;&nbsp;&nbsp;Mars\", \"Oil&nbsp;and&nbsp;Water\" |\n```\n\n----------------------------------------\n\nTITLE: List canvas apps using Power Platform CLI\nDESCRIPTION: This command lists canvas apps using the Microsoft Power Platform CLI. Optionally, you can specify the target Dataverse environment to list apps from.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/canvas.md#2025-04-20_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Comparing Lifecycle Services and Power Platform Admin Center Terminology\nDESCRIPTION: This markdown table compares terminology between Lifecycle Services and the Power Platform admin center, highlighting key changes in nomenclature for various administrative concepts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/unified-experience/partners-systems-implementers.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Lifecycle Services terminology | Power Platform admin center terminology |\n|--------------------------------|-----------------------------------------|\n| Project | Not applicable |\n| Finance and operations environment | Finance and operations app |\n| Project Owner role | Power Platform administrator role in Microsoft Entra |\n| Asset library | Not applicable |\n| Software deployable package | Unified package |\n| Database refresh | Environment copy |\n| Maintenance mode | Admin mode |\n```\n\n----------------------------------------\n\nTITLE: Defining Trim Function Syntax in Power FX\nDESCRIPTION: This section outlines the syntax for using the Trim function that removes spaces from a string while maintaining single spaces between words. It details that the function accepts a single string or a single-column table of strings as input.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-trim.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\n**Trim**( _String_ )\\n**TrimEnds**( _String_ )\\n\\n- _String_ - Required. The string of text to remove spaces from.\\n\\n**Trim**( _SingleColumnTable_ )\\n**TrimEnds**( _SingleColumnTable_ )\\n\\n- _SingleColumnTable_ - Required. A single-column table of strings to remove spaces from.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Conditional Access Authentication Context IDs for Power Apps via PowerShell\nDESCRIPTION: PowerShell command to retrieve the current authentication context IDs configured for a specific app in a Managed Environment. This allows admins to view which conditional access policies are applied to an individual app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/admin-manage-apps.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppConditionalAccessAuthenticationContextIds –EnvironmentName <EnvironmentName> -AppName <AppName>\n```\n\n----------------------------------------\n\nTITLE: Power Platform Settings Table Structure in Markdown\nDESCRIPTION: Markdown table showing Power Platform admin settings and their descriptions, including options for environment creation control, themes, notifications, password management, and contact preferences.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-platform-settings.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Setting |Description |\n|---------|---------||\n|**Power Platform settings**    | Select this link to control who can create environments and allocate add-on capacity (if available).    |\n|**Themes**     | Change the appearance of the Microsoft Power Platform site with the provided themes.        |\n|**Notifications** | By default, Microsoft 365 apps will ping you when new mail arrives and when it's time for a reminder--with a pop up or with a sound. You can change these settings at any time. |\n|**Password**     | Change the password for all of your Microsoft 365 apps and services.        |\n|**Contact preferences**    | Change contact preferences such as email and phone preferences.         |\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for modifiedonbehalfby Field\nDESCRIPTION: Defines the logical name for the Modified By (Delegate) field, which represents the unique identifier of the delegate user who modified the record. This is a read-only lookup field that targets systemuser.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`modifiedonbehalfby`\n```\n\n----------------------------------------\n\nTITLE: Per Flow License Assignment Steps\nDESCRIPTION: Markdown code block detailing the steps to assign per flow licenses to an environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/buy-licenses.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select **Resources** > **Capacity** on the left side of the screen.\n2. Select **Add-ons** > **Manage** in the add-on section.\n3. Select an environment.\n4. Enter the amount of each add-on you would like to allocate to each environment.\n5. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Power BI Document Version Error\nDESCRIPTION: This section explains an error message that indicates the queries were authored with a newer version of Power BI Desktop. The resolution is to update to the latest version of Power BI Desktop.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-powerbi.md#2025-04-20_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Field Definition: stageid in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Stage Id uniqueidentifier field that contains the id of the stage where the entity is located.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n`stageid`\n```\n\n----------------------------------------\n\nTITLE: Setting Items Property for File Gallery in Chessboard Example\nDESCRIPTION: This snippet sets the Items property of a nested gallery to iterate over a sequence of 8 files, which represents columns for the chessboard.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_22\n\nLANGUAGE: power-fx\nCODE:\n```\nSequence(8) as File\n```\n\n----------------------------------------\n\nTITLE: Create Policy Template via Web API\nDESCRIPTION: This snippet shows the Web API operation to create a new Policy Template (mspcat_ssPolicyTemplate) record. It uses the POST method on the /mspcat_sspolicytemplates endpoint. See the linked documentation for details on the request body.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\n\"POST /mspcat_sspolicytemplates\"\n```\n\n----------------------------------------\n\nTITLE: Performance Data Collection Strategy Overview\nDESCRIPTION: Key strategies for collecting and managing performance metrics and logs across different system components and environments\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/performance-efficiency/collect-performance-data.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Key Performance Data Collection Strategies\n- Centralize performance metrics\n- Segment performance data\n- Define retention policies\n- Collect comprehensive performance metrics\n```\n\n----------------------------------------\n\nTITLE: Package Deployer Log File Locations\nDESCRIPTION: Default log file directory for Microsoft Dynamics 365 Package Deployer tool, located in the user's AppData Roaming folder with version-specific path\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/deploy-packages-using-package-deployer-windows-powershell.md#2025-04-20_snippet_1\n\nLANGUAGE: filepath\nCODE:\n```\nc:\\Users\\<UserName>\\AppData\\Roaming\\Microsoft\\Microsoft Dynamics CRM Package Deployer\\<Version>\n```\n\n----------------------------------------\n\nTITLE: Tenant Type Check Response Format\nDESCRIPTION: JSON response format from the tenant type determination API showing the viral status that indicates whether a tenant is managed or unmanaged.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-dsr-guide-systemlogs.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n{\n...\n\"Login\": \"name@unmanagedcontoso.com\",\n\"DomainName\": \"unmanagedcontoso.com\",\n\"IsViral\": true,\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Types XML for Package Files\nDESCRIPTION: XML configuration that specifies MIME type information for various file extensions included in the AppSource package. Defines content types for common file formats like xml, dll, zip, images, and web files.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/appsource/create-package-app.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n  <Default Extension=\"xml\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"xaml\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"dll\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"zip\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"jpg\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"gif\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"png\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"htm\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"html\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"db\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"css\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"json\" ContentType=\"application/octet-stream\" />\n  <Default Extension=\"msapp\" ContentType=\"application/octet-stream\" />\n</Types>\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Connection Configuration Parameters\nDESCRIPTION: URL configuration parameters for connecting to Azure Storage and Power Platform environment. The DatalakeURL should end with '/powerplatform' and EnvironmentAPI should point to the Web API endpoint.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-dataexport.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDatalakeURL = [Storage Account URL]/powerplatform\nEnvironmentAPI = [Environment URL]/api/data/v9.2\n```\n\n----------------------------------------\n\nTITLE: StartsWith Basic Examples in Power Fx\nDESCRIPTION: Examples demonstrating the StartsWith function usage with different text patterns and empty string behavior.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-startswith.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nStartsWith(\"Hello World\", \"hello\")     // Returns true\nStartsWith(\"Good bye\", \"hello\")        // Returns false\nStartsWith(\"Always say hello\", \"hello\") // Returns false\nStartsWith(\"Bye bye\", \"\")              // Returns true\n```\n\n----------------------------------------\n\nTITLE: Error Handling When Accessing Non-records in Power FX\nDESCRIPTION: This snippet lists several erroneous expressions that occur when using the Column and ColumnNames functions on untyped objects that do not represent records. It highlights the proper error handling for such cases.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-columnnames-column.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nColumnNames( ParseJSON ( \"[1, 2, 3]\" ) )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nColumn( ParseJSON ( \"23.45\" ), \"Value\" )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nColumnNames( ParseJSON ( \"\"\"hello\"\"\" ) )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nColumn( ParseJSON ( \"{\\\"a\\\":false}\" ).a, \"a\" )\n```\n\n----------------------------------------\n\nTITLE: Registering Customer Engagement Apps with SharePoint Site Collection in PowerShell\nDESCRIPTION: PowerShell commands to register customer engagement apps with the SharePoint on-premises site collection. This requires the SharePoint App Management Service Application Proxy to be running.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$site = Get-SPSite \"https://sharepoint.contoso.com/sites/crm/\"  \nRegister-SPAppPrincipal -site $site.RootWeb -NameIdentifier $issuer -DisplayName \"crm\"\n```\n\n----------------------------------------\n\nTITLE: Sample Output of pac copilot list Command\nDESCRIPTION: This text shows the expected output format from the pac copilot list command. The output displays a tabular list of copilots with columns for Name, Bot ID, Component State, management status, Solution ID, Status Code, and State Code.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-list-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nName                           Bot ID                               Component State Is Managed Solution ID                          Status Code State Code\nAsk Me Anything Copilot       584e012c-dc95-46d6-af5a-1263b6a44342 Published       Unmanaged  285af946-6383-49a0-8615-4e2afafeaf38 Active      Provisioned\nNew Test Copilot               9ee3f7aa-ab79-4cf6-a726-d85c8c18cc3e Published       Unmanaged  285af946-6383-49a0-8615-4e2afafeaf38 Active      Provisioned\n```\n\n----------------------------------------\n\nTITLE: Commit Changes to Git repository using PowerShell\nDESCRIPTION: This PowerShell script removes the downloaded zip files, configures the Git user name, pulls the latest changes, adds all changes, and commits them with the provided commit message. The script ensures that changes are committed to the repository with the correct user information and message.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines-github-export.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"rm -rf ${{ github.event.inputs.solution_name }}.zip\nrm -rf ${{ github.event.inputs.solution_name }}_managed.zip\ngit config user.name ${{ github.event.inputs.user_name }}\ngit pull \ngit add --all\ngit commit -am \\\"${{ github.event.inputs.commit_message }}\\\" --allow-empty\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Firewall Audit Logs via Dataverse OData API\nDESCRIPTION: This HTTP request retrieves audit log data in JSON format for IP firewall audit-only mode. It filters for action 118 which corresponds to IP firewall events, selects specific fields, and orders results by creation date in descending order.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/ip-firewall.md#2025-04-20_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://[orgURI]/api/data/v9.1/audits?$select=createdon,changedata,action&$filter=action%20eq%20118&$orderby=createdon%20desc&$top=1\n```\n\n----------------------------------------\n\nTITLE: Acquiring OAuth Token using C# and MSAL for Power Platform API\nDESCRIPTION: C# code example demonstrating how to acquire an OAuth token for the Power Platform API using the Microsoft Authentication Library (MSAL). It sets up a public client application and performs an interactive authentication flow to obtain a token.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/overview.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Substitute your own environment URL here.\nstring resource = \"https://<env-name>.api.<region>.dynamics.com\";\n\n// Example Microsoft Entra app registration.\n// For your custom apps, you will need to register them with Microsoft Entra ID yourself.\n// See https://docs.microsoft.com/powerapps/developer/data-platform/walkthrough-register-app-azure-active-directory\nvar clientId = \"51f81489-12ee-4a9e-aaae-a2591f45987d\";\nvar redirectUri = \"http://localhost\"; // Loopback required for the interactive login.\n\nvar authBuilder = PublicClientApplicationBuilder.Create(clientId)\n    .WithAuthority(AadAuthorityAudience.AzureAdMultipleOrgs)\n    .WithRedirectUri(redirectUri)\n    .Build();\nvar scope = resource + \"/.default\";\nstring[] scopes = { scope };\n\nAuthenticationResult tokenResult =\n     await authBuilder.AcquireTokenInteractive(scopes).ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Saving and Importing PowerShell Module - PowerShell\nDESCRIPTION: This snippet provides a way to save and import the PowerApps Administration PowerShell module without requiring admin rights on the computer.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powershell-installation.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSave-Module -Name Microsoft.PowerApps.Administration.PowerShell -Path\n```\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name Microsoft.PowerApps.Administration.PowerShell\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for UTC Conversion Time Zone Code Field\nDESCRIPTION: Specifies the logical name for the UTC Conversion Time Zone Code field in the Package Solutions entity. This stores the time zone code used when the record was created.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagesolutions.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n`utcconversiontimezonecode`\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Connectors (Admin Context) in Power Platform\nDESCRIPTION: PowerShell script for admins to delete all custom connectors created by a specific user using Remove-AdminPowerAppConnector cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n\n#Retrieves all custom connectors created by the DSR user and deletes them\nGet-AdminPowerAppConnector -CreatedBy $deleteDsrUserId | Remove-AdminPowerAppConnector\n```\n\n----------------------------------------\n\nTITLE: Building the Application (cmd)\nDESCRIPTION: This snippet builds the CoE CLI application, which compiles the source code and prepares it for use. It is an essential step after installing dependencies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/non-administrator-local-install.md#2025-04-20_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Disabling Solution-Aware Cloud Flow Sharing with PowerShell\nDESCRIPTION: PowerShell script that turns off sharing capabilities for solution-aware cloud flows in a Managed Environment, preventing users from sharing their flows with others.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-sharing-limits.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Retrieve the environment\n$environment = Get-AdminPowerAppEnvironment -EnvironmentName <EnvironmentId>\n\n# Update the Managed Environment settings\n$governanceConfiguration = $environment.Internal.properties.governanceConfiguration\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'solutionCloudFlows-limitSharingMode' -Value \"disableSharing\" -Force\n\n# Save the updated Managed Environment settings\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <EnvironmentId> -UpdatedGovernanceConfiguration $governanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Network Traffic Routing Strategy for Power Platform\nDESCRIPTION: Defines configuration requirements for routing inbound and outbound server traffic through ExpressRoute, highlighting the need for public URL discovery and IP subnet matching.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/expressroute/setup.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Have a publicly discoverable URL\n- Have a public IP address matching ExpressRoute circuit peering definition\n- Be in the same region as the requesting service\n```\n\n----------------------------------------\n\nTITLE: Publisher Record Submission - JSON Example\nDESCRIPTION: This JSON example illustrates the structure for creating a publisher record necessary for item submissions. It includes properties such as publisherId, publisherDisplayName, and lists of users and groups associated with the publisher.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submission-reference.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"publisherId\": \"MyPublisherId\",\n   \"publisherDisplayName\": \"Contoso Publishing\",\n   \"publisherUpnList\": [\n      {\n         \"action\": \"Add\",\n         \"upn\": \"john.doe@contoso.com\"\n      }\n   ],\n   \"publisherAADGroupOIDS\": [\n      {\n         \"action\": \"Add\",\n         \"groupName\": \"PowerCatalogSubmitters\",\n         \"groupOID\": \"2ded6de9-ab44-4478-9bd4-e609947daa2e\",\n         \"groupType\": \"Security\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding License Info to Solution using Power Platform CLI\nDESCRIPTION: This PowerShell command uses the Power Platform CLI (pac) to add licensing information to a solution. It references two CSV files: a plan definition file and a plan mapping file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-add-license-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution add-license --planDefinitionFile ../ISV_Plan_Definition.csv --planMappingFile ../ISV_Plan_Mapping.csv\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Automate Inventory Report Metrics in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the metrics available in the Power Automate Inventory report, including flows, makers, successful runs, environments, and connections.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-analytics-reports.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|Calculation  |Description  |\n|---------|----------|\n|Flows     | Count of Cloud flows included in the current view       |\n|Makers      | Count of Makers with activity registered in the last 30 days        |\n|Successful runs       | Total number of successful Cloud flow runs completed in the past 30 days          |\n|Environments     | Count of Environments included in the current view         |\n|Connections      | Count of unique connections referenced within the current view         |\n```\n\n----------------------------------------\n\nTITLE: Querying Offline Sync Failures by Error Code in Kusto\nDESCRIPTION: This Kusto query analyzes offline sync failures by error code, allowing administrators to identify common failure types encountered by frontline workers during synchronization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-mobile.md#2025-04-20_snippet_0\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where name == \"Offline.SyncDatabase\"\n| where success == false\n| extend cd = parse_json(customDimensions)\n| extend AppVersion = tostring(cd.AppInfo_Version)\n| extend ErrorCode = tostring(cd.ErrorCode)\n| extend ErrorMessage = tostring(cd.ErrorMessage)\n| extend FailureType = tostring(cd.FailureType)\n| summarize dcount(user_Id), count() by ErrorCode, ErrorMessage, FailureType, bin(timestamp, 1d)\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Context in JavaScript for Microsoft Power Platform\nDESCRIPTION: Shows the deprecated Xrm.Page.context method for accessing global context and its replacement using Xrm.Utility.getGlobalContext(). This allows access to the global context without going through the form context.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nXrm.Page.context\n\n// Replacement\nXrm.Utility.getGlobalContext()\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_requestcorrelationid in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Request Correlation Id field which stores the correlation ID provided on the request for approval. This string field allows up to 50 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_requestcorrelationid`\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for versionnumber Field\nDESCRIPTION: Defines the logical name for the Version Number field. This is a read-only BigInt field with maximum value 9223372036854775807 and minimum value -9223372036854775808.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`versionnumber`\n```\n\n----------------------------------------\n\nTITLE: Adding Power Apps Account via PowerShell\nDESCRIPTION: This PowerShell command logs into your Power Apps account, establishing a session to execute further commands related to tenant settings. The prerequisite is to have PowerShell installed and necessary admin privileges to access Power Apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/secure-default-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\n```\n\n----------------------------------------\n\nTITLE: Creating New Forms in Power Apps\nDESCRIPTION: Recommendations for form creation to ensure unique IDs and avoid manual XML editing. Use form designer for creating or copying forms to prevent conflicts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/form-alm-recommendations.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps\nCODE:\n```\n// Recommended: Use form designer\n// - Create new forms through designer\n// - Use \"Save as\" to copy existing forms\n// - Ensures unique form IDs\n```\n\n----------------------------------------\n\nTITLE: Solution Deployment Process\nDESCRIPTION: A markdown-formatted list of steps describing the process of saving and deploying a solution, including publishing changes, pushing to Git, and creating pull requests.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/new-maker-experience.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Save and deploy the solution\n\n1. Publish any changes to your app.\n\n1. Select **Save Solution** to push your changes to Git.\n\n   Be sure to publish any app changes before you start a save.\n\n1. When you're ready to deploy your changes across other environments, select **Deploy Solution**.\n\n1. Enter a **Title** and **Notes** for the pull request that's created in Azure DevOps.\n\n1. Select an **Environment** to deploy the solution to.\n```\n\n----------------------------------------\n\nTITLE: Deleting Personal Data from Dataverse Tables\nDESCRIPTION: Procedure for removing personal data from Dataverse tables using Excel export/import functionality. The process includes exporting data, removing specific records, and reimporting the cleaned dataset.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dataverse-privacy-dsr-guide.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the navigation pane, select **Dataverse**, and then select **Tables**.\n2. From the list of tables, select a table (for example, the Account table)\n3. On the menu bar, select **Export** > **Export data**.\n4. When the export is complete, select **Download exported data**. \n5. When the export is complete, select the .zip file in the **Downloads** folder and extract the file. Open the .csv file.\n6. In the menu bar, select **File**, select **Save As**, and then select a location in which to save the file.\n7. Delete the rows containing the personal data that you want to remove from the table and save the spreadsheet.\n8. In Power Apps, go back to the selected table, and then select **Import** > **Import data**.\n9. Select **Search**, and then select and open the Excel spreadsheet that you updated.\n10. Select **Import**.\n```\n\n----------------------------------------\n\nTITLE: Listing Deleted Canvas Apps in an Environment Using PowerShell\nDESCRIPTION: Lists all recently deleted canvas apps in a specified environment. Useful for recovery checks and requires the environment name for execution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminDeletedPowerAppsList -EnvironmentName 'EnvironmentName'\n```\n\n----------------------------------------\n\nTITLE: Enforcing DLP Policies for Violating Connections in a Power Platform Environment\nDESCRIPTION: This PowerShell command enforces DLP policies on connections in a specific Power Platform environment. It disables existing connections that violate DLP policies and enables previously disabled connections that no longer violate the policies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_48\n\nLANGUAGE: powershell\nCODE:\n```\nStart-DLPEnforcementOnConnectionsInEnvironment -EnvironmentName [Environment ID]\n```\n\n----------------------------------------\n\nTITLE: Checking Component Customizability in C#\nDESCRIPTION: This code snippet demonstrates how to use the IsComponentCustomizableRequest to check whether a solution component is customizable in Microsoft Dataverse.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/use-managed-properties.md#2025-04-20_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nUse <xref:Microsoft.Crm.Sdk.Messages.IsComponentCustomizableRequest> to check whether a solution component is customizable.\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Using MinimalCopy Type in Power Platform CLI\nDESCRIPTION: This command copies customizations and schemas only from a source environment to a target environment. It uses the 'pac admin copy' command with the '--type MinimalCopy' parameter to specify a minimal copy operation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-copy-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin copy `\n  --name \"Environment Name\" `\n  --source-env 00000000-0000-0000-0000-000000000000 `\n  --target-env 00000000-0000-0000-0000-000000000000 `\n  --type MinimalCopy\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Automate Usage Report Filters in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the filters available for the Power Automate Usage report, including environment name, type, and region.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-analytics-reports.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Scope  |Filter  |Description  |\n|---------|---------|----------|\n|Environment     | Name        | Friendly name used to identify a given environment        |\n|     | Type        | Type of environments to include in the current view        |\n|     | Region        | Global regions hosting environments        |\n```\n\n----------------------------------------\n\nTITLE: Logical AND operator in Power Platform\nDESCRIPTION: This snippet showcases the logical AND operator ('&&' or 'And') in Power Platform. It combines two boolean expressions and returns true only if both are true.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Price < 100 && Slider1.Value = 20\"\n\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Price < 100 And Slider1.Value = 20\"\n```\n\n----------------------------------------\n\nTITLE: Removing Conditional Access Authentication Context IDs from Power Apps via PowerShell\nDESCRIPTION: PowerShell command to remove authentication context IDs from a specific app in a Managed Environment. This allows admins to disable conditional access policies that were previously applied to an individual app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/admin-manage-apps.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-AdminPowerAppConditionalAccessAuthenticationContextIds –EnvironmentName <EnvironmentName> -AppName <AppName>\n```\n\n----------------------------------------\n\nTITLE: Exporting Admin Connection Role Assignments Using PowerShell\nDESCRIPTION: Exports all connection role assignments for a specific user using the Get-AdminPowerAppConnectionRoleAssignment function. Requires user ID as input, and results are output as a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\n$userId = \"11bb11bb-cc22-dd33-ee44-55ff55ff55ff\"\nGet-AdminPowerAppConnectionRoleAssignment -PrincipalObjectId $userId | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Admin User Connections Using PowerShell\nDESCRIPTION: Administrators can use the Get-AdminPowerAppConnection function to export all connections created by a specified user. The function requires the user’s ID, and outputs a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\n$userId = \"11bb11bb-cc22-dd33-ee44-55ff55ff55ff\"\nGet-AdminPowerAppConnection -CreatedBy $userId | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Updating AppTemplate Phone and Tablet Files\nDESCRIPTION: This snippet details the steps required to update the AppTemplatePhone.msapp and AppTemplateTablet.msapp files after authoring a new theme using the Theme Editor app. The updated files will ensure the app template is ready to be used by makers.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/theming-components.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Copy the formula `Set(ThemeName, \"Your Theme Name\")` to your clipboard or Notepad.\n1. Go to [make.powerapps.com](<https://make.powerapps.com>), and then go to your CoE environment where the theming solution is installed.\n1. On the left pane, select **Solutions**.\n1. Select the Center of Excellence theming solution.\n1. Edit the **AppTemplatePhone** canvas app.\n    ![Theme Editor - Edit App Template.](media/theming-7.png \"Theme Editor - Edit App Template\")\n1. Select **App** > **OnStart**, and replace the first line in the formula with the new formula you copied from Theme Editor. Make sure you don't replace any other formulas in the **OnStart** function and that the line ends with a semicolon.\n    ![Theme Editor - Insert OnStart formula.](media/theming-8.png \"Theme Editor - Insert OnStart formula\")\n1. Select **File** > **Save as** > **This Computer** to save the file locally.\n    ![Theme Editor - Save Template.](media/theming-9.png \"Theme Editor - Save Template\")\n1. Download the file.\n  ![Theme Editor - Download Template.](media/theming-10.png \"Theme Editor - Download Template\")\nComplete the same steps for the AppTemplateTablet canvas app.\n\nGo back to the Theme Editor app, and upload the template files you just downloaded.\n\n![Theme Editor - Publish App Theme.](media/theming-11.png \"Theme Editor - Publish App Theme\")\nSelect **Complete** to publish the theme to the Theme Gallery app.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n1. Copy the formula `Set(ThemeName, \"Your Theme Name\")` to your clipboard or Notepad.\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP with Organization Settings in JSON Format\nDESCRIPTION: Example of the ContentSecurityPolicyConfiguration JSON structure used to configure the frame-ancestors portion of the CSP. This would translate to specific directives in the CSP header.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/content-security-policy.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"Frame-Ancestor\": { \"sources\": [ { \"source\": \"foo\" }, { \"source\": \"bar\" } ] } }\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Power Platform\nDESCRIPTION: This snippet demonstrates string concatenation using the '&' operator in Power Platform. It joins three string literals to create a combined string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"\\\"hello\\\" & \\\" \\\" & \\\"world\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Removing Email Messages with Attachments Using Bulk Deletion Job in Dynamics 365\nDESCRIPTION: This code snippet describes how to create a bulk deletion job in Dynamics 365 to remove email messages with attachments based on specified criteria. It details the process of accessing the Bulk Deletion Wizard, defining search criteria such as status, age, and attachment size, and scheduling the job to run at recurring intervals.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/free-storage-space.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n1. In the [Power Platform Admin center](https://admin.powerplatform.microsoft.com), select an environment.\n\n2. Select **Settings** > **Data management** > **Bulk deletion**. In the menu bar, select **New**. The Bulk Deletion Wizard opens.  \n\n   :::image type=\"content\" source=\"media/free-storage-method9a-1.png\" alt-text=\"Screenshot that shows where the New button is located in an environment.\" lightbox=\"media/free-storage-method9a-1.png\":::\n  \n3. Choose **Next**.  \n  \n4. In the **Look for** list, select **Email Messages**.  \n  \n5. In the search criteria area, add similar criteria, for example:  \n  \n   **Status Reason** – **Equals** – **Sent** or **Received**\n  \n   **Actual End** – **Older Than X Months** – 1  \n  \n   **Attachments (Item)**  \n  \n   **File Size (Bytes)** – **Is Greater Than** – In the text box, type a byte value, such as 1,048,576 (binary for 1 MB).  \n  \n6. Group the first two criteria rows:  \n  \n   1. Choose the arrow next to each criteria row, and then choose **Select Row**.  \n  \n   1. With both rows selected, choose **Group AND**.  \n  \n      :::image type=\"content\" source=\"media/free-storage-method4a.png\" alt-text=\"Screenshot that shows the `Group AND` and `Group OR` options in the Define Search Criteria window.\" lightbox=\"media/free-storage-method4a.png\" :::\n\n7. Choose **Next**.  \n  \n8. In the **Name** text box, type a name for the bulk deletion job.  \n  \n9. Select a date and time for the job start time; preferably a time when users aren't in customer engagement apps.  \n  \n10. Select the **Run this job after every** check box, and then in the **days** list, select the frequency you want the job to run.\n\n   :::image type=\"content\" source=\"media/free-storage-method6b.png\" alt-text=\"Screenshot that shows where the Run this job every check box is located.\" lightbox=\"media/free-storage-method6b.png\":::\n  \n11. If you want a notification e-mail sent, select the **Send an email to me (myemail@domain.com) when this job is finished** check box.  \n\n12. Choose **Next**, review the bulk deletion job, and then choose **Submit** to create the recurring job.  \n```\n\n----------------------------------------\n\nTITLE: Navigation Steps for Data Import Template Download\nDESCRIPTION: Markdown formatted steps showing the process to download data import templates from the Microsoft Power Platform admin center, including required permissions and navigation path.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/download-template-data-import.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select an environment and go to **Settings** > **Templates** > **Data import templates**.\n\n2. In the **Templates for Data Import** dialog box, choose the record type that you want to download the template for, and then select **Download**.\n\n3. In the file download box, select **Save** or **Save as** and navigate to a location for the file.\n\n4. Select **Close**.\n```\n\n----------------------------------------\n\nTITLE: Including new PPAC banner in Power Platform documentation\nDESCRIPTION: This is a reference to an included banner for the new Power Platform Admin Center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-templates-articles.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[new-PPAC-banner](~/includes/new-PPAC-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: System Components Documentation\nDESCRIPTION: Markdown documentation listing and describing the core system components and their roles in the architecture.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/solution-ideas/agent-rental-portal.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[**Microsoft Dataverse**]: A cloud-based storage space for secure data management.\n\n[**Power Apps**]: Suite for rapid application development.\n\n[**Power Pages**]: Platform for building secure, low-code websites.\n\n[**AI Builder prompts in Copilot Studio**]: AI models for analyzing user interactions.\n```\n\n----------------------------------------\n\nTITLE: Checking Trial Environment Expiration for Standard Environment\nDESCRIPTION: Process to check remaining days for a standard trial environment in the Power Platform admin center\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/trial-environments.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/)\n\n2. Navigate to **Environments**\n\n3. Select specific trial environment\n\n4. Check **Day(s) remain** column for expiration details\n```\n\n----------------------------------------\n\nTITLE: Querying Top Suspended System Jobs in SQL\nDESCRIPTION: SQL query to identify the most common system jobs that are in suspended state, helping to diagnose issues in the AsyncOperationBase table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT name, count(*) as job_count\nFROM asyncoperationbase WITH (NOLOCK)\nWHERE statuscode = 10\nGROUP BY name\nORDER BY job_count DESC\n```\n\n----------------------------------------\n\nTITLE: Using Exp Function with Single Number in Power Fx\nDESCRIPTION: Example of using the Exp function to calculate e raised to the power of 2, resulting in approximately 7.389056.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nExp( 2 )\n```\n\n----------------------------------------\n\nTITLE: Displaying Regional Maintenance Windows Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the maintenance windows for different regions where Power Platform and Dynamics 365 environments are deployed. It includes the region name, URL, and maintenance window time in UTC.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/policies-communications.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Region | URL | Window (UTC) |\n| ------------- | -------------     | ------------- |\n| NAM           | crm.dynamics.com  | 2 AM to 11 AM |\n| DEU           | crm.microsoftdynamics.de | 5 PM to 2 AM |\n| SAM           | crm2.dynamics.com | 12 AM to 10 AM |\n| CAN           | crm3.dynamics.com | 1 AM to 10 AM |\n| EUR           | crm4.dynamics.com | 6 PM to 3 AM |\n| FRA           | crm12.dynamics.com | 6 PM to 3 AM | \n| APJ           | crm5.dynamics.com | 3 PM to 8 PM |\n| OCE           | crm6.dynamics.com | 11AM to 9PM |\n| JPN           | crm7.dynamics.com | 10 AM to 7 PM |\n| IND           | crm8.dynamics.com | 7:30PM to 1AM |\n| GCC           | crm9.dynamics.com | 2 AM to 11 AM |\n| GCC High      | crm.microsoftdynamics.us | 2 AM to 11 AM |\n| GBR           | crm11.dynamics.com | 6 PM to 3 AM |\n| ZAF           | crm14.dynamics.com | 5 PM to 2 AM |\n| UAE           | crm15.dynamics.com| 3 PM to 12 AM |\n| GER           | crm16.dynamics.com| 6 PM TO 3 AM |\n| CHE           | crm17.dynamics.com|  6 PM to 3 AM |\n| CHN           | crm.dynamics.cn | 3 PM to 9 PM |\n```\n\n----------------------------------------\n\nTITLE: Power Pages Flow Configuration Steps\nDESCRIPTION: Detailed steps for configuring and adding Power Automate flows to the Supplier Self Service site in Power Pages design studio\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-supplier-self-service/install-and-set-up.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [**Power Automate**](https://make.powerautomate.com/) and open solution **Supplier Self Service** and ensure all the flows are turned on.\n2. Go to [**Power Pages design studio**](/power-pages/configure/design-build-overview) > **Setup**.\n    1. Remove any flows that already appear to be added to the site.\n    2. Add these Power Automate flows to your *Supplier Self Service* site:\n        - **Power Pages CreateVendorInvoice**\n        - **Power Pages ReadPurchaseOrder**\n        - **Power Pages ReadPurchaseOrderList**\n        - **Power Pages Read Vendor**\n        - **Power Pages Read Vendor Invoice List**\n        - **Power Pages Update Vendor**\n```\n\n----------------------------------------\n\nTITLE: Absolute Value Function in PowerFx\nDESCRIPTION: Returns the absolute value of a number, removing any negative sign. Useful for converting negative numbers to their positive equivalent.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/formula-reference-formula-columns.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerFx\nCODE:\n```\nAbs(number)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dataverse Accelerator using PAC CLI\nDESCRIPTION: Commands to uninstall the Dataverse Accelerator app using PAC CLI after geo-to-geo migration. These commands remove three related solutions: msdyn_DataverseAcceleratorApp, DataverseAccelerator, and DataverseAccelerator_Anchor.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/geo-to-geo-migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npac solution delete --solution-name msdyn_DataverseAcceleratorApp --environment <environment URL>\npac solution delete --solution-name DataverseAccelerator --environment <environment URL>\npac solution delete --solution-name DataverseAccelerator_Anchor --environment <environment URL>\n```\n\n----------------------------------------\n\nTITLE: Executing Copilot Model Prepare-Fetch Command in PowerShell\nDESCRIPTION: An example PowerShell command for preparing and fetching Copilot models using the Power Platform CLI (pac). This command is used as a template example in the documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-model-prepare-fetch-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac copilot model prepare-fetch\n```\n\n----------------------------------------\n\nTITLE: Successful Analysis Status Check Response (HTTP 200)\nDESCRIPTION: This snippet shows a successful response from the Power Apps checker API after an analysis job is completed. The response includes HTTP status code 200 OK, Content-Type, privacyPolicy, progress, resultFileUris (containing a URL to the analysis report), runCorrelationId, status, and issueSummary.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/check-status.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n\"HTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n\n{\n    \"privacyPolicy\":\"https://go.microsoft.com/fwlink/?LinkID=310140\",\n    \"progress\":100,\n    \"resultFileUris\":[\"https://fakeblob.blob.core.windows.net/report-files/mySolution.zip?sv=2017-11-09&sr=b&sig=xyz&se=2019-06-11T20%3A27%3A59Z&sp=rd\"],\"runCorrelationId\":\"aaaa0000-bb11-2222-33cc-444444dddddd\",\"status\":\"Finished\",\"issueSummary\":\n    {\n        \"informationalIssueCount\":0,\n        \"lowIssueCount\":0,\n        \"mediumIssueCount\":302,\n        \"highIssueCount\":30,\n        \"criticalIssueCount\":0\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Device Features in JavaScript for Microsoft Power Platform\nDESCRIPTION: Shows deprecated methods for accessing device features like barcode scanning and geolocation, along with their replacements. These changes move device-related actions to the Xrm.Device namespace.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nXrm.Utility.getBarcodeValue()\nXrm.Utility.getCurrentPosition()\n\n// Replacement\nXrm.Device.getBarcodeValue()\nXrm.Device.getCurrentPosition()\n```\n\n----------------------------------------\n\nTITLE: Using the RecordOf Function for Parameterized Record Types\nDESCRIPTION: Shows how to utilize the 'RecordOf' function to define parameterized record types and use them in user defined functions, enabling type-safe checks for filtering operations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_8\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nBookType := Type( RecordOf( LibraryType ) );\n\nIsGenre( Book: BookType, SelectedGenre: Text ): Boolean = (Book.Genre = SelectedGenre);\n```\n\n----------------------------------------\n\nTITLE: Generating Subject Identifier for SharePoint in Dynamics 365 using JavaScript\nDESCRIPTION: This JavaScript script generates the subject identifier value needed for Federated Identity Credential configuration. It retrieves the current organization from Dynamics 365, encodes the tenant and app IDs using Base64URL encoding, and constructs the required issuer and subject URLs for SharePoint access.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-azure-app-with-sharepoint-access.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Replace with the id for SharePoint Managed Identity that was created attribute name: sharepointmanagedidentityid.\n// Refer to the following documentation for configuring an aad app for SharePoint access:\n//     https://learn.microsoft.com/en-us/power-platform/admin/configure-azure-app-with-sharepoint-access\n// For the SharePoint Managed Identity creation, refer to the following documentation:\n//     https://learn.microsoft.com/en-us/power-platform/admin/configure-azure-app-with-sharepoint-access#add-record-in-sharepoint-managed-identities-table\nconst sharePointManagedIdentityId = \"\";\n \nconst prefixForFICIssuer = \"https://login.microsoftonline.com/\";\nconst suffixForFICIssuer = \"/v2.0\";\nconst prefixForFICSubject = \"/eid1/c/pub\";\nconst tenantIdentifierForFICSubject = \"/t/\";\nconst appIdentifierForFICSubject = \"/a/\";\nconst environmentIdentifierForFICSubject = \"/Env/\";\nconst sharePointManagedIdentityIdentifierForFICSubject = \"/sharepointmanagedidentity/\";\n \n// This is the AAD App Id to be used for Power Platform Managed Identity: 58e835ab-2e39-46a9-b797-accce6633447\nconst powerPlatformManagedIdentityAppId = \"58e835ab-2e39-46a9-b797-accce6633447\";\n \n/**\n * Represents a request for retrieving the current organization.\n * @param {number} accessType - The access type (0 for Default, 1 for Internet, 2 for Intranet).\n */\nvar RetrieveCurrentOrganizationRequest = function (accessType) {\n    this.AccessType = accessType;\n};\n\n/**\n * Gets metadata for the request.\n * @returns {Object} The metadata for the request.\n */\nRetrieveCurrentOrganizationRequest.prototype.getMetadata = function() {\n    return {\n        boundParameter: null,\n        parameterTypes: {\n            \"AccessType\": {\n                \"typeName\": \"Microsoft.Dynamics.CRM.EndpointAccessType\",\n                \"structuralProperty\": 3,  // Enum Type\n                \"enumProperties\": [\n                    { \"name\": \"Default\", \"value\": 0 },\n                    { \"name\": \"Internet\", \"value\": 1 },\n                    { \"name\": \"Intranet\", \"value\": 2 }\n                ]\n            }\n        },\n        operationType: 1, // This is a function\n        operationName: \"RetrieveCurrentOrganization\"\n    };\n};\n \n/**\n * Encodes a GUID to a Base64 URL-safe string.\n *\n * @param {string} guid - The GUID to encode.\n * @returns {string} The Base64 URL-safe encoded string.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa}\n */\nfunction encodeToBase64Url(guid) {\n    const buffer = [];\n    const regex = /.{1,2}/g;\n \n    guid.split('-').forEach((number, index) => {\n        const bytesInChar = number.match(regex);\n        if (index < 3) bytesInChar.reverse();\n        bytesInChar.forEach(byte => buffer.push(parseInt(byte, 16)));\n    });\n \n    const base64String = btoa(String.fromCharCode.apply(null, new Uint8Array(buffer)));\n \n    // Make the Base64 string URL-safe by replacing '+' with '-' and '/' with '_'\n    // Remove any trailing '=' characters\n    return base64String.slice(0, 22).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n \n/**\n * Construct the issuer URL using the tenant ID.\n * This is needed for the issuer url in FIC configuration.\n * @param {string} tenantId - The tenant ID.\n * @returns {string} The constructed issuer URL.\n * @example\n * // Example for output\n * // https://login.microsoftonline.com/your-tenant-id/v2.0\n */\nfunction constructIssuerUrlForFIC(tenantId) {\n    return `${prefixForFICIssuer}${tenantId}${suffixForFICIssuer}`;\n}\n \n/**\n * Constructs the subject url using the encoded tenant ID, encoded app ID, environment ID, and SharePoint managed identity ID.\n * This is needed for the subject url in FIC configuration.\n * @param {string} encodedTenantId - The encoded tenant ID.\n * @param {string} encodedAppId - The encoded app ID.\n * @param {string} environmentId - The environment ID.\n * @param {string} sharePointManagedIdentityId - The SharePoint managed identity ID.\n * @returns {string} The constructed subject string.\n * @example\n * // Example output: /eid1/c/pub/t/<EncodedTenantId>/a/<EncodedDV1PAppId>/Env/<EnvironmentId>/sharepointmanagedidentity/<sharePointManagedIdentityId>\n */\nfunction constructSubjectUrlForFIC(encodedTenantId, encodedAppId, environmentId, sharePointManagedIdentityId) {\n    return `${prefixForFICSubject}${tenantIdentifierForFICSubject}${encodedTenantId}${appIdentifierForFICSubject}${encodedAppId}${environmentIdentifierForFICSubject}${environmentId}${sharePointManagedIdentityIdentifierForFICSubject}${sharePointManagedIdentityId}`;\n}\n \n(async () => {\n    try {\n        // Check if sharePointManagedIdentityId is null or undefined\n        if (!sharePointManagedIdentityId) {\n            console.error(\"SharePoint Managed Identity ID is null or undefined. Please ensure that the SharePoint Managed Identity ID is set.\");\n            return;\n        }\n \n        const accessType = 0;\n        const retrieveCurrentOrganizationRequest = new RetrieveCurrentOrganizationRequest(accessType);\n       \n        // Execute the request to retrieve the current organization details\n        // https://docs.microsoft.com/en-us/powerapps/developer/model-driven-apps/clientapi/reference/xrm-webapi/online/execute\n        // https://learn.microsoft.com/en-us/power-apps/developer/data-platform/webapi/web-api-functions-actions-sample#section-4-unbound-function-retrievecurrentorganization\n        const response = await Xrm.WebApi.online.execute(retrieveCurrentOrganizationRequest);\n        const result = await response.json();\n \n        if (result.Detail) {\n            const { EnvironmentId: environmentId, TenantId: tenantId } = result.Detail;\n \n            const encodedTenantId = encodeToBase64Url(tenantId);\n            const encodedPowerPlatformManagedIdentityAppId = encodeToBase64Url(powerPlatformManagedIdentityAppId);\n            const issuerUrlForFederatedCredentialConfig = constructIssuerUrlForFIC(tenantId);\n            const subjectUrlForFederatedCredentialConfig = constructSubjectUrlForFIC(encodedTenantId, encodedPowerPlatformManagedIdentityAppId,\n                 environmentId, sharePointManagedIdentityId);\n \n            console.log(`SharePoint Managed Identity ID: ${sharePointManagedIdentityId},\n                Tenant ID: ${tenantId},\n                Encoded Tenant ID: ${encodedTenantId},\n                Power Platform Managed Identity App ID: ${powerPlatformManagedIdentityAppId},\n                Encoded App ID: ${encodedPowerPlatformManagedIdentityAppId},\n                Issuer URL for Federated Credential Configuration: ${issuerUrlForFederatedCredentialConfig},\n                Subject URL for Federated Credential Configuration: ${subjectUrlForFederatedCredentialConfig}`);\n        } else {\n            console.error(\"RetrieveCurrentOrganization response is missing detail.\");\n        }\n    } catch (error) {\n        console.error(`Error executing request: ${error.message}`);\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Generating Install Configuration for CoE ALM\nDESCRIPTION: This command generates an installation configuration file (quickstart.json) for the CoE ALM Accelerator. It is used to set up the necessary components for ALM, like environments, users, and security settings.  The generated JSON file can then be used by the install command to automate the installation process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm generate install -o quickstart.json\n```\n\n----------------------------------------\n\nTITLE: Using Untyped Objects with Control Properties\nDESCRIPTION: This code shows how to assign values from an Untyped object to control properties in Power Fx, demonstrating automatic type coercion.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/working-with-json.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nLabel1.Text: untyped.Quantity\nInputText1.Default: untyped.ItemName\n```\n\n----------------------------------------\n\nTITLE: Creating Service Principal Name for Gateway Service Account\nDESCRIPTION: Command to create a Service Principal Name (SPN) for the new gateway service account. This step is crucial for enabling Kerberos constrained delegation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-kerberos.md#2025-04-20_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nsetspn –s gateway/<OPDG hostname> <domain>\\GatewaySvc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Exempt Resources for DLP Policy\nDESCRIPTION: This command retrieves a list of resources currently exempt from a designated DLP policy, critical for managing exceptions to data policies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_41\n\nLANGUAGE: powershell\nCODE:\n```\nGet-PowerAppDlpPolicyExemptResources -TenantId -PolicyName\n```\n\n----------------------------------------\n\nTITLE: Querying Page Views Data in Application Insights using Kusto\nDESCRIPTION: This Kusto query retrieves a single entry from the pageViews table, which logs user interactions with pages in the Unified Interface for model-driven apps. It allows developers to analyze basic traffic data to optimize user experiences.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-model-driven-apps.md#2025-04-20_snippet_0\n\nLANGUAGE: kusto\nCODE:\n```\npageViews\n| take 1\n```\n\n----------------------------------------\n\nTITLE: Power Pages Liquid Template Development\nDESCRIPTION: Create custom web page templates using HTML, CSS, and Liquid templating language to extend Power Pages site capabilities and implement advanced business requirements.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n- Custom web page templates built with HTML, CSS, and [Liquid](/power-pages/configure/liquid-overview)\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Role Assignments (Admin Context) in Power Platform\nDESCRIPTION: PowerShell script for admins to remove connection role assignments for a specific user using Remove-AdminPowerAppConnectionRoleAssignment cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n\n#Retrieves all connection role assignments for the DSR user and deletes them\nGet-AdminPowerAppConnectionRoleAssignment -PrincipalObjectId $deleteDsrUserId | Remove-AdminPowerAppConnectionRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: Power Platform Create Environment with Service Connection\nDESCRIPTION: Azure DevOps task for creating a new Power Platform environment using a service connection. Supports configuring environment details like display name, domain, SKU, and region.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_17\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.create-environment.PowerPlatformCreateEnvironment@2\n  displayName: 'Power Platform Create Environment '\n  inputs:\n    PowerPlatformEnvironment: 'My service connection'\n    DisplayName: 'First Coffee test'\n    DomainName: firstcoffee\n```\n\n----------------------------------------\n\nTITLE: Using PowerShell pac Command for Copilot Model Prediction\nDESCRIPTION: A PowerShell command example that demonstrates how to use the 'pac copilot model predict' command in the Power Platform CLI. This command appears to be related to making predictions with a Copilot model.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-model-predict-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac copilot model predict\n```\n\n----------------------------------------\n\nTITLE: Prerequisites for Data Lake Storage Export\nDESCRIPTION: Key requirements for configuring Power Platform analytics data export, including admin roles, storage account specifications, and licensing constraints\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/self-service-analytics.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprerequisites:\n  - admin_roles:\n      - Power Platform admin\n      - Dynamics 365 admin\n      - Microsoft 365 Global admin\n  - storage_account:\n      - type: Standard general-purpose v2 or Premium block blobs\n      - hierarchical_namespace: enabled\n      - public_access: all networks\n      - routing_preference: Microsoft network routing\n      - secure_transfer: required\n```\n\n----------------------------------------\n\nTITLE: Generating Items Collection with Photos via Office 365 Users Connector\nDESCRIPTION: This code snippet demonstrates how to generate a collection named `UserPersonas` using the Office 365 Users connector and Power Fx. It adds columns for persona key, name, image information, presence, and clickability.  It retrieves user data and their base64 encoded images, setting the `IsImage` field to false indicating that the image data is coming from a URL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/facepile.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nClearCollect(\n    UserPersonas,\n    AddColumns(\n       // Get first 10 users who have email ID - optional\n        Filter(\n            Office365Users.SearchUser({top: 10}),\n            Mail <> Blank()\n        ),\n        \"ItemPersonaKey\",\n        Mail,\n        \"ItemPersonaName\",\n        DisplayName,\n        \"IsImage\",\n        false,\n        \"ItemPersonaImageInfo\",\n        //Get base64 image data\n        Substitute(\n            JSON(\n                Office365Users.UserPhotoV2(Id),\n                JSONFormat.IncludeBinaryData\n            ),\n            \"\\\"\\\"\",\n            \"\"\n        ),\n        \"ItemPersonaPresence\",\n        \"Away\",\n        \"ItemPersonaClickable\",\n        true\n    )\n);\n\n```\n\n----------------------------------------\n\nTITLE: Analyzing Plugin Performance with Kusto Query\nDESCRIPTION: Kusto query to analyze plugin response time and performance metrics over time. The query filters for specific plugin types and aggregates duration by hourly intervals.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-dataverse.md#2025-04-20_snippet_6\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where ['type'] == \"Plugin\"\n| where name == \"[Plugin name here]\"\n| summarize avg(duration) by bin(timestamp, 1h)\n| render timechart\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Automate Maker Activity Report Filters in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the filters available for the Power Automate Maker Activity report, including environment name, type, region, and app type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-analytics-reports.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|Scope  |Filter  |Description  |\n|---------|---------|----------|\n|Environment     | Name        | Friendly name used to identify a given environment        |\n|     | Type        | Type of environments to include in the current view        |\n|     | Region        | Global regions hosting environments        |\n|App     | App type         | Toggle between usage statistics for canvas and model-driven apps         |\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_requestsource in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Request Source picklist field which indicates the source of the approval request, such as Power Automate Maker Portal or PAC CLI.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_requestsource`\n```\n\n----------------------------------------\n\nTITLE: Monitor License Usage Steps\nDESCRIPTION: Markdown code block showing how to monitor license usage in Microsoft 365 admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/buy-licenses.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Microsoft 365 admin center](https://admin.microsoft.com/).\n2. Go to **Billing** > **Licenses** to see all licenses that are assigned or available.\n3. Select the progress bar in the **Assigned licenses** column to see which users have licenses assigned to them.\n```\n\n----------------------------------------\n\nTITLE: Signing in to Microsoft Power Platform\nDESCRIPTION: Command to authenticate and access the Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure for ALM Tasks\nDESCRIPTION: A markdown table defining the key tasks and corresponding resources for implementing ALM in a new Power Platform project. The table includes 8 main tasks from environment strategy planning to user access management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/new-project-alm.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Task  | Description       | More information   |\n|-------|-------------------|--------------------|\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataverse Action for Pipeline Stage Owner Deployment\nDESCRIPTION: This snippet describes the settings required for the Dataverse 'Perform an unbound action' step in a Power Automate flow used for pipeline stage owner delegated deployments. The key setting is the Action Name (UpdateApprovalStatus), along with the Completion codes (20 = completed, 30 = rejected).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/delegated-deployments-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"Action Name: UpdateApprovalStatus (20 = completed, 30 = rejected)\"\n```\n\n----------------------------------------\n\nTITLE: Service Protection Limit Warning Note\nDESCRIPTION: Markdown note block explaining the relationship between pay-as-you-go and service protection limits\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-issues-faq.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\\n> This doesn't supersede [Service Protection Limit](/powerapps/developer/data-platform/api-limits) browser errors that are separate from high usage throttling. If service protection limits are exceeded, the user could still experience issues on client applications described on the service protection limits page.\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Environment Details via PowerShell\nDESCRIPTION: The snippet demonstrates how to obtain details of a specific environment in a Microsoft Dataverse tenant by providing the unique EnvironmentName. This is essential for managing multiple environments within an organization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppEnvironment –EnvironmentName 'EnvironmentName'\n```\n\n----------------------------------------\n\nTITLE: Displaying Native API Connections\nDESCRIPTION: This command retrieves a list of all native API connections in the default environment, providing insight into the connections available for flows.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_35\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminPowerAppEnvironment -Default | Get-AdminPowerAppConnection\n```\n\n----------------------------------------\n\nTITLE: Accessing String Field from Untyped Object Record in Power Fx\nDESCRIPTION: This example demonstrates how to access a string field named 'StringField' from an untyped object record 'UORecord' and convert it to text.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_2\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nText(UORecord.StringField)\n```\n\n----------------------------------------\n\nTITLE: Installing Catalog Item using PAC CLI\nDESCRIPTION: Command-line interface method to install a catalog item in a specific Power Platform environment, with optional version specification\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/install-items.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac catalog install  \\\n   -cid ContosoConferencesCustomConnector \\\n   -te https://<org to install item>.crm.dynamics.com/\n```\n\n----------------------------------------\n\nTITLE: Environment Transition Schedule for Unified Interface\nDESCRIPTION: Detailed timeline for new environment types transitioning to Unified Interface Only mode\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/enable-unified-interface-only.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Environment Types|Release Date|\n|---------|--------|\n|New trial environments|December 12, 2018|\n|New trial and production environments|February 2, 2019|\n|New production and sandbox environments|June 8, 2019|\n```\n\n----------------------------------------\n\nTITLE: Handling API Response to Set Initial Screen with Error Handling in Power Apps\nDESCRIPTION: This snippet uses an API call to decide whether to show 'ForestScreen' or 'OceanScreen' and employs 'IfError' for error handling, redirecting to 'ErrorScreen' on failure. It illustrates integrating external data and managing potential errors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_15\n\nLANGUAGE: power-fx\nCODE:\n```\nIfError( If( CustomConnector.APICall() = \"Forest\", \n             ForestScreen, \n             OceanScreen \n         ), \n         ErrorScreen \n)\n```\n\n----------------------------------------\n\nTITLE: Detect Tables Enabled for Recycle Bin - Dataverse\nDESCRIPTION: This snippet is a reference to a developer documentation page that explains how to query for tables enabled for the Recycle Bin feature. It allows developers to programmatically determine which tables support data recovery.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/restore-deleted-table-records.md#2025-04-20_snippet_0\n\nLANGUAGE: Dataverse\nCODE:\n```\n\"[query that returns which tables are enabled for recycle bin](/power-apps/developer/data-platform/restore-deleted-records#detect-which-tables-are-enabled-for-recycle-bin)\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Personal Data from Dataverse Tables\nDESCRIPTION: Instructions for exporting personal data from Dataverse tables to Excel spreadsheets for viewing purposes. The process details how to access and download table data in CSV format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dataverse-privacy-dsr-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the navigation pane, select **Dataverse**, and then select **Tables**.\n2. From the list of tables, select a table (for example, the Account table)\n3. On the menu bar, select **Export** > **Export data**.\n4. When the export is complete, select **Download exported data**. \n5. When the export is complete, select the .zip file in the **Downloads** folder and extract the file. Open the .csv file.\n```\n\n----------------------------------------\n\nTITLE: Exporting App Role Assignments Using PowerShell\nDESCRIPTION: Exports all app role assignments a user has access to using the Get-PowerAppRoleAssignment function in PowerShell. Requires access to the App creator PowerShell cmdlets and an active Power Apps account. The output is saved as a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\nGet-PowerAppRoleAssignment | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Arguments for Azure DevOps Pipeline Run\nDESCRIPTION: This snippet outlines the required inputs for running the Azure DevOps pipeline, including SourceBranch, BranchToCreate, and the target branch. Accurate input of these parameters is crucial for a successful execution of the pipeline.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-pipeline-sync.md#2025-04-20_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nEnter the name of the **SourceBranch** and **BranchToCreate** in Azure DevOps, and the **TargetBranch**, such as *main*.\n```\n\n----------------------------------------\n\nTITLE: Solution Component Ownership Configuration JSON\nDESCRIPTION: This JSON snippet shows how to assign ownership of solution components, specifically Power Automate flows, to Dataverse users after a solution is imported. It uses the SolutionComponentOwnershipConfiguration property in the customDeploymentSettings.json file and includes the solution component type, unique name, and the email address of the desired owner. This is helpful for flows that are initially owned by the service principal.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-data-deployment-configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SolutionComponentOwnershipConfiguration\": [\n    {\n      \"solutionComponentType\": 29,\n      \"solutionComponentUniqueName\": \"00000000-0000-0000-0000-00000000000\",\n      \"ownerEmail\": \"#{owner.ownerEmail}#\"\n    },\n    {\n      \"solutionComponentType\": 29,\n      \"solutionComponentUniqueName\": \"00000000-0000-0000-0000-00000000000\",\n      \"ownerEmail\": \"#{owner.ownerEmail}#\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Char Function - Single Number Example\nDESCRIPTION: This example demonstrates how to use the Char function to translate a single ASCII character code into its corresponding string representation. The Char function takes an integer representing an ASCII code and returns the character associated with that code.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-char.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Char( 65 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Char( 105 )\"\n```\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"Char( 35 )\"\n```\n\n----------------------------------------\n\nTITLE: Deleting All Data Export Profile Tables and Stored Procedures with SQL\nDESCRIPTION: SQL script to remove all tables, stored procedures, and user-defined types created by a Data Export Profile. The script uses dynamic SQL to identify and drop objects with a specified prefix in the database schema.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/replicate-data-microsoft-azure-sql-database.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-----------------------------------------------------------------\n-- Provide the value for the following parameters\nDECLARE @prefix nvarchar(32) =''\nDECLARE @schema nvarchar(32) ='dbo'\n-----------------------------------------------------------------\n\nDECLARE @sql nvarchar(max) = '';\n\nSELECT @sql += 'DROP TABLE ' + QUOTENAME([TABLE_SCHEMA]) + '.' + QUOTENAME([TABLE_NAME]) + ';'\nFROM [INFORMATION_SCHEMA].[TABLES]\nWHERE [TABLE_TYPE] = 'BASE TABLE' AND [TABLE_NAME] like @prefix + '_%' AND [TABLE_SCHEMA]= @schema;\n\nPRINT @sql\nEXEC SP_EXECUTESQL @sql;\n\nPRINT 'Finished dropping all tables. Starting to drop all stored procedures now.'\n\nSELECT @sql='';\nSELECT @sql += 'DROP PROCEDURE ' + QUOTENAME([ROUTINE_SCHEMA]) + '.' + QUOTENAME([ROUTINE_NAME]) + ';'\nFROM [INFORMATION_SCHEMA].[ROUTINES]\nWHERE [ROUTINE_TYPE] = 'PROCEDURE' AND [ROUTINE_NAME] like @prefix + '_%' AND [ROUTINE_SCHEMA]= @schema;\nPRINT @sql\nEXEC SP_EXECUTESQL @sql;\n\nPRINT 'Finished dropping all stored procedures. Starting to drop all types now.'\n\nSELECT @sql=''; \nSELECT @sql += 'DROP TYPE ' + QUOTENAME(SCHEMA_NAME([SCHEMA_ID])) + '.' +  QUOTENAME([NAME]) + ';'\nFROM SYS.TYPES\nWHERE is_user_defined = 1 AND [NAME] LIKE @prefix + '_%' AND [SCHEMA_ID]=SCHEMA_ID(@schema);\n\nPRINT @sql\nEXEC SP_EXECUTESQL @sql;\n```\n\n----------------------------------------\n\nTITLE: Checking Power Platform CLI Installation on Linux/macOS - Bash\nDESCRIPTION: Bash command for users to verify if Power Platform CLI is installed on Linux or macOS systems.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/introduction.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwhich pac\n```\n\n----------------------------------------\n\nTITLE: Creating a New Site or Editing an Existing Site in Power Platform\nDESCRIPTION: Steps to either create a new site or select an existing site for editing in the Power Platform admin interface.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-edit-site.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n3. To create a new site, on the Actions toolbar, choose **New**.  \n  \n    \\- OR -  \n  \n    To edit an existing site, in the list of sites, under Name, double-click or tap the entry for the site you want to edit details for.\n```\n\n----------------------------------------\n\nTITLE: Styling eMail Header in CoE Starter Kit using CSS\nDESCRIPTION: This CSS snippet defines the style for the eMail Header in the CoE Starter Kit's Core solution. It sets a default look and feel for email headers using specific properties for the body, content, logo, header, ribbon, message, form, and more. Dependencies include a webpage that employs these CSS styles. The primary input is the webpage elements described by the IDs and classes in the CSS. The style targets standard HTML elements and IDs specific to the context within the Core solution. Limitations include specificity to presentation styles only without functional logic.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/code-samples/css/default-value-eMail-Header-Style.md#2025-04-20_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n<head> <style> \nbody {\n    background-color: #efefef;\n    font-family: Segoe UI;\n    text-align: center;\n}\n\n#content {\n    border: 1px solid #742774;\n    background-color: #ffffff;\n    width: 650px;\n    margin-bottom: 50px;\n    display: inline-block;\n}\n\n#logo {\n    margin-left: 52px;\n    margin-top: 40px;\n    width: 60px;\n    height: 12px;\n}\n\n#header {\n    font-size: 24px;\n    margin-left: 50px;\n    margin-top: 20px;\n    margin-bottom: 20px;\n}\n\n#ribbon {\n    background-color: #742774;\n}\n\n#ribbonContent {\n    font-size: 20px;\n    padding-left: 30px;\n    padding-top: 10px;\n    padding-bottom: 20px;\n    color: white;\n    width: 100%;\n    padding-right: 10px;\n}\n\n#message > td {\n    font-size: 14px;\n    padding-left: 60px;\n    padding-right: 60px;\n    padding-top: 20px;\n    padding-bottom: 40px;\n}\n\n#footer > td {\n    font-size: 12px;\n    background-color: #cfcfcf;\n    height: 40px;\n    padding-top: 15px;\n    padding-left: 40px;\n    padding-bottom: 20px;\n}\n\n#form {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n#app {\n    width: 60%;\n    font-size: 12px;\n}\n\n.label {\n    color: #5f5f5f\n}\n\ntable {\n    border-collapse: collapse;\n    width: 100%;\n}\n\nth, td {\n    padding: 8px;\n    text-align: left;\n    border-bottom: 1px solid #ddd;\n}\n\n</style> </head>\n\n```\n\n----------------------------------------\n\nTITLE: Security Profile Creation Steps in Markdown\nDESCRIPTION: Instructions for creating and configuring a field security profile and assigning users to it.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/how-field-security-affects-synchronization-between-outlook.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n2. Select **Settings** > **Security**.\n  \n3. Select **Field Security Profiles**.\n  \n4. Create a profile. Select **New** and enter a Name.\n  \n5. Select **Save and Close**.\n  \n6. Select the new profile > **Users** > **Add**\n  \n7. Select users and then select **Select** > **Add**.\n```\n\n----------------------------------------\n\nTITLE: Field Definition: statuscode in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Status Reason status field that provides detailed status reasons for the approval request, such as Submitted, Completed, or InProgress.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n`statuscode`\n```\n\n----------------------------------------\n\nTITLE: Creating Folder Structure for PKI Setup - PowerShell\nDESCRIPTION: This snippet creates the necessary directory structure for the Public Key Infrastructure (PKI) setup, specifically for storing signing user certificates and user certificates.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncd C:\\\nmkdir pki-certs\ncd C:\\pki-certs\\\nmkdir signingUsersCert\nmkdir userCerts\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamics 365 Regional URLs in Markdown Table\nDESCRIPTION: A markdown table that lists all available Dynamics 365 regional datacenter URLs. It maps region codes (like NAM, DEU, SAM) to their corresponding URLs (like crm.dynamics.com, crm.microsoftdynamics.de, etc.).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/new-datacenter-regions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Region | URL | \n| ------------- | -------------     | \n| NAM           | crm.dynamics.com  | \n| DEU           | crm.microsoftdynamics.de | \n| SAM           | crm2.dynamics.com | \n| CAN           | crm3.dynamics.com | \n| EUR           | crm4.dynamics.com | \n| APJ           | crm5.dynamics.com | \n| OCE           | crm6.dynamics.com | \n| JPN           | crm7.dynamics.com | \n| IND           | crm8.dynamics.com | \n| GCC           | crm9.dynamics.com | \n| GCC High      | crm.microsoftdynamics.us | \n| GBR           | crm11.dynamics.com | \n| FRA           | crm12.dynamics.com | \n| ZAF           | crm14.dynamics.com | \n| UAE           | crm15.dynamics.com| \n| GER           | crm16.dynamics.com| \n| CHE           | crm17.dynamics.com|  \n| CHN           | crm.dynamics.cn | \n| NOR           | crm19.dynamics.com |\n| SGP           | crm20.dynamics.com |\n| KOR           | crm21.dynamics.com |\n```\n\n----------------------------------------\n\nTITLE: Custom Steps in Export Solution Pre Hook\nDESCRIPTION: Shows the implementation of a pre-hook in the export solution pipeline, including a script step and the insertion of a custom template. The expected input is the path to the template file, and the script outputs a message, however, no specific outputs or changes occur as the script is disabled.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-hook-extensions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- script: echo Export Solution Pre Hook\n  displayName: 'Export Solution Pre Hook'\n  enabled: false\n\n- template: CustomTemplates/output-environment-variables.yml\n```\n\n----------------------------------------\n\nTITLE: Power Apps Activity Schema Example\nDESCRIPTION: This JSON schema represents the structure of Power Apps activity logs sent to the Microsoft Purview compliance portal. It includes information about the app, environment, user, and the specific activity performed.  The schema helps in identifying Power Apps activities within the audit logs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/logging-powerapps.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"Name\": \"powerplatform.analytics.resource.power_app.display_name\",\n        \"Value\": \"Test canvas app\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.power_app.id\",\n        \"Value\": \"a81399c4-8e32-4460-b0d6-69d7d6c404e5\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.environment.name\",\n        \"Value\": \"Contoso (default)\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.environment.id\",\n        \"Value\": \"default-99ca106f-36df-429e-9998-b6131ea7cc86\"\n    },\n    {\n        \"Name\": \"version\",\n        \"Value\": \"1.0\"\n    },\n    {\n        \"Name\": \"type\",\n        \"Value\": \"PowerPlatformAdministratorActivityRecord\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.operation.is_successful\",\n        \"Value\": \"True\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.telemetry_correlation.id\",\n        \"Value\": \"8c423c52-ebc3-47b5-a604-a8b98bbce92a\"\n    },\n    {\n        \"Name\": \"enduser.ip_address\",\n        \"Value\": \"::ffff:172.172.34.12\"\n    },\n    {\n        \"Name\": \"user_agent.original\",\n        \"Value\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.type\",\n        \"Value\": \"PowerApp\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.activity.name\",\n        \"Value\": \"AdminDeleteApp\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.activity.id\",\n        \"Value\": \"f88c7b59-6908-4f40-8489-7eca71b531b0\"\n    },\n    {\n        \"Name\": \"enduser.id\",\n        \"Value\": \"e5568c4f-015e-49d6-bf04-16c14301e9a3\"\n    },\n    {\n        \"Name\": \"enduser.principal_name\",\n        \"Value\": \"admin@M365DS679477.onmicrosoft.com\"\n    },\n    {\n        \"Name\": \"enduser.role\",\n        \"Value\": \"Admin\"\n    },\n    {\n        \"Name\": \"powerplatform.analytics.resource.tenant.id\",\n        \"Value\": \"99ca106f-36df-429e-9998-b6131ea7cc86\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating PowerApps Managed Environment Settings with PowerShell\nDESCRIPTION: PowerShell commands to modify governance configuration settings in a managed PowerApps environment. Updates the bot sharing mode limit and saves the configuration changes using administrative commands.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-sharing-limits.md#2025-04-20_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n# Update the Managed Environment settings\n$governanceConfiguration = $environment.Internal.properties.governanceConfiguration\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'bot-limitSharingMode' -Value \"noLimit\" -Force\n\n# Save the updated Managed Environment settings\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <EnvironmentId> -UpdatedGovernanceConfiguration $governanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Update Policy Template via SDK for .NET\nDESCRIPTION: This snippet shows how to update a Policy Template record using the SDK for .NET. It utilizes the Update records operation. See the documentation for details on updating specific entity attributes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n\"Update records\"\n```\n\n----------------------------------------\n\nTITLE: Resource Types Table in Markdown\nDESCRIPTION: Markdown table listing Power Apps resources that contain personal data and their purposes\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-dsr-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nResources containing personal data |    Purpose\n--- | ---\nEnvironment |    An environment is a space to store, manage, and share your organization's business data, apps, and flows.\nEnvironment permissions    | Users are assigned to environments roles to be granted maker and administrative privileges within an environment.\nCanvas app / Custom page   | Cross-platform business apps that can be built from a power of a blank canvas and connected to over 200 data sources.\nCanvas-app permissions    | Canvas apps can be shared with users within an organization.\nConnection    | Used by connectors and allow for connectivity to APIs, systems, databases, etc.\nConnection permissions    | Certain types of connections can be shared with users within an organization.\nCustom connector    | Custom connectors that a user has created to provide access to a data source not offered through one of the Power Apps standard connectors.\nCustom-connector permissions    | Custom connectors can be shared with users within an organization.\nPower Apps user and user-app settings    | Power Apps stores several user preferences and settings that are used to deliver the Power Apps runtime and portal experiences.\nPower Apps notifications    | Power Apps sends several types of notifications to users including when an app is shared with them and when a Dataverse export operation has completed.\nGateway    | Gateways are on-premises data gateways that can be installed by a user to transfer data quickly and securely between Power Apps and a data source that isn't in the cloud.\nGateway permissions    | Gateways can be shared with users within an organization.\nModel-driven apps and model-driven app permissions    | Model-driven app design is a component-focused approach to app development. Model-driven apps and their user access permissions are stored as data within the Dataverse database.\n```\n\n----------------------------------------\n\nTITLE: Single Column Validation Examples\nDESCRIPTION: Examples showing validation of single percentage values against the Scores data source constraints.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-validate.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**Validate( Scores, Percentage, 10 )**\n**Validate( Scores, Percentage, 120 )**\n```\n\n----------------------------------------\n\nTITLE: Generating Root CA and SNC Certificates\nDESCRIPTION: OpenSSL commands to generate Root CA and SNC certificates for secure communications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/secure-network-communications.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nopenssl genpkey -algorithm RSA -out rootCA/ca.key.pem -pkeyopt rsa_keygen_bits:2048\nopenssl req -x509 -new -key rootCA/ca.key.pem -days 7305 -sha256 -extensions v3_ca -out rootCA/ca.cert.pem -subj \"/O=Contoso/CN=Root CA\"\n\nopenssl genrsa -out sncCert/snc.key.pem 2048\nopenssl req -key sncCert/snc.key.pem -new -sha256 -out sncCert/snc.csr.pem -subj \"/O=Contoso/CN=SNC\"\n```\n\n----------------------------------------\n\nTITLE: Soft Delete Users in Power Platform Admin Center\nDESCRIPTION: Process for soft deleting users from a specific Power Platform environment using the admin center interface\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/delete-users.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to the Power Platform admin center\n2. Select Environments\n3. Choose a specific environment\n4. Navigate to Settings > Users + permissions > Users\n5. Select Manage users in Dynamics 365\n6. Choose Disabled users view\n7. Select user to delete\n```\n\n----------------------------------------\n\nTITLE: Using pac copilot publish command\nDESCRIPTION: Publishes a custom copilot to make it available for use. Requires the copilot ID or schema name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\npac copilot publish --bot \"myCopilotName\"\n```\n\n----------------------------------------\n\nTITLE: Setting SharePoint Host Name\nDESCRIPTION: Defines the SharePoint host name variable which must match the complete host name from the site collection URL. This value is case sensitive and derived from the site collection URL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$HostName = \"SharePoint.contoso.com\"  \n```\n\n----------------------------------------\n\nTITLE: Using pac power-fx run Command\nDESCRIPTION: This command runs a file of Power Fx instructions. It requires a file parameter and includes optional parameters for echoing commands and specifying the target environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/power-fx.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npac power-fx run --file <path> --echo --environment <Guid or URL>\n```\n\n----------------------------------------\n\nTITLE: Joining Tables in SQL\nDESCRIPTION: This SQL query joins the Orders and Customers tables using an INNER JOIN. It selects specific columns from both tables based on matching CustomerID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/pn-sql.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;\n```\n\n----------------------------------------\n\nTITLE: Running Maker Assessment Starter Data Flow\nDESCRIPTION: This snippet describes how to run the 'Add Maker Assessment Starter Data' flow. Running this flow populates the Maker Assessment apps with starter data, including categories, questions, and answers. This allows users to begin using the assessment apps with pre-configured data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-nurture-components.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"1. Add Maker Assessment Starter Data\n\n1. Run the **Add Maker Assessment Starter Data** flow once to add starter data for the Maker Assessment apps: categories, questions, and answers.\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Error Report (Source Admin)\nDESCRIPTION: Script to download the error report if there are issues with the user mapping file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module Az.Storage \n# Define the SAS URI of the blob\n$sasUri = \" Update the SAS Uri from previous step \"\n# Define the path where the blob will be downloaded\n$destinationPath = \"C:\\Downloads\\Failed\\\"\n# Split the SAS URI on the '?' character to separate the URL and the SAS token\n$url, $sasToken = $sasUri -split '\\?', 2\n$containerName = $url.Split('/')[3]\n$storageAccountName = $url.Split('/')[2].Split('.')[0]\n$storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -SasToken $sasToken\nGet-AzStorageBlobContent -Blob \"usermapping.csv\" -Container $containerName -Destination $destinationPath -Context $storageContext \n```\n\n----------------------------------------\n\nTITLE: Creating Custom Welcome Message for Default Environment - Markdown\nDESCRIPTION: This snippet demonstrates how to create a custom welcome message for the default environment in Managed Environments settings. It informs users about restrictions, sharing limitations, and provides links for additional guidance.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/managed-environment-activation.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Contoso](https://i.ibb.co/SNSTCx3/something.png)\n## Welcome to Contoso Personal Productivity Environment\n\n### Before you start, here are some considerations\n\nUse this environment if you plan to build apps that integrate with Office 365.\n\nBefore you start, be aware of these limitations:\n\n1. You can't share your apps with more than five users.\n1. The data in Dataverse is shared with everyone in the organization.\n1. You can only use Office 365 connectors.\n\nIf you're not sure you're in the right place, follow [this guidance**](#).\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_stagename in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Stage Name picklist field that denotes the current stage of the approval request, such as Code Review or Functional Validation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_stagename`\n```\n\n----------------------------------------\n\nTITLE: Output from Copilot Deployment Status Command\nDESCRIPTION: This text snippet represents the expected output format when querying for the copilot deployment status using the provided command. It shows the user connection status and details of the newly provisioned bot.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-status-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nConnected as user@contoso.org\nConnected to... Contoso Organization\nVirtual Agent New Bot German with ID 9ee3f7aa-ab79-4cf6-a726-d85c8c18cc3e has been provisioned.\n```\n\n----------------------------------------\n\nTITLE: Selecting Environment by GUID in PowerShell\nDESCRIPTION: Shows how to select a Dynamics 365 environment using its unique environment identifier (GUID) with the pac env select command\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-select-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac env select --environment 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for clone-solution Action in Markdown\nDESCRIPTION: This snippet defines the parameters for the clone-solution action, which clones a solution for a given environment. It includes details on required and optional parameters such as environment URL, authentication credentials, and solution file information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-github-available-actions.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter    | Description       |\n|---------------|-------------------|\n| environment-url| (Required) The URL for the  environment that you want to clone the solution from (for example, `https://YourOrg.crm.dynamics.com`).|\n|user-name|(Required) If you're using username/password authentication, the username of the account you're using to connect with.|\n| password-secret | (Required) If you're using username/password authentication, the password for the account you're using to connect with. |\n| solution-file        | (Required) The path and name of the solution file you want to import.   |\n|app-id| The application ID to authenticate with. This parameter is **required** when authenticating with Service Principal credentials.|\n|client-secret| The client secret used to authenticate the GitHub pipeline. This parameter is **required** when authenticating with Service Principal credentials.|\n|tenant-id| The tenant ID when authenticating with `app-id` and `client-secret`.|\n|solution-name | (Required) The path and name of the solution.zip file needed to clone (for example, out/CI/ALMLab.zip).|\n|solution-version | Version of the solution to clone.|\n|target-folder | Target folder to place the extracted solution into. (for example, Git repository\\target-solution-folder). |\n|Working-directory | Temporary folder for work in progress artifacts needed for cloning the solution. <br/> default: `root of the repository`|\n```\n\n----------------------------------------\n\nTITLE: Email Service Notification Configuration Table\nDESCRIPTION: Table showing the mapping between Microsoft services and their corresponding notification email addresses for ad-hoc communications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/notifications-explained.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Service | Email address that notifications are sent from |\n|------|------|\n| Microsoft Dynamics 365 apps | `msdynamics365@microsoft.com` |\n| Microsoft Dynamics 365 finance and operations apps | `msdyn365finops@microsoft.com` |\n| Microsoft Power Platform | `mspowerplatform@microsoft.com` |\n```\n\n----------------------------------------\n\nTITLE: Defining Trace Parent Header in JSON\nDESCRIPTION: Example of a trace-parent header structure in JSON format, showing the trace-id, span-id, and trace-flags.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/distributed-tracing-details.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trace-parent\": \"00-11111111111111111111111111111111-2222222222222222-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dataverse Plug-in Execution Logs\nDESCRIPTION: This Kusto query fetches the most recent 100 plug-in execution logs from the dependencies table in Application Insights.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-dataverse.md#2025-04-20_snippet_1\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where type == \"Plugin\"\n| take 100\n```\n\n----------------------------------------\n\nTITLE: Using PowerShell to Enable Disabled Users in Power Platform Environment\nDESCRIPTION: This PowerShell cmdlet allows administrators to 'force sync' disabled users to enable them in a Power Platform environment. It's one of the mitigation steps for allowing disabled users to use per app plans.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/about-powerapps-perapp.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-AdminPowerAppsSyncUser\n```\n\n----------------------------------------\n\nTITLE: Converting Single Column Tables to Boolean Values in Power Fx\nDESCRIPTION: Examples of using the Boolean function with single-column tables, converting strings and numbers to Boolean values across multiple records.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-boolean.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Fx\nCODE:\n```\nBoolean( [ \"true\", \"false\", Blank() ] )\nBoolean( [ \"true\", \"falsified\" ] )\nBoolean( [ 1, 2, 0 ] )\n```\n\n----------------------------------------\n\nTITLE: Authenticating for Catalog Operations using PAC CLI\nDESCRIPTION: Command to create an authentication profile for performing catalog-related operations using the Power Platform CLI (PAC). Required for accessing catalog functionalities programmatically.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/overview.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npac auth create\n```\n\n----------------------------------------\n\nTITLE: Storage Extension Request Info Block\nDESCRIPTION: Markdown note block containing information about requesting storage capacity extensions for Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/whats-new-storage.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!Note]\n> - Be sure to select the correct tenant to extend the storage capacity for 30 days. \n> - You can extend capacity on your account a maximum of three times.\n```\n\n----------------------------------------\n\nTITLE: Referencing Control Properties with Self and Parent Operators\nDESCRIPTION: This section outlines the different ways to reference properties of controls in Power Apps, emphasizing the usage of Self and Parent operators for easier relative referencing.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Defining an Enterprise Policy in Azure\nDESCRIPTION: This JSON template is used to create an Enterprise Policy for Microsoft Power Platform, defining encryption keys and related parameters. Required dependencies include an active Azure subscription and an Azure Key Vault with necessary keys configured. Key parameters include 'EnterprisePolicyName', 'location', 'keyVaultId', and 'keyName'. The template sets an encryption state and requires adhering to the Azure resource naming conventions and locations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/customer-managed-key.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {},\n    \"resources\": [\n        {\n            \"type\": \"Microsoft.PowerPlatform/enterprisePolicies\",\n            \"apiVersion\": \"2020-10-30\",\n            \"name\": {EnterprisePolicyName},\n            \"location\": {location where EnterprisePolicy needs to be created},\n            \"kind\": \"Encryption\",\n            \"identity\": {\n                \"type\": \"SystemAssigned\"\n            },\n            \"properties\": {\n                \"lockbox\": null,\n                \"encryption\": {\n                    \"state\": \"Enabled\",\n                    \"keyVault\": {\n                        \"id\": {keyVaultId},\n                        \"key\": {\n                            \"name\": {keyName}\n                        }\n                    }\n                },\n                \"networkInjection\": null\n            }\n        }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mobile Client Configuration for US Government Cloud\nDESCRIPTION: Step-by-step configuration process for signing into Power Apps mobile client in US Government cloud environments\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-us-government.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. On the sign-in page, select the gear icon in the lower-right corner.\n2. Select **Region** settings.\n3. Select one of the following:\n   - **GCC: US Government GCC**\n   - **GCC High: US Government GCC High**\n   - **DoD:  US Government DOD**\n4. Select **OK**.\n5. On the sign-in page, select **Sign in**.\n```\n\n----------------------------------------\n\nTITLE: Requesting Environment Migration to Japan Datacenter\nDESCRIPTION: Steps to submit a technical support request for migrating an environment to the Japan datacenter through the Microsoft 365 Admin Center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/about-microsoft-cloud-japan.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  Sign in to [https://admin.microsoft.com](https://admin.microsoft.com).  \n\n2.  Go to **Support** > **Service Requests** > **+**  \n\n3.  Choose **More** > **Dynamics 365 Online**  \n\n4.  For **Feature**, select **Data Management**. For **Symptom**, select **Data Center migration request**.  \n\n5.  Fill in the rest of the information to submit a service request.\n```\n\n----------------------------------------\n\nTITLE: Displaying Image in Markdown\nDESCRIPTION: This snippet shows how to display an image in Markdown format, referencing the CoE Starter Kit Setup Wizard.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-orphan-components.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::image type=\"content\" source=\"media/setupwizard-orph.png\" alt-text=\"CoE Starter Kit Setup Wizard\":::\n```\n\n----------------------------------------\n\nTITLE: Cloning a Power Platform Solution using CLI\nDESCRIPTION: The 'pac solution clone' command exports a solution as a Visual Studio-like project with a .cdsproj file. It allows adding new components and building the project to create a solution zip file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npac solution clone\n```\n\n----------------------------------------\n\nTITLE: Character Map - Outer Gallery Items Property\nDESCRIPTION: This snippet initializes the Items property for the outer horizontal gallery in the character map example. It uses the Sequence function to generate a sequence of numbers, starting from 0, incrementing by 16, and creating 8 columns. The result is assigned to 'HighNibble' for use in the nested gallery.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-char.md#2025-04-20_snippet_4\n\nLANGUAGE: Power Fx\nCODE:\n```\n\"`Sequence( 8, 0, 16 ) As HighNibble`\"\n```\n\n----------------------------------------\n\nTITLE: Submitting Migration Request (Source Admin)\nDESCRIPTION: Command for the source tenant admin to initiate a tenant-to-tenant migration request.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nTenantToTenant-SubmitMigrationRequest –EnvironmentName {EnvironmentId} -TargetTenantID {TenantID}\n```\n\n----------------------------------------\n\nTITLE: Creating Welcome Content with Markdown\nDESCRIPTION: Example of how to structure welcome content using Markdown formatting, including headers, lists, and links to resources.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/welcome-content.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Contoso](https://i.ibb.co/SNSTCx3/something.png)\n## Welcome to Contoso Power Apps\n### Let's get started with data\nBefore you start using Power Apps, please refer to our company guidance\n1. **Get trained:** [Learning Videos]() and [training guides]()\n2. **Contribute ideas:** Submit an idea for a new app or flow idea at [Suggestion box]()\n3. **Learn from others:** [Top tips]() by expert makers at Contoso\n```\n\n----------------------------------------\n\nTITLE: Turning on Pulse Feedback Flows\nDESCRIPTION: This snippet provides instructions to enable flows related to the Pulse feedback survey components. Turning on these flows is essential for collecting user feedback related to the CoE and the Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-nurture-components.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"- Pulse [Child] - post adaptive cards to maker\n- Pulse - Survey Makers for CoE feedback\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Document Management Permissions Table in Markdown\nDESCRIPTION: This markdown table shows the minimum security roles or other permissions required for different document management tasks with SharePoint integration in Microsoft Power Platform. It covers tasks like enabling document management, creating site records, and managing documents.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/permissions-required-document-management-tasks.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                        Tasks related to document management                         |                                                                                                                          Minimum security role or other permission required                                                                                                                          |\n|-------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|                        Enable or disable document management                        |         Security roles:  System Administrator or System Customizer<br /><br /> Privileges:  Read, Write on all record types that are customizable.<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] site permissions: Create, Read, Write, Append, Append To          |\n|                             Create or edit site records                             |                                               Security roles:  System Administrator or System Customizer<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] site permissions: Site Create, Read, Write, Append, Append To                                               |\n|                      Create or edit document location records                       | Security roles:  Salesperson<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] site permissions: Read, Append To<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] Document Location permissions: Create, Read, Write, Append, Append To |\n|              Run the Enable Server-based SharePoint Integration Wizard              |          Security roles:  System Administrator<br /><br /> Privileges: All other security roles will require the Run SharePoint Integration Wizard permission to run the Enable Server-based SharePoint Integration Wizard.           |\n|                            Make a site your default site                            |                                                               Security roles: System Administrator or System Customizer<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] site permissions: Read, Write                                                                |\n|                                   Validate sites                                    |                                                               Security roles:  System Administrator or System Customizer<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] site permissions: Read, Write                                                               |\n|                    Add or edit a document location from a record                    |     Security roles: Any<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] site permissions: Read, Append To<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] Document Location permissions: Create, Read, Write, Append, Append To      |\n|                                Fix a broken location                                |                                                                           Security roles:  Any<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] Document Location permissions: Read, Write                                                                            |\n|                                  Manage documents                                   |                                                                           Security roles:  Any<br /><br /> [!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] Document Location permissions: Read, Write                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Defining CreatedOn Attributes in Power Platform\nDESCRIPTION: This snippet defines the CreatedOn attribute, recording the creation timestamp of the record in the user’s local time zone. The information is crucial for maintaining records of when data entries were created.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_staticanalysispolicy.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Date and time when the record was created.**|\n|DisplayName|**Created On**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`createdon`|\n|RequiredLevel|None|\n|Type|DateTime|\n|CanChangeDateTimeBehavior|False|\n|DateTimeBehavior|UserLocal|\n|Format|DateAndTime|\n|ImeMode|Inactive|\n|SourceTypeMask|0|\n```\n\n----------------------------------------\n\nTITLE: Field Definition: slaid in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the SLA lookup field that references the service level agreement applied to the record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n`slaid`\n```\n\n----------------------------------------\n\nTITLE: Retrieve Multiple Policy Templates via Web API\nDESCRIPTION: This snippet shows the Web API operation to retrieve multiple Policy Template (mspcat_ssPolicyTemplate) records.  It uses the GET method on the /mspcat_sspolicytemplates endpoint. See the linked documentation for details on filtering and pagination.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\n\"GET /mspcat_sspolicytemplates\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in customDeploymentConfiguration.json\nDESCRIPTION: This JSON snippet configures environmental variables for solutions imported into Dataverse environments, exemplified by `cat_TextEnvironmentVariable` among others. It's crucial to avoid storing sensitive information in these variables directly. Dependencies include the use of schema names from the solution, as shown in the image referenced in the original context. Inputs are schema names and tokenized values; outputs are configured deployment environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-data-deployment-configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"EnvironmentVariables\": [\n        {\n            \"SchemaName\": \"cat_TextEnvironmentVariable\",\n            \"Value\": \"#{variable.cat_TextEnvironmentVariable}#\"\n        },\n        {\n            \"SchemaName\": \"cat_DecimalEnvironmentVariable\",\n            \"Value\": \"#{variable.cat_DecimalEnvironmentVariable}#\"\n        },\n        {\n            \"SchemaName\": \"cat_JsonEnvironmentVariable\",\n            \"Value\": \"{\\\"name\\\":\\\"#{variable.cat_JsonEnvironmentVariable.name}#\\\"}\"\n        }\n    ]    \n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Automate Hosted Process License Scenarios Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table outlining various scenarios for the Power Automate Hosted Process license, including environment assignment, hosted machine allocation, and hosted machine group allocation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/deep-dive-on-specific-license.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Hosted Process license scenarios |Description |\n|----------|-------|\n|__Environment assignment__|To be used by a hosted machine or a hosted machine group (or by a cloud / flow a machine), a Hosted Process capacity license first needs to be assigned to the environment where the hosted machine or the hosted machine group is located. <br><br>Learn [how to allocate a Hosted Process capacity license to an environment](/power-platform/admin/capacity-add-on#allocate-or-change-capacity-in-an-environment).|\n|__Hosted machine allocation__|A hosted machine enables developers to build, test, and run automation on a constantly active (= turned-on) hosted machine. <br><br>At creation of an individual hosted machine, a Hosted RPA add-on is auto-allocated to it and becomes a hosted bot. This hosted bot is pulled from the available hosted pool<sup>1</sup> and is automatically released back to the pool at manual deletion of the hosted machine.|\n|__Hosted machine group allocation__|A hosted machine group enables developers to run automation on an auto-scaling group of hosted machines. It's continuously adjusting the number of hosted machines turned-on to the desktop flow workload. <br><br>One hosted bot is automatically pulled from the available hosted pool<sup>1</sup> and temporarily allocated to the hosted machine group when it scales up: any new hosted machine turned-on in the group consumes one extra hosted bot. The hosted bot is automatically released to the available hosted pool<sup>1</sup>by the hosted machine group when it scales down (= when one of its hosted machines is turned-off). <br><br>A hosted machine group has two scaling settings: <br>- Max bots: the maximum number of hosted bots it can auto-allocate itself to turn-on hosted machines. <br>- Committed bots: the guaranteed number of hosted bots it can immediately auto-allocate itself when required.<br><br>The key benefits of hosted machine groups are: <br>- Auto-scalability delivering high processing parallelization and reacting to demand spikes <br> - [Load balancing](/power-automate/desktop-flows/hosted-machine-groups#load-balance-hosted-machine-group)<sup>2</sup> across multiple hosted machine groups, which optimizes the hosted bot utilization rate.<br><br> Any cloud flow targeting a hosted machine or hosted machine group in unattended mode is automatically covered by the machines' hosted bot and considered to be a 'process flow' (with the flow association capability) and is entitled to a 250k daily Power Platform Request (non-stackable limit). Those cloud flows have their plan automatically switch to \"Process plan inherited from machine\"<sup>3</sup>.<br><br>|\n|__Hosted Process usage as a Process license__<sup>4</sup>|The Power Automate Hosted Process is a superset of the Power Automate Process, which means it can provide the same entitlements as the Process license and act as one. <br><br>When all Process licenses in an environment are already allocated to machines and cloud flows (or when there's no Process license assigned to the environment), the Hosted Process licenses are used instead of the Process license at any new allocation to machines / cloud flows IF the setting \"Allow hosted capacity to be used as Process capacity\" (in Admin Center) was enabled by the environment admin.|\n|__Utilization management__|You can visualize and manage all Hosted Process licenses allocated to hosted machines and hosted machine groups within an environment using the [Hosted Process capacity utilization](/power-automate/desktop-flows/capacity-utilization-hosted) page.|\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Cryptographic Library for SNC Communication\nDESCRIPTION: Content of the sapcrypto.ini file required to enable Kerberos in client role for the SAP Cryptographic Library. This configuration is necessary for SNC communication between the on-premises data gateway and the SAP system.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-kerberos.md#2025-04-20_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nccl/snc/enable_kerberos_in_client_role = 1\n```\n\n----------------------------------------\n\nTITLE: Support Response Time Table in Markdown\nDESCRIPTION: Markdown table showing initial response times based on severity levels and support plans for Microsoft Power Platform support requests.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/support-overview.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Severity level  |Customer's situation  |Initial Response Time  |\n|---------|---------|----------|\n|**Critical**     | **Critical business impact** <br /> Customer's business has significant loss or degradation of services and requires immediate attention.   | Unified Core/Advanced: < 1 hour, around the clock <br /> Unified Performance: < 30 minutes, around the clock    |\n|**Severity A**    | **Critical business impact** <br /> Customer's business has significant loss or degradation of services and requires immediate attention.        |     Subscription: < 1 hour, around the clock <br />ProDirect: < 1 hour, around the clock <br /> Premier: < 1 hour, around the clock   |\n|**Severity B**    | **Moderate business impact** <br /> Customer's business has moderate loss or degradation of services, but work can reasonably continue in an impaired manner.  |Subscription: < 4 hours <br />ProDirect: < 2 hours <br />Premier: < 2 hours, around the clock   |\n|**Standard**     | **Standard business impact** <br /> Customer's business has moderate loss or degradation of services, but work can reasonably continue in an impaired manner. | Unified Core: < 8 hours, around the clock <br />Unified Advanced/Performance: < 4 hours, around the clock    |\n|**Severity C**     | **Minimum business impact** <br />Customer's business is functioning with minor impediments of services.      | Subscription: < 8 hours <br /> ProDirect: < 4 hours <br />Premier: < 4 hours    |\n```\n\n----------------------------------------\n\nTITLE: Removing and Reassigning Power Automate Licenses Using Azure AD PowerShell\nDESCRIPTION: PowerShell script that removes direct license assignments and adds users to licensed groups in Azure AD. The script handles Power Automate per user and attended RPA licenses by getting the SKU ID, creating assigned license objects, and managing group memberships.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/power-automate-auto-claim.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Power Automate per user (legacy) = \"FLOW_PER_USER\"\n$SkuPartName = \"POWER_AUTOMATE_ATTENDED_RPA\"\n\n#Get the SkuID of the license that needs to be unassigned from the user\n$LicenseSku = Get-AzureADSubscribedSku | Where-Object {$_.SkuPartNumber -eq $SkuPartName}\n\n#Create the AssignedLicenses Object, used for removing direct license assignment from the user\n$LicensesToRemove = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses\n$LicensesToRemove.RemoveLicenses = $LicenseSku.SkuId\n\n#Remove directly assigned license from the user\n#Note that this command will result in an error if the user does not have the relevant license assigned directly\nSet-AzureADUserLicense -ObjectId $LicensedUser.ObjectId -AssignedLicenses $LicensesToRemove\n\n#Add user to a licensed group\nAdd-AzureADGroupMember -ObjectId $LicensedGroup.ObjectId -RefObjectId $LicensedUser.ObjectId\n```\n\n----------------------------------------\n\nTITLE: Subject Property Definition in Power Platform\nDESCRIPTION: Definition of the Subject property which specifies the subject text of an activity. This String field is application-required with a maximum length of 400 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Subject associated with the activity.**|\n|DisplayName|**Subject**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`subject`|\n|RequiredLevel|ApplicationRequired|\n|Type|String|\n|Format|Text|\n|FormatName|Text|\n|ImeMode|Auto|\n|IsLocalizable|False|\n|MaxLength|400|\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Power Apps\nDESCRIPTION: This Power Fx formula creates a collection named 'Customers' with sample data including customer names and companies. It utilizes the ClearCollect and Table functions to define and populate the collection which is then used as the data source for filtering examples.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-startswith.md#2025-04-20_snippet_2\n\nLANGUAGE: powerfx\nCODE:\n```\nClearCollect( Customers, Table( { Name: \"Fred Garcia\", Company: \"Northwind Traders\" }, { Name: \"Cole Miller\", Company: \"Contoso\" }, { Name: \"Glenda Johnson\", Company: \"Contoso\" }, { Name: \"Mike Collins\", Company: \"Adventure Works\" }, { Name: \"Colleen Jones\", Company: \"Adventure Works\" } ) )\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Data Location for Microsoft Teams\nDESCRIPTION: This PowerShell script configures the environment data location settings for Microsoft Teams in a Power Platform setup. It requires permissions to access tenant settings. The main parameter, 'disablePreferredDataLocationForTeamsEnvironment', toggles whether Teams respects the preferred environment location setting.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environments-overview.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$settings = Get-TenantSettings \n$settings.powerPlatform.environments.disablePreferredDataLocationForTeamsEnvironment = $true\nSet-TenantSettings -RequestBody $settings\n```\n\n----------------------------------------\n\nTITLE: Displaying Flow Owner Role Details\nDESCRIPTION: This command retrieves details about the owner of a specific flow in a specified environment. It is crucial for understanding the flow ownership and permissions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_29\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdminFlowOwnerRole –EnvironmentName 'EnvironmentName' –FlowName 'FlowName'\n```\n\n----------------------------------------\n\nTITLE: Command Line Recording Setup with termtosvg\nDESCRIPTION: Demonstrates the process of recording terminal sessions and generating SVG animations\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/documentation.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install --user termtosvg\ntermtosvg record test.cast\n./term-trim.ps1 -Input test.cast -Output test2.cast -Trim 1\ntermtosvg render test2.cast test.svg -t window_frame\n```\n\n----------------------------------------\n\nTITLE: Submitting Catalog Item - JSON Structure\nDESCRIPTION: This JSON structure defines the essential properties needed for submitting an item to the catalog in Power Platform. It includes fields such as modelVersion, operation, sourcePortal, and details related to publisher and catalog item definition.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/submission-reference.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modelVersion\": \"1.0.0.0\",\n  \"operation\": \"CreateOrUpdate\",\n  \"sourcePortal\": 526430005,\n  \"businessJustification\": \"Power Platform custom connector for Conference API\",\n  \"publisherDetails\": {\n    \"publisherId\": \"ContosoConferencesTeam\",\n    \"publisherDisplayName\": \"Catalog Conferences Team\"\n  },\n  \"catalogItemDefinition\": {\n    \"id\": \"ContosoConferencesCustomConnector\",\n    \"displayName\": \"Contoso Conference Custom Connector\",\n    \"description\": \"Demo Custom connector to query Conference Speakers & Sessions\",\n    \"offer\": {\n      \"type\": \"Component_Collection\",\n      \"deploymentType\": \"Normal\",\n      \"engineeringName\": {\n        \"firstName\": \"Jennifer\",\n        \"lastName\": \"Wilkins\",\n        \"email\": \"jwilkins@contoso.com\",\n        \"phoneNumber\": \"555-111-1234\"\n      },\n      \"supportName\": {\n        \"firstName\": \"Aidan\",\n        \"lastName\": \"Hunt\",\n        \"email\": \"ahunt@contoso.com\",\n        \"phoneNumber\": \"555-111-1234\"\n      }\n    },\n      \"packageFile\": {\n         \"name\": \"packageFileName.zip\",\n         \"filesaslink\": \"https://Contoso.blob.core.windows.net/ContosoConferencesCustomConnector/packageFileName.zip\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Labels for ALM Accelerator\nDESCRIPTION: Configuration of user-facing labels for different actions in the ALM Accelerator app, controlling the text displayed for solution deployment, commit, import, and delete operations\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/new-maker-experience.md#2025-04-20_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\n{\n  \"User Labels\": {\n    \"Deploy Solution\": \"DEPLOY SOLUTION\",\n    \"Commit Solution\": \"SAVE SOLUTION\",\n    \"Import Solution\": \"Hidden\",\n    \"Delete Solution\": \"Hidden\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mailbox Configuration Fields Table in Markdown\nDESCRIPTION: A markdown table detailing the configuration fields and descriptions for mailbox settings in Microsoft Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-forward-mailboxes-edit-mailboxes.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                    Fields                     |                                                                                                                                                                                                                                                                                                  Description                                                                                                                                                                                                                                                                                                  |\n|-----------------------------------------------||\n|                  **General**                  ||\n|                     Name                      |                                                                                                                                                                                                                                                                                    Type a meaningful name for the mailbox.                                                                                                                                                                                                                                                                                    |\n|                     Owner                     |                                                                                                                                                                               Shows the owner of the mailbox. For a user mailbox that is automatically populated, the owner of the mailbox is the user itself. For a queue mailbox that is automatically populated, the owner of the mailbox is the owner of the queue record.                                                                                                                                                                                |\n|                 Email address                 |                                                                                                                                  Type the email address for the forward mailbox, such as forwardmailbox@contoso.com.<br /><br /> For a user or a queue mailbox, the email address is the same as that specified in the corresponding user or queue record form. If you edit the email address here, the email address in the user or queue record is updated automatically.                                                                                                                                   |\n|        Delete Emails After Processing         |                                                                                                                                                                                                                   Specify if you want to delete email from the mailbox after processing. This field is available and can be set to **Yes** only for a forward mailbox and a queue mailbox.                                                                                                                                                                                                                    |\n|                   Regarding                   |                                                                                                                                                                                                                                          Select the user or queue that the mailbox is associated with. This field is empty and cannot be set for a forward mailbox.                                                                                                                                                                                                                                           |\n|              Is Forward Mailbox               |                                                                                                                                                                                  This field indicates whether the mailbox record is a forward mailbox. When set to **No**, it indicates that the mailbox record is associated to an individual user or queue in customer engagement apps.                                                                                                                                                                                  |\n|                **Credentials**                ||\n| Allow to Use Credentials for Email Processing |      Select **Yes** if the email server profile associated to this mailbox has **Authenticate Using** set to **Credentials Specified by a User or Queue**. You must provide the username and password when this field is set to **Yes**. These credentials will be used to send and receive email from the mailbox on the email server. **Note:**  To ensure the credentials are secured in customer engagement apps, SQL encryption is used to encrypt the credentials stored in the mailbox if you're processing email by using server-side synchronization.       |\n```\n\n----------------------------------------\n\nTITLE: Merging Form Customizations in XML\nDESCRIPTION: When packaging a managed solution, form definitions in FormXML are compared to the original, and only differences are included. During installation, these differences are merged with existing FormXML to create a new form definition.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/how-managed-solutions-merged.md#2025-04-20_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nFormXML\n```\n\n----------------------------------------\n\nTITLE: Ensuring CoE CLI Installation (cmd)\nDESCRIPTION: This command is a final check to confirm that the CoE CLI has been installed successfully. It outputs help information from the CLI, indicating that it is ready to use.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/non-administrator-local-install.md#2025-04-20_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\ncoe help\n```\n\n----------------------------------------\n\nTITLE: Quarantining a Power Apps Application using PowerShell\nDESCRIPTION: PowerShell command to set an app's state to quarantined, which prevents end users from accessing it. This is used for compliance purposes when an app requires administrative attention.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/admin-manage-apps.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AppAsQuarantined -EnvironmentName <EnvironmentName> -AppName <AppName>\n```\n\n----------------------------------------\n\nTITLE: Managing Connector Role Assignments in Power Apps - PowerShell\nDESCRIPTION: This PowerShell snippet adds a user account and removes all connector role assignments for the calling user. Ensure the PowerShell environment is set up with necessary permissions to execute admin functions in Power Apps. The script lists and deletes any connector role assignments for shared custom connectors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n\n#Retrieves all connector role assignments for the calling users and deletes them\nGet-AdminPowerAppConnectorRoleAssignment | Remove-AdminPowerAppConnectorRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressRoute Routing for Power Platform\nDESCRIPTION: Overview of network routing configuration requirements for routing Power Platform server and client traffic through ExpressRoute circuits, focusing on BGP connection and IP prefix advertisement strategies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/expressroute/setup.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example ExpressRoute Configuration Metadata\nms.component: pa-admin\nms.topic: best-practice\nms.date: 04/17/2025\nms.subservice: architecture-center\n```\n\n----------------------------------------\n\nTITLE: Field Definition: overriddencreatedon in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Record Created On datetime field that indicates when the record was migrated.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n`overriddencreatedon`\n```\n\n----------------------------------------\n\nTITLE: Enabling Advanced Query in Power Apps Admin Center\nDESCRIPTION: Configuration procedure for activating advanced query and filtering features in Power Platform, providing Excel-like data transformation capabilities\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/data-integrator.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### How to enable advanced query and filtering\n```\n\n----------------------------------------\n\nTITLE: Handling Offline Operations in JavaScript for Microsoft Power Platform\nDESCRIPTION: Demonstrates the deprecated Xrm.Mobile.offline methods and their replacement under Xrm.WebApi.offline. This change moves offline-related methods to a more appropriate namespace.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nXrm.Mobile.offline\n\n// Replacement\nXrm.WebApi.offline\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Reference for Virtual Network Setup\nDESCRIPTION: The documentation references several PowerShell scripts for setting up enterprise policies and virtual network configuration, stored in the Microsoft PowerApps-Samples GitHub repository.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/vnet-support-setup-configure.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# Referenced PowerShell scripts:\n# - Enterprise policies setup\n# - Subnet injection validation\n# - Virtual network configuration\n# Available at: https://github.com/microsoft/PowerApps-Samples/tree/master/powershell/enterprisePolicies\n```\n\n----------------------------------------\n\nTITLE: Preview Feature Configuration Steps for Power Platform Admin Center\nDESCRIPTION: Markdown steps detailing how to enable preview features through the Power Platform admin center interface. Includes prerequisites and navigation instructions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/what-are-preview-features-how-do-i-enable-them.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Make sure you have the System Administrator security role or equivalent permissions.\n2. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/)\n3. Select **Environments** in the left navigation pane, select your environment, and then select **Settings** on the top menu bar.\n4. Under **Product**, select **Features** and then select **On** for the feature to enable. Preview features will be labeled as \"preview\".\n5. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Comment Block\nDESCRIPTION: HTML comment block containing instructions for adding remarks to a documentation file\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/telemetry-enable-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Example Response Data - Power Platform API JSON\nDESCRIPTION: This JSON snippet provides an example response from the Power Platform API when listing tenant settings. The response includes various boolean flags representing different settings and some nested objects for further configuration details. The JSON structure is based on a successful 200 OK response.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/list-tenantsettings.md#2025-04-20_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"walkMeOptOut\": false,\n    \"disableNPSCommentsReachout\": false,\n    \"disableNewsletterSendout\": false,\n    \"disableEnvironmentCreationByNonAdminUsers\": false,\n    \"disablePortalsCreationByNonAdminUsers\": false,\n    \"disableSurveyFeedback\": false,\n    \"disableTrialEnvironmentCreationByNonAdminUsers\": false,\n    \"disableCapacityAllocationByEnvironmentAdmins\": false,\n    \"disableSupportTicketsVisibleByAllUsers\": false,\n    \"powerPlatform\": {\n        \"search\": {\n            \"disableDocsSearch\": false,\n            \"disableCommunitySearch\": false,\n            \"disableBingVideoSearch\": false\n        },\n        \"teamsIntegration\": {\n            \"shareWithColleaguesUserLimit\": 10000\n        },\n        \"powerApps\": {\n            \"disableShareWithEveryone\": true,\n            \"enableGuestsToMake\": false\n        },\n        \"modelExperimentation\": {\n            \"enableModelDataSharing\": false,\n            \"disableDataLogging\": false\n        },\n        \"catalogSettings\": {\n            \"powerCatalogAudienceSetting\": All\n        }   \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Solution Checker Warn Mode via PowerShell\nDESCRIPTION: PowerShell command to enable solution checker enforcement in warn mode for a specific environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-solution-checker.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSetManagedEnvironmentSolutionCheckerEnforcementLevel -EnvironmentId 8d996ece-8558-4c4e-b459-a51b3beafdb4 -Level warn\n```\n\n----------------------------------------\n\nTITLE: Querying Screen Background Color - Power Platform - Formula\nDESCRIPTION: Returns the background color of the currently displayed screen to enhance user interface design.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n**App.ActiveScreen.Fill**\n```\n\n----------------------------------------\n\nTITLE: Deploying Package using Power Platform CLI\nDESCRIPTION: This command is used to deploy a package to a Dataverse instance using the pac CLI. Prior setup of an authentication profile and organization selection is required to successfully execute this command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n> pac package deploy --package .\\bin\\Debug\\DeploymentPackage.1.0.0.pdpkg.zip\n```\n\n----------------------------------------\n\nTITLE: Adding Remarks in HTML Comments for Microsoft Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for adding remarks to the documentation. It instructs the user to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-set-runtime-state-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Changing Import Package Name in C#\nDESCRIPTION: This method allows you to change the name of the package that appears on the package selection page in the Dynamics 365 Package Deployer wizard. It accepts a boolean indicating whether the name should be plural.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic override string GetNameOfImport(bool plural)  \n{  \nreturn \"Package Short Name\";  \n}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Account Numbers\nDESCRIPTION: A pattern that identifies account numbers starting with letters S, T, F, G, or M followed by four digits. This can be used to mask sensitive account identifiers.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-manage-masking-rules.md#2025-04-20_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n[STFGM]\\d{4}\n```\n\n----------------------------------------\n\nTITLE: Selective Environment Inventory Setup\nDESCRIPTION: Configuration steps for monitoring and managing a subset of environments using the CoE Starter Kit, with environment variable manipulation\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/faq.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EnvironmentVariable -Name \"is All Environments Inventory\" -Value \"No\"\n```\n\n----------------------------------------\n\nTITLE: Implementing release-action-call.yml workflow for GitHub Actions with Power Platform\nDESCRIPTION: This code represents a GitHub Actions workflow file that needs to be configured with environment URLs and Azure AD credentials to deploy Power Platform solutions. The workflow is triggered on release events and uses reusable workflows to automate the deployment process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/tutorials/github-actions-deploy.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# Referenced from release-action-call.yml\n<BUILD_ENVIRONMENT>\n<PROD_ENVIRONMENT>\n<APP_ID>\n<TENANT_ID>\n```\n\n----------------------------------------\n\nTITLE: SLA Values Table in Markdown\nDESCRIPTION: Markdown table showing common SLA values and their corresponding downtime periods across different time intervals (week, month, year).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/reliability/metrics.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| SLA     | Downtime per week     | Downtime per month     | Downtime per year     |\n|---------|-----------------------|------------------------|-----------------------|\n| 99%     | 1.68 hours            | 7.2 hours              | 3.65 days             |\n| 99.9%   | 10.1 minutes          | 43.2 minutes           | 8.76 hours            |\n| 99.95%  | 5 minutes             | 21.6 minutes           | 4.38 hours            |\n| 99.99%  | 1.01 minutes          | 4.32 minutes           | 52.56 minutes         |\n| 99.999% | 6 seconds             | 25.9 seconds           | 5.26 minutes          |\n```\n\n----------------------------------------\n\nTITLE: Updating Governance Error Message Settings in Power Platform\nDESCRIPTION: This PowerShell command updates the governance error message settings for a Power Platform tenant. It enables custom error messages and contact details for governance-related issues.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_47\n\nLANGUAGE: powershell\nCODE:\n```\nSet-PowerAppDlpErrorSettings -TenantId 'TenantId' -ErrorSettings @{  \n  ErrorMessageDetails = @{ \n    enabled = $True  \n    url = \"https://contoso.org/governanceMaterial\" \n  } \n  ContactDetails= @{  \n    enabled = $True \n    email = \"admin@contoso.com\" \n  } \n} \n```\n\n----------------------------------------\n\nTITLE: Basic If Function Syntax in PowerFx\nDESCRIPTION: Syntax for the If function in PowerFx. The If function tests one or more conditions until a true result is found, then returns a corresponding value or executes an action.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-if.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerFx\nCODE:\n```\nIf( Condition, ThenResult [, DefaultResult ] )\nIf( Condition1, ThenResult1 [, Condition2, ThenResult2, ... [ , DefaultResult ] ] )\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for check-solution Action in Markdown\nDESCRIPTION: This snippet defines the parameters for the check-solution action, which checks a solution file for inconsistencies. It includes details on required and optional parameters such as environment URL, authentication credentials, and solution file path.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-github-available-actions.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter    | Description       |\n|---------------|-------------------|\n| environment-url| (Required) The URL for the  environment that you want to clone the solution from (for example, `https://YourOrg.crm.dynamics.com`).|\n|user-name|(Required) If you're using username/password authentication, the username of the account you're using to connect with.|\n| password-secret | (Required) If you're using username/password authentication, the password for the account you're using to connect with. |\n|app-id| The application ID to authenticate with. This parameter is **required** when authenticating with Service Principal credentials.|\n|client-secret| The client secret used to authenticate the GitHub pipeline. This parameter is **required** when authenticating with Service Principal credentials.|\n|tenant-id| The tenant ID when authenticating with `app-id` and `client-secret`.|\n|path| (Required) The path and name of the solution file you want to check.|\n|geo| Which geo location of the Microsoft Power Platform Checker service to use. Default value is 'united states'.|\n|rule-level-override | Path to file a containing a JSON array of rules and their levels. Accepted values are: Critical, High, Low, and Informational. Example: [{\"Id\":\"meta-remove-dup-reg\",\"OverrideLevel\":\"Medium\"},{\"Id\":\"il-avoid-specialized-update-ops\",\"OverrideLevel\":\"Medium\"}]|\n|checker-logs-artifact-name | The name of the artifact folder for which Microsoft Power Platform checker logs will be uploaded. Default value is 'CheckSolutionLogs'. |\n```\n\n----------------------------------------\n\nTITLE: Build Docker Image for CoE CLI\nDESCRIPTION: Create a new Docker image for the CoE CLI\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/upgrade.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t coe-cli\n```\n\n----------------------------------------\n\nTITLE: Power Pages CLI Command Evolution\nDESCRIPTION: Tracks the historical changes in Power Platform CLI commands for Power Pages, showing command renaming across different CLI versions\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/pages-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npac paportal [command]  # CLI version 1.27 and earlier\n```\n\nLANGUAGE: bash\nCODE:\n```\npac powerpages [command]  # CLI version 1.27 to 1.32\n```\n\nLANGUAGE: bash\nCODE:\n```\npac pages [command]  # Recommended from CLI version 1.32 onwards\n```\n\n----------------------------------------\n\nTITLE: Displaying App Quarantine Email Notification in Markdown\nDESCRIPTION: This markdown snippet shows an image of the email notification sent to app makers when their app is quarantined.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/governance-components.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![The app maker gets an email notification to inform them their app has been quarantined, and to ask them to submit compliance details in the Developer Compliance Center app.](media/quarantine4.png \"The app maker gets an email notification to inform them their app has been quarantined, and to ask them to submit compliance details in the Developer Compliance Center app.\")\n```\n\n----------------------------------------\n\nTITLE: Extracted Copilot Template Output Text\nDESCRIPTION: This text snippet shows the typical output returned by the 'pac copilot extract-template' command, which indicates successful connection, component loading, and language support. It also provides the path to the newly created template file. No modifications are required for this output, but it helps verify the success of the extraction.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-extract-template-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nConnected as user@contoso.org\n\nLoaded 34 components for bot 'New Test Copilot ' with id 9ee3f7aa-ab79-4cf6-a726-d85c8c18cc3e. Primary language: English, supported languages: German\n\nNew Test Copilot -> C:\\Users\\user\\NewTestCopilot.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Approval Rejection Applied Policy\nDESCRIPTION: This snippet demonstrates how to retrieve specific details of an approval rejection policy using a GET request in the Web API.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrejectionappliedpolicy.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n`GET` /mspcat_certificationrejectionappliedpolicies(*mspcat_certificationrejectionappliedpolicyid*)<br />See [Retrieve](/powerapps/developer/data-platform/webapi/retrieve-entity-using-web-api)\n```\n\n----------------------------------------\n\nTITLE: Listing AI Builder Models with Power Platform CLI\nDESCRIPTION: This command uses the Power Platform CLI to list all AI Builder models in a specific environment. It requires the environment ID as a parameter and returns a list of models with their IDs, states, and names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-model-list-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac copilot model list --environment 2e250e7a-5607-4fea-aa4e-1aeb7bf79118\n```\n\n----------------------------------------\n\nTITLE: Creating a Welcome Message Template for Power Platform Sandbox Environment\nDESCRIPTION: A markdown template for creating a welcome message for sandbox/test environments in Power Platform. It includes important considerations and limitations for users to be aware of when working in the test environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/managed-environment-activation.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[Contoso](https://i.ibb.co/SNSTCx3/something.png)\n## Welcome to a Test Environment\n\n### Before you start, here are some considerations\n\nUse this environment only if you're testing solutions.\n\nBefore you start, be aware of these limitations:\n\n1. You can only share resources with your team. If you need to share with more people, [submit a change request](#).\n1. You're not allowed to edit or import solutions directly in this environment.\n1. Be mindful of the test data and compliance.\n1. If you need help from a security export or IT support, [submit a request](#).\n\nIf you're not sure you're in the right place, follow [this guidance**](#).\n```\n\n----------------------------------------\n\nTITLE: Power Platform Set Connection Variables in YAML\nDESCRIPTION: Azure DevOps task for setting BuildTools connection variables to provide a single source of truth for service connection details. Supports both service principal and username/password authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_15\n\nLANGUAGE: yml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.set-connection-variables.PowerPlatformSetConnectionVariables@2\n  displayName: 'Power Platform Set Connection Variables '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: 'Dataverse service connection '\n  timeoutInMinutes: 2\n  retryCountOnTaskFailure: 5\n```\n\n----------------------------------------\n\nTITLE: CreatedOnBehalfBy Read-only Property Definition in Power Platform\nDESCRIPTION: Definition of the CreatedOnBehalfBy read-only property which identifies the delegate user who created the activity pointer. This Lookup field targets system users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Unique identifier of the delegate user who created the activitypointer.**|\n|DisplayName|**Created By (Delegate)**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`createdonbehalfby`|\n|RequiredLevel|None|\n|Type|Lookup|\n|Targets|systemuser|\n```\n\n----------------------------------------\n\nTITLE: Executing Power Platform CLI Test Command\nDESCRIPTION: Example PowerShell command showing the basic syntax for running tests using the Power Platform CLI (pac) tool.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/test-run-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac test run\n```\n\n----------------------------------------\n\nTITLE: Testing SAP Connection with PowerShell\nDESCRIPTION: PowerShell command to verify network connectivity between the Windows VM and SAP instance on port 3300.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/sap-erp-connector.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ntelnet sap.example.com 3300\n```\n\n----------------------------------------\n\nTITLE: Privacy Privileges Table in Markdown\nDESCRIPTION: A markdown table listing privacy-related privileges and their corresponding system privilege names in Power Platform\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/privacy-related-privileges.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Privacy-related privilege | Privilege name |\n|---------------------------|----------------|\n| Document Generation | prvDocumentGeneration |\n| Dynamics 365 for mobile | prvUseTabletApp |\n| Export to Excel | prvExportToExcel |\n| Go Offline in Outlook | prvGoOffline |\n| Mail Merge | prvMailMerge |\n| Print | prvPrint |\n| Sync to Outlook | prvSyncToOutlook |\n| Use Dynamics 365 App for Outlook | prvUseOfficeApps |\n```\n\n----------------------------------------\n\nTITLE: Checking Import Status of Asynchronous Solution Import in Dataverse using C#\nDESCRIPTION: This code snippet demonstrates how to check the status of an asynchronous solution import in Dataverse. It polls the asyncoperation entity until the import is finished and handles both successful and failed imports.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-async.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void CheckImportStatus(\n    IOrganizationService service,\n    Guid asyncOperationId,\n    Guid importJobKey)\n{\n    // Get solution import status\n    var finished = false;\n    Entity asyncOperation = null;\n    // Wait until the async job is finished\n    while (!finished)\n    {\n        asyncOperation = service.Retrieve(\"asyncoperation\", asyncOperationId, new ColumnSet(\"statecode\", \"statuscode\"));\n        OptionSetValue statecode = (OptionSetValue)asyncOperation[\"statecode\"];\n        if (statecode.Value == 3)\n        {\n            finished = true;\n        }\n        else\n        {\n            Thread.Sleep(10000);\n        }\n    }\n    // Solution import completed successfully\n    OptionSetValue statuscode = (OptionSetValue)asyncOperation[\"statuscode\"];\n    if (statuscode.Value == 30)\n    {\n        Console.WriteLine(\"The solution import completed successfully.\");\n    }\n    else if (asyncOperation[\"statuscode\"].ToString() == \"31\")  // Solution import failed\n    {\n        Console.WriteLine(\"The solution import failed.\");\n        var getLogReq = new RetrieveFormattedImportJobResultsRequest { ImportJobId = importJobKey };\n        var importJob = service.Execute(getLogReq) as RetrieveFormattedImportJobResultsResponse;\n        // TODO Do something with the import job results\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AAD Tenant Column Metadata in Dataverse\nDESCRIPTION: Configuration for the mspcat_tenant column, representing an Azure Active Directory tenant identifier with specific formatting and validation constraints\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_configurationforpowerapps.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nLogicalName: `mspcat_tenant`\nType: String\nMaxLength: 100\nFormat: Text\nRequiredLevel: ApplicationRequired\n```\n\n----------------------------------------\n\nTITLE: Command Change in Power Platform CLI v1.32\nDESCRIPTION: This note highlights the command change from 'pac org' to 'pac env' in the Power Platform CLI starting with version 1.32. While the older command syntax will continue to function, Microsoft recommends using the new 'env' command going forward.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> With pac cli version 1.32, the `pac org` command was changed to `pac env`. `org` will continue to work, but we recommend using `env` going forward.\n```\n\n----------------------------------------\n\nTITLE: Displaying Optional Parameters for 'pac plugin init' in Markdown\nDESCRIPTION: This snippet lists the optional parameters for the 'pac plugin init' command in a markdown format, including their descriptions and usage.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/plugin.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### `--author` `-a`\n\nOne or more authors of the Dataverse Plug-in Package.\n\n#### `--outputDirectory` `-o`\n\nOutput directory\n\n#### `--signing-key-file-path` `-sk`\n\nRelative path to the Dataverse plug-in assembly originator key file for signing.\n\n#### `--skip-signing` `-ss`\n\nSkip plug-in assembly signing that gives the plug-in assembly a strong name. The default value is 'false'.\n\nThis parameter requires no value. It's a switch.\n```\n\n----------------------------------------\n\nTITLE: Using pac package add-external-package Command in PowerShell\nDESCRIPTION: Example showing the syntax for the Power Platform CLI 'pac package add-external-package' command. This command is used to add external packages to a Power Platform solution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/package-add-external-package-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac package add-external-package\n```\n\n----------------------------------------\n\nTITLE: Configure Rules in Classic Admin Center\nDESCRIPTION: This snippet describes how to configure rules for an environment group in the classic Power Platform Admin Center. It involves navigating to the Environment groups, selecting a group, choosing the Rules tab, and adjusting and saving individual rules before publishing them.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Sign in to [Power Platform Admin center](https://admin.powerplatform.microsoft.com/) as a [Power Platform tenant administrator](use-service-admin-role-manage-tenant.md).\n2. Select **Environment groups** in the navigation pane.\n3. On the **Environment groups** page, select the group you created.\n4. Select the **Rules** tab for that group. You see a list of available rules.\n5. Select a rule to open its configuration panel. Adjust it as needed, then **Save** the rule.\n    Repeat this step for all the rules you want to configure in this group.\n6. Select **Publish rules** button in the command bar.\"\n```\n\n----------------------------------------\n\nTITLE: Power Platform Set Connection Variables Task (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to use the `PowerPlatformSetConnectionVariables` task to generate a connection string for use in subsequent tasks, specifically the unit test execution task. It uses a Service Principal (SPN) for authentication and specifies the environment URL. The output variable is named 'op'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/unified-experience/finance-operations-pipeline-test.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntask: microsoft-IsvExpTools.PowerPlatform-BuildTools.set-connection-variables.PowerPlatformSetConnectionVariables@2\n  displayName: 'Power Platform Set Connection Variables '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: <Service Connection>\n    Environment: '<Power platform environment URL>'\n  name: 'op'  \n```\n\n----------------------------------------\n\nTITLE: Installing Azure CLI using pip (cmd)\nDESCRIPTION: This command installs the Azure CLI using pip, which is a prerequisite for working with the CoE CLI. It ensures that the necessary tools are available for Azure management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/non-administrator-local-install.md#2025-04-20_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\npip install azure-cli\n```\n\n----------------------------------------\n\nTITLE: Checking Certificate Subject in Windows Store - PowerShell\nDESCRIPTION: This command retrieves and lists the subject of the given user intermediate certificate for verification within the Windows Certificate Store.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ChildItem -Path Cert:\\LocalMachine\\My | Where-Object { $_.Subject -like \"*Users Intermediate Cert*\" } | Format-List -Property Subject\n```\n\n----------------------------------------\n\nTITLE: Defining the Referenced Entity in Catalog Item File relationship\nDESCRIPTION: The entity name referenced in the many-to-one relationship between Catalog Item File and Catalog Item, using the mspcat_applications entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_catalogitemfile.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_applications`\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Documentation\nDESCRIPTION: YAML configuration block defining metadata for the documentation page including title, description, author information, and audience type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-extensibility-overview.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Programmability and extensibility\ndescription: Overview of available programmable tools for Microsoft Power Platform administrators\nauthor: laneswenka\nms.reviewer: sericks\nms.component: pa-admin\nms.topic: overview\nms.date: 03/07/2025\nms.subservice: admin\nms.author: laswenka\nsearch.audienceType: \n  - admin\n---\n```\n\n----------------------------------------\n\nTITLE: Setting SharePoint SPN in Microsoft Entra Active Directory\nDESCRIPTION: Updates the SharePoint Server Service Principal Name (SPN) in Microsoft Entra Active Directory. This step links the SharePoint server identity with the Microsoft Entra Directory.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$ServicePrincipalName.Add(\"$SPOAppId/$HostName\")   \nSet-MsolServicePrincipal -AppPrincipalId $SPOAppId -ServicePrincipalNames $ServicePrincipalName  \n```\n\n----------------------------------------\n\nTITLE: Configuring DLP Error Settings Script Variables\nDESCRIPTION: Configure variables for setting up Data Loss Prevention (DLP) error settings, including site URL, support email, and tenant ID\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/wiki-community.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$newSiteURL = 'https://contoso.sharepoint.com/sites/powerplatformhub/SitePages/Data-Loss-Prevention-(DLP)-Policies.aspx'\n$supportEmail = 'support@contoso.com'\n$tenantId = '00000000-0000-0000-0000-000000000000'\n```\n\n----------------------------------------\n\nTITLE: Package Deployer Log File Details\nDESCRIPTION: Three primary log files generated by the Package Deployer tool to track deployment processes, login issues, and imported data details\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/deploy-packages-using-package-deployer-windows-powershell.md#2025-04-20_snippet_2\n\nLANGUAGE: logfile\nCODE:\n```\nLogin_ErrorLog.log\n```\n\nLANGUAGE: logfile\nCODE:\n```\nPackageDeployer.log\n```\n\nLANGUAGE: logfile\nCODE:\n```\nComplexImportDetail.log\n```\n\n----------------------------------------\n\nTITLE: Setting Markdown Content via PowerShell\nDESCRIPTION: PowerShell command to set welcome content using Markdown for a specific Managed Environment identified by its ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/welcome-content.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSetManagedEnvironmentMakerOnboardingMarkdownContent -EnvironmentId 8d996ece-8558-4c4e-b459-a51b3beafdb4 -Markdown \"## Welcome to Power Apps \n### Let's get started\"\n```\n\n----------------------------------------\n\nTITLE: Handling GetAuditStorageDetails Response in JSON\nDESCRIPTION: This snippet illustrates the expected JSON response format from a successful GetAuditStorageDetails API call in Microsoft Dynamics 365. It returns the completion status and audit storage details, which includes the count, keys, and values related to storage size and object type codes. Ensure the correct organization URI is referenced in the metadata context.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/recover-database-space-deleting-audit-logs.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n  HTTP/1.1 200 OK\n  Content-Type: application/json; odata.metadata=minimal\n  OData-Version: 4.0\n  \n  {\n      \"@odata.context\":  [Organization Uri]/api/data/v9.1/$metadata#Microsoft.Dynamics.CRM.GetAuditStorageDetailsResponse,\n      \"Result\": {\n          \"Status\": \"Completed\",\n          \"AuditStorageDetails\": {\n              \"Count\": 3,\n              \"Keys\": [\n                  \"organization\",\n                  \"deletedentity_10928\",\n                  \"new_entity_02272411082222785\"\n              ],\n              \"Values\": [\n                  {\n                      \"SizeInBytes\": 3835,\n                      \"ObjectTypeCode\": 1019\n                  },\n                  {\n                      \"SizeInBytes\": 3113,\n                      \"ObjectTypeCode\": 10928\n                  },\n                  {\n                      \"SizeInBytes\": 2012,\n                      \"ObjectTypeCode\": 10990\n                  }\n              ]\n          }\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Viewing and Assigning Power Apps Licenses using Intelligent Recommendations\nDESCRIPTION: This markdown snippet outlines the step-by-step process for Power Platform admins to assign Power Apps premium licenses based on intelligent recommendations. It includes navigating to the correct page, viewing recommendations, filtering users, and assigning licenses directly or through security groups.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/get-recommendations-licensing.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to the [Power Platform admin center](https://admin.powerplatform.microsoft.com).\n   \n2. In the navigation pane, select **Billing** > **Licenses**.\n\n3. Select the **Intelligent recommendations** tab.\n\n4. In the **Power Apps** web part, select **View + assign**. \n\n5. The **Ready to assign** pane appears. View the list of users who would benefit from having a license. You may want to filter the list to show users that meet the following criteria:\n\n   - Users of Basic Power Apps licenses\n   - Users who are in an active Power Apps trial\n   - Users who have already requested a license from their admins\n  \n6. Specify who should get a license:\n   - To assign licenses to specific users, select the checkmark next to the user's name. Then click **Continue**.\n   - To assign licenses to all users, select **Continue**.\n\n7. Indicate if you want to assign the licenses directly or through security groups.\n\n8. Select the license you want to assign to the users. Click **Assign**.\n```\n\n----------------------------------------\n\nTITLE: Setting Deployment Pipeline Variables - YAML\nDESCRIPTION: Defines the necessary pipeline variables to enable deployments to different environments. These include the 'EnvironmentName' variable for deployment tracking and 'ServiceConnection' for connecting to the Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-components-manually.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Setting pipeline variables\nvariables:\n  EnvironmentName: 'Validate'\n  ServiceConnection: 'YourServiceConnectionName'\n\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies for CoE CLI\nDESCRIPTION: Install required npm dependencies for the CoE CLI\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/upgrade.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Structure with HTML Comments\nDESCRIPTION: A simple HTML comment block containing instructions for documentation authors. The comment instructs users to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-extract-translation-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Plugin Command Group Structure in Markdown\nDESCRIPTION: This snippet shows the structure of the 'pac plugin' command group, listing its available commands in a markdown table format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/plugin.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Command|Description|\n|---------|---------|\n|[pac plugin init](#pac-plugin-init)|Initializes a directory with a new Dataverse plug-in class library.|\n|[pac plugin push](#pac-plugin-push)|Import plug-in into Dataverse.|\n```\n\n----------------------------------------\n\nTITLE: Setting Focus with Context Variable\nDESCRIPTION: VBScript example using UpdateContext to set focus on the ContextMenu control via an Input Event. The context variable is bound to the Input Event property, using 'SetFocus' and a random element to ensure app state change detection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/contextmenu.md#2025-04-20_snippet_2\n\nLANGUAGE: VBScript\nCODE:\n```\nUpdateContext({ctxResizableTextareaEvent:\"SetFocus\" & Text(Rand())});\n```\n\n----------------------------------------\n\nTITLE: Accessing Known Issues in Power Platform Admin Center\nDESCRIPTION: Steps to navigate to the Known Issues tab in the Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-known-issues.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1.  Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/).\n2.  Select **Help + support** in the navigation pane.\n3.  Select the **Known issues** tab.\n4.  Narrow your search for a known issue by using the available filters and search.\n\n    - **Product Category**: Choose one or multiple products. By default, all products with a known issue are selected.\n    - **Status**: Select the status of known issues that you want to view.\n         \n        - **All**: All known issues are listed.\n        - **Active**: Known issues that are currently being worked on are listed.\n        - **Resolved**: Known issues that have been fixed, but not necessarily deployed are listed.\n\n    - **Search**: Enter key words to find the known issue you're looking for.\n    \n5.  Select the title of a known issue to view details, including a description of the problem and a workaround, if available.\n```\n\n----------------------------------------\n\nTITLE: SAP Supplier Self Service Solution Download Links\nDESCRIPTION: Provides download URLs for managed and unmanaged solution files required for SAP Supplier Self Service template installation\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-supplier-self-service/install-and-set-up.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Managed\n  - [mpa_supplier_self_service_managed](https://aka.ms/mpa_supplier_self_service_managed)\n  - [SupplierSelfServicePortal_managed](https://aka.ms/SupplierSelfServicePortal_managed)\n- Unmanaged\n  - [mpa_supplier_self_service_unmanaged](https://aka.ms/mpa_supplier_self_service_unmanaged)\n  - [SupplierSelfServicePortal_unmanaged](https://aka.ms/SupplierSelfServicePortal_unmanaged)\n```\n\n----------------------------------------\n\nTITLE: Segmentation Terms Definition Table in Markdown\nDESCRIPTION: Markdown table defining key terms related to segmentation strategy including containment, least-privilege access, perimeter, resource organization, role, and segment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/segmentation.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Term | Definition |\n|---|---|\n| Containment | A technique to contain the blast radius if an attacker gains access to a segment. |\n| Least-privilege access | A Zero Trust principle that aims at minimizing a set of permissions to complete a job function. |\n| Perimeter | The trust boundary around a segment. |\n| Resource organization | A strategy to group related resources by flows within a segment. |\n| Role | A set of permissions needed to complete a job function. |\n| Segment | A logical unit that's isolated from other entities and protected by a set of security measures. |\n```\n\n----------------------------------------\n\nTITLE: Setting RichTextEditor Content in Power Apps Test Studio\nDESCRIPTION: Sets the HtmlText property of a RichTextEditor control with HTML content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setproperty.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerFx\nCODE:\n```\nSetProperty(RichTextEditor1.HtmlText, \"<p>Sample text</p>\")\n```\n\n----------------------------------------\n\nTITLE: Using Upper Function with String Input in Power Fx\nDESCRIPTION: Converts any lowercase letters in a string to uppercase. The example uses a text-input control named 'Author' containing 'E. E. CummINGS' as input.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-lower-upper-proper.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nUpper( Author.Text )\n```\n\n----------------------------------------\n\nTITLE: Resetting Environment and Setting Currency in Power Platform using PowerShell\nDESCRIPTION: This command resets a specific environment in the Power Platform tenant and sets the currency to EUR. It requires the environment GUID and the desired currency code as parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-reset-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac admin reset --environment 00000000-0000-0000-0000-000000000000 --currency EUR\n```\n\n----------------------------------------\n\nTITLE: Canvas App Responsive Layout Implementation\nDESCRIPTION: Canvas apps require explicit component-level responsiveness configuration, providing granular control over screen sizes, positioning, and component behavior\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/layout.md#2025-04-20_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: YAML Formula Syntax Example\nDESCRIPTION: Demonstrates the Power Fx YAML formula syntax, highlighting the requirement to start expressions with an equal sign\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-unpack-remarks.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Power Fx YAML Formula Example\nFormula: \"=If(Value > 10, \\\"High\\\", \\\"Low\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Bulk Deletion Actions Table in Markdown\nDESCRIPTION: A markdown table defining the available actions and their corresponding implementation steps for managing bulk deletion jobs in the Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-take-action-bulk-deletion-jobs.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|To|Do this|\n|--------|-------------|\n|View status|Look in the **Status Reason** column.|\n|View detailed status, including success and failure information|Select the bulk-deletion job.|\n|View queries submitted for deletion|Select the bulk-deletion job, and then under **Information**, choose **Properties**.|\n|Review the errors|Select the bulk-deletion job, and then under **Related**, choose **Failures**.|\n|Pause a bulk-deletion job|1.  Select the bulk-deletion job, and then on the Actions menu, choose **Pause**.<br />2.  When the confirmation message appears, choose **OK**. **Note:**  Bulk deletion jobs of fewer than 1,000 records cannot be paused.|\n|Postpone a bulk-deletion job|1.  Select the bulk-deletion job, and then on the Actions menu, choose **Postpone**.<br />2.  When the confirmation message appears, choose **OK**.|\n|Resume a bulk-deletion job|1.  Select the bulk-deletion job, and then on the Actions menu, choose **Resume**.<br />2.  When the confirmation message appears, choose **OK**.|\n|Cancel a bulk-deletion job|1.  Select the bulk-deletion job, and then on the Actions menu, choose **Cancel**.<br />2.  When the confirmation message appears, choose **OK**.|\n|Modify recurrence of a bulk-delete job|1.  Select the bulk-deletion job, and then on the Actions menu, choose **Modify Recurrence**.<br />2.  If you select the **Run this job after every** check box, specify the interval after which you want the bulk-deletion job to run, and then choose **OK**.<br /><br /> If you select the **Run this job after every** check box when you create a bulk-deletion job, the job becomes recurring and is moved to the **Recurring Bulk Deletion System Jobs** view. You can only change the recurrence for these recurring bulk-deletion jobs.|\n```\n\n----------------------------------------\n\nTITLE: Running Power Automate Flows\nDESCRIPTION: Instructions on running specific Power Automate flows ('Add pain points' and 'Update Software Tools') to populate tables with default values after importing the Innovation Backlog solution. This step is necessary to initialize the application with essential data.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-innovationbacklog.md#2025-04-20_snippet_0\n\nLANGUAGE: Power Automate\nCODE:\n```\n \"1. Open the **Add pain points** cloud flow and select **Run** > **Run Flow**.\n\n       ![Run Add pain points cloud flow.](media/ib-2.png \\\"Run Add pain points cloud flow\\\")\n    \n    1. Open the **Update Software Tools** cloud flow and select **Run** > **Run Flow**.\n\n        ![Run Update Software Tools cloud flow.](media/ib-3.png \\\"Run Update Software Tools cloud flow\\\")\n    \n    1. Wait for both of them to finish. (This might take 10 minutes.)\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Owner of a Catalog Item - Power Platform Web API - Markdown\nDESCRIPTION: This snippet describes the 'Assign' operation for the Catalog Item, detailing how to update the 'ownerid' property using a PATCH request to the /mspcat_applicationses endpoint. This operation is instrumental when needing to change the ownership of a catalog item.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| `Assign`<br />Event: True |`PATCH` /mspcat_applicationses(*mspcat_applicationsid*)<br />[Update](/powerapps/developer/data-platform/webapi/update-delete-entities-using-web-api#basic-update) the `ownerid` property. |<xref:Microsoft.Crm.Sdk.Messages.AssignRequest>|\n```\n\n----------------------------------------\n\nTITLE: Configuration of Extensions for Signing User Certificates - File Creation\nDESCRIPTION: This snippet defines the configurations for the signing users' certificates by creating an extension file with necessary metadata and restrictions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n`signingUsersCert/extensions.cnf`\n\n``` [ v3_ca ]\nsubjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid:always,issuer\nbasicConstraints = critical,CA:true,pathlen:0\nkeyUsage = cRLSign, keyCertSign\n```\n```\n\n----------------------------------------\n\nTITLE: Configuration Migration Tool Installation Path\nDESCRIPTION: File path showing where the Configuration Migration Tool executable is located after installation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/modify-configuration-data-schema.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\\[your folder]\\Tools\\ConfigurationMigration\\DataMigrationUtility.exe\n```\n\n----------------------------------------\n\nTITLE: Resources Property Definition in Power Platform\nDESCRIPTION: Definition of the Resources property which identifies users or facilities/equipment required for an activity. This PartyList field targets only system users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Users or facility/equipment that are required for the activity.**|\n|DisplayName|**Resources**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`resources`|\n|RequiredLevel|None|\n|Type|PartyList|\n|Targets|systemuser|\n```\n\n----------------------------------------\n\nTITLE: Successful Plugin Package Registration Message\nDESCRIPTION: Example output message displayed in the Visual Studio output window after successful plugin package registration. It shows the package ID and path to the NuGet package.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/howto/vs-create-package.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n6/22/2022 3:03:17 PM : registration of Plugin Package sample_PowerPlatformVSSolution.ExamplePlugins, \nat E:\\projects\\PowerPlatformVSSolution\\ExamplePlugins\\bin\\outputPackages\\PowerPlatformVSSolution.ExamplePlugins.1.0.0.nupkg was successful. \nID allotted was 06a20e15-77f2-ec11-bb3c-000d3a892245.\n```\n\n----------------------------------------\n\nTITLE: Configuring SharePoint Server Permissions for OneDrive Integration using PowerShell\nDESCRIPTION: PowerShell script to set up permissions between SharePoint and Dynamics 365 server. It creates a WellKnown App principal with appropriate permission scopes including content, social, and search capabilities to enable OneDrive for Business integration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connect-onedrive-business.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-Pssnapin *  \n# Access WellKnown App principal  \n[Microsoft.SharePoint.Administration.SPWebService]::ContentService.WellKnownAppPrincipals  \n  \n# Create WellKnown App principal  \n$ClientId = \"00000007-0000-0000-c000-000000000000\"  \n$PermissionXml = \"<AppPermissionRequests AllowAppOnlyPolicy=\\\"true\\\"><AppPermissionRequest Scope=\\\"http://sharepoint/content/tenant\\\" Right=\\\"FullControl\\\" /><AppPermissionRequest Scope=\\\"http://sharepoint/social/tenant\\\" Right=\\\"Read\\\" /><AppPermissionRequest Scope=\\\"http://sharepoint/search\\\" Right=\\\"QueryAsUserIgnoreAppPrincipal\\\" /></AppPermissionRequests>\"  \n  \n$wellKnownApp= New-Object -TypeName \"Microsoft.SharePoint.Administration.SPWellKnownAppPrincipal\" -ArgumentList ($ClientId, $PermissionXml)  \n  \n$wellKnownApp.Update()\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for mspcat_name Field\nDESCRIPTION: Defines the logical name for the Identity Name field, which represents the descriptive name of the identity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`mspcat_name`\n```\n\n----------------------------------------\n\nTITLE: Using Power Platform CLI Admin Command for Adding Groups in PowerShell\nDESCRIPTION: Example of using the 'pac admin add-group' command in PowerShell within the Power Platform CLI. This command is used to add a group to the Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-add-group-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin add-group\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Application Packages - JSON\nDESCRIPTION: This snippet defines a JSON schema used to parse the response from the Power Platform API call that retrieves application packages. The schema details the structure of the expected response, including property types and required fields.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"value\": {\n            \"items\": {\n                \"properties\": {\n                    \"applicationDescription\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"applicationId\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"applicationName\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"applicationVisibility\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"catalogVisibility\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"crmMaxVersion\": {},\n                    \"crmMinversion\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"customHandleUpgrade\": {\n                        \"type\": \"boolean\"\n                    },\n                    \"endDateUtc\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"errorDetails\": {},\n                    \"id\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"instancePackageId\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"learnMoreUrl\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"localizedDescription\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"localizedName\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"publisherId\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"publisherName\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"singlePageApplicationUrl\": {},\n                    \"startDateUtc\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"state\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"supportedCountries\": {\n                        \"items\": {\n                            \"type\": [\n                                \"string\",\n                                \"null\"\n                            ]\n                        },\n                        \"type\": \"array\"\n                    },\n                    \"uniqueName\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    },\n                    \"version\": {\n                        \"type\": [\n                            \"string\",\n                            \"null\"\n                        ]\n                    }\n                },\n                \"required\": [\n                    \"id\",\n                    \"uniqueName\",\n                    \"version\",\n                    \"localizedDescription\",\n                    \"localizedName\",\n                    \"applicationId\",\n                    \"applicationName\",\n                    \"applicationDescription\",\n                    \"singlePageApplicationUrl\",\n                    \"publisherName\",\n                    \"publisherId\",\n                    \"learnMoreUrl\",\n                    \"crmMinversion\",\n                    \"crmMaxVersion\",\n                    \"customHandleUpgrade\",\n                    \"instancePackageId\",\n                    \"state\",\n                    \"catalogVisibility\",\n                    \"applicationVisibility\",\n                    \"errorDetails\",\n                    \"startDateUtc\",\n                    \"endDateUtc\",\n                    \"supportedCountries\"\n                ],\n                \"type\": \"object\"\n            },\n            \"type\": \"array\"\n        }\n    },\n    \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Dual Screen Status and Orientation in Power Apps\nDESCRIPTION: Formula that detects whether a Power App is running on a dual-screen device and determines the screen orientation. It uses the App.SupportedLayouts and App.ActiveLayout properties to evaluate the current device configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/cc-microsoft.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps-formula\nCODE:\n```\nIf(App.SupportedLayouts.Tablet.Portrait = App.ActiveLayout || App.SupportedLayouts.Tablet.Landscape = App.ActiveLayout, true, false)\n```\n\n----------------------------------------\n\nTITLE: Entity Attribute Definition - TimeZoneRuleVersionNumber\nDESCRIPTION: Definition of TimeZoneRuleVersionNumber attribute with properties like type, max/min values and display settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**For internal use only.**|\n|DisplayName|**Time Zone Rule Version Number**|\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`timezoneruleversionnumber`|\n|RequiredLevel|None|\n|Type|Integer|\n|MaxValue|2147483647|\n|MinValue|-1|\n```\n\n----------------------------------------\n\nTITLE: Defining Named Formulas in Power Fx\nDESCRIPTION: Uses named formulas within the 'App.Formulas' to ensure that control properties like 'Label.Fill' are consistently updated without relying on variables or 'OnStart', enhancing formula traceability and immutability.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_4\n\nLANGUAGE: power-fx\nCODE:\n```\nApp.Formulas: BGColor = ColorValue( Param( \"BackgroundColor\" ) );\nLabel1.Fill: BGColor\nLabel2.Fill: BGColor\nLabel3.Fill: BGColor\n```\n\n----------------------------------------\n\nTITLE: TransactionCurrencyId Property Definition in Power Platform\nDESCRIPTION: Definition of the TransactionCurrencyId property which identifies the currency associated with an activity pointer. This Lookup field targets the transactioncurrency entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Unique identifier of the currency associated with the activitypointer.**|\n|DisplayName|**Currency**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`transactioncurrencyid`|\n|RequiredLevel|None|\n|Type|Lookup|\n|Targets|transactioncurrency|\n```\n\n----------------------------------------\n\nTITLE: Counting Apps Owned by Each User via PowerShell\nDESCRIPTION: Displays a table quantifying the number of apps each user owns. Utilizes native PowerShell functions and Power Apps cmdlets. Requires no additional dependencies aside from PowerShell.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerApp | Select –ExpandProperty Owner | Select –ExpandProperty displayname | Group\n```\n\n----------------------------------------\n\nTITLE: Listing Catalog Items in Power Platform CLI\nDESCRIPTION: This command lists all published catalog items from the current Dataverse organization, with optional filtering parameters for item IDs and names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/catalog.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## pac catalog list\n\nList all published catalog items from the current Dataverse organization.\n\n### Optional Parameters for catalog list\n\n#### `--catalog-item-id` `-cid`\n\nCatalog item ID to search for. When catalog item ID is used, catalog item name is ignored.\n\n#### `--catalog-item-name` `-n`\n\nCatalog item name to search for.\n```\n\n----------------------------------------\n\nTITLE: Submitting to Power Platform Catalog using CLI\nDESCRIPTION: This command is used to submit an item to the Power Platform catalog. It's part of the Power Platform CLI toolset, allowing developers to interact with the catalog programmatically.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/catalog-submit-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac catalog submit\n```\n\n----------------------------------------\n\nTITLE: Power Platform Custom Connectors Overview\nDESCRIPTION: Custom connectors enable secure and governed exposure of REST APIs to low-code components, supporting API-first modernization strategies with centralized management and authentication\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/application-modernization.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **APIs and custom connectors** | Custom connectors for your REST APIs centralize app logic and allow it to be exposed to low-code components in a secure and governed way.\n```\n\n----------------------------------------\n\nTITLE: Setting Up an On-Premises Data Gateway for SAP Access\nDESCRIPTION: This snippet provides step-by-step instructions on how to set up an on-premises data gateway, which allows connections to SAP systems that are behind a corporate firewall. It includes links for downloading and installing the gateway.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/sap-odata-connector.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [download](https://aka.ms/opdg)\\n1. [install](/data-integration/gateway/service-gateway-install#download-and-install-a-standard-gateway) the on-premises data gateway on your Windows VM. Be sure to install and configure it in the same region as your Power Automate environment.\\n1. Select **Gateways** to see the gateway installed in your Power Automate environment.\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for owneridname Field\nDESCRIPTION: Defines the logical name for the owner name field, which represents the name of the owner. This is a system required read-only text field with a maximum length of 100 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`owneridname`\n```\n\n----------------------------------------\n\nTITLE: Creating Serial and Index Files for Certification Authority - PowerShell\nDESCRIPTION: This code creates essential files (serial and index) required to track issued certificates, ensuring proper management of the certificate lifecycle.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# Create the necessary serial and index files if they don't exist\nif (-Not (Test-Path \"signingUsersCert\\index.txt\")) { New-Item -Path \"signingUsersCert\\index.txt\" -ItemType File }\nif (-Not (Test-Path \"signingUsersCert\\serial\")) { Set-Content -Path \"signingUsersCert\\serial\" -Value \"0001\" }\n```\n\n----------------------------------------\n\nTITLE: Checking for Blanks in Column Access using Power FX\nDESCRIPTION: This snippet illustrates checking for non-existing fields and JSON null values using the IsBlank function. It exemplifies how to return true for blank values accessed from a parsed JSON.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-columnnames-column.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nIsBlank( Column( ParseJSON( JsonString ), \"does not exist\" ) )\n```\n\nLANGUAGE: power-fx\nCODE:\n```\nIsBlank( Column( ParseJSON( JsonString ), \"empty\" ) )\n```\n\n----------------------------------------\n\nTITLE: Power Platform Admin Center License Monitoring\nDESCRIPTION: Configuration for viewing license consumption using the Billing (preview) > Licenses (preview) page in Power Platform admin center. Supports tracking license assignments, active users, and potential licensing issues across environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-license-consumption-issues.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# View license consumption for Power Apps and Power Automate (preview)\n```\n\n----------------------------------------\n\nTITLE: Security Control Questions Table in Markdown\nDESCRIPTION: Markdown table listing security control questions and their purposes in threat analysis.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/threat-model.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Ask this question | To determine controls that... |\n|---|---|\n| Are connections authenticated through Microsoft Entra ID, and use modern security protocols that the security team approved:<br><br>- Between users and the application?<br><br>- Between application components and services?<br><br>- Between users and an AI assistant (agent)? | Prevent unauthorized access to the application components and data. |\n| Are you limiting access to only accounts that need to write or modify data in the application? | Prevent unauthorized data tampering or alteration. |\n| Is the application activity logged and fed into a security information and event management (SIEM) system through Azure Monitor or a similar solution? | Detect and investigate attacks quickly. |\n```\n\n----------------------------------------\n\nTITLE: Creating a New Approval Rejection Applied Policy\nDESCRIPTION: This snippet shows how to create an entry in the Approval Rejection Applied Policy table using a POST request in the Web API.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrejectionappliedpolicy.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`POST` /mspcat_certificationrejectionappliedpolicies<br />See [Create](/powerapps/developer/data-platform/webapi/create-entity-web-api)\n```\n\n----------------------------------------\n\nTITLE: Generating Shared Access Signature (SAS) URL (Source Admin)\nDESCRIPTION: Command to generate a SAS URL for uploading the user mapping file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGenerateResourceStorage-PowerAppEnvironment –EnvironmentName {EnvironmentId}\n```\n\n----------------------------------------\n\nTITLE: Deleting Environment Role Assignments in Power Platform\nDESCRIPTION: PowerShell script to remove all environment role assignments for a specific user in environments without a Dataverse database. Uses the Remove-AdminPowerAppEnvironmentRoleAssignment cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n\n#find all environment role assignments for the user for environments without a Dataverse database and delete them\nGet-AdminPowerAppEnvironmentRoleAssignment -UserId $deleteDsrUserId | Remove-AdminPowerAppEnvironmentRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: User Mapping Format in Notepad\nDESCRIPTION: Example format for mapping user UPNs between source and destination tenants in a comma-separated format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nuser001@source.com,user001@destination.com\nuser002@source.com,user002@destination.com\nuser003@source.com,user003@destination.com\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Settings using Organization Settings editor\nDESCRIPTION: This snippet describes how to install and use the Organization Settings editor to modify Dataverse organization settings, specifically for managing record ownership across business units.  It involves installing the tool and then setting `RecomputeOwnershipAcrossBusinessUnits` to true and `AlwaysMoveRecordToOwnerBusinessUnit` to false. This impacts record ownership behavior in Modernized Business Units.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-security-cds.md#2025-04-20_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Verifying Installation of Components (cmd)\nDESCRIPTION: This snippet checks the versions of Azure CLI, NodeJs, and CoE CLI to verify that all prerequisites are installed correctly. This step is important to ensure the environment is set up properly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/non-administrator-local-install.md#2025-04-20_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\naz --version\nnode --version\npac\n```\n\n----------------------------------------\n\nTITLE: XML Mapping for Word Template Definition\nDESCRIPTION: The XML schema definition used for mapping entity fields in Word templates. The schema name begins with 'urn:microsoft-crm/document-template/' and is used to insert content controls into the template.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/using-word-templates-dynamics-365.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nurn:microsoft-crm/document-template/\n```\n\n----------------------------------------\n\nTITLE: Preview Feature Configuration Steps for Unified Interface\nDESCRIPTION: Markdown steps outlining the process to enable preview features through the Unified Interface in Power Apps. Includes administrator requirements and system settings navigation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/what-are-preview-features-how-do-i-enable-them.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to [Power Apps](https://make.powerapps.com)\n2. Select your environment from the top-right corner, and select **Settings** > **Advanced Settings**.\n3. Select **Settings** > **Administration**.\n4. Select **System Settings**, and then select the **Previews** tab.\n5. Read the [license terms](https://go.microsoft.com/fwlink/p/?LinkId=511446), and if you agree, select the **I've read and agree to the license terms** check box.\n6. For each Preview feature you want to enable, select **Yes**.\n```\n\n----------------------------------------\n\nTITLE: Using the Mod Function in Power FX\nDESCRIPTION: The Mod function takes two parameters: the number to divide and the divisor. It returns the remainder of the division operation, with the result having the same sign as the divisor.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-mod.md#2025-04-20_snippet_0\n\nLANGUAGE: Power FX\nCODE:\n```\nMod( Number, Divisor )\n```\n\n----------------------------------------\n\nTITLE: Setting TEMPLATE-REPO Variable for Pipeline Syncing\nDESCRIPTION: This snippet sets the TEMPLATE-REPO variable to point to the source GitHub repository from which the templates will be synced. This is a critical setup step in the Azure DevOps pipeline configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-pipeline-sync.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nSet the `TEMPLATE-REPO` pipeline variable to <[*https://github.com/microsoft/coe-alm-accelerator-templates*](https://github.com/microsoft/coe-alm-accelerator-templates)>.\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Documentation\nDESCRIPTION: YAML configuration block defining metadata for the documentation page including title, description, author, and other Microsoft Docs specific properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-self-service-capacity.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"View self-service storage capacity  | MicrosoftDocs\"\ndescription: View self-service storage capacity\nauthor: sericks007\n\nms.component: pa-admin\nms.topic: conceptual\nms.date: 01/29/2020\nms.subservice: admin\nms.author: sericks\nsearch.audienceType: \n  - admin\n---\n```\n\n----------------------------------------\n\nTITLE: LogicalName References for System Attributes in Dynamics 365\nDESCRIPTION: Collection of logical name references used to access system attributes programmatically in Dynamics 365. These logical names provide the key identifiers for accessing fields like creation date, owner ID, and status codes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagedsolutioncomponents.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\noverriddencreatedon\nownerid\nowneridtype\nstatecode\nstatuscode\ntimezoneruleversionnumber\nutcconversiontimezonecode\ncreatedby\ncreatedon\ncreatedonbehalfby\nmodifiedby\nmodifiedon\nmodifiedonbehalfby\nowneridname\nowneridyominame\nowningbusinessunit\nowningteam\nowninguser\nversionnumber\n```\n\n----------------------------------------\n\nTITLE: Displaying Orphaned Object List in Markdown\nDESCRIPTION: This markdown snippet shows an image of the orphaned object list presented to managers for review and action.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/governance-components.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Orphaned object list.](media/orphanedobjects2.png \"Orphaned object list\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SAP Message Server with SNC/SSO Connection String\nDESCRIPTION: This JSON snippet illustrates the configuration for an SAP Message Server connection string using SNC (Secure Network Communications) for SSO (Single Sign-On). It includes parameters for Kerberos authentication, such as SNC library path, partner name, quality of protection, SSO status, and whether to use SNC. This configuration enables secure connections via SSO.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/configure-environment-variables.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\n    \"Client\": \"102\",\n\n    \"LogonGroup\": \"FICO\",\n\n    \"LogonType\": \"Group\",\n\n    \"MessageServerHost\": \"sapserverdv6\",\n\n    \"MessageServerService\": \"3601\",\n\n    \"SncLibraryPath\": \"c:\\\\sapcryptolib\\\\sapcrypto.dll\",\n\n    \"SncPartnerName\": \"p:CN=DV6\",\n\n    \"SncQOP\": \"Default\",\n\n    \"SncSso\": \"On\",\n\n    \"SystemID\": \"DV6\",\n\n    \"UseSnc\": \"true\"\n\n} \n\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_requestsaccesstotspevents in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the boolean field that indicates if a publisher is requesting integration to the TPS Event system.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_requestsaccesstotspevents`\n```\n\n----------------------------------------\n\nTITLE: Filtering Noise from Email Subjects using Regex\nDESCRIPTION: A regular expression is employed to remove noise words from the subject line of emails, aiding in effective smart matching. The default regex filters words ending with a colon (:), enabling only significant words to contribute to hash generation. To extend the filter, such as ignoring 'Out of office:', the regex can be modified.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/email-message-filtering-correlation.md#2025-04-20_snippet_2\n\nLANGUAGE: Regex\nCODE:\n```\n^\\[\\s\\]\\*(\\[\\w\\]+\\s?:\\[\\s\\]\\*)+\n```\n\nLANGUAGE: Regex\nCODE:\n```\n^\\[\\s\\]\\*(\\[\\w\\]+\\s?:\\[\\s\\]\\*)+\\|Out of office:\n```\n\n----------------------------------------\n\nTITLE: Replace Function with Table Input in Power Fx\nDESCRIPTION: Demonstrates using Replace function with a single-column table to modify multiple strings at once.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-replace-substitute.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nReplace([\n  \"Quarter 1, 2018\",\n  \"Quarter 2, 2011\",\n  \"Quarter 4, 2019\"\n], 9, 1, \"3\")\n```\n\n----------------------------------------\n\nTITLE: Shared Access Scenarios Table in Markdown\nDESCRIPTION: Markdown table describing the five different ways a user can have shared access to a record in Dataverse.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/how-record-access-determined.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|&nbsp;   |&nbsp;  |\n|---------|---------|  \n|**The record was shared with the user directly**    | If a record is shared with the user to perform a certain action, then the user would have access to do that action provided the user passed the privilege check.        |\n|**A related record was shared with the user directly**     |  The following scenario takes place when a record A is related to a record B. If the user has shared access to perform a certain action on the record A, it would then have inherited access to perform the same action on the record B, provided the user passed the privilege check.       |\n|**The record was shared with a team that the user belongs to**     | If a record is shared with a team to perform a set of actions, then the users that belong to that team would have access to do those actions provided they passed the privilege check.        |\n|**A related record was shared with a team that the user belongs to**    |  The following scenario takes place when a record A is related to a record B. If record A is shared with a team to perform a set of actions, and record A is related to record B, then the users that belong to that team would have access to do those actions in both records A and B, provided they passed the privilege check.       |\n|**The record was shared with the entire organization**    | If a record is shared with an organization to perform a set of actions, then all the users that belong to that organization will be able to perform those actions provided they passed the privilege check.        |\n```\n\n----------------------------------------\n\nTITLE: Using entitynamesfilter and messagenamesfilter with pac modelbuilder\nDESCRIPTION: Recommendation to use filtering parameters to limit generated files to only those needed in a project, avoiding the time-consuming process of generating code for all Dataverse tables and messages.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/modelbuilder-build-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!CAUTION]\n> We **strongly recommend** that you use the [entitynamesfilter](../modelbuilder.md#--entitynamesfilter--enf) and [messagenamesfilter](../modelbuilder.md#--messagenamesfilter--mnf) parameters to limit the generated files to those you will use in your project. Otherwise, the build command will attempt to generate code for all tables and messages from Dataverse. This will take a significant amount of time to process.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Microsoft 365 Connectors for Groups with Dynamics 365\nDESCRIPTION: Steps for connecting new or existing Microsoft 365 Groups with Dynamics 365 customer engagement apps using the Microsoft 365 Connectors. This enables group notifications when new activities are posted in Dynamics 365.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/deploy-office-365-groups.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n1. Sign in to your [Microsoft 365 Outlook](https://outlook.office365.com).  \n  \n2. Create or choose a Microsoft 365 Group.  \n  \n3. Select **Connect your apps**.  \n  \n   > [!div class=\"mx-imgBorder\"] \n   > ![Select Microsoft 365 groups Connectors.](media/office-365-groups-connectors.png \"Select Microsoft 365 groups Connectors\")\n  \n4. Scroll down to **Dynamics 365**, and then select **Add**.  \n  \n5. If you have access to more than one environment, choose which environment to connect to this Microsoft 365 Group. If you only have access to one environment, this step will be skipped and you will advance to the next step.  \n  \n6. Choose the record you want to connect this Microsoft 365 Group to, and then select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Telemetry URLs for Model-Driven Apps\nDESCRIPTION: Specific telemetry endpoint URLs for different US Government cloud environments to enable communication through firewalls\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-us-government.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- **GCC and GCC High**: `https://tb.pipe.aria.microsoft.com/Collector/3.0`\n- **DoD**: `https://pf.pipe.aria.microsoft.com/Collector/3.0`\n```\n\n----------------------------------------\n\nTITLE: Defining ModifiedOnBehalfBy Property in Power Platform Entity\nDESCRIPTION: Defines the ModifiedOnBehalfBy property which stores the unique identifier of the delegate user who modified the record. This is a lookup field targeting the systemuser entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\nmodifiedonbehalfby\n```\n\n----------------------------------------\n\nTITLE: Performing GET Request for Rulesets - HTTP\nDESCRIPTION: This snippet explains how to form a GET request to retrieve all available rulesets. It includes required headers and the API endpoint to use. Note that an OAuth token is necessary for authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/retrieve-rulesets.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET [Geographical URI]/api/ruleset?api-version=2.0\nAccept: application/json\nx-ms-correlation-id: aaaa0000-bb11-2222-33cc-444444dddddd\nContent-Type: application/json; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Deleting an Approval Rejection Applied Policy\nDESCRIPTION: This snippet illustrates how to delete an entry from the Approval Rejection Applied Policy table with a DELETE request in the Web API.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrejectionappliedpolicy.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`DELETE` /mspcat_certificationrejectionappliedpolicies(*mspcat_certificationrejectionappliedpolicyid*)<br />See [Delete](/powerapps/developer/data-platform/webapi/update-delete-entities-using-web-api#basic-delete)\n```\n\n----------------------------------------\n\nTITLE: Empty Command Group Remarks Template in HTML Comments\nDESCRIPTION: HTML comment block template showing the structure for documenting command group remarks. The template includes a header for 'Remarks' and placeholders for content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any general remarks for this command group below.\n\n### Remarks\n\nAdd content here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: PowerShell Environment Configuration Steps\nDESCRIPTION: Markdown formatted instructions for configuring generative AI features in Power Platform admin center, including data movement, Bing search, and Microsoft 365 services settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/geographical-availability-copilot.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com).\n2. In the navigation pane, select **Manage**.\n3. In the **Manage** pane, select **Environments**. The **Environments** page is displayed.\n4. Select the name of your environment. Details about your environment are displayed.\n5. In the **Generative AI features** card, select **Edit**. The **Generative AI features** pane is displayed.\n6. Review the terms of use and select the **Move data across regions** checkbox.\n7. Review the terms of use and select the **Bing search** checkbox.\n8. Review the terms of use and select the **Microsoft 365 services** checkbox.\n9. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for overriddencreatedon Field\nDESCRIPTION: Defines the logical name for the Record Created On field, which represents the date and time that the record was migrated.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`overriddencreatedon`\n```\n\n----------------------------------------\n\nTITLE: Applying Solution Upgrade with Username/Password Authentication\nDESCRIPTION: YAML configuration for upgrading a Power Platform solution that was previously imported as a holding solution. This snippet uses username/password authentication and synchronous operation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.apply-solution-upgrade.PowerPlatformApplySolutionUpgrade@2\n  displayName: 'Power Platform Apply Solution Upgrade '\n  inputs:\n    PowerPlatformEnvironment: 'My service connection'\n    SolutionName: 'Contoso_sample'\n    AsyncOperation: false\n```\n\n----------------------------------------\n\nTITLE: Using DateAdd() with Today() function in Power Fx\nDESCRIPTION: This example retrieves the current date, adds 12 days to it using the DateAdd() function, and displays the result as a string with the format \"mm/dd/yyyy hh:mm:ss\".\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-now-today-istoday.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\n\"Text( DateAdd( Today(), 12 ), \\\"mm/dd/yyyy hh:mm:ss\\\" )\"\n```\n\n----------------------------------------\n\nTITLE: Installing Single Application in Power Platform Environment\nDESCRIPTION: Demonstrates how to install a single application (MSFT_EmployeeIdeas) in a specified Power Platform environment using the pac CLI command. Requires environment ID and application name as parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/application-install-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac application install --environment-id 00000000-0000-0000-0000-000000000000 --application-name MSFT_EmployeeIdeas\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Details with PAC CLI\nDESCRIPTION: Shows package information for a specified DLL file located at the given file path. This command is specific to .NET Full Framework version of the PAC CLI and provides package inspection capabilities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/package-show-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac package show c:\\samplepackage.dll\n```\n\n----------------------------------------\n\nTITLE: Downloading and Launching Configuration Migration Tool with PowerShell\nDESCRIPTION: This PowerShell command downloads and launches the Configuration Migration tool if it's the first time running, or just launches it if it's already been downloaded. The tool is part of the Microsoft Power Platform CLI.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-cmt-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac tool cmt\n```\n\n----------------------------------------\n\nTITLE: Deleting a Power Platform Environment by URL Using CLI\nDESCRIPTION: This example shows how to delete a Power Platform environment by specifying its URL. The command uses the `pac admin delete` command with the `--environment` parameter followed by the environment's URL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-delete-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac admin delete --environment https://contosomarketing.crm4.dynamics.com\n```\n\n----------------------------------------\n\nTITLE: Square Root Calculator in Power Fx\nDESCRIPTION: A complete example showing how to create a square root calculator using a Text input control and a Label control. The formula converts the input text to a number and calculates its square root.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_11\n\nLANGUAGE: Power Fx\nCODE:\n```\nSqrt( Value( Source.Text ) )\n```\n\n----------------------------------------\n\nTITLE: Pipeline List Command Usage\nDESCRIPTION: Command for listing available pipelines with optional parameters to filter by environment or specific pipeline.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/pipeline.md#2025-04-20_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\npac pipeline list [--environment <env>] [--pipeline <name-or-id>]\n```\n\n----------------------------------------\n\nTITLE: External URL Construction for SharePoint Integration\nDESCRIPTION: Example URL format for connecting to an on-premises SharePoint server subsite for document suggestions. The URL includes placeholders for website name, site name, and subsite name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/enable-document-suggestions.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://mysharepoint/sites/subsitename/_layouts/15/osssearchresults.aspx?&k={0}\n```\n\n----------------------------------------\n\nTITLE: App Archive Score Calculation\nDESCRIPTION: Breakdown of how archive scores are calculated for Power Platform apps. Score ranges from 0-6 based on multiple criteria including modification history, naming conventions, and app status.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/power-bi-govern.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Has the app been modified since it was created? (+1)\n- Does the app name use nonproduction words such as *test*, *demo*, or *sample*? (+1)\n- When was the app last modified? (+3 for more than two years ago, +2 for more than one year ago, +1 for more than three months ago)\n- Is this app likely a template, or are there multiple apps with the same name? (+1)\n- Is the app suspended? (+2)\n- Is the app orphaned? (+2)\n```\n\n----------------------------------------\n\nTITLE: SharePoint Integration Requirements\nDESCRIPTION: Outlines critical requirements for enabling SharePoint document management, including tenant alignment, site collection configuration, and permission prerequisites.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/sharepoint-document-management-software-requirements.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!IMPORTANT]\n>  The document management feature requires that Power Apps or customer engagement apps subscription be under the same tenant as the SharePoint Online subscription.\n>\n> SharePoint Foundation versions aren't compatible with Power Apps and customer engagement apps document management.\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Settings using OrgDBOrgSettings tool\nDESCRIPTION: This snippet describes how to utilize the OrgDBOrgSettings tool to manage Dataverse organization settings, specifically concerning the `RecomputeOwnershipAcrossBusinessUnits` setting and its effects on the 'Owning Business Unit' field.  The tool can be used to disable record ownership across business units.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-security-cds.md#2025-04-20_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Displaying Usage Report Fields in Markdown Table\nDESCRIPTION: This code snippet shows a markdown table listing the fields and their descriptions found in the downloadable usage report from the Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-usage-costs.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field                  | Description            |\n|------------------------|------------------------|\n| Billing Policy ID       | The unique policy identifier |\n| Billing Policy | The display name of the billing policy |\n| Environment ID | The unique Power Platform environment identifier |\n| Environment Name | The display name of environment |\n| Environment Region | Not available during preview |\n| Caller ID | The unique identifier of the calling identity. This can be null or empty. |\n| Caller Type | The type of caller identity. Applicable values are User, Non Licensed User, Application, or Microsoft when the caller is Microsoft. |\n| Resource Type | The type of resource. Applicable values are Dataverse, Power Apps, and Power Automate. |\n| Resource ID | The unique resource identifier. Based on the Resource Type, this could be an app ID, Dataverse Organization ID, or Power Automate Flow ID. This can be null or empty.|\n| Meter Category | The top-level classification of the meter. This will be either Power Apps, Dataverse, or Power Platform request. See [meter details](pay-as-you-go-meters.md). |\n| Meter Subcategory | The detailed classification of the meter. For Power Apps, subcategory field is Launch. For Dataverse, subcategory fields are Database, File, and Log, based on the consumption type.\n| Usage Datetime | The date and time of when the usage was captured |\n| Entitled Quantity | The value of any free entitlement for the submeter |\n| Consumed Quantity | The usage for the submeter |\n| Overage Quantity | Calculated by reducing Consumed Quantity by Entitled Quantity | \n| Billed Quantity | Calculated by the unit of measure and reporting frequency |\n| Unit of measure | The measure that billing occurs to Azure for the submeter |\n| Status | Indicates if it's getting billed to Azure or if it's in Preview and not billed |\n```\n\n----------------------------------------\n\nTITLE: Structured Markdown List - SharePoint Site Record Editing Steps\nDESCRIPTION: Markdown formatted list showing the step-by-step process for editing SharePoint site records in the Power Platform admin center, including permissions requirements and configuration options.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/edit-existing-sharepoint-site-records.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [!INCLUDE[proc_permissions_system_admin](../includes/proc-permissions-system-admin.md)]  \n\n    Check your security role  \n\n   - [!INCLUDE[proc_follow_steps_in_link](../includes/proc-follow-steps-in-link.md)]  \n\n   - Don't have the correct permissions? Contact your system administrator.  \n\n1. In the Power Platform admin center, select an environment. \n\n2. Select **Settings** > **Integration** > **Document management settings**.  \n\n3. Select **[!INCLUDE[pn_SharePoint_short](../includes/pn-sharepoint-short.md)] Sites**.  \n\n4. Select the site record you want to modify, and then select **Edit**.\n```\n\n----------------------------------------\n\nTITLE: Examining SMTP Headers in Exchange Emails\nDESCRIPTION: This code snippet provides a sample of SMTP headers that are automatically inserted into emails sent via Power Automate flows. These headers help identify emails sent from the platform and can be used for monitoring or applying email policies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/secure-default-environment.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n x-ms-mail-application: Microsoft Power Automate; \n User-Agent: azure-logic-apps/1.0 (workflow 2321aaccfeaf4d7a8fb792e29c056b03;version 08585414259577874539) microsoft-flow/1.0\n x-ms-mail-operation-type: Send\n x-ms-mail-environment-id: 0c5781e0-65ec-ecd7-b964-fd94b2c8e71b \n```\n\n----------------------------------------\n\nTITLE: Setting Backup Retention Period in Power Platform using PowerShell\nDESCRIPTION: This PowerShell command allows administrators to extend the backup retention period for Power Platform environments to 14, 21, or 28 days, ensuring data security and availability during adverse events.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/managed-environment-activation.md#2025-04-20_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AdminPowerAppEnvironmentBackupRetentionPeriod -EnvironmentName <YourEnvironmentID> -NewBackupRetentionPeriodInDays 28\n```\n\n----------------------------------------\n\nTITLE: Disabling Category-Based Tracking via OrgDBOrgSetting\nDESCRIPTION: This snippet outlines the steps to disable the 'Tracked to Dynamics 365' Outlook category using the OrgDBOrgSettings tool. It involves extracting the tool, disabling the TrackCategorizedItems setting, and waiting for the changes to propagate across the organization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/use-outlook-category-track-appointments-emails.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Follow the instructions [in this article](https://support.microsoft.com/help/2691237/orgdborgsettings-tool-for-microsoft-dynamics-crm) for steps to extract the tool.\n2. After extracting the tool, disable the OrgDBOrgSetting **TrackCategorizedItems**.\n3. Disabling the OrgDBOrgSetting will remove the category **Tracked to Dynamics 365** on all Exchange mailboxes of the organization which have server-side synchronization enabled in about 15 minutes.\n```\n\n----------------------------------------\n\nTITLE: Checking Analysis Status via HTTP GET Request\nDESCRIPTION: This snippet demonstrates how to check the status of a Power Apps analysis job using an HTTP GET request. It includes the endpoint URL, required headers such as Accept, Content-Type, x-ms-correlation-id, and x-ms-tenant-id.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/check-status.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n\"GET [Geographical URI]/api/status/aaaa0000-bb11-2222-33cc-444444dddddd&api-version=1.0\nAccept: application/json\nContent-Type: application/json; charset=utf-8\nx-ms-correlation-id: aaaa0000-bb11-2222-33cc-444444dddddd\nx-ms-tenant-id: aaaabbbb-0000-cccc-1111-dddd2222eeee\"\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata Endpoint for Microsoft Entra Integration\nDESCRIPTION: Defines the metadata endpoint and issuer values required for SharePoint to Microsoft Entra ID integration. These variables are used in subsequent commands to establish trust.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n$metadataEndpoint = \"https://accounts.accesscontrol.windows.net/\" + $SPOContextId + \"/metadata/json/1\"  \n$acsissuer = \"00000001-0000-0000-c000-000000000000@\" + $SPOContextId  \n$issuer = \"00000007-0000-0000-c000-000000000000@\" + $SPOContextId  \n```\n\n----------------------------------------\n\nTITLE: Running the Diagnostics Tool URL in Dynamics 365\nDESCRIPTION: This URL pattern is used to access the built-in diagnostics tool that analyzes client-to-organization connectivity in Dynamics 365. Replace 'myorg.crm.dynamics.com' with your specific organization URL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/verify-network-capacity-throughput-clients.md#2025-04-20_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://myorg.crm.dynamics.com/tools/diagnostics/diag.aspx\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for Owner Field\nDESCRIPTION: Specifies the logical name for the Owner field in the Package Solutions entity. This field is required by the system and refers to the owner of the record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagesolutions.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`ownerid`\n```\n\n----------------------------------------\n\nTITLE: Following steps in link procedure in Power Platform\nDESCRIPTION: This is a reference to an included procedure for following steps in a link in Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-templates-articles.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[proc_follow_steps_in_link](../includes/proc-follow-steps-in-link.md)]\n```\n\n----------------------------------------\n\nTITLE: Environment Parameter Syntax\nDESCRIPTION: Shows the syntax for the environment parameter which can accept either a GUID or absolute HTTPS URL to specify the target Dataverse environment. If not specified, uses the active organization from current auth profile.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n--environment -env\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_requestassetid in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Request Asset Id field which stores the asset identifier in certification requests. This string field allows up to 100 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_requestassetid`\n```\n\n----------------------------------------\n\nTITLE: Self Operator Example in Power Platform\nDESCRIPTION: This snippet demonstrates the 'Self' operator to access properties of the current control in Power Platform, such as Self.Fill.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_13\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Self.Fill\"\n```\n\n----------------------------------------\n\nTITLE: Querying Acceleration Record - Power Platform - Formula\nDESCRIPTION: Returns acceleration as a composite record, providing full context of device motion metrics in an organized manner.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n**Acceleration**\n```\n\n----------------------------------------\n\nTITLE: Markdown Important Notice\nDESCRIPTION: Markdown formatting for an important notice about solution patches usage.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-layers-alm.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!IMPORTANT]\n> Using patches isn't recommended. More information: [Create solution patches](/powerapps/maker/common-data-service/solution-patches)\n```\n\n----------------------------------------\n\nTITLE: Enabling Personal Email Delegation Options\nDESCRIPTION: User must allow other Dynamics CRM users to send email on their behalf through personal settings. This involves checking a specific checkbox in personalization settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/send-email-on-behalf.md#2025-04-20_snippet_1\n\nLANGUAGE: dynamics-crm-config\nCODE:\n```\nSettings > Personalization Settings > Email tab > Check 'Allow other Microsoft Dynamics CRM users to send e-mail on your behalf'\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_requestname in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Request Name field which stores the name generated from request data. This string field allows up to 500 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_requestname`\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Welcome Message for Production Environment - Markdown\nDESCRIPTION: This snippet illustrates how to design a welcome message for production environments, emphasizing compliance with organizational policies and sharing controls. It guides users on team support and provides links for sharing apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/managed-environment-activation.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Contoso](https://i.ibb.co/SNSTCx3/something.png)\n## Welcome to HR Europe Environment\n\n### Before you start, here are some considerations\n\nUse this environment if you're on the HR team and your data is located in Europe.\n\nBefore you start, be aware of these limitations:\n\n1. You can only share apps with security groups. [Follow this process](#) to share your apps.\n1. The data in Dataverse is stored in Europe.\n1. You can only use social media connectors with read actions.\n1. If you need more connectors, [submit a request](#).\n\nIf you're not sure you're in the right place, follow [this guidance**](#).\n```\n\n----------------------------------------\n\nTITLE: Accessing User and Organization Settings in JavaScript for Microsoft Power Platform\nDESCRIPTION: Demonstrates various deprecated methods for accessing user and organization settings, along with their replacements. These changes move the methods to more specific contexts like globalContext.userSettings and globalContext.organizationSettings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated user settings methods\nXrm.Page.context.getTimeZoneOffsetMinutes()\nXrm.Page.context.getUserId()\nXrm.Page.context.getUserLcid()\nXrm.Page.context.getUserName()\nXrm.Page.context.getUserRoles()\n\n// Replacement user settings methods\nglobalContext.userSettings.getTimeZoneOffsetMinutes()\nglobalContext.userSettings.userId\nglobalContext.userSettings.languageId\nglobalContext.userSettings.userName\nglobalContext.userSettings.securityRoles\n\n// Deprecated organization settings methods\nXrm.Page.context.getIsAutoSaveEnabled()\nXrm.Page.context.getOrgLcid()\nXrm.Page.context.getOrgUniqueName()\n\n// Replacement organization settings methods\nglobalContext.organizationSettings.isAutoSaveEnabled\nglobalContext.organizationSettings.languageId\nglobalContext.organizationSettings.uniqueName\n```\n\n----------------------------------------\n\nTITLE: Defining OwningUser Property in Power Platform Entity\nDESCRIPTION: Defines the OwningUser property which stores the unique identifier for the user that owns the record. This is a lookup field targeting the systemuser entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\nowninguser\n```\n\n----------------------------------------\n\nTITLE: Uploading Pages Using PowerShell\nDESCRIPTION: This snippet executes a PowerShell command to upload pages to a specified Power Platform portal. It requires the path to the portal files and the model version to ensure compatibility. Expected input includes the file path and model version, with the output being the result of the upload process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/pages-upload-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac pages upload --path \"C:\\portals\\starter-portal\" --modelVersion 2\n```\n\n----------------------------------------\n\nTITLE: Task Entity Notes Section\nDESCRIPTION: Markdown section containing important notes about specific field behaviors and synchronization details for the Task entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/what-fields-synchronized-outlook.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n**Notes**  \n\n1. **Due Date:** Includes Date and Time. When a task is created in [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)], the system assigns the task a reminder time. Reminder information isn't synced from [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)] to customer engagement apps. However, when a task has Due Time set, it will be synchronized to reminder time in [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)].\n```\n\n----------------------------------------\n\nTITLE: Status State Code Configuration for PowerApps Checker\nDESCRIPTION: Defining state code options for PowerApps Checker configuration with active and inactive states and their associated default statuses\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_configurationforpowerapps.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatecode:\n  0: \n    Label: Active\n    DefaultStatus: 1\n  1:\n    Label: Inactive\n    DefaultStatus: 2\n```\n\n----------------------------------------\n\nTITLE: Power Platform CLI Command Groups Table in Markdown\nDESCRIPTION: A markdown table listing all available command groups in the Power Platform CLI and their descriptions. Includes commands for admin tasks, authentication, development tools, and various platform-specific operations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Command Group|Description|\n|---------|----------|\n|[pac admin](admin.md)|Work with your Power Platform Admin Account|\n|[pac application](application.md)|Commands for listing and installing available Dataverse applications from AppSource|\n|[pac auth](auth.md)|Manage how you authenticate to various services|\n|[pac canvas](canvas.md)|Operating with Power Apps .msapp files|\n|[pac catalog](catalog.md)|Commands for working with Catalog in Power Platform|\n|[pac connection](connection.md)|Commands for working with Dataverse connection.|\n|[pac connector](connector.md)|Commands for working with Power Platform Connectors|\n|[pac copilot](copilot.md)|Tools and utilities for copilot management|\n|[pac data](data.md)|Import and export data from Dataverse.|\n|[pac env](env.md)|Work with your Dataverse organization.|\n|[pac help](help.md)|Show help for the Microsoft Power Platform CLI.|\n|[pac modelbuilder](modelbuilder.md)|Code Generator for Dataverse APIs and Tables|\n|[pac package](package.md)|Commands for working with Dataverse package projects|\n|[pac pages](pages.md)|Commands for working with Power Pages website.|\n|[pac pcf](pcf.md)|Commands for working with Power Apps component framework projects|\n|[pac pipeline](pipeline.md)|Work with Pipelines|\n|[pac plugin](plugin.md)|Commands for working with Dataverse plug-in class library|\n|[pac power-fx](power-fx.md)|(Preview) Commands for working with Power Fx|\n|[pac solution](solution.md)|Commands for working with Dataverse solution projects|\n|[pac telemetry](telemetry.md)|Manage telemetry settings.|\n|[pac test](test.md)|(Preview) Execution of automated tests for a Power App|\n|[pac tool](tool.md)|Power Platform tools that can be installed and launched.|\n```\n\n----------------------------------------\n\nTITLE: Requesting License from Admin via Power Automate Pricing Page\nDESCRIPTION: Workflow for makers to request a Power Automate license through the official pricing page, enabling self-service license procurement\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/buy-licenses.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [Microsoft Power Automate Pricing](https://flow.microsoft.com/pricing/)\n2. Select \"Buy now\" for desired license\n3. Fill in required details\n4. Send license request to admin\n```\n\n----------------------------------------\n\nTITLE: Admin Portal Base URL\nDESCRIPTION: Base URL for accessing the Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/data-integration-privacy-dsr-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://admin.powerapps.com\n```\n\n----------------------------------------\n\nTITLE: Action Button in Markdown\nDESCRIPTION: A markdown div element creating a next step action button linking to a performance efficiency checklist.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/performance-efficiency/performance-planning.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"nextstepaction\"]\n> [Performance Efficiency checklist](checklist.md)\n```\n\n----------------------------------------\n\nTITLE: Checking Power Platform CLI Version - Bash\nDESCRIPTION: This script allows the user to check the installed version of Power Platform CLI in a terminal session for both Windows and Linux.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/introduction.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npac\n```\n\n----------------------------------------\n\nTITLE: Parsing Microsoft Entra Token Response Schema\nDESCRIPTION: JSON schema definition for parsing the Microsoft Entra token response in the Logic Apps workflow. Defines the structure for access_token, expires_in, ext_expires_in, and token_type properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\"\n        },\n        \"expires_in\": {\n            \"type\": \"integer\"\n        },\n        \"ext_expires_in\": {\n            \"type\": \"integer\"\n        },\n        \"token_type\": {\n            \"type\": \"string\"\n        }\n    },\n    \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example DLP URL Pattern Configuration in PowerShell\nDESCRIPTION: Demonstrates how to create a DLP policy that classifies specific URL patterns as Business, Non-business, and blocks all others using PowerShell.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/dlp-custom-connector-parity.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$UrlPatterns = @{\n  rules = @(\n    @{  \n      order = 1\n      customConnectorRuleClassification = \"Confidential\"\n      pattern = \"https://www.mycompany.com*\"\n    },\n    @{  \n      order = 2\n      customConnectorRuleClassification = \"General\"\n      pattern = \"https://www.bing.com*\"\n    },\n    @{  \n      order = 3\n      customConnectorRuleClassification = \"Blocked\"\n      pattern = \"*\"\n    }\n  )\n}\nNew-PowerAppPolicyUrlPatterns -TenantId $TenantId -PolicyName $PolicyId -NewUrlPatterns $UrlPatterns\n```\n\n----------------------------------------\n\nTITLE: Customizing System Dashboard\nDESCRIPTION: Instructions for customizing model-driven app system dashboards, including options for creating new system dashboards or personal dashboards.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/modify-components.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nTwo options are available to customize these dashboards:\n1. (Recommended option) In your development environment, create a **new system dashboard** and reuse the components from the CoE Starter Kit dashboards.\n1. Directly in your production environment, you can create a **personal dashboard** from the system dashboard and then share it with the team.\n```\n\n----------------------------------------\n\nTITLE: Documenting Power Platform CLI Command Group in Markdown\nDESCRIPTION: This snippet shows the structure for documenting a Power Platform CLI command group. It includes placeholders for the command group name, description, and individual commands.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Group-name [!INCLUDE [pre-release-label](./includes/pre-release-label-v1.md)]\n\n[!INCLUDE [pac-group](./includes/pac-reference-intro.md)]\n\n## pac group-name\n\n### Description\n\nProvide a brief description of the command group here.\n\n### Commands\n\n|Command|Description|\n|-------|-------------|\n|[pac group-name command-name](group-name-command-name.md)|Provides a description of command|\n```\n\n----------------------------------------\n\nTITLE: Adding User Intermediate Certificate to SAP - Steps\nDESCRIPTION: This sequence of commands provides the steps necessary to import a user intermediate certificate into the SAP system for proper user authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-certs.md#2025-04-20_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n1. Open t-code `STRUST` and double-click on `STRUST` to add the public certificate *users.cert.pem* file to the box.\n1. In SAP GUI, go to transaction code STRUST.\n1. If *SNC SAPCryptolib* has a red X, right-click and select **Create**.\n1. Select **SNC SAPCryptolib** and then double-click your *Own Certificate*.\n1. Select **Import Certificate** and choose your `signingUsersCert\\users.cert.pem` public certificate.\n1. Select **Add to Certificate List**.\n```\n\n----------------------------------------\n\nTITLE: Documenting Power Platform CLI Command Syntax in Markdown\nDESCRIPTION: This snippet demonstrates the structure for documenting a Power Platform CLI command, including syntax, parameters, and global options.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/catalog-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Syntax\n\n```bash\ncommand [options]\n```\n\n### Parameters\n\n`parameter`\n: Description of parameter\n\n### Global Options\n\n`--option`\n: Description of option\n```\n\n----------------------------------------\n\nTITLE: Checking Power Platform Solution with PAC CLI in PowerShell\nDESCRIPTION: This PowerShell command uses the Power Platform CLI (pac) to check a solution package. It specifies the path to the solution zip file, sets an output directory for results, and defines the geographical region for validation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-check-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution check --path c:\\Users\\Documents\\Solution.zip --outputDirectory c:\\samplepackage --geo UnitedStates\n```\n\n----------------------------------------\n\nTITLE: Structured Markdown List - SharePoint Site Configuration Options\nDESCRIPTION: Markdown formatted list detailing the configurable settings available when editing a SharePoint site record, including name, owner, description and URL type options.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/edit-existing-sharepoint-site-records.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n5. Modify any of the following settings:  \n\n   - **Name**. Add or change the name for the site..  \n\n   - **Owner**. By default, the person who created the site is listed as the owner of the site record.  \n\n   - **Description**. Add or change the description for the site. For example, specify what documents the site contains.  \n\n   - **URL Type**. Specify whether you want to add an absolute (full) or relative URL for the site.\n```\n\n----------------------------------------\n\nTITLE: Setting Width Property for Expand/Collapse in Power Fx\nDESCRIPTION: This code snippet sets the `Width` property of the `ExpandMenu` control based on whether it is expanded or collapsed. If `Self.IsExpanded` is true, the width is set to 200; otherwise, it is set to 46. These values can be adjusted based on the desired resolution of the app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/expandmenu.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Self.IsExpanded, 200, 46 )\n```\n\n----------------------------------------\n\nTITLE: Network Ports Configuration for Power Apps US Government\nDESCRIPTION: Lists the open network ports for outbound connections between Power Apps US Government and internet services, including HTTP, HTTPS, Secure SMTP, and Secure POP3.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connect-to-pop3-or-smtp-servers.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n80 HTTP\n443 HTTPS\n465 Secure SMTP\n995 Secure POP3\n```\n\n----------------------------------------\n\nTITLE: Defining OwningTeam Property in Power Platform Entity\nDESCRIPTION: Defines the OwningTeam property which stores the unique identifier for the team that owns the record. This is a lookup field targeting the team entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\nowningteam\n```\n\n----------------------------------------\n\nTITLE: Including PPAC Banner in Markdown\nDESCRIPTION: Markdown include statement for displaying the new Power Platform Admin Center banner\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/prevent-data-loss.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[new-PPAC-banner](~/includes/new-PPAC-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Creating User Mapping CSV File for Tenant Migration\nDESCRIPTION: CSV file structure for mapping users between source and destination tenants. The file must be named 'usermapping.csv' and contain Source and Destination columns with corresponding email addresses.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nSource,Destination\nSourceUser@sourcetenant.com,DestinationUser@targettenant.com\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Automate Usage Report Metrics in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the metrics available in the Power Automate Usage report, including total flows, total runs, successful runs, failed runs, and environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-analytics-reports.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Calculation  |Description  |\n|---------|----------|\n|Total flows      | Count of Cloud flows with usage events in the past 30 days        |\n|Total runs      | Total number of Cloud flow runs initiated in the past 30 days         |\n|Successful runs      | Count of successful Cloud flow runs completed in the past 30 days        |\n|Failed runs     | Total number of failed Cloud flow runs attempted in the past 30 days        |\n|Environments     | Count of Environments included in the current view        |\n```\n\n----------------------------------------\n\nTITLE: Plan Definition File Structure for Power Platform Licensing\nDESCRIPTION: This CSV file defines the structure of a plan definition file used in Power Platform licensing. It includes columns for ServiceID, Display name, and More info URL for different plan levels.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-add-license-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nServiceID,Display name,More info URL\ntest_isvconnect1599092224747.d365_isvconnect_prod_licensable.bronzeplan,Fabrikam Bronze Plan,http://www.microsoft.com\ntest_isvconnect1599092224747.d365_isvconnect_prod_licensable.silverplan,Fabrikam Silver Plan,http://www.microsoft.com\ntest_isvconnect1599092224747.d365_isvconnect_prod_licensable.goldplan,Fabrikam Gold Plan,http://www.microsoft.com\n```\n\n----------------------------------------\n\nTITLE: Provisioning Power Automate Trial License via PowerShell\nDESCRIPTION: PowerShell cmdlets for enabling or disabling self-assisted Power Automate trial licenses in an organization. Admins can control trial license assignment and removal.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/deep-dive-on-specific-license.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Example PowerShell cmdlet to manage Power Automate trials\n# Actual implementation details not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dataverse Parameters in Power Automate Flow\nDESCRIPTION: Expression syntax for retrieving deployment parameters from Dataverse trigger outputs and deployment stage run data. These expressions are used to pass solution artifact information to GitHub workflows.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/extend-pipelines-github-export.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nartifact_url: @{triggerOutputs()?['body/OutputParameters/ArtifactFileDownloadLink']}\nsolution_name: @{triggerOutputs()?['body/OutputParameters/ArtifactName']}\nuser_name: @{triggerOutputs()?['body/OutputParameters/DeployAsUser']}\ncommit_message: @{outputs('Retrieve_the_Deployment_Stage_Run')?['body/deploymentnotes']}\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_securityreview in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Security Review picklist field that displays the status of security review, with options like Not Started, In Progress, and Completed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_securityreview`\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataverse Action for Service Principal Deployment\nDESCRIPTION: This snippet describes the settings required for the Dataverse 'Perform an unbound action' step in a Power Automate flow used for service principal delegated deployments.  It specifies the Action Name, ApprovalComments, ApprovalStatus, and ApprovalProperties, and emphasizes the importance of using the service principal's connection for the UpdateApprovalStatus action. The comments and properties are passed to the deployment requester and admin, respectively.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/delegated-deployments-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"Action Name: UpdateApprovalStatus\nApprovalComments: Insert Dynamic Content. Comments are visible to the requestor of the deployment.\nApprovalStatus: 20 = approved, 30 = rejected\nApprovalProperties: Insert Dynamic Content. Admin information accessible from within the pipelines host.\"\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to a Number in Power Fx\nDESCRIPTION: Example of converting a JSON numeric field to a Number data type in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-parsejson.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nValue( ParseJSON(\"{ \\\"numbervalue\\\": 123.5 }\").numbervalue )\n```\n\n----------------------------------------\n\nTITLE: Constructing Single Sign-on URL Pattern for Power Platform Organizations\nDESCRIPTION: URL pattern for creating a single sign-on experience for organizations using federated identity with Active Directory. The pattern includes the organization name and federation service identifier.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-user-account-synchronization.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://<*yourCRMOrganizationName*>.crm.dynamics.com?whr=<*yourFederationServiceIdentifier*>\n```\n\n----------------------------------------\n\nTITLE: Defining TimeZoneRuleVersionNumber Attributes in Power Platform\nDESCRIPTION: This snippet describes the attributes associated with the TimeZoneRuleVersionNumber entity in the Power Platform. It defines the properties such as description, display name, logical name, and constraints on values. The attributes are crucial for understanding how time zone rules are handled in the environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_staticanalysispolicy.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**For internal use only.**|\n|DisplayName|**Time Zone Rule Version Number**|\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`timezoneruleversionnumber`|\n|RequiredLevel|None|\n|Type|Integer|\n|MaxValue|2147483647|\n|MinValue|-1|\n```\n\n----------------------------------------\n\nTITLE: Disambiguation Operator Pattern for Global Values\nDESCRIPTION: Pattern for accessing global values like data sources, collections, and context variables using the @ operator.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_32\n\nLANGUAGE: powerapp-formula\nCODE:\n```\n[@ObjectName]\n```\n\n----------------------------------------\n\nTITLE: Creating a Catalog Item - Power Platform Web API - Markdown\nDESCRIPTION: This snippet outlines the 'Create' operation for the Catalog Item, which allows for the creation of a new catalog item through a POST request to the /mspcat_applicationses endpoint. It's essential for adding new entries to the catalog.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `Create`<br />Event: True |`POST` /mspcat_applicationses<br />See [Create](/powerapps/developer/data-platform/webapi/create-entity-web-api) |[Create records](/power-apps/developer/data-platform/org-service/entity-operations-create#basic-create)|\n```\n\n----------------------------------------\n\nTITLE: Initializing Power Platform Connector with OAuth Template\nDESCRIPTION: Creates a new connector project with OAuth authentication template in the specified output directory. The command generates both script and settings files while using Microsoft Entra ID (formerly Azure AD) OAuth connection template.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-init-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac connector init `\n  --connection-template \"OAuthAAD\" `\n  --generate-script-file `\n  --generate-settings-file `\n  --outputDirectory \"contoso_Connector\"\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_requestssecurestoreaccess in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the boolean field that indicates if a publisher is requesting use of the secure store system for the application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_requestssecurestoreaccess`\n```\n\n----------------------------------------\n\nTITLE: Navigating to Dataverse in Power Platform Admin Center\nDESCRIPTION: Steps to access the Dataverse page in the Licenses section of Power Platform admin center to track tenant usage.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/capacity-storage.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com).\n1. In the navigation pane, select **Billing** > **Licenses** > **Dataverse**.\n```\n\n----------------------------------------\n\nTITLE: Querying Metered Connection Status - Power Platform - Formula\nDESCRIPTION: Determines if the connection is metered, essential for applications that manage data usage carefully.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n**Connection.Metered**\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Automate Maker Activity Report Metrics in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the metrics available in the Power Automate Maker Activity report, including active flows, created flows, makers, connections, and environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-analytics-reports.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Calculation  |Description  |\n|---------|----------|\n|Active flows      | Number of flows that have been triggered and executed within the last 30 days        |\n|Created      | Number of Power Apps created within the current view        |\n|Makers      |Total makers with activity registered in the last 30 days          |\n|Connections     | Count of unique connections referenced within the current view         |\n|Environments     | Count of Environments included in the current view        |\n```\n\n----------------------------------------\n\nTITLE: Field Definition: statecode in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Status state field of the Approval Request with options for Active and Inactive states.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n`statecode`\n```\n\n----------------------------------------\n\nTITLE: RegardingObjectId Property Definition in Power Platform\nDESCRIPTION: Definition of the RegardingObjectId property which identifies the object associated with an activity. This lookup field can target various entity types including accounts, contacts, and knowledge articles.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Unique identifier of the object with which the activity is associated.**|\n|DisplayName|**Regarding**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`regardingobjectid`|\n|RequiredLevel|None|\n|Type|Lookup|\n|Targets|account, adx_invitation, contact, interactionforemail, knowledgearticle, knowledgebaserecord, mspcat_applications, mspcat_certificationrequest, mspcat_installhistory, mspcat_packagelocales, mspcat_packages, mspcat_publisher, mspcat_templates, mspp_adplacement, mspp_pollplacement, mspp_publishingstatetransitionrule, mspp_redirect, mspp_shortcut, mspp_website|\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Welcome Message for Developer Environment - Markdown\nDESCRIPTION: This snippet provides a template for a welcome message targeted at developers using a development environment. It outlines sharing limitations and operational guidance to prevent the use of production assets.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/managed-environment-activation.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Contoso](https://i.ibb.co/SNSTCx3/something.png)\n## Welcome to a Developer Environment\n\n### Before you start, here are some considerations\n\nUse this environment if you're a developer and you're building solutions.\n\nBefore you start, be aware of these limitations:\n\n1. You can only share resources with up to two members of your team. If you need to share with more people, [submit a change request](#).\n1. Use resources only while you're developing a solution.\n1. Be mindful of the connectors and data you're using.\n1. If you need more connectors, [submit a request](#).\n\nIf you're not sure you're in the right place, follow [this guidance**](#).\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Block for Solution Size Limitations\nDESCRIPTION: Note specifying solution size limit and managed solution editing restrictions\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-concepts-alm.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\\n>\\n> - A solution can be up to 95 MB in size.\\n> - You can't edit components directly within a managed solution.\n```\n\n----------------------------------------\n\nTITLE: Defining VersionNumber Property in Power Platform Entity\nDESCRIPTION: Defines the VersionNumber property which stores the version number of the record. This is a BigInt field with a minimum value of -9223372036854775808 and maximum value of 9223372036854775807.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\nversionnumber\n```\n\n----------------------------------------\n\nTITLE: Type Compatibility in IfError Function for Power Apps\nDESCRIPTION: Demonstrates incorrect and correct approaches to handle type compatibility when using IfError to display custom error messages.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-iferror.md#2025-04-20_snippet_4\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nIfError( 1/x, \"#DIV/0!\" )\n```\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nIfError( Text( 1/x ), \"#DIV/0!\" )\n```\n\n----------------------------------------\n\nTITLE: Upper Function in Power Platform\nDESCRIPTION: Converts text to uppercase across multiple Power Platform environments such as canvas apps, Copilot Studio, and desktop flows\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-lower-upper-proper-applies-to.md#2025-04-20_snippet_1\n\nLANGUAGE: formula\nCODE:\n```\nUpper(text)\n```\n\n----------------------------------------\n\nTITLE: Markdown Notes: Additional Synchronization Details\nDESCRIPTION: Additional notes explaining the synchronization behavior for specific fields, particularly the Due Date field. It includes information on reminder time, auto-filling of dates, and the independent control of these features by Outlook/Exchange and customer engagement apps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/what-fields-synchronized-outlook.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**Notes**\n\n1. **Due Date:** Includes Date and Time. When a task is created in [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)], the system assigns the task a reminder time. Reminder information isn't synced from [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)] to customer engagement apps. However, when a task has Due Time set in customer engagement apps, it will be synchronized to reminder time in [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)].\n\n   If there's a Start Date value but no Due Date value in [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)]/[!INCLUDE[pn_Exchange](../includes/pn-exchange.md)], [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)]/[!INCLUDE[pn_Exchange](../includes/pn-exchange.md)] will auto fill the Due Date value with the Start Date whenever you change the Start Date directly in [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)]; if there's Start Date value but no Due Date value in customer engagement apps, customer engagement apps will auto fill the Due Date value with the Start Date. These are controlled by [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)]/[!INCLUDE[pn_Exchange](../includes/pn-exchange.md)] and customer engagement apps independently, not controlled by sync directions here.\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for Record Created On Field\nDESCRIPTION: Specifies the logical name for the Record Created On field in the Package Solutions entity. This stores when the record was migrated.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagesolutions.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`overriddencreatedon`\n```\n\n----------------------------------------\n\nTITLE: Copying Azure API Management Policy XML\nDESCRIPTION: This code snippet involves copying the Azure API Management policy from GitHub that integrates with SAP using an OAuth2 access token. It specifically targets SAP's requirements for token acceptance through AAD JWT tokens. Ensure access to the Azure portal and necessary permission to modify API policies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/entra-id-apim-oauth.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Copy the policy from the specified link -->\n<policy>\n    <inbound>\n        <base />\n        <!-- Additional policy elements to convert the token -->\n    </inbound>\n    <backend>\n        <base />\n    </backend>\n    <outbound>\n        <base />\n    </outbound>\n</policy>\n```\n\n----------------------------------------\n\nTITLE: Enabling Unified Interface Only in Power Platform Admin Center\nDESCRIPTION: Configuration steps to switch environments to Unified Interface Only mode, accessible through Power Platform admin center settings\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/enable-unified-interface-only.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to **Environments**\n2. Select an environment\n3. Navigate to **Settings** > **Product** > **Behavior**\n4. Turn on **Use Unified Interface only**\n```\n\n----------------------------------------\n\nTITLE: Storage Image Reference Block\nDESCRIPTION: Markdown image reference block showing storage capacity evolution diagram.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/whats-new-storage.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Evolution of data management.](media/storage-model-evolution.png \"Evolution of data management\")\n```\n\n----------------------------------------\n\nTITLE: Creating Catalog Submission with Power Platform CLI\nDESCRIPTION: Executes the command to create a new catalog submission using the Power Platform Command Line Interface (CLI). This command is used for initializing and submitting catalog entries within the Power Platform ecosystem.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/catalog-create-submission-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac catalog create-submission\n```\n\n----------------------------------------\n\nTITLE: Implementing Speech Recognition Using JavaScript in Canvas Apps\nDESCRIPTION: This JavaScript code implements speech recognition functionality using the Web Speech API. It initializes a speech recognition object, sets up event handlers for recognition results and errors, and configures continuous recognition with interim results.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-savedata-loaddata-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Run this function to initiate speech recognition\nfunction StartSpeech(contextObj, recordingTextbox, language) {\n  //Define the SpeechRecognition object\n  var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n  //Initialize the SpeechRecognition object for continuous listening \n  var recognition = new SpeechRecognition();\n  recognition.continuous = true;\n  recognition.lang = language;\n  recognition.interimResults = true;\n  recognition.maxAlternatives = 1;\n\n  //Set initial values in PowerApps\n  contextObj.OnStart = true;\n  contextObj.Error = \"\";\n  contextObj.IsSpeaking = true;\n  contextObj.StopRecognition = false;\n  contextObj.ListeningText = \"\";\n\n  recognition.onresult = function(event) {\n    //If no results, exit\n    if (event.results.length < 1) {\n      return;\n    }\n\n    var current = event.resultIndex;\n    var transcript = event.results[current][0].transcript;\n\n    //Check if done speaking or update interim\n    if (event.results[current].isFinal) {\n      if(recordingTextbox.Text !== \"\") {\n        recordingTextbox.Text = recordingTextbox.Text + \" \" + transcript;\n      }\n      else {\n        recordingTextbox.Text = transcript;\n      }\n\n      //Reset interim results\n      contextObj.ListeningText = \"\";\n    } \n    else { //Update interim results\n      contextObj.ListeningText = transcript;\n    }\n  };\n\n  //Error handling\n  recognition.onerror = function(event) {\n    contextObj.Error = \"Error occurred in recognition: \" + event.error;\n    contextObj.IsSpeaking = false;\n    recognition.stop();\n  }\n\n  recognition.onnomatch = function(event) {\n    contextObj.Error = \"I didn't recognize that.\"; \n    contextObj.ListeningText = \"\";\n  }\n\n  recognition.onend = function() {\n    if(contextObj.StopRecognition === true) {\n      contextObj.IsSpeaking = false;\n      contextObj.StopRecognition = false;\n      contextObj.ListeningText = \"\";\n    }\n    else {\n      //Try to restart if we're still supposed to be listening\n      if(contextObj.IsSpeaking) {\n        recognition.start();\n      }\n    }\n  };\n\n  // Start recognition\n  recognition.start();\n\n  //Return PowerApps context\n  return contextObj;\n}\n\n// Run this function to stop speech recognition\nfunction StopSpeech(contextObj) {\n  contextObj.StopRecognition = true;\n  return contextObj;\n}\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request to Retrieve Application Packages - HTTP\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Power Platform API to retrieve available application packages for a specified environment. It requires an environment ID and proper authentication credentials to execute successfully.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.powerplatform.com/appmanagement/environments/{environmentId}/applicationPackages?api-version=2022-03-01-preview\n```\n\n----------------------------------------\n\nTITLE: Add Environments to Environment Group in New Admin Center\nDESCRIPTION: This snippet describes how to manually add existing environments to an environment group using the new Power Platform Admin Center. It requires navigating to the Environment groups, selecting the target group, and then selecting environments to add.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Select **Manage** in the navigation pane.\n2. In the **Manage** pane, select **Environment groups**.\n3. Select the target group (the group you want to add environments into).\n4. Select the **Add environments** button in the command bar.\n5. Select one or more environments from the list.\n6. Select **Add**.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Service Principal Using PAC CLI\nDESCRIPTION: PowerShell command to create a service principal for a specified Power Platform environment using the pac admin utility. Requires environment ID as a parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-create-service-principal-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin create-service-principal  --environment <environment id>\n```\n\n----------------------------------------\n\nTITLE: Launching Package Deployer Tool with Power Platform CLI in PowerShell\nDESCRIPTION: This command downloads and launches the Package Deployer tool if it's the first time running, or simply launches it if it's already been downloaded. It utilizes the Power Platform CLI 'pac' command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-pd-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac tool pd\n```\n\n----------------------------------------\n\nTITLE: Example Web API Query for Email Correlation Method in Dynamics 365\nDESCRIPTION: This snippet shows a concrete example of a Web API query URL to retrieve the correlation method for a specific email in Dynamics 365, using a sample organization URL and email ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/email-message-filtering-correlation.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://contoso.crm.dynamics.com/api/data/v9.2/emails(fd372987-7fac-ed11-aad1-0022480819b5)?$select=subject,correlationmethod\n```\n\n----------------------------------------\n\nTITLE: Cloning a Basic Solution using PAC in PowerShell\nDESCRIPTION: This example demonstrates how to clone a solution named 'sampleSolution' to the current directory using the 'pac solution clone' command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-clone-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution clone --name sampleSolution\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Catalog Item - Power Platform Web API - Markdown\nDESCRIPTION: This snippet provides details on the 'Retrieve' operation for fetching a specific catalog item from the catalog using a GET request at the /mspcat_applicationses endpoint. This is crucial for accessing properties of a specific item.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| `Retrieve`<br />Event: True |`GET` /mspcat_applicationses(*mspcat_applicationsid*)<br />See [Retrieve](/powerapps/developer/data-platform/webapi/retrieve-entity-using-web-api) |[Retrieve records](/power-apps/developer/data-platform/org-service/entity-operations-retrieve)|\n```\n\n----------------------------------------\n\nTITLE: Adding Members to a Sales Territory Procedure in Markdown\nDESCRIPTION: Step-by-step instructions for adding members to a sales territory in Power Platform, including navigating to the territory management interface, selecting the specific territory, and using the member management functions to add users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/add-remove-territory-members.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [!INCLUDE[proc_settings_bus_management](../includes/proc-settings-bus-management.md)]  \n  \n2. Choose **Sales Territories**.  \n  \n3. In the list of territories, under **Territory Name**, double-click or tap the entry for the territory you want to add people to or remove people from.  \n  \n4. In the Navigation Pane, expand **Common** if necessary, and then choose **Members**.  \n  \n5. Follow the steps for the task you're performing:  \n  \n   **Add people to a sales territory**  \n  \n   1.  On the ribbon, choose **Add Members**, view the text in the **Message from webpage** dialog box, and then choose **OK** to close the dialog box.  \n  \n   2.  In the **Look Up Records** dialog box, in the **Search** text box, type in the name or a part of the name of the user you want to add to the sales territory, and then choose the **Start search** icon.  \n  \n   3.  In the list of records, select the people you want to add to the sales territory, and then tap or click **Add**.\n```\n\n----------------------------------------\n\nTITLE: ScheduledEnd Property Definition in Power Platform\nDESCRIPTION: Definition of the ScheduledEnd property which specifies the due date/end time of an activity. This DateTime field uses UserLocal behavior and DateAndTime format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Scheduled end time of the activity.**|\n|DisplayName|**Due Date**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`scheduledend`|\n|RequiredLevel|None|\n|Type|DateTime|\n|CanChangeDateTimeBehavior|False|\n|DateTimeBehavior|UserLocal|\n|Format|DateAndTime|\n|ImeMode|Inactive|\n|SourceTypeMask|0|\n```\n\n----------------------------------------\n\nTITLE: Data Policies Policy Commands (PowerShell)\nDESCRIPTION: This section refers to PowerShell commands that can be used to manage data loss prevention policies.  The referenced documentation likely contains specific PowerShell cmdlets and parameters needed to create, modify, and delete DLP policies programmatically.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/prevent-data-loss.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Use PowerShell commands\nSee [data policies policy commands](powerapps-powershell.md#data-loss-prevention-dlp-policy-commands).\n\n```\n\n----------------------------------------\n\nTITLE: Reading Data Export Service Failure Log Example\nDESCRIPTION: Example of a failure log entry showing a contact entity record synchronization failure. The log includes the entity type, record ID, notification time, change type, and the specific failure reason related to database size limitations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/replicate-data-microsoft-azure-sql-database.md#2025-04-20_snippet_0\n\nLANGUAGE: Output\nCODE:\n```\nEntity: contact, RecordId: 459d1d3e-7cc8-e611-80f7-5065f38bf1c1, NotificationTime: 12/28/2016 12:32:39 AM, ChangeType: Update, FailureReason: The database 'tempdb' has reached its size quota. Partition or delete data, drop indexes, or consult the documentation for possible resolutions.  \nThe statement has been terminated.\n```\n\n----------------------------------------\n\nTITLE: Create Environments in a Group - Classic Admin Center\nDESCRIPTION: This snippet describes how to manually create a new environment within a specified environment group using the classic Power Platform Admin Center. It involves navigating to the Environments page, selecting New, choosing a group, and entering environment details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Go to the **Environments** page.\n2. Select **New** in the command bar.\n3. Select a **group** for your created environment.\n4. Enter the other details.\n5. Select **Save**.\"\n```\n\n----------------------------------------\n\nTITLE: Plan Mapping File Structure for Power Platform Licensing\nDESCRIPTION: This CSV file illustrates the structure of a plan mapping file used in Power Platform licensing. It maps Service IDs to Component names, showing which components are included in each service plan.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-add-license-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nService ID,Component name\ntest_isvconnect1599092224747.d365_isvconnect_prod_licensable.bronzeplan,crf36_BronzeApp\ntest_isvconnect1599092224747.d365_isvconnect_prod_licensable.silverplan,crf36_BronzeApp\ntest_isvconnect1599092224747.d365_isvconnect_prod_licensable.silverplan,crf36_SilverApp\ntest_isvconnect1599092224747.d365_isvconnect_prod_licensable.goldplan,crf36_BronzeApp\ntest_isvconnect1599092224747.d365_isvconnect_prod_licensable.goldplan,crf36_SilverApp\ntest_isvconnect1599092224747.d365_isvconnect_prod_licensable.goldplan,crf36_GoldApp\n```\n\n----------------------------------------\n\nTITLE: Power Platform CLI Background Operations States\nDESCRIPTION: Command syntax showing valid background operation state values for environment configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/admin.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- `Enabled`\n- `Disabled`\n```\n\n----------------------------------------\n\nTITLE: Viewing Mailbox-Specific Alerts in Power Platform Admin Center\nDESCRIPTION: This snippet outlines the steps to view alerts specific to a mailbox in the Power Platform admin center. It involves navigating through the settings to access the mailbox records and their associated alerts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/monitor-email-processing-errors.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the Power Platform admin center, select an environment. \n2. Select **Settings** > **Email** > **Mailboxes**. \n3.  Open a mailbox record, and on the left navigation bar, under **Common**, click or tap **Alerts**.\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_requestassetversion in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Request Asset Version field which stores version information for assets in certification requests. This string field allows up to 100 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_requestassetversion`\n```\n\n----------------------------------------\n\nTITLE: Creating a Localized Dialog Box in Dataverse\nDESCRIPTION: Step-by-step instructions for creating a dialog box that will display in a specific language based on the user's language preference. This process involves installing language packs, changing personal settings, and adding the localized dialog to a solution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/create-solutions-support-multiple-languages.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Install the appropriate language pack and provision the language.\n\n    For more information, see [Language Pack Installation Instructions](/previous-versions/dynamicscrm-2016/deployment-administrators-guide/hh699674(v=crm.8)).\n\n2. Change your personal options to specify the **User Interface Language** for the language you want for the dialog.\n\n3. Navigate to **Settings** and, in the **Process Center** group, select **Processes**.\n\n4. Click **New** and create the dialog in the language that you specified.\n\n5. After you have created the dialog, change your personal options to specify the organization base language.\n\n6. While using the organization base language you can navigate to the **Solutions** area in **Settings** and add the localized dialog as part of a solution.\n```\n\n----------------------------------------\n\nTITLE: Using Sqrt Function with Table in Power Fx\nDESCRIPTION: Example of using the Sqrt function with a table of values to calculate the square root of each number in the table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-numericals.md#2025-04-20_snippet_10\n\nLANGUAGE: Power Fx\nCODE:\n```\nSqrt( ValueTable )\n```\n\n----------------------------------------\n\nTITLE: Opening System Settings Dialog Box in Microsoft Power Platform\nDESCRIPTION: This snippet outlines the steps to access the System Settings dialog box in the Microsoft Power Platform web app. It includes instructions for checking permissions and navigating to the Mobile Client tab.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-mobile-client-tab.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [!INCLUDE[proc_permissions_system_admin_and_customizer](../includes/proc-permissions-system-admin-and-customizer.md)]  \n\n    Check your security role  \n\n   - [!INCLUDE[proc_follow_steps_in_link](../includes/proc-follow-steps-in-link.md)]  \n\n   - [!INCLUDE[proc_dont_have_correct_permissions](../includes/proc-dont-have-correct-permissions.md)]  \n\n2. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n3. Select **Settings** > **Administration**.\n\n4. Select the **System Settings** > **Mobile Client** tab.\n```\n\n----------------------------------------\n\nTITLE: Extracting SAP Crypto Library Using SAPCAR\nDESCRIPTION: PowerShell command to extract the SAP Common Crypto Library using SAPCAR utility.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/secure-network-communications.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n.\\SAPCAR_xxxx.EXE -xvf .\\SAPCRYPTOLIBP_xxxx.SAR -R .\\.\\libs\\sapcryptolib\n```\n\n----------------------------------------\n\nTITLE: SMTP Header Example with Power Automate Application Identifier\nDESCRIPTION: Example of SMTP header format inserted by Power Automate into email messages. The header includes the application identifier 'Microsoft Power Automate' in the 'x-ms-mail-application' field, along with workflow information in the User-Agent field.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/block-forwarded-email-from-power-automate.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n**x-ms-mail-application: Microsoft Power Automate**; User-Agent: \nazure-logic-apps/1.0 (workflow afa0fb167803450aa650267e95d43287; version \n08586093372199532216) microsoft-flow/1.0 \nx-ms-mail-operation-type: Forward \n```\n\n----------------------------------------\n\nTITLE: Using RequestHide Function in SharePoint Forms\nDESCRIPTION: The RequestHide function is used to programmatically hide a SharePoint form. It takes no parameters and is typically used in the OnSuccess property of SharePoint forms. The function only works with SharePoint form integration and is not required for OnCancel events as SharePoint automatically handles form hiding on cancel.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-requesthide.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerFx\nCODE:\n```\nRequestHide()\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for timezoneruleversionnumber Field\nDESCRIPTION: Defines the logical name for the Time Zone Rule Version Number field, which is for internal use only. This is an integer field with maximum value 2147483647 and minimum value -1.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`timezoneruleversionnumber`\n```\n\n----------------------------------------\n\nTITLE: RequiredAttendees Property Definition in Power Platform\nDESCRIPTION: Definition of the RequiredAttendees property which lists required attendees for an activity. This PartyList field can target accounts, contacts, knowledge articles, and other user-related entities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**List of required attendees for the activity.**|\n|DisplayName|**Required Attendees**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`requiredattendees`|\n|RequiredLevel|None|\n|Type|PartyList|\n|Targets|account, contact, knowledgearticle, queue, systemuser, unresolvedaddress|\n```\n\n----------------------------------------\n\nTITLE: Permissions Table for Billing Policy Management\nDESCRIPTION: Markdown table showing role-based permissions for creating, editing, and linking billing policies in Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-set-up.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Role**  | **Create a billing policy?** | **Edit a billing policy?**   | **Link environments to a billing policy?**   |\n|--------|----------|-------|-----|\n| Environment admin    | Yes  | Yes, for billing policies the admin created. | Yes, for billing policies the admin created and for environments in which they're admins. |\n| Power Platform admin | Yes  | Yes, for all billing policies in the tenant. | Yes, for all environments in the tenant.  |\n| Global admin         | Yes  | Yes, for all billing policies in the tenant. | Yes, for all environments in the tenant.   |\n| Dynamics 365 admin           | Yes  | Yes, for all billing policies in the tenant. | Yes, for all environments in the tenant.    |\n```\n\n----------------------------------------\n\nTITLE: Wizard Pattern Implementation with SubwayNav Component\nDESCRIPTION: Details the usage of the SubwayNav component from the Creator Kit to implement a wizard pattern, breaking down complex processes into smaller, sequential steps for improved user experience.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/information-architecture.md#2025-04-20_snippet_3\n\nLANGUAGE: Power Platform\nCODE:\n```\n\"[SubwayNav component](/power-platform/guidance/creator-kit/subwaynav)\"\n```\n\n----------------------------------------\n\nTITLE: Task Definition Table Schema\nDESCRIPTION: Defines the schema for tracking Power Platform administrative tasks, including attributes like name, description, frequency, duration, and personas involved\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/admin-tasks-component.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Column | Value type | Description |\n|---|---|---|\n| Name | Text | A short description of the task, for example \"Create an environment\" |\n| Task description | Text | A detailed description of the task |\n| Task documentation link | Text (URL format) | The URL of documentation about the task |\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for Owner Type Field\nDESCRIPTION: Specifies the logical name for the Owner Type field in the Package Solutions entity. This system-required field indicates whether the owner is a user or team.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagesolutions.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`owneridtype`\n```\n\n----------------------------------------\n\nTITLE: SortDate Property Definition in Power Platform\nDESCRIPTION: Definition of the SortDate property which indicates the date and time by which activities are sorted. This DateTime field uses UserLocal behavior and DateAndTime format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Shows the date and time by which the activities are sorted.**|\n|DisplayName|**Sort Date**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`sortdate`|\n|RequiredLevel|None|\n|Type|DateTime|\n|CanChangeDateTimeBehavior|False|\n|DateTimeBehavior|UserLocal|\n|Format|DateAndTime|\n|ImeMode|Inactive|\n|SourceTypeMask|0|\n```\n\n----------------------------------------\n\nTITLE: File-to-Path Mapping XML Configuration\nDESCRIPTION: This snippet details the configuration for mapping a file to a directory path, with specifications for wildcard usage. It emphasizes the requirements for both the source file map and the destination path.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-packager-tool.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<FileToPath map=\"assembly.dll\" to=\"c:\\path\\folder\" />\n<FileToPath map=\"PluginAssemblies\\**\\this.dll\" to=\"..\\..\\Plugins\\bin\\**\" />\n<FileToPath map=\"*.jpg\" to=\"%SRCBASE%\\CrmPackage\\WebResources\\JPG format\\\" />\n<FileToPath map=\"*.*\" to=\"..\\..\\%ARCH%\\%TYPE%\\drop\" />\n```\n\n----------------------------------------\n\nTITLE: Many-to-One Relationship Definition\nDESCRIPTION: Definition of many-to-one relationships between Activity Pointer and related entities like applications and certification requests.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|ReferencedEntity|`mspcat_applications`|\n|ReferencedAttribute|`mspcat_applicationsid`|\n|ReferencingAttribute|`regardingobjectid`|\n```\n\n----------------------------------------\n\nTITLE: Disabling a Signal in Power-FX\nDESCRIPTION: The Disable function is intended to turn off a specific signal in Power-FX. Similar to the Enable function, it requires a signal parameter and does not return any value. This function is also used exclusively in behavior formulas.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-enable-disable.md#2025-04-20_snippet_1\n\nLANGUAGE: Power-FX\nCODE:\n```\n\"Disable( _Signal_ )\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Include Directive\nDESCRIPTION: Include directive for inserting a banner component from an external markdown file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-service-health.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[new-PPAC-banner](~/includes/new-PPAC-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Platform environment information using PowerShell\nDESCRIPTION: This PowerShell command `pac env who` retrieves and displays information about the current Power Platform environment. It assumes that the Power Platform CLI (`pac`) is installed and configured correctly on the user's system. The output will show details of the active environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-who-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac env who\n```\n\n----------------------------------------\n\nTITLE: Icon Image Reference in Markdown\nDESCRIPTION: Markdown syntax for displaying tradeoff icons throughout the document using image references.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/reliability/tradeoffs.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> :::image type=\"icon\" source=\"../_images/trade-off.svg\":::\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronization Filter Criteria Examples\nDESCRIPTION: Markdown examples showing the interface elements and structure for creating synchronization filters in customer engagement apps. Includes screenshots and UI navigation instructions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/choose-records-synchronize-dynamics-365-outlook-exchange.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Online synchronization filters.](media/online-sync-filters-dialog-box2.png \"Online synchronization filters\")\n\n![Sync or offline filters criteria grid.](media/sync-filters-criteria-row.png \"Sync or offline filters criteria grid\")\n\n![Sync filters dialog box showing grouped criteria.](media/sync-filters-group-criteria.png \"Sync filters dialog box showing grouped criteria\")\n```\n\n----------------------------------------\n\nTITLE: Defining System Users Table in Markdown\nDESCRIPTION: This markdown table defines system users, including their full name, username, purpose, and assigned security role. It provides essential information about support users and delegated admins in the Microsoft Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-application-users.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Full name  |User name  |Purpose  | Security role assigned |\n|-----------|-----------|---------|------------------------|\n| Support user |crmoln@microsoft.com |To allow Microsoft support staff to have restricted/limited access to any customer environment for customer support. |Support user (doesn't have privilege to customer data) |\n| Delegated admin |crmoln2@microsoft.com |See [For partners: the Delegated admin](for-partners-delegated-administrator.md). |System admin |\n```\n\n----------------------------------------\n\nTITLE: Markdown Include Statement\nDESCRIPTION: Markdown include directive for adding a PPAC banner to the documentation\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-overview.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[new-PPAC-banner](~/includes/new-PPAC-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Exporting Power Apps User Details Using PowerShell\nDESCRIPTION: Users export their Power Apps notifications, user settings, and app settings using Get-AdminPowerAppsUserDetails. The output is directed to a specified JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount  \nGet-AdminPowerAppsUserDetails -OutputFilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing API Performance Over Time\nDESCRIPTION: This Kusto query summarizes API performance metrics over time, allowing visualization of gradual or sudden performance changes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-dataverse.md#2025-04-20_snippet_5\n\nLANGUAGE: kusto\nCODE:\n```\nrequests\n| where url == \"https://<URLHere>\"\n| summarize avg(duration), count() by bin(timestamp, 1h)\n| render timechart\n```\n\n----------------------------------------\n\nTITLE: Testing Power Fx Function Consistency - C#\nDESCRIPTION: This C# code sample defines a unit test that checks the consistency of the PowerFxFunctions.json file against the actual implemented functions in the Power Fx engine. This test helps the documentation team ensure that the documented functions remain in sync with the implementation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/funcjson/README.txt#2025-04-20_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing FluentAssertions;\nusing FluentAssertions.Json;\n\nusing Microsoft.PowerFx;\nusing Microsoft.PowerFx.Types;\n\nusing Newtonsoft.Json;\n\nusing Xunit;\n\nnamespace Microsoft.YourPowerProduct.UnitTests.PowerFx;\n\n// Documentation team needs to know which Power Fx functions are actually supported.\n// These are listed in the PowerFxFunctions.json file, which is then provided to docs team.\n// This test ensures that file is actually consistent with the current implementation. \npublic class PowerFxDocumentationTests\n{\n    [Fact]\n    public void TestDocumentation()\n    {\n        // Get same engine that we use during actual eval. \n        Engine engine = new PowerFxEvalService(null).Engine;\n\n        var engineDoc = new EngineDocumentation()\n        {\n            FunctionNames = engine.GetAllFunctionNames().OrderBy(x => x).ToArray(),\n\n            MinVersion = RecalcEngine.AssemblyVersion,\n\n            // This is where we can describe any additional objects that your project may inject into\n            // expressions global scope. Like PowerApps \"Host\"  or MCS's \"Env\". \n            HostObjects = new string[]\n            {                    \n            }\n        };\n\n        string expectedJson = JsonConvert.SerializeObject(engineDoc, Formatting.Indented);\n\n        // If this test fails, then PowerFX has probably added a new function\n        // If this is the case, just update the json file\n        // If some function was removed, then this should be considered as breaking changes and we should reach out to Power Fx folks.\n\n        // If there are functions that are missing, they may need to be enabled on the configuration. Reach out to Power Fx folks for how to do that. \n\n        string actualJson = new StreamReader(\n                typeof(PowerFxDocumentationTests).Assembly.GetManifestResourceStream(\"Microsoft.YourPowerProduct.UnitTests.PowerFx.PowerFxFunctions.json\")).ReadToEnd().Trim();\n\n        Assert.Equal(expectedJson, actualJson);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Color Value Example\nDESCRIPTION: Example showing how color values are represented in hexadecimal format with alpha channel.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"#102030ff\"\n```\n\n----------------------------------------\n\nTITLE: Listing Applications in Power Platform - CMD\nDESCRIPTION: This snippet illustrates how to list applications available for installation in a specified environment using the Power Platform CLI. The command requires an environment ID to correctly retrieve the relevant applications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\npac application list --environment-id \"YOUR_ENVIRONMENT_ID_HERE\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Environment using Input File with pac admin create in PowerShell\nDESCRIPTION: This snippet demonstrates how to create an environment using the pac admin create command with configuration data from a JSON input file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-create-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npac admin create --input-file C:\\config.json\n```\n\n----------------------------------------\n\nTITLE: Output of Listing All Supported Dataverse Database Templates\nDESCRIPTION: Example output displaying the list of supported Dataverse database templates, showing template names, locations, display names and whether they are disabled.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-app-templates-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nTemplate Name               Template Location Template Display Name Is Disabled\nD365_CDSSampleApp           unitedstates      Sample App            False\nD365_CustomerService        unitedstates      Customer Service      True\nD365_CustomerServicePro     unitedstates      Customer Service Pro  True\nD365_DeveloperEdition       unitedstates      Developer Edition     False\nD365_FieldService           unitedstates      Field Service         True\nD365_Guides                 unitedstates      Guides                True\nD365_PowerFrameworkTemplate unitedstates      Power Framework       False\nD365_ProjectOperations      unitedstates      Project Operations    True\nD365_RemoteAssist           unitedstates      Remote Assist         True\nD365_Sales                  unitedstates      Sales Enterprise      True\nD365_SalesPro               unitedstates      Sales Pro             True\nD365_SmbMarketing           unitedstates      SMB Marketing         True\n```\n\n----------------------------------------\n\nTITLE: License Plan Disclaimer Note\nDESCRIPTION: Markdown note block explaining that Power Automate Process and Hosted Process licenses only cover flows/machines and not users, with reference to Premium RPA features documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/faqs.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\\n> The Power Automate Process and Hosted Process licenses only license the flows and/or machines and not the user. The Premium user plan is required for RPA developers to build and manage desktop flows on the Power Automate portal. Learn more about the Premium RPA features that come with the Premium user plan in [Premium RPA features](/power-automate/desktop-flows/premium-features).\n```\n\n----------------------------------------\n\nTITLE: Activity Pointer Properties Definition\nDESCRIPTION: Entity property definitions including data types, validation rules, and display settings for the Activity Pointer entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|LogicalName|`activitypointer`|\n|Type|Entity|\n|ImeMode|Disabled|\n```\n\n----------------------------------------\n\nTITLE: Configuring Rules for Environment Groups in New Admin Center - Markdown\nDESCRIPTION: This snippet describes the process for configuring rules after creating an environment group in the Power Platform Admin center. It covers the steps including logging in, selecting the group, and publishing rules.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to [Power Platform Admin center](https://admin.powerplatform.microsoft.com/) as a [Power Platform tenant administrator](use-service-admin-role-manage-tenant.md).\n1. Select **Manage** in the navigation pane.\n1. In the **Manage** pane, select **Environment groups**.\n1. On the **Environment groups** page, select the group you created.\n1. Select the **Rules** tab for that group. You see a list of available rules.\n1. Select a rule to open its configuration panel. Adjust it as needed, then **Save** the rule.\n    Repeat this step for all the rules you want to configure in this group.\n1. Select the **Publish rules** button in the command bar.\n```\n\n----------------------------------------\n\nTITLE: Operation Status Response JSON in Power Platform\nDESCRIPTION: Example JSON response from polling the operation status endpoint. Contains fields like status, timestamps, and error information to monitor installation progress.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"NotStarted\",\n  \"createdDateTime\": \"2022-03-22T20:05:58.9414573Z\",\n  \"lastActionDateTime\": null,\n  \"error\": null,\n  \"statusMessage\": null,\n  \"operationId\": \"523b51a8-6af4-40cd-aa7d-86bddfa6697b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Designating Hero App in Power Apps with PowerShell\nDESCRIPTION: Marks an app as a Hero app, which places it at the top of the list in the Power Apps mobile player. This requires the app to be a featured app first. Dependencies include PowerShell and Power Apps admin privileges.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerApp 'DisplayName' | Set-AdminPowerAppAsHero\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Details in Power Platform\nDESCRIPTION: Instructions for entering or updating site information including name, contact details, address, and time zone settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-edit-site.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n4. Under **General**, in the **Name** text box, specify or edit the name for the site.  \n  \n    You can also enter or update contact information for the site.  \n  \n5. Under **Primary Address**, enter or update address details.  \n  \n6. In the **Time Zone** box, ensure that the default time zone is appropriate for the site.  \n  \n7. Choose **Save and Close**.\n```\n\n----------------------------------------\n\nTITLE: StateCode Property Definition with Options in Power Platform\nDESCRIPTION: Definition of the StateCode property which specifies the status of an activity (Open, Completed, Canceled, or Scheduled). This State field includes predefined option values and is system required.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Status of the activity.**|\n|DisplayName|**Activity Status**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`statecode`|\n|RequiredLevel|SystemRequired|\n|Type|State|\n|DefaultFormValue|0|\n|GlobalChoiceName|`mspcat_installactivity_statecode`|\n\n#### StateCode Choices/Options\n\n|Value|Details|\n|---|---|\n|0|Label: **Open**<br />DefaultStatus: 1<br />InvariantName: `Open`|\n|1|Label: **Completed**<br />DefaultStatus: 2<br />InvariantName: `Completed`|\n|2|Label: **Canceled**<br />DefaultStatus: 3<br />InvariantName: `Canceled`|\n|3|Label: **Scheduled**<br />DefaultStatus: 4<br />InvariantName: `Scheduled`|\n```\n\n----------------------------------------\n\nTITLE: Business Value Admin Configuration Table\nDESCRIPTION: Table outlining the key tasks and descriptions for populating the Business Value Admin app with organizational data and strategic objectives.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-business-value-toolkit.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Task** | **Description** |\\n|----------------------------------------|----------------------------------------------------------------------------------------------------------|\\n| Set up business units | Use the Business Value Admin app and select the **Business units** page. Add the teams, departments, and business units that represent your organization and hierarchy. |\\n| Add strategic objectives | Work closely with the various teams and departments to capture the objectives and how they're measuring progress towards them. This is a crucial component of the sample solution. Assign strategic objectives to the relevant team or department. |\\n| Add the average cost of things | This data is used to calculate the tangible impact an app is having against a strategic objective. Work with your teams and departments to add this data. This data is assigned to business units. |\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for owningbusinessunit Field\nDESCRIPTION: Defines the logical name for the Owning Business Unit field, which represents the unique identifier for the business unit that owns the record. This is a read-only lookup field that targets businessunit.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`owningbusinessunit`\n```\n\n----------------------------------------\n\nTITLE: Creating an Environment Group in New Admin Center - Markdown\nDESCRIPTION: This snippet provides a step-by-step guide for Power Platform tenant administrators to create a new environment group using the Power Platform Admin center. It details signing in, navigating the menus, and filling out required fields for the environment group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform Admin center](https://admin.powerplatform.microsoft.com/) as a [Power Platform tenant administrator](use-service-admin-role-manage-tenant.md).\n1. Select **Manage** in the navigation pane.\n1. In the **Manage** pane, select **Environment groups**.\n1. On the **Environment groups** page, select **New group**.\n1. In the **Create group** pane that appears:\n   1. Add a name for your group in the **Name** field such as **Personal Productivity**.\n   1. Add a brief description of the group in the **Description** field.\n   1. Select **Create**.\n```\n\n----------------------------------------\n\nTITLE: Enabling Hybrid Experience in System Settings\nDESCRIPTION: Steps to enable the hybrid experience in System Settings of Microsoft Power Platform. This allows embedding of certain legacy dialogs in the Unified Interface browser client.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/enable-hybrid-experience.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n2. Select **Settings** > **Administration**.\n\n3. Select **System Settings**, and then select the **General** tab. \n\n4. Set **Enable embedding of certain legacy dialogs in Unified Interface browser client** to **Yes**.\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relationship Definition\nDESCRIPTION: Definition of relationship configuration between entities including reference navigation properties and menu configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicy.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nReferencingEntity: `mspcat_certificationrejectionappliedpolicy`\nReferencingAttribute: `mspcat_policycode`\nReferencedEntityNavigationPropertyName: `mspcat_CertificationRejectionAppliedPol`\n```\n\n----------------------------------------\n\nTITLE: Interacting with HTML Web Resources in JavaScript for Microsoft Power Platform\nDESCRIPTION: Shows the deprecated parent.Xrm method for interacting with HTML web resources and its replacements. Options include using Power Apps component framework, the getContentWindow method, or parent.Xrm in specific scenarios.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nparent.Xrm\n\n// Replacements\n// Option 1: Use Power Apps component framework\n\n// Option 2: On forms, use getContentWindow method\nwebResourceControl.getContentWindow()\n\n// Option 3: If getContentWindow doesn't work\nparent.Xrm // (in HTML web resource)\nopener.Xrm // (if opened in new window)\n```\n\n----------------------------------------\n\nTITLE: Defining the Referenced Attribute in Catalog Item File relationship\nDESCRIPTION: The attribute name referenced in the many-to-one relationship between Catalog Item File and Catalog Item, using the mspcat_applicationsid attribute.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_catalogitemfile.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_applicationsid`\n```\n\n----------------------------------------\n\nTITLE: Options for Adding Existing Tables to a Segmented Solution\nDESCRIPTION: List of the four available options when adding an existing table to a segmented solution, detailing what each option includes and when to use them.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/segmented-solutions-alm.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. **No objects selected**. When you don't select any objects or metadata, the minimal table information is added to the solution. Therefore, apart from the friendly name, table attributes (metadata), or components won't be included. This is the default option so no objects are added when you select **Add** without any other selections when adding an existing component.\n2. **Edit objects**. You can segment your solution by individually selecting **Edit objects**, and then select each component that's associated with the table, such as columns, relationships, business rules, views, forms, and charts. Use the select components option to select only the components that you added or changed with the table, such as a new custom column or adding a form.\n3. **Include table metadata**. This option includes no components&mdash;such as columns, forms, views, or related tables&mdash;but does include all the metadata associated with the table. Metadata includes the table properties, such as auditing, duplicate detection, and change tracking.\n4. **Include all objects**. This option includes all components and metadata associated with the table. It can include other tables or table components such as business process flows, reports, connections, and queues. You should only use this option when you're distributing an unmanaged table that doesn't exist in the target environment. Notice that after you select this option, you can't undo it. To segment the solution, you must remove the table from the solution and readd it by selecting only the changed or new components.\n```\n\n----------------------------------------\n\nTITLE: Working with Grid Data in JavaScript for Microsoft Power Platform\nDESCRIPTION: Shows deprecated methods for working with grid data and their replacements. These changes unify the interface of GridRow with formContext and GridRowData with formContextData.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nGridRow.getData()\nGridRowData.getEntity()\n\n// Replacement\nGridRow.data\nGridRowData.entity\n```\n\n----------------------------------------\n\nTITLE: Power Platform Admin Center Navigation Steps\nDESCRIPTION: Markdown-formatted steps for accessing and viewing logs in the Power Platform admin center monitoring interface. Includes both direct log access and resource-detail access methods.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/monitoring/logs.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/).\n1. In the navigation pane, select **Monitor**.\n1. In the **Monitor** section, select **Logs**.\n1. On the **Logs (preview)** page, follow these steps:\n\n    1. Select a resource.\n    1. Select a metric.\n    1. View the associated logs.\n\n1. To view logs from resource details, follow these steps:\n\n    1. Scroll to the desired metric.\n    1. Select **See logs**.\n```\n\n----------------------------------------\n\nTITLE: Displaying Personal Options for Email Tracking in Markdown\nDESCRIPTION: This markdown snippet shows an image of the Personal Options interface for configuring email tracking settings in Dynamics 365.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/track-sent-folder-items.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"mx-imgBorder\"] \n> ![Screenshot of Personal Options for tracking email](media/set-personal-options-track-email.png \"Email tracking setting\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - System Settings Configuration Options\nDESCRIPTION: Markdown table documenting system settings configuration options for form fields and auto-save functionality in Microsoft Power Platform, including default values and behavioral descriptions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-general-tab.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                                                 Settings                                                  |escription|\n|-----------------------------------------------------------------------------------------------------------||\n|                         **Allow text wrapping in form fields labels and values**                          |efault: Yes. Choose **Yes** to allow text wrapping.<br /> Note: This setting is only supported on Classic Interface and not on Unified Interface|\n|                               **Select the default save option for forms**                                ||\n|                                       Enable auto save on all forms                                       |f Yes, which is the default, after a record is created (initially saved), any changes made to a form will automatically be saved thirty seconds after the change is made. The 30-second period starts again after a change is made. If no changes are made, the automatic save doesn't happen.<br /><br /> [!INCLUDE[proc_more_information](../includes/proc-more-information.md)] [Manage auto-save](/powerapps/maker/model-driven-apps/manage-auto-save|\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Field Using Display Name in Power Fx\nDESCRIPTION: This snippet demonstrates how to access a custom field named 'Custom Field' in Power Fx using its display name. Single quotes are used because the name contains a space.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_26\n\nLANGUAGE: Power Fx\nCODE:\n```\n'Custom Field'\n```\n\n----------------------------------------\n\nTITLE: Read-only Columns/Attributes Header in Power Platform\nDESCRIPTION: Section header identifying the columns and attributes that return false for both IsValidForCreate and IsValidForUpdate, listed by SchemaName.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n## Read-only columns/attributes\n\nThese columns/attributes return false for both **IsValidForCreate** and **IsValidForUpdate**. Listed by **SchemaName**.\n\n- [ActivityTypeCode](#BKMK_ActivityTypeCode)\n- [CreatedBy](#BKMK_CreatedBy)\n- [CreatedOn](#BKMK_CreatedOn)\n- [CreatedOnBehalfBy](#BKMK_CreatedOnBehalfBy)\n- [DeliveryLastAttemptedOn](#BKMK_DeliveryLastAttemptedOn)\n- [ExchangeRate](#BKMK_ExchangeRate)\n- [InstanceTypeCode](#BKMK_InstanceTypeCode)\n- [IsRegularActivity](#BKMK_IsRegularActivity)\n- [ModifiedBy](#BKMK_ModifiedBy)\n- [ModifiedOn](#BKMK_ModifiedOn)\n- [ModifiedOnBehalfBy](#BKMK_ModifiedOnBehalfBy)\n- [OnHoldTime](#BKMK_OnHoldTime)\n- [OwnerIdName](#BKMK_OwnerIdName)\n- [OwnerIdYomiName](#BKMK_OwnerIdYomiName)\n- [OwningBusinessUnit](#BKMK_OwningBusinessUnit)\n- [OwningTeam](#BKMK_OwningTeam)\n- [OwningUser](#BKMK_OwningUser)\n- [PostponeActivityProcessingUntil](#BKMK_PostponeActivityProcessingUntil)\n- [SenderMailboxId](#BKMK_SenderMailboxId)\n- [SentOn](#BKMK_SentOn)\n- [SeriesId](#BKMK_SeriesId)\n- [SLAInvokedId](#BKMK_SLAInvokedId)\n- [VersionNumber](#BKMK_VersionNumber)\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for createdby Field\nDESCRIPTION: Defines the logical name for the Created By field, which represents the unique identifier of the user who created the record. This is a read-only lookup field that targets systemuser.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`createdby`\n```\n\n----------------------------------------\n\nTITLE: Power Pages Website Shutdown Steps\nDESCRIPTION: Steps for shutting down inactive Power Pages websites through the admin interface\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-platform-advisor.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select **Resources** > **Power Pages sites** > **Analytics**.\n```\n\n----------------------------------------\n\nTITLE: Checking PowerShell Version\nDESCRIPTION: Command to verify the installed PowerShell version on the machine. This is important as the modules require Windows PowerShell version 5.x.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$PSVersionTable.PSVersion\n```\n\n----------------------------------------\n\nTITLE: Defining OwnerIdName Property in Power Platform Entity\nDESCRIPTION: Defines the OwnerIdName property which stores the name of the owner of the record. This is a required string field with a maximum length of 100 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\nowneridname\n```\n\n----------------------------------------\n\nTITLE: Host Name Mapping Utility - PowerShell\nDESCRIPTION: This PowerShell script provides a mapping of human-readable host names to their corresponding file names, facilitating the management of host-specific information. It also includes common setup code for use in other scripts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/funcjson/README.txt#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nThis file provides the human host name to file name map, for example \n\"Power Platform CLI\" to \"pac-cli\". Each new host will need a mapping \npair placed in this file.\n\nIt also contains common setup code and functions for the other scripts.\n```\n\n----------------------------------------\n\nTITLE: To Property Definition in Power Platform\nDESCRIPTION: Definition of the To property which specifies the recipient of an activity. This PartyList field can target accounts, contacts, and system users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Person who is the receiver of the activity.**|\n|DisplayName|**To**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`to`|\n|RequiredLevel|None|\n|Type|PartyList|\n|Targets|account, contact, systemuser|\n```\n\n----------------------------------------\n\nTITLE: Supported Environment Types Table in Markdown\nDESCRIPTION: Markdown table showing which environment types are supported and not supported for geo-to-geo migration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/geo-to-geo-migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Supported | Not supported |\n|-------------------------|-------------------------|\n| <ul></br><li>Migrating production environment</li></br><li>Migrating sandbox environment</li></br></ul> | <ul></br><li>Migrating default environment</li></br><li>Migrating Dataverse for Teams environment</li></br><li>Migrating trial environment</li></br><li>Migrating demo environment</li></br><li>Migrating developer environment</li></br><li>Migrating environment from GCC to another geo or from another geo to GCC</li></ul> |\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Listing Backups in Power Platform CLI (PowerShell)\nDESCRIPTION: This snippet shows an example of the output generated when listing backups. It displays a table with columns for Index, Id, Label, Expiry, and Point Date of the backup.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-backups-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n Index   Id                                      Label        Expiry                Point Date\n 1       00000000-0000-0000-0000-000000000000    Backup       14/12/2022 12:50:38   07/12/2022 12:50:38\n```\n\n----------------------------------------\n\nTITLE: Adding a User to a Development Environment\nDESCRIPTION: This command adds an application user to a development environment as a system administrator to enable integration with the solution. The `-e` parameter specifies the URL of the target environment (e.g., https://contoso-alans-dev.crm.dynamics.com).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/personas.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncoe alm user add \\\n  -e https://contoso-alans-dev.crm.dynamics.com\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Reference\nDESCRIPTION: Markdown syntax for displaying an image with solution layers example.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-layers-alm.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"mx-imgBorder\"] \n> ![Solution layers.](media/solution-layers-example.png \"Solution layers\")\n```\n\n----------------------------------------\n\nTITLE: Unregistering an Application with Power Platform CLI\nDESCRIPTION: Example PowerShell command that demonstrates how to unregister an application using the Power Platform CLI's admin functionality. This command is used for removing application registrations from the Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-application-unregister-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin application unregister\n```\n\n----------------------------------------\n\nTITLE: Security Checklist Reference Table in Markdown\nDESCRIPTION: Markdown table showing the security checklist item SE:04 related to segmentation strategy requirements.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/segmentation.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|[SE:04](checklist.md)| **Create intentional segmentation and perimeters in your architecture design and the workload's footprint on the platform. The segmentation strategy must include networks, roles and responsibilities, workload identities, and resource organization.** |\n|---|---|\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure for Rulesets - HTTP\nDESCRIPTION: This snippet details the expected HTTP 200 response body format when retrieving rulesets. It outlines the properties of each ruleset including 'id' and 'name'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/retrieve-rulesets.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n\n[\n    {\n        \"id\": \"083a2ef5-7e0e-4754-9d88-9455142dc08b\",\n        \"name\": \"AppSource Certification\"\n    },\n    {\n        \"id\": \"0ad12346-e108-40b8-a956-9a8f95ea18c9\",\n        \"name\": \"Solution Checker\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Portal Workflow Steps Documentation\nDESCRIPTION: Markdown documentation outlining the core workflow steps for browsing listings, making reservations, and processing payments in the rental portal system.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/solution-ideas/agent-rental-portal.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. **User browses listings**\n    - A user navigates to the Power Pages portal.\n    - The user searches for real estate listings using the React search component.\n    - The Power Pages Web API searches the Dataverse database.\n\n1. **User views listing details**\n    - The user selects a listing to view detailed information.\n    - The Power Pages Web API fetches the listing details from Dataverse.\n    - A React UI displays the listing details.\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Microsoft Power Platform Documentation\nDESCRIPTION: A placeholder HTML comment template providing instructions for documentation authors to add remarks and remove the comment when filling in the actual content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Checking PowerShell Version\nDESCRIPTION: Verify the current PowerShell version running on the machine, which is a prerequisite for deploying the Power Platform communication site template\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/wiki-community.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$PSVersionTable.PSVersion\n```\n\n----------------------------------------\n\nTITLE: Installing Application using Power Platform CLI\nDESCRIPTION: Command to install an application in a Power Platform environment using the Power Platform CLI. Requires environment ID and application name parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\npac application install --environment-id \"YOUR_ENVIRONMENT_ID_HERE\" --application-name \"APP_UNIQUE_NAME_HERE\"\n```\n\n----------------------------------------\n\nTITLE: Installing Application Package using HTTP POST in Power Platform\nDESCRIPTION: HTTP POST request to trigger application installation in a Power Platform environment. The uniqueName parameter should be set to Office365Groups in this example.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-install-application-environment.md#2025-04-20_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.powerplatform.com/appmanagement/environments/{environmentId}/applicationPackages/{uniqueName}/install?api-version=2022-03-01-preview\n```\n\n----------------------------------------\n\nTITLE: Defining OwnerIdYomiName Property in Power Platform Entity\nDESCRIPTION: Defines the OwnerIdYomiName property which stores the phonetic (Yomi) name of the owner. This is a required string field with a maximum length of 100 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\nowneridyominame\n```\n\n----------------------------------------\n\nTITLE: Deleting Canvas Apps in Power Platform\nDESCRIPTION: PowerShell script to delete all canvas apps owned by a specific user using Remove-AdminApp cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n\n#find all apps owned by the DSR user and deletes them\nGet-AdminPowerApp -Owner $deleteDsrUserId | Remove-AdminPowerApp\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for statuscode Field\nDESCRIPTION: Defines the logical name for the Status Reason field, which represents the reason for the status of the Publisher Identity. This is a status field with global choice name mspcat_publisheridentity_statuscode.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`statuscode`\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Documentation Remarks\nDESCRIPTION: HTML comment block providing a template structure for adding documentation remarks. Includes instructions to remove comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-delete-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Connecting to Office 365 with Admin Credentials\nDESCRIPTION: Establishes a connection to Office 365 using global admin credentials. Requires a valid Windows Live ID with Global admin membership for the SharePoint Online license.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$msolcred = get-credential  \nconnect-msolservice -credential $msolcred  \n```\n\n----------------------------------------\n\nTITLE: Updating Consent Plans\nDESCRIPTION: PowerShell commands to add viral consent plans and remove internal consent plans for Power Platform licensing\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/development-environments.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-AllowedConsentPlans -Type Viral\nRemove-AllowedConsentPlans -Type Internal\n```\n\n----------------------------------------\n\nTITLE: Evangelism Checklist in Markdown\nDESCRIPTION: A markdown checklist outlining key strategies for evangelizing and promoting Microsoft Power Platform successes within an organization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/nurture-best-practices.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"checklist\"]\n> * [Share success stories](show-and-tell.md)\n> * [Organize hackathons](hackathons.md)\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for mspcat_publisheridentityId Field\nDESCRIPTION: Defines the logical name for the Publisher Identity field, which is the unique identifier for entity instances. This is a system required uniqueidentifier field.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`mspcat_publisheridentityid`\n```\n\n----------------------------------------\n\nTITLE: Displaying Orphaned Object Item in Markdown\nDESCRIPTION: This markdown snippet shows an image of an individual orphaned object item for granular decision-making.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/governance-components.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Orphaned object item.](media/orphanedobjects3.png \"Orphaned object item\")\n```\n\n----------------------------------------\n\nTITLE: License Comparison Table in Markdown\nDESCRIPTION: Markdown table comparing hosted machine vs hosted machine group scenarios, including bot allocation, release processes, settings and benefits\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/add-ons.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| |Hosted machine |Hosted machine group |\n|-------|------|------|\n|__Scenario description__|A hosted machine enables developers to build, test, and run automation on a constantly active (= turned-on) hosted machine.|A hosted machine group enables developers to run automation on an auto-scaling group of hosted machines. <br><br>It's continuously adjusting the number of hosted machines turned-on to the desktop flow workload.|\n|__Hosted bot allocation__|One hosted bot is automatically pulled from the available hosted pool<sup>1</sup> and allocated to the individual hosted machine at its creation.|One hosted bot is automatically pulled from the available hosted pool<sup>1</sup> and temporarily allocated to the hosted machine group when it scales up: any new hosted machine turned-on in the group consumes one extra hosted bot.|\n|__Hosted bot release__|The hosted bot is automatically released to the available hosted pool<sup>1</sup> at manual deletion of the hosted machine.|The hosted bot is automatically released to the available hosted pool<sup>1</sup> by the hosted machine group when it scales down (= when one of its hosted machines is turned-off).|\n|__Hosted bot settings__|None|A hosted machine group has two scaling settings:<br>- __Max bots__: the maximum number of hosted bots it can auto-allocate itself to turn-on hosted machines.<br>- __Committed bots__: the guaranteed number of hosted bots it can immediately auto-allocate itself when required.|\n|__Scenario benefits__|- Hosted machine constantly turned-on <br> - Reaction time|- Auto-scalability delivering high processing parallelization and reacting to demand spikes<br>- [Load balancing](/power-automate/desktop-flows/hosted-machine-groups#load-balance-hosted-machine-group)<sup>2</sup> across multiple hosted machine groups, which optimizes the hosted bot utilization rate|\n```\n\n----------------------------------------\n\nTITLE: Enable Web Application Firewall Steps\nDESCRIPTION: Instructions for enabling WAF on Power Pages websites\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-platform-advisor.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select one or more sites from the list and select **Enable WAF**.\n1. Confirm the operation to enable WAF for the selected sites.\n```\n\n----------------------------------------\n\nTITLE: Steps to Enable Cross-Geo Solution Deployment Setting\nDESCRIPTION: Detailed procedure for accessing and configuring the cross-geo solution deployment setting in the Deployment Pipeline Configuration app within Power Platform\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/enable-cross-geo-solution-deployments.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to the Deployment Pipeline Configuration app by selecting **Manage pipelines** on the **Pipelines** page within a solution in Power Apps.\n2. Select **Advanced Settings** from the left navigation pane.\n3. Enable or disable the **Cross-Geo Solution Deployment** setting with the toggle.\n4. Select **Save**.\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for Unique Name Field\nDESCRIPTION: Specifies the logical name for the Unique Name field in the Package Solutions entity. This is used to reference the field in code and configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagesolutions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_uniquename`\n```\n\n----------------------------------------\n\nTITLE: Displaying App Release from Quarantine Email Notification in Markdown\nDESCRIPTION: This markdown snippet shows an image of the email notification sent to app makers when their app is released from quarantine.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/governance-components.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![The app maker gets an email notification to inform them their app has been released from quarantine.](media/quarantine3.png \"The app maker gets an email notification to inform them their app has been released from quarantine.\")\n```\n\n----------------------------------------\n\nTITLE: Adding Remarks Template for Microsoft Power Platform Docs\nDESCRIPTION: This HTML comment block provides a template for adding remarks to Microsoft Power Platform documentation. It instructs users to remove the comments and add appropriate remarks under the '### Remarks' heading.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/catalog-submit-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Constructing URL to Access Application List in Dataverse Environment\nDESCRIPTION: URL pattern to open the application list view in a Dataverse environment. This URL allows administrators to view, add, and manage application registrations in the environment. The user must replace the environment URL placeholder with their actual environment URL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/control-app-access-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps:/<EnvironmentURL>/main.aspx?forceUCI=1&pagetype=entitylist&etn=application&viewid=76302387-6f41-48e5-8eaf-4e74c1971020&viewType=1039\n```\n\n----------------------------------------\n\nTITLE: Updating a Catalog Item - Power Platform Web API - Markdown\nDESCRIPTION: The 'Update' operation snippet explains how to modify an existing catalog item by issuing a PATCH request to the /mspcat_applicationses endpoint, specifically targeting the mspcat_applicationsid of the item to be updated.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| `Update`<br />Event: True |`PATCH` /mspcat_applicationses(*mspcat_applicationsid*)<br />See [Update](/powerapps/developer/data-platform/webapi/update-delete-entities-using-web-api#basic-update) |[Update records](/power-apps/developer/data-platform/org-service/entity-operations-update-delete#basic-update)|\n```\n\n----------------------------------------\n\nTITLE: Office 365 Admin Center Organization Selection\nDESCRIPTION: Example showing how to navigate to the Company profile page in Office 365 admin center to check account region settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/about-microsoft-cloud-canada.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to [https://admin.microsoft.com](https://admin.microsoft.com).  \n\n2. In the upper-right corner of the Office 365 admin center menu bar, click your organization.  \n\n3. On the **Company profile** page, your account country/region is listed under **Country or region**.\n```\n\n----------------------------------------\n\nTITLE: Accessing System Settings Service Tab in Dynamics 365\nDESCRIPTION: Step-by-step instructions for navigating to the System Settings Service tab in the Dynamics 365 web app. This snippet includes necessary permissions and navigation paths.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-service-tab.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [!INCLUDE[proc_permissions_system_admin_and_customizer](../includes/proc-permissions-system-admin-and-customizer.md)]  \n  \n    Check your security role.  \n  \n   - [!INCLUDE[proc_follow_steps_in_link](../includes/proc-follow-steps-in-link.md)]  \n  \n   - [!INCLUDE[proc_dont_have_correct_permissions](../includes/proc-dont-have-correct-permissions.md)]  \n  \n2. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n3. Select **Settings** > **Administration**.\n  \n4. Select the **System Settings** > **Service** tab.  \n```\n\n----------------------------------------\n\nTITLE: Using pac copilot status command\nDESCRIPTION: Polls and displays the deployment status of a specified copilot. Requires the copilot ID parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_9\n\nLANGUAGE: cli\nCODE:\n```\npac copilot status --bot-id \"01234567-89ab-cdef-0123-456789abcdef\"\n```\n\n----------------------------------------\n\nTITLE: TraversedPath Property Definition in Power Platform\nDESCRIPTION: Definition of the TraversedPath property which is deprecated and for internal use only. This String field has a maximum length of 1250 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**For internal use only.**|\n|DisplayName|**(Deprecated) Traversed Path**|\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`traversedpath`|\n|RequiredLevel|None|\n|Type|String|\n|Format|Text|\n|FormatName|Text|\n|ImeMode|Auto|\n|IsLocalizable|False|\n|MaxLength|1250|\n```\n\n----------------------------------------\n\nTITLE: Using pac copilot merge-translation command\nDESCRIPTION: Merges files containing localized content for one or more bots. Supports glob patterns for specifying multiple files.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\npac copilot merge-translation --file \"./translations/*.resx\" --solution \"MySolution\" --sourcedir \"./src\"\n```\n\n----------------------------------------\n\nTITLE: Adding Rows with Power Fx Collection\nDESCRIPTION: Example of adding a new contact record to a collection using the Collect() function in Power Fx.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-repl-remarks.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nCollect(Contacts, { firstname: \"Patti\", lastname: \"Fernandez\" })\n```\n\nLANGUAGE: text\nCODE:\n```\n{contactid:GUID(\"118d7b47-8f80-ee11-8179-0022482a40c7\"), fullname:\"Patti Fernandez\", ...}\n```\n\n----------------------------------------\n\nTITLE: Viewing Power Automate Licenses\nDESCRIPTION: Instructions for accessing license information in the Power Automate portal by navigating to Settings and selecting 'View my licenses'\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/types.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIn the Power Automate portal, select **Settings** > **View my licenses**:\n```\n\n----------------------------------------\n\nTITLE: Removing a Solution Component\nDESCRIPTION: Shows how to remove an entity solution component from an unmanaged solution using RemoveSolutionComponentRequest\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-api.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nRetrieveEntityRequest retrieveForRemoveAccountRequest = new RetrieveEntityRequest()\n{\n    LogicalName = Account.EntityLogicalName\n};\nRetrieveEntityResponse retrieveForRemoveAccountResponse = (RetrieveEntityResponse)_serviceProxy.Execute(retrieveForRemoveAccountRequest);\n\nRemoveSolutionComponentRequest removeReq = new RemoveSolutionComponentRequest()\n{\n    ComponentId = (Guid)retrieveForRemoveAccountResponse.EntityMetadata.MetadataId,\n    ComponentType = (int)componenttype.Entity,\n    SolutionUniqueName = solution.UniqueName\n};\n_serviceProxy.Execute(removeReq);\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Comment Structure\nDESCRIPTION: HTML comment block containing template instructions and placeholders for adding content remarks\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any general remarks for this command group below.\n\n### Remarks\n\nAdd content here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: UTCConversionTimeZoneCode Property Definition in Power Platform\nDESCRIPTION: Definition of the UTCConversionTimeZoneCode property which indicates the time zone code in use when the record was created. This Integer field has a minimum value of -1 and maximum value of 2147483647.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Time zone code that was in use when the record was created.**|\n|DisplayName|**UTC Conversion Time Zone Code**|\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`utcconversiontimezonecode`|\n|RequiredLevel|None|\n|Type|Integer|\n|MaxValue|2147483647|\n|MinValue|-1|\n```\n\n----------------------------------------\n\nTITLE: Specifying JSON Output Format in CLI\nDESCRIPTION: The --json flag is used as a command line option to request JSON-formatted output from a command. This allows for easier parsing and processing of command results by scripts or other tools.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/catalog-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--json\n```\n\n----------------------------------------\n\nTITLE: Security Checklist Reference Table\nDESCRIPTION: Markdown table showing the applicable Power Platform Well-Architected Security checklist recommendation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/testing.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|[SE:09](checklist.md)| **Establish a comprehensive testing regimen that combines approaches to prevent security issues, validate threat prevention implementations, and test threat detection mechanisms.** |\n|---|---|\n```\n\n----------------------------------------\n\nTITLE: Displaying Orphaned Object Count in Markdown\nDESCRIPTION: This markdown snippet shows an image of the orphaned object count in the Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/governance-components.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Orphaned object count.](media/orphanedobjects1.png \"Orphaned object count\")\n```\n\n----------------------------------------\n\nTITLE: Creating Catalog Submission Document in Power Platform CLI\nDESCRIPTION: This command allows the user to create a catalog submission document. It is noted that this command will be removed in a future release, and thus users should prepare for alternative methods of catalog submission.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/catalog.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## pac catalog create-submission\n\nCreate catalog submission document. Note: This command will be removed in a future release.\n\n### Optional Parameters for catalog create-submission\n\n#### `--path` `-p`\n\nPath to catalog submission document\n```\n\n----------------------------------------\n\nTITLE: Updating Power Platform CLI with .NET Tool\nDESCRIPTION: Command to update an existing Power Platform CLI installation to the latest version. This requires an internet connection to access the latest Microsoft.PowerApps.CLI NuGet package.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/howto/install-cli-net-tool.md#2025-04-20_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool update --global Microsoft.PowerApps.CLI.Tool\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Profile with Power Platform CLI\nDESCRIPTION: Command to create an authentication profile for the Dataverse environment using pac auth create\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/appsource/appendix-add-license-information-to-your-solution.md#2025-04-20_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\npac auth create --name <name of your choice> --kind Dataverse -–url <your dataverse url> --username <your username> --password <your password>\n```\n\n----------------------------------------\n\nTITLE: Include Directive Example\nDESCRIPTION: Shows how to include a banner component in the documentation using the INCLUDE directive\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/multiple-online-environments-tenants.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[new-PPAC-banner](~/includes/new-PPAC-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Warning Message in Markdown\nDESCRIPTION: A warning notification about the irreversible nature of redeployment operations and potential data loss\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/redeploy-past-solution-versions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!WARNING]\\n> Redeploying overwrites the most recent version and any data within that version. This is an irreversible operation, and the data lost is unrecoverable. Updates, including new tables, will also be removed.\n```\n\n----------------------------------------\n\nTITLE: Querying Active Screen - Power Platform - Formula\nDESCRIPTION: Checks if the 'PlayBall' screen is currently active, which can trigger specific actions based on the app's UI state.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n**App.ActiveScreen = PlayBall**\n```\n\n----------------------------------------\n\nTITLE: Power Apps Component Framework Integration\nDESCRIPTION: An extensibility framework for creating reusable custom UI components using HTML, JavaScript, or TypeScript, enabling advanced visual customization in Power Apps and Power Pages\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/application-modernization.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Power Apps Component framework** | The Power Apps Component framework is an extensibility framework for creating custom visuals for Power Apps and Power Pages.\n```\n\n----------------------------------------\n\nTITLE: Selecting Authentication Profile with Power Platform CLI in PowerShell\nDESCRIPTION: This command uses the Power Platform CLI to select a specific authentication profile. The '--index 2' parameter specifies the second profile in the list of available profiles.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-select-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac auth select --index 2\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_summaryscanstatus in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Summary of PowerApps scan status picklist field with options like Required, In Progress, and Success.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_summaryscanstatus`\n```\n\n----------------------------------------\n\nTITLE: Setting Mailbox Synchronization Method to None\nDESCRIPTION: Step-by-step instructions for configuring a mailbox's synchronization method to 'None' in the Power Platform admin center to prevent synchronization with non-primary organizations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/when-would-want-use-check-box.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the Power Platform admin center, select an environment. \n\n2. Select **Settings** > **Email** > **Mailboxes**.  \n\n3. Choose the mailbox record to open it.  \n\n4. In the **Mailbox** dialog box, under **Synchronization Method**, select **None** in the **Appointments, Contacts, and Tasks** list.\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Metadata\nDESCRIPTION: YAML frontmatter metadata block defining article properties including title, description, authors, and other metadata for documentation purposes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/availability.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: International availability of Microsoft Power Platform\ndescription: Learn about product availability, customer data locations, and languages for the Microsoft Power Platform family of applications by downloading the linked PDF.\nauthor: tapanm-MSFT\nms.reviewer: tapanm\nms.date: 03/25/2025\nms.topic: article\nms.subservice: admin\nms.custom:\naudience: Application User, IT Pro, Developer\nms.search.region: Global\nms.author: sericks\nms.contributors:\n - sericks\n---\n```\n\n----------------------------------------\n\nTITLE: WAN Performance Checklist Section\nDESCRIPTION: Markdown checklist for validating WAN connection capacity and speed requirements.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/expressroute/checklist.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> * Are the capacity and speed of the WAN connection sufficient for the traffic it will handle?\n```\n\n----------------------------------------\n\nTITLE: Solution Organization Diagram Reference\nDESCRIPTION: Markdown image reference showing proper solution layering using multiple solutions with multiple environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/organize-solutions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::image type=\"content\" source=\"media/proper-solution-layering.png\" alt-text=\"Proper solution layering using multiple solutions with multiple environments.\":::\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Blocking Policy Structure in PowerShell\nDESCRIPTION: Demonstrates the PowerShell object structure used to define connector blocking policies. The structure includes connector IDs, behaviors (Allow/Deny), and review status flags.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/connector-off-by-default.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$connectorBlockingDefinition = [pscustomobject] @{ \n  ConnectorSettings= @( \n    [pscustomobject] @{ \n \t\t\tid  # connectorId -- string \n \t\t\tbehavior # connector behavior -- \"Allow\"/\"Deny\" \n \t\t\tisReviewed # whether connector has been reviewed -- boolean \n \t\t} \n  ) \n} \n```\n\n----------------------------------------\n\nTITLE: Querying UCI Request Dependencies in Application Insights using Kusto\nDESCRIPTION: This Kusto query accesses the dependencies table to filter and retrieve entries specifically related to UCI requests. This helps in monitoring the performance of outgoing calls made by the Unified Interface, providing insights into potential issues.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-model-driven-apps.md#2025-04-20_snippet_1\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where type == \"UCI REQUEST\"\n```\n\n----------------------------------------\n\nTITLE: JSON Output Parameter Documentation in Markdown\nDESCRIPTION: Documents the --json flag parameter which formats command output as a JSON string. This enables programmatic consumption and parsing of command results.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--json\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for createdon Field\nDESCRIPTION: Defines the logical name for the Created On field, which represents the date and time when the record was created. This is a read-only DateTime field with UserLocal behavior.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`createdon`\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links\nDESCRIPTION: Markdown formatted links to related Power Platform documentation sections including flow identification and performance efficiency checklist.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/performance-efficiency/prioritize-critical-flows.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Related information\n\n- [Recommendations for identifying and rating flows](/power-platform/well-architected/reliability/identify-flows)\n\n## Performance Efficiency checklist\n\nRefer to the complete set of recommendations.\n\n> [!div class=\"nextstepaction\"]\n> [Performance Efficiency checklist](checklist.md)\n```\n\n----------------------------------------\n\nTITLE: LogicalName UTCConversionTimeZoneCode Property\nDESCRIPTION: Definition of a system field that stores the time zone code used when a record was created. It is a read-only integer field with specific value constraints.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicy.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName: `utcconversiontimezonecode`\nType: Integer\nMaxValue: 2147483647\nMinValue: -1\n```\n\n----------------------------------------\n\nTITLE: Creating New Acceptance Environment Pipeline Template\nDESCRIPTION: Process for creating a new pipeline template for an acceptance environment by copying an existing template and renaming it to match the new environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/customize-deployment-pipelines.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuild-deploy-acceptance-SampleSolution.yml\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration Block\nDESCRIPTION: YAML front matter block containing metadata for the documentation page, including title, description, date, and author information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/capacity-add-on.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Capacity add-ons for Power Apps and Power Automate  | MicrosoftDocs\"\ndescription: This topic covers the Per app, Power Automate per business process, AI builder, Portal logins, and Portal views. \nms.date: 08/01/2023\nms.reviewer: sericks\nms.topic: conceptual\nauthor: sericks007\nms.subservice: admin\nms.author: sericks\nsearch.audienceType: \n  - admin\nms.contributors:\n- laneswenka\n```\n\n----------------------------------------\n\nTITLE: PowerShell JSON Response Example\nDESCRIPTION: Example of JSON response structure showing viral tenant status for unmanaged tenants\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n{\n  ...\n  \"Login\": \"name@unmanagedcontoso.com\",\n  \"DomainName\": \"unmanagedcontoso.com\",\n  \"IsViral\": true,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Catalog Item - Power Platform Web API - Markdown\nDESCRIPTION: The 'Delete' operation snippet specifies how to remove a catalog item by sending a DELETE request to the /mspcat_applicationses endpoint, utilizing the mspcat_applicationsid to identify the item to be deleted.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `Delete`<br />Event: True |`DELETE` /mspcat_applicationses(*mspcat_applicationsid*)<br />See [Delete](/powerapps/developer/data-platform/webapi/update-delete-entities-using-web-api#basic-delete) |[Delete records](/power-apps/developer/data-platform/org-service/entity-operations-update-delete#basic-delete)|\n```\n\n----------------------------------------\n\nTITLE: Custom Deployment Settings JSON Creation\nDESCRIPTION: This JSON code sets activation configurations for flows, specifies component ownership, shares canvas apps with groups, and configures Dataverse teams. Dependencies and prerequisites include needing component names, unique identifiers, and email addresses from solutions. It ensures management of flow activation and application sharing after deployment, as per organizational setups.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/alm-accelerator/setup-data-deployment-configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ActivateFlowConfiguration\": [\n    {\n      \"solutionComponentName\": \"DevOpsKitSampleFlow\",\n      \"solutionComponentUniqueName\": \"0a43b549-50ed-ea11-a815-000d3af3a7c4\",\n      \"activateAsUser\": \"#{activateflow.activateas.DevOpsKitSampleFlow}#\"\n    },\n    {\n      \"solutionComponentName\": \"CallMeFromCanvasApp\",\n      \"solutionComponentUniqueName\": \"71cc728c-2487-eb11-a812-000d3a8fe6a3\",\n      \"activateAsUser\": \"#{activateflow.activateas.CallMeFromCanvasApp}#\"\n    },\n    {\n      \"solutionComponentName\": \"GetEnvironmentVariables\",\n      \"solutionComponentUniqueName\": \"d2f7f0e2-a1a9-eb11-b1ac-000d3a53c3c2\",\n      \"activateAsUser\": \"#{activateflow.activateas.GetEnvironmentVariables}#\"\n    }\n  ],\n  \"SolutionComponentOwnershipConfiguration\": [\n    {\n      \"solutionComponentType\": 29,\n      \"solutionComponentName\": \"DevOpsKitSampleFlow\",\n      \"solutionComponentUniqueName\": \"0a43b549-50ed-ea11-a815-000d3af3a7c4\",\n      \"ownerEmail\": \"#{owner.ownerEmail.DevOpsKitSampleFlow}#\"\n    },\n    {\n      \"solutionComponentType\": 29,\n      \"solutionComponentName\": \"CallMeFromCanvasApp\",\n      \"solutionComponentUniqueName\": \"71cc728c-2487-eb11-a812-000d3a8fe6a3\",\n      \"ownerEmail\": \"#{owner.ownerEmail.CallMeFromCanvasApp}#\"\n    },\n    {\n      \"solutionComponentType\": 29,\n      \"solutionComponentName\": \"GetEnvironmentVariables\",\n      \"solutionComponentUniqueName\": \"d2f7f0e2-a1a9-eb11-b1ac-000d3a53c3c2\",\n      \"ownerEmail\": \"#{owner.ownerEmail.GetEnvironmentVariables}#\"\n    }\n  ],\n  \"AadGroupCanvasConfiguration\": [\n    {\n      \"aadGroupId\": \"#{canvasshare.aadGroupId.DevOpsKitSampleCanvasApp}#\",\n      \"canvasNameInSolution\": \"cat_devopskitsamplecanvasapp_c7ec5\",\n      \"canvasDisplayName\": \"DevOpsKitSampleCanvasApp\",\n      \"roleName\": \"#{canvasshare.roleName.DevOpsKitSampleCanvasApp}#\"\n    }\n  ],\n  \"AadGroupTeamConfiguration\": [\n    {\n      \"aadGroupTeamName\": \"Sample Group Team Name\",\n      \"aadSecurityGroupId\": \"#{team.samplegroupteamname.aadSecurityGroupId}#\",\n      \"dataverseSecurityRoleNames\": [\n        \"#{team.samplegroupteamname.role}#\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing AsyncOperation File Size and Record Count in SQL\nDESCRIPTION: SQL query to analyze the size and count of AsyncOperation records using file storage, providing insights into storage consumption.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TOP 1 f.filesize as asyncoperation_size, f.mimetype,\n(SELECT count(*) FROM asyncoperationbase WHERE datablobid IS NOT NULL) as record_count\nFROM filestorebase f\nJOIN asyncoperationbase a ON f.fileid = a.datablobid\n```\n\n----------------------------------------\n\nTITLE: Output from PAC Copilot Merge-Translation Command\nDESCRIPTION: Sample output returned after running the merge-translation command. It shows connection details, statistics about the translation operation, and a summary of updated components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-merge-translation-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nConnected as user@contoso.org\n\nLoading language German into bot 'ms_store_newTestCopilot' (New Test Copilot) from file 'C:\\Users\\user\\ms_store_newTestCopilot'. 0 key(s) were missing, 0 value(s) were not used. Use the --verbose switch to get more details.\n\nUpdated 16 out of 16 components.\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Power Platform Admin Documentation\nDESCRIPTION: YAML metadata configuration for a Microsoft Power Platform documentation page about deployment and administration planning. Defines key metadata like title, description, author, dates, and component information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/plan-for-deployment-and-administration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Plan for deployment and administration\"\ndescription: \"As an administrator, learn about the considerations when planning for deployment.\" \nauthor: sericks007\n\nms.component: pa-admin\nms.topic: conceptual\nms.date: 09/08/2020\nms.subservice: admin\nms.author: sericks\nsearch.audienceType: \n  - admin\n---\n```\n\n----------------------------------------\n\nTITLE: Help Command Example for CLI\nDESCRIPTION: Shows how to access help documentation for a specific CLI command\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/documentation.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncoe help alm\n```\n\n----------------------------------------\n\nTITLE: Catalog Setup Fields Table\nDESCRIPTION: Markdown table listing the required fields and their descriptions for setting up a new catalog in Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/administer-catalog.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Field|Description|\n|---------|----------|\n|**Name**|Enter a name for the catalog|\n|**Language**|Set the language for your users of the catalog|\n|**Description**|Add some details that help others understand what this catalog is for|\n|**Region**|What region this catalog is for, which will filter the available environments|\n|**Environment**|Which environment in your tenant you want the catalog to be installed for (ensure some environments have been set up for you to select)|\n|**Status**|Uncheck this box if you want the catalog inactive after setting up|\n```\n\n----------------------------------------\n\nTITLE: Creating Action Link in Markdown\nDESCRIPTION: This snippet demonstrates how to create an action link in Markdown format, specifically for navigating to a reliability checklist.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/reliability/handle-transient-faults.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"nextstepaction\"]\n> [Reliability checklist](checklist.md)\n```\n\n----------------------------------------\n\nTITLE: RegardingObjectTypeCode Property Definition in Power Platform\nDESCRIPTION: Definition of the RegardingObjectTypeCode property which specifies the entity type of the regarding object. This uses the EntityName type to identify the entity type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|||\n|DisplayName|||\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`regardingobjecttypecode`|\n|RequiredLevel|None|\n|Type|EntityName|\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Power Platform CLI Documentation\nDESCRIPTION: A commented section that provides instructions for documentation authors to remove comments and add general remarks for a command group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any general remarks for this command group below.\n\n### Remarks\n\nAdd content here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: AI Builder Model List Output Format\nDESCRIPTION: This shows the expected output format when listing AI Builder models. The output includes columns for Id (unique identifier), State (Active/Inactive), and Name of each model in the specified environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-model-list-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nId                                   State    Name\n32a9e265-1149-4155-af54-d2856d2b83f5 Active   Document Processing 2023/09/20, 12:21:40\n2bcd7b94-50bc-4767-af4a-367c63fb5487 Inactive AI Classify\n4e72b59a-17d6-451e-8657-89fbdec56d7a Inactive AI Extract\n572f57a7-7a8f-49fc-adb4-331e02c509a6 Inactive AI Reply\nb9b636cf-9748-47a7-b617-6df5f00f5151 Inactive AI Sentiment\nc076eac8-f218-4feb-8ad1-7ee4fb039419 Inactive AI Summarize\na0440df3-2656-e911-8194-000d3a6cd5a5 Inactive BusinessCard model\n62d1e848-5ca7-490a-94bf-79baabe85ef4 Inactive CategoryClassification model\n4da7ec17-5c26-4fd2-9ddb-be4f7eda21a9 Inactive DataGenieEmailAddressValidation\n51f4da11-5702-401d-b53a-9638744e8ac9 Inactive Document Layout Analysis Model\nd1bb8d57-24ab-3b36-9592-bd792e153b79 Inactive DVCopilotQueryModel\n3fbd4e5c-32bc-40fc-acce-59c2821cf113 Inactive Empty Dynamic Prompt\n8c281981-c5d6-484f-bac7-4924ddd0b8ae Inactive EntityExtraction model\na1afa5d4-7a44-4c31-9cd2-e852a78431fa Inactive GptPromptEngineering model\n2c444168-f8b1-4c6a-9313-2d9c03be6fea Inactive Id Scanning Model\n77365cfa-7021-4cb7-a9b2-dc9823cde772 Inactive ImageDescription model\naef1bdd2-2a74-4f74-b4eb-9dfa22e35ded Inactive Invoice Model\n5ed4d0fd-e9d4-4026-b09b-71f83ea90c60 Inactive Invoice Processing Model\nc8425db7-c5a7-4226-b38e-c93a044c0fe1 Inactive KeyPhraseExtraction model\n17a6f893-5b0b-4867-8fac-fb2eda9080b2 Inactive LanguageDetection model\n046ab801-2756-e911-8194-000d3a6cd5a5 Inactive ObjectDetectionProposal model\n892d3698-ba03-3d15-8e9e-843ca4ac5e7d Inactive PowerAppsAppCopilotModel\nbaa44529-bebe-49e6-837a-80bee63b0d2c Inactive Receipt Scanning Model\nf1c549c2-a97e-47a5-b612-c5c2bab0f163 Inactive SentimentAnalysis model\n7f8a7856-003a-3662-9871-0000d7674433 Inactive SimsModel\n86419a67-205a-454f-b6fc-601394f2786d Inactive TextRecognition model\n6225038a-8b5a-4913-bfd2-d8236f4102ba Inactive TextTranslation model\n02e1fca3-232a-4f58-8c93-bdd8c9cd6de9 Inactive TextTranslationInternal model\n```\n\n----------------------------------------\n\nTITLE: Extension Request Image Reference\nDESCRIPTION: Markdown image reference block showing the extension request UI.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/whats-new-storage.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"mx-imgBorder\"] \n> ![Request extension.](media/capacity-request-extension.png \"Request extension\")\n```\n\n----------------------------------------\n\nTITLE: SAP Profile Parameters Configuration\nDESCRIPTION: SAP system profile parameters for enabling and configuring SNC.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/secure-network-communications.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsnc/accept_insecure_cpic: 1\nsnc/accept_insecure_gui: 1\nsnc/accept_insecure_rfc: 1\nsnc/enable: 1\nsnc/extid_login_diag: 1\nsnc/extid_login_rfc: 1\nsnc/gssapi_lib: $(SAPCRYPTOLIB)\nsnc/identity/as: p:CN=ID3, O=Contoso\nsnc/permit_insecure_start: 1\nsnc/data_protection/max: 3\n```\n\n----------------------------------------\n\nTITLE: Publishing with Power Platform Copilot in PowerShell\nDESCRIPTION: Example command showing how to publish using the Power Platform Copilot (pac) command-line tool. The command is provided as an illustrative template for documentation purposes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-publish-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac copilot publish\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for mspcat_tenantid Field\nDESCRIPTION: Defines the logical name for the Tenant Id field, which represents the Azure Tenant ID. This is an application required text field with a maximum length of 40 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`mspcat_tenantid`\n```\n\n----------------------------------------\n\nTITLE: Linking the CoE CLI Application\nDESCRIPTION: This command creates a symbolic link from the globally installed Node.js Modules to the CoE CLI application, allowing users to run the CLI commands from any terminal session.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/install.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Block for Solution Layer Information\nDESCRIPTION: Note explaining the relationship between development environment customization and managed solution distribution\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-concepts-alm.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\\nWhen you customize in the development environment, you're working in the unmanaged layer. Then, when you export the unmanaged solution as a managed solution to distribute to another environment, the managed solution is imported into the environment in the managed layer.\n```\n\n----------------------------------------\n\nTITLE: Retrieve Policy Template via SDK for .NET\nDESCRIPTION: This snippet demonstrates how to retrieve a Policy Template record using the SDK for .NET. It uses the Retrieve records operation. See the linked documentation for more information on the structure of the retrieved entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicytemplate.md#2025-04-20_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n\"Retrieve records\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Advanced Production Environment with pac admin create in PowerShell\nDESCRIPTION: This example shows how to create a production environment in the Europe region, with Euro currency and English language (default) using the pac admin create command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-create-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac admin create `\n  --name \"Contoso Marketing\" `\n  --currency EUR `\n  --region europe `\n  --type Production `\n  --domain ContosoMarketing\n```\n\n----------------------------------------\n\nTITLE: PowerShell Environment Deletion\nDESCRIPTION: Script to delete all environments created by a specific user using PowerShell cmdlets\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n\n# Retrieve all environments created by the user and then delete them\nGet-AdminPowerAppEnvironment -CreatedBy $deleteDsrUserId | Remove-AdminPowerAppEnvironment\n```\n\n----------------------------------------\n\nTITLE: Entity Names Filter Example\nDESCRIPTION: Demonstrates how to filter specific entities using semicolon-separated logical names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/modelbuilder.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npac modelbuilder build --entitynamesfilter \"<entitylogicalname>;<entitylogicalname>\"\n```\n\n----------------------------------------\n\nTITLE: Prerequisites List in Markdown\nDESCRIPTION: Lists the security roles and support plans required for creating support requests in Power Platform admin center\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/get-help-support.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Microsoft Entra Role Admin  \n- Environment Administrator (or System Administrator role in Dataverse)\n- Company Admin\n- Billing Admin\n- Service Admin\n- CRM Service Admin\n- CRM Organization Admin\n- Power Platform Admin  \n- Security Admin\n- Partner Delegated Admin\n- SharePoint Admin\n- Teams Admin\n- Exchange Admin\n- Power BI Admin\n- Power Apps Environment Admin\n- Power Apps Full Admin\n- Compliance Admin\n- Helpdesk Admin\n- LCS User\n```\n\n----------------------------------------\n\nTITLE: Changing Import Package Description in C#\nDESCRIPTION: This property allows you to specify a custom description for the package that will be displayed alongside the package name during the import process in the Package Deployer wizard.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic override string GetImportPackageDescriptionText  \n{  \nget { return \"Package Description\"; }  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for utcconversiontimezonecode Field\nDESCRIPTION: Defines the logical name for the UTC Conversion Time Zone Code field, which represents the time zone code that was in use when the record was created. This is an integer field with maximum value 2147483647 and minimum value -1.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`utcconversiontimezonecode`\n```\n\n----------------------------------------\n\nTITLE: Commenting Instructions for Microsoft Power Platform Documentation\nDESCRIPTION: HTML comment block providing instructions for adding remarks to the documentation. It guides the user to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-update-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Updating Power Platform CLI using PowerShell\nDESCRIPTION: Command to update Power Platform CLI to the latest version using PowerShell. This command fetches and installs the latest updates for Power Platform Tools for Windows.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/howto/install-cli-msi.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac install latest\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Sample Command with Jest - TypeScript\nDESCRIPTION: This TypeScript snippet sets up unit testing for the Sample command using Jest, including defining the test structure and validating execution.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/adding-new-command.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n   import { SampleCommand } from '../../src/commands/sample'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n   describe('Sample', () => {\n       test('Execute', async () => {\n           // Arrange\n           var commands = new CoeCliCommands();\n           let mockSampleCommand = mock<SampleCommand>();\n\n           commands.createSampleCommand = () => { return mockSampleCommand }\n\n           mockSampleCommand.execute.mockResolvedValue()\n           \n           // Act\n           await commands.execute(['node', 'commands.spec', 'sample', '-c', 'Some comment'])\n\n           // Assert\n           expect(mockSampleCommand.execute).toHaveBeenCalled()\n       })\n   });\n```\n\n----------------------------------------\n\nTITLE: StageId Property Definition in Power Platform\nDESCRIPTION: Definition of the StageId property which is a unique identifier for the process stage. This is a deprecated field of type Uniqueidentifier.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Unique identifier of the Stage.**|\n|DisplayName|**(Deprecated) Process Stage**|\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`stageid`|\n|RequiredLevel|None|\n|Type|Uniqueidentifier|\n```\n\n----------------------------------------\n\nTITLE: SharePoint Version Compatibility\nDESCRIPTION: Defines the supported SharePoint versions for document management integration with Power Apps and Dynamics 365 applications. Includes cloud and on-premises SharePoint versions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/sharepoint-document-management-software-requirements.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- SharePoint in Microsoft 365\n- SharePoint 2016 on-premises\n- SharePoint 2013 SP1 on-premises (or a later version)\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the documentation page, including title, description, authors, and custom attributes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/reference-architectures/secure-access-azure-resources.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Secure Power Platform access to Azure resources\ndescription: Learn how to integrate Power Platform with Azure Virtual Network to protect your Azure resources from exposure to the public internet.\n#customer intent: As a Power Platform user, I want to secure Power Platform access to Azure resources so that I can integrate without exposing resources to the public internet.\nauthor: manuelap-msft\nms.subservice: architecture-center\nms.topic: example-scenario\nms.date: 04/17/2025\nms.author: mapichle\nms.reviewer: pankajsharma2087\ncontributors:\n  - manuelap-msft\nms.contributors:\n  - rranjit\n  - henryluo\nsearch.audienceType:\n  - admin\n  - flowmaker\nms.custom:\n  - ai-gen-docs-bap\n  - ai-gen-description\n  - ai-seo-date:03/11/2025\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Help in Power Fx REPL\nDESCRIPTION: Command to display all available commands and functions in the Power Fx REPL environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-repl-remarks.md#2025-04-20_snippet_2\n\nLANGUAGE: power-fx\nCODE:\n```\nHelp()\n```\n\nLANGUAGE: text\nCODE:\n```\n  Abs             Acos            Acot            AddColumns      And\n  Asin            AsType          Atan            Atan2           Average\n  Blank           Boolean         Char            Clear           ClearCollect\n  Coalesce        Collect         ColorFade       ColorValue      Concat\n  Concatenate     Cos             Cot             Count           CountA\n  CountIf         CountRows       Date            DateAdd         DateDiff\n  DateTime        DateTimeValue   DateValue       Day             Dec2Hex\n  Decimal         Degrees         Distinct        DropColumns     EDate\n  EncodeUrl       EndsWith       EOMonth         Error           Exp\n  Filter          Find            First           FirstN          Float\n  ForAll          GUID            Help            Hex2Dec         Hour\n  If              IfError         Index           Int             IsBlank\n  IsBlankOrError  IsEmpty         IsError         IsMatch         IsNumeric\n  IsToday         Language        Last            LastN           Left\n  Len             Ln              Log             LookUp          Lower\n  Match           MatchAll        Max             Mid             Min\n  Minute          Mod             Month           Not             Notify\n  Now             OptionSetInfo   Or              ParseJSON       Patch\n  Pi              PlainText       Power           Proper          Radians\n  Rand            RandBetween     Refresh         Remove          Replace\n  RGBA            Right           Round           RoundDown       RoundUp\n  Second          Sequence        Set             Shuffle         Sin\n  Sort            Split           Sqrt            StartsWith      StdevP\n  Substitute      Sum             Switch          Table           Tan\n  Text            Time            TimeValue       TimeZoneOffset  Today\n  Trim            TrimEnds        Trunc           Upper           Value\n  VarP            Weekday         With            Year\n>>\n```\n\n----------------------------------------\n\nTITLE: Updating SharePoint Realm to Match SharePoint Online\nDESCRIPTION: Sets the authentication realm of the SharePoint on-premises farm to match SharePoint Online. Requires SharePoint farm administrator permissions and may affect existing security token service applications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nSet-SPAuthenticationRealm -Realm $SPOContextId  \n```\n\n----------------------------------------\n\nTITLE: Customizing View in Power Platform\nDESCRIPTION: Process for customizing an existing view in a model-driven app, including steps for adding views to solutions and making modifications.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/modify-components.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Add the view you want to customize:\n    1. In solution explorer, select the table you want to add view and then select **Views**\n    1. Select **Add existing view**\n    1. Select the view(s) you want to customize and select **Add**\n1. Customize the view:\n    1. Select the table and then select **Views**.\n    1. Select **...** and then select **Edit view** to edit the view.\n```\n\n----------------------------------------\n\nTITLE: Adding Remarks Template in HTML\nDESCRIPTION: This snippet provides a template for adding remarks to documentation. It includes HTML comments with instructions for removing the comments and adding appropriate remarks under the '### Remarks' heading.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-export-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the documentation page, including metadata like title, description, authors, and custom attributes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/expressroute/benefits.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Benefits of using ExpressRoute with Power Platform\ndescription: Learn how ExpressRoute enhances compliance and network predictability for Power Platform by avoiding public internet traffic and ensuring dedicated connections.\n#customer intent: As a network administrator, I want to learn how ExpressRoute minimizes internet traffic contention so that I can improve network security and predictability.  \nauthor: taiki-yoshida\nms.topic: concept-article\nms.date: 04/17/2025\nms.subservice: architecture-center\nms.author: tayoshi\nms.reviewer: jhaskett-msft\ncontributors:\n  - rogergilchrist\n  - topness-msft\nms.custom:\n  - ai-gen-docs-bap\n  - ai-gen-description\n  - ai-seo-date:04/02/2025\n---\n```\n\n----------------------------------------\n\nTITLE: Security Testing Terms and Definitions Table\nDESCRIPTION: Markdown table defining key security testing terminology including AST, black-box testing, blue team, penetration testing, red team, SDL, SDLC, and white-box testing.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/testing.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Term | Definition |\n|---|---|\n| Application security testing (AST) | A Microsoft Security Development Lifecycle (SDL) technique that uses white-box and black-box testing methodologies to check for security vulnerabilities in code. |\n| Black-box testing | A testing methodology that validates the externally visible application behavior without knowledge of the internals of the system. |\n| Blue team | A team that defends against the attacks of the red team in a war game exercise. |\n| Penetration testing | A testing methodology that uses ethical hacking techniques to validate the security defenses of a system. |\n| Red team | A team that plays the role of an adversary and attempts to hack the system in a war game exercise. |\n| Security Development Lifecycle (SDL) | A set of practices provided by Microsoft that supports security assurance and compliance requirements. |\n| Software development lifecycle (SDLC) | A multistage, systematic process for developing software systems. |\n| White-box testing | A testing methodology where the structure of the code is known to the practitioner. |\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Properties\nDESCRIPTION: Configuration settings for entity relationships including customization flags and menu behavior settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_sspolicy.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nIsCustomizable: `True`\nAssociatedMenuConfiguration:\nAvailableOffline: True\nBehavior: `UseCollectionName`\nGroup: `Details`\nOrder: 10000\nViewId: `00000000-0000-0000-0000-000000000000`\n```\n\n----------------------------------------\n\nTITLE: Finding Account Country/Region in Office 365 Admin Center\nDESCRIPTION: Instructions for locating the account country/region information in the Office 365 Admin Center, which determines eligibility for environment migration to the Australia datacenter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/about-microsoft-cloud-australia.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to [https://admin.microsoft.com](https://admin.microsoft.com).  \n  \n2. In the upper-right corner of [!INCLUDE[pn_office_365_admin_center](../includes/pn-office-365-admin-center.md)], choose your organization.  \n  \n![Choose your organization.](media/data-center-choose-organization.png \"Choose your organization\")  \n  \n3.  On the **Company profile** page, your account country/region is listed under **Country or region**.\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for ownerid Field\nDESCRIPTION: Defines the logical name for the Owner field, which represents the owner ID of the record. This is a system required lookup to either systemuser or team entities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`ownerid`\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from a Table in SQL\nDESCRIPTION: This SQL query selects all columns from the Customers table. It demonstrates the basic SELECT statement syntax in SQL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/pn-sql.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM Customers;\n```\n\n----------------------------------------\n\nTITLE: Environment Database Settings for Business Unit Changes\nDESCRIPTION: Configuration settings that control how security roles and record ownership are handled when changing business units. Includes DoNotRemoveRolesOnChangeBusinessUnit and AlwaysMoveRecordToOwnerBusinessUnit settings with their default values and behaviors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-edit-business-units.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. DoNotRemoveRolesOnChangeBusinessUnit\n   default = false  (the user's assigned security role is removed) \n   You can set it to true, and the user's assigned security role for the from-Business unit is not removed. \n2. AlwaysMoveRecordToOwnerBusinessUnit\n   default = true (user owned records are moved to the new user's business unit) \n   You can set it to false, and the user owned records' Business unit is not moved to the new user's business unit.\n```\n\n----------------------------------------\n\nTITLE: Relating Contacts to Products in Power Apps\nDESCRIPTION: This Power Apps formula relates a selected contact from a ComboBox to the currently selected product in a gallery. It's used in the OnSelect property of an Add icon to create a relationship between a contact and a product.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-relate-unrelate.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nRelate( Gallery1.Selected.Contacts, ComboBox1.Selected )\n```\n\n----------------------------------------\n\nTITLE: Bearer Token Response for Username and Password Flow - JSON\nDESCRIPTION: This JSON snippet illustrates the expected response structure from Microsoft Entra after successfully requesting an access token using the username and password method.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-authentication-v2.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"Bearer\",\n  \"scope\": \"https://api.powerplatform.com/AppManagement.ApplicationPackages.Install https://api.powerplatform.com/AppManagement.ApplicationPackages.Read https://api.powerplatform.com/.default\",\n  \"expires_in\": 4747,\n  \"ext_expires_in\": 4747,\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJu...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Frame Components in Web Layout\nDESCRIPTION: Describes the three primary subcomponents of a responsive application frame: header, navigation, and content region. Each component plays a crucial role in creating a consistent and adaptable user interface across different screen sizes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/layout.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. The *header* is a core component designed to be a part of every internal application.\n2. *Navigation* is a system of controls that help users find information and complete tasks.\n3. The *content region* contains the focus of the screen.\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration block defining metadata for the documentation page including title, description, author information, and component details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/power-bi-nurture.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Nurture with the CoE Power BI dashboard | MicrosoftDocs\"\ndescription: \"The Nurture section of the Center of Excellence (CoE) Power BI dashboard gives you the ability to identify your app and flow gurus.\"\nauthor: manuelap-msft \nms.component: pa-admin\nms.topic: conceptual\nms.date: 08/02/2023\nms.subservice: guidance-toolkit\nms.author: mapichle\nms.reviewer: sericks\nsearch.audienceType: \n  - admin\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Application Dependencies\nDESCRIPTION: This command installs the necessary application dependencies using npm, a package manager for Node.js, as part of setting up the CoE CLI application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/install.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to Site Settings in Power Platform Advanced Settings\nDESCRIPTION: Instructions for accessing the Sites configuration area through Advanced Settings in the Power Platform web app.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-edit-site.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n  \n2. Choose **Sites**.\n```\n\n----------------------------------------\n\nTITLE: Boolean AND Logic in PowerFx\nDESCRIPTION: Performs logical AND operation, returning true only if all arguments are true. Can be used with multiple conditions to check complex logical statements.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/formula-reference-formula-columns.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerFx\nCODE:\n```\nAnd(condition1, condition2, ...)\n```\n\n----------------------------------------\n\nTITLE: Defining the OwningUser Logical Name in Power Platform Dataverse\nDESCRIPTION: The logical name for the OwningUser field in Dataverse, which is a lookup field that references the systemuser entity and contains the unique identifier for the user that owns the record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_catalogitemfile.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`owninguser`\n```\n\n----------------------------------------\n\nTITLE: Structuring Remarks Section in HTML Comments\nDESCRIPTION: This snippet shows the structure for adding remarks to Microsoft Power Platform documentation. It includes HTML comments with instructions on how to remove the comments and add appropriate remarks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-create-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Path References to Redirected Files in Power Platform Admin Documentation\nDESCRIPTION: File paths for Power Platform admin documentation files that have been redirected but whose .md files cannot be removed yet due to localization requirements.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/pending-deleted-files.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npower-platform\\admin\\synchronize-user-information-active-directory.md\n```\n\nLANGUAGE: plaintext\nCODE:\n```\npower-platform\\admin\\wp-controlling-access.md\n```\n\n----------------------------------------\n\nTITLE: Resource File Metadata Tag Update Workaround\nDESCRIPTION: This snippet provides guidance on correcting metadata tags in resource files edited with Visual Studio to ensure they are compatible with the SolutionPackager tool.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-packager-tool.md#2025-04-20_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<data name=\"Source LCID\" xml:space=\"preserve\">\n     <value>1033</value>\n</data>\n\n<data name=\"Source file\" xml:space=\"preserve\">\n     <value>file.resx</value>\n</data>\n\n<data name=\"Source package type\" xml:space=\"preserve\">\n     <value>unmanaged</value>\n</data>\n\n<data name=\"SolutionPackager Version\" mimetype=\"application/x-microsoft.net.object.binary.base64\">\n     <value>1.0</value>\n</data>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<metadata name=\"Source LCID\" xml:space=\"preserve\">\n     <value>1033</value>\n</metadata>\n\n<metadata name=\"Source file\" xml:space=\"preserve\">\n     <value>file.resx</value>\n</metadata>\n\n<metadata name=\"Source package type\" xml:space=\"preserve\">\n     <value>unmanaged</value>\n</metadata>\n\n<metadata name=\"SolutionPackager Version\" mimetype=\"application/x-microsoft.net.object.binary.base64\">\n     <value>1.0</value>\n</metadata>\n```\n\n----------------------------------------\n\nTITLE: Account Privileges Table in Markdown\nDESCRIPTION: Markdown table showing the different privileges available for Account records in Dataverse, including Create, Read, Write, Delete, Append, Append To, Assign, and Share privileges with their descriptions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/how-record-access-determined.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Privilege|Description|  \n|---------------|-----------------|  \n|**Create**|Required to make a new record. Which records can be created depends on the access level of the permission defined in your security role.|  \n|**Read**|Required to open a record to view the contents. Which records can be read depends on the access level of the permission defined in your security role.|  \n|**Write**|Required to make changes to a record. Which records can be changed depends on the access level of the permission defined in your security role.|  \n|**Delete**|Required to permanently remove a record. Which records can be deleted depends on the access level of the permission defined in your security role.|  \n|**Append**|Required to associate the current record with another record. For example, a note can be attached to an opportunity if the user has Append rights on the note. The records that can be appended depend on the access level of the permission defined in your security role.|  \n|**Append To**|Required to associate a record with the current record. For example, if a user has Append To rights on an opportunity, the user can add a note to the opportunity. The records that can be appended to depend on the access level of the permission defined in your security role.|  \n|**Assign**|Required to give ownership of a record to another user. Which records can be assigned depends on the access level of the permission defined in your security role.|  \n|**Share**|Required to give access to a record to another user while keeping your own access. Which records can be shared depends on the access level of the permission defined in your security role.|\n```\n\n----------------------------------------\n\nTITLE: Installing from PAC Catalog using PowerShell\nDESCRIPTION: Example command demonstrating how to install items from the PAC catalog using the command line interface.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/catalog-install-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac catalog install\n```\n\n----------------------------------------\n\nTITLE: Threat Analysis Definition Table in Markdown\nDESCRIPTION: Markdown table defining key terms related to threat modeling and security analysis.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/threat-model.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Term | Definition |\n|---|---|\n| Software development lifecycle (SDLC) | A multistage, systematic process for developing software systems. |\n| STRIDE | A Microsoft-defined taxonomy for categorizing types of threats. |\n| Threat modeling | A process for identifying potential security vulnerabilities in the application and system, mitigating risks, and validating security controls. |\n```\n\n----------------------------------------\n\nTITLE: Build CoE CLI\nDESCRIPTION: Build the new version of the CoE CLI\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/upgrade.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Markdown Next Steps Navigation\nDESCRIPTION: Navigation element for directing users to the next documentation section about understanding ExpressRoute functionality.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/expressroute/benefits.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"nextstepaction\"]\n> [Understand how ExpressRoute works](how-expressroute-works.md)\n```\n\n----------------------------------------\n\nTITLE: TimeZoneRuleVersionNumber Property Definition in Power Platform\nDESCRIPTION: Definition of the TimeZoneRuleVersionNumber property which is for internal use only. This Integer field has a minimum value of -1 and maximum value of 2147483647.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**For internal use only.**|\n|DisplayName|**Time Zone Rule Version Number**|\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`timezoneruleversionnumber`|\n|RequiredLevel|None|\n|Type|Integer|\n|MaxValue|2147483647|\n|MinValue|-1|\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Power Fx\nDESCRIPTION: The '&' operator is used in Power Fx to concatenate strings, making multiple strings appear continuous.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_5\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"\\\"hello\\\" & \\\" \\\" & \\\"world\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Listing Environment Management Settings with PowerShell\nDESCRIPTION: Script to retrieve all management settings for a specific environment. Includes filtering for specific settings related to SAS IP restrictions and logging.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-environmentmanagement-settings.md#2025-04-20_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n#Set your environment ID\n$environmentId = \"ENV_ID_HERE\"\n\ntry \n{\n    # Create the new setting value\n    Write-Host \"Invoking List Management Settings for Environment $environmentId\"\n    $apiResponse = Invoke-WebRequest -Method Get -Uri \"https://api.powerplatform.com/environmentmanagement/environments/$environmentId/settings/?api-version=2022-03-01-preview&$select=EnableIpBasedStorageAccessSignatureRule,LoggingEnabledForIpBasedStorageAccessSignature\" -Headers $Headers\n\n    Write-Host $apiResponse\n} \ncatch \n{\n    # Dig into the exception to get the Response details.\n    Write-Host \"Response CorrelationId:\" $_.Exception.Response.Headers[\"x-ms-correlation-id\"]\n    Write-Host \"StatusCode:\" $_.Exception.Response.StatusCode.value__ \n    Write-Host \"StatusDescription:\" $_.Exception.Response.StatusDescription\n    $result = $_.Exception.Response.GetResponseStream()\n        $reader = New-Object System.IO.StreamReader($result)\n        $reader.BaseStream.Position = 0\n        $reader.DiscardBufferedData()\n        $responseBody = $reader.ReadToEnd();\n\n        Write-Host $responseBody\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remarks in HTML Comments for Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for adding remarks to the documentation. It suggests removing the comments and adding appropriate remarks in their place.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-name-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Unrelating Contacts from Products in Power Apps\nDESCRIPTION: This Power Apps formula unrelates a selected contact from the currently selected product in a gallery. It's used in the OnSelect property of a Cancel icon to remove the relationship between a contact and a product.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-relate-unrelate.md#2025-04-20_snippet_6\n\nLANGUAGE: power-fx\nCODE:\n```\nUnrelate( Gallery1.Selected.Contacts, ThisItem )\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for Status Reason Field\nDESCRIPTION: Specifies the logical name for the Status Reason field in the Package Solutions entity. This field provides more detailed status information beyond the basic state.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagesolutions.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`statuscode`\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate using PowerShell\nDESCRIPTION: This PowerShell script generates a self-signed certificate with a 2-year expiration period that can be used for authenticating with the Power Apps API. The certificate is saved as a PFX file protected with a password.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-setfocus-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$certName = \"<CertName>\";\n$password = \"<YourPw>\";\n$SecurePassword = ConvertTo-SecureString -String $password -AsPlainText -Force\n\n$CurrentDate = Get-Date\n$NotAfter = $CurrentDate.AddYears(2)\n$thumb = (New-SelfSignedCertificate -CertStoreLocation cert:\\currentuser\\my -DnsName $certName -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $NotAfter).Thumbprint\n$cert = (Get-ChildItem -Path cert:\\currentuser\\my\\$thumb)\n\nExport-PfxCertificate -Cert $cert -FilePath \"C:\\Temp\\$certName.pfx\" -Password $SecurePassword\n```\n\n----------------------------------------\n\nTITLE: Accessing Collaboration Settings in Power Platform Admin Center\nDESCRIPTION: Step-by-step procedure for navigating to collaboration settings in both new and classic admin center interfaces. Requires System Administrator security role or equivalent permissions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/settings-collaboration.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [New admin center](#tab/new)\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/)\n1. In the navigation pane, select **Manage**\n1. In the **Manage** pane, select **Environments**\n1. In the **Environments** page, and select an environment\n1. Select **Settings** in the command bar\n1. Expand **Product**, and then select **Collaboration**\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## [Classic admin center](#tab/classic)\n1. Sign in to the [Power Platform admin center](https://admin.powerplatform.microsoft.com/)\n1. In the navigation pane, select **Environments**\n1. In the **Environments** page, select an environment\n1. Select **Settings** in the command bar\n1. Expand **Product**, and then select **Collaboration**\n```\n\n----------------------------------------\n\nTITLE: Request Body for Creating Dataverse Application User\nDESCRIPTION: The JSON request body format required when creating a Dataverse application user. It contains the service principal application ID from Azure AD.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-dataverseapplicationuser.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servicePrincipalAppId\": \"AzureAD_App_Registration_ClientID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Non-interactive User Account Setup\nDESCRIPTION: Instructions for creating a non-interactive user account used for programmatic access between applications, limited to seven accounts per environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-users.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Create user account in Office 365 admin center\n2. Assign initial license\n3. Set Access Mode to Non-interactive\n4. Remove license\n5. Verify Non-interactive access mode remains set\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Power Platform CLI with .NET Tool\nDESCRIPTION: Command to remove the Power Platform CLI from your system using the dotnet tool uninstall command. This completely removes the globally installed Microsoft.PowerApps.CLI.Tool package.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/howto/install-cli-net-tool.md#2025-04-20_snippet_2\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool uninstall --global Microsoft.PowerApps.CLI.Tool\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell for Power Platform Administrators\nDESCRIPTION: Commands to install or update the Microsoft.PowerApps.Administration.PowerShell module, which is necessary for interacting with Power Platform admin capabilities.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\nUpdate-Module -Name Microsoft.PowerApps.Administration.PowerShell\n```\n\n----------------------------------------\n\nTITLE: Power Platform Admin Task Categories\nDESCRIPTION: Comprehensive list of administrative task categories and products covered in the Power Platform administration planning component\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/admin-tasks-component.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- AI Builder\n- Power Apps\n- Power Automate\n- Power Pages\n- Microsoft Copilot Studio\n- Environments, data loss prevention (DLP) policies, and connectors\n```\n\n----------------------------------------\n\nTITLE: Enabling Security Token Service Configuration in SharePoint\nDESCRIPTION: Configures the SharePoint farm security token service to allow metadata and OAuth over HTTP. This is a prerequisite for creating a trusted security token issuer for Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$c = Get-SPSecurityTokenServiceConfig  \n$c.AllowMetadataOverHttp = $true  \n$c.AllowOAuthOverHttp= $true  \n$c.Update()  \n```\n\n----------------------------------------\n\nTITLE: W3C Trace Context Header Implementation Reference\nDESCRIPTION: Reference to W3C Trace Context header implementation for correlating telemetry data across different components in the architecture. The trace parent contains trace ID, span ID, and request information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/distributed-tracing.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntraceparent: 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01\n```\n\n----------------------------------------\n\nTITLE: Listing Catalog Items with PAC CLI\nDESCRIPTION: This command lists all published catalog items in the current Dataverse Organization using PAC CLI. The output can be filtered using various parameters such as catalog item ID and name. It also supports JSON output format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/retrieve-data.md#2025-04-20_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\npac catalog list \\ \n Connected to... TestCatalog\\\n Connected as user@domain\\\n Listing all published catalog items from the current Dataverse Organization...\\\n Catalog Item Name                   Publisher Name            Catalog Item Id                      Revision Id                          Version Status\\\n Contoso Conference Custom Connector Catalog Conferences Team  ContosoConferencesCustomConnector    4e882dd6-74f3-ed11-8849-000d3a0a286b 1.0.0.1 Published\\\n Contoso Themed Components           ContosoPublisher          ContosoThemedComponents              efbc469d-f1b2-ed11-83fd-000d3a0a2d9d 1.0.0.1 Published\n```\n\n----------------------------------------\n\nTITLE: Cloning a Solution with General and Auto Numbering Settings in PowerShell\nDESCRIPTION: This example shows how to clone a solution named 'sampleSolution' to the current directory, including general and auto numbering settings, using the 'pac solution clone' command with additional parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-clone-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac solution clone --name sampleSolution --include general,autonumbering\n```\n\n----------------------------------------\n\nTITLE: Footer Include Reference\nDESCRIPTION: Markdown include statement for footer banner content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/organize-solutions.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[footer-include](../includes/footer-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Enabling a Signal in Power-FX\nDESCRIPTION: The Enable function is used to turn on a specific signal within the Power-FX environment. It requires a signal parameter that specifies which signal to activate. This function does not produce a return value and is utilized within behavior formulas.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-enable-disable.md#2025-04-20_snippet_0\n\nLANGUAGE: Power-FX\nCODE:\n```\n\"Enable( _Signal_ )\"\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML Comments for Power Platform Documentation\nDESCRIPTION: This snippet demonstrates the structure of HTML comments used as a template for adding remarks in Power Platform documentation. It includes instructions for removing comments and adding appropriate content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-add-solution-component-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Accessing Project \"Sophia\" and Creating a New Workspace\nDESCRIPTION: Steps to access Project \"Sophia\", create a new workspace, add data, and generate insights.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/ps-docs/data-connections.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [https://projectsophia.microsoft.com](https://projectsophia.microsoft.com).\n2. From the Home screen, select **New workspace**.\n3. Select **Add data**, and choose an option.\n4. From the top right, select **Domains** to optimize responses for your specific area of interest. \n5. Enter your question in the text box and then select **Generate**.\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the documentation page, defining metadata like title, description, authors, and other page properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/ps-docs/account-planning-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Overview of an account planning guide\ndescription: Learn how to generate an account planning guide in Project \"Sophia.\" Guides help the user provide the needed data, and then reason over it for a given scenario.\nauthor: mikkelsen2000\nms.topic: overview\nms.custom: \nms.reviewer: mkaur\nms.date: 7/11/2024\nms.service: power-platform\nms.author: pemikkel\nsearch.audienceType:\n  - maker\ncontributors:\n  - mduelae\n  - mikkelsen2000\n---\n```\n\n----------------------------------------\n\nTITLE: SDK Read Operations Note\nDESCRIPTION: Clarification on how Retrieve and RetrieveMultiple SDK calls are reported in the analytics system.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/analytics-common-data-service.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nRetrieve and RetrieveMultiple SDK calls are reported as Reads\n```\n\n----------------------------------------\n\nTITLE: Geographic Distribution Checklist Section\nDESCRIPTION: Markdown checklist for validating geographical distribution considerations and circuit connectivity optimization.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/expressroute/checklist.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n> * If your users are distributed geographically, have you considered how to optimize the ExpressRoute circuit connectivity?  \n> * Have you determined whether multiple circuits should be distributed geographically for different areas or regions?\n```\n\n----------------------------------------\n\nTITLE: Using As Operator to Override Scope Names in Gallery\nDESCRIPTION: This snippet demonstrates how to use the As operator to create a custom name for the current record in the Items property of a gallery, simplifying references in nested scenarios.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_16\n\nLANGUAGE: power-fx\nCODE:\n```\nEmployees As Employee\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML Comments for Power Platform Documentation\nDESCRIPTION: This HTML comment block provides a template for adding remarks to Power Platform documentation. It instructs users to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-add-reference-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Platform Support Indicators in Markdown\nDESCRIPTION: Markdown formatting showing application support indicators with inline images for various Power Platform components.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-boolean-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Applies to:** :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Canvas apps:::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Cards:::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Copilot Studio:::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Desktop flows:::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Model-driven apps:::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Power Platform CLI:::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Dataverse functions:::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Power Pages\n```\n\n----------------------------------------\n\nTITLE: Validating Power Fx Documentation Consistency - PowerShell\nDESCRIPTION: This PowerShell script is part of the documentation build process, ensuring that all relevant files remain consistent according to established criteria. It checks multiple file types for consistency without making any changes, serving as a validation tool before merging pull requests.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/funcjson/README.txt#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nThis script runs as part of the doc build process for each PR that touches \na file in the Power Fx directory. It must pass or the PR cannot be merged. \nThis script does not modify any files, it is purely read only.\n\nIt checks for:\n- Consistency between the reference/include/* files and the .json and \n  .json.errata files in this directory.\n- Consistency between the formula-reference-* files and the reference/* \n  files augmented with .md.errata files.\n- Consistency between the TOC.yml and formula-reference-* files.\n```\n\n----------------------------------------\n\nTITLE: Displaying Power Automate Legacy License Table in Markdown\nDESCRIPTION: This code snippet creates a markdown table showing legacy license types for Power Automate, including Per-user plan, Per-flow plan, and P1/P2 plans. It details the license type and entitlements for each.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/deep-dive-on-specific-license.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|License name |License type |Entitlements |\n-------|------|------|\nPower Automate Per-user plan|User license (legacy)|The Power Automate Premium license replaced this license (it provides more entitlements for the same price). <br><br>The already purchased Per-user plan licenses are still usable but considered legacy and they shouldn't be renewed but instead replaced by Power Automate Premium licenses.|\nPower Automate Per-flow plan|Capacity (legacy) allocated to cloud flow|The Power Automate Process license replaced this license. <br><br>The already purchased Per-flow plan licenses are still usable but considered legacy and they shouldn't be renewed but instead replaced by Power Automate Process licenses.|\nP1 and P2 plans|User license (legacy)|These grandfathered licenses are no longer available for purchase nor via autorenewal after December 31, 2020.|\n```\n\n----------------------------------------\n\nTITLE: Model-Driven App Form Layout Configuration\nDESCRIPTION: Form layouts in model-driven apps are configured using Power Apps Studio, allowing responsive grid-based designs with embedded custom components\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/layout.md#2025-04-20_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Using Help Function in Power Platform CLI\nDESCRIPTION: Example of using the Help function in the Power Fx REPL (Read-Eval-Print Loop) through the Power Platform CLI. The function returns a list of available functions and a link to the formula reference documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-help.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nC:\\>pac power-fx repl\nPower Fx REPL: x.x.x\n\n>> Help()\nAvailable functions (case sensitive):\n  Abs             Acos            Acot            AddColumns      And\n  Asin            AsType          Atan            Atan2           Average\n  Blank           Boolean         Char            Clear           ClearCollect\n  ...\n  Text            Time            TimeValue       TimeZoneOffset  Today\n  Trim            TrimEnds        Trunc           Upper           Value\n  VarP            Weekday         With            Year\n\nFormula reference: https://aka.ms/Power-Fx-Formula-Reference\n\ntrue\n\n>>\n```\n\n----------------------------------------\n\nTITLE: Building a Cloned Power Platform Solution\nDESCRIPTION: To build the cloned solution project, you can use either 'dotnet build' or 'msbuild'. It's recommended to perform a build restore first to ensure all required .NET libraries are available.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-remarks.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Flow Activation\nDESCRIPTION: List of required flows that need to be manually activated if the Setup Wizard shows 'Error Loading Control' warning.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-core-components.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSetupWizard > GetCurrentEnvironment\nSetupWizard > GetTenantID\nSetupWizard > GetUserDetails\n```\n\n----------------------------------------\n\nTITLE: Field Definition: processid in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Process Id uniqueidentifier field that contains the id of the process associated with the entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n`processid`\n```\n\n----------------------------------------\n\nTITLE: Security Incident Response Definition Table\nDESCRIPTION: Markdown table defining key security incident response terminology including alerts, incidents, triage and related concepts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/incident-response.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Term | Definition |\n|---|---|\n| Alert | A notification that contains information about an incident. |\n| Alert fidelity | The accuracy of the data that determines an alert. High-fidelity alerts contain the security context that's needed to take immediate actions. Low-fidelity alerts lack information or contain noise. |\n| False positive | An alert that indicates an incident that didn't happen. |\n| Incident | An event that indicates unauthorized access to a system. |\n| Incident response | A process that detects, responds to, and mitigates risks that are associated with an incident. |\n| Triage | An incident response operation that analyzes security issues and prioritizes their mitigation. |\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: YAML frontmatter configuration for the documentation page followed by markdown content explaining context management in Project Sophia. Includes metadata like author, date, and document properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/ps-docs/context-manage.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Manage context\ndescription: To improve the relevancy and consistency of generated reports, provide Project \"Sophia\" with a context.\nauthor: skent\nms.topic: overview\nms.custom: \nms.reviewer: skent\nms.date: 11/20/2024\nms.service: power-platform\nms.author: pemikkel\nsearch.audienceType:\n  - maker\ncontributors:\n  - skent\n  - mikkelsen2000\n---\n\n# Manage context\n\nYou can increase the relevancy and consistency of the content Project \"Sophia\" generates by adding _context_ to better interpret data. Project \"Sophia\" applies this context to your prompts automatically, so you don't have to repeat that same contextual information every time you interact with Project \"Sophia\".\n```\n\n----------------------------------------\n\nTITLE: Date Addition Function in PowerFx\nDESCRIPTION: Adds specified time units to a date/time value. Supports adding days, months, quarters, or years to a given date with precise control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/formula-reference-formula-columns.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerFx\nCODE:\n```\nDateAdd(date, number, timeunit)\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Documentation Remarks\nDESCRIPTION: A HTML comment block containing instructions for documentation authors to add remarks and remove the template content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-model-prepare-fetch-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Deployment Schedule\nDESCRIPTION: Table showing the deployment schedule for 2025 wave 1 early access across different regions with corresponding dates.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/opt-in-early-access-updates.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Region  | Deployment schedule for 2025 wave 1 early access |\n|---------|---------|-----|\n| Canada                       | January 22, 2025  |\n| South America                | January 22, 2025  |\n| India                        | January 22, 2025  |\n| France                       | January 22, 2025  |\n| South Africa                 | January 22, 2025  |\n| Germany                      | January 22, 2025  |\n| Switzerland                  | January 22, 2025  |\n| Norway                       | January 22, 2025  |\n| Korea                        | January 22, 2025  |\n| Singapore                    | January 22, 2025  |\n| Sweden                       | January 22, 2025  |\n```\n\n----------------------------------------\n\nTITLE: PowerShell Tool Example Command\nDESCRIPTION: Example PowerShell command structure for pac tool maker. Currently commented out as a template.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-maker-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac tool maker\n```\n\n----------------------------------------\n\nTITLE: Documentation Links in Markdown\nDESCRIPTION: A collection of markdown links to related documentation resources for monitoring and process mining tools.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/performance-efficiency/performance-planning.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Azure Monitor](/azure/azure-monitor/overview)\n- [Application Insights](/azure/azure-monitor/app/app-insights-overview)\n- [Log Analytics](/azure/azure-monitor/logs/log-analytics-overview)\n- [Process mining and task mining in Power Automate](/power-automate/process-advisor-overview)\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to CoE CLI\nDESCRIPTION: This snippet changes the working directory to the CoE CLI folder, allowing access to the application's files. It is assumed that the user has already extracted the downloaded CoE Starter Kit.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd coe-cli\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Structure\nDESCRIPTION: Basic HTML comment structure for adding remarks section in documentation\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: ActivityTypeCode Read-only Property Definition in Power Platform\nDESCRIPTION: Definition of the ActivityTypeCode read-only property which specifies the type of activity. This EntityName field is system required.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Type of activity.**|\n|DisplayName|**Activity Type**|\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`activitytypecode`|\n|RequiredLevel|SystemRequired|\n|Type|EntityName|\n```\n\n----------------------------------------\n\nTITLE: Displaying Free/Trial/Legacy License Entitlements Table in Markdown\nDESCRIPTION: This code snippet creates a markdown table comparing entitlements for free, trial, and legacy licenses in Power Automate. It covers various features such as PPR limits, connector types, RPA capabilities, and storage allocations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/deep-dive-on-specific-license.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n||Free license |Trial license |Per-user plan (legacy)  |Per-flow plan (legacy) |\n|----------|-------|---------------------|--------------|-------|\n|__Applied to__|User|User|User|Cloud flow|\n|__Daily PPR limit  <sup>1</sup>__|6k per user||40k per user|250k per Per-flow plan<sup>2</sup>|\n|__Standard connectors__|Included|Included|Included|Included|\n|__Premium connectors__|Not included|Included|Included|Included|\n|__Custom connectors__|Not included|Included|Included|Included|\n|__Attended RPA__|Not included|One attended bot included|Not included|Not included|\n|__Unattended RPA__|Not included|One unattended bot included|Not included|Not included|\n|__Hosted RPA__|Not included|Not included|Not included|Not included|\n|__Business process flows__|Not included|Included|Included|Included|\n|__On-premises gateways__|Not included|Included|Included|Included|\n|__Process mining__|Not included|Included|Not included|Not included|\n|__Process mining data storage__|Not included|Not included|Not included|Not included|\n|__AI Builder credits__|Not included|Not included|Not included|Not included|\n|__Dataverse database storage__|Not included|Not included|250-MB per license|50-MB per license|\n|__Dataverse file storage__|Not included|Not included|2-GB per license|200-MB per license|\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for mspcat_publisher Field\nDESCRIPTION: Defines the logical name for the Publisher field, which represents the publisher that owns this identity. This is an application required lookup to the mspcat_publisher entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`mspcat_publisher`\n```\n\n----------------------------------------\n\nTITLE: Structuring Command Group Documentation in Markdown\nDESCRIPTION: This snippet demonstrates the basic structure for documenting a command group in the Microsoft Power Platform CLI. It includes a placeholder for general remarks about the command group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Remarks\n\nAdd content here...\n```\n\n----------------------------------------\n\nTITLE: Creating a LocalDB Instance\nDESCRIPTION: This command creates a new LocalDB instance named 'MSSQLLocalDB' and starts it. It is necessary for configuring LocalDB to ensure a local database is ready for use in the Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/unified-experience/finance-operations-install-config-tools.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsqllocaldb create MSSQLLocalDB -s\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Snippet for Documentation Instructions\nDESCRIPTION: Provides template instructions for documentation creation, including guidance on removing comments and adding remarks\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-version-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n-->\n```\n\n----------------------------------------\n\nTITLE: Creating appSettings XML Configuration for Certificate Authentication\nDESCRIPTION: This XML snippet demonstrates how to configure application settings for certificate-based authentication. It includes settings for the client ID, tenant ID, certificate thumbprint, and target environment URL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-setfocus-applies-to.md#2025-04-20_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<appSettings>\n  <!-- These are to use with a client secret -->\n  <add key=\"ClientId\" value=\"<YourAppId>\" />\n  <add key=\"TenantId\" value=\"<YourTenantId>\" />\n  \n  <!-- Certificate Authentication -->\n  <add key=\"AuthCertThumbprint\" value=\"<YourCertThumbprint>\" />\n  \n  <!-- Power Platform Environment URL -->\n  <add key=\"ServiceUrl\" value=\"https://<YourEnvironmentName>.crm.dynamics.com\" />\n</appSettings>\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Catalog Tasks in Markdown\nDESCRIPTION: This snippet defines the parameters for various catalog tasks including install, submit, and status actions. These tasks are used to manage catalog items in Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-github-available-actions.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### install\n\n| Parameter           | Description        |\n|----------------------|--------------------------||\n|catalog-item-id|(Required) Catalog item to be installed on the target environment.|\n| target-url| (Required) The Url of the target environment for the catalog item installation into (for example, \"https://YourOrg.crm.dynamics.com\").|\n| settings | (Required) Runtime package settings for the installation framework to execute. The format of the string must be `key=value|key=value`. |\n| target-version        | Target version to install. If left empty, the published version is selected.   |\n|poll-status| Poll to check the status of your request.|\n\n### submit\n\n| Parameter           | Description        |\n|----------------------|---------------------------|\n| path |(Required) Path to catalog submission document.|\n| package-zip | Path to package zip file.|\n| solution-zip | Path to solution zip file. |\n|poll-status| Poll to check status of your request.|\n\n### status\n\n| Parameter           | Description        |\n|----------------------|---------------------------|\n| tracking-id |(Required) Request tracking id.|\n| type | (Required) Request type (Values: Install, Submit) |\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Role Assignments (User Context) in Power Platform\nDESCRIPTION: PowerShell script for users to remove their connection role assignments using Remove-AdminPowerAppConnectionRoleAssignment cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n\n#Retrieves all connection role assignments for the calling users and deletes them\nGet-AdminPowerAppConnectionRoleAssignment | Remove-AdminPowerAppConnectionRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: Copilots and AI Features Availability Table\nDESCRIPTION: Markdown table showing the availability of various Copilot and generative AI features across different Microsoft products, including their GCC availability status and related documentation links.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/geographical-availability-copilot.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Product | Feature  | Available in GCC? | Documentation\n|-------------------------|-------------------------|-------------------------|----------------------------|\n| Dynamics 365 Customer Service | Copilot | No | [Manage Copilot features in Customer Service](/dynamics365/customer-service/administer/configure-copilot-features)|\n| Dynamics 365 Sales | Copilot | No | [Copilot in Dynamics 365 Sales overview](/dynamics365/sales/copilot-overview)|\n| Microsoft Copilot Studio | Generative AI in copilots | Yes | [AI-based copilot authoring overview](/microsoft-copilot-studio/nlu-gpt-overview) and [Configure data movement for Copilot Studio generative AI features outside the United States](/microsoft-copilot-studio/manage-data-movement-outside-us) |\n| Microsoft Dataverse | Excel to table for new makers | No | [Upload an Excel file (preview)](/power-apps/maker/data-platform/create-edit-entities-portal#upload-an-excel-file-preview) |\n| Power Apps | Build apps through conversation | No | [Build apps through conversation](/power-apps/maker/canvas-apps/ai-conversations-create-app) |\n| Power Apps | Describe a new table | No | [Describe the new table](/power-apps/maker/data-platform/create-edit-entities-portal#describe-the-new-table) |\n| Power Apps | Draft with Copilot | No | [Draft with Copilot](/power-apps/user/well-written-input-text-copilot) |\n| Power Automate | Power Automate designer Copilot | Yes | [Get started with Copilot in cloud flows](/power-automate/get-started-with-copilot) |\n| Power Pages | Copilot | No | [Overview of AI-powered and Copilot features in Power Pages (preview)](/power-pages/configure/ai-copilot-overview) |\n| AI Builder | AI Prompts | Yes | [Overview of Prompts](/ai-builder/prompts-overview) |\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Template Comment for Power Platform Documentation\nDESCRIPTION: An HTML comment template that provides instructions for contributors to add remarks to Power Platform documentation. The comment instructs users to remove the comment line and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-fetch-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Adding Remarks Template for Microsoft Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for adding remarks to Microsoft Power Platform documentation. It instructs the user to remove the comments and add appropriate remarks under the '### Remarks' heading.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-add-license-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Power Fx Run Command Remarks\nDESCRIPTION: This HTML comment serves as a placeholder for adding remarks about the Power Fx run command. It instructs to remove the comments and add necessary remarks for the command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-run-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \n## Remarks \n\nRemove the comments an add any necessary remarks for the power-fx run command here\n-->\n```\n\n----------------------------------------\n\nTITLE: Analyzing Users by Device Type and App Version in Kusto\nDESCRIPTION: This Kusto query provides information on users accessing the mobile application, grouped by device type and app version.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-mobile.md#2025-04-20_snippet_4\n\nLANGUAGE: kusto\nCODE:\n```\ndependencies\n| where name == \"Offline.SyncDatabase\"\n| extend cd = parse_json(customDimensions)\n| extend AppVersion = tostring(cd.AppInfo_Version)\n| summarize dcount(user_Id) by AppVersion, client_Type\n```\n\n----------------------------------------\n\nTITLE: Power Platform Admin Center Navigation\nDESCRIPTION: Shows the basic HTML-style markdown for representing the Power Platform admin center navigation path. Demonstrates how to access the add-ons configuration area.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/capacity-add-on.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Power Platform admin center](https://admin.powerplatform.microsoft.com/)\n```\n\n----------------------------------------\n\nTITLE: Setting TextInput Control Value in Power Apps Test Studio\nDESCRIPTION: Sets the Text property of a TextInput control to a sample text value.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-setproperty.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerFx\nCODE:\n```\nSetProperty(TextInput1.Text, \"Sample text\")\n```\n\n----------------------------------------\n\nTITLE: Commenting HTML Documentation Template for Power Platform CLI\nDESCRIPTION: This HTML comment block provides instructions for documenting Power Platform CLI commands. It includes a section for adding general remarks about the command group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/application-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any general remarks for this command group below.\n\n### Remarks\n\nAdd content here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: This command builds a Docker image for the CoE CLI application. It assumes the user is in the correct directory and Docker is properly installed.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/install.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd coe-cli\ndocker build -t coe-cli .\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Data Source in Project \"Sophia\"\nDESCRIPTION: Steps to connect Project \"Sophia\" to an enterprise data source and generate insights.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/ps-docs/data-connections.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. If you're connecting to a data source, follow the instructions in the authentication dialog box.\n2. Select **Generate** or enter your question in the text box and then select **Generate**.\n```\n\n----------------------------------------\n\nTITLE: Unpacking Canvas App to Default Directory\nDESCRIPTION: Command to unpack a Canvas app .msapp file using the Power Platform CLI. When no output directory is specified, it unpacks to a default directory named '{AppName}_src'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-unpack-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac canvas unpack --msapp HelloWorld.msapp\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime State with Power Platform Admin Commands\nDESCRIPTION: Example placeholder showing the basic syntax for the pac admin set-runtime-state command in PowerShell. This is a template structure for documenting the command usage.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-set-runtime-state-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin set-runtime-state\n```\n\n----------------------------------------\n\nTITLE: Referencing Picture Using Custom Record Name from As Operator\nDESCRIPTION: This snippet shows how to use the custom name 'Employee' defined with the As operator to reference the Picture property in the context of a gallery.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_17\n\nLANGUAGE: power-fx\nCODE:\n```\nEmployee.Picture\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML Comments for Microsoft Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for adding remarks to the documentation. It includes a placeholder for the 'Remarks' section where additional information about the documented topic can be added.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-app-templates-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Power Automate Flows Schema\nDESCRIPTION: Defines the technical schema for tracking Power Automate flows, including resource identifiers, lifecycle states, and sharing information\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/self-service-analytics-schema-definition.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Property name**             | **Property type** |**Description**                                       |\n|-------------------------------|-------------------|------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Data Integration Portal URL for Dataverse\nDESCRIPTION: Base URL for accessing the data integration functionality in the Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/data-integration-privacy-dsr-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://admin.powerapps.com/dataintegration\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: Phone Call Entity Field Synchronization\nDESCRIPTION: A markdown table showing the synchronization settings for various fields of the Phone Call entity between Outlook and customer engagement apps. It includes Outlook fields, default sync directions, settable sync options, corresponding customer engagement app fields, and additional notes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/what-fields-synchronized-outlook.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Outlook fields |                                                   Default sync                                                    |                                                                                                                                                                                                                                                        Settable sync                                                                                                                                                                                                                                                         | Customer engagement apps field |                                                                                                                                Notes                                                                                                                                 |\n|----------------|-------------------------------------------------------------------------------------------------------------------||--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Date Completed | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\") | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\"), ![One-way sync arrow (right)](../admin/media/one-way-sync-arrow-right.png \"One-way sync arrow (right)\"), ![One-way sync arrow (left)](../admin/media/one-way-sync-arrow-left.png \"One-way sync arrow (left)\"), ![No synchronization arrow](../admin/media/no-sync-arrow.png \"No synchronization arrow\") |     Actual End     |                                                                                                                                                                                                                                                                      |\n|    Due Date    | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\") | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\"), ![One-way sync arrow (right)](../admin/media/one-way-sync-arrow-right.png \"One-way sync arrow (right)\"), ![One-way sync arrow (left)](../admin/media/one-way-sync-arrow-left.png \"One-way sync arrow (left)\"), ![No synchronization arrow](../admin/media/no-sync-arrow.png \"No synchronization arrow\") |      Due Date      |                                                                                                                              See below.                                                                                                                              |\n|   Importance   | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\") ||      Priority      |                                                                                  [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)] has High Importance, Low Importance.                                                                                  |\n|     Notes      | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\") | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\"), ![One-way sync arrow (right)](../admin/media/one-way-sync-arrow-right.png \"One-way sync arrow (right)\"), ![One-way sync arrow (left)](../admin/media/one-way-sync-arrow-left.png \"One-way sync arrow (left)\"), ![No synchronization arrow](../admin/media/no-sync-arrow.png \"No synchronization arrow\") |    Description     | [!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)] and [!INCLUDE[pn_Exchange](../includes/pn-exchange.md)] can contain things like images and links. Customer engagement apps can only contain multiple lines of text. |\n|   Regarding    | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\") ||     Regarding      |                                                                                                                           See Notes below.                                                                                                                           |\n|   Start Date   | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\") | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\"), ![One-way sync arrow (right)](../admin/media/one-way-sync-arrow-right.png \"One-way sync arrow (right)\"), ![One-way sync arrow (left)](../admin/media/one-way-sync-arrow-left.png \"One-way sync arrow (left)\"), ![No synchronization arrow](../admin/media/no-sync-arrow.png \"No synchronization arrow\") |     Start Date     |                                                                                                                                                                                                                                                                      |\n|     Status     | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\") ||       Status       |                                                                                                           Computed from Activity Status and Status Reason.                                                                                                           |\n|    Subject     | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\") | ![Two-way sync arrow](../admin/media/two-way-sync-arrow.png \"Two-way sync arrow\"), ![One-way sync arrow (right)](../admin/media/one-way-sync-arrow-right.png \"One-way sync arrow (right)\"), ![One-way sync arrow (left)](../admin/media/one-way-sync-arrow-left.png \"One-way sync arrow (left)\"), ![No synchronization arrow](../admin/media/no-sync-arrow.png \"No synchronization arrow\") |      Subject       |                                                                                                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Component Input and Cloud Flow URL Update Example\nDESCRIPTION: Step-by-step instructions for updating component inputs and cloud flow URLs on the Manage Profile page in Power Pages design studio\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-supplier-self-service/install-and-set-up.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Copy flow URL for **Power Pages Read Vendor**.\n2. Go to **Power Pages design studio** > **Pages**.\n3. Select **Manage Profile** page.\n4. Select **Edit Custom Component** and update the URL. Add the partial URL in this format: `/_api/cloudflow/v1.0/trigger/xxxxxxxxx-xxxxxx-xxxxxxxx-xxxxxxxxxxxx`\n5. Select **Done**.\n```\n\n----------------------------------------\n\nTITLE: JSON Date Example\nDESCRIPTION: Example showing how dates are represented in ISO 8601 format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"2019-03-31\"\n```\n\n----------------------------------------\n\nTITLE: Performance Data Segmentation Recommendations\nDESCRIPTION: Guidelines for organizing and categorizing performance metrics to optimize monitoring and troubleshooting across different environments\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/performance-efficiency/collect-performance-data.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Segmentation Best Practices\n- Keep production and nonproduction data separate\n- Use consistent data sets within each environment\n- Separate performance targets from business metrics\n```\n\n----------------------------------------\n\nTITLE: Security Checklist Reference Table\nDESCRIPTION: Markdown table showing the security checklist reference for Power Platform Well-Architected Security recommendations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/incident-response.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|[SE:11](checklist.md)| **Define and test effective incident response procedures that cover a spectrum of incidents, from localized issues to disaster recovery. Clearly define which team or individual runs a procedure.** |\n|---|---|\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Comment in HTML\nDESCRIPTION: HTML comment block containing instructions and placeholder for adding documentation remarks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Reliability Metrics Table in Markdown\nDESCRIPTION: Markdown table showing the mapping between reliability terms and their definitions, including SLO, SLI, SLA, MTTR, MTBF, RTO and RPO metrics.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/reliability/metrics.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Term                      | Definition                                      |\n|----------------------------------|------------------------------------------|\n| Service-level objective (SLO)    | A percentage target that represents the health of the component and the reliability tier. The higher the tier, the more reliable the component. *Composite SLO* represents the aggregate target of the entire workload and accounts for the component SLOs. |\n| Service-level indicator (SLI)    | A metric emitted by a service. SLI metrics are aggregated to quantify an SLO value. |\n| Service-level agreement (SLA)    | A contractual agreement between the service provider and the service customer. The agreement defines the SLOs. Failure to meet the agreement might have financial consequences for the service provider.  |\n| Mean time to recover (MTTR)      | The time taken to restore a component after a failure is detected.  |\n| Mean time between failure (MTBF) | The duration for which the workload can perform the expected function without interruption, until it fails.  |\n| Recovery time objective (RTO)    | The maximum acceptable time that an application can be unavailable after an incident.   |\n| Recovery point objective (RPO)   | The maximum acceptable duration of data loss during an incident.   |\n```\n\n----------------------------------------\n\nTITLE: Switching Behavior on Item Select in Power Fx\nDESCRIPTION: This Power Fx formula configures the 'OnSelect' behavior for the Breadcrumb control. It uses a Switch statement to define actions for selected breadcrumb items based on their keys. It encourages the use of navigation functions for transitioning between screens.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/creator-kit/breadcrumb.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nSwitch( Self.Selected.ItemKey,\n  /* Action for ItemKey 1 */\n  \"1\", false,\n  \n  /* Action for ItemKey 2 */\n  \"2\", false,\n\n  /* Default action */\n      false\n)\n```\n\n----------------------------------------\n\nTITLE: Field Mappings for BAPI_GOODSMVT_CREATE\nDESCRIPTION: Detailed mapping of field parameters for goods receipt creation in SAP, including header and line item configurations with default values\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/use/goods-receipt-management.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Area             | Display Name            | Parameter | Field     | Default       |\n|------------------|-------------------------|-----------|------------|---------------|\n| Header           | Posting Date                  | GOODSMVT_HEADER    | PSTNG_DATE |               |\n| Header           | Document Date             | GOODSMVT_HEADER    | DOC_DATE           |      |\n| Header           | Header Text | GOODSMVT_HEADER    | HEADER_TXT  |               |\n| Line             | Purchase Order Item Number | GOODSMVT_ITEM | PO_ITEM |               |\n| Line             | Material Number | GOODSMVT_ITEM | MATERIAL |               |\n| Line             | Purchase Order Number | GOODSMVT_ITEM | PO_NUMBER |               |\n| Line             | Quantity | GOODSMVT_ITEM | ENTRY_QNT |               |\n| Line             | Unit Of Measure | GOODSMVT_ITEM | ENTRY_UOM |               |\n| Line             | Location | GOODSMVT_ITEM | PLANT |               |\n| Line             | Storage Location | GOODSMVT_ITEM    | STGE_LOC |           |\n| Line             | Vendor | GOODSMVT_ITEM | VENDOR |               |\n| Line (Default)   | \"Delivery Completed\" Indicator | GOODSMVT_ITEM    | NO_MORE_GR| 'X' |\n| Line (Default)   | Movement Type | GOODSMVT_ITEM    | MOVE_TYPE | '101' |\n| Line (Default)   | Movement Indicator | GOODSMVT_ITEM    | MVT_IND | 'B' |\n| Header (Default) | Goods Movement Code           | GOODSMVT_CODE    | GM_CODE    | 01            |\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Documentation Remarks\nDESCRIPTION: A template HTML comment block that instructs users to remove the comments and add appropriate remarks in their place.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-add-group-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Field Reference Example Using Logical Name\nDESCRIPTION: Example showing how to reference a field using its logical name without quotes since it contains no spaces.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_30\n\nLANGUAGE: powerapp-formula\nCODE:\n```\ncr5e3_customfield\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Microsoft Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for adding remarks to the documentation. It includes a section header for 'Remarks' and placeholder text for adding content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-pd-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Affordance and Visual Interaction Signals\nDESCRIPTION: Demonstrates how visual elements provide intuitive cues about interactive elements, using Fluent UI components to guide user expectations\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/interaction-design.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Affordance\n\nAn \"affordance\" is a perceived signal or clue that an object may be used to perform a particular action.\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for owneridtype Field\nDESCRIPTION: Defines the logical name for the Owner Id Type field, which represents the type of the owner ID. This is a system required entity name field.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`owneridtype`\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining metadata like title, description, author, and other MS Docs specific properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/power-bi.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"CoE Power BI Dashboard | MicrosoftDocs\"\ndescription: \"Gain deep insights into your Microsoft Power Platform adoption with the CoE Power BI dashboard\"\nauthor: manuelap-msft\n\nms.component: pa-admin\nms.topic: conceptual\nms.date: 08/02/2023\nms.subservice: guidance-toolkit\nms.author: mapichle\nms.reviewer: sericks\nsearch.audienceType: \n  - admin\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Requirements Table\nDESCRIPTION: Table showing Power Platform Well-Architected Security checklist recommendation SE:01\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/establish-baseline.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|[SE:01](checklist.md)| **Establish a security baseline aligned to compliance requirements, industry standards, and platform recommendations. Regularly measure your workload architecture and operations against the baseline to sustain or improve your security posture over time.** |\n|---|---|\n```\n\n----------------------------------------\n\nTITLE: Regional Deployment Schedule Table in Markdown\nDESCRIPTION: A markdown table showing the deployment schedule for 2025 wave 1 general availability across different regions, including dates for First Release, various geographical regions, and government clouds.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/general-availability-deployment.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Region  | Deployment schedule for 2025 wave 1 general availability |\n|---------|----------|\n| First release                | March 24, 2025 |\n| Canada                       | March 31, 2025  |\n| South America                | March 31, 2025  |\n| India                        | March 31, 2025  |\n| France                       | March 31, 2025  |\n| South Africa                 | March 31, 2025  |\n| Germany                      | March 31, 2025  |\n| Switzerland                  | March 31, 2025  |\n| Norway                       | March 31, 2025  |\n| Korea                        | March 31, 2025  |\n| Singapore                    | March 31, 2025  |\n| Sweden                       | March 31, 2025  |\n| United Arab Emirates         | April 7, 2025  |\n| Japan                        | April 7, 2025  |\n| Asia Pacific                 | April 7, 2025  |\n| Great Britain                | April 7, 2025  |\n| Australia                    | April 7, 2025  |\n| GCC High*                   | April 7, 2025  |\n| Europe                       | April 14, 2025 |\n| North America                | April 21, 2025 |\n| GCC*                        | April 28, 2025 |\n| DoD*                        | April 28, 2025 |\n| China**                      | April 28, 2025 |\n```\n\n----------------------------------------\n\nTITLE: Defining UTCConversionTimeZoneCode Attributes in Power Platform\nDESCRIPTION: This snippet includes the attributes for the UTCConversionTimeZoneCode entity, explaining its purpose, display name, and acceptable value ranges. It serves to document the metadata associated with the time zone code that reflects the settings at the time of record creation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_staticanalysispolicy.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Time zone code that was in use when the record was created.**|\n|DisplayName|**UTC Conversion Time Zone Code**|\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`utcconversiontimezonecode`|\n|RequiredLevel|None|\n|Type|Integer|\n|MaxValue|2147483647|\n|MinValue|-1|\n```\n\n----------------------------------------\n\nTITLE: Deleting a connection using Power Platform CLI\nDESCRIPTION: This PowerShell command deletes a connection using the Power Platform CLI. It is assumed that the CLI is installed and configured correctly. The command does not take any explicit parameters but relies on the CLI's current context.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connection-delete-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac connection delete\n```\n\n----------------------------------------\n\nTITLE: Making GET HTTP Request with Query Parameters in Canvas Apps\nDESCRIPTION: This example demonstrates how to make a GET HTTP request with query parameters to retrieve data from an external API. The snippet shows proper syntax for specifying the URI, method, headers, and handling the response.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-readnfc-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPatch(\n    MyContextVariable,\n    {\n        \"APIResponse\": Coalesce(\n            Office365.HttpRequest(\n                \"https://api.contoso.com/data?year=2023&type=JSON\",\n                \"GET\",\n                {},\n                {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            ).Body,\n            \"Error calling API\"\n        )\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Support Request Table in Markdown\nDESCRIPTION: A markdown table listing different Dynamics 365 services and their corresponding support portals for submitting support requests.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/support-overview.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Service  |Support portal  |\n|---------|---------|\n|Customer engagement apps and AI apps including mixed reality apps and Insights apps   |[Power Platform admin center](https://admin.powerplatform.microsoft.com)         |\n|Finance and operations apps (online and on-premises)     | <a href=\"https://lcs.dynamics.com\">Lifecycle Services</a>    |\n|Dynamics 365 Business Central      | Support is provided through partners only. Contact your Cloud Solution Provider (CSP) for assistance.        |\n|**Product**    |     |\n|Dynamics   |<a href=\"https://support.microsoft.com/supportforbusiness/productselection\">Support for Business</a><br /> or <br />  <a href=\"https://support.microsoft.com/premier\">Premier Support</a>   |\n```\n\n----------------------------------------\n\nTITLE: Setting Package Data Folder Name in C#\nDESCRIPTION: This property overrides the folder name where the import package data is stored in the Solution Explorer. It is important to ensure that this name matches the folder name in the project's directory.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override string GetImportPackageDataFolderName  \n{  \nget  \n{  \n// WARNING this value directly correlates to the folder name in the Solution Explorer where the ImportConfig.xml and sub content is located.  \n// Changing this name requires that you also change the correlating name in the Solution Explorer  \nreturn \"PkgFolder\";  \n}  \n}\n```\n\n----------------------------------------\n\nTITLE: Team Business Unit Change Procedure\nDESCRIPTION: Step-by-step instructions for changing a team's business unit in the Power Platform interface, including navigation paths and important considerations for security role assignments and record movement.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-edit-business-units.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Select an environment and go to Settings > Users + permissions > Teams.\n2. Select the checkbox for a team name.\n3. On the menu bar, select Change Business Unit.\n4. In the Change Business Unit dialog box, select a business unit. Enable Move records to new business unit to move to a new business unit. Select OK.\n```\n\n----------------------------------------\n\nTITLE: in operator usage in Power Platform\nDESCRIPTION: This snippet demonstrates the 'in' operator in Power Platform for checking membership. It checks if the selected item in Gallery1 is present in the SavedItems collection or table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_6\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Gallery1.Selected in SavedItems\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Structure\nDESCRIPTION: The document structure includes frontmatter metadata, header sections, includes, and content about resource management in Power Platform admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-manage-resources.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Resource overview | MicrosoftDocs\"\ndescription: About resources\nauthor: sericks007\nms.component: pa-admin\nms.topic: overview\nms.date: 06/23/2022\nms.subservice: admin\nms.author: sericks \nsearch.audienceType: \n  - admin\n---\n# Resource overview\n\n[!INCLUDE[new-PPAC-banner](~/includes/new-PPAC-banner.md)]\n\n<!-- This was created for fwlink 2126968. Don't delete. -->\n```\n\n----------------------------------------\n\nTITLE: Setting Claims-Based Authentication Mapping Type in PowerShell\nDESCRIPTION: PowerShell command to configure the claims-based authentication mapping which uses the user's Windows Live ID email address and SharePoint on-premises work email address for identity mapping.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/configure-server-based-authentication-sharepoint-on-premises.md#2025-04-20_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$map1 = New-SPClaimTypeMapping -IncomingClaimType \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\" -IncomingClaimTypeDisplayName \"EmailAddress\" -SameAsIncoming\n```\n\n----------------------------------------\n\nTITLE: Following the system administrator permission procedure in Power Platform\nDESCRIPTION: This is a reference to an included procedure for checking system administrator permissions in Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-templates-articles.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[proc_permissions_system_admin](../includes/proc-permissions-system-admin.md)]\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Comment Structure\nDESCRIPTION: HTML comment block with instructions for removing comments and adding remarks section. Template structure for documentation content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/application-install-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Verbose Output of merge-translation Command with Error Details\nDESCRIPTION: Shows the detailed output when using the --verbose flag with merge-translation command. The verbose output includes specific information about missing translation keys and unused translation values.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-merge-translation-remarks.md#2025-04-20_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nConnected as user@contoso.org\n\nMissing translation key: 'dialog(ms_store_newTestCopilot.topic.Lesson2)'.'trigger(main)'.'action(LbWwpD)'.Entity.Definition.'closedListItem(Redmond)'.DisplayName.\n\nUnused translation: 'dialog(ms_store_newTestCopilot.topic.Lesson2)'.'trigger(main)'.'action(LbWwpD)'.Entity.Definition.'closedListItem(Redmont)'.DisplayName, value: Redmond\n\nLoading language German into bot 'ms_store_newTestCopilot' (New Test Copilot) from file 'C:\\Users\\user\\ms_store_newTestCopilot'. 1 key(s) were missing, 1 value(s) were not used. Use the --verbose switch to get more details.\n\nUpdated 16 out of 16 components.\n```\n\n----------------------------------------\n\nTITLE: Running Package Deployer with Command Line Parameters in PowerShell\nDESCRIPTION: This PowerShell command demonstrates how to run the Package Deployer tool (packagedeployer.exe) with specific parameters. The example shows setting the SkipChecks parameter to true for improved import performance and setting the language ID (LCID) to 1045 for Polish language support.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/deploy-packages-using-package-deployer-windows-powershell.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npackagedeployer.exe /Settings:\"SkipChecks=true|lcid=1045\"\n```\n\n----------------------------------------\n\nTITLE: Registering an Application using Power Platform CLI in PowerShell\nDESCRIPTION: This code snippet demonstrates how to use the Power Platform CLI to register an application. The 'pac admin application register' command is used for this purpose.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-application-register-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin application register\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Power Platform Documentation\nDESCRIPTION: Basic HTML comment structure containing instructions and placeholder for remarks section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-clear-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Setting Dropdown Items to Calendar.MonthsLong() in Power Apps\nDESCRIPTION: Example of setting the Items property of a Dropdown control to display full month names using Calendar.MonthsLong() function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-clock-calendar.md#2025-04-20_snippet_0\n\nLANGUAGE: powerapps\nCODE:\n```\nCalendar.MonthsLong()\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Structure\nDESCRIPTION: Basic HTML comment structure providing instructions and placeholder for remarks section in documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-assign-group-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Creating a Copilot with Power Platform CLI in PowerShell\nDESCRIPTION: Example PowerShell command for creating a new Copilot using the Power Platform CLI. The 'pac copilot create' command initiates the Copilot creation process.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-create-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac copilot create\n```\n\n----------------------------------------\n\nTITLE: Opening the Reporting System Settings Dialog in Dynamics 365\nDESCRIPTION: Steps to access the Reporting System Settings dialog box in Dynamics 365 customer engagement apps. Includes required permissions and navigation instructions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-reporting-tab.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [!INCLUDE[proc_permissions_system_admin_and_customizer](../includes/proc-permissions-system-admin-and-customizer.md)]  \n\n    Check your security role  \n\n   - [!INCLUDE[proc_follow_steps_in_link](../includes/proc-follow-steps-in-link.md)]  \n\n   - [!INCLUDE[proc_dont_have_correct_permissions](../includes/proc-dont-have-correct-permissions.md)]  \n\n2. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n3. Select **Settings** > **Administration**.\n\n4. Select **System Settings** > **Reporting** tab.\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Power Platform Command Documentation\nDESCRIPTION: An HTML comment block containing instructions for contributors on how to document a command group. The template includes a section for general remarks about the command group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/test-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any general remarks for this command group below.\n\n### Remarks\n\nAdd content here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Commenting Instructions in HTML for Power Platform Documentation\nDESCRIPTION: This HTML comment provides instructions for adding remarks to the documentation. It instructs the user to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-check-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Microsoft Documentation\nDESCRIPTION: A template with instructions for documentation authors to remove comments and add appropriate remarks in a section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/package-add-external-package-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Including New PPAC Banner in Markdown\nDESCRIPTION: This snippet includes a reference to a banner for the new Power Platform admin center using Markdown syntax.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/turn-duplicate-detection-rules-off-whole-organization.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[new-PPAC-banner](~/includes/new-PPAC-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: PowerShell Management Resource\nDESCRIPTION: Reference to the PowerShell Gallery for obtaining administrative PowerShell cmdlets and packages for Power Platform management\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/wp-management-monitoring.md#2025-04-20_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://www.powershellgallery.com/\n```\n\n----------------------------------------\n\nTITLE: Using ThisItem to Reference Picture of Current Employee\nDESCRIPTION: This snippet demonstrates using the ThisItem operator to access the Picture property of the current employee item in the gallery.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_11\n\nLANGUAGE: power-fx\nCODE:\n```\nThisItem.Picture\n```\n\n----------------------------------------\n\nTITLE: Decimal Separator in Power Fx\nDESCRIPTION: The '.' operator (language dependent) is used as a decimal separator in Power Fx to separate the whole and fractional parts of a number. The specific character used depends on the language.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"1.23\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Comment Structure\nDESCRIPTION: HTML comment block providing instructions for adding remarks to documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-clone-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Definition Table in Markdown\nDESCRIPTION: Markdown table showing key terms and their definitions related to flow types in Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/reliability/identify-flows.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Term | Definition |\n| --- | --- |\n| User flow | The paths or sequences of actions that users take within an application or system. |\n| System flow | The flow of information and processes within a system. The system automatically follows this flow to enable user flows or workload functionality. |\n```\n\n----------------------------------------\n\nTITLE: Including PPAC Banner in Markdown\nDESCRIPTION: Markdown include statement for the new Power Platform Admin Center banner component.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/opt-out-automatic-license.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[new-PPAC-banner](~/includes/new-PPAC-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Mermaid Node Shapes with Styled Circles\nDESCRIPTION: Shows how to create node shapes with circles and apply custom CSS styling\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/documentation.md#2025-04-20_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n   subgraph Journey\n      start(Start Here) ---> finish((End Here))\n   end\n```\n\nLANGUAGE: css\nCODE:\n```\n[id^=flowchart-finish] circle {\n   stroke: green;\n   fill: lightgreen\n}\n```\n\n----------------------------------------\n\nTITLE: Field Reference Example Using Display Name\nDESCRIPTION: Example showing how to reference a field using its display name with single quotes when the name contains spaces.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_29\n\nLANGUAGE: powerapp-formula\nCODE:\n```\n'Custom Field'\n```\n\n----------------------------------------\n\nTITLE: Special Format Number Conversion in Power Fx\nDESCRIPTION: Examples showing conversion of percentages, currency values, and scientific notation to numeric values using Value and Decimal functions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-value.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nValue(\"12.34%\")\n// Result: 0.1234 (Decimal)\n\nValue(\"$ 12.34\")\n// Result: 12.34 (Decimal)\n\nValue(\"24e3\")\n// Result: 24000 (Decimal)\n```\n\n----------------------------------------\n\nTITLE: Listing Power Platform Environment Settings\nDESCRIPTION: CLI command to retrieve all settings from the organization entity, allowing administrators to view current environment configuration details\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-update-settings-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\npac env list-settings\n```\n\n----------------------------------------\n\nTITLE: Documentation Comments Template in HTML\nDESCRIPTION: HTML comment block containing instructions for adding remarks to documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-service-principal-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Mermaid Subgroup Diagram Styling with CSS\nDESCRIPTION: Demonstrates creating a mermaid diagram with subgroup styling and custom CSS for node and line coloration\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/documentation.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph\n    subgraph journey[Journey]\n      start(Start) --> finish(Finish Here)\n    end\n\n    style journey fill:transparent,stroke:green,stroke-width:2px\n```\n\nLANGUAGE: css\nCODE:\n```\n#L-start-finish path {\n   stroke: red\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell: Bulk Record Reassignment for Stub Users\nDESCRIPTION: Command-line method to reassign records from a stub user to another user using PowerShell\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-users.md#2025-04-20_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-BulkRecordsToUsers\n```\n\n----------------------------------------\n\nTITLE: On-premises Integration Checklist Section\nDESCRIPTION: Markdown checklist for validating on-premises network security and integration requirements.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/expressroute/checklist.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n> * Are connections from the Microsoft Cloud to the on-premises network across ExpressRoute protected as if they came from the public internet?\n```\n\n----------------------------------------\n\nTITLE: Converting Untyped Object to Number in Power Fx\nDESCRIPTION: This snippet shows how to convert an untyped object variable 'UOValue' to a number using the Value() function.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/untyped-object.md#2025-04-20_snippet_1\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nValue(UOValue)\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Power Platform Documentation\nDESCRIPTION: HTML comment block providing a template structure for adding remarks sections in Microsoft Power Platform documentation files\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-download-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Building Solution Package with MSBuild\nDESCRIPTION: Command to build the solution and create a solution package using MSBuild\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/appsource/appendix-add-license-information-to-your-solution.md#2025-04-20_snippet_3\n\nLANGUAGE: CLI\nCODE:\n```\nmsbuild /t:build /restore -p:Configuration=Release\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Comments Template\nDESCRIPTION: HTML comment block providing instructions and structure for adding documentation remarks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-status-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Listing Connections with Power Platform CLI\nDESCRIPTION: Command to list all available connections using the Power Platform CLI (pac) tool. Currently shown as a commented example template.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connection-list-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac connection list\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Content Structure\nDESCRIPTION: Shows the frontmatter and basic structure of the documentation page including metadata like title, description, author information and applicability\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/multiple-online-environments-tenants.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Considerations for choosing multiple environments or tenants\"\ndescription: \"Learn about options and use cases for choosing multiple environments or tenants in your subscription, including a multi-tenant deployment.\" \nms.custom: \"\"\nms.date: 09/30/2022\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: conceptual\napplies_to: \n  - \"Dynamics 365 (online)\"\nauthor: sericks007\nms.assetid: \ncaps.latest.revision: 63\nms.subservice: admin\nms.author: sericks\nsearch.audienceType: \n  - admin\n---\n```\n\n----------------------------------------\n\nTITLE: Example System Log Format in JSON\nDESCRIPTION: Sample structure of a system-generated log record showing timestamp, application name, action, IP address, and device platform information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-dsr-guide-systemlogs.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{ \n\"DateTime\": \"2017-04- 28T12:09:29-07:00\",  \n\"AppName\": \"SharePoint\", \n\"Action\": \"OpenFile\", \"IP\": \"154.192.13.131\", \n\"DevicePlatform\": \"Windows 1.0.1607\" \n}]\n```\n\n----------------------------------------\n\nTITLE: Client Routing Checklist Section\nDESCRIPTION: Markdown checklist for validating client routing configurations and network connectivity requirements for ExpressRoute implementation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/expressroute/checklist.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> * Are clients configured to use a proxy to route traffic to the ExpressRoute subnet rather than across the internet?\n> * Are clients connecting from a public IP address, or are they hidden behind network address translation?\n> * Are clients able to connect through the internet for non-private resources, such as Azure Content Delivery Network?\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Language Function in PowerFx\nDESCRIPTION: Simple invocation of the Language function to retrieve the current user's language tag.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-language.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerFx\nCODE:\n```\nLanguage()\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for owningteam Field\nDESCRIPTION: Defines the logical name for the Owning Team field, which represents the unique identifier for the team that owns the record. This is a read-only lookup field that targets team.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`owningteam`\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for upload-paportal Action in Markdown\nDESCRIPTION: This snippet defines the parameters for the upload-paportal action, which uploads data to Power Pages. It includes details on required and optional parameters such as environment URL, authentication credentials, and upload path.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-github-available-actions.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter    | Description       |\n|---------------|-------------------|\n|environment-url| (Required) The URL for the  environment that you want to import the solution into (for example, `https://YourOrg.crm.dynamics.com`).|\n|app-id| The application ID to authenticate with. This parameter is **required** when authenticating with Service Principal credentials.|\n|client-secret| The client secret used to authenticate the GitHub pipeline. This parameter is **required** when authenticating with Service Principal credentials.|\n|tenant-id| The tenant ID when authenticating with `app-id` and `client-secret`.|\n|upload-path|Path where the website content is stored (alias: -p).|\n|deployment-profile| Upload portal data with environment details defined through [profile variables](/powerapps/maker/portals/power-apps-cli#use-deployment-profile) in deployment-profiles\\[profile-name].deployment.yaml file.|\n|model-version|Indicates if the site data to be uploaded will use the standard (`1`) or [enhanced data model](/power-pages/admin/enhanced-data-model) (`2`). Default value is '1'.|\n```\n\n----------------------------------------\n\nTITLE: Markdown Include Footer Statement\nDESCRIPTION: Markdown include directive for adding a footer banner to the documentation\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-overview.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[footer-include](../includes/footer-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Structure\nDESCRIPTION: Basic HTML comment structure providing instructions and placeholder for remarks section in documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-init-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Template with Instructions\nDESCRIPTION: This HTML comment provides instructions for documentation formatting. It directs users to remove comments and add appropriate remarks in a section labeled 'Remarks'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-create-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Opening Marketing System Settings in Dynamics 365\nDESCRIPTION: Steps to access the Marketing tab in System Settings for Dynamics 365 customer engagement apps. Includes prerequisites for user permissions and navigation instructions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-marketing-tab.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [!INCLUDE[proc_permissions_system_admin_and_customizer](../includes/proc-permissions-system-admin-and-customizer.md)]  \n\n    Check your security role  \n\n   - [!INCLUDE[proc_follow_steps_in_link](../includes/proc-follow-steps-in-link.md)]  \n\n   - [!INCLUDE[proc_dont_have_correct_permissions](../includes/proc-dont-have-correct-permissions.md)]  \n\n2. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n3. Select **Settings** > **Administration**.\n\n4. Select **System Settings** > **Marketing** tab.\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for modifiedon Field\nDESCRIPTION: Defines the logical name for the Modified On field, which represents the date and time when the record was modified. This is a read-only DateTime field with UserLocal behavior.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`modifiedon`\n```\n\n----------------------------------------\n\nTITLE: Enabling User Identification Data Access for Makers in PowerShell\nDESCRIPTION: PowerShell command to enable maker access to EUPI (End User Pseudonymous Identifiers) such as session IDs and user object IDs in event logs for a specific Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/monitoring/monitoring-overview.md#2025-04-20_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AdminPowerAppEnvironmentMakerAnalyticsSettings -EnvironmentName\n     {environment id} -EnableEUPIForMakerAnalytics $true\n```\n\n----------------------------------------\n\nTITLE: Environment Database Operations Guidelines\nDESCRIPTION: Rules and restrictions for database operations with customer-managed encryption keys\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-encryption-key.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Restore: Environment must use same customer-managed key\n2. Copy: Target environment must use same customer-managed key\n3. Reset: Encrypted data is deleted, reverts to Microsoft-managed key\n```\n\n----------------------------------------\n\nTITLE: Power Platform Environments Schema\nDESCRIPTION: Defines the comprehensive property schema for Power Platform environments, including identifiers, metadata, and state information\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/self-service-analytics-schema-definition.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Property name**       | **Property type**  | **Description**                                              |\n|-------------------------|--------------------|--------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Microsoft Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for documentation contributors, indicating they should remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-application-unregister-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Checklist Recommendation in Markdown\nDESCRIPTION: Markdown table showing the reliability checklist recommendation for flow identification.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/reliability/identify-flows.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| [RE:02](checklist.md) | **Identify and rate user and system flows. Use a criticality scale based on your business requirements to prioritize the flows.** |\n| --- | --- |\n```\n\n----------------------------------------\n\nTITLE: Named Backreferences Pattern Syntax\nDESCRIPTION: Syntax for referencing named capture groups in regular expressions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-ismatch.md#2025-04-20_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n\\\\k<name>\n```\n\n----------------------------------------\n\nTITLE: Markdown Metadata Configuration\nDESCRIPTION: YAML frontmatter configuration block defining document metadata including title, description, author information, and other properties for the documentation page.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/ps-docs/ai-cursor.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Use the AI cursor in Project \"Sophia\"\ndescription: Use the AI cursor to interact with generated content in Project \"Sophia\" by asking follow-up questions and expanding the research journey\nauthor: mikkelsen2000\nms.topic: overview\nms.custom: \nms.reviewer: mkaur\nms.date: 3/20/2024\nms.service: power-platform\nms.author: pemikkel\nsearch.audienceType:\n  - maker\ncontributors:\n  - mduelae\n  - mikkelsen2000\n---\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for Status Field\nDESCRIPTION: Specifies the logical name for the Status field in the Package Solutions entity. This system-required field indicates whether the solution is Active or Inactive.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_packagesolutions.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`statecode`\n```\n\n----------------------------------------\n\nTITLE: Field Security Configuration Steps in Markdown\nDESCRIPTION: A series of step-by-step instructions for setting up field-level security, creating security profiles, and configuring field permissions in Dynamics 365.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/how-field-security-affects-synchronization-between-outlook.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n2. Select **Settings** > **Customizations**.\n  \n3. Select **Customize the System**.\n  \n4. Expand **Entities** > **Contact**.\n  \n5. Select **Fields** and select **jobtitle**. There are a lot of Contact fields so you'll need to advance several pages.\n  \n6. Select **Edit**.\n  \n7. For Field Security, select **Enable** > **Save and Close**.\n  \n8. Select **Publish All Customizations**.\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Instructions Template\nDESCRIPTION: An HTML comment block containing instructions to remove comments and add content for a command group introduction.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any content needed to introduce this command group\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation Comments in HTML\nDESCRIPTION: This snippet demonstrates the structure for adding documentation comments in HTML. It includes instructions for removing the comment and adding appropriate remarks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-pack-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Managing Solution Publisher Form Ownership\nDESCRIPTION: Guidelines for handling FormXml in solutions, specifying that only base solutions should contain full FormXml, with subsequent solutions using differential XML.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/form-alm-recommendations.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Base Solution: Full FormXml -->\n<!-- Patch/Upgrade Solutions: Differential FormXml -->\n```\n\n----------------------------------------\n\nTITLE: Field Definition: ownerid in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Owner lookup field that can reference either a system user or a team.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n`ownerid`\n```\n\n----------------------------------------\n\nTITLE: exactin substring test in Power Platform\nDESCRIPTION: This snippet demonstrates the 'exactin' operator as a case-sensitive substring test in Power Platform. It checks if the string \"Windows\" is a substring of the given sentence.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"\\\"Windows\\\" exactin “To display windows in the Windows operating system...”\"\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Structure\nDESCRIPTION: Basic HTML comment structure for Microsoft Power Platform documentation remarks section\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-who-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Setting Backup Retention Period with Power Platform CLI\nDESCRIPTION: This PowerShell command uses the Power Platform CLI to set the backup retention period for an environment. The 'pac admin' prefix indicates it's an administrative command, likely requiring appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-set-backup-retention-period-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac admin set-backup-retention-period\n```\n\n----------------------------------------\n\nTITLE: Markdown Definition Table\nDESCRIPTION: Table defining key security baseline terminology including baseline, benchmark, controls, and regulatory requirements.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/security/establish-baseline.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Term | Definition |\n|---|---|\n| Baseline | The minimum level of security affordances that a workload must have to avoid being exploited. |\n| Benchmark | A standard that signifies the security posture that the organization aspires to. It's evaluated, measured, and improved over time. |\n| Controls | Technical or operational controls on the workload that help prevent attacks and increase attacker costs. |\n| Regulatory requirements | A set of business requirements, driven by industry standards, that laws and authorities impose. |\n```\n\n----------------------------------------\n\nTITLE: Including Footer Banner in Markdown\nDESCRIPTION: This snippet includes a reference to a footer banner using Markdown syntax at the end of the document.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/turn-duplicate-detection-rules-off-whole-organization.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[footer-include](../includes/footer-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Power Platform Environment using YAML in Azure DevOps\nDESCRIPTION: This YAML snippet demonstrates how to use the PowerPlatformDeleteEnvironment task to delete a Power Platform environment in an Azure DevOps pipeline. It requires a service connection to be specified.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.delete-environment.PowerPlatformDeleteEnvironment@2\n  displayName: 'Power Platform Delete Environment '\n  inputs:\n    PowerPlatformEnvironment: 'My service connection'\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, specifying metadata like title, description, dates, authors, and audience type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/appsource/next-steps-submit-app-cloud-partner-portal.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Next steps: Submit your app on Partner Center | Microsoft Docs\"\ndescription: \"Learn about how to submit an app on Partner Center to be listed on AppSource.\"\nms.date: 04/03/2023\nms.reviewer: pehecke\nms.topic: article\nauthor: angela21k\nms.author: angelakim\nms.subservice: developer\nsearch.audienceType: \n  - developer\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Structure\nDESCRIPTION: Basic HTML comment structure for a documentation template, containing placeholders for remarks section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-backups-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Using pac solution import Command in Power Platform CLI\nDESCRIPTION: The 'pac solution import' command is used to import solutions in Power Platform. It requires authentication to an environment using 'pac auth'. When the Path parameter is not specified, it assumes the current folder is a cdsproj project and uses the managed solution by default if SolutionPackageType is set to 'Both'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-import-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Remarks\n\nYou be connected to an environment using the [pac auth](../auth.md) command to use `pac solution import`.\n\n#### pac solution import\n\nWhen `Path` parameter is not specified, it assumes the current folder is a cdsproj project. If the `SolutionPackageType` property in cdsproj file is set to `Both`, the managed solution is used by default.\n```\n\n----------------------------------------\n\nTITLE: Using Get-Help for Cmdlet Assistance in PowerShell\nDESCRIPTION: This snippet illustrates how to use the Get-Help command in PowerShell to retrieve examples, detailed information, or specific parameter guidance for any cmdlet. It is crucial for administrators to familiarize themselves with this command to efficiently utilize available cmdlets.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help Get-AdminPowerAppEnvironment\nGet-Help Get-AdminPowerAppEnvironment -Examples\nGet-Help Get-AdminPowerAppEnvironment -Detailed\n```\n\n----------------------------------------\n\nTITLE: Convert Deployable Package using ModelUtil.exe (X++)\nDESCRIPTION: This snippet shows how to use ModelUtil.exe to convert a legacy fully deployable package (Lifecycle Services package) into the new format compatible for deployment to environments.  It invokes ModelUtil.exe from the command line, using the `-convertToUnifiedPackage` option and providing the package zip and output location as parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/unified-experience/finance-operations-innerloop.md#2025-04-20_snippet_0\n\nLANGUAGE: X++\nCODE:\n```\nLocate ModelUtil.exe inside the bin folder and run it from the command line to see usage. Next, choose the `-convertToUnifiedPackage` option and provide the package zip and output location as parameters.\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Power BI Handshake Error\nDESCRIPTION: This section describes an error that occurs when a connection is successfully established with the server, but an error occurs during the handshake before you sign in. This can happen if the ports used by the TDS endpoint are blocked. The provided image visually depicts the error.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/setup-powerbi.md#2025-04-20_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: HTML Comment Documentation Instructions\nDESCRIPTION: HTML comment containing instructions to remove comments and add content needed to introduce a command group\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/application-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any content needed to introduce this command group\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Defining OwningBusinessUnit Property in Power Platform Entity\nDESCRIPTION: Defines the OwningBusinessUnit property which stores the unique identifier for the business unit that owns the record. This is a lookup field targeting the businessunit entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\nowningbusinessunit\n```\n\n----------------------------------------\n\nTITLE: Providing Power Platform CLI Command Examples in Markdown\nDESCRIPTION: This snippet shows how to document examples of using a Power Platform CLI command, including a description and the actual command syntax.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/catalog-remarks.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Examples\n\n#### Example 1: Description of what the example does\n\n```bash\ncommand parameter --option\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Output of merge-translation Command with Errors\nDESCRIPTION: Shows the standard output when running the merge-translation command that encounters translation errors. The output indicates missing keys and unused values without showing the specific details.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-merge-translation-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nConnected as user@contoso.org\n\nLoading language German into bot 'ms_store_newTestCopilot' (New Test Copilot) from file 'C:\\Users\\user\\ms_store_newTestCopilot'. 1 key(s) were missing, 1 value(s) were not used. Use the --verbose switch to get more details.\n\nUpdated 16 out of 16 components.\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Power Platform Documentation\nDESCRIPTION: Basic HTML comment structure providing a template for adding documentation remarks and general content. Includes instructions for removing comments and placeholder text.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/plugin-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any general remarks for this command group below.\n\n### Remarks\n\nAdd content here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Administrative Note Block\nDESCRIPTION: Markdown note block for displaying administrative information about screen resolution support\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/onpremises-data-gateway-management.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> The gateway management feature in the Power Platform admin center isn't supported on mobile or smaller screens with a resolution lower or equal to 320 x 256.\n```\n\n----------------------------------------\n\nTITLE: Gateway Status Image Reference\nDESCRIPTION: Markdown image reference for displaying gateway status icon\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/onpremises-data-gateway-management.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Gateway status.](media/gateway-status.png \"Gateway status\")\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Microsoft Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for creating documentation remarks. It instructs the user to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-assign-user-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Initializing Plug-in Base Class in Power Platform\nDESCRIPTION: Demonstrates the generated plug-in class structure with base class inheritance, constructor initialization, and standard execution method for Power Platform plug-ins\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/howto/vs-create-plugin.md#2025-04-20_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NotifyAccountCreate: PluginBase\n{\n    public NotifyAccountCreate(string unsecure, string secure)\n        : base(typeof(NotifyAccountCreate))\n    {\n        // TODO: Implement your custom configuration handling.\n    }\n\n    protected override void ExecuteCdsPlugin(LocalPluginContext localContext)\n    {\n        if (localContext == null)\n        {\n            throw new InvalidPluginExecutionException(nameof(localContext));\n        }           \n        ITracingService tracingService = localContext.TracingService;\n\n        try\n        {  \n            IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;\n \n            IOrganizationService service = localContext.OrganizationService;\n\n            // TODO: Implement your custom Plug-in business logic.\n\n        }\n        catch (Exception ex)\n        {\n            tracingService?.Trace(\"An error occurred executing Plugin PPTools_Sample_Solution.NotifyPlugin.NotifyAccountCreate : {0}\", ex.ToString());\n            throw new InvalidPluginExecutionException(\"An error occurred executing Plugin PPTools_Sample_Solution.NotifyPlugin.NotifyAccountCreate .\", ex);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Structure\nDESCRIPTION: Basic HTML comment template for adding remarks section with placeholder instructions\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-admin-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Returning Command Output as JSON in Power Platform\nDESCRIPTION: This snippet explains the functionality of the '--json' command line option, which formats the output of a command into a JSON string. It highlights that only connectors that are aware of the solution will be displayed in the command's output. This is critical for users who are dependent on specific connectors that are solution-aware.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\\n#### `--json`\\n\\nReturns the output of the command as a JSON formatted string.\\n\\n### Remarks\\n\\nOnly solution-aware connectors are shown. When your connector isn't in this command's response, it's probably because of the fact that your connector isn't solution-aware.\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Monitoring Table in Markdown\nDESCRIPTION: This markdown table shows the various attributes of error records that can be viewed in the SAP Template Administrator app. It includes fields like Name, Action, Source Type, and Error Message, helping administrators understand and troubleshoot errors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/monitor-errors.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field | Examples| Description |\n| ----------- | ----------- | ----------- |\n| Name | _SAP Vendor Management_, _ReadVendor_ | The name of the app or flow that generated the error. |\n| Action | _Vendor Details Screen.OnVisible_, _LFAI_ | The app control or flow action step that generated the error. |\n| Source Type | _Power App_, _Power Automate_ | The type of component that raised the unhandled exception. |\n| Workflow Status | _Failed_, _Time Out_ | What type of exception the flow reported. |\n| Generated By | | The user who experienced the error. |\n| Created On | | The date and time the error was generated. |\n| Error Message | | The unhandled error message raised. |\n| Additional Information | | Any additional information logged, typically the JSON payload that was passed in from the app that instantiated the flow instance. |\n| Workflow Instance URL | | A URL for the instance of the flow that failed that can be launched for further examination and root cause analysis. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Many-to-Many Relationship Properties\nDESCRIPTION: Defines the intersection entity configuration for linking packages and applications, including entity name, customization settings, and menu configuration properties.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_applications.md#2025-04-20_snippet_12\n\nLANGUAGE: markup\nCODE:\n```\nmspcat_mspcat_packages_mspcat_applications\n```\n\nLANGUAGE: markup\nCODE:\n```\nIntersectEntityName: mspcat_mspcat_packages_mspcat_applications\\nIsCustomizable: True\\nSchemaName: mspcat_mspcat_packages_mspcat_applications\\nIntersectAttribute: mspcat_applicationsid\\nNavigationPropertyName: mspcat_mspcat_packages_mspcat_applications\\nAssociatedMenuConfiguration:\\n  AvailableOffline: True\\n  Behavior: DoNotDisplay\\n  Group: Details\\n  Label: \\n  MenuId: null\\n  Order: \\n  QueryApi: null\\n  ViewId: 00000000-0000-0000-0000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Instructions in HTML Comment\nDESCRIPTION: HTML comment containing instructions for completing the documentation template. It directs the user to remove the comments and add general remarks for a command group in the section below.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/modelbuilder-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any general remarks for this command group below.\n\n### Remarks\n\nAdd content here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Power Platform Command Documentation\nDESCRIPTION: This HTML comment block contains instructions for documentation authors to remove the comments and add general remarks for a command group in the specified section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any general remarks for this command group below.\n\n### Remarks\n\nAdd content here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Navigating Screens with Language Parameter in Power Apps\nDESCRIPTION: This snippet sets the OnSelect property of a button to navigate to the 'Target' screen with a fade transition. It also passes a 'Language' parameter to the target screen to indicate the selected language. This allows the target screen to display content specific to that language.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-updatecontext.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Apps Formula\nCODE:\n```\n\"Navigate(Target, ScreenTransition.Fade, {Language:\\\"Spanish\\\"})\"\n```\n\n----------------------------------------\n\nTITLE: Restoring Environments with PowerShell in Power Platform\nDESCRIPTION: This PowerShell script restores a backup to a target Power Platform environment. It installs the required module, authenticates using an SPN with client secret (or user credentials), and performs the restoration with specified parameters including source environment, target name, and restore point.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/unified-experience/tutorial-backup-restore-unified-environment.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n#Install the module\nInstall-Module -Name Microsoft.PowerApps.Administration.PowerShell\n\n# Set variables for your session\n$TenantId = \"YOUR_TENANT_GUID_FROM_Microsoft Entra ID\"\n$SPNId = \"YOUR_AZURE_APPLICATION_REGISTRATION_CLIENT_ID\"\n$ClientSecret = \"YOUR_AZURE_APPLICATION_CLIENT_SECRET\"\n$SourceEnvironmentID = \"YOUR_SOURCE_ENVIRONMENT_ID_HERE\"\n$TargetEnvironmentID = \"YOUR_TARGET_ENVIRONMENT_ID_HERE\"\n\nWrite-Host \"Creating a session against the Power Platform API\"\n\nAdd-PowerAppsAccount -Endpoint prod -TenantID $TenantId -ApplicationId $SPNId -ClientSecret $ClientSecret\n\n    $restoreRequest = \\[pscustomobject\\]@{\n        SourceEnvironmentId = $SourceEnvironmentID\n        TargetEnvironmentName = \"Restored Environment\"\n        RestorePointDateTime = $datetime.ToString(\"yyyy-MM-dd HH:mm:ss\")\n        SkipAuditData: true\n    }\n\nRestore-PowerAppEnvironment -EnvironmentName $TargetEnvironmentID -RestoreToRequestDefinition $restoreRequest\n```\n\n----------------------------------------\n\nTITLE: Displaying a Success Message using Notify in Power Apps with Indefinite Timeout\nDESCRIPTION: This snippet demonstrates how to display a success message using the Notify function with an indefinite timeout. By passing NotificationType.Success and a timeout of 0, the message will only be dismissed by user action, allowing important success feedback to remain visible.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-showerror.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nNotify( \"Hello, World\", NotificationType.Success, 0 )\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Documentation Remarks\nDESCRIPTION: A basic HTML comment template that provides instructions for adding remarks to documentation. The template includes a placeholder section for adding remarks content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-application-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: JSON Example String for Testing in Power FX\nDESCRIPTION: This snippet presents the JSON string used in examples throughout the documentation for testing the Column and ColumnNames functions. It contains various data types including text, numbers, and null.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-columnnames-column.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"Seattle\", \"population\": 737000 }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"text\": \"text value\" , \"number\": 567, \"empty\": null }\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Directory Structure in PowerShell\nDESCRIPTION: PowerShell commands to create the necessary directory structure and initialization files for certificate management.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/connect/secure-network-communications.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nmkdir rootCA\nmkdir sncCert\n\n# Create the necessary serial and index files if they don't exist\nif (-Not (Test-Path \"rootCA\\index.txt\")) { New-Item -Path \"rootCA\\index.txt\" -ItemType File }\nif (-Not (Test-Path \"rootCA\\serial\")) { Set-Content -Path \"rootCA\\serial\" -Value \"01\" }\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Structure\nDESCRIPTION: HTML comment block containing instructions for adding remarks section in documentation\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/test-run-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Exporting Admin Connector Role Assignments Using PowerShell\nDESCRIPTION: Exports all custom connector role assignments for a user using the Get-AdminPowerAppConnectorRoleAssignment function. Requires the principal object ID as input and results Are output to a JSON file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-export-dsr.md#2025-04-20_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-PowerAppsAccount\n$userId = \"11bb11bb-cc22-dd33-ee44-55ff55ff55ff\"\nGet-AdminPowerAppConnectorRoleAssignment -PrincipalObjectId $userId | ConvertTo-Json | Out-File -FilePath \"UserDetails.json\"\n```\n\n----------------------------------------\n\nTITLE: Handling insufficient permissions message in Power Platform\nDESCRIPTION: This is a reference to an included procedure for handling insufficient permissions in Power Platform.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-templates-articles.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[proc_dont_have_correct_permissions](../includes/proc-dont-have-correct-permissions.md)]\n```\n\n----------------------------------------\n\nTITLE: Defining the VersionNumber Logical Name in Power Platform Dataverse\nDESCRIPTION: The logical name for the VersionNumber field in Dataverse, which is a BigInt type field that stores the version number of the record.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_catalogitemfile.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`versionnumber`\n```\n\n----------------------------------------\n\nTITLE: System Settings Configuration Table for Dynamics 365 Sales\nDESCRIPTION: A comprehensive table detailing various sales-related system settings, including product activation, price list selection, bundle limits, pricing calculations, discount methods, and property limits.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-sales-tab.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                                            Settings                                             |                                                                                                                                                                                             Description                                                                                                                                                                                              |\n|-------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|                **Select whether products should be created in the active state**                |                                                                                                                                                                                                                                                                                                                                                                                                      |\n|                                 Create products in active state                                 |                                                                                           To set the products to active state by default after creation, click **Yes**. This option applies only to products that don't have a parent product family. To create products in the Draft state, click **No**.                                                                                           |\n| **Set whether the default pricelist for an opportunity should be selected via an inbuilt rule** |                                                                                                                                                                                                                                                                                                                                                                                                      |\n|              Allow selection of default pricelist for opportunity via inbuilt rule              |                                                                                                  Click **Yes** if you want the default price list to be selected for an opportunity based on the inbuilt rule (based on the default price lists defined for territories). Otherwise, click **No**.                                                                                                   |\n|                         **Set maximum number of products in a bundle**                          |                                                                                                                                                                                                                                                                                                                                                                                                      |\n|                             Maximum number of products in a bundle                              |                                                                                                                                                                        Type the maximum number of products a bundle can have.                                                                                                                                                                        |\n|                             **Set pricing calculation preference**                              |                                                                                                                                                                                                                                                                                                                                                                                                      |\n|                                 Use system pricing calculations                                 |                                                      Click **Yes** to use the pricing calculations of customer engagement apps. To use custom pricing by using a plug-in, click **No**. When set to **No**, the default pricing calculations won't be done on opportunity, quote, order and invoice records.                                                      |\n|                **Set whether a discount is applied as a line item or per unit**                 |                                                                                                                                                                                                                                                                                                                                                                                                      |\n|                                   Discount calculation method                                   |                                                             Select **Per unit** if you want the pricing engine to calculate the discount based on the prices per unit instead of a line item. By default, the calculations are done on a line item-basis. \\*See the table below that shows the difference between the two calculations.                                                              |\n|              **Set maximum number of properties allowed for a product or bundle**               |                                                                                                                                                                                                                                                                                                                                                                                                      |\n|              Maximum number of properties that are allowed for a product or bundle              | Type the maximum number of properties (specifications) a product or bundle can have. Product properties are added to a product family record, and all the child products and bundles under the product family inherit the properties added to the parent product family. The number specified in this setting is applied only when you publish a product or a bundle with the associated properties. |\n```\n\n----------------------------------------\n\nTITLE: Adding Solution Package with Power Platform CLI\nDESCRIPTION: Command to add a solution package using Power Platform Command Line Interface (CLI). Used for managing solution packages in Power Platform development workflows.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/package-add-solution-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac package add-solution\n```\n\n----------------------------------------\n\nTITLE: Making POST HTTP Request with JSON Body in Canvas Apps\nDESCRIPTION: This example shows how to make a POST HTTP request with a JSON payload to submit data to an external API. The snippet demonstrates proper configuration of headers and the request body format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-readnfc-applies-to.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nOffice365.HttpRequest(\n    \"https://api.contoso.com/submit\",\n    \"POST\",\n    JSON({\n        \"firstName\": User().FirstName,\n        \"lastName\": User().LastName,\n        \"email\": User().Email,\n        \"requestData\": Form1.RequestDetails.Text\n    }),\n    {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Power Pages Audit Logs in Microsoft Purview\nDESCRIPTION: Step-by-step process for navigating to and searching Power Pages administrative activities in the Microsoft Purview compliance portal\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/logging-power-pages.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Microsoft Purview compliance portal](https://compliance.microsoft.com/) as a tenant admin.\n\n2. Under **Solutions**, select **Audit**.\n\n3. Filter for **PowerPlatformAdministratorActivity** in Record types\n```\n\n----------------------------------------\n\nTITLE: Setting File Gallery Items with As Operator in Power FX\nDESCRIPTION: Sets the Items property of a horizontal gallery to create columns for a chessboard, using the As operator to name each record as 'File'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_27\n\nLANGUAGE: power-fx\nCODE:\n```\nSequence(8) as File\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Early Access Apps Requirements\nDESCRIPTION: Table detailing additional requirements for specific apps to enable early access features\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/opt-in-early-access-updates.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Early access apps  |Description of manual steps  |\n|---------|---------|-----|\n|Microsoft Cloud for Healthcare | If you have Microsoft Cloud for Healthcare solutions powered by Dynamics 365, you must update or deploy from the Microsoft Cloud Solution Center. |\n| Dynamics 365 Service Scheduling | Once you opt in to early access: <br /> 1. Sign in to the Power Platform admin center as a tenant admin. <br />2. Select **Dynamics 365 Service Scheduling**. <br /> 3. Select **Install** and follow the steps. |\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_totalduration in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Total Duration integer field that can store values between 0 and 2147483647.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_totalduration`\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Template Structure\nDESCRIPTION: This HTML comment shows the template structure for documentation. It instructs users to remove the comments and add appropriate remarks in the designated section below.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-application-register-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Example ALM Accelerator Install Configuration File\nDESCRIPTION: This is an example of the JSON configuration file generated by the `coe alm generate install` command. It contains settings for the installation process including component selection, AAD information, DevOps organization and project details, environment URLs, and other parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/admin-install.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"{\\n   \"log\": [\\n      \"info\"\\n   ],\\n   \"components\": [\\n      \"all\"\\n   ],\\n   \"aad\": \"ALMAcceleratorServicePrincipal\",\\n   \"group\": \"ALMAcceleratorForAdvancedMakers\",\\n   \"devOpsOrganization\": \"https://dev.azure.com/dev1234\",\\n   \"project\": \"alm-sandbox\",\\n   \"repository\": \"pipelines\",\\n   \"settings\": {\\n      \"installEnvironments\": [\\n         \"validation\",\\n         \"test\",\\n         \"prod\"\\n      ],\\n      \"validation\": \"https://sample-validation.crm.dynamics.com\",\\n      \"test\": \"https://sample-test.crm.dynamics.com\",\\n      \"prod\": \"https://sample-prod.crm.dynamics.com\",\\n      \"createSecret\": \"true\",\\n      \"region\": [\\n         \"NAM\"\\n      ]\\n   },\\n   \"importMethod\": \"api\",\\n   \"endpoint\": \"prod\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Template Comment Structure\nDESCRIPTION: HTML comment block containing instructions and placeholders for documentation remarks section\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-list-groups-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Concatenating Sequence Outputs\nDESCRIPTION: This example shows how to concatenate the outputs of the Sequence function into a single string. The Text function is used to convert the individual sequence values into a formatted string.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-sequence.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nConcat( Sequence( 5 ), Text( Value ) & \" \" )\n```\n\n----------------------------------------\n\nTITLE: Peering Configuration Checklist Section\nDESCRIPTION: Markdown checklist for Microsoft peering configuration validation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/architecture/key-concepts/expressroute/checklist.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> * Have you configured Microsoft peering appropriately for your needs?\n```\n\n----------------------------------------\n\nTITLE: Deleting User Connections (User Context) in Power Platform\nDESCRIPTION: PowerShell script for users to delete all their connections using Remove-AdminPowerAppConnection cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n\n#Retrieves all connections for the calling user and deletes them\nGet-AdminPowerAppConnection | Remove-AdminPowerAppConnection\n```\n\n----------------------------------------\n\nTITLE: ScheduledDurationMinutes Property Definition in Power Platform\nDESCRIPTION: Definition of the ScheduledDurationMinutes property which specifies the duration of an activity in minutes. This Integer field has a minimum value of 0 and maximum value of 2147483647.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Scheduled duration of the activity, specified in minutes.**|\n|DisplayName|**Scheduled Duration**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`scheduleddurationminutes`|\n|RequiredLevel|None|\n|Type|Integer|\n|MaxValue|2147483647|\n|MinValue|0|\n```\n\n----------------------------------------\n\nTITLE: Setting Product State Values in Microsoft Power Platform\nDESCRIPTION: These code values indicate the possible states for product records in the system. Products can be created in either 'active' or 'draft' state depending on the system configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-product-catalog-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`active` or `draft`\n```\n\n----------------------------------------\n\nTITLE: ScheduledStart Property Definition in Power Platform\nDESCRIPTION: Definition of the ScheduledStart property which specifies the start time of an activity. This DateTime field uses UserLocal behavior and DateAndTime format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Scheduled start time of the activity.**|\n|DisplayName|**Start Date**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`scheduledstart`|\n|RequiredLevel|None|\n|Type|DateTime|\n|CanChangeDateTimeBehavior|False|\n|DateTimeBehavior|UserLocal|\n|Format|DateAndTime|\n|ImeMode|Inactive|\n|SourceTypeMask|0|\n```\n\n----------------------------------------\n\nTITLE: Listing Updated Authentication Profiles\nDESCRIPTION: This snippet shows the output of pac auth list after creating a new UNIVERSAL authentication profile, displaying both the original and the newly created profile with a Dataverse environment URL.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-remarks.md#2025-04-20_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\test> pac auth list\nIndex Active Kind      Name           Friendly Name        Url                                   User                  Cloud  Type\n[1]   *      UNIVERSAL                                                                           you@yourcompany.com   Public OperatingSystem\n[2]   *      UNIVERSAL ConnectionName YourOrganization     https://yourcompany.crm.dynamics.com/ you@yourcompany.com   Public User\n\nPS C:\\test>\n```\n\n----------------------------------------\n\nTITLE: JSON Boolean Value Example\nDESCRIPTION: Example showing how boolean values are represented in JSON format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-json.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Authentication in IIS for Power Platform\nDESCRIPTION: This XML snippet shows the configuration for enabling Windows Authentication in IIS (Internet Information Services) for a Power Platform environment. It disables anonymous authentication and enables Windows authentication.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/pn-windows-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <system.webServer>\n    <security>\n      <authentication>\n        <anonymousAuthentication enabled=\"false\" />\n        <windowsAuthentication enabled=\"true\" />\n      </authentication>\n    </security>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: CreatedBy Read-only Property Definition in Power Platform\nDESCRIPTION: Definition of the CreatedBy read-only property which identifies the user who created the activity. This Lookup field targets system users.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Unique identifier of the user who created the activity.**|\n|DisplayName|**Created By**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`createdby`|\n|RequiredLevel|None|\n|Type|Lookup|\n|Targets|systemuser|\n```\n\n----------------------------------------\n\nTITLE: Defining the Referencing Attribute in Catalog Item File relationship\nDESCRIPTION: The attribute name that references the Catalog Item in the many-to-one relationship between Catalog Item File and Catalog Item, using the mspcat_catalogitem attribute.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_catalogitemfile.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_catalogitem`\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Power Apps API using C# and Certificate\nDESCRIPTION: This C# code demonstrates how to authenticate with Power Apps API using a service principal and certificate. It retrieves the certificate from the local certificate store using a thumbprint and creates a client credential using that certificate.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-setfocus-applies-to.md#2025-04-20_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Identity.Client;\n\nvar clientId = ConfigurationManager.AppSettings[\"ClientId\"];\nvar tenantId = ConfigurationManager.AppSettings[\"TenantId\"];\nvar thumbprint = ConfigurationManager.AppSettings[\"AuthCertThumbprint\"];\nvar serviceUrl = ConfigurationManager.AppSettings[\"ServiceUrl\"];\n\n// Get certificate from store\nvar certificate = GetCertificateByThumbprint(thumbprint);\n\n// Build the MS identity application\nvar app = ConfidentialClientApplicationBuilder.Create(clientId)\n    .WithCertificate(certificate)\n    .WithTenantId(tenantId)\n    .Build();\n\nvar scopes = new[] { $\"{serviceUrl}/.default\" };\n\n// Acquire token\nvar result = await app.AcquireTokenForClient(scopes).ExecuteAsync();\n\nstatic X509Certificate2 GetCertificateByThumbprint(string thumbprint)\n{\n    var store = new X509Store(StoreName.My, StoreLocation.CurrentUser);\n    store.Open(OpenFlags.ReadOnly);\n    var certificateCollection = store.Certificates.Find(X509FindType.FindByThumbprint, thumbprint, false);\n    store.Close();\n    \n    if (certificateCollection.Count == 0)\n    {\n        throw new Exception($\"Certificate with thumbprint {thumbprint} not found\");\n    }\n    \n    return certificateCollection[0];\n}\n```\n\n----------------------------------------\n\nTITLE: CreatedOn Read-only Property Definition in Power Platform\nDESCRIPTION: Definition of the CreatedOn read-only property which records when the activity was created. This DateTime field uses UserLocal behavior and DateAndTime format.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**Date and time when the activity was created.**|\n|DisplayName|**Date Created**|\n|IsValidForForm|True|\n|IsValidForRead|True|\n|LogicalName|`createdon`|\n|RequiredLevel|None|\n|Type|DateTime|\n|CanChangeDateTimeBehavior|False|\n|DateTimeBehavior|UserLocal|\n|Format|DateAndTime|\n|ImeMode|Inactive|\n|SourceTypeMask|0|\n```\n\n----------------------------------------\n\nTITLE: Setting Items Property of Gallery to Employees Data Source\nDESCRIPTION: This snippet shows how to set the Items property of a gallery control to the Employees data source, which displays employee records in the gallery.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_10\n\nLANGUAGE: power-fx\nCODE:\n```\nEmployees\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for documentation page, specifying metadata like title, description, dates, authors, and audience type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/view-service-health.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: View service health\ndescription: Learn how to check service health in the Power Platform admin center.\nms.date: 12/06/2024\nms.reviewer: sericks\nms.topic: conceptual\nauthor: sericks007\nms.subservice: admin\nms.author: sericks\nsearch.audienceType: \n  - admin\nms.contributors:\n  - yukom\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Connection in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure for configuring an Azure Blob Storage connection in a Power Platform application. It includes the connection string and other necessary parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/pn_azure_blob_storage.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connectionString\": \"DefaultEndpointsProtocol=https;AccountName=mystorageaccount;AccountKey=accountkey==;EndpointSuffix=core.windows.net\",\n  \"containerName\": \"mycontainer\",\n  \"blobName\": \"myblob.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Power Pages Website Content using YAML Pipeline\nDESCRIPTION: YAML configuration for uploading Power Pages website content to a Dataverse environment. Specifies authentication and content path settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.upload-paportal.PowerPlatformUploadPaportal@2\n  displayName: 'Power Platform Upload PAPortal '\n  inputs:\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    UploadPath: 'C:\\portals\\starter-portal'\n```\n\n----------------------------------------\n\nTITLE: Warning Note Block in Markdown\nDESCRIPTION: A markdown note block warning about audit log configuration requirements and limitations of bot information in Teams environments.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/power-bi-monitor.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n>[!NOTE]\n> **Last launched** information is only available if the [Audit Log](setup-auditlog-http.md) has been configured.\n>\n> Information about bots created via Microsoft Copilot Studio in Microsoft Teams environments is currently not available in the CoE Starter Kit.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Power Platform Deployment Planning Checklist\nDESCRIPTION: A detailed table outlining three key deployment planning areas: environment discovery, single sign-on implementation, and Office 365 integration. Each row contains descriptions and specific considerations for implementation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/plan-for-deployment-and-administration.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Item|Description|Considerations|\n|-----|------------|---------------|\n|Environment discovery|A detailed description of your organization's environment in terms of number of users, groups or teams, and the number and type of business units or divisions. Identify current data that you would like to bring into customer engagement apps (Dynamics 365 Sales, Dynamics 365 Customer Service, Dynamics 365 Field Service, Dynamics 365 Marketing, and Dynamics 365 Project Service Automation), and your overall data storage requirements. Include a business requirements analysis that describes your organization's expectation or requirements for a service level agreement (SLA). An SLA is an agreement between two or more parties describing the deliverables, support, and communication that each party will provide to the other. Specify your policies related to security and privacy.|Is there enough overlap in customers and products across business units to be able to work in the same data? What type of security policy does the organization already have in place? Are there any special requirements in this area? Is there a plan for business growth that could affect the number of users?<br /><br /> Plan for enough time to do this discovery; information that comes out of this exercise can affect the way you implement the service.|\n|Single sign-on|An authentication process that enables a user to access multiple systems or services through a single set of sign-on credentials. For example, implementing single sign-on for an organization's network environment means that after a user signs in to the network, that user does not have to enter credentials again when accessing customer engagement apps.|There are additional requirements to implement single sign-on, therefore, consider how important it is to your organization.|\n|Integration with Office 365 applications|You can significantly enhance your company's online, collaborative experience by integrating Office 365 applications with your subscription. This requires a separate purchase of an Office 365 subscription<br /><br /> You'll have the best integration experience if your Office 365 subscription and environment are in the same tenant.|What is Office 365? See Microsoft's business plan comparison for more information.|\n```\n\n----------------------------------------\n\nTITLE: Custom Pricing Message Reference for Microsoft Power Platform\nDESCRIPTION: The message name used for registering custom pricing logic plugins. This message is provided in Web services and contains custom pricing code that gets invoked when product information changes.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-product-catalog-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`CalculatePrice`\n```\n\n----------------------------------------\n\nTITLE: Querying Request-Specific Telemetry\nDESCRIPTION: Kusto query to retrieve all telemetry data for a specific request using the x-ms-service-requestId from the header response.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/telemetry-events-dataverse.md#2025-04-20_snippet_7\n\nLANGUAGE: kusto\nCODE:\n```\nunion *\n| where operation_ParentId contains <requestId>\n```\n\n----------------------------------------\n\nTITLE: Logging out of Azure session\nDESCRIPTION: Logs out of any existing Azure sessions. This is a preliminary step to ensure that subsequent commands are executed under the correct user context, particularly when switching between maker accounts or administrator accounts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/maker-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"az logout\n\"\n```\n\n----------------------------------------\n\nTITLE: Checking Ad-Hoc Subscriptions in Tenant using PowerShell\nDESCRIPTION: PowerShell script to verify if ad-hoc subscriptions are enabled in the Microsoft 365 tenant, which is crucial for assigning developer licenses\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/alm/development-environments.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name MSOnline\nConnect-MsolService\nGet-MsolCompanyInformation | fl AllowAdHocSubscriptions\n```\n\n----------------------------------------\n\nTITLE: Remove Environment from Group - New Admin Center\nDESCRIPTION: This snippet outlines the process of removing an environment from an environment group using the new Power Platform Admin Center. This process involves navigating to Environment groups, selecting the target group and environment, and then choosing to remove it from the group.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/environment-groups.md#2025-04-20_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1. Select **Manage** in the navigation pane.\n2. In the **Manage** pane, select **Environment groups**.\n3. Select the group.\n4. Select the environment you wish to remove.\n5. Select **Remove from group** in the command bar.\"\n```\n\n----------------------------------------\n\nTITLE: ClearCollect Function in Power Platform\nDESCRIPTION: A function used to clear an existing collection and populate it with new data across multiple Power Platform technologies. Applies to Canvas apps, Cards, Desktop flows, and Power Platform CLI.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-clear-collect-clearcollect-applies-to.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Applies to |\n|-----------|------------|\n| **ClearCollect** | :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Canvas apps :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Cards :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Desktop flows :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Power Platform CLI |\n```\n\n----------------------------------------\n\nTITLE: Installing Package Deployer PowerShell Module with NuGet\nDESCRIPTION: Command to install the Microsoft.CrmSdk.XrmTooling.PackageDeployment.PowerShell NuGet package with a specific version to a designated output directory. Replace [VERSION] with the actual version number you want to install.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/cc-use-package-deployer-powershell.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nd:\\nuget install Microsoft.CrmSdk.XrmTooling.PackageDeployment.PowerShell -Version [VERSION] -O d:\\PD-PowerShell\n```\n\n----------------------------------------\n\nTITLE: Creating a Behavior User Defined Function in Power Fx\nDESCRIPTION: This snippet demonstrates how to create a behavior user-defined function in Power Fx that can modify application state. It handles the case when the amount exceeds savings and updates the values of Savings and Spent accordingly. The function requires a Number parameter and has a return type of Void.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_9\n\nLANGUAGE: powerapps-dot\nCODE:\n```\nSpend( Amount: Number ) : Void = {\n    If( Amount > Savings, \n        Error( \"$\"{Amount} is more than available savings\" ),\n        Set( Savings, Savings - Amount );\n        Set( Spent, Spent + Amount) \n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Opening the Formats System Settings Dialog Box in Dynamics 365\nDESCRIPTION: This snippet outlines the steps to access the Formats tab in System Settings for Dynamics 365 customer engagement apps. It includes prerequisites for permissions and navigation instructions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/system-settings-dialog-box-formats-tab.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [!INCLUDE[proc_permissions_system_admin_and_customizer](../includes/proc-permissions-system-admin-and-customizer.md)]  \n  \n    Check your security role  \n  \n   - [!INCLUDE[proc_follow_steps_in_link](../includes/proc-follow-steps-in-link.md)]  \n  \n   - [!INCLUDE[proc_dont_have_correct_permissions](../includes/proc-dont-have-correct-permissions.md)]  \n  \n2. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n3. Select **Settings** > **Administration**.\n  \n4. Select **System Settings** > **Formats** tab.\n```\n\n----------------------------------------\n\nTITLE: Creating Power Platform Admin Account in Microsoft 365 Admin Center\nDESCRIPTION: Procedure for configuring an unlicensed Power Platform administrator account with administrative access mode in the Microsoft 365 admin center\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/global-service-administrators-can-administer-without-license.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to the [Microsoft 365 admin center](https://admin.microsoft.com), and then select **Users** > **Active Users**.\n\n2. Select an existing user in the list. If you want to create a new administrative user, see [Create or edit users](https://support.office.com/article/Create-or-edit-users-435ccec3-09dd-4587-9ebd-2f3cad6bc2bc) and [Assigning admin roles](https://support.office.com/article/Assign-admin-roles-in-Office-365-eac4d046-1afd-4f1a-85fc-8219c79e1504).\n\n3. Select **Licenses and apps**.\n\n4. Make sure a license is **not** assigned to this user, and then select **Save changes**.\n\n5. Select **Manage roles**, and then select **Show all by category** > **Power Platform Administrator**.\n\n6. Select **Save changes**.\n```\n\n----------------------------------------\n\nTITLE: HTTP Response after File Upload\nDESCRIPTION: This code snippet illustrates the expected HTTP response after successfully uploading a file to Azure Blob storage using the Power Apps checker web API. The response includes the HTTP status code 200 OK and the URL to the uploaded file in Azure Blob storage.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/upload-file.md#2025-04-20_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n\n[\"https://mystorage.blob.core.windows.net/solution-files/0a4cd700-d1d0-4ef8-8318-e4844cc1636c/mySolution.zip?sv=2017-11-09&sr=b&sig=xyz&se=2019-06-11T19%3A05%3A20Z&sp=rd\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Maker Analytics Settings in PowerShell\nDESCRIPTION: PowerShell command to get the current settings for maker access to analytics data in a specific Power Platform environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/monitoring/monitoring-overview.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AdminPowerAppEnvironmentMakerAnalyticsSettings -EnvironmentName\n{environment id}\n```\n\n----------------------------------------\n\nTITLE: Defining Search Criteria for Bulk Deletion of Workflow System Jobs (Markdown)\nDESCRIPTION: Markdown table showing the search criteria for bulk deleting AsyncOperationBase records specifically for completed workflow jobs. It specifies the status reason, status, and system job type.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/manage-storage-asyncoperation-base-table.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Group  | Setting   | Criteria | Selected values |\n|---------|---------|---------|-----|\n|AND    | Status Reason | Equals | Succeeded    |\n|AND   | Status | Equals  | Completed\n|AND    | System Job Type |Equals   | Workflow |\n```\n\n----------------------------------------\n\nTITLE: Alternating Colors for Chessboard Pattern in Labels\nDESCRIPTION: This snippet determines the fill color for labels in a chessboard layout based on the rank and file values, alternating between two colors.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_23\n\nLANGUAGE: power-fx\nCODE:\n```\nIf( Mod( Rank.Value + File.Value, 2 ) = 1, Green, Beige )\n```\n\n----------------------------------------\n\nTITLE: Collect Function in Power Platform\nDESCRIPTION: A function used to add items to a collection or data source across multiple Power Platform technologies. Applies to Canvas apps, Cards, Desktop flows, Model-driven apps, Power Platform CLI, and Dataverse functions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-clear-collect-clearcollect-applies-to.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Applies to |\n|-----------|------------|\n| **Collect** | :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Canvas apps :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Cards :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Desktop flows :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Model-driven apps :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Power Platform CLI :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Dataverse functions |\n```\n\n----------------------------------------\n\nTITLE: Logical NOT operator in Power Platform\nDESCRIPTION: This snippet illustrates the logical NOT operator ('!' or 'Not') in Power Platform.  It negates a boolean expression.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"!(Price < 100)\"\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"Not (Price < 100)\"\n```\n\n----------------------------------------\n\nTITLE: Support Plans List in Markdown\nDESCRIPTION: Lists the available support plans for accessing Help + Support features\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/get-help-support.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Subscription Support\n- Professional Direct Support\n- Unified Support\n```\n\n----------------------------------------\n\nTITLE: Commenting Instructions in HTML for Microsoft Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for document authors to remove comments and add appropriate remarks to the Power Platform documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/plugin-push-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Field Permissions Configuration Steps in Markdown\nDESCRIPTION: Steps for setting specific permissions on secured fields within a field security profile.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/how-field-security-affects-synchronization-between-outlook.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the web app, go to **Settings** (![Settings.](media/settings-gear-icon.png \"Settings\")) > **Advanced Settings**.\n\n2. Select **Settings** > **Security**.\n  \n3. Select **Field Security Profiles** > your profile.\n  \n4. Select **Field Permissions** > the field to secure > **Edit**\n  \n5. Change the security settings to match your company's requirements and then select **OK** > **Save and Close**.\n```\n\n----------------------------------------\n\nTITLE: Using ColorValue Function with CSS Color Names in Power Fx\nDESCRIPTION: Shows how to use the ColorValue function with CSS color names. This example demonstrates using 'RoxyBrown' and 'OliveDrab' as color strings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nColorValue(\"RoxyBrown\")\nColorValue(\"OliveDrab\")\n```\n\n----------------------------------------\n\nTITLE: Removing Solution-Aware Cloud Flow Sharing Limits with PowerShell\nDESCRIPTION: PowerShell script that removes sharing restrictions for solution-aware cloud flows in a Managed Environment, allowing users to freely share their flows.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-sharing-limits.md#2025-04-20_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Retrieve the environment\n$environment = Get-AdminPowerAppEnvironment -EnvironmentName <EnvironmentId>\n\n# Update the Managed Environment settings\n$governanceConfiguration = $environment.Internal.properties.governanceConfiguration\n$governanceConfiguration.settings.extendedSettings | Add-Member -MemberType NoteProperty -Name 'solutionCloudFlows-limitSharingMode' -Value \"noLimit\" -Force\n\n# Save the updated Managed Environment settings\nSet-AdminPowerAppEnvironmentGovernanceConfiguration -EnvironmentName <EnvironmentId> -UpdatedGovernanceConfiguration $governanceConfiguration\n```\n\n----------------------------------------\n\nTITLE: Applying Updates to Power Fx Documentation - PowerShell\nDESCRIPTION: This PowerShell script is designed to be run locally after updating .json or .errata files, ensuring that the documentation is correctly applied with the necessary updates in the 'Applies to:' sections of the relevant documentation files.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/funcjson/README.txt#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nIn your local clone of the doc repo, run this script after updating the \n.json or .errata files in this directory. It doesn't verify, it makes things \nright.\n\nIt will:\n- Apply updates to the \"Applies to:\" in each of the reference/include/* \n  files.\n- Update the TOC.yml to use the same links that are in formula-reference-* \n  files.\n```\n\n----------------------------------------\n\nTITLE: Analyzing Power Platform Function Compatibility\nDESCRIPTION: Provides a breakdown of functions like Blank, Coalesce, IsEmpty, and IsBlank and their supported platforms\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-isblank-isempty-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Functions | Applies to |\n|-----------|------------|\n| **Blank** | :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Canvas apps :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Cards :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Copilot Studio :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Desktop flows :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Dataverse formula columns :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Model-driven apps :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Power Platform CLI :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Dataverse functions |\n```\n\n----------------------------------------\n\nTITLE: Clear Function in Power Platform\nDESCRIPTION: A function used to clear the contents of a collection or data source across multiple Power Platform technologies. Applies to Canvas apps, Cards, Desktop flows, Power Platform CLI, and Dataverse functions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-clear-collect-clearcollect-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Applies to |\n|-----------|------------|\n| **Clear** | :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Canvas apps :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Cards :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Desktop flows :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Power Platform CLI :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Dataverse functions |\n```\n\n----------------------------------------\n\nTITLE: Running PowerShell Commands to Configure SQL LocalDB Instance\nDESCRIPTION: PowerShell commands to stop, delete, and create a new MSSQLLocalDB instance to fix cross reference database validation failures. This sequence is part of the troubleshooting process when setting up the development environment.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/unified-experience/finance-operations-faq.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nsqllocaldb stop MSSQLLocalDB\nsqllocaldb delete MSSQLLocalDB\nsqllocaldb create MSSQLLocalDB -s\n```\n\n----------------------------------------\n\nTITLE: Applying Localized Text in Power Apps Controls\nDESCRIPTION: This code snippet shows how to apply localized text to control properties in Power Apps. It looks up the localized string from a collection and defaults to English if no localized version is found.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/sap/templates/sap-procurement/administer/extend-canvas-apps.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nWith(\n    {Text: \"Vendor name\"},\n    If(\n        IsBlank(\n            LookUp(\n                colUserLocalizedStrings,\n                'English Value' = Text\n            ).'Localized Value'\n        ),\n        Text,\n        LookUp(\n            colUserLocalizedStrings,\n            'English Value' = Text\n        ).'Localized Value'\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Selecting Edit Option in Power Platform Admin Center\nDESCRIPTION: This code snippet shows how to include an image in Markdown format, demonstrating the 'Edit' button selection in the Power Platform admin center interface.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/edit-properties-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!div class=\"mx-imgBorder\"] \n> ![Select Edit.](media/select-edit.png \"Select Edit\")\n```\n\n----------------------------------------\n\nTITLE: Table of Microsoft First-Party Services and Portal Apps\nDESCRIPTION: A markdown table listing application IDs and names for various Microsoft first-party services and portal apps. This table includes entries for Dataverse, Power Apps, Power BI, and many other Microsoft services.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/apps-to-allow.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Application ID | Application name |\n|----------------|------------------|\n| 00000007-0000-0000-c000-000000000000 | Dataverse |\n| 065d9450-1e87-434e-ac2f-69af271549ed | PowerPlatformAdminCenter |\n| 4e291c71-d680-4d0e-9640-0a3358e31177 | Power Apps |\n| 8c1a9936-578e-4d13-9bd9-9afe53ef7de8 | Finance Copilot |\n| d024ca46-2708-4d20-903e-b18b7e1d95dc | Dynamics365Assistant |   \n| 61ccfc51-60d1-470a-9dca-f78fcf640d23 | MicrosoftServiceCopilot-Prod |\n| e97edbaf-39b2-4546-ba61-0a24e1bef890 | EHRTeleHealth | \n| 7c4f9118-450a-4e75-b96b-df2d0cac4c0d | d365-dani-exceladdinprod |\n| 7f67af8a-fedc-4b08-8b4e-37c4d127b6cf | Power BI Desktop |\n| 871c010f-5e61-4fb1-83ac-98610a7e9110 | MicrosoftPowerBI |\n| 8463278f-7a65-4b3d-903c-5e66a2ad1164 | Mix Tools API |\n| 5e72ef24-048b-4aae-8fd6-8653ce2d6760 | PowerPlatform-commondataserviceforapps-Connector |\n| d0af0b2c-272b-4820-80ce-af3cc751950f | sophia.api.microsoft.com |\n| d8fa9ca8-15de-4a33-b719-9c944b9b2e3e | Sophia Platform Service API |\n| 66a88757-258c-4c72-893c-3e8bed4d6899 | QueryFormulationService |\n| 325e8307-defd-47df-aeff-15152ea6e5bf | Prod M365FLWPService Prod |\n| 226e4631-c980-4b11-9c96-5e26bb14dafc | Prod M365FLWPClient Prod |\n| 9e6d7425-da52-4c9d-a3bf-48ce4670f9ef | Prod M365FLWPService FirstRelease |\n| e582717c-581c-4a51-a8d7-5cd28f59497a | Prod M365FLWPClient FirstRelease |\n| 2f29638c-34d4-4cf2-a16a-7caf612cee15 | Microsoft Dynamics CRM for Microsoft Office Outlook |\n| ebf6b2b7-c635-4217-b6b7-21de4ac65764 | WPSTrialSignUpService_Prod |\n| 46e9667d-34e6-43d8-a494-6759b3ae6a5e | Biz Apps Demo Hub Prod |\n| 04f0c124-f2bc-4f59-8241-bf6df9866bbd | Visual Studio |\n| c84a0f23-a0f8-4e8e-918b-57db620d110a | Power Platform Admin Center Client Test |\n| 719640cd-0337-4b0c-8e6a-431271371fab | make.test.powerapps.com |\n| 3e050dd7-7815-46a0-8263-b73168a42c10 | Teams Approvals |\n| 08e18876-6177-487e-b8b5-cf950c1e598c | SharePointOnlineWebClientExtensibility |\n| bee5ee7b-22c7-4e94-9b8b-031319e230a3 | Viva Goals Integrations |\n| 6f459c5d-d670-409b-83a6-68b040f4cb78 | Customer Experience Platform FRE PROD |\n| f10573e9-a3c7-41b4-b203-4b1baed8fc8c | Customer Experience Platform FRE TIP Non-Prod |\n| 60f38cf4-a0bf-4fdf-b0b5-14d3131bc031 | make.test.powerapps.com |\n| a0fe4328-8965-437b-a350-cf71409d002f | Cloud for Nonprofit Installer |\n| 5c17a0cf-5493-4b86-b23d-dabc1cc46f5a | Minit Desktop for Windows |\n| 04d97d71-f71f-450b-8b44-f638d5d1b5d6 | PhysOps.Clients.Worker |\n| 2fd908ad-0664-4344-b9be-cd3e8b574c38 | Microsoft.Data.SqlClient |\n| 929cb005-cba1-40c4-a962-ef441029cb6c | make.gov.powerpages.microsoft.us |\n| 73a510c3-9946-46dd-b5ae-a8f0ae68fd04 | Azure API Management Portal extension |\n| 38ec0b21-8bde-4473-950b-819ceb3ed233 | SuplariDev |\n| ea62c1c6-550b-4238-8ea7-c55a85d86be8 | Teams Work Report |\n| bd414a4d-005a-4a51-a63e-12097e3dcd19 | LobeClientDev |\n| aebc6443-996d-45c2-90f0-388ff96faa56 | Visual Studio Code |\n| 4787c7ff-7cea-43db-8d0d-919f15c6354b | D365SalesProductivityProvisioning |\n| f9a5ac11-cab3-45f0-9d0f-83463ba2e34c | make.test.powerpages.microsoft.com |\n| 75eb2b80-011a-4693-9a47-7971c853603c | make.powerpages.microsoft.com |\n| a8adde6c-aeb4-4fd6-9d8f-c2dfdecac60a | Dynamics 365 collaboration with Microsoft Teams |\n| 996def3d-b36c-4153-8607-a6fd3c01b89f | Project Madeira |\n| 9cee029c-6210-4654-90bb-17e6e9d36617 | Power Platform CLI - pac |\n| 6b91db1b-f05b-405a-a0b2-e3f60b28d645 | M365AdminServices |\n| 2f7b4d11-d621-4079-9798-27f548d681f1 | Power Cards |\n| 8b66798c-a359-423d-8d71-567ee6da1016 | Dynamics 365 Customer Insights - Consent - DEV |\n| 50d9b7e0-07b6-4615-a8ae-f7f017db392a | Supply Chain Windblade Development |\n| d6037e40-282c-493d-8f63-f255e36c6ef4 | Microsoft Dynamics 365 Supply Chain Visibility |\n| 37ff607d-6be1-4c1b-a5f8-e5ad92b55975 | Lobe |\n| 22618bd1-b6aa-45f0-8ebd-718d158d888d | TrustedPublishersProxyService-DoD |\n| e8c38929-689f-4155-96f7-ab45b0f67cec | TrustedPublishersProxyService-GccModerate |\n| 2b61b865-d0bd-4c60-9efa-6fa934eefaac | TrustedPublishersProxyService |\n| 9f4bb91b-347a-47ab-aba4-06db0dcb89e3 | Unify Portal Prod |\n| de490f5e-b798-48d8-ae3b-c220d7494cef | BAGSolutionsInstaller |\n| 9315aedd-209b-43b3-b149-2abff6a95d59 | PowerVirtualAgentsUSGovGCC |\n| fdd7719f-d61e-4592-b501-793734eb8a0e | SharePointMigrationTool |\n| ef47e344-4bff-4e28-87da-6551a21ffbe0 | BingTest |\n| 9ea1ad79-fdb6-4f9a-8bc3-2b70f96e34c7 | Bing |\n| 09be0be4-1874-4f49-bc5c-78e6fc2a8065 | Power Apps Portals - Development |\n| 386ce8c0-7421-48c9-a1df-2a532400339f | Power Automate Desktop For Windows |\n| 9e3b502c-b4a1-441d-98fd-28e482bf7e88 | Dynamics 365 Customer Insights - Consent |\n| 9c60a40b-b5c5-4d01-8588-776209c80db3 | Search Federation Connector - Dataverse |\n| 03509b1f-54e9-4557-a555-19a090903b84 | CRM Power BI Integration GCC High |\n| f448d7e5-e313-4f90-a3eb-5dbb3277e4b3 | Media Recording for Dynamics 365 Sales |\n| 883d98cb-7d92-43b7-a194-07e51a2fa5bb | Media Recording for Dynamics 365 Sales - TIP |\n| 88c57617-94ff-4043-a396-8a85a8d38922 | Business Central to Common Data Service |\n| 19679030-48d8-445f-b27c-311bb3be8a2c | eSeal |\n| 19a92965-3c11-4ed7-a1bd-9b66785dd4c6 | PADWAMigratorGCC |\n| cb47b44e-c0a3-47a5-85ce-3dc039c85e80 | PADWAMigratorGCCHigh |\n| 133c4dc0-9d5f-4826-9f7b-6bb3d3867e6a | PADWAMigrator |\n| 8ad75a3e-ae97-457c-baab-65bd5c95389f | BAGSolutionsInstallerTest |\n| ae7deb89-ca76-4073-bf3e-b72165ac58e9 | Power Automate Desktop DoD |\n| f1a1e36a-d61f-4283-9f48-0867636e332c | Power Automate Desktop GCC High |\n| 041e4c2d-ba3e-46a1-9347-5bc4054c8af4 | Power Automate Desktop GCC |\n| 3852314e-aab9-42c3-a859-5b5b88a90000 | ConnectedFieldServiceDeployment |\n| 2f6713e6-1e21-4a83-91b4-5bf9a2378f81 | RSOProvisioningCustomerDashboard |\n| 257fc75b-c7b8-434b-a467-fcfc16cb7ab6 | Dynamics CRM TIP SRS |\n| a6d2002e-7db6-4da0-94e8-73765fdbc7fb | ProcessSimpleDoD |\n| ee90a17f-1cb7-4909-be27-dfc2dcc4dc15 | Power Automate Desktop |\n| 3a225c96-d62a-44ce-b3ec-bd4e8e9befef | Dynamics 365 Human Resources LinkedIn Adapter App |\n| f0b72488-7082-488a-a7e8-eada97bd842d | Power BI Report Builder |\n| 291bcb22-15e5-4341-8f91-feb152d655ee | Dynamics 365 Connected Store |\n| 363a906a-1ceb-41ea-9f20-884c694f2fc2 | ApiHub-Connectors-DoD |\n| 7abdc2e3-67d5-4ccf-8138-e133192788e3 | MicrosoftFlowDoD |\n| 470d0752-cb06-49b2-ac83-5023fc23adae | MicrosoftFlowGCCHigh |\n| 50351660-e7b1-4621-8bc8-8503296a5535 | MicrosoftFlowGCC |\n| 0bfc4568-a4ba-4c58-bd3e-5d3e76bd7fff | Dynamics365AICustomerInsights |\n| 38c77d00-5fcb-4cce-9d93-af4738258e3c | MicrosoftUnifiedCustomerIntelligence |\n| ec245c98-4a90-40c2-955a-88b727d97151 | AzureADIdentityGovernanceUserManagement |\n| 810dcf14-1858-4bf2-8134-4c369fa3235b | AzureADIdentityGovernanceEntitlementManagement |\n| 19dd5b37-d116-48cb-90d2-4aa56696cba1 | MicrosoftFormsProTest |\n| 8c8fbf21-0ef3-4f60-81cf-0df811ff5d16 | Power Query Online GCC-L5 |\n| adc59501-b8c1-453a-a88b-9f4b244c1631 | PowerApps Web Player Service - play.apps.appsplatform.us |\n| dc426ec9-396a-46fd-8445-564554907e34 | PowerApps Web Player Service - high.apps.powerapps.us |\n| 282c9137-f94e-4287-8223-9b60f2974e5c | PowerApps Web Player Service - apps.gov.powerapp.us |\n| 9362bc14-3e81-4ef9-8b77-f1c40afe68e0 | apps.powerapps.com |\n| 065d9450-1e87-434e-ac2f-69af271549ed | PowerPlatformAdminCenter |\n| ef947699-9b52-4b31-9a37-ef325c6ffc47 | Power Query Online GCC-L4 |\n| fcf50ee5-8107-45e4-9a37-838727a360f5 | Omnichannel for CS Admin App Prod |\n| d93420f9-abc8-46b7-b7fc-30ec1f007ee2 | Azure API Hub - GCC-Med |\n| 939fe80f-2eef-464f-b0cf-705d254a2cf2 | Power Query Online GCC-L2 |\n| d9ce8cfa-8bd8-4ff1-b39b-5e5dd5742935 | OmnichannelCRMClient |\n| 2c37df23-0c28-4fbf-9b2a-d5fd6277bf92 | OmnichannelEngagementHubAdminApp |\n| 3957683c-3a48-4a6c-8706-a6e2d6883b02 | DYN365_CS_MESSAGING |\n| 36ee54ac-414c-41ef-afde-2ddfd25d5408 | ApiHub-Connectors-GCCHigh |\n| 7f15f9d9-cad0-44f1-bbba-d36650e07765 | Azure Synapse Link for Dataverse |\n| 9856e8dd-37b6-4749-a54b-8f6503ea93b7 | PrcessSimpleGCCHigh |\n| bb0fc165-b959-4e50-a8fc-309c1193e396 | CRM Power BI Integration GCC |\n| 44a34657-125d-4be1-b08d-87a07b336d24 | PowerApps - play.apps.appsplatform.us |\n| b145fb8f-d278-464f-8de1-894b596ecbde | PowerApps - apps.high.powerapps.us |\n| a81833f1-fd18-490b-8598-60cd7b6b0382 | PowerApps - apps.gov.powerapps.us |\n| d7e0a6a1-dde5-4f6e-81ce-781fa7483834 | mil.create.powerapps.us |\n| 58acb57d-f51b-4993-8f4a-4e41ad77e481 | high.create.powerapps.us |\n| a4b559be-784e-49ec-9b63-7208442255e1 | PowerApps Fairfax |\n| 0cb2a3b9-c0b0-4f92-95e2-8955085f78c2 | PowerApps |\n| 3e62f81e-590b-425b-9531-cad6683656cf | PowerApps - apps.powerapps.com |\n| cd34d57a-a3ef-48b1-b84b-9686f0f7c099 | Aria |\n| 6e7d203a-179d-4ae0-87da-a77dd8aa3135 | CrmSalesInsightsRA |\n| fac5b0fe-9b16-4ae3-b20b-324ec3f033d3 | make.mil.powerapps.us |\n| 5d21c8e8-6d68-4b62-a3a5-bc1900513fad | make.high.powerapps.us |\n| feb2c8aa-4f70-4881-abec-521141627b04 | make.gov.powerapps.us |\n| 0ef09fa7-413d-4a9f-a7a5-32f8f62b7598 | Field Service Mobile |\n```\n\n----------------------------------------\n\nTITLE: Calendar Function Results for en-US Locale\nDESCRIPTION: Examples of return values for various Calendar and Clock functions when the Language is set to 'en-US' (United States English).\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-clock-calendar.md#2025-04-20_snippet_1\n\nLANGUAGE: powerapps\nCODE:\n```\nCalendar.MonthsLong()\n[ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ]\n\nCalendar.MonthsShort()\n[ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\n\nCalendar.WeekdaysLong()\n[ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ]\n\nCalendar.WeekdaysShort()\n[ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ]\n\nClock.AmPm()\n[ \"AM\", \"PM\" ]\n\nClock.AmPmShort()\n[ \"A\", \"P\" ]\n\nClock.IsClock24()\nfalse\n```\n\n----------------------------------------\n\nTITLE: App-Level Pay-As-You-Go Setup\nDESCRIPTION: Instructions for configuring pay-as-you-go billing directly from Power Apps application settings. Details the process of connecting an Azure subscription and managing billing preferences at the app level.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-set-up.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to Power Apps and navigate to **Apps**. Select your app, and then select **Settings**.\n\n2. Select **Set up pay-as-you-go** to connect your Azure subscription to this environment.\n\n3. Enter a billing plan name and your Azure subscription details. Select **Connect subscription** to complete the setup.\n\n4. Once an Azure subscription is successfully linked to your environment, you'll land back on the app settings page.\n```\n\n----------------------------------------\n\nTITLE: Creating a Chessboard Pattern with Nested ForAll and As Operators in Power FX\nDESCRIPTION: Complex example using nested ForAll functions with As operators to create a chessboard pattern text string. Each loop is named (Rank and File) to allow referencing specific scopes in the nested formula.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_25\n\nLANGUAGE: power-fx\nCODE:\n```\nConcat(\n    ForAll( Sequence(8) As Rank,\n        Concat(\n            ForAll( Sequence(8) As File,\n                    If( Mod(Rank.Value + File.Value, 2) = 1, \" X \", \" . \" )\n            ),\n            Value\n        ) & Char(10)\n    ),\n    Value\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Office 365 Admin Center for Datacenter Migration Requests\nDESCRIPTION: Step-by-step instructions for submitting a technical support incident to request migration of an environment to the Australia datacenter through the Office 365 Admin Center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/about-microsoft-cloud-australia.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to [https://admin.microsoft.com](https://admin.microsoft.com).  \n  \n2. Go to **Support** > **Service Requests** > **+**  \n  \n3. Choose **More** > **Dynamics 365 Online**  \n  \n4. For **Feature**, select **Data Management**. For **Symptom**, select **Data Center migration request**.  \n  \n5. Fill in the rest of the information to submit a service request.\n```\n\n----------------------------------------\n\nTITLE: Reassigning Canvas App Ownership in Power Platform\nDESCRIPTION: PowerShell script to reassign ownership of all canvas apps from one user to another using Set-AdminPowerAppOwner cmdlet.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-privacy-delete-dsr.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-PowerAppsAccount\n$deleteDsrUserId = \"0ecb1fcc-6782-4e46-a4c4-738c1d3accea\"\n$newAppOwnerUserId = \"72c272b8-14c3-4f7a-95f7-a76f65c9ccd8\"\n\n#find all apps owned by the DSR user and assigns them a new owner\nGet-AdminPowerApp -Owner $deleteDsrUserId | Set-AdminPowerAppOwner -AppOwner $newAppOwnerUserId\n```\n\n----------------------------------------\n\nTITLE: Defining Types in Reverse with RecordOf function - Power Fx\nDESCRIPTION: This snippet showcases an alternative method of defining types for Library and Book using the RecordOf function. It constructs the LibraryType as a table which then generates BookType by wrapping it in RecordOf.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-type.md#2025-04-20_snippet_3\n\nLANGUAGE: powerapps-dot\nCODE:\n```\n// Type definition for a table of books\nRecordOfLibraryType := Type( [ { Title: Text, Author: Text, Published: Number } ] );\n\n// Type definition for a single book\nRecordOfBookType := Type( RecordOf( RecordOfLibraryType ) );\n```\n\n----------------------------------------\n\nTITLE: Listing pac pages Commands in Markdown\nDESCRIPTION: A markdown table listing the available commands in the 'pac pages' command group, including their names and descriptions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/pages.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Command|Description|\n|---------|---------|\n|[pac pages bootstrap-migrate](#pac-pages-bootstrap-migrate)|Migrates HTML code from bootstrap V3 to V5.|\n|[pac pages download](#pac-pages-download)|Download Power Pages website content from the current Dataverse environment.|\n|[pac pages list](#pac-pages-list)|List all Power Pages websites from the current Dataverse environment.|\n|[pac pages migrate-datamodel](#pac-pages-migrate-datamodel)|Manage data model migration for your Power Pages website.|\n|[pac pages upload](#pac-pages-upload)|Upload Power Pages website content to current Dataverse environment.|\n```\n\n----------------------------------------\n\nTITLE: Configuring a HTTP Request with Authorization Header in Canvas Apps\nDESCRIPTION: This snippet demonstrates how to set up an HTTP request with an authorization token in the header. It shows the proper syntax for including bearer tokens for secure API access.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-readnfc-applies-to.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nOffice365.HttpRequest(\n    \"https://api.contoso.com/secure-endpoint\",\n    \"GET\",\n    {},\n    {\n        'Authorization': \"Bearer \" & varAccessToken,\n        'Accept': 'application/json'\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Include Directive for PPAC Banner\nDESCRIPTION: Markdown include directive for the new Power Platform Admin Center banner\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/onpremises-data-gateway-management.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[new-PPAC-banner](~/includes/new-PPAC-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for owneridyominame Field\nDESCRIPTION: Defines the logical name for the owner yomi name field, which represents the yomi name of the owner. This is a system required read-only text field with a maximum length of 100 characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`owneridyominame`\n```\n\n----------------------------------------\n\nTITLE: Using ColorValue with Color Names in Power Apps\nDESCRIPTION: Examples of using the ColorValue function with predefined color names in Power Apps. This approach allows for more readable color definitions using standard CSS color names.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-colors.md#2025-04-20_snippet_6\n\nLANGUAGE: Power Fx\nCODE:\n```\nColorValue( \"aliceblue\" )\n```\n\n----------------------------------------\n\nTITLE: Filtering Unassigned Reservations in Power Apps Gallery\nDESCRIPTION: This Power Apps formula filters the Reservations data source to show only items that don't have a 'Product Reservation' assigned. It's used to populate a gallery with unassigned reservations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-relate-unrelate.md#2025-04-20_snippet_5\n\nLANGUAGE: power-fx\nCODE:\n```\nFilter( Reservations, IsBlank( 'Product Reservation' ) )\n```\n\n----------------------------------------\n\nTITLE: Removing Apps and Flows in PowerShell\nDESCRIPTION: This snippet demonstrates how to remove applications and flows from the default environment in Power Platform using PowerShell commands. It illustrates the procedure to loop through a list of IDs and remove specified assets efficiently.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/white-papers/migrating-from-default-environment.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$FlowName = \"[Guid]\"\n$EnvironmentName = \"Default-[Guid]\"\n\nRemove-AdminFlow -EnvironmentName $EnvironmentName -FlowName $FlowName\nRemove-AdminPowerApp -AppName \"[Guid]\" -EnvironmentName \"[Guid]\"\n```\n\n----------------------------------------\n\nTITLE: File-to-File Mapping XML Configuration\nDESCRIPTION: This snippet illustrates how to map one file directly to another, specifying both the source and destination paths. It clarifies the usage of wildcards and the implications for file existence.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-packager-tool.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<FileToFile map=\"assembly.dll\" to=\"c:\\path\\folder\\assembly.dll\" />\n<FileToFile map=\"PluginAssemblies\\**\\this.dll\" to=\"..\\..\\Plugins\\**\\that.dll\" />\n<FileToFile map=\"Webresrouces\\ardvark.jpg\" to=\"%SRCBASE%\\CrmPackage\\WebResources\\JPG format\\aardvark.jpg\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<FileToFile\n    map=\"pluginpackages\\cr886_PluginPackageTest\\package\\cr886_PluginPackageTest.nupkg\"\n    to=\"myplg\\bin\\Debug\\myplg.1.0.0.nupkg\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Remote Connectivity Analyzer for Exchange Web Services\nDESCRIPTION: This code snippet shows the configuration settings for testing the connection to Exchange Server (on-premises) using the Microsoft Remote Connectivity Analyzer. It includes fields such as target mailbox, authentication type, and impersonation settings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/test-connection-exchange-server-onpremises.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Field/setting  |Value  |\n|---------|---------|\n|Target mailbox email address     | For example: aTestMailbox@contoso.com        |\n|Authentication type     |  Select **Basic authentication**.        |\n|Microsoft Account     | You'll need an [impersonation account](/exchange/client-developer/exchange-web-services/impersonation-and-ews-in-exchange) (imp_acc_1) configured on Microsoft Exchange on-premises with impersonation access for all the mailboxes you wish to test synchronization.        |\n|Password     |         |\n|Use Autodiscover to detect server settings <br /> Specify Exchange Web Services URL    | Use Autodiscover if you want to use the automatically discover service to determine the server location. Specify an EWS URL (for example, https://contoso.yourdomain.com/EWS/Exchange.asmx) to locate the email server manually.       |\n|Test predefined folder      | Select this option.        |\n|Use Exchange Impersonation     | Enable this to test synchronization for multiple mailboxes.        |\n|Impersonated user     | Enter the same Exchange email address you specified for the Target mailbox email address above.    |\n|Impersonated user identifier     |  Select **SmtpAddress**.       |\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for owninguser Field\nDESCRIPTION: Defines the logical name for the Owning User field, which represents the unique identifier for the user that owns the record. This is a read-only lookup field that targets systemuser.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`owninguser`\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas App Using Connector Display Name - PowerShell\nDESCRIPTION: Creates a canvas app (.msapp file) from an OpenAPI Definition using the custom connector's display name. The generated app includes screens, control layout, and Power Fx code based on the connector's defined actions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/canvas-create-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac canvas create --msapp HelloWorld.msapp --connector-display-name \"My Custom Connector\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Plugin Project with PAC CLI in PowerShell\nDESCRIPTION: This command initializes a new plugin project in PowerShell using the PAC CLI tool. The --skip-signing parameter is used to avoid signing the plugin assemblies, which is recommended when working with dependent assemblies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/howto/cli-create-package.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS E:\\projects\\mypluginproject> pac plugin init --skip-signing\n```\n\n----------------------------------------\n\nTITLE: Patching Employee Status Using ThisRecord\nDESCRIPTION: This snippet uses ThisRecord to reference individual employee records while patching their status to Active for those found by filtering the Employees collection.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_15\n\nLANGUAGE: power-fx\nCODE:\n```\nWith( { InactiveEmployees: Filter( Employees, Status = 'Status (Employees)'.Inactive ) },\n      ForAll( InactiveEmployees, \n              Patch( Employees, ThisRecord, { Status: 'Status (Employees)'.Active } ) ) )\n```\n\n----------------------------------------\n\nTITLE: Problematic YAML Syntax with Power Fx\nDESCRIPTION: Examples of syntax that causes errors due to incompatibilities between Power Fx and YAML grammars. The number sign in a string is interpreted as a YAML comment, and record properties with colons create additional YAML name maps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/yaml-formula-grammar.md#2025-04-20_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nText: =\"Hello #PowerApps\"\nRecord: ={ a: 1, b: 2 }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tenant ID using PowerShell AzureAD Module\nDESCRIPTION: PowerShell script demonstrating how to retrieve the tenant ID using Azure Active Directory cmdlets. This is an essential step for authenticating and interacting with Power Apps checker web APIs.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/checker-api/overview.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# PowerShell script to retrieve tenant ID\n```\n\n----------------------------------------\n\nTITLE: Installing Package Deployer Tool using NuGet command line\nDESCRIPTION: Command to download and extract the Microsoft.CrmSdk.XrmTooling.PackageDeployment.Wpf package to a specified directory using nuget.exe. The command requires specifying a version number and output directory.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/cc-use-package-deployer.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nd:\\nuget install Microsoft.CrmSdk.XrmTooling.PackageDeployment.Wpf -Version [VERSION] -O d:\\PD\n```\n\n----------------------------------------\n\nTITLE: Changing Long Name of Import Package in C#\nDESCRIPTION: This method allows customization of the package's long name, which is displayed in the Package Deployer wizard. It provides an opportunity to ensure clarity and relevance of the package name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/package-deployer-tool.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic override string GetLongNameOfImport  \n{  \nget { return \"Package Long Name\"; }  \n}\n```\n\n----------------------------------------\n\nTITLE: Including Dynamics 365 Deprecation Documentation Links in Markdown\nDESCRIPTION: Markdown code that creates a list of hyperlinks to documentation about deprecated features in various Dynamics 365 applications, including a footer banner inclusion directive at the end.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/important-changes-coming.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## Other deprecation articles\n\n[Deprecated features in Dynamics 365 Sales](/dynamics365/sales/deprecations-sales)<br/>\n[Deprecated features in Dynamics 365 Customer Service](/dynamics365/customer-service/deprecations-customer-service)<br/>\n[Deprecated features in Dynamics 365 Field Service](/dynamics365/field-service/deprecations-field-service)<br/>\n[Deprecated features in Universal Resource Scheduling](/dynamics365/common-scheduler/deprecations)<br/>\n[Removed or deprecated features in Finance and Operations apps](/dynamics365/fin-ops-core/fin-ops/get-started/removed-deprecated-features-home-page)<br/>\n\n[!INCLUDE[footer-include](includes/footer-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for statecode Field\nDESCRIPTION: Defines the logical name for the Status field, which represents the status of the Publisher Identity. This is a system required state field with global choice name mspcat_publisheridentity_statecode.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`statecode`\n```\n\n----------------------------------------\n\nTITLE: Installing Azure PowerShell on Windows\nDESCRIPTION: Command to install the Azure PowerShell module, which is required for certain migration steps.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/move-environment-tenant.md#2025-04-20_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name Az -Repository PSGallery -Force\n```\n\n----------------------------------------\n\nTITLE: Cognitive Bias Classification in User Experience\nDESCRIPTION: Categorizes cognitive biases that impact user perception and interaction with digital interfaces, providing insights for design optimization\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/well-architected/experience-optimization/interaction-design.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Cognitive biases\n\nCognitive biases are the shortcuts and rules of thumb by which we make judgments and predictions.\n\n1. *Information overload*: Research suggests that the human brain has a limited capacity for processing information consciously at any given moment.\n\n2. *Ambiguity effect*: The world is complex, and users only perceive a small fraction of it.\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Field Using Logical Name in Power Fx\nDESCRIPTION: This snippet shows how to access a custom field using its logical name 'cr5e3_customfield' in Power Fx. No quotes are needed as the name doesn't contain spaces or special characters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_27\n\nLANGUAGE: Power Fx\nCODE:\n```\ncr5e3_customfield\n```\n\n----------------------------------------\n\nTITLE: Using pac copilot extract-translation command\nDESCRIPTION: Extracts localized content for one or more bots into a file. Can export all supported languages or just the primary language.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/copilot.md#2025-04-20_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\npac copilot extract-translation --bot \"myCopilotName\" --all --format \"resx\" --outdir \"./translations\"\n```\n\n----------------------------------------\n\nTITLE: List Separator Example in Power Platform\nDESCRIPTION: This snippet demonstrates the usage of the comma (,) as a list separator in Power Platform within various contexts, including function arguments, record fields, and table records.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_10\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"If( X < 10, \\\"Low\\\", \\\"Good\\\" )\"\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"{ X: 12, Y: 32 }\"\n```\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"[ 1, 2, 3 ]\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Default Authentication Profile with pac auth select\nDESCRIPTION: This snippet demonstrates how to select the newly created UNIVERSAL authentication profile as the default using the pac auth select command with the --index parameter.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-remarks.md#2025-04-20_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\test> pac auth select --index 2\nNew default profile:\n   * UNIVERSAL ConnectionName                 https://yourcompany.crm.dynamics.com/          : you@yourcompany.com              Public\n\nPS C:\\test>\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Block for Solution Importing\nDESCRIPTION: Important note about managed solution import restrictions and data loss considerations\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-concepts-alm.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!IMPORTANT]\\n> - You can't import a managed solution into the same environment that contains the originating unmanaged solution. To test a managed solution, you need a separate environment to import it into.\\n> - When you delete a managed solution, the following data is lost: data stored in custom tables that are part of the managed solution and data stored in custom columns that are part of the managed solution on other tables that aren't part of the managed solution.\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Access Location Restrictions for Dynamics ERP\nDESCRIPTION: Process for implementing location-based access controls for Microsoft Dynamics ERP applications using Conditional Access policies. Requires Microsoft Entra ID Premium license.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/restrict-access-online-trusted-ip-rules.md#2025-04-20_snippet_1\n\nLANGUAGE: Azure Portal Steps\nCODE:\n```\n1. Create Named Location\n2. Create Conditional Access Policy\n3. Select Cloud App: Microsoft Dynamics ERP\n4. Define Location Restrictions\n5. Configure Access Controls\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Block\nDESCRIPTION: Example markdown content showing solution layer headings and implementation details in Microsoft Dataverse.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/solution-layers-alm.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Solution layers\n\nSolution layering is implemented at a component level. Managed and unmanaged solutions exist at different layers within a Microsoft Dataverse environment. In Dataverse, there are two distinct layers:\n\n- **Unmanaged layer** All imported unmanaged solutions and ad-hoc customizations exist at this layer. All unmanaged solutions share a single unmanaged layer.\n- **Managed layers** All imported, managed solutions, and the system solution exist at this level.\n```\n\n----------------------------------------\n\nTITLE: Defining Identifier Names for Variables and Columns\nDESCRIPTION: This section provides guidelines on how to name variables, data sources, and columns in Power Apps, including the rules for using special characters and spaces.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Describing JSON Output Option for CLI\nDESCRIPTION: The --json flag is used in a command line interface to return the output of a command as a JSON formatted string. This option allows for easier parsing and processing of command results by other programs or scripts.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-restore-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### `--json`\n\nReturns the output of the command as a JSON formatted string.\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relationship Properties in Markdown\nDESCRIPTION: This snippet defines the properties of a one-to-many relationship for the mspcat_publisheridentity entity. It includes details such as referencing entity, attributes, and associated menu configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|ReferencingEntity|`mspcat_publisheridentity`|\n|ReferencingAttribute|`mspcat_originatingpublisheridentity`|\n|ReferencedEntityNavigationPropertyName|`mspcat_publisheridentity_OriginatingPub`|\n|IsCustomizable|`True`|\n|AssociatedMenuConfiguration|AvailableOffline: True<br />Behavior: `UseCollectionName`<br />Group: `Details`<br />Label: <br />MenuId: null<br />Order: 10000<br />QueryApi: null<br />ViewId: `00000000-0000-0000-0000-000000000000`|\n```\n\n----------------------------------------\n\nTITLE: Quarantine PowerShell Cmdlets for Canvas Apps\nDESCRIPTION: PowerShell commands to manage canvas app quarantine states in the default environment, allowing temporary disabling and reviewing of applications\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/manage-default-environment.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AppAsQuarantined -EnvironmentName <EnvironmentName> -AppName <AppName>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-AppAsUnquarantined -EnvironmentName <EnvironmentName> -AppName <AppName>\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-AppQuarantineState -EnvironmentName <EnvironmentName> -AppName <AppName>\n```\n\n----------------------------------------\n\nTITLE: Add User to Compliance Management Role Group\nDESCRIPTION: PowerShell command to grant a user permission to view audit log entries. This provides comprehensive access to all audit log entries without granular restrictions.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/access-usage.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-RoleGroupMember \"Compliance Management\" -Member user1\n```\n\n----------------------------------------\n\nTITLE: Commenting HTML Template for Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for adding remarks to the documentation. It instructs the user to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-set-governance-config-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Renaming Power Platform Auth Profile using PAC CLI\nDESCRIPTION: Shows how to rename an authentication profile using the pac auth name command. The command targets the profile at index 1 and sets its name to 'Contoso Dev'.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-name-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac auth name --index 1 --name \"Contoso Dev\"\n```\n\n----------------------------------------\n\nTITLE: Setting ConfirmExit Property in Power Apps\nDESCRIPTION: This snippet demonstrates how to set the ConfirmExit property of the App object to prompt users before closing the app if there are unsaved changes in either AccountForm or ContactForm.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/object-app.md#2025-04-20_snippet_0\n\nLANGUAGE: power-fx\nCODE:\n```\nAccountForm.Unsaved Or ContactForm.Unsaved\n```\n\n----------------------------------------\n\nTITLE: Setting the State of an Approval Rejection Applied Policy\nDESCRIPTION: This snippet demonstrates how to change the state of an approval rejection policy with a PATCH request in the Web API.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrejectionappliedpolicy.md#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n`PATCH` /mspcat_certificationrejectionappliedpolicies(*mspcat_certificationrejectionappliedpolicyid*)<br />[Update](/powerapps/developer/data-platform/webapi/update-delete-entities-using-web-api#basic-update) the `statecode` and `statuscode` properties.\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML Comments for Power Platform Documentation\nDESCRIPTION: This snippet demonstrates the structure of HTML comments used to provide instructions for adding remarks in Power Platform documentation. It includes placeholders for inserting appropriate content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-prt-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Concatenating Employee Names Using Custom Name from As Operator\nDESCRIPTION: This snippet demonstrates concatenating the First Name and Last Name using the custom name 'Employee' set with the As operator in a gallery.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_18\n\nLANGUAGE: power-fx\nCODE:\n```\nEmployee.'First Name' & \" \" & Employee.'Last Name'\n```\n\n----------------------------------------\n\nTITLE: Adding Remarks in Power Platform Documentation\nDESCRIPTION: This HTML comment provides instructions for adding remarks to the documentation. It instructs the user to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connection-update-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Comment Structure in HTML\nDESCRIPTION: A simple HTML comment structure that provides instructions for documentation authors. It directs users to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-extract-template-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-One Relationship Properties in Markdown\nDESCRIPTION: This snippet defines the properties of a many-to-one relationship between mspcat_publisher and mspcat_publisheridentity entities. It includes details such as referenced entities, attributes, and cascade configurations.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|ReferencedEntity|`mspcat_publisher`|\n|ReferencedAttribute|`mspcat_publisherid`|\n|ReferencingAttribute|`mspcat_publisher`|\n|ReferencingEntityNavigationPropertyName|`mspcat_Publisher`|\n|IsHierarchical||\n|CascadeConfiguration|Archive: `NoCascade`<br />Assign: `Cascade`<br />Delete: `Cascade`<br />Merge: `NoCascade`<br />Reparent: `Cascade`<br />RollupView: `NoCascade`<br />Share: `Cascade`<br />Unshare: `Cascade`|\n```\n\n----------------------------------------\n\nTITLE: Syncing Solution with PAC CLI in PowerShell\nDESCRIPTION: This example demonstrates the basic usage of the 'pac solution sync' command. It syncs the solution to the current directory without any additional parameters.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-sync-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac solution sync\n```\n\n----------------------------------------\n\nTITLE: Substitute Function with Table Input in Power Fx\nDESCRIPTION: Shows how to use Substitute function with a single-column table to replace specific instances across multiple strings.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-replace-substitute.md#2025-04-20_snippet_3\n\nLANGUAGE: power-fx\nCODE:\n```\nSubstitute([\n  \"Qtr 1, 2018\",\n  \"Quarter 1, 2011\",\n  \"Q1, 2019\"\n], \"1\", \"3\", 1)\n```\n\n----------------------------------------\n\nTITLE: Structuring Project Documentation Comments in HTML\nDESCRIPTION: This HTML comment block provides instructions for configuring project documentation. It directs users to remove the comments and add appropriate remarks in a specified section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/auth-select-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Querying Connection Status - Power Platform - Formula\nDESCRIPTION: Checks if the device is connected to a network as part of synchronization capabilities within the application.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/signals.md#2025-04-20_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n**Connection.Connected**\n```\n\n----------------------------------------\n\nTITLE: Field Disambiguation Operator in Power Platform\nDESCRIPTION: This snippet demonstrates the '@' operator for field disambiguation in Power Platform. It accesses a specific field within a table named MyTable.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_8\n\nLANGUAGE: PowerApps\nCODE:\n```\n\"MyTable[@fieldname]\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Controls While Printing in Power Apps\nDESCRIPTION: This example demonstrates how to hide a button on the screen while printing by modifying its Visible property. The button will not appear in the print preview.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-print.md#2025-04-20_snippet_1\n\nLANGUAGE: Power Fx\nCODE:\n```\nNot Screen1.Printing\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in CoE CLI - Bash\nDESCRIPTION: This bash command runs the unit tests for the CoE CLI after implementing new changes, ensuring that the new command integrates correctly.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/coe/cli/cli-development/adding-new-command.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Using Filter with Record References - Power FX\nDESCRIPTION: This snippet illustrates the use of record references in the Filter function without needing to determine their type using IsType or AsType.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/function-astype-istype.md#2025-04-20_snippet_1\n\nLANGUAGE: power-fx\nCODE:\n```\nFilter( Accounts, Owner = First( Users ) )\n```\n\n----------------------------------------\n\nTITLE: Operating on Single-Column Tables in Power Fx\nDESCRIPTION: Illustrates the use of ShowColumns to extract a single column from a table, specifically the 'Product' column from the Products table, producing a single-column table.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/tables.md#2025-04-20_snippet_7\n\nLANGUAGE: power-fx\nCODE:\n```\nShowColumns( Products, \"Product\" )\n```\n\n----------------------------------------\n\nTITLE: Field Definition: mspcat_supersededby in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Superseded by lookup field that indicates which approval request superseded the current one, if applicable.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n`mspcat_supersededby`\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Structure\nDESCRIPTION: Basic HTML comment template providing instructions and a placeholder for remarks section. The template includes directives for removing comments and adding appropriate remarks.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-backup-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Remarks Template in HTML\nDESCRIPTION: This snippet provides a commented-out HTML structure for adding remarks to documentation. It includes instructions for removing comments and adding appropriate content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-cmt-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Removing a DLP Policy\nDESCRIPTION: This command deletes an existing DLP policy, assisting administrators in maintaining compliance by managing active policies.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/powerapps-powershell.md#2025-04-20_snippet_40\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-DlpPolicy\n```\n\n----------------------------------------\n\nTITLE: Parentheses in Power Fx\nDESCRIPTION: Parentheses '()' are used in Power Fx to enforce precedence order and group sub-expressions within a larger expression.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/operators.md#2025-04-20_snippet_2\n\nLANGUAGE: Power Fx\nCODE:\n```\n\t\t\t\"Filter(T, A &lt; 10)<br><br>(1 + 2) * 3\"\n```\n\n----------------------------------------\n\nTITLE: Field Definition: owneridtype in Power Platform Entity Schema\nDESCRIPTION: Schema definition for the Owner Id Type field that indicates the type of the owner.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n`owneridtype`\n```\n\n----------------------------------------\n\nTITLE: Versioning PCF Component using Git Tags Strategy\nDESCRIPTION: Applies a versioning strategy for PCF components using Git tags to manage and track component versions\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/pcf-version-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npac pcf version --strategy gittags\n```\n\n----------------------------------------\n\nTITLE: Note About Dataverse Meter Default Setting\nDESCRIPTION: Markdown note block indicating that the Dataverse meter is enabled by default in pay-as-you-go plans\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/pay-as-you-go-issues-faq.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [!Note]\\n>  The Dataverse meter is turned on by default. You can also preallocate Dataverse capacity for your environment, ensuring that any overage usage for Dataverse is charged to Azure.\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Microsoft Power Platform Documentation\nDESCRIPTION: An HTML comment block containing instructions for documentation authors to remove the comments and add remarks to the document.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-select-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Documentation Template\nDESCRIPTION: A template structure using HTML comments to outline where documentation remarks should be added. Includes instructions for removing comments and adding content.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/tool-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any general remarks for this command group below.\n\n### Remarks\n\nAdd content here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Proper Function in Power Platform\nDESCRIPTION: Converts text to title case (first letter of each word capitalized) in canvas apps, model-driven apps, and Dataverse functions\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-lower-upper-proper-applies-to.md#2025-04-20_snippet_2\n\nLANGUAGE: formula\nCODE:\n```\nProper(text)\n```\n\n----------------------------------------\n\nTITLE: Importing Data Using Power Platform CLI\nDESCRIPTION: Example showing how to use the 'pac data import' command in PowerShell to import data via the Power Platform CLI.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/data-import-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac data import\n```\n\n----------------------------------------\n\nTITLE: Including Outlook Short Reference in Markdown\nDESCRIPTION: This snippet includes a reference to a short form of Outlook using Markdown syntax within a sentence.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/turn-duplicate-detection-rules-off-whole-organization.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[pn_Outlook_short](../includes/pn-outlook-short.md)]\n```\n\n----------------------------------------\n\nTITLE: Define JSON schema for Power Platform Environment\nDESCRIPTION: This JSON schema defines the structure of the response received from the Power Platform API's List Environments endpoint, specifically when using the $expand parameter for capacity. It specifies the properties of each environment, including its ID, location, name, description, and capacity details. The schema is used to parse the API response into a structured object.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/programmability-tutorial-create-daily-capacity-report.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"properties\": {\n        \"value\": {\n            \"items\": {\n                \"properties\": {\n                    \"description\": {\n                        \"type\": \"string\"\n                    },\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"location\": {\n                        \"type\": \"string\"\n                    },\n                    \"name\": {\n                        \"type\": \"string\"\n                    },\n                    \"properties\": {\n                        \"properties\": {\n                            \"addons\": {\n                                \"type\": \"array\"\n                            },\n                            \"azureRegion\": {\n                                \"type\": \"string\"\n                            },\n                            \"capacity\": {\n                                \"items\": {\n                                    \"properties\": {\n                                        \"actualConsumption\": {\n                                            \"type\": \"number\"\n                                        },\n                                        \"capacityType\": {\n                                            \"type\": \"string\"\n                                        },\n                                        \"capacityUnit\": {\n                                            \"type\": \"string\"\n                                        },\n                                        \"ratedConsumption\": {\n                                            \"type\": \"number\"\n                                        },\n                                        \"updatedOn\": {\n                                            \"type\": \"string\"\n                                        }\n                                    },\n                                    \"required\": [\n                                        \"capacityType\",\n                                        \"actualConsumption\",\n                                        \"ratedConsumption\",\n                                        \"capacityUnit\",\n                                        \"updatedOn\"\n                                    ],\n                                    \"type\": \"object\"\n                                },\n                                \"type\": \"array\"\n                            },\n                            \"clientUris\": {\n                                \"properties\": {\n                                    \"admin\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"maker\": {\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"type\": \"object\"\n                            },\n                            \"cluster\": {\n                                \"properties\": {\n                                    \"category\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"number\": {\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"type\": \"object\"\n                            },\n                            \"connectedGroups\": {\n                                \"type\": \"array\"\n                            },\n                            \"createdBy\": {\n                                \"properties\": {\n                                    \"displayName\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"id\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"type\": {\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"type\": \"object\"\n                            },\n                            \"createdTime\": {\n                                \"type\": \"string\"\n                            },\n                            \"creationType\": {\n                                \"type\": \"string\"\n                            },\n                            \"databaseType\": {\n                                \"type\": \"string\"\n                            },\n                            \"displayName\": {\n                                \"type\": \"string\"\n                            },\n                            \"environmentSku\": {\n                                \"type\": \"string\"\n                            },\n                            \"isDefault\": {\n                                \"type\": \"boolean\"\n                            },\n                            \"linkedEnvironmentMetadata\": {\n                                \"properties\": {\n                                    \"backgroundOperationsState\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"baseLanguage\": {\n                                        \"type\": \"number\"\n                                    },\n                                    \"createdTime\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"domainName\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"friendlyName\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"instanceApiUrl\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"instanceState\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"instanceUrl\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"platformSku\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"resourceId\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"scaleGroup\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"uniqueName\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"version\": {\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"type\": \"object\"\n                            },\n                            \"protectionStatus\": {\n                                \"properties\": {\n                                    \"keyManagedBy\": {\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"type\": \"object\"\n                            },\n                            \"provisioningState\": {\n                                \"type\": \"string\"\n                            },\n                            \"retentionDetails\": {\n                                \"properties\": {\n                                    \"backupsAvailableFromDateTime\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"retentionPeriod\": {\n                                        \"type\": \"string\"\n                                    }\n                                },\n                                \"type\": \"object\"\n                            },\n                            \"retentionPeriod\": {\n                                \"type\": \"string\"\n                            },\n                            \"runtimeEndpoints\": {\n                                \"properties\": {\n                                    \"microsoft.ApiManagement\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"microsoft.BusinessAppPlatform\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"microsoft.CommonDataModel\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"microsoft.Flow\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"microsoft.PowerApps\": {\n                                        \"type\": \"string\"\n                                    },\n                                    \"microsoft.PowerAppsAdvisor\": {\n                                        \"type\": \"string\"\n                                    }\n\n```\n\n----------------------------------------\n\nTITLE: Entity Attribute Definition - traversedpath\nDESCRIPTION: Definition of traversedpath attribute specifying properties for storing process flow stage identifiers.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_certificationrequest.md#2025-04-20_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n|Property|Value|\n|---|---|\n|Description|**A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.**|\n|DisplayName|**Traversed Path**|\n|IsValidForForm|False|\n|IsValidForRead|True|\n|LogicalName|`traversedpath`|\n|RequiredLevel|None|\n|Type|String|\n|Format|Text|\n|FormatName|Text|\n|ImeMode|Auto|\n|IsLocalizable|False|\n|MaxLength|1250|\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing Organization from Weekly Digest Using PowerShell\nDESCRIPTION: PowerShell script that unsubscribes the entire organization from the Power Platform weekly digest. To resubscribe everyone, the disableAdminDigest value can be set to $False instead.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/managed-environment-usage-insights.md#2025-04-20_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$tenantSettings = Get-TenantSettings  \n$tenantSettings.powerPlatform.governance.disableAdminDigest = $True  \nSet-TenantSettings -RequestBody $tenantSettings\n```\n\n----------------------------------------\n\nTITLE: Lower Function in Power Platform\nDESCRIPTION: Converts text to lowercase across various Power Platform components including canvas apps, cards, and Dataverse functions\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-lower-upper-proper-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: formula\nCODE:\n```\nLower(text)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Project \"Sophia\"\nDESCRIPTION: Instructions for uploading files to Project \"Sophia\" and generating insights.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/ps-docs/data-connections.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. If you're uploading a file, select the file name and then select **Open**.\n2. Select **Generate** or enter your question in the text box and then select **Generate**.\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalName for mspcat_originatingpublisheridentity Field\nDESCRIPTION: Defines the logical name for the Originating Publisher Identity field, which is a lookup to the mspcat_publisheridentity entity.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_publisheridentity.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nLogicalName|`mspcat_originatingpublisheridentity`\n```\n\n----------------------------------------\n\nTITLE: Accessing Employee Picture with Named Record in Power FX\nDESCRIPTION: Shows how to access the Picture property of an employee record that has been named using the As operator in a gallery control.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/operators.md#2025-04-20_snippet_22\n\nLANGUAGE: power-fx\nCODE:\n```\nEmployee.Picture\n```\n\n----------------------------------------\n\nTITLE: Instance Type Code Options Definition\nDESCRIPTION: Definition of the picklist options for the Instance Type Code field that specifies recurring activity types.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/catalog/tables/mspcat_installactivity.md#2025-04-20_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n|Value|Label|\n|---|---|\n|0|**Not Recurring**|\n|1|**Recurring Master**|\n|2|**Recurring Instance**|\n|3|**Recurring Exception**|\n|4|**Recurring Future Exception**|\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Indicator\nDESCRIPTION: Markdown syntax for displaying an applicability indicator with a yes icon image\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-send-app-notification-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Applies to:** :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: \n```\n\n----------------------------------------\n\nTITLE: Including footer banner in Power Platform documentation\nDESCRIPTION: This is a reference to an included footer banner for Power Platform documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/create-templates-articles.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[!INCLUDE[footer-include](../includes/footer-banner.md)]\n```\n\n----------------------------------------\n\nTITLE: Feature Availability Indicator in Markdown\nDESCRIPTION: Markdown syntax showing feature availability indicators for Canvas and Model-driven apps using custom image icons.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/function-reset-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Applies to:** :::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Canvas apps:::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\"::: Model-driven apps\n```\n\n----------------------------------------\n\nTITLE: Message Names Filter Example\nDESCRIPTION: Shows how to filter specific messages using semicolon-separated names with wildcard support.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/modelbuilder.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npac modelbuilder build --messagenamesfilter \"<messagename>;<messagename>\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Icon Image in Markdown for Canvas Apps Documentation\nDESCRIPTION: This code snippet demonstrates how to insert an icon image in markdown format for Microsoft Power Platform documentation. It specifically applies to canvas apps and uses the 'yes-icon.svg' image file.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/power-fx/reference/includes/object-host-applies-to.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::image type=\"icon\" source=\"../media/yes-icon.svg\" border=\"false\":::\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Microsoft Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for removing comments and adding appropriate remarks in a documentation file. It serves as a template for contributors to fill in with relevant information.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/solution-upgrade-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: PowerShell Cmdlets for Power Apps\nDESCRIPTION: This section highlights the use of PowerShell cmdlets for automating management and monitoring tasks within Power Apps. It emphasizes that these cmdlets provide a programmatic interface for administrative actions, often preceding UI-based features in the admin center.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/guidance/adoption/resource-usage.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"[PowerShell cmdlets](../../admin/powerapps-powershell.md#power-apps-cmdlets-for-app-creators)\"\n```\n\n----------------------------------------\n\nTITLE: Identifying Personal Power Automate License\nDESCRIPTION: Step-by-step process for users to check their current Power Automate license and subscription details\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/power-automate-licensing/buy-licenses.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. Sign in to [Power Automate](https://powerautomate.com/)\n2. Select profile picture in top right corner\n3. Select \"View account\"\n4. Select \"View\" on \"Subscriptions\" tile\n5. Search for \"Power Automate\" under \"Licenses\" section\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Instructions Template\nDESCRIPTION: Basic HTML comment block containing instructions to remove comments and add command group content\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connection-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add any content needed to introduce this command group\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Glympse Overview Documentation\nDESCRIPTION: Initial documentation page describing Glympse integration capabilities and purpose within Power Platform ecosystem\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/tn-glympse.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Glympse\n```\n\n----------------------------------------\n\nTITLE: Importing Power Apps Component Framework Project to Dataverse\nDESCRIPTION: The 'pac pcf push' command imports a Power Apps component framework project into the current Dataverse organization. It includes optional parameters for specifying the target environment, incremental updates, interactivity, publisher prefix, and solution name.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/pcf.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## pac pcf push\n\nImport the Power Apps component framework project into the current Dataverse organization\n\n### Optional Parameters for pcf push\n\n#### `--environment` `-env`\n\nSpecifies the target Dataverse. The value may be a Guid or absolute https URL. When not specified, the active organization selected for the current auth profile will be used.\n\n#### `--incremental` `-inc`\n\nPushes only files which are different using entity updates.\n\nThis parameter requires no value. It's a switch.\n\n#### `--interactive` `-i`\n\nIndicates that actions in the build are allowed to interact with the user. Don't use this argument in an automated scenario where interactivity is not expected.\n\nThis parameter requires no value. It's a switch.\n\n#### `--publisher-prefix` `-pp`\n\nCustomization prefix value for the Dataverse solution publisher\n\n**Note**: The prefix must be 2 to 8 characters long, can only consist of alpha-numerics, must start with a letter, and can't start with 'mscrm'.\n\n#### `--solution-unique-name`\n\nThe unique name of the solution to add the component to.\n\n#### `--verbosity` `-v`\n\nVerbosity level for MSBuild when building the temporary solution wrapper.\n\nUse one of these values:\n\n- `minimal`\n- `normal`\n- `detailed`\n- `diagnostic`\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Comment Structure in HTML\nDESCRIPTION: HTML comment block providing instructions for documentation remarks placement and structure.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/connector-init-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Environment Licensing Consumption Table Structure\nDESCRIPTION: HTML table showing example consumption of per app licenses across different environments and users, demonstrating how multiple apps and portals affect license count.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/about-powerapps-perapp.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n<thead>\n  <tr>\n    <th></th>\n    <th colspan=\"3\">Environment 1</th>\n    <th colspan=\"3\">Environment 2</th>\n    <th>Per app licenses consumed</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>User 1</td>\n    <td>App A</td>\n    <td>App B</td>\n    <td>Portal 1</td>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td>3</td>\n  </tr>\n  <tr>\n    <td>User 2</td>\n    <td>App A</td>\n    <td>App B</td>\n    <td></td>\n    <td>App C</td>\n    <td>App D</td>\n    <td>Portal 2</td>\n    <td>5</td>\n  </tr>\n  <tr>\n    <td>User 3</td>\n    <td>App A</td>\n    <td></td>\n    <td></td>\n    <td>App C</td>\n    <td></td>\n    <td></td>\n    <td>2</td>\n  </tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Restoring Power Platform Environment using YAML Pipeline\nDESCRIPTION: YAML configuration for restoring a Power Platform environment from a backup. Includes authentication setup, target environment specification, and backup timestamp configuration.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/devops-build-tool-tasks.md#2025-04-20_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- task: microsoft-IsvExpTools.PowerPlatform-BuildTools.restore-environment.PowerPlatformRestoreEnvironment@2\n  displayName: 'Power Platform Restore Environment '\n  inputs:\n    PowerPlatformEnvironment: 'My service connection'\n    authenticationType: PowerPlatformSPN\n    PowerPlatformSPN: Build\n    TargetEnvironmentUrl: 'https://contoso-test.crm.dynamics.com'\n    RestoreLatestBackup: false\n    RestoreTimeStamp: '12/01/2022 09:00'\n    FriendlyName: 'Contoso Test'\n```\n\n----------------------------------------\n\nTITLE: Cross-Geo Solution Deployment Prerequisites Verification\nDESCRIPTION: Describes the key requirements for enabling cross-geo solution deployments in Power Platform, including administrative roles, environment configurations, and access privileges\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/alm/enable-cross-geo-solution-deployments.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- You must be a **System Administrator** or a **Deployment Pipeline Administrator** to access the Deployment Pipeline Configuration app _and_ have **Write** privileges on the **Organization Setting (organizationsetting)** table in the host environment to enable this setting.\n- All environments used in pipelines must have a Microsoft Dataverse database.\n- All target environments used in a pipeline must be enabled as [Managed Environments](../admin/managed-environment-overview.md).\n```\n\n----------------------------------------\n\nTITLE: Starting Power Fx REPL in PowerShell\nDESCRIPTION: Command to initialize and start the Power Fx REPL interface using Power Platform CLI.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/power-fx-repl-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npac power-fx repl\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template Structure\nDESCRIPTION: A basic HTML comment block containing instructions for documentation remarks section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/admin-set-backup-retention-period-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Querying Email Correlation Method using Web API in Dynamics 365\nDESCRIPTION: This code snippet demonstrates how to construct a URL to query the correlation method of an email using the Dynamics 365 Web API. It includes placeholders for the Dynamics 365 URL and email ID.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/admin/email-message-filtering-correlation.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://YourDynamics365URL/api/data/v9.2/emails(IDofEmail)?$select=subject,correlationmethod\n```\n\n----------------------------------------\n\nTITLE: Updating Power Platform Environment Settings\nDESCRIPTION: CLI command to modify environment settings for a Power Platform organization, enabling configuration changes through the command line interface\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/env-update-settings-remarks.md#2025-04-20_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\npac env update-settings\n```\n\n----------------------------------------\n\nTITLE: Extracting Template from Copilot Environment PowerShell\nDESCRIPTION: This PowerShell script extracts a template file from a specified copilot environment using the 'pac copilot extract-template' command. It requires parameters such as the environment ID, bot ID, and a template file name. The script outputs information about the copilot's components, including the primary language, supported languages, and the file path of the newly created template. Ensure the Power Platform CLI is installed and configured before running the command.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/copilot-extract-template-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\npac copilot extract-template `\n   --environment 2e250e7a-5607-4fea-aa4e-1aeb7bf79118 `\n   --bot 9ee3f7aa-ab79-4cf6-a726-d85c8c18cc3e `\n   --templateFileName NewTestCopilot.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Remarks to Microsoft Docs Power Platform Documentation\nDESCRIPTION: This HTML comment block provides instructions for adding remarks to documentation in the Microsoft Docs Power Platform project. It instructs users to remove the comments and add appropriate remarks in the designated section.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/developer/cli/reference/includes/application-list-remarks.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- \nInstructions: Remove comments and this line. Add appropriate remarks below\n\n### Remarks\n\nAdd remarks here...\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Link to Microsoft Azure Trust Center\nDESCRIPTION: A simple markdown hyperlink that directs users to the Microsoft Azure Trust Center website. This is used for referencing the Trust Center in documentation.\nSOURCE: https://github.com/microsoftdocs/power-platform/blob/main/power-platform/includes/cc_privacy_note_azure_trust_center.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Microsoft Azure Trust Center](https://azure.microsoft.com/support/trust-center/)\n```"
  }
]