[
  {
    "owner": "casbin",
    "repo": "casbin-website-v2",
    "content": "TITLE: Loading RBAC Model Configuration in Casbin\nDESCRIPTION: This configuration defines a RBAC model for Casbin with request definitions, policy definitions, role definitions, policy effect rules, and matchers for access control.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Basic Enforcement in Casbin with Go\nDESCRIPTION: This Go code demonstrates how to load a Casbin enforcer from configuration files and use it to check whether a user has permission to perform an action on a resource.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Load information from files.\nenforcer, err := casbin.NewEnforcer(\"./example/model.conf\", \"./example/policy.csv\")\nif err != nil {\n    log.Fatalf(\"Error, detail: %s\", err)\n}\nok, err := enforcer.Enforce(\"alice\", \"data1\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin Packages\nDESCRIPTION: Commands for installing Casbin using various package managers across different programming languages including npm, pip, composer, and others.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/casbin/casbin/v2\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.casbin</groupId>\n    <artifactId>jcasbin</artifactId>\n    <version>1.x.y</version>\n</dependency>\n```\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install casbin --save\n\n# Yarn\nyarn add casbin\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require casbin/casbin\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install casbin\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Casbin.NET\n```\n\nLANGUAGE: bash\nCODE:\n```\nluarocks install casbin\n```\n\n----------------------------------------\n\nTITLE: Managing Permissions in Casbin\nDESCRIPTION: Collection of functions for managing permissions including adding, deleting, and retrieving permissions for users and roles.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ne.DeletePermission(\"read\")\ne.AddPermissionForUser(\"bob\", \"read\")\n\nvar permissions = [][]string{{\"data1\", \"read\"},{\"data2\",\"write\"}}\nfor i := 0; i < len(permissions); i++ {\n    e.AddPermissionsForUser(\"alice\", permissions[i])\n}\n\ne.DeletePermissionForUser(\"bob\", \"read\")\ne.DeletePermissionsForUser(\"bob\")\ne.GetPermissionsForUser(\"bob\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deletePermission('read')\nawait e.addPermissionForUser('bob', 'read')\n\nconst permissions = [\n    [\"data1\", \"read\"],\n    [\"data2\", \"write\"],\n];\n\npermissions.map((permission) => e.addPermissionForUser(\"bob\", ...permission));\n\nawait e.deletePermissionForUser(\"bob\", \"read\")\nawait e.deletePermissionsForUser('bob')\nawait e.getPermissionsForUser('bob')\n```\n\n----------------------------------------\n\nTITLE: Using EnforceEx API in Casbin\nDESCRIPTION: This code demonstrates the EnforceEx function which not only checks permission but also returns the specific policy that allowed the access, providing greater transparency in access control decisions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nok, reason, err := enforcer.EnforceEx(\"amber\", \"data1\", \"read\")\nfmt.Println(ok, reason) // true [admin data1 read]\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter\nDESCRIPTION: Examples of creating a new Casbin enforcer instance using the built-in FileAdapter with model.conf and policy.csv files across different programming languages.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/casbin/casbin/v2\"\n\ne, err := casbin.NewEnforcer(\"path/to/model.conf\", \"path/to/policy.csv\")\n```\n\nLANGUAGE: java\nCODE:\n```\nimport org.casbin.jcasbin.main.Enforcer;\n\nEnforcer e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { newEnforcer } from 'casbin';\n\nconst e = await newEnforcer('path/to/model.conf', 'path/to/policy.csv');\n```\n\nLANGUAGE: php\nCODE:\n```\nrequire_once './vendor/autoload.php';\n\nuse Casbin\\Enforcer;\n\n$e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\nLANGUAGE: python\nCODE:\n```\nimport casbin\n\ne = casbin.Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in Go\nDESCRIPTION: This snippet shows how to check if a user (subject) has permission to perform an action on a resource in Go. It demonstrates both individual permission checks with Enforce() and batch checks with BatchEnforce().\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nsub := \"alice\" // the user that wants to access a resource.\nobj := \"data1\" // the resource that is going to be accessed.\nact := \"read\" // the operation that the user performs on the resource.\n\nok, err := e.Enforce(sub, obj, act)\n\nif err != nil {\n    // handle err\n}\n\nif ok == true {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n\n// You could use BatchEnforce() to enforce some requests in batches.\n// This method returns a bool slice, and this slice's index corresponds to the row index of the two-dimensional array.\n// e.g. results[0] is the result of {\"alice\", \"data1\", \"read\"}\nresults, err := e.BatchEnforce([][]interface{}{{\"alice\", \"data1\", \"read\"}, {\"bob\", \"data2\", \"write\"}, {\"jack\", \"data3\", \"read\"}})\n```\n\n----------------------------------------\n\nTITLE: Adding Role Inheritance Rule with AddGroupingPolicy\nDESCRIPTION: Demonstrates how to add a role inheritance rule to the current policy using the AddGroupingPolicy function. The function returns true if the rule is added successfully, false if it already exists.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_52\n\nLANGUAGE: Go\nCODE:\n```\nadded := e.AddGroupingPolicy(\"group1\", \"data2_admin\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst added = await e.addGroupingPolicy('group1', 'data2_admin')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$added = $e->addGroupingPolicy(\"group1\", \"data2_admin\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nadded = e.add_grouping_policy(\"group1\", \"data2_admin\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar added = e.AddGroupingPolicy(\"group1\", \"data2_admin\");\nor\nvar added = await e.AddGroupingPolicyAsync(\"group1\", \"data2_admin\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet added = e.add_grouping_policy(vec![\"group1\".to_owned(), \"data2_admin\".to_owned()]).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean added = e.addGroupingPolicy(\"group1\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Managing Policies in Casbin\nDESCRIPTION: This code demonstrates how to add, remove, and update policies in Casbin at runtime. It also shows how to verify these changes using the HasPolicy function to confirm the presence or absence of specific policies.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// load information from files\nenforcer, err := casbin.NewEnforcer(\"./example/model.conf\", \"./example/policy.csv\")\nif err != nil {\n    fmt.Printf(\"Error, details: %s\\n\", err)\n}\n\n// add a policy and use HasPolicy() to confirm\nenforcer.AddPolicy(\"added_user\", \"data1\", \"read\")\nhasPolicy := enforcer.HasPolicy(\"added_user\", \"data1\", \"read\")\nfmt.Println(hasPolicy) // true, the policy was added successfully\n\n// remove a policy and use HasPolicy() to confirm\nenforcer.RemovePolicy(\"alice\", \"data1\", \"read\")\nhasPolicy = enforcer.HasPolicy(\"alice\", \"data1\", \"read\")\nfmt.Println(hasPolicy) // false, the policy was removed successfully\n\n// update a policy and use HasPolicy() to confirm\nenforcer.UpdatePolicy([]string{\"added_user\", \"data1\", \"read\"}, []string{\"added_user\", \"data1\", \"write\"})\nhasPolicy = enforcer.HasPolicy(\"added_user\", \"data1\", \"read\")\nfmt.Println(hasPolicy) // false, the original policy has expired\nhasPolicy = enforcer.HasPolicy(\"added_user\", \"data1\", \"write\")\nfmt.Println(hasPolicy) // true, the new policy is in effect\n```\n\n----------------------------------------\n\nTITLE: Loading RBAC Model from .CONF File Format Example\nDESCRIPTION: Example of a standard RBAC model configuration in Casbin's .CONF file format, defining request structure, policy format, role relationships, policy effect, and matchers for access control.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ModelStorage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Implementing RBAC Model in Casbin TOML Configuration\nDESCRIPTION: A Role-Based Access Control (RBAC) model definition in Casbin that includes role definition with two graph relations and a matcher that verifies role-based permissions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/UnderstandingCasbinMatchingInDetail.mdx#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[request_definition]\nr = sub, act, obj\n\n[policy_definition]\np = sub, act, obj\n\n[role_definition]\ng = _, _\ng2 = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && g(p.act, r.act) && r.obj == p.obj\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with Custom Adapter\nDESCRIPTION: Examples of creating a Casbin enforcer using a custom adapter (like database adapter) and model configuration string instead of files.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"log\"\n\n    \"github.com/casbin/casbin/v2\"\n    \"github.com/casbin/casbin/v2/model\"\n    xormadapter \"github.com/casbin/xorm-adapter/v2\"\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\n// Initialize a Xorm adapter with MySQL database.\na, err := xormadapter.NewAdapter(\"mysql\", \"mysql_username:mysql_password@tcp(127.0.0.1:3306)/\")\nif err != nil {\n    log.Fatalf(\"error: adapter: %s\", err)\n}\n\nm, err := model.NewModelFromString(`\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n`)\nif err != nil {\n    log.Fatalf(\"error: model: %s\", err)\n}\n\ne, err := casbin.NewEnforcer(m, a)\nif err != nil {\n    log.Fatalf(\"error: enforcer: %s\", err)\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport casbin\nimport casbin_sqlalchemy_adapter\n\n\n# Use SQLAlchemy Casbin adapter with SQLLite DB\nadapter = casbin_sqlalchemy_adapter.Adapter('sqlite:///test.db')\n\n# Create a config model policy\nwith open(\"rbac_example_model.conf\", \"w\") as f:\n    f.write(\"\"\"\n    [request_definition]\n    r = sub, obj, act\n\n    [policy_definition]\n    p = sub, obj, act\n\n    [policy_effect]\n    e = some(where (p.eft == allow))\n\n    [matchers]\n    m = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n    \"\"\")\n\n# Create enforcer from adapter and config policy\ne = casbin.Enforcer('rbac_example_model.conf', adapter)\n```\n\n----------------------------------------\n\nTITLE: Defining User-Role Mapping in Casbin Policy\nDESCRIPTION: This CSV example demonstrates how to store the actual user-role mapping in Casbin policy. It shows a permission rule for 'data2_admin' and assigns 'alice' to that role using the 'g' relation.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBAC.mdx#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, data2_admin, data2, read\ng, alice, data2_admin\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in C++\nDESCRIPTION: This snippet demonstrates how to check if a user has permission to perform actions on resources using Casbin in C++. It initializes an enforcer with model and policy files, then performs multiple authorization checks with different parameters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n    casbin::Enforcer e(\"../assets/model.conf\", \"../assets/policy.csv\");\n\n    if (e.Enforce({\"alice\", \"/alice_data/hello\", \"GET\"})) {\n        std::cout << \"Enforce OK\" << std::endl;\n    } else {\n        std::cout << \"Enforce NOT Good\" << std::endl;\n    }\n\n    if (e.Enforce({\"alice\", \"/alice_data/hello\", \"POST\"})) {\n        std::cout << \"Enforce OK\" << std::endl;\n    } else {\n        std::cout << \"Enforce NOT Good\" << std::endl;\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with RBAC Domains\nDESCRIPTION: Creates a new Enforcer instance by loading RBAC with domains model and policy files. This is the first step needed before using any of the domain-specific API methods.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne, err := NewEnforcer(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = await newEnforcer('examples/rbac_with_domains_model.conf', 'examples/rbac_with_domains_policy.csv')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e = new Enforcer('examples/rbac_with_domains_model.conf', 'examples/rbac_with_domains_policy.csv');\n```\n\nLANGUAGE: python\nCODE:\n```\ne = casbin.Enforcer(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar e = new Enforcer(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet mut e = Enforcer::new(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nEnforcer e = new Enforcer(\"examples/rbac_with_domains_model.conf\", \"examples/rbac_with_domains_policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Go\nDESCRIPTION: This Go code snippet shows how to initialize a Casbin enforcer using the built-in file adapter, loading model from a configuration file and policies from a CSV file.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/casbin/casbin\"\n\ne := casbin.NewEnforcer(\"examples/basic_model.conf\", \"examples/basic_policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer in Multiple Languages\nDESCRIPTION: Creates a new Casbin Enforcer instance by loading the RBAC model and policy files. This is a prerequisite for using any of the RBAC API functions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne, err := NewEnforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n```\n\nLANGUAGE: python\nCODE:\n```\ne = casbin.Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet mut e = Enforcer::new(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nEnforcer e = new Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Sample RBAC Policy and Role Definitions in Casbin CSV Format\nDESCRIPTION: Example CSV policy definitions for RBAC model that assigns roles to users and maps roles to permissions, demonstrating how roles can contain multiple actions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/UnderstandingCasbinMatchingInDetail.mdx#2025-04-21_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\np, alice, reader, data1\np, bob, owner, data2\n\ng, reader, read\ng, owner, read\ng, owner, write\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in Casbin\nDESCRIPTION: HasPermissionForUser determines whether a user has a specific permission. The function takes a user identifier and permission as parameters and returns a boolean indicating if the permission is granted.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\ne.HasPermissionForUser(\"alice\", []string{\"read\"})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait e.hasPermissionForUser('alice', 'read')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$e->hasPermissionForUser(\"alice\", []string{\"read\"});\n```\n\nLANGUAGE: Python\nCODE:\n```\nhas = e.has_permission_for_user(\"alice\", \"read\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar has = e.HasPermissionForUser(\"bob\", \"read\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet has = e.has_permission_for_user(\"alice\", vec![\"data1\".to_owned(), \"read\".to_owned()]);\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean has = e.hasPermissionForUser(\"alice\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Using GetFilteredPolicy in Go\nDESCRIPTION: Examples of using GetFilteredPolicy with different field indices and values to filter policy rules.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ne.GetFilteredPolicy(1, \"book\") // will return: [[alice book read] [bob book read] [bob book write]]\n\ne.GetFilteredPolicy(1, \"book\", \"read\") // will return: [[alice book read] [bob book read]]\n\ne.GetFilteredPolicy(0, \"alice\", \"\", \"read\") // will return: [[alice book read]]\n\ne.GetFilteredPolicy(0, \"alice\") // will return: [[alice book read] [alice pen get]]\n```\n\n----------------------------------------\n\nTITLE: Basic RBAC Policy Definition in CSV\nDESCRIPTION: Example of a basic RBAC policy definition in CSV format showing permissions and role assignments. Demonstrates policy rules with 'p' (permission) and 'g' (role inheritance) types.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PolicyStorage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\np, alice, data1, read\np, bob, data2, write\np, data2_admin, data2, read\np, data2_admin, data2, write\ng, alice, data2_admin\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Authorization Model in Casbin\nDESCRIPTION: Casbin model configuration in ini format that defines a RBAC authorization model with support for wildcards and path matching. It specifies request definitions, policy definitions, role definitions, policy effects, and matchers.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)\n```\n\n----------------------------------------\n\nTITLE: Configuring Super Admin in Casbin Model\nDESCRIPTION: Defines a Casbin model configuration that implements Super Admin functionality using request definitions, policy definitions, policy effects, and matchers. The matcher includes a special condition to grant full access when the subject is 'root'.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SuperAdmin.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act || r.sub == \"root\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom KeyMatch Function in Go\nDESCRIPTION: Implementation of a custom KeyMatch function that checks if a key matches a pattern with wildcard support. This function is used for URL path matching in Casbin rules.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Function.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc KeyMatch(key1 string, key2 string) bool {\n    i := strings.Index(key2, \"*\")\n    if i == -1 {\n        return key1 == key2\n    }\n\n    if len(key1) > i {\n        return key1[:i] == key2[:i]\n    }\n    return key1 == key2[:i]\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Policies in Casbin\nDESCRIPTION: This code demonstrates how to update multiple policies at once using the UpdatePolicies function. It allows for efficient batch modifications of access control rules.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nenforcer.UpdatePolicies([][]string{{\"eve\", \"data3\", \"read\"}, {\"jack\", \"data3\", \"read\"}}, [][]string{{\"eve\", \"data3\", \"write\"}, {\"jack\", \"data3\", \"write\"}})\n```\n\n----------------------------------------\n\nTITLE: Loading Casbin Model and Policies for RBAC\nDESCRIPTION: This snippet demonstrates how to initialize a Casbin Enforcer by loading model and policy files, which is a prerequisite for using Casbin's RBAC APIs.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nenforcer, err := casbin.NewEnforcer(\"./example/model.conf\", \"./example/policy.csv\")\nif err != nil {\n    fmt.Printf(\"Error, details: %s\\n\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Roles with Domain Support in Casbin\nDESCRIPTION: This snippet shows how to define RBAC roles with domain/tenant support in Casbin. The third underscore represents the domain/tenant name.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomains.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[role_definition]\ng = _, _, _\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Model Dynamically from Go Code\nDESCRIPTION: Example showing how to create a Casbin RBAC model programmatically in Go code without using a .CONF file. This approach allows for dynamic model construction at runtime.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ModelStorage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/casbin/casbin/v2\"\n    \"github.com/casbin/casbin/v2/model\"\n    \"github.com/casbin/casbin/v2/persist/file-adapter\"\n)\n\n// Initialize the model from Go code.\nm := model.NewModel()\nm.AddDef(\"r\", \"r\", \"sub, obj, act\")\nm.AddDef(\"p\", \"p\", \"sub, obj, act\")\nm.AddDef(\"g\", \"g\", \"_, _\")\nm.AddDef(\"e\", \"e\", \"some(where (p.eft == allow))\")\nm.AddDef(\"m\", \"m\", \"g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\")\n\n// Load the policy rules from the .CSV file adapter.\n// Replace it with your adapter to avoid using files.\na := fileadapter.NewAdapter(\"examples/rbac_policy.csv\")\n\n// Create the enforcer.\ne := casbin.NewEnforcer(m, a)\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control Policies in CSV Format\nDESCRIPTION: This CSV file defines policies for the Casbin model, including permissions for different users and roles. It specifies who can read or write to different data objects and establishes role relationships.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, admin, data1, read\np, admin, data1, write\np, admin, data2, read\np, admin, data2, write\np, alice, data1, read\np, bob, data2, write\ng, amber, admin\ng, abc, admin\n```\n\n----------------------------------------\n\nTITLE: Getting Roles for a User with GetRolesForUser()\nDESCRIPTION: Retrieves all roles assigned to a specific user. The function returns a list of role names that the specified user has been assigned.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetRolesForUser(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await e.getRolesForUser('alice')\n```\n\nLANGUAGE: php\nCODE:\n```\n$res = $e->getRolesForUser(\"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\nroles = e.get_roles_for_user(\"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar res = e.GetRolesForUser(\"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet roles = e.get_roles_for_user(\"alice\", None); // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nList<String> res = e.getRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Enforcer Initialization Across Languages\nDESCRIPTION: Examples of initializing the Casbin Enforcer in different programming languages using RBAC model and policy files.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ne, err := NewEnforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = await newEnforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e = new Enforcer('examples/rbac_model.conf', 'examples/rbac_policy.csv');\n```\n\nLANGUAGE: python\nCODE:\n```\ne = casbin.Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar e = new Enforcer(\"path/to/model.conf\", \"path/to/policy.csv\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet mut e = Enforce::new(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nEnforcer e = new Enforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\");\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in .NET\nDESCRIPTION: This snippet shows how to check if a user has permission to perform an action on a resource using Casbin in .NET. It uses the asynchronous EnforceAsync method that returns a Task<bool>.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar sub = \"alice\";  # the user that wants to access a resource.\nvar obj = \"data1\";  # the resource that is going to be accessed.\nvar act = \"read\";  # the operation that the user performs on the resource.\n\nif (await e.EnforceAsync(sub, obj, act)) \n{\n    // permit alice to read data1\n}\nelse\n{\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling ABAC with eval() Function in Model Configuration\nDESCRIPTION: Advanced ABAC model configuration using eval() to support complex rule evaluation. This approach allows defining ABAC rules in policies rather than hard-coding them in the model.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ABAC.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub_rule, obj, act\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = eval(p.sub_rule) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Checking Policy Existence in Casbin\nDESCRIPTION: HasPolicy determines whether a specific authorization rule exists in the current policy. The function returns a boolean value indicating whether the rule is found.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nhasPolicy := e.HasPolicy(\"data2_admin\", \"data2\", \"read\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst hasPolicy = await e.hasPolicy('data2_admin', 'data2', 'read')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$hasPolicy = $e->hasPolicy('data2_admin', 'data2', 'read');\n```\n\nLANGUAGE: Python\nCODE:\n```\nhas_policy = e.has_policy(\"data2_admin\", \"data2\", \"read\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar hasPolicy = e.HasPolicy(\"data2_admin\", \"data2\", \"read\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet has_policy = e.has_policy(vec![\"data2_admin\".to_owned(), \"data2\".to_owned(), \"read\".to_owned()]);\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean hasPolicy = e.hasPolicy(\"data2_admin\", \"data2\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in Python\nDESCRIPTION: This snippet demonstrates how to check if a user has permission to perform an action on a resource using Casbin in Python. The enforce method returns a boolean that can be used directly in conditional statements.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nsub = \"alice\"  # the user that wants to access a resource.\nobj = \"data1\"  # the resource that is going to be accessed.\nact = \"read\"  # the operation that the user performs on the resource.\n\nif e.enforce(sub, obj, act):\n    # permit alice to read data1\n    pass\nelse:\n    # deny the request, show an error\n    pass\n```\n\n----------------------------------------\n\nTITLE: Enforcing ABAC Rules with JSON Parameters in Go\nDESCRIPTION: Example of using JSON format to pass object attributes to the Casbin enforcer. This demonstrates how to enable JSON request processing and perform ABAC enforcement.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ABAC.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ne, _ := NewEnforcer(\"examples/abac_model.conf\")\ne.EnableAcceptJsonRequest(true)\n\ndata1Json := `{ \"Name\": \"data1\", \"Owner\": \"bob\"}`\n\nok, _ := e.Enforce(\"alice\", data1Json, \"read\")\n```\n\n----------------------------------------\n\nTITLE: Querying Roles and Users with Casbin RBAC API\nDESCRIPTION: This code shows how to query roles for a user and users for a role using Casbin's RBAC API. GetRolesForUser returns all roles assigned to a user, while GetUsersForRole returns all users belonging to a role.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nroles, err := enforcer.GetRolesForUser(\"amber\")\nfmt.Println(roles) // [admin]\nusers, err := enforcer.GetUsersForRole(\"admin\")\nfmt.Println(users) // [amber abc]\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Role Manager with Domains in Casbin (Go)\nDESCRIPTION: Demonstrates how to add conditional functions for role policies with domain support and enforce them in Casbin. It includes examples of adding named domain link condition functions and enforcing policies with various conditions and domains.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ne.AddNamedDomainLinkConditionFunc(\"g\", \"alice\", \"data2_admin\", \"domain2\", util.TimeMatchFunc)\ne.AddNamedDomainLinkConditionFunc(\"g\", \"alice\", \"data3_admin\", \"domain3\", util.TimeMatchFunc)\ne.AddNamedDomainLinkConditionFunc(\"g\", \"alice\", \"data4_admin\", \"domain4\", util.TimeMatchFunc)\ne.AddNamedDomainLinkConditionFunc(\"g\", \"alice\", \"data5_admin\", \"domain5\", util.TimeMatchFunc)\ne.AddNamedDomainLinkConditionFunc(\"g\", \"alice\", \"data6_admin\", \"domain6\", util.TimeMatchFunc)\ne.AddNamedDomainLinkConditionFunc(\"g\", \"alice\", \"data7_admin\", \"domain7\", util.TimeMatchFunc)\ne.AddNamedDomainLinkConditionFunc(\"g\", \"alice\", \"data8_admin\", \"domain8\", util.TimeMatchFunc)\n\n\ne.enforce(\"alice\", \"domain1\", \"data1\", \"read\")              // except: true\ne.enforce(\"alice\", \"domain2\", \"data2\", \"write\")             // except: false\ne.enforce(\"alice\", \"domain3\", \"data3\", \"read\")              // except: true\ne.enforce(\"alice\", \"domain4\", \"data4\", \"write\")             // except: true\ne.enforce(\"alice\", \"domain5\", \"data5\", \"read\")              // except: true\ne.enforce(\"alice\", \"domain6\", \"data6\", \"write\")             // except: false\ne.enforce(\"alice\", \"domain7\", \"data7\", \"read\")              // except: true\ne.enforce(\"alice\", \"domain8\", \"data8\", \"write\")             // except: false\ne.enforce(\"alice\", \"domain_not_exist\", \"data1\", \"write\")    // except: false\ne.enforce(\"alice\", \"domain_not_exist\", \"data2\", \"read\")     // except: false\ne.enforce(\"alice\", \"domain_not_exist\", \"data3\", \"write\")    // except: false\ne.enforce(\"alice\", \"domain_not_exist\", \"data4\", \"read\")     // except: false\ne.enforce(\"alice\", \"domain_not_exist\", \"data5\", \"write\")    // except: false\ne.enforce(\"alice\", \"domain_not_exist\", \"data6\", \"read\")     // except: false\ne.enforce(\"alice\", \"domain_not_exist\", \"data7\", \"write\")    // except: false\ne.enforce(\"alice\", \"domain_not_exist\", \"data8\", \"read\")     // except: false\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in Node.js\nDESCRIPTION: This snippet demonstrates how to check if a user has permission to perform an action on a resource using Casbin in Node.js. The enforce method is asynchronous and returns a Promise that resolves to a boolean.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst sub = 'alice'; // the user that wants to access a resource.\nconst obj = 'data1'; // the resource that is going to be accessed.\nconst act = 'read'; // the operation that the user performs on the resource.\n\nif ((await e.enforce(sub, obj, act)) === true) {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Named Policy Rules in Node.js\nDESCRIPTION: Adds multiple authorization rules to a named policy in an atomic operation using Node.js. Returns a boolean indicating if all rules were added successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addNamedPolicies('p', rules);\n```\n\n----------------------------------------\n\nTITLE: Getting User Roles with Casbin in Java\nDESCRIPTION: This snippet shows how to retrieve all roles assigned to a user at runtime using Casbin's RBAC API in Java. The getRolesForUser method returns a List of strings containing the role names.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nList<String> roles = e.getRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Adding Named Matching Function in Go\nDESCRIPTION: Go implementation for adding a named matching function to the Casbin enforcer. This registers the KeyMatch2 function for pattern matching in role assignments.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithPattern.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ne.AddNamedMatchingFunc(\"g\", \"KeyMatch2\", util.KeyMatch2)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in Rust\nDESCRIPTION: This snippet demonstrates how to check if a user has permission to perform an action on a resource using Casbin in Rust. It uses an asynchronous enforce method that returns a Result type, requiring error handling.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_11\n\nLANGUAGE: Rust\nCODE:\n```\n  let sub = \"alice\"; // the user that wants to access a resource.\n  let obj = \"data1\"; // the resource that is going to be accessed.\n  let act = \"read\"; // the operation that the user performs on the resource.\n\n  if e.enforce((sub, obj, act)).await? {\n      // permit alice to read data1\n  } else {\n      // error occurs\n  }\n```\n\n----------------------------------------\n\nTITLE: Checking User Role with HasRoleForUser()\nDESCRIPTION: Determines whether a user has been assigned a specific role. Returns a boolean value indicating if the user has the role or not.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nres := e.HasRoleForUser(\"alice\", \"data1_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await e.hasRoleForUser('alice', 'data1_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$res = $e->hasRoleForUser(\"alice\", \"data1_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nhas = e.has_role_for_user(\"alice\", \"data1_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar res = e.HasRoleForUser(\"alice\", \"data1_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet has = e.has_role_for_user(\"alice\", \"data1_admin\", None); // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean res = e.hasRoleForUser(\"alice\", \"data1_admin\");\n```\n\n----------------------------------------\n\nTITLE: Complete Explicit Priority Model Configuration in Casbin\nDESCRIPTION: Defines a full model configuration that incorporates explicit priority values in policy rules, using the priority policy effect and supporting role-based access control.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PriorityModel.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = priority, sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = priority(p.eft) || deny\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in Java\nDESCRIPTION: This snippet demonstrates how to check if a user has permission to perform an action on a resource using Casbin in Java. It sets up the subject, object, and action variables then uses the enforce method to make the authorization decision.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nString sub = \"alice\"; // the user that wants to access a resource.\nString obj = \"data1\"; // the resource that is going to be accessed.\nString act = \"read\"; // the operation that the user performs on the resource.\n\nif (e.enforce(sub, obj, act) == true) {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Checking in Casbin Matcher\nDESCRIPTION: This defines a matcher that checks if the subject in a request has the role defined in the policy, along with matching the object and action. The g() function verifies role inheritance relationships.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBAC.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Retrieving Implicit Users for Permission\nDESCRIPTION: GetImplicitUsersForPermission returns all users who have a specific permission, either directly or through role inheritance.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\nusers, err := e.GetImplicitUsersForPermission(\"data1\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: Getting User Roles with Casbin in PHP\nDESCRIPTION: This snippet shows how to retrieve all roles assigned to a user at runtime using Casbin's RBAC API in PHP. The getRolesForUser method returns an array of strings containing the role names.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$roles = $e->getRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Role Manager in Casbin (Go)\nDESCRIPTION: Demonstrates how to add conditional functions for role policies and enforce them in Casbin. It includes examples of adding named link condition functions and enforcing policies with various conditions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ne.AddNamedLinkConditionFunc(\"g\", \"alice\", \"data2_admin\", util.TimeMatchFunc)\ne.AddNamedLinkConditionFunc(\"g\", \"alice\", \"data3_admin\", util.TimeMatchFunc)\ne.AddNamedLinkConditionFunc(\"g\", \"alice\", \"data4_admin\", util.TimeMatchFunc)\ne.AddNamedLinkConditionFunc(\"g\", \"alice\", \"data5_admin\", util.TimeMatchFunc)\ne.AddNamedLinkConditionFunc(\"g\", \"alice\", \"data6_admin\", util.TimeMatchFunc)\ne.AddNamedLinkConditionFunc(\"g\", \"alice\", \"data7_admin\", util.TimeMatchFunc)\ne.AddNamedLinkConditionFunc(\"g\", \"alice\", \"data8_admin\", util.TimeMatchFunc)\n\n\ne.enforce(\"alice\", \"data1\", \"read\")     // except: true\ne.enforce(\"alice\", \"data2\", \"write\")    // except: false\ne.enforce(\"alice\", \"data3\", \"read\")     // except: true\ne.enforce(\"alice\", \"data4\", \"write\")    // except: true\ne.enforce(\"alice\", \"data5\", \"read\")     // except: true\ne.enforce(\"alice\", \"data6\", \"write\")    // except: false\ne.enforce(\"alice\", \"data7\", \"read\")     // except: true\ne.enforce(\"alice\", \"data8\", \"write\")    // except: false\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Functions in Casbin\nDESCRIPTION: Demonstrates how to add custom matching functions to Casbin enforcer across different languages. The example implements a custom path matching function that checks specific patterns for Alice's data access.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_62\n\nLANGUAGE: go\nCODE:\n```\nfunc CustomFunction(key1 string, key2 string) bool {\n    if key1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data/:resource\" {\n        return true\n    } else if key1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data2/:id/using/:resId\" {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc CustomFunctionWrapper(args ...interface{}) (interface{}, error) {\n    key1 := args[0].(string)\n    key2 := args[1].(string)\n\n    return bool(CustomFunction(key1, key2)), nil\n}\n\ne.AddFunction(\"keyMatchCustom\", CustomFunctionWrapper)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction customFunction(key1, key2){\n    if(key1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data/:resource\") {\n        return true\n    } else if(key1 == \"/alice_data2/myid/using/res_id\" && key2 == \"/alice_data2/:id/using/:resId\") {\n        return true\n    } else {\n        return false\n    }\n}\n\ne.addFunction(\"keyMatchCustom\", customFunction);\n```\n\n----------------------------------------\n\nTITLE: Getting User Roles with Casbin in Node.js\nDESCRIPTION: This snippet demonstrates how to retrieve all roles assigned to a user at runtime using Casbin's RBAC API in Node.js. The getRolesForUser method is asynchronous and returns a Promise that resolves to an array of role names.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst roles = await e.getRolesForUser('alice');\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Policies with Domain Support in Casbin\nDESCRIPTION: This snippet demonstrates how to define RBAC policies with domain/tenant support in Casbin. It includes examples of role assignments and permissions for different domains.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomains.mdx#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, admin, tenant1, data1, read\np, admin, tenant2, data2, read\n\ng, alice, admin, tenant1\ng, alice, user, tenant2\n```\n\n----------------------------------------\n\nTITLE: Basic Request Definition in Casbin Model\nDESCRIPTION: Defines the arguments for the enforcement function using subject, object and action parameters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n```\n\n----------------------------------------\n\nTITLE: Batch Enforcing Permissions in Go using Casbin\nDESCRIPTION: This snippet demonstrates how to use the BatchEnforce() method in Go to enforce multiple permission requests at once. It returns a boolean array of results and an error if any occurs.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/DataPermissions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nboolArray, err := e.BatchEnforce(requests)\n```\n\n----------------------------------------\n\nTITLE: Hierarchical RBAC Policy and Mapping Definitions in Casbin CSV Format\nDESCRIPTION: Comprehensive CSV policy definitions for Hierarchical RBAC that define role assignments, role-to-action mappings, role inheritance, and resource hierarchy relationships.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/UnderstandingCasbinMatchingInDetail.mdx#2025-04-21_snippet_7\n\nLANGUAGE: csv\nCODE:\n```\np, alice, sub-reader, sub1\np, bob, rg-owner, rg2\n\n// subscription role to subscription action mapping\ng, sub-reader, sub-read\ng, sub-owner, sub-read\ng, sub-owner, sub-write\n\n// resourceGroup role to resourceGroup action mapping\ng, rg-reader, rg-read\ng, rg-owner, rg-read\ng, rg-owner, rg-write\n\n// subscription role to resourceGroup role mapping\ng, sub-reader, rg-reader\ng, sub-owner, rg-owner\n\n// subscription resource to resourceGroup resource mapping\ng2, sub1, rg1\ng2, sub2, rg2\n```\n\n----------------------------------------\n\nTITLE: Comparing AddPolicies and AddPoliciesEx in Casbin\nDESCRIPTION: This code demonstrates the difference between AddPolicies and AddPoliciesEx. When AddPolicies encounters an existing rule, it returns false immediately without checking remaining rules. AddPoliciesEx continues checking and adding non-duplicate rules, returning true if any rule is successfully added.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc TestDemo(t *testing.T) {\n    e, err := NewEnforcer(\"examples/basic_model.conf\", \"examples/basic_policy.csv\")\n    if err != nil {\n        fmt.Printf(\"Error, details: %s\\n\", err)\n    }\n    e.ClearPolicy()\n    e.AddPolicy(\"user1\", \"data1\", \"read\")\n    fmt.Println(e.GetPolicy())\n    testGetPolicy(t, e, [][]string{{\"user1\", \"data1\", \"read\"}})\n\n    // policy {\"user1\", \"data1\", \"read\"} now exists\n\n    // Use AddPolicies to add rules in batches\n    ok, _ := e.AddPolicies([][]string{{\"user1\", \"data1\", \"read\"}, {\"user2\", \"data2\", \"read\"}})\n    fmt.Println(e.GetPolicy())\n    // {\"user2\", \"data2\", \"read\"} failed to add because {\"user1\", \"data1\", \"read\"} already exists\n    // AddPolicies returns false and no other policies are checked, even though they may not exist in the existing ruleset\n    // ok == false\n    fmt.Println(ok)\n    testGetPolicy(t, e, [][]string{{\"user1\", \"data1\", \"read\"}})\n\n    // Use AddPoliciesEx to add rules in batches\n    ok, _ = e.AddPoliciesEx([][]string{{\"user1\", \"data1\", \"read\"}, {\"user2\", \"data2\", \"read\"}})\n    fmt.Println(e.GetPolicy())\n    // {\"user2\", \"data2\", \"read\"} is added successfully\n    // because AddPoliciesEx automatically filters the existing {\"user1\", \"data1\", \"read\"}\n    // ok == true\n    fmt.Println(ok)\n    testGetPolicy(t, e, [][]string{{\"user1\", \"data1\", \"read\"}, {\"user2\", \"data2\", \"read\"}})\n}\n```\n\n----------------------------------------\n\nTITLE: Getting User Roles with Casbin in Go\nDESCRIPTION: This snippet demonstrates how to retrieve all roles assigned to a user at runtime using Casbin's RBAC API in Go. The GetRolesForUser method returns a slice of strings containing the role names.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nroles, err := e.GetRolesForUser(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Implicit Roles for User\nDESCRIPTION: GetImplicitRolesForUser retrieves both direct and indirect roles assigned to a user. This differs from GetRolesForUser by including inherited roles in the result.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\ne.GetImplicitRolesForUser(\"alice\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait e.getImplicitRolesForUser(\"alice\")\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$e->getImplicitRolesForUser(\"alice\");\n```\n\nLANGUAGE: Python\nCODE:\n```\ne.get_implicit_roles_for_user(\"alice\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar implicitRoles = e.GetImplicitRolesForUser(\"alice\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\ne.get_implicit_roles_for_user(\"alice\", None); // No domain\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<String> implicitRoles = e.getImplicitRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Named Policies in Casbin\nDESCRIPTION: Demonstrates how to atomically remove multiple authorization rules from a named policy. Returns true only if all rules are successfully removed, false if any rule is inconsistent with current policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_48\n\nLANGUAGE: go\nCODE:\n```\nrules := [][] string {\n    []string {\"jack\", \"data4\", \"read\"},\n    []string {\"katy\", \"data4\", \"write\"},\n    []string {\"leyo\", \"data4\", \"read\"},\n    []string {\"ham\", \"data4\", \"write\"},\n}\n\nareRulesRemoved := e.RemoveNamedPolicies(\"p\", rules)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removeNamedPolicies('p', rules);\n```\n\nLANGUAGE: python\nCODE:\n```\nrules = [\n    [\"jack\", \"data4\", \"read\"],\n    [\"katy\", \"data4\", \"write\"],\n    [\"leyo\", \"data4\", \"read\"],\n    [\"ham\", \"data4\", \"write\"]\n]\nare_rules_removed = e.remove_named_policies(\"p\", rules)\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet rules = vec![\n    vec![\"jack\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n    vec![\"katy\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n    vec![\"leyo\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n    vec![\"ham\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n];\n\nlet areRulesRemoved = e.remove_named_policies(\"p\", rules).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> rules = Arrays.asList(\n    Arrays.asList(\"jack\", \"data4\", \"read\"),\n    Arrays.asList(\"katy\", \"data4\", \"write\"),\n    Arrays.asList(\"leyo\", \"data4\", \"read\"),\n    Arrays.asList(\"ham\", \"data4\", \"write\")\n);\nboolean areRulesRemoved = e.removeNamedPolicies(\"p\", rules);\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Role Inheritance in Casbin Configuration\nDESCRIPTION: This snippet shows how to define RBAC systems in Casbin's configuration. The 'g' and 'g2' declarations represent separate RBAC systems that won't interfere with each other, allowing for role inheritance between users or resources.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBAC.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[role_definition]\ng = _, _\ng2 = _, _\n```\n\n----------------------------------------\n\nTITLE: Runtime Operations for Casbin Enforcer in Go\nDESCRIPTION: This Go code snippet shows how to reload the model, reload policies, and save policies at runtime after the enforcer has been initialized.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\n// Reload the model from the model CONF file.\ne.LoadModel()\n\n// Reload the policy from file/database.\ne.LoadPolicy()\n\n// Save the current policy (usually after changed with Casbin API) back to file/database.\ne.SavePolicy()\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Priority Model in Casbin\nDESCRIPTION: Sets up a model configuration that implements implicit priority enforcement, where policies that appear earlier in the policy file have higher priority.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PriorityModel.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[policy_effect]\ne = priority(p.eft) || deny\n```\n\n----------------------------------------\n\nTITLE: Using the can() Method for Permission Checks\nDESCRIPTION: Example of checking permissions using the can() method, which returns a Promise. The success parameter indicates whether the permission check completed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/FrontendUsage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nresult = authorizer.can(\"write\", \"data1\");\nresult.then((success, failed) => {\n    if (success) {\n        console.log(\"you can write data1\");\n    } else {\n        console.log(\"you cannot write data1\");\n    }\n});\n// output: you can write data1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Grouping Policy in Casbin\nDESCRIPTION: GetFilteredGroupingPolicy retrieves role inheritance rules from the policy that match the specified filter. The first parameter is the position to filter on, and the second parameter is the value to filter for.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nfilteredGroupingPolicy := e.GetFilteredGroupingPolicy(0, \"alice\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst filteredGroupingPolicy = await e.getFilteredGroupingPolicy(0, 'alice')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$filteredGroupingPolicy = $e->getFilteredGroupingPolicy(0, \"alice\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nfiltered_grouping_policy = e.get_filtered_grouping_policy(0, \"alice\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar filteredGroupingPolicy = e.GetFilteredGroupingPolicy(0, \"alice\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet filtered_grouping_policy = e.get_filtered_grouping_policy(0, vec![\"alice\".to_owned()]);\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> filteredGroupingPolicy = e.getFilteredGroupingPolicy(0, \"alice\");\n```\n\n----------------------------------------\n\nTITLE: Using Custom Functions in Casbin Model Configuration\nDESCRIPTION: Example of how to use a custom function in a Casbin model configuration file. This demonstrates integrating the function into the matcher rule to evaluate access permissions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Function.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[matchers]\nm = r.sub == p.sub && my_func(r.obj, p.obj) && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Adding Policy Rules in Casbin\nDESCRIPTION: AddPolicy adds a new authorization rule to the current policy. Returns true if the rule was added successfully, or false if the rule already exists in the policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nadded := e.AddPolicy('eve', 'data3', 'read')\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst p = ['eve', 'data3', 'read']\nconst added = await e.addPolicy(...p)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$added = $e->addPolicy('eve', 'data3', 'read');\n```\n\nLANGUAGE: Python\nCODE:\n```\nadded = e.add_policy(\"eve\", \"data3\", \"read\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar added = e.AddPolicy(\"eve\", \"data3\", \"read\");\nor\nvar added = await e.AddPolicyAsync(\"eve\", \"data3\", \"read\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet added = e.add_policy(vec![\"eve\".to_owned(), \"data3\".to_owned(), \"read\".to_owned()]);\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean added = e.addPolicy(\"eve\", \"data3\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Policy Rules in Java\nDESCRIPTION: Removes multiple authorization rules from the current policy in an atomic operation using Java. Returns a boolean indicating if all rules were removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_45\n\nLANGUAGE: Java\nCODE:\n```\nString[][] rules = {\n    {\"jack\", \"data4\", \"read\"},\n    {\"katy\", \"data4\", \"write\"},\n    {\"leyo\", \"data4\", \"read\"},\n    {\"ham\", \"data4\", \"write\"},\n};\nboolean areRulesRemoved = e.removePolicies(rules);\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with MySQL Adapter in Go\nDESCRIPTION: This Go code snippet shows how to initialize a Casbin enforcer using the MySQL adapter, connecting to a MySQL database on localhost with root credentials.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"github.com/casbin/casbin\"\n    \"github.com/casbin/mysql-adapter\"\n)\n\na := mysqladapter.NewAdapter(\"mysql\", \"root:@tcp(127.0.0.1:3306)/\")\ne := casbin.NewEnforcer(\"examples/basic_model.conf\", a)\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in PHP\nDESCRIPTION: This snippet shows how to check if a user has permission to perform an action on a resource using Casbin in PHP. It uses the enforce method that returns a boolean indicating whether the access is allowed.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$sub = \"alice\"; // the user that wants to access a resource.\n$obj = \"data1\"; // the resource that is going to be accessed.\n$act = \"read\"; // the operation that the user performs on the resource.\n\nif ($e->enforce($sub, $obj, $act) === true) {\n    // permit alice to read data1\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Roles from Policy\nDESCRIPTION: GetAllRoles retrieves a list of all roles defined in the current policy. Returns an array/list of role strings.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nallRoles = e.GetAllRoles()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst allRoles = await e.getAllRoles()\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$allRoles = $e->getAllRoles();\n```\n\nLANGUAGE: Python\nCODE:\n```\nall_roles = e.get_all_roles()\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar allRoles = e.GetAllRoles();\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet all_roles = e.get_all_roles();\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<String> allRoles = e.getAllRoles();\n```\n\n----------------------------------------\n\nTITLE: Loading Filtered Policies in Casbin\nDESCRIPTION: Shows how to load filtered policies from a file or database using the Casbin enforcer. Includes examples of setting up filters for specific domains and policy types.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_63\n\nLANGUAGE: go\nCODE:\n```\nerr := e.LoadFilteredPolicy()\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Filter:\n    P = []\n    G = []\n\nadapter = casbin.persist.adapters.FilteredAdapter(\"rbac_with_domains_policy.csv\")\ne = casbin.Enforcer(\"rbac_with_domains_model.conf\", adapter)\nfilter = Filter()\nfilter.P = [\"\", \"domain1\"]\nfilter.G = [\"\", \"\", \"domain1\"]\ne.load_filtered_policy(filter)\n```\n\n----------------------------------------\n\nTITLE: Implementing Casbin Authorization with GraphQL in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement Casbin authorization for GraphQL by placing the authorization logic in the repository layer. The example shows a GraphQL object type with a resolver that calls the repository method which handles authorization.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GraphQLMiddlewares.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Casbin authorization logic lives inside postRepository\nvar postRepository = require('postRepository');\n\nvar postType = new GraphQLObjectType({\n  name: 'Post',\n  fields: {\n    body: {\n      type: GraphQLString,\n      resolve: (post, args, context, { rootValue }) => {\n        return postRepository.getBody(context.user, post);\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing All Roles from a User with DeleteRolesForUser()\nDESCRIPTION: Removes all roles assigned to a user. Returns false if the user did not have any roles (indicating no change was made).\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ne.DeleteRolesForUser(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deleteRolesForUser('alice')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deleteRolesForUser(\"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_roles_for_user(\"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deletedAtLeastOne = e.DeleteRolesForUser(\"alice\");\nor\nvar deletedAtLeastOne = await e.DeleteRolesForUserAsync(\"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted_at_least_one = e.delete_roles_for_user(\"alice\", None).await?; // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean deletedAtLeastOne = e.deleteRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Hierarchical RBAC Model in Casbin TOML Configuration\nDESCRIPTION: A Hierarchical RBAC model definition in Casbin that includes two graph relations for roles and objects, enabling inheritance of permissions across resource hierarchies.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/UnderstandingCasbinMatchingInDetail.mdx#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[request_definition]\nr = sub, act, obj\n\n[policy_definition]\np = sub, act, obj\n\n[role_definition]\ng = _, _\ng2 = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && g(p.act, r.act) && g2(p.obj, r.obj)\n```\n\n----------------------------------------\n\nTITLE: Adding a Role for a User with AddRoleForUser()\nDESCRIPTION: Assigns a role to a user. Returns false if the user already has the role (indicating no change was made).\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ne.AddRoleForUser(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.addRoleForUser('alice', 'data2_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->addRoleForUser(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.add_role_for_user(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar added = e.AddRoleForUser(\"alice\", \"data2_admin\");\nor\nvar added = await e.AddRoleForUserAsync(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet added = e.add_role_for_user(\"alice\", \"data2_admin\", None).await?; // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean added = e.addRoleForUser(\"alice\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Loading Incremental Filtered Policies in Casbin\nDESCRIPTION: Demonstrates how to append filtered policies to existing policy set from a file or database using the Casbin enforcer.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_64\n\nLANGUAGE: go\nCODE:\n```\nerr := e.LoadIncrementalFilteredPolicy()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst ok = await e.loadIncrementalFilteredPolicy();\n```\n\n----------------------------------------\n\nTITLE: Removing Role Inheritance Rule with RemoveGroupingPolicy\nDESCRIPTION: Demonstrates how to remove a role inheritance rule from the current policy using the RemoveGroupingPolicy function. The function returns true if the rule is removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_58\n\nLANGUAGE: Go\nCODE:\n```\nremoved := e.RemoveGroupingPolicy(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst removed = await e.removeGroupingPolicy('alice', 'data2_admin')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$removed = $e->removeGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nremoved = e.remove_grouping_policy(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar removed = e.RemoveGroupingPolicy(\"alice\", \"data2_admin\");\nor\nvar removed = await e.RemoveGroupingPolicyAsync(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet removed = e.remove_grouping_policy(vec![\"alice\".to_owned(), \"data2_admin\".to_owned()]).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean removed = e.removeGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Batch Enforcing Permissions in Node.js using Casbin\nDESCRIPTION: This example shows how to use the batchEnforce() method in Node.js with Casbin. It's an asynchronous operation that returns a Promise resolving to a boolean array of enforcement results.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/DataPermissions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst boolArray = await e.batchEnforce(requests);\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Struct for ABAC in Go\nDESCRIPTION: Go struct definition for a resource that can be used with ABAC. This struct defines properties (Name and Owner) that can be referenced in the ABAC model.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ABAC.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype testResource struct {\n    Name  string\n    Owner string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Model with Conditions and Domains in Casbin\nDESCRIPTION: Defines the RBAC model configuration with support for conditional roles and domains. It extends the basic model to include domain-specific role assignments and matching.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, dom, obj, act\n\n[policy_definition]\np = sub, dom, obj, act\n\n[role_definition]\ng = _, _, _, (_, _)\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub, r.dom) && r.dom == p.dom && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Defining a Casbin Model to Restrict Deployment Images in Kubernetes\nDESCRIPTION: A Casbin model configuration that defines rules to forbid specific image tags in Kubernetes deployments. This model works with the K8s-Gatekeeper admission webhook to validate deployment requests.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr =  obj\n\n[policy_definition]\np =  obj,eft\n\n[policy_effect]\ne = !some(where (p.eft == deny))\n\n[matchers]\nm = r.obj.Request.Namespace == \"default\" && r.obj.Request.Resource.Resource ==\"deployments\" && \\\ncontain(split(accessWithWildcard(${OBJECT}.Spec.Template.Spec.Containers , \"*\", \"Image\"),\":\",1) , p.obj)\n```\n\n----------------------------------------\n\nTITLE: Removing a Policy Rule in .NET\nDESCRIPTION: Removes a single authorization rule from the current policy in .NET. Provides both synchronous and asynchronous versions of the method. Returns a boolean indicating if the rule was removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nvar removed = e.RemovePolicy(\"alice\", \"data1\", \"read\");\nor\nvar removed = await e.RemovePolicyAsync(\"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Adding a Role for a User in a Domain\nDESCRIPTION: Assigns a role to a user within a specific domain using the AddRoleForUserInDomain method. Returns false if the user already has the role.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.AddRoleForUserInDomain(\"alice\", \"admin\", \"domain1\")\n```\n\nLANGUAGE: python\nCODE:\n```\nok = e.add_role_for_user_in_domain(\"alice\", \"admin\", \"domain1\")\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean ok = e.addRoleForUserInDomain(\"alice\", \"admin\", \"domain1\");\n```\n\n----------------------------------------\n\nTITLE: Removing a Policy Rule in Node.js\nDESCRIPTION: Removes a single authorization rule from the current policy in Node.js. Returns a boolean indicating if the rule was removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst p = ['alice', 'data1', 'read']\nconst removed = await e.removePolicy(...p)\n```\n\n----------------------------------------\n\nTITLE: Using AddEx APIs for Batch Rule Addition in Go\nDESCRIPTION: The AddEx series of APIs allow for adding rules in batches, continuing to check subsequent rules even if some already exist. These methods include AddPoliciesEx, AddNamedPoliciesEx, AddGroupingPoliciesEx, AddNamedGroupingPoliciesEx, and SelfAddPoliciesEx.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nAddPoliciesEx(rules [][]string) (bool, error)\nAddNamedPoliciesEx(ptype string, rules [][]string) (bool, error)\nAddGroupingPoliciesEx(rules [][]string) (bool, error)\nAddNamedGroupingPoliciesEx(ptype string, rules [][]string) (bool, error)\nSelfAddPoliciesEx(sec string, ptype string, rules [][]string) (bool, error)\n```\n\n----------------------------------------\n\nTITLE: Updating Single Policy in Casbin\nDESCRIPTION: This snippet shows how to update a single policy in Casbin by replacing the original policy with a new one. This is useful for modifying permissions without removing and re-adding policies.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nenforcer.UpdatePolicy([]string{\"eve\", \"data3\", \"read\"}, []string{\"eve\", \"data3\", \"write\"})\n```\n\n----------------------------------------\n\nTITLE: Batch Enforcing Permissions in Java using Casbin\nDESCRIPTION: This code demonstrates the use of batchEnforce() method in Java with Casbin. It takes a list of requests and returns a List of Boolean values representing the enforcement results for each request.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/DataPermissions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nList<Boolean> boolArray = e.batchEnforce(requests);\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Policies in Casbin CSV Format\nDESCRIPTION: This snippet demonstrates how to define RBAC policies in Casbin using a CSV format. It shows how to assign permissions to roles and users, and how to establish role hierarchies.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CasbinRBACAndRBAC96.mdx#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\np, admin, book, read\np, alice, book, read\ng, amber, admin\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in Lua\nDESCRIPTION: This snippet shows how to check if a user has permission to perform an action on a resource using Casbin in Lua. It demonstrates the standard pattern of using the enforce method to make authorization decisions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nif e:enforce(\"alice\", \"data1\", \"read\") then\n   -- permit alice to read data1\nelse\n   -- deny the request, show an error\nend\n\n```\n\n----------------------------------------\n\nTITLE: ABAC Matcher with 'in' Operator\nDESCRIPTION: Demonstrates how to use the 'in' operator for ABAC (Attribute-Based Access Control) in Golang implementation of Casbin.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/HowItWorks.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# Matchers\n[matchers]\nm = r.obj == p.obj && r.act == p.act || r.obj in ('data2', 'data3')\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Wrapper for Casbin Integration\nDESCRIPTION: Wrapper function that converts the custom KeyMatch function to the interface format required by Casbin. This wrapper handles the type conversion between Casbin's interface{} types and the function's native types.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Function.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc KeyMatchFunc(args ...interface{}) (interface{}, error) {\n    name1 := args[0].(string)\n    name2 := args[1].(string)\n\n    return (bool)(KeyMatch(name1, name2)), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Policies with Conditions in Casbin\nDESCRIPTION: Specifies the RBAC policies including conditional role assignments. It defines permissions for different subjects and objects, and sets up role hierarchies with time-based conditions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, alice, data1, read\np, data2_admin, data2, write\np, data3_admin, data3, read\np, data4_admin, data4, write\np, data5_admin, data5, read\np, data6_admin, data6, write\np, data7_admin, data7, read\np, data8_admin, data8, write\n\ng, alice, data2_admin, 0000-01-01 00:00:00, 0000-01-02 00:00:00\ng, alice, data3_admin, 0000-01-01 00:00:00, 9999-12-30 00:00:00\ng, alice, data4_admin, _, _\ng, alice, data5_admin, _, 9999-12-30 00:00:00\ng, alice, data6_admin, _, 0000-01-02 00:00:00\ng, alice, data7_admin, 0000-01-01 00:00:00, _\ng, alice, data8_admin, 9999-12-30 00:00:00, _\n```\n\n----------------------------------------\n\nTITLE: Using EnforceContext with Java Enforcer\nDESCRIPTION: Java example of using EnforceContext to enforce policies with different types, including age-based role checking using TestEvalRule objects.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nEnforceContext enforceContext = new EnforceContext(\"2\");\n// You can also specify a certain type individually\nenforceContext.seteType(\"e\");\n// Don't pass in EnforceContext; the default is r, p, e, m\ne.enforce(\"alice\", \"data2\", \"read\");  // true\n// Pass in EnforceContext\n// TestEvalRule is located in https://github.com/casbin/jcasbin/blob/master/src/test/java/org/casbin/jcasbin/main/AbacAPIUnitTest.java#L56\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule(\"alice\", 70), \"/data1\", \"read\"); // false\ne.enforce(enforceContext, new AbacAPIUnitTest.TestEvalRule(\"alice\", 30), \"/data1\", \"read\"); // true\n```\n\n----------------------------------------\n\nTITLE: Loading Casbin Model from .CONF File\nDESCRIPTION: Go code example showing how to initialize a Casbin enforcer by loading a model from a .CONF file and policies from a CSV file.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ModelStorage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ne := casbin.NewEnforcer(\"examples/rbac_model.conf\", \"examples/rbac_policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Removing a Policy Rule in Rust\nDESCRIPTION: Removes a single authorization rule from the current policy in Rust. Returns a Result containing a boolean indicating if the rule was removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_39\n\nLANGUAGE: Rust\nCODE:\n```\nlet removed = e.remove_policy(vec![\"alice\".to_owned(), \"data1\".to_owned(), \"read\".to_owned()]).await?;\n```\n\n----------------------------------------\n\nTITLE: Getting Roles for a User in a Domain\nDESCRIPTION: Retrieves all roles assigned to a specific user within a particular domain using the GetRolesForUserInDomain method.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetRolesForUserInDomain(\"admin\", \"domain1\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = e.getRolesForUserInDomain(\"alice\", \"domain1\")\n```\n\nLANGUAGE: python\nCODE:\n```\nres = e.get_roles_for_user_in_domain(\"alice\", \"domain1\")\n```\n\nLANGUAGE: java\nCODE:\n```\nList<String> res = e.getRolesForUserInDomain(\"admin\", \"domain1\");\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Named Role Inheritance Rules with AddNamedGroupingPolicies\nDESCRIPTION: Demonstrates how to add multiple named role inheritance rules to the current policy using the AddNamedGroupingPolicies function. The operation is atomic, and all rules are added only if they are consistent with the current policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_56\n\nLANGUAGE: Go\nCODE:\n```\nrules := [][] string {\n    []string {\"ham\", \"data4_admin\"},\n    []string {\"jack\", \"data5_admin\"},\n}\n\nareRulesAdded := e.AddNamedGroupingPolicies(\"g\", rules)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addNamedGroupingPolicies('g', groupingRules);\n```\n\nLANGUAGE: Python\nCODE:\n```\nrules = [\n    [\"ham\", \"data4_admin\"],\n    [\"jack\", \"data5_admin\"]\n]\n\nare_rules_added = e.add_named_grouping_policies(\"g\", rules)\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet rules = vec![\n    vec![\"ham\".to_owned(), \"data4_admin\".to_owned()],\n    vec![\"jack\".to_owned(), \"data5_admin\".to_owned()],\n];\n\nlet are_rules_added = e.add_named_grouping_policies(\"g\", rules).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nString[][] groupingRules = {\n    {\"ham\", \"data4_admin\"},\n    {\"jack\", \"data5_admin\"}\n};\nboolean areRulesAdded = e.addNamedGroupingPolicies(\"g\", groupingRules);\n```\n\n----------------------------------------\n\nTITLE: Implementing Context-Aware Adapter with Timeout in Go\nDESCRIPTION: Example of using a context-aware adapter (gormadapter) with timeout control. The code creates a new context adapter for MySQL and sets a 300-microsecond timeout for the AddPolicyCtx operation.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nca, _ := NewContextAdapter(\"mysql\", \"root:@tcp(127.0.0.1:3306)/\", \"casbin\")\n// Limited time 300s\nctx, cancel := context.WithTimeout(context.Background(), 300*time.Microsecond)\ndefer cancel()\n\nerr := ca.AddPolicyCtx(ctx, \"p\", \"p\", []string{\"alice\", \"data1\", \"read\"})\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern-Based RBAC Policy Definition Example\nDESCRIPTION: Example CSV policy showing how to use pattern matching with book resources. Instead of defining individual permissions for each book, a single pattern rule grants access to all books matching the pattern.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithPattern.mdx#2025-04-21_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\np, alice, book_group, read\ng, /book/1, book_group\ng, /book/2, book_group\n```\n\nLANGUAGE: csv\nCODE:\n```\ng, /book/:id, book_group\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Policy Rules in Casbin\nDESCRIPTION: AddPolicies adds multiple authorization rules to the current policy in an atomic operation. Returns true only if all rules are added successfully; if any rule exists or is inconsistent, no changes are made and false is returned.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\nrules := [][] string {\n    []string {\"jack\", \"data4\", \"read\"},\n    []string {\"katy\", \"data4\", \"write\"},\n    []string {\"leyo\", \"data4\", \"read\"},\n    []string {\"ham\", \"data4\", \"write\"},\n}\n\nareRulesAdded := e.AddPolicies(rules)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesAdded = await e.addPolicies(rules);\n```\n\nLANGUAGE: Python\nCODE:\n```\nrules = [\n    [\"jack\", \"data4\", \"read\"],\n    [\"katy\", \"data4\", \"write\"],\n    [\"leyo\", \"data4\", \"read\"],\n    [\"ham\", \"data4\", \"write\"]\n]\nare_rules_added = e.add_policies(rules)\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet rules = vec![\n    vec![\"jack\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n    vec![\"katy\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n    vec![\"leyo\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n    vec![\"ham\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n];\n\nlet are_rules_added = e.add_policies(rules).await?\n```\n\nLANGUAGE: Java\nCODE:\n```\nString[][] rules = {\n    {\"jack\", \"data4\", \"read\"},\n    {\"katy\", \"data4\", \"write\"},\n    {\"leyo\", \"data4\", \"read\"},\n    {\"ham\", \"data4\", \"write\"},\n};\n\nboolean areRulesAdded = e.addPolicies(rules);\n```\n\n----------------------------------------\n\nTITLE: Subject Priority Model Configuration in Casbin\nDESCRIPTION: Configures a model that uses subject hierarchy to determine priority of policies, where policies for subjects lower in the hierarchy have higher priority.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PriorityModel.mdx#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act, eft\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = subjectPriority(p.eft) || deny\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act \n```\n\n----------------------------------------\n\nTITLE: Defining EnforceContext Structure in Go\nDESCRIPTION: Definition of the EnforceContext structure in Go that allows specifying different request, policy, effect, and matcher types for Casbin enforcement.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nEnforceContext{\"r2\",\"p2\",\"e2\",\"m2\"}\ntype EnforceContext struct {\n    RType string\n    PType string\n    EType string\n    MType string\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Domain Field Index in Casbin (Go)\nDESCRIPTION: This Go snippet shows how to set a custom domain field index when using a non-standard domain token name in Casbin. It's necessary for proper functioning of domain-related methods.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomains.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ne.SetFieldIndex(\"p\", constant.DomainIndex, 3) // index starts from 0\nusers := e.GetAllUsersByDomain(\"domain1\") // without SetFieldIndex, it will raise an error\n```\n\n----------------------------------------\n\nTITLE: Defining ABAC Model Configuration in INI Format\nDESCRIPTION: An INI configuration example for a basic ABAC model in Casbin. This defines the request and policy structure, policy effect, and a matcher that uses object attributes.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ABAC.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == r.obj.Owner\n```\n\n----------------------------------------\n\nTITLE: Getting Permissions for a User in a Domain\nDESCRIPTION: Retrieves all permissions granted to a specific user or role within a particular domain using the GetPermissionsForUserInDomain method.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetPermissionsForUserInDomain(\"alice\", \"domain1\")\n```\n\nLANGUAGE: java\nCODE:\n```\nList<List<String>> res = e.getPermissionsForUserInDomain(\"alice\", \"domain1\");\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Role Inheritance Rules with AddGroupingPolicies\nDESCRIPTION: Shows how to add multiple role inheritance rules to the current policy using the AddGroupingPolicies function. The operation is atomic, and all rules are added only if they are consistent with the current policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_53\n\nLANGUAGE: Go\nCODE:\n```\nrules := [][] string {\n    []string {\"ham\", \"data4_admin\"},\n    []string {\"jack\", \"data5_admin\"},\n}\n\nareRulesAdded := e.AddGroupingPolicies(rules)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesAdded = await e.addGroupingPolicies(groupingRules);\n```\n\nLANGUAGE: Python\nCODE:\n```\nrules = [\n    [\"ham\", \"data4_admin\"],\n    [\"jack\", \"data5_admin\"]\n]\n\nare_rules_added = e.add_grouping_policies(rules)\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet rules = vec![\n    vec![\"ham\".to_owned(), \"data4_admin\".to_owned()],\n    vec![\"jack\".to_owned(), \"data5_admin\".to_owned()],\n];\n\nlet areRulesAdded = e.add_grouping_policies(rules).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nString[][] groupingRules = {\n    {\"ham\", \"data4_admin\"},\n    {\"jack\", \"data5_admin\"}\n};\nboolean areRulesAdded = e.addGroupingPolicies(groupingRules);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Function with Casbin Enforcer\nDESCRIPTION: Code to register a custom function with the Casbin enforcer, making it available for use in policy rules. This allows referencing the function by name in the model configuration.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Function.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ne.AddFunction(\"my_func\", KeyMatchFunc)\n```\n\n----------------------------------------\n\nTITLE: Implementing EnforceContext Class in Node.js\nDESCRIPTION: JavaScript implementation of the EnforceContext class for Node.js, enabling specification of different request, policy, effect, and matcher types.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst enforceContext = new EnforceContext('r2', 'p2', 'e2', 'm2');\nclass EnforceContext {\n  constructor(rType, pType, eType, mType) {\n    this.pType = pType;\n    this.eType = eType;\n    this.mType = mType;\n    this.rType = rType;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Domain-Filtered Policy with Casbin File Adapter in Go\nDESCRIPTION: This snippet demonstrates how to load a filtered subset of policy rules from a CSV file using Casbin's filtered file adapter. It initializes an enforcer, sets up a filtered adapter, and applies a domain filter to only load policies related to \"domain1\".\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PolicySubsetLoading.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/casbin/casbin/v2\"\n    fileadapter \"github.com/casbin/casbin/v2/persist/file-adapter\"\n)\n\nenforcer, _ := casbin.NewEnforcer()\n\nadapter := fileadapter.NewFilteredAdapter(\"examples/rbac_with_domains_policy.csv\")\nenforcer.InitWithAdapter(\"examples/rbac_with_domains_model.conf\", adapter)\n\nfilter := &fileadapter.Filter{\n    P: []string{\"\", \"domain1\"},\n    G: []string{\"\", \"\", \"domain1\"},\n}\nenforcer.LoadFilteredPolicy(filter)\n\n// The loaded policy now only contains the entries pertaining to \"domain1\".\n```\n\n----------------------------------------\n\nTITLE: Adding Named Domain Matching Function in Go and Node.js\nDESCRIPTION: Demonstrates how to add a named domain matching function to the RoleManager in Go and Node.js.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ne, _ := casbin.NewEnforcer(\"path/to/model\", \"path/to/policy\")\ne.AddNamedDomainMatchingFunc(\"g\", \"\", util.MatchKey)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = await newEnforcer('path/to/model', 'path/to/policy');\nawait e.addNamedDomainMatchingFunc('g', Util.keyMatchFunc);\n```\n\n----------------------------------------\n\nTITLE: Getting User Roles with Casbin in .NET\nDESCRIPTION: This snippet shows how to retrieve all roles assigned to a user at runtime using Casbin's RBAC API in .NET. The GetRolesForUser method returns a collection of strings containing the role names.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nvar roles = e.GetRolesForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Performance Testing with Different Matcher Orders\nDESCRIPTION: Go code demonstrating performance impact of matcher expression ordering in RBAC scenarios.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconst rbac_models = `\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\n\nfunc TestManyRoles(t *testing.T) {\n\n    m, _ := model.NewModelFromString(rbac_models)\n    e, _ := NewEnforcer(m, false)\n\n    roles := []string{\"admin\", \"manager\", \"developer\", \"tester\"}\n\n    // 2500 projects\n    for nbPrj := 1; nbPrj < 2500; nbPrj++ {\n        // 4 objects and 1 role per object (so 4 roles)\n        for _, role := range roles {\n            roleDB := fmt.Sprintf(\"%s_project:%d\", role, nbPrj)\n            objectDB := fmt.Sprintf(\"/projects/%d\", nbPrj)\n            e.AddPolicy(roleDB, objectDB, \"GET\")\n        }\n        jasmineRole := fmt.Sprintf(\"%s_project:%d\", roles[1], nbPrj)\n        e.AddGroupingPolicy(\"jasmine\", jasmineRole)\n    }\n\n    e.AddGroupingPolicy(\"abu\", \"manager_project:1\")\n    e.AddGroupingPolicy(\"abu\", \"manager_project:2499\")\n\n    request := func(subject, object, action string) {\n        t0 := time.Now()\n        resp, _ := e.Enforce(subject, object, action)\n        tElapse := time.Since(t0)\n        t.Logf(\"RESPONSE %-10s %s\\t %s : %5v IN: %+v\", subject, object, action, resp, tElapse)\n        if tElapse > time.Millisecond*100 {\n            t.Errorf(\"More than 100 milliseconds for %s %s %s : %+v\", subject, object, action, tElapse)\n        }\n    }\n\n    request(\"abu\", \"/projects/1\", \"GET\")\n    request(\"abu\", \"/projects/2499\", \"GET\")\n    request(\"jasmine\", \"/projects/1\", \"GET\")\n    request(\"jasmine\", \"/projects/2499\", \"GET\")\n    request(\"jasmine\", \"/projects/2499\", \"GET\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin.js in Auto Mode with Backend Integration\nDESCRIPTION: Setting up Casbin.js in auto mode to automatically synchronize permissions with a backend Casbin service. This approach requires specifying an endpoint URL.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/FrontendUsage.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst casbinjs = require('casbin.js');\n\n// Set your backend Casbin service URL\nconst authorizer = new casbinjs.Authorizer(\n    'auto', // mode\n    {endpoint: 'http://your_endpoint/api/casbin'}\n);\n\n// Set your visitor.\n// Casbin.js will automatically sync the permission with your backend Casbin service.\nauthorizer.setUser(\"Tom\");\n\n// Evaluate the permission\nresult = authorizer.can(\"read\", \"data1\");\nresult.then((success, failed) => {\n    if (success) {\n        // Some frontend procedure ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Model with Conditions in Casbin\nDESCRIPTION: Defines the RBAC model configuration with support for conditional roles. It specifies request definitions, policy definitions, role definitions with condition parameters, policy effect, and matchers.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _, (_, _)\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Retrieving Roles from Named Policy\nDESCRIPTION: GetAllNamedRoles retrieves all roles from a specific named policy. Takes a policy name parameter (e.g. 'g') and returns an array/list of role strings.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nallNamedRoles := e.GetAllNamedRoles(\"g\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst allNamedRoles = await e.getAllNamedRoles('g')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$allNamedRoles = $e->getAllNamedRoles('g');\n```\n\nLANGUAGE: Python\nCODE:\n```\nall_named_roles = e.get_all_named_roles(\"g\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar allNamedRoles = e.GetAllNamedRoles(\"g\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet all_named_roles = e.get_all_named_roles(\"g\");\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<String> allNamedRoles = e.getAllNamedRoles(\"g\");\n```\n\n----------------------------------------\n\nTITLE: Adding Domain Pattern Matching in RBAC with Casbin in Go\nDESCRIPTION: Code snippet to add domain pattern matching capability to Casbin enforcer. This enables pattern matching within specific domains/tenants in RBAC.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithPattern.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ne.AddNamedDomainMatchingFunc(\"g\", \"KeyMatch2\", util.KeyMatch2)\n```\n\n----------------------------------------\n\nTITLE: Getting Users for a Role with GetUsersForRole()\nDESCRIPTION: Retrieves all users that have been assigned a specific role. The function returns a list of user identifiers that have the specified role.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetUsersForRole(\"data1_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await e.getUsersForRole('data1_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$res = $e->getUsersForRole(\"data1_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nusers = e.get_users_for_role(\"data1_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar res = e.GetUsersForRole(\"data1_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet users = e.get_users_for_role(\"data1_admin\", None); // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nList<String> res = e.getUsersForRole(\"data1_admin\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Role Inheritance Rules\nDESCRIPTION: GetGroupingPolicy retrieves all role inheritance rules from the policy. Returns a list/array of grouping policy rules.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\ngroupingPolicy := e.GetGroupingPolicy()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst groupingPolicy = await e.getGroupingPolicy()\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$groupingPolicy = $e->getGroupingPolicy();\n```\n\nLANGUAGE: Python\nCODE:\n```\ngrouping_policy = e.get_grouping_policy()\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar groupingPolicy = e.GetGroupingPolicy();\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet grouping_policy = e.get_grouping_policy();\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> groupingPolicy = e.getGroupingPolicy();\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Named Policy Rules in Java\nDESCRIPTION: Adds multiple authorization rules to a named policy in an atomic operation using Java. Returns a boolean indicating if all rules were added successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_31\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> rules = Arrays.asList(\n    Arrays.asList(\"jack\", \"data4\", \"read\"),\n    Arrays.asList(\"katy\", \"data4\", \"write\"),\n    Arrays.asList(\"leyo\", \"data4\", \"read\"),\n    Arrays.asList(\"ham\", \"data4\", \"write\")\n);\nboolean areRulesAdded = e.addNamedPolicies(\"p\", rules);\n```\n\n----------------------------------------\n\nTITLE: Getting User Roles with Casbin in Python\nDESCRIPTION: This snippet demonstrates how to retrieve all roles assigned to a user at runtime using Casbin's RBAC API in Python. The get_roles_for_user method follows Python's naming convention and returns a list of role names.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nroles = e.get_roles_for_user(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Roles for a User with AddRolesForUser()\nDESCRIPTION: Assigns multiple roles to a user at once. Returns false if the user already has any of the specified roles (indicating at least one assignment failed).\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar roles = []string{\"data2_admin\", \"data1_admin\"}\ne.AddRolesForUser(\"alice\", roles)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst roles = [\"data1_admin\", \"data2_admin\"];\nroles.map((role) => e.addRoleForUser(\"alice\", role));\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet roles = vec![\"data1_admin\".to_owned(), \"data2_admin\".to_owned()];\nlet all_added = e.add_roles_for_user(\"alice\", roles, None).await?; // No domain\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Adapter Methods in Go\nDESCRIPTION: Example implementation of the three optional methods required for Casbin adapters that don't support Auto-Save functionality. These methods return 'not implemented' errors which will be ignored by the Casbin enforcer.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// AddPolicy adds a policy rule to the storage.\nfunc (a *Adapter) AddPolicy(sec string, ptype string, rule []string) error {\n    return errors.New(\"not implemented\")\n}\n\n// RemovePolicy removes a policy rule from the storage.\nfunc (a *Adapter) RemovePolicy(sec string, ptype string, rule []string) error {\n    return errors.New(\"not implemented\")\n}\n\n// RemoveFilteredPolicy removes policy rules that match the filter from the storage.\nfunc (a *Adapter) RemoveFilteredPolicy(sec string, ptype string, fieldIndex int, fieldValues ...string) error {\n    return errors.New(\"not implemented\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Policy Rule in Node.js\nDESCRIPTION: Adds a single authorization rule to a named policy in Node.js. Takes the policy name and rule parameters. Returns a boolean indicating if the rule was added.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst p = ['eve', 'data3', 'read']\nconst added = await e.addNamedPolicy('p', ...p)\n```\n\n----------------------------------------\n\nTITLE: Priority-Based Policy CSV Format in Casbin\nDESCRIPTION: Shows how to define policies with explicit priority values in CSV format, including role assignments and policies with various priorities and effects.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PriorityModel.mdx#2025-04-21_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\np, 10, data1_deny_group, data1, read, deny\np, 10, data1_deny_group, data1, write, deny\np, 10, data2_allow_group, data2, read, allow\np, 10, data2_allow_group, data2, write, allow\n\n\np, 1, alice, data1, write, allow\np, 1, alice, data1, read, allow\np, 1, bob, data2, read, deny\n\ng, bob, data2_allow_group\ng, alice, data1_deny_group\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Authorization Rules\nDESCRIPTION: GetPolicy retrieves all authorization rules from the policy. Returns a list/array of policy rules.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npolicy = e.GetPolicy()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst policy = await e.getPolicy()\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$policy = $e->getPolicy();\n```\n\nLANGUAGE: Python\nCODE:\n```\npolicy = e.get_policy()\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar policy = e.GetPolicy();\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet policy = e.get_policy();\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> policy = e.getPolicy();\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to initialize a Casbin enforcer using the file adapter, loading model from a configuration file and policies from a CSV file.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Casbin\\Enforcer;\n\n$e = new Enforcer('examples/basic_model.conf', 'examples/basic_policy.csv');\n```\n\n----------------------------------------\n\nTITLE: Getting Implicit Resources for User\nDESCRIPTION: GetImplicitResourcesForUser returns all policies that should be true for a user, including inherited permissions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nresources, err := e.GetImplicitResourcesForUser(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Getting Implicit Users for Role\nDESCRIPTION: GetImplicitUsersForRole retrieves all users that inherit a specific role, including indirect users through role inheritance.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nusers := e.GetImplicitUsersForRole(\"role:user\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst users = e.getImplicitUsersForRole(\"role:user\");\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<String> users = e.getImplicitUsersForRole(\"role:user\");\n```\n\n----------------------------------------\n\nTITLE: Saving Policies to a New Adapter in Go\nDESCRIPTION: This Go code snippet demonstrates how to save policies from memory to a new adapter, completing the migration process between adapters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\ne.SavePolicy()\n```\n\n----------------------------------------\n\nTITLE: Adding Named Domain Matching Function in Node.js\nDESCRIPTION: Node.js implementation for adding a named domain matching function to the Casbin enforcer. This enables pattern matching in domain/tenant specifications.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithPattern.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.addNamedDomainMatchingFunc('g', Util.keyMatch2Func);\n```\n\n----------------------------------------\n\nTITLE: Adding Domain Link Condition Functions in Go\nDESCRIPTION: The AddNamedDomainLinkConditionFunc adds a condition function for a link between a user and a role within a specific domain. When the function returns true, the link is considered valid; otherwise, it's invalid.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditionsAPI.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ne.AddNamedDomainLinkConditionFunc(\"g\", \"userName\", \"roleName\", \"domainName\", YourLinkConditionFunc)\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Named Policy Rules in Python\nDESCRIPTION: Adds multiple authorization rules to a named policy in an atomic operation using Python. Returns a boolean indicating if all rules were added successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nrules = [\n    [\"jack\", \"data4\", \"read\"],\n    [\"katy\", \"data4\", \"write\"],\n    [\"leyo\", \"data4\", \"read\"],\n    [\"ham\", \"data4\", \"write\"]\n]\nare_rules_added = e.add_named_policies(\"p\", rules)\n```\n\n----------------------------------------\n\nTITLE: RBAC Access Request Examples in Casbin\nDESCRIPTION: Set of example access requests in Casbin's CSV format that test different permission scenarios based on role assignments, showing which actions are allowed or denied.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/UnderstandingCasbinMatchingInDetail.mdx#2025-04-21_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\nalice, read, data1\nalice, write, data1\nbob, write, data2\nbob, read, data2\nbob, write, data1\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role for a User in a Domain\nDESCRIPTION: Removes a role from a user within a specific domain using the DeleteRoleForUserInDomain method. Returns false if the user doesn't have the role.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.DeleteRoleForUserInDomain(\"alice\", \"admin\", \"domain1\")\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean ok = e.deleteRoleForUserInDomain(\"alice\", \"admin\", \"domain1\");\n```\n\n----------------------------------------\n\nTITLE: Removing Filtered Grouping Policy in Casbin\nDESCRIPTION: Shows how to remove role inheritance rules using field filters with RemoveFilteredGroupingPolicy. Takes a field index and filter value as parameters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_60\n\nLANGUAGE: go\nCODE:\n```\nremoved := e.RemoveFilteredGroupingPolicy(0, \"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst removed = await e.removeFilteredGroupingPolicy(0, 'alice')\n```\n\n----------------------------------------\n\nTITLE: Adding Named Policies with Watcher Disabled in Go\nDESCRIPTION: Adds multiple authorization rules to a named policy with autoNotifyWatcher disabled. If a rule already exists, it will be skipped, but other non-existent rules will still be added. Returns success status and any error encountered.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\nok, err := e.SelfAddPoliciesEx(\"p\", \"p\", [][]string{{\"user1\", \"data1\", \"read\"}, {\"user2\", \"data2\", \"read\"}})\n```\n\n----------------------------------------\n\nTITLE: Migrating Between Adapters in Go\nDESCRIPTION: This Go code snippet shows how to convert or migrate policies between different adapters by loading from one adapter into memory and then saving to another adapter.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\ne, _ := NewEnforcer(m, A)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger in Go for Casbin\nDESCRIPTION: Provides an example of how to implement a custom logger for Casbin in Go. The custom logger must implement the Logger interface with specific methods.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/LogError.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"log\"\n    \"strings\"\n)\n\n// DefaultLogger is the implementation for a Logger using golang log.\ntype DefaultLogger struct {\n    enabled bool\n}\n\nfunc (l *DefaultLogger) EnableLog(enable bool) {\n    l.enabled = enable\n}\n\nfunc (l *DefaultLogger) IsEnabled() bool {\n    return l.enabled\n}\n\nfunc (l *DefaultLogger) LogModel(model [][]string) {\n    if !l.enabled {\n        return\n    }\n    var str strings.Builder\n    str.WriteString(\"Model: \")\n    for _, v := range model {\n        str.WriteString(fmt.Sprintf(\"%v\\n\", v))\n    }\n\n    log.Println(str.String())\n}\n\nfunc (l *DefaultLogger) LogEnforce(matcher string, request []interface{}, result bool, explains [][]string) {\n    if !l.enabled {\n        return\n    }\n\n    var reqStr strings.Builder\n    reqStr.WriteString(\"Request: \")\n    for i, rval := range request {\n        if i != len(request)-1 {\n            reqStr.WriteString(fmt.Sprintf(\"%v, \", rval))\n        } else {\n            reqStr.WriteString(fmt.Sprintf(\"%v\", rval))\n        }\n    }\n    reqStr.WriteString(fmt.Sprintf(\" ---> %t\\n\", result))\n\n    reqStr.WriteString(\"Hit Policy: \")\n    for i, pval := range explains {\n        if i != len(explains)-1 {\n            reqStr.WriteString(fmt.Sprintf(\"%v, \", pval))\n        } else {\n            reqStr.WriteString(fmt.Sprintf(\"%v \\n\", pval))\n        }\n    }\n\n    log.Println(reqStr.String())\n}\n\nfunc (l *DefaultLogger) LogPolicy(policy map[string][][]string) {\n    if !l.enabled {\n        return\n    }\n\n    var str strings.Builder\n    str.WriteString(\"Policy: \")\n    for k, v := range policy {\n        str.WriteString(fmt.Sprintf(\"%s : %v\\n\", k, v))\n    }\n\n    log.Println(str.String())\n}\n\nfunc (l *DefaultLogger) LogRole(roles []string) {\n    if !l.enabled {\n        return\n    }\n\n    log.Println(\"Roles: \", roles)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Policy Rule in PHP\nDESCRIPTION: Adds a single authorization rule to a named policy in PHP. Takes the policy name and rule parameters. Returns a boolean indicating if the rule was added.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n$added = $e->addNamedPolicy(\"p\", \"eve\", \"data3\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Deleting Roles in Casbin\nDESCRIPTION: DeleteRole function removes a role from the authorization system.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ne.DeleteRole(\"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deleteRole(\"data2_admin\")\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deleteRole(\"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_role(\"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deleted = e.DeleteRole(\"data2_admin\");\nor\nvar deleted = await e.DeleteRoleAsync(\"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted = e.delete_role(\"data2_admin\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\ne.deleteRole(\"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Policy Rule in Java\nDESCRIPTION: Adds a single authorization rule to a named policy in Java. Takes the policy name and rule parameters. Returns a boolean indicating if the rule was added.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nboolean added = e.addNamedPolicy(\"p\", \"eve\", \"data3\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Deleting All Roles for a User in a Domain\nDESCRIPTION: Removes all roles from a user within a specific domain using the DeleteRolesForUserInDomain method. Returns false if the user has no roles.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.DeleteRolesForUserInDomain(\"alice\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Grouping Policy in Casbin\nDESCRIPTION: GetNamedGroupingPolicy retrieves all role inheritance rules for a specific named policy. The parameter specifies the policy name to retrieve, typically 'g' for the default grouping policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nnamedGroupingPolicy := e.GetNamedGroupingPolicy(\"g\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst namedGroupingPolicy = await e.getNamedGroupingPolicy('g')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$namedGroupingPolicy = $e->getNamedGroupingPolicy(\"g\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nnamed_grouping_policy = e.get_named_grouping_policy(\"g\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar namedGroupingPolicy = e.GetNamedGroupingPolicy(\"g\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet named_grouping_policy = e.get_named_grouping_policy(\"g\");\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> namedGroupingPolicy = e.getNamedGroupingPolicy(\"g\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Authorization Rules\nDESCRIPTION: GetFilteredPolicy retrieves authorization rules matching specified field filters. Takes a field index and filter value as parameters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nfilteredPolicy := e.GetFilteredPolicy(0, \"alice\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst filteredPolicy = await e.getFilteredPolicy(0, 'alice')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$filteredPolicy = $e->getFilteredPolicy(0, \"alice\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nfiltered_policy = e.get_filtered_policy(0, \"alice\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar filteredPolicy = e.GetFilteredPolicy(0, \"alice\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet filtered_policy = e.get_filtered_policy(0, vec![\"alice\".to_owned()]);\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> filteredPolicy = e.getFilteredPolicy(0, \"alice\");\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Policy Rules in Rust\nDESCRIPTION: Removes multiple authorization rules from the current policy in an atomic operation using Rust. Returns a Result containing a boolean indicating if all rules were removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_44\n\nLANGUAGE: Rust\nCODE:\n```\nlet rules = vec![\n    vec![\"jack\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n    vec![\"katy\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n    vec![\"leyo\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n    vec![\"ham\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n];\n\nlet are_rules_removed = e.remove_policies(rules).await?;\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Named Policy Rules in Go\nDESCRIPTION: Adds multiple authorization rules to a named policy in an atomic operation. Returns true if all rules were added, or false if any rule already exists or is inconsistent with the current policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\nrules := [][] string {\n    []string {\"jack\", \"data4\", \"read\"},\n    []string {\"katy\", \"data4\", \"write\"},\n    []string {\"leyo\", \"data4\", \"read\"},\n    []string {\"ham\", \"data4\", \"write\"},\n}\n\nareRulesAdded := e.AddNamedPolicies(\"p\", rules)\n```\n\n----------------------------------------\n\nTITLE: Removing a Policy Rule in Java\nDESCRIPTION: Removes a single authorization rule from the current policy in Java. Returns a boolean indicating if the rule was removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_40\n\nLANGUAGE: Java\nCODE:\n```\nboolean removed = e.removePolicy(\"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Removing a Policy Rule in Python\nDESCRIPTION: Removes a single authorization rule from the current policy in Python. Returns a boolean indicating if the rule was removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nremoved = e.remove_policy(\"alice\", \"data1\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Policy Rules in Python\nDESCRIPTION: Removes multiple authorization rules from the current policy in an atomic operation using Python. Returns a boolean indicating if all rules were removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nrules = [\n    [\"jack\", \"data4\", \"read\"],\n    [\"katy\", \"data4\", \"write\"],\n    [\"leyo\", \"data4\", \"read\"],\n    [\"ham\", \"data4\", \"write\"]\n]\nare_rules_removed = e.remove_policies(rules)\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Policies with Conditions and Domains in Casbin\nDESCRIPTION: Specifies the RBAC policies including conditional role assignments with domain support. It defines permissions for different subjects, objects, and domains, setting up role hierarchies with time-based conditions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\np, alice, data1, read\np, data2_admin, data2, write\np, data3_admin, data3, read\np, data4_admin, data4, write\np, data5_admin, data5, read\np, data6_admin, data6, write\np, data7_admin, data7, read\np, data8_admin, data8, write\n\ng, alice, data2_admin, domain2, 0000-01-01 00:00:00, 0000-01-02 00:00:00\ng, alice, data3_admin, domain3, 0000-01-01 00:00:00, 9999-12-30 00:00:00\ng, alice, data4_admin, domain4, _, _\ng, alice, data5_admin, domain5, _, 9999-12-30 00:00:00\ng, alice, data6_admin, domain6, _, 0000-01-02 00:00:00\ng, alice, data7_admin, domain7, 0000-01-01 00:00:00, _\ng, alice, data8_admin, domain8, 9999-12-30 00:00:00, _\n```\n\n----------------------------------------\n\nTITLE: Checking Role Membership with HasRoleForUser\nDESCRIPTION: This snippet demonstrates how to check if a user belongs to a specific role using HasRoleForUser method. It returns a boolean indicating whether the user has the specified role.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nenforcer.HasRoleForUser(\"amber\", \"admin\") // true\n```\n\n----------------------------------------\n\nTITLE: Multi-Domain Pattern Matching Policy Example\nDESCRIPTION: Example CSV policy demonstrating pure domain pattern matching. It shows how to grant a user access across multiple domains using the wildcard pattern.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithPattern.mdx#2025-04-21_snippet_7\n\nLANGUAGE: csv\nCODE:\n```\np, admin, domain1, data1, read\np, admin, domain1, data1, write\np, admin, domain2, data2, read\np, admin, domain2, data2, write\n\ng, alice, admin, *\ng, bob, admin, domain2\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with File Adapter in Rust\nDESCRIPTION: This Rust code snippet shows how to initialize a Casbin enforcer using the file adapter, loading model from a configuration file and policies from a CSV file with async/await support.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nuse casbin::prelude::*;\n\nlet mut e = Enforcer::new(\"examples/basic_model.conf\", \"examples/basic_policy.csv\").await?;\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Policy Rules in Node.js\nDESCRIPTION: Removes multiple authorization rules from the current policy in an atomic operation using Node.js. Returns a boolean indicating if all rules were removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst rules = [\n    ['jack', 'data4', 'read'],\n    ['katy', 'data4', 'write'],\n    ['leyo', 'data4', 'read'],\n    ['ham', 'data4', 'write']\n];\n\nconst areRulesRemoved = await e.removePolicies(rules);\n```\n\n----------------------------------------\n\nTITLE: Getting All Domains\nDESCRIPTION: Retrieves all domains configured in the system using the GetAllDomains method.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nres, _ := e.GetAllDomains()\n```\n\n----------------------------------------\n\nTITLE: Removing Filtered Policies in Casbin\nDESCRIPTION: Demonstrates how to remove an authorization rule from the current policy using field filters. The function returns a boolean indicating whether the rule was successfully removed.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_46\n\nLANGUAGE: go\nCODE:\n```\nremoved := e.RemoveFilteredPolicy(0, \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredPolicy(0, ...p)\n```\n\nLANGUAGE: php\nCODE:\n```\n$removed = $e->removeFilteredPolicy(0, \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\nremoved = e.remove_filtered_policy(0, \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar removed = e.RemoveFilteredPolicy(\"alice\", \"data1\", \"read\");\nor\nvar removed = await e.RemoveFilteredPolicyAsync(\"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet removed = e.remove_filtered_policy(0, vec![\"alice\".to_owned(), \"data1\".to_owned(), \"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean removed = e.removeFilteredPolicy(0, \"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Authorization Server\nDESCRIPTION: Commands to build and run the Casbin authorization server for Envoy integration. This server will handle the authorization checks for service requests.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/EnvoyAuthz.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build .\n./authz\n```\n\n----------------------------------------\n\nTITLE: Getting Named Implicit Permissions for User\nDESCRIPTION: GetNamedImplicitPermissionsForUser retrieves implicit permissions for a user under a specific named policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\ne.GetNamedImplicitPermissionsForUser(\"p2\",\"alice\")\n```\n\nLANGUAGE: Python\nCODE:\n```\ne.get_named_implicit_permissions_for_user(\"p2\", \"alice\")\n```\n\n----------------------------------------\n\nTITLE: Deleting User-Specific Permissions with DeletePermissionForUser\nDESCRIPTION: This snippet demonstrates how to delete a permission for a specific user using DeletePermissionForUser. This affects only the targeted user's permission, leaving others unchanged.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(enforcer.Enforce(\"alice\", \"data1\", \"read\")) // true\nenforcer.DeletePermissionForUser(\"alice\", \"data1\", \"read\")\nfmt.Println(enforcer.Enforce(\"alice\", \"data1\", \"read\")) // false\n```\n\n----------------------------------------\n\nTITLE: Casbin Policy with Allow and Deny Rules\nDESCRIPTION: A CSV policy file with both allow and deny rules for different nginx image versions. Used with the matching Casbin model to explicitly allow one version while denying another.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\np, \"nginx:1.13.1\",allow\np, \"nginx:1.14.1\",deny\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with DBAL Adapter in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the DBAL adapter for Casbin, connecting to a MySQL database with configuration options for host, username, password, and port.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// https://github.com/php-casbin/dbal-adapter\n\nuse Casbin\\Enforcer;\nuse CasbinAdapter\\DBAL\\Adapter as DatabaseAdapter;\n\n$config = [\n    // Either 'driver' with one of the following values:\n    // pdo_mysql,pdo_sqlite,pdo_pgsql,pdo_oci (unstable),pdo_sqlsrv,pdo_sqlsrv,\n    // mysqli,sqlanywhere,sqlsrv,ibm_db2 (unstable),drizzle_pdo_mysql\n    'driver'     => 'pdo_mysql',\n    'host' => '127.0.0.1',\n    'dbname' => 'test',\n    'user' => 'root',\n    'password' => '',\n    'port' => '3306',\n];\n\n$a = DatabaseAdapter::newAdapter($config);\n$e = new Enforcer('examples/basic_model.conf', $a);\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Enforcer with Diesel MySQL Adapter in Rust\nDESCRIPTION: This Rust code snippet demonstrates using Diesel adapter with MySQL for Casbin, configuring connection options for the database before initializing the enforcer.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\n// https://github.com/casbin-rs/diesel-adapter\n// make sure you activate feature `mysql`\n\nuse casbin::prelude::*;\nuse diesel_adapter::{ConnOptions, DieselAdapter};\n\nlet mut conn_opts = ConnOptions::default();\nconn_opts\n    .set_hostname(\"127.0.0.1\")\n    .set_port(3306)\n    .set_host(\"127.0.0.1:3306\") // overwrite hostname, port config\n    .set_database(\"casbin\")\n    .set_auth(\"casbin_rs\", \"casbin_rs\");\n\nlet a = DieselAdapter::new(conn_opts)?;\nlet mut e = Enforcer::new(\"examples/basic_model.conf\", a).await?;\n```\n\n----------------------------------------\n\nTITLE: Loading Casbin Model from String Literal\nDESCRIPTION: Example demonstrating how to initialize a Casbin model from a multi-line string literal in Go, which eliminates the need for maintaining separate model files.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ModelStorage.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/casbin/casbin/v2\"\n    \"github.com/casbin/casbin/v2/model\"\n)\n\n// Initialize the model from a string.\ntext :=\n`\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n`\nm, _ := model.NewModelFromString(text)\n\n// Load the policy rules from the .CSV file adapter.\n// Replace it with your adapter to avoid using files.\na := fileadapter.NewAdapter(\"examples/rbac_policy.csv\")\n\n// Create the enforcer.\ne := casbin.NewEnforcer(m, a)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Subject Token Index in Go\nDESCRIPTION: Go code example for setting a custom subject token index when the token name is not the default 'sub'. This must be called after initializing the enforcer to properly handle operations like DeleteUser.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBAC.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ne.SetFieldIndex(\"p\", constant.SubjectIndex, 2) // index starts from 0\nok, err := e.DeleteUser(\"alice\") // without SetFieldIndex, it will raise an error\n```\n\n----------------------------------------\n\nTITLE: CSV Policy with Special Characters\nDESCRIPTION: Examples showing correct CSV formatting when dealing with commas and double quotes in policy rules. Demonstrates proper escaping techniques.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PolicyStorage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, alice, \"data1,data2\", read\np, alice, data, \"r.act in (\"\"get\"\", \"\"post\"\")\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains for User\nDESCRIPTION: GetDomainsForUser retrieves all domains associated with a user's permissions and roles.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nresult, err := e.GetDomainsForUser(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Adding Named Role Inheritance Rule with AddNamedGroupingPolicy\nDESCRIPTION: Shows how to add a named role inheritance rule to the current policy using the AddNamedGroupingPolicy function. The function returns true if the rule is added successfully, false if it already exists.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_55\n\nLANGUAGE: Go\nCODE:\n```\nadded := e.AddNamedGroupingPolicy(\"g\", \"group1\", \"data2_admin\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst added = await e.addNamedGroupingPolicy('g', 'group1', 'data2_admin')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$added = $e->addNamedGroupingPolicy(\"g\", \"group1\", \"data2_admin\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nadded = e.add_named_grouping_policy(\"g\", \"group1\", \"data2_admin\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar added = e.AddNamedGroupingPolicy(\"g\", \"group1\", \"data2_admin\");\nor\nvar added = await e.AddNamedGroupingPolicyAsync(\"g\", \"group1\", \"data2_admin\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet added = e.add_named_grouping_policy(\"g\", vec![\"group1\".to_owned(), \"data2_admin\".to_owned()]).await?;\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean added = e.addNamedGroupingPolicy(\"g\", \"group1\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Explicit File Adapter Initialization in Rust\nDESCRIPTION: This Rust code snippet demonstrates explicit initialization of the file adapter, showing how to create a file adapter instance separately before passing it to the enforcer with async/await support.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\nuse casbin::prelude::*;\n\nlet a = FileAdapter::new(\"examples/basic_policy.csv\");\nlet e = Enforcer::new(\"examples/basic_model.conf\", a).await?;\n```\n\n----------------------------------------\n\nTITLE: Backend Implementation for Casbin.js with Go\nDESCRIPTION: Example of setting up a backend API endpoint in Go using Beego to provide permission data to Casbin.js. The API retrieves permissions for a specific user using the CasbinJsGetPermissionForUser function.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/FrontendUsage.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Router\nbeego.Router(\"api/casbin\", &controllers.APIController{}, \"GET:GetFrontendPermission\")\n\n// Controller\nfunc (c *APIController) GetFrontendPermission() {\n    // Get the visitor from the GET parameters. (The key is \"casbin_subject\")\n    visitor := c.Input().Get(\"casbin_subject\")\n    // `e` is an initialized instance of Casbin Enforcer\n    c.Data[\"perm\"] = casbin.CasbinJsGetPermissionForUser(e, visitor)\n    // Pass the data to the frontend.\n    c.ServeJSON()\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Example in Casbin\nDESCRIPTION: Shows a sample log output from Casbin. Logging is not enabled by default and can be toggled via Enforcer.EnableLog() or the last parameter of NewEnforcer().\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/LogError.mdx#2025-04-21_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n2017/07/15 19:43:56 [Request: alice, data1, read ---> true]\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin.js with npm or yarn\nDESCRIPTION: Commands for installing Casbin.js and its dependencies using npm or yarn package managers.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/FrontendUsage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install casbin.js\nnpm install casbin\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add casbin.js\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Priority Field in Casbin with Go\nDESCRIPTION: Demonstrates how to set a custom priority field index in Casbin and reload the policies to apply the custom priority configuration.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PriorityModel.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ne, _ := NewEnforcer(\"./example/priority_model_explicit_customized.conf\",\n                    \"./example/priority_policy_explicit_customized.csv\")\n// Due to the customized priority token, the enforcer fails to handle the priority.\nok, err := e.Enforce(\"bob\", \"data2\", \"read\") // the result will be `true, nil`\n// Set PriorityIndex and reload\ne.SetFieldIndex(\"p\", constant.PriorityIndex, 0)\nerr := e.LoadPolicy()\nif err != nil {\n    log.Fatalf(\"LoadPolicy: %v\", err)\n}\nok, err := e.Enforce(\"bob\", \"data2\", \"read\") // the result will be `false, nil`\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Subjects in Casbin RBAC using Go\nDESCRIPTION: This Go code snippet shows how to use the Casbin Enforcer to retrieve all subjects (both users and roles) in the RBAC model. It demonstrates that Casbin treats both users and roles as subjects.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CasbinRBACAndRBAC96.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ne.GetAllSubjects()\n```\n\n----------------------------------------\n\nTITLE: Getting Allowed Object Conditions\nDESCRIPTION: GetAllowedObjectConditions returns object conditions that a user can access, with customizable prefix filtering.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\nconditions, err := e.GetAllowedObjectConditions(\"alice\", \"read\", \"r.obj.\")\n```\n\n----------------------------------------\n\nTITLE: Updating Grouping Policies in Casbin\nDESCRIPTION: Shows how to update existing grouping policies by replacing old rules with new ones in the 'g' section of the policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_65\n\nLANGUAGE: go\nCODE:\n```\nsucceed, err : = e.UpdateGroupingPolicy([]string{\"data3_admin\", \"data4_admin\"}, []string{\"admin\", \"data4_admin\"})\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean succeed = e.updateGroupingPolicy(Arrays.asList(\"data3_admin\", \"data4_admin\"), Arrays.asList(\"admin\", \"data4_admin\"));\n```\n\n----------------------------------------\n\nTITLE: Getting All Roles by Domain\nDESCRIPTION: Retrieves all roles associated with a specific domain using the GetAllRolesByDomain method. Does not include roles with inheritance relationships.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetAllRolesByDomain(\"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Generating Certificates for K8s-authz Authentication\nDESCRIPTION: Shell script command to generate certificates and keys for user authentication in the K8s-authz system. These certificates are required for secure communication between the admission controller and the Kubernetes API server.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sAuthz.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gen_cert.sh\n```\n\n----------------------------------------\n\nTITLE: Sample ACL Policy Definitions in Casbin CSV Format\nDESCRIPTION: Example CSV policy definitions for ACL model that grants read access to alice for data1 and write access to bob for data2.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/UnderstandingCasbinMatchingInDetail.mdx#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, alice, read, data1\np, bob, write, data2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Implicit Users for Resource\nDESCRIPTION: GetImplicitUsersForResource returns all users who have access to a specific resource, including inherited permissions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\nImplicitUsers, err := e.GetImplicitUsersForResource(\"data2\")\n```\n\n----------------------------------------\n\nTITLE: Deploying K8s-authz to Kubernetes Cluster\nDESCRIPTION: Command to deploy the validation controller and webhook to the Kubernetes cluster using kubectl. This applies the configuration defined in the deployment.yaml file.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sAuthz.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: ACL Access Request Example in Casbin\nDESCRIPTION: Example of an access request in Casbin's CSV format that checks if alice has read permission for data1.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/UnderstandingCasbinMatchingInDetail.mdx#2025-04-21_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nalice, read, data1\n```\n\n----------------------------------------\n\nTITLE: Permission Check with Policy Explanation\nDESCRIPTION: Example of using enforceEx to check permissions and display the effective policy that allows the access. This is useful for understanding which policy rule granted the permission.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CommandLineTools.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./casbin enforceEx -m \"examples/rbac_model.conf\" -p \"examples/rbac_policy.csv\" \"alice\" \"data2\" \"write\"\n```\n\n----------------------------------------\n\nTITLE: Adding Policies with Exception Handling using AddPoliciesEx in Go\nDESCRIPTION: Adds multiple authorization rules to the current policy. If a rule already exists, it will be skipped, but other non-existent rules will still be added. Returns success status and any error encountered.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\nok, err := e.AddPoliciesEx([][]string{{\"user1\", \"data1\", \"read\"}, {\"user2\", \"data2\", \"read\"}})\n```\n\n----------------------------------------\n\nTITLE: Getting All Users by Domain\nDESCRIPTION: Retrieves all users associated with a specific domain using the GetAllUsersByDomain method. Returns an empty array if no domain is defined in the model.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetAllUsersByDomain(\"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Using the Effector Interface in Go\nDESCRIPTION: This snippet shows how to create an Effector instance and use it to merge effects. It demonstrates the basic usage of the MergeEffects() function with the necessary parameters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Effector.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar e Effector\nEffect, explainIndex, err = e.MergeEffects(expr, effects, matches, policyIndex, policyLength)\n```\n\n----------------------------------------\n\nTITLE: Building K8s-authz Docker Image\nDESCRIPTION: Command to build a Docker image for the K8s-authz admission controller. The image version should match the one specified in the deployment configuration file.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sAuthz.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t casbin/k8s_authz:0.1 .\n```\n\n----------------------------------------\n\nTITLE: Checking Grouping Policies in Casbin\nDESCRIPTION: Demonstrates how to check if a role inheritance rule exists in the policy. Returns a boolean indicating whether the specified rule is present.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_50\n\nLANGUAGE: go\nCODE:\n```\nhas := e.HasGroupingPolicy(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst has = await e.hasGroupingPolicy('alice', 'data2_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$has = $e->hasGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nhas = e.has_grouping_policy(\"alice\", \"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar has = e.HasGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet has = e.has_grouping_policy(vec![\"alice\".to_owned(), \"data2_admin\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean has = e.hasGroupingPolicy(\"alice\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Policy Effect Definition Examples\nDESCRIPTION: Various examples of policy effect definitions showing allow-override and deny-override patterns.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[policy_effect]\ne = some(where (p.eft == allow))\n```\n\nLANGUAGE: ini\nCODE:\n```\n[policy_effect]\ne = !some(where (p.eft == deny))\n```\n\nLANGUAGE: ini\nCODE:\n```\n[policy_effect]\ne = some(where (p.eft == allow)) && !some(where (p.eft == deny))\n```\n\n----------------------------------------\n\nTITLE: Hierarchical RBAC Access Request Example in Casbin\nDESCRIPTION: Example access request in Casbin's CSV format that tests if alice has inherited resourceGroup read permission (rg-read) for resourceGroup rg1 based on subscription-level permissions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/UnderstandingCasbinMatchingInDetail.mdx#2025-04-21_snippet_8\n\nLANGUAGE: csv\nCODE:\n```\nalice, rg-read, rg1\n```\n\n----------------------------------------\n\nTITLE: Permission Check with Inline Configuration\nDESCRIPTION: Example of checking permissions using inline model and policy definitions. The model and policy are defined directly in the command line instead of using separate files.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CommandLineTools.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./casbin enforce -m \"[request_definition]\\nr = sub, obj, act\\n[policy_definition]\\np = sub, obj, act\\n[role_definition]\\ng = _, _\\n[policy_effect]\\ne = some(where (p.eft == allow))\\n[matchers]\\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\" -p \"p, alice, data1, read\\np, bob, data2, write\\np, data2_admin, data2, read\\np, data2_admin, data2, write\\ng, alice, data2_admin\" \"alice\" \"data1\" \"read\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Named Policy Rules\nDESCRIPTION: GetNamedPolicy retrieves all authorization rules from a specific named policy. Takes a policy name parameter (e.g. 'p') and returns a list of rules.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nnamedPolicy := e.GetNamedPolicy(\"p\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst namedPolicy = await e.getNamedPolicy('p')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$namedPolicy = $e->getNamedPolicy(\"p\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nnamed_policy = e.get_named_policy(\"p\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar namedPolicy = e.GetNamedPolicy(\"p\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet named_policy = e.get_named_policy(\"p\");\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> namedPolicy = e.getNamedPolicy(\"p\");\n```\n\n----------------------------------------\n\nTITLE: Adding Link in RoleManager for Go, Node.js, and Python\nDESCRIPTION: Demonstrates how to add an inheritance link between two roles in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nrm.AddLink(\"u1\", \"g1\", \"domain1\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait rm.addLink('u1', 'g1', 'domain1');\n```\n\nLANGUAGE: python\nCODE:\n```\nrm.add_link(\"u1\", \"g1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Adding Named Domain Matching Function in Go\nDESCRIPTION: Go implementation for adding a named domain matching function to the Casbin enforcer. This enables pattern matching in domain/tenant specifications.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithPattern.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ne.AddNamedDomainMatchingFunc(\"g\", \"KeyMatch2\", util.KeyMatch2)\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Certificates\nDESCRIPTION: Command to create a Kubernetes secret for securely storing the certificates used by K8s-authz. This is recommended for production environments to protect the certificate files.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sAuthz.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic casbin -n default \\\n  --from-file=key.pem=certs/casbin-key.pem \\\n  --from-file=cert.pem=certs/casbin-crt.pem\n```\n\n----------------------------------------\n\nTITLE: Defining a Casbin Policy to Block Specific Image Tags\nDESCRIPTION: A simple CSV policy file that specifies which image tags should be denied. This policy works with the corresponding Casbin model to block deployments using the specified image tag.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, \"1.14.1\",deny\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Policy Rules in Go\nDESCRIPTION: Removes multiple authorization rules from the current policy in an atomic operation. Returns true if all rules were removed, or false if any rule doesn't exist or is inconsistent with the current policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_41\n\nLANGUAGE: Go\nCODE:\n```\nrules := [][] string {\n    []string {\"jack\", \"data4\", \"read\"},\n    []string {\"katy\", \"data4\", \"write\"},\n    []string {\"leyo\", \"data4\", \"read\"},\n    []string {\"ham\", \"data4\", \"write\"},\n}\n\nareRulesRemoved := e.RemovePolicies(rules)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Named Grouping Policy in Casbin\nDESCRIPTION: GetFilteredNamedGroupingPolicy retrieves role inheritance rules for a specific named policy with additional filtering. Parameters include the policy name, position to filter on, and the filter value.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nnamedGroupingPolicy := e.GetFilteredNamedGroupingPolicy(\"g\", 0, \"alice\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst namedGroupingPolicy = await e.getFilteredNamedGroupingPolicy('g', 0, 'alice')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$namedGroupingPolicy = $e->getFilteredNamedGroupingPolicy(\"g\", 0, \"alice\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nnamed_grouping_policy = e.get_filtered_named_grouping_policy(\"g\", 0, \"alice\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar namedGroupingPolicy = e.GetFilteredNamedGroupingPolicy(\"g\", 0, \"alice\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet named_grouping_policy = e.get_filtered_named_groupingPolicy(\"g\", 0, vec![\"alice\".to_owned()]);\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> filteredNamedGroupingPolicy = e.getFilteredNamedGroupingPolicy(\"g\", 0, \"alice\");\n```\n\n----------------------------------------\n\nTITLE: Sample Policy Rules in CSV Format\nDESCRIPTION: Shows how policy rules are written in CSV format matching the policy definitions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\np, alice, data1, read\np2, bob, write-all-objects\n```\n\n----------------------------------------\n\nTITLE: Retrieving Actions from Named Policy\nDESCRIPTION: GetAllNamedActions retrieves all actions from a specific named policy. Takes a policy name parameter (e.g. 'p') and returns an array/list of action strings.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nallNamedActions := e.GetAllNamedActions(\"p\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst allNamedActions = await e.getAllNamedActions('p')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$allNamedActions = $e->getAllNamedActions(\"p\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nall_named_actions = e.get_all_named_actions(\"p\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar allNamedActions = e.GetAllNamedActions(\"p\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet all_named_actions = e.get_all_named_actions(\"p\");\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<String> allNamedActions = e.getAllNamedActions(\"p\");\n```\n\n----------------------------------------\n\nTITLE: Initializing DistributedEnforcer in Go\nDESCRIPTION: This snippet demonstrates how to create a new DistributedEnforcer instance in Go. It initializes the enforcer with a basic model configuration file and a basic policy CSV file.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Dispatchers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne, _ := casbin.NewDistributedEnforcer(\"examples/basic_model.conf\", \"examples/basic_policy.csv\")\n```\n\n----------------------------------------\n\nTITLE: Getting Domains for a User in RoleManager for Go\nDESCRIPTION: Shows how to get the domains that a user has in Go.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nresult, err := rm.GetDomains(name)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Policy with Domain Token in Casbin\nDESCRIPTION: This snippet demonstrates how to define a custom policy with a domain token named 'domain' instead of the conventional 'dom' in Casbin.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomains.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# `domain` here for `dom`\n[policy_definition]\np = sub, obj, act, domain\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for K8s-Gatekeeper\nDESCRIPTION: Docker build command to create the K8s-Gatekeeper image required for installation. This targets the webhook component specifically.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker build --target webhook -t k8s-gatekeeper .\n```\n\n----------------------------------------\n\nTITLE: Adding Named Role Inheritance Rules with AddNamedGroupingPoliciesEx in Go\nDESCRIPTION: Shows the use of AddNamedGroupingPoliciesEx function in Go, which adds named role inheritance rules to the current policy. Unlike AddNamedGroupingPolicies, it adds non-existent rules even if some rules already exist.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_57\n\nLANGUAGE: Go\nCODE:\n```\nok, err := e.AddNamedGroupingPoliciesEx(\"g\", [][]string{{\"user1\", \"member\"}, {\"user2\", \"member\"}})\n```\n\n----------------------------------------\n\nTITLE: Using EnforceContext with Go Enforcer\nDESCRIPTION: Example usage of EnforceContext in Go to switch between different policy definitions during enforcement, demonstrating both default and custom context enforcement.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nenforceContext := NewEnforceContext(\"2\")\n// You can also specify a certain type individually\nenforceContext.EType = \"e\"\n// Don't pass in EnforceContext; the default is r, p, e, m\ne.Enforce(\"alice\", \"data2\", \"read\")        // true\n// Pass in EnforceContext\ne.Enforce(enforceContext, struct{ Age int }{Age: 70}, \"/data1\", \"read\")        //false\ne.Enforce(enforceContext, struct{ Age int }{Age: 30}, \"/data1\", \"read\")        //true\n```\n\n----------------------------------------\n\nTITLE: Checking Named Grouping Policies in Casbin\nDESCRIPTION: Shows how to check if a named role inheritance rule exists. The function takes the group name and rule components and returns a boolean indicating whether the rule exists.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_51\n\nLANGUAGE: go\nCODE:\n```\nhas := e.HasNamedGroupingPolicy(\"g\", \"alice\", \"data2_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst has = await e.hasNamedGroupingPolicy('g', 'alice', 'data2_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$has = $e->hasNamedGroupingPolicy(\"g\", \"alice\", \"data2_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\nhas = e.has_named_grouping_policy(\"g\", \"alice\", \"data2_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar has = e.HasNamedGroupingPolicy(\"g\", \"alice\", \"data2_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet has = e.has_named_grouping_policy(\"g\", vec![\"alice\".to_owned(), \"data2_admin\".to_owned()]);\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean has = e.hasNamedGroupingPolicy(\"g\", \"alice\", \"data2_admin\");\n```\n\n----------------------------------------\n\nTITLE: Implementing an ACL Model in Casbin TOML Configuration\nDESCRIPTION: A basic Access Control List (ACL) model definition in Casbin TOML format that defines request structure, policy definition, policy effect, and matchers for simple subject-action-object permissions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/UnderstandingCasbinMatchingInDetail.mdx#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[request_definition]\nr = sub, act, obj\n\n[policy_definition]\np = sub, act, obj\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Key-Getting in Casbin\nDESCRIPTION: The standard signature for built-in key-getting functions in Casbin. These functions extract values from URLs based on patterns and key names.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Function.mdx#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbool function_name(string url, string pattern, string key_name)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Implicit Permissions for User\nDESCRIPTION: GetImplicitPermissionsForUser retrieves all permissions for a user, including those inherited through roles.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\ne.GetImplicitPermissionsForUser(\"alice\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait e.getImplicitPermissionsForUser(\"alice\")\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$e->getImplicitPermissionsForUser(\"alice\");\n```\n\nLANGUAGE: Python\nCODE:\n```\ne.get_implicit_permissions_for_user(\"alice\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar implicitPermissions = e.GetImplicitPermissionsForUser(\"alice\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\ne.get_implicit_permissions_for_user(\"alice\", None); // No domain\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> implicitPermissions = e.getImplicitPermissionsForUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Running K8s-Gatekeeper as External Webhook\nDESCRIPTION: Commands to run K8s-Gatekeeper as an external webhook outside the Kubernetes cluster and register it with the cluster.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy\ngo mod vendor\ngo run cmd/webhook/main.go\nkubectl apply -f config/auth.casbin.org_casbinmodels.yaml \nkubectl apply -f config/auth.casbin.org_casbinpolicies.yaml\nkubectl apply -f config/webhook_external.yaml \n```\n\n----------------------------------------\n\nTITLE: Checking Named Policy Existence in Casbin\nDESCRIPTION: HasNamedPolicy determines whether a specific authorization rule exists in a named policy. The first parameter is the policy name, followed by the rule components.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nhasNamedPolicy := e.HasNamedPolicy(\"p\", \"data2_admin\", \"data2\", \"read\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst hasNamedPolicy = await e.hasNamedPolicy('p', 'data2_admin', 'data2', 'read')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$hasNamedPolicy = $e->hasNamedPolicy(\"p\", \"data2_admin\", \"data2\", \"read\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nhas_named_policy = e.has_named_policy(\"p\", \"data2_admin\", \"data2\", \"read\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar hasNamedPolicy = e.HasNamedPolicy(\"p\", \"data2_admin\", \"data2\", \"read\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet has_named_policy = e.has_named_policy(\"p\", vec![\"data2_admin\".to_owned(), \"data2\".to_owned(), \"read\".to_owned()]);\n```\n\nLANGUAGE: Java\nCODE:\n```\nboolean hasNamedPolicy = e.hasNamedPolicy(\"p\", \"data2_admin\", \"data2\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Casbin Authorization on APISIX Route Using File Paths\nDESCRIPTION: cURL command to enable the authz-casbin plugin on an APISIX route using model and policy file paths. It configures the plugin to look for the username in a specific header for subject identification in authorization decisions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '\n{\n    \"plugins\": {\n        \"authz-casbin\": {\n            \"model_path\": \"/path/to/model.conf\",\n            \"policy_path\": \"/path/to/policy.csv\",\n            \"username\": \"username\"\n        }\n    },\n    \"upstream\": {\n        \"nodes\": {\n            \"127.0.0.1:1980\": 1\n        },\n        \"type\": \"roundrobin\"\n    },\n    \"uri\": \"/*\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Named Policy Rules\nDESCRIPTION: GetFilteredNamedPolicy retrieves filtered authorization rules from a named policy. Takes policy name, field index and filter value as parameters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nfilteredNamedPolicy = e.GetFilteredNamedPolicy(\"p\", 0, \"bob\")\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst filteredNamedPolicy = await e.getFilteredNamedPolicy('p', 0, 'bob')\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$filteredNamedPolicy = $e->getFilteredNamedPolicy(\"p\", 0, \"bob\");\n```\n\nLANGUAGE: Python\nCODE:\n```\nfiltered_named_policy = e.get_filtered_named_policy(\"p\", 0, \"alice\")\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar filteredNamedPolicy = e.GetFilteredNamedPolicy(\"p\", 0, \"alice\");\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet filtered_named_policy = e.get_filtered_named_policy(\"p\", 0, vec![\"bob\".to_owned()]);\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<List<String>> filteredNamedPolicy = e.getFilteredNamedPolicy(\"p\", 0, \"bob\");\n```\n\n----------------------------------------\n\nTITLE: Adding a Policy Rule (Java CLI only)\nDESCRIPTION: Example of adding a new policy rule to the policy file using the Java CLI. This grants Alice write permission on data2.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CommandLineTools.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./casbin addPolicy -m \"examples/rbac_model.conf\" -p \"examples/rbac_policy.csv\" \"alice\" \"data2\" \"write\"\n```\n\n----------------------------------------\n\nTITLE: Adding Named Policies with Exception Handling in Go\nDESCRIPTION: Adds multiple authorization rules to a named policy. If a rule already exists, it will be skipped, but other non-existent rules will still be added. Returns success status and any error encountered.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\nok, err := e.AddNamedPoliciesEx(\"p\", [][]string{{\"user1\", \"data1\", \"read\"}, {\"user2\", \"data2\", \"read\"}})\n```\n\n----------------------------------------\n\nTITLE: Merging Effects with MergeEffects() in Go\nDESCRIPTION: This snippet demonstrates how to use the MergeEffects() function in Casbin. It merges all matching results collected by the enforcer into a single decision, processing effects and matches based on the provided expression.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Effector.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nEffect, explainIndex, err = e.MergeEffects(expr, effects, matches, policyIndex, policyLength)\n```\n\n----------------------------------------\n\nTITLE: Adding Named Matching Function in Node.js\nDESCRIPTION: Node.js implementation for adding a named matching function to the Casbin enforcer. This registers the keyMatch2Func for pattern matching in role assignments.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithPattern.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.addNamedMatchingFunc('g', Util.keyMatch2Func);\n```\n\n----------------------------------------\n\nTITLE: Generating CA Private Key in Shell\nDESCRIPTION: This command generates a private key for the fake Certificate Authority (CA) using OpenSSL with DES3 encryption and 2048-bit key length.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nopenssl genrsa -des3 -out ca.key 2048\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Grouping Policies in Casbin\nDESCRIPTION: Demonstrates how to remove multiple role inheritance rules atomically using RemoveGroupingPolicies. Returns true only if all rules are consistent with current policy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_59\n\nLANGUAGE: go\nCODE:\n```\nrules := [][] string {\n                []string {\"ham\", \"data4_admin\"},\n                []string {\"jack\", \"data5_admin\"},\n        }\n\nareRulesRemoved := e.RemoveGroupingPolicies(rules)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupingRules = [\n    ['ham', 'data4_admin'],\n    ['jack', 'data5_admin']\n  ];\n\nconst areRulesRemoved = await e.removeGroupingPolicies(groupingRules);\n```\n\n----------------------------------------\n\nTITLE: Removing a Role from a User with DeleteRoleForUser()\nDESCRIPTION: Removes a role from a user. Returns false if the user does not have the specified role (indicating no change was made).\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ne.DeleteRoleForUser(\"alice\", \"data1_admin\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deleteRoleForUser('alice', 'data1_admin')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deleteRoleForUser(\"alice\", \"data1_admin\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_role_for_user(\"alice\", \"data1_admin\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deleted = e.DeleteRoleForUser(\"alice\", \"data1_admin\");\nor\nvar deleted = await e.DeleteRoleForUser(\"alice\", \"data1_admin\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted = e.delete_role_for_user(\"alice\", \"data1_admin\", None).await?; // No domain\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean deleted = e.deleteRoleForUser(\"alice\", \"data1_admin\");\n```\n\n----------------------------------------\n\nTITLE: Installing casbin-go-cli from Source\nDESCRIPTION: Instructions to clone the Go CLI repository and build the binary executable. This involves cloning the repository and running the go build command to create the casbin executable.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CommandLineTools.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casbin/casbin-go-cli.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd casbin-go-cli\ngo build -o casbin\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Casbin Enforcer in Go\nDESCRIPTION: Demonstrates how to enable and disable the Casbin enforcer at runtime using Enforcer.EnableEnforce(). When disabled, Enforcer.Enforce() always returns true.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/LogError.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ne := casbin.NewEnforcer(\"examples/basic_model.conf\", \"examples/basic_policy.csv\")\n\n// Will return false.\n// By default, the enforcer is enabled.\ne.Enforce(\"non-authorized-user\", \"data1\", \"read\")\n\n// Disable the enforcer at runtime.\ne.EnableEnforce(false)\n\n// Will return true for any request.\ne.Enforce(\"non-authorized-user\", \"data1\", \"read\")\n\n// Enable the enforcer again.\ne.EnableEnforce(true)\n\n// Will return false.\ne.Enforce(\"non-authorized-user\", \"data1\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: Adding Named Matching Function with Enforcer in Go and Node.js\nDESCRIPTION: Shows how to add a named matching function using an Enforcer instance in Go and Node.js.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ne, _ := casbin.NewEnforcer(\"path/to/model\", \"path/to/policy\")\ne.AddNamedMatchingFunc(\"g\", \"\", util.MatchKey)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst e = await newEnforcer('path/to/model', 'path/to/policy');\nawait e.addNamedMatchingFunc('g', Util.keyMatchFunc);\n```\n\n----------------------------------------\n\nTITLE: Checking Link Existence in RoleManager for Go, Node.js, and Python\nDESCRIPTION: Demonstrates how to check if a link exists between two roles in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nrm.HasLink(\"u1\", \"g1\", \"domain1\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait rm.hasLink('u1', 'g1', 'domain1');\n```\n\nLANGUAGE: python\nCODE:\n```\nrm.has_link(\"u1\", \"g1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Generating Webhook Server Private Key in Shell\nDESCRIPTION: These commands generate a private key for the webhook server using OpenSSL with DES3 encryption and 2048-bit key length, then remove the password protection.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nopenssl genrsa -des3 -out server.key 2048\nopenssl rsa -in server.key -out server.key\n```\n\n----------------------------------------\n\nTITLE: Using the cannot() Method for Permission Checks\nDESCRIPTION: Example of checking permissions using the cannot() method, which also returns a Promise. The success parameter indicates whether the permission negation check completed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/FrontendUsage.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nresult = authorizer.cannot(\"read\", \"data2\");\nresult.then((success, failed) => {\n    if (success) {\n        console.log(\"you cannot read data2\");\n    } else {\n        console.log(\"you can read data2\");\n    }\n});\n// output: you can read data2\n```\n\n----------------------------------------\n\nTITLE: Defining Model with Explicit Priority in Casbin\nDESCRIPTION: Configures a model that uses explicit numerical priority values in policy rules. Lower numerical values indicate higher priority.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PriorityModel.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[policy_definition]\np = customized_priority, sub, obj, act, eft\n```\n\n----------------------------------------\n\nTITLE: Semantic Commit Message Format\nDESCRIPTION: The recommended format for commit messages when contributing to Casbin projects. It follows the Conventional Commits specification with a type, optional scope, and subject.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Contributing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<type>(<scope>): <subject>\n```\n\n----------------------------------------\n\nTITLE: Rendering Go Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for Go programming language using the MiddlewareMDTable component with Go-specific middleware data. This creates a structured display of available middleware options for Go.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewareGoData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: Setting a New Adapter in Go for Migration\nDESCRIPTION: This Go code snippet shows how to change the adapter for an existing enforcer as part of the migration process between adapters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\ne.SetAdapter(B)\n```\n\n----------------------------------------\n\nTITLE: Setting Loggers for Different Enforcers in Go\nDESCRIPTION: Demonstrates how to set different loggers for multiple enforcers in Go. Each enforcer can have its own logger, which can be changed at runtime.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/LogError.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Set a default logger as enforcer e1's logger.\n// This operation can also be seen as changing the logger of e1 at runtime.\ne1.SetLogger(&Log.DefaultLogger{})\n\n// Set another logger as enforcer e2's logger.\ne2.SetLogger(&YouOwnLogger)\n\n// Set your logger when initializing enforcer e3.\ne3, _ := casbin.NewEnforcer(\"examples/rbac_model.conf\", a, logger)\n```\n\n----------------------------------------\n\nTITLE: Getting Users for a Role in RoleManager for Go, Node.js, and Python\nDESCRIPTION: Demonstrates how to get the users that inherit a role in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nrm.GetUsers(\"g1\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait rm.getUsers('g1');\n```\n\nLANGUAGE: python\nCODE:\n```\nrm.get_users(\"g1\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSL for Certificate Signing in INI\nDESCRIPTION: This INI configuration snippet shows the necessary additions to the OpenSSL config file for generating a certificate with Subject Alternative Names (SAN).\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[alt_names]\nDNS.2=<The domain you want>\n```\n\n----------------------------------------\n\nTITLE: Printing Roles in RoleManager for Go, Node.js, and Python\nDESCRIPTION: Shows how to print all the roles to log in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nrm.PrintRoles()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait rm.printRoles();\n```\n\nLANGUAGE: python\nCODE:\n```\nrm.print_roles()\n```\n\n----------------------------------------\n\nTITLE: Casbin License Header for New Files\nDESCRIPTION: The standard Apache 2.0 license header that must be included at the top of any new files contributed to Casbin projects. This ensures proper copyright attribution and license information.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Contributing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n// Copyright 2021 The casbin Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Displaying Cloud Native Projects Table in Go\nDESCRIPTION: This code snippet creates a table showing Go-based cloud native projects that use Casbin for authorization. It includes projects for Kubernetes, Istio/Envoy, and KubeSphere.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CloudNative.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nProject | Author | Description\n---- | ---- | ----\n[k8s-authz](https://github.com/casbin/k8s-authz) | Casbin | Authorization middleware for [Kubernetes](https://kubernetes.io/)\n[envoy-authz](https://github.com/casbin/envoy-authz) | Casbin | Authorization middleware for [Istio](https://istio.io/) and [Envoy](https://envoyproxy.io/)\n[kubesphere-authz](https://github.com/casbin/kubesphere-authz) | Casbin | Authorization middleware for [kubeSphere](https://kubesphere.io/)\n```\n\n----------------------------------------\n\nTITLE: Using AutoSave Feature with MySQL Adapter in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the AutoSave feature with a MySQL adapter, showing how to enable and disable automatic policy synchronization with the storage backend.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"github.com/casbin/casbin\"\n    \"github.com/casbin/xorm-adapter\"\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\n// By default, the AutoSave option is enabled for an enforcer.\na := xormadapter.NewAdapter(\"mysql\", \"mysql_username:mysql_password@tcp(127.0.0.1:3306)/\")\ne := casbin.NewEnforcer(\"examples/basic_model.conf\", a)\n\n// Disable the AutoSave option.\ne.EnableAutoSave(false)\n\n// Because AutoSave is disabled, the policy change only affects the policy in Casbin enforcer,\n// it doesn't affect the policy in the storage.\ne.AddPolicy(...)\ne.RemovePolicy(...)\n\n// Enable the AutoSave option.\ne.EnableAutoSave(true)\n\n// Because AutoSave is enabled, the policy change not only affects the policy in Casbin enforcer,\n// but also affects the policy in the storage.\ne.AddPolicy(...)\ne.RemovePolicy(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Logger for RoleManager in Go\nDESCRIPTION: Demonstrates how to set the role manager's logger in Go.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nlogger := log.DefaultLogger{}\nlogger.EnableLog(true)\nrm.SetLogger(&logger)\n_ = rm.PrintRoles()\n```\n\n----------------------------------------\n\nTITLE: Getting Users for a Role in a Domain\nDESCRIPTION: Retrieves all users who have been assigned a specific role within a particular domain using the GetUsersForRoleInDomain method.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres := e.GetUsersForRoleInDomain(\"admin\", \"domain1\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = e.getUsersForRoleInDomain(\"admin\", \"domain1\")\n```\n\nLANGUAGE: python\nCODE:\n```\nres = e.get_users_for_role_in_domain(\"admin\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate Signing Request in Shell\nDESCRIPTION: This command generates a Certificate Signing Request (CSR) for the webhook server using the modified OpenSSL configuration file.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nopenssl req -new -nodes -keyout server.key -out server.csr -config openssl.cnf\n```\n\n----------------------------------------\n\nTITLE: Displaying Cloud Native Projects Table in Node.js\nDESCRIPTION: This code snippet creates a table showing Node.js-based cloud native projects that use Casbin for authorization. It includes the ODPF Shield project, which is a cloud native role-based authorization-aware reverse-proxy service.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CloudNative.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nProject | Author | Description\n---- | ---- | ----\n[ODPF Shield](https://github.com/odpf/shield) | [Open Data Platform](https://github.com/odpf) | ODPF Shield is a cloud native role-based authorization-aware reverse-proxy service.\n```\n\n----------------------------------------\n\nTITLE: Getting User Roles with Casbin in Lua\nDESCRIPTION: This snippet demonstrates how to retrieve all roles assigned to a user at runtime using Casbin's RBAC API in Lua. The GetRolesForUser method is accessed with the colon operator, following Lua's object method syntax.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_21\n\nLANGUAGE: Lua\nCODE:\n```\nlocal roles = e:GetRolesForUser(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Installing K8s-Gatekeeper with Helm\nDESCRIPTION: Helm command to install K8s-Gatekeeper using the provided Helm chart, which simplifies the deployment process.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhelm install k8sgatekeeper ./k8sgatekeeper\n```\n\n----------------------------------------\n\nTITLE: Rendering C++ Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for C++ programming language using the MiddlewareMDTable component with C++-specific middleware data. This creates a structured display of available middleware options for C++.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewareCppData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Subject Token in Policy Definition\nDESCRIPTION: Example showing how to define a policy where the subject token is named 'subject' instead of the default 'sub' and is positioned as the third element in the policy definition.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBAC.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# `subject` here is for sub\n[policy_definition]\np =  obj, act, subject\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Loading Adapter in Go\nDESCRIPTION: This Go code snippet demonstrates an alternative method for setting an adapter and loading policies from it into a Casbin enforcer.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\ne.SetAdapter(A)\ne.LoadPolicy()\n```\n\n----------------------------------------\n\nTITLE: Removing a Policy Rule (Java CLI only)\nDESCRIPTION: Example of removing a policy rule from the policy file using the Java CLI. This revokes Alice's write permission on data2.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CommandLineTools.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./casbin removePolicy -m \"examples/rbac_model.conf\" -p \"examples/rbac_policy.csv\" \"alice\" \"data2\" \"write\"\n```\n\n----------------------------------------\n\nTITLE: Signing Server Certificate with Self-Made CA in Shell\nDESCRIPTION: This command uses the self-made CA to sign the webhook server's certificate, valid for 3650 days and including the necessary extensions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nopenssl x509 -req -days 3650 -in server.csr -out server.crt -CA ca.crt -CAkey ca.key -CAcreateserial -extensions v3_req -extensions SAN -extfile openssl.cnf\n```\n\n----------------------------------------\n\nTITLE: Getting Named RoleManager in Go, Node.js, and Python\nDESCRIPTION: Demonstrates how to get the role manager by named Ptype in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nrm := e.GetNamedRoleManager(\"g2\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst rm = await e.getNamedRoleManager(\"g2\");\n```\n\nLANGUAGE: python\nCODE:\n```\nrm = e.get_named_role_manager(\"g2\")\n```\n\n----------------------------------------\n\nTITLE: Removing Password Protection from CA Key in Shell\nDESCRIPTION: This command removes the password protection from the CA private key, making it easier to use for automated processes.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nopenssl rsa -in ca.key -out ca.key\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Casbin Watcher Documentation\nDESCRIPTION: An MDX code block that imports various React components for displaying watcher data tables for different programming languages. These components are used to render tables showing available watchers for Go.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Watchers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs groupId=\"langs\">\n<TabItem value=\"Go\" label=\"Go\" default>\n\nimport {WatcherDotNETData} from \"@site/src/tableData/WatcherData/WatcherDotNETData\"; import {\n  WatcherGoData\n} from \"@site/src/tableData/WatcherData/WatcherGoData\";\nimport {WatcherJavaData} from \"@site/src/tableData/WatcherData/WatcherJavaData\";\nimport WatcherMDTable from \"@site/src/tableData/WatcherData/WatcherMDTable\";\nimport {WatcherNodejsData} from \"@site/src/tableData/WatcherData/WatcherNodejsData\";\nimport {WatcherPhpData} from \"@site/src/tableData/WatcherData/WatcherPhpData\";\nimport {WatcherPythonData} from \"@site/src/tableData/WatcherData/WatcherPythonData\";\nimport {WatcherRubyData} from \"@site/src/tableData/WatcherData/WatcherRubyData\";\n\n<WatcherMDTable data={WatcherGoData}></WatcherMDTable>\n```\n\n----------------------------------------\n\nTITLE: Using EnforceContext with Node.js Enforcer\nDESCRIPTION: Example of using EnforceContext in Node.js to enforce policies with different request and policy types, showing both default and age-based role checking.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Pass in a suffix as a parameter to NewEnforceContext, such as 2 or 3, and it will create r2, p2, etc.\nconst enforceContext = new NewEnforceContext('2');\n\n// You can also specify a certain type individually\nenforceContext.eType = \"e\"\n\n// Don't pass in EnforceContext; the default is r, p, e, m\ne.Enforce(\"alice\", \"data2\", \"read\")        // true\n\n// Pass in EnforceContext\ne.Enforce(enforceContext, {Age: 70}, \"/data1\", \"read\")        //false\ne.Enforce(enforceContext, {Age: 30}, \"/data1\", \"read\")        //true\n```\n\n----------------------------------------\n\nTITLE: Activating Pattern Matching in RBAC with Casbin in Go\nDESCRIPTION: Code to create an enforcer and add pattern matching functionality using KeyMatch2. This enables pattern-based role assignments in Casbin's RBAC system.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithPattern.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne, _ := NewEnforcer(\"./example.conf\", \"./example.csv\")\ne.AddNamedMatchingFunc(\"g\", \"KeyMatch2\", util.KeyMatch2)\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin.js in Manual Mode\nDESCRIPTION: Setting up Casbin.js in manual mode with predefined permissions. This approach requires manually setting the permission object for the user.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/FrontendUsage.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst casbinjs = require(\"casbin.js\");\n// Set the user's permission:\n// He/She can read `data1` and `data2` objects and can write `data1` object\nconst permission = {\n    \"read\": [\"data1\", \"data2\"],\n    \"write\": [\"data1\"]\n}\n\n// Run casbin.js in manual mode, which requires you to set the permission manually.\nconst authorizer = new casbinjs.Authorizer(\"manual\");\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with Casbin in Delphi\nDESCRIPTION: This snippet shows how to check if a user has permission to perform an action on a resource using Casbin in Delphi. It demonstrates a simplified approach to permission checking with a single array parameter.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_10\n\nLANGUAGE: Delphi\nCODE:\n```\nif casbin.enforce(['alice,data1,read']) then\n  // Alice is super happy as she can read data1\nelse\n  // Alice is sad\n```\n\n----------------------------------------\n\nTITLE: Installing casbin-rust-cli from Source\nDESCRIPTION: Instructions to clone the Rust CLI repository and build the release version using Cargo. This creates an optimized executable for production use.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CommandLineTools.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/casbin-rs/casbin-rust-cli.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd casbin-rust-cli\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Adding Link Condition Functions in Go\nDESCRIPTION: The AddNamedLinkConditionFunc adds a condition function for a link between a user and a role. When the function returns true, the link is considered valid; otherwise, it's invalid.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditionsAPI.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne.AddNamedLinkConditionFunc(\"g\", \"userName\", \"roleName\", YourLinkConditionFunc)\n```\n\n----------------------------------------\n\nTITLE: Displaying Enforcer Types Using MDX Tabs Component\nDESCRIPTION: An MDX component that uses tabs to display different enforcer implementations across programming languages. The component organizes enforcer information in tables for Go and Python, listing the enforcer types, their authors, and detailed descriptions of their functionality.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Enforcers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```mdx-code-block\n<Tabs groupId=\"langs\">\n<TabItem value=\"Go\" label=\"Go\" default>\n```\n\n| Enforcer                                                                                    | Author | Description                                                                                                                                                                                                                                                                                                                                                                        |\n|---------------------------------------------------------------------------------------------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------||\n| [Enforcer](https://github.com/casbin/casbin/blob/master/enforcer.go)                        | Casbin | The `Enforcer` is the basic structure for users to interact with Casbin policies and models. You can find more details about the `Enforcer` API [here](/docs/management-api).                                                                                                                                                                                                            |\n| [CachedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_cached.go)           | Casbin | The `CachedEnforcer` is based on the `Enforcer` and supports caching the evaluation result of a request in memory using a map. It provides the ability to clear caches within a specified expiration time. Moreover, it guarantees thread safety with a Read-Write lock. You can use `EnableCache` to enable caching of evaluation results (default is enabled). The other API methods of `CachedEnforcer` are the same as `Enforcer`. |\n| [DistributedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_distributed.go) | Casbin | The `DistributedEnforcer` supports multiple instances in distributed clusters. It wraps the `SyncedEnforcer` for the dispatcher. You can find more details about the dispatcher [here](/docs/dispatchers#distributedenforcer).                                                                                                                                                                   |\n| [SyncedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_synced.go)           | Casbin | The `SyncedEnforcer` is based on the `Enforcer` and provides synchronized access. It is thread-safe.                                                                                                                                                                                                                                                                               |\n| [SyncedCachedEnforcer](https://github.com/casbin/casbin/blob/master/enforcer_cached_synced.go)| Casbin | The `SyncedCachedEnforcer` wraps the `Enforcer` and provides decision sync cache.                                                                                                                                                                                                                                                                                                 |\n\n```mdx-code-block\n</TabItem>\n<TabItem value=\"Python\" label=\"Python\" default>\n```\n\n| Enforcer                                                                                    | Author | Description                                                                                                                                                                                                                                                                                                                                                                        |\n|---------------------------------------------------------------------------------------------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------||\n| [Enforcer](https://github.com/casbin/pycasbin/blob/master/casbin/enforcer.py)                        | Casbin | The `Enforcer` is the basic structure for users to interact with Casbin policies and models. You can find more details about the `Enforcer` API [here](/docs/management-api).                                                                                                                                                                                                            |\n| [DistributedEnforcer](https://github.com/casbin/pycasbin/blob/master/casbin/distributed_enforcer.py) | Casbin | The `DistributedEnforcer` supports multiple instances in distributed clusters. It wraps the `SyncedEnforcer` for the dispatcher. You can find more details about the dispatcher [here](/docs/dispatchers#distributedenforcer).                                                                                                                                                                   |\n| [SyncedEnforcer](https://github.com/casbin/pycasbin/blob/master/casbin/synced_enforcer.py)           | Casbin | The `SyncedEnforcer` is based on the `Enforcer` and provides synchronized access. It is thread-safe.                                                                                                                                                                                                                                                                               |\n| [AsyncEnforcer](https://github.com/casbin/pycasbin/blob/master/casbin/async_enforcer.py)| Casbin | The `AsyncEnforcer` provides async API.                                                                                                                                                                                                                                                                                                 |\n| [FastEnforcer](https://github.com/casbin/pycasbin/blob/master/casbin/fast_enforcer.py)| Casbin | The `FastEnforcer` uses a new model which is 50x faster than the normal model. You can find more [here](https://github.com/wakemaster39/fastbin)                                                                                                                                                                                                                                                                                                 |\n\n```mdx-code-block\n</TabItem>\n</Tabs>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Middleware Data Components in MDX\nDESCRIPTION: Imports various middleware data components from the site's data directory to populate tables for different programming languages. These components contain the middleware integration information that will be displayed in the respective language tabs.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport {MiddlewareDotNETData} from \"@site/src/tableData/MiddlewareData/MiddlewareDotNETData\";\nimport {MiddlewareGoData} from \"@site/src/tableData/MiddlewareData/MiddlewareGoData\";\nimport {MiddlewareJavaData} from \"@site/src/tableData/MiddlewareData/MiddlewareJavaData\";\nimport {MiddlewareLuaData} from \"@site/src/tableData/MiddlewareData/MiddlewareLuaData\";\nimport {MiddlewareCppData} from \"@site/src/tableData/MiddlewareData/MiddlewareCppData\";\nimport MiddlewareMDTable\n  from \"@site/src/tableData/MiddlewareData/MiddlewareMDTable\";\nimport {MiddlewareNodejsData} from \"@site/src/tableData/MiddlewareData/MiddlewareNodejsData\";\nimport {MiddlewarePhpData} from \"@site/src/tableData/MiddlewareData/MiddlewarePhpData\";\nimport {MiddlewarePythonData} from \"@site/src/tableData/MiddlewareData/MiddlewarePythonData\";\nimport {MiddlewareRustData} from \"@site/src/tableData/MiddlewareData/MiddlewareRustData\";\nimport {MiddlewareSwiftData} from \"@site/src/tableData/MiddlewareData/MiddlewareSwiftData\";\n```\n\n----------------------------------------\n\nTITLE: Creating EnforceContext Class in Java\nDESCRIPTION: Java implementation of the EnforceContext class that simplifies creation of multiple section types by accepting a suffix parameter.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nEnforceContext enforceContext = new EnforceContext(\"2\");\npublic class EnforceContext {\n    private String pType;\n    private String eType;\n    private String mType;\n    private String rType;\n    public EnforceContext(String suffix) {\n      this.pType = \"p\" + suffix;\n      this.eType = \"e\" + suffix;\n      this.mType = \"m\" + suffix;\n      this.rType = \"r\" + suffix;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Time Match Function in Casbin (Go)\nDESCRIPTION: Defines a custom condition function for time-based role matching in Casbin. It includes a wrapper function and the main time matching logic to determine if the current time is within a specified range.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// TimeMatchFunc is the wrapper for TimeMatch.\nfunc TimeMatchFunc(args ...string) (bool, error) {\n    if err := validateVariadicStringArgs(2, args...); err != nil {\n        return false, fmt.Errorf(\"%s: %s\", \"TimeMatch\", err)\n    }\n    return TimeMatch(args[0], args[1])\n}\n\n// TimeMatch determines whether the current time is between startTime and endTime.\n// You can use \"_\" to indicate that the parameter is ignored\nfunc TimeMatch(startTime, endTime string) (bool, error) {\n    now := time.Now()\n    if startTime != \"_\" {\n        if start, err := time.Parse(\"2006-01-02 15:04:05\", startTime); err != nil {\n            return false, err\n        } else if !now.After(start) {\n            return false, nil\n        }\n    }\n\n    if endTime != \"_\" {\n        if end, err := time.Parse(\"2006-01-02 15:04:05\", endTime); err != nil {\n            return false, err\n        } else if !now.Before(end) {\n            return false, nil\n        }\n    }\n\n    return true, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit File Adapter Initialization in PHP\nDESCRIPTION: This PHP code snippet demonstrates explicit initialization of the file adapter, showing how to create a file adapter instance separately before passing it to the enforcer.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Casbin\\Enforcer;\nuse Casbin\\Persist\\Adapters\\FileAdapter;\n\n$a = new FileAdapter('examples/basic_policy.csv');\n$e = new Enforcer('examples/basic_model.conf', $a);\n```\n\n----------------------------------------\n\nTITLE: Getting User Roles with Casbin in Rust\nDESCRIPTION: This snippet shows how to retrieve all roles assigned to a user at runtime using Casbin's RBAC API in Rust. The get_roles_for_user method returns the collection of role names assigned to the specified user.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_20\n\nLANGUAGE: Rust\nCODE:\n```\nlet roles = e.get_roles_for_user(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Setting Field Indices in Casbin\nDESCRIPTION: Demonstrates how to customize the position of policy elements like subject, object, domain, and priority in policy definitions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_66\n\nLANGUAGE: go\nCODE:\n```\ne.SetFieldIndex(\"p\", constant.PriorityIndex, 0)\ne.SetFieldIndex(\"p\", constant.SubjectIndex, 4)\n```\n\n----------------------------------------\n\nTITLE: Rendering Dispatcher Table with React Components\nDESCRIPTION: This MDX code block sets up a tabbed interface to display a table of dispatcher data for Go. It imports necessary components and data to render the dispatcher information.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Dispatchers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs groupId=\"langs\">\n<TabItem value=\"Go\" label=\"Go\" default>\n\nimport DispatcherMDTable from \"@site/src/tableData/DispatcherData/DispatcherMDTable\";\nimport {DispatcherGoData} from \"@site/src/tableData/DispatcherData/DispatcherGoData\";\n\n<DispatcherMDTable data={DispatcherGoData}></DispatcherMDTable>\n```\n\n----------------------------------------\n\nTITLE: Rendering Watcher Table for .NET in MDX\nDESCRIPTION: An MDX code block that renders a table of available watchers for the .NET programming language using the WatcherMDTable component with .NET-specific data.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Watchers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\".NET\" label=\".NET\">\n\n<WatcherMDTable data={WatcherDotNETData}></WatcherMDTable>\n```\n\n----------------------------------------\n\nTITLE: Role Hierarchy Policy with Subject Priority in Casbin\nDESCRIPTION: Defines policies and role assignments that demonstrate subject priority enforcement based on role hierarchy, where users at lower levels in the hierarchy have higher priority.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PriorityModel.mdx#2025-04-21_snippet_6\n\nLANGUAGE: csv\nCODE:\n```\np, root, data1, read, deny\np, admin, data1, read, deny\n\np, editor, data1, read, deny\np, subscriber, data1, read, deny\n\np, jane, data1, read, allow\np, alice, data1, read, allow\n\ng, admin, root\n\ng, editor, admin\ng, subscriber, admin\n\ng, jane, editor\ng, alice, subscriber \n```\n\n----------------------------------------\n\nTITLE: Basic ACL Model Configuration in Casbin\nDESCRIPTION: Demonstrates a basic Access Control List (ACL) model configuration in Casbin, defining request parameters, policy structure, effect rules, and matching logic.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/HowItWorks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Request definition\n[request_definition]\nr = sub, obj, act\n\n# Policy definition\n[policy_definition]\np = sub, obj, act\n\n# Policy effect\n[policy_effect]\ne = some(where (p.eft == allow))\n\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Named Policy Rules in Rust\nDESCRIPTION: Adds multiple authorization rules to a named policy in an atomic operation using Rust. Returns a Result containing a boolean indicating if all rules were added successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_30\n\nLANGUAGE: Rust\nCODE:\n```\nlet rules = vec![\n    vec![\"jack\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n    vec![\"katy\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n    vec![\"leyo\".to_owned(), \"data4\".to_owned(), \"read\".to_owned()],\n    vec![\"ham\".to_owned(), \"data4\".to_owned(), \"write\".to_owned()],\n];\n\nlet are_rules_added := e.add_named_policies(\"p\", rules).await?;\n```\n\n----------------------------------------\n\nTITLE: Installing casbin-rust-cli from crates.io\nDESCRIPTION: Command to install the Rust CLI directly from crates.io using Cargo, which is Rust's package manager and build system.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CommandLineTools.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install casbin-rust-cli\n```\n\n----------------------------------------\n\nTITLE: Rendering Watcher Table for Python in MDX\nDESCRIPTION: An MDX code block that renders a table of available watchers for the Python programming language using the WatcherMDTable component with Python-specific data.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Watchers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\"Python\" label=\"Python\">\n\n<WatcherMDTable data={WatcherPythonData}></WatcherMDTable>\n```\n\n----------------------------------------\n\nTITLE: Setting RoleManager in Go, Node.js, and Python\nDESCRIPTION: Shows how to set the current role manager for 'g' in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ne.SetRoleManager(rm)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ne.setRoleManager(rm);\n```\n\nLANGUAGE: python\nCODE:\n```\nrm = e.set_role_manager(rm)\n```\n\n----------------------------------------\n\nTITLE: Rendering Watcher Table for Ruby in MDX\nDESCRIPTION: An MDX code block that renders a table of available watchers for the Ruby programming language using the WatcherMDTable component with Ruby-specific data.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Watchers.mdx#2025-04-21_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\"Ruby\" label=\"Ruby\">\n\n<WatcherMDTable data={WatcherRubyData}></WatcherMDTable>\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Environment Configuration for Python Benchmark\nDESCRIPTION: Text showing the CPU and software configuration used for benchmarking Pycasbin (Python implementation). This provides context for interpreting the performance results.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Benchmark.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nIntel(R) Xeon(R) CPU E5-2673 v4 @ 2.30GHz (Runned by Github actions)\nplatform linux -- Python 3.11.4, pytest-7.0.1, pluggy-1.2.0\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Key-Matching in Casbin\nDESCRIPTION: The standard signature for built-in key-matching functions in Casbin. These functions compare a URL against a pattern and return a boolean indicating whether there's a match.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Function.mdx#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool function_name(string url, string pattern)\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Matcher with Domain Support in Casbin\nDESCRIPTION: This snippet shows how to configure the matcher in Casbin to check roles with domain support. It ensures that the subject has the required role in the specified domain.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomains.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[matchers]\nm = g(r.sub, p.sub, r.dom) && r.dom == p.dom && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Policy Rule in .NET\nDESCRIPTION: Adds a single authorization rule to a named policy in .NET. Provides both synchronous and asynchronous versions of the method. Returns a boolean indicating if the rule was added.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nvar added = e.AddNamedPolicy(\"p\", \"eve\", \"data3\", \"read\");\nor\nvar added = await e.AddNamedPolicyAsync(\"p\", \"eve\", \"data3\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Installing casbin-java-cli from Source\nDESCRIPTION: Instructions to clone the Java CLI repository and build the project using Maven. This generates a JAR package in the target directory.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CommandLineTools.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/jcasbin/casbin-java-cli.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd casbin-java-cli\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Policy Rule in Rust\nDESCRIPTION: Adds a single authorization rule to a named policy in Rust. Takes the policy name and rule parameters as a vector of strings. Returns a Result containing a boolean indicating if the rule was added.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_25\n\nLANGUAGE: Rust\nCODE:\n```\nlet added = e.add_named_policy(\"p\", vec![\"eve\".to_owned(), \"data3\".to_owned(), \"read\".to_owned()]).await?;\n```\n\n----------------------------------------\n\nTITLE: Casbin Markdown Tab Structure for Language-specific Content\nDESCRIPTION: MDX code block that implements a tabbed interface for organizing Casbin tutorials by programming language. This structure is used to separate content for Go, Java, and Node.js implementations.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Tutorial.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Tabs groupId=\"langs\">\n<TabItem value=\"Go\" label=\"Go\" default>\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Environment Configuration for C++ Benchmark\nDESCRIPTION: Text showing the CPU configuration used for benchmarking Casbin-CPP (C++ implementation). This provides context for interpreting the performance results.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Benchmark.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nIntel(R) Core(TM) i5-6300HQ CPU @ 2.30GHz, 4 cores, 4 threads\n```\n\n----------------------------------------\n\nTITLE: Initializing Casbin Policy Example\nDESCRIPTION: Example CSV policy showing basic access control rules for users alice and bob.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\np, alice, book, read\np, bob, book, read\np, bob, book, write\np, alice, pen, get\np, bob, pen ,get\n```\n\n----------------------------------------\n\nTITLE: ABAC Policy Rules with Attribute Expressions in CSV\nDESCRIPTION: Example of ABAC policy rules in CSV format that use attribute expressions. These rules demonstrate age-based access control for different resources.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ABAC.mdx#2025-04-21_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\np, r.sub.Age > 18, /data1, read\np, r.sub.Age < 60, /data2, write\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Actions from Policy\nDESCRIPTION: GetAllActions retrieves a list of all actions defined in the current policy. Returns an array/list of action strings.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nallActions := e.GetAllActions()\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst allActions = await e.getAllActions()\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$allActions = $e->getAllActions();\n```\n\nLANGUAGE: Python\nCODE:\n```\nall_actions = e.get_all_actions()\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar allActions = e.GetAllActions();\n```\n\nLANGUAGE: Rust\nCODE:\n```\nlet all_actions = e.get_all_actions();\n```\n\nLANGUAGE: Java\nCODE:\n```\nList<String> allActions = e.getAllActions();\n```\n\n----------------------------------------\n\nTITLE: Displaying Adopters Using MDX Tabs Component\nDESCRIPTION: MDX code block that implements a tabbed interface to display Casbin adopters organized by programming language. The tabs group showcases projects using Go, Java, Node.js, and Python with their respective model and policy implementation details.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adopters.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs groupId=\"langs\">\n<TabItem value=\"Go\" label=\"Go\" default>\n```\n\n| Name                                                            | Description                                                                                       | Model                                                                                                      | Policy                                                                                               |\n|-----------------------------------------------------------------|---------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|\n| [VMware Harbor](https://github.com/goharbor/harbor)             | VMware's open source trusted cloud native registry project that stores, signs, and scans content. | [Code](https://github.com/goharbor/harbor/blob/main/src/pkg/permission/evaluator/rbac/casbin.go) | [Beego ORM](https://github.com/goharbor/harbor/blob/main/src/common/rbac/project/rbac_role.go)    |\n| [Intel RMD](https://github.com/intel/rmd)                       | Intel's resource management daemon.                                                               | [.conf](https://github.com/intel/rmd/blob/master/etc/rmd/acl/url/model.conf)                               | [.csv](https://github.com/intel/rmd/blob/master/etc/rmd/acl/url/policy.csv)                          |\n| [VMware Dispatch](https://github.com/vmware/dispatch)           | A framework for deploying and managing serverless style applications.                             | [Code](https://github.com/vmware/dispatch/blob/master/pkg/identity-manager/handlers.go#L46-L55)            | [Code](https://github.com/vmware/dispatch/blob/master/pkg/identity-manager/handlers_test.go#L35-L45) |\n| [Skydive](https://github.com/skydive-project/skydive)           | An open source real-time network topology and protocols analyzer.                                 | [Code](https://github.com/skydive-project/skydive/blob/master/config/config.go#L136-L140)                  | [.csv](https://github.com/skydive-project/skydive/blob/master/rbac/policy.csv)                       |\n| [Zenpress](https://github.com/insionng/zenpress)                | A CMS system written in Golang.                                                                   | [.conf](https://github.com/insionng/zenpress/blob/master/content/config/rbac_model.conf)                   | [Gorm](https://github.com/insionng/zenpress/blob/master/model/user.go#L53-L77)                       |\n| [Argo CD](https://github.com/argoproj/argo-cd)                  | GitOps continuous delivery for Kubernetes.                                                        | [.conf](https://github.com/argoproj/argo-cd/blob/master/assets/model.conf)                              | [.csv](https://github.com/argoproj/argo-cd/blob/master/assets/builtin-policy.csv)                 |\n| [Muxi Cloud](https://github.com/muxiyun/Mae-old)                    | PaaS of Muxi Cloud, an easier way to manage Kubernetes clusters.                                   | [.conf](https://github.com/muxiyun/Mae-old/blob/master/conf/casbinmodel.conf)                                  | [Code](https://github.com/muxiyun/Mae-old/blob/master/pkg/casbin/initPolicy.go#L21-L95)                  |\n| [EngineerCMS](https://github.com/3xxx/EngineerCMS)              | A CMS to manage knowledge for engineers.                                                          | [.conf](https://github.com/3xxx/EngineerCMS/blob/master/conf/rbac_model.conf)                              | [SQLite](https://github.com/3xxx/EngineerCMS/blob/master/database/engineer.db)                       |\n| [Cyber Auth API](https://github.com/CyberlifeCN/cyber-auth-api) | A Golang authentication API project.                                                              | [.conf](https://github.com/CyberlifeCN/cyber-auth-api/blob/master/conf/authz_model.conf)                   | [.csv](https://github.com/CyberlifeCN/cyber-auth-api/blob/master/conf/authz_policy.csv)              |\n| [Metadata DB](https://github.com/Bnei-Baruch/mdb)               | BB archive metadata database.                                                                     | [.conf](https://github.com/Bnei-Baruch/mdb/blob/master/permissions/permissions_model.conf)                        | [.csv](https://github.com/Bnei-Baruch/mdb/blob/master/permissions/permissions_policy.csv)                   |\n| [Qilin API](https://github.com/ProtocolONE/qilin.api)           | ProtocolONE's licenses management tool for game content.                                           | [Code](https://github.com/ProtocolONE/rbac/blob/master/model.go)                                           | [.csv](https://github.com/ProtocolONE/rbac/tree/master/conf)                                         |\n| [Devtron Labs](https://github.com/devtron-labs/devtron)         | Software Delivery Workflow For Kubernetes.                                                        | [.conf](https://github.com/devtron-labs/devtron/blob/main/auth_model.conf)                                 | [Xorm](https://github.com/devtron-labs/devtron/blob/main/pkg/auth/authorisation/casbin/Adapter.go)                 |\n\n</TabItem>\n<TabItem value=\"Java\" label=\"Java\">\n```\n\n| Name                                                             | Description                                 | Model                                                                                                                                                                               | Policy |\n|------------------------------------------------------------------|---------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------|\n| [lighty.io](https://github.com/PantheonTechnologies/lighty-core) | OpenDaylight's solution for SDN controllers. | [README](https://github.com/PantheonTechnologies/lighty-core/blob/6f2ceaae6a68e08c96d14d2fa8ee060ad9f61606/lighty-examples/lighty-controller-springboot-netconf/README.md#security) | N/A    |\n\n</TabItem>\n<TabItem value=\"Node.js\" label=\"Node.js\">\n```\n\n| Name                                       | Description                                                | Model                                                                                                                             | Policy                                                                                                                            |\n|--------------------------------------------|------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| [Notadd](https://github.com/notadd/notadd) | A micro-service development architecture based on Nest.js. | [.conf](https://github.com/notadd/notadd/blob/e58d0a0cf5d691c3fe20170e94cdd8e2c627abd4/apps/nest-upms/src/casbin/rbac_model.conf) | [DB adapter](https://github.com/notadd/notadd/blob/e58d0a0cf5d691c3fe20170e94cdd8e2c627abd4/apps/nest-upms/src/casbin/adapter.ts) |\n| [ARC API](https://github.com/sourcefuse/loopback4-microservice-catalog) | A Catalog of Microservices based on [Loopback](https://loopback.io/doc/en/lb4/) Created by [SourceFuse](https://www.sourcefuse.com/). | [Usage](https://github.com/sourcefuse/loopback4-authorization#Extension-enhancement-using-CASBIN-authorisation) | [Provider](https://github.com/sourcefuse/loopback4-authorization/blob/master/src/providers/casbin-authorization-action.provider.ts) |\n\n</TabItem>\n<TabItem value=\"Python\" label=\"Python\">\n```\n\n| Name                                          | Description                 | Model                                                                                         | Policy |\n|-----------------------------------------------|-----------------------------|-----------------------------------------------------------------------------------------------|--------|\n| [dtrace](https://github.com/EduScaled/dtrace) | EduScaled's tracing system. | [Commit](https://github.com/EduScaled/dtrace/commit/6e8d6b52ec2fa120e8ad63f84a4aecc3eae14c02) | N/A    |\n\n</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Closing MDX Tab Item for Go Language Tutorials\nDESCRIPTION: MDX code block that closes the Go language tab section in the documentation. This is part of the tabbed interface structure used for organizing language-specific tutorials.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Tutorial.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n</TabItem>\n<TabItem value=\"Java\" label=\"Java\">\n\n```\n\n----------------------------------------\n\nTITLE: Explicit File Adapter Initialization in Go\nDESCRIPTION: This Go code snippet demonstrates explicit initialization of the file adapter, showing how to create a file adapter instance separately before passing it to the enforcer.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"github.com/casbin/casbin\"\n    \"github.com/casbin/casbin/file-adapter\"\n)\n\na := fileadapter.NewAdapter(\"examples/basic_policy.csv\")\ne := casbin.NewEnforcer(\"examples/basic_model.conf\", a)\n```\n\n----------------------------------------\n\nTITLE: MDX Tab Structure for Casbin Language Tutorials\nDESCRIPTION: MDX code blocks that define the tab structure for organizing Casbin tutorials by programming language. Each TabItem contains links to language-specific resources.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Tutorial.mdx#2025-04-21_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\"PHP\" label=\"PHP\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Environment Configuration for Lua Benchmark\nDESCRIPTION: Text showing the CPU configuration used for benchmarking Lua Casbin. This provides context for interpreting the performance results.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Benchmark.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nAMD Ryzen(TM) 5 4600H CPU @ 3.0GHz, 6 Cores, 12 Threads\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Subjects in Casbin\nDESCRIPTION: This Go code shows how to retrieve all subjects from a Casbin policy file. The GetAllSubjects function returns an array containing all unique subjects defined in the policies.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nenforcer, err := casbin.NewEnforcer(\"./example/model.conf\", \"./example/policy.csv\")\nif err != nil {\n    fmt.Printf(\"Error, details: %s\\n\", err)\n}\nallSubjects := enforcer.GetAllSubjects()\nfmt.Println(allSubjects)\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy for RBAC Authorization in Casbin\nDESCRIPTION: A CSV-formatted policy file that defines the access rules for the Casbin authorization model. It grants all users GET access to the homepage, gives admin role full access to all resources, and assigns alice and bob to the admin role.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, *, /, GET\np, admin, *, *\ng, alice, admin\ng, bob, admin\n```\n\n----------------------------------------\n\nTITLE: Setting Named RoleManager in Go and Python\nDESCRIPTION: Demonstrates how to set the role manager by named Ptype in Go and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nrm := e.SetNamedRoleManager(\"g2\", rm)\n```\n\nLANGUAGE: python\nCODE:\n```\nrm = e.set_role_manager(\"g2\", rm)\n```\n\n----------------------------------------\n\nTITLE: Casbin GraphQL Middleware Tables for Different Languages\nDESCRIPTION: This snippet contains markdown tables listing available Casbin GraphQL middleware implementations for Go, Node.js, and Python. Each table includes information about the middleware name, the GraphQL implementation it works with, the author, and a brief description.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GraphQLMiddlewares.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```mdx-code-block\n<Tabs groupId=\"langs\">\n<TabItem value=\"Go\" label=\"Go\" default>\n```\n\n| Middleware                                                                         | GraphQL Implementation                           | Author                                         | Description                                            |\n|------------------------------------------------------------------------------------|--------------------------------------------------|------------------------------------------------|--------------------------------------------------------|\n| [graphql-authz](https://github.com/casbin/graphql-authz)                           | [graphql](https://github.com/graphql-go/graphql) | Casbin                                         | An authorization middleware for graphql-go             |\n| [graphql-casbin](https://github.com/esmaeilpour/graphql-casbin)                    | [graphql](https://github.com/graphql-go/graphql) | [@esmaeilpour](https://github.com/esmaeilpour) | An implementation of using Graphql and Casbin together |\n| [gqlgen_casbin_RBAC_example](https://github.com/WenyXu/gqlgen_casbin_RBAC_example) | [gqlgen](https://github.com/99designs/gqlgen)    | [@WenyXu](https://github.com/WenyXu)           | (empty)                                                |\n\n```mdx-code-block\n</TabItem>\n<TabItem value=\"Node.js\" label=\"Node.js\">\n```\n\n| Middleware                                                    | GraphQL Implementation                              | Author | Description                                                                               |\n|---------------------------------------------------------------|-----------------------------------------------------|--------|-------------------------------------------------------------------------------------------|\n| [graphql-authz](https://github.com/node-casbin/graphql-authz) | [GraphQL.js](https://github.com/graphql/graphql-js) | Casbin | A Casbin authorization middleware for [GraphQL.js](https://github.com/graphql/graphql-js) |\n\n```mdx-code-block\n</TabItem>\n<TabItem value=\"Python\" label=\"Python\">\n```\n\n| Middleware                                                   | GraphQL Implementation                                           | Author                                       | Description                                                                                            |\n|--------------------------------------------------------------|------------------------------------------------------------------|----------------------------------------------|--------------------------------------------------------------------------------------------------------|\n| [graphql-authz](https://github.com/Checho3388/graphql-authz) | [GraphQL-core 3](https://github.com/graphql-python/graphql-core) | [@Checho3388](https://github.com/Checho3388) | A Casbin authorization middleware for [GraphQL-core 3](https://github.com/graphql-python/graphql-core) |\n\n```mdx-code-block\n</TabItem>\n</Tabs>\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Policy Rule in Go\nDESCRIPTION: Adds a single authorization rule to a named policy. Returns true if the rule was added, or false if the rule already exists.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\nadded := e.AddNamedPolicy(\"p\", \"eve\", \"data3\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: MDX TabItem for Rust Casbin Resources\nDESCRIPTION: MDX code block defining the tab for Rust-specific Casbin implementation resources.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Tutorial.mdx#2025-04-21_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\"Rust\" label=\"Rust\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Tabs for Admin Portals by Programming Language using MDX\nDESCRIPTION: MDX code block that creates a tabbed interface to organize admin portal projects by programming language. The tabs include Go, Java, Node.js, Python, and PHP, each containing a table of projects with details about their authors, frontend/backend technologies, and descriptions.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/AdminPortal.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Tabs groupId=\"langs\">\n<TabItem value=\"Go\" label=\"Go\" default>\n\n| Project                                                                 | Author                              | Frontend           | Backend | Description                                                      |\n| -----------------------------------------------------------------------| -----------------------------------| --------------------| --------| -----------------------------------------------------------------|\n| [Casdoor](https://casdoor.org)                                          | Casbin                              | React + Ant Design | Beego   | Based on Beego + XORM + React                                    |\n| [go-admin-team/go-admin](https://github.com/go-admin-team/go-admin)     | [@go-admin-team](https://github.com/go-admin-team) | Vue + Element UI     | Gin      | go-admin Based on Gin + Casbin + GORM                            |\n| [gin-vue-admin](https://github.com/flipped-aurora/gin-vue-admin)         | [flipped-aurora](https://github.com/flipped-aurora)  | Vue + Element UI     | Gin      | Based on Gin + GORM + Vue                                        |\n| [gin-admin](https://github.com/LyricTian/gin-admin)                      | [@LyricTian](https://github.com/LyricTian)           | React + Ant Design   | Gin      | RBAC scaffolding based on Gin + GORM + Casbin + Ant Design React |\n| [go-admin](https://github.com/hequan2017/go-admin)                       | [@hequan2017](https://github.com/hequan2017)         | None                 | Gin      | Go RESTful API gateway based on Gin + GORM + JWT + RBAC (Casbin) |\n| [zeus-admin](https://github.com/bullteam/zeus-admin)                     | [bullteam](https://github.com/bullteam)              | Vue + Element UI     | Gin      | Unified Permission management platform based on JWT + Casbin     |\n| [IrisAdminApi](https://github.com/snowlyg/IrisAdminApi)                  | [@snowlyg](https://github.com/snowlyg)               | Vue + Element UI     | Iris     | Backend API based on Iris + Casbin                               |\n| [Gfast](https://github.com/tiger1103/gfast)                               | [@tiger1103](https://github.com/tiger1103)         | Vue + Element UI     | Go Frame | Admin portal based on GF (Go Frame)                              |\n| echo-admin ([Frontend](https://github.com/RealLiuSha/echo-admin-ui), [Backend](https://github.com/RealLiuSha/echo-admin))  | [@RealLiuSha](https://github.com/RealLiuSha)       | Vue 2.x + Element UI | Echo     | Admin portal based on Echo + Gorm + Casbin + Uber-FX             |\n| [Spec-Center](https://github.com/atul-wankhade/Spec-Center)              | [@atul-wankhade](https://github.com/atul-wankhade) | None                 | Mux      | Golang RESTful platform based on Casbin + MongoDB                |\n\n</TabItem>\n<TabItem value=\"Java\" label=\"Java\">\n\n| Project                                                        | Author                                   | Frontend | Backend    | Description                                                 |\n| -------------------------------------------------------------- | ---------------------------------------- |----------|------------| ----------------------------------------------------------- |\n| [spring-boot-web](https://github.com/wangchengming666/spring-boot-web) | [@BazookaW](https://github.com/wangchengming666) | None     | SpringBoot | Admin portal based on SpringBoot 2.0 + MyBatisPlus + Casbin |\n\n</TabItem>\n<TabItem value=\"Node.js\" label=\"Node.js\">\n\n| Project                                                                  | Author                                      | Frontend            | Backend | Description                                                                                                          |\n| ------------------------------------------------------------------------ | ------------------------------------------- |----------------------|---------|----------------------------------------------------------------------------------------------------------------------|\n| [node-mysql-rest-api](https://github.com/JoemaNequinto/node-mysql-rest-api) | [@JoemaNequinto](https://github.com/JoemaNequinto) | None                | Express | A boilerplate application for building RESTful APIs Microservice in Node.js using Express, Sequelize, JWT and Casbin. |\n| [Casbin-Role-Mgt-Dashboard-RBAC](https://github.com/alikhan866/Casbin-Role-Mgt-Dashboard-RBAC) | [@alikhan866](https://github.com/alikhan866)   | React + Material UI | Express | Beginner friendly RBAC management with Enforcer integration to check enforcement result on the go                    |\n\n</TabItem>\n<TabItem value=\"Python\" label=\"Python\">\n\n| Project                                                                                                | Author                                                | Frontend  | Backend | Description                          |\n| ------------------------------------------------------------------------------------------------------|-------------------------------------------------------| ----------|---------| -------------------------------------|\n| [fastapi-best-architecture](https://github.com/fastapi-practices/fastapi_best_architecture)           | [@WuClan](https://github.com/wu-clan)                 | Vue + Arco-design   | FastAPI | Admin portal based on FastAPI, SQLAlchemy, JWT and RBAC       |\n| [fastapi-mysql-generator](https://github.com/wxy2077/fastapi-mysql-generator)                     | [@CoderCharm](https://github.com/wxy2077)       | None      | FastAPI | FastAPI + MySQL + JWT + Casbin       |\n| [FastAPI-MySQL-Tortoise-Casbin](https://github.com/xingxingzaixian/FastAPI-MySQL-Tortoise-Casbin)    | [@xingxingzaixian](https://github.com/xingxingzaixian) | None      | FastAPI | FastAPI + MySQL + Tortoise + Casbin  |\n| [openstack-policy-editor](https://github.com/casbin/openstack-policy-editor)                          | Casbin                                                | Bootstrap | Django  | The Web UI for Casbin                |\n\n</TabItem>\n<TabItem value=\"PHP\" label=\"PHP\">\n\n| Project                                                                                          | Author                                              | Frontend           | Backend    | Description                                                                                                    |\n| -------------------------------------------------------------------------------------------------|-----------------------------------------------------|--------------------|-----------|----------------------------------------------------------------------------------------------------------------|\n| [Tadmin](https://github.com/leeqvip/tadmin)                                                     | [@leeqvip](https://github.com/leeqvip)               | AmazeUI            | ThinkPHP  | Non-intrusive backend framework based on ThinkPHP                                                              |\n| [video.tinywan.com](https://github.com/Tinywan/video.tinywan.com)                               | [@Tinywanner](https://github.com/Tinywan)           | LayUI              | ThinkPHP  | RESTful API gateway based on ThinkPHP5 + ORM + JWT + RBAC (Casbin)                                             |\n| [laravel-casbin-admin](https://github.com/pl1998/laravel-casbin-admin)                          | [@pl1998](https://github.com/pl1998)             | Vue + Element UI   | Laravel   | RBAC permission management system based on vue-element-admin and Laravel                                       |\n| larke-admin ([Frontend](https://github.com/deatil/larke-admin-frontend), [Backend](https://github.com/deatil/larke-admin)) | [@deatil](https://github.com/deatil)       | Vue 2 + Element UI | Laravel 8 | Admin portal based on Laravel 8, JWT and RBAC                                                                  |\n| [hyperf-vuetify-admin](https://github.com/TragicMale/hyperf-vuetify-admin)                      | [@TragicMale](https://github.com/TragicMale)   | Vue + Vuetify 2.x  | Hyperf    | Admin portal based on Hyperf, Vuetify and Casbin                                                               |\n\n</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Policy Definition Example in Casbin\nDESCRIPTION: Demonstrates how to define multiple policy types with different parameter combinations.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[policy_definition]\np = sub, obj, act\np2 = sub, act\n```\n\n----------------------------------------\n\nTITLE: Sample Policy in CSV Format\nDESCRIPTION: Example of a simple policy file showing permission and role assignments that will be stored in a database.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/PolicyStorage.mdx#2025-04-21_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\np, data2_admin, data2, read\np, data2_admin, data2, write\ng, alice, admin\n```\n\n----------------------------------------\n\nTITLE: Removing a Policy Rule in PHP\nDESCRIPTION: Removes a single authorization rule from the current policy in PHP. Returns a boolean indicating if the rule was removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\n$removed = $e->removePolicy(\"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Rendering Node.js Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for Node.js programming language using the MiddlewareMDTable component with Node.js-specific middleware data. This creates a structured display of available middleware options for Node.js.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewareNodejsData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: JSX Component Integration in Casbin Documentation\nDESCRIPTION: Example demonstrating how to properly include JSX components like Tabs in Casbin documentation while ensuring compatibility with the Crowdin translation system.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```mdx-code-block\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n```mdx-code-block\n<Tabs>\n<TabItem value=\"go\" label=\"Go\">\n```\n\ncontent\n\n```mdx-code-block\n</TabItem>\n<TabItem value=\"java\" label=\"Java\">\n```\n\ncontent\n\n```mdx-code-block\n</TabItem>\n</Tabs>\n```\n```\n\n----------------------------------------\n\nTITLE: Documentation Template for Casbin Website\nDESCRIPTION: Template showing the standard structure for Casbin documentation files with frontmatter and markdown hierarchy guidelines. Demonstrates proper document organization with title, description, keywords, and content hierarchy.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Title\ndescription: description\nkeywords: [keyword1, keyword2]\nauthors: [GitHub username]\n---\n\n## Headers\n\nOnly h2 and h3 will be in the TOC by default, so h1 is not recommended to use.\n\n### h3\n\ncontent\n\n#### h4\n\ncontent\n\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Operator in Casbin Model Definition\nDESCRIPTION: Example of using the 'in' operator in a Casbin model file to check if a subject's name is contained within an object's Admins array.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr = sub, obj\n...\n[matchers]\nm = r.sub.Name in (r.obj.Admins)\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Permissions Policy in CSV format for jCasbin\nDESCRIPTION: This CSV policy file defines role permissions, user-role associations, and menu hierarchies for a jCasbin-based menu permission system. It includes permission rules (p), role assignments (g), and menu relationships (g2) to create a comprehensive access control system.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/MenuPermissions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\np, ROLE_ROOT, SystemMenu, read, allow\np, ROLE_ROOT, AdminMenu, read, allow\np, ROLE_ROOT, UserMenu, read, deny\np, ROLE_ADMIN, UserMenu, read, allow\np, ROLE_ADMIN, AdminMenu, read, allow\np, ROLE_ADMIN, AdminSubMenu_deny, read, deny\np, ROLE_USER, UserSubMenu_allow, read, allow\n\ng, user, ROLE_USER\ng, admin, ROLE_ADMIN\ng, root, ROLE_ROOT\ng, ROLE_ADMIN, ROLE_USER\n\ng2, UserSubMenu_allow, UserMenu\ng2, UserSubMenu_deny, UserMenu\ng2, UserSubSubMenu, UserSubMenu_allow\ng2, AdminSubMenu_allow, AdminMenu\ng2, AdminSubMenu_deny, AdminMenu\ng2, (NULL), SystemMenu\n```\n\n----------------------------------------\n\nTITLE: Getting RoleManager in Go, Node.js, and Python\nDESCRIPTION: Shows how to retrieve the current role manager for 'g' in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nrm := e.GetRoleManager()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst rm = await e.getRoleManager();\n```\n\nLANGUAGE: python\nCODE:\n```\nrm = e.get_role_manager()\n```\n\n----------------------------------------\n\nTITLE: Multi-line Matcher Configuration\nDESCRIPTION: Shows how to configure a multi-line matcher using line continuation character in Casbin configuration.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/HowItWorks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# Matchers\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj \\\n  && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Policy Rule in Python\nDESCRIPTION: Adds a single authorization rule to a named policy in Python. Takes the policy name and rule parameters. Returns a boolean indicating if the rule was added.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nadded = e.add_named_policy(\"p\", \"eve\", \"data3\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: ACL Policy Rules Example\nDESCRIPTION: Shows example policy rules for the ACL model, defining permissions for users alice and bob to access specific resources.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/HowItWorks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\np, alice, data1, read\np, bob, data2, write\n```\n\n----------------------------------------\n\nTITLE: Setting Global Casbin Model and Policy in APISIX Plugin Metadata\nDESCRIPTION: cURL command to create a global Casbin model and policy configuration in the APISIX plugin metadata. This enables reusing the same authorization logic across multiple routes without duplicating configuration.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/plugin_metadata/authz-casbin -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -i -X PUT -d '\n{\n\"model\": \"[request_definition]\\nr = sub, obj, act\\n\\n[policy_definition]\\np = sub, obj, act\\n\\n[role_definition]\\ng = _, _\\n\\n[policy_effect]\\ne = some(where (p.eft == allow))\\n\\n[matchers]\\nm = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)\",\\n\\n\"policy\": \"p, *, /, GET\\np, admin, *, *\\ng, alice, admin\\ng, bob, admin\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining the Envoy Authorization Service in Protocol Buffers\nDESCRIPTION: Protocol buffer definition for the Authorization service in Envoy that performs authorization checks on incoming requests. It defines a Check() method that evaluates requests and returns an OK or not OK status.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/EnvoyAuthz.mdx#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// A generic interface for performing authorization checks on incoming\n// requests to a networked service.\nservice Authorization {\n  // Performs an authorization check based on the attributes associated with the\n  // incoming request and returns a status of `OK` or not `OK`.\n  rpc Check(v2.CheckRequest) returns (v2.CheckResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Filtered Named Policies in Casbin\nDESCRIPTION: Shows how to remove authorization rules from a named policy using field filters. The function takes the policy name, starting field index, and filter values as parameters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_49\n\nLANGUAGE: go\nCODE:\n```\nremoved := e.RemoveFilteredNamedPolicy(\"p\", 0, \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = ['alice', 'data1', 'read']\nconst removed = await e.removeFilteredNamedPolicy('p', 0, ...p)\n```\n\nLANGUAGE: php\nCODE:\n```\n$removed = $e->removeFilteredNamedPolicy(\"p\", 0, \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\nremoved = e.remove_filtered_named_policy(\"p\", 0, \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar removed = e.RemoveFilteredNamedPolicy(\"p\", 0, \"alice\", \"data1\", \"read\");\nor\nvar removed = e.RemoveFilteredNamedPolicyAync(\"p\", 0, \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet removed = e.remove_filtered_named_policy(\"p\", 0, vec![\"alice\".to_owned(), \"data1\".to_owned(), \"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean removed = e.removeFilteredNamedPolicy(\"p\", 0, \"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Rendering PHP Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for PHP programming language using the MiddlewareMDTable component with PHP-specific middleware data. This creates a structured display of available middleware options for PHP.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewarePhpData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: Detailed Casbin Model for Container Image Control\nDESCRIPTION: A more detailed Casbin model that demonstrates how to access specific container properties in a Kubernetes deployment. This model checks the image of the first container in the deployment.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[request_definition]\nr =  obj\n\n[policy_definition]\np =  obj,eft\n\n[policy_effect]\ne = !some(where (p.eft == deny))\n\n[matchers]\nm = r.obj.Request.Namespace == \"default\" && r.obj.Request.Resource.Resource ==\"deployments\" && \\\naccess(r.obj.Request.Object.Object.Spec.Template.Spec.Containers , 0, \"Image\") == p.obj\n```\n\n----------------------------------------\n\nTITLE: Deleting All Users by Domain\nDESCRIPTION: Removes all users associated with a specific domain using the DeleteAllUsersByDomain method. Returns false if no domain is defined in the model.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.DeleteAllUsersByDomain(\"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Updating Single Policy in Casbin\nDESCRIPTION: Demonstrates how to update an existing policy rule to a new one using UpdatePolicy. Takes old policy and new policy as parameters.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_61\n\nLANGUAGE: go\nCODE:\n```\nupdated, err := e.UpdatePolicy([]string{\"eve\", \"data3\", \"read\"}, []string{\"eve\", \"data3\", \"write\"})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst update = await e.updatePolicy([\"eve\", \"data3\", \"read\"], [\"eve\", \"data3\", \"write\"]);\n```\n\n----------------------------------------\n\nTITLE: Getting Roles for a User in RoleManager for Go, Node.js, and Python\nDESCRIPTION: Shows how to get the roles that a user inherits in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nrm.GetRoles(\"u1\", \"domain1\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait rm.getRoles('u1', 'domain1');\n```\n\nLANGUAGE: python\nCODE:\n```\nrm.get_roles(\"u1\", \"domain\")\n```\n\n----------------------------------------\n\nTITLE: Installing K8s-Gatekeeper Resources for Internal Webhook\nDESCRIPTION: Kubectl commands to set up the required Kubernetes resources for running K8s-Gatekeeper as an internal webhook inside the cluster.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f config/rbac.yaml\nkubectl apply -f config/webhook_deployment.yaml \nkubectl apply -f config/webhook_internal.yaml \n```\n\n----------------------------------------\n\nTITLE: Installing CRD Resources for K8s-Gatekeeper\nDESCRIPTION: Kubectl commands to install the Custom Resource Definitions (CRDs) needed by K8s-Gatekeeper to store Casbin models and policies in Kubernetes.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f config/auth.casbin.org_casbinmodels.yaml \nkubectl apply -f config/auth.casbin.org_casbinpolicies.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting Domains\nDESCRIPTION: Deletes specified domains and all associated users and roles using the DeleteDomains method. If no parameters are provided, all domains are deleted.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nok, err := e.DeleteDomains(\"domain1\", \"domain2\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Users in Casbin\nDESCRIPTION: DeleteUser function removes a user from the authorization system. Returns false if the user doesn't exist.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACAPI.mdx#2025-04-21_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ne.DeleteUser(\"alice\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.deleteUser('alice')\n```\n\nLANGUAGE: php\nCODE:\n```\n$e->deleteUser(\"alice\");\n```\n\nLANGUAGE: python\nCODE:\n```\ne.delete_user(\"alice\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar deleted = e.DeleteUser(\"alice\");\nor\nvar deleted = await e.DeleteUserAsync(\"alice\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet deleted = e.delete_user(\"alice\").await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean deleted = e.deleteUser(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Permission Object Structure in JSON Format\nDESCRIPTION: Example of a permission object structure in JSON format, defining what actions a user can perform on which resources.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/FrontendUsage.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"read\": [\"data1\", \"data2\"],\n    \"write\": [\"data1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Closing MDX Tab Structure for Watcher Documentation\nDESCRIPTION: An MDX code block that closes the tab structure used for organizing watcher information by programming language.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Watchers.mdx#2025-04-21_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Check with File Paths\nDESCRIPTION: Example of checking whether Alice has read permission on data1 using configuration files. Returns a JSON response indicating the permission is allowed.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CommandLineTools.mdx#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./casbin enforce -m \"examples/rbac_model.conf\" -p \"examples/rbac_policy.csv\" \"alice\" \"data1\" \"read\"\n```\n\n----------------------------------------\n\nTITLE: Getting User Roles with Casbin in Delphi\nDESCRIPTION: This snippet demonstrates how to retrieve all roles assigned to a user at runtime using Casbin's RBAC API in Delphi. The rolesForEntity method is used instead of getRolesForUser, showing a slightly different API naming convention.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/GetStarted.mdx#2025-04-21_snippet_19\n\nLANGUAGE: Delphi\nCODE:\n```\nroles = e.rolesForEntity(\"alice\")\n```\n\n----------------------------------------\n\nTITLE: Getting Implicit Users for Resource by Domain\nDESCRIPTION: Retrieves implicit users who have access to a specific resource within a domain using the GetImplicitUsersForResourceByDomain method. Only returns users, not roles.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithDomainsAPI.mdx#2025-04-21_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nImplicitUsers, err := e.GetImplicitUsersForResourceByDomain(\"data1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Adding Named Matching Function in Go and Node.js\nDESCRIPTION: Demonstrates how to add a named matching function to the RoleManager in Go and Node.js. This allows for the use of wildcards in role names and domains.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ne.AddNamedMatchingFunc(\"g\", \"\", util.KeyMatch)\n_, _ = e.AddGroupingPolicies([][]string{{\"*\", \"admin\", \"domain1\"}})\n_, _ = e.GetRoleManager().HasLink(\"bob\", \"admin\", \"domain1\") // -> true, nil\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait e.addNamedMatchingFunc('g', Util.keyMatchFunc);\nawait e.addGroupingPolicies([['*', 'admin', 'domain1']]);\nawait e.getRoleManager().hasLink('bob', 'admin', 'domain1');\n```\n\n----------------------------------------\n\nTITLE: Sample Kubernetes Deployment YAML for Validation\nDESCRIPTION: An example Kubernetes deployment configuration that would be intercepted by the K8s-Gatekeeper. This deployment tries to use nginx:1.14.1, which would be rejected based on the example Casbin rules.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/K8sGateKeeper.mdx#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.1\n        ports:\n        - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Rendering Java Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for Java programming language using the MiddlewareMDTable component with Java-specific middleware data. This creates a structured display of available middleware options for Java.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewareJavaData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Casbin Configuration on a Specific APISIX Route\nDESCRIPTION: cURL command that enables a route to use the globally defined Casbin authorization configuration from plugin metadata. This allows for centralized policy management while applying it to specific routes.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '\n{\n    \"plugins\": {\n        \"authz-casbin\": {\n            \"username\": \"username\"\n        }\n    },\n    \"upstream\": {\n        \"nodes\": {\n            \"127.0.0.1:1980\": 1\n        },\n        \"type\": \"roundrobin\"\n    },\n    \"uri\": \"/route1/*\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Storage Adapter in Go\nDESCRIPTION: This Go code snippet demonstrates how to use a custom adapter with Casbin enforcer by importing a custom package and passing the adapter to the enforcer constructor.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"github.com/casbin/casbin\"\n    \"github.com/your-username/your-repo\"\n)\n\na := yourpackage.NewAdapter(params)\ne := casbin.NewEnforcer(\"examples/basic_model.conf\", a)\n```\n\n----------------------------------------\n\nTITLE: Removing a Policy Rule in Go\nDESCRIPTION: Removes a single authorization rule from the current policy in Go. Returns a boolean indicating if the rule was removed successfully.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\nremoved := e.RemovePolicy(\"alice\", \"data1\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Integration Table in Markdown\nDESCRIPTION: Displays a markdown table listing cloud provider integrations for Casbin with Node.js. The table includes information about Okta and Auth0 integrations, along with links to their respective plugins for Casbin integration.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                        | Description                                                                                                                                      |\n|-----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n| [Okta](https://okta.com/)   | One trusted platform to secure every identity, via plugin: [casbin-spring-boot-demo](https://github.com/myriad-personal/casbin-spring-boot-demo) |\n| [Auth0](https://auth0.com/) | An easy to implement, adaptable authentication and authorization platform, via plugin: [casbin-auth0-rbac](https://auth0.com/)                   |\n```\n\n----------------------------------------\n\nTITLE: Filter Structure for LoadFilteredPolicy in JSON\nDESCRIPTION: Example JSON structure for the filter parameter required by the LoadFilteredPolicy method. The filter specifies policies to load based on policy type and values.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Adapters.mdx#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"p\":[ [ \"alice\" ], [ \"bob\" ] ],\n    \"g\":[ [ \"\", \"book_group\" ], [ \"\", \"pen_group\" ] ],\n    \"g2\":[ [ \"alice\" ] ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Permissions with DeletePermission\nDESCRIPTION: This code shows how to delete a permission using DeletePermission method. The example demonstrates deleting the 'write' permission on 'data2' resource, which affects all users who had this permission.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/APIOverview.mdx#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(enforcer.Enforce(\"bob\", \"data2\", \"write\")) // true\nenforcer.DeletePermission(\"data2\", \"write\")\nfmt.Println(enforcer.Enforce(\"bob\", \"data2\", \"write\")) // false\n```\n\n----------------------------------------\n\nTITLE: Deleting Link in RoleManager for Go, Node.js, and Python\nDESCRIPTION: Shows how to delete an inheritance link between two roles in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nrm.DeleteLink(\"u1\", \"g1\", \"domain1\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait rm.deleteLink('u1', 'g1', 'domain1');\n```\n\nLANGUAGE: python\nCODE:\n```\nrm.delete_link(\"u1\", \"g1\", \"domain1\")\n```\n\n----------------------------------------\n\nTITLE: Java Role Manager Tab Content\nDESCRIPTION: MDX code block for the Java-specific role manager documentation tab, including a data table component for Java role manager implementations.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<RoleManagerMDTable data={RoleManagerJavaData}></RoleManagerMDTable>\n```\n\n----------------------------------------\n\nTITLE: Implementing 'in' Operator Check in Go Enforcement\nDESCRIPTION: Go example demonstrating how to enforce a policy using the 'in' operator to check if a user is in an admin list for a specific object.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ne.Enforce(Sub{Name: \"alice\"}, Obj{Name: \"a book\", Admins: []interface{}{\"alice\", \"bob\"}})\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Roles in Casbin RBAC using Go\nDESCRIPTION: This Go code snippet illustrates how to use the Casbin Enforcer to retrieve all roles in the RBAC model. It shows that Casbin can distinguish between roles and users, despite treating them both as subjects.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/CasbinRBACAndRBAC96.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ne.GetAllRoles()\n```\n\n----------------------------------------\n\nTITLE: Rendering Rust Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for Rust programming language using the MiddlewareMDTable component with Rust-specific middleware data. This creates a structured display of available middleware options for Rust.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewareRustData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: Node.js Role Manager Tab Content\nDESCRIPTION: MDX code block for the Node.js-specific role manager documentation tab, displaying Node.js role manager implementations.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<RoleManagerMDTable data={RoleManagerNodejsData}></RoleManagerMDTable>\n```\n\n----------------------------------------\n\nTITLE: Setting Link Condition Function Parameters in Go\nDESCRIPTION: The SetNamedLinkConditionFuncParams function sets the parameters for an existing condition function associated with a link between a user and a role. Multiple parameters can be provided as needed.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditionsAPI.mdx#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ne.SetNamedLinkConditionFuncParams(\"g\", \"userName\", \"roleName\", \"YourConditionFuncParam\")\ne.SetNamedLinkConditionFuncParams(\"g\", \"userName2\", \"roleName2\", \"YourConditionFuncParam_1\", \"YourConditionFuncParam_2\")\n```\n\n----------------------------------------\n\nTITLE: Starting Envoy with Authorization Configuration\nDESCRIPTION: Command to start Envoy with the authorization configuration file. This sets up Envoy to intercept and forward requests to the authorization server for permission checks.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/EnvoyAuthz.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenvoy -c authz.yaml -l info\n```\n\n----------------------------------------\n\nTITLE: Basic Matcher Definition\nDESCRIPTION: Simple matcher that compares request parameters with policy rules.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/SyntaxForModels.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[matchers]\nm = r.sub == p.sub && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: PHP Role Manager Tab Content\nDESCRIPTION: MDX code block for the PHP-specific role manager documentation tab, showing PHP role manager implementations.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<RoleManagerMDTable data={RoleManagerPhpData}></RoleManagerMDTable>\n```\n\n----------------------------------------\n\nTITLE: Enabling Casbin Authorization on APISIX Route Using Inline Text\nDESCRIPTION: cURL command to enable the authz-casbin plugin on an APISIX route using inline model and policy text. This approach eliminates the need for separate model and policy files by embedding the configurations directly in the API request.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/blog/2021-08-19-apisix-casbin-authorization.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/routes/1 -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '\n{\n    \"plugins\": {\n        \"authz-casbin\": {\n            \"model\": \"[request_definition]\\n            r = sub, obj, act\\n\\n            [policy_definition]\\n            p = sub, obj, act\\n\\n            [role_definition]\\n            g = _, _\\n\\n            [policy_effect]\\n            e = some(where (p.eft == allow))\\n\\n            [matchers]\\n            m = (g(r.sub, p.sub) || keyMatch(r.sub, p.sub)) && keyMatch(r.obj, p.obj) && keyMatch(r.act, p.act)\",\\n\\n            \"policy\": \"p, *, /, GET\\n            p, admin, *, *\\n            g, alice, admin\\n            g, bob, admin\",\\n\\n            \"username\": \"username\"\n        }\n    },\n    \"upstream\": {\n        \"nodes\": {\n            \"127.0.0.1:1980\": 1\n        },\n        \"type\": \"roundrobin\"\n    },\n    \"uri\": \"/*\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Clearing RoleManager in Go, Node.js, and Python\nDESCRIPTION: Shows how to clear all stored data and reset the role manager to its initial state in Go, Node.js, and Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagerApi.mdx#2025-04-21_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nrm.Clear()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait rm.clear();\n```\n\nLANGUAGE: python\nCODE:\n```\nrm.clear()\n```\n\n----------------------------------------\n\nTITLE: Citing Casbin in Academic Papers using BibTeX\nDESCRIPTION: BibTeX citation for the paper 'PML: An Interpreter-Based Access Control Policy Language for Web Services' that details the design of Casbin. This citation can be used in academic papers that reference Casbin or PML.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Tutorial.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{luo2019pml,\n  title={PML: An Interpreter-Based Access Control Policy Language for Web Services},\n  author={Luo, Yang and Shen, Qingni and Wu, Zhonghai},\n  journal={arXiv preprint arXiv:1903.09756},\n  year={2019}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Domain Link Condition Function Parameters in Go\nDESCRIPTION: The SetNamedDomainLinkConditionFuncParams function sets the parameters for an existing condition function associated with a link between a user and a role within a specific domain. Multiple parameters can be provided as needed.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBACWithConditionsAPI.mdx#2025-04-21_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ne.SetNamedDomainLinkConditionFuncParams(\"g\", \"userName\", \"roleName\", \"domainName\", \"YourConditionFuncParam\")\ne.SetNamedDomainLinkConditionFuncParams(\"g\", \"userName2\", \"roleName2\", \"domainName2\", \"YourConditionFuncParam_1\", \"YourConditionFuncParam_2\")\n```\n\n----------------------------------------\n\nTITLE: Adding Role Inheritance Rules with AddGroupingPoliciesEx in Go\nDESCRIPTION: Demonstrates the use of AddGroupingPoliciesEx function in Go, which adds role inheritance rules to the current policy. Unlike AddGroupingPolicies, it adds non-existent rules even if some rules already exist.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_54\n\nLANGUAGE: Go\nCODE:\n```\nok, err := e.AddGroupingPoliciesEx([][]string{{\"user1\", \"member\"}, {\"user2\", \"member\"}})\n```\n\n----------------------------------------\n\nTITLE: Rendering Watcher Table for Node.js in MDX\nDESCRIPTION: An MDX code block that renders a table of available watchers for the Node.js programming language using the WatcherMDTable component with Node.js-specific data.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Watchers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\"Node.js\" label=\"Node.js\">\n\n<WatcherMDTable data={WatcherNodejsData}></WatcherMDTable>\n```\n\n----------------------------------------\n\nTITLE: Rendering Python Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for Python programming language using the MiddlewareMDTable component with Python-specific middleware data. This creates a structured display of available middleware options for Python.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewarePythonData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: Removing Named Policies in Casbin\nDESCRIPTION: Shows how to remove an authorization rule from the current named policy. The function takes the policy name as the first parameter followed by the rule components.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/ManagementAPI.mdx#2025-04-21_snippet_47\n\nLANGUAGE: go\nCODE:\n```\nremoved := e.RemoveNamedPolicy(\"p\", \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = ['alice', 'data1', 'read']\nconst removed = await e.removeNamedPolicy('p', ...p)\n```\n\nLANGUAGE: php\nCODE:\n```\n$removed = $e->removeNamedPolicy(\"p\", \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: python\nCODE:\n```\nremoved = e.remove_named_policy(\"p\", \"alice\", \"data1\", \"read\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar removed = e.RemoveNamedPolicy(\"p\", \"alice\", \"data1\", \"read\");\nor\nvar removed = await e.RemoveNamedPolicyAsync(\"p\", \"alice\", \"data1\", \"read\");\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet removed = e.remove_named_policy(\"p\", vec![\"alice\".to_owned(), \"data1\".to_owned(), \"read\".to_owned()]).await?;\n```\n\nLANGUAGE: java\nCODE:\n```\nboolean removed = e.removeNamedPolicy(\"p\", \"alice\", \"data1\", \"read\");\n```\n\n----------------------------------------\n\nTITLE: Rendering Watcher Table for Java in MDX\nDESCRIPTION: An MDX code block that renders a table of available watchers for the Java programming language using the WatcherMDTable component with Java-specific data.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Watchers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\"Java\" label=\"Java\">\n\n<WatcherMDTable data={WatcherJavaData}></WatcherMDTable>\n  \n```\n\n----------------------------------------\n\nTITLE: MDX TabItem for .NET Casbin Resources\nDESCRIPTION: MDX code block defining the tab for .NET-specific Casbin implementation resources.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Tutorial.mdx#2025-04-21_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\".NET\" label=\".NET\">\n```\n\n----------------------------------------\n\nTITLE: Rendering Watcher Table for PHP in MDX\nDESCRIPTION: An MDX code block that renders a table of available watchers for the PHP programming language using the WatcherMDTable component with PHP-specific data and closes the tabs container.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Watchers.mdx#2025-04-21_snippet_6\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\"PHP\" label=\"PHP\">\n\n<WatcherMDTable data={WatcherPhpData}></WatcherMDTable>\n```\n\n----------------------------------------\n\nTITLE: Role Manager Documentation Tabs Component\nDESCRIPTION: MDX code block that implements a tabbed interface for displaying role manager documentation across different programming languages. Uses custom React components to render role manager data tables.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Tabs groupId=\"langs\">\n<TabItem value=\"Go\" label=\"Go\" default>\n\nimport {RoleManagerGoData} from \"@site/src/tableData/RoleManagerData/RoleManagerGoData\";\nimport {RoleManagerJavaData} from \"@site/src/tableData/RoleManagerData/RoleManagerJavaData\"; import RoleManagerMDTable\n  from \"@site/src/tableData/RoleManagerData/RoleManagerMDTable\";\nimport {RoleManagerNodejsData} from \"@site/src/tableData/RoleManagerData/RoleManagerNodejsData\";\nimport {RoleManagerPhpData} from \"@site/src/tableData/RoleManagerData/RoleManagerPhpData\";\nimport {RoleManagerPythonData} from \"@site/src/tableData/RoleManagerData/RoleManagerPythonData\";\n\n<RoleManagerMDTable data={RoleManagerGoData}></RoleManagerMDTable>\n```\n\n----------------------------------------\n\nTITLE: MDX TabItem for Lua Casbin Resources\nDESCRIPTION: MDX code block defining the tab for Lua-specific Casbin implementation resources.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Tutorial.mdx#2025-04-21_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n<TabItem value=\"Lua\" label=\"Lua\">\n```\n\n----------------------------------------\n\nTITLE: Python Role Manager Tab Content\nDESCRIPTION: MDX code block for the Python-specific role manager documentation tab, presenting Python role manager implementations.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RoleManagers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<RoleManagerMDTable data={RoleManagerPythonData}></RoleManagerMDTable>\n```\n\n----------------------------------------\n\nTITLE: Closing MDX Tab Item for Java Language Tutorials\nDESCRIPTION: MDX code block that closes the Java language tab section and opens the Node.js tab section in the documentation. Part of the tabbed interface structure for organizing language-specific tutorials.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Tutorial.mdx#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n</TabItem>\n<TabItem value=\"Node.js\" label=\"Node.js\">\n\n```\n\n----------------------------------------\n\nTITLE: MDX Tabs Closing Structure\nDESCRIPTION: MDX code block closing the tabs component structure used for organizing language-specific Casbin resources.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Tutorial.mdx#2025-04-21_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Rendering .NET Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for .NET programming language using the MiddlewareMDTable component with .NET-specific middleware data. This creates a structured display of available middleware options for .NET.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_7\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewareDotNETData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: Creating a Role Manager with Hierarchy Limits in Go\nDESCRIPTION: Go constructor function for creating an instance of the default RoleManager implementation with a specified maximum hierarchy level, limiting how many levels of role inheritance an end user can have.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/RBAC.mdx#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// NewRoleManager is the constructor for creating an instance of the\n// default RoleManager implementation.\nfunc NewRoleManager(maxHierarchyLevel int) rbac.RoleManager {\n    rm := RoleManager{}\n    rm.allRoles = &sync.Map{}\n    rm.maxHierarchyLevel = maxHierarchyLevel\n    rm.hasPattern = false\n\n    return &rm\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Swift Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for Swift programming language using the MiddlewareMDTable component with Swift-specific middleware data. This creates a structured display of available middleware options for Swift.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_10\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewareSwiftData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: Rendering Lua Middleware Table in MDX\nDESCRIPTION: Renders the middleware table for Lua programming language using the MiddlewareMDTable component with Lua-specific middleware data. This creates a structured display of available middleware options for Lua.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Middlewares.mdx#2025-04-21_snippet_9\n\nLANGUAGE: mdx\nCODE:\n```\n<MiddlewareMDTable data={MiddlewareLuaData}></MiddlewareMDTable>\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Environment Configuration for Go Benchmark\nDESCRIPTION: Text showing the CPU configuration used for benchmarking Casbin's Go implementation. This provides context for interpreting the performance results.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/docs/Benchmark.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nIntel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz, 2601 Mhz, 4 Core(s), 8 Logical Processor(s)\n```\n\n----------------------------------------\n\nTITLE: Running Markdown Linting for Casbin Website\nDESCRIPTION: Command to lint and fix basic errors in markdown and mdx files using markdownlint-cli. This helps maintain consistency in the documentation.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint:md\n```\n\n----------------------------------------\n\nTITLE: Admonition Syntax for Casbin Documentation\nDESCRIPTION: Example showing the proper format for adding Admonitions (notice boxes) in Casbin documentation with proper spacing requirements.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::info Title\n\nTitle is optional\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Basic robots.txt configuration that allows all search engine crawlers (*) full access to the website with no disallowed paths.\nSOURCE: https://github.com/casbin/casbin-website-v2/blob/master/static/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```"
  }
]