[
  {
    "owner": "pipecat-ai",
    "repo": "pipecat",
    "content": "TITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating the project dependencies.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for PipeCat AI\nDESCRIPTION: A requirements.txt file that specifies the Python packages needed for the PipeCat AI project. It includes environment management (python-dotenv), web framework (FastAPI), server (uvicorn), WebRTC communication (aiortc), computer vision (opencv-python), and PipeCat-specific packages with optional features.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/server/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\naiortc\nopencv-python\npipecat-ai[google,silero,webrtc]\npipecat-ai-small-webrtc-prebuilt\n```\n\n----------------------------------------\n\nTITLE: Deploying Agent to Pipecat Cloud Using CLI\nDESCRIPTION: Command to deploy the Docker image to Pipecat Cloud with the previously created secret set.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npcc deploy my-first-agent your-username/my-first-agent:0.1 --secrets my-first-agent-secrets\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Pipecat Project\nDESCRIPTION: This code snippet contains a list of Python package dependencies needed for the Pipecat project. It includes web framework (FastAPI), server (Uvicorn), environment management (python-dotenv), and Pipecat-specific packages for WebRTC functionality.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi\nuvicorn\npython-dotenv\npipecat-ai[webrtc]\npipecat-ai-small-webrtc-prebuilt\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Chatbot Server\nDESCRIPTION: An example configuration file showing required API keys and optional settings for the FastAPI chatbot server. Includes options for Daily, OpenAI, Gemini, and ElevenLabs API keys along with bot selection and server configuration.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Required API Keys\nDAILY_API_KEY=           # Your Daily API key\nOPENAI_API_KEY=          # Your OpenAI API key (required for OpenAI bot)\nGEMINI_API_KEY=          # Your Gemini API key (required for Gemini bot)\nELEVENLABS_API_KEY=      # Your ElevenLabs API key\n\n# Bot Selection\nBOT_IMPLEMENTATION=      # Options: 'openai' or 'gemini'\n\n# Optional Configuration\nDAILY_API_URL=           # Optional: Daily API URL (defaults to https://api.daily.co/v1)\nDAILY_SAMPLE_ROOM_URL=   # Optional: Fixed room URL for development\nHOST=                    # Optional: Host address (defaults to 0.0.0.0)\nFAST_API_PORT=           # Optional: Port number (defaults to 7860)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for PipeCat AI Project\nDESCRIPTION: This requirements list specifies the Python packages needed to run a PipeCat AI application. It includes python-dotenv for environment variable management, FastAPI with all extras for the web framework, Uvicorn as the ASGI server, and the pipecat-ai package with Google, Silero, and WebRTC optional dependencies.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[google,silero, webrtc]\n```\n\n----------------------------------------\n\nTITLE: Setting up virtual environment for Pipecat examples (Shell)\nDESCRIPTION: This snippet demonstrates how to set up a virtual environment and install dependencies for a Pipecat example project. It includes steps for creating a virtual environment, activating it, and installing required packages.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd pipecat-ai/examples/simple-chatbot\n\npython -m venv venv\n\nsource venv/bin/activate\n\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Starting a Pipecat Agent Session with Daily Integration\nDESCRIPTION: Command to start a session with your deployed agent in a Daily room, which returns a URL for connecting to the agent.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Start a session with your agent in a Daily room\npcc agent start my-first-agent --use-daily\n```\n\n----------------------------------------\n\nTITLE: Configuration File for Pipecat Cloud Deployment\nDESCRIPTION: A TOML configuration file (pcc-deploy.toml) that defines deployment settings for more maintainable deployments.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\nagent_name = \"my-first-agent\"\nimage = \"your-username/my-first-agent:0.1\"\nsecret_set = \"my-first-agent-secrets\"\n\n[scaling]\n    min_instances = 0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running StudyPal in Python\nDESCRIPTION: This snippet outlines the setup process for StudyPal, including cloning the repository, setting up environment variables, installing dependencies, and running the application. It also provides instructions for accessing the Daily room URL to interact with StudyPal.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/studypal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n1. Clone the repository\n2. Copy `env.example` to a `.env` file and add API keys\n3. Install the required packages: `pip install -r requirements.txt`\n4. Run `python3 studypal.py` from your command line.\n5. While the app is running, go to the `https://<yourdomain>.daily.co/<room_url>` set in `DAILY_SAMPLE_ROOM_URL` and talk to studypal!\n```\n\n----------------------------------------\n\nTITLE: Updated Import Example in Python\nDESCRIPTION: Demonstrates the new recommended import syntax for Pipecat services, replacing the deprecated import pattern.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pipecat.services.openai.llm import OpenAILLMService\n```\n\n----------------------------------------\n\nTITLE: Managing Instance Scaling for Pipecat Cloud Deployment\nDESCRIPTION: Commands to adjust the minimum number of instances and check the deployment status of your agent.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Ensure at least one warm instance is always available\npcc deploy my-first-agent your-username/my-first-agent:0.1 --min-instances 1\n\n# Check the status of your deployment\npcc agent status my-first-agent\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Audio Noise Reduction in OpenAIRealtimeBetaLLMService\nDESCRIPTION: This snippet shows how to configure input audio noise reduction for the OpenAIRealtimeBetaLLMService using SessionProperties. It demonstrates setting up a near_field noise reduction type, which is one of the supported options alongside far_field.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsession_properties = SessionProperties(\n  # ...\n  input_audio_noise_reduction=InputAudioNoiseReduction(\n    type=\"near_field\" # also supported: \"far_field\"\n  )\n  # ...\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment for Medical Chatbot\nDESCRIPTION: Commands for creating a virtual environment, activating it, and installing required dependencies from requirements.txt. Also includes copying environment configuration file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/patient-intake/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\ncp env.example .env # and add your credentials\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Pipecat AI Project\nDESCRIPTION: A requirements list that specifies the Python packages needed for the Pipecat AI project. It includes aiofiles for asynchronous file operations, python-dotenv for environment variable management, FastAPI with all extras, uvicorn as the ASGI server, and the pipecat-ai package with daily, openai, silero, and elevenlabs modules.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/chatbot-audio-recording/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiofiles\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[daily,openai,silero,elevenlabs]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Pipecat with CUDA Support\nDESCRIPTION: Requirements file specifying the necessary Python packages for the Pipecat AI project. It includes PyTorch with CUDA 12.4 support, vision and audio tools, Pipecat with Whisper and OpenAI integrations, Textual UI library, Pydantic Settings for configuration, and PyAudio for audio processing.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/local-input-select-stt/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n--extra-index-url https://download.pytorch.org/whl/cu124\ntorch==2.5.0+cu124\ntorchvision \ntorchaudio\npipecat[whisper, openai]\ntextual==1.0.0\npydantic-settings==2.7.1\npyaudio==0.2.14\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Pipecat AI\nDESCRIPTION: This snippet lists the required Python packages for the Pipecat AI project. It includes python-dotenv for environment variable management, FastAPI with all extras, uvicorn as the ASGI server, and pipecat-ai with specific extras for daily tasks, OpenAI integration, Sentry monitoring, Silero TTS, and ElevenLabs voice synthesis.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/sentry-metrics/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[daily,openai,sentry,silero,elevenlabs]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Pipecat Server\nDESCRIPTION: Configuration template for setting up required API keys and optional server parameters. Includes Daily and Cartesia API keys, API URLs, and server hosting configuration.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Required API Keys\nDAILY_API_KEY=           # Your Daily API key\nCARTESIA_API_KEY=        # Your Cartesia API key\n\n# Optional Configuration\nDAILY_API_URL=           # Optional: Daily API URL (defaults to https://api.daily.co/v1)\nDAILY_SAMPLE_ROOM_URL=   # Optional: Fixed room URL for development\nHOST=                    # Optional: Host address (defaults to 0.0.0.0)\nFAST_API_PORT=           # Optional: Port number (defaults to 7860)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: List of Python package dependencies required for the Pipecat project. Includes environment management (python-dotenv), web framework (FastAPI), server (uvicorn), and Pipecat AI components with specific feature sets.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/moondream-chatbot/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[daily,cartesia,moondream,openai,silero]\n```\n\n----------------------------------------\n\nTITLE: Complete Configuration JSON Structure for Pipecat Bots\nDESCRIPTION: Comprehensive JSON structure showing all available configuration options for Pipecat bots, including custom prompts, dial-in settings, dial-out settings, and feature-specific configurations for different bot types.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"config\": {\n\t\t\"prompts\": [\n\t\t\t{\n\t\t\t\t\"name\": \"call_transfer_initial_prompt\",\n\t\t\t\t\"text\": \"Your custom prompt here\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"call_transfer_prompt\",\n\t\t\t\t\"text\": \"Your custom prompt here\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"call_transfer_finished_prompt\",\n\t\t\t\t\"text\": \"Your custom prompt here\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"voicemail_detection_prompt\",\n\t\t\t\t\"text\": \"Your custom prompt here\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"voicemail_prompt\",\n\t\t\t\t\"text\": \"Your custom prompt here\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"human_conversation_prompt\",\n\t\t\t\t\"text\": \"Your custom prompt here\"\n\t\t\t}\n\t\t],\n\t\t\"dialin_settings\": {\n\t\t\t\"From\": \"+CALLERS_PHONE\",\n\t\t\t\"To\": \"$PURCHASED_PHONE\",\n\t\t\t\"callId\": \"callid-read-only-string\",\n\t\t\t\"callDomain\": \"callDomain-read-only-string\"\n\t\t},\n\t\t\"dialout_settings\": [\n\t\t\t{\n\t\t\t\t\"phoneNumber\": \"+12345678910\",\n\t\t\t\t\"callerId\": \"caller-id-uuid\",\n\t\t\t\t\"sipUri\": \"sip:maria@example.com\"\n\t\t\t}\n\t\t],\n\t\t\"call_transfer\": {\n\t\t\t\"mode\": \"dialout\",\n\t\t\t\"speakSummary\": true,\n\t\t\t\"storeSummary\": false,\n\t\t\t\"operatorNumber\": \"+12345678910\",\n\t\t\t\"testInPrebuilt\": false\n\t\t},\n\t\t\"voicemail_detection\": {\n\t\t\t\"testInPrebuilt\": true\n\t\t},\n\t\t\"simple_dialin\": {\n\t\t\t\"testInPrebuilt\": true\n\t\t},\n\t\t\"simple_dialout\": {\n\t\t\t\"testInPrebuilt\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Data Event Handler Implementation - Python\nDESCRIPTION: Example showing how to register an event handler for processing audio data from AudioBufferProcessor when buffer_size is reached. The handler receives audio data, sample rate, and channel information.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@audiobuffer.event_handler(\"on_audio_data\")\nasync def on_audio_data(processor, audio, sample_rate, num_channels):\n    await save_audio(audio, sample_rate, num_channels)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for PipeCat AI Project\nDESCRIPTION: This snippet lists the required Python packages and their versions for the PipeCat AI project. It includes AI-related libraries like Deepgram and OpenAI, as well as web framework dependencies like FastAPI and Uvicorn.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npipecat-ai[daily,cartesia,deepgram,openai,google,silero]\nfastapi==0.115.6\nuvicorn\npython-dotenv\ntwilio\npython-multipart\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Pipecat AI Project\nDESCRIPTION: This code snippet lists the Python package dependencies required for the Pipecat AI project. It includes python-dotenv for environment variable management, FastAPI with all optional dependencies, Uvicorn as the ASGI server, and the pipecat-ai package with daily, cartesia, and openai optional components.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[daily,cartesia,openai]\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for pipecat-ai Project\nDESCRIPTION: This snippet enumerates the required Python packages for the pipecat-ai project. It includes libraries for environment variable management (python-dotenv), web framework (fastapi with all extras), ASGI server (uvicorn), and the pipecat-ai package itself with specific extras for various AI functionalities.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[daily,elevenlabs,openai,silero,google]\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for PipeCat AI Project\nDESCRIPTION: This snippet enumerates the required Python packages for the PipeCat AI project. It includes dependencies for environment management (python-dotenv), web framework (FastAPI), ASGI server (uvicorn), WebRTC (aiortc), and PipeCat AI-specific features (silero, webrtc, daily).\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/daily-interop-bridge/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\naiortc\npipecat-ai[silero, webrtc, daily]\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for Pipecat\nDESCRIPTION: Commands to create and activate a Python virtual environment for the Pipecat server. This isolates the project dependencies from the system Python installation.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/daily-interop-bridge/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Pipecat AI Framework\nDESCRIPTION: Steps for setting up a development environment for working on the Pipecat AI framework itself. Includes creating a virtual environment, installing dependencies, and setting up pre-commit hooks.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install -r dev-requirements.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\npre-commit install\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install -e .\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install -e \".[daily,deepgram,cartesia,openai,silero]\"\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install \"path_to_this_repo[option,...]\"\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Example environment variables configuration for the webhook server including API keys and secrets\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPIPECAT_CLOUD_API_KEY=pk_*\nAGENT_NAME=my-first-agent\nPINLESS_HMAC_SECRET=your_hmac_secret\nLOG_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Pipecat Project\nDESCRIPTION: A requirements file listing the necessary Python packages for the Pipecat project. It includes python-dotenv for environment variable management, FastAPI with all extras for the web framework, uvicorn for the ASGI server, and the pipecat-ai package with several feature-specific extras including daily, google, deepgram, cartesia, silero, and openai integrations.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[daily,google,deepgram,cartesia,silero,openai]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for Twilio Chatbot\nDESCRIPTION: Commands to create and activate a Python virtual environment before installing the project dependencies. This isolates the project's dependencies from other Python projects on the system.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n```\n\n----------------------------------------\n\nTITLE: Purchasing Phone Number via Daily's PhoneNumbers API\nDESCRIPTION: This cURL command demonstrates how to purchase a phone number and configure it for pinless dial-in using Daily's PhoneNumbers API. It sets up the webhook URL, hold music, and timeout message.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n--url https://api.daily.co/v1/domain-dialin-config \\\n--header 'Authorization: Bearer $TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n\t\"type\": \"pinless_dialin\",\n\t\"name_prefix\": \"Customer1\",\n    \"phone_number\": \"+1PURCHASED_NUM\",\n\t\"room_creation_api\": \"https://example.com/api/dial\",\n    \"hold_music_url\": \"https://example.com/static/ringtone.mp3\",\n\t\"timeout_config\": {\n\t\t\"message\": \"No agent is available right now\"\n\t}\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Dialout for Outgoing Calls with JSON\nDESCRIPTION: JSON configuration for handling simple outgoing calls. Includes dialout settings with the phone number to call and simple_dialout configuration.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"config\": {\n\t\t\"dialout_settings\": [\n\t\t\t{\n\t\t\t\t\"phoneNumber\": \"+12345678910\"\n\t\t\t}\n\t\t],\n\t\t\"simple_dialout\": {}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with Version Specifications\nDESCRIPTION: List of Python package dependencies with pinned versions required for the pipecat-ai project. Includes both core dependencies and optional features accessed through extras.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/studypal/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbeautifulsoup4==4.12.3\npypdf==4.3.1\ntiktoken==0.7.0\npipecat-ai[daily,cartesia,openai,silero]\npython-dotenv==1.0.1\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Schema for Unified Function Calling in Pipecat\nDESCRIPTION: This snippet demonstrates how to create a function schema for weather data using Pipecat's unified format for function calling across LLM services. It shows the creation of a weather function with required properties and how to define a tools schema incorporating the function.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nweather_function = FunctionSchema(\n    name=\"get_current_weather\",\n    description=\"Get the current weather\",\n    properties={\n        \"location\": {\n            \"type\": \"string\",\n            \"description\": \"The city and state, e.g. San Francisco, CA\",\n        },\n        \"format\": {\n            \"type\": \"string\",\n            \"enum\": [\"celsius\", \"fahrenheit\"],\n            \"description\": \"The temperature unit to use. Infer this from the user's location.\",\n        },\n    },\n    required=[\"location\"],\n)\ntools = ToolsSchema(standard_tools=[weather_function])\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment and activate it. Includes both Unix and Windows activation commands.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Running the FastAPI Chatbot Server\nDESCRIPTION: Simple command to start the FastAPI chatbot server using the Python script. This launches the server with the configured environment variables.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Mode Voicemail Detection in Daily Prebuilt with JSON\nDESCRIPTION: JSON configuration for testing voicemail detection functionality in Daily Prebuilt environment with the testInPrebuilt flag enabled.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"config\": {\n\t\t\"voicemail_detection\": {\n\t\t\t\"testInPrebuilt\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pipecat Dependencies\nDESCRIPTION: Command to install all required Pipecat dependencies from the requirements file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment in Python\nDESCRIPTION: Commands to create a Python virtual environment and activate it. Includes separate activation command for Windows.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Starting the Bot Runner Service\nDESCRIPTION: Command to start the bot runner service which handles incoming requests and manages bot processes on localhost.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython bot_runner.py --host localhost\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Pipecat AI Project\nDESCRIPTION: This code snippet lists the required Python packages for the Pipecat AI project. It includes python-dotenv for environment variable management, FastAPI with all optional dependencies, Uvicorn as the ASGI server, and the pipecat-ai package with several optional components enabled (openai, silero, websocket, google, and daily).\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/server/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[openai,silero,websocket,google,daily]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install the required Python packages listed in the requirements.txt file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Chatbot Server\nDESCRIPTION: Commands to install required Python packages for the chatbot server. The first command installs dependencies from requirements.txt, while the second optionally installs the local version of pipecat with specific features.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for Translation Chatbot\nDESCRIPTION: Commands to create a Python virtual environment, activate it, install required dependencies, and set up environment configuration for the translation chatbot application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/translation-chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\ncp env.example .env # and add your credentials\n\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Pipecat AI Framework\nDESCRIPTION: Instructions for installing the Pipecat AI module and setting up the environment. It includes steps for installing optional dependencies.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install the module\npip install pipecat-ai\n\n# Set up your environment\ncp dot-env.template .env\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install \"pipecat-ai[option,...]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Preparing Build Environment\nDESCRIPTION: Commands for setting up the development environment, installing dependencies, and preparing the native build. Includes steps for node version management, dependency installation, and Expo prebuild configuration.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/react-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Use the version of node specified in .nvmrc\nnvm i\n\n# Install dependencies\nnpm i\n\n# Before a native app can be compiled, the native source code must be generated.\nnpx expo prebuild\n\n# Configure the environment variable to connect to the local server\ncp env.example .env\n# edit .env and add your local ip address, for example: http://192.168.1.16:7860\n```\n\n----------------------------------------\n\nTITLE: JSON Request Format for Initiating PSTN/SIP Calls\nDESCRIPTION: Example JSON body for the /api/dial endpoint that initiates a PSTN/SIP call with configuration for dialout settings, voicemail detection, and call transfer options.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"To\": \"+14152251493\",\n  \"From\": \"+14158483432\",\n  \"callId\": \"string-contains-uuid\",\n  \"callDomain\": \"string-contains-uuid\",\n  \"dialout_settings\": [\n    {\n      \"phoneNumber\": \"+14158483432\",\n      \"callerId\": \"+14152251493\"\n    }\n  ],\n  \"voicemail_detection\": {\n    \"testInPrebuilt\": true\n  },\n  \"call_transfer\": {\n    \"mode\": \"dialout\",\n    \"speakSummary\": true,\n    \"storeSummary\": true,\n    \"operatorNumber\": \"+14152250006\",\n    \"testInPrebuilt\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment and Dependencies\nDESCRIPTION: Instructions for creating a Python virtual environment, activating it, installing required dependencies, and setting up environment variables from a template.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/chatbot-audio-recording/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\ncp env.example .env # and add your credentials\n\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Pipecat Project\nDESCRIPTION: A requirements list specifying the necessary Python packages for the Pipecat project. It includes pipecatcloud, pipecat-ai with several plugins (cartesia, daily, openai, silero) version 0.0.58 or higher, and python-dotenv version 1.0.1 or compatible.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npipecatcloud\npipecat-ai[cartesia,daily,openai,silero]>=0.0.58\npython-dotenv~=1.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Pipecat Deployment (Bash)\nDESCRIPTION: This snippet shows how to create a virtual environment, activate it, and install the required dependencies for the Pipecat project using pip.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/modal-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/active # or OS equivalent\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Lists required Python packages including async_timeout, fastapi, uvicorn, python-dotenv, and PipeCat AI with optional features enabled. The square brackets after pipecat-ai indicate optional feature sets including daily, silero, openai, cartesia, and google integrations.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasync_timeout\nfastapi\nuvicorn\npython-dotenv\npipecat-ai[daily,silero,openai,cartesia,google]\n```\n\n----------------------------------------\n\nTITLE: Production Request Format\nDESCRIPTION: Complete JSON structure for production webhook requests including dial-in and dial-out settings\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"To\": \"+14152251493\",\n  \"From\": \"+14158483432\",\n  \"callId\": \"string-contains-uuid\",\n  \"callDomain\": \"string-contains-uuid\",\n  \"dialout_settings\": [\n    { \"phoneNumber\": \"+14158483432\", \"callerId\": \"purchased_phone_uuid\" },\n    { \"sipUri\": \"sip:username@sip.hostname.com\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Local Pipecat Package with Features\nDESCRIPTION: Command for installing the local version of the pipecat package with specific features instead of using the published version. This enables development with the latest local code.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install --editable \"../../../[daily,elevenlabs,openai,silero,google]\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Pipecat AI Project\nDESCRIPTION: This snippet lists the required Python packages and their versions for the Pipecat AI project. It includes dotenv for environment management, Modal for serverless computing, Pipecat AI with additional features, FastAPI for web framework, and aiohttp for asynchronous HTTP client/server.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/modal-example/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv==1.0.1\nmodal==0.71.3\npipecat-ai[daily,silero,cartesia,openai]==0.0.52\nfastapi==0.115.6\naiohttp==3.11.11\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment and Dependencies\nDESCRIPTION: Creates a Python virtual environment, activates it, installs required dependencies from requirements.txt, and sets up environment variables.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\ncp env.example .env # and add your credentials\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Pipecat AI Project\nDESCRIPTION: This is a requirements list specifying the Python packages needed for a Pipecat AI project. It includes python-dotenv for environment variable management, FastAPI with all extras for web API development, Uvicorn as an ASGI server, and the pipecat-ai package with optional dependencies for daily, cartesia, openai, and silero features.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/patient-intake/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[daily,cartesia,openai,silero]\n```\n\n----------------------------------------\n\nTITLE: Configuring Deepgram STT Service with Nova-2 Model in Python\nDESCRIPTION: Demonstrates how to configure the DeepgramSTTService to use the nova-2-general model instead of the new default nova-3 model. This snippet shows how to pass custom LiveOptions to the service constructor.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nstt = DeepgramSTTService(..., live_options=LiveOptions(model=\"nova-2-general\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring Twilio Stream XML for WebSocket Connection\nDESCRIPTION: XML configuration that tells Twilio how to connect to the WebSocket endpoint. This example points to a local development server for testing purposes.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response>\n  <Connect>\n    <Stream url=\"ws://localhost:8765/ws\"></Stream>\n  </Connect>\n  <Pause length=\"40\"/>\n</Response>\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Pipecat Cloud\nDESCRIPTION: Series of Docker commands to build an ARM-compatible image, tag it with appropriate versioning, and push it to Docker Hub for deployment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Build the image (targeting ARM architecture for cloud deployment)\ndocker build --platform=linux/arm64 -t my-first-agent:latest .\n\n# Tag with your Docker username and version\ndocker tag my-first-agent:latest your-username/my-first-agent:0.1\n\n# Push to Docker Hub\ndocker push your-username/my-first-agent:0.1\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment and activate it for isolated dependency management. Includes command variations for both Unix/Linux/Mac and Windows systems.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Implementing Conversation Item Event Handlers in OpenAIRealtimeBetaLLMService\nDESCRIPTION: This snippet demonstrates how to implement event handlers for conversation item creation and updates in the OpenAIRealtimeBetaLLMService. These event handlers provide callbacks when new conversation items are created or existing ones are updated.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@llm.event_handler(\"on_conversation_item_created\")\nasync def on_conversation_item_created(llm, item_id, item):\n  # ...\n\n@llm.event_handler(\"on_conversation_item_updated\")\nasync def on_conversation_item_updated(llm, item_id, item):\n  # `item` may not always be available here\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Dialout Request with Voicemail Detection and Call Transfer\nDESCRIPTION: This cURL command demonstrates an advanced dialout request that includes voicemail detection and call transfer settings. It specifies the To and From numbers, call IDs, and various configuration options for handling the call.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/api/dial \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"To\": \"+1234567890\",\n    \"From\": \"+1987654321\",\n    \"callId\": \"call-uuid-123\",\n    \"callDomain\": \"domain-uuid-456\",\n    \"dialout_settings\": [\n      {\n        \"phoneNumber\": \"+1234567890\",\n        \"callerId\": \"purchased_phone_uuid\"\n      }\n    ],\n    \"voicemail_detection\": {\n      \"testInPrebuilt\": true\n    },\n    \"call_transfer\": {\n      \"mode\": \"dialout\",\n      \"speakSummary\": true,\n      \"storeSummary\": true,\n      \"operatorNumber\": \"+1234567890\",\n      \"testInPrebuilt\": true\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Testing Bot Connection with cURL\nDESCRIPTION: This cURL command sends a POST request to your deployed Fly.io application. The request waits until the machine enters a 'starting' state before returning a room URL and token for connection.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/flyio-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://YOUR_FLY_APP_NAME/'\n```\n\n----------------------------------------\n\nTITLE: Testing Voicemail Detection Bot in Daily Prebuilt\nDESCRIPTION: cURL command to start a voicemail detection bot for testing in Daily Prebuilt without making actual phone calls. Returns a Daily room URL for testing.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"http://localhost:7860/start\" \\\n\t -H \"Content-Type: application/json\" \\\n\t -d '{\n\t\t \"config\": {\n\t\t\t\"voicemail_detection\": {\n\t\t\t   \"testInPrebuilt\": true\n\t\t\t}\n\t\t }\n\t  }'\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to copy the example environment file to create a new .env file that will store configuration settings for the application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Building and running Docker image for Moondream Chatbot\nDESCRIPTION: Commands to build a Docker image for the chatbot and run it, exposing the necessary port and using environment variables.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/moondream-chatbot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t moonbot .\ndocker run --env-file .env -p 7860:7860 moonbot\n```\n\n----------------------------------------\n\nTITLE: Setting up Python environment for Sentry Metrics Chatbot\nDESCRIPTION: Sets up a Python virtual environment, installs dependencies, and creates an environment configuration file for the chatbot application. Users need to add their own credentials to the .env file after copying from the example.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/sentry-metrics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\ncp env.example .env # and add your credentials\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Pull Secret for Private Repositories\nDESCRIPTION: Commands to create and use Docker image pull credentials for private repositories during deployment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Create pull secret (you'll be prompted for credentials)\npcc secrets image-pull-secret pull-secret https://index.docker.io/v1/\n\n# Deploy with credentials\npcc deploy my-first-agent your-username/my-first-agent:0.1 --credentials pull-secret\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io Application Secrets from .env File\nDESCRIPTION: This command reads the contents of your .env file and sets them as secrets in your Fly.io application. The command converts newlines to spaces and uses xargs to pass the environment variables to the flyctl secrets set command.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/flyio-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat .env | tr '\\n' ' ' | xargs flyctl secrets set\n```\n\n----------------------------------------\n\nTITLE: Building and Running Chatbot Docker Container\nDESCRIPTION: Commands to build a Docker image for the chatbot and run it as a container with environment variables loaded from a .env file and port 7860 exposed.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/canonical-metrics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t chatbot .\ndocker run --env-file .env -p 7860:7860 chatbot\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Dialin for Incoming Calls with JSON\nDESCRIPTION: JSON configuration for handling simple incoming calls. Includes dialin settings with call details and simple_dialin configuration.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"config\": {\n\t\t\"dialin_settings\": {\n\t\t\t\"from\": \"+12345678901\",\n\t\t\t\"to\": \"+19876543210\",\n\t\t\t\"call_id\": \"call-id-string\",\n\t\t\t\"call_domain\": \"domain-string\"\n\t\t},\n\t\t\"simple_dialin\": {}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Secret Set for API Keys Using Environment File\nDESCRIPTION: Commands to copy the example environment file, edit it with API keys, and create a secret set for deployment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Copy the example env file\ncp env.example .env\n\n# Edit .env to add your API keys:\n# CARTESIA_API_KEY=your_cartesia_key\n# OPENAI_API_KEY=your_openai_key\n\n# Create a secret set from your .env file\npcc secrets set my-first-agent-secrets --file .env\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating the project dependencies.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Chatbot\nDESCRIPTION: Commands to create a virtual environment, activate it, install dependencies, and set up environment variables for the chatbot application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/canonical-metrics/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\ncp env.example .env # and add your credentials\n\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands for Translation Chatbot\nDESCRIPTION: Commands to build a Docker image for the translation chatbot and run it with environment variables from a .env file, exposing the application on port 7860.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/translation-chatbot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t chatbot .\ndocker run --env-file .env -p 7860:7860 chatbot\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Mode Simple Dialin in Daily Prebuilt with JSON\nDESCRIPTION: JSON configuration for testing simple dialin functionality in Daily Prebuilt environment with the testInPrebuilt flag enabled.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"config\": {\n\t\t\"simple_dialin\": {\n\t\t\t\"testInPrebuilt\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Docker deployment for Sentry Metrics Chatbot\nDESCRIPTION: Builds and runs a Docker container for the chatbot application. The command maps the container's port 7860 to the host's port 7860 and uses environment variables from the .env file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/sentry-metrics/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t chatbot .\ndocker run --env-file .env -p 7860:7860 chatbot\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables\nDESCRIPTION: Command to create a .env file from the provided template which will store API keys and other configuration variables needed by the application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Running Telnyx Chatbot in Docker Container\nDESCRIPTION: Command to run the Docker container with port mapping to expose the FastAPI application on port 8765.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -p 8765:8765 telnyx-chatbot\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment for Pipecat\nDESCRIPTION: Commands to create and activate a Python virtual environment for the Pipecat project. This is the first step in setting up the development environment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Instructions for building and running the chatbot application in a Docker container, including environment variable configuration and port mapping.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/chatbot-audio-recording/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t chatbot .\ndocker run --env-file .env -p 7860:7860 chatbot\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration Template\nDESCRIPTION: Command to create a local environment configuration file from the example template. The .env file will need to be populated with API keys and other configuration values.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/daily-interop-bridge/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Making Actual Phone Calls with Voicemail Detection Bot\nDESCRIPTION: cURL command to start a voicemail detection bot that makes an actual phone call to the specified phone number and can detect if it reaches voicemail or a human.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"http://localhost:7860/start\" \\\n\t -H \"Content-Type: application/json\" \\\n\t -d '{\n\t\t \"config\": {\n\t\t\t\"dialout_settings\": [{\n\t\t\t   \"phoneNumber\": \"+12345678910\"\n\t\t\t}],\n\t\t\t\"voicemail_detection\": {\n\t\t\t   \"testInPrebuilt\": false\n\t\t\t}\n\t\t }\n\t  }'\n```\n\n----------------------------------------\n\nTITLE: Building Pipecat Documentation Locally\nDESCRIPTION: Two alternative methods for building the documentation locally: using the provided build script (which also opens the docs) or running sphinx-build directly with flags for warning handling.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Using the build script (automatically opens docs when done)\n./build-docs.sh\n\n# Or directly with sphinx-build\nsphinx-build -b html . _build/html -W --keep-going\n```\n\n----------------------------------------\n\nTITLE: Documenting a Python Class with Google-style Docstrings\nDESCRIPTION: Example of a correctly documented Python class following the project's docstring conventions. It demonstrates how to document class parameters, property methods, and return values.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass:\n    \"\"\"Class description.\n\n    Additional details about the class.\n\n    Args:\n        param1: Description of first parameter.\n        param2: Description of second parameter.\n    \"\"\"\n\n    def __init__(self, param1, param2):\n        # No docstring required here as parameters are documented above\n        self.param1 = param1\n        self.param2 = param2\n\n    @property\n    def some_property(self) -> str:\n        \"\"\"Get the formatted property value.\n\n        Returns:\n            A string representation of the property.\n        \"\"\"\n        return f\"Property: {self.param1}\"\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies Configuration\nDESCRIPTION: Specifies required Python packages and their version constraints using the compatible release operator (~=). Includes development dependencies for testing, linting, and building.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/dev-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild~=1.2.2\ncoverage~=7.6.12\ngrpcio-tools~=1.67.1\npip-tools~=7.4.1\npre-commit~=4.0.1\npyright~=1.1.397\npytest~=8.3.4\npytest-asyncio~=0.25.3\npytest-aiohttp==1.1.0\nruff~=0.11.1\nsetuptools~=70.0.0\nsetuptools_scm~=8.1.0\npython-dotenv~=1.0.1\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to copy the example environment file to create a .env configuration file for the application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Deploying Pipecat examples using Docker (Shell)\nDESCRIPTION: This snippet shows how to deploy Pipecat example projects using Docker. It includes commands for building a Docker image, running a container with environment variables, and pushing the image to a repository.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build username/app:tag .\n\ndocker run -p 7860:7860 --env-file ./.env username/app:tag\n\ndocker push ...\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Local Development\nDESCRIPTION: Commands to set the required API keys as environment variables for local testing of the agent.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Set environment variables with your API keys\nexport CARTESIA_API_KEY=\"your_cartesia_key\"\nexport DAILY_API_KEY=\"your_daily_key\"\nexport OPENAI_API_KEY=\"your_openai_key\"\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for PipeCat AI\nDESCRIPTION: A requirements file listing all necessary Python packages for the PipeCat AI project. It includes python-dotenv for environment variable management, FastAPI with all extras, uvicorn for ASGI server implementation, and the pipecat-ai package with multiple extensions.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/canonical-metrics/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npython-dotenv\nfastapi[all]\nuvicorn\npipecat-ai[daily,openai,silero,elevenlabs,canonical]\n```\n\n----------------------------------------\n\nTITLE: Building and Running with Docker\nDESCRIPTION: Commands to build and run the application using Docker, which creates a containerized environment with all dependencies included.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t twilio-chatbot .\ndocker run -it --rm -p 8765:8765 twilio-chatbot\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration\nDESCRIPTION: Command to create a .env file from the template for configuring API keys and other environment variables.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Commands for building and running the chatbot in a Docker container, including environment variable configuration and port mapping.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/patient-intake/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t chatbot .\ndocker run --env-file .env -p 7860:7860 chatbot\n```\n\n----------------------------------------\n\nTITLE: Customizing Bot Prompts with cURL in Shell\nDESCRIPTION: cURL command example showing how to customize bot prompts. This example customizes the voicemail prompt while using the default values for all other prompts.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"http://localhost:7860/start\" \\\n\t -H \"Content-Type: application/json\" \\\n\t -d '{\n\t\t \"config\": {\n\t\t\t\"prompts\": [\n\t\t\t   {\n\t\t\t\t  \"name\": \"voicemail_prompt\",\n\t\t\t\t  \"text\": \"Hello, this is ACME Corporation calling. Please call us back at 555-123-4567 regarding your recent order. Thank you!\"\n\t\t\t   }\n\t\t\t],\n\t\t\t\"dialout_settings\": [{\n\t\t\t   \"phoneNumber\": \"+12345678910\"\n\t\t\t}],\n\t\t\t\"voicemail_detection\": {\n\t\t\t   \"testInPrebuilt\": false\n\t\t\t}\n\t\t }\n\t  }'\n```\n\n----------------------------------------\n\nTITLE: Building and running Docker image for Intel GPUs\nDESCRIPTION: Specific commands for building and running the Docker image optimized for Intel GPUs (Arc, Max, and Flex series), including device mapping.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/moondream-chatbot/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t moonbot -f Dockerfile.intel .\ndocker run --env-file .env -p 7860:7860 --device /dev/dri moonbot\n```\n\n----------------------------------------\n\nTITLE: Installing PipeCat AI Model Integrations\nDESCRIPTION: Optional PipeCat integrations for various AI models and services, including speech recognition, text generation, and audio processing capabilities. Some integrations are marked as mocked due to compatibility issues or development status.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: requirements.txt\nCODE:\n```\npipecat-ai[anthropic]\npipecat-ai[assemblyai]\npipecat-ai[aws]\npipecat-ai[azure]\npipecat-ai[canonical]\npipecat-ai[cartesia]\npipecat-ai[cerebras]\npipecat-ai[deepseek]\npipecat-ai[daily]\npipecat-ai[deepgram]\npipecat-ai[elevenlabs]\npipecat-ai[fal]\npipecat-ai[fireworks]\npipecat-ai[fish]\npipecat-ai[gladia]\npipecat-ai[google]\npipecat-ai[grok]\npipecat-ai[groq]\npipecat-ai[koala]\npipecat-ai[langchain]\npipecat-ai[livekit]\npipecat-ai[lmnt]\npipecat-ai[local]\npipecat-ai[moondream]\npipecat-ai[nim]\npipecat-ai[noisereduce]\npipecat-ai[openai]\npipecat-ai[riva]\npipecat-ai[silero]\npipecat-ai[simli]\npipecat-ai[soundfile]\npipecat-ai[tavus]\npipecat-ai[together]\npipecat-ai[websocket]\npipecat-ai[whisper]\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File for the Webhook Server\nDESCRIPTION: Command to copy the example environment file to create a new .env file for configuration.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: List of required Python packages including FastAPI web framework, Uvicorn ASGI server, environment management, HTTP client, data validation, and logging utilities.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi\nuvicorn\npython-dotenv\nrequests\npydantic\nloguru\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install required Python packages from requirements.txt file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Secret Set for API Keys Using CLI Directly\nDESCRIPTION: Alternative command to create a secret set directly via the CLI without using an environment file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npcc secrets set my-first-agent-secrets \\\n  CARTESIA_API_KEY=your_cartesia_key \\\n  OPENAI_API_KEY=your_openai_key\n```\n\n----------------------------------------\n\nTITLE: Starting Ngrok Tunnel in Shell\nDESCRIPTION: Shell command to start ngrok with a custom domain for exposing the localhost service to the internet.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nngrok http --domain yourdomain.ngrok.app 7860\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration\nDESCRIPTION: Creates environment configuration file by copying the example template. Used for storing API keys and configuration settings.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmv env.example .env\n```\n\n----------------------------------------\n\nTITLE: Daily Webhook JSON Structure for Incoming Calls\nDESCRIPTION: JSON structure of the webhook data sent by Daily when an incoming call is received. Contains caller's phone number, purchased phone number, call ID, and call domain.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"From\": \"+CALLERS_PHONE\",\n\t\"To\": \"$PURCHASED_PHONE\",\n\t\"callId\": \"callid-read-only-string\",\n\t\"callDomain\": \"callDomain-read-only-string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements\nDESCRIPTION: Command to install the required Python packages listed in requirements.txt.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for Pipecat Cloud\nDESCRIPTION: Commands to create and activate a Python virtual environment and install the Pipecat Cloud CLI.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a virtual environment\npython -m venv .venv\n\n# Activate it\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install the Pipecat Cloud CLI\npip install pipecatcloud\n```\n\n----------------------------------------\n\nTITLE: Running the Pipecat Agent Locally\nDESCRIPTION: Command to run the bot script locally for testing, with the LOCAL_RUN environment variable set to enable local execution mode.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nLOCAL_RUN=1 python bot.py\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration\nDESCRIPTION: Command to create a new .env file from the example template for configuration settings.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Creating and Using API Keys for Pipecat Agent Access\nDESCRIPTION: Commands to create a public API key for accessing your agent and set it as the default key.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Create a public API key for accessing your agent\npcc organizations keys create\n\n# Set it as the default key to use with your agent\npcc organizations keys use\n```\n\n----------------------------------------\n\nTITLE: Daily Transport Remote Participants Update Example\nDESCRIPTION: Shows how to use the update_remote_participants() method in DailyTransport to modify remote participants' permissions.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nupdate_remote_participants()\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies List\nDESCRIPTION: List of required Python packages including AI services (Cartesia, OpenAI, Silero, Deepgram) and web framework components (FastAPI, Uvicorn). Includes logging utility (loguru) and environment configuration (python-dotenv).\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npipecat-ai[cartesia,openai,silero,deepgram]\nfastapi\nuvicorn\npython-dotenv\nloguru\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Pipecat (Bash)\nDESCRIPTION: This command copies the example environment file to create a .env file for configuring the Pipecat application. Alternatively, Modal.com secrets can be used for configuration.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/modal-example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp env.example .env\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pip for Pipecat Audio Transcription\nDESCRIPTION: Command to install all required dependencies for the Pipecat Audio Transcription example using pip package manager and the requirements.txt file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/local-input-select-stt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Deploying Pipecat to Modal.com Production (Bash)\nDESCRIPTION: This command deploys the Pipecat application to Modal.com for production use.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/modal-example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmodal deploy app.py\n```\n\n----------------------------------------\n\nTITLE: Running the Python Bot\nDESCRIPTION: Executes the Python bot script that likely implements the WebsocketServerTransport for client communication.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython bot.py\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Dial-in Bot in Daily Prebuilt\nDESCRIPTION: cURL command to start a simple dial-in bot for testing in Daily Prebuilt without making actual phone calls. Returns a Daily room URL for testing.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"http://localhost:7860/start\" \\\n\t -H \"Content-Type: application/json\" \\\n\t -d '{\n\t\t \"config\": {\n\t\t\t\"simple_dialin\": {\n\t\t\t   \"testInPrebuilt\": true\n\t\t\t}\n\t\t }\n\t  }'\n```\n\n----------------------------------------\n\nTITLE: Creating Public Endpoint with ngrok\nDESCRIPTION: Command to start ngrok to create a public URL for the local server, making it accessible for webhook callbacks from external services.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nngrok http --domain yourdomain.ngrok.app 7860\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Pipecat\nDESCRIPTION: Command to install all required dependencies from the requirements.txt file into the virtual environment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Telnyx Chatbot\nDESCRIPTION: Command to build a Docker image for the Telnyx Chatbot application using the provided Dockerfile.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t telnyx-chatbot .\n```\n\n----------------------------------------\n\nTITLE: Running the Translation Chatbot Server\nDESCRIPTION: Command to start the Python server that hosts the translation chatbot application, which will be accessible at localhost:7860.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/translation-chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Dial-out Bot in Daily Prebuilt\nDESCRIPTION: cURL command to start a simple dial-out bot for testing in Daily Prebuilt without making actual phone calls. Returns a Daily room URL for testing.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"http://localhost:7860/start\" \\\n\t -H \"Content-Type: application/json\" \\\n\t -d '{\n\t\t \"config\": {\n\t\t\t\"simple_dialout\": {\n\t\t\t   \"testInPrebuilt\": true\n\t\t\t}\n\t\t }\n\t  }'\n```\n\n----------------------------------------\n\nTITLE: Exposing the FastAPI Server with Ngrok Using a Subdomain\nDESCRIPTION: Command to expose the webhook server with a consistent subdomain URL for easier testing.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nngrok http -subdomain=mydomain http://localhost:7860\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in INI Format\nDESCRIPTION: Environment variable configuration template including required API keys for Daily, Deepgram, Google/Gemini, and Cartesia services, along with optional configuration parameters for host, port, and API URLs.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Required API Keys\nDAILY_API_KEY=           # Your Daily API key\nDEEPGRAM_API_KEY=        # Your Deepgram API key\nGOOGLE_API_KEY=          # Your Google/Gemini API key\nCARTESIA_API_KEY=        # Your Cartesia API key\n\n# Optional Configuration\nDAILY_API_URL=           # Optional: Daily API URL (defaults to https://api.daily.co/v1)\nDAILY_SAMPLE_ROOM_URL=   # Optional: Fixed room URL for development\nHOST=                    # Optional: Host address (defaults to 0.0.0.0)\nFAST_API_PORT=           # Optional: Port number (defaults to 7860)\n```\n\n----------------------------------------\n\nTITLE: Starting the Bot Server\nDESCRIPTION: Command to launch the FastAPI server that powers the chatbot backend functionality.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Starting the Chatbot Server\nDESCRIPTION: Command to launch the Python server that hosts the chatbot application, which will be accessible at localhost:7860.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/chatbot-audio-recording/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command for installing required Python packages from requirements.txt file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting up Python environment for Moondream Chatbot\nDESCRIPTION: Creates a virtual environment, activates it, installs dependencies, and sets up the environment file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/moondream-chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n\ncp env.example .env # and add your credentials\n```\n\n----------------------------------------\n\nTITLE: Configuring Bot Implementation in Environment Variables\nDESCRIPTION: Example of how to set the bot implementation type in the .env configuration file. Allows choosing between OpenAI (default) and Gemini backends.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nBOT_IMPLEMENTATION=      # Options: 'openai' (default) or 'gemini'\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Mode Simple Dialout in Daily Prebuilt with JSON\nDESCRIPTION: JSON configuration for testing simple dialout functionality in Daily Prebuilt environment with the testInPrebuilt flag enabled.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"config\": {\n\t\t\"simple_dialout\": {\n\t\t\t\"testInPrebuilt\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Chatbot Server\nDESCRIPTION: Command to start the chatbot server, which will be accessible via a web interface on port 7860.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/canonical-metrics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Installing Local Pipecat Package\nDESCRIPTION: Optional command for installing local version of pipecat package with specified features instead of the published version.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install --editable \"../../../[daily,deepgram,google,cartesia,openai,silero]\"\n```\n\n----------------------------------------\n\nTITLE: Starting Ngrok HTTP Tunnel\nDESCRIPTION: Command to start ngrok for creating a public URL to the local development server, which is necessary for Twilio to communicate with the application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 8765\n```\n\n----------------------------------------\n\nTITLE: Running the Pipecat Server\nDESCRIPTION: Command to start the Pipecat server that facilitates the communication between SmallWebRTC and Daily transports.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/daily-interop-bridge/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Pipecat Cloud CLI\nDESCRIPTION: Command to log in and authenticate with the Pipecat Cloud service using the CLI tool.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npcc auth login\n```\n\n----------------------------------------\n\nTITLE: Server Startup Command\nDESCRIPTION: Command to start the Python server that handles voice communication\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython src/server.py\n```\n\n----------------------------------------\n\nTITLE: Webhook Test Request Format\nDESCRIPTION: JSON format for testing the webhook configuration\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Test\": \"test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Moondream Chatbot server\nDESCRIPTION: Executes the Python script to start the chatbot server, which can then be accessed via a web browser.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/moondream-chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Starting the Chatbot Server\nDESCRIPTION: Command to start the Python server that runs the chatbot backend.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Running the Server in Testing Mode\nDESCRIPTION: Command to start the server in testing mode, which allows for automated testing without making actual phone calls.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Make sure you're in the project directory and your virtual environment is activated\npython server.py -t\n```\n\n----------------------------------------\n\nTITLE: Running Specific Example\nDESCRIPTION: Example command showing how to run a specific bot (interruptible.py).\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython 07-interruptible.py\n```\n\n----------------------------------------\n\nTITLE: Testing Call Transfer Bot in Daily Prebuilt\nDESCRIPTION: cURL command to start a call transfer bot for testing in Daily Prebuilt that can simulate transferring a call to an operator without making actual phone calls.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"http://localhost:7860/start\" \\\n\t -H \"Content-Type: application/json\" \\\n\t -d '{\n\t\t \"config\": {\n\t\t\t\"call_transfer\": {\n\t\t\t   \"mode\": \"dialout\",\n\t\t\t   \"speakSummary\": true,\n\t\t\t   \"storeSummary\": false,\n\t\t\t   \"operatorNumber\": \"+12345678910\",\n\t\t\t   \"testInPrebuilt\": true\n\t\t\t}\n\t\t }\n\t  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Pipecat Server\nDESCRIPTION: Commands for installing required dependencies from requirements.txt and optionally installing the local version of pipecat with specific features.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install --editable \"../../../[daily,cartesia,openai]\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Server\nDESCRIPTION: Command to launch the FastAPI server using Python.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Pipecat AI Framework\nDESCRIPTION: Command to run tests for the Pipecat AI framework using pytest.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Running the FastAPI Application with Python\nDESCRIPTION: Command to start the FastAPI server directly using Python. This requires an activated virtual environment with all dependencies installed.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Make sure you're in the project directory and your virtual environment is activated\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Mode Call Transfer in Daily Prebuilt with JSON\nDESCRIPTION: JSON configuration for testing call transfer functionality in Daily Prebuilt environment. Includes call transfer settings with the testInPrebuilt flag enabled.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"config\": {\n\t\t\"call_transfer\": {\n\t\t\t\"mode\": \"dialout\",\n\t\t\t\"speakSummary\": true,\n\t\t\t\"operatorNumber\": \"+12345678910\",\n\t\t\t\"testInPrebuilt\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SSL Certificates on macOS for API Connections\nDESCRIPTION: Command to install SSL certificates on macOS to resolve certificate verification issues when connecting to external APIs like Daily.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Python\\ 3.12/Install\\ Certificates.command\n```\n\n----------------------------------------\n\nTITLE: Running Example Bot\nDESCRIPTION: Generic command for running any example bot file using Python.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython <example-name>\n```\n\n----------------------------------------\n\nTITLE: Customizing Network Interface\nDESCRIPTION: Command to run an example with custom host and port settings to resolve conflicts.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/foundational/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython <example-name> --host 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Exposing the FastAPI Server with Ngrok\nDESCRIPTION: Command to expose the local webhook server to the internet using ngrok for testing purposes.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 7860\n```\n\n----------------------------------------\n\nTITLE: Building Frontend Assets\nDESCRIPTION: Installs NPM dependencies and builds the frontend UI assets. This process is automated in Docker deployment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd frontend/\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Bot Runner in Shell\nDESCRIPTION: Shell command to start the bot runner on localhost for Twilio integration.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\npython bot_runner.py --host localhost\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Application with Python\nDESCRIPTION: Command to start the FastAPI application directly using Python, assuming the virtual environment is activated.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure you're in the project directory and your virtual environment is activated\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server\nDESCRIPTION: Starts the bot manager and API server locally with configurable host and port settings.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython src/bot_runner.py --host localhost\n```\n\n----------------------------------------\n\nTITLE: Hosting Static Web Client using Python HTTP Server\nDESCRIPTION: Starts a simple HTTP server using Python to host the static web client files, allowing access via localhost:8000.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/websocket-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Running the Sentry Metrics Chatbot server\nDESCRIPTION: Starts the chatbot server using the Python script. Once running, the chatbot interface can be accessed through a web browser at the specified localhost address.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/sentry-metrics/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Code for Pipecat AI Development\nDESCRIPTION: Visual Studio Code settings for configuring Ruff as the default Python formatter and enabling formatting on save for Pipecat AI development.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"[python]\": {\n    \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n    \"editor.formatOnSave\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Pipecat Locally with Modal (Bash)\nDESCRIPTION: This command uses Modal to serve the Pipecat application locally for testing purposes before deployment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/modal-example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmodal serve app.py\n```\n\n----------------------------------------\n\nTITLE: Starting the Bot Server\nDESCRIPTION: Command to launch the Python server application that handles video processing.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install required NPM dependencies for the JavaScript client.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/javascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the Chatbot Server\nDESCRIPTION: Command to start the chatbot server which will be accessible at localhost:7860.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/patient-intake/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment for Pipecat Server\nDESCRIPTION: Commands for creating and activating a Python virtual environment for the server deployment. Includes platform-specific activation commands.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Running the Pipecat JavaScript Client Application\nDESCRIPTION: Command to start the development server for the Pipecat JavaScript client application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/client/typescript/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Server\nDESCRIPTION: Command to start the voice agent server application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/voice-agent/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Creating Streams Configuration File\nDESCRIPTION: Commands to copy the template streams.xml file and create a local configuration for WebSocket connections.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp templates/streams.xml.template templates/streams.xml\n```\n\n----------------------------------------\n\nTITLE: Running the Pipecat Server\nDESCRIPTION: Command to start the FastAPI server using the Python server script.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for Chatbot Server\nDESCRIPTION: Commands to create and activate a Python virtual environment for the FastAPI chatbot server. These commands initialize the environment and prepare it for dependency installation.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Running Pipecat React Client in Development Mode\nDESCRIPTION: Starts the Pipecat React client application in development mode using the npm run dev command.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the FastAPI Webhook Server\nDESCRIPTION: Command to run the FastAPI server for handling Daily PSTN/SIP webhook calls.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Committing Changes (Bash)\nDESCRIPTION: Command to commit changes with a meaningful message. This records the changes in the local repository.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Description of your changes\"\n```\n\n----------------------------------------\n\nTITLE: Running Twilio Bot in Shell\nDESCRIPTION: Shell command to start the Twilio bot service for Twilio-specific functionality.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\npython bot_twilio.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment\nDESCRIPTION: Commands for creating and activating a Python virtual environment, with Windows-specific activation command noted.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Running the JavaScript Client Application\nDESCRIPTION: Command to start the development server for the JavaScript client application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/client/javascript/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Commands for starting the development server and exposing it via ngrok for testing\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 7860\n```\n\n----------------------------------------\n\nTITLE: Running the Client Application\nDESCRIPTION: Command to start the development server for the JavaScript client application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/client/javascript/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handlers for Frame Processors in Python\nDESCRIPTION: Example of how to register an event handler for a TTS service using a decorator. This code demonstrates the pattern for responding to processor events like 'on_connected'.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntts = SomeTTSService(...)\n\n@tts.event_handler(\"on_connected\"):\nasync def on_connected(processor):\n  ...\n```\n\n----------------------------------------\n\nTITLE: Python Virtual Environment Setup\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolation of project dependencies\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Navigating to Server Directory with Bash\nDESCRIPTION: Command to change directory to the server folder where the bot server implementation resides.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd server\n```\n\n----------------------------------------\n\nTITLE: Starting Python Server\nDESCRIPTION: Command to start the Python server after setting up the environment and configuring API keys.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Running iOS Development Build\nDESCRIPTION: Command to run the application on an iOS simulator or device.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/react-native/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ios\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies in Pipecat\nDESCRIPTION: Command to install all required packages for building the Pipecat documentation. Uses pip to install dependencies from the requirements.txt file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Sets up a Python virtual environment and installs required dependencies from requirements.txt\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Navigating to JavaScript Client Directory\nDESCRIPTION: Command to change directory to the JavaScript client implementation folder.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/javascript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd client/javascript\n```\n\n----------------------------------------\n\nTITLE: Viewing Built Pipecat Documentation\nDESCRIPTION: Commands to open the built documentation in a web browser, with specific commands for different operating systems (MacOS, Linux, and Windows).\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# On MacOS\nopen _build/html/index.html\n\n# On Linux\nxdg-open _build/html/index.html\n\n# On Windows\nstart _build/html/index.html\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Error Example for Troubleshooting\nDESCRIPTION: Example of an SSL certificate verification error that might occur when connecting to the Daily API, caused by missing CA certificates on the system.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/server/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naiohttp.client_exceptions.ClientConnectorCertificateError: Cannot connect to host api.daily.co:443 ssl:True [SSLCertVerificationError: (1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1000)')]\n```\n\n----------------------------------------\n\nTITLE: Creating Streams XML Configuration File\nDESCRIPTION: Command to copy the template XML file that defines the Twilio Stream configuration for WebSocket communication.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncp templates/streams.xml.template templates/streams.xml\n```\n\n----------------------------------------\n\nTITLE: Running the Test Client\nDESCRIPTION: Command to run the test client that connects to the server's URL. The -c parameter allows creating multiple concurrent client connections for load testing.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npython client.py -u http://localhost:8765 -c 2\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers: npm, yarn, pnpm, or bun. After running any of these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Pipecat Dependencies\nDESCRIPTION: Command to install all required Python dependencies for the Pipecat server from the requirements.txt file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/daily-interop-bridge/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Dependencies Installation\nDESCRIPTION: Command to install required Python packages from requirements.txt file\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install all required Python packages listed in the requirements.txt file for the bot server.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Starting Ngrok HTTP Tunnel\nDESCRIPTION: Command to start ngrok for creating a public HTTPS URL that tunnels to the local development server, necessary for Telnyx webhooks.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 8765\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Twilio Chatbot\nDESCRIPTION: Command to install all required Python packages for the Twilio chatbot application using pip and the requirements.txt file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/twilio-chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Cloning the Pipecat Repository (Bash)\nDESCRIPTION: Command to clone the forked Pipecat repository to the local machine. This is the first step in setting up the local development environment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/pipecat\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Telnyx Chatbot\nDESCRIPTION: Command to install all required Python packages specified in the requirements.txt file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install the required Python packages from the requirements.txt file for the chatbot server.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository (Bash)\nDESCRIPTION: Command to push the local branch with changes to the forked repository on GitHub. This makes the changes available for creating a pull request.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Running the JavaScript Client Application\nDESCRIPTION: Command to start the development server for the JavaScript client. This runs the client app which can then be accessed through a web browser.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/javascript/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Dialout Request with Phone Number\nDESCRIPTION: This cURL command sends a POST request to the server's /api/dial endpoint to initiate a dialout call. It includes the target phone number in the request body.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/api/dial \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"dialout_settings\": [\n      {\n        \"phoneNumber\": \"+1234567890\",\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the FastAPI Webhook Server\nDESCRIPTION: Command to install all required dependencies from the requirements.txt file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx Documentation Dependencies\nDESCRIPTION: Core Sphinx documentation dependencies required for building project documentation, including RTD theme, markdown support, and type hints documentation.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\nsphinx>=8.1.3\nsphinx-rtd-theme\nsphinx-markdown-builder\nsphinx-autodoc-typehints\ntoml\n```\n\n----------------------------------------\n\nTITLE: Running Server with Custom Domain/Port\nDESCRIPTION: Example of starting the server with custom host and port configuration.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/storytelling-chatbot/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython src/bot_runner.py --host somehost --p someport\n```\n\n----------------------------------------\n\nTITLE: Making Actual Phone Calls with Simple Dial-out Bot\nDESCRIPTION: cURL command to start a simple dial-out bot that makes an actual phone call to the specified phone number.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"http://localhost:7860/start\" \\\n\t -H \"Content-Type: application/json\" \\\n\t -d '{\n\t\t \"config\": {\n\t\t\t\"dialout_settings\": [{\n\t\t\t   \"phoneNumber\": \"+12345678910\"\n\t\t\t}],\n\t\t\t\"simple_dialout\": {\n\t\t\t   \"testInPrebuilt\": false\n\t\t\t}\n\t\t }\n\t  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Local Development\nDESCRIPTION: Command to install the required Python packages for local development using pip.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Dependencies\nDESCRIPTION: Command to install the required npm dependencies for the JavaScript client.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/client/javascript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server for the JavaScript client application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/javascript/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Cartesia TTS System Messages\nDESCRIPTION: Example configuration for text-to-speech system messages following Cartesia's best practices, including formatting guidelines and speech patterns.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/patient-intake/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmessages = [\n    {\n        \"role\": \"system\",\n        \"content\": '''You are a helpful AI assistant. Format all responses following these guidelines:\n\n1. Use proper punctuation and end each response with appropriate punctuation\n2. Format dates as MM/DD/YYYY\n3. Insert pauses using - or <break time='1s' /> for longer pauses\n4. Use ?? for emphasized questions\n5. Avoid quotation marks unless citing\n6. Add spaces between URLs/emails and punctuation marks\n7. For domain-specific terms or proper nouns, provide pronunciation guidance in [brackets]\n8. Keep responses clear and concise\n9. Use appropriate voice/language pairs for multilingual content\n\nYour goal is to demonstrate these capabilities in a succinct way. Your output will be converted to audio, so maintain natural communication flow. Respond creatively and helpfully, but keep responses brief. Start by introducing yourself.'''\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment. Includes Windows-specific activation command as a comment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Running Android Debug Build with Gradle\nDESCRIPTION: Gradle command to build and run the debug version of the Android application. Requires the simple-chatbot server to be running beforehand.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew runDebug\n```\n\n----------------------------------------\n\nTITLE: Running Android Development Build\nDESCRIPTION: Command to run the application on an Android device configured for debugging.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/react-native/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run android\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for Telnyx Chatbot\nDESCRIPTION: Commands to create and activate a Python virtual environment for the project, which isolates dependencies from the global Python environment.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/telnyx-chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n```\n\n----------------------------------------\n\nTITLE: Navigating to Server Directory in Bash\nDESCRIPTION: Command to navigate to the server directory where the chatbot backend is located.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd server\n```\n\n----------------------------------------\n\nTITLE: Server Directory Navigation Command\nDESCRIPTION: Command to navigate to the server directory where the voice communication implementation is located\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd server\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to navigate to the webhook server directory and install required npm packages\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/nextjs-webhook-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd nextjs-webhook-server\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to JavaScript Directory\nDESCRIPTION: Command to change to the client/javascript directory within the project structure.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/client/javascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd client/javascript\n```\n\n----------------------------------------\n\nTITLE: Displaying Pipecat Documentation Directory Structure\nDESCRIPTION: A representation of the documentation directory structure showing the organization of files and folders in the project, including auto-generated API docs, build directories, and configuration files.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── api/            # Auto-generated API documentation\n├── _build/         # Built documentation\n├── _static/        # Static files (images, css, etc.)\n├── conf.py         # Sphinx configuration\n├── index.rst       # Main documentation entry point\n├── requirements-base.txt    # Base documentation dependencies\n├── requirements-riva.txt    # Riva-specific dependencies\n├── requirements-playht.txt  # PlayHT-specific dependencies\n├── build-docs.sh   # Local build script\n└── rtd-test.py     # ReadTheDocs test build script\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install the required npm dependencies for the JavaScript client application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/instant-voice/client/javascript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to JavaScript Client Directory\nDESCRIPTION: Command to change to the JavaScript client directory before setup.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/news-chatbot/client/javascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd client/javascript\n```\n\n----------------------------------------\n\nTITLE: Navigating to Server Directory\nDESCRIPTION: Command to change into the server directory where the bot implementation resides.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd server\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Client Dependencies\nDESCRIPTION: Command to install the required npm packages for the JavaScript client. This installs all dependencies defined in the package.json file.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/javascript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Conversation Items in OpenAIRealtimeBetaLLMService\nDESCRIPTION: This snippet shows how to retrieve a specific conversation item from the server using the retrieve_conversation_item method. This allows for introspection of conversation items stored on the server side.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nitem = await llm.retrieve_conversation_item(item_id)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch (Bash)\nDESCRIPTION: Command to create a new branch for contributions. This ensures that changes are isolated from the main branch.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Pipecat JavaScript Client\nDESCRIPTION: Command to install the required NPM packages for the Pipecat JavaScript client application.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/client/typescript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure in Markdown\nDESCRIPTION: Main documentation index showing key sections including architecture overview and frame progress documentation links.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Pipecat Docs\n\n## [Architecture Overview](architecture.md)\n\nLearn about the thinking behind the framework's design.\n\n## [A Frame's Progress](frame-progress.md)\n\nSee how a Frame is processed through a Transport, a Pipeline, and a series of Frame Processors.\n```\n\n----------------------------------------\n\nTITLE: Making Build Scripts Executable in Pipecat\nDESCRIPTION: Command to set the executable permission on the documentation build scripts, allowing them to be run directly without calling them through bash or python explicitly.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x build-docs.sh rtd-test.py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Client in Bash\nDESCRIPTION: Installs the necessary npm packages for the React client application using the npm package manager.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Filtering JSON Array for AI Libraries Using jq in Shell\nDESCRIPTION: This command uses the jq command-line JSON processor to filter a JSON array, selecting only the elements that match the specified AI libraries (anthropic, google, and langchain). The -e flag likely indicates that the expression should be evaluated.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/test-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-e \".[anthropic,google,langchain]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Emacs for Pipecat AI Development\nDESCRIPTION: Emacs configuration for setting up Ruff formatting and automatic virtual environment activation for Pipecat AI development.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: elisp\nCODE:\n```\n(use-package lazy-ruff\n  :ensure t\n  :hook ((python-mode . lazy-ruff-mode))\n  :config\n  (setq lazy-ruff-format-command \"ruff format\")\n  (setq lazy-ruff-check-command \"ruff check --select I\"))\n```\n\nLANGUAGE: elisp\nCODE:\n```\n(use-package pyvenv-auto\n  :ensure t\n  :defer t\n  :hook ((python-mode . pyvenv-auto-run)))\n```\n\n----------------------------------------\n\nTITLE: Navigating to the FastAPI Webhook Server Directory in Bash\nDESCRIPTION: Command to navigate to the fastapi-webhook-server directory for project setup.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/fastapi-webhook-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd fastapi-webhook-server\n```\n\n----------------------------------------\n\nTITLE: Navigating to Server Directory in Bash\nDESCRIPTION: Command to change the current directory to the server folder.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd server\n```\n\n----------------------------------------\n\nTITLE: Navigating to JavaScript Client Directory in Bash\nDESCRIPTION: Command to change directory to the JavaScript client folder. This is the first step after running the bot server to access the client implementation files.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/bot-ready-signalling/client/javascript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd client/javascript\n```\n\n----------------------------------------\n\nTITLE: Navigating to TypeScript Client Directory in Bash\nDESCRIPTION: Command to change directory to the client/typescript folder where the JavaScript implementation is located.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/p2p-webrtc/video-transform/client/typescript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd client/typescript\n```\n\n----------------------------------------\n\nTITLE: Navigating to React Client Directory in Bash\nDESCRIPTION: Changes the current directory to the client/react folder where the React application is located.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd client/react\n```\n\n----------------------------------------\n\nTITLE: Base OpenAI LLM Service Constructor Parameters\nDESCRIPTION: Shows the addition of default_headers parameter to BaseOpenAILLMService constructor.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nBaseOpenAILLMService(default_headers=...)\n```\n\n----------------------------------------\n\nTITLE: Dialout Request with Phone Number and Caller ID\nDESCRIPTION: This cURL command sends a POST request to initiate a dialout call, specifying both the target phone number and a caller ID (UUID of a purchased number).\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-daily-pstn-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3000/api/dial \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"dialout_settings\": [\n      {\n        \"phoneNumber\": \"+1234567890\",\n        \"callerId\": \"purchased_phone_uuid\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Call Transfer for Incoming Calls with JSON\nDESCRIPTION: JSON configuration for handling standard call transfer for incoming calls. Includes dialin settings with call details and call transfer configuration with operator number.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"config\": {\n\t\t\"dialin_settings\": {\n\t\t\t\"from\": \"+12345678901\",\n\t\t\t\"to\": \"+19876543210\",\n\t\t\t\"call_id\": \"call-id-string\",\n\t\t\t\"call_domain\": \"domain-string\"\n\t\t},\n\t\t\"call_transfer\": {\n\t\t\t\"mode\": \"dialout\",\n\t\t\t\"speakSummary\": true,\n\t\t\t\"operatorNumber\": \"+12345678910\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing ReadTheDocs Build Process for Pipecat\nDESCRIPTION: Command to run the test script that simulates how the documentation would build on ReadTheDocs. Creates an isolated environment to verify documentation builds correctly before pushing changes.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/docs/api/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./rtd-test.py\n```\n\n----------------------------------------\n\nTITLE: Running the Pipecat Audio Transcription Application\nDESCRIPTION: Command to launch the main script (bot.py) that runs the Pipecat Audio Transcription application with the Textual UI for device selection and real-time speech-to-text processing.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/local-input-select-stt/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython bot.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Voicemail Detection with JSON\nDESCRIPTION: JSON configuration for standard voicemail detection with dialout settings. Includes the phone number to call and voicemail detection settings.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/phone-chatbot/README.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"config\": {\n\t\t\"dialout_settings\": [\n\t\t\t{\n\t\t\t\t\"phoneNumber\": \"+12345678910\"\n\t\t\t}\n\t\t],\n\t\t\"voicemail_detection\": {\n\t\t\t\"testInPrebuilt\": false\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Pipecat AI Bot Server using Python\nDESCRIPTION: This command starts the bot server for the Pipecat AI chatbot. It runs the server.py file located in the server directory.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/simple-chatbot/client/prebuilt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython server/server.py\n```\n\n----------------------------------------\n\nTITLE: Cloning the Pipecat Cloud Starter Repository\nDESCRIPTION: Commands to clone the starter project repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/pipecat-ai/pipecat/blob/main/examples/deployment/pipecat-cloud-example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/daily-co/pipecat-cloud-starter\ncd pipecat-cloud-starter\n```"
  }
]