[
  {
    "owner": "docker",
    "repo": "awesome-compose",
    "content": "TITLE: Docker Compose Configuration for React-Express-MongoDB Stack\nDESCRIPTION: The compose.yaml file defining three services: frontend (React), server (NodeJS backend), and mongo (MongoDB database). It includes build contexts, port mappings, and service dependencies.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mongodb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    build:\n      context: frontend\n    ...\n    ports:\n      - 3000:3000\n    ...\n  server:\n    container_name: server\n    restart: always\n    build:\n      context: server\n      args:\n        NODE_PORT: 3000\n    ports:\n      - 3000:3000\n    ...\n    depends_on:\n      - mongo\n  mongo:\n    container_name: mongo\n    restart: always\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration defining services for Redis and web application, including port mappings, volume mounts, and service dependencies.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask-redis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n   redis: \n     image: redislabs/redismod\n     ports:\n       - '6379:6379' \n   web:\n        build: .\n        ports:\n            - \"8000:8000\"\n        volumes:\n            - .:/code\n        depends_on:\n            - redis\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Go-Nginx-Postgres Application\nDESCRIPTION: The Docker Compose file configuration defining three services: backend (Go), db (Postgres), and proxy (Nginx). Shows service configurations including build context, volumes, and port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-postgres/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nservices:\n  backend:\n    build:\n      context: backend\n      target: builder\n    ...\n  db:\n    image: postgres\n    ...\n  proxy:\n    image: nginx\n    volumes:\n      - type: bind\n        source: ./proxy/nginx.conf\n        target: /etc/nginx/conf.d/default.conf\n        read_only: true\n    ports:\n      - 80:80\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for React-Express-MySQL Stack\nDESCRIPTION: The compose.yaml file defining three services: backend (Node.js), frontend (React), and db (MariaDB/MySQL). It includes port mappings, build configurations, and service relationships.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build: backend\n    ports:\n      - 80:80\n      - 9229:9229\n      - 9230:9230\n    ...\n  db:\n    # We use a mariadb image which supports both amd64 & arm64 architecture\n    image: mariadb:10.6.4-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8.0.27\n    ...\n  frontend:\n    build: frontend\n    ports:\n    - 3000:3000\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for ASP.NET, Nginx, and MariaDB\nDESCRIPTION: Docker Compose file defining a three-service architecture with backend (ASP.NET), proxy (Nginx), and database (MariaDB/MySQL) services. The proxy service exposes port 80 to the host.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-aspnet-mysql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build:\n      context: backend\n    ...\n  db:\n    # We use a mariadb image which supports both amd64 & arm64 architecture\n    image: mariadb:10-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8\n    ...\n  proxy:\n    build: proxy\n    ports:\n    - 80:80\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Gitea and PostgreSQL\nDESCRIPTION: Docker Compose YAML configuration defining services for Gitea and PostgreSQL database with port mappings and environment settings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/gitea-postgres/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  gitea:\n    image: gitea/gitea:latest\n    ports:\n      - 3000:3000\n    ...\n  db:\n    image: postgres:alpine\n    environment:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for WordPress and MySQL/MariaDB\nDESCRIPTION: This YAML configuration defines services for a WordPress setup with a MySQL-compatible database. It uses MariaDB by default for architecture compatibility, with an option to switch to MySQL.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wordpress-mysql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    # We use a mariadb image which supports both amd64 & arm64 architecture\n    image: mariadb:10.6.4-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8.0.27\n    ...\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - 80:80\n    restart: always\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for React-Rust-Postgres Application\nDESCRIPTION: The Docker Compose configuration that defines three services: the React frontend, Rust backend, and PostgreSQL database. It includes port mappings and service relationships.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build: backend\n    ...\n  db:\n    image: postgres:12-alpine\n    ...\n  frontend:\n    build: frontend\n    ports:\n    - 3000:3000\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Django Application\nDESCRIPTION: A Dockerfile that sets up a Python environment for a Django application. It configures Python settings, creates a working directory, installs dependencies from requirements.txt, and copies the application code.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM python:3\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nWORKDIR /code\nCOPY requirements.txt /code/\nRUN pip install -r requirements.txt\nCOPY . /code/\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Container Application with Docker Compose for WasmEdge, Nginx, and MySQL\nDESCRIPTION: This Docker Compose configuration defines a three-service application with an Nginx frontend, a WebAssembly backend service using WasmEdge runtime, and a MariaDB database. It configures networking, volumes, environment variables, and the specialized WasmEdge runtime.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-mysql-nginx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: nginx:alpine\n    ports:\n      - 8090:80\n    volumes:\n      - ./frontend:/usr/share/nginx/html\n\n  backend:\n    image: demo-microservice\n    build:\n      context: backend/\n      platforms:\n        - wasi/wasm32\n    ports:\n      - 8080:8080\n    environment:\n      DATABASE_URL: mysql://root:whalehello@db:3306/mysql\n      RUST_BACKTRACE: full\n    restart: unless-stopped\n    runtime: io.containerd.wasmedge.v1\n\n  db:\n    image: mariadb:10.9\n    environment:\n      MYSQL_ROOT_PASSWORD: whalehello\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Go-Nginx-MariaDB Application\nDESCRIPTION: Docker Compose YAML configuration defining three services: a Go backend, an Nginx proxy, and a MariaDB/MySQL database. The configuration includes build contexts, image specifications, volume mappings, and port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-mysql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build:\n      context: backend\n      target: builder\n    ...\n  db:\n    # We use a mariadb image which supports both amd64 & arm64 architecture\n    image: mariadb:10-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8\n    ...\n  proxy:\n    image: nginx\n    volumes:\n      - type: bind\n        source: ./proxy/nginx.conf\n        target: /etc/nginx/conf.d/default.conf\n        read_only: true\n    ports:\n    - 80:80\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for WebAssembly ETL System\nDESCRIPTION: Docker Compose configuration that defines three services: Redpanda (Kafka-compatible messaging), ETL (WebAssembly-based data processor using WasmEdge runtime), and MySQL/MariaDB database. The configuration includes network settings, environment variables, and container specifications.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-kafka-mysql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  redpanda:\n    image: docker.redpanda.com/vectorized/redpanda:v22.2.2\n    command:\n      - redpanda start\n      - --smp 1\n      - --overprovisioned\n      - --node-id 0\n      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092\n      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://redpanda:9092\n      - --pandaproxy-addr 0.0.0.0:8082\n      - --advertise-pandaproxy-addr localhost:8082\n    ports:\n      - 8081:8081\n      - 8082:8082\n      - 9092:9092\n      - 9644:9644\n      - 29092:29092\n    volumes:\n      - ./kafka:/app\n\n  etl:\n    image: etl-kafka\n    build:\n      context: etl\n      platforms:\n        - wasi/wasm32\n    environment:\n      DATABASE_URL: mysql://root:whalehello@db:3306/mysql\n      KAFKA_URL: kafka://redpanda:9092/order\n      RUST_BACKTRACE: full\n      RUST_LOG: info\n    restart: unless-stopped\n    runtime: io.containerd.wasmedge.v1\n\n  db:\n    image: mariadb:10.9\n    environment:\n      MYSQL_ROOT_PASSWORD: whalehello\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Java Spark and MySQL\nDESCRIPTION: Defines two services: 'backend' (Java Spark application) and 'db' (MariaDB or MySQL). It maps port 8080 of the backend to the host and uses MariaDB for architecture compatibility.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava-mysql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build: backend\n    ports:\n    - 8080:8080\n  db:\n    # We use a mariadb image which supports both amd64 & arm64 architecture\n    image: mariadb:10.6.4-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8.0.27\n    ...\n```\n\n----------------------------------------\n\nTITLE: Deploying the Docker Compose Application\nDESCRIPTION: Terminal command and output showing how to deploy the multi-container application using Docker Compose, including the build and container creation process.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"react-express-mysql_default\" with the default driver\nBuilding backend\nStep 1/16 : FROM node:10\n ---> aa6432763c11\n...\nSuccessfully tagged react-express-mysql_frontend:latest\nWARNING: Image for service frontend was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating react-express-mysql_db_1 ... done\nCreating react-express-mysql_backend_1 ... done\nCreating react-express-mysql_frontend_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Rails and PostgreSQL\nDESCRIPTION: This docker-compose.yml file defines two services: a PostgreSQL database and a Rails web application. It specifies how to build the web app image, sets up volumes, and configures the necessary environment.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/rails/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    image: postgres\n    volumes:\n      - ./tmp/db:/var/lib/postgresql/data\n    environment:\n      POSTGRES_PASSWORD: password\n  web:\n    build: .\n    command: bash -c \"rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'\"\n    volumes:\n      - .:/myapp\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Three-Tier Application\nDESCRIPTION: The compose.yaml file defining the three services: backend (Flask), db (MariaDB/MySQL), and proxy (Nginx), including build contexts and image specifications.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mysql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build:\n      context: backend\n      target: builder\n    ...\n  db:\n    # We use a mariadb image which supports both amd64 & arm64 architecture\n    image: mariadb:10-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8\n    ...\n  proxy:\n    build: proxy\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Environment for ReactJS Frontend\nDESCRIPTION: Dockerfile that sets up a Node.js environment for a ReactJS application. It handles dependency installation, port configuration through arguments, and application deployment. The configuration uses node:10 as the base image and sets up the working directory with necessary npm packages.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mongodb/frontend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create image based on the official Node image from dockerhub\nFROM node:10\n#Argument that is passed from docer-compose.yaml file\nARG FRONT_END_PORT\n# Create app directory\nWORKDIR /usr/src/app\n#Echo the argument to check passed argument loaded here correctly\nRUN echo \"Argument port is : $FRONT_END_PORT\"\n# Copy dependency definitions\nCOPY package.json /usr/src/app\n# Install dependecies\nRUN npm install\n# Get all the code needed to run the app\nCOPY . /usr/src/app\n# Expose the port the app runs in\nEXPOSE ${FRONT_END_PORT}\n# Serve the app\nCMD [\"npm\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Traefik Proxy and Go Backend\nDESCRIPTION: Defines two services: 'frontend' (Traefik proxy) and 'backend' (Go application). The Traefik service is configured to listen on port 80 and route traffic to the backend service.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/traefik-golang/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: traefik:2.6\n    command: --providers.docker --entrypoints.web.address=:80 --providers.docker.exposedbydefault=false\n    ports:\n      # The HTTP port\n      - \"80:80\"\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n    depends_on:\n      - backend\n  backend:\n    build: backend\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.go.rule=Path(`/`)\"\n      - \"traefik.http.services.go.loadbalancer.server.port=80\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Node.js Backend Application\nDESCRIPTION: This Dockerfile sets up a containerized environment for a Node.js backend application. It uses node:13.13.0-stretch-slim as the base image, configures the working directory, installs dependencies, exposes a configurable port passed as an argument from docker-compose, and runs the application in development mode using npm.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mongodb/backend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFROM node:13.13.0-stretch-slim\n#Argument that is passed from docer-compose.yaml file\nARG NODE_PORT\n#Echo the argument to check passed argument loaded here correctly\nRUN echo \"Argument port is : $NODE_PORT\"\n# Create app directory\nWORKDIR /usr/src/app\n#COPY . .\nCOPY . .\n# Install app dependencies\n# A wildcard is used to ensure both package.json AND package-lock.json are copied\n# where available (npm@5+)\nRUN npm install\n#In my case my app binds to port NODE_PORT so you'll use the EXPOSE instruction to have it mapped by the docker daemon:\nEXPOSE ${NODE_PORT}\nCMD npm run dev\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Resources\nDESCRIPTION: Command syntax for generating new Angular components, directives, pipes, services, classes, guards, interfaces, enums, or modules using the Angular CLI.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/angular/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: The compose.yaml file that defines three services: web (Nginx), backend (Flask), and mongo (MongoDB). It includes port mappings and build configurations.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mongo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: app\n    ports:\n    - 80:80\n  backend:\n    build: flask\n    ...\n  mongo:\n    image: mongo\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Python/Flask Application\nDESCRIPTION: Defines the Docker Compose configuration for building and running the Python/Flask application. It specifies the build context, target stage, and port mapping.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices: \n  web: \n    build:\n     context: app\n     target: builder\n    ports: \n      - '8000:8000'\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Spring Boot and Postgres\nDESCRIPTION: The compose.yaml file defines two services: a Spring backend service built from the local backend directory with port 8080 exposed, and a PostgreSQL database service.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/spring-postgres/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build: backend\n    ports:\n    - 8080:8080\n  db:\n    image: postgres\n    ...\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Creates an optimized production build in the build folder with minified bundles and hashed filenames\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/frontend/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for ELK Stack\nDESCRIPTION: A Docker Compose configuration that defines the three services of the ELK stack: Elasticsearch, Logstash, and Kibana. Each service uses the respective Docker image version 7.8.0.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/elasticsearch-logstash-kibana/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  elasticsearch:\n    image: elasticsearch:7.8.0\n    ...\n  logstash:\n    image: logstash:7.8.0\n    ...\n  kibana:\n    image: kibana:7.8.0\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for running the FastAPI application, specifying build context, container name, environment variables, and port mapping\nSOURCE: https://github.com/docker/awesome-compose/blob/master/fastapi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  api:\n    build: .\n    container_name: fastapi-application\n    environment:\n      PORT: 8000\n    ports:\n      - '8000:8000'\n    restart: \"no\"\n\n```\n\n----------------------------------------\n\nTITLE: Application Testing Commands and Output\nDESCRIPTION: Example curl commands showing the load balancing between web1 and web2 services, with Redis tracking visit counts.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-nodejs-redis/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:80\ncurl localhost:80\nweb1: Total number of visits is: 1\n\ncurl localhost:80\nweb1: Total number of visits is: 2\n\n$ curl localhost:80\nweb2: Total number of visits is: 3\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application with Docker Compose\nDESCRIPTION: Command to deploy the multi-container application in detached mode using Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-aspnet-mysql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Deploying Go-Nginx-Postgres Application with Docker Compose\nDESCRIPTION: Shows the command and output for deploying the application using Docker Compose. Demonstrates network creation, image pulling, building, and container creation.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-postgres/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up -d\nCreating network \"nginx-golang-postgres_default\" with the default driver\nPulling db (postgres:)...\nlatest: Pulling from library/postgres\n...\nSuccessfully built 5f7c899f9b49\nSuccessfully tagged nginx-golang-postgres_proxy:latest\nWARNING: Image for service proxy was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating nginx-golang-postgres_db_1 ... done\nCreating nginx-golang-postgres_backend_1 ... done\nCreating nginx-golang-postgres_proxy_1   ... done\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for PostgreSQL and pgAdmin\nDESCRIPTION: Defines the services for PostgreSQL and pgAdmin in the Docker Compose file. It specifies the images to be used for each service.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/postgresql-pgadmin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  postgres:\n    image: postgres:latest\n    ...\n  pgadmin:\n    image: dpage/pgadmin4:latest\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Configuration for Spark Java Application\nDESCRIPTION: This YAML configuration defines a Docker Compose service for a Spark Java application. It builds the service from a Dockerfile in the 'sparkjava' directory and maps port 8080 from the container to the host.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  sparkjava:\n    build: sparkjava\n    ports:\n    - 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Defining Dockerfile for Flask Application\nDESCRIPTION: This Dockerfile sets up the environment for a Flask application. It uses Python 3.10 as the base image, installs Flask, copies the application code, and sets the entry point to run the Flask app.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/app/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1.4\nFROM --platform=$BUILDPLATFORM python:3.10-alpine AS builder\n\nWORKDIR /code\nCOPY requirements.txt /code\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    pip3 install -r requirements.txt\n\nCOPY . /code\n\nENTRYPOINT [\"python3\"]\nCMD [\"app.py\"]\n\nFROM builder as dev-envs\n\nRUN <<EOF\napk update\napk add git\nEOF\n\nRUN <<EOF\naddgroup -S docker\nadduser -S --shell /bin/bash --ingroup docker vscode\nEOF\n# install Docker tools (cli, buildx, compose)\nCOPY --from=gloursdocker/docker / /\n\nCMD [\"python3\", \"app.py\"]\n\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Samples\nDESCRIPTION: Instructions for running the Docker Compose samples in this repository. It explains how to start and stop the containerized applications using Docker Compose commands.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose up -d\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for React, Spring, and MySQL Application\nDESCRIPTION: The compose.yaml file defining three services: frontend (React), backend (Spring), and db (MariaDB/MySQL). It configures ports, build contexts, and service dependencies.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build: backend\n    ...\n  db:\n    # We use a mariadb image which supports both amd64 & arm64 architecture\n    image: mariadb:10.6.4-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8.0.27\n    ...\n  frontend:\n    build: frontend\n    ports:\n    - 3000:3000\n    ...\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application with Docker Compose\nDESCRIPTION: Command to deploy the multi-service application using Docker Compose in detached mode. Shows the build and container creation process.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-mysql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up -d\nCreating network \"nginx-golang-mysql_default\" with the default driver\nBuilding backend\nStep 1/8 : FROM golang:1.13-alpine AS build\n1.13-alpine: Pulling from library/golang\n...\nSuccessfully built 5f7c899f9b49\nSuccessfully tagged nginx-golang-mysql_proxy:latest\nWARNING: Image for service proxy was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating nginx-golang-mysql_db_1 ... done\nCreating nginx-golang-mysql_backend_1 ... done\nCreating nginx-golang-mysql_proxy_1   ... done\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for NGINX and Go Application\nDESCRIPTION: Docker Compose configuration that defines two services: an NGINX proxy and a Go backend. The proxy uses the official NGINX image with a custom configuration file and exposes port 80, while the backend is built from a local Dockerfile.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  proxy:\n    image: nginx\n    volumes:\n      - type: bind\n        source: ./proxy/nginx.conf\n        target: /etc/nginx/conf.d/default.conf\n        read_only: true\n    ports:\n      - 80:80\n    depends_on:\n      - backend\n\n  backend:\n    build:\n      context: backend\n      target: builder\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Go-Nginx-MariaDB Application\nDESCRIPTION: Overview of the project structure showing the directory layout and files for the backend, database, and proxy components.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-mysql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   ├── go.mod\n│   ├── go.sum\n│   └── main.go\n├── db\n│   └── password.txt\n├── proxy\n│   └── nginx.conf\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Docker Compose\nDESCRIPTION: This snippet defines the required Python packages and their versions for a Docker Compose project. It includes Flask 2.0.1 for web application development and mysql-connector 2.2.9 for MySQL database connectivity.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mysql/backend/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nFlask==2.0.1\nmysql-connector==2.2.9\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project. The compiled application files will be output to the dist/ directory.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/angular/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for WordPress and MariaDB/MySQL\nDESCRIPTION: A docker-compose.yml file that sets up a WordPress application with a MariaDB (or optionally MySQL) database. It configures volumes for data persistence, network connections, environment variables, and port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/wordpress/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    # We use a mariadb image which supports both amd64 & arm64 architecture\n    image: mariadb:10.6.4-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8.0.27\n    command: '--default-authentication-plugin=mysql_native_password'\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      - MYSQL_ROOT_PASSWORD=somewordpress\n      - MYSQL_DATABASE=wordpress\n      - MYSQL_USER=wordpress\n      - MYSQL_PASSWORD=wordpress\n    expose:\n      - 3306\n      - 33060\n  wordpress:\n    image: wordpress:latest\n    volumes:\n      - wp_data:/var/www/html\n    ports:\n      - 80:80\n    restart: always\n    environment:\n      - WORDPRESS_DB_HOST=db\n      - WORDPRESS_DB_USER=wordpress\n      - WORDPRESS_DB_PASSWORD=wordpress\n      - WORDPRESS_DB_NAME=wordpress\nvolumes:\n  db_data:\n  wp_data:\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for React Application with Nginx\nDESCRIPTION: Configuration file that defines the frontend service for a React application served with Nginx, mapping port 80 from the container to the host.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-nginx/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    build:\n      context: .\n    container_name: frontend\n    ports:\n      - \"80:80\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Flask Application\nDESCRIPTION: This YAML configuration defines the services for a Flask application using Docker Compose. It sets up a web service with a Python 3 image, mounts the current directory, exposes port 8000, and specifies the command to run the Flask development server.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/app/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    ports:\n      - 8000:5000\n    volumes:\n      - .:/code\n    environment:\n      FLASK_DEBUG: \"true\"\n\n```\n\n----------------------------------------\n\nTITLE: Installing Vue.js Project Dependencies\nDESCRIPTION: Installs all project dependencies specified in package.json using Yarn package manager.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/vuejs/vuejs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Django and PostgreSQL\nDESCRIPTION: A docker-compose.yml file that defines two services: a PostgreSQL database and a Django web application. It configures volumes, environment variables, ports, and dependencies between the services.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    image: postgres\n    volumes:\n      - ./data/db:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n  web:\n    build: .\n    command: python manage.py runserver 0.0.0.0:8000\n    volumes:\n      - .:/code\n    ports:\n      - \"8000:8000\"\n    environment:\n      - POSTGRES_NAME=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    depends_on:\n      - db\n```\n\n----------------------------------------\n\nTITLE: Configuring Django PostgreSQL Database Settings\nDESCRIPTION: Django settings.py configuration for connecting to a PostgreSQL database using environment variables. Defines database connection parameters including engine, name, user, password, host and port.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\n\nimport os\n\n[...]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('POSTGRES_NAME'),\n        'USER': os.environ.get('POSTGRES_USER'),\n        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),\n        'HOST': 'db',\n        'PORT': 5432,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Service with Docker Compose\nDESCRIPTION: This snippet defines a PostgreSQL service using Docker Compose. It specifies the PostgreSQL image version, sets environment variables for database name, user, and password, and maps a volume for data persistence.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-aspnet-mysql/db/password.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    image: postgres:15.2\n    restart: always\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_USER=username\n      - POSTGRES_PASSWORD=password\n    ports:\n      - 5432:5432\n    volumes:\n      - db:/var/lib/postgresql/data\n\nvolumes:\n  db:\n    driver: local\n```\n\n----------------------------------------\n\nTITLE: Deploying WebAssembly Application with Docker Compose\nDESCRIPTION: Command and expected output for deploying the multi-container application using Docker Compose. It shows the creation of the network and three containers for the application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-mysql-nginx/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n...\n ⠿ Network wasmedge-mysql-nginx_default       Created\n ⠿ Container wasmedge-mysql-nginx-db-1        Created\n ⠿ Container wasmedge-mysql-nginx-frontend-1  Created\n ⠿ Container wasmedge-mysql-nginx-backend-1   Created\n```\n\n----------------------------------------\n\nTITLE: Testing the Spring Boot Application with curl\nDESCRIPTION: Shows how to test the application by sending a request to the exposed endpoint, which returns an HTML response indicating the application is running correctly.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/spring-postgres/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Listing Running Containers with Docker Compose\nDESCRIPTION: Command to list the running containers showing their status, ports, and service names after successful deployment.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mysql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose ps\nNAME                          COMMAND                  SERVICE             STATUS              PORTS\nnginx-flask-mysql-backend-1   \"flask run\"              backend             running             0.0.0.0:8000->8000/tcp\nnginx-flask-mysql-db-1        \"docker-entrypoint.s…\"   db                  running (healthy)   3306/tcp, 33060/tcp\nnginx-flask-mysql-proxy-1     \"nginx -g 'daemon of…\"   proxy               running             0.0.0.0:80->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails Database Connection\nDESCRIPTION: This YAML configuration for database.yml sets up the connection to the PostgreSQL database container. It defines the database adapter, encoding, host, username, and password for development and test environments.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/rails/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n  host: db\n  username: postgres\n  password: password\n  pool: 5\n\ndevelopment:\n  <<: *default\n  database: myapp_development\n\n\ntest:\n  <<: *default\n  database: myapp_test\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Commands\nDESCRIPTION: Commands for deploying the application using Docker Compose, showing network creation and container building process.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-wsgi-flask/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"nginx-wsgi-flask_default\" with the default driver\nBuilding flask-app\n...\nBuilding nginx-proxy\n...\nCreating nginx-wsgi-flask_flask-app_1 ... done\nCreating nginx-wsgi-flask_nginx-proxy_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Deploying the React Application with Docker Compose\nDESCRIPTION: Command and output example for deploying the React application using Docker Compose, showing the build process from the Node.js base image through to the final Nginx configuration.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-nginx/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nBuilding frontend\nSending build context to Docker daemon   1.49MB\n\nStep 1/17 : FROM node:lts AS development\n ---> 9153ee3e2ced\nStep 2/17 : WORKDIR /app\n ---> Using cache\n ---> a7909d92148a\nStep 3/17 : COPY package.json /app/package.json\n ---> 2e690dfe99b2\nStep 4/17 : COPY package-lock.json /app/package-lock.json\n ---> dd0132803f43\n .....\nStep 16/17 : COPY --from=build /app/build .\n ---> Using cache\n ---> 447488bdf601\nStep 17/17 : ENTRYPOINT [\"nginx\", \"-g\", \"daemon off;\"]\n ---> Using cache\n ---> 6372a67cf86f\nSuccessfully built 6372a67cf86f\nSuccessfully tagged react-nginx_frontend:latest\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration defining two services: nginx-proxy for handling incoming requests and flask-app for the backend application. Maps port 80 for web access.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-wsgi-flask/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  nginx-proxy:\n    build: nginx\n    ports:\n    - 80:80\n  flask-app:\n    build: flask\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for ASP.NET and MS SQL Server\nDESCRIPTION: This YAML configuration defines two services: 'web' for the ASP.NET application and 'db' for the MS SQL Server database. It uses Azure SQL Edge for ARM64 compatibility but includes a commented option for MS SQL Server.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/aspnet-mssql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: app\n    ports:\n    - 80:80\n  db:\n    # mssql server image isn't available for arm64 architecture, so we use azure-sql instead\n    image: mcr.microsoft.com/azure-sql-edge:1.0.4\n    # If you really want to use MS SQL Server, uncomment the following line\n    #image: mcr.microsoft.com/mssql/server\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Minecraft Server\nDESCRIPTION: The compose.yaml file that defines the Minecraft server configuration, including image specification, port mapping (25565), and volume mounting for data persistence.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/minecraft/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n minecraft:\n   image: itzg/minecraft-server\n   ports:\n     - \"25565:25565\"\n    ...\n  volumes:\n     - \"~/minecraft_data:/data\"\n```\n\n----------------------------------------\n\nTITLE: Checking Running Containers for Go-Nginx-Postgres Application\nDESCRIPTION: Shows the command to list the running containers and their status after deployment. Displays container names, commands, services, status, and port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-postgres/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose ps\nNAME                              COMMAND                  SERVICE             STATUS              PORTS\nnginx-golang-postgres-backend-1   \"/code/bin/backend\"      backend             running\nnginx-golang-postgres-db-1        \"docker-entrypoint.s…\"   db                  running (healthy)   5432/tcp\nnginx-golang-postgres-proxy-1     \"/docker-entrypoint.…\"   proxy               running             0.0.0.0:80->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Testing Traefik-Go Application\nDESCRIPTION: Demonstrates how to test the deployed application by making a curl request to localhost:80, showing the expected ASCII art response from the Go backend.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/traefik-golang/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:80\n\n          ##         .\n    ## ## ##        ==\n ## ## ## ## ##    ===\n/\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\\___/ ===\n{                       /  ===-\n\\______ O           __/\n \\    \\         __/\n  \\____\\_______/\n\n\nHello from Docker!\n```\n\n----------------------------------------\n\nTITLE: Defining Pi-hole and cloudflared Services in Docker Compose\nDESCRIPTION: This YAML snippet defines the services for Pi-hole and cloudflared in a Docker Compose file. It specifies the images, port mappings, and other configuration options for both services.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/pihole-cloudflared-DoH/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pihole:\n    image: pihole/pihole:latest\n    ports:\n      - \"53:53/tcp\"\n      - \"53:53/udp\"\n      - \"67:67/udp\"\n      - \"8080:80/tcp\"\n      - \"8443:443/tcp\"\n    ...\n  cloudflared:\n    image: visibilityspots/cloudflared\n    ports:\n      - \"5054:5054/tcp\"\n      - \"5054:5054/udp\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Vue.js\nDESCRIPTION: Defines a Docker Compose configuration that builds a Vue.js application, maps port 80 to the container's port 8080, and sets up volume mounts for the project directory while preserving node_modules.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/vuejs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: vuejs\n    ports:\n    - 80:8080\n    volumes:\n    - ./vuejs:/project\n    - /project/node_modules\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Angular\nDESCRIPTION: Defines the Docker Compose service configuration for building and running the Angular application with port mapping to 4200.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: angular\n    ports:\n    - 4200:4200\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Flask Application in Python\nDESCRIPTION: This Python script defines a simple Flask application. It creates a single route ('/') that returns a 'Hello World!' message when accessed. The script also includes configuration to run the Flask development server when executed directly.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/app/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nimport os\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello World!'\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n\n```\n\n----------------------------------------\n\nTITLE: Deploying PostgreSQL and pgAdmin with Docker Compose\nDESCRIPTION: Shows the command to start the Docker Compose setup and the expected output indicating that the services have been started successfully.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/postgresql-pgadmin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up\nStarting postgres ... done\nStarting pgadmin ... done\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Nextcloud Stack\nDESCRIPTION: Docker Compose configuration defining three services: Nextcloud (nc), Redis cache, and MariaDB database. Includes port mapping and network configuration.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-redis-mariadb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  nc:\n    image: nextcloud:apache\n    ports:\n      - 80:80\n    ...\n  redis:\n    image: redis:alpine\n    restart: always\n    networks:\n      - redisnet\n  db:\n    image: mariadb\n    ...\n```\n\n----------------------------------------\n\nTITLE: Plex Service Configuration in Docker Compose\nDESCRIPTION: Basic Docker Compose configuration for Plex media server using the linuxserver/plex image. This is the minimal setup needed to run Plex in a container.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/plex/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  plex:\n    image: linuxserver/plex:latest\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Python/Flask Docker Application\nDESCRIPTION: Displays the directory structure of the Python/Flask application project, including the compose.yaml file, Dockerfile, requirements.txt, and app.py.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compose.yaml\n├── app\n    ├── Dockerfile\n    ├── requirements.txt\n    └── app.py\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Command\nDESCRIPTION: Command to deploy the Gitea and PostgreSQL containers in detached mode with output showing container creation.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/gitea-postgres/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"gitea-postgres_default\" with the default driver\nCreating gitea-postgres_db_1 ... done\nCreating gitea-postgres_gitea_1 ... done\nAttaching to gitea-postgres_db_1, gitea-postgres_gitea_1\n....\nStarting gitea-postgres_db_1 ... done\nStarting gitea-postgres_gitea_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Updating Orders via WasmEdge API\nDESCRIPTION: Command for updating an existing order record in the database using the WasmEdge API. It sends a POST request with JSON data from the update_order.json file.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-mysql-nginx/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/update_order -X POST -d @db/update_order.json\n```\n\n----------------------------------------\n\nTITLE: Deploying Prometheus and Grafana with Docker Compose\nDESCRIPTION: This bash command deploys the Prometheus and Grafana stack using Docker Compose in detached mode. It creates the necessary network and volumes.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/prometheus-grafana/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"prometheus-grafana_default\" with the default driver\nCreating volume \"prometheus-grafana_prom_data\" with default driver\n...\nCreating grafana    ... done\nCreating prometheus ... done\nAttaching to prometheus, grafana\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Django\nDESCRIPTION: The Docker Compose configuration file that defines a web service for the Django application. It builds from the app directory and maps port 8000 from the container to the host.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/django/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices: \n  web: \n    build: app \n    ports: \n      - '8000:8000'\n```\n\n----------------------------------------\n\nTITLE: Testing the Application with cURL\nDESCRIPTION: Command to test the application by sending an HTTP request to the exposed endpoint, showing the expected JSON response from the backend service.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-mysql/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl localhost:80\n[\"Blog post #0\",\"Blog post #1\",\"Blog post #2\",\"Blog post #3\",\"Blog post #4\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring FastAPI Dependencies\nDESCRIPTION: Lists the required Python packages (FastAPI and Uvicorn) needed to run a FastAPI application in a Docker container.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/fastapi/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi\nuvicorn\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Status and Port Mappings\nDESCRIPTION: Command and output showing the running containers with their port mappings after successful deployment, confirming that all three services are operational.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS                   PORTS                                                  NAMES\nf3e1183e709e        react-express-mysql_frontend   \"docker-entrypoint.s…\"   8 minutes ago       Up 8 minutes             0.0.0.0:3000->3000/tcp                                 react-express-mysql_frontend_1\n9422da53da76        react-express-mysql_backend    \"docker-entrypoint.s…\"   8 minutes ago       Up 8 minutes (healthy)   0.0.0.0:80->80/tcp, 0.0.0.0:9229-9230->9229-9230/tcp   react-express-mysql_backend_1\na434bce6d2be        mysql:8.0.19                   \"docker-entrypoint.s…\"   8 minutes ago       Up 8 minutes             3306/tcp, 33060/tcp                                    react-express-mysql_db_1\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for PHP Application\nDESCRIPTION: Defines the Docker Compose configuration for the PHP application. It builds the app from a Dockerfile, maps port 80, and mounts the app directory as a volume.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/apache-php/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: app\n    ports: \n      - '80:80'\n    volumes:\n      - ./app:/var/www/html/\n```\n\n----------------------------------------\n\nTITLE: Deploying Spring Boot Application with Docker Compose\nDESCRIPTION: Command and output for deploying the application with Docker Compose in detached mode. Shows the network creation, image building, and container startup process.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/spring-postgres/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"spring-postgres_default\" with the default driver\nBuilding backend\nStep 1/11 : FROM maven:3.5-jdk-9 AS build\n3.5-jdk-9: Pulling from library/maven\n...\nSuccessfully tagged spring-postgres_backend:latest\nWARNING: Image for service backend was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating spring-postgres_backend_1 ... done\nCreating spring-postgres_db_1      ... done\n```\n\n----------------------------------------\n\nTITLE: Testing the Go-Nginx-Postgres Application\nDESCRIPTION: Shows how to test the application by accessing the API endpoint through curl. Demonstrates the expected JSON response from the application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-postgres/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl localhost:80\n[\"Blog post #0\",\"Blog post #1\",\"Blog post #2\",\"Blog post #3\",\"Blog post #4\"]\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Flask Application\nDESCRIPTION: This requirements.txt file lists the Python package dependencies for the Flask application. It includes only the Flask package, which is essential for running the web application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/app/requirements.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nflask\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Container Status\nDESCRIPTION: Command to list running containers after deployment, showing the three services (backend, db, proxy) and their port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-mysql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose ps\nNAME                           COMMAND                  SERVICE             STATUS              PORTS\nnginx-golang-mysql-backend-1   \"/code/bin/backend\"      backend             running\nnginx-golang-mysql-db-1        \"docker-entrypoint.s…\"   db                  running (healthy)   3306/tcp\nnginx-golang-mysql-proxy-1     \"/docker-entrypoint.…\"   proxy               running             0.0.0.0:80->80/tcp\nl_db_1\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Status with Docker Compose\nDESCRIPTION: Command and expected output for checking the status of containers in the Docker Compose application. It shows the running containers with their exposed ports.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-mysql-nginx/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose ps\nNAME                              COMMAND                  SERVICE             STATUS              PORTS\nwasmedge-mysql-nginx-backend-1    \"order_demo_service.…\"   backend             running             0.0.0.0:8080->8080/tcp, :::8080->8080/tcp\nwasmedge-mysql-nginx-db-1         \"docker-entrypoint.s…\"   db                  running             3306/tcp\nwasmedge-mysql-nginx-frontend-1   \"/docker-entrypoint.…\"   frontend            running             0.0.0.0:8090->80/tcp, :::8090->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Nextcloud and PostgreSQL\nDESCRIPTION: Basic Docker Compose configuration defining Nextcloud and PostgreSQL services with port mapping and container settings\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-postgres/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  nc:\n    image: nextcloud:apache\n    ports:\n      - 80:80\n    ...\n  db:\n    image: postgres:alpine\n    ...\n```\n\n----------------------------------------\n\nTITLE: Deploying Spark Java Application with Docker Compose\nDESCRIPTION: This shell command deploys the Spark Java application using Docker Compose in detached mode. It builds and starts the container, showing the build process and container creation.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up -d\nCreating network \"sparkjava_default\" with the default driver\nBuilding sparkjava\nStep 1/11 : FROM maven:3.6.3-jdk-11 AS build\n3.6.3-jdk-11: Pulling from library/maven\n...\nSuccessfully tagged sparkjava_sparkjava:latest\nWARNING: Image for service sparkjava was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating sparkjava_sparkjava_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Services for Prometheus and Grafana\nDESCRIPTION: This YAML snippet defines two services: Prometheus and Grafana. It specifies the Docker images to use and maps the default ports to the host for easy access.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/prometheus-grafana/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  prometheus:\n    image: prom/prometheus\n    ...\n    ports:\n      - 9090:9090\n  grafana:\n    image: grafana/grafana\n    ...\n    ports:\n      - 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview\nDESCRIPTION: Directory structure of the WebAssembly ETL project showing key files and folders including the Compose file, ETL service code, Kafka data, and database configuration.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-kafka-mysql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.\n+-- compose.yml\n|-- etl\n    |-- Dockerfile\n    |-- Cargo.toml\n    +-- src\n        |-- main.rs\n|-- kafka\n    |-- order.json\n|-- db\n    |-- db-password.txt\n```\n\n----------------------------------------\n\nTITLE: Docker Container Status\nDESCRIPTION: Expected output of docker ps command showing the running container details and port mapping\nSOURCE: https://github.com/docker/awesome-compose/blob/master/fastapi/README.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE          COMMAND       CREATED              STATUS              PORTS                                               NAMES\n7087a6e79610   5c1778a60cf8   \"/start.sh\"   About a minute ago   Up About a minute   80/tcp, 0.0.0.0:8000->8000/tcp, :::8000->8000/tcp   fastapi-application\n```\n\n----------------------------------------\n\nTITLE: Testing Spark Java Application\nDESCRIPTION: This shell command uses curl to send a GET request to the Spark Java application running on localhost:8080, demonstrating that the application is responsive and returns the expected output.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl localhost:8080\nHello from Docker!\n```\n\n----------------------------------------\n\nTITLE: Deploying Traefik-Go Application with Docker Compose\nDESCRIPTION: Command to deploy the Traefik-Go application using Docker Compose, showing the output of building the backend image and pulling the Traefik image.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/traefik-golang/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"traefik-golang_default\" with the default driver\nBuilding backend\nStep 1/7 : FROM golang:1.13 AS build\n1.13: Pulling from library/golang\n...\nSuccessfully built 22397f6cd4bc\nSuccessfully tagged traefik-golang_backend:latest\nWARNING: Image for service backend was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nPulling frontend (traefik:2.6)...\n2.6: Pulling from library/traefik\n8663204ce13b: Pull complete\n1a6b5dadc224: Pull complete\nc7891231da41: Pull complete\n9e3c91eff4e8: Pull complete\nDigest: sha256:9dc508fe4f1516b81ec97ed37dd4f3b406f02eda72c7c0dcd9f74d23fbc82239\nStatus: Downloaded newer image for traefik:2.6\nCreating traefik-golang_backend_1 ... done\nCreating traefik-golang_frontend_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Defining Dockerfile for Rails Application\nDESCRIPTION: This Dockerfile sets up a Ruby environment, installs necessary dependencies, and configures the container for running a Rails application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/rails/README.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM ruby:2.5\nRUN apt-get update -qq && apt-get install -y nodejs postgresql-client\nWORKDIR /myapp\nCOPY Gemfile /myapp/Gemfile\nCOPY Gemfile.lock /myapp/Gemfile.lock\nRUN bundle install\n\n# Add a script to be executed every time the container starts.\nCOPY entrypoint.sh /usr/bin/\nRUN chmod +x /usr/bin/entrypoint.sh\nENTRYPOINT [\"entrypoint.sh\"]\nEXPOSE 3000\n\n# Configure the main process to run when running the image\nCMD [\"rails\", \"server\", \"-b\", \"0.0.0.0\"]\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview\nDESCRIPTION: The file structure of the NGINX proxy with Go backend project, showing the organization of Dockerfile, application code, configuration files, and Docker Compose definition.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   └── main.go\n├── compose.yaml\n├── proxy\n│   └── nginx.conf\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Verifying Running Containers with Docker Compose\nDESCRIPTION: Command to list the running containers that shows the status of both the proxy and backend services, along with port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose ps\nNAME                     COMMAND                  SERVICE             STATUS              PORTS\nnginx-golang-backend-1   \"/code/bin/backend\"      backend             running\nnginx-golang-proxy-1     \"/docker-entrypoint.…\"   proxy               running             0.0.0.0:80->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Gemfile for Rails\nDESCRIPTION: This snippet creates a basic Gemfile that loads Rails. It serves as a bootstrap and will be overwritten by 'rails new' command later.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/rails/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://rubygems.org'\ngem 'rails', '~>5'\n```\n\n----------------------------------------\n\nTITLE: Deploying Wireguard VPN with Docker Compose\nDESCRIPTION: Shows the command to start the Wireguard VPN service using Docker Compose and displays sample output including the QR code for connection details.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wireguard/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up\nStarting wireguard ...\nwireguard    | **** It seems the wireguard module is already active. Skipping kernel header install and module compilation. ****\nwireguard    | **** Server mode is selected ****\nwireguard    | **** External server address is set to your-domain.dyndns.com # free examples http://www.duckdns.org/ and https://www.noip.com/ ****\nwireguard    | **** External server port is set to 51820. Make sure that port is properly forwarded to port 51820 inside this container ****\n[...]\nwireguard    | PEER 1 QR code:\nwireguard    | [GENERATED QR CODE TO SCAN FOR YOUR CONNECTION DETAILS]\n```\n\n----------------------------------------\n\nTITLE: Project Structure Tree\nDESCRIPTION: Directory structure showing the layout of the Gitea with PostgreSQL project files.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/gitea-postgres/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Demonstrates how to verify that the PostgreSQL and pgAdmin containers are running correctly using the docker ps command.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/postgresql-pgadmin/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE                           COMMAND                  CREATED             STATUS                 PORTS                                                                                  NAMES\n849c5f48f784   postgres:latest                 \"docker-entrypoint.s…\"   9 minutes ago       Up 9 minutes           0.0.0.0:5432->5432/tcp, :::5432->5432/tcp                                              postgres\nd3cde3b455ee   dpage/pgadmin4:latest           \"/entrypoint.sh\"         9 minutes ago       Up 9 minutes           443/tcp, 0.0.0.0:5050->80/tcp, :::5050->80/tcp                                         pgadmin\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server with npm\nDESCRIPTION: Runs the React app in development mode, providing hot-reloading and error reporting. The app becomes accessible at http://localhost:3000 in the browser.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/frontend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX and Go Backend with Docker Compose\nDESCRIPTION: Command to deploy the application using Docker Compose in detached mode, showing the build and deployment process for both services.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"nginx-golang_default\" with the default driver\nBuilding backend\nStep 1/7 : FROM golang:1.13 AS build\n1.13: Pulling from library/golang\n...\nSuccessfully built 4b24f27138cc\nSuccessfully tagged nginx-golang_proxy:latest\nCreating nginx-golang_backend_1 ... done\nCreating nginx-golang_proxy_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Deploying Vue.js with Docker Compose\nDESCRIPTION: Command and output showing how to deploy the Vue.js application using Docker Compose in detached mode, including the build process and container creation.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/vuejs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"vuejs_default\" with the default driver\nBuilding web\nStep 1/8 : FROM node:13.10.1-alpine\n...\nSuccessfully tagged vuejs_web:latest\nWARNING: Image for service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating vuejs_web_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Deploying Django Application with Docker Compose\nDESCRIPTION: Command to deploy the Django application using Docker Compose in detached mode, with example output showing the build and container creation process.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/django/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"django_default\" with the default driver\nBuilding web\nStep 1/6 : FROM python:3.7-alpine\n...\n...\nStatus: Downloaded newer image for python:3.7-alpine\nCreating django_web_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Deploying Python/Flask Application with Docker Compose\nDESCRIPTION: Shows the command to deploy the application using Docker Compose and the expected output, including the build process and container creation.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n[+] Building 1.1s (16/16) FINISHED\n => [internal] load build definition from Dockerfile                                                                                                                                                                                       0.0s\n    ...                                                                                                                                         0.0s\n => => naming to docker.io/library/flask_web                                                                                                                                                                                               0.0s\n[+] Running 2/2\n ⠿ Network flask_default  Created                                                                                                                                                                                                          0.0s\n ⠿ Container flask-web-1  Started\n```\n\n----------------------------------------\n\nTITLE: Docker Container Status Check\nDESCRIPTION: Command to verify running containers and their port mappings showing Gitea and PostgreSQL containers.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/gitea-postgres/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                          NAMES\n2f5624043da9        gitea/gitea:latest   \"/usr/bin/entrypoint…\"   56 seconds ago      Up 16 seconds       22/tcp, 0.0.0.0:3000->3000/tcp gitea-postgres_gitea_1\n86acc768453e        postgres:alpine      \"docker-entrypoint.s…\"   57 seconds ago      Up 17 seconds       5432/tcp                       gitea-postgres_db_1\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Creates an optimized production build in the build folder. The output includes minified files with hashed filenames for optimal performance and caching, ready for deployment.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/frontend/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview\nDESCRIPTION: Displays the directory structure of the project, showing the main components including backend and frontend Dockerfiles and the compose configuration file.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   ...\n├── compose.yaml\n├── frontend\n│   ├── ...\n│   └── Dockerfile\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Deploying WordPress with Docker Compose\nDESCRIPTION: This bash command deploys the WordPress setup using Docker Compose. It creates the necessary network, volumes, and containers.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wordpress-mysql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"wordpress-mysql_default\" with the default driver\nCreating volume \"wordpress-mysql_db_data\" with default driver\n...\nCreating wordpress-mysql_db_1        ... done\nCreating wordpress-mysql_wordpress_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application with Docker Compose\nDESCRIPTION: Command to deploy the application using Docker Compose and its expected output, showing network creation and container building/pulling.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mysql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"nginx-flask-mysql_default\" with the default driver\nPulling db (mysql:8.0.19)...\n5.7: Pulling from library/mysql\n...\n...\nWARNING: Image for service proxy was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating nginx-flask-mysql_db_1 ... done\nCreating nginx-flask-mysql_backend_1 ... done\nCreating nginx-flask-mysql_proxy_1   ... done\n```\n\n----------------------------------------\n\nTITLE: Verifying Python/Flask Container Deployment\nDESCRIPTION: Demonstrates how to list the running containers and verify the port mapping for the deployed Python/Flask application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose ps\nNAME                COMMAND             SERVICE             STATUS              PORTS\nflask-web-1         \"python3 app.py\"    web                 running             0.0.0.0:8000->8000/tcp\n```\n\n----------------------------------------\n\nTITLE: Verifying ELK Stack Container Deployment\nDESCRIPTION: Docker command to list running containers with expected output showing the three ELK stack containers running with their respective port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/elasticsearch-logstash-kibana/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS                                                                                            NAMES\n173f0634ed33        logstash:7.8.0        \"/usr/local/bin/dock…\"   43 seconds ago      Up 41 seconds             0.0.0.0:5000->5000/tcp, 0.0.0.0:5044->5044/tcp, 0.0.0.0:9600->9600/tcp, 0.0.0.0:5000->5000/udp   log\nb448fd3e9b30        kibana:7.8.0          \"/usr/local/bin/dumb…\"   43 seconds ago      Up 42 seconds             0.0.0.0:5601->5601/tcp                                                                           kib\n366d358fb03d        elasticsearch:7.8.0   \"/tini -- /usr/local…\"   43 seconds ago      Up 42 seconds (healthy)   0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp                                                   es\n```\n\n----------------------------------------\n\nTITLE: Project Structure Layout\nDESCRIPTION: Shows the directory structure of the Angular Docker project with Dockerfile and compose configuration.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── angular\n│   ├── Dockerfile\n│   ├── ...\n│   ├── ...\n│   ....\n└── compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Portainer with Docker Compose\nDESCRIPTION: Command to deploy Portainer using Docker Compose in detached mode.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/portainer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up -d\nStarting portainer ... done\n```\n\n----------------------------------------\n\nTITLE: Deploying PHP Application with Docker Compose\nDESCRIPTION: Commands to deploy the PHP application using Docker Compose. It shows the output of the 'docker compose up -d' command, including network creation and container building steps.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/apache-php/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"php-docker_web\" with the default driver\nBuilding web\nStep 1/6 : FROM php:7.2-apache\n...\n...\nCreating php-docker_web_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Command\nDESCRIPTION: Command to build and deploy the application using Docker Compose in detached mode\nSOURCE: https://github.com/docker/awesome-compose/blob/master/fastapi/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d --build\n```\n\n----------------------------------------\n\nTITLE: Checking Running Minecraft Server Container\nDESCRIPTION: Command to check that the Minecraft server container is running properly, displaying container ID, image, command, creation time, status, and ports.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/minecraft/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                   COMMAND             CREATED             STATUS                   PORTS                                 NAMES\n7f696c2fb101        itzg/minecraft-server   \"/start\"            5 minutes ago       Up 5 minutes (healthy)\n```\n\n----------------------------------------\n\nTITLE: Building Vue.js for Production\nDESCRIPTION: Compiles and minifies the application for production deployment, creating optimized static assets.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/vuejs/vuejs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview\nDESCRIPTION: Directory structure of the React-Java-MySQL project showing the organization of frontend, backend, and database components.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   ...\n├── db\n│   └── password.txt\n├── compose.yaml\n├── frontend\n│   ├── ...\n│   └── Dockerfile\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Deploying Pi-hole and cloudflared with Docker Compose\nDESCRIPTION: This shell command deploys the Pi-hole and cloudflared services using Docker Compose. It starts the containers in detached mode.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/pihole-cloudflared-DoH/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up -d\nStarting cloudflared ... done\nStarting pihole      ... done\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application with Docker Compose\nDESCRIPTION: Command to deploy the application using Docker Compose in detached mode, with example output showing the creation of containers and networks.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mongo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"nginx-flask-mongo_default\" with the default driver\nPulling mongo (mongo:)...\nlatest: Pulling from library/mongo\n423ae2b273f4: Pull complete\n...\n...\nStatus: Downloaded newer image for nginx:latest\nCreating nginx-flask-mongo_mongo_1 ... done\nCreating nginx-flask-mongo_backend_1 ... done\nCreating nginx-flask-mongo_web_1     ... done\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Status and Port Mapping\nDESCRIPTION: Command and output to list the running containers, showing their IDs, images, commands, status, and port mappings for the React-Express-MongoDB application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mongodb/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS                  PORTS                      NAMES\n06e606d69a0e        react-express-mongodb_server        \"docker-entrypoint.s…\"   23 minutes ago      Up 23 minutes           0.0.0.0:3000->3000/tcp     server\nff56585e1db4        react-express-mongodb_frontend      \"docker-entrypoint.s…\"   23 minutes ago      Up 23 minutes           0.0.0.0:3000->3000/tcp     frontend\na1f321f06490        mongo:4.2.0                         \"docker-entrypoint.s…\"   23 minutes ago      Up 23 minutes           0.0.0.0:27017->27017/tcp   mongo\n```\n\n----------------------------------------\n\nTITLE: Deploying Plex with Docker Compose\nDESCRIPTION: Command for starting the Plex container in detached mode. After execution, the Plex web interface will be available on port 32400.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/plex/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up -d\nStarting plex ... done\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Output\nDESCRIPTION: Console output showing the deployment process using docker compose up, including pulling images and building containers.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask-redis/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n[+] Running 24/24\n ⠿ redis Pulled   \n ...                                                                                                                                                                                                                                                                                                                                                                             \n   ⠿ 565225d89260 Pull complete                                                                                                                                                                                                      \n[+] Building 12.7s (10/10) FINISHED\n => [internal] load build definition from Dockerfile                                                                                                                                                                                  ...\n[+] Running 3/3\n ⠿ Network flask-redis_default    Created                                                                                                                                                                                             \n ⠿ Container flask-redis-redis-1  Started                                                                                                                                                                                             \n ⠿ Container flask-redis-web-1    Started\n```\n\n----------------------------------------\n\nTITLE: Project Structure for PostgreSQL and pgAdmin Setup\nDESCRIPTION: Displays the file structure of the project, showing the key files needed for the setup.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/postgresql-pgadmin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .env\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Deploying ASP.NET and MS SQL Server with Docker Compose\nDESCRIPTION: This shell command demonstrates how to deploy the application using Docker Compose. It shows the output of pulling necessary images and creating containers.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/aspnet-mssql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up -d\nCreating network \"aspnet-mssql_default\" with the default driver\nBuilding web\nStep 1/13 : FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build\n2.1: Pulling from dotnet/core/sdk\n....\n....\na9dca2f6722a: Pull complete\nDigest: sha256:9b700672670bb3db4b212e8aef841ca79eb2fce7d5975a5ce35b7129a9b90ec0\nStatus: Downloaded newer image for microsoft/mssql-server-linux:latest\nCreating aspnet-mssql_web_1 ... done\nCreating aspnet-mssql_db_1  ... done\n```\n\n----------------------------------------\n\nTITLE: Deploying ELK Stack with Docker Compose\nDESCRIPTION: Command to deploy the ELK stack using Docker Compose in detached mode, with expected output showing network creation and container startup.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/elasticsearch-logstash-kibana/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"elasticsearch-logstash-kibana_elastic\" with driver \"bridge\"\nCreating es ... done\nCreating log ... done\nCreating kib ... done\n```\n\n----------------------------------------\n\nTITLE: Checking Container Status in WebAssembly ETL System\nDESCRIPTION: Command and output showing the status of running containers in the Docker Compose application, displaying the container names, associated commands, services, and port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-kafka-mysql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose ps\nNAME                              COMMAND                  SERVICE             STATUS              PORTS\nwasmedge-kafka-mysql-db-1         \"docker-entrypoint.s…\"   db                  running             3306/tcp\nwasmedge-kafka-mysql-etl-1        \"kafka.wasm\"             etl                 running\nwasmedge-kafka-mysql-redpanda-1   \"/entrypoint.sh 'red…\"   redpanda            running             0.0.0.0:8081-8082->8081-8082/tcp, :::8081-8082->8081-8082/tcp, 0.0.0.0:9092->9092/tcp, :::9092->9092/tcp, 0.0.0.0:9644->9644/tcp, :::9644->9644/tcp, 0.0.0.0:29092->29092/tcp, :::29092->29092/tcp\n```\n\n----------------------------------------\n\nTITLE: Application Test Command\nDESCRIPTION: Example curl command to test the running application and its expected output.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask-redis/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000\nThis webpage has been viewed 2 time(s)\n```\n\n----------------------------------------\n\nTITLE: Deploying Java Spark and MySQL with Docker Compose\nDESCRIPTION: Commands to deploy the application using Docker Compose. It builds and starts the services defined in the compose file.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava-mysql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"sparkjava-mysql_default\" with the default driver\nBuilding backend\n...\nSuccessfully tagged sparkjava-mysql_backend:latest\nWARNING: Image for service backend was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating sparkjava-mysql_db_1      ... done\nCreating sparkjava-mysql_backend_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview\nDESCRIPTION: Directory structure of the project showing the compose file, Flask application files, and Nginx configuration.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mysql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── compose.yaml\n├── flask\n│   ├── Dockerfile\n│   ├── requirements.txt\n│   └── server.py\n└── nginx\n    └── nginx.conf\n```\n\n----------------------------------------\n\nTITLE: Docker Container Status Check\nDESCRIPTION: Command output showing running containers and their port mappings\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-postgres/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES\n9884a9cc0144        postgres:alpine     \"docker-entrypoint.s…\"   12 minutes ago      Up 12 minutes       5432/tcp             nextcloud-postgres_db_1\nbae385bee48b        nextcloud:apache    \"/entrypoint.sh apac…\"   12 minutes ago      Up 12 minutes       0.0.0.0:80->80/tcp   nextcloud-postgres_nc_1\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Status with Docker PS\nDESCRIPTION: Shows how to check the running containers and verify their status, ports, and names using the docker ps command.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/spring-postgres/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                  NAMES\n56236f640eaa        postgres                  \"docker-entrypoint.s…\"   29 seconds ago      Up 28 seconds       5432/tcp               spring-postgres_db_1\n6e69472dc2c0        spring-postgres_backend   \"java -Djava.securit…\"   29 seconds ago      Up 28 seconds       0.0.0.0:8080->8080/tcp   spring-postgres_backend_1\n```\n\n----------------------------------------\n\nTITLE: Initializing Database with WasmEdge API\nDESCRIPTION: Command for initializing the database using the WasmEdge API. This curl request creates the required table structure in the MySQL database.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-mysql-nginx/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/init\n```\n\n----------------------------------------\n\nTITLE: Container Status Check\nDESCRIPTION: Output of docker compose ps command showing running containers and their port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask-redis/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose ps\nNAME                  COMMAND                  SERVICE             STATUS              PORTS\nflask-redis-redis-1   \"redis-server --load…\"   redis               running             0.0.0.0:6379->6379/tcp\nflask-redis-web-1     \"/bin/sh -c 'python …\"   web                 running             0.0.0.0:8000->8000/tcp\n```\n\n----------------------------------------\n\nTITLE: Deploying WebAssembly ETL Application with Docker Compose\nDESCRIPTION: Command to deploy the multi-container application using Docker Compose and its expected output showing the creation of the network and three containers: Redpanda, ETL, and the database.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-kafka-mysql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n...\n ⠿ Network wasmedge-kafka-mysql_default       Created                      0.1s\n ⠿ Container wasmedge-kafka-mysql-redpanda-1  Created                      0.3s\n ⠿ Container wasmedge-kafka-mysql-etl-1       Created                      0.3s\n ⠿ Container wasmedge-kafka-mysql-db-1        Created                      0.3s\n```\n\n----------------------------------------\n\nTITLE: Project Structure for React-Express-MongoDB Application\nDESCRIPTION: The directory structure for the React-Express-MongoDB application, showing the organization of backend, frontend, and configuration files.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mongodb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   ...\n├── compose.yaml\n├── frontend\n│   ├── ...\n│   └── Dockerfile\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Docker Container Status Check\nDESCRIPTION: Shows how to verify the running containers and their port mappings using docker ps command.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-redis-mariadb/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES\n6541add4d648        nextcloud:apache    \"/entrypoint.sh apac…\"   35 seconds ago      Up 34 seconds       0.0.0.0:80->80/tcp   nextcloud-redis-mariadb_nc_1\n6c656f98cf14        redis:alpine        \"docker-entrypoint.s…\"   35 seconds ago      Up 34 seconds       6379/tcp             nextcloud-redis-mariadb_redis_1\n6d4c6630a4a3        mariadb             \"docker-entrypoint.s…\"   35 seconds ago      Up 34 seconds       3306/tcp             nextcloud-redis-mariadb_db_1\n```\n\n----------------------------------------\n\nTITLE: Verifying Plex Container Status\nDESCRIPTION: Command to check if the Plex container is running properly. This shows the container ID, image used, running time and status.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/plex/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE                             COMMAND                  CREATED          STATUS         PORTS                                          NAMES\n62fc3ff1f1a0   linuxserver/plex:latest           \"/init\"                  38 seconds ago   Up 3 seconds                                                  plex\n```\n\n----------------------------------------\n\nTITLE: Retrieving Orders from WasmEdge API\nDESCRIPTION: Command for fetching all order records from the database using the WasmEdge API. This GET request returns all rows from the orders table as a JSON array.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-mysql-nginx/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/orders\n```\n\n----------------------------------------\n\nTITLE: Project Structure Tree\nDESCRIPTION: Directory structure showing the key files in the project including Dockerfile, compose.yaml, and application files.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask-redis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── Dockerfile\n├── README.md\n├── app.py\n├── compose.yaml\n└── requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status\nDESCRIPTION: This bash command checks the status of the running containers, showing their IDs, images, commands, creation time, status, and port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wordpress-mysql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES\n5fbb4181a069        wordpress:latest    \"docker-entrypoint.s…\"   35 seconds ago      Up 34 seconds       0.0.0.0:80->80/tcp    wordpress-mysql_wordpress_1\ne0884a8d444d        mysql:8.0.19        \"docker-entrypoint.s…\"   35 seconds ago      Up 34 seconds       3306/tcp, 33060/tcp   wordpress-mysql_db_1\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Go-Nginx-Postgres Docker Compose Application\nDESCRIPTION: Shows the directory and file structure of the project, displaying the organization of the backend (Go), proxy (Nginx), and database components.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-postgres/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   ├── go.mod\n│   ├── go.sum\n│   └── main.go\n├── db\n│   └── password.txt\n├── compose.yaml\n├── proxy\n│   └── nginx.conf\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Checking Container Status and Port Mapping\nDESCRIPTION: This shell command displays the running containers, their status, and port mappings for the Pi-hole and cloudflared services.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/pihole-cloudflared-DoH/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE                                 COMMAND                  CREATED         STATUS                            PORTS                                                                                                     NAMES\nafcf5ca4214c   pihole/pihole:latest                  \"/s6-init\"               3 seconds ago   Up 3 seconds (health: starting)   0.0.0.0:53->53/udp, 0.0.0.0:53->53/tcp, 0.0.0.0:67->67/udp, 0.0.0.0:8080->80/tcp, 0.0.0.0:8443->443/tcp   pihole\ndfd49ab7a372   visibilityspots/cloudflared           \"/bin/sh -c '/usr/lo…\"   4 seconds ago   Up 3 seconds (health: starting)   0.0.0.0:5054->5054/tcp, 0.0.0.0:5054->5054/udp                                                            cloudflared\n```\n\n----------------------------------------\n\nTITLE: Verifying Traefik-Go Container Deployment\nDESCRIPTION: Shows the expected output of the 'docker ps' command after successful deployment, displaying the running containers and their port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/traefik-golang/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS          PORTS                               NAMES\ne0a0f3191042   traefik:2.6              \"/entrypoint.sh --pr…\"   42 seconds ago   Up 42 seconds   0.0.0.0:80->80/tcp, :::80->80/tcp   traefik-golang-frontend-1\n662d1506f1fd   traefik-golang_backend   \"/usr/local/bin/back…\"   42 seconds ago   Up 42 seconds                                       traefik-golang-backend-1\n```\n\n----------------------------------------\n\nTITLE: Defining Django Dependencies in requirements.txt\nDESCRIPTION: A requirements file that specifies the Python packages needed for the Django application. It includes Django 3.x and the PostgreSQL adapter.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDjango>=3.0,<4.0\npsycopg2>=2.8\n```\n\n----------------------------------------\n\nTITLE: Deploying with Docker Compose\nDESCRIPTION: Command and output for deploying the application using Docker Compose, showing the build process and container creation for all three services.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mongodb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"react-express-mongodb_default\" with the default driver\nBuilding frontend\nStep 1/9 : FROM node:13.13.0-stretch-slim\n ---> aa6432763c11\n...\nSuccessfully tagged react-express-mongodb_app:latest\nWARNING: Image for service app was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating frontend        ... done\nCreating mongo           ... done\nCreating app             ... done\n```\n\n----------------------------------------\n\nTITLE: Project Structure Definition\nDESCRIPTION: Directory structure showing the layout of the application files including Docker configurations, Nginx settings, and web application code.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-nodejs-redis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── README.md\n├── compose.yaml\n├── nginx\n│   ├── Dockerfile\n│   └── nginx.conf\n└── web\n    ├── Dockerfile\n    ├── package.json\n    └── server.js\n\n2 directories, 7 files\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Command Output\nDESCRIPTION: Terminal output showing the deployment process of Nextcloud and PostgreSQL containers using docker compose up\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-postgres/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"nextcloud-postgres_default\" with the default driver\nCreating volume \"nextcloud-postgres_nc_data\" with default driver\nPulling nc (nextcloud:apache)...\n....\n....\nStatus: Downloaded newer image for postgres:alpine\nCreating nextcloud-postgres_nc_1 ... done\nCreating nextcloud-postgres_db_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: Console output showing the startup process of Docker Compose services, including database initialization and Django development server launch.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up\n\ndjangosample_db_1 is up-to-date\nCreating djangosample_web_1 ...\nCreating djangosample_web_1 ... done\nAttaching to djangosample_db_1, djangosample_web_1\ndb_1   | The files belonging to this database system will be owned by user \"postgres\".\ndb_1   | This user must also own the server process.\ndb_1   |\ndb_1   | The database cluster will be initialized with locale \"en_US.utf8\".\ndb_1   | The default database encoding has accordingly been set to \"UTF8\".\ndb_1   | The default text search configuration will be set to \"english\".\n\n<...>\n\nweb_1  | July 30, 2020 - 18:35:38\nweb_1  | Django version 3.0.8, using settings 'composeexample.settings'\nweb_1  | Starting development server at http://0.0.0.0:8000/\nweb_1  | Quit the server with CONTROL-C.\n```\n\n----------------------------------------\n\nTITLE: Configuring Container DNS for Pi-hole in Docker Compose\nDESCRIPTION: This YAML snippet shows how to configure DNS settings for the Pi-hole container. It sets the container's resolve settings to localhost and includes a backup DNS server.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/pihole-cloudflared-DoH/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndns:\n    - 127.0.0.1 # \"Sets your container's resolve settings to localhost so it can resolve DHCP hostnames [...]\" - github.com/pi-hole/docker-pi-hole\n    - 1.1.1.1 # Backup server\n```\n\n----------------------------------------\n\nTITLE: Project Structure\nDESCRIPTION: Directory structure of the FastAPI application showing key files and folders\nSOURCE: https://github.com/docker/awesome-compose/blob/master/fastapi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── compose.yaml\n├── Dockerfile\n├── requirements.txt\n├── app\n    ├── main.py\n    ├── __init__.py\n\n```\n\n----------------------------------------\n\nTITLE: Verifying ASP.NET and MS SQL Server Container Deployment\nDESCRIPTION: This shell command shows how to list the running containers to verify the deployment. It displays the container IDs, images, commands, creation time, status, ports, and names.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/aspnet-mssql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n7f3a2a7ea5c0        microsoft/mssql-server-linux   \"/opt/mssql/bin/sqls…\"   4 minutes ago       Up 4 minutes        1433/tcp             aspnet-mssql_db_1\n27342dde8b64        aspnet-mssql_web               \"dotnet aspnetapp.dll\"   4 minutes ago       Up 4 minutes        0.0.0.0:80->80/tcp   aspnet-mssql_web_1\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview\nDESCRIPTION: The file structure of the Docker Compose project showing the organization of backend, frontend, and database files.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   ...\n├── db\n│   └── password.txt\n├── compose.yaml\n├── frontend\n│   ├── ...\n│   └── Dockerfile\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Defining Entrypoint Script for Rails Container\nDESCRIPTION: This bash script serves as an entrypoint for the Rails container. It removes a pre-existing server.pid file to allow server restart and then executes the main process.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/rails/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nset -e\n\n# Remove a potentially pre-existing server.pid for Rails.\nrm -f /myapp/tmp/pids/server.pid\n\n# Then exec the container's main process (what's set as CMD in the Dockerfile).\nexec \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Backend API Endpoint\nDESCRIPTION: Command and output showing how to test the backend service API endpoint, which returns a JSON response indicating a successful connection to the MySQL database.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:80\n{\"message\":\"Hello from MySQL 8.0.19\"}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Flask Application\nDESCRIPTION: This requirements.txt file lists the exact versions of Python packages needed for a Flask web application. It includes Flask 1.1.1 as the web framework and Gunicorn 20.0.4 as the WSGI HTTP Server for production deployment.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-wsgi-flask/flask/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFlask==1.1.1\ngunicorn==20.0.4\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview\nDESCRIPTION: Directory structure of the React application with Nginx deployment setup, showing key files and directories.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-nginx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── compose.yaml\n├── Dockerfile\n├── .dockerignore\n├── .nginx\n│   └── nginx.conf\n├── package.json\n├── public\n│   ├── ...\n│   └── robots.txt\n├── README.md\n├── src\n│   ├── ...\n│   └── App.js\n└── yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Container Status\nDESCRIPTION: Docker command to list running containers, showing container IDs, images, commands, creation time, status, ports, and names.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-aspnet-mysql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n8906b14c5ad1        nginx-aspnet-mysql_proxy     \"nginx -g 'daemon of…\"   2 minutes ago       Up 2 minutes        0.0.0.0:80->80/tcp    nginx-aspnet-mysql\nl_proxy_1\n13e0e0a7715a        nginx-aspnet-mysql_backend   \"/server\"                2 minutes ago       Up 2 minutes        8000/tcp              nginx-aspnet-mysq\nl_backend_1\nca8c5975d205        mysql:5.7                    \"docker-entrypoint.s…\"   2 minutes ago       Up 2 minutes        3306/tcp, 33060/tcp   nginx-aspnet-mysql\nl_db_1\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Traefik-Go Application\nDESCRIPTION: Displays the directory structure of the Traefik-Go application, showing the main components including the backend folder, Dockerfile, main.go, compose.yaml, and README.md.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/traefik-golang/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   └── main.go\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: Console command and output for viewing active Docker containers, showing the Django web application and PostgreSQL database containers.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n\nCONTAINER ID  IMAGE       COMMAND                  CREATED         STATUS        PORTS                    NAMES\ndef85eff5f51  django_web  \"python3 manage.py...\"   10 minutes ago  Up 9 minutes  0.0.0.0:8000->8000/tcp   django_web_1\n678ce61c79cc  postgres    \"docker-entrypoint...\"   20 minutes ago  Up 9 minutes  5432/tcp                 django_db_1\n```\n\n----------------------------------------\n\nTITLE: Testing the Application with curl\nDESCRIPTION: Example of testing the application by accessing it through the web browser or using curl to verify it's working correctly.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mongo/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:80\nHello from the MongoDB client!\n```\n\n----------------------------------------\n\nTITLE: Monitoring Minecraft Server Initialization\nDESCRIPTION: Command to view the logs of the Minecraft server container, showing the initialization progress, world generation, and successful startup messages.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/minecraft/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose logs\n...\nminecraft_1  | [15:06:39] [Worker-Main-6/INFO]: Preparing spawn area: 94%\nminecraft_1  | [15:06:39] [Worker-Main-7/INFO]: Preparing spawn area: 94%\nminecraft_1  | [15:06:39] [Server thread/INFO]: Time elapsed: 25620 ms\nminecraft_1  | [15:06:39] [Server thread/INFO]: Done (35.526s)! For help, type \"help\"\nminecraft_1  | [15:06:39] [Server thread/INFO]: Starting remote control listener\nminecraft_1  | [15:06:39] [Server thread/INFO]: Thread RCON Listener started\nminecraft_1  | [15:06:39] [RCON Listener #1/INFO]: RCON running on 0.0.0.0:25575\n```\n\n----------------------------------------\n\nTITLE: Project Structure Display\nDESCRIPTION: Shows the directory structure of the Vue.js Docker Compose project, including the compose.yaml file, README, and Vue.js application directory.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/vuejs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compose.yaml\n├── README.md\n└── vuejs\n    ├── Dockerfile\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Container Status\nDESCRIPTION: Output of the docker ps command showing the three running containers (frontend, backend, and database) with their port mappings and status information.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                  NAMES\na63dee74d79e        react-java-mysql-backend    \"java -Djava.securit…\"   39 seconds ago      Up 37 seconds                              react-java-mysql_backend-1\n6a7364c0812e        react-java-mysql-frontend   \"docker-entrypoint.s…\"   39 seconds ago      Up 33 seconds       0.0.0.0:3000->3000/tcp react-java-mysql_frontend-1\nb176b18fbec4        mysql:8.0.19                \"docker-entrypoint.s…\"   39 seconds ago      Up 37 seconds       3306/tcp, 33060/tcp    react-java-mysql_db-1\n```\n\n----------------------------------------\n\nTITLE: Project Structure for PHP Application with Apache2\nDESCRIPTION: Shows the directory structure of the PHP application project, including the compose.yaml file, Dockerfile, and index.php.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/apache-php/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compose.yaml\n├── app\n    ├── Dockerfile\n    └── index.php\n```\n\n----------------------------------------\n\nTITLE: Verifying PHP Application Deployment\nDESCRIPTION: Commands to verify the successful deployment of the PHP application. It shows how to list running containers and check port mapping using 'docker ps'.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/apache-php/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS              PORTS                  NAMES\n2bc8271fee81        php-docker_web               \"docker-php-entrypoi…\"   About a minute ago  Up About a minute   0.0.0.0:80->80/tc    php-docker_web_1\n```\n\n----------------------------------------\n\nTITLE: Testing Python/Flask Application Accessibility\nDESCRIPTION: Provides a curl command to test the accessibility of the deployed Python/Flask application and shows the expected response.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8000\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Creates an optimized production build in the build folder. Bundles React in production mode and optimizes the build for best performance.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/frontend/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Verifying Spark Java Container Deployment\nDESCRIPTION: This shell command lists the running Docker containers, showing the Spark Java container's details including its ID, image, command, status, and port mapping.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                  NAMES\n5af94cb25394        sparkjava_sparkjava   \"/bin/sh -c 'java -j…\"   20 seconds ago      Up 19 seconds       0.0.0.0:8080->8080/tcp   sparkjava_sparkjava_1\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Wireguard Docker Compose Setup\nDESCRIPTION: Shows the file structure for the Wireguard Docker Compose project, including the .env file, compose.yaml, and README.md.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wireguard/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .env\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the organization of project files including Docker compose, Flask application, and NGINX configuration files.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-wsgi-flask/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── compose.yaml\n├── flask\n│   ├── app.py\n│   ├── Dockerfile\n│   ├── requirements.txt\n│   └── wsgi.py\n└── nginx\n    ├── default.conf\n    ├── Dockerfile\n    ├── nginx.conf\n    └── start.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Orders via WasmEdge API\nDESCRIPTION: Command for creating multiple order records in the database using the WasmEdge API. It sends a POST request with JSON data from the orders.json file.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-mysql-nginx/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/create_orders -X POST -d @db/orders.json\n```\n\n----------------------------------------\n\nTITLE: Linting Vue.js Project Files\nDESCRIPTION: Runs the linter to check for code style issues and automatically fix them where possible.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/vuejs/vuejs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Project Structure\nDESCRIPTION: Shows the basic file structure for the Portainer Docker Compose project.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/portainer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Verifying Running Containers with Docker ps\nDESCRIPTION: Shows how to verify the deployed containers and their port mappings using the docker ps command, displaying the three running containers with their respective port configurations.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                          COMMAND                  CREATED             STATUS              PORTS                    NAMES\n30b7d9dc4898        react-rust-postgres_backend    \"cargo run --offline\"    37 seconds ago      Up 35 seconds       8000/tcp                 react-rust-postgres_backend_1\n0bca0cb682b8        react-rust-postgres_frontend   \"docker-entrypoint.s…\"   42 seconds ago      Up 41 seconds       0.0.0.0:3000->3000/tcp   react-rust-postgres_frontend_1\n1611961bf3d1        postgres:12-alpine             \"docker-entrypoint.s…\"   42 seconds ago      Up 36 seconds       0.0.0.0:5432->5432/tcp   react-rust-postgres_db_1\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Command Output\nDESCRIPTION: Shows the console output when deploying the Angular application using docker compose up command.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"angular_default\" with the default driver\nBuilding angular\nStep 1/7 : FROM node:10\n10: Pulling from library/node\nc0c53f743a40: Pull complete\n...\n...\nSuccessfully built efea5cef6851\nSuccessfully tagged angular_web:latest\nWARNING: Image for service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating angular_web_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: The file structure of the project showing the main compose.yaml file, Flask application files, and Nginx configuration.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mongo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compose.yaml\n├── flask\n│   ├── Dockerfile\n│   ├── requirements.txt\n│   └── server.py\n└── nginx\n    └── nginx.conf\n```\n\n----------------------------------------\n\nTITLE: Deploying Minecraft Server with Docker Compose\nDESCRIPTION: Commands to create the necessary data directory and deploy the Minecraft server using Docker Compose in detached mode. Shows the expected warning about the deploy key.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/minecraft/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p ~/minecraft_data\n$ docker compose up -d\nWARNING: Some services (minecraft) use the 'deploy' key, which will be ignored. Compose does not support 'deploy' configuration - use `docker stack deploy` to deploy to a swarm.\nCreating network \"minecraft_default\" with the default driver\nCreating minecraft_minecraft_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Running React App Tests\nDESCRIPTION: Launches the test runner in interactive watch mode, allowing for continuous testing during development. This provides immediate feedback when code changes affect test results.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/frontend/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Container Status\nDESCRIPTION: Command to verify the running container and port mapping for the Vue.js application, showing the container ID, image, command, status, and port mapping.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/vuejs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n701c02bb97b1        vuejs_web           \"docker-entrypoint.s…\"   49 seconds ago      Up 46 seconds       0.0.0.0:80->8080/tcp   vuejs_web_1\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus and Grafana Container Status\nDESCRIPTION: This bash command lists the running containers, showing the container IDs, images, commands, creation time, status, and port mappings for Prometheus and Grafana.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/prometheus-grafana/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\ndbdec637814f        prom/prometheus     \"/bin/prometheus --c…\"   8 minutes ago       Up 8 minutes        0.0.0.0:9090->9090/tcp   prometheus\n79f667cb7dc2        grafana/grafana     \"/run.sh\"                8 minutes ago       Up 8 minutes        0.0.0.0:3000->3000/tcp   grafana\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Command\nDESCRIPTION: Command output showing the deployment of services using Docker Compose, including container creation and network setup.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-nodejs-redis/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n[+] Running 24/24\n ⠿ redis Pulled                                                                                                                                                                                                                      ...\n   ⠿ 565225d89260 Pull complete                                                                                                                                                                                                      \n[+] Building 2.4s (22/25)\n => [nginx-nodejs-redis_nginx internal] load build definition from Dockerfile                                                                                                                                                         ...\n[+] Running 5/5\n ⠿ Network nginx-nodejs-redis_default    Created                                                                                                                                                                                      \n ⠿ Container nginx-nodejs-redis-web2-1   Started                                                                                                                                                                                      \n ⠿ Container nginx-nodejs-redis-redis-1  Started                                                                                                                                                                                      \n ⠿ Container nginx-nodejs-redis-web1-1   Started                                                                                                                                                                                      \n ⠿ Container nginx-nodejs-redis-nginx-1  Started\n```\n\n----------------------------------------\n\nTITLE: Redis Monitoring Commands\nDESCRIPTION: Commands to connect to Redis CLI and monitor key operations, showing actual Redis commands being executed.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask-redis/README.md#2025-04-23_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\nredis-cli -p 6379\n127.0.0.1:6379> monitor\nOK\n1646634062.732496 [0 172.21.0.3:33106] \"INCRBY\" \"hits\" \"1\"\n1646634062.735669 [0 172.21.0.3:33106] \"GET\" \"hits\"\n```\n\n----------------------------------------\n\nTITLE: Project Structure Directory Tree\nDESCRIPTION: Shows the basic file structure of the Nextcloud Docker project\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-postgres/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Container Status\nDESCRIPTION: The docker ps command to verify the running container status, showing the expected output with container ID, image, command, creation time, status, port mapping, and name.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/django/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                    NAMES\n3adaea94142d        django_web          \"python3 manage.py r…\"   About a minute ago   Up About a minute   0.0.0.0:8000->8000/tcp   django_web_1\n```\n\n----------------------------------------\n\nTITLE: Container Status Check\nDESCRIPTION: Command output showing running containers and their port mappings after successful deployment.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-wsgi-flask/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE            COMMAND                  CREATED              STATUS                        PORTS                              NAMES\nbde3f29cf571   ...nginx-proxy   \"/docker-entrypoint.…\"   About a minute ago   Up About a minute (healthy)   0.0.0.0:80->80/tcp                 ...nginx-proxy_1\n86c44470b547   ...flask-app     \"gunicorn -w 3 -t 60…\"   About a minute ago   Up About a minute (healthy)   5000/tcp, 0.0.0.0:8000->8000/tcp   ...flask-app_1\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Django Docker Compose Setup\nDESCRIPTION: The directory structure for the Django application with Docker Compose configuration. It shows the main compose.yaml file and the app directory containing the Django application files.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/django/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compose.yaml\n├── app\n    ├── Dockerfile\n    ├── requirements.txt\n    └── manage.py\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application with Docker Compose\nDESCRIPTION: Command to deploy the multi-container application in detached mode, along with the expected output showing container creation and network setup.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"react-rust-postgres_default\" with the default driver\nBuilding backend\n...\nSuccessfully tagged react-rust-postgres_frontend:latest\nWARNING: Image for service frontend was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating react-rust-postgres_frontend_1 ... done\nCreating react-rust-postgres_db_1       ... done\nCreating react-rust-postgres_backend_1  ... done\n```\n\n----------------------------------------\n\nTITLE: Project Structure Tree\nDESCRIPTION: Shows the basic file structure of the project with compose.yaml and README.md files.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-redis-mariadb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Status with Docker PS\nDESCRIPTION: Command and output showing the running container status, confirming that the frontend container is running and port 80 is properly mapped from the container to the host.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-nginx/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n\nCONTAINER ID   IMAGE                  COMMAND                  CREATED              STATUS              PORTS                               NAMES\nb6d00a4974ce   react-nginx_frontend   \"nginx -g 'daemon of…\"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp, :::80->80/tcp   frontend\n```\n\n----------------------------------------\n\nTITLE: Docker Container Status Check\nDESCRIPTION: Displays the running container information showing the port mapping for the Angular application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n6884c228388e        angular_web         \"docker-entrypoint.s…\"   42 seconds ago      Up 36 seconds       0.0.0.0:4200->4200/tcp angular_web_1\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Java Spark and MySQL Docker Compose Setup\nDESCRIPTION: Shows the directory structure of the project, including the backend, database, and configuration files.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava-mysql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   └── ...\n├── db\n│   └── password.txt\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Python/Flask Application Containers\nDESCRIPTION: Shows the command to stop and remove the deployed containers using Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview for Spring-Postgres Project\nDESCRIPTION: Shows the file structure of the project with backend files, database password, and compose configuration.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/spring-postgres/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── backend\n│   ├── Dockerfile\n│   └── ...\n├── db\n│   └── password.txt\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Command Output\nDESCRIPTION: Shows the output of deploying the stack with docker compose up, including network creation, volume creation, and container startup.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-redis-mariadb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"nextcloud-redis-mariadb_redisnet\" with the default driver\nCreating network \"nextcloud-redis-mariadb_dbnet\" with the default driver\nCreating volume \"nextcloud-redis-mariadb_nc_data\" with default driver\nPulling redis (redis:alpine)...\nalpine: Pulling from library/redis....\n....\nStatus: Downloaded newer image for mariadb:latest\nCreating nextcloud-redis-mariadb_db_1    ... done\nCreating nextcloud-redis-mariadb_nc_1    ... done\nCreating nextcloud-redis-mariadb_redis_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Verifying Deployment of Java Spark and MySQL Containers\nDESCRIPTION: Shows how to list the running containers and verify their status and port mappings using Docker commands.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava-mysql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                  NAMES\nee1e4f05d9f6        sparkjava-mysql_backend   \"/bin/sh -c 'java -j…\"   44 seconds ago      Up 43 seconds       0.0.0.0:8080->8080/tcp   sparkjava-mysql_backend_1\n716025ddf65b        mysql:8.0.19              \"docker-entrypoint.s…\"   44 seconds ago      Up 43 seconds       3306/tcp, 33060/tcp    sparkjava-mysql_db_1\n```\n\n----------------------------------------\n\nTITLE: Project Structure for ELK Stack Deployment\nDESCRIPTION: Displays the simple project structure consisting of just the compose.yaml file.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/elasticsearch-logstash-kibana/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n└── compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Prometheus and Grafana Containers\nDESCRIPTION: This bash command stops and removes the Prometheus and Grafana containers. The -v flag is used to remove the associated volumes, erasing all data.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/prometheus-grafana/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Minecraft Server Docker Setup\nDESCRIPTION: Shows the basic file structure of the Minecraft server project, containing the compose.yaml file and README.md.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/minecraft/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Whalesay\nDESCRIPTION: Configures a service using the docker/whalesay image to print a whale ASCII art with 'hello' message. The compose file specifies a simple service configuration with a command to run.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-kafka-mysql/db/db-password.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  whalesay:\n    image: docker/whalesay\n    command: cowsay \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Testing PHP Application\nDESCRIPTION: Instructions for testing the deployed PHP application. It shows how to use curl to send a request to the application and receive a response.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/apache-php/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:80\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Checking Running Containers\nDESCRIPTION: Command to verify that the Portainer container is running correctly, showing the container ID, image, command, status, and port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/portainer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE                           COMMAND                  CREATED          STATUS                          PORTS                                                                                  NAMES\n860311c00e62   portainer/portainer-ce:alpine   \"/portainer -H unix:…\"   54 seconds ago   Up 53 seconds                   8000/tcp, 0.0.0.0:9000->9000/tcp, :::9000->9000/tcp                                    portainer\n```\n\n----------------------------------------\n\nTITLE: Portainer Docker Compose Configuration\nDESCRIPTION: The Docker Compose file for Portainer CE using the alpine image. This defines the minimum configuration needed to run Portainer.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/portainer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  portainer:\n    image: portainer/portainer-ce:alpine\n```\n\n----------------------------------------\n\nTITLE: Removing WordPress Containers and Volumes\nDESCRIPTION: This bash command stops and removes the WordPress and database containers, as well as the associated named volumes, using the -v flag.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wordpress-mysql/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Compose Resources\nDESCRIPTION: Command to stop and remove the containers and network created by Docker Compose, with the expected output showing the cleanup process.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\nStopping react-rust-postgres_backend_1  ... done\nStopping react-rust-postgres_frontend_1 ... done\nStopping react-rust-postgres_db_1       ... done\nRemoving react-rust-postgres_backend_1  ... done\nRemoving react-rust-postgres_frontend_1 ... done\nRemoving react-rust-postgres_db_1       ... done\nRemoving network react-rust-postgres_default\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with WordPress Project\nDESCRIPTION: Console output showing the execution of 'docker compose up -d' command which pulls the necessary Docker images and starts the WordPress and database containers in detached mode.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/wordpress/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d\n\nCreating network \"my_wordpress_default\" with the default driver\nPulling db (mysql:5.7)...\n5.7: Pulling from library/mysql\nefd26ecc9548: Pull complete\na3ed95caeb02: Pull complete\n<...>\nDigest: sha256:34a0aca88e85f2efa5edff1cea77cf5d3147ad93545dbec99cfe705b03c520de\nStatus: Downloaded newer image for mysql:5.7\nPulling wordpress (wordpress:latest)...\nlatest: Pulling from library/wordpress\nefd26ecc9548: Already exists\na3ed95caeb02: Pull complete\n589a9d9a7c64: Pull complete\n<...>\nDigest: sha256:ed28506ae44d5def89075fd5c01456610cd6c64006addfe5210b8c675881aff6\nStatus: Downloaded newer image for wordpress:latest\nCreating my_wordpress_db_1\nCreating my_wordpress_wordpress_1\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Deployment\nDESCRIPTION: Commands to verify the running containers using docker ps, showing the three expected containers with their port mappings.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mongo/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\nCONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS              PORTS                  NAMES\na0f4ebe686ff        nginx                       \"/bin/bash -c 'envsu…\"   About a minute ago   Up About a minute   0.0.0.0:80->80/tcp     nginx-flask-mongo_web_1\ndba87a080821        nginx-flask-mongo_backend   \"./server.py\"            About a minute ago   Up About a minute                          nginx-flask-mongo_backend_1\nd7eea5481c77        mongo                       \"docker-entrypoint.s…\"   About a minute ago   Up About a minute   27017/tcp              nginx-flask-mongo_mongo_1\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Containers\nDESCRIPTION: Provides commands to stop the running containers and optionally remove all associated data volumes.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/postgresql-pgadmin/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\n# To delete all data run:\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Application\nDESCRIPTION: Command to stop and remove all containers created by Docker Compose for this application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mongo/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Testing Java Spark Backend API\nDESCRIPTION: Demonstrates how to test the Java Spark backend API using curl to fetch blog posts from the application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava-mysql/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:8080\n[\"Blog post #0\",\"Blog post #1\",\"Blog post #2\",\"Blog post #3\",\"Blog post #4\"]\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server. Once running, the application will be available at http://localhost:4200/ and will automatically reload when source files are changed.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/angular/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Stopping Plex Container and Cleaning Up\nDESCRIPTION: Commands for stopping the Plex container and optionally removing associated volumes. The second command will delete all data associated with the container.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/plex/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\n# To delete all data run:\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Go-Nginx-Postgres Application\nDESCRIPTION: Shows the command to stop and remove all containers, networks, and volumes associated with the application using Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-postgres/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Containers\nDESCRIPTION: Command and output for shutting down the application and removing all containers using Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mongodb/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\nStopping server   ... done\nStopping frontend ... done\nStopping mongo    ... done\nRemoving server   ... done\nRemoving frontend ... done\nRemoving mongo    ... done\n```\n\n----------------------------------------\n\nTITLE: Producing Kafka Messages in Redpanda Container\nDESCRIPTION: Commands to access the Redpanda container and produce a message to the 'order' topic using the Redpanda Kafka client (rpk). Shows the execution and successful message production.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-kafka-mysql/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose exec redpanda /bin/bash\nredpanda@1add2615774b:/$ cd /app\nredpanda@1add2615774b:/app$ cat order.json | rpk topic produce order\nProduced to partition 0 at offset 0 with timestamp 1667922788523.\n```\n\n----------------------------------------\n\nTITLE: Checking Running Containers for Wireguard VPN\nDESCRIPTION: Demonstrates how to verify that the Wireguard VPN container is running using the docker ps command.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wireguard/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker ps\nCONTAINER ID   IMAGE                           COMMAND                  CREATED          STATUS                          PORTS                                                                                  NAMES\n4992922d23dc   linuxserver/wireguard           \"/init\"                  7 seconds ago    Up 5 seconds                    0.0.0.0:51820->51820/udp, :::51820->51820/udp                                          wireguard\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Docker Compose Application\nDESCRIPTION: Command and output for shutting down the application, stopping and removing all containers and networks created by Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\nStopping react-express-mysql_frontend_1 ... done\nStopping react-express-mysql_backend_1  ... done\nStopping react-express-mysql_db_1       ... done\nRemoving react-express-mysql_frontend_1 ... done\nRemoving react-express-mysql_backend_1  ... done\nRemoving react-express-mysql_db_1       ... done\nRemoving network react-express-mysql_default\n```\n\n----------------------------------------\n\nTITLE: Stopping Minecraft Server and Removing Containers\nDESCRIPTION: Command to stop and remove the Minecraft server container while preserving data in the volume.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/minecraft/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Spark Java Container\nDESCRIPTION: This shell command stops and removes the Spark Java container and associated network using Docker Compose, cleaning up the deployed resources.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\nStopping sparkjava_sparkjava_1 ... done\nRemoving sparkjava_sparkjava_1 ... done\nRemoving network sparkjava_default\n```\n\n----------------------------------------\n\nTITLE: HTML Response from Spring Boot Application\nDESCRIPTION: The HTML response returned from the Spring Boot application when accessing the root endpoint, showing a simple greeting message.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/spring-postgres/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE HTML>\n<html>\n<head>\n  <title>Getting Started: Serving Web Content</title>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n</head>\n<body>\n\t<p>Hello from Docker!</p>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Testing the Application with cURL\nDESCRIPTION: Command to test the deployed application by sending a request to the exposed port 80, showing the expected response from the Flask application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mysql/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:80\n<div>Blog post #1</div><div>Blog post #2</div><div>Blog post #3</div><div>Blog post #4</div>\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Application\nDESCRIPTION: Command to stop and remove all containers created by Docker Compose, cleaning up the deployment.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-mysql/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Cleaning Up Docker Compose Resources\nDESCRIPTION: Command and output for stopping and removing all containers and networks created by Docker Compose for this application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/spring-postgres/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\nStopping spring-postgres_db_1      ... done\nStopping spring-postgres_backend_1 ... done\nRemoving spring-postgres_db_1      ... done\nRemoving spring-postgres_backend_1 ... done\nRemoving network spring-postgres_default\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Cleanup Command\nDESCRIPTION: Command to stop and remove all containers and networks created by Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-nodejs-redis/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Application Containers\nDESCRIPTION: Command and output for stopping and removing the Docker containers and network created by Docker Compose, cleaning up resources after use.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-nginx/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\nStopping frontend ... done\nRemoving frontend ... done\nRemoving network react-nginx_default\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing WordPress Containers\nDESCRIPTION: This bash command stops and removes the WordPress and database containers created by Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wordpress-mysql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Testing Application Access\nDESCRIPTION: Command to test the deployed application using curl to verify it's responding correctly.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-wsgi-flask/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:80\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Containers\nDESCRIPTION: Command to stop and remove all the containers created by Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mysql/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Cleanup Command\nDESCRIPTION: Command to stop and remove the Docker containers\nSOURCE: https://github.com/docker/awesome-compose/blob/master/fastapi/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Vue.js Container\nDESCRIPTION: Command and output showing how to stop and remove the Vue.js container and network using Docker Compose down.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/vuejs/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\nStopping vuejs_web_1 ... done\nRemoving vuejs_web_1 ... done\nRemoving network vuejs_default\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Java Spark and MySQL Containers\nDESCRIPTION: Commands to stop and remove the Docker containers and network created by Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/sparkjava-mysql/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\nStopping sparkjava-mysql_backend_1 ... done\nStopping sparkjava-mysql_db_1      ... done\nRemoving sparkjava-mysql_backend_1 ... done\nRemoving sparkjava-mysql_db_1      ... done\nRemoving network sparkjava-mysql_default\n```\n\n----------------------------------------\n\nTITLE: Stopping and Cleaning Up\nDESCRIPTION: Commands to stop and remove the deployed containers and network.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-wsgi-flask/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\nStopping nginx-wsgi-flask_nginx-proxy_1 ... done\nStopping nginx-wsgi-flask_flask-app_1   ... done\nRemoving nginx-wsgi-flask_nginx-proxy_1 ... done\nRemoving nginx-wsgi-flask_flask-app_1   ... done\nRemoving network nginx-wsgi-flask_default\n```\n\n----------------------------------------\n\nTITLE: API Response Example\nDESCRIPTION: Expected JSON response from the FastAPI application when accessed at localhost:8000\nSOURCE: https://github.com/docker/awesome-compose/blob/master/fastapi/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"message\": \"OK\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing ASP.NET and MS SQL Server Containers\nDESCRIPTION: This shell command demonstrates how to stop and remove the deployed containers using Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/aspnet-mssql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Pi-hole and cloudflared Containers\nDESCRIPTION: These shell commands stop and remove the Pi-hole and cloudflared containers. The second command also removes associated volumes.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/pihole-cloudflared-DoH/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\n# To delete all data run:\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Traefik-Go Containers\nDESCRIPTION: Command to stop and remove the deployed containers using Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/traefik-golang/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing PHP Application Containers\nDESCRIPTION: Command to stop and remove the Docker containers for the PHP application using Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/apache-php/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Accessing MySQL Database to Verify ETL Results\nDESCRIPTION: Commands to access the MariaDB database container, log in to the MySQL command-line client, and execute a query to view the processed order data stored by the ETL service.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-kafka-mysql/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose exec db /bin/bash\nroot@c97c472db02e:/# mysql -u root -pwhalehello mysql\nmysql> select * from orders;\n... ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Cleanup Command\nDESCRIPTION: Command to stop and remove the deployed containers\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-postgres/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Cleaning Up Docker Compose Resources\nDESCRIPTION: Command to stop and remove all containers, networks, and volumes defined in the compose file with output showing the cleanup process.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\nStopping react-java-mysql-backend-1  ... done\nStopping react-java-mysql-frontend-1 ... done\nStopping react-java-mysql-db-1       ... done\nRemoving react-java-mysql-backend-1  ... done\nRemoving react-java-mysql-frontend-1 ... done\nRemoving react-java-mysql-db-1       ... done\nRemoving network react-java-mysql-default\n```\n\n----------------------------------------\n\nTITLE: Stopping Wireguard VPN Containers\nDESCRIPTION: Shows commands to stop and optionally remove all data for the Wireguard VPN setup using Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wireguard/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\n# To delete all data run:\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Completely Removing Minecraft Server Including Data Volumes\nDESCRIPTION: Command to stop and remove the Minecraft server container along with all named volumes, which will delete all persisted game data.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/minecraft/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Deleting Orders via WasmEdge API\nDESCRIPTION: Command for deleting an order record from the database using the WasmEdge API. This GET request with an id parameter removes the matching record from the orders table.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wasmedge-mysql-nginx/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/delete_order?id=2\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Cleanup Commands\nDESCRIPTION: Commands for stopping and removing containers, with an option to remove volumes using the -v flag.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nextcloud-redis-mariadb/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Cleanup Command\nDESCRIPTION: Command to stop and remove the Docker containers.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/flask-redis/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Services\nDESCRIPTION: Console commands and output for gracefully shutting down Docker Compose services and cleaning up resources.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n\nStopping django_web_1 ... done\nStopping django_db_1 ... done\nRemoving django_web_1 ... done\nRemoving django_web_run_1 ... done\nRemoving django_db_1 ... done\nRemoving network django_default\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin for Signing Contributions in Markdown\nDESCRIPTION: This code block contains the Developer Certificate of Origin (DCO) version 1.1, which contributors must agree to when making contributions to the project. It outlines the terms under which contributions are made and the rights of the contributor.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Wireguard VPN\nDESCRIPTION: Defines the Docker Compose service for running the Wireguard VPN server using the linuxserver/wireguard image.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wireguard/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  wireguard:\n    image: linuxserver/wireguard\n```\n\n----------------------------------------\n\nTITLE: Creating a Django Project with Docker Compose\nDESCRIPTION: A console command that uses Docker Compose to create a new Django project. It runs the django-admin startproject command inside the web container to set up the initial project structure.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsudo docker compose run web django-admin startproject composeexample .\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Django Containers\nDESCRIPTION: Command to stop and remove the Docker containers created by Docker Compose for the Django application.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/django/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Containers\nDESCRIPTION: Command to stop and remove all containers defined in the Docker Compose file.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-aspnet-mysql/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Access for Web Crawlers in robots.txt\nDESCRIPTION: This snippet defines the default behavior for web crawlers accessing the website. It allows all user agents unrestricted access to all pages and resources.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/frontend/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Creating a WordPress Project Directory in Terminal\nDESCRIPTION: Changes into a project directory named 'my_wordpress' where Docker Compose configuration will be stored.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/wordpress/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd my_wordpress/\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Cleanup Commands\nDESCRIPTION: Commands to stop and remove containers, with an optional flag to remove volumes.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/gitea-postgres/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Changing File Ownership for Django Project Files\nDESCRIPTION: A console command for Linux users to fix permissions on the Django project files created by the container. This changes ownership from root to the current user for the project files.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsudo chown -R $USER:$USER composeexample manage.py\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server\nDESCRIPTION: Starts the development server and runs the app in development mode. Opens the app at http://localhost:3000 with hot reload enabled.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/frontend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access the entire website without restrictions. It specifies a wildcard User-agent and has an empty Disallow directive.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-nginx/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview\nDESCRIPTION: Shows the file structure of the Plex Docker Compose project, including the essential configuration files needed for deployment.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/plex/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .env\n├── compose.yaml\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Portainer\nDESCRIPTION: Commands to stop the Portainer container and optionally remove all associated data volumes.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/portainer/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose down\n# To delete all data run:\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Testing the Application with cURL\nDESCRIPTION: Command to test the application by making an HTTP request to the exposed endpoint on localhost:80, which returns a JSON array of blog posts.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-aspnet-mysql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:80\n[\"Blog post #0\",\"Blog post #1\",\"Blog post #2\",\"Blog post #3\",\"Blog post #4\"]\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Launches the test runner in interactive watch mode for running application tests.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/frontend/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing ELK Stack Containers\nDESCRIPTION: Command to stop and remove the ELK stack containers using Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/elasticsearch-logstash-kibana/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Testing the Application with cURL\nDESCRIPTION: Command to test the deployed application by making an HTTP request to the exposed port, showing the expected Docker Whale ASCII art response from the Go backend through the NGINX proxy.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:80\n\n          ##         .\n    ## ## ##        ==\n ## ## ## ## ##    ===\n/\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\\___/ ===\n{                       /  ===-\n\\______ O           __/\n \\    \\         __/\n  \\____\\_______/\n\n\t\nHello from Docker!\n```\n\n----------------------------------------\n\nTITLE: Running Vue.js Development Server\nDESCRIPTION: Starts the development server with hot-reload functionality for real-time development and testing.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/vuejs/vuejs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Example of Signing a Git Commit in Markdown\nDESCRIPTION: This code snippet demonstrates how to sign off on a git commit by adding a 'Signed-off-by' line to the commit message. It includes an example of the format to use, specifying the contributor's real name and email address.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Installing Kernel Headers for Wireguard on Raspberry Pi\nDESCRIPTION: Provides commands to install necessary kernel headers on Raspberry Pi or other Debian-based systems for Wireguard compatibility.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/wireguard/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt upgrade && sudo apt install raspberrypi-kernel-headers\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt upgrade && sudo apt install linux-headers-$(uname -r)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Cleanup Command\nDESCRIPTION: Command to stop and remove the Angular container and associated resources.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Application\nDESCRIPTION: Command to stop and remove the containers and network created by Docker Compose.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Django ALLOWED_HOSTS Configuration\nDESCRIPTION: Optional Django settings modification for allowing all hosts to access the application. This configuration is not recommended for production use.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/official-documentation-samples/django/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = ['*']\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Command to run end-to-end tests through a platform of your choice. Requires a package that implements end-to-end testing capabilities.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/angular/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Running React Tests\nDESCRIPTION: Launches the test runner in interactive watch mode for running application tests\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/frontend/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests via Karma test runner.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/angular/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies directly into the project. This is a one-way operation that gives full control over the build tools and configuration.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-rust-postgres/frontend/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Angular CLI\nDESCRIPTION: Command to display help information about Angular CLI directly in the terminal.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/angular/angular/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Database Container Instance Name\nDESCRIPTION: A simple text string representing what appears to be a database container or instance name using Docker's naming convention.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/db/password.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndb-btf5q\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Runs the React application in development mode with hot reloading at http://localhost:3000\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/frontend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Robot Access Rules\nDESCRIPTION: Simple robots.txt configuration that allows unrestricted access to all user agents by using a wildcard (*) and not specifying any disallow rules.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mongodb/frontend/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Specifying Django and environs versions for Python project\nDESCRIPTION: This code snippet defines the required versions of Django and environs packages for a Python project. Django 3.2.13 is specified, which is an LTS (Long Term Support) version. The environs package, used for handling environment variables, is set to version 7.3.1.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/django/app/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nDjango==3.2.13\nenvirons==7.3.1\n```\n\n----------------------------------------\n\nTITLE: Deploying the Docker Compose Application\nDESCRIPTION: Command to deploy the application using Docker Compose with output showing the build and container creation process. The command builds and starts all three services in detached mode.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\nCreating network \"react-java-mysql-default\" with the default driver\nBuilding backend\nStep 1/17 : FROM maven:3.6.3-jdk-11 AS builder\n...\nSuccessfully tagged react-java-mysql_frontend:latest\nWARNING: Image for service frontend was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating react-java-mysql-frontend-1 ... done\nCreating react-java-mysql-db-1       ... done\nCreating react-java-mysql-backend-1  ... done\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database with Docker Compose\nDESCRIPTION: Sets up a MySQL 8 database service with environment variables for root password and custom database name. Includes volume mounting for data persistence at /var/lib/mysql.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-golang-mysql/db/password.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    # We use a mariadb image which supports both amd64 & arm64 architecture\n    image: mariadb:10.6.4-focal\n    # If you really want to use MySQL, uncomment the following line\n    #image: mysql:8.0.27\n    command: '--default-authentication-plugin=mysql_native_password'\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      - MYSQL_ROOT_PASSWORD=somewordpress\n      - MYSQL_DATABASE=wordpress\n      - MYSQL_USER=wordpress\n      - MYSQL_PASSWORD=wordpress\n    expose:\n      - 3306\n      - 33060\nvolumes:\n  db_data:\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Removes the single build dependency and copies all configuration files directly into the project. This one-way operation gives full control over the build tooling but cannot be reversed.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/frontend/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Ejecting Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies directly into the project for full control\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/frontend/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Service Configuration\nDESCRIPTION: Docker Compose YAML configuration defining four services: Redis database, two Node.js web services, and Nginx proxy with port mappings and dependencies.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-nodejs-redis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n    image: 'redislabs/redismod'\n    ports:\n      - '6379:6379'\n  web1:\n    restart: on-failure\n    build: ./web\n    hostname: web1\n    ports:\n      - '81:5000'\n  web2:\n    restart: on-failure\n    build: ./web\n    hostname: web2\n    ports:\n      - '82:5000'\n  nginx:\n    build: ./nginx\n    ports:\n    - '80:80'\n    depends_on:\n    - web1\n    - web2\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Database Password in Docker Environment File\nDESCRIPTION: Defines the database password for a PostgreSQL instance in a Docker environment file.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/nginx-flask-mysql/db/password.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndb-78n9n\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: A minimal robots.txt configuration that allows all user agents complete access to the website. Uses the standard robots.txt syntax to specify no crawling restrictions.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-express-mysql/frontend/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt with No Access Restrictions\nDESCRIPTION: A minimal robots.txt configuration that allows all web crawlers complete access to the website. It references the official robotstxt.org documentation and explicitly declares no path restrictions using the 'Disallow:' directive with no value.\nSOURCE: https://github.com/docker/awesome-compose/blob/master/react-java-mysql/frontend/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```"
  }
]