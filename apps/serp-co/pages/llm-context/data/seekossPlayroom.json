[
  {
    "owner": "seek-oss",
    "repo": "playroom",
    "content": "TITLE: Playroom Configuration\nDESCRIPTION: This JavaScript file configures Playroom with paths to components, themes, snippets, and other options.  It specifies the output path, title, scope, widths, port, and other settings for the Playroom instance. Webpack configuration and iframe sandbox settings can also be specified.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  components: './src/components',\n  outputPath: './dist/playroom',\n\n  // Optional:\n  title: 'My Awesome Library',\n  themes: './src/themes',\n  snippets: './playroom/snippets.js',\n  frameComponent: './playroom/FrameComponent.js',\n  scope: './playroom/useScope.js',\n  widths: [320, 768, 1024],\n  port: 9000,\n  openBrowser: true,\n  paramType: 'search', // default is 'hash'\n  exampleCode: `\n    <Button>\n      Hello World!\n    </Button>\n  `,\n  baseUrl: '/playroom/',\n  webpackConfig: () => ({\n    // Custom webpack config goes here...\n  }),\n  iframeSandbox: 'allow-scripts',\n  defaultVisibleWidths: [\n    // subset of widths to display on first load\n  ],\n  defaultVisibleThemes: [\n    // subset of themes to display on first load\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Components\nDESCRIPTION: This JavaScript file demonstrates how to export components for use in Playroom. It uses named exports and re-exports from other modules to make components available within the Playroom environment.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default as Text } from '../Text'; // Re-exporting a default export\nexport { Button } from '../Button'; // Re-exporting a named export\n// etc...\n```\n\n----------------------------------------\n\nTITLE: Custom Frame Component\nDESCRIPTION: This React component provides a custom frame for rendering components within Playroom.  It allows wrapping components with providers, such as a ThemeProvider, to configure the environment. It receives a theme and children as props.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { ThemeProvider } from '../path/to/your/theming-system';\n\nexport default function FrameComponent({ theme, children }) {\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snippets\nDESCRIPTION: This JavaScript file defines code snippets that can be quickly inserted into the Playroom editor. Each snippet includes a group, name, and code to be inserted.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default [\n  {\n    group: 'Button',\n    name: 'Strong',\n    code: `\n      <Button weight=\"strong\">\n        Button\n      </Button>\n    `,\n  },\n  // etc...\n];\n```\n\n----------------------------------------\n\nTITLE: Theme Support\nDESCRIPTION: This JavaScript file exports themes for use in Playroom, allowing simultaneous rendering of every theme via the `themes` configuration option. The file exports either a single object or a series of named exports.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport { themeA } from './themeA';\nexport { themeB } from './themeB';\n// etc...\n```\n\n----------------------------------------\n\nTITLE: Custom Scope Hook\nDESCRIPTION: This JavaScript file defines a custom hook that provides extra variables to the scope of JSX within Playroom.  It imports and uses a `useTheme` hook and returns an object containing the theme.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// scope.js\n\nimport { useTheme } from '../path/to/your/theming-system';\n\nexport default function useScope() {\n  return {\n    theme: useTheme(),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Webpack Module Rules in Playroom\nDESCRIPTION: This code snippet demonstrates how to override Webpack module rules in Playroom's configuration. It allows consumers to customize loaders, such as those for CSS files, to align with their project's Webpack setup. This is especially useful for complex Webpack configurations that might clash with Playroom's default settings.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// playroom.config.js\nmodule.exports = {\n  webpackConfig: () => ({\n    module: {\n      rules: [\n        // use your own CSS loaders\n        { test: /\\.css$/, use: ['style-loader', 'css-loader'] },\n      ],\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript File Inclusion in Playroom (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure which TypeScript files are included for static prop type parsing in Playroom using the `typeScriptFiles` property in `playroom.config.js`. It accepts an array of globs to specify the files to include.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  typeScriptFiles: ['src/components/**/*.{ts,tsx}', '!**/node_modules'],\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing React Docgen TypeScript Configuration (JavaScript)\nDESCRIPTION: This code snippet shows how to customize the parser options for `react-docgen-typescript` using the `reactDocgenTypescriptConfig` property in `playroom.config.js`. This allows for fine-grained control over how prop types are parsed.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ...\n  reactDocgenTypescriptConfig: {\n    propFilter: (prop, component) => {\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Embedded CSS Formatting\nDESCRIPTION: This JSX snippet demonstrates how to format CSS within `<style jsx>` tags.  CSS authored inside these tags will be formatted as CSS, leveraging Prettier's embedded language formatting capabilities.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<style jsx>\n  {`\n    .foo {\n      color: red;\n    }\n  `}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Adding Playroom Scripts\nDESCRIPTION: These scripts are added to the `package.json` file to provide commands for starting and building Playroom.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"playroom:start\": \"playroom start\",\n    \"playroom:build\": \"playroom build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Playroom\nDESCRIPTION: This command starts the Playroom development server using the script defined in `package.json`.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run playroom:start\n```\n\n----------------------------------------\n\nTITLE: Building Playroom\nDESCRIPTION: This command builds the Playroom assets for production using the script defined in `package.json`.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run playroom:build\n```\n\n----------------------------------------\n\nTITLE: Installing Playroom\nDESCRIPTION: This command installs Playroom as a development dependency using npm.\nSOURCE: https://github.com/seek-oss/playroom/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev playroom\n```"
  }
]