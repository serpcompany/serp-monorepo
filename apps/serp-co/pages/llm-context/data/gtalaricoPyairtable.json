[
  {
    "owner": "gtalarico",
    "repo": "pyairtable",
    "content": "TITLE: Using pyAirtable to interact with Airtable API\nDESCRIPTION: This Python code demonstrates how to use pyAirtable to connect to Airtable, retrieve data from a table, create a new record, update an existing record, and delete a record. It uses environment variables for API key storage.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/getting-started.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> from pyairtable import Api\n>>> api = Api(os.environ['AIRTABLE_API_KEY'])\n>>> table = api.table('appExampleBaseId', 'tblExampleTableId')\n>>> table.all()\n[\n    {\n        \"id\": \"rec5eR7IzKSAOBHCz\",\n        \"createdTime\": \"2017-03-14T22:04:31.000Z\",\n        \"fields\": {\n            \"Name\": \"Alice\",\n            \"Email\": \"alice@example.com\"\n        }\n    }\n]\n>>> table.create({\"Name\": \"Bob\"})\n{\n    \"id\": \"recwAcQdqwe21asdf\",\n    \"createdTime\": \"...\",\n    \"fields\": {\"Name\": \"Bob\"}\n}\n>>> table.update(\"recwAcQdqwe21asdf\", {\"Name\": \"Robert\"})\n{\n    \"id\": \"recwAcQdqwe21asdf\",\n    \"createdTime\": \"...\",\n    \"fields\": {\"Name\": \"Robert\"}\n}\n>>> table.delete(\"recwAcQdqwe21asdf\")\n{'id': 'recwAcQdqwe21asdf', 'deleted': True}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Classes for Airtable Tables in Python\nDESCRIPTION: This snippet demonstrates how to create a Model class that maps to an Airtable table. It includes field definitions for various data types and the Meta class for configuration settings like base_id, table_name, and API key.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.orm import Model, fields as F\n\nclass Contact(Model):\n    first_name = F.TextField(\"First Name\")\n    last_name = F.TextField(\"Last Name\")\n    email = F.EmailField(\"Email\")\n    is_registered = F.CheckboxField(\"Registered\")\n    company = F.SingleLinkField(\"Company\", Company, lazy=False)\n\n    class Meta:\n        base_id = \"appaPqizdsNHDvlEm\"\n        table_name = \"Contact\"\n        api_key = \"keyapikey\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving Model Instances in pyairtable ORM\nDESCRIPTION: This snippet shows how to create a new Contact instance, check its existence, save it to Airtable, and verify the saved state. It demonstrates the lifecycle of creating and persisting a new record.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontact = Contact(\n    first_name=\"Mike\",\n    last_name=\"McDonalds\",\n    email=\"mike@mcd.com\",\n    is_registered=False\n)\nassert contact.id is None\ncontact.exists()\nFalse\nassert contact.save()\ncontact.exists()\nTrue\ncontact.id\n'recS6qSLw0OCA6Xul'\n```\n\n----------------------------------------\n\nTITLE: Using Field Expressions for Formulas in pyairtable ORM\nDESCRIPTION: This snippet demonstrates how to use field expressions to build formula queries for filtering records. It shows how to use comparison operators and combine conditions using logical operators.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nformula = Contact.last_name.eq(\"Smith\") & Contact.is_registered\nstr(formula)\n\"AND({Last Name}='Smith', {Registered})\"\nresults = Contact.all(formula=formula)\n[...]\n```\n\n----------------------------------------\n\nTITLE: Fetching All Records with Sorting in pyAirtable\nDESCRIPTION: Demonstrates how to fetch all records from an Airtable table with sorting options. The all() method returns a single list with all records, using iterate() under the hood.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> table.all(sort=[\"Name\", \"-Age\"])\n[{'id': 'rec123asa23', 'fields': {'Last Name': 'Alfred', 'Age': 84}, ...}, ...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Flask Webhook Handler for Airtable Notifications\nDESCRIPTION: A Flask application example showing how to handle Airtable webhook notifications, validate them, and process payloads. The code demonstrates webhook notification validation, cursor management for payload tracking, and proper response handling.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/webhooks.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request\nfrom pyairtable import Api\nfrom pyairtable.models import WebhookNotification\n\napp = Flask(__name__)\n\n@app.route(\"/airtable-webhook\", methods=[\"POST\"])\ndef airtable_webhook():\n    body = request.data\n    header = request.headers[\"X-Airtable-Content-MAC\"]\n    secret = app.config[\"AIRTABLE_WEBHOOK_SECRET\"]\n    event = WebhookNotification.from_request(body, header, secret)\n    airtable = Api(app.config[\"AIRTABLE_API_KEY\"])\n    webhook = airtable.base(event.base.id).webhook(event.webhook.id)\n    cursor = int(your_database.get(event.webhook, 0)) + 1\n\n    for payload in webhook.payloads(cursor=cursor):\n        process_payload(payload)  # probably enqueue a background job\n        your_database.set(event.webhook, payload.cursor + 1)\n\n    return (\"\", 204)  # intentionally empty response\n```\n\n----------------------------------------\n\nTITLE: Modifying Table and Field Schema in pyAirtable\nDESCRIPTION: Demonstrates how to retrieve table schema, rename tables, and modify field properties using pyAirtable's schema objects. Changes are applied by calling the save() method on modified schema elements.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/metadata.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> schema = table.schema()\n>>> schema.name = \"Renamed\"\n>>> schema.save()\n>>> field = schema.field(\"Name\")\n>>> field.name = \"Label\"\n>>> field.description = \"The primary field on the table\"\n>>> field.save()\n```\n\n----------------------------------------\n\nTITLE: Batch Operations with pyairtable ORM Models\nDESCRIPTION: This snippet shows how to perform batch operations on multiple records using batch_save() and batch_delete() class methods. This is more efficient than saving or deleting records individually.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncontacts = Contact.all()\ncontacts.append(Contact(first_name=\"Alice\", email=\"alice@example.com\"))\nContact.batch_save(contacts)\nContact.batch_delete(contacts)\n```\n\n----------------------------------------\n\nTITLE: Setting up PyAirtable Development Environment using Make Commands\nDESCRIPTION: Commands to set up the development environment for PyAirtable, run tests, and build documentation. These steps should be completed before submitting bug reports or pull requests to ensure proper local configuration.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% make setup\n% make test\n% make docs\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Conditions with Logical Operators in pyAirtable\nDESCRIPTION: Shows how to chain formulas and conditions together using AND to create complex criteria. This example combines a customer name match with a date comparison.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/formulas.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom pyairtable.formulas import AND, GTE, Field, match\nformula = AND(\n    match(\"Customer\", 'Alice'),\n    GTE(Field(\"Delivery Date\"), date.today())\n)\nformula\nstr(formula)\n```\n\n----------------------------------------\n\nTITLE: Batch Upserting Records in pyAirtable\nDESCRIPTION: Shows how to perform batch upsert operations (create or update) using the batch_upsert() method. This method requires a list of records and a list of key_fields to determine record identity.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> table.batch_upsert(\n...     [{\"id\": \"recwPQIfs4wKPyc9D\", \"fields\": {\"Name\": \"Matt\"}}, ...],\n...     key_fields=[\"Name\"]\n... )\n[{'id': 'recwPQIfs4wKPyc9D', 'fields': {'Name': 'Matt', ...}}, ...]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Records with pyAirtable\nDESCRIPTION: Shows how to iterate over records in an Airtable table using the iterate() method. This allows processing records in batches of a specified size, up to a maximum number of records.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> for records in table.iterate(page_size=100, max_records=1000):\n...     print(records)\n...\n[{'id': 'rec123asa23', 'fields': {'Last Name': 'Alfred', 'Age': 84}, ...}, ...]\n[{'id': 'rec123asa23', 'fields': {'Last Name': 'Jameson', 'Age': 42}, ...}, ...]\n```\n\n----------------------------------------\n\nTITLE: Batch Creating Multiple Records in pyAirtable\nDESCRIPTION: Demonstrates how to create multiple records at once using the batch_create() method. This method accepts a list of field dictionaries and returns a list of created records.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> table.batch_create([{'Name': 'John'}, ...])\n[{'id': 'rec123asa23', 'fields': {'Name': 'John'}}, ...]\n```\n\n----------------------------------------\n\nTITLE: Refreshing Model Data from Airtable API\nDESCRIPTION: This snippet shows how to use the fetch() method to refresh a model instance with the latest data from the Airtable API, discarding any local unsaved changes.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncontact.is_registered = False\ncontact.fetch()\ncontact.is_registered\nTrue\n```\n\n----------------------------------------\n\nTITLE: Updating Model Instances in pyairtable ORM\nDESCRIPTION: This snippet demonstrates how to retrieve an existing record by ID, modify an attribute, and save the changes back to Airtable. It shows the pattern for updating records through the ORM.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncontact = Contact.from_id(\"recS6qSLw0OCA6Xul\")\nassert contact.is_registered is False\ncontact.is_registered = True\ncontact.save()\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Fields Validation in pyAirtable\nDESCRIPTION: Shows how to enforce required field validation using pyAirtable's Required field types to prevent null or empty values.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.orm import Model, fields as F\n\nclass MyTable(Model):\n    class Meta:\n        ...\n\n    name = F.RequiredTextField(\"Name\")\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Record in pyAirtable\nDESCRIPTION: Shows how to update a specific record by ID using the update() method. The method requires a record ID and a dictionary of fields to update.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> table.update('recwPQIfs4wKPyc9D', {\"Age\": 21})\n[{'id': 'recwPQIfs4wKPyc9D', 'fields': {\"Name\": \"John\", \"Age\": 21}}, ...]\n```\n\n----------------------------------------\n\nTITLE: Installing and Using PyAirtable CLI\nDESCRIPTION: Shows how to install PyAirtable with CLI support, set up authentication using environment variables, and perform basic operations like checking user identity and retrieving records from a table.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% pip install 'pyairtable[cli]'\n% read -s AIRTABLE_API_KEY\n...\n% export AIRTABLE_API_KEY\n% pyairtable whoami\n{\"id\": \"usrXXXXXXXXXXXX\", \"email\": \"you@example.com\"}\n% pyairtable base YOUR_BASE_ID table YOUR_TABLE_NAME records\n[{\"id\": \"recXXXXXXXXXXXX\", \"fields\": {...}}, ...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Memoization in Model Meta\nDESCRIPTION: Shows how to set default memoization behavior for a model class using the Meta configuration, and how to override this behavior for specific method calls.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Book(Model):\n    Meta = {..., \"memoize\": True}\n    title = F.TextField(\"Title\")\n\nclass Author(Model):\n    Meta = {...}\n    name = F.TextField(\"Name\")\n    books = F.LinkField(\"Books\", Book)\n\nBook.first()  # this will memoize the book it creates\nAuthor.first().books  # this will memoize all books created\nBook.all(memoize=False)  # this will skip memoization\n```\n\n----------------------------------------\n\nTITLE: Using Formulas for Filtering in pyAirtable\nDESCRIPTION: Demonstrates how to filter records using Airtable formulas. Shows both string-based formulas and using the match() function to simplify complex filtering.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from pyairtable.formulas import match\n>>> table.first(formula=match({\"First Name\": \"John\", \"Age\": 21}))\n{\"id\": \"recUwKa6lbNSMsetH\", \"fields\": {\"First Name\": \"John\", \"Age\": 21}}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Match Formulas in Python with pyAirtable\nDESCRIPTION: Demonstrates how to use the match function to find records with fields matching a computed value. This function returns a formula object that can be passed to table methods like Table.all().\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/formulas.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.formulas import match\n```\n\n----------------------------------------\n\nTITLE: Using is_airtable_error Function for Graceful Error Handling in Pyairtable\nDESCRIPTION: This snippet mentions the is_airtable_error function from the pyairtable.api.types module, which can be used for gracefully handling Airtable API errors when necessary, instead of allowing the code to fail immediately.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.api.types import is_airtable_error\n```\n\n----------------------------------------\n\nTITLE: Setting Up Linked Record Relationships in pyAirtable\nDESCRIPTION: Demonstrates how to create relationships between tables using LinkField and SingleLinkField for bidirectional record linking.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.orm import Model, fields as F\n\nclass Person(Model):\n    class Meta: ...\n\n    name = F.TextField(\"Name\")\n    company = F.SingleLinkField(\"Company\", \"Company\")\n\nclass Company(Model):\n    class Meta: ...\n\n    name = F.TextField(\"Name\")\n    people = F.LinkField(\"People\", Person)\n```\n\n----------------------------------------\n\nTITLE: Managing Base and Interface Collaborators in PyAirtable\nDESCRIPTION: Examples of adding and managing collaborators at base and interface levels with different permission levels\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/enterprise.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbase.collaborators().add_user(\"usrUserId\", \"read\")\nbase.collaborators().add_group(\"ugpGroupId\", \"edit\")\nbase.collaborators().add(\"user\", \"usrUserId\", \"comment\")\n\nbase.collaborators().interfaces[pbd].add_user(\"usrUserId\", \"read\")\nbase.collaborators().interfaces[pbd].add_group(\"ugpGroupId\", \"read\")\nbase.collaborators().interfaces[pbd].add(\"user\", \"usrUserId\", \"read\")\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Multiple Records in pyAirtable\nDESCRIPTION: Demonstrates how to update multiple records at once using the batch_update() method. This method accepts a list of record dictionaries containing 'id' and 'fields' keys.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> table.batch_update([{\"id\": \"recwPQIfs4wKPyc9D\", \"fields\": {\"Name\": \"Matt\"}}, ...])\n[{'id': 'recwPQIfs4wKPyc9D', 'fields': {\"Name\": \"Matt\", ...}}, ...]\n```\n\n----------------------------------------\n\nTITLE: ORM Limitation: Handling Unsaved Linked Records\nDESCRIPTION: Illustrates the limitation that linked records must be saved before they can be referenced in another record. This prevents saving a record that references an unsaved model.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> alice = Person.from_id(\"recWcnG8712AqNuHw\")\n>>> alice.manager = [Person()]\n>>> alice.save()\nTraceback (most recent call last):\n  ...\nValueError: Person.manager contains an unsaved record\n```\n\n----------------------------------------\n\nTITLE: Using Link Fields in PyAirtable ORM\nDESCRIPTION: Shows how to access linked records through the ORM. This example demonstrates how to navigate relationships between models including self-referencing relationships.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> person = Person.from_id(\"recZ6qSLw0OCA61ul\")\n>>> person.manager\n<Person id='recSLw0OCA61ulZ6q'>\n>>> person.manager.reports\n[<Person id='recZ6qSLw0OCA61ul'>, ...]\n>>> person.company.employees\n[<Person id='recZ6qSLw0OCA61ul'>, <Person id='recSLw0OCA61ulZ6q'>, ...]\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Record in pyAirtable\nDESCRIPTION: Shows how to create a single record in an Airtable table using the create() method. The method accepts a dictionary of field values and returns the created record.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> table.create({'Name': 'John'})\n{'id': 'rec123asa23', 'fields': {'Name': 'John', ...}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Records from a Table\nDESCRIPTION: Shows how to retrieve records from a specific table with options to filter, sort, limit results, and select specific fields.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable base BASE_ID table ID_OR_NAME records [OPTIONS]\n\n  Retrieve records from the table.\n\nOptions:\n  -f, --formula TEXT   Filter records with a formula.\n  -v, --view TEXT      Filter records by a view.\n  -n, --limit INTEGER  Limit the number of records returned.\n  -S, --sort TEXT      Sort records by field(s).\n  -F, --field TEXT     Limit output to certain field(s).\n  --help               Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Working with Comments on Records in pyAirtable\nDESCRIPTION: Shows how to add, retrieve, modify, and delete comments on Airtable records. The example demonstrates the complete workflow using Comment objects.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> table = Api.table(\"appNxslc6jG0XedVM\", \"tblslc6jG0XedVMNx\")\n>>> comment = table.add_comment(\"recMNxslc6jG0XedV\", \"Hello, @[usrVMNxslc6jG0Xed]!\")\n>>> table.comments(\"recMNxslc6jG0XedV\")\n[\n    Comment(\n        id='comdVMNxslc6jG0Xe',\n        text='Hello, @[usrVMNxslc6jG0Xed]!',\n        created_time=datetime.datetime(...),\n        last_updated_time=None,\n        mentioned={\n            'usrVMNxslc6jG0Xed': Mentioned(\n                display_name='Alice',\n                email='alice@example.com',\n                id='usrVMNxslc6jG0Xed',\n                type='user'\n            )\n        },\n        author=Collaborator(\n            id='usr0000pyairtable',\n            email='pyairtable@example.com',\n            name='Your pyairtable access token'\n        )\n    )\n]\n>>> comment.text = \"Never mind!\"\n>>> comment.save()\n>>> table.comments(\"recMNxslc6jG0XedV\")[0].text\n'Never mind!'\n>>> comment.delete()\n```\n\n----------------------------------------\n\nTITLE: Using Python Operators with Formula Objects in pyAirtable\nDESCRIPTION: Shows how to use Python's logical operators (&, |, ~, ^) to combine and modify formula objects. This creates equivalent AND, OR, NOT, and XOR operations in Airtable formulas.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/formulas.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.formulas import match\nmatch({\"Customer\": \"Bob\"}) & ~match({\"Product\": \"TEST\"})\n```\n\n----------------------------------------\n\nTITLE: Generating ORM Module for Base\nDESCRIPTION: Shows how to generate a Python ORM module for a base, with the option to specify particular tables.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable base BASE_ID orm [OPTIONS]\n\n  Generate a Python ORM module.\n\nOptions:\n  -t, --table NAME_OR_ID  Only generate specific table(s).\n  --help                  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Annotations in pyAirtable ORM Models\nDESCRIPTION: Shows how to use type annotations with basic field types in pyAirtable ORM model definitions. Demonstrates type inference for TextField, IntegerField and LastModifiedByField.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.orm import Model, fields as F\n\nclass Person(Model):\n    class Meta: ...\n\n    name = F.TextField(\"Name\")\n    account_id = F.IntegerField(\"Account ID\")\n    edited_by = F.LastModifiedByField(\"Last Modified By\")\n\nrecord = Person()\nreveal_type(record.name)  # Revealed type is 'builtins.str*'\nreveal_type(record.account_id)  # Revealed type is 'builtins.int*'\nreveal_type(record.edited_by)  # Revealed type is 'pyairtable.api.types.CollaboratorDict'\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with pyairtable ORM\nDESCRIPTION: This snippet demonstrates how to delete a record from Airtable using the delete() method on a model instance. The method returns True on successful deletion.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncontact.delete()\nTrue\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Enterprise Users\nDESCRIPTION: Shows how to retrieve information for multiple users in an enterprise account with options to include collaborations or get all users.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable enterprise ENTERPRISE_ID users [OPTIONS] ID_OR_EMAIL...\n\n  Print many users, keyed by user ID.\n\nOptions:\n  -c, --collaborations  Include collaborations.\n  -a, --all             Retrieve all users.\n  --help                Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Working with Attachments in PyAirtable ORM\nDESCRIPTION: Shows how to retrieve and modify attachments on a model. Attachments are returned as dictionaries and can be modified by appending new entries to the list.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> model = YourModel.from_id(\"recMNxslc6jG0XedV\")\n>>> model.attachments\n[\n    {\n      'id': 'attMNxslc6jG0XedV',\n      'url': 'https://dl.airtable.com/...',\n      'filename': 'example.jpg',\n      'size': 12345,\n      'type': 'image/jpeg'\n    },\n    ...\n]\n>>> model.attachments.append({\"url\": \"https://example.com/example.jpg\"})\n>>> model.save()\n```\n\n----------------------------------------\n\nTITLE: Calling Airtable Formula Functions in pyAirtable\nDESCRIPTION: Demonstrates how to use pyAirtable's function placeholders to call Airtable formula functions like DATETIME_DIFF and TODAY. The library converts these to the appropriate formula syntax.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/formulas.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.formulas import Field, GTE, DATETIME_DIFF, TODAY\nformula = GTE(DATETIME_DIFF(TODAY(), Field(\"Purchase Date\"), \"days\"), 7)\nstr(formula)\n```\n\n----------------------------------------\n\nTITLE: Updating Collaborator Permissions in PyAirtable\nDESCRIPTION: Examples of updating permissions for existing collaborators across base, interface, and workspace levels\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/enterprise.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbase.collaborators().update(\"usrUserId\", \"edit\")\nbase.collaborators().update(\"ugpGroupId\", \"edit\")\n\nbase.collaborators().interfaces[pbd].update(\"usrUserId\", \"edit\")\nbase.collaborators().interfaces[pbd].update(\"ugpGroupId\", \"edit\")\n\nworkspace.collaborators().update(\"usrUserId\", \"edit\")\nworkspace.collaborators().update(\"ugpGroupId\", \"edit\")\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Multiple Records in pyAirtable\nDESCRIPTION: Demonstrates how to delete multiple records at once using the batch_delete() method. This method accepts a list of record IDs and returns a list of confirmation dictionaries.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> table.batch_delete(['recwPQIfs4wKPyc9D', 'recwAcQdqwe21asdf'])\n[{'deleted': True, 'id': 'recwPQIfs4wKPyc9D'},\n {'deleted': True, 'id': 'recwAcQdqwe21asdf'}]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Schema\nDESCRIPTION: Shows how to retrieve the schema for a specific table in an Airtable base.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable base BASE_ID table ID_OR_NAME schema [OPTIONS]\n\n  Print the table's schema as JSON.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Record in pyAirtable\nDESCRIPTION: Shows how to delete a specific record by ID using the delete() method. The method returns a confirmation dictionary with 'deleted' status.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> table.delete('recwPQIfs4wKPyc9D')\n{'deleted': True, 'id': 'recwPQIfs4wKPyc9D'}\n```\n\n----------------------------------------\n\nTITLE: Managing Invite Links and Shares in PyAirtable\nDESCRIPTION: Examples of managing invite links and shares across different levels of the application\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/enterprise.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbase.collaborators().invite_links.via_base[0].delete()\nworkspace.collaborators().invite_links.via_base[0].delete()\n\nbase.collaborators().interfaces[pbd].invite_links[0].delete()\n\nshare = base.shares()[0]\nshare.disable()\nshare.enable()\nshare.delete()\n```\n\n----------------------------------------\n\nTITLE: Handling Airtable API Errors in Python with Pyairtable\nDESCRIPTION: This snippet demonstrates how Airtable API errors are represented in Pyairtable. It shows that error responses are returned as dictionaries with an 'error' key, which can cause unexpected behavior in type-specific operations.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nperson.has_manager\n```\n\nLANGUAGE: python\nCODE:\n```\n{'error': '#ERROR!'}\n```\n\n----------------------------------------\n\nTITLE: Managing Comments on Records in PyAirtable ORM\nDESCRIPTION: Demonstrates how to add, retrieve, update, and delete comments on a model record using the ORM. Comments can include user mentions and can be modified after creation.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> record = YourModel.from_id(\"recMNxslc6jG0XedV\")\n>>> comment = record.add_comment(\"Hello, @[usrVMNxslc6jG0Xed]!\")\n>>> record.comments()\n[\n    Comment(\n        id='comdVMNxslc6jG0Xe',\n        text='Hello, @[usrVMNxslc6jG0Xed]!',\n        created_time=datetime.datetime(...),\n        last_updated_time=None,\n        mentioned={\n            'usrVMNxslc6jG0Xed': Mentioned(\n                display_name='Alice',\n                email='alice@example.com',\n                id='usrVMNxslc6jG0Xed',\n                type='user'\n            )\n        },\n        author=Collaborator(\n            id='usr0000pyairtable',\n            email='pyairtable@example.com',\n            name='Your pyairtable access token'\n        )\n    )\n]\n>>> comment.text = \"Never mind!\"\n>>> comment.save()\n>>> record.comments()[0].text\n'Never mind!'\n>>> comment.delete()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enterprise Information\nDESCRIPTION: Shows how to retrieve information about a specific Airtable enterprise account.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable enterprise ENTERPRISE_ID info [OPTIONS]\n\n  Print information about an enterprise.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Fields in PyAirtable ORM Models\nDESCRIPTION: Demonstrates three different ways to configure link fields in pyAirtable ORM models: using a direct reference to another model class, a string reference to a class name, or the LinkSelf sentinel value for self-referencing relationships.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.orm import Model, fields as F\n\nclass Company(Model):\n    class Meta: ...\n\n    name = F.TextField(\"Name\")\n    employees = F.LinkField(\"Employees\", \"path.to.Person\")  # option 1\n\nclass Person(Model):\n    class Meta: ...\n\n    name = F.TextField(\"Name\")\n    company = F.SingleLinkField[Company](\"Company\", Company)\n    manager = F.SingleLinkField[\"Person\"](\"Manager\", \"Person\")  # option 2\n    reports = F.LinkField[\"Person\"](\"Reports\", F.LinkSelf)  # option 3\n```\n\n----------------------------------------\n\nTITLE: Using Field Comparison Equivalents in pyAirtable\nDESCRIPTION: Demonstrates equivalent ways to create formula comparisons in pyAirtable. The example shows three different methods to create an equality comparison for a field.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/formulas.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nEQ(Field(\"Customer\"), \"Alice\")\nmatch({\"Customer\": \"Alice\"})\nField(\"Customer\").eq(\"Alice\")\n```\n\n----------------------------------------\n\nTITLE: PyAirtable CLI Main Command Usage\nDESCRIPTION: Shows the main usage pattern and options for the PyAirtable CLI, including authentication options, verbosity setting, and available sub-commands.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -k, --key TEXT        Your API key.\n  -kf, --key-file PATH  File containing your API key.\n  -ke, --key-env VAR    Env var containing your API key.\n  -v, --verbose         Print verbose output.\n  --help                Show this message and exit.\n\nCommands:\n  whoami                              Print the current user's information.\n  bases                               List all available bases.\n  base ID schema                      Print the base schema.\n  base ID table ID_OR_NAME records    Retrieve records from the table.\n  base ID table ID_OR_NAME schema     Print the table's schema as JSON.\n  base ID collaborators               Print base collaborators.\n  base ID shares                      Print base shares.\n  base ID orm                         Generate a Python ORM module.\n  enterprise ID info                  Print information about an enterprise.\n  enterprise ID user ID_OR_EMAIL      Print one user's information.\n  enterprise ID users ID_OR_EMAIL...  Print many users, keyed by user ID.\n  enterprise ID group ID              Print a user group's information.\n  enterprise ID groups ID...          Print many groups, keyed by group ID.\n```\n\n----------------------------------------\n\nTITLE: Defining Formula, Rollup and Lookup Fields in pyAirtable\nDESCRIPTION: Demonstrates how to declare formula, rollup, and lookup fields as read-only fields with specific types in pyAirtable ORM models.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.orm import fields as F\n\nclass MyTable(Model):\n    class Meta: ...\n\n    formula_field = F.TextField(\"My Formula\", readonly=True)\n    rollup_field = F.IntegerField(\"Row Count\", readonly=True)\n    lookup_field = F.LookupField[str](\"My Lookup\", readonly=True)\n```\n\n----------------------------------------\n\nTITLE: Using the whoami Command\nDESCRIPTION: Shows how to use the whoami command to retrieve information about the currently authenticated user.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable whoami [OPTIONS]\n\n  Print the current user's information.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Substitutions for pyairtable Documentation\nDESCRIPTION: This snippet defines a series of reStructuredText substitutions that describe various arguments and parameters used in the pyairtable library. These substitutions are likely used throughout the library's documentation to maintain consistency and reduce repetition.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/_substitutions.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. |arg_base_id| replace:: An Airtable base ID.\n\n.. |arg_record_id| replace:: An Airtable record ID.\n\n.. |arg_table_id_or_name| replace:: An Airtable table ID or name.\n        Table name should be unencoded, as shown on browser.\n\n.. |kwarg_view| replace:: The name or ID of a view.\n    If set, only the records in that view will be returned.\n    The records will be sorted according to the order of the view.\n\n.. |kwarg_page_size| replace:: The number of records returned\n    in each request. Must be less than or equal to 100.\n    If no value given, `Airtable's default <https://airtable.com/developers/web/api/list-records>`__ is 100.\n\n.. |kwarg_max_records| replace:: The maximum total number of\n    records that will be returned. If this value is larger than\n    ``page_size``, multiple requests will be needed\n    to fetch all records.\n\n.. |kwarg_fields| replace:: Name of field or fields  to\n    be retrieved. Default is all fields.\n    Only data for fields whose names are in this list will be included in\n    the records. If you don't need every field, you can use this parameter\n    to reduce the amount of data transferred.\n\n.. |kwarg_sort| replace:: List of fields to sort by.\n    Default order is ascending.\n    This parameter specifies how the records will be ordered. If you set the view\n    parameter, the returned records in that view will be sorted by these\n    fields. If sorting by multiple columns, column names can be passed as a list.\n    Sorting Direction is ascending by default, but can be reversed by\n    prefixing the column name with a minus sign ``-``.\n\n.. |kwarg_formula| replace:: An Airtable formula. The formula will be evaluated for each record, and if the result\n    is none of ``0``, ``false``, \"\", ``NaN``, ``[]``, or ``#Error!`` the record will be included\n    in the response. If combined with view, only records in that view which satisfy the\n    formula will be returned. Read more at :doc:`formulas`.\n\n.. |kwarg_typecast| replace:: The Airtable API will perform best-effort\n    automatic data conversion from string values.\n\n.. |kwarg_cell_format| replace:: The cell format to request from the Airtable\n    API. Supported options are `json` (the default) and `string`.\n    `json` will return cells as a JSON object. `string` will return\n    the cell as a string. `user_locale` and `time_zone` must be set when using\n    `string`.\n\n.. |kwarg_user_locale| replace:: The user locale that should be used to format\n    dates when using `string` as the `cell_format`. See\n    `Supported SET_LOCALE modifiers <https://support.airtable.com/docs/supported-locale-modifiers-for-set-locale>`__\n    for valid values.\n\n.. |kwarg_time_zone| replace:: The time zone that should be used to format dates\n    when using `string` as the `cell_format`. See\n    `Supported SET_TIMEZONE timezones <https://support.airtable.com/docs/supported-timezones-for-set-timezone>`__\n    for valid values.\n\n.. |kwarg_replace| replace:: If ``True``, record is replaced in its entirety\n    by provided fields; if a field is not included its value will\n    bet set to null. If ``False``, only provided fields are updated.\n\n.. |kwarg_use_field_ids| replace:: An optional boolean value that lets you return field objects where the\n    key is the field id. This defaults to ``False``, which returns field objects where the key is the field name.\n    This behavior can be overridden by passing ``use_field_ids=True`` to :class:`~pyairtable.Api`.\n\n.. |kwarg_force_metadata| replace::\n    By default, this method will only fetch information from the API if it has not been cached.\n    If called with ``force=True`` it will always call the API, and will overwrite any cached values.\n\n.. |kwarg_validate_metadata| replace::\n    If ``False``, will create an object without validating the ID/name provided.\n    If ``True``, will fetch information from the metadata API and validate the ID/name exists,\n    raising ``KeyError`` if it does not.\n\n.. |kwarg_orm_fetch| replace::\n    If ``True``, records will be fetched and field values will be\n    updated. If ``False``, new instances are created with the provided IDs,\n    but field values are unset.\n\n.. |kwarg_orm_memoize| replace::\n    If ``True``, any objects created will be memoized for future reuse.\n    If ``False``, objects created will *not* be memoized.\n    The default behavior is defined on the :class:`~pyairtable.orm.Model` subclass.\n\n.. |kwarg_orm_lazy| replace::\n    If ``True``, this field will return empty objects with only IDs;\n    call :meth:`~pyairtable.orm.Model.fetch` to retrieve values.\n\n.. |kwarg_permission_level| replace::\n    See `application permission levels <https://airtable.com/developers/web/api/model/application-permission-levels>`__.\n\n.. |warn| unicode:: U+26A0 .. WARNING SIGN\n\n.. |enterprise_only| replace:: |warn| This feature is only available on Enterprise billing plans.\n```\n\n----------------------------------------\n\nTITLE: Memoizing Records for Performance Optimization\nDESCRIPTION: Shows how to use memoization to optimize API calls when working with linked records. This technique pre-fetches records to avoid making multiple API calls for the same data.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.orm import Model, fields as F\nfrom operator import attrgetter\n\nclass Book(Model):\n    class Meta: ...\n    title = F.TextField(\"Title\")\n    published = F.DateField(\"Publication Date\")\n\nclass Author(Model):\n    class Meta: ...\n    name = F.TextField(\"Name\")\n    books = F.LinkField(\"Books\", Book)\n\ndef main():\n    books = Book.all(memoize=True)\n    authors = Author.all(memoize=True)\n    for author in authors:\n        print(f\"* {author.name}\")\n        for book in sorted(author.books, key=attrgetter(\"published\")):\n            print(f\"  - {book.title} ({book.published.isoformat()})\")\n```\n\n----------------------------------------\n\nTITLE: Listing Available Bases\nDESCRIPTION: Shows how to use the bases command to list all bases available to the authenticated user.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable bases [OPTIONS]\n\n  List all available bases.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Creating Main Section in pyAirtable Documentation\nDESCRIPTION: This block creates the main section of the documentation, including a description of pyAirtable and links to documentation and GitHub.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\npyAirtable\n==========\n\n.. container:: .large\n\n   Python Client for the `Airtable API <https://airtable.com/api>`_\n\n.. container:: .buttons\n\n   `Docs <getting-started.html>`_\n   `GitHub <https://github.com/gtalarico/pyairtable>`_\n\n\n   Version: |version|\n```\n\n----------------------------------------\n\nTITLE: Formula Module Changes Between pyAirtable 2.x and 3.0\nDESCRIPTION: This snippet shows how formula functions and operators changed between pyAirtable 2.x and 3.0, outlining the new Formula class-based approach that enables chaining operations.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/migrations.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Function changes in formulas module\n\n# 2.x\nto_airtable_value()            # 3.0: Use to_formula_str() instead\nEQUAL()                        # 3.0: Use EQ instead\nNOT_EQUAL()                    # 3.0: Use NE instead\nLESS()                         # 3.0: Use LT instead\nLESS_EQUAL()                   # 3.0: Use LTE instead\nGREATER()                      # 3.0: Use GT instead\nGREATER_EQUAL()                # 3.0: Use GTE instead\nFIELD()                        # 3.0: Use Field or field_name()\nSTR_VALUE()                    # 3.0: Use quoted() instead\n\n# AND, OR now return Comparison instances, not strings\n# IF, FIND, LOWER now return FunctionCall instances, not strings\n# escape_quotes() is deprecated; use quoted() instead\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Information Table of Contents in pyAirtable\nDESCRIPTION: This directive creates a table of contents for additional information sections, including about, migrations, changelog, contributing, and links to GitHub, PyPI, and Airtable API.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: More\n   :hidden:\n\n   about\n   migrations\n   changelog\n   contributing\n   GitHub <https://github.com/gtalarico/pyairtable>\n   PyPI <https://pypi.org/project/pyairtable/>\n   Airtable API <https://airtable.com/api>\n```\n\n----------------------------------------\n\nTITLE: Installing pyAirtable using pip\nDESCRIPTION: This command installs the pyAirtable library using pip, the Python package installer.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/getting-started.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install pyairtable\n```\n\n----------------------------------------\n\nTITLE: Listing Development Dependencies for pyairtable Project\nDESCRIPTION: This file enumerates all development dependencies required for the pyairtable project, organized into logical categories. It includes documentation tools like Sphinx with various extensions, packaging utilities, pre-commit hooks, code formatting and linting tools, and type checking libraries with their associated type stubs.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Docs\ncogapp\nSphinx==4.5.0\nsphinx-autoapi\nsphinxext-opengraph\nrevitron-sphinx-theme @ git+https://github.com/mesozoic/revitron-sphinx-theme.git@7ee572e9e4255c9aaa6b383656ff807fdac1011b\nsphinx-autodoc-typehints\nautodoc-pydantic>=2\nsphinxcontrib-applehelp==1.0.4\nsphinxcontrib-devhelp==1.0.2\nsphinxcontrib-htmlhelp==2.0.1\nsphinxcontrib-qthelp==1.0.3\nsphinxcontrib-serializinghtml==1.1.5\n\n# Packaging\nwheel==0.38.1\ntwine==3.3.0\nbuild==0.6.0.post1\n\n# Hooks\npre-commit\n\n# Formatting, Linting\nblack\nflake8\n\n# Type checking\nmypy\ntypes-requests\ntypes-urllib3\n```\n\n----------------------------------------\n\nTITLE: API Constructor and Usage Patterns in pyAirtable 2.0\nDESCRIPTION: Shows the supported and deprecated patterns for constructing API, Base, and Table instances in pyAirtable 2.0, including the preferred approach of using Api instances.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/migrations.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# The following are supported:\n>>> api = Api(api_key, timeout=..., retry_strategy=..., endpoint_url=...)\n>>> base = api.base(base_id)  # [str]\n>>> base = Base(api, base_id)  # [Api, str]\n>>> table = base.table(table_name)  # [str]\n>>> table = api.table(base_id, table_name)  # [str, str]\n>>> table = Table(None, base, table_name)  # [None, Base, str]\n\n# The following are still supported but will issue a DeprecationWarning:\n>>> base = Base(api_key, base_id)  # [str, str]\n```\n\n----------------------------------------\n\nTITLE: Installing pyAirtable via pip\nDESCRIPTION: Command to install the pyAirtable library using pip package manager. This snippet shows how to add the library to a Python environment.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install pyairtable\n```\n\n----------------------------------------\n\nTITLE: Listing Test Dependencies for pyairtable\nDESCRIPTION: This snippet lists the Python packages required to run the test suite for the pyairtable project. It includes pytest for testing, mock for creating mock objects, pytest-cov for code coverage, requests-mock for mocking HTTP requests, and tox for testing in multiple environments.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/requirements-test.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# Required to run test suite\nmock\npytest\npytest-cov\nrequests-mock\ntox\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Object in Python with pyAirtable 2.0\nDESCRIPTION: Demonstrates the correct and incorrect ways to initialize a Table object in pyAirtable 2.0. It shows how mixing string and instance arguments can raise TypeError exceptions.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/migrations.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> table = Table(api_key, base_id, table_name)  # [str, str, str]\n\n# The following will raise a TypeError for mixing str & instances:\n>>> table = Table(api_key, base, table_name)  # [str, Base, str]\n>>> table = Table(api, base_id, table_name)  # [Api, str, str]\n\n# The following will raise a TypeError. We do this proactively\n# to avoid situations where self.api and self.base don't align.\n>>> table = Table(api, base, table_name)  # [Api, Base, str]\n```\n\n----------------------------------------\n\nTITLE: Accessing ORM Metadata and Schema Information\nDESCRIPTION: Demonstrates how to access metadata about a model including its base ID, table name, and schema information. Also shows how to access field schema information from field definitions.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> model = YourModel()\n>>> model.meta.base_id\n'appaPqizdsNHDvlEm'\n>>> model.meta.table_name\n'YourModel'\n>>> model.meta.table.schema()\nTableSchema(id='appaPqizdsNHDvlEm', name='YourModel', ...)\n```\n\n----------------------------------------\n\nTITLE: Creating a Release for Pyairtable with Bash\nDESCRIPTION: Command for creating a new release version of the pyairtable package using the make bump command.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/about.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake bump\n```\n\n----------------------------------------\n\nTITLE: Enterprise User Management in PyAirtable\nDESCRIPTION: Examples of managing enterprise users including state changes, logout, deletion, and admin access control\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/enterprise.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser = enterprise.user(\"usrUserId\")\nuser.state = \"deactivated\"\nuser.email = user.email.replace(\"@\", \"+deactivated@\")\nuser.save()\n\nuser.logout()\nuser.delete()\n\nenterprise.remove_user(\"usrUserId\", replacement=\"usrOtherUserId\")\nenterprise.claim_users({\"userId\": \"managed\"})\nenterprise.delete_users([\"foo@example.com\", \"bar@example.com\"])\n\nenterprise.grant_admin(\"usrUserId\")\nenterprise.grant_admin(\"user@example.com\")\nenterprise.grant_admin(enterprise.user(\"usrUserId\"))\n\nenterprise.revoke_admin(\"usrUserId\")\nenterprise.revoke_admin(\"user@example.com\")\nenterprise.revoke_admin(enterprise.user(\"usrUserId\"))\n```\n\n----------------------------------------\n\nTITLE: Managing Workspace Collaborators in PyAirtable\nDESCRIPTION: Examples of adding and managing collaborators at workspace level with different permission levels\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/enterprise.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nworkspace.collaborators().add_user(\"usrUserId\", \"read\")\nworkspace.collaborators().add_group(\"ugpGroupId\", \"edit\")\nworkspace.collaborators().add(\"user\", \"usrUserId\", \"comment\")\n```\n\n----------------------------------------\n\nTITLE: Airtable REGEX_MATCH Function Syntax\nDESCRIPTION: Tests if a string matches a regular expression pattern and returns a boolean value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_49\n\nLANGUAGE: markdown\nCODE:\n```\nREGEX_MATCH(string, regex)\n```\n\n----------------------------------------\n\nTITLE: Setting up Pyairtable Development Environment with Python\nDESCRIPTION: Instructions for cloning the repository, creating a virtual environment, and setting up the development environment for the pyairtable project. This includes running tests and optional tasks like linting and building documentation.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/about.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngit clone git@github.com:gtalarico/pyairtable.git\ncd pyairtable\n# Create Virtual Environment\npython3 -m venv .venv\nsource .venv/bin/activate\nmake setup # Sets up githooks and install package and depedencies\nmake test # run test complete suite\n# Optional, use as needed\nmake lint # lints locally - also done in pre-merge CI\nmake docs # builds docs locally - see `docs/build/index.html`\n```\n\n----------------------------------------\n\nTITLE: Comparing URL Building Methods Between pyAirtable 2.x and 3.0\nDESCRIPTION: This code snippet demonstrates how URL generation methods changed between pyAirtable 2.x and 3.0, showing the old and new syntax side by side.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/migrations.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Building a URL in 2.x vs Building a URL in 3.0\ntable.url                       # table.urls.records\ntable.record_url(record_id)     # table.urls.record(record_id)\ntable.meta_url(\"one\", \"two\")    # table.urls.meta / \"one\" / \"two\"\ntable.meta_url(*parts)          # table.urls.meta // parts\nbase.url                        # (removed; was invalid)\nbase.meta_url(\"one\", \"two\")     # base.urls.meta / \"one\" / \"two\"\nbase.webhooks_url()             # base.urls.webhooks\nenterprise.url                  # enterprise.urls.meta\nworkspace.url                   # workspace.urls.meta\n```\n\n----------------------------------------\n\nTITLE: Extracting Year from Date in AirTable Formula\nDESCRIPTION: The YEAR function extracts the four-digit year from a given datetime value. It takes a single date parameter and returns the corresponding year.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_78\n\nLANGUAGE: AirTable Formula\nCODE:\n```\nYEAR(date)\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment for pyAirtable\nDESCRIPTION: Shell commands for setting up the development environment and running tests for the pyAirtable project. These commands use Make to execute setup and test procedures.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n% make setup\n% make test\n```\n\n----------------------------------------\n\nTITLE: Deleting View in pyAirtable\nDESCRIPTION: Shows how to delete a view from an Airtable table by first retrieving its ViewSchema and then calling the delete method. This operation is limited to enterprise accounts.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/metadata.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> vw = table.schema().view(\"View Name\")\n>>> vw.delete()\n```\n\n----------------------------------------\n\nTITLE: Airtable DATETIME_DIFF Function Syntax\nDESCRIPTION: Calculates the difference between two dates in specified units.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nDATETIME_DIFF(date1, date2, units)\n```\n\n----------------------------------------\n\nTITLE: Running tests and building documentation for pyAirtable\nDESCRIPTION: Shell command to run tests and build documentation for the pyAirtable project. This is typically used before submitting a pull request to ensure code quality and documentation accuracy.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake test && make docs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enterprise Group Information\nDESCRIPTION: Shows how to retrieve information for a specific user group in an enterprise account.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable enterprise ENTERPRISE_ID group [OPTIONS] GROUP_ID\n\n  Print a user group's information.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Airtable DATETIME_PARSE Function Syntax\nDESCRIPTION: Converts a text string to a datetime value with optional format and locale parameters.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nDATETIME_PARSE(date, [input_format], [locale])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Schema\nDESCRIPTION: Shows how to retrieve the schema for a specific Airtable base using the base schema command.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable base BASE_ID schema [OPTIONS]\n\n  Print the base schema.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Listing Base Shares\nDESCRIPTION: Shows how to list all shares for a specific Airtable base.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable base BASE_ID shares [OPTIONS]\n\n  Print base shares.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Airtable IS_AFTER Function Syntax\nDESCRIPTION: Checks if one date is later than another date and returns 1 if true, 0 if false.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\nIS_AFTER(date1, date2)\n```\n\n----------------------------------------\n\nTITLE: Listing Base Collaborators\nDESCRIPTION: Shows how to list all collaborators for a specific Airtable base.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable base BASE_ID collaborators [OPTIONS]\n\n  Print base collaborators.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: ORM Model Configuration Retrieval Changes in pyAirtable 3.0\nDESCRIPTION: Demonstrates the API changes for retrieving ORM model configuration in pyAirtable 3.0, showing how the direct method calls were replaced with the meta property.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/migrations.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Method in 2.x                # Method in 3.0\nModel.get_api()               # Model.meta.api\nModel.get_base()              # Model.meta.base\nModel.get_table()             # Model.meta.table\nModel._get_meta(name)         # Model.meta.get(name)\n```\n\n----------------------------------------\n\nTITLE: Airtable NOW Function Syntax\nDESCRIPTION: Returns the current date and time.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_43\n\nLANGUAGE: markdown\nCODE:\n```\nNOW()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enterprise User Information\nDESCRIPTION: Shows how to retrieve information for a specific user in an enterprise account using ID or email.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable enterprise ENTERPRISE_ID user [OPTIONS] ID_OR_EMAIL\n\n  Print one user's information.\n\nOptions:\n  --help  Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Deleting Base in pyAirtable\nDESCRIPTION: Demonstrates how to delete an Airtable base using pyAirtable. This functionality is available only for enterprise accounts.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/metadata.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> base = api.base(\"appMxESAta6clCCwF\")\n>>> base.delete()\n```\n\n----------------------------------------\n\nTITLE: Airtable FROMNOW Function Syntax\nDESCRIPTION: Calculates the number of days between the current date and a specified date.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\nFROMNOW(date)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Enterprise Groups\nDESCRIPTION: Shows how to retrieve information for multiple user groups in an enterprise account with options to retrieve all groups or include collaborations.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/cli.rst#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nUsage: pyairtable enterprise ENTERPRISE_ID groups [OPTIONS] GROUP_ID...\n\n  Print many groups, keyed by group ID.\n\nOptions:\n  -a, --all             Retrieve all groups.\n  -c, --collaborations  Include collaborations.\n  --help                Show this message and exit.\n```\n\n----------------------------------------\n\nTITLE: Airtable WORKDAY Function Syntax\nDESCRIPTION: Calculates a date after adding a specified number of working days, excluding weekends and optional holidays.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_75\n\nLANGUAGE: markdown\nCODE:\n```\nWORKDAY(startDate, numDays, [holidays])\n```\n\n----------------------------------------\n\nTITLE: Deleting Workspace in pyAirtable\nDESCRIPTION: Shows how to delete an Airtable workspace using pyAirtable. This feature is marked as enterprise-only functionality.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/metadata.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> ws = api.workspace(\"wspmhESAta6clCCwF\")\n>>> ws.delete()\n```\n\n----------------------------------------\n\nTITLE: Airtable CONCATENATE Function Syntax\nDESCRIPTION: Joins multiple text strings into a single text value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nCONCATENATE(text, [texts...])\n```\n\n----------------------------------------\n\nTITLE: Example of Records Returned by pyAirtable\nDESCRIPTION: Shows the structure of record objects returned by pyAirtable methods. Each record is a dictionary containing 'id', 'createdTime', and 'fields' keys.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/tables.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> table.all()\n[\n    {\n        'id': 'recwPQIfs4wKPyc9D',\n        'createdTime': '2017-03-14T22:04:31.000Z'\n        'fields': {\n            'Name': 'Alice',\n        },\n    },\n    {\n        'id': 'rechOLltN9SpPHq5o',\n        'createdTime': '2017-03-20T15:21:50.000Z'\n        'fields': {\n            'Name': 'Bob',\n        },\n    },\n    {\n        'id': 'rec5eR7IzKSAOBHCz',\n        'createdTime': '2017-08-05T21:47:52.000Z'\n        'fields': {\n            'Name': 'Carol',\n        },\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Schema Information\nDESCRIPTION: Shows how to access schema information for specific fields directly from the field definitions on a model class.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> YourModel.name.field_schema()\nFieldSchema(id='fldMNxslc6jG0XedV', name='Name', type='singleLineText', ...)\n```\n\n----------------------------------------\n\nTITLE: Airtable LEFT Function Syntax\nDESCRIPTION: Extracts a specified number of characters from the beginning of a string.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\nLEFT(string, howMany)\n```\n\n----------------------------------------\n\nTITLE: ORM Limitation: Handling Formula Fields and Record Refreshing\nDESCRIPTION: Demonstrates how to handle formula fields which don't automatically refresh after saving a record. The fetch() method must be explicitly called to update computed fields.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom pyairtable.orm import fields as F\n\nclass Person(Model):\n    class Meta: ...\n\n    name = F.TextField(\"Name\")\n    manager = F.SingleLinkField[\"Person\"](\"Manager\", F.LinkSelf)\n    # This field is a formula: {Manager} != BLANK()\n    has_manager = F.IntegerField(\"Has Manager?\", readonly=True)\n\n\nbob = Person.from_id(\"rec2AqNuHwWcnG871\")\nassert bob.manager is None\nassert bob.has_manager == 0\n\nalice = Person.from_id(\"recAB2AqNuHwWcnG8\")\nbob.manager = alice\nbob.save()\nassert bob.has_manager == 0\n\nbob.fetch()\nassert bob.has_manager == 1\n```\n\n----------------------------------------\n\nTITLE: LinkField Component Breakdown\nDESCRIPTION: Breaks down the four components of a LinkField declaration: attribute name, type annotation, Airtable field name, and linked model reference.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n  manager = F.LinkField[\"Person\"](\"Manager\", \"path.to.Person\")\n #^^^^^^^               ^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^^^^^^^\n #  (1)                    (2)       (3)           (4)\n```\n\n----------------------------------------\n\nTITLE: Airtable LEN Function Syntax\nDESCRIPTION: Returns the number of characters in a text string.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\nLEN(string)\n```\n\n----------------------------------------\n\nTITLE: Airtable CREATED_TIME Function Syntax\nDESCRIPTION: Returns the date and time when a record was created.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nCREATED_TIME()\n```\n\n----------------------------------------\n\nTITLE: Airtable SWITCH Function Syntax\nDESCRIPTION: Evaluates an expression against multiple patterns and returns the corresponding result.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_64\n\nLANGUAGE: markdown\nCODE:\n```\nSWITCH(expression, pattern, result, [pattern_results...])\n```\n\n----------------------------------------\n\nTITLE: Airtable SUM Function Syntax\nDESCRIPTION: Adds all the numbers in the arguments together.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_63\n\nLANGUAGE: markdown\nCODE:\n```\nSUM(number, [numbers...])\n```\n\n----------------------------------------\n\nTITLE: Airtable INT Function Syntax\nDESCRIPTION: Returns the greatest integer less than or equal to the specified value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\nINT(value)\n```\n\n----------------------------------------\n\nTITLE: Airtable DATETIME_FORMAT Function Syntax\nDESCRIPTION: Formats a datetime value according to a specified output format string.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nDATETIME_FORMAT(date, [output_format])\n```\n\n----------------------------------------\n\nTITLE: Airtable MAX Function Syntax\nDESCRIPTION: Returns the largest value from a set of numbers.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\nMAX(number, [numbers...])\n```\n\n----------------------------------------\n\nTITLE: Airtable IS_BEFORE Function Syntax\nDESCRIPTION: Checks if one date is earlier than another date and returns 1 if true, 0 if false.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\nIS_BEFORE(date1, date2)\n```\n\n----------------------------------------\n\nTITLE: Performing XOR Operation on Multiple Expressions in AirTable Formula\nDESCRIPTION: The XOR function returns true if an odd number of its arguments are true. It takes at least one expression as an argument, with the option to include multiple expressions.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_77\n\nLANGUAGE: AirTable Formula\nCODE:\n```\nXOR(expression, [expressions...])\n```\n\n----------------------------------------\n\nTITLE: Airtable SET_LOCALE Function Syntax\nDESCRIPTION: Sets a specific locale for datetime formatting, must be used with DATETIME_FORMAT.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_59\n\nLANGUAGE: markdown\nCODE:\n```\nSET_LOCALE(date, locale_modifier)\n```\n\n----------------------------------------\n\nTITLE: Airtable NOT Function Syntax\nDESCRIPTION: Returns the logical negation of its argument.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_42\n\nLANGUAGE: markdown\nCODE:\n```\nNOT(expression)\n```\n\n----------------------------------------\n\nTITLE: Airtable AND Function Syntax\nDESCRIPTION: Logical AND operation that returns true only if all arguments evaluate to true.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAND(expression, [expressions...])\n```\n\n----------------------------------------\n\nTITLE: Airtable REGEX_REPLACE Function Syntax\nDESCRIPTION: Replaces text matching a regular expression pattern with a replacement string.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_50\n\nLANGUAGE: markdown\nCODE:\n```\nREGEX_REPLACE(string, regex, replacement)\n```\n\n----------------------------------------\n\nTITLE: Airtable T Function Syntax\nDESCRIPTION: Returns the argument if it is text, otherwise returns a blank value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_65\n\nLANGUAGE: markdown\nCODE:\n```\nT(value)\n```\n\n----------------------------------------\n\nTITLE: Airtable IF Function Syntax\nDESCRIPTION: Conditional expression that returns one value if condition is true, another if false.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\nIF(expression, if_true, if_false)\n```\n\n----------------------------------------\n\nTITLE: Airtable REPLACE Function Syntax\nDESCRIPTION: Replaces a specified number of characters with a replacement string.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_51\n\nLANGUAGE: markdown\nCODE:\n```\nREPLACE(string, start_character, number_of_characters, replacement)\n```\n\n----------------------------------------\n\nTITLE: Airtable EXP Function Syntax\nDESCRIPTION: Calculates Euler's number (e) raised to a specified power.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nEXP(power)\n```\n\n----------------------------------------\n\nTITLE: Airtable DAY Function Syntax\nDESCRIPTION: Extracts the day of the month (1-31) from a datetime value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\nDAY(date)\n```\n\n----------------------------------------\n\nTITLE: ORM Limitation: Type Annotations for Formula Fields\nDESCRIPTION: Illustrates the limitation that type annotations for formula fields don't account for potential error conditions. The field appears as a simple type but might contain formula errors.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/orm.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass Person(Model):\n    class Meta: ...\n\n    name = F.TextField(\"Name\")\n    has_manager = F.IntegerField(\"Has Manager?\", readonly=True)  # formula\n```\n\n----------------------------------------\n\nTITLE: Airtable CEILING Function Syntax\nDESCRIPTION: Rounds a number up to the nearest multiple of significance.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nCEILING(value, [significance])\n```\n\n----------------------------------------\n\nTITLE: Airtable ISERROR Function Syntax\nDESCRIPTION: Tests if an expression results in an error and returns a boolean value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\nISERROR(expr)\n```\n\n----------------------------------------\n\nTITLE: Airtable SUBSTITUTE Function Syntax\nDESCRIPTION: Replaces occurrences of a substring with a new substring in a text string.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_62\n\nLANGUAGE: markdown\nCODE:\n```\nSUBSTITUTE(string, old_text, new_text, [index])\n```\n\n----------------------------------------\n\nTITLE: Airtable ROUNDUP Function Syntax\nDESCRIPTION: Rounds a number up to a specified precision.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_56\n\nLANGUAGE: markdown\nCODE:\n```\nROUNDUP(value, precision)\n```\n\n----------------------------------------\n\nTITLE: Airtable HOUR Function Syntax\nDESCRIPTION: Extracts the hour (0-23) from a datetime value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\nHOUR(datetime)\n```\n\n----------------------------------------\n\nTITLE: Airtable OR Function Syntax\nDESCRIPTION: Logical OR operation that returns true if any argument evaluates to true.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_45\n\nLANGUAGE: markdown\nCODE:\n```\nOR(expression, [expressions...])\n```\n\n----------------------------------------\n\nTITLE: Airtable IS_SAME Function Syntax\nDESCRIPTION: Compares two dates to a specified precision unit and returns 1 if equal, 0 if not.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\nIS_SAME(date1, date2, unit)\n```\n\n----------------------------------------\n\nTITLE: Airtable SQRT Function Syntax\nDESCRIPTION: Calculates the square root of a non-negative number.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_61\n\nLANGUAGE: markdown\nCODE:\n```\nSQRT(value)\n```\n\n----------------------------------------\n\nTITLE: Airtable FLOOR Function Syntax\nDESCRIPTION: Rounds a number down to the nearest multiple of significance.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\nFLOOR(value, [significance])\n```\n\n----------------------------------------\n\nTITLE: Airtable ROUND Function Syntax\nDESCRIPTION: Rounds a number to a specified precision using half up rounding method.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_54\n\nLANGUAGE: markdown\nCODE:\n```\nROUND(value, precision)\n```\n\n----------------------------------------\n\nTITLE: Airtable LOG Function Syntax\nDESCRIPTION: Calculates the logarithm of a number in a specified base (defaults to 10).\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\nLOG(number, [base])\n```\n\n----------------------------------------\n\nTITLE: Airtable FIND Function Syntax\nDESCRIPTION: Locates a substring within a string and returns its position.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\nFIND(stringToFind, whereToSearch, [startFromPosition])\n```\n\n----------------------------------------\n\nTITLE: Airtable RECORD_ID Function Syntax\nDESCRIPTION: Returns the unique ID of the current record.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_47\n\nLANGUAGE: markdown\nCODE:\n```\nRECORD_ID()\n```\n\n----------------------------------------\n\nTITLE: Airtable MINUTE Function Syntax\nDESCRIPTION: Extracts the minute (0-59) from a datetime value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\nMINUTE(datetime)\n```\n\n----------------------------------------\n\nTITLE: Airtable MIN Function Syntax\nDESCRIPTION: Returns the smallest value from a set of numbers.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\nMIN(number, [numbers...])\n```\n\n----------------------------------------\n\nTITLE: Airtable TIMESTR Function Syntax\nDESCRIPTION: Formats a datetime into a time-only string (HH:mm:ss).\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_66\n\nLANGUAGE: markdown\nCODE:\n```\nTIMESTR(timestamp)\n```\n\n----------------------------------------\n\nTITLE: Airtable SECOND Function Syntax\nDESCRIPTION: Extracts the second (0-59) from a datetime value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_58\n\nLANGUAGE: markdown\nCODE:\n```\nSECOND(datetime)\n```\n\n----------------------------------------\n\nTITLE: Calculating Working Days Between Dates in AirTable Formula\nDESCRIPTION: The WORKDAY_DIFF function calculates the number of working days between two dates, excluding weekends and optional holidays. It takes start and end dates as required parameters, with an optional list of holidays as a comma-separated string of ISO-formatted dates.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_76\n\nLANGUAGE: AirTable Formula\nCODE:\n```\nWORKDAY_DIFF(startDate, endDate, [holidays])\n```\n\n----------------------------------------\n\nTITLE: Airtable WEEKDAY Function Syntax\nDESCRIPTION: Returns the day of the week (0-6) from a date with configurable start day.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_73\n\nLANGUAGE: markdown\nCODE:\n```\nWEEKDAY(date, [startDayOfWeek])\n```\n\n----------------------------------------\n\nTITLE: Airtable TODAY Function Syntax\nDESCRIPTION: Returns the current date (without time component).\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_67\n\nLANGUAGE: markdown\nCODE:\n```\nTODAY()\n```\n\n----------------------------------------\n\nTITLE: Airtable DATEADD Function Syntax\nDESCRIPTION: Adds a specified number of time units to a date value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nDATEADD(date, number, units)\n```\n\n----------------------------------------\n\nTITLE: Airtable TONOW Function Syntax\nDESCRIPTION: Calculates the number of days between a specified date and the current date.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_68\n\nLANGUAGE: markdown\nCODE:\n```\nTONOW(date)\n```\n\n----------------------------------------\n\nTITLE: Airtable WEEKNUM Function Syntax\nDESCRIPTION: Returns the week number in a year with configurable start day of week.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_74\n\nLANGUAGE: markdown\nCODE:\n```\nWEEKNUM(date, [startDayOfWeek])\n```\n\n----------------------------------------\n\nTITLE: Airtable BLANK Function Syntax\nDESCRIPTION: Returns a blank value that can be used in formulas.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nBLANK()\n```\n\n----------------------------------------\n\nTITLE: Airtable REPT Function Syntax\nDESCRIPTION: Repeats a text string a specified number of times.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_52\n\nLANGUAGE: markdown\nCODE:\n```\nREPT(string, number)\n```\n\n----------------------------------------\n\nTITLE: Airtable TRIM Function Syntax\nDESCRIPTION: Removes whitespace from the beginning and end of a text string.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_69\n\nLANGUAGE: markdown\nCODE:\n```\nTRIM(string)\n```\n\n----------------------------------------\n\nTITLE: Airtable COUNT Function Syntax\nDESCRIPTION: Counts the number of numeric items in the arguments.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nCOUNT(number, [numbers...])\n```\n\n----------------------------------------\n\nTITLE: Airtable REGEX_EXTRACT Function Syntax\nDESCRIPTION: Extracts the first substring that matches a regular expression pattern.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_48\n\nLANGUAGE: markdown\nCODE:\n```\nREGEX_EXTRACT(string, regex)\n```\n\n----------------------------------------\n\nTITLE: Airtable MONTH Function Syntax\nDESCRIPTION: Extracts the month (1-12) from a datetime value.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\nMONTH(date)\n```\n\n----------------------------------------\n\nTITLE: Airtable COUNTA Function Syntax\nDESCRIPTION: Counts the number of non-empty values including both numeric and text values.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nCOUNTA(value, [values...])\n```\n\n----------------------------------------\n\nTITLE: Displaying Logo Image in pyAirtable Documentation\nDESCRIPTION: This directive displays the pyAirtable logo image in the documentation.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: _static/logo.svg\n```\n\n----------------------------------------\n\nTITLE: Airtable MOD Function Syntax\nDESCRIPTION: Returns the remainder when dividing the first argument by the second.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\nMOD(value, divisor)\n```\n\n----------------------------------------\n\nTITLE: Airtable TRUE Function Syntax\nDESCRIPTION: Returns the logical value true (represented numerically as 1).\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_70\n\nLANGUAGE: markdown\nCODE:\n```\nTRUE()\n```\n\n----------------------------------------\n\nTITLE: Airtable COUNTALL Function Syntax\nDESCRIPTION: Counts all elements including text and blanks in the arguments.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nCOUNTALL(value, [values...])\n```\n\n----------------------------------------\n\nTITLE: Airtable ENCODE_URL_COMPONENT Function Syntax\nDESCRIPTION: URL-encodes a string for use in constructing URLs or URIs.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\nENCODE_URL_COMPONENT(component_string)\n```\n\n----------------------------------------\n\nTITLE: Airtable VALUE Function Syntax\nDESCRIPTION: Converts a text string to a number with special handling for certain operators.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_72\n\nLANGUAGE: markdown\nCODE:\n```\nVALUE(text)\n```\n\n----------------------------------------\n\nTITLE: Airtable LAST_MODIFIED_TIME Function Syntax\nDESCRIPTION: Returns the date and time of the most recent user modification to specified fields.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\nLAST_MODIFIED_TIME([fields...])\n```\n\n----------------------------------------\n\nTITLE: Airtable SEARCH Function Syntax\nDESCRIPTION: Finds the position of a substring within a string and returns empty if not found.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_57\n\nLANGUAGE: markdown\nCODE:\n```\nSEARCH(stringToFind, whereToSearch, [startFromPosition])\n```\n\n----------------------------------------\n\nTITLE: Airtable EVEN Function Syntax\nDESCRIPTION: Rounds a value up to the nearest even integer.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nEVEN(value)\n```\n\n----------------------------------------\n\nTITLE: Airtable AVERAGE Function Syntax\nDESCRIPTION: Calculates the arithmetic mean of the provided numbers.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nAVERAGE(number, [numbers...])\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Table of Contents in pyAirtable\nDESCRIPTION: This directive creates a table of contents for the main documentation sections, including getting started, tables, formulas, ORM, metadata, webhooks, enterprise, CLI, and API.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: Docs\n   :maxdepth: 3\n   :hidden:\n\n   getting-started\n   tables\n   formulas\n   orm\n   metadata\n   webhooks\n   enterprise\n   cli\n   api\n```\n\n----------------------------------------\n\nTITLE: Including RST Files in pyAirtable Documentation\nDESCRIPTION: These directives include external RST files into the main documentation. The first includes a warning about the latest version, and the second includes substitutions.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: _warn_latest.rst\n.. include:: _substitutions.rst\n```\n\n----------------------------------------\n\nTITLE: Airtable MID Function Syntax\nDESCRIPTION: Extracts a specified number of characters from a string starting at a given position.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\nMID(string, whereToStart, count)\n```\n\n----------------------------------------\n\nTITLE: Airtable DATESTR Function Syntax\nDESCRIPTION: Formats a datetime into a YYYY-MM-DD string format.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nDATESTR(date)\n```\n\n----------------------------------------\n\nTITLE: Airtable LOWER Function Syntax\nDESCRIPTION: Converts a text string to lowercase.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\nLOWER(string)\n```\n\n----------------------------------------\n\nTITLE: Airtable ABS Function Syntax\nDESCRIPTION: Returns the absolute value of a number.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nABS(value)\n```\n\n----------------------------------------\n\nTITLE: Airtable ROUNDDOWN Function Syntax\nDESCRIPTION: Rounds a number down to a specified precision.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_55\n\nLANGUAGE: markdown\nCODE:\n```\nROUNDDOWN(value, precision)\n```\n\n----------------------------------------\n\nTITLE: Airtable ODD Function Syntax\nDESCRIPTION: Rounds a value to the nearest odd integer.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_44\n\nLANGUAGE: markdown\nCODE:\n```\nODD(value)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Warning Directive\nDESCRIPTION: ReStructuredText directive that displays a warning message for documentation of unreleased PyAirtable builds. The warning is only shown on the latest ReadTheDocs build.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/docs/source/_warn_latest.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. only:: readthedocs_latest\n\n   .. warning::\n\n      This documentation was generated for an unreleased build of pyAirtable,\n      and might describe unreleased features. For the latest released version, see\n      https://pyairtable.readthedocs.io/en/stable/\n```\n\n----------------------------------------\n\nTITLE: Airtable SET_TIMEZONE Function Syntax\nDESCRIPTION: Sets a specific timezone for datetime formatting, must be used with DATETIME_FORMAT.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_60\n\nLANGUAGE: markdown\nCODE:\n```\nSET_TIMEZONE(date, tz_identifier)\n```\n\n----------------------------------------\n\nTITLE: Airtable RIGHT Function Syntax\nDESCRIPTION: Extracts a specified number of characters from the end of a string.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_53\n\nLANGUAGE: markdown\nCODE:\n```\nRIGHT(string, howMany)\n```\n\n----------------------------------------\n\nTITLE: Airtable POWER Function Syntax\nDESCRIPTION: Raises a number to a specified power.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_46\n\nLANGUAGE: markdown\nCODE:\n```\nPOWER(base, power)\n```\n\n----------------------------------------\n\nTITLE: Airtable FALSE Function Syntax\nDESCRIPTION: Returns the logical value false (represented numerically as 0).\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\nFALSE()\n```\n\n----------------------------------------\n\nTITLE: Airtable UPPER Function Syntax\nDESCRIPTION: Converts a text string to uppercase.\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_71\n\nLANGUAGE: markdown\nCODE:\n```\nUPPER(string)\n```\n\n----------------------------------------\n\nTITLE: Airtable ERROR Function Syntax\nDESCRIPTION: Returns a generic error value (#ERROR!).\nSOURCE: https://github.com/gtalarico/pyairtable/blob/main/pyairtable/formulas.txt#2025-04-21_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nERROR()\n```"
  }
]