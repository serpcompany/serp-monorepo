[
  {
    "owner": "microsoft",
    "repo": "vscode",
    "content": "TITLE: Accessing Git Base Extension API in TypeScript\nDESCRIPTION: Demonstrates how to obtain and initialize the Git base extension API in a VS Code extension. The code retrieves the extension instance and gets API version 1.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/git-base/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitBaseExtension = vscode.extensions.getExtension<GitBaseExtension>('vscode.git-base').exports;\nconst git = gitBaseExtension.getAPI(1);\n```\n\n----------------------------------------\n\nTITLE: Accessing Git API in Extensions for VS Code\nDESCRIPTION: This code demonstrates how to access the Git extension's API from another VS Code extension. It requires importing the Git type definitions and using the extensions API to get a reference to the Git extension.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/git/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitExtension = vscode.extensions.getExtension<GitExtension>('vscode.git').exports;\nconst git = gitExtension.getAPI(1);\n```\n\n----------------------------------------\n\nTITLE: Starting JSON Language Server with Communication Options\nDESCRIPTION: These commands demonstrate how to start the JSON language server with different communication channel options: node-ipc, stdio, or a specific socket port.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvscode-json-languageserver --node-ipc\nvscode-json-languageserver --stdio\nvscode-json-languageserver --socket=<port>\n```\n\n----------------------------------------\n\nTITLE: Importing Lodash in JavaScript for Type Acquisition\nDESCRIPTION: Example of importing Lodash in a JavaScript file to trigger automatic type acquisition and enable IntelliSense features.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/web/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport lodash from 'lodash';\n```\n\n----------------------------------------\n\nTITLE: GitHub Feature Command References\nDESCRIPTION: Code snippet showing the available GitHub-related commands and features in VS Code, including publish, clone, authentication settings, and automatic fork creation.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `Publish to GitHub` command\n- `Clone from GitHub` participant to the `Git: Clone` command\n- GitHub authentication for built-in git commands, controlled via the `github.gitAuthentication` command\n- Automatic fork creation when attempting to push to a repository without permissions\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Association Interfaces in TypeScript\nDESCRIPTION: This snippet defines TypeScript interfaces for schema associations. It includes ISchemaAssociations for file pattern to schema URI mappings, and ISchemaAssociation for more detailed schema association configurations.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ISchemaAssociations {\n  /**\n   * An object where:\n   *  - keys are file names or file paths (using `/` as path separator). `*` can be used as a wildcard.\n   *  - values are an arrays of schema URIs\n   */\n  [pattern: string]: string[];\n}\n\ninterface ISchemaAssociation {\n  /**\n   * The URI of the schema, which is also the identifier of the schema.\n   */\n  uri: string;\n\n  /**\n   * A list of file path patterns that are associated to the schema. The '*' wildcard can be used. Exclusion patterns starting with '!'.\n   * For example '*.schema.json', 'package.json', '!foo*.schema.json'.\n   * A match succeeds when there is at least one pattern matching and last matching pattern does not start with '!'.\n   */\n  fileMatch: string[];\n  /**\n   * If provided, the association is only used if the validated document is located in the given folder (directly or in a subfolder)\n   */\n  folderUri?: string;\n  /*\n   * The schema for the given URI.\n   * If no schema is provided, the schema will be fetched with the schema request service (if available).\n   */\n  schema?: JSONSchema;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Language Client Options for JSON Server\nDESCRIPTION: TypeScript code snippet showing how to set initialization options for the JSON language server, specifically configuring handled schema protocols.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientOptions: LanguageClientOptions = {\n  initializationOptions: {\n   handledSchemaProtocols: ['file'] // language server should only try to load file URLs\n  }\n        ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Content Security Policy Directives from Settings in JavaScript\nDESCRIPTION: Function that extracts Content Security Policy directives from VS Code settings. It creates a set of security directives including default-src, script-src, and style-src based on the configuration.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCspDirectivesFromSettings(settings: any, nonce: string): [string, string][] {\n\tconst allowScripts = settings.allowScripts;\n\tconst allowInsecureContent = settings.allowInsecureContent;\n\tconst directives: [string, string][] = [];\n\tif (!allowScripts && !allowInsecureContent) {\n\t\tlet scriptSrc = `'nonce-${nonce}'`;\n\t\tif (settings.allowMultipleConnections || /^https?:/i.test(settings.serviceWorkerScriptPath)) {\n\t\t\tscriptSrc = `${scriptSrc} https:`;\n\t\t}\n\t\tif (settings.allowMultipleConnections || !/^https?:/i.test(settings.serviceWorkerScriptPath)) {\n\t\t\tscriptSrc = `${scriptSrc} vscode-resource: blob:`;\n\t\t}\n\n\t\tdirectives.push(['default-src', \"'none'\"]);\n\t\tdirectives.push(['script-src', scriptSrc]);\n\t\tif (settings.savingFile) {\n\t\t\t// Note that we need to allow connections to all origins when saving. This is because\n\t\t\t// libs in worker do actually try to connect to different origins for tracking:\n\t\t\t// https://github.com/microsoft/vscode/issues/106579\n\t\t\tdirectives.push(['connect-src', \"https: http: data: blob: vscode-resource:\"]);\n\t\t} else {\n\t\t\tdirectives.push(['connect-src', \"'none'\"]);\n\t\t}\n\t\tdirectives.push(['style-src', `'nonce-${nonce}'`]);\n\t\tdirectives.push(['font-src', supportedFontMimes.length ? 'https: data: blob:' : \"'none'\"]);\n\t}\n\treturn directives;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Named Pipe Debug Adapter Factory in TypeScript\nDESCRIPTION: Implements a concrete factory for creating debug adapters that communicate through named pipes. This class handles establishing communication via a pipe between VS Code and a debug adapter.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/docs/PULL_REQUEST_TEMPLATE/b.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n@injectable()\nexport class NamedPipeDebugAdapterProcessFactory extends AbstractDebugAdapterProcessFactory<DebugAdapterNamedPipeServer> {\n\tprivate readonly _adapters = new Set<IDebugAdapter>();\n\n\tconstructor(\n\t\t@IDebugHelperRegistry debugRegistry: IDebugHelperRegistry,\n\t\t@IExtensionHostDebugService extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionHostDebugService extensionHostDebugService2: IExtensionHostDebugService,\n\t\t@IWindowsService windowsService: IWindowsService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IConnectLimiterFactory limiterFactory: IConnectLimiterFactory,\n\t\t@IFileService fileService: IFileService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(debugRegistry, extensionHostDebugService, configurationService, extensionHostDebugService2, windowsService, environmentService, limiterFactory, fileService, openerService, notificationService, dialogService, telemetryService, logService);\n\t}\n\n\tisSupported(adapterDescriptor: IAdapterDescriptor): adapterDescriptor is DebugAdapterNamedPipeServer {\n\t\treturn adapterDescriptor instanceof DebugAdapterNamedPipeServer;\n\t}\n\n\tcreateDebugAdapter(server: DebugAdapterNamedPipeServer, session: vscode.DebugSession, telemetryReporter: ITelemetryEventProperties): IDebugAdapter {\n\t\tconst adapter = new NamedPipeDebugAdapter(server, this.limiterFactory.create(), this.logService);\n\t\tthis._adapters.add(adapter);\n\t\treturn adapter;\n\t}\n\n\tprotected override getAdapterDescriptor(registry: IDebugHelperRegistry, session: vscode.DebugSession): Promise<DebugAdapterNamedPipeServer | undefined> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tfor (const adapter of this._adapters) {\n\t\t\tadapter.dispose();\n\t\t}\n\t\tthis._adapters.clear();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Enabled API Proposals in package.json\nDESCRIPTION: This snippet shows how to enable API proposals in an extension's package.json file. Developers need to add the names of the proposals they want to use to the 'enabledApiProposals' property.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vscode-dts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"package.json#enabledApiProposals\"\n```\n\n----------------------------------------\n\nTITLE: Creating Content Security Policy for Markdown Preview in JavaScript\nDESCRIPTION: Function that creates a Content Security Policy (CSP) for the Markdown preview to prevent JavaScript injection attacks. It configures various directives including default-src, script-src, and font-src based on security settings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createPrintBlocker(element: HTMLElement): void {\n\telement.addEventListener('contextmenu', (e) => {\n\t\tif (e.target instanceof (window as any).HTMLImageElement) {\n\t\t\tif (!e.target.__vscodeImageContextMenuEnabled) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t}\n\t});\n\telement.addEventListener('pointerleave', (e) => {\n\t\tif (e.target instanceof (window as any).HTMLImageElement) {\n\t\t\te.target.__vscodeImageContextMenuEnabled = undefined;\n\t\t}\n\t});\n}\nexport function getSettings(): any {\n\tconst element = document.getElementById('vscode-markdown-preview-data');\n\tif (element) {\n\t\ttry {\n\t\t\treturn JSON.parse(element.getAttribute('data-settings') || '');\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\treturn {};\n}\n\nexport function getData<T>(key: string): T | undefined {\n\tconst element = document.getElementById('vscode-markdown-preview-data');\n\tif (element) {\n\t\ttry {\n\t\t\tconst data = JSON.parse(element.getAttribute('data-data') || '{}');\n\t\t\treturn data[key];\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\treturn undefined;\n}\n\nexport function createCspForIframe(nonce: string): string {\n\treturn getCspForIframe(getSettings(), nonce);\n}\n\nexport function getCspForIframe(settings: any, nonce: string): string {\n\tconst rule = settings.csp;\n\n\tswitch (rule) {\n\t\tcase 'strict':\n\t\t\treturn getCspForStrictIframe(settings, nonce);\n\n\t\tcase 'disabled':\n\t\t\treturn '';\n\n\t\tdefault: {\n\t\t\tconst defaultDirectives = getCspDirectivesFromSettings(settings, nonce);\n\t\t\tif (!defaultDirectives.find(directive => directive[0] === 'frame-src')) {\n\t\t\t\tdefaultDirectives.push(['frame-src', supportedVideoMimes.length ? 'https:' : \"'none'\"]);\n\t\t\t}\n\t\t\treturn defaultDirectives\n\t\t\t\t.concat([\n\t\t\t\t\t// We expect to have data URLs and need them to load properly.\n\t\t\t\t\t['img-src', 'https: data: blob:'],\n\t\t\t\t])\n\t\t\t\t.map(([directive, value]) => `${directive} ${value};`)\n\t\t\t\t.join(' ');\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Configuration in JavaScript for VS Code\nDESCRIPTION: This script generates a tsconfig.json file with specific compiler options for VS Code development. It parses command-line arguments, handles include patterns and project references, and creates a configuration object that's written to the specified output file.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/some-markdown.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst path = require('path');\nconst fs = require('fs');\nconst cp = require('child_process');\n\nconst TYPESCRIPT_LIB_FOLDER = path.join(__dirname, 'node_modules', 'typescript', 'lib');\nconst TYPESCRIPT_LIB_SOURCE_FOLDER = path.join(TYPESCRIPT_LIB_FOLDER, 'lib.es6.d.ts');\n\nconst args = process.argv.slice(2);\n\nlet OUT = 'src/tsconfig.json';\nlet disableStrictErrors = false;\n\nfor (let i = 0; i < args.length; i++) {\n\tconst a = args[i];\n\n\tif (a === '--out' && i < args.length - 1) {\n\t\tOUT = args[i + 1];\n\t\ti++;\n\t\tcontinue;\n\t}\n\n\tif (a === '--disableStrictErrors') {\n\t\tdisableStrictErrors = true;\n\t\tcontinue;\n\t}\n}\n\nfunction isFileAnExplicitReference(path) {\n\treturn /vs(code|editor)\\.d\\.ts$/.test(path);\n}\n\nfunction readConfig() {\n\tconst config = {\n\t\tcompilerOptions: {\n\t\t\tnoUnusedLocals: false,\n\t\t\tnoUnusedParameters: false,\n\t\t\tnoImplicitReturns: false,\n\t\t\tnoFallthroughCasesInSwitch: false,\n\t\t\tstrictNullChecks: true,\n\t\t\tstrictPropertyInitialization: true,\n\t\t\tnoImplicitThis: true,\n\t\t\tnoImplicitAny: true,\n\t\t\ttarget: 'es2020',\n\t\t\tmodule: 'esnext',\n\t\t\trootsDir: '../',\n\t\t\tallowSyntheticDefaultImports: true,\n\t\t\tsuppressionExhaustive: disableStrictErrors\n\t\t},\n\t\tinclude: [],\n\t\texclude: [ 'node_modules', '**/node_modules/*' ],\n\t\treferences: [\n\t\t\t{ path: '../src/vs/css.build.json' },\n\t\t\t{ path: '../src/vs/editor/tsconfig.json' },\n\t\t\t{ path: '../src/vs/workbench/tsconfig.json' },\n\t\t\t{ path: '../src/vs/workbench/api/common/extHostAPI.tsconfig.json' },\n\t\t\t{ path: '../src/vs/workbench/api/node/extHost.tsconfig.json' },\n\t\t\t{ path: '../src/vscode-dts/tsconfig.json' }\n\t\t],\n\t\tts_node: {\n\t\t\tcompilerOptions: {\n\t\t\t\tmodule: 'commonjs'\n\t\t\t}\n\t\t}\n\t};\n\n\treturn config;\n}\n\nfunction generateDefaultCompilerOptions() {\n\tconst config = readConfig();\n\treturn config.compilerOptions;\n}\n\nfunction createESConfig() {\n\tlet config = readConfig();\n\tconfig.compilerOptions.module = 'esnext';\n\tconfig.include = [ './**/*.ts', '../typings/**/*.d.ts' ];\n\treturn config;\n}\n\nfunction getTopLevelFiles(dir) {\n\tconst files = [];\n\tfor (const n of fs.readdirSync(dir)) {\n\t\tconst p = path.join(dir, n);\n\t\tif (fs.statSync(p).isDirectory()) {\n\t\t\tcontinue;\n\t\t}\n\t\tfiles.push(p);\n\t}\n\treturn files;\n}\n\nfunction createESConfigWithoutVSCodeReferences() {\n\tconst config = createESConfig();\n\tconst references = [];\n\tfor (const r of config.references) {\n\t\tif (!/\\/vs\\//.test(r.path)) {\n\t\t\treferences.push(r);\n\t\t}\n\t}\n\tconfig.references = references;\n\treturn config;\n}\n\nfunction makeConfig() {\n\tconst typeRootDir = path.join(__dirname, 'node_modules', '@types');\n\tconst jsConfig = {\n\t\tcompilerOptions: {\n\t\t\tuseDefineForClassFields: false,\n\t\t\tmodule: createESConfig().compilerOptions.module,\n\t\t\ttarget: createESConfig().compilerOptions.target,\n\t\t\trootDir: '../',\n\t\t\tallowSyntheticDefaultImports: true,\n\t\t\tcheckJs: true,\n\t\t\tnoEmit: true,\n\t\t\ttypeRoots: [typeRootDir]\n\t\t}\n\t};\n\treturn jsConfig;\n}\n\nfunction createJsConfig() {\n\tconst config = makeConfig();\n\treturn config;\n}\n\nfunction writeConfigFile(config, out) {\n\tif (!out) {\n\t\tout = OUT;\n\t}\n\tfs.writeFileSync(out, JSON.stringify(config, undefined, '\t').replace(new RegExp(__dirname, 'g'), '${workspaceFolder}')  + '\\n');\n}\n\nfunction run(action) {\n\tlet config = null;\n\tif (action === 'default-compiler-options') {\n\t\tconfig = generateDefaultCompilerOptions();\n\t} else if (action === 'es-config') {\n\t\tconfig = createESConfig();\n\t} else if (action === 'es-config-without-vscode-references') {\n\t\tconfig = createESConfigWithoutVSCodeReferences();\n\t} else if (action === 'js-config') {\n\t\tconfig = createJsConfig();\n\t}\n\tif (config) {\n\t\twriteConfigFile(config);\n\t}\n}\n\nif (process.argv.length >= 3) {\n\trun(process.argv[2]);\n} else {\n\trun();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Extension Settings in Visual Studio Code\nDESCRIPTION: This snippet shows the available configuration options for the npm extension in Visual Studio Code. It includes settings for auto-detection, silent running, package manager selection, script runner selection, exclusion patterns, and various feature toggles.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/npm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `npm.autoDetect` - Enable detecting scripts as tasks, the default is `on`.\n- `npm.runSilent` - Run npm script with the `--silent` option, the default is `false`.\n- `npm.packageManager` - The package manager used to install dependencies: `auto`, `npm`, `yarn`, `pnpm` or `bun`. The default is `auto`, which detects your package manager based on files in your workspace.\n- `npm.scriptRunner` - The script runner used to run the scripts: `auto`, `npm`, `yarn`, `pnpm`, `bun` or `node`. The default is `auto`, which detects your script runner based on files in your workspace.\n- `npm.exclude` - Glob patterns for folders that should be excluded from automatic script detection. The pattern is matched against the **absolute path** of the package.json. For example, to exclude all test folders use '&ast;&ast;/test/&ast;&ast;'.\n- `npm.enableScriptExplorer` - Enable an explorer view for npm scripts.\n- `npm.scriptExplorerAction` - The default click action: `open` or `run`, the default is `open`.\n- `npm.enableRunFromFolder` - Enable running npm scripts from the context menu of folders in Explorer, the default is `false`.\n- `npm.scriptCodeLens.enable` - Enable/disable the code lenses to run a script, the default is `false`.\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Server Verbose Logging Configuration\nDESCRIPTION: VS Code setting to enable verbose logging of the communication between the CSS language features client and server, useful for debugging and troubleshooting.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"css.trace.server\": \"verbose\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Debug Adapter Process Factory in TypeScript\nDESCRIPTION: Defines an abstract factory class for creating debug adapter protocol clients. The class provides a basic structure to create, manage, and dispose DAP clients that communicate with debug adapters through various transport methods.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/docs/PULL_REQUEST_TEMPLATE/b.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport abstract class AbstractDebugAdapterProcessFactory<T extends IAdapterDescriptor> implements vscode.DebugAdapterDescriptorFactory {\n\n\tprivate trackers = new Set<IDebugAdapterTracker>();\n\n\tconstructor(\n\t\tprotected readonly registry: IDebugHelperRegistry,\n\t\tprivate readonly _extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@IExtensionHostDebugService protected readonly extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IWindowsService protected readonly windowsService: IWindowsService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IConnectLimiterFactory protected readonly limiterFactory: IConnectLimiterFactory,\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IOpenerService protected readonly openerService: IOpenerService,\n\t\t@INotificationService protected readonly notificationService: INotificationService,\n\t\t@IDialogService protected readonly dialogService: IDialogService,\n\t\t@ITelemetryService protected readonly telemetryService: ITelemetryService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t) { }\n\n\tprotected abstract createDebugAdapter(adapterDescriptor: T, session: vscode.DebugSession, telemetryReporter: ITelemetryEventProperties): IDebugAdapter;\n\n\tasync createDebugAdapterDescriptor(session: vscode.DebugSession, executable: vscode.DebugAdapterExecutable | undefined): Promise<vscode.DebugAdapterDescriptor | undefined> {\n\t\tconst adapterDescriptor = await this.getAdapterDescriptor(this.registry, session);\n\n\t\tif (adapterDescriptor === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tassert.ok(this.isSupported(adapterDescriptor), 'debugAdapterDescriptor is not valid; this factory only uses descriptors of certain types.');\n\n\t\tconst info = await this.getAdapterInfo(adapterDescriptor);\n\t\tconst renderer = this.getNotificationRenderer();\n\t\tconst telemetryReporter = new TelemetryReporter(this.telemetryService, this.configurationService, { type: adapterDescriptor.type, error: info?.error });\n\n\t\tconst adapter = await this.doCreate(adapterDescriptor, session, info, telemetryReporter);\n\t\twrapper = new DAPDebugAdapter(adapter, this.registry.getDebugger(session.type), session, telemetryReporter, this.extensionHostDebugService, renderer, this.configurationService, this.limiterFactory, this.openerService, this.dialogService, this.logService);\n\n\t\t// Apply any pending descriptors\n\t\tif (trackerFactories?.length) {\n\t\t\tcreateTrackers(wrapper, trackerFactories);\n\t\t}\n\n\t\treturn new ProxyDebugAdapter(wrapper);\n\t}\n\n\tcreateTrackers(session: vscode.DebugSession): vscode.DebugAdapterTracker[] {\n\t\tconst trackerFactories = this.registry.getDebuggerTrackerFactories(session.type);\n\t\treturn trackerFactories.map(tf => {\n\t\t\tconst tracker = tf.createDebugAdapterTracker(session);\n\t\t\tthis.trackers.add(tracker);\n\t\t\treturn tracker;\n\t\t});\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.trackers.forEach(t => t.dispose?.());\n\t\tthis.trackers.clear();\n\t}\n\n\tpublic abstract isSupported(adapterDescriptor: IAdapterDescriptor): adapterDescriptor is T;\n\n\tprotected abstract getAdapterDescriptor(registry: IDebugHelperRegistry, session: vscode.DebugSession): Promise<T | undefined>;\n\n\tprotected doCreate(adapterDescriptor: T, session: vscode.DebugSession, info: IAdapterInfo | undefined, telemetryReporter: ITelemetryEventProperties): IDebugAdapter {\n\t\treturn this.createDebugAdapter(adapterDescriptor, session, telemetryReporter);\n\t}\n\n\tprotected getAdapterInfo(adapterDescriptor: T): Promise<IAdapterInfo | undefined> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprotected getNotificationRenderer(): IDebugAdapterNotificationHandler {\n\t\treturn this.environmentService.extensionTestsLocationURI ? undefined : this.notificationService;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Move Range Downwards in JavaScript\nDESCRIPTION: This snippet extends the range of a move operation downwards by comparing original and modified lines. It checks for line similarity, set containment, and handles empty lines differently. The extension stops when dissimilar lines are found or set boundaries are reached.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/shifting-twice/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n\tconst origLine = move.original.endLineNumberExclusive + extendToBottom;\n\tconst modLine = move.modified.endLineNumberExclusive + extendToBottom;\n\tif (origLine > originalLines.length || modLine > modifiedLines.length) {\n\t\tbreak;\n\t}\n\tif (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n\t\tbreak;\n\t}\n\tif (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n\t\tbreak;\n\t}\n\tif (originalLines[origLine - 1].trim().length !== 0) {\n\t\textendToBottomWithoutEmptyLines = extendToBottom + 1;\n\t}\n}\n\nif (extendToBottomWithoutEmptyLines > 0) {\n\toriginalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottomWithoutEmptyLines));\n\tmodifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottomWithoutEmptyLines));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Language Server Settings\nDESCRIPTION: Example configuration for the JSON language server, including HTTP proxy settings, formatting options, and schema associations.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"http\": {\n        \"proxy\": \"\",\n        \"proxyStrictSSL\": true\n    },\n    \"json\": {\n        \"format\": {\n            \"enable\": true\n        },\n        \"schemas\": [\n            {\n                \"fileMatch\": [\n                    \"foo.json\",\n                    \"*.superfoo.json\"\n                ],\n                \"url\": \"http://json.schemastore.org/foo\",\n                \"schema\": {\n                    \"type\": \"array\"\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Smoke Tests in Various Environments\nDESCRIPTION: This snippet demonstrates how to run VS Code smoke tests in different scenarios, including development, build, and remote environments for both Electron and Web versions.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/smoke/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Build extensions in the VS Code repo (if needed)\nnpm i && npm run compile\n\n# Dev (Electron)\nnpm run smoketest\n\n# Dev (Web - Must be run on distro)\nnpm run smoketest -- --web --browser [chromium|webkit]\n\n# Build (Electron)\nnpm run smoketest -- --build <path to latest version>\nexample: npm run smoketest -- --build /Applications/Visual\\ Studio\\ Code\\ -\\ Insiders.app\n\n# Build (Web - read instructions below)\nnpm run smoketest -- --build <path to server web build (ends in -web)> --web --browser [chromium|webkit]\n\n# Remote (Electron)\nnpm run smoketest -- --build <path to latest version> --remote\n```\n\n----------------------------------------\n\nTITLE: Implementing a Direct Process Debug Adapter Factory in TypeScript\nDESCRIPTION: Implements a concrete factory for creating debug adapters that communicate directly with a child process. This class handles the specifics of launching and communicating with a debug adapter running as a separate process.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/docs/PULL_REQUEST_TEMPLATE/b.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n@injectable()\nexport class DirectDebugAdapterProcessFactory extends AbstractDebugAdapterProcessFactory<DebugAdapterExecutable> {\n\tprivate readonly _processes = new Set<IDebugAdapter>();\n\n\tconstructor(\n\t\t@IDebugHelperRegistry debugRegistry: IDebugHelperRegistry,\n\t\t@IExtensionHostDebugService extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionHostDebugService extensionHostDebugService2: IExtensionHostDebugService,\n\t\t@IWindowsService windowsService: IWindowsService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IConnectLimiterFactory limiterFactory: IConnectLimiterFactory,\n\t\t@IFileService fileService: IFileService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(debugRegistry, extensionHostDebugService, configurationService, extensionHostDebugService2, windowsService, environmentService, limiterFactory, fileService, openerService, notificationService, dialogService, telemetryService, logService);\n\t}\n\n\tisSupported(adapterDescriptor: IAdapterDescriptor): adapterDescriptor is DebugAdapterExecutable {\n\t\treturn adapterDescriptor instanceof DebugAdapterExecutable;\n\t}\n\n\tcreateDebugAdapter(executable: DebugAdapterExecutable, session: vscode.DebugSession, telemetryReporter: ITelemetryEventProperties): IDebugAdapter {\n\t\tconst adapter = new ExecutableDebugAdapter(executable, this.limiterFactory.create(), this.fileService, this.logService);\n\t\tthis._processes.add(adapter);\n\t\treturn adapter;\n\t}\n\n\tprotected override getAdapterDescriptor(registry: IDebugHelperRegistry, session: vscode.DebugSession): Promise<DebugAdapterExecutable | undefined> {\n\t\treturn Promise.resolve(registry.getDebugAdapterExecutable(session.type, session));\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tfor (const process of this._processes) {\n\t\t\tprocess.dispose();\n\t\t}\n\t\tthis._processes.clear();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Shortcuts in Visual Studio Code\nDESCRIPTION: A table detailing keyboard shortcut mappings for Visual Studio Code. It includes hardware code combinations, key codes, UI labels, user settings, Electron accelerators, and dispatching strings for various key combinations.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_us.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: true\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   a   |                     Alt+A |     |                     Alt+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   a   |                Ctrl+Alt+A |     |                Ctrl+Alt+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |               Shift+Alt+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   A   |          Ctrl+Shift+Alt+A |     |          Ctrl+Shift+Alt+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   b   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   b   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   b   |                     Alt+B |     |                     Alt+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   b   |                Ctrl+Alt+B |     |                Ctrl+Alt+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |               Shift+Alt+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |   B   |          Ctrl+Shift+Alt+B |     |          Ctrl+Shift+Alt+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   c   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   c   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   c   |                     Alt+C |     |                     Alt+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   c   |                Ctrl+Alt+C |     |                Ctrl+Alt+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |               Shift+Alt+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |   C   |          Ctrl+Shift+Alt+C |     |          Ctrl+Shift+Alt+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   d   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   d   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   d   |                     Alt+D |     |                     Alt+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   d   |                Ctrl+Alt+D |     |                Ctrl+Alt+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |               Shift+Alt+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   D   |          Ctrl+Shift+Alt+D |     |          Ctrl+Shift+Alt+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   e   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   e   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   e   |                     Alt+E |     |                     Alt+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   e   |                Ctrl+Alt+E |     |                Ctrl+Alt+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Smoke Tests for a Specific Release\nDESCRIPTION: This snippet shows how to run smoke tests for a specific VS Code release version, ensuring that the test version matches the release being tested.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/smoke/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\ngit checkout release/1.22\nnpm i && npm run compile\ncd test/smoke\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Importing Sublime Text Keybindings in JavaScript\nDESCRIPTION: This function imports Sublime Text keybindings by parsing the JSON and converting key sequences to VS Code format. It handles special cases like multi-part bindings and platform-specific bindings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/search/test/node/fixtures/examples/subfolder/subfile.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// sub\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table for VS Code\nDESCRIPTION: A detailed table showing keyboard shortcut mappings for Visual Studio Code. It includes hardware code combinations, key codes, UI labels, user settings, Electron accelerators, and dispatching strings for various key combinations.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_en_us.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: true\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   a   |                     Alt+A |     |                  Option+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   å   |                Ctrl+Alt+A |     |             Ctrl+Option+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |            Shift+Option+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   Å   |          Ctrl+Shift+Alt+A |     |       Ctrl+Shift+Option+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   b   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   b   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   b   |                     Alt+B |     |                  Option+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   ∫   |                Ctrl+Alt+B |     |             Ctrl+Option+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |            Shift+Option+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |   ı   |          Ctrl+Shift+Alt+B |     |       Ctrl+Shift+Option+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   c   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   c   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   c   |                     Alt+C |     |                  Option+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   ç   |                Ctrl+Alt+C |     |             Ctrl+Option+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |            Shift+Option+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |   Ç   |          Ctrl+Shift+Alt+C |     |       Ctrl+Shift+Option+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   d   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   d   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   d   |                     Alt+D |     |                  Option+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   ∂   |                Ctrl+Alt+D |     |             Ctrl+Option+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |            Shift+Option+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   Î   |          Ctrl+Shift+Alt+D |     |       Ctrl+Shift+Option+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   e   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   e   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   e   |                     Alt+E |     |                  Option+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   ´   |                Ctrl+Alt+E |     |             Ctrl+Option+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Unit Tests in Electron\nDESCRIPTION: Executes unit tests inside an Electron renderer environment, which closely resembles VS Code's shipping environment. Supports debugging, test subset selection, and automatic recompilation.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/unit/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test.[sh|bat]\n```\n\n----------------------------------------\n\nTITLE: Registering a Command in VS Code Extension (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register a command in a VS Code extension using the vscode.commands.registerCommand method. It shows the basic structure of command registration and execution.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/search/test/node/fixtures/examples/subfolder/anotherfolder/anotherfile.txt#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.commands.registerCommand('myExtension.helloWorld', () => {\n    vscode.window.showInformationMessage('Hello World from My Extension!');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WebWorkerManager Class in TypeScript\nDESCRIPTION: This code defines the WebWorkerManager class that handles the creation and management of web workers. It provides methods to register worker factories and create workers with specific module IDs and creation options.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE/x.txt#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass WebWorkerManager {\n\n\tprivate _factories = new Map<string, IWebWorkerFactory>();\n\n\tconstructor() { }\n\n\t/**\n\t * Register a web worker factory.\n\t */\n\tregister(factory: IWebWorkerFactory): void {\n\t\tthis._factories.set(factory.label, factory);\n\t}\n\n\t/**\n\t * Create a new web worker\n\t * @param moduleId the AMD module to load in the worker.\n\t * @param label The label.\n\t * @param options Worker options.\n\t */\n\tcreateWorker(moduleId: string, label: string, options: WorkerOptions = {}): IWorker {\n\t\tconst factory = this._factories.get(label);\n\t\tif (!factory) {\n\t\t\tthrow new Error(`Not found: factory for ${label}`);\n\t\t}\n\t\treturn factory.create(moduleId, options);\n\t}\n\n\t/**\n\t * Create a new shared web worker\n\t * @param moduleId the AMD module to load in the worker.\n\t * @param label The label.\n\t * @param name A unique name that can be used to target the same shared worker.\n\t */\n\tcreateSharedWorker(moduleId: string, label: string, name: string): ISharedWorker {\n\t\tconst factory = this._factories.get(label);\n\t\tif (!factory) {\n\t\t\tthrow new Error(`Not found: factory for ${label}`);\n\t\t}\n\t\treturn factory.createShared(moduleId, name);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Document Change Events in VS Code Extension (TypeScript)\nDESCRIPTION: This code snippet shows how to subscribe to document change events in a VS Code extension. It uses the workspace.onDidChangeTextDocument event to listen for changes in the active text editor.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/search/test/node/fixtures/examples/subfolder/anotherfolder/anotherfile.txt#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvscode.workspace.onDidChangeTextDocument(event => {\n    if (event.document === vscode.window.activeTextEditor?.document) {\n        console.log('The active document has changed');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table Header Definition (Markdown)\nDESCRIPTION: Defines the header row for the keyboard shortcut mapping tables, explaining the meaning of each column: HW Code combination, Key, KeyCode combination, Priority (Pri), UI label, User settings representation, Electron accelerator, Dispatching string, and WYSIWYG status.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Setting Up the JSON Language Service Development Environment\nDESCRIPTION: Series of commands to clone, install dependencies, and link the vscode-json-languageservice library for development purposes.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Setting Object Properties Recursively for DOM Clobbering Protection in JavaScript\nDESCRIPTION: Function that recursively sets properties on an object, providing protection against DOM clobbering attacks by safely handling property assignments. It ensures properties are set appropriately based on their value types.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Set referenceable object properties recursively.\n * This is a mitigation for DOM clobbering.\n */\nexport function recursivelySetProperty(object: any, key: string, value: any) {\n\tconst parts = key.split('.');\n\tlet current = object;\n\n\tfor (let i = 0; i < parts.length - 1; ++i) {\n\t\tconst part = parts[i];\n\t\tif (!Object.prototype.hasOwnProperty.call(current, part) || typeof current[part] !== 'object') {\n\t\t\tcurrent[part] = {};\n\t\t}\n\n\t\tcurrent = current[part];\n\t}\n\n\tconst lastKey = parts[parts.length - 1];\n\tcurrent[lastKey] = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TreeView in VS Code Extension (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a TreeView in a VS Code extension. It includes the creation of a TreeDataProvider and registering it with the window.registerTreeDataProvider method.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/search/test/node/fixtures/examples/subfolder/anotherfolder/anotherfile.txt#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyTreeDataProvider implements vscode.TreeDataProvider<string> {\n    getTreeItem(element: string): vscode.TreeItem {\n        return new vscode.TreeItem(element);\n    }\n\n    getChildren(element?: string): Thenable<string[]> {\n        return Promise.resolve(['Item 1', 'Item 2', 'Item 3']);\n    }\n}\n\nvscode.window.registerTreeDataProvider('myTreeView', new MyTreeDataProvider());\n```\n\n----------------------------------------\n\nTITLE: Header Definition for VS Code Key Mapping Tables\nDESCRIPTION: This Markdown table defines the header row used in the subsequent key mapping tables. It specifies the columns: HW Code combination, Key, KeyCode combination, Pri (Priority), UI label, User settings, Electron accelerator, Dispatching string, and WYSIWYG.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Integration Tests in Browser\nDESCRIPTION: Command to run integration tests in a specified browser (chromium or webkit). The --debug flag can be added to see a browser window with the tests running.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/integration/browser/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nscripts/test-web-integration.[sh|bat] --browser [chromium|webkit] [--debug]\n```\n\n----------------------------------------\n\nTITLE: Generating VS Code Test Coverage Report (Unix)\nDESCRIPTION: Creates a test coverage report in the '.build/coverage' folder for Unix-based systems.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/unit/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test.sh --coverage\n```\n\n----------------------------------------\n\nTITLE: Creating Strict Content Security Policy for Markdown Preview Iframe in JavaScript\nDESCRIPTION: Function that generates a strict Content Security Policy for the Markdown preview iframe. It includes specific directives to prevent various attack vectors by restricting resource loading and script execution.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCspForStrictIframe(settings: any, nonce: string): string {\n\tconst directives = [\n\t\t['default-src', \"'none'\"],\n\t\t['img-src', 'https: data: blob:'],\n\t\t['media-src', 'https: data:'],\n\t\t['frame-src', supportedVideoMimes.length ? 'https:' : \"'none'\"],\n\t\t['font-src', 'https: data:'],\n\t\t['style-src', supportedFontMimes.length ? 'https: data: blob:' : \"'none'\"],\n\t];\n\n\tif (nonce) {\n\t\t// We have a nonce and can use it for allowing our style-src\n\t\tdirectives.push(['style-src', `'nonce-${nonce}'`]);\n\t} else {\n\t\t// Unsafe-inline style-src needed for style attributes\n\t\tdirectives.push(['style-src', \"'unsafe-inline'\"]);\n\t}\n\n\treturn directives\n\t\t.map(([directive, value]) => `${directive} ${value};`)\n\t\t.join(' ');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Diff Computation Interfaces in TypeScript\nDESCRIPTION: Imports the essential interfaces used for diff computation in VS Code. IChange likely represents a single change/difference, while IDiffComputationResult represents the complete result of a difference calculation between two texts.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/penalize-fragmentation/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { IChange, IDiffComputationResult } from 'vs/editor/common/diff/diffComputer';\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut Mapping Table (Keys E-J)\nDESCRIPTION: A Markdown table detailing the mapping of hardware key combinations (e.g., `Shift+Alt+KeyE`) to their corresponding key character, KeyCode combination, UI label (including Mac variations like Option), user settings string, Electron accelerator format, and internal dispatching string for keys E through J. This table serves as a reference for how different key combinations are interpreted and represented within the VS Code environment.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                 Shift+Alt+KeyE |   E   |               Shift+Alt+E |     |            Shift+Option+E |                    shift+alt+e |               Shift+Alt+E |               shift+alt+[KeyE] |         |\n|            Ctrl+Shift+Alt+KeyE |   助   |          Ctrl+Shift+Alt+E |     |       Ctrl+Shift+Option+E |               ctrl+shift+alt+e |          Ctrl+Shift+Alt+E |          ctrl+shift+alt+[KeyE] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyF |   f   |                         F |     |                         F |                              f |                         F |                         [KeyF] |         |\n|                      Ctrl+KeyF |   f   |                    Ctrl+F |     |                    Ctrl+F |                         ctrl+f |                    Ctrl+F |                    ctrl+[KeyF] |         |\n|                     Shift+KeyF |   F   |                   Shift+F |     |                   Shift+F |                        shift+f |                   Shift+F |                   shift+[KeyF] |         |\n|                Ctrl+Shift+KeyF |   F   |              Ctrl+Shift+F |     |              Ctrl+Shift+F |                   ctrl+shift+f |              Ctrl+Shift+F |              ctrl+shift+[KeyF] |         |\n|                       Alt+KeyF |   f   |                     Alt+F |     |                  Option+F |                          alt+f |                     Alt+F |                     alt+[KeyF] |         |\n|                  Ctrl+Alt+KeyF |   ƒ   |                Ctrl+Alt+F |     |             Ctrl+Option+F |                     ctrl+alt+f |                Ctrl+Alt+F |                ctrl+alt+[KeyF] |         |\n|                 Shift+Alt+KeyF |   F   |               Shift+Alt+F |     |            Shift+Option+F |                    shift+alt+f |               Shift+Alt+F |               shift+alt+[KeyF] |         |\n|            Ctrl+Shift+Alt+KeyF |   Ï   |          Ctrl+Shift+Alt+F |     |       Ctrl+Shift+Option+F |               ctrl+shift+alt+f |          Ctrl+Shift+Alt+F |          ctrl+shift+alt+[KeyF] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyG |   g   |                         G |     |                         G |                              g |                         G |                         [KeyG] |         |\n|                      Ctrl+KeyG |   g   |                    Ctrl+G |     |                    Ctrl+G |                         ctrl+g |                    Ctrl+G |                    ctrl+[KeyG] |         |\n|                     Shift+KeyG |   G   |                   Shift+G |     |                   Shift+G |                        shift+g |                   Shift+G |                   shift+[KeyG] |         |\n|                Ctrl+Shift+KeyG |   G   |              Ctrl+Shift+G |     |              Ctrl+Shift+G |                   ctrl+shift+g |              Ctrl+Shift+G |              ctrl+shift+[KeyG] |         |\n|                       Alt+KeyG |   g   |                     Alt+G |     |                  Option+G |                          alt+g |                     Alt+G |                     alt+[KeyG] |         |\n|                  Ctrl+Alt+KeyG |   ©   |                Ctrl+Alt+G |     |             Ctrl+Option+G |                     ctrl+alt+g |                Ctrl+Alt+G |                ctrl+alt+[KeyG] |         |\n|                 Shift+Alt+KeyG |   G   |               Shift+Alt+G |     |            Shift+Option+G |                    shift+alt+g |               Shift+Alt+G |               shift+alt+[KeyG] |         |\n|            Ctrl+Shift+Alt+KeyG |   ˝   |          Ctrl+Shift+Alt+G |     |       Ctrl+Shift+Option+G |               ctrl+shift+alt+g |          Ctrl+Shift+Alt+G |          ctrl+shift+alt+[KeyG] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyH |   h   |                         H |     |                         H |                              h |                         H |                         [KeyH] |         |\n|                      Ctrl+KeyH |   h   |                    Ctrl+H |     |                    Ctrl+H |                         ctrl+h |                    Ctrl+H |                    ctrl+[KeyH] |         |\n|                     Shift+KeyH |   H   |                   Shift+H |     |                   Shift+H |                        shift+h |                   Shift+H |                   shift+[KeyH] |         |\n|                Ctrl+Shift+KeyH |   H   |              Ctrl+Shift+H |     |              Ctrl+Shift+H |                   ctrl+shift+h |              Ctrl+Shift+H |              ctrl+shift+[KeyH] |         |\n|                       Alt+KeyH |   h   |                     Alt+H |     |                  Option+H |                          alt+h |                     Alt+H |                     alt+[KeyH] |         |\n|                  Ctrl+Alt+KeyH |   ˙   |                Ctrl+Alt+H |     |             Ctrl+Option+H |                     ctrl+alt+h |                Ctrl+Alt+H |                ctrl+alt+[KeyH] |         |\n|                 Shift+Alt+KeyH |   H   |               Shift+Alt+H |     |            Shift+Option+H |                    shift+alt+h |               Shift+Alt+H |               shift+alt+[KeyH] |         |\n|            Ctrl+Shift+Alt+KeyH |   半   |          Ctrl+Shift+Alt+H |     |       Ctrl+Shift+Option+H |               ctrl+shift+alt+h |          Ctrl+Shift+Alt+H |          ctrl+shift+alt+[KeyH] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyI |   i   |                         I |     |                         I |                              i |                         I |                         [KeyI] |         |\n|                      Ctrl+KeyI |   i   |                    Ctrl+I |     |                    Ctrl+I |                         ctrl+i |                    Ctrl+I |                    ctrl+[KeyI] |         |\n|                     Shift+KeyI |   I   |                   Shift+I |     |                   Shift+I |                        shift+i |                   Shift+I |                   shift+[KeyI] |         |\n|                Ctrl+Shift+KeyI |   I   |              Ctrl+Shift+I |     |              Ctrl+Shift+I |                   ctrl+shift+i |              Ctrl+Shift+I |              ctrl+shift+[KeyI] |         |\n|                       Alt+KeyI |   i   |                     Alt+I |     |                  Option+I |                          alt+i |                     Alt+I |                     alt+[KeyI] |         |\n|                  Ctrl+Alt+KeyI |   ˆ   |                Ctrl+Alt+I |     |             Ctrl+Option+I |                     ctrl+alt+i |                Ctrl+Alt+I |                ctrl+alt+[KeyI] |         |\n|                 Shift+Alt+KeyI |   I   |               Shift+Alt+I |     |            Shift+Option+I |                    shift+alt+i |               Shift+Alt+I |               shift+alt+[KeyI] |         |\n|            Ctrl+Shift+Alt+KeyI |   ˆ   |          Ctrl+Shift+Alt+I |     |       Ctrl+Shift+Option+I |               ctrl+shift+alt+i |          Ctrl+Shift+Alt+I |          ctrl+shift+alt+[KeyI] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyJ |   j   |                         J |     |                         J |                              j |                         J |                         [KeyJ] |         |\n|                      Ctrl+KeyJ |   j   |                    Ctrl+J |     |                    Ctrl+J |                         ctrl+j |                    Ctrl+J |                    ctrl+[KeyJ] |         |\n|                     Shift+KeyJ |   J   |                   Shift+J |     |                   Shift+J |                        shift+j |                   Shift+J |                   shift+[KeyJ] |         |\n|                Ctrl+Shift+KeyJ |   J   |              Ctrl+Shift+J |     |              Ctrl+Shift+J |                   ctrl+shift+j |              Ctrl+Shift+J |              ctrl+shift+[KeyJ] |         |\n|                       Alt+KeyJ |   j   |                     Alt+J |     |                  Option+J |                          alt+j |                     Alt+J |                     alt+[KeyJ] |         |\n|                  Ctrl+Alt+KeyJ |   ∆   |                Ctrl+Alt+J |     |             Ctrl+Option+J |                     ctrl+alt+j |                Ctrl+Alt+J |                ctrl+alt+[KeyJ] |         |\n```\n\n----------------------------------------\n\nTITLE: Generating VS Code Test Coverage Report (Windows)\nDESCRIPTION: Creates a test coverage report in the '.build/coverage' folder for Windows systems.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/unit/README.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nscripts\\test --coverage\n```\n\n----------------------------------------\n\nTITLE: Adding Git Extension Dependency in package.json\nDESCRIPTION: This snippet shows how to ensure the Git extension is activated before your extension by adding it as a dependency in your extension's package.json file.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/git/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"extensionDependencies\": [\n\t\"vscode.git\"\n]\n```\n\n----------------------------------------\n\nTITLE: Extending Moved Line Ranges Downward in TypeScript\nDESCRIPTION: This snippet extends a detected line move by checking additional lines below the initial match. It stops extending when it reaches the end of the file, encounters a line that's already part of another move, or finds lines that aren't similar enough. After determining how many lines to extend, it updates the original and modified line range sets.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/shifting-twice/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfor (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n\tconst origLine = move.original.endLineNumberExclusive + extendToBottom;\n\tconst modLine = move.modified.endLineNumberExclusive + extendToBottom;\n\tif (origLine > originalLines.length || modLine > modifiedLines.length) {\n\t\tbreak;\n\t}\n\tif (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n\t\tbreak;\n\t}\n\tif (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n\t\tbreak;\n\t}\n}\n\nif (extendToBottom > 0) {\n\toriginalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\n\tmodifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\n}\n```\n\n----------------------------------------\n\nTITLE: Developing VS Code Smoke Tests\nDESCRIPTION: This command sets up a watch process for developing smoke tests, allowing for automatic recompilation of test files when changes are made.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/smoke/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd test/smoke\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Mapping KeyY/Z Keyboard Shortcuts in Markdown\nDESCRIPTION: Markdown table defining mappings for KeyY and KeyZ combined with Ctrl, Shift, and Alt modifiers across various representations like KeyCode, UI Label, User Settings, Electron Accelerator, and Dispatching String. This table details the resulting character and representation for each combination.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_de_ch.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                Ctrl+Shift+KeyY |   Z   |              Ctrl+Shift+Z |     |              Ctrl+Shift+Z |                   ctrl+shift+z |              Ctrl+Shift+Z |              ctrl+shift+[KeyY] |         |\n|                       Alt+KeyY |   z   |                     Alt+Z |     |                  Option+Z |                          alt+z |                     Alt+Z |                     alt+[KeyY] |         |\n|                  Ctrl+Alt+KeyY |   Ω   |                Ctrl+Alt+Z |     |             Ctrl+Option+Z |                     ctrl+alt+z |                Ctrl+Alt+Z |                ctrl+alt+[KeyY] |         |\n|                 Shift+Alt+KeyY |   Z   |               Shift+Alt+Z |     |            Shift+Option+Z |                    shift+alt+z |               Shift+Alt+Z |               shift+alt+[KeyY] |         |\n|            Ctrl+Shift+Alt+KeyY |   Í   |          Ctrl+Shift+Alt+Z |     |       Ctrl+Shift+Option+Z |               ctrl+shift+alt+z |          Ctrl+Shift+Alt+Z |          ctrl+shift+alt+[KeyY] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyZ |   y   |                         Y |     |                         Y |                              y |                         Y |                         [KeyZ] |         |\n|                      Ctrl+KeyZ |   y   |                    Ctrl+Y |     |                    Ctrl+Y |                         ctrl+y |                    Ctrl+Y |                    ctrl+[KeyZ] |         |\n|                     Shift+KeyZ |   Y   |                   Shift+Y |     |                   Shift+Y |                        shift+y |                   Shift+Y |                   shift+[KeyZ] |         |\n|                Ctrl+Shift+KeyZ |   Y   |              Ctrl+Shift+Y |     |              Ctrl+Shift+Y |                   ctrl+shift+y |              Ctrl+Shift+Y |              ctrl+shift+[KeyZ] |         |\n|                       Alt+KeyZ |   y   |                     Alt+Y |     |                  Option+Y |                          alt+y |                     Alt+Y |                     alt+[KeyZ] |         |\n|                  Ctrl+Alt+KeyZ |   ¥   |                Ctrl+Alt+Y |     |             Ctrl+Option+Y |                     ctrl+alt+y |                Ctrl+Alt+Y |                ctrl+alt+[KeyZ] |         |\n|                 Shift+Alt+KeyZ |   Y   |               Shift+Alt+Y |     |            Shift+Option+Y |                    shift+alt+y |               Shift+Alt+Y |               shift+alt+[KeyZ] |         |\n|            Ctrl+Shift+Alt+KeyZ |   Ÿ   |          Ctrl+Shift+Alt+Y |     |       Ctrl+Shift+Option+Y |               ctrl+shift+alt+y |          Ctrl+Shift+Alt+Y |          ctrl+shift+alt+[KeyZ] |         |\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Task Auto-Detection in VS Code Settings\nDESCRIPTION: Setting to enable or disable automatic detection of Grunt tasks from gruntfile.js files. The default value is 'on'.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/grunt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `grunt.autoDetect` - Enable detecting tasks from `gruntfile.js` files, the default is `on`.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for HTML Language Features Extension\nDESCRIPTION: Command to install all necessary dependencies for the HTML Language Features extension and its server component. This also installs development dependencies such as gulp.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Adding View to SplitView in TypeScript\nDESCRIPTION: Method for adding a new view to a split view component with support for different sizing modes (fixed, distributed, split) and orientations (vertical, horizontal). Handles view container creation, size calculation, and view item initialization with proper disposal management.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-185779/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprivate doAddView(view: IView<TLayoutContext>, size: number | Sizing, index = this.viewItems.length, skipLayout?: boolean): void {\n\t\tif (this.state !== State.Idle) {\n\t\t\tthrow new Error('Cant modify splitview');\n\t\t}\n\n\t\tthis.state = State.Busy;\n\n\t\t// Add view\n\t\tconst container = $('.split-view-view');\n\n\t\tif (index === this.viewItems.length) {\n\t\t\tthis.viewContainer.appendChild(container);\n\t\t} else {\n\t\t\tthis.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n\t\t}\n\n\t\tconst onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n\t\tconst containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n\t\tconst disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n\n\t\tlet viewSize: ViewItemSize;\n\n\t\tif (typeof size === 'number') {\n\t\t\tviewSize = size;\n\t\t} else {\n\t\t\tif (size.type === 'auto') {\n\t\t\t\tif (this.areViewsDistributed()) {\n\t\t\t\t\tsize = { type: 'distribute' };\n\t\t\t\t} else {\n\t\t\t\t\tsize = { type: 'split', index: size.index };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (size.type === 'split') {\n\t\t\t\tviewSize = this.getViewSize(size.index) / 2;\n\t\t\t} else if (size.type === 'invisible') {\n\t\t\t\tviewSize = { cachedVisibleSize: size.cachedVisibleSize };\n\t\t\t} else {\n\t\t\t\tviewSize = view.minimumSize;\n\t\t\t}\n\t\t}\n\n\t\tconst item = this.orientation === Orientation.VERTICAL\n\t\t\t? new VerticalViewItem(container, view, viewSize, disposable)\n\t\t\t: new HorizontalViewItem(container, view, viewSize, disposable);\n\n\t\tthis.viewItems.splice(index, 0, item);\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Integration Tests in Electron\nDESCRIPTION: Command to run integration tests in an Electron instance. Environment variables can be set to run tests against a real build.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/integration/browser/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscripts/test-integration.[sh|bat]\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table for VSCode\nDESCRIPTION: This table provides a detailed mapping of keyboard shortcuts for VSCode. It includes hardware key combinations, key symbols, KeyCode combinations, UI labels, user settings, Electron accelerators, and dispatching strings. The table covers various key combinations involving Ctrl, Shift, and Alt modifiers for keys A through E.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_de_ch.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: false\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   a   |                     Alt+A |     |                     Alt+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   æ   |                Ctrl+Alt+A |     |                Ctrl+Alt+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |               Shift+Alt+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   Æ   |          Ctrl+Shift+Alt+A |     |          Ctrl+Shift+Alt+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   b   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   b   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   b   |                     Alt+B |     |                     Alt+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   \"   |                Ctrl+Alt+B |     |                Ctrl+Alt+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |               Shift+Alt+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |   '   |          Ctrl+Shift+Alt+B |     |          Ctrl+Shift+Alt+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   c   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   c   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   c   |                     Alt+C |     |                     Alt+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   ¢   |                Ctrl+Alt+C |     |                Ctrl+Alt+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |               Shift+Alt+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |   ©   |          Ctrl+Shift+Alt+C |     |          Ctrl+Shift+Alt+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   d   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   d   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   d   |                     Alt+D |     |                     Alt+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   ð   |                Ctrl+Alt+D |     |                Ctrl+Alt+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |               Shift+Alt+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   Ð   |          Ctrl+Shift+Alt+D |     |          Ctrl+Shift+Alt+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   e   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   e   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   e   |                     Alt+E |     |                     Alt+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   €   |                Ctrl+Alt+E |     |                Ctrl+Alt+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Compiling CSS Language Features Extension\nDESCRIPTION: Command to compile the CSS language features client and server, with an optional watch mode for continuous compilation during development.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for HTML Language Service\nDESCRIPTION: Command to install all necessary dependencies for the vscode-html-languageservice repository, which contains the language smarts for HTML that the extension wraps.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing JSON Language Server via NPM\nDESCRIPTION: This command installs the vscode-json-languageserver npm module globally, which is necessary for integrating the JSON language server into an editor or IDE.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/server/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g vscode-json-languageserver\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Unit Tests with Node.js\nDESCRIPTION: Executes specific unit tests using Node.js. This example demonstrates running a single test file.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/unit/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-node -- --run src/vs/editor/test/browser/controller/cursor.test.ts\n```\n\n----------------------------------------\n\nTITLE: Simple Code Example in Markdown\nDESCRIPTION: Demonstrates how to include a simple code snippet in Markdown using indentation. The code shows a comment and a function call.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n    // Code is just text indented a bit\n    which(is_easy) to_remember();\n```\n\n----------------------------------------\n\nTITLE: Linking HTML Language Service for Development\nDESCRIPTION: Command to compile and link the vscode-html-languageservice repository for local development. This creates a global symlink that can be used by other packages.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Unit Tests in Browser\nDESCRIPTION: Runs unit tests from 'common' and 'browser' layers in Chromium and WebKit browsers using Playwright. This complements the Electron-based tests and increases platform coverage.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/unit/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-browser -- --browser webkit --browser chromium\n```\n\n----------------------------------------\n\nTITLE: Linking CSS Language Service for Development\nDESCRIPTION: Command that compiles and creates a global npm link for the CSS language service, allowing it to be used in local development.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Running VS Code Web Server with COI Enabled\nDESCRIPTION: Command to start the VS Code web server with Cross-Origin Isolation (COI) enabled, which is necessary for using SharedArrayBuffer in the browser.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/web/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode <root>/scripts/code-web.js --coi\n```\n\n----------------------------------------\n\nTITLE: Code Block with Tilde Wrapping in Markdown\nDESCRIPTION: Shows how to create a code block in Markdown using tilde wrapping. The example includes a conditional statement and a comment about formatting.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n~~~\n// Markdown extra adds un-indented code blocks too\n\nif (this_is_more_code == true && !indented) {\n    // tild wrapped code blocks, also not indented\n}\n~~~\n```\n\n----------------------------------------\n\nTITLE: Registering a Command in VS Code Extension (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register a command in a VS Code extension. It uses the `vscode.commands.registerCommand` method to create a command that displays a message when executed.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/search/test/node/fixtures2/36438/more/modules/find.txt#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n    let disposable = vscode.commands.registerCommand('myExtension.helloWorld', () => {\n        vscode.window.showInformationMessage('Hello World from MyExtension!');\n    });\n\n    context.subscriptions.push(disposable);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Typing Animation in VS Code (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to implement a smooth typing animation effect in Visual Studio Code. It uses timeouts to simulate typing with variable delays between characters to create a more natural appearance instead of showing the whole text instantly.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/docs/PULL_REQUEST_TEMPLATE/a.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SmoothTypeAnimation {\n    private static readonly baseCursorDelay = 40;\n    private static readonly perCharacterDelay = 10;\n\n    private readonly timeouts: number[] = [];\n\n    constructor(\n        private readonly editor: ICodeEditor,\n        private readonly position: Position,\n        private readonly text: string,\n        private readonly completionKind: CompletionItemKind\n    ) { }\n\n    public play() {\n        // Clear any previous animation\n        this.stop();\n\n        const textLength = this.text.length;\n        let totalDelay = 0;\n        \n        for (let i = 0; i < textLength; i++) {\n            const characterDelay = SmoothTypeAnimation.baseCursorDelay + (SmoothTypeAnimation.perCharacterDelay * i);\n            totalDelay += characterDelay;\n            \n            const timeout = window.setTimeout(() => {\n                this.editor.executeEdits('smooth-type-animation', [{\n                    range: new Range(this.position.lineNumber, this.position.column, this.position.lineNumber, this.position.column + i),\n                    text: this.text.substring(0, i + 1)\n                }]);\n            }, totalDelay);\n            \n            this.timeouts.push(timeout);\n        }\n    }\n\n    public stop() {\n        this.timeouts.forEach(timeout => window.clearTimeout(timeout));\n        this.timeouts.length = 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CSS Language Service\nDESCRIPTION: Command to install dependencies for the vscode-css-languageservice repository when contributing to the core language service.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Linking HTML Language Service to Server Component\nDESCRIPTION: Command to link the locally developed version of vscode-html-languageservice to the server component of the HTML Language Features extension, allowing testing of changes to the language service.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm link vscode-html-languageservice\n```\n\n----------------------------------------\n\nTITLE: Representing Code Block in Markdown using HTML Tags\nDESCRIPTION: This snippet shows how to represent a code block in Markdown using HTML <pre> and <code> tags. It's a way to ensure code formatting in environments that might not fully support Markdown syntax.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test-33886.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<pre><code>\n# a\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Naming Convention for New API Proposal Files\nDESCRIPTION: When creating a new API proposal, the file name must follow this specific pattern. This ensures consistency and proper integration with the VS Code API system.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vscode-dts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nvscode.proposed.[a-zA-Z]+.d.ts\n```\n\n----------------------------------------\n\nTITLE: Compiling HTML Language Features Extension\nDESCRIPTION: Command to compile both the client and server components of the HTML Language Features extension. Alternatively, the watch command can be used for continuous compilation during development.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Embedding Koka Function in HTML Script Tag\nDESCRIPTION: Demonstrates how to embed a Koka function within an HTML script tag using a custom MIME type. The function takes an integer and returns its square.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type='text/x-koka'>\n    function( x: int ) { return x*x; }\n  </script>\n```\n\n----------------------------------------\n\nTITLE: Publishing commands for monaco-editor-core\nDESCRIPTION: Commands to navigate to the output directory and publish the monaco-editor-core package to npm.\nSOURCE: https://github.com/microsoft/vscode/blob/main/build/monaco/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd out-monaco-editor-core\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL on Windows using vcpkg\nDESCRIPTION: Command to install the OpenSSL library for static linking on Windows (x64) using the vcpkg package manager.\nSOURCE: https://github.com/microsoft/vscode/blob/main/cli/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nvcpkg install openssl:x64-windows-static-md\n```\n\n----------------------------------------\n\nTITLE: Linking JSON Language Service to the Server\nDESCRIPTION: Command to link the development version of vscode-json-languageservice to the JSON language server. Run this in the server directory.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm link vscode-json-languageservice\n```\n\n----------------------------------------\n\nTITLE: Sequential Number Logging in JavaScript\nDESCRIPTION: This code demonstrates basic console logging in JavaScript, printing numbers 1 through 4 sequentially. It can be used for simple debugging or as a minimal example of JavaScript console output.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/intra-block-align/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(1);\nconsole.log(2);\nconsole.log(3);\nconsole.log(4);\n```\n\n----------------------------------------\n\nTITLE: Running Monaco Editor Tests\nDESCRIPTION: This command executes the compiled Monaco Editor tests, verifying the functionality of the distribution.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/monaco/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n $test/monaco> npm run test\n```\n\n----------------------------------------\n\nTITLE: Implementing a Server Debug Adapter Factory in TypeScript\nDESCRIPTION: Implements a concrete factory for creating debug adapters that communicate with a debug server. This class handles connecting to a server that implements the Debug Adapter Protocol rather than launching a new process.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/docs/PULL_REQUEST_TEMPLATE/b.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n@injectable()\nexport class ServerDebugAdapterProcessFactory extends AbstractDebugAdapterProcessFactory<DebugAdapterServer> {\n\tprivate readonly _adapters = new Set<IDebugAdapter>();\n\n\tconstructor(\n\t\t@IDebugHelperRegistry debugRegistry: IDebugHelperRegistry,\n\t\t@IExtensionHostDebugService extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionHostDebugService extensionHostDebugService2: IExtensionHostDebugService,\n\t\t@IWindowsService windowsService: IWindowsService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IConnectLimiterFactory limiterFactory: IConnectLimiterFactory,\n\t\t@IFileService fileService: IFileService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(debugRegistry, extensionHostDebugService, configurationService, extensionHostDebugService2, windowsService, environmentService, limiterFactory, fileService, openerService, notificationService, dialogService, telemetryService, logService);\n\t}\n\n\tisSupported(adapterDescriptor: IAdapterDescriptor): adapterDescriptor is DebugAdapterServer {\n\t\treturn adapterDescriptor instanceof DebugAdapterServer;\n\t}\n\n\tcreateDebugAdapter(server: DebugAdapterServer, session: vscode.DebugSession, telemetryReporter: ITelemetryEventProperties): IDebugAdapter {\n\t\tconst adapter = new SocketDebugAdapter(server, this.limiterFactory.create(), this.logService);\n\t\tthis._adapters.add(adapter);\n\t\treturn adapter;\n\t}\n\n\tprotected override getAdapterDescriptor(registry: IDebugHelperRegistry, session: vscode.DebugSession): Promise<DebugAdapterServer | undefined> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tfor (const adapter of this._adapters) {\n\t\t\tadapter.dispose();\n\t\t}\n\t\tthis._adapters.clear();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building the monaco-editor-core distribution\nDESCRIPTION: Gulp command to generate the distribution files for monaco-editor-core.\nSOURCE: https://github.com/microsoft/vscode/blob/main/build/monaco/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngulp editor-distro\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in JSON Language Features Extension\nDESCRIPTION: Alternative command that watches for changes and automatically recompiles the client and server components of the JSON language features extension.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Statements and Comment\nDESCRIPTION: This snippet demonstrates a simple 'hello world' statement, a single-line comment, and a one-character variable declaration in JavaScript.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-214049/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhello world;\n// new line\ny\n```\n\n----------------------------------------\n\nTITLE: Referencing Proposal Name in Utility Functions\nDESCRIPTION: When implementing a new proposal, developers must use utility functions to enforce the API being proposed. These functions should be called with the proposal's name as generated in the extensionsApiProposals.ts file.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vscode-dts/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncheckProposedApiEnabled\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisProposedApiEnabled\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Grammar from TypeScript Source\nDESCRIPTION: Commands to update the JavaScript grammar files by running the npm script in the typescript-basics extension directory and then executing the integration tests to verify the changes.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/javascript/syntaxes/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd extensions/typescript-basics && npm run update-grammars\n```\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/test-integration.sh\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Grammar Integration Tests\nDESCRIPTION: Shell command to execute integration tests to verify grammar updates are working correctly.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/typescript-basics/syntaxes/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/test-integration.sh\n```\n\n----------------------------------------\n\nTITLE: Adding View to SplitView in TypeScript for Visual Studio Code\nDESCRIPTION: This method adds a new view to a split view container. It handles view insertion, size calculation, and creates disposables for cleanup. The method supports different sizing options and orientation-specific view item creation.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-185779/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate doAddView(view: IView<TLayoutContext>, size: number | Sizing, index = this.viewItems.length, skipLayout?: boolean): void {\n\tif (this.state !== State.Idle) {\n\t\tthrow new Error('Cant modify splitview');\n\t}\n\n\tthis.state = State.Busy;\n\n\t// Add view\n\tconst container = $('.split-view-view');\n\n\tif (index === this.viewItems.length) {\n\t\tthis.viewContainer.appendChild(container);\n\t} else {\n\t\tthis.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n\t}\n\n\tconst onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n\tconst containerDisposable = toDisposable(() => this.viewContainer.removeChild(container));\n\tconst disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n\n\tlet viewSize: ViewItemSize;\n\n\tif (typeof size === 'number') {\n\t\tviewSize = size;\n\t} else if (size.type === 'split') {\n\t\tviewSize = this.getViewSize(size.index) / 2;\n\t} else if (size.type === 'invisible') {\n\t\tviewSize = { cachedVisibleSize: size.cachedVisibleSize };\n\t} else {\n\t\tviewSize = view.minimumSize;\n\t}\n\n\tconst item = this.orientation === Orientation.VERTICAL\n\t\t? new VerticalViewItem(container, view, viewSize, disposable)\n\t\t: new HorizontalViewItem(container, view, viewSize, disposable);\n\n\tthis.viewItems.splice(index, 0, item);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Web Worker Interfaces and Types in TypeScript\nDESCRIPTION: This code defines the interfaces and types needed for the web worker system, including IWebWorkerFactory for creating workers, IWorker and ISharedWorker for interacting with workers, and WorkerOptions for configuring worker creation.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE/x.txt#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IWebWorkerFactory {\n\treadonly label: string;\n\tcreate(moduleId: string, options: WorkerOptions): IWorker;\n\tcreateShared(moduleId: string, name: string): ISharedWorker;\n}\n\ninterface IWorker {\n\tpostMessage(data: any, transfer?: readonly Transferable[]): void;\n\tonmessage: ((this: Worker, ev: MessageEvent) => any) | null;\n\tonerror: ((this: Worker, ev: ErrorEvent) => any) | null;\n\tonerrormessage?: ((err: Error) => void);\n\t// addEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\n\t// addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n\t// removeEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\n\t// removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n\tterminate(): void;\n}\n\ninterface ISharedWorker {\n\treadonly port: MessagePort;\n\tonerror: ((this: SharedWorker, ev: ErrorEvent) => any) | null;\n}\n\ninterface WorkerOptions {\n\t/**\n\t * Worker name which will be identify the worker in dev tools.\n\t */\n\tname?: string;\n\t/**\n\t * TS file url which provides typing information\n\t */\n\ttypeUrl?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Grammars via NPM Script\nDESCRIPTION: Command to update the TypeScript grammar files from their source repository by running an NPM script in the typescript-basics extension directory.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/typescript-basics/syntaxes/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd extensions/typescript-basics && npm run update-grammars\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Monaco Editor Test\nDESCRIPTION: This command installs the necessary dependencies for the Monaco Editor test environment.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/monaco/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n $test/monaco> npm i\n```\n\n----------------------------------------\n\nTITLE: Babel Dependencies YAML Configuration\nDESCRIPTION: YAML configuration specifying Babel package dependencies including version constraints, resolved URLs, and integrity hashes. Defines requirements for @babel/types and @babel/traverse packages along with their sub-dependencies.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-204948/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"@babel/types\" \"^7.22.15\"\n\n\"@babel/traverse@^7.23.9\":\n  version \"7.23.9\"\n  resolved \"https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.23.7.tgz#9a7bf285c928cb99b5ead19c3b1ce5b310c9c305\"\n  integrity sha512-tY3mM8rH9jM0YHFGyfC0/xf+SB5eKUu7HPj7/k3fpi9dAlsMc5YbQvDi0Sh2QTPXqMhyaAtzAr807TIyfQrmyg==\"\n  dependencies:\n    \"@babel/code-frame\" \"^7.23.5\"\n    \"@babel/generator\" \"^7.23.6\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting WebWorkerManager Instance in TypeScript\nDESCRIPTION: This code creates a singleton instance of the WebWorkerManager class and exports it for use throughout the application. It provides a centralized way to access the worker manager functionality.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE/x.txt#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const webWorkerManager = new WebWorkerManager();\n```\n\n----------------------------------------\n\nTITLE: Running Watch Mode for CSS Language Service Development\nDESCRIPTION: Command to continuously compile the CSS language service during development, automatically updating when changes are made to the source code.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Virtual node_modules File Path Example\nDESCRIPTION: Example of how file paths are redirected from memfs to the AutoInstallerFs for simulated node_modules functionality.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/web/README.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmemfs:/path/to/node_modules/lodash/lodash.d.ts\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nvscode-node-modules:/ts-nul-authority/memfs/ts-nul-authority/path/to/node_modules/lodash/lodash.d.ts\n```\n\n----------------------------------------\n\nTITLE: Compiling Monaco Editor Test Scripts\nDESCRIPTION: This command compiles the Monaco Editor test scripts, converting them into an executable format.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/monaco/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n $test/monaco> npm run compile\n```\n\n----------------------------------------\n\nTITLE: Assigning with Command Substitution to Array Index in Shell Syntax - JavaScript/JSON\nDESCRIPTION: This snippet demonstrates assignment using command substitution (backticks) to an indexed environment variable (e.g., 'ENV[1]=`a b'). The JSON outlines both the assignment and the embedded command node, marking the command substitution as incomplete for parser edge-case testing. Key dependencies are support for command substitution parsing. Parameters include the variable index and the substituted command's output. The intended use is testing robustness in shell parser implementations.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 11,\n  \"text\": \"ENV[1]=`a b\",\n  \"innerText\": \"ENV[1]=`a b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 11,\n      \"text\": \"ENV[1]=`a b\",\n      \"innerText\": \"ENV[1]=`a b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 11,\n          \"text\": \"ENV[1]=`a b\",\n          \"innerText\": \"ENV[1]=`a b\",\n          \"complete\": false,\n          \"children\": [\n            {\n              \"startIndex\": 7,\n              \"type\": \"command_substitution\",\n              \"endIndex\": 11,\n              \"text\": \"`a b\",\n              \"innerText\": \"`a b\",\n              \"complete\": false,\n              \"children\": [\n                {\n                  \"startIndex\": 8,\n                  \"type\": \"command\",\n                  \"endIndex\": 11,\n                  \"text\": \"a b\",\n                  \"innerText\": \"a b\",\n                  \"complete\": true,\n                  \"children\": [\n                    {\n                      \"startIndex\": 8,\n                      \"type\": \"word\",\n                      \"endIndex\": 9,\n                      \"text\": \"a\",\n                      \"innerText\": \"a\",\n                      \"complete\": true,\n                      \"children\": []\n                    },\n                    {\n                      \"startIndex\": 10,\n                      \"type\": \"word\",\n                      \"endIndex\": 11,\n                      \"text\": \"b\",\n                      \"innerText\": \"b\",\n                      \"complete\": true,\n                      \"children\": []\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"subscript\",\n            \"endIndex\": 6,\n            \"text\": \"ENV[1]\",\n            \"innerText\": \"ENV[1]\",\n            \"complete\": true,\n            \"children\": [\n              {\n                \"startIndex\": 4,\n                \"type\": \"word\",\n                \"endIndex\": 5,\n                \"text\": \"1\",\n                \"innerText\": \"1\",\n                \"complete\": true,\n                \"children\": []\n              }\n            ],\n            \"name\": {\n              \"startIndex\": 0,\n              \"type\": \"variable_name\",\n              \"endIndex\": 3,\n              \"text\": \"ENV\",\n              \"innerText\": \"ENV\",\n              \"complete\": true,\n              \"children\": []\n            }\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Supported Video and Font MIME Types in JavaScript\nDESCRIPTION: Constants defining arrays of supported video and font MIME types for the Markdown preview. These arrays are used to determine which resource types should be allowed in the Content Security Policy.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github/testWorkspace/PULL_REQUEST_TEMPLATE.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// From https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\n// Only include mime types that are likely to be used in a web browser.\n// NOTE: text/plain not included because we must assume they are not video.\n\n// This list requires maintenance, we should find a definitive way to do this.\nconst supportedVideoMimes = [\n\t'video/mp4',\n\t'video/ogg',\n\t'video/webm'\n];\n\nconst supportedFontMimes = [\n\t'font/ttf',\n\t'font/eot',\n\t'font/otf',\n\t'font/woff',\n\t'font/woff2',\n];\n```\n\n----------------------------------------\n\nTITLE: Logging Numbers to Console in JavaScript\nDESCRIPTION: This code snippet demonstrates logging a sequence of numbers from 1 to 7 to the console using JavaScript's console.log() method. Each number is logged on a separate line.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/fuzzy-matching/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(1)\nconsole.log(2)\nconsole.log(3)\nconsole.log(4)\nconsole.log(5)\nconsole.log(6)\nconsole.log(7)\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with Submodules\nDESCRIPTION: Command to clone the repository and initialize all submodules recursively.\nSOURCE: https://github.com/microsoft/vscode/blob/main/cli/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Assigning and Executing a Pipeline in Shell Syntax - JavaScript/JSON\nDESCRIPTION: This snippet defines a shell pipeline that first sets an environment variable 'ENV' to 'a', then pipes the result into the command 'b'. The JSON structure models the syntactic parse tree, showing the breakdown into assignments, command nodes, and their relationships. The key parameters are the variable name, its assigned value, and a subsequent command, illustrating how environmental context is passed through a shell pipeline. The snippet is intended for parser testing, validation, or syntax highlighting implementations and expects all parsing logic to be tolerant of shell pipeline constructs.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 7,\n  \"text\": \"ENV=a|b\",\n  \"innerText\": \"ENV=a|b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"pipeline\",\n      \"endIndex\": 7,\n      \"text\": \"ENV=a|b\",\n      \"innerText\": \"ENV=a|b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment_list\",\n          \"endIndex\": 5,\n          \"text\": \"ENV=a\",\n          \"innerText\": \"ENV=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"assignment\",\n              \"endIndex\": 5,\n              \"text\": \"ENV=a\",\n              \"innerText\": \"ENV=a\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 4,\n                  \"type\": \"word\",\n                  \"endIndex\": 5,\n                  \"text\": \"a\",\n                  \"innerText\": \"a\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ],\n              \"name\": {\n                \"startIndex\": 0,\n                \"type\": \"variable_name\",\n                \"endIndex\": 3,\n                \"text\": \"ENV\",\n                \"innerText\": \"ENV\",\n                \"complete\": true,\n                \"children\": []\n              },\n              \"operator\": \"=\"\n            }\n          ],\n          \"hasCommand\": false\n        },\n        {\n          \"startIndex\": 6,\n          \"type\": \"command\",\n          \"endIndex\": 7,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 6,\n              \"type\": \"word\",\n              \"endIndex\": 7,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sequential Console Logging in JavaScript\nDESCRIPTION: Sequential console.log() statements that output numbers 1, 2, and 4 to the console. Used for basic debugging or demonstration purposes.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/intra-block-align/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(1)\nconsole.log(2)\nconsole.log(4)\n```\n\n----------------------------------------\n\nTITLE: Logging Sequential Numbers in JavaScript\nDESCRIPTION: This code snippet demonstrates basic console logging in JavaScript. It outputs the numbers 1 through 7 to the console, with a visual separation between the first four and last three numbers.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/fuzzy-matching/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(1);\nconsole.log(2);\nconsole.log(3);\nconsole.log(4);\n\nconsole.log(5);\nconsole.log(6);\nconsole.log(7);\n```\n\n----------------------------------------\n\nTITLE: Running vscode-dts to Download Type Definitions\nDESCRIPTION: This command downloads the necessary .d.ts files for the enabled API proposals into the project. It's an essential step for using proposed APIs in development.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vscode-dts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx vscode-dts dev\n```\n\n----------------------------------------\n\nTITLE: Assigning to Array Index and Command Invocation in Shell Syntax - JavaScript/JSON\nDESCRIPTION: This snippet models an assignment to an indexed environment variable (array subscript), e.g., 'ENV[0]=a', with an immediate command 'b' following in the shell statement. The structure distinguishes the assignment and subsequent command nodes, supports array and subscript syntax parsing, and clarifies variable scoping in different shell scenarios. Dependencies include a parser capable of handling subscripted variables, and key parameters are the variable index and command sequence. Its primary output is a structured parse tree suitable for detailed shell syntax analysis.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 10,\n  \"text\": \"ENV[0]=a b\",\n  \"innerText\": \"ENV[0]=a b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 10,\n      \"text\": \"ENV[0]=a b\",\n      \"innerText\": \"ENV[0]=a b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 8,\n          \"text\": \"ENV[0]=a\",\n          \"innerText\": \"ENV[0]=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 7,\n              \"type\": \"word\",\n              \"endIndex\": 8,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"subscript\",\n            \"endIndex\": 6,\n            \"text\": \"ENV[0]\",\n            \"innerText\": \"ENV[0]\",\n            \"complete\": true,\n            \"children\": [\n              {\n                \"startIndex\": 4,\n                \"type\": \"word\",\n                \"endIndex\": 5,\n                \"text\": \"0\",\n                \"innerText\": \"0\",\n                \"complete\": true,\n                \"children\": []\n              }\n            ],\n            \"name\": {\n              \"startIndex\": 0,\n              \"type\": \"variable_name\",\n              \"endIndex\": 3,\n              \"text\": \"ENV\",\n              \"innerText\": \"ENV\",\n              \"complete\": true,\n              \"children\": []\n            }\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 9,\n          \"type\": \"command\",\n          \"endIndex\": 10,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 9,\n              \"type\": \"word\",\n              \"endIndex\": 10,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ],\n      \"hasCommand\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Development Version of CSS Language Service\nDESCRIPTION: Command used in the server directory to link to the development version of vscode-css-languageservice instead of using the published version.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm link vscode-css-languageservice\n```\n\n----------------------------------------\n\nTITLE: Printing Multiple Messages in Python\nDESCRIPTION: This code demonstrates how to use Python's print function to display multiple lines of text in the console. The snippet shows two separate print statements that output simple greeting messages.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-api-tests/testWorkspace/test.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint('hello 1')\nprint('hello 2')\n```\n\n----------------------------------------\n\nTITLE: Jake Task Configuration Setting\nDESCRIPTION: Configuration setting for enabling automatic detection of Jake tasks from Jakefile.js files in VS Code\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/jake/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\njake.autoDetect\n```\n\n----------------------------------------\n\nTITLE: Assigning to Array Index and Sequential Command in Shell Syntax - JavaScript/JSON\nDESCRIPTION: This case represents a sequential shell statement splitting an array-indexed assignment (such as 'ENV[0]=a') and a follow-up command ('b'), typically separated by a semicolon. The JSON models each node for the assignment and command distinctly. It is designed for validating the parsing of compound statements and shell command separators, focusing on correct node separation and scope boundaries. No external libraries are required; only a parser supporting shell-like constructs is assumed.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 11,\n  \"text\": \"ENV[0]=a; b\",\n  \"innerText\": \"ENV[0]=a; b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 8,\n      \"text\": \"ENV[0]=a\",\n      \"innerText\": \"ENV[0]=a\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 8,\n          \"text\": \"ENV[0]=a\",\n          \"innerText\": \"ENV[0]=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 7,\n              \"type\": \"word\",\n              \"endIndex\": 8,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"subscript\",\n            \"endIndex\": 6,\n            \"text\": \"ENV[0]\",\n            \"innerText\": \"ENV[0]\",\n            \"complete\": true,\n            \"children\": [\n              {\n                \"startIndex\": 4,\n                \"type\": \"word\",\n                \"endIndex\": 5,\n                \"text\": \"0\",\n                \"innerText\": \"0\",\n                \"complete\": true,\n                \"children\": []\n              }\n            ],\n            \"name\": {\n              \"startIndex\": 0,\n              \"type\": \"variable_name\",\n              \"endIndex\": 3,\n              \"text\": \"ENV\",\n              \"innerText\": \"ENV\",\n              \"complete\": true,\n              \"children\": []\n            }\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    },\n    {\n      \"startIndex\": 10,\n      \"type\": \"command\",\n      \"endIndex\": 11,\n      \"text\": \"b\",\n      \"innerText\": \"b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 10,\n          \"type\": \"word\",\n          \"endIndex\": 11,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: LaTeX Math Rendering in Various Markdown Contexts\nDESCRIPTION: Illustrates LaTeX math rendering in different Markdown contexts, including inline with bold text, lists, and code blocks. Demonstrates proper syntax highlighting and edge cases.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\na **a** $$ \\theta $$ aa a **a**\n\na **a** $ \\theta $ aa a **a**\n\n$ \\theta $\n\n$$ 1 \\theta 1 1 $$\n\n- list item\n    **abc**\n    $$\n    \\begin{aligned}\n        &\\text{Any equation}\n        \\\\\n        &\\text {Inconsistent KaTeX keyword highlighting}\n    \\end{aligned}\n    $$\n    **xyz**\n\n$$\n\\text{stuff}\n\\text {stuff}\n$$\n\n    $$\n    \\frac{1}{2}\n    $$\n\n$$ \\vec{a}\n\\vec{a}\n\\vec{a} $$\n\n$ \\vec{a}\n\\vec{a}\n\\vec{a} $\n\n\\vec{a}\n\n$ \\vec{a}\n\\vec{a}\n = [2, 3] $\n\na **b** $$\n    **b**\n\na **b** $$\n    \\frac{1}{2}\n    $$\n    **b**\n\na **b**\n    $$\n    \\frac{1}{2}\n    $$\n    **b**\n\nShould be highlighted $\\frac{1}{2}$.\n\nShould not be highlighted $\\frac{1}{2}$text\n\nShould not be highlighted $\\frac{1}{2}$10\n\n$12.45\n\n$12.45 x\n\nx $12.45\n\n$$ \\% Should not be highlighted $$\n```\n\n----------------------------------------\n\nTITLE: Node.js v20.19.0 Binary Checksums\nDESCRIPTION: SHA-256 checksums for Node.js v20.19.0 binary files across multiple platforms and architectures. These checksums are used to verify the integrity of downloaded Node.js binary distributions.\nSOURCE: https://github.com/microsoft/vscode/blob/main/build/checksums/nodejs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nc016cd1975a264a29dc1b07c6fbe60d5df0a0c2eb4113c0450e3d998d1a0d9c  node-v20.19.0-darwin-arm64.tar.gz\na8554af97d6491fdbdabe63d3a1cfb9571228d25a3ad9aed2df856facb131b20  node-v20.19.0-darwin-x64.tar.gz\n618e4294602b78e97118a39050116b70d088b16197cd3819bba1fc18b473dfc4  node-v20.19.0-linux-arm64.tar.gz\n2deb2f333b42fcdeb0d215800b3d2b9af64dd88c1d0b05e67b980398d43c4dce  node-v20.19.0-linux-armv7l.tar.gz\n8a4dbcdd8bccef3132d21e8543940557e55dcf44f00f0a99ba8a062f4552e722  node-v20.19.0-linux-x64.tar.gz\n4ec1ae34fc7c0c65b35ec3688b9dc6d8ad5feca69d5ba45f7d72d559dc850fbb  win-arm64/node.exe\n6e3a39787e667d50487f7335c85636c2823a53e636d73c2c841d45da4e57906c  win-x64/node.exe\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex Shell Command with Nested Assignments and Command Execution\nDESCRIPTION: This JSON structure represents a parsed complex shell command that includes nested variable assignments within command substitution, followed by additional assignments and command execution. It demonstrates the parser's ability to handle intricate command structures.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 28,\n  \"text\": \"ENV=`ENV=\\\"a\\\" b` && ENV=\\\"c\\\" d\",\n  \"innerText\": \"ENV=`ENV=\\\"a\\\" b` && ENV=\\\"c\\\" d\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"list\",\n      \"endIndex\": 28,\n      \"text\": \"ENV=`ENV=\\\"a\\\" b` && ENV=\\\"c\\\" d\",\n      \"innerText\": \"ENV=`ENV=\\\"a\\\" b` && ENV=\\\"c\\\" d\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment_list\",\n          \"endIndex\": 15,\n          \"text\": \"ENV=`ENV=\\\"a\\\" b`\",\n          \"innerText\": \"ENV=`ENV=\\\"a\\\" b`\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"assignment\",\n              \"endIndex\": 15,\n              \"text\": \"ENV=`ENV=\\\"a\\\" b`\",\n              \"innerText\": \"ENV=`ENV=\\\"a\\\" b`\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 4,\n                  \"type\": \"command_substitution\",\n                  \"endIndex\": 15,\n                  \"text\": \"`ENV=\\\"a\\\" b`\",\n                  \"innerText\": \"`ENV=\\\"a\\\" b`\",\n                  \"complete\": true,\n                  \"children\": [\n                    {\n                      \"startIndex\": 5,\n                      \"type\": \"assignment_list\",\n                      \"endIndex\": 14,\n                      \"text\": \"ENV=\\\"a\\\" b\",\n                      \"innerText\": \"ENV=\\\"a\\\" b\",\n                      \"complete\": true,\n                      \"children\": [\n                        {\n                          \"startIndex\": 5,\n                          \"type\": \"assignment\",\n                          \"endIndex\": 12,\n                          \"text\": \"ENV=\\\"a\\\"\",\n                          \"innerText\": \"ENV=\\\"a\\\"\",\n                          \"complete\": true,\n                          \"children\": [\n                            {\n                              \"startIndex\": 9,\n                              \"type\": \"string\",\n                              \"endIndex\": 12,\n                              \"text\": \"\\\"a\\\"\",\n                              \"innerText\": \"a\",\n                              \"complete\": true,\n                              \"children\": []\n                            }\n                          ],\n                          \"name\": {\n                            \"startIndex\": 5,\n                            \"type\": \"variable_name\",\n                            \"endIndex\": 8,\n                            \"text\": \"ENV\",\n                            \"innerText\": \"ENV\",\n                            \"complete\": true,\n                            \"children\": []\n                          },\n                          \"operator\": \"=\"\n                        }\n                      ],\n                      \"hasCommand\": true\n                    }\n                  ]\n                }\n              ],\n              \"name\": {\n                \"startIndex\": 0,\n                \"type\": \"variable_name\",\n                \"endIndex\": 3,\n                \"text\": \"ENV\",\n                \"innerText\": \"ENV\",\n                \"complete\": true,\n                \"children\": []\n              },\n              \"operator\": \"=\"\n            }\n          ],\n          \"hasCommand\": false\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Assignment (Single Quotes) and Command in JSON\nDESCRIPTION: Complete JSON AST representation of the shell command `ENV='a b' c`. This structure parses the command into a 'program' containing an 'assignment_list'. The list holds an 'assignment' node for the variable 'ENV' with its value defined as a single-quoted 'raw_string' ('a b'), followed by a 'command' node ('c').\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// Case 6\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 11,\n  \"text\": \"ENV='a b' c\",\n  \"innerText\": \"ENV='a b' c\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 11,\n      \"text\": \"ENV='a b' c\",\n      \"innerText\": \"ENV='a b' c\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 9,\n          \"text\": \"ENV='a b'\",\n          \"innerText\": \"ENV='a b'\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"raw_string\",\n              \"endIndex\": 9,\n              \"text\": \"'a b'\",\n              \"innerText\": \"a b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 10,\n          \"type\": \"command\",\n          \"endIndex\": 11,\n          \"text\": \"c\",\n          \"innerText\": \"c\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 10,\n              \"type\": \"word\",\n              \"endIndex\": 11,\n              \"text\": \"c\",\n              \"innerText\": \"c\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ],\n      \"hasCommand\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Block LaTeX Equations in Markdown\nDESCRIPTION: Demonstrates how to render block LaTeX equations in Markdown using double dollar signs ($$). Includes examples of simple and complex equations with comments.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n$$\n\\theta\n$$\n\n$$\n\\theta{ % comment\n$$\n\n$$\n\\relax{x}{1} = \\int_{-\\infty}^\\infty\n    \\hat\\xi\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi % comment\n$$\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Escaped Backslash in JSON\nDESCRIPTION: This snippet demonstrates parsing a shell command 'a b\\\\ c' where a backslash is escaped. It shows the hierarchical structure of the parsed command, including word separation and handling of escaped characters.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 7,\n  \"text\": \"a b\\\\\\\\ c\",\n  \"innerText\": \"a b\\\\\\\\ c\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 7,\n      \"text\": \"a b\\\\\\\\ c\",\n      \"innerText\": \"a b\\\\\\\\ c\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"word\",\n          \"endIndex\": 5,\n          \"text\": \"b\\\\\\\\\",\n          \"innerText\": \"b\\\\\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 6,\n          \"type\": \"word\",\n          \"endIndex\": 7,\n          \"text\": \"c\",\n          \"innerText\": \"c\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing VS Code Document Diff Provider Interfaces in TypeScript\nDESCRIPTION: Imports two important interfaces from VS Code's diff system: IDocumentDiffProviderOptions which configures how document diffs are computed, and IChange which represents a single difference between documents.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/penalize-fragmentation/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { IDocumentDiffProviderOptions } from 'vs/editor/common/diff/documentDiffProvider';\nimport { IChange } from 'vs/editor/common/diff/smartLinesDiffComputer';\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Commands with AND Operator and Multiple Variable Assignments\nDESCRIPTION: JSON representation of a parsed shell command with multiple commands joined by an AND operator (&&), each with its own variable assignments. This demonstrates how 'ENV=a ENV=b a && ENV=c c' is parsed into a hierarchical tree structure with separate command lists.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 24,\n  \"text\": \"ENV=a ENV=b a && ENV=c c\",\n  \"innerText\": \"ENV=a ENV=b a && ENV=c c\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"list\",\n      \"endIndex\": 24,\n      \"text\": \"ENV=a ENV=b a && ENV=c c\",\n      \"innerText\": \"ENV=a ENV=b a && ENV=c c\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment_list\",\n          \"endIndex\": 14,\n          \"text\": \"ENV=a ENV=b a \",\n          \"innerText\": \"ENV=a ENV=b a \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"assignment\",\n              \"endIndex\": 5,\n              \"text\": \"ENV=a\",\n              \"innerText\": \"ENV=a\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 4,\n                  \"type\": \"word\",\n                  \"endIndex\": 5,\n                  \"text\": \"a\",\n                  \"innerText\": \"a\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ],\n              \"name\": {\n                \"startIndex\": 0,\n                \"type\": \"variable_name\",\n                \"endIndex\": 3,\n                \"text\": \"ENV\",\n                \"innerText\": \"ENV\",\n                \"complete\": true,\n                \"children\": []\n              },\n              \"operator\": \"=\"\n            },\n            {\n              \"startIndex\": 6,\n              \"type\": \"assignment\",\n              \"endIndex\": 11,\n              \"text\": \"ENV=b\",\n              \"innerText\": \"ENV=b\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 10,\n                  \"type\": \"word\",\n                  \"endIndex\": 11,\n                  \"text\": \"b\",\n                  \"innerText\": \"b\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ],\n              \"name\": {\n                \"startIndex\": 6,\n                \"type\": \"variable_name\",\n                \"endIndex\": 9,\n                \"text\": \"ENV\",\n                \"innerText\": \"ENV\",\n                \"complete\": true,\n                \"children\": []\n              },\n              \"operator\": \"=\"\n            },\n            {\n              \"startIndex\": 12,\n              \"type\": \"command\",\n              \"endIndex\": 14,\n              \"text\": \"a \",\n              \"innerText\": \"a \",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 12,\n                  \"type\": \"word\",\n                  \"endIndex\": 13,\n                  \"text\": \"a\",\n                  \"innerText\": \"a\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            }\n          ],\n          \"hasCommand\": true\n        },\n        {\n          \"startIndex\": 17,\n          \"type\": \"assignment_list\",\n          \"endIndex\": 24,\n          \"text\": \"ENV=c c\",\n          \"innerText\": \"ENV=c c\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 17,\n              \"type\": \"assignment\",\n              \"endIndex\": 22,\n              \"text\": \"ENV=c\",\n              \"innerText\": \"ENV=c\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 21,\n                  \"type\": \"word\",\n                  \"endIndex\": 22,\n                  \"text\": \"c\",\n                  \"innerText\": \"c\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ],\n              \"name\": {\n                \"startIndex\": 17\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline LaTeX Equations in Markdown\nDESCRIPTION: Shows how to render inline LaTeX equations in Markdown using single dollar signs ($). Includes examples of simple equations and matrix notation.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/md-math.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n$\nx = 1.1 \\int_{a}\n$\n\n$\n\\begin{smallmatrix}\n   1 & 2 \\\\\n   4 & 3\n\\end{smallmatrix}\n$\n\n$\nx = a_0 + \\frac{1}{a_1 + \\frac{1}{a_2 + \\frac{1}{a_3 + a_4}}}\n$\n\n$\n\\displaystyle {1 + \\frac{q^2}{(1-q)}+\\frac{q^6}{(1-q)(1-q^2)}+\\cdots }= \\prod_{j=0}^{\\infty}\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \\quad\\quad \\text{for }\\lvert q\\rvert<1.\n$\n```\n\n----------------------------------------\n\nTITLE: Parsing Logical OR (||) Shell Command in JSON\nDESCRIPTION: This snippet shows the JSON representation of a parsed shell command using the logical OR (||) operator. It illustrates the structure of the command, including program, list, and command elements.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a || b\",\n  \"innerText\": \"a || b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"list\",\n      \"endIndex\": 6,\n      \"text\": \"a || b\",\n      \"innerText\": \"a || b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a \",\n          \"innerText\": \"a \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"word\",\n              \"endIndex\": 1,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 5,\n          \"type\": \"command\",\n          \"endIndex\": 6,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 5,\n              \"type\": \"word\",\n              \"endIndex\": 6,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Multiple Shell Assignments (Append and Set) in JSON\nDESCRIPTION: Complete JSON AST for the shell command `ENV+=a ENV=b`. This represents a 'program' containing an 'assignment_list' with two consecutive 'assignment' nodes. The first assigns to 'ENV' using the append operator ('+=') with a 'word' value ('a'). The second assigns to 'ENV' using the set operator ('=') with a 'word' value ('b'). Notably, `hasCommand` is false as there's no command following the assignments.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n// Case 9\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 12,\n  \"text\": \"ENV+=a ENV=b\",\n  \"innerText\": \"ENV+=a ENV=b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 12,\n      \"text\": \"ENV+=a ENV=b\",\n      \"innerText\": \"ENV+=a ENV=b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 6,\n          \"text\": \"ENV+=a\",\n          \"innerText\": \"ENV+=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 5,\n              \"type\": \"word\",\n              \"endIndex\": 6,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"+=\"\n        },\n        {\n          \"startIndex\": 7,\n          \"type\": \"assignment\",\n          \"endIndex\": 12,\n          \"text\": \"ENV=b\",\n          \"innerText\": \"ENV=b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 11,\n              \"type\": \"word\",\n              \"endIndex\": 12,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 7,\n            \"type\": \"variable_name\",\n            \"endIndex\": 10,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Object with MIME Type in Markdown Code Block\nDESCRIPTION: Illustrates how to include a JSON object within a Markdown code block, specifying the MIME type for proper syntax highlighting.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n````application/json\n  { value: [\"or with a mime type\"] }\n````\n```\n\n----------------------------------------\n\nTITLE: Parsing Logical AND (&&) Shell Command in JSON\nDESCRIPTION: This snippet demonstrates the JSON representation of a parsed shell command using the logical AND (&&) operator. It shows the hierarchical structure of the command, breaking it down into program, list, and command components.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a && b\",\n  \"innerText\": \"a && b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"list\",\n      \"endIndex\": 6,\n      \"text\": \"a && b\",\n      \"innerText\": \"a && b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a \",\n          \"innerText\": \"a \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"word\",\n              \"endIndex\": 1,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 5,\n          \"type\": \"command\",\n          \"endIndex\": 6,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 5,\n              \"type\": \"word\",\n              \"endIndex\": 6,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Single Variable Assignment\nDESCRIPTION: JSON representation of a parsed shell command with a single environment variable assignment followed by a simple command. This shows the tree structure of 'ENV=a b' where ENV is assigned the value 'a' and 'b' is executed as a command.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 7,\n  \"text\": \"ENV=a b\",\n  \"innerText\": \"ENV=a b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 7,\n      \"text\": \"ENV=a b\",\n      \"innerText\": \"ENV=a b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 5,\n          \"text\": \"ENV=a\",\n          \"innerText\": \"ENV=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 6,\n          \"type\": \"command\",\n          \"endIndex\": 7,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 6,\n              \"type\": \"word\",\n              \"endIndex\": 7,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ],\n      \"hasCommand\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Compound String Assignment to Array Index in Shell Syntax - JavaScript/JSON\nDESCRIPTION: This test case captures a compound assignment where a string literal (e.g., '\"a b \"') is appended to an indexed environment variable using the '+=' operator, such as 'ENV[2]+=\"a b \"'. The JSON structure segments the string and assignment operation details, supporting parser implementations that handle compound and augmented assignment operators. The snippet is focused on string parsing and operator-associated behaviors; it is limited to assignments involving string literals.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 14,\n  \"text\": \"ENV[2]+=\\\"a b \\\"\",\n  \"innerText\": \"ENV[2]+=\\\"a b \\\"\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 14,\n      \"text\": \"ENV[2]+=\\\"a b \\\"\",\n      \"innerText\": \"ENV[2]+=\\\"a b \\\"\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 14,\n          \"text\": \"ENV[2]+=\\\"a b \\\"\",\n          \"innerText\": \"ENV[2]+=\\\"a b \\\"\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 8,\n              \"type\": \"string\",\n              \"endIndex\": 14,\n              \"text\": \"\\\"a b \\\"\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Body Font in HTML\nDESCRIPTION: Shows how to include an inline CSS style tag to set the font of the body to Consolas.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    body { font: \"Consolas\" }\n  </style>\n```\n\n----------------------------------------\n\nTITLE: Parsing Complete Compound Statement Shell Command in JSON\nDESCRIPTION: This snippet shows the JSON representation of a parsed shell command using a complete compound statement. It illustrates the structure of the command, including program, compound_statement, and command elements.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 7,\n  \"text\": \"{a; b;}\",\n  \"innerText\": \"{a; b;}\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"compound_statement\",\n      \"endIndex\": 7,\n      \"text\": \"{a; b;}\",\n      \"innerText\": \"{a; b;}\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 1,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 1,\n              \"type\": \"word\",\n              \"endIndex\": 2,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 4,\n          \"type\": \"command\",\n          \"endIndex\": 5,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Assignment (Double Quotes) and Command in JSON\nDESCRIPTION: Complete JSON AST representation of the shell command `ENV=\"a b\" c`. It parses the command into a top-level 'program' containing an 'assignment_list'. This list includes an 'assignment' for the variable 'ENV' with a double-quoted 'string' value (\"a b\") and the subsequent 'command' ('c').\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// Case 5\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 11,\n  \"text\": \"ENV=\\\"a b\\\" c\",\n  \"innerText\": \"ENV=\\\"a b\\\" c\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 11,\n      \"text\": \"ENV=\\\"a b\\\" c\",\n      \"innerText\": \"ENV=\\\"a b\\\" c\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 9,\n          \"text\": \"ENV=\\\"a b\\\"\",\n          \"innerText\": \"ENV=\\\"a b\\\"\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"string\",\n              \"endIndex\": 9,\n              \"text\": \"\\\"a b\\\"\",\n              \"innerText\": \"a b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 10,\n          \"type\": \"command\",\n          \"endIndex\": 11,\n          \"text\": \"c\",\n          \"innerText\": \"c\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 10,\n              \"type\": \"word\",\n              \"endIndex\": 11,\n              \"text\": \"c\",\n              \"innerText\": \"c\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ],\n      \"hasCommand\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling Monaco Editor Test Scripts\nDESCRIPTION: This command bundles the Monaco Editor test scripts, preparing them for execution.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/monaco/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n $test/monaco> npm run bundle\n```\n\n----------------------------------------\n\nTITLE: Shell Variable Assignment with String Concatenation\nDESCRIPTION: This snippet shows a shell variable assignment using string concatenation. It combines double-quoted, single-quoted, and unquoted strings to form the final value of the ENV variable.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\nENV=\"a\"'b'c d\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Link Syntax in a Tilde Code Block\nDESCRIPTION: A code block using triple tildes (~~~) to show Markdown link syntax. This is an alternative way to create code blocks in Markdown that preserves the raw text formatting.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/markdown-language-features/test-workspace/a.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[b](b)\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Arithmetic Expansion in JSON\nDESCRIPTION: This snippet demonstrates the parsing of a shell command 'a $((b))' with an arithmetic expansion. It shows how the parser handles arithmetic expansions in the command structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 8,\n  \"text\": \"a $((b))\",\n  \"innerText\": \"a $((b))\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 8,\n      \"text\": \"a $((b))\",\n      \"innerText\": \"a $((b))\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"arithmetic_expansion\",\n          \"endIndex\": 8,\n          \"text\": \"$((b))\",\n          \"innerText\": \"$((b))\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex Shell Command with Variable Assignments and Command Execution\nDESCRIPTION: This JSON structure represents a parsed shell command that includes multiple variable assignments and a command execution. It demonstrates how the parser breaks down the command into a nested structure of assignments and commands.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"innerText\": \"ENV+=a ENV=b && foo\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"list\",\n      \"endIndex\": 19,\n      \"text\": \"ENV+=a ENV=b && foo\",\n      \"innerText\": \"ENV+=a ENV=b && foo\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment_list\",\n          \"endIndex\": 12,\n          \"text\": \"ENV+=a ENV=b\",\n          \"innerText\": \"ENV+=a ENV=b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"assignment\",\n              \"endIndex\": 6,\n              \"text\": \"ENV+=a\",\n              \"innerText\": \"ENV+=a\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 5,\n                  \"type\": \"word\",\n                  \"endIndex\": 6,\n                  \"text\": \"a\",\n                  \"innerText\": \"a\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ],\n              \"name\": {\n                \"startIndex\": 0,\n                \"type\": \"variable_name\",\n                \"endIndex\": 3,\n                \"text\": \"ENV\",\n                \"innerText\": \"ENV\",\n                \"complete\": true,\n                \"children\": []\n              },\n              \"operator\": \"+=\"\n            },\n            {\n              \"startIndex\": 7,\n              \"type\": \"assignment\",\n              \"endIndex\": 12,\n              \"text\": \"ENV=b\",\n              \"innerText\": \"ENV=b\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 11,\n                  \"type\": \"word\",\n                  \"endIndex\": 12,\n                  \"text\": \"b\",\n                  \"innerText\": \"b\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ],\n              \"name\": {\n                \"startIndex\": 7,\n                \"type\": \"variable_name\",\n                \"endIndex\": 10,\n                \"text\": \"ENV\",\n                \"innerText\": \"ENV\",\n                \"complete\": true,\n                \"children\": []\n              },\n              \"operator\": \"=\"\n            }\n          ],\n          \"hasCommand\": false\n        },\n        {\n          \"startIndex\": 16,\n          \"type\": \"command\",\n          \"endIndex\": 19,\n          \"text\": \"foo\",\n          \"innerText\": \"foo\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 16,\n              \"type\": \"word\",\n              \"endIndex\": 19,\n              \"text\": \"foo\",\n              \"innerText\": \"foo\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Shell Parser Test Case - Variable Expansion in Double Quotes\nDESCRIPTION: Tests parsing of escaped variable expansion syntax ${b} within double quotes\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/primaryExpressions/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 9,\n  \"text\": \"a \\\"\\\\${b}\\\"\",\n  \"innerText\": \"a \\\"\\\\${b}\\\"\",\n  \"complete\": true,\n  \"children\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Link Syntax in an Indented Code Block\nDESCRIPTION: A code block created using indentation (4 spaces), containing a comment line and a Markdown link syntax example. Indentation is another way to create code blocks in Markdown.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/markdown-language-features/test-workspace/a.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n// Indented code\n    [b](b)\n```\n\n----------------------------------------\n\nTITLE: Mapping Table for Key J Combinations in VS Code\nDESCRIPTION: This Markdown table details the mappings for the 'J' key combined with modifiers (Ctrl, Shift, Alt). It lists the corresponding hardware code, key code, UI label, user settings representation, Electron accelerator, and dispatch string for each combination within VS Code.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                 Shift+Alt+KeyJ |   J   |               Shift+Alt+J |     |               Shift+Alt+J |                    shift+alt+j |               Shift+Alt+J |               shift+alt+[KeyJ] |         |\n|            Ctrl+Shift+Alt+KeyJ | U+31b |          Ctrl+Shift+Alt+J |     |          Ctrl+Shift+Alt+J |               ctrl+shift+alt+j |          Ctrl+Shift+Alt+J |          ctrl+shift+alt+[KeyJ] |         |\n```\n\n----------------------------------------\n\nTITLE: Representing Parsed Command Structures in JSON\nDESCRIPTION: These JSON objects represent the Abstract Syntax Tree (AST) generated by parsing various shell-like command strings. Each object details the structure, including type (program, command, word, list, pipeline), start/end indices, text content, and nested children, reflecting the parsed hierarchy. These structures are used as test cases to verify the command parser's handling of separators (`;`), background execution (`&`), logical AND (`&&`), logical OR (`||`), pipes (`|`), and grouping (`()`).\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// Case 9\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 4,\n  \"text\": \"a; b\",\n  \"innerText\": \"a; b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 1,\n      \"text\": \"a\",\n      \"innerText\": \"a\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"startIndex\": 3,\n      \"type\": \"command\",\n      \"endIndex\": 4,\n      \"text\": \"b\",\n      \"innerText\": \"b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 3,\n          \"type\": \"word\",\n          \"endIndex\": 4,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Case 10\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 5,\n  \"text\": \"a & b\",\n  \"innerText\": \"a & b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 2,\n      \"text\": \"a \",\n      \"innerText\": \"a \",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"startIndex\": 4,\n      \"type\": \"command\",\n      \"endIndex\": 5,\n      \"text\": \"b\",\n      \"innerText\": \"b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 4,\n          \"type\": \"word\",\n          \"endIndex\": 5,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Case 11\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a &; b\",\n  \"innerText\": \"a &; b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 2,\n      \"text\": \"a \",\n      \"innerText\": \"a \",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"startIndex\": 5,\n      \"type\": \"command\",\n      \"endIndex\": 6,\n      \"text\": \"b\",\n      \"innerText\": \"b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 5,\n          \"type\": \"word\",\n          \"endIndex\": 6,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Case 12\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a ; b;\",\n  \"innerText\": \"a ; b;\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 2,\n      \"text\": \"a \",\n      \"innerText\": \"a \",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    },\n    {\n      \"startIndex\": 4,\n      \"type\": \"command\",\n      \"endIndex\": 5,\n      \"text\": \"b\",\n      \"innerText\": \"b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 4,\n          \"type\": \"word\",\n          \"endIndex\": 5,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Case 13\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 11,\n  \"text\": \"a && b || c\",\n  \"innerText\": \"a && b || c\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"list\",\n      \"endIndex\": 11,\n      \"text\": \"a && b || c\",\n      \"innerText\": \"a && b || c\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a \",\n          \"innerText\": \"a \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"word\",\n              \"endIndex\": 1,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 5,\n          \"type\": \"command\",\n          \"endIndex\": 7,\n          \"text\": \"b \",\n          \"innerText\": \"b \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 5,\n              \"type\": \"word\",\n              \"endIndex\": 6,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 10,\n          \"type\": \"command\",\n          \"endIndex\": 11,\n          \"text\": \"c\",\n          \"innerText\": \"c\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 10,\n              \"type\": \"word\",\n              \"endIndex\": 11,\n              \"text\": \"c\",\n              \"innerText\": \"c\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Case 14\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 10,\n  \"text\": \"a && b | c\",\n  \"innerText\": \"a && b | c\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"list\",\n      \"endIndex\": 10,\n      \"text\": \"a && b | c\",\n      \"innerText\": \"a && b | c\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a \",\n          \"innerText\": \"a \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"word\",\n              \"endIndex\": 1,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 5,\n          \"type\": \"pipeline\",\n          \"endIndex\": 10,\n          \"text\": \"b | c\",\n          \"innerText\": \"b | c\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 5,\n              \"type\": \"command\",\n              \"endIndex\": 7,\n              \"text\": \"b \",\n              \"innerText\": \"b \",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 5,\n                  \"type\": \"word\",\n                  \"endIndex\": 6,\n                  \"text\": \"b\",\n                  \"innerText\": \"b\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            },\n            {\n              \"startIndex\": 9,\n              \"type\": \"command\",\n              \"endIndex\": 10,\n              \"text\": \"c\",\n              \"innerText\": \"c\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 9,\n                  \"type\": \"word\",\n                  \"endIndex\": 10,\n                  \"text\": \"c\",\n                  \"innerText\": \"c\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Case 15\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 10,\n  \"text\": \"a | b && c\",\n  \"innerText\": \"a | b && c\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"list\",\n      \"endIndex\": 10,\n      \"text\": \"a | b && c\",\n      \"innerText\": \"a | b && c\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"pipeline\",\n          \"endIndex\": 6,\n          \"text\": \"a | b \",\n          \"innerText\": \"a | b \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"command\",\n              \"endIndex\": 2,\n              \"text\": \"a \",\n              \"innerText\": \"a \",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 0,\n                  \"type\": \"word\",\n                  \"endIndex\": 1,\n                  \"text\": \"a\",\n                  \"innerText\": \"a\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            },\n            {\n              \"startIndex\": 4,\n              \"type\": \"command\",\n              \"endIndex\": 6,\n              \"text\": \"b \",\n              \"innerText\": \"b \",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 4,\n                  \"type\": \"word\",\n                  \"endIndex\": 5,\n                  \"text\": \"b\",\n                  \"innerText\": \"b\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"startIndex\": 9,\n          \"type\": \"command\",\n          \"endIndex\": 10,\n          \"text\": \"c\",\n          \"innerText\": \"c\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 9,\n              \"type\": \"word\",\n              \"endIndex\": 10,\n              \"text\": \"c\",\n              \"innerText\": \"c\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Case 16\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 12,\n  \"text\": \"(a) | b && c\",\n  \"innerText\": \"(a) | b && c\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"list\",\n      \"endIndex\": 12,\n      \"text\": \"(a) | b && c\",\n      \"innerText\": \"(a) | b && c\",\n      \"complete\": true,\n```\n\n----------------------------------------\n\nTITLE: Shell Parser Test Case - Nested Single Quotes\nDESCRIPTION: Tests parsing of single quotes nested within double quotes\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/primaryExpressions/output.txt#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 7,\n  \"text\": \"a \\\"\\'b\\'\\\"\",\n  \"innerText\": \"a \\\"\\'b\\'\\\"\",\n  \"complete\": true,\n  \"children\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Slash Key Combinations in VS Code (Markdown)\nDESCRIPTION: Defines keyboard shortcut mappings for the Slash key (`/`) and its combinations with Ctrl, Shift, and Alt modifiers in VS Code. Lists corresponding Key, KeyCode, UI labels, user settings representations, Electron accelerators, and dispatch strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|                          Slash |   ㄥ   |                           |     |                         ㄥ |                        [Slash] |                      null |                        [Slash] |    NO   |\n|                     Ctrl+Slash |   ㄥ   |                           |     |                    Ctrl+ㄥ |                   ctrl+[Slash] |                      null |                   ctrl+[Slash] |    NO   |\n|                    Shift+Slash |   ?   |                   Shift+/ |     |                   Shift+ㄥ |                  shift+[Slash] |                      null |                  shift+[Slash] |    NO   |\n|               Ctrl+Shift+Slash |   ?   |              Ctrl+Shift+/ |     |              Ctrl+Shift+ㄥ |             ctrl+shift+[Slash] |                      null |             ctrl+shift+[Slash] |    NO   |\n|                      Alt+Slash |   ㄥ   |                           |     |                  Option+ㄥ |                    alt+[Slash] |                      null |                    alt+[Slash] |    NO   |\n|                 Ctrl+Alt+Slash |   /   |                         / |     |             Ctrl+Option+ㄥ |               ctrl+alt+[Slash] |                      null |               ctrl+alt+[Slash] |    NO   |\n|                Shift+Alt+Slash |   ?   |               Shift+Alt+/ |     |            Shift+Option+ㄥ |              shift+alt+[Slash] |                      null |              shift+alt+[Slash] |    NO   |\n|           Ctrl+Shift+Alt+Slash |   ?   |          Ctrl+Shift+Alt+/ |     |       Ctrl+Shift+Option+ㄥ |         ctrl+shift+alt+[Slash] |                      null |         ctrl+shift+alt+[Slash] |    NO   |\n```\n\n----------------------------------------\n\nTITLE: Mapping Table for Key L Combinations in VS Code\nDESCRIPTION: This Markdown table details the mappings for the 'L' key combined with modifiers (Ctrl, Shift, Alt). It lists the corresponding hardware code, key code, UI label, user settings representation, Electron accelerator, and dispatch string for each combination within VS Code.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyL |   l   |                         L |     |                         L |                              l |                         L |                         [KeyL] |         |\n|                      Ctrl+KeyL |   l   |                    Ctrl+L |     |                    Ctrl+L |                         ctrl+l |                    Ctrl+L |                    ctrl+[KeyL] |         |\n|                     Shift+KeyL |   L   |                   Shift+L |     |                   Shift+L |                        shift+l |                   Shift+L |                   shift+[KeyL] |         |\n|                Ctrl+Shift+KeyL |   L   |              Ctrl+Shift+L |     |              Ctrl+Shift+L |                   ctrl+shift+l |              Ctrl+Shift+L |              ctrl+shift+[KeyL] |         |\n|                       Alt+KeyL |   l   |                     Alt+L |     |                     Alt+L |                          alt+l |                     Alt+L |                     alt+[KeyL] |         |\n|                  Ctrl+Alt+KeyL |   ł   |                Ctrl+Alt+L |     |                Ctrl+Alt+L |                     ctrl+alt+l |                Ctrl+Alt+L |                ctrl+alt+[KeyL] |         |\n|                 Shift+Alt+KeyL |   L   |               Shift+Alt+L |     |               Shift+Alt+L |                    shift+alt+l |               Shift+Alt+L |               shift+alt+[KeyL] |         |\n|            Ctrl+Shift+Alt+KeyL |   Ł   |          Ctrl+Shift+Alt+L |     |          Ctrl+Shift+Alt+L |               ctrl+shift+alt+l |          Ctrl+Shift+Alt+L |          ctrl+shift+alt+[KeyL] |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Double-Quoted String in JSON\nDESCRIPTION: This snippet shows the parsing of a shell command 'a \"b\"' with a double-quoted string. It demonstrates how the parser handles quoted strings as distinct elements in the command structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 5,\n  \"text\": \"a \\\"b\\\"\",\n  \"innerText\": \"a \\\"b\\\"\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 5,\n      \"text\": \"a \\\"b\\\"\",\n      \"innerText\": \"a \\\"b\\\"\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"string\",\n          \"endIndex\": 5,\n          \"text\": \"\\\"b\\\"\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Simple Variable Expansion\nDESCRIPTION: This snippet shows the AST for a shell command containing a word followed by a double-quoted string with a simple variable expansion. It demonstrates how variable expansions are recognized and parsed within strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/primaryExpressions/output.txt#2025-04-23_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a \\\"$b\\\"\",\n  \"innerText\": \"a \\\"$b\\\"\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 6,\n      \"text\": \"a \\\"$b\\\"\",\n      \"innerText\": \"a \\\"$b\\\"\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"string\",\n          \"endIndex\": 6,\n          \"text\": \"\\\"$b\\\"\",\n          \"innerText\": \"$b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 3,\n              \"type\": \"simple_expansion\",\n              \"endIndex\": 5,\n              \"text\": \"$b\",\n              \"innerText\": \"$b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Shortcuts for Key L in VS Code\nDESCRIPTION: This Markdown table section defines the mappings for keyboard shortcuts using the 'L' key, both alone and combined with Ctrl, Shift, Alt, and their combinations. It specifies the hardware code, resulting key, KeyCode, UI label, user settings format, Electron accelerator, and dispatch string for each combination.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyL |   l   |                         L |     |                         L |                              l |                         L |                         [KeyL] |         |\n|                      Ctrl+KeyL |   l   |                    Ctrl+L |     |                    Ctrl+L |                         ctrl+l |                    Ctrl+L |                    ctrl+[KeyL] |         |\n|                     Shift+KeyL |   L   |                   Shift+L |     |                   Shift+L |                        shift+l |                   Shift+L |                   shift+[KeyL] |         |\n|                Ctrl+Shift+KeyL |   L   |              Ctrl+Shift+L |     |              Ctrl+Shift+L |                   ctrl+shift+l |              Ctrl+Shift+L |              ctrl+shift+[KeyL] |         |\n|                       Alt+KeyL |   l   |                     Alt+L |     |                  Option+L |                          alt+l |                     Alt+L |                     alt+[KeyL] |         |\n|                  Ctrl+Alt+KeyL |   ¬   |                Ctrl+Alt+L |     |             Ctrl+Option+L |                     ctrl+alt+l |                Ctrl+Alt+L |                ctrl+alt+[KeyL] |         |\n|                 Shift+Alt+KeyL |   L   |               Shift+Alt+L |     |            Shift+Option+L |                    shift+alt+l |               Shift+Alt+L |               shift+alt+[KeyL] |         |\n|            Ctrl+Shift+Alt+KeyL |   查   |          Ctrl+Shift+Alt+L |     |       Ctrl+Shift+Option+L |               ctrl+shift+alt+l |          Ctrl+Shift+Alt+L |          ctrl+shift+alt+[KeyL] |         |\n```\n\n----------------------------------------\n\nTITLE: Mapping Comma Key Combinations in VS Code (Markdown)\nDESCRIPTION: Defines keyboard shortcut mappings for the Comma key (`,`) and its combinations with Ctrl, Shift, and Alt modifiers in VS Code. Lists corresponding Key, KeyCode, UI labels, user settings representations, Electron accelerators, and dispatch strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|                          Comma |   ㄝ   |                           |     |                         ㄝ |                        [Comma] |                      null |                        [Comma] |    NO   |\n|                     Ctrl+Comma |   ㄝ   |                           |     |                    Ctrl+ㄝ |                   ctrl+[Comma] |                      null |                   ctrl+[Comma] |    NO   |\n|                    Shift+Comma |   ，   |                         , |   1 |                   Shift+ㄝ |                  shift+[Comma] |                      null |                  shift+[Comma] |    NO   |\n|               Ctrl+Shift+Comma |   ，   |                    Ctrl+, |     |              Ctrl+Shift+ㄝ |             ctrl+shift+[Comma] |                      null |             ctrl+shift+[Comma] |    NO   |\n|                      Alt+Comma |   ㄝ   |                           |     |                  Option+ㄝ |                    alt+[Comma] |                      null |                    alt+[Comma] |    NO   |\n|                 Ctrl+Alt+Comma |   ,   |                         , |   2 |             Ctrl+Option+ㄝ |               ctrl+alt+[Comma] |                      null |               ctrl+alt+[Comma] |    NO   |\n|                Shift+Alt+Comma |   ，   |                     Alt+, |     |            Shift+Option+ㄝ |              shift+alt+[Comma] |                      null |              shift+alt+[Comma] |    NO   |\n|           Ctrl+Shift+Alt+Comma |   <   |                   Shift+, |     |       Ctrl+Shift+Option+ㄝ |         ctrl+shift+alt+[Comma] |                      null |         ctrl+shift+alt+[Comma] |    NO   |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Single-Quoted String in JSON\nDESCRIPTION: This snippet illustrates the parsing of a shell command 'a 'b'' with a single-quoted string. It shows how the parser treats single-quoted strings differently from double-quoted strings in the command structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 5,\n  \"text\": \"a 'b'\",\n  \"innerText\": \"a 'b'\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 5,\n      \"text\": \"a 'b'\",\n      \"innerText\": \"a 'b'\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"raw_string\",\n          \"endIndex\": 5,\n          \"text\": \"'b'\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Subshell Command in JSON\nDESCRIPTION: This snippet demonstrates the JSON representation of a parsed shell command using a subshell. It shows the hierarchical structure of the command, breaking it down into program, subshell, and command components.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"(a; b)\",\n  \"innerText\": \"(a; b)\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"subshell\",\n      \"endIndex\": 6,\n      \"text\": \"(a; b)\",\n      \"innerText\": \"(a; b)\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 1,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 1,\n              \"type\": \"word\",\n              \"endIndex\": 2,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 4,\n          \"type\": \"command\",\n          \"endIndex\": 5,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Table for Key M Combinations in VS Code\nDESCRIPTION: This Markdown table details the mappings for the 'M' key combined with modifiers (Ctrl, Shift, Alt). It lists the corresponding hardware code, key code, UI label, user settings representation, Electron accelerator, and dispatch string for each combination within VS Code.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|                           KeyM |   m   |                         M |     |                         M |                              m |                         M |                         [KeyM] |         |\n|                      Ctrl+KeyM |   m   |                    Ctrl+M |     |                    Ctrl+M |                         ctrl+m |                    Ctrl+M |                    ctrl+[KeyM] |         |\n|                     Shift+KeyM |   M   |                   Shift+M |     |                   Shift+M |                        shift+m |                   Shift+M |                   shift+[KeyM] |         |\n|                Ctrl+Shift+KeyM |   M   |              Ctrl+Shift+M |     |              Ctrl+Shift+M |                   ctrl+shift+m |              Ctrl+Shift+M |              ctrl+shift+[KeyM] |         |\n|                       Alt+KeyM |   m   |                     Alt+M |     |                     Alt+M |                          alt+m |                     Alt+M |                     alt+[KeyM] |         |\n|                  Ctrl+Alt+KeyM |   µ   |                Ctrl+Alt+M |     |                Ctrl+Alt+M |                     ctrl+alt+m |                Ctrl+Alt+M |                ctrl+alt+[KeyM] |         |\n|                 Shift+Alt+KeyM |   M   |               Shift+Alt+M |     |               Shift+Alt+M |                    shift+alt+m |               Shift+Alt+M |               shift+alt+[KeyM] |         |\n|            Ctrl+Shift+Alt+KeyM |   º   |          Ctrl+Shift+Alt+M |     |          Ctrl+Shift+Alt+M |               ctrl+shift+alt+m |          Ctrl+Shift+Alt+M |          ctrl+shift+alt+[KeyM] |         |\n```\n\n----------------------------------------\n\nTITLE: Mapping Period Key Combinations in VS Code (Markdown)\nDESCRIPTION: Defines keyboard shortcut mappings for the Period key (`.`) and its combinations with Ctrl, Shift, and Alt modifiers in VS Code. Lists corresponding Key, KeyCode, UI labels, user settings representations, Electron accelerators, and dispatch strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|                         Period |   ㄡ   |                           |     |                         ㄡ |                       [Period] |                      null |                       [Period] |    NO   |\n|                    Ctrl+Period |   ㄡ   |                           |     |                    Ctrl+ㄡ |                  ctrl+[Period] |                      null |                  ctrl+[Period] |    NO   |\n|                   Shift+Period |   。   |                         . |   1 |                   Shift+ㄡ |                 shift+[Period] |                      null |                 shift+[Period] |    NO   |\n|              Ctrl+Shift+Period |   。   |                    Ctrl+. |     |              Ctrl+Shift+ㄡ |            ctrl+shift+[Period] |                      null |            ctrl+shift+[Period] |    NO   |\n|                     Alt+Period |   ㄡ   |                           |     |                  Option+ㄡ |                   alt+[Period] |                      null |                   alt+[Period] |    NO   |\n|                Ctrl+Alt+Period |   .   |                         . |   2 |             Ctrl+Option+ㄡ |              ctrl+alt+[Period] |                      null |              ctrl+alt+[Period] |    NO   |\n|               Shift+Alt+Period |   。   |                     Alt+. |     |            Shift+Option+ㄡ |             shift+alt+[Period] |                      null |             shift+alt+[Period] |    NO   |\n|          Ctrl+Shift+Alt+Period |   >   |                   Shift+. |     |       Ctrl+Shift+Option+ㄡ |        ctrl+shift+alt+[Period] |                      null |        ctrl+shift+alt+[Period] |    NO   |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Simple Variable Expansion in JSON\nDESCRIPTION: This snippet shows the parsing of a shell command 'a $commit' with a simple variable expansion. It demonstrates how the parser handles variable expansions in the command structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 9,\n  \"text\": \"a $commit\",\n  \"innerText\": \"a $commit\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 9,\n      \"text\": \"a $commit\",\n      \"innerText\": \"a $commit\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"simple_expansion\",\n          \"endIndex\": 9,\n          \"text\": \"$commit\",\n          \"innerText\": \"$commit\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Subshell Command with Trailing Semicolon in JSON\nDESCRIPTION: This snippet shows the JSON representation of a parsed shell command using a subshell with a trailing semicolon. It illustrates the structure of the command, including program, subshell, and command elements.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 7,\n  \"text\": \"(a; b;)\",\n  \"innerText\": \"(a; b;)\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"subshell\",\n      \"endIndex\": 7,\n      \"text\": \"(a; b;)\",\n      \"innerText\": \"(a; b;)\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 1,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 1,\n              \"type\": \"word\",\n              \"endIndex\": 2,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 4,\n          \"type\": \"command\",\n          \"endIndex\": 5,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table Header Definition\nDESCRIPTION: Markdown table header row defining the columns used for keyboard shortcut mappings. Columns include HW Code combination, Key, KeyCode combination, Priority (Pri), UI label, User settings format, Electron accelerator, Dispatching string, and WYSIWYG representation.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_de_ch.txt#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Mapping Digit2 Keyboard Shortcuts in Markdown\nDESCRIPTION: Markdown table defining mappings for Digit2 combined with Ctrl, Shift, and Alt modifiers. It shows the resulting character ('2', '\"', '“', '”') and various platform-specific representations, including alternate mappings for Shift combinations (e.g., Shift+').\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_de_ch.txt#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                         Digit2 |   2   |                         2 |     |                         2 |                              2 |                         2 |                       [Digit2] |         |\n|                    Ctrl+Digit2 |   2   |                    Ctrl+2 |     |                    Ctrl+2 |                         ctrl+2 |                    Ctrl+2 |                  ctrl+[Digit2] |         |\n|                   Shift+Digit2 |   \"   |                   Shift+2 |     |                   Shift+2 |                        shift+2 |                   Shift+2 |                 shift+[Digit2] |         |\n|                                |       |                   Shift+' |     |                           |                                |                           |                                |         |\n|              Ctrl+Shift+Digit2 |   \"   |              Ctrl+Shift+2 |     |              Ctrl+Shift+2 |                   ctrl+shift+2 |              Ctrl+Shift+2 |            ctrl+shift+[Digit2] |         |\n|                                |       |              Ctrl+Shift+' |     |                           |                                |                           |                                |         |\n|                     Alt+Digit2 |   2   |                     Alt+2 |     |                  Option+2 |                          alt+2 |                     Alt+2 |                   alt+[Digit2] |         |\n|                Ctrl+Alt+Digit2 |   “   |                Ctrl+Alt+2 |     |             Ctrl+Option+2 |                     ctrl+alt+2 |                Ctrl+Alt+2 |              ctrl+alt+[Digit2] |         |\n|               Shift+Alt+Digit2 |   \"   |               Shift+Alt+2 |     |            Shift+Option+2 |                    shift+alt+2 |               Shift+Alt+2 |             shift+alt+[Digit2] |         |\n|                                |       |               Shift+Alt+' |     |                           |                                |                           |                                |         |\n|          Ctrl+Shift+Alt+Digit2 |   ”   |          Ctrl+Shift+Alt+2 |     |       Ctrl+Shift+Option+2 |               ctrl+shift+alt+2 |          Ctrl+Shift+Alt+2 |        ctrl+shift+alt+[Digit2] |         |\n|                                |       |          Ctrl+Shift+Alt+' |     |                           |                                |                           |                                |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Escaped Backticks in JSON\nDESCRIPTION: This snippet illustrates the parsing of a shell command 'a \\`b\\`' with escaped backticks. It shows how the parser handles escaped characters in the command structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 7,\n  \"text\": \"a \\\\`b\\\\`\",\n  \"innerText\": \"a \\\\`b\\\\`\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 7,\n      \"text\": \"a \\\\`b\\\\`\",\n      \"innerText\": \"a \\\\`b\\\\`\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 3,\n          \"type\": \"word\",\n          \"endIndex\": 7,\n          \"text\": \"`b\\\\`\",\n          \"innerText\": \"`b`\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Incomplete Compound Statement Shell Command in JSON\nDESCRIPTION: This snippet presents the JSON representation of a parsed shell command using an incomplete compound statement. It demonstrates the structure of the command, including program, compound_statement, and command components.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"{a; b}\",\n  \"innerText\": \"{a; b}\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"compound_statement\",\n      \"endIndex\": 6,\n      \"text\": \"{a; b}\",\n      \"innerText\": \"{a; b}\",\n      \"complete\": false,\n      \"children\": [\n        {\n          \"startIndex\": 1,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 1,\n              \"type\": \"word\",\n              \"endIndex\": 2,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 4,\n          \"type\": \"command\",\n          \"endIndex\": 6,\n          \"text\": \"b}\",\n          \"innerText\": \"b}\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 6,\n              \"text\": \"b}\",\n              \"innerText\": \"b}\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts Mapping Table\nDESCRIPTION: Detailed mapping table showing various keyboard combinations and their representations across different VSCode contexts. Includes combinations for keys O through T with different modifiers (Ctrl, Shift, Alt) and their resulting characters, UI labels, and internal representations.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_de_ch.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n|                           KeyO |   o   |                         O |     |                         O |                              o |                         O |                         [KeyO] |         |\n|                      Ctrl+KeyO |   o   |                    Ctrl+O |     |                    Ctrl+O |                         ctrl+o |                    Ctrl+O |                    ctrl+[KeyO] |         |\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Shortcuts for Key O in VS Code\nDESCRIPTION: This Markdown table section defines the mappings for keyboard shortcuts using the 'O' key, both alone and combined with Ctrl, Shift, Alt, and their combinations (excluding Shift+Alt and Ctrl+Shift+Alt). It specifies the hardware code, resulting key, KeyCode, UI label, user settings format, Electron accelerator, and dispatch string for each combination.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyO |   o   |                         O |     |                         O |                              o |                         O |                         [KeyO] |         |\n|                      Ctrl+KeyO |   o   |                    Ctrl+O |     |                    Ctrl+O |                         ctrl+o |                    Ctrl+O |                    ctrl+[KeyO] |         |\n|                     Shift+KeyO |   O   |                   Shift+O |     |                   Shift+O |                        shift+o |                   Shift+O |                   shift+[KeyO] |         |\n|                Ctrl+Shift+KeyO |   O   |              Ctrl+Shift+O |     |              Ctrl+Shift+O |                   ctrl+shift+o |              Ctrl+Shift+O |              ctrl+shift+[KeyO] |         |\n|                       Alt+KeyO |   o   |                     Alt+O |     |                  Option+O |                          alt+o |                     Alt+O |                     alt+[KeyO] |         |\n|                  Ctrl+Alt+KeyO |   ø   |                Ctrl+Alt+O |     |             Ctrl+Option+O |                     ctrl+alt+o |                Ctrl+Alt+O |                ctrl+alt+[KeyO] |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Pipeline with Error Redirection (|&) Shell Command in JSON\nDESCRIPTION: This snippet shows the JSON representation of a parsed shell command using a pipeline with error redirection (|&). It illustrates the structure of the command, including program, pipeline, and command elements.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a |& b\",\n  \"innerText\": \"a |& b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"pipeline\",\n      \"endIndex\": 6,\n      \"text\": \"a |& b\",\n      \"innerText\": \"a |& b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a \",\n          \"innerText\": \"a \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"word\",\n              \"endIndex\": 1,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 5,\n          \"type\": \"command\",\n          \"endIndex\": 6,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 5,\n              \"type\": \"word\",\n              \"endIndex\": 6,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Babel Types Dependency in Yarn Package Manager\nDESCRIPTION: Specifies the @babel/types package dependency with a minimum version requirement of 7.22.15. This is part of a package.json or yarn.lock file.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-204948/2.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"@babel/types\" \"^7.22.15\"\n```\n\n----------------------------------------\n\nTITLE: Defining AST Structure for Shell Command in JSON\nDESCRIPTION: This JSON structure defines an Abstract Syntax Tree (AST) for parsing shell commands. It breaks down a complex command '(a) | b c' into its component parts, including pipelines, subshells, and individual commands. Each node in the tree contains information about its type, start and end indices, and complete text.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"pipeline\",\n      \"endIndex\": 8,\n      \"text\": \"(a) | b \",\n      \"innerText\": \"(a) | b \",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"subshell\",\n          \"endIndex\": 3,\n          \"text\": \"(a)\",\n          \"innerText\": \"(a)\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 1,\n              \"type\": \"command\",\n              \"endIndex\": 2,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 1,\n                  \"type\": \"word\",\n                  \"endIndex\": 2,\n                  \"text\": \"a\",\n                  \"innerText\": \"a\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"startIndex\": 6,\n          \"type\": \"command\",\n          \"endIndex\": 8,\n          \"text\": \"b \",\n          \"innerText\": \"b \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 6,\n              \"type\": \"word\",\n              \"endIndex\": 7,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"startIndex\": 11,\n      \"type\": \"command\",\n      \"endIndex\": 12,\n      \"text\": \"c\",\n      \"innerText\": \"c\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 11,\n          \"type\": \"word\",\n          \"endIndex\": 12,\n          \"text\": \"c\",\n          \"innerText\": \"c\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Authentication Provider Documentation in Markdown\nDESCRIPTION: Markdown documentation explaining the GitHub authentication extension's features and bundled nature with VS Code. Describes its role as an authentication provider for other extensions and Settings Sync.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/github-authentication/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GitHub Authentication for Visual Studio Code\n\n**Notice:** This extension is bundled with Visual Studio Code. It can be disabled but not uninstalled.\n\n## Features\n\nThis extension provides support for authenticating to GitHub. It registers the `github` Authentication Provider that can be leveraged by other extensions. This also provides the GitHub authentication used by Settings Sync.\n```\n\n----------------------------------------\n\nTITLE: Shell Parser Test Case - Variable Expansion with Default Value\nDESCRIPTION: Tests parsing of variable expansion with default value syntax ${b:+c}\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/primaryExpressions/output.txt#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 14,\n  \"text\": \"a \\\"\\\\${b:+\\\"c\\\"}\\\"\",\n  \"innerText\": \"a \\\"\\\\${b:+\\\"c\\\"}\\\"\",\n  \"complete\": true,\n  \"children\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Babel Traverse Dependency with Full Metadata in Yarn Lock\nDESCRIPTION: Specifies the @babel/traverse package with version 7.23.9, including its resolved URL, integrity hash, and nested dependencies. This is part of a yarn.lock file.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/fixtures/issue-204948/2.txt#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"@babel/traverse@^7.23.9\":\n  version \"7.23.9\"\n  resolved \"https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.23.7.tgz#9a7bf285c928cb99b5ead19c3b1ce5b310c9c305\"\n  integrity sha512-I/4UJ9vs90OkBtY6iiiTORVMyIhJ4kAVmsKo9KFc8UOxMeUfi2hvtIBsET5u9GizXE6/GFSuKCTNfgCswuEjRg==\n  dependencies:\n    \"@babel/code-frame\" \"^7.23.5\"\n    \"@babel/generator\" \"^7.23.6\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Pipeline (|) Shell Command in JSON\nDESCRIPTION: This snippet presents the JSON representation of a parsed shell command using a pipeline (|). It demonstrates the structure of the command, including program, pipeline, and command components.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/multipleStatements/output.txt#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 5,\n  \"text\": \"a | b\",\n  \"innerText\": \"a | b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"pipeline\",\n      \"endIndex\": 5,\n      \"text\": \"a | b\",\n      \"innerText\": \"a | b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"command\",\n          \"endIndex\": 2,\n          \"text\": \"a \",\n          \"innerText\": \"a \",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 0,\n              \"type\": \"word\",\n              \"endIndex\": 1,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        },\n        {\n          \"startIndex\": 4,\n          \"type\": \"command\",\n          \"endIndex\": 5,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for VS Code Merge Conflict Extension\nDESCRIPTION: Markdown documentation explaining that the Merge Conflict extension is bundled with VS Code and describing where to find feature documentation.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/merge-conflict/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Merge Conflict\n\n**Notice:** This extension is bundled with Visual Studio Code. It can be disabled but not uninstalled.\n\n## Features\n\nSee [Merge Conflicts in VS Code](https://code.visualstudio.com/docs/editor/versioncontrol#_merge-conflicts) to learn about features of this extension.\n```\n\n----------------------------------------\n\nTITLE: Shell Parser Test Case - String Concatenation\nDESCRIPTION: Tests parsing of word and string concatenation without spaces\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/primaryExpressions/output.txt#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a b\\\"c\\\"\",\n  \"innerText\": \"a b\\\"c\\\"\",\n  \"complete\": true,\n  \"children\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Keyboard Key Combination Mappings - Markdown Table - Markdown\nDESCRIPTION: This Markdown code snippet creates a table that maps various hardware key combinations (such as Shift+Backslash, Ctrl+Alt+Semicolon, etc.) to their corresponding key value, VSCode key code combination, UI label, user setting string, and WYSIWYG support. The table format makes it easy for developers and users to cross-reference input combinations with their internal representations in the editor. There are no runtime dependencies besides a Markdown parser; all data is presented for documentation purposes only, with no programmatically parsed inputs or outputs.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/win_en_us.txt#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n|                Shift+Backslash |   |   |                   Shift+\\ |                   Shift+\\ |                    shift+\\ |         |\n|             Ctrl+Alt+Backslash |  ---  |                Ctrl+Alt+\\ |                Ctrl+Alt+\\ |                 ctrl+alt+\\ |         |\n|       Ctrl+Shift+Alt+Backslash |  ---  |          Ctrl+Shift+Alt+\\ |          Ctrl+Shift+Alt+\\ |           ctrl+shift+alt+\\ |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                       IntlHash |  ---  |                      null |                      null |                       null |    NO   |\n|                 Shift+IntlHash |  ---  |                      null |                      null |                       null |    NO   |\n|              Ctrl+Alt+IntlHash |  ---  |                      null |                      null |                       null |    NO   |\n|        Ctrl+Shift+Alt+IntlHash |  ---  |                      null |                      null |                       null |    NO   |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                      Semicolon |   ;   |                         ; |                         ; |                          ; |         |\n|                Shift+Semicolon |   :   |                   Shift+; |                   Shift+; |                    shift+; |         |\n|             Ctrl+Alt+Semicolon |  ---  |                Ctrl+Alt+; |                Ctrl+Alt+; |                 ctrl+alt+; |         |\n|       Ctrl+Shift+Alt+Semicolon |  ---  |          Ctrl+Shift+Alt+; |          Ctrl+Shift+Alt+; |           ctrl+shift+alt+; |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                          Quote |   '   |                         ' |                         ' |                          ' |         |\n|                    Shift+Quote |   \"   |                   Shift+' |                   Shift+' |                    shift+' |         |\n|                 Ctrl+Alt+Quote |  ---  |                Ctrl+Alt+' |                Ctrl+Alt+' |                 ctrl+alt+' |         |\n|           Ctrl+Shift+Alt+Quote |  ---  |          Ctrl+Shift+Alt+' |          Ctrl+Shift+Alt+' |           ctrl+shift+alt+' |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                      Backquote |   `   |                         ` |                         ` |                          ` |         |\n|                Shift+Backquote |   ~   |                   Shift+` |                   Shift+` |                    shift+` |         |\n|             Ctrl+Alt+Backquote |  ---  |                Ctrl+Alt+` |                Ctrl+Alt+` |                 ctrl+alt+` |         |\n|       Ctrl+Shift+Alt+Backquote |  ---  |          Ctrl+Shift+Alt+` |          Ctrl+Shift+Alt+` |           ctrl+shift+alt+` |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                          Comma |   ,   |                         , |                         , |                          , |         |\n|                    Shift+Comma |   <   |                   Shift+, |                   Shift+, |                    shift+, |         |\n|                 Ctrl+Alt+Comma |  ---  |                Ctrl+Alt+, |                Ctrl+Alt+, |                 ctrl+alt+, |         |\n|           Ctrl+Shift+Alt+Comma |  ---  |          Ctrl+Shift+Alt+, |          Ctrl+Shift+Alt+, |           ctrl+shift+alt+, |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                         Period |   .   |                         . |                         . |                          . |         |\n|                   Shift+Period |   >   |                   Shift+. |                   Shift+. |                    shift+. |         |\n|                Ctrl+Alt+Period |  ---  |                Ctrl+Alt+. |                Ctrl+Alt+. |                 ctrl+alt+. |         |\n|          Ctrl+Shift+Alt+Period |  ---  |          Ctrl+Shift+Alt+. |          Ctrl+Shift+Alt+. |           ctrl+shift+alt+. |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                          Slash |   /   |                         / |                         / |                          / |         |\n|                    Shift+Slash |   ?   |                   Shift+/ |                   Shift+/ |                    shift+/ |         |\n|                 Ctrl+Alt+Slash |  ---  |                Ctrl+Alt+/ |                Ctrl+Alt+/ |                 ctrl+alt+/ |         |\n|           Ctrl+Shift+Alt+Slash |  ---  |          Ctrl+Shift+Alt+/ |          Ctrl+Shift+Alt+/ |           ctrl+shift+alt+/ |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                        ArrowUp |  ---  |                   UpArrow |                   UpArrow |                         up |         |\n|                  Shift+ArrowUp |  ---  |             Shift+UpArrow |             Shift+UpArrow |                   shift+up |         |\n|               Ctrl+Alt+ArrowUp |  ---  |          Ctrl+Alt+UpArrow |          Ctrl+Alt+UpArrow |                ctrl+alt+up |         |\n|         Ctrl+Shift+Alt+ArrowUp |  ---  |    Ctrl+Shift+Alt+UpArrow |    Ctrl+Shift+Alt+UpArrow |          ctrl+shift+alt+up |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                        Numpad0 |  ---  |                   NumPad0 |                   NumPad0 |                    numpad0 |         |\n|                  Shift+Numpad0 |  ---  |             Shift+NumPad0 |             Shift+NumPad0 |              shift+numpad0 |         |\n|               Ctrl+Alt+Numpad0 |  ---  |          Ctrl+Alt+NumPad0 |          Ctrl+Alt+NumPad0 |           ctrl+alt+numpad0 |         |\n|         Ctrl+Shift+Alt+Numpad0 |  ---  |    Ctrl+Shift+Alt+NumPad0 |    Ctrl+Shift+Alt+NumPad0 |     ctrl+shift+alt+numpad0 |         |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                  IntlBackslash |   \\   |                   OEM_102 |                         \\ |                    oem_102 |    NO   |\n|            Shift+IntlBackslash |   |   |             Shift+OEM_102 |                   Shift+\\ |              shift+oem_102 |    NO   |\n|         Ctrl+Alt+IntlBackslash |  ---  |          Ctrl+Alt+OEM_102 |                Ctrl+Alt+\\ |           ctrl+alt+oem_102 |    NO   |\n|   Ctrl+Shift+Alt+IntlBackslash |  ---  |    Ctrl+Shift+Alt+OEM_102 |          Ctrl+Shift+Alt+\\ |     ctrl+shift+alt+oem_102 |    NO   |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                         IntlRo |  ---  |                      null |                      null |                       null |    NO   |\n|                   Shift+IntlRo |  ---  |                      null |                      null |                       null |    NO   |\n|                Ctrl+Alt+IntlRo |  ---  |                      null |                      null |                       null |    NO   |\n|          Ctrl+Shift+Alt+IntlRo |  ---  |                      null |                      null |                       null |    NO   |\n-----------------------------------------------------------------------------------------------------------------------------------------\n|                        IntlYen |  ---  |                      null |                      null |                       null |    NO   |\n|                  Shift+IntlYen |  ---  |                      null |                      null |                       null |    NO   |\n|               Ctrl+Alt+IntlYen |  ---  |                      null |                      null |                       null |    NO   |\n|         Ctrl+Shift+Alt+IntlYen |  ---  |                      null |                      null |                       null |    NO   |\n-----------------------------------------------------------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Special Expansion ($$) in JSON\nDESCRIPTION: This snippet illustrates the parsing of a shell command 'a $$' with a special expansion ($$). It shows how the parser handles this special type of expansion in the command structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 4,\n  \"text\": \"a $$\",\n  \"innerText\": \"a $$\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 4,\n      \"text\": \"a $$\",\n      \"innerText\": \"a $$\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"special_expansion\",\n          \"endIndex\": 4,\n          \"text\": \"$$\",\n          \"innerText\": \"$$\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CSS Language Features Extension\nDESCRIPTION: Command to install all dependencies for the CSS language features extension, including client and server dependencies as well as development tools like gulp.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/css-language-features/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Shell Parser Test Case - Escaped Variable in Single Quotes\nDESCRIPTION: Tests parsing of escaped variable syntax within single quotes, which should be treated literally\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/primaryExpressions/output.txt#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 9,\n  \"text\": \"a '\\\\${b}'\",\n  \"innerText\": \"a '\\\\${b}'\",\n  \"complete\": true,\n  \"children\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyboard Shortcut Mappings in Markdown Table\nDESCRIPTION: This snippet shows a markdown table that maps various keyboard shortcuts to their representations in different contexts. It includes hardware code combinations, key codes, UI labels, user settings, Electron accelerators, and dispatching strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   ㄇ   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   ㄇ   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   ㄇ   |                     Alt+A |     |                  Option+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   a   |                Ctrl+Alt+A |     |             Ctrl+Option+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |            Shift+Option+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   A   |          Ctrl+Shift+Alt+A |     |       Ctrl+Shift+Option+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with ANSI C-style String in JSON\nDESCRIPTION: This snippet demonstrates the parsing of a shell command 'a $'b'' with an ANSI C-style string. It shows how the parser handles this special string format in the command structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a $'b'\",\n  \"innerText\": \"a $'b'\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 6,\n      \"text\": \"a $'b'\",\n      \"innerText\": \"a $'b'\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"ansi_c_string\",\n          \"endIndex\": 6,\n          \"text\": \"$'b'\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Quarantine Attribute from macOS Server Build\nDESCRIPTION: This command removes the quarantine attribute from the downloaded server with web folder zip file on macOS to avoid security issues on startup.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/smoke/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxattr -d com.apple.quarantine <path to server with web folder zip>\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Single Quotes and Backslashes\nDESCRIPTION: This snippet shows the AST for a shell command containing a word and a concatenation of raw strings with backslashes. It demonstrates how single quotes and escaped characters are handled in the parsing process.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/primaryExpressions/output.txt#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 9,\n  \"text\": \"a 'b\\\\\\\\'c'\",\n  \"innerText\": \"a 'b\\\\\\\\'c'\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 9,\n      \"text\": \"a 'b\\\\\\\\'c'\",\n      \"innerText\": \"a 'b\\\\\\\\'c'\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"concatenation\",\n          \"endIndex\": 9,\n          \"text\": \"'b\\\\\\\\'c'\",\n          \"innerText\": \"b\\\\\\\\c\",\n          \"complete\": false,\n          \"children\": [\n            {\n              \"startIndex\": 2,\n              \"type\": \"raw_string\",\n              \"endIndex\": 7,\n              \"text\": \"'b\\\\\\\\'\",\n              \"innerText\": \"b\\\\\\\\\",\n              \"complete\": true,\n              \"children\": []\n            },\n            {\n              \"startIndex\": 7,\n              \"type\": \"word\",\n              \"endIndex\": 8,\n              \"text\": \"c\",\n              \"innerText\": \"c\",\n              \"complete\": true,\n              \"children\": []\n            },\n            {\n              \"startIndex\": 8,\n              \"type\": \"raw_string\",\n              \"endIndex\": 9,\n              \"text\": \"'\",\n              \"innerText\": \"\",\n              \"complete\": false,\n              \"children\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Backquote Key Combinations in VS Code (Markdown)\nDESCRIPTION: Defines keyboard shortcut mappings for the Backquote key (` ` `) and its combinations with Ctrl, Shift, and Alt modifiers in VS Code. Lists corresponding Key, KeyCode, UI labels, user settings representations, Electron accelerators, and dispatch strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                Shift+Backquote |   ~   |                   Shift+` |     |                   Shift+· |              shift+[Backquote] |                      null |              shift+[Backquote] |    NO   |\n|           Ctrl+Shift+Backquote |   ~   |              Ctrl+Shift+` |     |              Ctrl+Shift+· |         ctrl+shift+[Backquote] |                      null |         ctrl+shift+[Backquote] |    NO   |\n|                  Alt+Backquote |   ·   |                           |     |                  Option+· |                alt+[Backquote] |                      null |                alt+[Backquote] |    NO   |\n|             Ctrl+Alt+Backquote |   `   |                         ` |     |             Ctrl+Option+· |           ctrl+alt+[Backquote] |                      null |           ctrl+alt+[Backquote] |    NO   |\n|            Shift+Alt+Backquote |   ~   |               Shift+Alt+` |     |            Shift+Option+· |          shift+alt+[Backquote] |                      null |          shift+alt+[Backquote] |    NO   |\n|       Ctrl+Shift+Alt+Backquote |   ~   |          Ctrl+Shift+Alt+` |     |       Ctrl+Shift+Option+· |     ctrl+shift+alt+[Backquote] |                      null |     ctrl+shift+alt+[Backquote] |    NO   |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Command Substitution and Escaped Backticks in JSON\nDESCRIPTION: This snippet demonstrates the parsing of a shell command 'a $(\\`b\\`)' with command substitution containing escaped backticks. It shows how the parser handles complex nested structures with escaped characters.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 10,\n  \"text\": \"a $(\\\\`b\\\\`)\",\n  \"innerText\": \"a $(\\\\`b\\\\`)\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 10,\n      \"text\": \"a $(\\\\`b\\\\`)\",\n      \"innerText\": \"a $(\\\\`b\\\\`)\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"command_substitution\",\n          \"endIndex\": 10,\n          \"text\": \"$(\\\\`b\\\\`)\",\n          \"innerText\": \"$(\\\\`b\\\\`)\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"command\",\n              \"endIndex\": 9,\n              \"text\": \"\\\\`b\\\\`\",\n              \"innerText\": \"\\\\`b\\\\`\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 5,\n                  \"type\": \"word\",\n                  \"endIndex\": 9,\n                  \"text\": \"`b\\\\`\",\n                  \"innerText\": \"`b`\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running VSCode Integration Tests with Bash Script\nDESCRIPTION: Command to execute integration tests for VSCode which include Emmet extension tests using the test-integration script.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/emmet/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/test-integration.sh\n```\n\n----------------------------------------\n\nTITLE: Parsing Multiple Shell Assignments and Logical AND (Incomplete) in JSON\nDESCRIPTION: Incomplete JSON AST representation, starting to parse the shell command `ENV+=a ENV=b && foo`. It shows the top-level 'program' node but truncates before fully detailing the children, likely intended to include the two assignments (`ENV+=a`, `ENV=b`) and the logical AND operator (`&&`) followed by the command `foo`.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n// Case 10\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 19,\n  \"text\": \"ENV+=a ENV=b && foo\",\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Command Substitution\nDESCRIPTION: This snippet demonstrates the AST for a complex shell command involving command substitution within a double-quoted string. It shows how nested commands, strings, and logical operators are parsed and represented in the AST structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/primaryExpressions/output.txt#2025-04-23_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 17,\n  \"text\": \"a \\\"$(b \\\"c\\\" && d)\\\"\",\n  \"innerText\": \"a \\\"$(b \\\"c\\\" && d)\\\"\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 17,\n      \"text\": \"a \\\"$(b \\\"c\\\" && d)\\\"\",\n      \"innerText\": \"a \\\"$(b \\\"c\\\" && d)\\\"\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"string\",\n          \"endIndex\": 17,\n          \"text\": \"\\\"$(b \\\"c\\\" && d)\\\"\",\n          \"innerText\": \"$(b \\\"c\\\" && d)\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 3,\n              \"type\": \"command_substitution\",\n              \"endIndex\": 16,\n              \"text\": \"$(b \\\"c\\\" && d)\",\n              \"innerText\": \"$(b \\\"c\\\" && d)\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 5,\n                  \"type\": \"list\",\n                  \"endIndex\": 15,\n                  \"text\": \"b \\\"c\\\" && d\",\n                  \"innerText\": \"b \\\"c\\\" && d\",\n                  \"complete\": true,\n                  \"children\": [\n                    {\n                      \"startIndex\": 5,\n                      \"type\": \"command\",\n                      \"endIndex\": 11,\n                      \"text\": \"b \\\"c\\\" \",\n                      \"innerText\": \"b \\\"c\\\" \",\n                      \"complete\": true,\n                      \"children\": [\n                        {\n                          \"startIndex\": 5,\n                          \"type\": \"word\",\n                          \"endIndex\": 6,\n                          \"text\": \"b\",\n                          \"innerText\": \"b\",\n                          \"complete\": true,\n                          \"children\": []\n                        },\n                        {\n                          \"startIndex\": 7,\n                          \"type\": \"string\",\n                          \"endIndex\": 10,\n                          \"text\": \"\\\"c\\\"\",\n                          \"innerText\": \"c\",\n                          \"complete\": true,\n                          \"children\": []\n                        }\n                      ]\n                    },\n                    {\n                      \"startIndex\": 14,\n                      \"type\": \"command\",\n                      \"endIndex\": 15,\n                      \"text\": \"d\",\n                      \"innerText\": \"d\",\n                      \"complete\": true,\n                      \"children\": [\n                        {\n                          \"startIndex\": 14,\n                          \"type\": \"word\",\n                          \"endIndex\": 15,\n                          \"text\": \"d\",\n                          \"innerText\": \"d\",\n                          \"complete\": true,\n                          \"children\": []\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Numpad0 Key Combinations in VS Code (Markdown)\nDESCRIPTION: Defines keyboard shortcut mappings for the Numpad0 key and its combination with the Ctrl modifier in VS Code. Lists corresponding Key, KeyCode, UI labels, user settings representations, Electron accelerators, and dispatch strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n|                        Numpad0 |  ---  |                   NumPad0 |     |                   NumPad0 |                        numpad0 |                      null |                      [Numpad0] |         |\n|                   Ctrl+Numpad0 |  ---  |              Ctrl+NumPad0 |     |              Ctrl+NumPad0 |                   ctrl+numpad0 |                      null |                 ctrl+[Numpad0] |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Assignment List (Continuation) in JSON\nDESCRIPTION: Partial JSON representing the structure of a parsed shell command, likely involving an environment variable assignment (`ENV=`) followed by a command (`c`). It details the `variable_name` ('ENV'), `operator` ('='), and the subsequent `command` ('c') with its `word` child within an `assignment_list`. This appears to be the latter part of a larger JSON structure representing a command like `VAR=val ENV=val2 c`.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n                \"type\": \"variable_name\",\n                \"endIndex\": 20,\n                \"text\": \"ENV\",\n                \"innerText\": \"ENV\",\n                \"complete\": true,\n                \"children\": []\n              },\n              \"operator\": \"=\"\n            },\n            {\n              \"startIndex\": 23,\n              \"type\": \"command\",\n              \"endIndex\": 24,\n              \"text\": \"c\",\n              \"innerText\": \"c\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 23,\n                  \"type\": \"word\",\n                  \"endIndex\": 24,\n                  \"text\": \"c\",\n                  \"innerText\": \"c\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            }\n          ],\n          \"hasCommand\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Initial Setup Commands for JSON Language Features Extension\nDESCRIPTION: Command to install dependencies for the JSON language features extension and its server component. This needs to be run at the root of the VS Code repository.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Parsing Incomplete Single-Quoted String Assignment in Shell\nDESCRIPTION: This JSON structure represents a parsed shell command with an incomplete single-quoted string assignment. It demonstrates how the parser handles incomplete raw strings in assignments.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"ENV='a\",\n  \"innerText\": \"ENV='a\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 6,\n      \"text\": \"ENV='a\",\n      \"innerText\": \"ENV='a\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 6,\n          \"text\": \"ENV='a\",\n          \"innerText\": \"ENV='a\",\n          \"complete\": false,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"raw_string\",\n              \"endIndex\": 6,\n              \"text\": \"'a\",\n              \"innerText\": \"a\",\n              \"complete\": false,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Shortcuts for Key J in VS Code\nDESCRIPTION: This Markdown table section defines the mappings for keyboard shortcuts using the 'J' key combined with Shift+Alt and Ctrl+Shift+Alt modifiers. It specifies the hardware code, resulting key, KeyCode, UI label, user settings format, Electron accelerator, and dispatch string for these combinations.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                 Shift+Alt+KeyJ |   J   |               Shift+Alt+J |     |            Shift+Option+J |                    shift+alt+j |               Shift+Alt+J |               shift+alt+[KeyJ] |         |\n|            Ctrl+Shift+Alt+KeyJ |   Ô   |          Ctrl+Shift+Alt+J |     |       Ctrl+Shift+Option+J |               ctrl+shift+alt+j |          Ctrl+Shift+Alt+J |          ctrl+shift+alt+[KeyJ] |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Multiple Variable Assignments\nDESCRIPTION: JSON representation of a parsed shell command with multiple environment variable assignments followed by a command. This shows how 'ENV=a ENV=b a' is structured with the same variable name being assigned different values before command execution.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 13,\n  \"text\": \"ENV=a ENV=b a\",\n  \"innerText\": \"ENV=a ENV=b a\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 13,\n      \"text\": \"ENV=a ENV=b a\",\n      \"innerText\": \"ENV=a ENV=b a\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 5,\n          \"text\": \"ENV=a\",\n          \"innerText\": \"ENV=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 6,\n          \"type\": \"assignment\",\n          \"endIndex\": 11,\n          \"text\": \"ENV=b\",\n          \"innerText\": \"ENV=b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 10,\n              \"type\": \"word\",\n              \"endIndex\": 11,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 6,\n            \"type\": \"variable_name\",\n            \"endIndex\": 9,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 12,\n          \"type\": \"command\",\n          \"endIndex\": 13,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 12,\n              \"type\": \"word\",\n              \"endIndex\": 13,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ],\n      \"hasCommand\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Recompiling Server with Linked Language Service\nDESCRIPTION: Command to recompile the server component of the HTML Language Features extension with the linked version of vscode-html-languageservice, enabling testing of changes to the language service.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/html-language-features/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Multiple Assignments and Incomplete Command Substitution\nDESCRIPTION: This JSON structure represents a parsed shell command with multiple variable assignments, including an incomplete command substitution. It shows how the parser handles complex assignments and unfinished command substitutions.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 12,\n  \"text\": \"ENV=a ENV=`b\",\n  \"innerText\": \"ENV=a ENV=`b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 12,\n      \"text\": \"ENV=a ENV=`b\",\n      \"innerText\": \"ENV=a ENV=`b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 5,\n          \"text\": \"ENV=a\",\n          \"innerText\": \"ENV=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 6,\n          \"type\": \"assignment\",\n          \"endIndex\": 12,\n          \"text\": \"ENV=`b\",\n          \"innerText\": \"ENV=`b\",\n          \"complete\": false,\n          \"children\": [\n            {\n              \"startIndex\": 10,\n              \"type\": \"command_substitution\",\n              \"endIndex\": 12,\n              \"text\": \"`b\",\n              \"innerText\": \"`b\",\n              \"complete\": false,\n              \"children\": [\n                {\n                  \"startIndex\": 11,\n                  \"type\": \"command\",\n                  \"endIndex\": 12,\n                  \"text\": \"b\",\n                  \"innerText\": \"b\",\n                  \"complete\": true,\n                  \"children\": [\n                    {\n                      \"startIndex\": 11,\n                      \"type\": \"word\",\n                      \"endIndex\": 12,\n                      \"text\": \"b\",\n                      \"innerText\": \"b\",\n                      \"complete\": true,\n                      \"children\": []\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 6,\n            \"type\": \"variable_name\",\n            \"endIndex\": 9,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Shortcuts for Key M in VS Code\nDESCRIPTION: This Markdown table section defines the mappings for keyboard shortcuts using the 'M' key, both alone and combined with Ctrl, Shift, Alt, and their combinations. It specifies the hardware code, resulting key, KeyCode, UI label, user settings format, Electron accelerator, and dispatch string for each combination.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|                           KeyM |   m   |                         M |     |                         M |                              m |                         M |                         [KeyM] |         |\n|                      Ctrl+KeyM |   m   |                    Ctrl+M |     |                    Ctrl+M |                         ctrl+m |                    Ctrl+M |                    ctrl+[KeyM] |         |\n|                     Shift+KeyM |   M   |                   Shift+M |     |                   Shift+M |                        shift+m |                   Shift+M |                   shift+[KeyM] |         |\n|                Ctrl+Shift+KeyM |   M   |              Ctrl+Shift+M |     |              Ctrl+Shift+M |                   ctrl+shift+m |              Ctrl+Shift+M |              ctrl+shift+[KeyM] |         |\n|                       Alt+KeyM |   m   |                     Alt+M |     |                  Option+M |                          alt+m |                     Alt+M |                     alt+[KeyM] |         |\n|                  Ctrl+Alt+KeyM |   µ   |                Ctrl+Alt+M |     |             Ctrl+Option+M |                     ctrl+alt+m |                Ctrl+Alt+M |                ctrl+alt+[KeyM] |         |\n|                 Shift+Alt+KeyM |   M   |               Shift+Alt+M |     |            Shift+Option+M |                    shift+alt+m |               Shift+Alt+M |               shift+alt+[KeyM] |         |\n|            Ctrl+Shift+Alt+KeyM |   Â   |          Ctrl+Shift+Alt+M |     |       Ctrl+Shift+Option+M |               ctrl+shift+alt+m |          Ctrl+Shift+Alt+M |          ctrl+shift+alt+[KeyM] |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Incomplete Double-Quoted String Assignment in Shell\nDESCRIPTION: This JSON structure represents a parsed shell command with an incomplete double-quoted string assignment. It shows how the parser handles incomplete strings and assignments.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"ENV=\\\"a\",\n  \"innerText\": \"ENV=\\\"a\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 6,\n      \"text\": \"ENV=\\\"a\",\n      \"innerText\": \"ENV=\\\"a\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 6,\n          \"text\": \"ENV=\\\"a\",\n          \"innerText\": \"ENV=\\\"a\",\n          \"complete\": false,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"string\",\n              \"endIndex\": 6,\n              \"text\": \"\\\"a\",\n              \"innerText\": \"a\",\n              \"complete\": false,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SHA-256 Checksums for VSCode Toolchain Tarballs\nDESCRIPTION: A list of SHA-256 hash values for verifying the integrity of VSCode toolchain tarballs. Includes checksums for different architectures (ARM64, ARM RPi, x86_64) and compiler versions (GCC 8.5.0, 10.3.0, 10.5.0).\nSOURCE: https://github.com/microsoft/vscode/blob/main/build/checksums/vscode-sysroot.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3baac81a39b69e0929e4700f4f78f022adefc515010054ec393565657c4fff32  aarch64-linux-gnu-glibc-2.28-gcc-10.5.0.tar.gz\nb4fb7a62ee7a474cfb11d5fb2b73accd6a8c875a559db81d6dfccd0b4a3da442  aarch64-linux-gnu-glibc-2.28-gcc-8.5.0.tar.gz\n633e88658561ab4643bc5998c88e565a26553b0e97fd07672cb452afb4d9b276  aarch64-linux-musl-gcc-10.3.0.tar.gz\n6e251200607ac4c4709ebd08b2dc0d9a353ddcfdb47f43a10c2b4cc4b49920c0  arm-rpi-linux-gnueabihf-glibc-2.28-gcc-10.5.0.tar.gz\nf82c8dacbb9dd85819e4801909eb4e842ac12c899632aa75b4839383a18c7501  arm-rpi-linux-gnueabihf-glibc-2.28-gcc-8.5.0.tar.gz\n3122af49c493c5c767c2b0772a41119cbdc9803125a705683445b4066dc88b82  x86_64-linux-gnu-glibc-2.28-gcc-10.5.0.tar.gz\n84acc5a15566c98ddf80631731d672e0ce9febcf3f2e969101e0dfd7ef2405e3  x86_64-linux-gnu-glibc-2.28-gcc-8.5.0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex Shell Command with Variable Assignment and Command Substitution\nDESCRIPTION: This snippet demonstrates the parsing of a shell command that includes variable assignment, command substitution, and multiple commands. It shows how the parser breaks down the command 'c $(ENV=a foo)' into its constituent parts.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 14,\n  \"text\": \"c $(ENV=a foo)\",\n  \"innerText\": \"c $(ENV=a foo)\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 14,\n      \"text\": \"c $(ENV=a foo)\",\n      \"innerText\": \"c $(ENV=a foo)\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"c\",\n          \"innerText\": \"c\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"command_substitution\",\n          \"endIndex\": 14,\n          \"text\": \"$(ENV=a foo)\",\n          \"innerText\": \"$(ENV=a foo)\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"assignment_list\",\n              \"endIndex\": 13,\n              \"text\": \"ENV=a foo\",\n              \"innerText\": \"ENV=a foo\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 4,\n                  \"type\": \"assignment\",\n                  \"endIndex\": 9,\n                  \"text\": \"ENV=a\",\n                  \"innerText\": \"ENV=a\",\n                  \"complete\": true,\n                  \"children\": [\n                    {\n                      \"startIndex\": 8,\n                      \"type\": \"word\",\n                      \"endIndex\": 9,\n                      \"text\": \"a\",\n                      \"innerText\": \"a\",\n                      \"complete\": true,\n                      \"children\": []\n                    }\n                  ],\n                  \"name\": {\n                    \"startIndex\": 4,\n                    \"type\": \"variable_name\",\n                    \"endIndex\": 7,\n                    \"text\": \"ENV\",\n                    \"innerText\": \"ENV\",\n                    \"complete\": true,\n                    \"children\": []\n                  },\n                  \"operator\": \"=\"\n                },\n                {\n                  \"startIndex\": 10,\n                  \"type\": \"command\",\n                  \"endIndex\": 13,\n                  \"text\": \"foo\",\n                  \"innerText\": \"foo\",\n                  \"complete\": true,\n                  \"children\": [\n                    {\n                      \"startIndex\": 10,\n                      \"type\": \"word\",\n                      \"endIndex\": 13,\n                      \"text\": \"foo\",\n                      \"innerText\": \"foo\",\n                      \"complete\": true,\n                      \"children\": []\n                    }\n                  ]\n                }\n              ],\n              \"hasCommand\": true\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Assignment (Command Substitution) and Command in JSON\nDESCRIPTION: Complete JSON AST representation for the shell command `ENV=\\`cmd\\` a`. It breaks down the command into a 'program' and 'assignment_list'. The list contains an 'assignment' for 'ENV' where the value is a 'command_substitution' using backticks (\\`cmd\\`), followed by the command 'a'.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// Case 7\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 11,\n  \"text\": \"ENV=`cmd` a\",\n  \"innerText\": \"ENV=`cmd` a\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 11,\n      \"text\": \"ENV=`cmd` a\",\n      \"innerText\": \"ENV=`cmd` a\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 9,\n          \"text\": \"ENV=`cmd`\",\n          \"innerText\": \"ENV=`cmd`\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"command_substitution\",\n              \"endIndex\": 9,\n              \"text\": \"`cmd`\",\n              \"innerText\": \"`cmd`\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 5,\n                  \"type\": \"command\",\n                  \"endIndex\": 8,\n                  \"text\": \"cmd\",\n                  \"innerText\": \"cmd\",\n                  \"complete\": true,\n                  \"children\": [\n                    {\n                      \"startIndex\": 5,\n                      \"type\": \"word\",\n                      \"endIndex\": 8,\n                      \"text\": \"cmd\",\n                      \"innerText\": \"cmd\",\n                      \"complete\": true,\n                      \"children\": []\n                    }\n                  ]\n                }\n              ]\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 10,\n          \"type\": \"command\",\n          \"endIndex\": 11,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 10,\n              \"type\": \"word\",\n              \"endIndex\": 11,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ],\n      \"hasCommand\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Shortcuts for Key N in VS Code\nDESCRIPTION: This Markdown table section defines the mappings for keyboard shortcuts using the 'N' key, both alone and combined with Ctrl, Shift, Alt, and their combinations. It specifies the hardware code, resulting key, KeyCode, UI label, user settings format, Electron accelerator, and dispatch string for each combination.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyN |   n   |                         N |     |                         N |                              n |                         N |                         [KeyN] |         |\n|                      Ctrl+KeyN |   n   |                    Ctrl+N |     |                    Ctrl+N |                         ctrl+n |                    Ctrl+N |                    ctrl+[KeyN] |         |\n|                     Shift+KeyN |   N   |                   Shift+N |     |                   Shift+N |                        shift+n |                   Shift+N |                   shift+[KeyN] |         |\n|                Ctrl+Shift+KeyN |   N   |              Ctrl+Shift+N |     |              Ctrl+Shift+N |                   ctrl+shift+n |              Ctrl+Shift+N |              ctrl+shift+[KeyN] |         |\n|                       Alt+KeyN |   n   |                     Alt+N |     |                  Option+N |                          alt+n |                     Alt+N |                     alt+[KeyN] |         |\n|                  Ctrl+Alt+KeyN |   ˜   |                Ctrl+Alt+N |     |             Ctrl+Option+N |                     ctrl+alt+n |                Ctrl+Alt+N |                ctrl+alt+[KeyN] |         |\n|                 Shift+Alt+KeyN |   N   |               Shift+Alt+N |     |            Shift+Option+N |                    shift+alt+n |               Shift+Alt+N |               shift+alt+[KeyN] |         |\n|            Ctrl+Shift+Alt+KeyN |   ˜   |          Ctrl+Shift+Alt+N |     |       Ctrl+Shift+Option+N |               ctrl+shift+alt+n |          Ctrl+Shift+Alt+N |          ctrl+shift+alt+[KeyN] |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Variable Assignment and Complex Command Arguments\nDESCRIPTION: JSON representation of a parsed shell command with an environment variable assignment followed by a command with multiple arguments including an option. This demonstrates how 'ENV=a b c d --op=e' is parsed into a hierarchical structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 18,\n  \"text\": \"ENV=a b c d --op=e\",\n  \"innerText\": \"ENV=a b c d --op=e\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 18,\n      \"text\": \"ENV=a b c d --op=e\",\n      \"innerText\": \"ENV=a b c d --op=e\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 5,\n          \"text\": \"ENV=a\",\n          \"innerText\": \"ENV=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 6,\n          \"type\": \"command\",\n          \"endIndex\": 18,\n          \"text\": \"b c d --op=e\",\n          \"innerText\": \"b c d --op=e\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 6,\n              \"type\": \"word\",\n              \"endIndex\": 7,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            },\n            {\n              \"startIndex\": 8,\n              \"type\": \"word\",\n              \"endIndex\": 9,\n              \"text\": \"c\",\n              \"innerText\": \"c\",\n              \"complete\": true,\n              \"children\": []\n            },\n            {\n              \"startIndex\": 10,\n              \"type\": \"word\",\n              \"endIndex\": 11,\n              \"text\": \"d\",\n              \"innerText\": \"d\",\n              \"complete\": true,\n              \"children\": []\n            },\n            {\n              \"startIndex\": 12,\n              \"type\": \"word\",\n              \"endIndex\": 18,\n              \"text\": \"--op=e\",\n              \"innerText\": \"--op=e\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ],\n      \"hasCommand\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling VS Code Integration Tests\nDESCRIPTION: Commands to compile and install dependencies for VS Code integration tests. This step is necessary before running the tests.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/integration/browser/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd test/integration/browser\nnpm i\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Variable Assignment and Separate Command\nDESCRIPTION: This snippet shows the parsing of a shell command that includes a variable assignment followed by a separate command. It demonstrates how the parser distinguishes between the assignment 'ENV=a' and the subsequent command 'b'.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_17\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 8,\n  \"text\": \"ENV=a; b\",\n  \"innerText\": \"ENV=a; b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 5,\n      \"text\": \"ENV=a\",\n      \"innerText\": \"ENV=a\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 5,\n          \"text\": \"ENV=a\",\n          \"innerText\": \"ENV=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    },\n    {\n      \"startIndex\": 7,\n      \"type\": \"command\",\n      \"endIndex\": 8,\n      \"text\": \"b\",\n      \"innerText\": \"b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 7,\n          \"type\": \"word\",\n          \"endIndex\": 8,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Digit1 Keyboard Shortcuts in Markdown\nDESCRIPTION: Markdown table defining mappings for Digit1 combined with Ctrl, Shift, and Alt modifiers. It shows the resulting character ('1', '+', '±', '∞') and various platform-specific representations for each combination, including alternate mappings for Shift combinations (e.g., Shift+=).\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_de_ch.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                         Digit1 |   1   |                         1 |     |                         1 |                              1 |                         1 |                       [Digit1] |         |\n|                    Ctrl+Digit1 |   1   |                    Ctrl+1 |     |                    Ctrl+1 |                         ctrl+1 |                    Ctrl+1 |                  ctrl+[Digit1] |         |\n|                   Shift+Digit1 |   +   |                   Shift+1 |     |                   Shift+1 |                        shift+1 |                   Shift+1 |                 shift+[Digit1] |         |\n|                                |       |                   Shift+= |     |                           |                                |                           |                                |         |\n|              Ctrl+Shift+Digit1 |   +   |              Ctrl+Shift+1 |     |              Ctrl+Shift+1 |                   ctrl+shift+1 |              Ctrl+Shift+1 |            ctrl+shift+[Digit1] |         |\n|                                |       |              Ctrl+Shift+= |     |                           |                                |                           |                                |         |\n|                     Alt+Digit1 |   1   |                     Alt+1 |     |                  Option+1 |                          alt+1 |                     Alt+1 |                   alt+[Digit1] |         |\n|                Ctrl+Alt+Digit1 |   ±   |                Ctrl+Alt+1 |     |             Ctrl+Option+1 |                     ctrl+alt+1 |                Ctrl+Alt+1 |              ctrl+alt+[Digit1] |         |\n|               Shift+Alt+Digit1 |   +   |               Shift+Alt+1 |     |            Shift+Option+1 |                    shift+alt+1 |               Shift+Alt+1 |             shift+alt+[Digit1] |         |\n|                                |       |               Shift+Alt+= |     |                           |                                |                           |                                |         |\n|          Ctrl+Shift+Alt+Digit1 |   ∞   |          Ctrl+Shift+Alt+1 |     |       Ctrl+Shift+Option+1 |               ctrl+shift+alt+1 |          Ctrl+Shift+Alt+1 |        ctrl+shift+alt+[Digit1] |         |\n|                                |       |          Ctrl+Shift+Alt+= |     |                           |                                |                           |                                |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Append Assignment (Single Quotes) and Command in JSON\nDESCRIPTION: Complete JSON AST for the shell command `ENV+='100' b`. This structure represents the 'program' and 'assignment_list'. The key element is the 'assignment' node using the append operator ('+=') for the variable 'ENV' with a single-quoted 'raw_string' value ('100'), followed by the command 'b'.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// Case 8\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 12,\n  \"text\": \"ENV+='100' b\",\n  \"innerText\": \"ENV+='100' b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 12,\n      \"text\": \"ENV+='100' b\",\n      \"innerText\": \"ENV+='100' b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 10,\n          \"text\": \"ENV+='100'\",\n          \"innerText\": \"ENV+='100'\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 5,\n              \"type\": \"raw_string\",\n              \"endIndex\": 10,\n              \"text\": \"'100'\",\n              \"innerText\": \"100\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"+=\"\n        },\n        {\n          \"startIndex\": 11,\n          \"type\": \"command\",\n          \"endIndex\": 12,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 11,\n              \"type\": \"word\",\n              \"endIndex\": 12,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ],\n      \"hasCommand\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Settings for JSON Server Debugging\nDESCRIPTION: VS Code setting to enable verbose logging of communication between the client and server. Add this to your settings to observe the JSON language server interaction.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"json.trace.server\": \"verbose\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Variable Assignment and Spaced Command\nDESCRIPTION: This snippet illustrates the parsing of a shell command with a variable assignment followed by a separate command with additional spacing. It shows how the parser handles the command 'ENV=a ; b', maintaining the distinction between assignment and command execution.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 9,\n  \"text\": \"ENV=a ; b\",\n  \"innerText\": \"ENV=a ; b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 5,\n      \"text\": \"ENV=a\",\n      \"innerText\": \"ENV=a\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 5,\n          \"text\": \"ENV=a\",\n          \"innerText\": \"ENV=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    },\n    {\n      \"startIndex\": 8,\n      \"type\": \"command\",\n      \"endIndex\": 9,\n      \"text\": \"b\",\n      \"innerText\": \"b\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 8,\n          \"type\": \"word\",\n          \"endIndex\": 9,\n          \"text\": \"b\",\n          \"innerText\": \"b\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Digit3 Keyboard Shortcuts in Markdown\nDESCRIPTION: Markdown table defining mappings for Digit3 combined with Ctrl and Shift modifiers. It shows the resulting character ('3', '*') and various platform-specific representations for each combination.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_de_ch.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|                         Digit3 |   3   |                         3 |     |                         3 |                              3 |                         3 |                       [Digit3] |         |\n|                    Ctrl+Digit3 |   3   |                    Ctrl+3 |     |                    Ctrl+3 |                         ctrl+3 |                    Ctrl+3 |                  ctrl+[Digit3] |         |\n|                   Shift+Digit3 |   *   |                   Shift+3 |     |                   Shift+3 |                        shift+3 |                   Shift+3 |                 shift+[Digit3] |         |\n|              Ctrl+Shift+Digit3 |   *   |              Ctrl+Shift+3 |     |              Ctrl+Shift+3 |                   ctrl+shift+3 |              Ctrl+Shift+3 |            ctrl+shift+[Digit3] |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Variable Assignment and Background Execution\nDESCRIPTION: This snippet demonstrates the parsing of a shell command that includes a variable assignment followed by a command set for background execution. It shows how the parser interprets the command 'ENV=a & b', distinguishing between the assignment and the backgrounded command.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 9,\n  \"text\": \"ENV=a & b\",\n  \"innerText\": \"ENV=a & b\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 5,\n      \"text\": \"ENV=a\",\n      \"innerText\": \"ENV=a\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 5,\n          \"text\": \"ENV=a\",\n          \"innerText\": \"ENV=a\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"word\",\n              \"endIndex\": 5,\n              \"text\": \"a\",\n              \"innerText\": \"a\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Recompiling Extension with Linked Language Service\nDESCRIPTION: Command to recompile the extension with the linked development version of vscode-json-languageservice for testing language features.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Complex Shell Variable Assignment with Command Substitution\nDESCRIPTION: This snippet demonstrates a complex shell variable assignment using various string types, concatenation, and command substitution. It includes raw strings, ANSI-C strings, and a command substitution with a pipeline.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\nMY_VAR='echo'hi$'quote'\"command: $(ps | VAR=2 grep ps)\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Command Substitution in JSON\nDESCRIPTION: This snippet shows the parsing of a shell command 'a $(b)' with a command substitution. It demonstrates how the parser handles command substitutions in the command structure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/basic/output.txt#2025-04-23_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a $(b)\",\n  \"innerText\": \"a $(b)\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 6,\n      \"text\": \"a $(b)\",\n      \"innerText\": \"a $(b)\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"command_substitution\",\n          \"endIndex\": 6,\n          \"text\": \"$(b)\",\n          \"innerText\": \"$(b)\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"command\",\n              \"endIndex\": 5,\n              \"text\": \"b\",\n              \"innerText\": \"b\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 4,\n                  \"type\": \"word\",\n                  \"endIndex\": 5,\n                  \"text\": \"b\",\n                  \"innerText\": \"b\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VS Code Keyboard Input Mappings (Keys E-J) in Markdown\nDESCRIPTION: This Markdown table documents the various string representations for keyboard combinations involving keys E, F, G, H, I, J and modifiers (Ctrl, Shift, Alt) within VS Code. It maps the Hardware (HW) Code combination, the resulting key character, the KeyCode combination, a priority value (Pri), the UI display label, the format used in user settings, the string used for Electron accelerators, and the internal dispatching string format. This mapping is crucial for understanding how keyboard inputs are processed and represented across different layers of VS Code.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_de_ch.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                 Shift+Alt+KeyE |   E   |               Shift+Alt+E |     |               Shift+Alt+E |                    shift+alt+e |               Shift+Alt+E |               shift+alt+[KeyE] |         |\n|            Ctrl+Shift+Alt+KeyE |   E   |          Ctrl+Shift+Alt+E |     |          Ctrl+Shift+Alt+E |               ctrl+shift+alt+e |          Ctrl+Shift+Alt+E |          ctrl+shift+alt+[KeyE] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyF |   f   |                         F |     |                         F |                              f |                         F |                         [KeyF] |         |\n|                      Ctrl+KeyF |   f   |                    Ctrl+F |     |                    Ctrl+F |                         ctrl+f |                    Ctrl+F |                    ctrl+[KeyF] |         |\n|                     Shift+KeyF |   F   |                   Shift+F |     |                   Shift+F |                        shift+f |                   Shift+F |                   shift+[KeyF] |         |\n|                Ctrl+Shift+KeyF |   F   |              Ctrl+Shift+F |     |              Ctrl+Shift+F |                   ctrl+shift+f |              Ctrl+Shift+F |              ctrl+shift+[KeyF] |         |\n|                       Alt+KeyF |   f   |                     Alt+F |     |                     Alt+F |                          alt+f |                     Alt+F |                     alt+[KeyF] |         |\n|                  Ctrl+Alt+KeyF |   đ   |                Ctrl+Alt+F |     |                Ctrl+Alt+F |                     ctrl+alt+f |                Ctrl+Alt+F |                ctrl+alt+[KeyF] |         |\n|                 Shift+Alt+KeyF |   F   |               Shift+Alt+F |     |               Shift+Alt+F |                    shift+alt+f |               Shift+Alt+F |               shift+alt+[KeyF] |         |\n|            Ctrl+Shift+Alt+KeyF |   ª   |          Ctrl+Shift+Alt+F |     |          Ctrl+Shift+Alt+F |               ctrl+shift+alt+f |          Ctrl+Shift+Alt+F |          ctrl+shift+alt+[KeyF] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyG |   g   |                         G |     |                         G |                              g |                         G |                         [KeyG] |         |\n|                      Ctrl+KeyG |   g   |                    Ctrl+G |     |                    Ctrl+G |                         ctrl+g |                    Ctrl+G |                    ctrl+[KeyG] |         |\n|                     Shift+KeyG |   G   |                   Shift+G |     |                   Shift+G |                        shift+g |                   Shift+G |                   shift+[KeyG] |         |\n|                Ctrl+Shift+KeyG |   G   |              Ctrl+Shift+G |     |              Ctrl+Shift+G |                   ctrl+shift+g |              Ctrl+Shift+G |              ctrl+shift+[KeyG] |         |\n|                       Alt+KeyG |   g   |                     Alt+G |     |                     Alt+G |                          alt+g |                     Alt+G |                     alt+[KeyG] |         |\n|                  Ctrl+Alt+KeyG |   ŋ   |                Ctrl+Alt+G |     |                Ctrl+Alt+G |                     ctrl+alt+g |                Ctrl+Alt+G |                ctrl+alt+[KeyG] |         |\n|                 Shift+Alt+KeyG |   G   |               Shift+Alt+G |     |               Shift+Alt+G |                    shift+alt+g |               Shift+Alt+G |               shift+alt+[KeyG] |         |\n|            Ctrl+Shift+Alt+KeyG |   Ŋ   |          Ctrl+Shift+Alt+G |     |          Ctrl+Shift+Alt+G |               ctrl+shift+alt+g |          Ctrl+Shift+Alt+G |          ctrl+shift+alt+[KeyG] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyH |   h   |                         H |     |                         H |                              h |                         H |                         [KeyH] |         |\n|                      Ctrl+KeyH |   h   |                    Ctrl+H |     |                    Ctrl+H |                         ctrl+h |                    Ctrl+H |                    ctrl+[KeyH] |         |\n|                     Shift+KeyH |   H   |                   Shift+H |     |                   Shift+H |                        shift+h |                   Shift+H |                   shift+[KeyH] |         |\n|                Ctrl+Shift+KeyH |   H   |              Ctrl+Shift+H |     |              Ctrl+Shift+H |                   ctrl+shift+h |              Ctrl+Shift+H |              ctrl+shift+[KeyH] |         |\n|                       Alt+KeyH |   h   |                     Alt+H |     |                     Alt+H |                          alt+h |                     Alt+H |                     alt+[KeyH] |         |\n|                  Ctrl+Alt+KeyH |   ħ   |                Ctrl+Alt+H |     |                Ctrl+Alt+H |                     ctrl+alt+h |                Ctrl+Alt+H |                ctrl+alt+[KeyH] |         |\n|                 Shift+Alt+KeyH |   H   |               Shift+Alt+H |     |               Shift+Alt+H |                    shift+alt+h |               Shift+Alt+H |               shift+alt+[KeyH] |         |\n|            Ctrl+Shift+Alt+KeyH |   Ħ   |          Ctrl+Shift+Alt+H |     |          Ctrl+Shift+Alt+H |               ctrl+shift+alt+h |          Ctrl+Shift+Alt+H |          ctrl+shift+alt+[KeyH] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyI |   i   |                         I |     |                         I |                              i |                         I |                         [KeyI] |         |\n|                      Ctrl+KeyI |   i   |                    Ctrl+I |     |                    Ctrl+I |                         ctrl+i |                    Ctrl+I |                    ctrl+[KeyI] |         |\n|                     Shift+KeyI |   I   |                   Shift+I |     |                   Shift+I |                        shift+i |                   Shift+I |                   shift+[KeyI] |         |\n|                Ctrl+Shift+KeyI |   I   |              Ctrl+Shift+I |     |              Ctrl+Shift+I |                   ctrl+shift+i |              Ctrl+Shift+I |              ctrl+shift+[KeyI] |         |\n|                       Alt+KeyI |   i   |                     Alt+I |     |                     Alt+I |                          alt+i |                     Alt+I |                     alt+[KeyI] |         |\n|                  Ctrl+Alt+KeyI |   →   |                Ctrl+Alt+I |     |                Ctrl+Alt+I |                     ctrl+alt+i |                Ctrl+Alt+I |                ctrl+alt+[KeyI] |         |\n|                 Shift+Alt+KeyI |   I   |               Shift+Alt+I |     |               Shift+Alt+I |                    shift+alt+i |               Shift+Alt+I |               shift+alt+[KeyI] |         |\n|            Ctrl+Shift+Alt+KeyI |   ı   |          Ctrl+Shift+Alt+I |     |          Ctrl+Shift+Alt+I |               ctrl+shift+alt+i |          Ctrl+Shift+Alt+I |          ctrl+shift+alt+[KeyI] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyJ |   j   |                         J |     |                         J |                              j |                         J |                         [KeyJ] |         |\n|                      Ctrl+KeyJ |   j   |                    Ctrl+J |     |                    Ctrl+J |                         ctrl+j |                    Ctrl+J |                    ctrl+[KeyJ] |         |\n|                     Shift+KeyJ |   J   |                   Shift+J |     |                   Shift+J |                        shift+j |                   Shift+J |                   shift+[KeyJ] |         |\n|                Ctrl+Shift+KeyJ |   J   |              Ctrl+Shift+J |     |              Ctrl+Shift+J |                   ctrl+shift+j |              Ctrl+Shift+J |              ctrl+shift+[KeyJ] |         |\n|                       Alt+KeyJ |   j   |                     Alt+J |     |                     Alt+J |                          alt+j |                     Alt+J |                     alt+[KeyJ] |         |\n|                  Ctrl+Alt+KeyJ | U+309 |                Ctrl+Alt+J |     |                Ctrl+Alt+J |                     ctrl+alt+j |                Ctrl+Alt+J |                ctrl+alt+[KeyJ] |         |\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex Shell Variable Assignment with Command (JSON)\nDESCRIPTION: This JSON structure represents a parsed shell command that assigns a concatenated string to the ENV variable, followed by a separate command 'd'. It demonstrates handling of quoted strings and command parsing.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 13,\n  \"text\": \"ENV=a\\\"b\\\"'c' d\",\n  \"innerText\": \"ENV=a\\\"b\\\"'c' d\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 13,\n      \"text\": \"ENV=a\\\"b\\\"'c' d\",\n      \"innerText\": \"ENV=a\\\"b\\\"'c' d\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 11,\n          \"text\": \"ENV=a\\\"b\\\"'c'\",\n          \"innerText\": \"ENV=a\\\"b\\\"'c'\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"concatenation\",\n              \"endIndex\": 11,\n              \"text\": \"a\\\"b\\\"'c'\",\n              \"innerText\": \"abc\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 4,\n                  \"type\": \"word\",\n                  \"endIndex\": 5,\n                  \"text\": \"a\",\n                  \"innerText\": \"a\",\n                  \"complete\": true,\n                  \"children\": []\n                },\n                {\n                  \"startIndex\": 5,\n                  \"type\": \"string\",\n                  \"endIndex\": 8,\n                  \"text\": \"\\\"b\\\"\",\n                  \"innerText\": \"b\",\n                  \"complete\": true,\n                  \"children\": []\n                },\n                {\n                  \"startIndex\": 8,\n                  \"type\": \"raw_string\",\n                  \"endIndex\": 11,\n                  \"text\": \"'c'\",\n                  \"innerText\": \"c\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        },\n        {\n          \"startIndex\": 12,\n          \"type\": \"command\",\n          \"endIndex\": 13,\n          \"text\": \"d\",\n          \"innerText\": \"d\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 12,\n              \"type\": \"word\",\n              \"endIndex\": 13,\n              \"text\": \"d\",\n              \"innerText\": \"d\",\n              \"complete\": true,\n              \"children\": []\n            }\n          ]\n        }\n      ],\n      \"hasCommand\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Git Commit in Markdown\nDESCRIPTION: This snippet demonstrates how to reference a specific Git commit in a Markdown document. It links to a commit that changed a DOM element's attribute, which led to a smoke test failure.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/smoke/Audit.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[eac49a3](https://github.com/microsoft/vscode/commit/eac49a321b84cb9828430e9dcd3f34243a3480f7)\n```\n\n----------------------------------------\n\nTITLE: Parsing Simple Shell Variable Assignment (JSON)\nDESCRIPTION: This JSON structure represents a parsed shell command that assigns a concatenated string to the ENV variable. It demonstrates handling of different types of quotes in string concatenation.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/variables/output.txt#2025-04-23_snippet_28\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 11,\n  \"text\": \"ENV=a\\\"b\\\"'c'\",\n  \"innerText\": \"ENV=a\\\"b\\\"'c'\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"assignment_list\",\n      \"endIndex\": 11,\n      \"text\": \"ENV=a\\\"b\\\"'c'\",\n      \"innerText\": \"ENV=a\\\"b\\\"'c'\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"assignment\",\n          \"endIndex\": 11,\n          \"text\": \"ENV=a\\\"b\\\"'c'\",\n          \"innerText\": \"ENV=a\\\"b\\\"'c'\",\n          \"complete\": true,\n          \"children\": [\n            {\n              \"startIndex\": 4,\n              \"type\": \"concatenation\",\n              \"endIndex\": 11,\n              \"text\": \"a\\\"b\\\"'c'\",\n              \"innerText\": \"abc\",\n              \"complete\": true,\n              \"children\": [\n                {\n                  \"startIndex\": 4,\n                  \"type\": \"word\",\n                  \"endIndex\": 5,\n                  \"text\": \"a\",\n                  \"innerText\": \"a\",\n                  \"complete\": true,\n                  \"children\": []\n                },\n                {\n                  \"startIndex\": 5,\n                  \"type\": \"string\",\n                  \"endIndex\": 8,\n                  \"text\": \"\\\"b\\\"\",\n                  \"innerText\": \"b\",\n                  \"complete\": true,\n                  \"children\": []\n                },\n                {\n                  \"startIndex\": 8,\n                  \"type\": \"raw_string\",\n                  \"endIndex\": 11,\n                  \"text\": \"'c'\",\n                  \"innerText\": \"c\",\n                  \"complete\": true,\n                  \"children\": []\n                }\n              ]\n            }\n          ],\n          \"name\": {\n            \"startIndex\": 0,\n            \"type\": \"variable_name\",\n            \"endIndex\": 3,\n            \"text\": \"ENV\",\n            \"innerText\": \"ENV\",\n            \"complete\": true,\n            \"children\": []\n          },\n          \"operator\": \"=\"\n        }\n      ],\n      \"hasCommand\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Table for Key N Combinations in VS Code\nDESCRIPTION: This Markdown table details the mappings for the 'N' key combined with modifiers (Ctrl, Shift, Alt). It lists the corresponding hardware code, key code, UI label, user settings representation, Electron accelerator, and dispatch string for each combination within VS Code.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyN |   n   |                         N |     |                         N |                              n |                         N |                         [KeyN] |         |\n|                      Ctrl+KeyN |   n   |                    Ctrl+N |     |                    Ctrl+N |                         ctrl+n |                    Ctrl+N |                    ctrl+[KeyN] |         |\n|                     Shift+KeyN |   N   |                   Shift+N |     |                   Shift+N |                        shift+n |                   Shift+N |                   shift+[KeyN] |         |\n|                Ctrl+Shift+KeyN |   N   |              Ctrl+Shift+N |     |              Ctrl+Shift+N |                   ctrl+shift+n |              Ctrl+Shift+N |              ctrl+shift+[KeyN] |         |\n|                       Alt+KeyN |   n   |                     Alt+N |     |                     Alt+N |                          alt+n |                     Alt+N |                     alt+[KeyN] |         |\n|                  Ctrl+Alt+KeyN |   n   |                Ctrl+Alt+N |     |                Ctrl+Alt+N |                     ctrl+alt+n |                Ctrl+Alt+N |                ctrl+alt+[KeyN] |         |\n|                 Shift+Alt+KeyN |   N   |               Shift+Alt+N |     |               Shift+Alt+N |                    shift+alt+n |               Shift+Alt+N |               shift+alt+[KeyN] |         |\n|            Ctrl+Shift+Alt+KeyN |   N   |          Ctrl+Shift+Alt+N |     |          Ctrl+Shift+Alt+N |               ctrl+shift+alt+n |          Ctrl+Shift+Alt+N |          ctrl+shift+alt+[KeyN] |         |\n```\n\n----------------------------------------\n\nTITLE: Compiling the JSON Language Features Extension\nDESCRIPTION: Command to compile the client and server components of the JSON language features extension. This should be run in the extension directory.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/json-language-features/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Tabular Representation of VSCode Keyboard Shortcuts\nDESCRIPTION: A detailed table showing keyboard shortcut combinations for keys A through E in VSCode. It includes hardware code combinations, key representations, key code combinations, UI labels, user settings, Electron accelerators, and dispatching strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisUSStandard: false\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyA |   a   |                         A |     |                         A |                              a |                         A |                         [KeyA] |         |\n|                      Ctrl+KeyA |   a   |                    Ctrl+A |     |                    Ctrl+A |                         ctrl+a |                    Ctrl+A |                    ctrl+[KeyA] |         |\n|                     Shift+KeyA |   A   |                   Shift+A |     |                   Shift+A |                        shift+a |                   Shift+A |                   shift+[KeyA] |         |\n|                Ctrl+Shift+KeyA |   A   |              Ctrl+Shift+A |     |              Ctrl+Shift+A |                   ctrl+shift+a |              Ctrl+Shift+A |              ctrl+shift+[KeyA] |         |\n|                       Alt+KeyA |   a   |                     Alt+A |     |                     Alt+A |                          alt+a |                     Alt+A |                     alt+[KeyA] |         |\n|                  Ctrl+Alt+KeyA |   æ   |                Ctrl+Alt+A |     |                Ctrl+Alt+A |                     ctrl+alt+a |                Ctrl+Alt+A |                ctrl+alt+[KeyA] |         |\n|                 Shift+Alt+KeyA |   A   |               Shift+Alt+A |     |               Shift+Alt+A |                    shift+alt+a |               Shift+Alt+A |               shift+alt+[KeyA] |         |\n|            Ctrl+Shift+Alt+KeyA |   Æ   |          Ctrl+Shift+Alt+A |     |          Ctrl+Shift+Alt+A |               ctrl+shift+alt+a |          Ctrl+Shift+Alt+A |          ctrl+shift+alt+[KeyA] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyB |   b   |                         B |     |                         B |                              b |                         B |                         [KeyB] |         |\n|                      Ctrl+KeyB |   b   |                    Ctrl+B |     |                    Ctrl+B |                         ctrl+b |                    Ctrl+B |                    ctrl+[KeyB] |         |\n|                     Shift+KeyB |   B   |                   Shift+B |     |                   Shift+B |                        shift+b |                   Shift+B |                   shift+[KeyB] |         |\n|                Ctrl+Shift+KeyB |   B   |              Ctrl+Shift+B |     |              Ctrl+Shift+B |                   ctrl+shift+b |              Ctrl+Shift+B |              ctrl+shift+[KeyB] |         |\n|                       Alt+KeyB |   b   |                     Alt+B |     |                     Alt+B |                          alt+b |                     Alt+B |                     alt+[KeyB] |         |\n|                  Ctrl+Alt+KeyB |   \"   |                Ctrl+Alt+B |     |                Ctrl+Alt+B |                     ctrl+alt+b |                Ctrl+Alt+B |                ctrl+alt+[KeyB] |         |\n|                 Shift+Alt+KeyB |   B   |               Shift+Alt+B |     |               Shift+Alt+B |                    shift+alt+b |               Shift+Alt+B |               shift+alt+[KeyB] |         |\n|            Ctrl+Shift+Alt+KeyB |   '   |          Ctrl+Shift+Alt+B |     |          Ctrl+Shift+Alt+B |               ctrl+shift+alt+b |          Ctrl+Shift+Alt+B |          ctrl+shift+alt+[KeyB] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyC |   c   |                         C |     |                         C |                              c |                         C |                         [KeyC] |         |\n|                      Ctrl+KeyC |   c   |                    Ctrl+C |     |                    Ctrl+C |                         ctrl+c |                    Ctrl+C |                    ctrl+[KeyC] |         |\n|                     Shift+KeyC |   C   |                   Shift+C |     |                   Shift+C |                        shift+c |                   Shift+C |                   shift+[KeyC] |         |\n|                Ctrl+Shift+KeyC |   C   |              Ctrl+Shift+C |     |              Ctrl+Shift+C |                   ctrl+shift+c |              Ctrl+Shift+C |              ctrl+shift+[KeyC] |         |\n|                       Alt+KeyC |   c   |                     Alt+C |     |                     Alt+C |                          alt+c |                     Alt+C |                     alt+[KeyC] |         |\n|                  Ctrl+Alt+KeyC |   ¢   |                Ctrl+Alt+C |     |                Ctrl+Alt+C |                     ctrl+alt+c |                Ctrl+Alt+C |                ctrl+alt+[KeyC] |         |\n|                 Shift+Alt+KeyC |   C   |               Shift+Alt+C |     |               Shift+Alt+C |                    shift+alt+c |               Shift+Alt+C |               shift+alt+[KeyC] |         |\n|            Ctrl+Shift+Alt+KeyC |   ©   |          Ctrl+Shift+Alt+C |     |          Ctrl+Shift+Alt+C |               ctrl+shift+alt+c |          Ctrl+Shift+Alt+C |          ctrl+shift+alt+[KeyC] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyD |   d   |                         D |     |                         D |                              d |                         D |                         [KeyD] |         |\n|                      Ctrl+KeyD |   d   |                    Ctrl+D |     |                    Ctrl+D |                         ctrl+d |                    Ctrl+D |                    ctrl+[KeyD] |         |\n|                     Shift+KeyD |   D   |                   Shift+D |     |                   Shift+D |                        shift+d |                   Shift+D |                   shift+[KeyD] |         |\n|                Ctrl+Shift+KeyD |   D   |              Ctrl+Shift+D |     |              Ctrl+Shift+D |                   ctrl+shift+d |              Ctrl+Shift+D |              ctrl+shift+[KeyD] |         |\n|                       Alt+KeyD |   d   |                     Alt+D |     |                     Alt+D |                          alt+d |                     Alt+D |                     alt+[KeyD] |         |\n|                  Ctrl+Alt+KeyD |   ð   |                Ctrl+Alt+D |     |                Ctrl+Alt+D |                     ctrl+alt+d |                Ctrl+Alt+D |                ctrl+alt+[KeyD] |         |\n|                 Shift+Alt+KeyD |   D   |               Shift+Alt+D |     |               Shift+Alt+D |                    shift+alt+d |               Shift+Alt+D |               shift+alt+[KeyD] |         |\n|            Ctrl+Shift+Alt+KeyD |   Ð   |          Ctrl+Shift+Alt+D |     |          Ctrl+Shift+Alt+D |               ctrl+shift+alt+d |          Ctrl+Shift+Alt+D |          ctrl+shift+alt+[KeyD] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyE |   e   |                         E |     |                         E |                              e |                         E |                         [KeyE] |         |\n|                      Ctrl+KeyE |   e   |                    Ctrl+E |     |                    Ctrl+E |                         ctrl+e |                    Ctrl+E |                    ctrl+[KeyE] |         |\n|                     Shift+KeyE |   E   |                   Shift+E |     |                   Shift+E |                        shift+e |                   Shift+E |                   shift+[KeyE] |         |\n|                Ctrl+Shift+KeyE |   E   |              Ctrl+Shift+E |     |              Ctrl+Shift+E |                   ctrl+shift+e |              Ctrl+Shift+E |              ctrl+shift+[KeyE] |         |\n|                       Alt+KeyE |   e   |                     Alt+E |     |                     Alt+E |                          alt+e |                     Alt+E |                     alt+[KeyE] |         |\n|                  Ctrl+Alt+KeyE |   e   |                Ctrl+Alt+E |     |                Ctrl+Alt+E |                     ctrl+alt+e |                Ctrl+Alt+E |                ctrl+alt+[KeyE] |         |\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyboard Shortcut Mappings in Tabular Format\nDESCRIPTION: This code snippet presents a large table showing various keyboard shortcut combinations and their corresponding representations across different contexts in Visual Studio Code. It includes hardware codes, key symbols, KeyCode combinations, UI labels, user settings, Electron accelerators, and dispatching strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n|                 Shift+Alt+KeyT |   T   |               Shift+Alt+T |     |               Shift+Alt+T |                    shift+alt+t |               Shift+Alt+T |               shift+alt+[KeyT] |         |\n|            Ctrl+Shift+Alt+KeyT |   Ŧ   |          Ctrl+Shift+Alt+T |     |          Ctrl+Shift+Alt+T |               ctrl+shift+alt+t |          Ctrl+Shift+Alt+T |          ctrl+shift+alt+[KeyT] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyU |   u   |                         U |     |                         U |                              u |                         U |                         [KeyU] |         |\n|                      Ctrl+KeyU |   u   |                    Ctrl+U |     |                    Ctrl+U |                         ctrl+u |                    Ctrl+U |                    ctrl+[KeyU] |         |\n|                     Shift+KeyU |   U   |                   Shift+U |     |                   Shift+U |                        shift+u |                   Shift+U |                   shift+[KeyU] |         |\n|                Ctrl+Shift+KeyU |   U   |              Ctrl+Shift+U |     |              Ctrl+Shift+U |                   ctrl+shift+u |              Ctrl+Shift+U |              ctrl+shift+[KeyU] |         |\n|                       Alt+KeyU |   u   |                     Alt+U |     |                     Alt+U |                          alt+u |                     Alt+U |                     alt+[KeyU] |         |\n|                  Ctrl+Alt+KeyU |   ↓   |                Ctrl+Alt+U |     |                Ctrl+Alt+U |                     ctrl+alt+u |                Ctrl+Alt+U |                ctrl+alt+[KeyU] |         |\n|                 Shift+Alt+KeyU |   U   |               Shift+Alt+U |     |               Shift+Alt+U |                    shift+alt+u |               Shift+Alt+U |               shift+alt+[KeyU] |         |\n|            Ctrl+Shift+Alt+KeyU |   ↑   |          Ctrl+Shift+Alt+U |     |          Ctrl+Shift+Alt+U |               ctrl+shift+alt+u |          Ctrl+Shift+Alt+U |          ctrl+shift+alt+[KeyU] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyV |   v   |                         V |     |                         V |                              v |                         V |                         [KeyV] |         |\n|                      Ctrl+KeyV |   v   |                    Ctrl+V |     |                    Ctrl+V |                         ctrl+v |                    Ctrl+V |                    ctrl+[KeyV] |         |\n|                     Shift+KeyV |   V   |                   Shift+V |     |                   Shift+V |                        shift+v |                   Shift+V |                   shift+[KeyV] |         |\n|                Ctrl+Shift+KeyV |   V   |              Ctrl+Shift+V |     |              Ctrl+Shift+V |                   ctrl+shift+v |              Ctrl+Shift+V |              ctrl+shift+[KeyV] |         |\n|                       Alt+KeyV |   v   |                     Alt+V |     |                     Alt+V |                          alt+v |                     Alt+V |                     alt+[KeyV] |         |\n|                  Ctrl+Alt+KeyV |   \"   |                Ctrl+Alt+V |     |                Ctrl+Alt+V |                     ctrl+alt+v |                Ctrl+Alt+V |                ctrl+alt+[KeyV] |         |\n|                 Shift+Alt+KeyV |   V   |               Shift+Alt+V |     |               Shift+Alt+V |                    shift+alt+v |               Shift+Alt+V |               shift+alt+[KeyV] |         |\n|            Ctrl+Shift+Alt+KeyV |   '   |          Ctrl+Shift+Alt+V |     |          Ctrl+Shift+Alt+V |               ctrl+shift+alt+v |          Ctrl+Shift+Alt+V |          ctrl+shift+alt+[KeyV] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyW |   w   |                         W |     |                         W |                              w |                         W |                         [KeyW] |         |\n|                      Ctrl+KeyW |   w   |                    Ctrl+W |     |                    Ctrl+W |                         ctrl+w |                    Ctrl+W |                    ctrl+[KeyW] |         |\n|                     Shift+KeyW |   W   |                   Shift+W |     |                   Shift+W |                        shift+w |                   Shift+W |                   shift+[KeyW] |         |\n|                Ctrl+Shift+KeyW |   W   |              Ctrl+Shift+W |     |              Ctrl+Shift+W |                   ctrl+shift+w |              Ctrl+Shift+W |              ctrl+shift+[KeyW] |         |\n|                       Alt+KeyW |   w   |                     Alt+W |     |                     Alt+W |                          alt+w |                     Alt+W |                     alt+[KeyW] |         |\n|                  Ctrl+Alt+KeyW |   ł   |                Ctrl+Alt+W |     |                Ctrl+Alt+W |                     ctrl+alt+w |                Ctrl+Alt+W |                ctrl+alt+[KeyW] |         |\n|                 Shift+Alt+KeyW |   W   |               Shift+Alt+W |     |               Shift+Alt+W |                    shift+alt+w |               Shift+Alt+W |               shift+alt+[KeyW] |         |\n|            Ctrl+Shift+Alt+KeyW |   Ł   |          Ctrl+Shift+Alt+W |     |          Ctrl+Shift+Alt+W |               ctrl+shift+alt+w |          Ctrl+Shift+Alt+W |          ctrl+shift+alt+[KeyW] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyX |   x   |                         X |     |                         X |                              x |                         X |                         [KeyX] |         |\n|                      Ctrl+KeyX |   x   |                    Ctrl+X |     |                    Ctrl+X |                         ctrl+x |                    Ctrl+X |                    ctrl+[KeyX] |         |\n|                     Shift+KeyX |   X   |                   Shift+X |     |                   Shift+X |                        shift+x |                   Shift+X |                   shift+[KeyX] |         |\n|                Ctrl+Shift+KeyX |   X   |              Ctrl+Shift+X |     |              Ctrl+Shift+X |                   ctrl+shift+x |              Ctrl+Shift+X |              ctrl+shift+[KeyX] |         |\n|                       Alt+KeyX |   x   |                     Alt+X |     |                     Alt+X |                          alt+x |                     Alt+X |                     alt+[KeyX] |         |\n|                  Ctrl+Alt+KeyX |   »   |                Ctrl+Alt+X |     |                Ctrl+Alt+X |                     ctrl+alt+x |                Ctrl+Alt+X |                ctrl+alt+[KeyX] |         |\n|                 Shift+Alt+KeyX |   X   |               Shift+Alt+X |     |               Shift+Alt+X |                    shift+alt+x |               Shift+Alt+X |               shift+alt+[KeyX] |         |\n|            Ctrl+Shift+Alt+KeyX |   >   |          Ctrl+Shift+Alt+X |     |          Ctrl+Shift+Alt+X |               ctrl+shift+alt+x |          Ctrl+Shift+Alt+X |          ctrl+shift+alt+[KeyX] |         |\n|                                |       |                   Shift+. |   2 |                           |                                |                           |                                |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyY |   y   |                         Y |     |                         Y |                              y |                         Y |                         [KeyY] |         |\n|                      Ctrl+KeyY |   y   |                    Ctrl+Y |     |                    Ctrl+Y |                         ctrl+y |                    Ctrl+Y |                    ctrl+[KeyY] |         |\n|                     Shift+KeyY |   Y   |                   Shift+Y |     |                   Shift+Y |                        shift+y |                   Shift+Y |                   shift+[KeyY] |         |\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser URL for COI Support\nDESCRIPTION: Instructions for modifying the browser URL to enable Cross-Origin Isolation, which is required for SharedArrayBuffer functionality.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/web/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8080/?vscode-coi=\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts Mapping Table\nDESCRIPTION: Detailed mapping table showing keyboard shortcut combinations and their various representations across different contexts in VSCode. Includes modifier keys (Ctrl, Shift, Alt) combined with arrow keys, numpad, and international special keys.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n|                   Ctrl+ArrowUp |  ---  |              Ctrl+UpArrow |     |              Ctrl+UpArrow |                        ctrl+up |                   Ctrl+Up |                 ctrl+[ArrowUp] |         |\n|                  Shift+ArrowUp |  ---  |             Shift+UpArrow |     |             Shift+UpArrow |                       shift+up |                  Shift+Up |                shift+[ArrowUp] |         |\n|             Ctrl+Shift+ArrowUp |  ---  |        Ctrl+Shift+UpArrow |     |        Ctrl+Shift+UpArrow |                  ctrl+shift+up |             Ctrl+Shift+Up |           ctrl+shift+[ArrowUp] |         |\n|                    Alt+ArrowUp |  ---  |               Alt+UpArrow |     |               Alt+UpArrow |                         alt+up |                    Alt+Up |                  alt+[ArrowUp] |         |\n|               Ctrl+Alt+ArrowUp |  ---  |          Ctrl+Alt+UpArrow |     |          Ctrl+Alt+UpArrow |                    ctrl+alt+up |               Ctrl+Alt+Up |             ctrl+alt+[ArrowUp] |         |\n|              Shift+Alt+ArrowUp |  ---  |         Shift+Alt+UpArrow |     |         Shift+Alt+UpArrow |                   shift+alt+up |              Shift+Alt+Up |            shift+alt+[ArrowUp] |         |\n|         Ctrl+Shift+Alt+ArrowUp |  ---  |    Ctrl+Shift+Alt+UpArrow |     |    Ctrl+Shift+Alt+UpArrow |              ctrl+shift+alt+up |         Ctrl+Shift+Alt+Up |       ctrl+shift+alt+[ArrowUp] |         |\n```\n\n----------------------------------------\n\nTITLE: Defining VS Code Keybinding Representations (T-Y)\nDESCRIPTION: These tables define the various string representations for keyboard shortcuts involving the keys T through Y, combined with Ctrl, Shift, and Alt modifiers, as used within VS Code. Each row maps a specific combination (e.g., 'Ctrl+KeyU') across different formats: 'HW Code combination' (hardware level), 'Key' (character produced), 'KeyCode combination' (internal code), 'UI label' (display string), 'User settings' (configuration format), 'Electron accelerator' (for menu integration), and 'Dispatching string' (internal event handling).\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_us.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                 Shift+Alt+KeyT |   T   |               Shift+Alt+T |     |               Shift+Alt+T |                    shift+alt+t |               Shift+Alt+T |               shift+alt+[KeyT] |         |\n|            Ctrl+Shift+Alt+KeyT |   T   |          Ctrl+Shift+Alt+T |     |          Ctrl+Shift+Alt+T |               ctrl+shift+alt+t |          Ctrl+Shift+Alt+T |          ctrl+shift+alt+[KeyT] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyU |   u   |                         U |     |                         U |                              u |                         U |                         [KeyU] |         |\n|                      Ctrl+KeyU |   u   |                    Ctrl+U |     |                    Ctrl+U |                         ctrl+u |                    Ctrl+U |                    ctrl+[KeyU] |         |\n|                     Shift+KeyU |   U   |                   Shift+U |     |                   Shift+U |                        shift+u |                   Shift+U |                   shift+[KeyU] |         |\n|                Ctrl+Shift+KeyU |   U   |              Ctrl+Shift+U |     |              Ctrl+Shift+U |                   ctrl+shift+u |              Ctrl+Shift+U |              ctrl+shift+[KeyU] |         |\n|                       Alt+KeyU |   u   |                     Alt+U |     |                     Alt+U |                          alt+u |                     Alt+U |                     alt+[KeyU] |         |\n|                  Ctrl+Alt+KeyU |   u   |                Ctrl+Alt+U |     |                Ctrl+Alt+U |                     ctrl+alt+u |                Ctrl+Alt+U |                ctrl+alt+[KeyU] |         |\n|                 Shift+Alt+KeyU |   U   |               Shift+Alt+U |     |               Shift+Alt+U |                    shift+alt+u |               Shift+Alt+U |               shift+alt+[KeyU] |         |\n|            Ctrl+Shift+Alt+KeyU |   U   |          Ctrl+Shift+Alt+U |     |          Ctrl+Shift+Alt+U |               ctrl+shift+alt+u |          Ctrl+Shift+Alt+U |          ctrl+shift+alt+[KeyU] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyV |   v   |                         V |     |                         V |                              v |                         V |                         [KeyV] |         |\n|                      Ctrl+KeyV |   v   |                    Ctrl+V |     |                    Ctrl+V |                         ctrl+v |                    Ctrl+V |                    ctrl+[KeyV] |         |\n|                     Shift+KeyV |   V   |                   Shift+V |     |                   Shift+V |                        shift+v |                   Shift+V |                   shift+[KeyV] |         |\n|                Ctrl+Shift+KeyV |   V   |              Ctrl+Shift+V |     |              Ctrl+Shift+V |                   ctrl+shift+v |              Ctrl+Shift+V |              ctrl+shift+[KeyV] |         |\n|                       Alt+KeyV |   v   |                     Alt+V |     |                     Alt+V |                          alt+v |                     Alt+V |                     alt+[KeyV] |         |\n|                  Ctrl+Alt+KeyV |   v   |                Ctrl+Alt+V |     |                Ctrl+Alt+V |                     ctrl+alt+v |                Ctrl+Alt+V |                ctrl+alt+[KeyV] |         |\n|                 Shift+Alt+KeyV |   V   |               Shift+Alt+V |     |               Shift+Alt+V |                    shift+alt+v |               Shift+Alt+V |               shift+alt+[KeyV] |         |\n|            Ctrl+Shift+Alt+KeyV |   V   |          Ctrl+Shift+Alt+V |     |          Ctrl+Shift+Alt+V |               ctrl+shift+alt+v |          Ctrl+Shift+Alt+V |          ctrl+shift+alt+[KeyV] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyW |   w   |                         W |     |                         W |                              w |                         W |                         [KeyW] |         |\n|                      Ctrl+KeyW |   w   |                    Ctrl+W |     |                    Ctrl+W |                         ctrl+w |                    Ctrl+W |                    ctrl+[KeyW] |         |\n|                     Shift+KeyW |   W   |                   Shift+W |     |                   Shift+W |                        shift+w |                   Shift+W |                   shift+[KeyW] |         |\n|                Ctrl+Shift+KeyW |   W   |              Ctrl+Shift+W |     |              Ctrl+Shift+W |                   ctrl+shift+w |              Ctrl+Shift+W |              ctrl+shift+[KeyW] |         |\n|                       Alt+KeyW |   w   |                     Alt+W |     |                     Alt+W |                          alt+w |                     Alt+W |                     alt+[KeyW] |         |\n|                  Ctrl+Alt+KeyW |   w   |                Ctrl+Alt+W |     |                Ctrl+Alt+W |                     ctrl+alt+w |                Ctrl+Alt+W |                ctrl+alt+[KeyW] |         |\n|                 Shift+Alt+KeyW |   W   |               Shift+Alt+W |     |               Shift+Alt+W |                    shift+alt+w |               Shift+Alt+W |               shift+alt+[KeyW] |         |\n|            Ctrl+Shift+Alt+KeyW |   W   |          Ctrl+Shift+Alt+W |     |          Ctrl+Shift+Alt+W |               ctrl+shift+alt+w |          Ctrl+Shift+Alt+W |          ctrl+shift+alt+[KeyW] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyX |   x   |                         X |     |                         X |                              x |                         X |                         [KeyX] |         |\n|                      Ctrl+KeyX |   x   |                    Ctrl+X |     |                    Ctrl+X |                         ctrl+x |                    Ctrl+X |                    ctrl+[KeyX] |         |\n|                     Shift+KeyX |   X   |                   Shift+X |     |                   Shift+X |                        shift+x |                   Shift+X |                   shift+[KeyX] |         |\n|                Ctrl+Shift+KeyX |   X   |              Ctrl+Shift+X |     |              Ctrl+Shift+X |                   ctrl+shift+x |              Ctrl+Shift+X |              ctrl+shift+[KeyX] |         |\n|                       Alt+KeyX |   x   |                     Alt+X |     |                     Alt+X |                          alt+x |                     Alt+X |                     alt+[KeyX] |         |\n|                  Ctrl+Alt+KeyX |   x   |                Ctrl+Alt+X |     |                Ctrl+Alt+X |                     ctrl+alt+x |                Ctrl+Alt+X |                ctrl+alt+[KeyX] |         |\n|                 Shift+Alt+KeyX |   X   |               Shift+Alt+X |     |               Shift+Alt+X |                    shift+alt+x |               Shift+Alt+X |               shift+alt+[KeyX] |         |\n|            Ctrl+Shift+Alt+KeyX |   X   |          Ctrl+Shift+Alt+X |     |          Ctrl+Shift+Alt+X |               ctrl+shift+alt+x |          Ctrl+Shift+Alt+X |          ctrl+shift+alt+[KeyX] |         |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyY |   y   |                         Y |     |                         Y |                              y |                         Y |                         [KeyY] |         |\n|                      Ctrl+KeyY |   y   |                    Ctrl+Y |     |                    Ctrl+Y |                         ctrl+y |                    Ctrl+Y |                    ctrl+[KeyY] |         |\n|                     Shift+KeyY |   Y   |                   Shift+Y |     |                   Shift+Y |                        shift+y |                   Shift+Y |                   shift+[KeyY] |         |\n|                Ctrl+Shift+KeyY |   Y   |              Ctrl+Shift+Y |     |              Ctrl+Shift+Y |                   ctrl+shift+y |              Ctrl+Shift+Y |              ctrl+shift+[KeyY] |         |\n```\n\n----------------------------------------\n\nTITLE: Mapping ArrowUp Key Combinations in VS Code (Markdown)\nDESCRIPTION: Defines keyboard shortcut mappings for the ArrowUp key and its combinations with Ctrl, Shift, and Alt modifiers in VS Code. Lists corresponding Key, KeyCode, UI labels, user settings representations, Electron accelerators, and dispatch strings.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant.txt#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n|                        ArrowUp |  ---  |                   UpArrow |     |                   UpArrow |                             up |                        Up |                      [ArrowUp] |         |\n|                   Ctrl+ArrowUp |  ---  |              Ctrl+UpArrow |     |              Ctrl+UpArrow |                        ctrl+up |                   Ctrl+Up |                 ctrl+[ArrowUp] |         |\n|                  Shift+ArrowUp |  ---  |             Shift+UpArrow |     |             Shift+UpArrow |                       shift+up |                  Shift+Up |                shift+[ArrowUp] |         |\n|             Ctrl+Shift+ArrowUp |  ---  |        Ctrl+Shift+UpArrow |     |        Ctrl+Shift+UpArrow |                  ctrl+shift+up |             Ctrl+Shift+Up |           ctrl+shift+[ArrowUp] |         |\n|                    Alt+ArrowUp |  ---  |               Alt+UpArrow |     |            Option+UpArrow |                         alt+up |                    Alt+Up |                  alt+[ArrowUp] |         |\n|               Ctrl+Alt+ArrowUp |  ---  |          Ctrl+Alt+UpArrow |     |       Ctrl+Option+UpArrow |                    ctrl+alt+up |               Ctrl+Alt+Up |             ctrl+alt+[ArrowUp] |         |\n|              Shift+Alt+ArrowUp |  ---  |         Shift+Alt+UpArrow |     |      Shift+Option+UpArrow |                   shift+alt+up |              Shift+Alt+Up |            shift+alt+[ArrowUp] |         |\n|         Ctrl+Shift+Alt+ArrowUp |  ---  |    Ctrl+Shift+Alt+UpArrow |     | Ctrl+Shift+Option+UpArrow |              ctrl+shift+alt+up |         Ctrl+Shift+Alt+Up |       ctrl+shift+alt+[ArrowUp] |         |\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcut Mapping Table Header Definition\nDESCRIPTION: This Markdown table header defines the columns used for specifying keyboard shortcut mappings in VS Code. It includes Hardware Code combination, resulting Key, KeyCode combination, Priority (Pri), UI label, User settings representation, Electron accelerator format, internal Dispatching string, and WYSIWYG indicator.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Link Syntax in a Triple Backtick Code Block\nDESCRIPTION: A code block that shows the raw syntax for a Markdown link, using triple backticks to designate the block. This renders the link syntax as plain text rather than as an active link.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/markdown-language-features/test-workspace/a.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[b](b)\n```\n\n----------------------------------------\n\nTITLE: Representing Code Block in Markdown using HTML <pre> Tag\nDESCRIPTION: This snippet demonstrates another way to represent a code block in Markdown, using only the HTML <pre> tag. This method can be useful for including preformatted text that doesn't necessarily need to be highlighted as code.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/vscode-colorize-tests/test/colorize-fixtures/test-33886.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<pre>\n# a\na</pre>\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Command with Double Quotes and Dollar Sign\nDESCRIPTION: This snippet demonstrates the AST for a shell command with a word followed by a double-quoted string containing a dollar sign. It shows how double quotes and special characters are handled in the parsing process.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/terminal-suggest/fixtures/shell-parser/primaryExpressions/output.txt#2025-04-23_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"startIndex\": 0,\n  \"type\": \"program\",\n  \"endIndex\": 6,\n  \"text\": \"a \\\"b$\\\"\",\n  \"innerText\": \"a \\\"b$\\\"\",\n  \"complete\": true,\n  \"children\": [\n    {\n      \"startIndex\": 0,\n      \"type\": \"command\",\n      \"endIndex\": 6,\n      \"text\": \"a \\\"b$\\\"\",\n      \"innerText\": \"a \\\"b$\\\"\",\n      \"complete\": true,\n      \"children\": [\n        {\n          \"startIndex\": 0,\n          \"type\": \"word\",\n          \"endIndex\": 1,\n          \"text\": \"a\",\n          \"innerText\": \"a\",\n          \"complete\": true,\n          \"children\": []\n        },\n        {\n          \"startIndex\": 2,\n          \"type\": \"string\",\n          \"endIndex\": 6,\n          \"text\": \"\\\"b$\\\"\",\n          \"innerText\": \"b$\",\n          \"complete\": true,\n          \"children\": []\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Mapping Table\nDESCRIPTION: Detailed mapping table showing keyboard combinations and their various representations including hardware codes, key codes, UI labels, user settings, and Electron accelerator formats. The table covers various modifier key combinations (Ctrl, Shift, Alt) for keys J through O.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_de_ch.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n|       HW Code combination      |  Key  |    KeyCode combination    | Pri |          UI label         |         User settings          |    Electron accelerator   |       Dispatching string       | WYSIWYG |\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyJ |   j   |                         J |     |                         J |                              j |                         J |                         [KeyJ] |         |\n|                      Ctrl+KeyJ |   j   |                    Ctrl+J |     |                    Ctrl+J |                         ctrl+j |                    Ctrl+J |                    ctrl+[KeyJ] |         |\n|                     Shift+KeyJ |   J   |                   Shift+J |     |                   Shift+J |                        shift+j |                   Shift+J |                   shift+[KeyJ] |         |\n```\n\n----------------------------------------\n\nTITLE: Displaying Numeric Sequence in Plaintext\nDESCRIPTION: This snippet shows a sequence of numbers from 1 to 5, with each number on a new line. It's a basic example of representing ordered numeric data in plaintext format.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/markdown-language-features/test-workspace/sub/foo.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1\n2\n3\n4\n5\n```\n\n----------------------------------------\n\nTITLE: Mapping Table for Key O Combinations in VS Code\nDESCRIPTION: This Markdown table details the mappings for the 'O' key combined with modifiers (Ctrl, Shift, Alt). It lists the corresponding hardware code, key code, UI label, user settings representation, Electron accelerator, and dispatch string for each combination within VS Code.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyO |   o   |                         O |     |                         O |                              o |                         O |                         [KeyO] |         |\n|                      Ctrl+KeyO |   o   |                    Ctrl+O |     |                    Ctrl+O |                         ctrl+o |                    Ctrl+O |                    ctrl+[KeyO] |         |\n|                     Shift+KeyO |   O   |                   Shift+O |     |                   Shift+O |                        shift+o |                   Shift+O |                   shift+[KeyO] |         |\n|                Ctrl+Shift+KeyO |   O   |              Ctrl+Shift+O |     |              Ctrl+Shift+O |                   ctrl+shift+o |              Ctrl+Shift+O |              ctrl+shift+[KeyO] |         |\n|                       Alt+KeyO |   o   |                     Alt+O |     |                     Alt+O |                          alt+o |                     Alt+O |                     alt+[KeyO] |         |\n|                  Ctrl+Alt+KeyO |   ø   |                Ctrl+Alt+O |     |                Ctrl+Alt+O |                     ctrl+alt+o |                Ctrl+Alt+O |                ctrl+alt+[KeyO] |         |\n```\n\n----------------------------------------\n\nTITLE: Mapping Keyboard Shortcuts for Key K in VS Code\nDESCRIPTION: This Markdown table section defines the mappings for keyboard shortcuts using the 'K' key, both alone and combined with Ctrl, Shift, Alt, and their combinations. It specifies the hardware code, resulting key, KeyCode, UI label, user settings format, Electron accelerator, and dispatch string for each combination.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/mac_zh_hant2.txt#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyK |   k   |                         K |     |                         K |                              k |                         K |                         [KeyK] |         |\n|                      Ctrl+KeyK |   k   |                    Ctrl+K |     |                    Ctrl+K |                         ctrl+k |                    Ctrl+K |                    ctrl+[KeyK] |         |\n|                     Shift+KeyK |   K   |                   Shift+K |     |                   Shift+K |                        shift+k |                   Shift+K |                   shift+[KeyK] |         |\n|                Ctrl+Shift+KeyK |   K   |              Ctrl+Shift+K |     |              Ctrl+Shift+K |                   ctrl+shift+k |              Ctrl+Shift+K |              ctrl+shift+[KeyK] |         |\n|                       Alt+KeyK |   k   |                     Alt+K |     |                  Option+K |                          alt+k |                     Alt+K |                     alt+[KeyK] |         |\n|                  Ctrl+Alt+KeyK |   ˚   |                Ctrl+Alt+K |     |             Ctrl+Option+K |                     ctrl+alt+k |                Ctrl+Alt+K |                ctrl+alt+[KeyK] |         |\n|                 Shift+Alt+KeyK |   K   |               Shift+Alt+K |     |            Shift+Option+K |                    shift+alt+k |               Shift+Alt+K |               shift+alt+[KeyK] |         |\n|            Ctrl+Shift+Alt+KeyK |      |          Ctrl+Shift+Alt+K |     |       Ctrl+Shift+Option+K |               ctrl+shift+alt+k |          Ctrl+Shift+Alt+K |          ctrl+shift+alt+[KeyK] |         |\n```\n\n----------------------------------------\n\nTITLE: Mapping Table for Key K Combinations in VS Code\nDESCRIPTION: This Markdown table details the mappings for the 'K' key combined with modifiers (Ctrl, Shift, Alt). It lists the corresponding hardware code, key code, UI label, user settings representation, Electron accelerator, and dispatch string for each combination within VS Code.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/services/keybinding/test/node/linux_en_uk.txt#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n|                           KeyK |   k   |                         K |     |                         K |                              k |                         K |                         [KeyK] |         |\n|                      Ctrl+KeyK |   k   |                    Ctrl+K |     |                    Ctrl+K |                         ctrl+k |                    Ctrl+K |                    ctrl+[KeyK] |         |\n|                     Shift+KeyK |   K   |                   Shift+K |     |                   Shift+K |                        shift+k |                   Shift+K |                   shift+[KeyK] |         |\n|                Ctrl+Shift+KeyK |   K   |              Ctrl+Shift+K |     |              Ctrl+Shift+K |                   ctrl+shift+k |              Ctrl+Shift+K |              ctrl+shift+[KeyK] |         |\n|                       Alt+KeyK |   k   |                     Alt+K |     |                     Alt+K |                          alt+k |                     Alt+K |                     alt+[KeyK] |         |\n|                  Ctrl+Alt+KeyK |   ĸ   |                Ctrl+Alt+K |     |                Ctrl+Alt+K |                     ctrl+alt+k |                Ctrl+Alt+K |                ctrl+alt+[KeyK] |         |\n|                 Shift+Alt+KeyK |   K   |               Shift+Alt+K |     |               Shift+Alt+K |                    shift+alt+k |               Shift+Alt+K |               shift+alt+[KeyK] |         |\n|            Ctrl+Shift+Alt+KeyK |   &   |          Ctrl+Shift+Alt+K |     |          Ctrl+Shift+Alt+K |               ctrl+shift+alt+k |          Ctrl+Shift+Alt+K |          ctrl+shift+alt+[KeyK] |         |\n```\n\n----------------------------------------\n\nTITLE: File Naming Convention for Diffing Fixture Tests in VS Code\nDESCRIPTION: Describes the file naming pattern used for diffing fixture tests. Files starting with '1.' are diffed against files starting with '2.'. The 'tst' extension is used instead of 'ts' for TypeScript diff files to avoid compiler/linter errors.\nSOURCE: https://github.com/microsoft/vscode/blob/main/src/vs/editor/test/node/diffing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nEvery folder in `fixtures` represents a test.\nThe file that starts with `1.` is diffed against the file that starts with `2.`. Use `tst` instead of `ts` to avoid compiler/linter errors for typescript diff files.\n```\n\n----------------------------------------\n\nTITLE: Referencing Another Git Commit in Markdown\nDESCRIPTION: This snippet shows another instance of referencing a Git commit in Markdown. It links to a commit that used the attribute in a smoke test to grab the contents of the SCM part in the status bar.\nSOURCE: https://github.com/microsoft/vscode/blob/main/test/smoke/Audit.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[0aec2d6](https://github.com/microsoft/vscode/commit/0aec2d6838b5e65cc74c33b853ffbd9fa191d636)\n```\n\n----------------------------------------\n\nTITLE: Describing Simple Browser Extension in Markdown\nDESCRIPTION: Markdown content explaining the Simple Browser extension, its bundled nature with VS Code, and its primary use case for displaying simple web content in other extensions.\nSOURCE: https://github.com/microsoft/vscode/blob/main/extensions/simple-browser/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Simple Browser\n\n**Notice:** This extension is bundled with Visual Studio Code. It can be disabled but not uninstalled.\n\nProvides a very basic browser preview using an iframe embedded in a [webviewW](). This extension is primarily meant to be used by other extensions for showing simple web content.\n```"
  }
]