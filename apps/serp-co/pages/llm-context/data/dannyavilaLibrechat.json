[
  {
    "owner": "danny-avila",
    "repo": "librechat",
    "content": "TITLE: Importing and Using the User Schema with Mongoose (JavaScript)\nDESCRIPTION: Illustrates importing the userSchema from @librechat/data-schemas and creating a Mongoose model for user documents. This snippet requires mongoose and @librechat/data-schemas installed as dependencies. The UserModel object provides methods to create, read, update, and delete user records within a connected MongoDB database.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport mongoose from 'mongoose';\nimport { userSchema } from '@librechat/data-schemas';\n\nconst UserModel = mongoose.model('User', userSchema);\n\n// Now you can use UserModel to create, read, update, and delete user documents.\n```\n\n----------------------------------------\n\nTITLE: Installing LibreChat Data Schemas via npm (bash)\nDESCRIPTION: Demonstrates how to install the @librechat/data-schemas NPM package using the npm command. This adds the package as a dependency to your JavaScript or TypeScript project. Required prerequisite: npm must be installed and initialized with a package.json. Upon execution, the library becomes available for import in project source files.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @librechat/data-schemas\n```\n\n----------------------------------------\n\nTITLE: Installing LibreChat Data Schemas via yarn (bash)\nDESCRIPTION: Shows how to add @librechat/data-schemas to your project using yarn. This command downloads and registers the package for use in applications that use yarn for dependency management. Ensure yarn is installed and your workspace is initialized before running this command.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @librechat/data-schemas\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Schemas from the Package (JavaScript)\nDESCRIPTION: Demonstrates how to import several data schemas—actionSchema, agentSchema, and messageSchema—from the @librechat/data-schemas package. This enables developers to create and manage different Mongoose models for distinct entities. Dependencies include a valid @librechat/data-schemas installation and a project compatible with JavaScript module imports.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { actionSchema, agentSchema, messageSchema } from '@librechat/data-schemas';\n```\n\n----------------------------------------\n\nTITLE: Running Build Script for Data Schemas Package (bash)\nDESCRIPTION: Provides the npm command to clean the output directory and build the @librechat/data-schemas package, compiling TypeScript and bundling for distribution. Prerequisites are a valid npm environment and the necessary dev dependencies. Successful execution produces up-to-date compiled JavaScript files.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Build Watch Script (bash)\nDESCRIPTION: Shows the npm command to start a build watcher that automatically rebuilds the package on source file changes. Developers can use this in development environments to keep their build output up-to-date in real time. Requires npm scripts to be defined and a valid project setup.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode (bash)\nDESCRIPTION: Presents the npm command to execute tests with code coverage in watch mode. This enables continuous testing during development. The script assumes test configuration is present and all dependencies for running tests are installed.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Cleaning the Build Output Directory (bash)\nDESCRIPTION: Instructs how to remove the dist directory, deleting all built artifacts with an npm script. Essential for resetting build outputs and ensuring clean builds. This command works in projects where the 'clean' script is defined in package.json.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run clean\n```\n\n----------------------------------------\n\nTITLE: Accessing ClusterIP Service via Port Forwarding\nDESCRIPTION: Shell commands using kubectl to find the LibreChat pod name and container port when `.Values.service.type` contains 'ClusterIP'. It exports these to environment variables, instructs the user to access the application via localhost:8080, and then establishes a port-forward session from local port 8080 to the container port.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/charts/librechat/templates/NOTES.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \\\"librechat.name\\\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\nexport CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\necho \"Visit http://127.0.0.1:8080 to use your application\"\nkubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n```\n\n----------------------------------------\n\nTITLE: Retrieving NodePort URL using kubectl\nDESCRIPTION: Shell commands using kubectl to retrieve the Node IP and NodePort for the LibreChat service when `.Values.service.type` contains 'NodePort'. It exports these values to environment variables and then constructs and echoes the access URL.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/charts/librechat/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"librechat.fullname\" . }})\nexport NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\necho http://$NODE_IP:$NODE_PORT\n```\n\n----------------------------------------\n\nTITLE: Retrieving LoadBalancer URL using kubectl\nDESCRIPTION: Shell commands using kubectl to retrieve the external IP address assigned by the LoadBalancer to the LibreChat service when `.Values.service.type` contains 'LoadBalancer'. It exports the IP to an environment variable and echoes the URL using the configured service port (`.Values.service.port`). Includes a note about potential delays and how to watch the service status.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/charts/librechat/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"librechat.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"librechat.fullname\" . }} --template \"{{ \\\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\\\" }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n```\n\n----------------------------------------\n\nTITLE: Generating Ingress URL in Helm Template\nDESCRIPTION: Helm template code that generates the application URL(s) when Ingress is enabled (`.Values.ingress.enabled` is true). It iterates through hosts and paths defined in `.Values.ingress.hosts`, prefixing with 'https' if `.Values.ingress.tls` is true, otherwise 'http'.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/charts/librechat/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Crawler Access Rules in robots.txt\nDESCRIPTION: Specifies rules for all user agents (*). It disallows crawling of the `/api/` directory and its contents, preventing indexing of API endpoints. It explicitly allows access to all other paths, including the root (`/`), enabling general site indexing.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/client/public/robots.txt#_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /api/\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Running Continuous Integration Tests (bash)\nDESCRIPTION: Displays the npm command for running tests with coverage in a CI environment. This script is intended for automated pipelines, validating code integrity before merging or deployment. Setup requires a CI-compatible environment and necessary test dependencies.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:ci\n```\n\n----------------------------------------\n\nTITLE: Verifying the Codebase in CI Mode (bash)\nDESCRIPTION: Shares the npm command to run verification tests for code integrity in CI. It checks that the current codebase passes all tests and meets project standards, typically as part of the deployment pipeline. A suitable environment with npm and test definitions is required.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/packages/data-schemas/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run verify\n```\n\n----------------------------------------\n\nTITLE: Install Temporary Dependency via npm\nDESCRIPTION: Installs the `hnswlib-node` package as a development dependency using npm. This package is a temporary requirement for running the translation generation script and should not be permanently added to the project's `package.json`. It's a command-line instruction executed in the project root.\nSOURCE: https://github.com/danny-avila/librechat/blob/main/config/translations/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev hnswlib-node\n```"
  }
]