[
  {
    "owner": "qunitjs",
    "repo": "qunit",
    "content": "TITLE: Basic QUnit Test Example\nDESCRIPTION: Demonstrates a simple QUnit test case for an addition function. Shows how to define a test module and write an assertion to verify the function's output.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/index.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add (a, b) {\n  return a + b;\n}\n\nQUnit.module('add', (hooks) => {\n  QUnit.test('two numbers', (assert) => {\n    assert.equal(add(1, 2), 3);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Exception Throwing with QUnit's assert.throws()\nDESCRIPTION: This example demonstrates various ways to use QUnit's assert.throws() method to test exceptions. It shows simple checks, pattern matching, custom error constructors, object matching, and both arrow and regular function validation callbacks.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/throws.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('throws example', function (assert) {\n  // simple check\n  assert.throws(function () {\n    throw new Error('boo');\n  });\n\n  // simple check\n  assert.throws(\n    function () {\n      throw new Error('boo');\n    },\n    'optional description here'\n  );\n\n  // match pattern on actual error\n  assert.throws(\n    function () {\n      throw new Error('some error');\n    },\n    /some error/,\n    'optional description here'\n  );\n\n  // using a custom error constructor\n  function CustomError (message) {\n    this.message = message;\n  }\n  CustomError.prototype.toString = function () {\n    return this.message;\n  };\n\n  // actual error is an instance of the expected constructor\n  assert.throws(\n    function () {\n      throw new CustomError('some error');\n    },\n    CustomError\n  );\n\n  // actual error has strictly equal `constructor`, `name` and `message` properties\n  // of the expected error object\n  assert.throws(\n    function () {\n      throw new CustomError('some error');\n    },\n    new CustomError('some error')\n  );\n\n  // custom validation arrow function\n  assert.throws(\n    function () {\n      throw new CustomError('some error');\n    },\n    (err) => err.toString() === 'some error'\n  );\n\n  // custom validation function\n  assert.throws(\n    function () {\n      throw new CustomError('some error');\n    },\n    function (err) {\n      return err.toString() === 'some error';\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Unit Test with QUnit\nDESCRIPTION: Demonstrates a basic synchronous test using QUnit.test() to verify a square function implementation. Shows how to use the assert argument for making test assertions.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction square (x) {\n  return x * x;\n}\n\nQUnit.test('square()', function (assert) {\n  assert.equal(square(2), 4);\n  assert.equal(square(3), 9);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Hooks with Promise\nDESCRIPTION: Demonstrates how to implement async hooks in QUnit using Promise-based approach for database connections.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/lifecycle.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Database connection', {\n  before: function () {\n    return new Promise(function (resolve, reject) {\n      MyDb.connect(function (err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n  after: function () {\n    return new Promise(function (resolve, reject) {\n      MyDb.disconnect(function (err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using deepEqual with Complex Objects in QUnit JavaScript\nDESCRIPTION: This example demonstrates using assert.deepEqual() to compare a complex object with nested properties, including a Set. The function makeComplexObject creates an object with name, children (as a Set), and location information. The test verifies that a manually constructed object with the same structure matches the result.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/deepEqual.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction makeComplexObject (name, extra, country) {\n  const children = new Set();\n  children.add('Alice');\n  children.add(extra);\n  const countryToCapital = { UK: 'London' };\n  return {\n    name: name,\n    children: children,\n    location: {\n      country: country,\n      nearestCapital: countryToCapital[country]\n    }\n  };\n}\n\nQUnit.test('object example', function (assert) {\n  const result = makeComplexObject('Marty', 'Bob', 'UK');\n\n  // Succeeds!\n  // While each object is distinct by strict equality (identity),\n  // every property, array, object, etc has equal values.\n  assert.deepEqual(result, {\n    name: 'Marty',\n    children: new Set(['Alice', 'Bob']),\n    location: { country: 'UK', nearestCapital: 'London' }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Organizing Tests with QUnit.module in JavaScript\nDESCRIPTION: Demonstrates how to use QUnit.module to organize tests into groups. Tests are automatically grouped into the most recently defined module until a new module is defined.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Group A');\n\nQUnit.test('foo', function (assert) {\n  assert.true(true);\n});\nQUnit.test('bar', function (assert) {\n  assert.true(true);\n});\n\nQUnit.module('Group B');\n\nQUnit.test('baz', function (assert) {\n  assert.true(true);\n});\nQUnit.test('quux', function (assert) {\n  assert.true(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing event-based interface with assert.verifySteps()\nDESCRIPTION: Example of using verifySteps() to test a WordFinder class that emits events. The test captures events using step() and verifies their order with verifySteps().\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/verifySteps.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('good example', function (assert) {\n  const finder = new WordFinder();\n  finder.on('start', () => {\n    assert.step('start');\n  });\n  finder.on('data', (word) => {\n    assert.step(word);\n  });\n  finder.on('end', () => {\n    assert.step('end');\n  });\n  finder.on('error', (e) => {\n    assert.step('error: ' + e);\n  });\n\n  finder.process('Hello, 3.1. Great!');\n\n  assert.verifySteps(['start', 'Hello', 'Great', 'end']);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic QUnit HTML Test Setup\nDESCRIPTION: Base HTML structure for running QUnit tests in a browser. Includes required QUnit CSS and JavaScript files along with placeholder elements for test results.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/browser.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta charset=\"utf-8\">\n<title>QUnit</title>\n<link rel=\"stylesheet\" href=\"https://code.jquery.com/qunit/qunit-2.24.1.css\">\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\"></div>\n  <script src=\"https://code.jquery.com/qunit/qunit-2.24.1.js\"></script>\n  <!-- <script src=\"your_app.test.js\"></script> -->\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Single Callback in QUnit Async Testing\nDESCRIPTION: Example of using assert.async() to wait for a single callback when testing an asynchronous function. It demonstrates how to create a callback with assert.async(), execute an asynchronous operation, and signal completion with the callback.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/async.md#2025-04-12_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction fetchDouble (num, callback) {\n  const double = num * 2;\n  callback(double);\n}\n\nQUnit.test('async example', function (assert) {\n  const done = assert.async();\n\n  fetchDouble(21, (res) => {\n    assert.strictEqual(res, 42, 'Result');\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing async voice service with assert.verifySteps()\nDESCRIPTION: Example of using verifySteps() with async/await to test a voice service that emits events. The test captures noun events and verifies their order after awaiting the operation.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/verifySteps.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('good example', async function (assert) {\n  MyVoice.on('noun', (word) => {\n    assert.step(word);\n  });\n  const song = await MyVoice.sing('My Favorite Things', { lines: 1 });\n\n  assert.true(song.finished, 'finished');\n  assert.verifySteps([\n    'Raindrops',\n    'roses',\n    'whiskers',\n    'kittens'\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing QUnit via npm\nDESCRIPTION: Command to install QUnit as a development dependency using npm package manager.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/intro.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev qunit\n```\n\n----------------------------------------\n\nTITLE: Testing Async Error Rejection with assert.rejects() in JavaScript\nDESCRIPTION: This example demonstrates how to use assert.rejects() to test if an async function throws a specific error when given certain input.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/rejects.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function feedBaby (food) {\n  if (food === 'sprouts') {\n    throw new RangeError('Do not like');\n  }\n  return true;\n}\n\nQUnit.test('example', async function (assert) {\n  await assert.rejects(\n    feedBaby('sprouts'),\n    RangeError\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Test with QUnit\nDESCRIPTION: Shows how to use async/await syntax with QUnit.test() for asynchronous testing. Demonstrates testing of async operations using modern JavaScript features.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('Test with async-await', async function (assert) {\n  const a = await fetchSquare(2);\n  const b = await fetchSquare(3);\n\n  assert.equal(a, 4);\n  assert.equal(b, 9);\n  assert.equal(await fetchSquare(5), 25);\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple step verifications in one test\nDESCRIPTION: Example demonstrating how the internal buffer of steps is automatically reset after calling verifySteps(), allowing for multiple independent sequences of steps in a single test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/verifySteps.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('multiple verifications example', function (assert) {\n  assert.step('one');\n  assert.step('two');\n  assert.verifySteps(['one', 'two']);\n\n  assert.step('three');\n  assert.step('four');\n  assert.verifySteps(['three', 'four']);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Hooks for Test Setup in QUnit\nDESCRIPTION: Illustrates how to use hooks for test setup in QUnit. This example sets up a 'parts' array before each test in the 'Machine Maker' module and then uses it in different tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Machine Maker', function (hooks) {\n  let parts;\n  hooks.beforeEach(function () {\n    parts = ['A', 'B'];\n  });\n\n  QUnit.test('make alphabet', function (assert) {\n    parts.push('C');\n    assert.equal(parts.join(''), 'ABC');\n  });\n\n  QUnit.test('make music', function (assert) {\n    parts.push('B', 'A');\n    assert.equal(parts.join(''), 'ABBA');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Hooks in QUnit Modules\nDESCRIPTION: Shows how to use asynchronous hooks in QUnit modules. This example demonstrates connecting and disconnecting from a database before and after running tests in a module.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Database connection', function (hooks) {\n  hooks.before(async function () {\n    await MyDb.connect();\n  });\n\n  hooks.after(async function () {\n    await MyDb.disconnect();\n  });\n\n  // define tests...\n});\n```\n\n----------------------------------------\n\nTITLE: Failing Example of Type Mismatch with deepEqual in QUnit JavaScript\nDESCRIPTION: This example demonstrates a common case where assert.deepEqual() fails due to type differences. The test compares objects with identical structure but with a property that has different types (number vs string), showing that deepEqual requires strict type equality.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/deepEqual.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('failing example', function (assert) {\n  const result = {\n    a: 'Albert',\n    b: 'Berta',\n    num: 123\n  };\n\n  // fails ,because the number 123 is not strictly equal to the string \"123\".\n  assert.deepEqual(result, {\n    a: 'Albert',\n    b: 'Berta',\n    num: '123'\n  });\n  // Actual:\n  //           num: 123\n  // Expected:\n  //           num: \"123\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Between Assertion Plugin in QUnit\nDESCRIPTION: Demonstrates how to create a custom QUnit assertion plugin that checks if a value falls between two numbers. Uses pushResult() to provide detailed failure messages with actual and expected values.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/pushResult.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.assert.between = function (actual, from, to, message) {\n  const isBetween = (actual >= from && actual <= to);\n\n  this.pushResult({\n    result: isBetween,\n    actual: actual,\n    expected: `between ${from} and ${to} inclusive`,\n    message: message\n  });\n};\n\nQUnit.test('example', function (assert) {\n  const result = 42;\n  assert.between(result, 1, 10, 'result');\n  // Example test failure\n  // > actual: 42\n  // > expected: between 1 and 10\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Each with Async Functions\nDESCRIPTION: Examples of using test.each() with async functions and promises\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.each.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isEven (x) {\n  return x % 2 === 0;\n}\n\nasync function isAsyncEven (x) {\n  return isEven(x);\n}\n\nQUnit.test.each('isAsyncEven', [2, 4], async function (assert, data) {\n  assert.true(await isAsyncEven(data), `${data} is even`);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Various Matchers with assert.rejects() in QUnit\nDESCRIPTION: This example showcases different ways to use assert.rejects(), including simple checks, pattern matching, custom error constructors, and custom validation functions.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/rejects.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('rejects example', function (assert) {\n  // simple check\n  assert.rejects(Promise.reject('some error'));\n\n  // simple check\n  assert.rejects(\n    Promise.reject('some error'),\n    'optional description here'\n  );\n\n  // match pattern on actual error\n  assert.rejects(\n    Promise.reject(new Error('some error')),\n    /some error/,\n    'optional description here'\n  );\n\n  // Using a custom error constructor\n  function CustomError (message) {\n    this.message = message;\n  }\n  CustomError.prototype.toString = function () {\n    return this.message;\n  };\n\n  // actual error is an instance of the expected constructor\n  assert.rejects(\n    Promise.reject(new CustomError('some error')),\n    CustomError\n  );\n\n  // actual error has strictly equal `constructor`, `name` and `message` properties\n  // of the expected error object\n  assert.rejects(\n    Promise.reject(new CustomError('some error')),\n    new CustomError('some error')\n  );\n\n  // custom validation arrow function\n  assert.rejects(\n    Promise.reject(new CustomError('some error')),\n    (err) => err.toString() === 'some error'\n  );\n\n  // custom validation function\n  assert.rejects(\n    Promise.reject(new CustomError('some error')),\n    function (err) {\n      return err.toString() === 'some error';\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Awaiting assert.rejects() for Stateful Tests in QUnit\nDESCRIPTION: This example demonstrates how to use await with assert.rejects() to handle tests with shared state, ensuring proper sequencing of asynchronous operations.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/rejects.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('stateful example', async function (assert) {\n  let value;\n\n  async function feedMe () {\n    await Promise.resolve();\n    if (value === 1) {\n      throw new Error('I want more');\n    }\n    throw new Error('Thank you');\n  }\n\n  value = 5;\n  // if we don't await, then this test will fail,\n  // because `value = 1` would run too soon.\n  await assert.rejects(feedMe(), /Thank you/);\n\n  value = 1;\n  await assert.rejects(feedMe(), /I want more/);\n});\n```\n\n----------------------------------------\n\nTITLE: Requiring Multiple Callbacks with Count Parameter in QUnit\nDESCRIPTION: Example showing how to use the count parameter with assert.async() to require multiple calls to the same callback. The test passes only after the callback is called exactly the specified number of times.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/async.md#2025-04-12_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction uploadBatch (batch, notify, complete) {\n  for (const item of batch) {\n    // Do something with item\n    notify();\n  }\n  complete(null);\n}\n\nQUnit.test('multiple calls example', function (assert) {\n  assert.timeout(1000);\n\n  const notify = assert.async(3);\n  const done = assert.async();\n\n  uploadBatch(\n    ['a', 'b', 'c'],\n    notify,\n    (err) => {\n      assert.strictEqual(err, null, 'complete error parameter');\n\n      done();\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using QUnit assert.true() Method\nDESCRIPTION: Demonstrates various uses of assert.true() including successful and failing assertions. The method checks if the provided value is strictly equal to boolean true. Shows examples with different data types like strings, numbers, booleans, and special values.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/true.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  // success\n  assert.true(true, 'boolean true');\n\n  // failure\n  assert.true('foo', 'non-empty string');\n  assert.true('', 'empty string');\n  assert.true(0, 'number zero');\n  assert.true(false, 'boolean false');\n  assert.true(NaN, 'NaN value');\n  assert.true(null, 'null value');\n  assert.true(undefined, 'undefined value');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Hooks in QUnit\nDESCRIPTION: Demonstrates how to use nested module hooks in QUnit with parent-child relationship. Shows beforeEach and afterEach hooks implementation with test context and global object manipulation.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/lifecycle.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Foo', function (hooks) {\n  var a, b;\n\n  hooks.beforeEach(function () {\n    a = 'Hello';\n    b = 'world';\n  });\n\n  // You may add as many hooks as you need.\n  hooks.beforeEach(function () {\n    globalThis.MyApp = {\n      greeting () {\n        return `${a} ${b}`;\n      }\n    };\n  });\n  hooks.afterEach(function () {\n    delete globalThis.MyApp;\n  });\n\n  QUnit.test('example', function (assert) {\n    assert.equal(a, 'Hello');\n    assert.equal(b, 'world');\n    assert.equal(MyApp.greeting(), 'Hello world');\n\n    a = 'Goodbye';\n    assert.equal(MyApp.greeting(), 'Goodbye world');\n\n    // The beforeEach hook will reset \"a\" back from \"Goodbye\" to \"Hello\",\n    // before the next test begins.\n  });\n\n  QUnit.module('Bar Child', function (hooks) {\n    let c;\n\n    hooks.beforeEach(function (assert) {\n      // The parent \"beforeEach\" hook runs first,\n      // so its data and utilities are safe to use here.\n\n      a += ' to this';\n      c = 'Stranger';\n    });\n\n    QUnit.test('nested example', function (assert) {\n      assert.equal(a, 'Hello to this');\n      assert.equal(b, 'world');\n      assert.equal(MyApp.greeting(), 'Hello to this world');\n\n      assert.equal(c, 'Stranger');\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Module Options in QUnit\nDESCRIPTION: Demonstrates how to set module options in QUnit, including hooks for before, beforeEach, afterEach, and after. These options allow for setting up and tearing down test environments.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('example', {\n  before () {\n    // once for all tests\n  },\n  beforeEach () {\n    // before every test\n  },\n  afterEach () {\n    // after every test\n  },\n  after () {\n    // once after all tests are done\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using QUnit assert.ok() to Test Truthy Values in JavaScript\nDESCRIPTION: This example demonstrates how to use QUnit's assert.ok() function to test various values for truthiness. It shows both passing assertions with truthy values and failing assertions with falsy values.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/ok.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  // success\n  assert.ok(true, 'boolean true');\n  assert.ok('foo', 'non-empty string');\n  assert.ok(1, 'number one');\n\n  // failure\n  assert.ok(false, 'boolean false');\n  assert.ok('', 'empty string');\n  assert.ok(0, 'number zero');\n  assert.ok(NaN, 'NaN value');\n  assert.ok(null, 'null value');\n  assert.ok(undefined, 'undefined value');\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Module Scopes in QUnit\nDESCRIPTION: Shows how to create nested module scopes in QUnit, allowing for hierarchical organization of tests. This example demonstrates grouping tests under 'Fruit' and 'Bread' categories with sub-modules.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Fruit', function (hooks) {\n  QUnit.module('Berries', function (hooks) {\n    QUnit.test('cowberry', function (assert) {\n      assert.true(true);\n    });\n\n    QUnit.test('cranberry', function (assert) {\n      assert.true(true);\n    });\n  });\n\n  QUnit.module('Melons', function (hooks) {\n    QUnit.test('galia', function (assert) {\n      assert.true(true);\n    });\n\n    // ...\n  });\n});\n\nQUnit.module('Bread', function (hooks) {\n  QUnit.test('bake', function (assert) {\n    assert.true(true);\n  });\n\n  QUnit.test('toast', function (assert) {\n    assert.true(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Test Context in QUnit Module\nDESCRIPTION: Shows how to use test context within a QUnit module, demonstrating beforeEach hooks and context sharing between tests. The context is automatically reset between tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Maker', function (hooks) {\n  hooks.beforeEach(function () {\n    this.parts = ['A', 'B'];\n  });\n\n  QUnit.test('make alphabet', function (assert) {\n    this.parts.push('C');\n    assert.equal(this.parts.join(''), 'ABC');\n  });\n\n  QUnit.test('make music', function (assert) {\n    this.parts.push('B', 'A');\n    assert.equal(this.parts.join(''), 'ABBA');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing publish/subscribe system with assert.verifySteps()\nDESCRIPTION: Example of using verifySteps() to verify the correct behavior of a publisher-subscriber system, including subscriber registration, message publishing, and unsubscription.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/verifySteps.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('good example', function (assert) {\n  const publisher = new Publisher();\n\n  const subscriber1 = (message) => assert.step(`Sub 1: ${message}`);\n  const subscriber2 = (message) => assert.step(`Sub 2: ${message}`);\n\n  publisher.subscribe(subscriber1);\n  publisher.subscribe(subscriber2);\n  publisher.publish('Hello!');\n\n  publisher.unsubscribe(subscriber1);\n  publisher.publish('World!');\n\n  assert.verifySteps([\n    'Sub 1: Hello!',\n    'Sub 2: Hello!',\n    'Sub 2: World!'\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a QUnit Test for the 'add' Function\nDESCRIPTION: This snippet demonstrates how to write a QUnit test for the 'add' function, including importing the function and defining a test suite.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/cli.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = require('../add.js');\n\nQUnit.module('add');\n\nQUnit.test('two numbers', (assert) => {\n  assert.equal(add(1, 2), 3);\n});\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.test.only() for Exclusive Test Execution in JavaScript\nDESCRIPTION: This example demonstrates how to use QUnit.test.only() to filter and run only specific tests within a QUnit module. It shows a module with three tests, where only the 'laser()' test is set to run exclusively.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.only.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('robot', (hooks) => {\n  let robot;\n  hooks.beforeEach(() => {\n    robot = new Robot();\n  });\n\n  QUnit.test('say()', (assert) => {\n    assert.true(robot.say('Hello'));\n  });\n\n  // Run only this test\n  // For example, you are working on changing this method.\n  QUnit.test.only('laser()', (assert) => {\n    assert.true(robot.laser());\n  });\n\n  QUnit.test('take()', (assert) => {\n    assert.true(robot.take(5));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Work-in-Progress Code with QUnit.test.todo()\nDESCRIPTION: Demonstrates how to use QUnit.test.todo() to test incomplete functionality in a Robot class. The test expects failing assertions until the fireLazer method is properly implemented, helping track development progress.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.todo.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Robot', (hooks) => {\n  let robot;\n  hooks.beforeEach(() => {\n    robot = new Robot();\n  });\n\n  // Robot is not yet finished\n  QUnit.test.todo('fireLazer', (assert) => {\n    const result = robot.fireLazer();\n    assert.equal(result, \"I'm firing my lazer!\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async Events with QUnit Timeout\nDESCRIPTION: Example showing how to use assert.timeout() with event-based async testing using the async callback pattern. Sets a 1-second timeout for an event listener test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/timeout.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('wait for an event', function (assert) {\n  assert.timeout(1000); // Timeout after 1 second\n  const done = assert.async();\n\n  const adder = new NumberAdder();\n  adder.on('ready', res => {\n    assert.strictEqual(res, 12);\n    done();\n  });\n  adder.run([ 1, 1, 2, 3, 5 ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Hooks in QUnit Modules\nDESCRIPTION: Demonstrates how to use hooks in QUnit modules. Hooks allow running shared code before and after tests or test modules, useful for setup and teardown operations.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('example', function (hooks) {\n  hooks.before(function () {\n    // once for all tests\n  });\n\n  hooks.beforeEach(function () {\n    // before every test\n  });\n\n  hooks.afterEach(function () {\n    // after every test\n  });\n\n  hooks.after(function () {\n    // once after all tests are done\n  });\n\n  // define tests here...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Async Functions with QUnit Timeout\nDESCRIPTION: Demonstrates using assert.timeout() with modern async/await syntax. Sets a 0.5-second timeout for an async function test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/timeout.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('wait for an async function', async function (assert) {\n  assert.timeout(500); // Timeout after 0.5 seconds\n\n  const result = await asyncAdder(5, 7);\n  assert.strictEqual(result, 12);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Hooks with Modern Syntax\nDESCRIPTION: Shows how to implement async hooks in QUnit using modern async/await syntax for database connections.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/lifecycle.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Database connection', function (hooks) {\n  hooks.before(async function () {\n    await MyDb.connect();\n  });\n\n  hooks.after(async function () {\n    await MyDb.disconnect();\n  });\n\n  // define tests...\n});\n```\n\n----------------------------------------\n\nTITLE: Using assert.propEqual() with ES5 Constructor Function in QUnit\nDESCRIPTION: Shows how to use assert.propEqual() with a traditional ES5 constructor function. Similar to the ES6 example, it compares an object instance with a plain object, checking only direct properties while ignoring prototype methods.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/propEqual.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  function Foo () {\n    this.x = 1;\n    this.y = 2;\n  }\n  Foo.prototype.walk = function () {};\n  Foo.prototype.run = function () {};\n\n  const foo = new Foo();\n\n  // succeeds, own properties are strictly equal.\n  const expected = {\n    x: 1,\n    y: 2\n  };\n  assert.propEqual(foo, expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Promise-based Test with QUnit\nDESCRIPTION: Demonstrates how to test Promise-based operations using QUnit.test(). Includes implementation of an async function that returns a Promise with a delayed resolution.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchSquare (x) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve(x * x);\n    }, 1000);\n  });\n}\n\nQUnit.test('Test with Promise', function (assert) {\n  return fetchSquare(3).then(function (result) {\n    assert.equal(result, 9);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await with QUnit.begin() Callback\nDESCRIPTION: Example demonstrating how to use async/await syntax with QUnit.begin() to perform asynchronous operations before the test run starts.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.begin.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.begin(async details => {\n  await someAsyncWork();\n\n  console.log(`Test amount: ${details.totalTests}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Using assert.closeTo() for Approximate Number Comparisons in QUnit\nDESCRIPTION: This example demonstrates how to use assert.closeTo() to compare numbers that are approximately equal within a specified tolerance. It shows passing assertions for floating-point numbers and PI.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/closeTo.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  const x = 0.1 + 0.2; // 0.30000000000000004\n\n  // passing: x is between 0.299 and 0.301\n  assert.closeTo(x, 0.3, 0.001);\n\n  // passing: 3.14159 is between 3.140 and 3.142\n  assert.closeTo(Math.PI, 3.141, 0.001);\n\n  const y = 20.13;\n  // passing: y is between 20.05 and 20.15 inclusive\n  assert.closeTo(y, 20.10, 0.05);\n});\n```\n\n----------------------------------------\n\nTITLE: Using strictEqual() in QUnit Tests\nDESCRIPTION: Demonstrates how to use the strictEqual() assertion to compare primitive values in a QUnit test. The example shows a basic comparison between a result variable and an expected number value using strict equality.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/strictEqual.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('strictEqual example', function (assert) {\n  const result = 2;\n\n  assert.strictEqual(result, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Assertion Examples - Poor vs Good Practices\nDESCRIPTION: Shows examples of both poor and good practices when writing assertions in QUnit, comparing direct boolean checks against more descriptive assertions using built-in methods.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/pushResult.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('remainder example [bad]', function (assert) {\n  const actual = 4;\n\n  const result = (actual % 3) === 2;\n  assert.true(result);\n\n  // Example failure:\n  // > Actual: false\n  // > Expected: true\n});\n\nQUnit.test('remainder example [good]', function (assert) {\n  const actual = 4;\n\n  const result = (actual % 3);\n  assert.strictEqual(result, 2, 'remainder of mod 3');\n\n  // Example failure:\n  // > Message: remainder of mod 3\n  // > Actual: 1\n  // > Expected: 2\n});\n\nQUnit.test('between example', function (assert) {\n  const actual = 42;\n\n  const isBetween = actual >= 1 && actual <= 10;\n  assert.true(isBetween);\n\n  // Example failure:\n  // > Actual: false\n  // > Expected: true\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Assertions Using assert.equal() in QUnit Test\nDESCRIPTION: Shows a more comprehensive set of assertions using assert.equal() to compare various value types, including numbers, strings, and null.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/equal.md#2025-04-12_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.test('equal test', function (assert) {\n  assert.equal(0, 0, 'Zero, Zero; equal succeeds');\n  assert.equal('', 0, 'Empty, Zero; equal succeeds');\n  assert.equal('', '', 'Empty, Empty; equal succeeds');\n\n  assert.equal('three', 3, 'Three, 3; equal fails');\n  assert.equal(null, false, 'null, false; equal fails');\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Each with Array Data Provider\nDESCRIPTION: Examples of using test.each() with array data providers and destructuring\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.each.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction square (x) {\n  return x * x;\n}\n\nQUnit.test.each('square', [\n  [2, 4],\n  [3, 9]\n], function (assert, data) {\n  assert.equal(square(data[0]), data[1]);\n});\n\n// With array destructuring\nQUnit.test.each('square', [\n  [2, 4],\n  [3, 9]\n], function (assert, [input, expected]) {\n  assert.equal(square(input), expected);\n});\n\n// With array destructuring and arrow functions\nQUnit.test.each('square', [\n  [2, 4],\n  [3, 9]\n], (assert, [input, expected]) => {\n  assert.equal(square(input), expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Using assert.false() in QUnit Tests (JavaScript)\nDESCRIPTION: This snippet demonstrates various uses of the assert.false() method in a QUnit test. It shows successful and failing assertions for different value types.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/false.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  // success\n  assert.false(false, 'boolean false');\n\n  // failure\n  assert.false('foo', 'non-empty string');\n  assert.false('', 'empty string');\n  assert.false(0, 'number zero');\n  assert.false(true, 'boolean true');\n  assert.false(NaN, 'NaN value');\n  assert.false(null, 'null value');\n  assert.false(undefined, 'undefined value');\n});\n```\n\n----------------------------------------\n\nTITLE: Using assert.notDeepEqual() to Compare Different Objects in QUnit Tests\nDESCRIPTION: This example demonstrates how to use assert.notDeepEqual() to verify that two objects are not deeply equal. The test compares an object with {foo: 'yep'} against another with {foo: 'nope'}, and passes because the objects have different values for the 'foo' property.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/notDeepEqual.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  const result = { foo: 'yep' };\n\n  // succeeds, objects are similar but have a different foo value.\n  assert.notDeepEqual(result, { foo: 'nope' });\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Callback for Test Completion in QUnit (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use QUnit.testDone() to register a callback that logs the results of a single test. The callback receives a details object containing information about the completed test, which is then formatted and logged to the console.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.testDone.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.testDone(details => {\n  const result = {\n    'Module name': details.module,\n    'Test name': details.name,\n    Assertions: {\n      Total: details.total,\n      Passed: details.passed,\n      Failed: details.failed\n    },\n    Skipped: details.skipped,\n    Todo: details.todo,\n    Runtime: details.runtime\n  };\n\n  console.log(JSON.stringify(result, null, 2));\n});\n```\n\n----------------------------------------\n\nTITLE: Handling QUnit testEnd Event\nDESCRIPTION: Shows how to process test results and handle failed assertions when a test completes.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.on.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.on('testEnd', testEnd => {\n  if (testEnd.status === 'failed') {\n    console.error('Failed! ' + testEnd.fullName.join(' > '));\n    testEnd.errors.forEach(assertion => {\n      console.error(assertion);\n      // message: speedometer\n      // actual: 75\n      // expected: 88\n      // stack: at dmc.test.js:12\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Date Objects with deepEqual in QUnit JavaScript\nDESCRIPTION: This example shows how assert.deepEqual() handles Date objects. The test verifies that dates with the same internal timestamp but different string representations are considered equal. It also demonstrates a failing case when comparing dates with different timestamps.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/deepEqual.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('date example', function (assert) {\n  const result = timeCircuit.getLastDeparted();\n\n  // succeeds\n  // - object is instance of same Date class\n  // - internal timestamp is equal\n  assert.deepEqual(result, new Date('1985-10-26T01:20-07:00'));\n  assert.deepEqual(result, new Date('1985-10-26T08:20Z'));\n\n  // fails, because the internal timestamp differs.\n  assert.deepEqual(result, new Date('1985-10-26T01:21-07:00'));\n  // Actual:   Sat Oct 26 1985 08:20:00 GMT+0000 (UTC)\n  // Expected: Sat Oct 26 1985 08:21:00 GMT+0000 (UTC)\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Each Implementation (After)\nDESCRIPTION: Refactored example using QUnit.test.each() to test multiple number cases more efficiently.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.each.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test.each('number is', [\n  0,\n  1,\n  42,\n  9007199254740991,\n  1e+100,\n  -65536\n], function (assert, input) {\n  assert.true(Number.isFinite(input), 'finite');\n  assert.false(Number.isNaN(input), 'NaN');\n  assert.true(Number.isInteger(input), 'int');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit Autostart with ESM Dynamic Imports\nDESCRIPTION: This JavaScript snippet shows how to configure QUnit.config.autostart and use ESM dynamic imports to load test modules. It demonstrates disabling autostart, loading modules asynchronously, and then starting QUnit tests manually.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/autostart.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// tests.js\nQUnit.config.autostart = false;\n\nPromise.all([\n  import('./foo.js'),\n  import('./bar.js')\n]).then(function () {\n  QUnit.start();\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Falsy Values with QUnit notOk\nDESCRIPTION: Example demonstrating the usage of assert.notOk() to test various falsy and truthy values. The assertion passes for falsy values (false, empty string, 0, NaN, null, undefined) and fails for truthy values (non-empty strings, true, numbers greater than 0).\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/notOk.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  // success\n  assert.notOk(false, 'boolean false');\n  assert.notOk('', 'empty string');\n  assert.notOk(0, 'number zero');\n  assert.notOk(NaN, 'NaN value');\n  assert.notOk(null, 'null value');\n  assert.notOk(undefined, 'undefined value');\n\n  // failure\n  assert.notOk('foo', 'non-empty string');\n  assert.notOk(true, 'boolean true');\n  assert.notOk(1, 'number one');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Context via Module Options\nDESCRIPTION: Shows how to set test context using module options with inventory and helper methods.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/lifecycle.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('example', {\n  inventory: 'ABCDEFG',\n  makeParts (a, b) {\n    return [this.inventory[a], this.inventory[b]];\n  },\n  beforeEach () {\n    this.parts = this.makeParts(0, 1);\n  }\n});\n\nQUnit.test('make alphabet', function (assert) {\n  this.parts.push('C');\n  assert.equal(this.parts.join(''), 'ABC');\n});\n\nQUnit.test('make music', function (assert) {\n  this.parts.push('B', 'A');\n  assert.equal(this.parts.join(''), 'ABBA');\n});\n\nQUnit.test('make good music', function (assert) {\n  var x = this.makeParts(1, 1).join('');\n  assert.equal(x, 'BB', 'The King of the Blues');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling QUnit runStart Event\nDESCRIPTION: Example of registering a callback for the runStart event to log the total number of tests to be executed.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.on.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.on('runStart', runStart => {\n  console.log(`Test plan: ${runStart.testCounts.total}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent Conditional Test Implementation\nDESCRIPTION: Shows the equivalent manual implementation of conditional testing logic using an if-else statement, which QUnit.test.if() simplifies. This approach manually decides whether to call QUnit.test() or QUnit.test.skip().\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.if.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('MyApp');\n\nif (typeof document !== 'undefined') {\n  QUnit.test('render', function (assert) {\n    assert.strictEqual(MyApp.render(), '<p>Hello world!</p>');\n  });\n} else {\n  QUnit.test.skip('render');\n}\n```\n\n----------------------------------------\n\nTITLE: Using assert.step() to verify event-driven execution flow in QUnit\nDESCRIPTION: This example demonstrates how to use assert.step() to mark various stages of execution in an event-driven WordFinder class. Each event ('start', 'data', 'end', 'error') is recorded as a step, and then verified in the correct sequence using assert.verifySteps().\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/step.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  const finder = new WordFinder();\n  finder.on('start', () => {\n    assert.step('start');\n  });\n  finder.on('data', (word) => {\n    assert.step(word);\n  });\n  finder.on('end', () => {\n    assert.step('end');\n  });\n  finder.on('error', (e) => {\n    assert.step('error: ' + e);\n  });\n\n  finder.process('Hello, 3.1. Great!');\n\n  assert.verifySteps(['start', 'Hello', 'Great', 'end']);\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Callbacks in QUnit Async Testing\nDESCRIPTION: Example showing how to wait for multiple asynchronous operations by calling assert.async() multiple times. Each returned callback must be called exactly once to pass the test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/async.md#2025-04-12_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nQUnit.test('two async calls', function (assert) {\n  const done1 = assert.async();\n  const done2 = assert.async();\n\n  fetchDouble(3, (res) => {\n    assert.strictEqual(res, 6, 'double of 3');\n    done1();\n  });\n  fetchDouble(9, (res) => {\n    assert.strictEqual(res, 18, 'double of 9');\n    done2();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Objects with QUnit.extend()\nDESCRIPTION: Demonstrates how to use QUnit.extend() to merge properties from one object into another. Shows handling of unchanged properties, property replacement, new property addition, and property removal when undefined is specified. Uses QUnit test framework to verify the behavior.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.extend.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('using extend', function (assert) {\n  const base = {\n    a: 1,\n    b: 2,\n    zed: 3\n  };\n  QUnit.extend(base, {\n    b: 2.5,\n    c: 3,\n    zed: undefined\n  });\n\n  assert.strictEqual(base.a, 1, 'Unspecified keys remain unchanged');\n  assert.strictEqual(base.b, 2.5, 'Matching keys are replaced');\n  assert.strictEqual(base.c, 3, 'New keys are added');\n  assert.false('zed' in base, 'Keys with the value `undefined` are removed');\n});\n```\n\n----------------------------------------\n\nTITLE: Using assert.propContains() in QUnit for Object Property Comparison\nDESCRIPTION: This example demonstrates various uses of assert.propContains() to check for the presence of specific properties and values in objects, including nested objects and arrays.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/propContains.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  const result = {\n    foo: 0,\n    vehicle: {\n      timeCircuits: 'on',\n      fluxCapacitor: 'fluxing',\n      engine: 'running'\n    },\n    quux: 1\n  };\n\n  assert.propContains(result, {\n    foo: 0,\n    vehicle: { fluxCapacitor: 'fluxing' }\n  });\n\n  function Point (x, y, z = 0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  assert.propContains(\n    new Point(10, 20),\n    { y: 20 }\n  );\n\n  assert.propContains(\n    [ 'a', 'b' ],\n    { 1: 'b' }\n  );\n\n  const nested = {\n    north: [ /* ... */ ],\n    east: new Point(10, 20),\n    south: [ /* ... */ ],\n    west: [ /* ... */ ]\n  };\n\n  assert.propContains(nested, { east: new Point(10, 20) });\n  assert.propContains(nested, { east: { x: 10, y: 20 } });\n  assert.propContains(nested, { east: { x: 10 } });\n});\n```\n\n----------------------------------------\n\nTITLE: Marking a Module as Todo in QUnit\nDESCRIPTION: Demonstrates how to mark a module as todo in QUnit using QUnit.module.todo(). This is useful for features under development that are known to not yet pass all tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module.todo('Robot', (hooks) => {\n  let android;\n  hooks.beforeEach(() => {\n    android = new Robot();\n  });\n\n  QUnit.test('hello', function (assert) {\n    assert.strictEqual(android.hello(), 'Hello');\n    // TODO\n    // Actual: Goodbye\n    // Expected: Hello\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using assert.notPropContains() in QUnit Tests\nDESCRIPTION: This example demonstrates various use cases of the assert.notPropContains() method in QUnit tests. It shows how to check for absence of properties, different property values, and nested object comparisons.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/notPropContains.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  const result = {\n    foo: 0,\n    vehicle: {\n      timeCircuits: 'on',\n      fluxCapacitor: 'fluxing',\n      engine: 'running'\n    },\n    quux: 1\n  };\n\n  // succeeds, property \"timeCircuits\" is actually \"on\"\n  assert.notPropContains(result, {\n    vehicle: {\n      timeCircuits: 'off'\n    }\n  });\n\n  // succeeds, property \"wings\" is not in the object\n  assert.notPropContains(result, {\n    vehicle: {\n      wings: 'flapping'\n    }\n  });\n\n  function Point (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  assert.notPropContains(\n    new Point(10, 20),\n    { z: 30 }\n  );\n\n  const nested = {\n    north: [ /* ... */ ],\n    east: new Point(10, 20),\n    south: [ /* ... */ ],\n    west: [ /* ... */ ]\n  };\n\n  assert.notPropContains(nested, { east: new Point(88, 42) });\n  assert.notPropContains(nested, { east: { x: 88 } });\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Execution in QUnit\nDESCRIPTION: Demonstrates how to conditionally execute a module in QUnit using QUnit.module.if(). This is useful for running tests only in specific environments or when certain dependencies are available.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module.if('MyApp', typeof document !== 'undefined', (hooks) => {\n  QUnit.test('render', function (assert) {\n    assert.strictEqual(MyApp.render(), '<p>Hello world!</p>');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling QUnit Error Event\nDESCRIPTION: Shows how to handle uncaught global errors during test execution.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.on.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.on('error', error => {\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Process Event Integration with QUnit Error Handling\nDESCRIPTION: Shows how to connect Node.js process events directly to QUnit's error handling system. Demonstrates integration with custom unhandled events.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.onUncaughtException.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on('unhandledExample', QUnit.onUncaughtException);\n```\n\n----------------------------------------\n\nTITLE: Simple QUnit Test Example\nDESCRIPTION: Example QUnit test script demonstrating how to test a basic addition function. Shows module organization and assertion syntax.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/browser.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\nfunction add(a, b) {\n  return a + b;\n}\n\nQUnit.module('add', function() {\n  QUnit.test('two numbers', function(assert) {\n    assert.equal(add(1, 2), 3);\n  });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating QUnit.stack() Usage in JavaScript\nDESCRIPTION: This snippet showcases how to use QUnit.stack() in various contexts within QUnit tests. It demonstrates the difference between calling the method directly and with an offset, as well as its behavior in different test scenarios.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.stack.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addHelper (a, b) {\n  console.log(QUnit.stack());\n  // fooHelper@\n  // foo@\n  // @example.test.js:18 (example A)\n\n  console.log(QUnit.stack(2));\n  // @example.test.js:18 (example A)\n\n  return a + b;\n}\n\nfunction add (a, b) {\n  return addHelper(a, b);\n}\n\nQUnit.test('example A', function (assert) {\n  assert.equal(add(2, 3), 5);\n});\n\nQUnit.test('example B', function (assert) {\n  assert.true(true);\n\n  console.log(QUnit.stack());\n  // @example.test.js:24 (example B)\n});\n```\n\n----------------------------------------\n\nTITLE: Registering QUnit.done() Callback in JavaScript\nDESCRIPTION: This example demonstrates how to register a callback function using QUnit.done(). The callback logs the runtime of the test suite from the details object provided by QUnit.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.done.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.done(function (details) {\n  console.log('Runtime: ' + details.runtime);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Class Instances with deepEqual in QUnit JavaScript\nDESCRIPTION: This example demonstrates comparing instances of different classes using assert.deepEqual(). While instances with the same property values but from different classes will fail the comparison, instances from the same class with matching properties will pass.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/deepEqual.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass BaseCoord {\n  constructor (lat, long) {\n    this.lat = long;\n    this.long = long;\n  }\n}\nclass PrimaryDimensionCoord extends BaseCoord {}\nclass UpsideDownCoord extends BaseCoord {}\n\nQUnit.test('class example', function (assert) {\n  eleven.goto('Enschede');\n  eleven.enterGate();\n  const loc = eleven.getLocation();\n\n  // succeeds\n  assert.deepEqual(loc, new UpsideDownCoord(52.2206, 6.8960));\n\n  // fails, because loc is an instance of a different class.\n  assert.deepEqual(loc, new PrimaryDimensionCoord(52.2206, 6.8960));\n});\n```\n\n----------------------------------------\n\nTITLE: Using assert.async() for Asynchronous Tests in QUnit\nDESCRIPTION: Shows how to use assert.async() instead of stop() and start() for handling asynchronous operations in QUnit tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('navigates to new page', function (assert) {\n  const done = assert.async();\n  router.navigate(function (newPage) {\n    assert.equal(newPage.id, 1);\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit Autostart with RequireJS\nDESCRIPTION: This JavaScript snippet shows how to configure QUnit.config.autostart when using RequireJS to load test modules. It demonstrates disabling autostart, loading modules through RequireJS, and then starting QUnit tests manually.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/autostart.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// tests.js\nQUnit.config.autostart = false;\n\nrequire(\n  [\n    'tests/testModule1',\n    'tests/testModule2'\n  ],\n  function () {\n    QUnit.start();\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: QUnit Test With Each (Reduced Duplication)\nDESCRIPTION: Example showing how test.each() reduces code duplication\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.each.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test.each('example', {\n  'non-empty page': 'Foo bar.',\n  'empty page': ''\n}, function (assert, input) {\n  const mockPage = { title: 'Example', created: '2011-04-01T12:00:00Z', content: input };\n  const mockUser = { name: 'Admin', created: '1991-10-18T12:00:00Z', role: 'administrator' };\n  assert.equal(\n    APP.createPage(mockUser, mockPage),\n    'Admin created a page in April 2011'\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Usage of assert.propContains() in QUnit\nDESCRIPTION: This example shows an alternative way to use assert.propContains() for checking specific properties of an object, compared to using multiple assert.strictEqual() calls.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/propContains.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nassert.propContains(\n  new Point(10, 20, 30),\n  { x: 10, z: 30 }\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPlace = new Point(10, 20, 30);\nassert.strictEqual(myPlace.x, 10, 'x property');\nassert.strictEqual(myPlace.z, 30, 'z property');\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Test Hooks in QUnit\nDESCRIPTION: Example of using QUnit.hooks to set up and tear down tests. Demonstrates beforeEach to initialize an app instance and afterEach to check for errors and reset the app state after each test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/hooks.md#2025-04-12_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nQUnit.hooks.beforeEach(function () {\n  this.app = new MyApp();\n});\n\nQUnit.hooks.afterEach(async function (assert) {\n  assert.deepEqual([], await this.app.getErrors(), 'MyApp errors');\n\n  MyApp.reset();\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Reporter Class Implementation\nDESCRIPTION: Example of implementing a QUnit reporter using a class-based approach.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.on.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyReporter {\n  static init (QUnit) {\n    return new MyReporter(QUnit);\n  }\n\n  constructor (QUnit) {\n    QUnit.on('error', this.onError.bind(this));\n    QUnit.on('testEnd', this.onTestEnd.bind(this));\n    QUnit.on('runEnd', this.onRunEnd.bind(this));\n  }\n\n  onError (error) {\n  }\n\n  onTestEnd (testEnd) {\n  }\n\n  onRunEnd (runEnd) {\n  }\n}\n\n// CommonJS, or ES Module\nmodule.exports = MyReporter;\nexport default MyReporter;\n```\n\n----------------------------------------\n\nTITLE: Advanced QUnit Log Callback with Failure Handling\nDESCRIPTION: Shows a more comprehensive logging callback that only triggers on failed assertions. It outputs detailed information including module name, test name, expected/actual values, and source trace if available.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.log.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.log(details => {\n  if (details.result) {\n    return;\n  }\n\n  let output = `[FAILED] ${details.module} > ${details.name}`;\n\n  if (details.message) {\n    output += `: ${details.message}`;\n  }\n  if (details.actual) {\n    output += `\\nexpected: ${details.expected}\\nactual: ${details.actual}`;\n  }\n  if (details.source) {\n    output += `\\n${details.source}`;\n  }\n\n  console.log(output);\n});\n```\n\n----------------------------------------\n\nTITLE: Using assert.propEqual() with ES6 Class in QUnit\nDESCRIPTION: Demonstrates comparing an ES6 class instance with a plain object using assert.propEqual(). The assertion succeeds because only the object's own properties (x and y) are compared, while inherited methods (walk and run) are ignored.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/propEqual.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  class Foo {\n    constructor () {\n      this.x = 1;\n      this.y = 2;\n    }\n\n    walk () {}\n    run () {}\n  }\n\n  const foo = new Foo();\n\n  // succeeds, own properties are strictly equal,\n  // and inherited properties (such as which constructor) are ignored.\n  assert.propEqual(foo, {\n    x: 1,\n    y: 2\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Test Name in QUnit JavaScript\nDESCRIPTION: This example demonstrates how to access the name of the currently running test using QUnit.config.current.testName. It defines a function that logs the test name and then calls it within a QUnit test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/current.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction whatsUp () {\n  console.log(QUnit.config.current.testName); // \"example\"\n}\n\nQUnit.test('example', function (assert) {\n  whatsUp();\n\n  assert.true(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering QUnit Module Start Callback in JavaScript\nDESCRIPTION: Example showing how to register a callback function that logs the name of each QUnit module as it begins execution. The callback receives a details object containing the module name.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.moduleStart.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.moduleStart(details => {\n  console.log(`Now running: ${details.name}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting QUnit Fixture Content via JavaScript Configuration\nDESCRIPTION: Demonstrates how to set default fixture content using JavaScript configuration instead of HTML. Shows how the fixture content is restored between tests even when modified.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/fixture.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\"></div>\n\n  <script src=\"test/bootstrap.js\"></script>\n  <script src=\"test/example.js\"></script>\n</body>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// test/bootstrap.js\n\nQUnit.config.fixture = '<p>Hi <strong>there</strong>, stranger!</p>';\n\n// test/example.js\n\nQUnit.test('example [first]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  assert.strictEqual(fixture.textContent, 'Hi there, stranger!');\n\n  fixture.querySelector('strong').remove();\n\n  assert.strictEqual(fixture.textContent, 'Hi , stranger!');\n});\n\nQUnit.test('example [second]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  // The fixture starts fresh on each test!\n  assert.strictEqual(fixture.textContent, 'Hi there, stranger!');\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping a Module in QUnit\nDESCRIPTION: Shows how to skip an entire module in QUnit using QUnit.module.skip(). This is useful when a module is failing due to a known but unsolved problem.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module.skip('Robot', (hooks) => {\n  let android;\n  hooks.beforeEach(() => {\n    android = new Robot();\n  });\n\n  QUnit.test('hello', function (assert) {\n    assert.strictEqual(android.hello(), 'Hello, my name is AN-2178!');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Deep Array Formatter in QUnit\nDESCRIPTION: Complex example showing how to implement a deep formatter for arrays with proper depth tracking and recursion handling.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.dump.setParser.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.dump.setParser('array', function (arr, stack) {\n  if (QUnit.config.maxDepth && QUnit.dump.depth > QUnit.config.maxDepth) {\n    return '[object Array]';\n  }\n\n  QUnit.dump.up();\n\n  let i = arr.length;\n  const ret = new Array(i);\n  while (i--) {\n    ret[i] = QUnit.dump.parse(arr[i], undefined, stack);\n  }\n\n  QUnit.dump.down();\n\n  return QUnit.dump.join('[', ret, ']');\n  // Output:\n  // 1. 'pre' text.\n  // 2. for each value:\n  //    - line break and inner indentation\n  //    - value as-is\n  //    - comma (if not last)\n  // 3. line break and outer indentation (if any)\n  // 4. 'post' text\n  //\n  // [\n  //   \"foo\",\n  //   \"bar\"\n  // ]\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Strict Inequality in JavaScript using QUnit's assert.notStrictEqual()\nDESCRIPTION: This example demonstrates how to use assert.notStrictEqual() in a QUnit test to check for strict inequality between a string '2' and the number 2. The test succeeds because the values are of different types, despite being similar.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/notStrictEqual.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  const result = '2';\n\n  // succeeds, while the number 2 and string 2 are similar, they are strictly different.\n  assert.notStrictEqual(result, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Global Functions to QUnit Interface in JavaScript\nDESCRIPTION: Demonstrates how to replace global QUnit functions with methods on the QUnit object and use the new assert parameter in test functions.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('example');\n\nQUnit.test('add', function (assert) {\n  assert.equal(add(2, 3), 5);\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Object Properties for Inequality using QUnit's assert.notPropEqual() in JavaScript\nDESCRIPTION: This example demonstrates the usage of assert.notPropEqual() to compare the properties of a Foo class instance with an object literal. The test succeeds because the 'x' property values are not strictly equal (string vs number).\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/notPropEqual.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  class Foo {\n    constructor () {\n      this.x = '1';\n      this.y = 2;\n    }\n\n    walk () {}\n    run () {}\n  }\n\n  const foo = new Foo();\n\n  // succeeds, only own property values are compared (using strict equality),\n  // and property \"x\" is indeed not equal (string instead of number).\n  assert.notPropEqual(foo, {\n    x: 1,\n    y: 2\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.module.only() in JavaScript Testing\nDESCRIPTION: New module method that allows running only the specified module. This is useful for focusing on a specific set of tests during development or debugging.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2017-07-08-qunit-2-4-0.md#2025-04-12_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.module.only()\n```\n\n----------------------------------------\n\nTITLE: Testing Promises with QUnit Timeout (ES5)\nDESCRIPTION: Shows how to use assert.timeout() with Promise-based testing using ES5 syntax. Sets a 0.5-second timeout for a Promise-returning test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/timeout.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('wait for a returned promise', function (assert) {\n  assert.timeout(500); // Timeout after 0.5 seconds\n\n  var promise = asyncAdder(5, 7);\n\n  return promise.then(function (result) {\n    assert.strictEqual(result, 12);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic QUnit Test Loop Example (Before)\nDESCRIPTION: Example showing a traditional approach using a loop to test multiple number cases.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.each.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('number is', function (assert) {\n  const cases = [\n    0,\n    1,\n    42,\n    9007199254740991,\n    1e+100,\n    -65536\n  ];\n  for (const input of cases) {\n    assert.true(Number.isFinite(input), `${input} is finite`);\n    assert.false(Number.isNaN(input), `${input} is not NaN`);\n    assert.true(Number.isInteger(input), `${input} is int`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.test.skip() to temporarily disable tests in JavaScript\nDESCRIPTION: This example demonstrates how to use the skip method to mark tests as skipped in a QUnit test suite. It shows how to create placeholder tests for future implementation and temporarily skip broken tests while maintaining the test structure.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.skip.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('robot', (hooks) => {\n  let robot;\n  hooks.beforeEach(() => {\n    robot = new Robot();\n  });\n\n  QUnit.test('say', (assert) => {\n    assert.strictEqual(robot.say(), 'Exterminate!');\n  });\n\n  // Robot does not yet have a laser() method yet, skip this test for now\n  QUnit.test.skip('laser', (assert) => {\n    assert.true(robot.laser());\n  });\n\n  // TODO: Implement this later!\n  QUnit.test.skip('jump');\n});\n```\n\n----------------------------------------\n\nTITLE: Browser Event Integration with QUnit Error Handling\nDESCRIPTION: Illustrates how to integrate browser-based event handling with QUnit's error reporting system. Shows handling of custom unhandled events in browser environment.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.onUncaughtException.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('unhandledexample', function (event) {\n  QUnit.onUncaughtException(event.reason);\n});\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.test.each() for Data Provider Testing\nDESCRIPTION: Reference to the new QUnit.test.each() method for testing with data providers, introduced in version 2.16.0. This feature allows running the same test with multiple sets of data inputs.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2021-06-06-qunit-2-16-0.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`QUnit.test.each()`](https://qunitjs.com/api/QUnit/test.each/)\n```\n\n----------------------------------------\n\nTITLE: Basic Error Reporting with QUnit.onUncaughtException\nDESCRIPTION: Demonstrates basic usage of QUnit.onUncaughtException by reporting a custom error object. Shows how to manually report a global error that should fail the test run.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.onUncaughtException.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst error = new Error('Failed to reverse the polarity of the neutron flow');\nQUnit.onUncaughtException(error);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of assert.equal() in QUnit Test\nDESCRIPTION: Demonstrates a simple assertion using assert.equal() to compare a number and a string with the same value.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/equal.md#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.test('a test', function (assert) {\n  assert.equal(1, '1', \"String '1' and number 1 have the same value\");\n});\n```\n\n----------------------------------------\n\nTITLE: Handling QUnit runEnd Event\nDESCRIPTION: Example of logging final test execution statistics when all tests complete.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.on.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.on('runEnd', runEnd => {\n  console.log(`Passed: ${runEnd.passed}`);\n  console.log(`Failed: ${runEnd.failed}`);\n  console.log(`Skipped: ${runEnd.skipped}`);\n  console.log(`Todo: ${runEnd.todo}`);\n  console.log(`Total: ${runEnd.total}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Promise Error Handling in QUnit Tests\nDESCRIPTION: This example shows an anti-pattern for testing promise rejections, which can lead to silent failures or missed assertions.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/rejects.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('BAD example', function (assert) {\n  return feedBaby('sprouts')\n    .catch((e) => {\n      assert.true(e instanceof RangeError);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Sending QUnit Results to CLI using QUnit.dump.parse() in JavaScript\nDESCRIPTION: This example demonstrates how to use QUnit.dump.parse() to format test results before sending them from QUnit (running in Headless Chrome) to a CLI tool. It's taken from the grunt-contrib-qunit project.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.dump.parse.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.log(function (obj) {\n  var actual;\n  var expected;\n\n  if (!obj.result) {\n    // Format before sending\n    actual = QUnit.dump.parse(obj.actual);\n    expected = QUnit.dump.parse(obj.expected);\n  }\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: New Boolean Assertions in QUnit\nDESCRIPTION: Introduction of strict boolean assertion methods assert.true() and assert.false() for more precise boolean testing.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2020-08-16-qunit-2-11-0.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nassert.true()\nassert.false()\n```\n\n----------------------------------------\n\nTITLE: Example of Uncaught Exception in QUnit\nDESCRIPTION: A code example that demonstrates an uncaught exception in QUnit by calling QUnit.on() with an invalid parameter, showing how stack traces for uncaught exceptions are formatted.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2025-01-19-stacktrace-cleaner.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// example.js\nQUnit.on(null);\n```\n\n----------------------------------------\n\nTITLE: Handling QUnit suiteStart Event\nDESCRIPTION: Demonstrates logging module information when a test suite begins execution.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.on.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.on('suiteStart', suiteStart => {\n  console.log('suiteStart', suiteStart);\n  // name: 'my module'\n  // fullName: ['grandparent', 'parent', 'my module']\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Test with Steps Migration - After\nDESCRIPTION: Example showing the updated usage of assert.expect() in QUnit 3.0, where verifySteps() counts as a single assertion regardless of step count.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/expect.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', async function (assert) {\n  assert.expect(2);\n\n  MyVoice.on('noun', function (word) {\n    assert.step(word);\n  });\n  var song = await MyVoice.sing('My Favorite Things', { lines: 1 });\n\n  assert.true(song.finished, 'finished'); // 1\n  assert.verifySteps([ // 2\n    'Raindrops',\n    'roses',\n    'whiskers',\n    'kittens'\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.module.if() for Conditional Module Testing\nDESCRIPTION: Shows how to use QUnit.module.if() to conditionally skip all tests within a module. This is useful for conditionally excluding an entire test suite based on a requirement.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.if.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module.if('MyApp', typeof document !== 'undefined');\n\nQUnit.test('render', function (assert) {\n  assert.strictEqual(MyApp.render(), '<p>Hello world!</p>');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic QUnit Log Callback Example\nDESCRIPTION: Demonstrates registering a simple callback that logs the assertion result and message. The callback receives a details object containing information about the completed assertion.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.log.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.log(details => {\n  console.log(`Log: ${details.result}, ${details.message}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Test Context Management in QUnit\nDESCRIPTION: Shows how to manage test context using beforeEach hooks and demonstrates context inheritance between tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/lifecycle.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Maker', function (hooks) {\n  hooks.beforeEach(function () {\n    this.parts = ['A', 'B'];\n  });\n\n  QUnit.test('make alphabet', function (assert) {\n    this.parts.push('C');\n    assert.equal(this.parts.join(''), 'ABC');\n  });\n\n  QUnit.test('make music', function (assert) {\n    this.parts.push('B', 'A');\n    assert.equal(this.parts.join(''), 'ABBA');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing DOM Element with QUnit.dump.parse() in JavaScript\nDESCRIPTION: This example shows how to use QUnit.dump.parse() to get a formatted string representation of a DOM element. It retrieves an element by ID and then parses it.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.dump.parse.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar qHeader = document.getElementById('qunit-header');\nvar parsed = QUnit.dump.parse(qHeader);\n\nconsole.log(parsed);\n\n// Logs: '<h1 id=\"qunit-header\"></h1>'\n```\n\n----------------------------------------\n\nTITLE: QUnit Test with Steps Migration - Before\nDESCRIPTION: Example showing how to use assert.expect() with step counting in QUnit 2.x, demonstrating the old behavior where each step counted as an assertion.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/expect.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', async function (assert) {\n  assert.expect(6);\n\n  MyVoice.on('noun', function (word) {\n    assert.step(word); // 1, 2, 3, 4\n  });\n  var song = await MyVoice.sing('My Favorite Things', { lines: 1 });\n\n  assert.true(song.finished, 'finished'); // 5\n  assert.verifySteps([ // 6\n    'Raindrops',\n    'roses',\n    'whiskers',\n    'kittens'\n  ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating QUnit notEqual() Assertion Examples\nDESCRIPTION: Shows both passing and failing examples of using QUnit's notEqual() assertion. The first test demonstrates a successful loose inequality comparison between a string and number, while the second test shows how loose comparison considers string '2' equal to number 2.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/notEqual.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('passing example', function (assert) {\n  const result = '2';\n\n  // succeeds, 1 and 2 are different.\n  assert.notEqual(result, 1);\n});\n\nQUnit.test('failing example', function (assert) {\n  const result = '2';\n\n  // fails, the number 2 and the string \"2\" are considered equal when\n  // compared loosely. Use `assert.notStrictEqual` to consider them different.\n  assert.notEqual(result, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Timeout Example in JavaScript\nDESCRIPTION: A test example that demonstrates QUnit's timeout feature, where the test never completes because done() is never called, leading to a timeout error.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2025-01-19-stacktrace-cleaner.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('slow example', function (assert) {\n  assert.timeout(100);\n\n  const done = assert.async();\n  // Never done()\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up QUnit with RequireJS in HTML\nDESCRIPTION: This HTML snippet demonstrates how to set up a QUnit test environment with RequireJS. It includes the necessary scripts and DOM elements for running QUnit tests loaded through RequireJS.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/autostart.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>QUnit</title>\n<link rel=\"stylesheet\" href=\"./lib/qunit.css\">\n<body>\n  <div id=\"qunit\"></div>\n  <script src=\"../lib/qunit.js\"></script>\n  <script src=\"../lib/requirejs/require.js\"></script>\n  <script src=\"tests.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: QUnit Test with No Assertions\nDESCRIPTION: Example demonstrating a test that uses assert.expect(0) to indicate that no assertions are expected, used to verify code runs without errors.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/expect.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  assert.expect(0);\n\n  var android = new Robot();\n  android.up(2);\n  android.down(2);\n  android.left();\n  android.right();\n  android.left();\n  android.right();\n  android.attack();\n  android.jump();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling QUnit testStart Event\nDESCRIPTION: Example of logging test information when an individual test begins execution.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.on.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.on('testStart', testStart => {\n  console.log(testStart);\n  // name: 'my test'\n  // moduleName: 'my module'\n  // fullName: ['parent', 'my module', 'my test']\n\n  // name: 'global test'\n  // moduleName: null\n  // fullName: ['global test']\n});\n```\n\n----------------------------------------\n\nTITLE: Test Context with Arrow Functions\nDESCRIPTION: Demonstrates how to manage test context using lexical scope when working with arrow functions in QUnit.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/lifecycle.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('Machine Maker', function (hooks) {\n  let parts;\n  hooks.beforeEach(function () {\n    parts = ['A', 'B'];\n  });\n\n  QUnit.test('make alphabet', function (assert) {\n    parts.push('C');\n    assert.equal(parts.join(''), 'ABC');\n  });\n\n  QUnit.test('make music', function (assert) {\n    parts.push('B', 'A');\n    assert.equal(parts.join(''), 'ABBA');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Handling QUnit suiteEnd Event\nDESCRIPTION: Shows how to handle the completion of a test suite execution.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.on.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.on('suiteEnd', suiteEnd => {\n  console.log(suiteEnd);\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: Setting QUnit.config.testTimeout in JavaScript\nDESCRIPTION: Example of setting the QUnit.config.testTimeout to 60 seconds (60000 milliseconds). This sets the default timeout for all async tests in the QUnit test suite.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/testTimeout.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.testTimeout = 60000; // 1 minute\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic URL Parameters in QUnit\nDESCRIPTION: Basic structure for pushing new configuration objects to QUnit.config.urlConfig. Shows the required and optional properties for configuring toolbar items.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/urlConfig.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.urlConfig.push({\n  id: string,\n  label: string,\n  tooltip: string, // optional\n  value: undefined | string | array | object // optional\n});\n```\n\n----------------------------------------\n\nTITLE: Using Promises with QUnit.begin() in ES5 Syntax\nDESCRIPTION: Example demonstrating how to use Promise-based asynchronous operations with QUnit.begin() using ES5 syntax. Includes a helper function to create the Promise.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.begin.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction someAsyncWork () {\n  return new Promise(function (resolve, reject) {\n    // do some async work\n    resolve();\n  });\n}\n\nQUnit.begin(function (details) {\n  return someAsyncWork().then(function () {\n    console.log('Test amount:' + details.totalTests);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Test-Specific Timeout with assert.timeout() in QUnit\nDESCRIPTION: Example of setting a test-specific timeout using assert.timeout() within a QUnit test. This overrides the default testTimeout for this specific test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/testTimeout.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  assert.timeout(5000);\n  // …\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit CLI Configuration with Bootstrap\nDESCRIPTION: Examples of configuring QUnit using CLI with a bootstrap file, showing both the CLI command and bootstrap file content.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/index.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqunit --require ./test/bootstrap.js\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// test/bootstrap.js\nQUnit.config.noglobals = true;\nQUnit.config.notrycatch = true;\n\nconst MyApp = require('../');\nMyApp.setAccount('TestUser');\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple JavaScript Function for Testing\nDESCRIPTION: This code defines a simple 'add' function that adds two numbers, which will be used as an example for testing with QUnit.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/cli.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add (a, b) {\n  return a + b;\n}\n\nmodule.exports = add;\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit Test Filter with Inverted Regex\nDESCRIPTION: Demonstrates using an inverted case-insensitive regular expression filter.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/filter.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.filter = '!/foo/i';\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit.config.seed in JavaScript\nDESCRIPTION: Example of setting the QUnit.config.seed option to enable randomized test ordering. This can be done programmatically or via URL parameters.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/seed.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.seed = true; // Enable randomized ordering with a new seed\n// or\nQUnit.config.seed = \"abc123\"; // Use a specific seed for reproducible randomization\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Failing Cases of assert.closeTo() in QUnit\nDESCRIPTION: This example shows failing cases of assert.closeTo(), where the actual values fall outside the specified tolerance range. It includes the error messages that would be displayed for these failing assertions.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/closeTo.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('failing example', function (assert) {\n  const x = 20.7;\n  assert.closeTo(x, 20.1, 0.1);\n  // must be between 20.0 and 20.2 inclusive\n\n  // message: value should be within 0.1 inclusive\n  // actual  : 20.7\n  // expected: 20.1\n\n  const y = 2018;\n  assert.closeTo(y, 2012, 2);\n  // must be between 2010 and 2014 inclusive\n\n  // message: value should be within 2 inclusive\n  // actual  : 2018\n  // expected: 2012\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Object-based Dropdown Menu with Conditional Loading\nDESCRIPTION: Shows how to create a dropdown with custom labels for options using an object, and includes conditional logic for loading jQuery based on selection.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/urlConfig.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.urlConfig.push({\n  id: 'jquery',\n  label: 'jQuery',\n  value: { '1.7.2': 'v1.7.2 (LTS)', '1.8.3': 'v1.8.3 (Current)' },\n  tooltip: 'Which version of jQuery to test against.'\n});\n\nif (QUnit.urlConfig.jquery) {\n  // Load jQuery\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Output Depth with QUnit.dump.parse() in JavaScript\nDESCRIPTION: This example demonstrates how to use QUnit.config.maxDepth to limit the depth of output when using QUnit.dump.parse(). It shows the difference in output when maxDepth is set to 1 and 2.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.dump.parse.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar input = {\n  parts: {\n    front: [],\n    back: []\n  }\n};\nQUnit.config.maxDepth = 1;\nconsole.log(QUnit.dump.parse(input));\n// Logs: { \"parts\": [object Object] }\n\nQUnit.config.maxDepth = 2;\nconsole.log(QUnit.dump.parse(input));\n// Logs: { \"parts\": { \"back\": [object Array], \"front\": [object Array] } }\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.module.skip() in JavaScript Testing\nDESCRIPTION: New module method that allows skipping the specified module. This is useful for temporarily disabling a set of tests without removing them from the test suite.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2017-07-08-qunit-2-4-0.md#2025-04-12_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.module.skip()\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts Configuration Example\nDESCRIPTION: Example of configuring QUnit through NPM scripts in package.json using environment variables.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/index.md#2025-04-12_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test-something\": \"qunit_config_filter=something npm run test\",\n    \"test\": \"npm run lint && qunit\",\n    \"lint\": \"eslint --cache .\",\n    \"lint-fix\": \"eslint --cache --fix .\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Running QUnit Tests\nDESCRIPTION: This JSON snippet shows how to configure the 'test' script in package.json to run QUnit tests using npm.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/cli.md#2025-04-12_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"qunit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit Test Filter with Inverted Substring\nDESCRIPTION: Shows how to use an inverted filter to skip tests containing 'foo' and run all others.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/filter.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.filter = '!foo';\n```\n\n----------------------------------------\n\nTITLE: Registering a Start Test Callback with QUnit in Modern JavaScript\nDESCRIPTION: Example showing how to register a callback using QUnit.begin() with modern ES6 arrow function syntax. The callback logs the total number of tests that will be run.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.begin.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.begin(details => {\n  console.log(`Test amount: ${details.totalTests}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Fixture Teardown in QUnit Tests\nDESCRIPTION: Demonstrates how QUnit automatically cleans up DOM modifications between tests using an empty fixture. Shows two tests where the first test adds elements and the second test verifies they were automatically removed.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/fixture.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\"></div>\n\n  <script src=\"test/example.js\"></script>\n</body>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// test/example.js\n\nQUnit.test('example [first]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  const resultA = fixture.querySelectorAll('.first');\n  assert.strictEqual(resultA.length, 0, 'initial');\n\n  const div = document.createElement('div');\n  div.className = 'first';\n  fixture.append(div);\n\n  const resultB = fixture.querySelectorAll('.first');\n  assert.strictEqual(resultB.length, 1, 'after append');\n});\n\nQUnit.test('example [second]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  // The previous elements were automatically detached.\n  const result = fixture.querySelectorAll('.first');\n  assert.strictEqual(result.length, 0, 'initial is back to zero');\n});\n```\n\n----------------------------------------\n\nTITLE: Boolean Configuration Example - QUnit.config.reorder\nDESCRIPTION: Example showing the boolean configuration value for QUnit.config.reorder. When true (default), QUnit will prioritize running previously failed tests before other tests. This feature requires browser sessionStorage or custom storage configuration for non-browser environments.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/reorder.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.reorder = true; // default value\n```\n\n----------------------------------------\n\nTITLE: Setting QUnit failOnZeroTests Configuration\nDESCRIPTION: Example of setting the failOnZeroTests configuration option to false, which allows test runs with zero tests to be considered successful rather than failing by default.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/failOnZeroTests.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.failOnZeroTests = false;\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.module.todo() in JavaScript Testing\nDESCRIPTION: New module method that marks the specified module as todo. This is useful for outlining future test cases or modules that are not yet implemented.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2017-07-08-qunit-2-4-0.md#2025-04-12_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.module.todo()\n```\n\n----------------------------------------\n\nTITLE: Async Test with setTimeout in JavaScript\nDESCRIPTION: A test example that uses setTimeout to demonstrate how QUnit now handles stack traces when user code schedules timers that lead to failures.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2025-01-19-stacktrace-cleaner.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('assert example', function (assert) {\n  const done = assert.async();\n  setTimeout(function () {\n    assert.false(true, 'hello');\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming Module Hooks in QUnit 2\nDESCRIPTION: Illustrates the renaming of module hooks from setup/teardown to beforeEach/afterEach in QUnit 2.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('router', {\n  beforeEach () {\n    this.router = new Router();\n  },\n  afterEach () {\n    this.router.destroy();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using assert.timeout() in QUnit JavaScript Testing\nDESCRIPTION: New assertion method for setting per-test timeout durations. This allows developers to specify custom timeout periods for individual tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2017-07-08-qunit-2-4-0.md#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nassert.timeout()\n```\n\n----------------------------------------\n\nTITLE: Registering a Start Test Callback with QUnit in ES5 Syntax\nDESCRIPTION: Example showing how to register a callback using QUnit.begin() with traditional ES5 function syntax. The callback logs the total number of tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.begin.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.begin(function (details) {\n  console.log('Test amount:' + details.totalTests);\n});\n```\n\n----------------------------------------\n\nTITLE: Using HTML-defined QUnit Fixture Content\nDESCRIPTION: Shows how to define default fixture content in HTML and test DOM manipulation with automatic restoration between tests. Includes a utility function for finding text content within specific elements.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/fixture.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\">\n    <p>\n      <span class=\"marty\"><strong>Marty McFly</strong>: Listen, you got a back door to this place?</span><br>\n      <span class=\"bar\"><strong>Bartender</strong>: Yeah, it's in the <em>back</em>.</span>\n    </p>\n  </div>\n</body>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction findText (element, tagName) {\n  let ret = '';\n  for (const emNode of element.querySelectorAll(tagName)) {\n    ret += emNode.textContent + ' ';\n  }\n  return ret.trim() || null;\n}\n\nQUnit.test('findText [strong]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  assert.strictEqual(\n    findText(fixture, 'strong'),\n    'Marty McFly Bartender',\n    'initial'\n  );\n\n  fixture.querySelector('.bar').remove();\n\n  assert.strictEqual(\n    findText(fixture, 'strong'),\n    'Marty McFly',\n    'removed bar'\n  );\n});\n\nQUnit.test('findText [code]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n  fixture.innerHTML = '<p>You can <code>add</code> two <em>numbers</em>.</p>';\n\n  assert.strictEqual(\n    findText(fixture, 'code'),\n    'add'\n  );\n\n  assert.strictEqual(\n    findText(fixture, 'strong'),\n    null\n  );\n});\n\nQUnit.test('findText [em]', function (assert) {\n  const fixture = document.querySelector('#qunit-fixture');\n\n  assert.strictEqual(\n    findText(fixture, 'em'),\n    'back',\n    'initial content was restored'\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit to Require Expects\nDESCRIPTION: This snippet shows how to set the requireExpects option to true in QUnit configuration. When enabled, tests will fail if they don't specify the expected number of assertions using assert.expect().\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/requireExpects.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```javascript\nQUnit.config.requireExpects = true;\n```\n```\n\n----------------------------------------\n\nTITLE: Node Element Formatter Example in QUnit\nDESCRIPTION: Demonstration of customizing node element formatting and comparing default vs custom output using QUnit.dump.parse().\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.dump.setParser.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar example = { foo: document.createElement('div') };\n\nvar dumped1 = QUnit.dump.parse(example);\nconsole.log(dumped1);\n// # Default\n// {\n//   \"foo\": <div></div>\n// }\n\nQUnit.dump.setParser('node', function (obj) {\n  return '[Node ' + obj.nodeName.toLowerCase() + ']';\n});\n\nvar dumped2 = QUnit.dump.parse(example);\nconsole.log(dumped2);\n// # Custom\n// {\n//   \"foo\": [Node div]\n// }\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with QUnit.skip\nDESCRIPTION: New method to skip test execution while keeping it in the test suite for documentation purposes.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2014-12-03-qunit-1-16-0.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.skip()\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Output Access JavaScript\nDESCRIPTION: JavaScript code demonstrating how to access QUnit test output elements using test IDs during hooks and assertions.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/browser.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.hooks.afterEach(function () {\n  var target = '#qunit-test-output-' + QUnit.config.current.testId;\n});\n\nQUnit.assert.myplugin = function (actual, expected) {\n  var target = '#qunit-test-output-' + QUnit.config.current.testId;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Manual Tracking of Promise Rejections in QUnit\nDESCRIPTION: This example demonstrates a problematic approach to testing promise rejections using assert.async(), which can lead to unreliable tests and hard-to-diagnose issues.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/rejects.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('BAD example', function (assert) {\n  const done = assert.async();\n\n  feedBaby('sprouts')\n    .then(() => {\n      assert.true(false, 'should have failed');\n    })\n    .catch((e) => {\n      assert.true(e instanceof RangeError);\n    })\n    .finally(done);\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Without Each (Code Duplication Example)\nDESCRIPTION: Example showing code duplication when not using test.each()\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.each.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  const mockPage1 = { title: 'Example', created: '2011-04-01T12:00:00Z', content: 'Foo bar.' };\n  const mockUser1 = { name: 'Admin', created: '1991-10-18T12:00:00Z', role: 'administrator' };\n  assert.equal(\n    APP.createPage(mockPage1, mockUser1),\n    'Admin created a page in April 2011'\n  );\n\n  const mockUser2 = { name: 'root', created: '1963-06-09T03:00:00Z', role: 'administrator' };\n  const mockPage2 = { title: 'Example', created: '2011-04-01T12:00:00Z', content: '' };\n  assert.equal(\n    APP.createPage(mockUser2, mockPage2),\n    'root created a page in April 2011'\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Module Completion Callback in JavaScript using QUnit\nDESCRIPTION: This snippet demonstrates how to register a callback function with QUnit.moduleDone(). The callback logs the module name, number of failed tests, and total number of tests to the console when a module finishes running.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.moduleDone.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.moduleDone(details => {\n  console.log(`Finished running: ${details.name} Failed/total: ${details.failed}/${details.total}`);\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Test with Explicit Assertion Count\nDESCRIPTION: Example showing how to use assert.expect() to enforce an exact number of assertions in a test case.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/expect.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  assert.expect(2);\n\n  function calc (x, operation) {\n    return operation(x);\n  }\n\n  let result = calc(2, function (x) {\n    assert.true(true, 'calc() calls operation function');\n    return x * x;\n  });\n\n  assert.strictEqual(result, 4, '2 squared equals 4');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit TestTimeout in Karma\nDESCRIPTION: Example of configuring the QUnit testTimeout option in a Karma configuration file. This sets the default timeout for all QUnit tests run through Karma.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/testTimeout.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.set({\n  frameworks: ['qunit'],\n  plugins: ['karma-qunit'],\n  client: {\n    qunit: {\n      testTimeout: 5000\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Manual implementation without Step API\nDESCRIPTION: Example showing how to manually implement step verification by collecting values in an array and using assert.deepEqual instead of the dedicated Step API.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/verifySteps.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('manual example without Step API', async function (assert) {\n  const values = [];\n\n  const finder = new WordFinder();\n  finder.on('start', () => {\n    values.push('start');\n  });\n  finder.on('middle', () => {\n    values.push('middle');\n  });\n  finder.on('end', () => {\n    values.push('end');\n  });\n  finder.on('error', () => {\n    values.push('error');\n  });\n\n  await finder.process();\n\n  assert.deepEqual(values, ['start', 'middle', 'end']);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Names from QUnit.config.modules in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the QUnit.on('runStart') event to access and log the names of all defined test modules from the QUnit.config.modules array.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/modules.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.on('runStart', () => {\n  console.log(QUnit.config.modules.map(mod => mod.name));\n});\n```\n\n----------------------------------------\n\nTITLE: Command Line Execution of QUnit\nDESCRIPTION: Shows how to run a QUnit test file from the command line using the QUnit CLI, which would display the formatted stack trace for any errors.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2025-01-19-stacktrace-cleaner.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nqunit example.js\n```\n\n----------------------------------------\n\nTITLE: Setting Context via Before Hook\nDESCRIPTION: Alternative approach to setting test context using the before hook instead of module options.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/lifecycle.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('example', {\n  before () {\n    this.inventory = 'ABCDEFG';\n    this.makeParts = function (a, b) {\n      return [this.inventory[a], this.inventory[b]];\n    };\n  },\n  beforeEach () {\n    this.parts = this.makeParts(0, 1);\n  }\n});\n\nQUnit.test('make alphabet', function (assert) {\n  this.parts.push('C');\n  assert.equal(this.parts.join(''), 'ABC');\n});\n\nQUnit.test('make music', function (assert) {\n  this.parts.push('B', 'A');\n  assert.equal(this.parts.join(''), 'ABBA');\n});\n\nQUnit.test('make good music', function (assert) {\n  var x = this.makeParts(1, 1).join('');\n  assert.equal(x, 'BB', 'The King of the Blues');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions in assert.throws() in QUnit 2.12.0\nDESCRIPTION: Shows how to use arrow functions as the expected callback in assert.throws(). This new feature allows for more concise syntax when testing for thrown exceptions.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2020-11-08-qunit-2-12-0.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nassert.throws(\n  () => {\n    // Code that should throw an error\n  },\n  (error) => error instanceof TypeError,\n  \"Expected TypeError to be thrown\"\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit Test Filter with Start-of-String Regex\nDESCRIPTION: Shows how to use a regular expression to match test names that start with 'foo'.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/filter.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.filter = '/^foo/';\n```\n\n----------------------------------------\n\nTITLE: Conditionally Running Tests with QUnit.test.if()\nDESCRIPTION: Demonstrates how to use QUnit.test.if() to conditionally run a test based on whether a DOM is available. The test will only run if document is defined, otherwise it will be skipped.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.if.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('MyApp');\n\n// Skip if executed without a DOM\nQUnit.test.if('render', typeof document !== 'undefined', function (assert) {\n  assert.strictEqual(MyApp.render(), '<p>Hello world!</p>');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuration Type Definition for QUnit moduleId\nDESCRIPTION: Type definition showing that moduleId can be either an array containing module IDs or undefined. When specified, only the selected modules will be executed in the test suite.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/moduleId.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.moduleId = undefined; // default\nQUnit.config.moduleId = ['module1Hash', 'module2Hash']; // example usage\n```\n\n----------------------------------------\n\nTITLE: Loading QUnit and ESM Dynamic Imports in HTML\nDESCRIPTION: This HTML snippet demonstrates how to include QUnit and a module script for tests that use ESM dynamic imports. It sets up the basic structure for running QUnit tests with dynamically loaded modules.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/autostart.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../lib/qunit.js\"></script>\n<script type=\"module\" src=\"tests.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Array-based Dropdown Menu to QUnit Toolbar\nDESCRIPTION: Demonstrates creating a dropdown menu using an array of jQuery versions. The selected value will be available in QUnit.urlParams.jquery.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/urlConfig.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.urlConfig.push({\n  id: 'jquery',\n  label: 'jQuery',\n  value: [ '1.7.2', '1.8.3', '1.9.1' ],\n  tooltip: 'Which version of jQuery to test against.'\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Initializing Console Reporter in JavaScript\nDESCRIPTION: JavaScript code to manually initialize the console reporter in QUnit.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/console.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.reporters.console.init(QUnit);\n```\n\n----------------------------------------\n\nTITLE: Promise Support in QUnit Tests\nDESCRIPTION: Enhanced test method supporting Promise returns and async functions for better asynchronous testing capabilities.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2014-12-03-qunit-1-16-0.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test()\n```\n\n----------------------------------------\n\nTITLE: Using New Test Aliases in QUnit 2.12.0\nDESCRIPTION: Demonstrates the usage of new aliases for QUnit.test.only(), .skip(), and .todo(). These aliases provide more convenient ways to mark tests for specific execution behaviors.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2020-11-08-qunit-2-12-0.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test.only(\"test name\", function(assert) {\n  // Test code\n});\n\nQUnit.test.skip(\"test name\", function(assert) {\n  // Test code\n});\n\nQUnit.test.todo(\"test name\", function(assert) {\n  // Test code\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit Test Filter with Regular Expression\nDESCRIPTION: Example of using a case-sensitive regular expression filter to match test names.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/filter.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.filter = '/foo/';\n```\n\n----------------------------------------\n\nTITLE: Focusing on a Specific Module in QUnit\nDESCRIPTION: Shows how to focus on a specific module during development using QUnit.module.only(). This runs only the tests in the specified module, treating them as if defined via QUnit.test.only.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module.only('Robot', (hooks) => {\n  let android;\n  hooks.beforeEach(() => {\n    android = new Robot();\n  });\n\n  QUnit.test('hello', function (assert) {\n    assert.strictEqual(android.hello(), 'Hello, my name is AN-2178!');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Object Preconfig Examples\nDESCRIPTION: Examples of using object preconfig approach in different JavaScript environments to configure QUnit before loading.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/index.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Isomorphic global\n// For modern browsers, SpiderMonkey, and Node.js (including strict mode).\nglobalThis.QUnit = {\n  config: {\n    autostart: false,\n    maxDepth: 12\n  }\n};\n\n// Browser global\n// Supported in all browsers (including old browsers, and strict mode).\nwindow.QUnit = { /* config: .. */ };\n\n// Implicit global\n// Supported everywhere, including old browsers. (But not ES strict mode.)\nQUnit = { /* config: .. */ };\n```\n\n----------------------------------------\n\nTITLE: Declaratively Enabling Console Reporter via QUnit Config\nDESCRIPTION: JavaScript code to enable the console reporter declaratively using QUnit.config, including both pre-configuration and post-loading options.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/console.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Preconfig:\n// Set as environment variable to Node.js,\n// or as global variable before loading qunit.js\nqunit_config_reporters_console = true;\n\n// Config: Set from any inline script or JS file after qunit.js\nQUnit.config.reporters.console = true;\n```\n\n----------------------------------------\n\nTITLE: Enabling TAP Reporter via QUnit.config in JavaScript\nDESCRIPTION: This snippet shows how to enable the TAP reporter using the QUnit.config object. It can be set from any inline script or JS file after qunit.js is loaded.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/reporters.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Set from any inline script or JS file after qunit.js\nQUnit.config.reporters.tap = true;\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.reporters Interface\nDESCRIPTION: Reference to the new QUnit.reporters interface added in version 2.16.0, which adds support for using the tap reporter in a browser environment.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2021-06-06-qunit-2-16-0.md#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`QUnit.reporters`](https://qunitjs.com/api/reporters/)\n```\n\n----------------------------------------\n\nTITLE: Installing QUnit via npm for Node.js Testing\nDESCRIPTION: This snippet shows how to install the QUnit package using npm or Yarn for Node.js projects.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/cli.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev qunit\n\n# Or, if using Yarn:\nyarn add --dev qunit\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Code Coverage with nyc\nDESCRIPTION: This JSON snippet demonstrates how to set up package.json to use nyc for generating code coverage reports with QUnit tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/cli.md#2025-04-12_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"nyc qunit\"\n  },\n  \"devDependencies\": {\n    \"nyc\": \"*\",\n    \"qunit\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QUnit.config.module Type and Default Value\nDESCRIPTION: Specifies the type and default value of the QUnit.config.module option. It can be a string to select a specific module or undefined to run all modules.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/module.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<tr>\n  <th>type</th>\n  <td markdown=\"span\">`string` or `undefined`</td>\n</tr>\n<tr>\n  <th>default</th>\n  <td markdown=\"span\">`undefined`</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit's Exception Handling\nDESCRIPTION: Configuration property for disabling QUnit's built-in exception handling. When enabled (true), uncaught exceptions will not be caught by QUnit and will propagate as native exceptions, which can be useful for debugging with browser dev tools.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/notrycatch.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nboolean\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Running QUnit CLI with TAP Reporter and Piping to tap-min\nDESCRIPTION: A command-line example showing how to run QUnit tests using the CLI, which uses the TAP reporter by default, and pipe the output to the tap-min reporter for more concise output.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/tap.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nqunit test/ | tap-min\n```\n\n----------------------------------------\n\nTITLE: Basic QUnit Test Structure Example\nDESCRIPTION: Example showing the hierarchical structure of QUnit tests as they appear in performance measurements.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/perf.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nQUnit Run\n└── QUnit Module: Example\n    ├── QUnit Test: apple\n    ├── QUnit Test: banana\n    └── QUnit Test: citron\n```\n\n----------------------------------------\n\nTITLE: Displaying TAP Output Example in QUnit\nDESCRIPTION: An example of the TAP (Test Anything Protocol) output format produced by the QUnit TAP reporter. It shows a simple test run with one passing test and summary statistics.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/tap.md#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 add > two numbers\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with Custom Test ID Configuration\nDESCRIPTION: This snippet shows the command used to run QUnit tests with a specific configuration file for test IDs. It demonstrates how to execute QUnit tests and view the TAP output.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-testId.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# name: config.testId\n# command: [\"qunit\",\"config-testId.js\"]\n\nTAP version 13\nok 1 test 2\nok 2 module A > module B > test 1\nok 3 module A > module C > test 2\nok 4 module D > test 1\n1..4\n# pass 4\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Installing QUnit via Yarn\nDESCRIPTION: Command to install QUnit as a development dependency using Yarn package manager.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/intro.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev qunit\n```\n\n----------------------------------------\n\nTITLE: Initializing QUnit Performance Reporter in Node.js\nDESCRIPTION: Code example showing how to explicitly enable the performance reporter in Node.js environment using a setup file.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/perf.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.reporters.perf.init(QUnit);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Storage Interface for QUnit.config.storage in JavaScript\nDESCRIPTION: This code snippet demonstrates the required interface for implementing a custom storage object for QUnit.config.storage. It includes methods for setting, getting, and removing items, as well as accessing keys and length.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/storage.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstorage = {\n  /**\n   * @param {string} key\n   * @param {string} value\n   */\n  setItem (key, value) {\n  },\n\n  /**\n   * @param {string} key\n   * @return {string|null}\n   */\n  getItem (key) {\n  },\n\n  /**\n   * @param {string} key\n   */\n  removeItem (key) {\n  },\n\n  /**\n   * Get name of key at given offset, e.g. by iterating from 0 to `length`.\n   *\n   * @param {number} index\n   * @return {string|null}\n   */\n  key (index) {\n  },\n\n  /**\n   * How many keys exist.\n   *\n   * @type {number}\n   */\n  get length () {\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Test Start Callback in QUnit (JavaScript)\nDESCRIPTION: This snippet demonstrates how to register a callback using QUnit.testStart(). The callback logs the module and test name to the console whenever a test begins. It utilizes the 'details' object passed to the callback, which contains information about the test being started.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.testStart.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.testStart(details => {\n  console.log(`Now running: ${details.module} ${details.name}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TAP Reporter via QUnit.config in JavaScript\nDESCRIPTION: Shows how to enable the TAP reporter using QUnit.config after QUnit has been loaded, allowing for dynamic configuration in JavaScript environments.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/tap.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.reporters.tap = true;\n```\n\n----------------------------------------\n\nTITLE: Adding QUnit Badge in HTML\nDESCRIPTION: HTML markup for embedding the 'Tested with QUnit' badge with a link to the QUnit homepage\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/badge.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://qunitjs.com/\"><img src=\"https://qunitjs.com/testedwith.svg\" alt=\"Tested with QUnit\"></a>\n```\n\n----------------------------------------\n\nTITLE: Basic QUnit Assertion Example in JavaScript\nDESCRIPTION: A simple QUnit test that demonstrates how QUnit shows stack traces for failed assertions, with the trace pointing directly to the line where the assertion occurs.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2025-01-19-stacktrace-cleaner.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('banana', function (assert) {\n  const actual = 'This is actual.';\n  assert.strictEqual(actual, 'This is expected.');\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Output with Regex Filter\nDESCRIPTION: Test execution output in TAP format showing two passing tests that match the regex filter pattern. The output includes test counts and final statistics for passed, skipped, todo and failed tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-filter-regex-exclude.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 filter > foo test\nok 2 filter > Bar test\n1..2\n# pass 2\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Logging JSON Objects from QUnit Events in Console\nDESCRIPTION: Example output of the console reporter, showing JSON objects for various QUnit events such as runStart, testStart, testEnd, and runEnd.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/console.md#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nrunStart {…}\ntestStart {…}\ntestEnd {…}\ntestStart {…}\ntestEnd {…}\nrunEnd {…}\n```\n\n----------------------------------------\n\nTITLE: QUnit Warning Message for assert.step() and assert.expect() Usage\nDESCRIPTION: This snippet shows a warning message that QUnit 2.x displays when using both assert.expect() and assert.step() with assert.verifySteps() in the same test. It indicates a change in behavior for QUnit 3.0 and suggests solutions.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/countStepsAsOne.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCounting each assert.step() for assert.expect() is changing\nin QUnit 3.0. Omit assert.expect() from tests that use assert.step(),\nor enable QUnit.config.countStepsAsOne to prepare for the upgrade.\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox Control to QUnit Toolbar\nDESCRIPTION: Example of adding a checkbox control to toggle between minified and unminified source files. The checkbox state can be accessed via QUnit.urlParams.min.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/urlConfig.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.urlConfig.push({\n  id: 'min',\n  label: 'Minified source',\n  tooltip: 'Load minified source files instead of the regular unminified ones.'\n});\n```\n\n----------------------------------------\n\nTITLE: Legacy Conditional Testing Approaches\nDESCRIPTION: Demonstrates legacy approaches for conditional testing in QUnit prior to version 2.22. These techniques use ternary operators or dynamic property access to achieve conditional testing functionality.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/test.if.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(typeof document !== 'undefined' ? QUnit.test : QUnit.skip)('example', function (assert) {\n  assert.true(true);\n});\n\nQUnit[typeof document !== 'undefined' ? 'test' : 'skip']('example', function (assert) {\n  assert.strue(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Reporter via Global Preconfig\nDESCRIPTION: Sets a global configuration variable before loading QUnit to disable the HTML Reporter functionality even when the requisite DOM element exists.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/html.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nqunit_config_reporters_html = false;\n```\n\n----------------------------------------\n\nTITLE: Updating Callback Registration in QUnit 2\nDESCRIPTION: Shows how to update the callback registration method from property assignment to function calls in QUnit 2.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.log(function (results) {\n  console.log(results);\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Global Hook Execution Order\nDESCRIPTION: This snippet displays the detailed execution order of before and after hooks at global, module, and nested context levels. It demonstrates how QUnit manages hook execution across different test nesting levels.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/hooks-global-order.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# stderr\nHOOK: A1 @ global beforeEach-1\nHOOK: A1 @ global beforeEach-2\nHOOK: A1 @ global afterEach-2\nHOOK: A1 @ global afterEach-1\nHOOK: B1 @ B before\nHOOK: B1 @ global beforeEach-1\nHOOK: B1 @ global beforeEach-2\nHOOK: B1 @ B beforeEach\nHOOK: B1 @ B afterEach\nHOOK: B1 @ global afterEach-2\nHOOK: B1 @ global afterEach-1\nHOOK: B2 @ global beforeEach-1\nHOOK: B2 @ global beforeEach-2\nHOOK: B2 @ B beforeEach\nHOOK: B2 @ B afterEach\nHOOK: B2 @ global afterEach-2\nHOOK: B2 @ global afterEach-1\nHOOK: BC1 @ BC before\nHOOK: BC1 @ global beforeEach-1\nHOOK: BC1 @ global beforeEach-2\nHOOK: BC1 @ B beforeEach\nHOOK: BC1 @ BC beforeEach\nHOOK: BC1 @ BC afterEach\nHOOK: BC1 @ B afterEach\nHOOK: BC1 @ global afterEach-2\nHOOK: BC1 @ global afterEach-1\nHOOK: BC2 @ global beforeEach-1\nHOOK: BC2 @ global beforeEach-2\nHOOK: BC2 @ B beforeEach\nHOOK: BC2 @ BC beforeEach\nHOOK: BC2 @ BC afterEach\nHOOK: BC2 @ B afterEach\nHOOK: BC2 @ global afterEach-2\nHOOK: BC2 @ global afterEach-1\nHOOK: BCD1 @ BCD before\nHOOK: BCD1 @ global beforeEach-1\nHOOK: BCD1 @ global beforeEach-2\nHOOK: BCD1 @ B beforeEach\nHOOK: BCD1 @ BC beforeEach\nHOOK: BCD1 @ BCD beforeEach\nHOOK: BCD1 @ BCD afterEach\nHOOK: BCD1 @ BC afterEach\nHOOK: BCD1 @ B afterEach\nHOOK: BCD1 @ global afterEach-2\nHOOK: BCD1 @ global afterEach-1\nHOOK: BCD1 @ BCD after\nHOOK: BCD1 @ BC after\nHOOK: BCD1 @ B after\n```\n\n----------------------------------------\n\nTITLE: TAP Output for Failed QUnit Test - Missing Assertions\nDESCRIPTION: Test output showing a failed test case where assertions were expected but none were executed. Includes TAP version, test result, error message, stack trace, and test summary statistics.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/assert-expect-no-assertions.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 no assertions\n  ---\n  message: Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.\n  severity: failed\n  stack: |\n        at /qunit/test/cli/fixtures/assert-expect-no-assertions.js:1:7\n        at internal\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n```\n\n----------------------------------------\n\nTITLE: QUnit 3.0 HTML Structure\nDESCRIPTION: The updated HTML structure generated by QUnit's HTML Reporter for version 3.0 and above, featuring a more structured layout with nested elements.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/browser.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"qunit\">\n  <div id=\"qunit-header\">\n    <h1>…</h1>\n    <div id=\"qunit-userAgent\">…</div>\n  </div>\n  <div id=\"qunit-toolbar\">\n    <div id=\"qunit-banner\"></div>\n    <div id=\"qunit-testrunner-toolbar\"></div>\n    <div id=\"qunit-testresult\"></div>\n  </div>\n  <ol id=\"qunit-tests\"></ol>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting the QUnit Test Runner in JavaScript\nDESCRIPTION: Call QUnit.start() to manually start the test runner. This is typically only needed in custom test runners or when autostart is disabled and test files are loaded asynchronously.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/start.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.start();\n```\n\n----------------------------------------\n\nTITLE: Alternative Assertion Method for Exception Testing\nDESCRIPTION: Alias method for testing thrown exceptions, providing an alternative to the throws assertion.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2014-12-03-qunit-1-16-0.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nassert.raises()\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Reporter via Runtime Config\nDESCRIPTION: Configures QUnit to disable the HTML Reporter after QUnit has been loaded, using the config API.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/html.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.reporters.html = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring maxDepth in QUnit (Markdown)\nDESCRIPTION: Demonstrates the type and default value of the QUnit.config.maxDepth property. It is a number with a default value of 5, and can be set to 0 for infinite depth.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/maxDepth.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<tr>\n  <th>type</th>\n  <td markdown=\"span\">`number`</td>\n</tr>\n<tr>\n  <th>default</th>\n  <td markdown=\"span\">`5`</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.start in CommonJS Environments\nDESCRIPTION: Example of the corrected internal start() call using QUnit.start() to ensure compatibility with CommonJS runtimes like Node.js\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2011-11-24-qunit-1-2-0.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.start()\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Async Tests with Thrown Errors\nDESCRIPTION: This TAP output shows the results of running QUnit tests with asynchronous operations that throw errors. It includes three failed tests: 'throw early', 'throw late', and 'test with bad thenable'. Each test failure provides an error message, stack trace, and location of the error.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/async-test-throw.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"async-test-throw.js\"]\n\nTAP version 13\nnot ok 1 throw early\n  ---\n  message: \"Promise rejected during \\\"throw early\\\": boo\"\n  severity: failed\n  stack: |\n    Error: boo\n        at /qunit/test/cli/fixtures/async-test-throw.js:2:9\n  ...\nnot ok 2 throw late\n  ---\n  message: \"Promise rejected during \\\"throw late\\\": boo\"\n  severity: failed\n  stack: |\n    Error: boo\n        at /qunit/test/cli/fixtures/async-test-throw.js:8:9\n  ...\nnot ok 3 test with bad thenable\n  ---\n  message: \"Promise rejected during \\\"test with bad thenable\\\": boo\"\n  severity: failed\n  stack: |\n    Error: boo\n        at /qunit/test/cli/fixtures/async-test-throw.js:16:13\n  ...\n1..3\n# pass 0\n# skip 0\n# todo 0\n# fail 3\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit in Browser Environment\nDESCRIPTION: Example of setting up QUnit configuration in an HTML file with basic structure and configuration override for reorder option.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/index.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>QUnit</title>\n  <link rel=\"stylesheet\" href=\"/lib/qunit/qunit.css\">\n</head>\n<body>\n  <div id=\"qunit\"></div>\n  <script src=\"/lib/qunit/qunit.js\"></script>\n  <script>\n  QUnit.config.reorder = false;\n  </script>\n  <script src=\"/src/app.js\"></script>\n  <script src=\"/test/bootstrap.js\"></script>\n  <script src=\"/test/app.test.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: QUnit 2.3.1 Release Notes in Markdown\nDESCRIPTION: Markdown formatted changelog documenting bug fixes and improvements in QUnit 2.3.1, including assertion handling after async operations, proper error throwing for async callbacks, and memory leak fixes.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2017-04-10-qunit-2-3-1.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: post\ntitle: \"QUnit 2.3.1 Released: Bug fixes\"\nauthor: trentmwillis\ntags:\n- release\n---\n\n## Changelog\n\n* Assert: Allow assertions after async.\n* Assert: Throw if async callback invoked after test finishes.\n* Core: Ensure assertions occur while test is running.\n* Core: Fix test instance memory leak. [#1138](https://github.com/qunitjs/qunit/issues/1138)\n* Core: Slim assertions after reporting them.\n\n## See also\n\n* [Git tag: 2.3.1](https://github.com/qunitjs/qunit/releases/tag/2.3.1)\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit Test Filter with Substring\nDESCRIPTION: Demonstrates using a case-insensitive substring filter to match test names containing 'foo'.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/filter.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.filter = 'foo';\n```\n\n----------------------------------------\n\nTITLE: Enabling TAP Reporter via Preconfig in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable the TAP reporter in the browser using the preconfig method. It sets a global variable before loading qunit.js.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/reporters.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Set as global variable before loading qunit.js\nqunit_config_reporters_tap = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Deprecated QUnit Methods Page\nDESCRIPTION: This YAML snippet defines the front matter for a documentation page about deprecated QUnit methods. It sets the layout, group, title, and redirect information for the page.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/deprecated.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: group\ngroup: deprecated\ntitle: Deprecated methods\nredirect_from:\n  - \"/deprecated/\"\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Internal Start Call in QUnit Core\nDESCRIPTION: Fix internal `start()` call to use `QUnit.start()` for compatibility with CommonJS runtimes like Node.js where the global is not exported.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/History.md#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.start()\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: Test Anything Protocol (TAP) output showing results of two QUnit tests. One test failed due to exceeding the 10ms timeout limit, while the second test passed successfully. The output includes test counts and final exit code.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/timeout.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 timeout > first\n  ---\n  message: Test took longer than 10ms; test timed out.\n  severity: failed\n  ...\nok 2 timeout > second\n1..2\n# pass 1\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error: Unexpected test after runEnd in QUnit\nDESCRIPTION: This snippet shows an error message that occurs when new tests are defined after QUnit has finished its run. It's used to illustrate the importance of properly configuring autostart and calling QUnit.start() when loading test files asynchronously.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/autostart.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Unexpected test after runEnd.\n```\n\n----------------------------------------\n\nTITLE: Downloading QUnit Files via Terminal\nDESCRIPTION: Commands to download the latest QUnit JavaScript and CSS files using curl and save them in your project directory.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/intro.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o qunit.css 'https://code.jquery.com/qunit/qunit-2.24.1.css'\ncurl -o qunit.js 'https://code.jquery.com/qunit/qunit-2.24.1.js'\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit Test Filter with Case-Insensitive Regex\nDESCRIPTION: Shows how to use a case-insensitive regular expression filter with the 'i' flag.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/filter.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.config.filter = '/foo/i';\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Output with Source Map\nDESCRIPTION: Test Anything Protocol (TAP) formatted output from QUnit test execution. Shows results of two tests with one passing and one failing, including stack trace with source map applied. Includes test summary counts and exit code.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/_sourcemap.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 Example > good\nnot ok 2 Example > bad\n  ---\n  message: failed\n  severity: failed\n  actual  : false\n  expected: true\n  stack: |\n        at /qunit/test/cli/fixtures/sourcemap/source.js:7:16\n  ...\n1..2\n# pass 1\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Replacing QUnit.jsDump with QUnit.dump in QUnit 2\nDESCRIPTION: Shows how to update custom reporter code to use QUnit.dump.parse() instead of QUnit.jsDump.parse() in QUnit 2.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.log(function (obj) {\n  const actual = QUnit.dump.parse(obj.actual);\n  const expected = QUnit.dump.parse(obj.expected);\n  sendMessage(obj.result, actual, expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking setTimeout Availability in QUnit Core\nDESCRIPTION: Check if setTimeout is available before attempting to delay running the next task, addressing issue #160.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/History.md#2025-04-12_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (typeof setTimeout !== \"undefined\") {\n  // Delay running the next task\n}\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Execution Output in TAP Format\nDESCRIPTION: Shows the execution results of QUnit tests in TAP format, including 3 test cases with 2 passes and 1 failure. Includes detailed failure information, test counts, and memory usage data from both early and late runEnd events.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/event-runEnd-memory.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 First > A\nnot ok 2 First > B\n  ---\n  message: failed\n  severity: failed\n  actual  : false\n  expected: true\n  stack: |\n        at /qunit/test/cli/fixtures/event-runEnd-memory.js:15:16\n  ...\nok 3 Second > C\n1..3\n# pass 2\n# skip 0\n# todo 0\n# fail 1\n# early runEnd total=3 passed=2 failed=1\n# late runEnd total=3 passed=2 failed=1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Including QUnit in HTML\nDESCRIPTION: HTML code to include QUnit CSS and JavaScript files in a web page for browser-based testing.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/intro.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"./node_modules/qunit/qunit/qunit.css\">\n<script src=\"./node_modules/qunit/qunit/qunit.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Tests with Istanbul Coverage\nDESCRIPTION: Command to execute QUnit tests with Istanbul code coverage integration. This will run the test suite and generate coverage metrics that are displayed in the console.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/demos/nyc/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Parameters with QUnit.urlParams\nDESCRIPTION: Demonstrates how to access URL parameters using QUnit.urlParams in a browser environment. Shows different parameter types including boolean flags, single values, and arrays of values parsed from the query string.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.urlParams.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// test/index.html?foo&bar=1&thing=xx&thing=yyy\n\nQUnit.urlParams.foo; // true\nQUnit.urlParams.bar; // \"1\"\nQUnit.urlParams.thing; // [ \"xx\", \"yyy\" ]\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple QUnit Test Files via Command Line\nDESCRIPTION: This command runs QUnit tests on two JavaScript files, 'basic-one.js' and 'basic-two.js'. The output is in TAP format, showing the results of three passing tests across both files.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/_load-multiple-files.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# name: load multiple files\n# command: [\"qunit\",\"basic-one.js\",\"basic-two.js\"]\n\nTAP version 13\nok 1 Single > has a test\nok 2 Double > has a test\nok 3 Double > has another test\n1..3\n# pass 3\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit CLI Node Version Requirement\nDESCRIPTION: Updated Node.js version requirement specification, requiring Node 10+ and removing support for Node 6 and 8.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2020-08-16-qunit-2-11-0.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNode 10+\n```\n\n----------------------------------------\n\nTITLE: Setting Default 'expected' in asyncTest Function\nDESCRIPTION: Set the default 'expected' value to null in `asyncTest()`, mirroring the behavior in `test()`.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/History.md#2025-04-12_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction asyncTest(name, expected, callback) {\n  if (arguments.length === 2) {\n    callback = expected;\n    expected = null;\n  }\n  // Rest of the function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing test execution results. Includes error details for a failed test with stack trace, and summary statistics showing 1 pass and 1 fail.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/drooling-done.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 Test A\n  ---\n  message: |+\n    Died on test #2: this is an intentional error\n        at /qunit/test/cli/fixtures/drooling-done.js:5:7\n        at internal\n  severity: failed\n  stack: |\n    Error: this is an intentional error\n        at /qunit/test/cli/fixtures/drooling-done.js:8:9\n  ...\nok 2 Test B\n1..2\n# pass 1\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring failOnZeroTests in QUnit\nDESCRIPTION: Reference to the new failOnZeroTests configuration option in QUnit 2.16.0, which allows the test suite to fail when no tests are run.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2021-06-06-qunit-2-16-0.md#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`failOnZeroTests`](https://qunitjs.com/api/config/failOnZeroTests/)\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Tests with npm in a Grunt-based Project\nDESCRIPTION: Demonstrates the command to execute QUnit tests using npm in a project that utilizes Grunt for task automation. This will trigger the Grunt QUnit task configuration defined in the project.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/demos/grunt-contrib-qunit/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Basic Value Formatter in QUnit\nDESCRIPTION: Simple example showing how to create a custom formatter for document objects in QUnit dumps.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.dump.setParser.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.dump.setParser('document', function (doc) {\n  return '[Document ' + doc.location.href + ']';\n});\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Test for Module B Configuration\nDESCRIPTION: This snippet shows the command to run a QUnit test for a specific module configuration. It executes the 'config-module.js' test file using the QUnit test runner.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-module.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqunit config-module.js\n```\n\n----------------------------------------\n\nTITLE: QUnit.begin() API Reference with moduleId Addition\nDESCRIPTION: Reference to the QUnit.begin() callback API that now includes the moduleId property in its details object in QUnit 2.19.0.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2022-04-28-qunit-2-19-0.md#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`QUnit.begin()`](https://qunitjs.com/api/callbacks/QUnit.begin/)\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Test with Mismatched Assertion Count\nDESCRIPTION: This snippet shows the command used to run a QUnit test file that demonstrates a failure due to mismatched assertion count. The test file 'assert-expect-failure.js' is executed using the 'qunit' command.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/assert-expect-failure.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"assert-expect-failure.js\"]\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Test with TAP Output Format\nDESCRIPTION: Test Anything Protocol (TAP) output from a QUnit test execution showing a failed test that exceeded the timeout limit of 3000ms. The output includes test summary and exit code information.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/hanging-test.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 hanging\n  ---\n  message: Test took longer than 3000ms; test timed out.\n  severity: failed\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Manually Initializing TAP Reporter in QUnit\nDESCRIPTION: Demonstrates how to manually initialize the TAP reporter using the QUnit.reporters.tap.init method, available since QUnit version 2.16.0.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/tap.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.reporters.tap.init(QUnit);\n```\n\n----------------------------------------\n\nTITLE: Example QUnit Test Output with Testem\nDESCRIPTION: Shows the format of test results when running QUnit tests with Testem. The output includes test status, browser information, execution time, and a summary of pass/fail statistics.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/demos/testem/README.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nok 1 Firefox - [0 ms] - add: two numbers\n\n1..1\n# tests 1\n# pass  1\n# skip  0\n# todo  0\n# fail  0\n\n# ok\n```\n\n----------------------------------------\n\nTITLE: Using assert.async() for Asynchronous Testing in QUnit\nDESCRIPTION: New assertion method for handling asynchronous tests in QUnit. Returns a callback function that must be called to signal that an async test is complete.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2014-12-03-qunit-1-16-0.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nassert.async()\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: This snippet shows the Test Anything Protocol (TAP) output from the QUnit test execution. It includes the test results, indicating 3 passing tests and no skipped, todo, or failed tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/perf-mark.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: TAP\nCODE:\n```\nTAP version 13\nok 1 foo\nok 2 bar\nok 3 getEntries\n1..3\n# pass 3\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Adding Window.onerror Handler in HTML Reporter\nDESCRIPTION: Add a window.onerror handler to make uncaught errors fail the tests, addressing issue #134.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/History.md#2025-04-12_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.onerror = function(message, file, line) {\n  QUnit.test(\"Uncaught error: \" + message, function(assert) {\n    assert.ok(false, message + \" in \" + file + \" on line \" + line);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Failure Output\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing a test failure where an error was thrown after using assert.async(). The error occurred at line 4 of the test file.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/uncaught-error-after-assert-async.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nnot ok 1 contains a hard error after using assert.async()\n  ---\n  message: |+\n    Died on test #2: expected error thrown in test\n        at /qunit/test/cli/fixtures/uncaught-error-after-assert-async.js:1:7\n        at internal\n  severity: failed\n  stack: |\n    Error: expected error thrown in test\n        at /qunit/test/cli/fixtures/uncaught-error-after-assert-async.js:4:9\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Reading QUnit Test Results in TAP Format\nDESCRIPTION: Test output in TAP (Test Anything Protocol) format showing results from QUnit test execution. Shows 3 passing tests with hierarchical test names and a summary of test outcomes.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/hooks-global-context.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 A > A1\nok 2 A > AB > AB1\nok 3 B\n1..3\n# pass 3\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Output for Invalid Async Module\nDESCRIPTION: TAP format test output showing a failed test due to an invalid attempt to use an async callback in QUnit.module(). The error indicates that async module setup must use hooks rather than returning a promise directly.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/async-module-error-promise.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 global failure\n  ---\n  message: |+\n    Error: Failed to load file async-module-error-promise.js\n    TypeError: QUnit.module() callback must not be async. For async module setup, use hooks. https://qunitjs.com/api/QUnit/module/#hooks\n  severity: failed\n  stack: |\n    TypeError: QUnit.module() callback must not be async. For async module setup, use hooks. https://qunitjs.com/api/QUnit/module/#hooks\n        at /qunit/test/cli/fixtures/async-module-error-promise.js:1:7\n        at internal\n  ...\nBail out! Error: Failed to load file async-module-error-promise.js\nok 2 module manually returning a promise > has a test\n1..2\n# pass 1\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Enabling TAP Reporter via Environment Variable in QUnit\nDESCRIPTION: Demonstrates how to enable the TAP reporter declaratively in a browser environment or custom Node.js runner by setting a configuration variable before loading QUnit.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/tap.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nqunit_config_reporters_tap = true;\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Test with Zero Assertions\nDESCRIPTION: This snippet shows the command used to run a QUnit test file named 'zero-assertions.js'. It demonstrates how to execute a QUnit test from the command line.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/zero-assertions.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"zero-assertions.js\"]\n```\n\n----------------------------------------\n\nTITLE: Flat Preconfig in Browser Environment\nDESCRIPTION: Example of using flat preconfig approach in browser environment using global variables to configure QUnit before it loads.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/index.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\nqunit_config_hidepassed = true;\nqunit_config_seed = 'd84af39036';\nqunit_config_testtimeout = 1000;\n</script>\n```\n\n----------------------------------------\n\nTITLE: TAP Output with Uncaught Error\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing a test run that encounters an uncaught error. The output includes one passing test followed by a bail out due to an error 'No dice' with stack trace information.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/uncaught-error-callbacks-done.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 module1 > test1\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\nBail out! Error: No dice\n  ---\n  message: Error: No dice\n  severity: failed\n  stack: |\n    Error: No dice\n        at /qunit/test/cli/fixtures/uncaught-error-callbacks-done.js:2:9\n        at qunit.js\n        at internal\n  ...\n```\n\n----------------------------------------\n\nTITLE: Verifying Git repository setup for QUnit release\nDESCRIPTION: Command to verify that the canonical QUnit repository is cloned (not a fork) by checking remote URLs.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -v\n# …\n# origin\tgit@github.com:qunitjs/qunit.git\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with Global Hooks\nDESCRIPTION: This snippet shows the command used to run QUnit tests and the resulting TAP output. It indicates that 6 tests passed successfully across different test modules and nested contexts.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/hooks-global-order.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"hooks-global-order.js\"]\n\nTAP version 13\nok 1 A1\nok 2 B > B1\nok 3 B > B2\nok 4 B > BC > BC1\nok 5 B > BC > BC2\nok 6 B > BC > BCD > BCD1\n1..6\n# pass 6\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with TAP Output\nDESCRIPTION: This snippet shows the command used to run QUnit tests and the resulting TAP (Test Anything Protocol) output. It indicates that 5 tests passed successfully across different modules.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/callbacks.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"callbacks.js\"]\n\nTAP version 13\nok 1 module1 > test1\nok 2 module1 > module2 > test1\nok 3 module1 > module3 > test1\nok 4 module1 > test2\nok 5 module1 > module4 > test1\n1..5\n# pass 5\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Testing QUnit Configuration Timeout in TAP Format\nDESCRIPTION: TAP-formatted test output showing a failed test due to timeout. The test exceeded the 10ms timeout limit configured in QUnit. The output includes test results summary showing 0 passes, 0 skips, 0 todos, and 1 failure.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-testTimeout.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 slow\n  ---\n  message: Test took longer than 10ms; test timed out.\n  severity: failed\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Enabling Console Reporter via QUnit CLI\nDESCRIPTION: Command to enable the console reporter using QUnit CLI, specifying the test directory.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/console.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nqunit --reporter console test/\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with 'only' Method\nDESCRIPTION: Command to run QUnit tests using the 'only' method, which allows focusing on specific tests. The command executes the 'only-test.js' file using QUnit.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/only-test.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqunit only-test.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Assertions with assert.pushResult() in QUnit 2\nDESCRIPTION: Demonstrates how to implement custom assertions using assert.pushResult() instead of QUnit.push() in QUnit 2.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.assert.mod2 = function (value, expected, message) {\n  const actual = value % 2;\n  this.pushResult({ result: actual === expected, actual, expected, message });\n};\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Test with Specific Configuration\nDESCRIPTION: This command runs QUnit with a specific test file that likely tests behavior related to unhandled promise rejections when 'notrycatch' is configured.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-notrycatch-test-rejection.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# command: [\"qunit\", \"config-notrycatch-test-rejection.js\"]\n```\n\n----------------------------------------\n\nTITLE: QUnit Grunt Task Output Example\nDESCRIPTION: Shows sample output from running the Grunt QUnit task, indicating a successful test execution for test/example.html.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/demos/grunt-contrib-qunit/README.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRunning \"qunit:example\" (qunit) task\nTesting test/example.html ..OK\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: This snippet displays the Test Anything Protocol (TAP) output for a QUnit test run. It shows test results including pass, skip, and todo statuses, along with detailed information for failing tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/only-module-flat.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nnot ok 1 module B > test B # TODO\n  ---\n  message: not implemented yet\n  severity: todo\n  actual  : false\n  expected: true\n  stack: |\n        at /qunit/test/cli/fixtures/only-module-flat.js:8:14\n  ...\nok 2 module B > test C # SKIP\nok 3 module B > test D\n1..4\n# pass 2\n# skip 1\n# todo 1\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Tests with Glob Pattern\nDESCRIPTION: Example of TAP-formatted test output from QUnit test runner. Shows results of executing tests that match the glob pattern 'glob/**/*-test.js', with 2 passing tests and no failures.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/_load-glob.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\n# name: load glob pattern\n# command: [\"qunit\",\"glob/**/*-test.js\"]\n\nTAP version 13\nok 1 A-Test > derp\nok 2 Nested-Test > herp\n1..2\n# pass 2\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: TAP Test Output with Async Failure\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing test results with an async callback error. The output includes 2 tests where an async callback from Test A was incorrectly handled during Test B's execution.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/drooling-extra-done.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 Test A\nnot ok 2 Test B\n  ---\n  message: |+\n    Died on test #2: Unexpected release of async pause during a different test.\n    > Test: Test A [async #1]\n        at /qunit/test/cli/fixtures/drooling-extra-done.js:13:7\n        at internal\n  severity: failed\n  stack: |\n    Error: Unexpected release of async pause during a different test.\n    > Test: Test A [async #1]\n  ...\n1..2\n# pass 1\n# skip 0\n# todo 0\n# fail 1\n```\n\n----------------------------------------\n\nTITLE: Handling expect(0) in QUnit Assertions\nDESCRIPTION: Handle `expect(0)` as expected, causing a test to fail if assertions are made when none were expected.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/History.md#2025-04-12_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexpect(0);\nok(true, \"foo\"); // This will cause the test to fail\n```\n\n----------------------------------------\n\nTITLE: Displaying QUnit Test Results in TAP Format\nDESCRIPTION: This snippet shows the TAP output for a QUnit test run. It includes test results, error messages, and summary statistics. The test fails because the expected number of assertions was not defined using expect().\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-requireExpects.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nnot ok 1 passing test\n  ---\n  message: Expected number of assertions to be defined, but expect() was not called.\n  severity: failed\n  stack: |\n        at /qunit/test/cli/fixtures/config-requireExpects.js:3:7\n        at internal\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Using assert.expect() Instead of Expected Argument in QUnit 2\nDESCRIPTION: Demonstrates how to replace the expected argument in QUnit.test() with assert.expect() in QUnit 2.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('addition', function (assert) {\n  assert.expect(1);\n  assert.equal(add(2, 3), 5);\n});\n```\n\n----------------------------------------\n\nTITLE: TAP Test Output for QUnit Global Variable Test\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing a failed test case that checks for the deletion of a global variable named 'dummyGlobal'. The test is part of QUnit's config.noglobals functionality verification.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-noglobals-remove.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 deletes global var\n  ---\n  message: Deleted global variable(s): dummyGlobal\n  severity: failed\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Execution Callback Log\nDESCRIPTION: This snippet displays the detailed callback log of the QUnit test execution. It shows the order of callbacks fired during the test run, including module and test lifecycle hooks, providing insight into the test execution flow.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/callbacks.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# stderr\nCALLBACK: begin1\nCALLBACK: begin2\nCALLBACK: moduleStart1\nCALLBACK: moduleStart2\nCALLBACK: testStart1\nCALLBACK: testStart2\nCALLBACK: module1 > before\nCALLBACK: module1 > beforeEach\nTEST: module1 > test1\nCALLBACK: log1\nCALLBACK: log2\nCALLBACK: module1 > afterEach\nCALLBACK: testDone1\nCALLBACK: testDone2\nCALLBACK: moduleStart1\nCALLBACK: moduleStart2\nCALLBACK: testStart1\nCALLBACK: testStart2\nCALLBACK: module2 > before\nCALLBACK: module1 > beforeEach\nCALLBACK: module2 > beforeEach\nTEST: module2 > test1\nCALLBACK: log1\nCALLBACK: log2\nCALLBACK: module2 > afterEach\nCALLBACK: module1 > afterEach\nCALLBACK: module2 > after\nCALLBACK: testDone1\nCALLBACK: testDone2\nCALLBACK: moduleDone1\nCALLBACK: moduleDone2\nCALLBACK: moduleStart1\nCALLBACK: moduleStart2\nCALLBACK: testStart1\nCALLBACK: testStart2\nCALLBACK: module3 > before\nCALLBACK: module1 > beforeEach\nCALLBACK: module3 > beforeEach\nTEST: module3 > test1\nCALLBACK: log1\nCALLBACK: log2\nCALLBACK: module3 > afterEach\nCALLBACK: module1 > afterEach\nCALLBACK: module3 > after\nCALLBACK: testDone1\nCALLBACK: testDone2\nCALLBACK: moduleDone1\nCALLBACK: moduleDone2\nCALLBACK: testStart1\nCALLBACK: testStart2\nCALLBACK: module1 > beforeEach\nTEST: module1 > test2\nCALLBACK: log1\nCALLBACK: log2\nCALLBACK: module1 > afterEach\nCALLBACK: testDone1\nCALLBACK: testDone2\nCALLBACK: moduleStart1\nCALLBACK: moduleStart2\nCALLBACK: testStart1\nCALLBACK: testStart2\nCALLBACK: module4 > before\nCALLBACK: module1 > beforeEach\nCALLBACK: module4 > beforeEach\nTEST: module4 > test1\nCALLBACK: log1\nCALLBACK: log2\nCALLBACK: module4 > afterEach\nCALLBACK: module1 > afterEach\nCALLBACK: module4 > after\nCALLBACK: module1 > after\nCALLBACK: testDone1\nCALLBACK: testDone2\nCALLBACK: moduleDone1\nCALLBACK: moduleDone2\nCALLBACK: moduleDone1\nCALLBACK: moduleDone2\nCALLBACK: done1\nCALLBACK: done2\n```\n\n----------------------------------------\n\nTITLE: Istanbul Coverage Report Output Example\nDESCRIPTION: Example of the TAP test output and Istanbul coverage report displayed after running tests. It shows test results followed by a coverage summary table with statistics for statements, branches, functions, and lines.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/demos/nyc/README.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTAP version 13\nok 1 add > two numbers\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n--------------|---------|----------|---------|---------|-------------------\nFile          | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n--------------|---------|----------|---------|---------|-------------------\nAll files     |   85.71 |      100 |      50 |   85.71 |\n nyc          |     100 |      100 |     100 |     100 |\n  index.js    |     100 |      100 |     100 |     100 |\n nyc/src      |      75 |      100 |      50 |      75 |\n  add.js      |     100 |      100 |     100 |     100 |\n  subtract.js |      50 |      100 |       0 |      50 | 2\n--------------|---------|----------|---------|---------|-------------------\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: Test Anything Protocol (TAP) output showing results of filtered test execution with one passing test and no failures, skips, or todos\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/filter-modulename.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 Single > has a test\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Failure Output in TAP Format\nDESCRIPTION: Test output showing a failed test with callback rejection error in TAP (Test Anything Protocol) format. Includes error details, stack trace, and exit status.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/callbacks-rejected.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 global failure\n  ---\n  message: Error: begin\n  severity: failed\n  stack: |\n    Error: begin\n        at /qunit/test/cli/fixtures/callbacks-rejected.js:8:25\n        at qunit.js\n        at internal\n  ...\nBail out! Error: begin\n\n```\n\n----------------------------------------\n\nTITLE: Commit Message Structure Example in QUnit Contribution Guidelines\nDESCRIPTION: Demonstrates the expected format for commit messages when contributing to QUnit. The structure includes a component prefix, short subject line, optional details in the message body, and footer with reference links.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nComponent: Short subject line about what is changing\n\nAdditional details about the commit are placed after a new line\nin the commit message body. That's this paragraph here.\n\nThe last lines are the footer, which is reserved for any \"Ref\", \"Fixes\"\nor \"Closes\" commands (one per line).\n\nFixes https://github.com/qunitjs/qunit/issues/1000.\n```\n\n----------------------------------------\n\nTITLE: TAP Output for Failed QUnit Test\nDESCRIPTION: This snippet displays the TAP (Test Anything Protocol) output for a failed QUnit test. It shows that one test failed because 2 assertions were expected, but only 1 was run. The output includes the error message, stack trace, and summary of test results.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/assert-expect-failure.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nnot ok 1 failing test\n  ---\n  message: Expected 2 assertions, but 1 were run\n  severity: failed\n  stack: |\n        at /qunit/test/cli/fixtures/assert-expect-failure.js:1:7\n        at internal\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Using Module Scope in QUnit 2\nDESCRIPTION: Demonstrates the use of module scope introduced in QUnit 1.20 for simpler sharing of variables and associating tests with modules.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.module('router', function (hooks) {\n  let router;\n\n  hooks.beforeEach(() => {\n    router = new Router();\n  });\n  hooks.afterEach(() => {\n    router.destroy();\n  });\n\n  QUnit.test('add', function (assert) {\n    assert.true(router.add('/about'));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: TAP Output for Failed assert.throws() Test\nDESCRIPTION: TAP-formatted test output showing a failed assertion where an Error with message 'Match me with a pattern' did not match the expected pattern '/incorrect pattern/'. The test was executed using QUnit's CLI runner.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/assert-throws-failure.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 Throws match > bad\n  ---\n  message: match error\n  severity: failed\n  actual  : Error: Match me with a pattern\n  expected: \"/incorrect pattern/\"\n  stack: |\n        at /qunit/test/cli/fixtures/assert-throws-failure.js:3:12\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Callback Sequence\nDESCRIPTION: Shows the sequence of QUnit callbacks triggered during test execution, including module lifecycle events (begin, moduleStart, testStart, testDone, moduleDone) for nested modules.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/callbacks-promises.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\n# stderr\nCALLBACK: begin\nCALLBACK: begin2\nCALLBACK: moduleStart\nCALLBACK: moduleStart\nCALLBACK: testStart - test1\nCALLBACK: testDone - test1\nCALLBACK: moduleDone - module1 > nestedModule1\nCALLBACK: testStart - test2\nCALLBACK: testDone - test2\nCALLBACK: moduleStart\nCALLBACK: testStart - test3\nCALLBACK: testDone - test3\nCALLBACK: moduleDone - module1 > nestedModule2\nCALLBACK: moduleDone - module1\nCALLBACK: done\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Tests with Testem using npm\nDESCRIPTION: Executes QUnit tests using Testem through the npm test command. This is the standard way to run tests in the QUnit project.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/demos/testem/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: TAP Output for QUnit Test with Zero Assertions\nDESCRIPTION: This snippet displays the Test Anything Protocol (TAP) output for a QUnit test run. It shows a single passing test with no assertions, including the TAP version, test result, and summary statistics.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/zero-assertions.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nok 1 Zero assertions > has a test\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Tests with TAP Output\nDESCRIPTION: This snippet shows the command used to run QUnit tests and the resulting TAP output. It includes test results, error messages, and stack traces for failed tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/assert-expect-failure-step.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"assert-expect-failure-step.js\"]\n\nTAP version 13\nok 1 passing [once]\nok 2 passing [twice]\nnot ok 3 wrong [a little off]\n  ---\n  message: Expected 2 assertions, but 1 were run\n  severity: failed\n  stack: |\n        at /qunit/test/cli/fixtures/assert-expect-failure-step.js:22:7\n        at internal\n  ...\nnot ok 4 wrong [way off]\n  ---\n  message: Expected 5 assertions, but 1 were run\n  severity: failed\n  stack: |\n        at /qunit/test/cli/fixtures/assert-expect-failure-step.js:30:7\n        at internal\n  ...\nnot ok 5 previously passing [once]\n  ---\n  message: |+\n    Expected 4 assertions, but 2 were run.\n    It looks like you are upgrading from QUnit 2. Steps no longer count as separate assertions. https://qunitjs.com/api/assert/expect/\n  severity: failed\n  stack: |\n        at /qunit/test/cli/fixtures/assert-expect-failure-step.js:40:7\n        at internal\n  ...\nnot ok 6 previously passing [twice]\n  ---\n  message: |+\n    Expected 9 assertions, but 4 were run.\n    It looks like you are upgrading from QUnit 2. Steps no longer count as separate assertions. https://qunitjs.com/api/assert/expect/\n  severity: failed\n  stack: |\n        at /qunit/test/cli/fixtures/assert-expect-failure-step.js:49:7\n        at internal\n  ...\n1..6\n# pass 2\n# skip 0\n# todo 0\n# fail 4\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Using QUnit.load() in JavaScript\nDESCRIPTION: Example of calling the deprecated QUnit.load() method. This method was previously used to indicate when custom script loading was complete, but is no longer needed as of QUnit 2.1.1.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/load.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.load();\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Output for Multiple Done Calls\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing a QUnit test failure when an async callback is called multiple times. The error occurs in 'Test A' where an async pause was attempted to be released after it was already released.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/too-many-done-calls.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 Test A\n  ---\n  message: |+\n    Died on test #2: Tried to release async pause that was already released.\n    > Test: Test A [async #1]\n        at /qunit/test/cli/fixtures/too-many-done-calls.js:1:7\n        at internal\n  severity: failed\n  stack: |\n    Error: Tried to release async pause that was already released.\n    > Test: Test A [async #1]\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Updated QUnit Tests Using RegExp and Error Object\nDESCRIPTION: New recommended approaches using either a regular expression or Error object for error matching\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('add', function (assert) {\n  assert.throws(() => {\n    add();\n  }, /This is an error/, 'Fail if A is undefined');\n});\n\n// Or\n\nQUnit.test('add', function (assert) {\n  assert.throws(() => {\n    add();\n  }, new Error('This is an error'), 'Fail if A is undefined');\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Output Format\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing test results with 3 tests including pass, skip and todo statuses\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/events.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 Events > Nested > test1 # TODO\n  ---\n  message: failing assertion\n  severity: todo\n  actual  : false\n  expected: true\n  ...\nok 2 Events > test2\nok 3 Events > test3 # SKIP\n1..3\n# pass 1\n# skip 1\n# todo 1\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with module.only() for Nested Modules\nDESCRIPTION: This snippet shows the TAP output from running QUnit tests with module.only(). It demonstrates the behavior of nested modules, including todo and skipped tests. The output indicates 6 passing tests, 1 skipped test, and 1 todo test across multiple modules.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/only-module.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nnot ok 1 module B > Only this module should run > a todo test # TODO\n  ---\n  message: not implemented yet\n  severity: todo\n  actual  : false\n  expected: true\n  stack: |\n        at /qunit/test/cli/fixtures/only-module.js:16:18\n  ...\nok 2 module B > Only this module should run > implicitly skipped test # SKIP\nok 3 module B > Only this module should run > normal test\nok 4 module D > test D\nok 5 module E > module F > test F\nok 6 module E > test E\n1..8\n# pass 6\n# skip 1\n# todo 1\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Building and Testing QUnit with npm\nDESCRIPTION: Commands for building QUnit using npm and running the test suite. These commands should be executed in the project's root directory.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/demos/bundlers/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining QUnit.config.collapse Option in Markdown\nDESCRIPTION: This snippet defines the QUnit.config.collapse option using a markdown table. It specifies the option's type as boolean and its default value as true.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/collapse.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<tr>\n  <th>type</th>\n  <td markdown=\"span\">`boolean`</td>\n</tr>\n<tr>\n  <th>default</th>\n  <td markdown=\"span\">`true`</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: TAP-Formatted QUnit Test Output for Failed Promise Rejection Test\nDESCRIPTION: This snippet shows the Test Anything Protocol (TAP) formatted output from a QUnit test run. It includes details of a failed test due to an unhandled promise rejection, including error messages and stack trace.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-notrycatch-test-rejection.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nFOUND Unhandled Rejection: bad things happen\nnot ok 1 example > returns a rejected promise\n  ---\n  message: global failure: bad things happen\n  severity: failed\n  stack: |\n        at internal\n  ...\n  ---\n  message: Test took longer than 1000ms; test timed out.\n  severity: failed\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Running Subset of Benchmarks in Node.js\nDESCRIPTION: Command to run a specific subset of benchmarks (e.g., 'arrays') in a Node.js environment. This allows for targeted benchmarking.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/benchmark/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nqunit/test/benchmark$ node micro.js 'arrays'\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Results\nDESCRIPTION: Test Anything Protocol (TAP) output from QUnit test execution showing results from modules A through F, including nested module structures. Shows successful execution of 5 tests with detailed module scoping.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-moduleId.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 module A scoped > module C nested > test C1\nok 2 module D scoped > test D1\nok 3 module D scoped > module E nested > test E1\nok 4 module D scoped > test D2\nok 5 module F flat > test F1\n1..5\n# pass 5\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Output - Async Handler Error\nDESCRIPTION: Test output in TAP format showing a failed test case where an async callback was released outside the test context. The test initially passes but then bails out due to an unexpected async pause release.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/drooling-extra-done-outside.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 extra done scheduled outside any test\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\nBail out! Error: Unexpected release of async pause after tests finished.\n  ---\n  message: |+\n    Error: Unexpected release of async pause after tests finished.\n    > Test: extra done scheduled outside any test [async #1]\n  severity: failed\n  stack: |\n    Error: Unexpected release of async pause after tests finished.\n    > Test: extra done scheduled outside any test [async #1]\n        at qunit.js\n        at internal\n  ...\n```\n\n----------------------------------------\n\nTITLE: TAP Output for QUnit Tests\nDESCRIPTION: Test Anything Protocol (TAP) output showing the results of the QUnit tests. It indicates that 3 tests passed successfully with no skipped, todo, or failed tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/only-test.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: TAP\nCODE:\n```\nTAP version 13\nok 1 run this test\nok 2 all tests with only run\n1..3\n# pass 3\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Missing Hooks Parameter Example\nDESCRIPTION: Example showing incorrect module nesting where the hooks parameter is missing from the inner module, causing scope issues.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nQUnit.module('MyGroup', (hooks) => {\n  QUnit.module('Child', () => {\n    //                  ^ Oops, forgot \"hooks\" here!\n\n    hooks.beforeEach(() => {\n      // ...\n    });\n\n    QUnit.test('example');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Config Type Definition - hidepassed\nDESCRIPTION: Type definition for QUnit.config.hidepassed configuration option. Shows it's a boolean property defaulting to false.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/hidepassed.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`boolean`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`false`\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Output in TAP Format\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing test failure details including error message and stack trace\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/syntax-error.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 global failure\n  ---\n  message: |+\n    Error: Failed to load file syntax-error.js\n    ReferenceError: varIsNotDefined is not defined\n  severity: failed\n  stack: |\n    ReferenceError: varIsNotDefined is not defined\n        at /qunit/test/cli/fixtures/syntax-error.js:1:1\n        at internal\n  ...\nBail out! Error: Failed to load file syntax-error.js\n1..2\n# pass 0\n# skip 0\n# todo 0\n# fail 2\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Output for Unhandled Rejections\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing test failures from unhandled promise rejections. Shows two failures - one from a rejection outside test context and another from an unhandled rejection within a test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/unhandled-rejection.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 global failure\n  ---\n  message: Error: outside of a test context\n  severity: failed\n  stack: |\n    Error: outside of a test context\n        at /qunit/test/cli/fixtures/unhandled-rejection.js:17:18\n        at qunit.js\n        at /qunit/test/cli/fixtures/unhandled-rejection.js:3:7\n        at internal\n  ...\nBail out! Error: outside of a test context\nnot ok 2 Unhandled Rejections > test passes just fine, but has a rejected promise\n  ---\n  message: global failure: Error: Error thrown in non-returned promise!\n  severity: failed\n  stack: |\n    Error: Error thrown in non-returned promise!\n        at /qunit/test/cli/fixtures/unhandled-rejection.js:10:13\n  ...\n1..2\n# pass 0\n# skip 0\n# todo 0\n# fail 2\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: QUnit Reporter Function Implementation\nDESCRIPTION: Example of implementing a QUnit reporter using a function-based approach.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/QUnit.on.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction init (QUnit) {\n  QUnit.on('error', onError);\n  QUnit.on('testEnd', onTestEnd);\n  QUnit.on('runEnd', onRunEnd);\n\n  function onError (error) {\n  }\n  function onTestEnd (testEnd) {\n  }\n  function onRunEnd (runEnd) {\n  }\n}\n\n// CommonJS, or ES Module\nmodule.exports.init = init;\nexport { init };\n```\n\n----------------------------------------\n\nTITLE: TAP Output for Failed Assertion\nDESCRIPTION: Shows the TAP reporter output for a failed assertion, demonstrating how QUnit cleans the stack trace to only show the relevant line in the test file.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2025-01-19-stacktrace-cleaner.md#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nnot ok 2 banana\n  ---\n  actual  : This is actual.\n  expected: This is expected.\n  stack: |\n        at /test/example.js:3:10\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Test with Module Filter\nDESCRIPTION: Command line execution of QUnit tests using the --filter option to match specific module named 'single', targeting basic-one.js and glob/**/*-test.js test files\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/filter-modulename.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqunit --filter single test basic-one.js glob/**/*-test.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Hooks Reference Example\nDESCRIPTION: Example showing incorrect reference to outer module hooks instead of using the inner module's hooks parameter.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nQUnit.module('MyGroup', (hooksOuter) => {\n  QUnit.module('Child', (hooksInner) => {\n    hooksOuter.beforeEach(() => {\n      // ^ Oops, used \"hooksOuter\" instead of \"hooksInner\"!\n    });\n\n    QUnit.test('example');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: TAP Output for Test Timeout in QUnit 2.24.0\nDESCRIPTION: Shows the improved TAP reporter output for a timed-out test in QUnit 2.24.0, which completely removes internal Node.js timer frames when appropriate.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2025-01-19-stacktrace-cleaner.md#2025-04-12_snippet_4\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 slow example\n  ---\n  message: Test took longer than 100ms; test timed out.\n  severity: failed\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n```\n\n----------------------------------------\n\nTITLE: TAP Output for Memory Leak Tests\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing results of memory leak tests in module closures. Shows 2 passing tests with no skips, todos, or failures.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/memory-leak-module-closure-filtered.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nok 1 module-closure > example test\nok 2 module-closure check > memory release\n1..2\n# pass 2\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: Shows the TAP (Test Anything Protocol) formatted output of QUnit test execution, including test counts and results. All 3 tests passed with no skipped, todo, or failed tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/callbacks-promises.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 module1 > nestedModule1 > test1\nok 2 module1 > test2\nok 3 module1 > nestedModule2 > test3\n1..3\n# pass 3\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Error Message Examples - Module Hook Scope Errors\nDESCRIPTION: Example error messages shown when hooks are incorrectly added outside their containing module scope.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/module.md#2025-04-12_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Cannot add beforeEach hook outside the containing module.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Cannot add afterEach hook outside the containing module.\nCalled on \"X\", instead of expected \"Y\".\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Output for Global Hook Errors\nDESCRIPTION: TAP (Test Anything Protocol) formatted output from QUnit CLI showing test failures due to errors in global hooks. It includes error messages, stack traces, and test result summary.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/hooks-global-throw.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 global hook throws\n  ---\n  message: Global beforeEach failed on global hook throws: Error: banana\n  severity: failed\n  stack: |\n    Error: banana\n        at /qunit/test/cli/fixtures/hooks-global-throw.js:3:11\n  ...\n  ---\n  message: Global afterEach failed on global hook throws: Error: apple\n  severity: failed\n  stack: |\n    Error: apple\n        at /qunit/test/cli/fixtures/hooks-global-throw.js:17:11\n  ...\nnot ok 2 global hook rejects\n  ---\n  message: \"Promise rejected before \\\"global hook rejects\\\": banana\"\n  severity: failed\n  stack: |\n    Error: banana\n        at /qunit/test/cli/fixtures/hooks-global-throw.js:5:27\n  ...\n  ---\n  message: \"Promise rejected after \\\"global hook rejects\\\": apple\"\n  severity: failed\n  stack: |\n    Error: apple\n        at /qunit/test/cli/fixtures/hooks-global-throw.js:19:27\n  ...\nnot ok 3 global hook with bad thenable\n  ---\n  message: \"Promise rejected before \\\"global hook with bad thenable\\\": global brocoli\"\n  severity: failed\n  stack: |\n    Error: global brocoli\n        at /qunit/test/cli/fixtures/hooks-global-throw.js:9:15\n  ...\n  ---\n  message: \"Promise rejected after \\\"global hook with bad thenable\\\": global artichoke\"\n  severity: failed\n  stack: |\n    Error: global artichoke\n        at /qunit/test/cli/fixtures/hooks-global-throw.js:23:15\n  ...\n1..3\n# pass 0\n# skip 0\n# todo 0\n# fail 3\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Displaying QUnit 2.18.1 Release Information in Markdown\nDESCRIPTION: This Markdown snippet provides the release information for QUnit 2.18.1, including the title, author, tags, and changelog. It lists fixed issues and improvements made in this version.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2022-03-29-qunit-2-18-1.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: post\ntitle: \"QUnit 2.18.1 Released: Faster async testing\"\nauthor: krinkle\ntags:\n- release\n---\n\n## Changelog\n\n### Fixed\n\n* HTML Reporter: Fix source attribution for test definitions. (Phani Rithvij) [#1679](https://github.com/qunitjs/qunit/issues/1679)\n* Core: Fix preconfig support in SpiderMonkey and other environments. [0befe2aafe](https://github.com/qunitjs/qunit/commit/0befe2aafe913704db958c472ed6f2a37ec8caaf)\n* Core: Improve performance of async pauses with native Map when available. [aa7314b431](https://github.com/qunitjs/qunit/commit/aa7314b431db10d321109c78041747b681e1521c)\n\n## See also\n\n* [Git tag: 2.18.1](https://github.com/qunitjs/qunit/releases/tag/2.18.1)\n```\n\n----------------------------------------\n\nTITLE: QUnit CLI Output Example\nDESCRIPTION: Shows the TAP (Test Anything Protocol) formatted output when running QUnit tests in command-line interface.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/index.md#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 add > two numbers\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Passing Test Within QUnit Module in JavaScript\nDESCRIPTION: This code snippet shows a passing test within the QUnit module. Despite the module definition error, individual tests within the module can still run successfully.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/async-module-error-thenable.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.test(\"has a test\", (assert) => {\n  assert.ok(true, \"This test passed\");\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Output for Async Module Error\nDESCRIPTION: TAP-formatted test output showing QUnit's error handling when an async function is incorrectly used as a module callback. The error indicates that async module setup should use hooks instead of async callbacks.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/async-module-error.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nnot ok 1 global failure\n  ---\n  message: |+\n    Error: Failed to load file async-module-error.js\n    TypeError: QUnit.module() callback must not be async. For async module setup, use hooks. https://qunitjs.com/api/QUnit/module/#hooks\n  severity: failed\n  stack: |\n    TypeError: QUnit.module() callback must not be async. For async module setup, use hooks. https://qunitjs.com/api/QUnit/module/#hooks\n        at /qunit/test/cli/fixtures/async-module-error.js:2:7\n        at internal\n  ...\nBail out! Error: Failed to load file async-module-error.js\n1..2\n# pass 0\n# skip 0\n# todo 0\n# fail 2\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Fixing Karma QUnit Deprecation Warning\nDESCRIPTION: Code snippet showing the deprecation warning encountered in Karma output for QUnit.load(). This warning can be resolved by upgrading to karma-qunit 4.2.0 or later.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/load.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nQUnit.load is deprecated and will be removed in QUnit 3.0.\n```\n\n----------------------------------------\n\nTITLE: QUnit Test with Custom Assert\nDESCRIPTION: Example showing how to use assert.expect(0) with a custom assertion library that throws on failed expectations.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/expect.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', function (assert) {\n  assert.expect(0);\n\n  var android = new Robot(database);\n  android.run();\n\n  database.assertNoOpenConnections();\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Output in TAP Format\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing QUnit test execution results. Contains 3 failed assertions with detailed error messages including actual vs expected values and stack traces for debugging.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/assert-failure.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 assert > true [failure]\n  ---\n  message: failed\n  severity: failed\n  actual  : false\n  expected: true\n  stack: |\n        at /qunit/test/cli/fixtures/assert-failure.js:9:16\n  ...\nnot ok 2 assert > false [failure]\n  ---\n  message: failed\n  severity: failed\n  actual  : true\n  expected: false\n  stack: |\n        at /qunit/test/cli/fixtures/assert-failure.js:13:17\n  ...\nnot ok 3 assert > closeTo [failure]\n  ---\n  message: value should be within 0 inclusive\n  severity: failed\n  actual  : 1\n  expected: 2\n  stack: |\n        at /qunit/test/cli/fixtures/assert-failure.js:17:12\n  ...\n  ---\n  message: value should be within 1 inclusive\n  severity: failed\n  actual  : 2\n  expected: 7\n  stack: |\n        at /qunit/test/cli/fixtures/assert-failure.js:19:12\n  ...\n  ---\n  message: value should be within 0.1 inclusive\n  severity: failed\n  actual  : 7\n  expected: 7.3\n  stack: |\n        at /qunit/test/cli/fixtures/assert-failure.js:21:12\n  ...\n  ---\n  message: value should be within 0.2 inclusive\n  severity: failed\n  actual  : 7\n  expected: 7.3\n  stack: |\n        at /qunit/test/cli/fixtures/assert-failure.js:22:12\n  ...\n  ---\n  message: value should be within 1 inclusive\n  severity: failed\n  actual  : 2011\n  expected: 2013\n  stack: |\n        at /qunit/test/cli/fixtures/assert-failure.js:23:12\n  ...\n  ---\n  message: value should be within 0.1 inclusive\n  severity: failed\n  actual  : 20.7\n  expected: 20.1\n  stack: |\n        at /qunit/test/cli/fixtures/assert-failure.js:25:12\n  ...\n1..3\n# pass 0\n# skip 0\n# todo 0\n# fail 3\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Referencing Git Commit for HTML Reporter Fix in QUnit 2.19.1\nDESCRIPTION: This snippet provides the Git commit hash for the bug fix in QUnit 2.19.1, which restores float-clear for narrow viewports in the HTML Reporter.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2022-05-01-qunit-2-19-1.md#2025-04-12_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n87c90ce2e0eb03f3d10b8cec07c0ac9b3709b0d7\n```\n\n----------------------------------------\n\nTITLE: Linking Benchmark to Local Artifact\nDESCRIPTION: Command to install dependencies for the benchmark, linking it to the local QUnit artifact. This is executed in the benchmark directory.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/benchmark/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nqunit/test/benchmark$ npm install\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with TAP Output\nDESCRIPTION: Test execution results in TAP format showing results from Extension CJS, Extension MJS, First, and Second test suites. All 4 tests passed with no skipped, todo, or failed tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/_load-dir.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 Extension CJS > example\nok 2 Extension MJS > example\nok 3 First > 1\nok 4 Second > 1\n1..4\n# pass 4\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing test results across multiple test suites. All 7 tests passed with no skipped, todo, or failed tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/_load-dir-file-glob.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 Single > has a test\nok 2 A-Test > derp\nok 3 Nested-Test > herp\nok 4 Extension CJS > example\nok 5 Extension MJS > example\nok 6 First > 1\nok 7 Second > 1\n1..7\n# pass 7\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Front Matter in Markdown\nDESCRIPTION: YAML front matter configuration for the release notes blog post, specifying layout, title, author and tags.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2024-05-29-qunit-2-21-0.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: post\ntitle: \"QUnit 2.21.0 Released: Add assert.closeTo\"\nauthor: krinkle\ntags:\n- release\n---\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Memory Leak Test Command\nDESCRIPTION: Node.js command configuration for running QUnit tests with garbage collection enabled to detect memory leaks in test objects.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/memory-leak-test-object.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --expose-gc ../../../bin/qunit.js memory-leak-test-object.js\n```\n\n----------------------------------------\n\nTITLE: Linking to QUnit.todo() API Documentation in Markdown\nDESCRIPTION: Markdown link to the QUnit.todo() method documentation, using Jekyll's link tag to reference the appropriate markdown file.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2017-03-11-qunit-2-2-0.md#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`QUnit.todo()`]({% link api/QUnit/test.todo.md %})\n```\n\n----------------------------------------\n\nTITLE: Linking to QUnit.on() API Documentation in Markdown\nDESCRIPTION: Markdown link to the QUnit.on() method documentation, using Jekyll's link tag to reference the appropriate markdown file.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2017-03-11-qunit-2-2-0.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`QUnit.on()`]({% link api/callbacks/QUnit.on.md %})\n```\n\n----------------------------------------\n\nTITLE: TAP Test Output for Memory Leak Tests\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing the results of memory leak tests, including module closure tests and memory release verification\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/memory-leak-module-closure-unfiltered.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 module-closure > example test\nok 2 module-closure > example child module > example child module test\nok 3 module-closure check > memory release\n1..3\n# pass 3\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Output in TAP Format\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing results of QUnit test execution. Contains 28 passing tests with no skipped, todo, or failed tests. Tests cover arrays containing various data types including undefined, null, booleans, numbers, and strings.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/each-array-labels.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"each-array-labels.js\"]\n\nTAP version 13\nok 1 array of arrays [0]\nok 2 array of arrays [1]\nok 3 array of simple strings [foo]\nok 4 array of simple strings [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]\nok 5 array of simple strings [$]\nok 6 array of simple strings [http://example.org]\nok 7 array of simple strings [ ]\nok 8 array of simple strings []\nok 9 array of mixed [0: undefined]\nok 10 array of mixed [1: null]\nok 11 array of mixed [2: false]\nok 12 array of mixed [3: true]\nok 13 array of mixed [4: 0]\nok 14 array of mixed [5: 1]\nok 15 array of mixed [6: -10]\nok 16 array of mixed [7: 3.3333333333333335]\nok 17 array of mixed [8: 1e+43]\nok 18 array of mixed [9: Infinity]\nok 19 array of mixed [10: NaN]\nok 20 array of mixed [11]\nok 21 array of mixed [12]\nok 22 array of mixed [13: 999: example]\nok 23 array of mixed [simple string]\nok 24 array of mixed [15]\nok 25 array of mixed [16]\nok 26 array of mixed [17: yyyyyyyyyyyyyyyyyyyyyyyyyyyyy…]\nok 27 keyed objects [caseFoo]\nok 28 keyed objects [caseBar]\n1..28\n# pass 28\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Nested Module Tests with TAP Output\nDESCRIPTION: This snippet shows the command to run QUnit tests for nested modules and the resulting TAP output. It indicates that two tests passed successfully, one in module 1 and another in module 3.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/module-nested.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# name: module() nested with interrupted executeNow\n# command: [\"qunit\", \"module-nested.js\"]\n\nTAP version 13\nok 1 module 1 > test in module 1\nok 2 module 3 > test in module 3\n1..2\n# pass 2\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Tests with Karma\nDESCRIPTION: This command executes QUnit tests using Karma as the test runner. It's typically used in a Node.js environment and runs the tests defined in the project.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/demos/karma-qunit/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Module CLI Option Reference in QUnit 2.19.0\nDESCRIPTION: Reference to the new --module CLI option added in QUnit 2.19.0 that allows filtering test modules from the command line.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2022-04-28-qunit-2-19-0.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`--module`](https://qunitjs.com/cli/)\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: This snippet displays the Test Anything Protocol (TAP) output for the QUnit tests. It shows that all three tests passed successfully.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-testTimeout-invalid.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nok 1 invalid [undefined]\nok 2 invalid [null]\nok 3 invalid [string]\n1..3\n# pass 3\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Updating QUnit plugins page\nDESCRIPTION: Command to run a Node.js script that updates the plugins page by fetching search results from npmjs.org and saving them to _data/plugins.json.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode build/site-update-plugins.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll 404 Page with Front Matter\nDESCRIPTION: Jekyll front matter configuration for a 404 error page. Sets the page title and permalink for the error page.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/404.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: page\ntitle: Page not found\npermalink: /404.html\n---\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Execution Command with Memory Leak Testing\nDESCRIPTION: Command line execution of QUnit tests with garbage collection enabled and filter applied to exclude 'child' tests while running memory-leak-module-closure.js\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/memory-leak-module-closure-filtered.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[\"node\", \"--expose-gc\", \"../../../bin/qunit.js\", \"--filter\", \"!child\", \"memory-leak-module-closure.js\"]\n```\n\n----------------------------------------\n\nTITLE: Setting up local Jekyll server for QUnit documentation\nDESCRIPTION: Commands to install dependencies and start a local Jekyll server for the QUnit documentation website. This will regenerate the site on-the-fly in watch mode.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd qunit/docs/\nbundle update && bundle exec jekyll serve\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Event: runStart\nDESCRIPTION: Initial event showing test suite structure with nested suites and test definitions\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/events.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fullName\": [],\n  \"tests\": [],\n  \"childSuites\": [\n    {\n      \"name\": \"Events\",\n      \"fullName\": [\n        \"Events\"\n      ],\n      \"tests\": [\n        {\n          \"name\": \"test2\",\n          \"suiteName\": \"Events\",\n          \"fullName\": [\n            \"Events\",\n            \"test2\"\n          ]\n        },\n        {\n          \"name\": \"test3\",\n          \"suiteName\": \"Events\",\n          \"fullName\": [\n            \"Events\",\n            \"test3\"\n          ]\n        }\n      ],\n      \"childSuites\": [],\n      \"testCounts\": {\n        \"total\": 3\n      }\n    }\n  ],\n  \"testCounts\": {\n    \"total\": 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using deepEqual for Null Prototype Comparison in QUnit\nDESCRIPTION: Example of using the deepEqual assertion method in QUnit to compare objects with null prototypes against object literals. This functionality was added in version 1.2.0.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2011-11-24-qunit-1-2-0.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndeepEqual\n```\n\n----------------------------------------\n\nTITLE: TAP Test Output with Uncaught Error\nDESCRIPTION: Test Anything Protocol (TAP) output showing a failed test due to an uncaught error. The error occurred in the 'begin' callback with the message 'No dice', causing the test suite to bail out before completion.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/uncaught-error-callbacks-begin.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 global failure\n  ---\n  message: Error: No dice\n  severity: failed\n  stack: |\n    Error: No dice\n        at /qunit/test/cli/fixtures/uncaught-error-callbacks-begin.js:2:9\n        at qunit.js\n        at internal\n  ...\nBail out! Error: No dice\n```\n\n----------------------------------------\n\nTITLE: QUnit Assertions Page Front Matter in YAML\nDESCRIPTION: YAML front matter for the QUnit assertions documentation page. It defines the layout, group, title, and SEO settings including robots directive and redirect URLs from previous versions of the documentation.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/index.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: group\ngroup: assert\ntitle: Assertions\namethyst:\n  robots: index\nredirect_from:\n  - \"/assert/\"\n  - \"/QUnit.assert/\"\n  - \"/category/assert/\"\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Archive Layout in HTML\nDESCRIPTION: This snippet sets up the layout for an archive page using Jekyll front matter. It specifies the layout type as 'posts-archive' and sets the title to 'Archive'.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/blog/archive.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n---\nlayout: posts-archive\ntitle: Archive\n---\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with module.only() and TAP Output\nDESCRIPTION: This snippet shows the command to run QUnit tests and the resulting TAP output. It demonstrates a passing test within nested modules using the 'module.only()' feature.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/only-module-then-test.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# name: module.only() followed by test\n# command: [\"qunit\", \"only-module-then-test.js\"]\n\nTAP version 13\nok 1 module A > module B > test B\n1..2\n# pass 2\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Updating QUnit version in documentation\nDESCRIPTION: Command to run a Node.js script that updates the QUnit version referenced throughout the documentation site.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/README.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode build/site-set-version.js VERSION\n```\n\n----------------------------------------\n\nTITLE: TAP Test Output with Timeout Failure\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing a single failed test named 'example' that exceeded the 10ms timeout limit. Includes test summary showing 0 passed, 0 skipped, 0 todo, and 1 failed test.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/pending-async-after-timeout.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 example\n  ---\n  message: Test took longer than 10ms; test timed out.\n  severity: failed\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n```\n\n----------------------------------------\n\nTITLE: Preparing QUnit release artifacts\nDESCRIPTION: Command to run the release preparation script that updates package.json and builds release artifacts.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode build/prep-release.js @VERSION\n```\n\n----------------------------------------\n\nTITLE: Erroneous Async QUnit Module Definition in JavaScript\nDESCRIPTION: This code snippet demonstrates an incorrect usage of QUnit.module() with an async callback, which is not supported and leads to a TypeError. The error message suggests using hooks for async module setup instead.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/async-module-error-thenable.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nQUnit.module(\"module manually returning a thenable\", async () => {\n  // Async callback is not supported in QUnit.module()\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page for QUnit Extension Interface\nDESCRIPTION: This YAML front matter sets up a Jekyll page for documenting the QUnit extension interface. It specifies the layout, group, title, and includes a redirect from a legacy URL.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/index.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: group\ngroup: extension\ntitle: Extension interface\nredirect_from:\n  - \"/extension/\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Layout for QUnit Feature Tag Posts\nDESCRIPTION: This YAML front matter configures a Jekyll layout for posts tagged with 'feature' in the QUnit project. It specifies the base layout as 'posts-tag' and sets the page title to 'Feature'.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/blog/tag/feature.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: posts-tag\ntag: feature\ntitle: Feature\n---\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit CLI Test\nDESCRIPTION: This snippet shows the command used to run QUnit tests on a specific JavaScript file using the CLI.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/only-module-flat.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"only-module-flat.js\"]\n```\n\n----------------------------------------\n\nTITLE: Publishing alpha release to npm\nDESCRIPTION: Command to publish an alpha release to npm with the alpha tag to avoid making it the default version.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish --tag alpha\n```\n\n----------------------------------------\n\nTITLE: Starting Python HTTP Server for Browser Benchmarks\nDESCRIPTION: Command to start a Python HTTP server on port 4000 for running benchmarks in a browser environment.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/benchmark/README.md#2025-04-12_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython3 -m http.server 4000\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page Layout for Removed QUnit Methods Documentation\nDESCRIPTION: This YAML front matter block configures the Jekyll page layout and metadata for a documentation page about removed QUnit methods. It sets the layout, group, title, and includes a redirect from an old URL.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/removed.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: group\ngroup: removed\ntitle: Removed methods\nredirect_from:\n  - \"/removed/\"\n---\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing the results of running QUnit tests on 'inception.js'. The output shows version information, test results, and summary statistics.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/inception.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\n# command: [\"qunit\", \"inception.js\"]\n\nTAP version 13\nok 1 inception\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit Reporters Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the QUnit reporters documentation page, defining layout, group, title, and SEO settings including robot indexing directives.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/reporters/index.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: group\ngroup: reporters\ntitle: QUnit.reporters\nexcerpt: Built-in reporters for TAP, HTML, console, and perf.\namethyst:\n  # Override inherited \"pagetype: navigation\" to enable Typesense indexing\n  pagetype: custom\n  robots: index\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Color Block for QUnit Secondary Purple\nDESCRIPTION: HTML markup for displaying QUnit's secondary purple color specification with hex, CMYK, RGB, and Pantone values.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/brand.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"q-color-block\" style=\"background: #390F39; color: #FFF;\" markdown=\"1\">\n\n**QUnit Secondary Purple**<br>\nHEX: #390F39<br>\nCMYK: 0 74 0 78<br>\nRGB: 57 15 57<br>\nPantone: 229\n\n</p>\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Command Configuration and Results\nDESCRIPTION: QUnit test execution command with environment variables and test results in TAP format. Shows configuration for test filtering, seed value, timeout settings, and test execution results including passes and failures.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/preconfig-flat.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"preconfig-flat.js\"]\n# env: { \"qunit_config_filter\": \"!foobar\", \"qunit_config_seed\": \"dummyfirstyes\", \"qunit_config_testtimeout\": 7, \"qunit_config_altertitle\": \"true\", \"qunit_config_noglobals\": 1, \"qunit_config_notrycatch\": \"false\" }\n\nRunning tests with seed: dummyfirstyes\nTAP version 13\nok 1 dummy\nnot ok 2 slow\n  ---\n  message: Test took longer than 7ms; test timed out.\n  severity: failed\n  ...\nok 3 config\n1..3\n# pass 2\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Verifying QUnit release artifacts\nDESCRIPTION: Command to check the contents of the built release artifact to ensure it has the correct version.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhead qunit/qunit.js\n# /*!\n#  * QUnit x.y.z\n# …\n```\n\n----------------------------------------\n\nTITLE: Starting PHP Server for Browser Benchmarks\nDESCRIPTION: Alternative command to start a PHP server on localhost:4000 for running benchmarks in a browser environment.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/benchmark/README.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nphp -S localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Defining QUnit.config.altertitle Property Type in Markdown\nDESCRIPTION: Specifies the type of the QUnit.config.altertitle property as a boolean value using a markdown table.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/altertitle.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<tr>\n  <th>type</th>\n  <td markdown=\"span\">`boolean`</td>\n</tr>\n<tr>\n  <th>default</th>\n  <td markdown=\"span\">`true`</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Configuration in YAML\nDESCRIPTION: YAML configuration for QUnit test execution specifying the test file with syntax error\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/syntax-error.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# name: load file with syntax error\n# command: [\"qunit\", \"syntax-error.js\"]\n```\n\n----------------------------------------\n\nTITLE: Verifying QUnit release commit\nDESCRIPTION: Command to check that the current HEAD commit is the release commit with the correct message.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit show\n# Release x.y.z\n# …\n```\n\n----------------------------------------\n\nTITLE: Generating Project List with Jekyll and Liquid\nDESCRIPTION: This snippet is similar to the organization list, but it generates a grid of open-source projects that use QUnit. It also sorts entries alphabetically and formats them with links and sub-entries.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/projects.md#2025-04-12_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grid grid--small\">\n{% assign entries = site.data.projects.projects | sort_natural: \"name\" -%}\n{%- for entry in entries -%}\n<section markdown=\"1\">\n### [{{ entry.name }}]({{ entry.href }})\n{%- for sub in entry.sub %}\n[{{ sub.name }}]({{ sub.href }}){% if entry.sub.last != sub %}, {% endif %}\n{%- endfor %}\n</section>\n{% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring QUnit Test Run with Seed\nDESCRIPTION: Command line instruction for running QUnit tests with a specific seed value and glob patterns for test files\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/seed.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqunit --seed s33d test basic-one.js glob/**/*-test.js\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Output Example\nDESCRIPTION: Example of successful QUnit test output showing a passing test. The output displays information about task execution, test status, and summary statistics.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/demos/bundlers/README.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRunning \"qunit:all\" (qunit) task\nTesting http://localhost:8000/test.html .OK\n>> passed test \"example\"\n>> 1 test completed in 0ms, with 0 failed, 0 skipped, and 0 todo.\n\nDone.\n```\n\n----------------------------------------\n\nTITLE: QUnit Configuration in Frontmatter\nDESCRIPTION: YAML frontmatter configuration for the QUnit.assert documentation page, including layout, title, grouping, redirects and version information.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/extension/QUnit.assert.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: page-api\ntitle: QUnit.assert\nexcerpt: Namespace for QUnit assertion methods.\ngroups:\n  - extension\nredirect_from:\n  - \"/config/QUnit.assert/\"\n  - \"/extension/QUnit.assert/\"\nversion_added: \"1.7.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining QUnit.config.scrolltop Option Type and Default Value\nDESCRIPTION: This markdown table specifies the type and default value for the QUnit.config.scrolltop option. It's a boolean option that defaults to true, indicating that QUnit will scroll to the top of the page after tests are completed.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/scrolltop.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<tr>\n  <th>type</th>\n  <td markdown=\"span\">`boolean`</td>\n</tr>\n<tr>\n  <th>default</th>\n  <td markdown=\"span\">`true`</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: QUnit Test TAP Output with Timeout Failure\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing a failed test case where assert.async() was not resolved within the 10ms timeout period. The test suite contains 1 test that failed, with no passes, skips, or todos.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/done-after-timeout.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 times out before scheduled done is called\n  ---\n  message: Test took longer than 10ms; test timed out.\n  severity: failed\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n```\n\n----------------------------------------\n\nTITLE: Reviewing and pushing jQuery CDN update\nDESCRIPTION: Commands to review the jQuery CDN update commit and push it to the remote repository.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd __codeorigin\ngit show\ngit push\n```\n\n----------------------------------------\n\nTITLE: Performing Additional Assertions After assert.rejects() in QUnit\nDESCRIPTION: This example shows how to perform additional assertions on a rejected promise after using assert.rejects(), allowing for more detailed error checking.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/rejects.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('example', async function (assert) {\n  const p = feedMe();\n  await assert.rejects(p, RangeError);\n\n  try {\n    await p;\n  } catch (e) {\n    assert.deepEqual(e.somedata, { foo: 'bar' });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: TAP (Test Anything Protocol) formatted output showing test results across multiple test modules with all tests passing\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/seed.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nRunning tests with seed: s33d\nTAP version 13\nok 1 Second > 1\nok 2 Extension MJS > example\nok 3 Nested-Test > herp\nok 4 Extension CJS > example\nok 5 A-Test > derp\nok 6 First > 1\nok 7 Single > has a test\n1..7\n# pass 7\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Output for noglobals Config\nDESCRIPTION: TAP (Test Anything Protocol) formatted output from a QUnit test that verifies the config.noglobals feature with ignored DOM globals. Shows a single passing test case.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-noglobals-ignored.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nok 1 adds global var\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit Memory Leak Test Command Configuration\nDESCRIPTION: Node.js command configuration for running QUnit tests with garbage collection exposed, specifically targeting memory leak tests in module closures\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/memory-leak-module-closure-unfiltered.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# name: memory leak module-closure unfiltered\n# command: [\"node\", \"--expose-gc\", \"../../../bin/qunit.js\", \"memory-leak-module-closure.js\"]\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with TAP Output\nDESCRIPTION: TAP-formatted test results from running QUnit tests, showing test execution status including skipped tests, dataset tests, and grouped tests. The output demonstrates 9 total tests with 5 passes and 4 skips.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/test-if.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 skip me # SKIP\nok 2 keep me\nok 3 regular\nok 4 skip dataset [a] # SKIP\nok 5 skip dataset [b] # SKIP\nok 6 keep dataset [a]\nok 7 keep dataset [b]\nok 8 skip group > skipper # SKIP\nok 9 keep group > keeper\n1..9\n# pass 5\n# skip 4\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Displaying QUnit.config.noglobals Type and Default Value in Markdown\nDESCRIPTION: This snippet shows the type and default value of the QUnit.config.noglobals option using markdown table syntax.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/config/noglobals.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n<tr>\n  <th>type</th>\n  <td markdown=\"span\">`boolean`</td>\n</tr>\n<tr>\n  <th>default</th>\n  <td markdown=\"span\">`false`</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Bad example: Assertions inside event callbacks\nDESCRIPTION: A warning example showing why placing assertions directly inside event callbacks is risky. This can lead to false positives if callbacks don't run or run out of order.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/assert/verifySteps.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// WARNING: This is a BAD example\nQUnit.test('bad example 1', async function (assert) {\n  const finder = new WordFinder();\n  finder.on('start', () => {\n    assert.true(true, 'start');\n  });\n  finder.on('middle', () => {\n    assert.true(true, 'middle');\n  });\n  finder.on('end', () => {\n    assert.true(true, 'end');\n  });\n  finder.on('error', () => {\n    assert.true(false, 'error');\n  });\n\n  await maker.process();\n});\n```\n\n----------------------------------------\n\nTITLE: Running QUnit with Missing Test File\nDESCRIPTION: Command line attempt to run QUnit tests on a non-existent JavaScript file 'does-not-exist.js', which results in a file not found error and exit code 1.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/_load-filenotfound.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqunit does-not-exist.js\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with Mixed Path Patterns\nDESCRIPTION: Command line instruction for running QUnit tests targeting a specific file, directory, and glob pattern for test files.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/_load-dir-file-glob.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqunit test basic-one.js glob/**/*-test.js\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit with No Tests (Plaintext)\nDESCRIPTION: This snippet shows the command used to run QUnit and the resulting TAP output when no tests are present. It demonstrates the error handling and reporting format of QUnit in such scenarios.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/no-tests.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# name: no tests\n# command: [\"qunit\", \"no-tests.js\"]\n\nTAP version 13\nnot ok 1 global failure\n  ---\n  message: Error: No tests were run.\n  severity: failed\n  stack: |\n    Error: No tests were run.\n  ...\nBail out! Error: No tests were run.\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: TAP Test Output Results\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing the results of the memory leak test execution with one passing test and no failures.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/memory-leak-test-object.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 test-object > example test\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: TAP Test Output\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing test results with a summary of passes, skips, todos, and failures.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/_load-single-file.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 Single > has a test\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit 2.1.1 Release Notes Markup\nDESCRIPTION: Markdown formatted release notes for QUnit 2.1.1 including changelog entries and reference links.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2017-01-05-qunit-2-1-1.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: post\ntitle: \"QUnit 2.1.1 Released\"\nauthor: leobalter\ntags:\n- release\n---\n\n## Changelog\n\n* All: Remove deprecated 1.x features.\n* Assert: Deprecate `assert.push()`.\n* Core: `QUnit.start()` no longer requires calling `QUnit.load()` first.\n* HTML Reporter: Add an \"Abort\" button.\n\n## See also\n\n* [Git tag: 2.1.1](https://github.com/qunitjs/qunit/releases/tag/2.1.1)\n```\n\n----------------------------------------\n\nTITLE: TAP Output for QUnit Execution with No Tests\nDESCRIPTION: This TAP (Test Anything Protocol) output shows the result of running QUnit with no tests. It indicates that no tests were run, and no failures occurred. The output includes the TAP version, test plan, and summary of test results.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/no-tests-failOnZeroTests.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: TAP\nCODE:\n```\nTAP version 13\n1..0\n# pass 0\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Tests with Required Dependencies\nDESCRIPTION: Command execution showing QUnit running with dependencies loaded via --require flag. Demonstrates successful loading of both a package dependency and a direct file path dependency, followed by TAP-formatted test output.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/require-module-and-script.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# name: --require loads dependency and script\n# command: [\"qunit\",\"basic-one.js\",\"--require\",\"require-dep\",\"--require\",\"./node_modules/require-dep/module.js\"]\n\nrequired require-dep/index.js\nrequired require-dep/module.js\nTAP version 13\nok 1 Single > has a test\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with String Filter Configuration\nDESCRIPTION: This snippet shows the command used to run QUnit tests with a specific configuration file that uses a string filter. The tests are executed using the 'qunit' command with 'config-filter-string.js' as the target file.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-filter-string.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqunit config-filter-string.js\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with Command Line\nDESCRIPTION: This snippet shows the command used to run QUnit tests, specifically targeting a file named 'only-test-only-module-mix.js'.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/only-test-only-module-mix.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"only-test-only-module-mix.js\"]\n```\n\n----------------------------------------\n\nTITLE: TAP Output for Test Timeout in QUnit 2.23.1\nDESCRIPTION: Shows the TAP reporter output for a timed-out test in QUnit 2.23.1, displaying Node.js internal timer functions in the stack trace.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2025-01-19-stacktrace-cleaner.md#2025-04-12_snippet_3\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 slow example\n  ---\n  message: Test took longer than 100ms; test timed out.\n  severity: failed\n  stack: |\n        at listOnTimeout (node:internal/timers:573:17)\n        at process.processTimers (node:internal/timers:514:7)\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Tests with Module Filter\nDESCRIPTION: Command line execution of QUnit tests filtering for a specific module named 'seconD'. The command demonstrates case-insensitive module name matching.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/filter-modulename-insensitive.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[\"qunit\", \"--module\", \"seconD\", \"test/\"]\n```\n\n----------------------------------------\n\nTITLE: Running All Micro Benchmarks in Node.js\nDESCRIPTION: Command to execute all micro benchmarks in a Node.js environment. This is run from the benchmark directory.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/benchmark/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nqunit/test/benchmark$ node micro.js\n```\n\n----------------------------------------\n\nTITLE: Running QUnit Test Command\nDESCRIPTION: Command line instruction to run QUnit tests on a single JavaScript file.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/_load-single-file.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqunit basic-one.js\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies for QUnit release\nDESCRIPTION: Command to install all required dependencies for the QUnit release process.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Test with Global Variable Detection\nDESCRIPTION: This snippet shows the command used to run a QUnit test with global variable detection enabled, and the resulting TAP (Test Anything Protocol) output. The test fails because a global variable 'dummyGlobal' is introduced.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-noglobals-add.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: TAP\nCODE:\n```\nTAP version 13\nnot ok 1 adds global var\n  ---\n  message: Introduced global variable(s): dummyGlobal\n  severity: failed\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit with No Tests and failOnZeroTests=false\nDESCRIPTION: This command runs QUnit on a JavaScript file named 'no-tests-failOnZeroTests.js'. It demonstrates how QUnit behaves when there are no tests to execute and the failOnZeroTests configuration option is set to false.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/no-tests-failOnZeroTests.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nqunit no-tests-failOnZeroTests.js\n```\n\n----------------------------------------\n\nTITLE: Running QUnit CLI with Global Hook Error Test File\nDESCRIPTION: Command to execute QUnit CLI with a specific test file that contains global hook errors.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/hooks-global-throw.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqunit hooks-global-throw.js\n```\n\n----------------------------------------\n\nTITLE: Publishing stable release to npm\nDESCRIPTION: Command to publish a stable release to npm as the default/latest version.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Test Output with Regex Filter\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing results of QUnit tests filtered with regex patterns. Shows successful execution of three filter-related tests.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-filter-regex.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 filter > foo test\nok 2 filter > FOO test\nok 3 filter > bar test\n1..3\n# pass 3\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Performance Tests with Custom Configuration\nDESCRIPTION: This command runs QUnit tests on the 'perf-mark.js' file with performance reporting enabled via an environment variable. It demonstrates how to configure QUnit for performance testing.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/perf-mark.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# command: [\"qunit\", \"perf-mark.js\"]\n# env: { \"qunit_config_reporters_perf\": true }\n```\n\n----------------------------------------\n\nTITLE: Jekyll Page Configuration in YAML\nDESCRIPTION: YAML front matter configuration for a Jekyll documentation page, defining the layout, group, title and redirect paths.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/QUnit/index.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: group\ngroup: main\ntitle: Main methods\nredirect_from:\n  - \"/QUnit/\"\n  - \"/category/test/\"\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Error Message with Markdown Support\nDESCRIPTION: An HTML paragraph with the lead CSS class that also supports Markdown formatting, displaying a simple error message to users when content cannot be found.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/404.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"lead\" markdown=\"1\">It seems we can't find what you're looking for.</p>\n```\n\n----------------------------------------\n\nTITLE: TAP Test Output with Uncaught Hook Error\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing a failed test execution. The output shows 1 failed test due to an error thrown in a hook, with detailed error message and stack trace information.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/uncaught-error-in-hook.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nnot ok 1 contains a hard error in hook > contains a hard error\n  ---\n  message: before failed on contains a hard error: expected error thrown in hook\n  severity: failed\n  stack: |\n    Error: expected error thrown in hook\n        at /qunit/test/cli/fixtures/uncaught-error-in-hook.js:3:11\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Executing QUnit Tests with Invalid testTimeout Configuration\nDESCRIPTION: This snippet shows the command used to run QUnit tests with an invalid testTimeout configuration file.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-testTimeout-invalid.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# command: [\"qunit\", \"config-testTimeout-invalid.js\"]\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Execution TAP Output\nDESCRIPTION: TAP (Test Anything Protocol) formatted output from a QUnit test run showing an unhandled promise rejection error and test timeout. The test failed due to both a 'bad things happen' error and exceeding the 1000ms timeout limit.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-notrycatch-hook-rejection.tap.txt#2025-04-12_snippet_0\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nFOUND Unhandled Rejection: bad things happen\nnot ok 1 example > passing test\n  ---\n  message: global failure: bad things happen\n  severity: failed\n  stack: |\n        at internal\n  ...\n  ---\n  message: Test took longer than 1000ms; test timed out.\n  severity: failed\n  ...\n1..1\n# pass 0\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Legacy QUnit Test Using String-Based Error Matching\nDESCRIPTION: Deprecated approach using a string to match the error message in assert.throws()\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nQUnit.test('add', function (assert) {\n  assert.throws(() => {\n    add();\n  }, 'This is an error', 'Fail if A is undefined');\n});\n```\n\n----------------------------------------\n\nTITLE: QUnit 1.x/2.x HTML Structure\nDESCRIPTION: The base HTML structure generated by QUnit's HTML Reporter for versions 1.x and 2.x inside the qunit div element.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/browser.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"qunit\">\n  <h1 id=\"qunit-header\">…</h1>\n  <h2 id=\"qunit-banner\"></h2>\n  <div id=\"qunit-testrunner-toolbar\">…</div>\n  <h2 id=\"qunit-userAgent\">…</h2>\n  <p id=\"qunit-testresult\">…</p>\n  <ol id=\"qunit-tests\"></ol>\n</div>\n```\n\n----------------------------------------\n\nTITLE: QUnit TAP Output\nDESCRIPTION: Test Anything Protocol (TAP) formatted output showing test results. Displays a single passing test from the 'Second' module with summary statistics.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/filter-modulename-insensitive.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: tap\nCODE:\n```\nTAP version 13\nok 1 Second > 1\n1..1\n# pass 1\n# skip 0\n# todo 0\n# fail 0\n```\n\n----------------------------------------\n\nTITLE: QUnit Test Results in TAP Format\nDESCRIPTION: This snippet displays the output of QUnit tests in TAP (Test Anything Protocol) format. It shows a global failure due to no tests being run, along with test statistics.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/only-test-only-module-mix.tap.txt#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTAP version 13\nnot ok 1 global failure\n  ---\n  message: Error: No tests were run.\n  severity: failed\n  stack: |\n    Error: No tests were run.\n  ...\nBail out! Error: No tests were run.\n1..3\n# pass 2\n# skip 0\n# todo 0\n# fail 1\n\n# exit code: 1\n```\n\n----------------------------------------\n\nTITLE: QUnit stderr Output for Invalid testTimeout Configurations\nDESCRIPTION: This snippet shows the error messages printed to stderr when QUnit encounters invalid testTimeout configurations. It indicates that the default value will be used instead.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/cli/fixtures/config-testTimeout-invalid.tap.txt#2025-04-12_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# stderr\nQUnit.config.testTimeout was set to an an invalid value (undefined). Using default. https://qunitjs.com/api/config/testTimeout/\nQUnit.config.testTimeout was set to an an invalid value (null). Using default. https://qunitjs.com/api/config/testTimeout/\nQUnit.config.testTimeout was set to an an invalid value (string). Using default. https://qunitjs.com/api/config/testTimeout/\n```\n\n----------------------------------------\n\nTITLE: Generating Plugin List with HTML and Liquid in Jekyll\nDESCRIPTION: This snippet generates an HTML unordered list of QUnit plugins using Liquid templating in Jekyll. It sorts plugins by date in descending order and displays each plugin's name (linked to npm) and description.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/plugins.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul id=\"plugins\" class=\"grid grid--split\">\n  {% assign _plugins = site.data.plugins | sort: \"date\" | reverse -%}\n  {%- for plugin in _plugins -%}\n    <li class=\"plugin\">\n      <h3><a href=\"https://npmjs.com/package/{{ plugin.name }}\" target=\"_blank\" rel=\"noopener noreferrer\">{{ plugin.name }}</a></h3>\n      <p>{{ plugin.description }}</p>\n    </li>\n  {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Generating Organization List with Jekyll and Liquid\nDESCRIPTION: This snippet uses Jekyll's Liquid templating to generate a grid of organizations that use QUnit. It sorts the entries alphabetically and formats them with links and sub-entries.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/projects.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grid grid--small\">\n{% assign entries = site.data.projects.orgs | sort_natural: \"name\" -%}\n{%- for entry in entries -%}\n<section markdown=\"1\">\n### [{{ entry.name }}]({{ entry.href }})\n{%- for sub in entry.sub %}\n[{{ sub.name }}]({{ sub.href }}){% if entry.sub.last != sub %}, {% endif %}\n{%- endfor %}\n</section>\n{% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page for QUnit Callback Events Documentation\nDESCRIPTION: This YAML front matter configures a Jekyll page for documenting QUnit callback events. It sets the layout, assigns the page to the 'callbacks' group, specifies the title, and sets up redirects from old URLs.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/callbacks/index.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: group\ngroup: callbacks\ntitle: Callback events\nredirect_from:\n  - \"/callbacks/\"\n  - \"/category/callbacks/\"\n---\n```\n\n----------------------------------------\n\nTITLE: Installing QUnit and Building Release Artifact\nDESCRIPTION: Commands to install QUnit for development and generate the release artifact. This is typically done in the root directory of the QUnit project.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/test/benchmark/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nqunit$ npm install\nqunit$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for QUnit Async Control Documentation\nDESCRIPTION: This YAML snippet defines the front matter for a Jekyll-based documentation page about QUnit's async control features. It specifies the layout, group, title, and redirect information.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/api/async.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: group\ngroup: async\ntitle: Async control\nredirect_from:\n  - \"/category/async-control/\"\n---\n```\n\n----------------------------------------\n\nTITLE: Adding QUnit Badge in Markdown\nDESCRIPTION: Markdown snippet for embedding the 'Tested with QUnit' badge with a link to the QUnit homepage\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/badge.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Tested with QUnit](https://qunitjs.com/testedwith.svg)](https://qunitjs.com/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Layout for Release Tags\nDESCRIPTION: YAML front matter configuration block that specifies the layout template and tag settings for QUnit release-related content.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/blog/tag/release.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: posts-tag\ntag: release\ntitle: Release\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Color Block for QUnit Primary Purple\nDESCRIPTION: HTML markup for displaying QUnit's primary purple color specification with hex, CMYK, RGB, and Pantone values.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/brand.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"q-color-block\" style=\"background: #9C3493; color: #FFF;\" markdown=\"1\">\n\n**QUnit Primary Purple**<br>\nHEX: #9C3493<br>\nCMYK: 0 67 6 39<br>\nRGB: 156 52 147<br>\nPantone: 253\n\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for QUnit Blog\nDESCRIPTION: YAML front matter configuration that sets up a Jekyll blog post layout with the title 'QUnit Blog'.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/blog.md#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: posts\ntitle: QUnit Blog\n---\n```\n\n----------------------------------------\n\nTITLE: Referencing propEqual API in Markdown\nDESCRIPTION: Markdown link to the documentation for the newly added propEqual assertion method. This link directs users to the official QUnit documentation.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2013-01-20-qunit-1-11-0.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`assert.propEqual()`](https://qunitjs.com/api/assert/propEqual/)\n```\n\n----------------------------------------\n\nTITLE: Linking to assert.verifySteps() API Documentation in Markdown\nDESCRIPTION: Markdown link to the assert.verifySteps() method documentation, using Jekyll's link tag to reference the appropriate markdown file.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2017-03-11-qunit-2-2-0.md#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`assert.verifySteps()`]({% link api/assert/verifySteps.md %})\n```\n\n----------------------------------------\n\nTITLE: HTML Reporter Optimization Commit Reference\nDESCRIPTION: Reference to the commit that improved HTML reporter toolbar setup by reusing the beginDetails.modules object for faster initialization.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/_posts/2022-04-28-qunit-2-19-0.md#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[e31c8d37b6](https://github.com/qunitjs/qunit/commit/e31c8d37b678ad2892abd4064f1d6dd1d42c858e)\n```\n\n----------------------------------------\n\nTITLE: Creating or resetting release branch for QUnit release\nDESCRIPTION: Command to create or reset the 'release' branch based on the latest main branch from origin.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote update && git checkout -B release -t origin/main\n```\n\n----------------------------------------\n\nTITLE: Reviewing QUnit release artifacts\nDESCRIPTION: Command to compare the new release artifacts with those from the previous release.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode build/review-package.js @LAST_VERSION\n\n# … review package.json, qunit.js, and qunit.css\n```\n\n----------------------------------------\n\nTITLE: Creating and pushing git tag for QUnit release\nDESCRIPTION: Commands to create a signed git tag for the release and push it to the remote repository.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s \"@VERSION\" -m \"Release @VERSION\"\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Updating QUnit website for new release\nDESCRIPTION: Commands to update the QUnit website with the new version information, including download links and demos.\nSOURCE: https://github.com/qunitjs/qunit/blob/main/RELEASE.md#2025-04-12_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nqunit$ git remote update && git checkout -B docs -t origin/main\nqunit$ node build/site-set-version.js @VERSION\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error-Throwing Function in JavaScript\nDESCRIPTION: Example function that throws an error when the first parameter is undefined\nSOURCE: https://github.com/qunitjs/qunit/blob/main/docs/upgrade-guide-2.x.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add (a, b) {\n  if (a === undefined) {\n    throw new Error('This is an error');\n  }\n}\n```"
  }
]