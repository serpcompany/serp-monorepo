[
  {
    "owner": "mherrmann",
    "repo": "helium",
    "content": "TITLE: Basic Web Interaction Script with Helium\nDESCRIPTION: A complete example showing typical Helium commands for web automation, including navigation, text input, and clicking elements.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom helium import *\nstart_chrome('google.com')\nwrite('helium selenium github')\npress(ENTER)\nclick('mherrmann/helium')\ngo_to('github.com/login')\nwrite('username', into='Username')\nwrite('password', into='Password')\nclick('Sign in')\nkill_browser()\n```\n\n----------------------------------------\n\nTITLE: Comparing Wait Operations in Selenium vs Helium\nDESCRIPTION: Comparison between Selenium's explicit wait syntax and Helium's simplified wait API\nSOURCE: https://github.com/mherrmann/helium/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nelement = WebDriverWait(driver, 10).until(\n    EC.presence_of_element_located((By.ID, \"myDynamicElement\"))\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nwait_until(Button('Download').exists)\n```\n\n----------------------------------------\n\nTITLE: Combining Helium and Selenium APIs\nDESCRIPTION: Demonstrates how to mix Helium commands with low-level Selenium API calls.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndriver = start_chrome()\ndriver.execute_script(\"alert('Hi!');\")\n```\n\n----------------------------------------\n\nTITLE: Mixing Helium with Selenium API\nDESCRIPTION: Example showing how Helium can be combined with direct Selenium API calls\nSOURCE: https://github.com/mherrmann/helium/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# A Helium function:\ndriver = start_chrome()\n# A Selenium API:\ndriver.execute_script(\"alert('Hi!');\")\n```\n\n----------------------------------------\n\nTITLE: Starting Headless Browsers with Helium\nDESCRIPTION: Demonstrates how to start Chrome in headless mode, optionally with a specific URL.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstart_chrome(headless=True)\nstart_chrome('google.com', headless=True)\n```\n\n----------------------------------------\n\nTITLE: Starting Chrome and Firefox Browsers with Helium\nDESCRIPTION: Shows how to start Chrome and Firefox browsers using Helium, with an option to open a specific URL.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstart_chrome()\nstart_firefox()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Elements with Helium\nDESCRIPTION: Demonstrates how to use wait_until() to wait for elements to appear or conditions to be met.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwait_until(Button('Download').exists)\nwait_until(lambda: TextField('Balance').value == '$2M')\n```\n\n----------------------------------------\n\nTITLE: Finding All Elements and Extracting Data with Helium\nDESCRIPTION: Demonstrates how to use find_all() to extract multiple pieces of data from a web page.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nemail_cells = find_all(S(\"table > tr > td\", below=\"Email\"))\nemails = [cell.web_element.text for cell in email_cells]\n```\n\n----------------------------------------\n\nTITLE: Finding Elements Relative to Others with Helium\nDESCRIPTION: Examples of using relative positioning to find elements on a web page.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nText(above='Balance', below='Transactions').value\nLink(to_right_of='Invoice:')\nImage(to_right_of=Link('Sign in', below=Text('Navigation')))\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence with Helium\nDESCRIPTION: Demonstrates how to check for the existence of an element and perform a conditional action.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif Text('Accept cookies?').exists():\n    click('I accept')\n```\n\n----------------------------------------\n\nTITLE: Using Helium Element Types for Interaction\nDESCRIPTION: Shows how to use specific Helium element types like TextField for reading values from web elements.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(TextField('First name').value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Waits in Helium\nDESCRIPTION: Shows how to change the default implicit wait time for Helium commands.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nConfig.implicit_wait_secs = 30\n```\n\n----------------------------------------\n\nTITLE: Accessing Selenium WebElements with Helium\nDESCRIPTION: Shows how to access Selenium WebElements from Helium elements for additional API access.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nLink('Helium').web_element.get_attribute('class')\n```\n\n----------------------------------------\n\nTITLE: Reading Text with Relative Positioning in Helium\nDESCRIPTION: Shows how to read text from a web page using relative positioning of elements.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nname = Text(to_right_of='Name:', below=Image(alt='Profile picture')).value\n```\n\n----------------------------------------\n\nTITLE: Using jQuery-style Selectors in Helium\nDESCRIPTION: Shows how to use S() for HTML IDs, CSS Selectors, or XPaths to identify elements.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Examples (not runnable code):\n# S(\"@btnName\") # HTML name\n# S(\"//xpath\") # XPath\n# S(\"#myId\") # CSS ID selector\n# S(\".myClass\") # CSS class selector\n```\n\n----------------------------------------\n\nTITLE: Handling Alerts with Helium\nDESCRIPTION: Demonstrates how to interact with JavaScript alerts using Helium's Alert class.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Examples (not runnable code):\n# Alert().accept()\n# Alert().dismiss()\n# Alert().text\n# write(\"text\", into=Alert())\n```\n\n----------------------------------------\n\nTITLE: Clicking at Coordinates with Helium\nDESCRIPTION: Shows how to click at specific x, y coordinates or at an offset from an element using Helium's Point class.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom helium import click\npoint = Point(x=100, y=200)\nclick(point)  # Clicks at (100, 200)\n\ndelta = (20, -10)\nclick(Point(100, 200) + delta)  # Clicks at (120, 190)\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Selenium in Helium\nDESCRIPTION: Demonstrates how to take a screenshot using Selenium's API within a Helium script.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nget_driver().save_screenshot(r'C:\\screenshot.png')\n```\n\n----------------------------------------\n\nTITLE: Importing Helium Functions in Python\nDESCRIPTION: Demonstrates how to import all public functions from the Helium module.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/cheatsheet.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom helium import *\n```\n\n----------------------------------------\n\nTITLE: Installing Virtual Environment and Helium\nDESCRIPTION: Commands for creating and activating a Python virtual environment, followed by installing Helium using pip\nSOURCE: https://github.com/mherrmann/helium/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\n# On Mac/Linux:\nsource venv/bin/activate\n# On Windows:\ncall venv\\scripts\\activate.bat\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install helium\n```\n\n----------------------------------------\n\nTITLE: Installing Helium via pip in Python\nDESCRIPTION: Simple one-line command to install Helium using pip package manager.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/installation.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install helium\n```\n\n----------------------------------------\n\nTITLE: Installing Helium in a Virtual Environment\nDESCRIPTION: Command to install Helium within an activated virtual environment using pip module.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/installation.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install helium\n```\n\n----------------------------------------\n\nTITLE: Activating a Python Virtual Environment\nDESCRIPTION: Commands to activate a virtual environment on different operating systems, which enables using the isolated Python environment.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/installation.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# On Mac/Linux, bash shell:\nsource venv/bin/activate\n# On Windows:\ncall venv\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: Command to create a new Python virtual environment in the current directory, which isolates project dependencies.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/installation.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Specifying Selenium Dependency for Helium Project\nDESCRIPTION: This snippet specifies the required Selenium version (4.29.0 or higher) for the Helium project. The comment indicates that setup.py should also be updated when this requirement changes.\nSOURCE: https://github.com/mherrmann/helium/blob/master/requirements/base.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Also update setup.py when you edit this file.\nselenium>=4.29.0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Helium Documentation with Bash\nDESCRIPTION: This command installs the documentation dependencies from the requirements file and builds the HTML documentation. The documentation will be generated in the docs/_build/ directory, which can be viewed by opening docs/_build/index.html in a browser.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -Ur requirements/docs.txt\nmake -C docs/ html\n```\n\n----------------------------------------\n\nTITLE: Loading Dependencies with Conditional Windows Requirements\nDESCRIPTION: Requirements file that extends base.txt and adds psutil package plus pywin32 for Windows systems only. Uses pip's conditional dependency syntax to control platform-specific installations.\nSOURCE: https://github.com/mherrmann/helium/blob/master/requirements/test.txt#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-r base.txt\n\npsutil\npywin32; platform_system=='Windows'\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for Helium Module using reStructuredText\nDESCRIPTION: This snippet uses the automodule directive in reStructuredText to automatically generate documentation for all members of the helium module. It's typically used in Sphinx documentation to create comprehensive API references.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/api.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: helium\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Specifying Python package dependencies for Helium documentation\nDESCRIPTION: This requirements file lists the necessary Python packages for building the Helium project documentation. It includes Sphinx, a popular documentation generator, and the Read the Docs theme for Sphinx. The file also references another requirements file named 'base.txt'.\nSOURCE: https://github.com/mherrmann/helium/blob/master/requirements/docs.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r base.txt\n\nsphinx-rtd-theme==0.5.0\nsphinx==3.2.1\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines the table of contents for the Helium documentation using reStructuredText directives. It specifies the depth of the table, caption, and includes links to other documentation files.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   installation.rst\n   api.rst\n   contributors.rst\n```\n\n----------------------------------------\n\nTITLE: Documenting Contributor Template in reStructuredText\nDESCRIPTION: Template format for adding new contributor entries to the project documentation. Demonstrates the required syntax for contributor name, profile URL, and contribution description.\nSOURCE: https://github.com/mherrmann/helium/blob/master/docs/contributors.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n`SocialUsernameName <Profile-Url>`_ (**Your Name**) - *Description of your contribution in a few words*\n```"
  }
]