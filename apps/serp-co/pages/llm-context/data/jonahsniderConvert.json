[
  {
    "owner": "jonahsnider",
    "repo": "convert",
    "content": "TITLE: Importing and Using Convert and ConvertMany (TypeScript and JavaScript)\nDESCRIPTION: These TypeScript code examples demonstrate how to import the Convert library in both ESM and CJS environments and perform various unit conversions including seconds to minutes, hours to minutes, and using the 'best' formatting. The code also highlights support for BigInt inputs and extended unit categories (length, volume, mass, temperature, etc.). Results may be numbers, BigInts, or objects with value formatting support.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/README.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// ESM:\nimport convert from \"convert\";\n// CJS:\nconst { convert } = require(\"convert\");\n\n// 360 seconds into minutes\nconvert(360, \"seconds\").to(\"minutes\");\n// -> 6\n\n// BigInt support\nconvert(20n, \"hours\").to(\"minutes\");\n// -> 1200n\n\n// Format to the best unit automatically\nconvert(5500, \"meters\").to(\"best\");\n// -> { quantity: 5.5, unit: 'km', toString: () => '5.5 km' }\n\n// You can also do length, data, volume, mass, temperature, and more\nconvert(5, \"kilometers\").to(\"nautical miles\");\nconvert(12, \"pounds\").to(\"ounces\");\nconvert(8192, \"bytes\").to(\"KiB\");\nconvert(10, \"atmospheres\").to(\"kPa\");\nconvert(451, \"fahrenheit\").to(\"celsius\");\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Examples with Convert (JavaScript)\nDESCRIPTION: These JavaScript examples demonstrate the two main API entry points: `convert` for converting a single value between units, and `convertMany` for parsing and converting compound time strings. No explicit dependencies except importing `convert` or `convertMany` are needed. The `to` method specifies the output unit, and results are returned as numbers or objects depending on the output.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconvert(5, \"miles\").to(\"km\");\nconvertMany(\"4d 16h\").to(\"minutes\");\n```\n\n----------------------------------------\n\nTITLE: Converting to Best Unit and Formatting (TypeScript and JavaScript)\nDESCRIPTION: These TypeScript code examples demonstrate using Convert to transform a value into the 'best' unit (smallest readable unit) and format the result. They show support for string concatenation with the result object, and customization for metric or imperial systems. Examples include hour-to-day transformation and specifying metric or imperial preferences.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/README.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport convert from \"convert\";\nconst { convert } = require(\"convert\");\n\n// Convert into the best unit\nconst duration = convert(36, \"h\").to(\"best\");\n// -> { quantity: 1.5, unit: 'd', toString: () => '1.5 d' }\n\n// The toString() method means you can automatically cast the object to a string without any issues\n\"duration is \" + duration;\n// -> duration is 1.5d\n\n// You can also specify to use a specific kind of units (metric or imperial, metric is default)\nconvert(3.5, \"km\").to(\"best\"); // -> { quantity: 3.5, unit: 'km', toString: () => '3.5 km' }\nconvert(3.5, \"km\").to(\"best\", \"metric\"); // -> { quantity: 3.5, unit: 'km', toString: () => '3.5 km' }\nconvert(3.5, \"km\").to(\"best\", \"imperial\"); // -> { quantity: 2.17, unit: 'mi', toString: () => '3.5 mi' }\n```\n\n----------------------------------------\n\nTITLE: Using ms Shorthand for Millisecond Conversions (TypeScript and JavaScript)\nDESCRIPTION: These TypeScript code snippets illustrate the use of the `ms` shorthand import from Convert. The function converts a string describing a duration (e.g. '1d 2h 30min') into total milliseconds, or transforms a numeric millisecond value into a human-readable string. Both import styles (ESM and CJS) are supported.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/README.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ms } from \"convert\";\nconst { ms } = require(\"convert\");\n\n// Convert a duration into milliseconds\nms(\"1d 2h 30min\");\n// -> 95400000\n\n// Convert milliseconds to a string\nms(86400000);\n// -> '1d'\n```\n\n----------------------------------------\n\nTITLE: Batch Conversion with convertMany (TypeScript and JavaScript)\nDESCRIPTION: These code snippets illustrate how to import `convertMany` from the Convert library and use it to parse compound time strings and convert them into a target unit like milliseconds. Both ESM and CJS import patterns are demonstrated. The input supports compact durations (e.g., '1d8h'), and the output will be a numeric value representing the total duration in the specified unit.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/README.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { convertMany } from \"convert\";\nconst { convertMany } = require(\"convert\");\n\n// Convert 1 day and 8 hours into ms\nconvertMany(\"1d8h\").to(\"ms\");\n```\n\n----------------------------------------\n\nTITLE: Installing and Importing Convert (JavaScript and CommonJS)\nDESCRIPTION: These code snippets show best practices for importing the Convert library in both CommonJS and ESM JavaScript environments, following installation via npm or yarn. They allow access to the `convert` function in Node.js and modern build environments.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// CommonJS\nconst { convert } = require(\"convert\");\n\n// ESM\nimport convert from \"convert\";\n```\n\n----------------------------------------\n\nTITLE: Installing Convert via npm or yarn (Shell)\nDESCRIPTION: These shell commands show how to install the Convert library using either npm or yarn. It is a prerequisite step for using Convert in JavaScript or TypeScript projects. The package will then be available to import in your local code, supporting both ESM and CommonJS environments.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install convert\n# or\nyarn add convert\n```\n\n----------------------------------------\n\nTITLE: Using Convert in the Browser via CDN with ES Modules (HTML)\nDESCRIPTION: These HTML examples demonstrate importing the Convert library directly from CDN as an ES Module inside a script tag. Multiple popular CDN providers are supported. After import, the convert function is usable directly in browser environments supporting ES Modules. No build tools or package managers are required but browsers must support modules.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/README.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n\timport convert from \"https://cdn.skypack.dev/convert@5\";\n\timport convert from \"https://esm.run/convert@5\";\n\timport convert from \"https://cdn.jsdelivr.net/npm/convert@5\";\n\timport convert from \"https://unpkg.com/convert@5\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Including Convert via UMD Globals from CDN (HTML)\nDESCRIPTION: These HTML snippets demonstrate how to include the UMD build of the Convert library directly from a CDN, making its global variable accessible in standard and legacy browser contexts. No module imports are needed, but global variable naming conventions apply.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/README.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/convert@5/dist/index.js\"></script>\n<script src=\"https://unpkg.com/convert@5/dist/index.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Distance Unit Aliases - TypeScript\nDESCRIPTION: Provides a union type covering all accepted text and abbreviation forms of common distance units, including metric, imperial, astronomical, and typographical (such as meter, foot, inch, light-year, pica). Ensures only permitted names are used for distance specification. Intended for static typing and autocompletion in a unit conversion library with no code-side dependencies beyond TypeScript.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/docs/convert.api.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n'meter' | 'meters' | 'metre' | 'metres' | 'm' | 'petameter' | 'petametre' | 'petameters' | 'petametres' | 'Pm' | 'terameter' | 'terametre' | 'terameters' | 'terametres' | 'Tm' | 'gigameter' | 'gigametre' | 'gigameters' | 'gigametres' | 'Gm' | 'megameter' | 'megametre' | 'megameters' | 'megametres' | 'Mm' | 'kilometer' | 'kilometre' | 'kilometers' | 'kilometres' | 'km' | 'hectometer' | 'hectometre' | 'hectometers' | 'hectometres' | 'hm' | 'decameter' | 'decametre' | 'decameters' | 'decametres' | 'dam' | 'decimeter' | 'decimetre' | 'decimeters' | 'decimetres' | 'dm' | 'centimeter' | 'centimetre' | 'centimeters' | 'centimetres' | 'cm' | 'millimeter' | 'millimetre' | 'millimeters' | 'millimetres' | 'mm' | 'micrometer' | 'micrometre' | 'micrometers' | 'micrometres' | 'μm' | 'µm' | 'nanometer' | 'nanometre' | 'nanometers' | 'nanometres' | 'nm' | 'picometer' | 'picometre' | 'picometers' | 'picometres' | 'pm' | 'femtometer' | 'femtometre' | 'femtometers' | 'femtometres' | 'fm' | 'foot' | 'feet' | 'ft' | '\\'' | 'US survey foot' | 'US survey feet' | 'U.S. survey foot' | 'U.S. survey feet' | 'inch' | 'inches' | 'in' | '\\\"' | 'yard' | 'yards' | 'yd' | 'mile' | 'miles' | 'mi' | 'nautical mile' | 'nautical miles' | 'M' | 'NM' | 'nmi' | 'light-year' | 'light-years' | 'ly' | 'pica' | 'picas' | 'pc' | 'point' | 'points';\n```\n\n----------------------------------------\n\nTITLE: Defining Mass Unit Aliases - TypeScript\nDESCRIPTION: Enumerates all recognized strings for mass units, including abbreviations, alternate spellings, and pluralizations (gram, kilogram, tonne, pound, ounce, short ton, troy ounce, etc.). Used for strict type checking of mass unit references. This enhances developer correctness and usage clarity, and it is only dependent on TypeScript compilation.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/docs/convert.api.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n'gram' | 'grams' | 'g' | 'petagram' | 'petagrams' | 'Pg' | 'teragram' | 'teragrams' | 'Tg' | 'gigagram' | 'gigagrams' | 'Gg' | 'megagram' | 'megagrams' | 'Mg' | 'kilogram' | 'kilograms' | 'kg' | 'hectogram' | 'hectograms' | 'hg' | 'decagram' | 'decagrams' | 'dag' | 'decigram' | 'decigrams' | 'dg' | 'centigram' | 'centigrams' | 'cg' | 'milligram' | 'milligrams' | 'mg' | 'microgram' | 'micrograms' | 'μg' | 'µg' | 'nanogram' | 'nanograms' | 'ng' | 'picogram' | 'picograms' | 'pg' | 'femtogram' | 'femtograms' | 'fg' | 'tonne' | 'tonnes' | 'metric ton' | 'metric tons' | 't' | 'kilotonne' | 'kilotonnes' | 'kt' | 'megatonne' | 'megatonnes' | 'Mt' | 'gigatonne' | 'gigatonnes' | 'Gt' | 'pound' | 'pounds' | 'lb' | 'lbs' | 'stone' | 'stones' | 'st' | 'ounce' | 'ounces' | 'oz' | 'short ton' | 'short tons' | 'US ton' | 'US tons' | 'long ton' | 'long tons' | 'imperial ton' | 'imperial tons' | 'displacement ton' | 'displacement tons' | 'troy ounce' | 'oz t' | 'toz';\n```\n\n----------------------------------------\n\nTITLE: Defining Time Unit Aliases - TypeScript\nDESCRIPTION: Declares a TypeScript union of all accepted labels for time intervals (second, minute, hour, day, week, year, moment, shake, etc.), allowing for pluralizations, abbreviations, and some historical or niche units. Used to enforce that only supported time strings are accepted in time conversion APIs. No dependencies besides the TypeScript compiler.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/docs/convert.api.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n'second' | 'seconds' | 's' | 'petasecond' | 'petaseconds' | 'Ps' | 'terasecond' | 'teraseconds' | 'Ts' | 'gigasecond' | 'gigaseconds' | 'Gs' | 'megasecond' | 'megaseconds' | 'Ms' | 'kilosecond' | 'kiloseconds' | 'ks' | 'hectosecond' | 'hectoseconds' | 'hs' | 'decasecond' | 'decaseconds' | 'das' | 'decisecond' | 'deciseconds' | 'ds' | 'centisecond' | 'centiseconds' | 'cs' | 'millisecond' | 'milliseconds' | 'ms' | 'microsecond' | 'microseconds' | 'μs' | 'µs' | 'nanosecond' | 'nanoseconds' | 'ns' | 'picosecond' | 'picoseconds' | 'ps' | 'femtosecond' | 'femtoseconds' | 'fs' | 'minute' | 'minutes' | 'min' | 'hour' | 'hours' | 'h' | 'milliday' | 'millidays' | 'md' | 'day' | 'days' | 'd' | 'week' | 'weeks' | 'wk' | 'fortnight' | 'fortnights' | 'fn' | 'month' | 'months' | 'mo' | 'year' | 'years' | 'a' | 'y' | 'yr' | 'decade' | 'decades' | 'dec' | 'century' | 'centuries' | 'millennium' | 'millennia' | 'moment' | 'moments' | 'shake' | 'shakes' | 'time unit' | 'TU' | 'svedberg' | 'svedbergs' | 'S';\n```\n\n----------------------------------------\n\nTITLE: Defining Pressure Unit Aliases - TypeScript\nDESCRIPTION: Defines a comprehensive union type of valid string identifiers for pressure units, including SI (pascal, bar), barometric, imperial (psi, inHg), and other units like atmosphere and torr. Accepts different spellings, plural forms, and abbreviations, enabling robust validation and type checking for pressure units, with TypeScript tooling support.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/docs/convert.api.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n'pascal' | 'pascals' | 'Pa' | 'petapascal' | 'petapascals' | 'PPa' | 'terapascal' | 'terapascals' | 'TPa' | 'gigapascal' | 'gigapascals' | 'GPa' | 'megapascal' | 'megapascals' | 'MPa' | 'kilopascal' | 'kilopascals' | 'kPa' | 'hectopascal' | 'hectopascals' | 'hPa' | 'decapascal' | 'decapascals' | 'daPa' | 'decipascal' | 'decipascals' | 'dPa' | 'centipascal' | 'centipascals' | 'cPa' | 'millipascal' | 'millipascals' | 'mPa' | 'micropascal' | 'micropascals' | 'μPa' | 'µPa' | 'nanopascal' | 'nanopascals' | 'nPa' | 'picopascal' | 'picopascals' | 'pPa' | 'femtopascal' | 'femtopascals' | 'fPa' | 'bar' | 'bars' | 'petabar' | 'petabars' | 'Pbar' | 'terabar' | 'terabars' | 'Tbar' | 'gigabar' | 'gigabars' | 'Gbar' | 'megabar' | 'megabars' | 'Mbar' | 'kilobar' | 'kilobars' | 'kbar' | 'hectobar' | 'hectobars' | 'hbar' | 'decabar' | 'decabars' | 'dabar' | 'decibar' | 'decibars' | 'dbar' | 'centibar' | 'centibars' | 'cbar' | 'millibar' | 'millibars' | 'mbar' | 'microbar' | 'microbars' | 'μbar' | 'µbar' | 'nanobar' | 'nanobars' | 'nbar' | 'picobar' | 'picobars' | 'pbar' | 'femtobar' | 'femtobars' | 'fbar' | 'torr' | 'torrs' | 'Torr' | 'millitorr' | 'mTorr' | 'atmosphere' | 'atmospheres' | 'atm' | 'pound per square inch' | 'pounds per square inch' | 'psi' | 'lbf/in2' | 'lbf/in²' | 'inch of water' | 'inches of water' | 'inAq' | 'Aq' | 'inch of mercury' | 'inches of mercury' | 'inHg' | 'Hg';\n```\n\n----------------------------------------\n\nTITLE: Defining Temperature Unit Aliases - TypeScript\nDESCRIPTION: Enumerates all supported spellings, abbreviations, and forms for temperature units (kelvin, celsius, fahrenheit, rankine, etc.). This type constrains temperature unit strings to a predefined safe set, improving input validation in conversion calculations. Requires only TypeScript's type system.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/docs/convert.api.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n'kelvin' | 'kelvins' | 'K' | 'petakelvin' | 'petakelvins' | 'PK' | 'terakelvin' | 'terakelvins' | 'TK' | 'gigakelvin' | 'gigakelvins' | 'GK' | 'megakelvin' | 'megakelvins' | 'MK' | 'kilokelvin' | 'kilokelvins' | 'kK' | 'hectokelvin' | 'hectokelvins' | 'hK' | 'decakelvin' | 'decakelvins' | 'daK' | 'decikelvin' | 'decikelvins' | 'dK' | 'centikelvin' | 'centikelvins' | 'cK' | 'millikelvin' | 'millikelvins' | 'mK' | 'microkelvin' | 'microkelvins' | 'μK' | 'µK' | 'nanokelvin' | 'nanokelvins' | 'nK' | 'picokelvin' | 'picokelvins' | 'pK' | 'femtokelvin' | 'femtokelvins' | 'fK' | 'fahrenheit' | 'F' | 'celsius' | 'C' | '°C' | 'rankine' | 'R';\n```\n\n----------------------------------------\n\nTITLE: Defining Power Unit Aliases - TypeScript\nDESCRIPTION: Lists string union types for all accepted power unit names and abbreviations (watt, kilowatt, horsepower, etc.). This makes the set of valid input strings for power explicit and enforces typing discipline when creating conversion functions. Relies on TypeScript for enforcement, with no runtime requirements.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/docs/convert.api.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n'watt' | 'watts' | 'W' | 'petawatt' | 'petawatts' | 'PW' | 'terawatt' | 'terawatts' | 'TW' | 'gigawatt' | 'gigawatts' | 'GW' | 'megawatt' | 'megawatts' | 'MW' | 'kilowatt' | 'kilowatts' | 'kW' | 'hectowatt' | 'hectowatts' | 'hW' | 'decawatt' | 'decawatts' | 'daW' | 'deciwatt' | 'deciwatts' | 'dW' | 'centiwatt' | 'centiwatts' | 'cW' | 'milliwatt' | 'milliwatts' | 'mW' | 'microwatt' | 'microwatts' | 'μW' | 'µW' | 'nanowatt' | 'nanowatts' | 'nW' | 'picowatt' | 'picowatts' | 'pW' | 'femtowatt' | 'femtowatts' | 'fW' | 'horsepower' | 'mechanical horsepower' | 'hp';\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Unit Literals in TypeScript\nDESCRIPTION: Defines a TypeScript union type containing numerous string literals representing various metric and imperial volume units (e.g., 'cubic meter', 'liter', 'gallon', 'cubic foot') along with their abbreviations and variations. This is likely part of a larger type structure (potentially keyed by a numeric identifier like `11` within an object or enum) mapping measure kinds to their possible units for the 'convert' library.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/docs/convert.api.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n    11: 'cubic meter' | 'cubic meters' | 'cubic metre' | 'cubic metres' | 'stere' | 'steres' | 'm³' | 'm3' | 'cubic petameter' | 'cubic petameters' | 'Pm3' | 'Pm³' | 'cubic terameter' | 'cubic terameters' | 'Tm3' | 'Tm³' | 'cubic gigameter' | 'cubic gigameters' | 'Gm3' | 'Gm³' | 'cubic megameter' | 'cubic megameters' | 'Mm3' | 'Mm³' | 'cubic kilometer' | 'cubic kilometers' | 'km3' | 'km³' | 'cubic hectometer' | 'cubic hectometers' | 'hm3' | 'hm³' | 'cubic decameter' | 'cubic decameters' | 'dam3' | 'dam³' | 'cubic decimeter' | 'cubic decimeters' | 'dm3' | 'dm³' | 'cubic centimeter' | 'cubic centimeters' | 'cm3' | 'cm³' | 'cubic millimeter' | 'cubic millimeters' | 'mm3' | 'mm³' | 'cubic micrometer' | 'cubic micrometers' | 'μm3' | 'µm3' | 'μm³' | 'µm³' | 'cubic nanometer' | 'cubic nanometers' | 'nm3' | 'nm³' | 'cubic picometer' | 'cubic picometers' | 'pm3' | 'pm³' | 'cubic femtometer' | 'cubic femtometers' | 'fm3' | 'fm³' | 'liter' | 'liters' | 'litre' | 'litres' | 'l' | 'L' | 'petaliter' | 'petaliters' | 'petalitre' | 'petalitres' | 'Pl' | 'PL' | 'teraliter' | 'teraliters' | 'teralitre' | 'teralitres' | 'Tl' | 'TL' | 'gigaliter' | 'gigaliters' | 'gigalitre' | 'gigalitres' | 'Gl' | 'GL' | 'megaliter' | 'megaliters' | 'megalitre' | 'megalitres' | 'Ml' | 'ML' | 'kiloliter' | 'kiloliters' | 'kilolitre' | 'kilolitres' | 'kl' | 'kL' | 'hectoliter' | 'hectoliters' | 'hectolitre' | 'hectolitres' | 'hl' | 'hL' | 'decaliter' | 'decaliters' | 'decalitre' | 'decalitres' | 'dal' | 'daL' | 'deciliter' | 'deciliters' | 'decilitre' | 'decilitres' | 'dl' | 'dL' | 'centiliter' | 'centiliters' | 'centilitre' | 'centilitres' | 'cl' | 'cL' | 'milliliter' | 'milliliters' | 'millilitre' | 'millilitres' | 'ml' | 'mL' | 'microliter' | 'microliters' | 'microlitre' | 'microlitres' | 'μl' | 'µl' | 'μL' | 'µL' | 'nanoliter' | 'nanoliters' | 'nanolitre' | 'nanolitres' | 'nl' | 'nL' | 'picoliter' | 'picoliters' | 'picolitre' | 'picolitres' | 'pl' | 'pL' | 'femtoliter' | 'femtoliters' | 'femtolitre' | 'femtolitres' | 'fl' | 'fL' | 'cubic mile' | 'cubic miles' | 'cu mi' | 'mi3' | 'mi³' | 'acre-foot' | 'acre-feet' | 'ac⋅ft' | 'ac ft' | 'cubic yard' | 'cubic yards' | 'cu yd' | 'yd3' | 'yd³' | 'cubic foot' | 'cubic feet' | 'cu ft' | 'ft3' | 'ft³' | 'board foot' | 'board feet' | 'cubic inch' | 'cubic inches' | 'cu in' | 'in3' | 'in³' | 'measurement ton' | 'measurement tons' | 'MTON' | 'imperial barrel' | 'imperial barrels' | 'imp bbl' | 'imperial bushel' | 'imperial bushels' | 'imp bsh' | 'imp bu' | 'imperial peck' | 'imperial pecks' | 'pk' | 'imp pk' | 'imperial gallon' | 'imperial gallons' | 'imp gal' | 'imperial quart' | 'imperial quarts' | 'imp qt' | 'imperial pint' | 'imperial pints' | 'imp pt' | 'imperial fluid ounce' | 'imperial fluid ounces' | 'imp fl oz' | 'teaspoon' | 'teaspoons' | 'US teaspoon' | 'US teaspoons' | 'tsp' | 'tablespoon' | 'tablespoons' | 'US tablespoon' | 'US tablespoons' | 'tbsp' | 'US fluid ounce' | 'US fluid ounces' | 'fl oz' | 'fl. oz.' | 'oz. fl.' | 'cup' | 'cups' | 'c' | 'US legal cup' | 'US legal cups' | 'US lc' | 'pint' | 'pints' | 'US liquid pint' | 'US liquid pints' | 'pt' | 'p' | 'quart' | 'quarts' | 'US liquid quart' | 'US liquid quarts' | 'qt' | 'gallon' | 'gallons' | 'US liquid gallon' | 'US liquid gallons' | 'gal' | 'US bushel' | 'US bushels' | 'US bsh' | 'US bu' | 'US peck' | 'US pk' | 'US dry gallon' | 'US dry gal' | 'US dry barrel' | 'US dry barrels' | 'US dry bbl' | 'US dry quart' | 'US dry qt' | 'US dry pint' | 'US dry pt';\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Volume Type Definition in TypeScript\nDESCRIPTION: Exports a public TypeScript type alias named `Volume`. This type leverages the generic `UnitsByMeasure` type, specifically parameterized with `MeasureKind.Volume` (presumably an enum or similar construct), to represent the set of all valid volume units supported by the library, based on the unit literals defined elsewhere. The preceding comment indicates it's intended for public API usage.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/docs/convert.api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type Volume = UnitsByMeasure<MeasureKind.Volume>;\n```\n\n----------------------------------------\n\nTITLE: Defining Force Unit Aliases - TypeScript\nDESCRIPTION: Specifies a TypeScript string literal union for force units and their aliases. This type includes SI units like newton in various uppercase/lowercase forms, plus non-SI such as dyne, pound-force, kip, poundal, kilogram-force, and tonne-force. Ensures only recognized aliases are allowed when referencing force units in the codebase, reducing runtime errors and simplifying input validation. No runtime dependencies; requires TypeScript support.\nSOURCE: https://github.com/jonahsnider/convert/blob/main/docs/convert.api.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n'newton' | 'newtons' | 'N' | 'petanewton' | 'petanewtons' | 'PN' | 'teranewton' | 'teranewtons' | 'TN' | 'giganewton' | 'giganewtons' | 'GN' | 'meganewton' | 'meganewtons' | 'MN' | 'kilonewton' | 'kilonewtons' | 'kN' | 'hectonewton' | 'hectonewtons' | 'hN' | 'decanewton' | 'decanewtons' | 'daN' | 'decinewton' | 'decinewtons' | 'dN' | 'centinewton' | 'centinewtons' | 'cN' | 'millinewton' | 'millinewtons' | 'mN' | 'micronewton' | 'micronewtons' | 'μN' | 'µN' | 'nanonewton' | 'nanonewtons' | 'nN' | 'piconewton' | 'piconewtons' | 'pN' | 'femtonewton' | 'femtonewtons' | 'fN' | 'dyne' | 'dynes' | 'dyn' | 'pound of force' | 'pound-force' | 'lbf' | 'kip' | 'klb' | 'kipf' | 'klbf' | 'poundal' | 'poundals' | 'pdl' | 'kilogram-force' | 'kilopond' | 'kiloponds' | 'kgf' | 'kp' | 'tonne-force' | 'metric ton-force' | 'megagram-force' | 'megapond' | 'tf' | 'Mp';\n```"
  }
]