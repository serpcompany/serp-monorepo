[
  {
    "owner": "bluesky-social",
    "repo": "atproto",
    "content": "TITLE: Using RichText for Text Processing in TypeScript\nDESCRIPTION: Demonstrates how to use the RichText library for handling rich text, including detecting mentions and links, rendering as markdown, and calculating string lengths.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RichText } from '@atproto/api'\n\n// creating richtext\nconst rt = new RichText({\n  text: 'Hello @alice.com, check out this link: https://example.com',\n})\nawait rt.detectFacets(agent) // automatically detects mentions and links\nconst postRecord = {\n  $type: 'app.bsky.feed.post',\n  text: rt.text,\n  facets: rt.facets,\n  createdAt: new Date().toISOString(),\n}\n\n// rendering as markdown\nlet markdown = ''\nfor (const segment of rt.segments()) {\n  if (segment.isLink()) {\n    markdown += `[${segment.text}](${segment.link?.uri})`\n  } else if (segment.isMention()) {\n    markdown += `[${segment.text}](https://my-bsky-app.com/user/${segment.mention?.did})`\n  } else {\n    markdown += segment.text\n  }\n}\n\n// calculating string lengths\nconst rt2 = new RichText({ text: 'Hello' })\nconsole.log(rt2.length) // => 5\nconsole.log(rt2.graphemeLength) // => 5\nconst rt3 = new RichText({ text: '👨‍👩‍👧‍👧' })\nconsole.log(rt3.length) // => 25\nconsole.log(rt3.graphemeLength) // => 1\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Lexicon Schema Validation\nDESCRIPTION: Demonstrates how to create a Lexicons collection, add schema documents, and perform various validation checks on records and XRPC operations. The example shows core validation methods including assertValidRecord, assertValidXrpcParams, assertValidXrpcInput, and assertValidXrpcOutput.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/lexicon/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Lexicons } from '@atproto/lexicon'\n\n// create your lexicons collection\nconst lex = new Lexicons()\n\n// add lexicon documents\nlex.add({\n  lex: 1,\n  id: 'com.example.post',\n  defs: {\n    // ...\n  }\n})\n\n// validate\nlex.assertValidRecord('com.example.record', {$type: 'com.example.record', ...})\nlex.assertValidXrpcParams('com.example.query', {...})\nlex.assertValidXrpcInput('com.example.procedure', {...})\nlex.assertValidXrpcOutput('com.example.query', {...})\n```\n\n----------------------------------------\n\nTITLE: Implementing AT Protocol XRPC Server with Express\nDESCRIPTION: Demonstrates how to create an XRPC server with Lexicon schema validation and integrate it with Express.js. The example shows defining a lexicon for a ping endpoint, creating the server, implementing a handler function, and mounting it in an Express application.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LexiconDoc } from '@atproto/lexicon'\nimport * as xrpc from '@atproto/xrpc-server'\nimport express from 'express'\n\nconst lexicons: LexiconDoc[] = [\n  {\n    lexicon: 1,\n    id: 'io.example.ping',\n    defs: {\n      main: {\n        type: 'query',\n        parameters: {\n          type: 'params',\n          properties: { message: { type: 'string' } },\n        },\n        output: {\n          encoding: 'application/json',\n        },\n      },\n    },\n  },\n]\n\n// create xrpc server\nconst server = xrpc.createServer(lexicons)\n\nfunction ping(ctx: {\n  auth: xrpc.HandlerAuth | undefined\n  params: xrpc.Params\n  input: xrpc.HandlerInput | undefined\n  req: express.Request\n  res: express.Response\n}) {\n  return { encoding: 'application/json', body: { message: ctx.params.message } }\n}\n\nserver.method('io.example.ping', ping)\n\n// mount in express\nconst app = express()\napp.use(server.router)\napp.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Advanced API Calls in TypeScript\nDESCRIPTION: Demonstrates how to make advanced API calls using the AT Protocol's reverse-DNS method names for creating and listing records.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst res1 = await agent.com.atproto.repo.createRecord({\n  did: alice.did,\n  collection: 'app.bsky.feed.post',\n  record: {\n    $type: 'app.bsky.feed.post',\n    text: 'Hello, world!',\n    createdAt: new Date().toISOString(),\n  },\n})\nconst res2 = await agent.com.atproto.repo.listRecords({\n  repo: alice.did,\n  collection: 'app.bsky.feed.post',\n})\n\nconst res3 = await agent.app.bsky.feed.post.create(\n  { repo: alice.did },\n  {\n    text: 'Hello, world!',\n    createdAt: new Date().toISOString(),\n  },\n)\nconst res4 = await agent.app.bsky.feed.post.list({ repo: alice.did })\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fetch in AtProto Agent\nDESCRIPTION: Demonstrates how to instantiate an AtpAgent with a custom fetch implementation. The example shows a fetch wrapper that includes logging functionality for requests and responses. This is useful for environments without built-in fetch or when custom fetch behavior is needed.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AtpAgent } from '@atproto/api'\n\nconst myFetch = (input: RequestInfo | URL, init?: RequestInit) => {\n  console.log('requesting', input)\n  const response = await globalThis.fetch(input, init)\n  console.log('got response', response)\n  return response\n}\n\nconst agent = new AtpAgent({\n  service: 'https://example.com',\n  fetch: myFetch,\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Moderation Preferences Using Agent API\nDESCRIPTION: Demonstrates how to fetch moderation preferences using the agent.getPreferences() method and apply them to moderate a post.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/docs/moderation.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prefs = await agent.getPreferences()\nmoderatePost(post, {\n  userDid: /*...*/,\n  prefs: prefs.moderationPrefs,\n  labelDefs: /*...*/\n})\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Using ApiClient Methods with Atproto API - TypeScript\nDESCRIPTION: This code demonstrates restoring a user session with an OAuth client, creating an agent instance, and utilizing the Agent's methods for interacting with feeds, posts, social graph, actors, notifications, and identity endpoints. Dependencies include '@atproto/api' and an authenticated client instance that supports session restoration. Key parameters include various API method parameters and options. The pattern ensures credentials are refreshed automatically and emphasizes the importance of revoking credentials at the end of the session. Expected outputs are responses or promises returned by each method, while limitations may include error handling and session lifecycle management.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/README.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst session = await client.restore('did:plc:123')\\nconst agent = new Agent(session)\\n\\n// Feeds and content\\nawait agent.getTimeline(params, opts)\\nawait agent.getAuthorFeed(params, opts)\\nawait agent.getPostThread(params, opts)\\nawait agent.getPost(params)\\nawait agent.getPosts(params, opts)\\nawait agent.getLikes(params, opts)\\nawait agent.getRepostedBy(params, opts)\\nawait agent.post(record)\\nawait agent.deletePost(postUri)\\nawait agent.like(uri, cid)\\nawait agent.deleteLike(likeUri)\\nawait agent.repost(uri, cid)\\nawait agent.deleteRepost(repostUri)\\nawait agent.uploadBlob(data, opts)\\n\\n// Social graph\\nawait agent.getFollows(params, opts)\\nawait agent.getFollowers(params, opts)\\nawait agent.follow(did)\\nawait agent.deleteFollow(followUri)\\n\\n// Actors\\nawait agent.getProfile(params, opts)\\nawait agent.upsertProfile(updateFn)\\nawait agent.getProfiles(params, opts)\\nawait agent.getSuggestions(params, opts)\\nawait agent.searchActors(params, opts)\\nawait agent.searchActorsTypeahead(params, opts)\\nawait agent.mute(did)\\nawait agent.unmute(did)\\nawait agent.muteModList(listUri)\\nawait agent.unmuteModList(listUri)\\nawait agent.blockModList(listUri)\\nawait agent.unblockModList(listUri)\\n\\n// Notifications\\nawait agent.listNotifications(params, opts)\\nawait agent.countUnreadNotifications(params, opts)\\nawait agent.updateSeenNotifications()\\n\\n// Identity\\nawait agent.resolveHandle(params, opts)\\nawait agent.updateHandle(params, opts)\\n\\n// etc.\\n\\n// Always remember to revoke the credentials when you are done\\nawait session.signOut()\n```\n\n----------------------------------------\n\nTITLE: Migrating from Legacy XRPC Client to XrpcClient with Custom Logic\nDESCRIPTION: Comparison showing how to migrate from the deprecated Client/ServiceClient pattern to the new XrpcClient class, including custom request logic, header setting, and service configuration.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport client, { defaultFetchHandler } from \"@atproto/xrpc\";\n\nclient.fetch = function (\n  httpUri: string,\n  httpMethod: string,\n  httpHeaders: Headers,\n  httpReqBody: unknown,\n) {\n  // Custom logic here\n  return defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody);\n};\n\nclient.addLexicon({\n  lexicon: 1,\n  id: \"io.example.doStuff\",\n  defs: {},\n});\n\nconst instance = client.service(\"http://my-service.com\");\n\ninstance.setHeader(\"my-header\", \"my-value\");\n\nawait instance.call(\"io.example.doStuff\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XrpcClient } from \"@atproto/xrpc\";\n\nconst instance = new XrpcClient(\n  async (url, init) => {\n    const headers = new Headers(init.headers);\n\n    headers.set(\"my-header\", \"my-value\");\n\n    // Custom logic here\n\n    const fullUrl = new URL(url, \"http://my-service.com\");\n\n    return fetch(fullUrl, { ...init, headers });\n  },\n  [\n    {\n      lexicon: 1,\n      id: \"io.example.doStuff\",\n      defs: {},\n    },\n  ],\n);\n\nawait instance.call(\"io.example.doStuff\");\n```\n\n----------------------------------------\n\nTITLE: Managing Sessions with AtpAgent in TypeScript\nDESCRIPTION: Demonstrates various methods of session management using AtpAgent, including creating an account, resuming a session, and logging in.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AtpAgent, AtpSessionEvent, AtpSessionData } from '@atproto/api'\n\nconst agent = new AtpAgent({\n  service: 'https://example.com',\n  persistSession: (evt: AtpSessionEvent, sess?: AtpSessionData) => {\n    // store the session-data for reuse\n  },\n})\n\n// 1) creating a new account on the server.\nawait agent.createAccount({\n  email: 'alice@mail.com',\n  password: 'hunter2',\n  handle: 'alice.example.com',\n  inviteCode: 'some-code-12345-abcde',\n})\n\n// 2) if an existing session was securely stored previously, then reuse that to resume the session.\nawait agent.resumeSession(savedSessionData)\n\n// 3) if no old session was available, create a new one by logging in with password (App Password)\nawait agent.login({\n  identifier: 'alice@mail.com',\n  password: 'hunter2',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Firehose Implementation in TypeScript\nDESCRIPTION: Demonstrates basic setup and usage of the Firehose class for handling different types of events from the atproto network. Shows event handling for identity, account, create, update, and delete events with error handling and collection filtering.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/sync/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Firehose } from '@atproto/sync'\nimport { IdResolver } from '@atproto/identity'\n\nconst idResolver = new IdResolver()\nconst firehose = new Firehose({\n  idResolver,\n  service: 'wss://bsky.network',\n  handleEvt: async (evt) => {\n    if (evt.event === 'identity') {\n      // ...\n    } else if (evt.event === 'account') {\n      // ...\n    } else if (evt.event === 'create') {\n      // ...\n    } else if (evt.event === 'update') {\n      // ...\n    } else if (evt.event === 'delete') {\n      // ...\n    }\n  },\n  onError: (err) => {\n    console.error(err)\n  },\n  filterCollections: ['com.myexample.app'],\n})\nfirehose.start()\n\n// on service shutdown\nawait firehose.destroy()\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Client for Backend Service in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up and configure the NodeOAuthClient for a backend service. It includes client metadata configuration, key management, and storage interfaces for state and sessions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeOAuthClient, Session } from '@atproto/oauth-client-node'\nimport { JoseKey } from '@atproto/jwk-jose'\n\nconst client = new NodeOAuthClient({\n  clientMetadata: {\n    client_id: 'https://my-app.com/client-metadata.json',\n    client_name: 'My App',\n    client_uri: 'https://my-app.com',\n    logo_uri: 'https://my-app.com/logo.png',\n    tos_uri: 'https://my-app.com/tos',\n    policy_uri: 'https://my-app.com/policy',\n    redirect_uris: ['https://my-app.com/callback'],\n    grant_types: ['authorization_code', 'refresh_token'],\n    response_types: ['code'],\n    application_type: 'web',\n    token_endpoint_auth_method: 'private_key_jwt',\n    dpop_bound_access_tokens: true,\n    jwks_uri: 'https://my-app.com/jwks.json',\n  },\n\n  keyset: await Promise.all([\n    JoseKey.fromImportable(process.env.PRIVATE_KEY_1),\n    JoseKey.fromImportable(process.env.PRIVATE_KEY_2),\n    JoseKey.fromImportable(process.env.PRIVATE_KEY_3),\n  ]),\n\n  stateStore: {\n    async set(key: string, internalState: NodeSavedState): Promise<void> {},\n    async get(key: string): Promise<NodeSavedState | undefined> {},\n    async del(key: string): Promise<void> {},\n  },\n\n  sessionStore: {\n    async set(sub: string, session: Session): Promise<void> {},\n    async get(sub: string): Promise<Session | undefined> {},\n    async del(sub: string): Promise<void> {},\n  },\n\n  requestLock,\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Moderation in TypeScript\nDESCRIPTION: Demonstrates how to use the moderation system to handle various moderation tasks, including filtering, blurring, and displaying warnings for posts.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { moderatePost } from '@atproto/api'\n\n// First get the user's moderation prefs and their label definitions\n// =\n\nconst prefs = await agent.getPreferences()\nconst labelDefs = await agent.getLabelDefinitions(prefs)\n\n// We call the appropriate moderation function for the content\n// =\n\nconst postMod = moderatePost(postView, {\n  userDid: agent.session.did,\n  moderationPrefs: prefs.moderationPrefs,\n  labelDefs,\n})\n\n// We then use the output to decide how to affect rendering\n// =\n\n// in feeds\nif (postMod.ui('contentList').filter) {\n  // don't include in feeds\n}\nif (postMod.ui('contentList').blur) {\n  // render the whole object behind a cover (use postMod.ui('contentList').blurs to explain)\n  if (postMod.ui('contentList').noOverride) {\n    // do not allow the cover the be removed\n  }\n}\nif (postMod.ui('contentList').alert || postMod.ui('contentList').inform) {\n  // render warnings on the post\n  // find the warnings in postMod.ui('contentList').alerts and postMod.ui('contentList').informs\n}\n\n// viewed directly\nif (postMod.ui('contentView').filter) {\n  // don't include in feeds\n}\nif (postMod.ui('contentView').blur) {\n  // render the whole object behind a cover (use postMod.ui('contentView').blurs to explain)\n  if (postMod.ui('contentView').noOverride) {\n    // do not allow the cover the be removed\n  }\n}\nif (postMod.ui('contentView').alert || postMod.ui('contentView').inform) {\n  // render warnings on the post\n  // find the warnings in postMod.ui('contentView').alerts and postMod.ui('contentView').informs\n}\n\n// post embeds in all contexts\nif (postMod.ui('contentMedia').blur) {\n  // render the whole object behind a cover (use postMod.ui('contentMedia').blurs to explain)\n  if (postMod.ui('contentMedia').noOverride) {\n    // do not allow the cover the be removed\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ATProto Crypto Library in TypeScript\nDESCRIPTION: Demonstrates how to generate keypairs, sign data, and verify signatures using the ATProto crypto library. Shows usage of both K-256 keypair generation and signature verification with did:key format.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/crypto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifySignature, Secp256k1Keypair, P256Keypair } from '@atproto/crypto'\n\n// generate a new random K-256 private key\nconst keypair = await Secp256k1Keypair.create({ exportable: true })\n\n// sign binary data, resulting signature bytes.\n// SHA-256 hash of data is what actually gets signed.\n// signature output is often base64-encoded.\nconst data = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8])\nconst sig = await keypair.sign(data)\n\n// serialize the public key as a did:key string, which includes key type metadata\nconst pubDidKey = keypair.did()\nconsole.log(pubDidKey)\n\n// output would look something like: 'did:key:zQ3shVRtgqTRHC7Lj4DYScoDgReNpsDp3HBnuKBKt1FSXKQ38'\n\n// verify signature using public key\nconst ok = verifySignature(pubDidKey, data, sig)\nif (!ok) {\n  throw new Error('Uh oh, something is fishy')\n} else {\n  console.log('Success')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Flow for atproto in TypeScript\nDESCRIPTION: This TypeScript code implements the OAuth flow for atproto, including initializing the OAuth client, handling authentication, and making authenticated API calls using the @atproto/api library.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/OAUTH.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from '@atproto/api'\nimport { BrowserOAuthClient } from '@atproto/oauth-client-browser'\n\nasync function main() {\n  const oauthClient = await BrowserOAuthClient.load({\n    clientId: '<YOUR_CLIENT_ID>',\n    handleResolver: 'https://bsky.social/',\n  })\n\n  const result = await oauthClient.init()\n\n  if (result) {\n    if ('state' in result) {\n      console.log('The user was just redirected back from the authorization page')\n    }\n\n    console.log(`The user is currently signed in as ${result.session.did}`)\n  }\n\n  const session = result?.session\n\n  if (!session) {\n    const handle = prompt('Enter your atproto handle to authenticate')\n    if (!handle) throw new Error('Authentication process canceled by the user')\n\n    const url = await oauthClient.authorize(handle)\n\n    // Redirect the user to the authorization page\n    window.open(url, '_self', 'noopener')\n\n    // Protect against browser's back-forward cache\n    await new Promise<never>((resolve, reject) => {\n      setTimeout(\n        reject,\n        10_000,\n        new Error('User navigated back from the authorization page'),\n      )\n    })\n  }\n\n  if (session) {\n    const agent = new Agent(session)\n\n    const fetchProfile = async () => {\n      const profile = await agent.getProfile({ actor: agent.did })\n      return profile.data\n    }\n\n    // Update the user interface\n\n    document.body.textContent = `Authenticated as ${agent.did}`\n\n    const profileBtn = document.createElement('button')\n    document.body.appendChild(profileBtn)\n    profileBtn.textContent = 'Fetch Profile'\n    profileBtn.onclick = async () => {\n      const profile = await fetchProfile()\n      outputPre.textContent = JSON.stringify(profile, null, 2)\n    }\n\n    const logoutBtn = document.createElement('button')\n    document.body.appendChild(logoutBtn)\n    logoutBtn.textContent = 'Logout'\n    logoutBtn.onclick = async () => {\n      await session.signOut()\n      window.location.reload()\n    }\n\n    const outputPre = document.createElement('pre')\n    document.body.appendChild(outputPre)\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', main)\n```\n\n----------------------------------------\n\nTITLE: Configuring App Labelers for BskyAgent\nDESCRIPTION: Shows how to configure custom application-level labelers for the BskyAgent, overriding the default Bluesky moderation service.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/docs/moderation.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nBskyAgent.configure({\n  appLabelers: ['did:web:my-labeler.com'],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Silent Sign-In with OAuth Callback and State Management - TypeScript\nDESCRIPTION: This code illustrates how to implement silent sign-in in a web application using retry logic on the OAuth callback. The logic attempts a silent authentication with 'prompt=none', manages user state across redirects, and falls back to interactive login if silent sign-in fails by catching specific errors. Dependencies are Express (or compatible) app, client with authorize/callback methods, and correct error/class types. Handles query-string state, manages redirections, and demonstrates safe error propagation; input is user session data, and outputs are redirected responses or signed-in sessions. Limitations include error classes and appropriate state serialization.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/README.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.get('/login', async (req, res) => {\\n  const handle = 'some-handle.bsky.social' // eg. from query string\\n  const user = req.user.id\\n\\n  const url = await client.authorize(handle, {\\n    // Use \\\"prompt=none\\\" to attempt silent sign-in\\n    prompt: 'none',\\n\\n    // Build an internal state to map the login request to the user, and allow retries\\n    state: JSON.stringify({\\n      user,\\n      handle,\\n    }),\\n  })\\n\\n  res.redirect(url)\\n})\\n\\napp.get('/atproto-oauth-callback', async (req, res) => {\\n  const params = new URLSearchParams(req.url.split('?')[1])\\n  try {\\n    try {\\n      const { session, state } = await client.callback(params)\\n\\n      // Process successful authentication here. For example:\\n\\n      const agent = new Agent(session)\\n\\n      const profile = await agent.getProfile({ actor: agent.did })\\n\\n      console.log('Bsky profile:', profile.data)\\n    } catch (err) {\\n      // Silent sign-in failed, retry without prompt=none\\n      if (\\n        err instanceof OAuthCallbackError &&\\n        ['login_required', 'consent_required'].includes(err.params.get('error'))\\n      ) {\\n        // Parse previous state\\n        const { user, handle } = JSON.parse(err.state)\\n\\n        const url = await client.authorize(handle, {\\n          // Note that we omit the prompt parameter here. Setting \\\"prompt=none\\\"\\n          // here would result in an infinite redirect loop.\\n\\n          // Build a new state (or re-use the previous one)\\n          state: JSON.stringify({\\n            user,\\n            handle,\\n          }),\\n        })\\n\\n        // redirect to new URL\\n        res.redirect(url)\\n\\n        return\\n      }\\n\\n      throw err\\n    }\\n  } catch (err) {\\n    next(err)\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Fetch Handler Implementation with Token Refresh\nDESCRIPTION: Shows how to implement a custom fetch handler with authentication token management and automatic token refresh functionality when receiving 401 unauthorized responses.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XrpcClient } from '@atproto/xrpc'\n\nconst session = {\n  serviceUrl: 'https://ping.example.com',\n  token: '<my-token>',\n  async refreshToken() {\n    const { token } = await fetch('https://auth.example.com/refresh', {\n      method: 'POST',\n      headers: { Authorization: `Bearer ${this.token}` },\n    }).then((res) => res.json())\n\n    this.token = token\n\n    return token\n  },\n}\n\nconst sessionBasedFetch: FetchHandler = async (\n  url: string,\n  init: RequestInit,\n) => {\n  const headers = new Headers(init.headers)\n\n  headers.set('Authorization', `Bearer ${session.token}`)\n\n  const response = await fetch(new URL(url, session.serviceUrl), {\n    ...init,\n    headers,\n  })\n\n  if (response.status === 401) {\n    // Refresh token, then try again.\n    const newToken = await session.refreshToken()\n    headers.set('Authorization', `Bearer ${newToken}`)\n    return fetch(new URL(url, session.serviceUrl), { ...init, headers })\n  }\n\n  return response\n}\n\nconst xrpc = new XrpcClient(sessionBasedFetch, [\n  // Any number of lexicon here\n  pingLexicon,\n])\n\n//\n```\n\n----------------------------------------\n\nTITLE: Extending AtpAgent for Custom User-Agent Handling in TypeScript\nDESCRIPTION: Demonstrates how to subclass AtpAgent to inject or append a User-Agent header into HTTP requests when interfacing with the atproto API. It conditionally uses a provided fetch implementation or falls back to the global fetch. The super constructor receives a fetch override that modifies headers before making the request, providing a hook to customize all outgoing traffic. This pattern is useful for instrumentation or platform-specific identification and requires @atproto/api as a dependency.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AtpAgent } from \"@atproto/api\";\n\nclass MyAtpAgent extends AtpAgent {\n  constructor(options: AtpAgentOptions) {\n    const fetch = options.fetch ?? globalThis.fetch;\n\n    super({\n      ...options,\n      fetch: async (url, init) => {\n        const headers = new Headers(init.headers);\n\n        const ua = headersList.get(\"User-Agent\");\n        headersList.set(\"User-Agent\", ua ? `${ua} ${userAgent}` : userAgent);\n\n        return fetch(url, { ...init, headers });\n      },\n    });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic XRPC Client Usage with Lexicon Schema\nDESCRIPTION: Demonstrates how to set up and use the XrpcClient with a Lexicon schema definition for making API calls. Shows the creation of a ping service schema and making a basic query call.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LexiconDoc } from '@atproto/lexicon'\nimport { XrpcClient } from '@atproto/xrpc'\n\nconst pingLexicon = {\n  lexicon: 1,\n  id: 'io.example.ping',\n  defs: {\n    main: {\n      type: 'query',\n      description: 'Ping the server',\n      parameters: {\n        type: 'params',\n        properties: { message: { type: 'string' } },\n      },\n      output: {\n        encoding: 'application/json',\n        schema: {\n          type: 'object',\n          required: ['message'],\n          properties: { message: { type: 'string' } },\n        },\n      },\n    },\n  },\n} satisfies LexiconDoc\n\nconst xrpc = new XrpcClient('https://ping.example.com', [\n  // Any number of lexicon here\n  pingLexicon,\n])\n\nconst res1 = await xrpc.call('io.example.ping', {\n  message: 'hello world',\n})\nres1.encoding // => 'application/json'\nres1.body // => {message: 'hello world'}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Client in TypeScript\nDESCRIPTION: Demonstrates the complete configuration of an OAuthClient instance including runtime implementation, state management, and key handling. Includes setup for both browser and Node.js environments.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuthClient, Key, Session } from '@atproto/oauth-client'\nimport { JoseKey } from '@atproto/jwk-jose' // NodeJS/Browser only\n\nconst client = new OAuthClient({\n  handleResolver: 'https://my-backend.example', // backend instances should use a DNS based resolver\n  responseMode: 'query', // or \"fragment\" (frontend only) or \"form_post\" (backend only)\n\n  // These must be the same metadata as the one exposed on the\n  // \"client_id\" endpoint (except when using a loopback client)\n  clientMetadata: {\n    client_id: 'https://my-app.example/atproto-oauth-client.json',\n    jwks_uri: 'https://my-app.example/jwks.json',\n  },\n\n  runtimeImplementation: {\n    createKey(algs: string[]): Promise<Key> {\n      return JoseKey.generate(algs)\n    },\n\n    getRandomValues(length: number): Uint8Array | PromiseLike<Uint8Array> {\n      return crypto.getRandomValues(new Uint8Array(length))\n    },\n\n    digest(\n      bytes: Uint8Array,\n      algorithm: { name: string },\n    ): Uint8Array | PromiseLike<Uint8Array> {\n      if (algorithm.name.startsWith('sha')) {\n        const subtleAlgo = `SHA-${algorithm.name.slice(3)}`\n        const buffer = await crypto.subtle.digest(subtleAlgo, bytes)\n        return new Uint8Array(buffer)\n      }\n\n      throw new TypeError(`Unsupported algorithm: ${algorithm.name}`)\n    },\n\n    requestLock: <T>(\n      name: string,\n      fn: () => T | PromiseLike<T>,\n    ): Promise<T> => {\n      declare const locks: Map<string, Promise<void>>\n\n      const current = locks.get(name) || Promise.resolve()\n      const next = current\n        .then(fn)\n        .catch(() => {})\n        .finally(() => {\n          if (locks.get(name) === next) locks.delete(name)\n        })\n\n      locks.set(name, next)\n      return next\n    },\n  },\n\n  stateStore: {\n    set(key: string, internalState: InternalStateData): Promise<void> {\n      throw new Error('Not implemented')\n    },\n    get(key: string): Promise<InternalStateData | undefined> {\n      throw new Error('Not implemented')\n    },\n    del(key: string): Promise<void> {\n      throw new Error('Not implemented')\n    },\n  },\n\n  sessionStore: {\n    set(sub: string, session: Session): Promise<void> {\n      throw new Error('Not implemented')\n    },\n    get(sub: string): Promise<Session | undefined> {\n      throw new Error('Not implemented')\n    },\n    del(sub: string): Promise<void> {\n      throw new Error('Not implemented')\n    },\n  },\n\n  keyset: [\n    await JoseKey.fromImportable(process.env.PRIVATE_KEY_1),\n    await JoseKey.fromImportable(process.env.PRIVATE_KEY_2),\n    await JoseKey.fromImportable(process.env.PRIVATE_KEY_3),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Moderation Options in TypeScript\nDESCRIPTION: Demonstrates the structure of moderation options including user DID, moderation preferences, and label definitions for the ATProto moderation system.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/docs/moderation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // the logged-in user's DID\n  userDid: 'did:plc:1234...',\n\n  moderationPrefs: {\n    // is adult content allowed?\n    adultContentEnabled: true,\n\n    // the global label settings (used on self-labels)\n    labels: {\n      porn: 'hide',\n      sexual: 'warn',\n      nudity: 'ignore',\n      // ...\n    },\n\n    // the subscribed labelers and their label settings\n    labelers: [\n      {\n        did: 'did:plc:1234...',\n        labels: {\n          porn: 'hide',\n          sexual: 'warn',\n          nudity: 'ignore',\n          // ...\n        }\n      }\n    ],\n\n    mutedWords: [/* ... */],\n    hiddenPosts: [/* ... */]\n  },\n\n  // custom label definitions\n  labelDefs: {\n    // labelerDid => defs[]\n    'did:plc:1234...': [\n      /* ... */\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Moderation API Response in UI Context\nDESCRIPTION: Shows how to use the moderation results to make UI decisions for different contexts, including filtering, blurring, and alerts.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/docs/moderation.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst mod = moderatePost(post, moderationOptions)\n\nif (mod.ui('contentList').filter) {\n  // dont show the post\n}\nif (mod.ui('contentList').blur) {\n  // cover the post with the explanation from mod.ui('contentList').blurs[0]\n  if (mod.ui('contentList').noOverride) {\n    // dont allow the cover to be removed\n  }\n}\nif (mod.ui('contentMedia').blur) {\n  // cover the post's embedded images with the explanation from mod.ui('contentMedia').blurs[0]\n  if (mod.ui('contentMedia').noOverride) {\n    // dont allow the cover to be removed\n  }\n}\nif (mod.ui('avatar').blur) {\n  // cover the avatar with the explanation from mod.ui('avatar').blurs[0]\n  if (mod.ui('avatar').noOverride) {\n    // dont allow the cover to be removed\n  }\n}\nfor (const alert of mod.ui('contentList').alerts) {\n  // render this alert\n}\nfor (const inform of mod.ui('contentList').informs) {\n  // render this inform\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication Flow\nDESCRIPTION: Shows how to implement the OAuth authentication flow including authorization URL generation and callback handling.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = await client.authorize('foo.bsky.team', {\n  state: '434321',\n  prompt: 'consent',\n  scope: 'email',\n  ui_locales: 'fr',\n})\n\n// Parse the query params from the callback URI\nconst params = new URLSearchParams('code=...&state=...')\n\n// Process the callback using the OAuth client\nconst result = await client.callback(params)\n\n// Verify the state (e.g. to link to an internal user)\nresult.state === '434321' // true\n\nconst oauthSession = result.session\n```\n\n----------------------------------------\n\nTITLE: Initializing Loopback @atproto/oauth-client-browser in TypeScript\nDESCRIPTION: Demonstrates how to instantiate the `BrowserOAuthClient` for local development using a loopback address (like `127.0.0.1` or `[::1]`). Setting `clientMetadata` to `undefined` signals to the OAuth server to use hardcoded metadata, necessary when the server cannot fetch metadata from `localhost`. Requires the `@atproto/oauth-client-browser` package.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserOAuthClient } from '@atproto/oauth-client-browser'\n\nconst client = new BrowserOAuthClient({\n  handleResolver: 'https://bsky.social',\n  // Only works if the current origin is a loopback address:\n  clientMetadata: undefined,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Moderation Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces that define the structure of moderation preferences, labelers, and options used in the ATProto moderation system.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/docs/moderation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ModerationPrefsLabeler {\n  did: string\n  labels: Record<string, LabelPreference>\n}\n\nexport interface ModerationPrefs {\n  adultContentEnabled: boolean\n  labels: Record<string, LabelPreference>\n  labelers: ModerationPrefsLabeler[]\n  mutedWords: AppBskyActorDefs.MutedWord[]\n  hiddenPosts: string[]\n}\n\nexport interface ModerationOpts {\n  userDid: string | undefined\n  prefs: ModerationPrefs\n  /**\n   * Map of labeler did -> custom definitions\n   */\n  labelDefs?: Record<string, InterpretedLabelValueDefinition[]>\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Session Updates and Deletion with OAuthClient - TypeScript\nDESCRIPTION: This example sets up listeners on the OAuthClient to respond to session update and deletion events using the addEventListener API. Handlers receive updated session data or deletion events, and handle errors arising from token refresh failures or session revocations. Dependencies include '@atproto/oauth-client-node' for types and a compatible OAuthClient instance. Inputs are event types ('updated', 'deleted'), and the handler callbacks can inspect error causes to determine the specific error scenario. The snippet ensures robust session lifecycle monitoring for advanced authentication flows.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/README.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\\n  Session,\\n  TokenRefreshError,\\n  TokenRevokedError,\\n} from '@atproto/oauth-client-node'\\n\\nclient.addEventListener('updated', (event: CustomEvent<Session>) => {\\n  console.log('Refreshed tokens were saved in the store:', event.detail)\\n})\\n\\nclient.addEventListener(\\n  'deleted',\\n  (\\n    event: CustomEvent<{\\n      sub: string\\n      cause: TokenRefreshError | TokenRevokedError | unknown\\n    }>,\\n  ) => {\\n    console.log('Session was deleted from the session store:', event.detail)\\n\\n    const { cause } = event.detail\\n\\n    if (cause instanceof TokenRefreshError) {\\n      // - refresh_token unavailable or expired\\n      // - oauth response error (`cause.cause instanceof OAuthResponseError`)\\n      // - session data does not match expected values returned by the OAuth server\\n    } else if (cause instanceof TokenRevokedError) {\\n      // Session was revoked through:\\n      // - session.signOut()\\n      // - client.revoke(sub)\\n    } else {\\n      // An unexpected error occurred, causing the session to be deleted\\n    }\\n  },\\n)\n```\n\n----------------------------------------\n\nTITLE: Listening for OAuth Session Updates and Deletions in TypeScript\nDESCRIPTION: Demonstrates how to attach event listeners to an `OAuthClient` instance to react to session updates (token refreshes) and deletions (due to errors, revocation, or expiry). It shows how to access event details (`event.detail`) and differentiate deletion causes like `TokenRefreshError` or `TokenRevokedError`.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport {\n  Session,\n  TokenRefreshError,\n  TokenRevokedError,\n} from '@atproto/oauth-client'\n\nclient.addEventListener('updated', (event: CustomEvent<Session>) => {\n  console.log('Refreshed tokens were saved in the store:', event.detail)\n})\n\nclient.addEventListener(\n  'deleted',\n  (\n    event: CustomEvent<{\n      sub: string\n      cause: TokenRefreshError | TokenRevokedError | unknown\n    }>,\n  ) => {\n    console.log('Session was deleted from the session store:', event.detail)\n\n    const { cause } = event.detail\n\n    if (cause instanceof TokenRefreshError) {\n      // - refresh_token unavailable or expired\n      // - oauth response error (`cause.cause instanceof OAuthResponseError`)\n      // - session data does not match expected values returned by the OAuth server\n    } else if (cause instanceof TokenRevokedError) {\n      // Session was revoked through:\n      // - agent.signOut()\n      // - client.revoke(sub)\n    } else {\n      // An unexpected error occurred, causing the session to be deleted\n    }\n  },\n)\n```\n```\n\n----------------------------------------\n\nTITLE: OAuth-based Session Management in TypeScript\nDESCRIPTION: Demonstrates how to use OAuth-based session management with the ATP API, including restoring a previously saved session.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from '@atproto/api'\nimport { OAuthClient } from '@atproto/oauth-client'\n\nconst oauthClient = new OAuthClient({\n  // ...\n})\n\nconst oauthSession = await oauthClient.restore('did:plc:123')\n\n// Instantiate the api Agent using an OAuthSession\nconst agent = new Agent(oauthSession)\n```\n\n----------------------------------------\n\nTITLE: XrpcClient Initialization with Static Headers in TypeScript\nDESCRIPTION: Shows how to instantiate XrpcClient with static headers and a static service URL by passing an object configuration. This allows all outgoing requests to share the same service base and HTTP headers. This method is useful when consistent identification or authentication tokens must be provided for every request. Dependency: @atproto/xrpc.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { XrpcClient } from \"@atproto/xrpc\";\n\nconst instance = new XrpcClient(\n  {\n    service: \"http://my-service.com\",\n    headers: {\n      \"my-header\": \"my-value\",\n    },\n  },\n  [\n    {\n      lexicon: 1,\n      id: \"io.example.doStuff\",\n      defs: {},\n    },\n  ],\n);\n\n```\n\n----------------------------------------\n\nTITLE: Migrating to XrpcClient with Custom FetchHandler in TypeScript\nDESCRIPTION: Demonstrates the proper initialization of an XrpcClient with a custom FetchHandler that manually sets headers, applies custom logic, and resolves the full URL for requests. This method supports the new configuration requirements for header management and service targeting, and replaces the legacy method of request customization and header setting. Useful for scenarios requiring per-request header manipulation or service selection. Requires @atproto/xrpc.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { XrpcClient } from \"@atproto/xrpc\";\n\nconst instance = new XrpcClient(\n  async (url, init) => {\n    const headers = new Headers(init.headers);\n\n    headers.set(\"my-header\", \"my-value\");\n\n    // Custom logic here\n\n    const fullUrl = new URL(url, \"http://my-service.com\");\n\n    return fetch(fullUrl, { ...init, headers });\n  },\n  [\n    {\n      lexicon: 1,\n      id: \"io.example.doStuff\",\n      defs: {},\n    },\n  ],\n);\n\nawait instance.call(\"io.example.doStuff\");\n\n```\n\n----------------------------------------\n\nTITLE: Validating Post Records in TypeScript\nDESCRIPTION: Demonstrates how to validate a post record using the AppBskyFeedPost type and its validation methods.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppBskyFeedPost } from '@atproto/api'\n\nconst post = {...}\nif (AppBskyFeedPost.isRecord(post)) {\n  // typescript now recognizes `post` as a AppBskyFeedPost.Record\n  // however -- we still need to validate it\n  const res = AppBskyFeedPost.validateRecord(post)\n  if (res.success) {\n    // a valid record\n  } else {\n    // something is wrong\n    console.log(res.error)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing OAuth Re-authentication with Login Prompt in TypeScript\nDESCRIPTION: Shows how to generate an authorization URL using `client.authorize` that explicitly forces the user to re-authenticate by setting the `prompt` parameter to 'login'. The `handle` (user identifier) and optional `state` are passed as arguments.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst url = await client.authorize(handle, {\n  prompt: 'login',\n  state,\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Handles and DIDs in AT Protocol\nDESCRIPTION: Demonstrates validation of handle and DID strings using the isValidHandle, ensureValidHandle, and ensureValidDid functions. Handles must follow the AT Protocol handle specification.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isValidHandle, ensureValidHandle, isValidDid } from '@atproto/syntax'\n\nisValidHandle('alice.test') // returns true\nensureValidHandle('alice.test') // returns void\n\nisValidHandle('al!ce.test') // returns false\nensureValidHandle('al!ce.test') // throws\n\nensureValidDid('did:method:val') // returns void\nensureValidDid(':did:method:val') // throws\n```\n\n----------------------------------------\n\nTITLE: Resolving Handle and DID with Verification in atproto\nDESCRIPTION: This example demonstrates how to resolve a handle to a DID, then resolve the DID document, and verify that the handle in the DID document matches the original handle. It shows the use of caching and the forceRefresh flag for subsequent resolutions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/identity/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst didres = new DidResolver({})\nconst hdlres = new HandleResolver({})\n\nconst handle = 'atproto.com'\nconst did = await hdlres.resolve(handle)\n\nif (did == undefined) {\n  throw new Error('expected handle to resolve')\n}\nconsole.log(did) // did:plc:ewvi7nxzyoun6zhxrhs64oiz\n\nconst doc = await didres.resolve(did)\nconsole.log(doc)\n\n// additional resolutions of same DID will be cached for some time, unless forceRefresh flag is used\nconst doc2 = await didres.resolve(did, true)\n\n// helper methods use the same cache\nconst data = await didres.resolveAtprotoData(did)\n\nif (data.handle != handle) {\n  throw new Error('invalid handle (did not match DID document)')\n}\n```\n\n----------------------------------------\n\nTITLE: Using Agent Type for Functions\nDESCRIPTION: Shows how to properly type functions that accept an agent parameter using the new Agent base type for better compatibility.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@atproto/api\";\n\nasync function doStuffWithAgent(agent: Agent, arg: string) {\n  return agent.resolveHandle(arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Extending AtpAgent with Custom User-Agent Configuration in TypeScript\nDESCRIPTION: Example of extending the AtpAgent class from @atproto/api to customize HTTP request headers, specifically adding a custom User-Agent header to all outgoing requests.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AtpAgent } from \"@atproto/api\";\n\nclass MyAtpAgent extends AtpAgent {\n  constructor(options: AtpAgentOptions) {\n    const fetch = options.fetch ?? globalThis.fetch;\n\n    super({\n      ...options,\n      fetch: async (url, init) => {\n        const headers = new Headers(init.headers);\n\n        const ua = headersList.get(\"User-Agent\");\n        headersList.set(\"User-Agent\", ua ? `${ua} ${userAgent}` : userAgent);\n\n        return fetch(url, { ...init, headers });\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Namespaced IDs (NSID) in AT Protocol\nDESCRIPTION: Shows usage of the NSID class for parsing, creating, and validating namespaced identifiers. NSIDs follow a reverse-domain notation format and include authority and name components.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NSID } from '@atproto/syntax'\n\nconst id1 = NSID.parse('com.example.foo')\nid1.authority // => 'example.com'\nid1.name // => 'foo'\nid1.toString() // => 'com.example.foo'\n\nconst id2 = NSID.create('example.com', 'foo')\nid2.authority // => 'example.com'\nid2.name // => 'foo'\nid2.toString() // => 'com.example.foo'\n\nconst id3 = NSID.create('example.com', 'someRecord')\nid3.authority // => 'example.com'\nid3.name // => 'someRecord'\nid3.toString() // => 'com.example.someRecord'\n\nNSID.isValid('com.example.foo') // => true\nNSID.isValid('com.example.someRecord') // => true\nNSID.isValid('example.com/foo') // => false\nNSID.isValid('foo') // => false\n```\n\n----------------------------------------\n\nTITLE: Generating Default OAuth Authorization URL in TypeScript\nDESCRIPTION: Generates a standard authorization URL using `client.authorize` without specifying the `prompt` parameter. The OAuth server will determine whether to prompt the user based on their existing session status. Requires the user's `handle` and accepts an optional `state` parameter.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst url = await client.authorize(handle, {\n  state,\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests to Bluesky's AppView\nDESCRIPTION: Example of making authenticated requests to Bluesky's AppView using the Agent class from @atproto/api.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from '@atproto/api'\n\nconst agent = new Agent(oauthSession)\n\n// Make an authenticated request to the server. New credentials will be\n// automatically fetched if needed (causing sessionStore.set() to be called).\nawait agent.post({\n  text: 'Hello, world!',\n})\n\n// revoke credentials on the server (causing sessionStore.del() to be called)\nawait agent.signOut()\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Flow Endpoints in Express\nDESCRIPTION: This snippet shows how to create Express endpoints for initiating the OAuth flow and handling the callback. It includes error handling and demonstrates how to use the authenticated session to make API calls.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = express()\n\napp.get('/login', async (req, res, next) => {\n  try {\n    const handle = 'some-handle.bsky.social'\n    const state = '434321'\n\n    const ac = new AbortController()\n    req.on('close', () => ac.abort())\n\n    const url = await client.authorize(handle, {\n      signal: ac.signal,\n      state,\n      ui_locales: 'fr-CA fr en',\n    })\n\n    res.redirect(url)\n  } catch (err) {\n    next(err)\n  }\n})\n\napp.get('/atproto-oauth-callback', async (req, res, next) => {\n  try {\n    const params = new URLSearchParams(req.url.split('?')[1])\n\n    const { session, state } = await client.callback(params)\n\n    console.log('authorize() was called with state:', state)\n    console.log('User authenticated as:', session.did)\n\n    const agent = new Agent(session)\n\n    const profile = await agent.getProfile({ actor: agent.did })\n    console.log('Bsky profile:', profile.data)\n\n    res.json({ ok: true })\n  } catch (err) {\n    next(err)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating XrpcClient with Static Headers in TypeScript\nDESCRIPTION: Example showing how to create an XrpcClient with static headers applied to all requests, using the configuration object syntax.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XrpcClient } from \"@atproto/xrpc\";\n\nconst instance = new XrpcClient(\n  {\n    service: \"http://my-service.com\",\n    headers: {\n      \"my-header\": \"my-value\",\n    },\n  },\n  [\n    {\n      lexicon: 1,\n      id: \"io.example.doStuff\",\n      defs: {},\n    },\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Legacy Client Customization and Lexicon Addition in @atproto/xrpc with TypeScript (Deprecated)\nDESCRIPTION: An example of customizing the legacy @atproto/xrpc client with a custom fetch handler and lexicon definition. The snippet overrides the client.fetch method for pre-request logic, adds a lexicon document, instantiates a service client, sets custom headers, and performs an XRPC call. This style is deprecated; migration to XrpcClient is recommended. Dependencies: @atproto/xrpc library.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport client, { defaultFetchHandler } from \"@atproto/xrpc\";\n\nclient.fetch = function (\n  httpUri: string,\n  httpMethod: string,\n  httpHeaders: Headers,\n  httpReqBody: unknown,\n) {\n  // Custom logic here\n  return defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody);\n};\n\nclient.addLexicon({\n  lexicon: 1,\n  id: \"io.example.doStuff\",\n  defs: {},\n});\n\nconst instance = client.service(\"http://my-service.com\");\n\ninstance.setHeader(\"my-header\", \"my-value\");\n\nawait instance.call(\"io.example.doStuff\");\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Handle Resolver with PDS URL\nDESCRIPTION: TypeScript code showing how to configure handle resolution using a PDS URL.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserOAuthClient } from '@atproto/oauth-client-browser'\n\nconst client = new BrowserOAuthClient({\n  handleResolver: 'https://my-pds.example.com',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests to Custom AppView\nDESCRIPTION: Implementation of authenticated requests to a custom AppView using XrpcClient with lexicon definitions and OAuth session handling.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Lexicons } from '@atproto/lexicon'\nimport { OAuthClient } from '@atproto/oauth-client' // or \"@atproto/oauth-client-browser\" or \"@atproto/oauth-client-node\"\nimport { XrpcClient } from '@atproto/xrpc'\n\n// Define your lexicons\nconst myLexicon = new Lexicons([\n  {\n    lexicon: 1,\n    id: 'com.example.query',\n    defs: {\n      main: {\n        // ...\n      },\n    },\n  },\n])\n\n// Describe your app's oauth client\nconst oauthClient = new OAuthClient({\n  // ...\n})\n\n// Authenticate the user\nconst oauthSession = await oauthClient.restore('did:plc:123')\n\n// Instantiate a client using the `oauthSession` as fetch handler object\nconst client = new XrpcClient(oauthSession, myLexicon)\n\n// Make authenticated calls\nconst response = await client.call('com.example.query')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache for ATPROTO Handle Resolution in TypeScript\nDESCRIPTION: This example demonstrates how to implement a custom cache for handle resolution using CachedHandleResolver. It defines a custom HandleCache interface with set, get, and del methods.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/handle-resolver/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AppViewHandleResolver,\n  CachedHandleResolver,\n  HandleResolver,\n  HandleCache,\n} from '@atproto-labs/handle-resolver'\n\n// See previous examples for creating a resolver\ndeclare const sourceResolver: HandleResolver\n\nconst cache: HandleCache = {\n  set(handle, did): Promise<void> {\n    /* TODO */\n  },\n  get(handle): Promise<undefined | string> {\n    /* TODO */\n  },\n  del(handle): Promise<void> {\n    /* TODO */\n  },\n}\n\nconst resolver = new CachedHandleResolver(sourceResolver, cache)\nconst did = await resolver.resolve('my-handle.bsky.social')\nconst did = await resolver.resolve('my-handle.bsky.social') // Result from cache\nconst did = await resolver.resolve('my-handle.bsky.social') // Result from cache\n```\n\n----------------------------------------\n\nTITLE: Setting Up ATProto Agent with Session Management\nDESCRIPTION: Example showing how to initialize and configure an ATProto agent with session persistence. Demonstrates the new pattern for agent setup and login.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, AtpAgent } from \"@atproto/api\";\n\nasync function setupAgent(\n  service: string,\n  username: string,\n  password: string,\n): Promise<Agent> {\n  const agent = new AtpAgent({\n    service,\n    persistSession: (evt, session) => {\n      // handle session update\n    },\n  });\n\n  await agent.login(username, password);\n\n  return agent;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing AT URIs in AT Protocol\nDESCRIPTION: Demonstrates parsing of AT Protocol URIs using the AtUri class. Shows how to extract components like protocol, origin, hostname, collection, and rkey from an AT URI.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AtUri } from '@atproto/syntax'\n\nconst uri = new AtUri('at://bob.com/com.example.post/1234')\nuri.protocol // => 'at:'\nuri.origin // => 'at://bob.com'\nuri.hostname // => 'bob.com'\nuri.collection // => 'com.example.post'\nuri.rkey // => '1234'\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth Client for Native Applications in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the NodeOAuthClient for native applications by fetching client metadata from a URL. It includes configuration for state and session stores.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeOAuthClient } from '@atproto/oauth-client-node'\n\nconst client = await NodeOAuthClient.fromClientId({\n  clientId: 'https://my-app.com/client-metadata.json',\n\n  stateStore: {\n    async set(key: string, internalState: NodeSavedState): Promise<void> {},\n    async get(key: string): Promise<NodeSavedState | undefined> {},\n    async del(key: string): Promise<void> {},\n  },\n\n  sessionStore: {\n    async set(sub: string, session: Session): Promise<void> {},\n    async get(sub: string): Promise<Session | undefined> {},\n    async del(sub: string): Promise<void> {},\n  },\n\n  requestLock,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redirect URI for Loopback @atproto/oauth-client-browser in TypeScript\nDESCRIPTION: Shows how to instantiate `BrowserOAuthClient` for local development with a specific redirect URI. The `clientMetadata` parameter is set to a URL string starting with `http://localhost`, which includes the actual `redirect_uri` (e.g., `http://127.0.0.1:8080/callback`) encoded as a query parameter. This configuration is used for loopback clients requiring non-default redirect paths. Requires the `@atproto/oauth-client-browser` package.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserOAuthClient } from '@atproto/oauth-client-browser'\n\nconst client = new BrowserOAuthClient({\n  handleResolver: 'https://bsky.social',\n  // Note that the origin of the \"client_id\" URL must be \"http://localhost\" when\n  // using this configuration, regardless of the actual hostname (\"127.0.0.1\" or\n  // \"[::1]\"), port or pathname. Only the `redirect_uris` must contain the\n  // actual url that will be used to redirect the user back to the application.\n  clientMetadata: `http://localhost?redirect_uri=${encodeURIComponent('http://127.0.0.1:8080/callback')}`,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating XrpcClient with Dynamic Configuration in TypeScript\nDESCRIPTION: Advanced example showing how to create an XrpcClient with dynamic service URL and headers determined by functions, allowing runtime configuration decisions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XrpcClient } from \"@atproto/xrpc\";\n\nconst instance = new XrpcClient(\n  {\n    service: () => \"http://my-service.com\",\n    headers: {\n      \"my-header\": () => \"my-value\",\n      \"my-ignored-header\": () => null, // ignored\n    },\n  },\n  [\n    {\n      lexicon: 1,\n      id: \"io.example.doStuff\",\n      defs: {},\n    },\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching and Using Label Definitions in TypeScript\nDESCRIPTION: Demonstrates how to fetch label definitions from an AtpAgent, cache them, and use them with the moderation API.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/docs/moderation.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AtpAgent } from '@atproto/api'\n\nconst agent = new AtpAgent({ service: 'https://example.com' })\n// assume `agent` is a signed in session\nconst prefs = await agent.getPreferences()\nconst labelDefs = await agent.getLabelDefinitions(prefs)\n\nmoderatePost(post, {\n  userDid: agent.session.did,\n  prefs: prefs.moderationPrefs,\n  labelDefs,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing AtprotoHandleResolver for Node.js in TypeScript\nDESCRIPTION: This example demonstrates how to create an AtprotoHandleResolver instance for use in a Node.js environment. It uses the node:dns/promises module for DNS resolution and supports an optional custom fetch function.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/handle-resolver/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AtprotoHandleResolver } from '@atproto-labs/handle-resolver'\nimport { resolveTxt } from 'node:dns/promises'\n\nconst resolver = new AtprotoHandleResolver({\n  // Optional: Custom fetch function (used for well-known resolution)\n  fetch: globalThis.fetch.bind(globalThis),\n\n  resolveTxt: async (domain: string) =>\n    resolveTxt(domain).then((chunks) => chunks.join('')),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Bundle Manifest in Express.js Application\nDESCRIPTION: Demonstration of how to use the generated bundle manifest in an Express.js application. It shows setting content headers and serving assets based on the manifest data.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/rollup-plugin-bundle-manifest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst assetManifest = require('./dist/bundle-manifest.json')\n\nconst app = express()\n\napp.use((req, res, next) => {\n  const asset = assetManifest[req.path.slice(1)]\n  if (!asset) return next()\n\n  res.setHeader('Content-Type', asset.mime)\n  res.setHeader('Content-Length', asset.data.length)\n\n  res.end(Buffer.from(asset.data, 'base64'))\n})\n\napp.use((req, res, next) => {\n  res.setHeader(\n    'Content-Security-Policy',\n    buildCSP(assetManifest), // Not provided here\n  )\n\n  // Serve the index.html file\n  res.sendFile('index.html')\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple OAuth Sessions\nDESCRIPTION: TypeScript code showing how to restore and manage multiple OAuth sessions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst aliceSession = await client.restore('did:plc:alice')\nconst bobSession = await client.restore('did:plc:bob')\n```\n\n----------------------------------------\n\nTITLE: Migration: Customizing request headers with fetch handler\nDESCRIPTION: This example demonstrates how to migrate from configuring a static fetch handler on the BskyAgent class to providing a custom fetch function for modifying request headers.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { BskyAgent, defaultFetchHandler } from \"@atproto/api\";\n\nBskyAgent.configure({\n  fetch: async (httpUri, httpMethod, httpHeaders, httpReqBody) => {\n    const ua = httpHeaders[\"User-Agent\"];\n\n    httpHeaders[\"User-Agent\"] = ua ? `${ua} ${userAgent}` : userAgent;\n\n    return defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migration: Implementing rate limiting with the new fetch handler\nDESCRIPTION: This example shows how to migrate from monkey patching the XRPC client to using a custom fetch handler for implementing client-side rate limiting.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { BskyAgent } from \"@atproto/api\";\nimport { RateLimitThreshold } from \"rate-limit-threshold\";\n\nconst agent = new BskyAgent();\nconst limiter = new RateLimitThreshold(3000, 300_000);\n\nconst origCall = agent.api.xrpc.call;\nagent.api.xrpc.call = async function (...args) {\n  await limiter.wait();\n  return origCall.call(this, ...args);\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// After\nimport { AtpAgent } from \"@atproto/api\";\nimport { RateLimitThreshold } from \"rate-limit-threshold\";\n\nclass LimitedAtpAgent extends AtpAgent {\n  constructor(options: AtpAgentOptions) {\n    const fetch: typeof globalThis.fetch = options.fetch ?? globalThis.fetch;\n    const limiter = new RateLimitThreshold(3000, 300_000);\n\n    super({\n      ...options,\n      fetch: async (...args) => {\n        await limiter.wait();\n        return fetch(...args);\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Active Servers in AT Protocol Dev Environment\nDESCRIPTION: The status() method lists all currently active servers in the development environment. It provides an overview of running PDS instances.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/dev-env/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatus()\n```\n\n----------------------------------------\n\nTITLE: Creating XrpcClient with Static Service URL in TypeScript\nDESCRIPTION: Simplified example showing how to create an XrpcClient that makes HTTP requests to a static service URL without any custom logic or headers.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XrpcClient } from \"@atproto/xrpc\";\n\nconst instance = new XrpcClient(\"http://my-service.com\", [\n  {\n    lexicon: 1,\n    id: \"io.example.doStuff\",\n    defs: {},\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Migration: Creating a custom Agent subclass\nDESCRIPTION: This example demonstrates how to migrate from extending BskyAgent to creating your own Agent subclass, showing the new approach to handling sessions and authentication.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { BskyAgent } from \"@atproto/api\";\n\nclass MyAgent extends BskyAgent {\n  private accessToken?: string;\n\n  async createOrRefreshSession(identifier: string, password: string) {\n    // custom logic here\n\n    this.accessToken = \"my-access-jwt\";\n  }\n\n  async doStuff() {\n    return this.call(\"io.example.doStuff\", {\n      headers: {\n        Authorization: this.accessToken && `Bearer ${this.accessToken}`,\n      },\n    });\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// After\nimport { Agent } from \"@atproto/api\";\n\nclass MyAgent extends Agent {\n  private accessToken?: string;\n  public did?: string;\n\n  constructor(private readonly service: string | URL) {\n    super({\n      service,\n      headers: {\n        Authorization: () =>\n          this.accessToken ? `Bearer ${this.accessToken}` : null,\n      },\n    });\n  }\n\n  clone(): MyAgent {\n    const agent = new MyAgent(this.service);\n    agent.accessToken = this.accessToken;\n    agent.did = this.did;\n    return this.copyInto(agent);\n  }\n\n  async createOrRefreshSession(identifier: string, password: string) {\n    // custom logic here\n\n    this.did = \"did:example:123\";\n    this.accessToken = \"my-access-jwt\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Lock using Redlock in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a request lock using the Redlock library to prevent concurrent refreshes of the same session in a multi-instance environment.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuntimeLock } from '@atproto/oauth-client-node'\nimport Redis from 'ioredis'\nimport Redlock from 'redlock'\n\nconst redisClients = new Redis()\nconst redlock = new Redlock(redisClients)\n\nconst requestLock: RuntimeLock = async (key, fn) => {\n  const lock = await redlock.lock(key, 45e3)\n  try {\n    return await fn()\n  } finally {\n    await redlock.unlock(lock)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XRPC FetchHandler Type Definition in TypeScript\nDESCRIPTION: The updated FetchHandler type definition from @atproto/xrpc package. This function is responsible for making HTTP requests with a given URL path and request initialization object, returning a Promise<Response>.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FetchHandler = (\n  this: void,\n  /**\n   * The URL (pathname + query parameters) to make the request to, without the\n   * origin. The origin (protocol, hostname, and port) must be added by this\n   * {@link FetchHandler}, typically based on authentication or other factors.\n   */\n  url: string,\n  init: RequestInit,\n) => Promise<Response>;\n```\n\n----------------------------------------\n\nTITLE: Setting up an Agent with TypeScript using the new AtpAgent class\nDESCRIPTION: This snippet demonstrates how to create and initialize an AtpAgent instance with session persistence, which is part of the new class hierarchy for OAuth compatibility.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, AtpAgent } from \"@atproto/api\";\n\nasync function setupAgent(\n  service: string,\n  username: string,\n  password: string,\n): Promise<Agent> {\n  const agent = new AtpAgent({\n    service,\n    persistSession: (evt, session) => {\n      // handle session update\n    },\n  });\n\n  await agent.login(username, password);\n\n  return agent;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced MemoryRunner Implementation in TypeScript\nDESCRIPTION: Shows implementation of the MemoryRunner class for more robust indexing pipelines. Includes cursor tracking and persistent storage functionality with concurrent event processing capabilities.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/sync/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Firehose, MemoryRunner } from '@atproto/sync'\nimport { IdResolver } from '@atproto/identity'\n\nconst idResolver = new IdResolver()\nconst runner = new MemoryRunner({\n  setCursor: (cursor) => {\n    // persist cursor\n  },\n})\nconst firehose = new Firehose({\n  idResolver,\n  runner,\n  service: 'wss://bsky.network',\n  handleEvt: async (evt) => {\n    // ...\n  },\n  onError: (err) => {\n    console.error(err)\n  },\n})\nfirehose.start()\n\n// on service shutdown\nawait firehose.destroy()\nawait runner.destroy()\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Store in TypeScript\nDESCRIPTION: This snippet shows an example implementation of a session store for saving and retrieving OAuth session data. It uses a database to persist the session information.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionStore: NodeSavedSessionStore = {\n  async set(sub: string, sessionData: NodeSavedSession) {\n    await saveSessionDataToDb(sub, sessionData)\n  },\n\n  async get(sub: string) {\n    const sessionData = await getSessionDataFromDb(sub)\n    if (!sessionData) return undefined\n\n    return sessionData\n  },\n\n  async del(sub: string) {\n    await deleteSessionDataFromDb(sub)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Fetch Handler with Proxy Header\nDESCRIPTION: Shows how to create a custom fetch handler that automatically adds the atproto-proxy header to all requests.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst boundClient = new XrpcClient((url, init) => {\n  const headers = new Headers(init?.headers)\n\n  // Add the atproto-proxy header if it is not already present\n  if (!headers.has('atproto-proxy')) {\n    headers.set('atproto-proxy', 'did:plc:xyz#serviceId')\n  }\n\n  return oauthSession.fetchHandler(url, { ...init, headers })\n}, myLexicon)\n\n// No need to specify the atproto-proxy header anymore\nconst response = await boundClient.call('com.example.query')\n```\n\n----------------------------------------\n\nTITLE: Initializing DohHandleResolver for ATPROTO in TypeScript\nDESCRIPTION: This snippet shows how to create and use a DohHandleResolver instance for DNS-over-HTTPS handle resolution. It uses a custom DoH server and supports an optional custom fetch function.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/handle-resolver/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DohHandleResolver } from '@atproto-labs/handle-resolver'\n\n// Also works with 'https://cloudflare-dns.com/dns-query'\nconst resolver = new DohHandleResolver('https://dns.google/resolve', {\n  // Optional: Custom fetch function that will be used both for DNS resolution\n  // and well-known resolution.\n  fetch: globalThis.fetch.bind(globalThis),\n})\n\nconst did = await resolver.resolve('my-handle.bsky.social')\n```\n\n----------------------------------------\n\nTITLE: Starting a PDS Instance in AT Protocol Dev Environment\nDESCRIPTION: Creates a new Personal Data Server (PDS) instance with in-memory storage. An optional port parameter can be provided to specify which port the server should run on.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/dev-env/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstartPds(port?: number)\n```\n\n----------------------------------------\n\nTITLE: Sequencer Recovery Commands\nDESCRIPTION: Commands for replaying sequencer file on actor stores, handling account creation/deletion, and managing recovery operations. Includes options for cursor position and concurrency.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/src/scripts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js sequencer-recovery START_CURSOR CONCURRENCY\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js recovery-repair-repos\n```\n\n----------------------------------------\n\nTITLE: Initializing AtpAgent in TypeScript\nDESCRIPTION: Creates a new AtpAgent instance with a specified service URL.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AtpAgent } from '@atproto/api'\n\nconst agent = new AtpAgent({ service: 'https://example.com' })\n```\n\n----------------------------------------\n\nTITLE: Adding Privileged App Password Authentication Scope\nDESCRIPTION: Implements a privileged scope for app password authentication, enhancing security for specific application access.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2515](https://github.com/bluesky-social/atproto/pull/2515) [`0cc5ef70f`](https://github.com/bluesky-social/atproto/commit/0cc5ef70f4e5a8e24983051d5f5ad8ee27be8684) Thanks [@dholms](https://github.com/dholms)! - Add privileged app password auth scope\n```\n\n----------------------------------------\n\nTITLE: Adding Chat Lexicons to AT Protocol\nDESCRIPTION: Adds lexicons for the chat.bsky namespace, expanding the protocol's capabilities to include chat functionality.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2485](https://github.com/bluesky-social/atproto/pull/2485) [`d32f7215f`](https://github.com/bluesky-social/atproto/commit/d32f7215f69bc87f50890d9cfdb09840c2fbaa41) Thanks [@devinivy](https://github.com/devinivy)! - Add lexicons for chat.bsky namespace\n```\n\n----------------------------------------\n\nTITLE: Initializing AppViewHandleResolver for ATPROTO in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and use an AppViewHandleResolver instance to resolve handles using a custom AppView service. It requires the '@atproto-labs/handle-resolver' package.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/handle-resolver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppViewHandleResolver } from '@atproto-labs/handle-resolver'\n\nconst resolver = new AppViewHandleResolver({\n  service: 'https://my-app-view.com/',\n})\nconst did = await resolver.resolve('my-handle.bsky.social')\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for PostgreSQL and Redis\nDESCRIPTION: YAML configuration for Docker Compose, defining services for both ephemeral and persistent PostgreSQL and Redis instances. It specifies port mappings, volumes, and environment variables for each service.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/dev-infra/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndocker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Migration: Lexicon validation with the new API\nDESCRIPTION: This example shows how to migrate from using AtpBaseClient for lexicon validation to using the new direct lexicons export.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { AtpBaseClient, ComAtprotoSyncSubscribeRepos } from \"@atproto/api\";\n\nconst baseClient = new AtpBaseClient();\n\nbaseClient.xrpc.lex.assertValidXrpcMessage(\"io.example.doStuff\", {\n  // ...\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// After\nimport { lexicons } from \"@atproto/api\";\n\nlexicons.assertValidXrpcMessage(\"io.example.doStuff\", {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Handle Resolver with DoH Service\nDESCRIPTION: TypeScript code demonstrating handle resolution setup using DNS over HTTPS service.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BrowserOAuthClient,\n  AtprotoDohHandleResolver,\n} from '@atproto/oauth-client-browser'\n\nconst client = new BrowserOAuthClient({\n  handleResolver: new AtprotoDohHandleResolver('https://my-doh.example.com'),\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Supporting Generic Service Proxying for PDS\nDESCRIPTION: Adds support for generic service proxying for the Personal Data Server, enhancing service architecture flexibility.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- [`f36585013`](https://github.com/bluesky-social/atproto/commit/f365850139ffb2b5e63facfd95eedf0b87d01ee7) Thanks [@devinivy](https://github.com/devinivy)! - Support generic service proxying the PDS\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching for ATPROTO Handle Resolution in TypeScript\nDESCRIPTION: This snippet shows how to implement caching for handle resolution using CachedHandleResolver with a default in-memory cache. It wraps an existing resolver and caches results for 10 minutes.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/handle-resolver/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AppViewHandleResolver,\n  CachedHandleResolver,\n  HandleResolver,\n  HandleCache,\n} from '@atproto-labs/handle-resolver'\n\n// See previous examples for creating a resolver\ndeclare const sourceResolver: HandleResolver\n\nconst resolver = new CachedHandleResolver(sourceResolver)\nconst did = await resolver.resolve('my-handle.bsky.social')\nconst did = await resolver.resolve('my-handle.bsky.social') // Result from cache\nconst did = await resolver.resolve('my-handle.bsky.social') // Result from cache\n```\n\n----------------------------------------\n\nTITLE: Generating API with Lexicon CLI in Bash\nDESCRIPTION: This example demonstrates how to use the Lexicon CLI to generate a TypeScript client API. It specifies the output directory and the schema files to be used for generation.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/lex-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ lex gen-api ./api/src ./schemas/com/service/*.json ./schemas/com/another/*.json\n```\n\n----------------------------------------\n\nTITLE: Simplified XrpcClient Initialization with Static Service in TypeScript\nDESCRIPTION: Presents the simplest usage of XrpcClient by providing a static service URL and an array of lexicons. Headers and dynamic behaviors are omitted for the basic case where requests are always directed to a single backend endpoint. This approach requires the @atproto/xrpc library and is ideal for straightforward use cases that do not require dynamic configuration.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { XrpcClient } from \"@atproto/xrpc\";\n\nconst instance = new XrpcClient(\"http://my-service.com\", [\n  {\n    lexicon: 1,\n    id: \"io.example.doStuff\",\n    defs: {},\n  },\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Bluesky AppView Environment Variables\nDESCRIPTION: Comprehensive list of environment variables required and supported by the Bluesky AppView service, including required variables for authentication, service URLs, and optional configuration parameters.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/services/bsky/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# bsky appview service\n\nThis is the service entrypoint for the bsky appview. The entrypoint command should run `api.js` with node, e.g. `node api.js`. The following env vars are supported:\n\n- `BSKY_PUBLIC_URL` - (required) the public url of the appview, e.g. `https://api.bsky.app`.\n- `BSKY_DID_PLC_URL` - (required) the url of the PLC service used for looking up did documents, e.g. `https://plc.directory`.\n- `BSKY_DATAPLANE_URL` - (required) the url where the backing dataplane service lives.\n- `BSKY_SERVICE_SIGNING_KEY` - (required) the public signing key in the form of a `did:key`, used for service-to-service auth. Advertised in the appview's `did:web` document.\n- `BSKY_ADMIN_PASSWORDS` - (alt. `BSKY_ADMIN_PASSWORD`) (required) comma-separated list of admin passwords used for role-based auth.\n- `NODE_ENV` - (recommended) for production usage, should be set to `production`. Otherwise all responses are validated on their way out. There may be other effects of not setting this to `production`, as dependencies may also implement debug modes based on its value.\n- `BSKY_VERSION` - (recommended) version of the bsky service. This is advertised by the health endpoint.\n- `BSKY_PORT` - (recommended) the port that the service will run on.\n- `BSKY_IMG_URI_ENDPOINT` - (recommended) the base url for resized images, e.g. `https://cdn.bsky.app/img`. When not set, sets-up an image resizing service directly on the appview.\n- `BSKY_SERVER_DID` - (recommended) the did of the appview service. When this is a `did:web` that matches the appview's public url, a `did:web` document is served.\n- `BSKY_HANDLE_RESOLVE_NAMESERVERS` - alternative domain name servers used for handle resolution, comma-separated.\n- `BSKY_BLOB_CACHE_LOC` - when `BSKY_IMG_URI_ENDPOINT` is not set, this determines where resized blobs are cached by the image resizing service.\n- `BSKY_COURIER_URL` - URL of courier service.\n- `BSKY_COURIER_API_KEY` - API key for courier service.\n- `BSKY_BSYNC_URL` - URL of bsync service.\n- `BSKY_BSYNC_API_KEY` - API key for bsync service.\n- `BSKY_SEARCH_URL` - (alt. `BSKY_SEARCH_ENDPOINT`) -\n- `BSKY_LABELS_FROM_ISSUER_DIDS` - comma-separated list of labelers to always use for record labels.\n- `MOD_SERVICE_DID` - the DID of the mod service, used to receive service authed requests.\n```\n\n----------------------------------------\n\nTITLE: Adding OAuth Provider and Token Support in AT Protocol\nDESCRIPTION: Adds OAuth provider capability and support for DPoP signed tokens to the AT Protocol PDS component.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2482](https://github.com/bluesky-social/atproto/pull/2482) [`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add OAuth provider capability & support for DPoP signed tokens\n```\n\n----------------------------------------\n\nTITLE: Importing Moderation Functions from ATProto API\nDESCRIPTION: Shows how to import the various moderation functions for different content types from the ATProto API.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/docs/moderation.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  moderateProfile,\n  moderatePost,\n  moderateNotification,\n  moderateFeedGen,\n  moderateUserList,\n  moderateLabeler,\n} from '@atproto/api'\n```\n\n----------------------------------------\n\nTITLE: Initiating OAuth Flow with Options\nDESCRIPTION: TypeScript code demonstrating how to start an OAuth flow with various options.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await client.signIn('my.handle.com', {\n    state: 'some value needed later',\n    prompt: 'none', // Attempt to sign in without user interaction (SSO)\n    ui_locales: 'fr-CA fr en', // Only supported by some OAuth servers (requires OpenID Connect support + i18n support)\n    signal: new AbortController().signal, // Optional, allows to cancel the sign in (and destroy the pending authorization, for better security)\n  })\n\n  console.log('Never executed')\n} catch (err) {\n  console.log('The user aborted the authorization process by navigating \"back\"')\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Moderation Reports to a Specific Labeler\nDESCRIPTION: Demonstrates how to send a moderation report to a specific labeler by using the withProxy method on the agent.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/docs/moderation.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nagent\n  .withProxy('atproto_labeler', 'did:web:my-labeler.com')\n  .createModerationReport({\n    reasonType: 'com.atproto.moderation.defs#reasonViolation',\n    reason: 'They were being such a jerk to me!',\n    subject: { did: 'did:web:bob.com' },\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a New User in AT Protocol Dev Environment\nDESCRIPTION: Creates a new user with the specified handle on a PDS instance. The pdsPort parameter is optional and determines which PDS instance to create the user on.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/dev-env/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmkuser(handle: string, pdsPort?: number)\n```\n\n----------------------------------------\n\nTITLE: Integration with @atproto/api Agent\nDESCRIPTION: TypeScript code showing how to use OAuth sessions with the @atproto/api Agent.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from '@atproto/api'\n\nconst session = await client.restore('did:plc:alice')\n\nconst agent = new Agent(session)\n\nawait agent.getProfile({ actor: agent.accountDid })\n```\n\n----------------------------------------\n\nTITLE: Adding DID Document Parsing Methods in @atproto/common-web\nDESCRIPTION: Patch change in version 0.2.4 that adds methods for parsing labeler verification methods and services in DID Documents.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common-web/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.4\n\n### Patch Changes\n\n- [#2302](https://github.com/bluesky-social/atproto/pull/2302) [`4eaadc0ac`](https://github.com/bluesky-social/atproto/commit/4eaadc0acb6b73b9745dd7a2b929d02e58083ab0) Thanks [@dholms](https://github.com/dholms)! - Added methods for parsing labeler verification methods and services in DID Documents\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Client Metadata in JSON\nDESCRIPTION: JSON configuration for OAuth client metadata that defines the application's identity and capabilities to the OAuth server.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\": \"https://my-app.com/client-metadata.json\",\n  \"client_name\": \"My App\",\n  \"client_uri\": \"https://my-app.com\",\n  \"logo_uri\": \"https://my-app.com/logo.png\",\n  \"tos_uri\": \"https://my-app.com/tos\",\n  \"policy_uri\": \"https://my-app.com/policy\",\n  \"redirect_uris\": [\"https://my-app.com/callback\"],\n  \"scope\": \"atproto\",\n  \"grant_types\": [\"authorization_code\", \"refresh_token\"],\n  \"response_types\": [\"code\"],\n  \"token_endpoint_auth_method\": \"none\",\n  \"application_type\": \"web\",\n  \"dpop_bound_access_tokens\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Labeler Service Record Structure in JavaScript\nDESCRIPTION: Example of a labeler service record that defines label values and their definitions, including localization and display settings.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/docs/moderation.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  $type: 'app.bsky.labeler.service',\n  policies: {\n    // the list of label values the labeler will publish\n    labelValues: [\n      'rude',\n    ],\n    // any custom definitions the labeler will be using\n    labelValueDefinitions: [\n      {\n        identifier: 'rude',\n        blurs: 'content',\n        severity: 'alert',\n        defaultSetting: 'warn',\n        adultOnly: false,\n        locales: [\n          {\n            lang: 'en',\n            name: 'Rude',\n            description: 'Not keeping things civil.',\n          },\n        ],\n      },\n    ],\n  },\n  createdAt: '2024-03-12T17:17:17.215Z'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FetchHandler Type for XrpcClient in TypeScript\nDESCRIPTION: Shows the updated FetchHandler type definition for XrpcClient in @atproto/xrpc. FetchHandler is a function that takes a URL (without origin) and a RequestInit object and returns a Promise<Response>. This approach delegates full request construction, including forming complete URLs and setting headers, to the implementer. This pattern replaces static handler assignment used in previous client implementations and is critical for custom authentication and request logic.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type FetchHandler = (\n  this: void,\n  /**\n   * The URL (pathname + query parameters) to make the request to, without the\n   * origin. The origin (protocol, hostname, and port) must be added by this\n   * {@link FetchHandler}, typically based on authentication or other factors.\n   */\n  url: string,\n  init: RequestInit,\n) => Promise<Response>;\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating OAuth Client with Burned Metadata\nDESCRIPTION: TypeScript code showing how to create an OAuth client instance with pre-configured metadata.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserOAuthClient } from '@atproto/oauth-client-browser'\n\nconst client = new BrowserOAuthClient({\n  clientMetadata: {\n    // Exact same JSON object as the one returned by the client_id URL\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Server with Lexicon CLI in Bash\nDESCRIPTION: This example shows how to use the Lexicon CLI to generate a TypeScript server API. It specifies the output directory for the server code and the schema files to be used for generation.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/lex-cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ lex gen-server ./server/src/xrpc ./schemas/com/service/*.json ./schemas/com/another/*.json\n```\n\n----------------------------------------\n\nTITLE: Adding Utility Functions in @atproto/common-web\nDESCRIPTION: Patch changes in version 0.3.2 that add createRetryable and allFulfilled utility functions to the package.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common-web/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.2\n\n### Patch Changes\n\n- [#3177](https://github.com/bluesky-social/atproto/pull/3177) [`72eba67af`](https://github.com/bluesky-social/atproto/commit/72eba67af1af8320b5400bcb9319d5c3c8407d99) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add `createRetryable` utility function\n\n- [#3177](https://github.com/bluesky-social/atproto/pull/3177) [`72eba67af`](https://github.com/bluesky-social/atproto/commit/72eba67af1af8320b5400bcb9319d5c3c8407d99) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add `allFulfilled` utility\n```\n\n----------------------------------------\n\nTITLE: Loading OAuth Client with Async Metadata\nDESCRIPTION: TypeScript code demonstrating async loading of OAuth client with metadata from URL.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuthClient } from '@atproto/oauth-client-browser'\n\nconst client = await BrowserOAuthClient.load({\n  clientId: 'https://my-app.com/client-metadata.json',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Agent as a class property type\nDESCRIPTION: This snippet demonstrates how to properly use the Agent type as a class property to maintain compatibility with different agent implementations.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, AtpAgent } from \"@atproto/api\";\n\nclass MyClass {\n  agent: Agent;\n\n  constructor() {\n    this.agent = new AtpAgent();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Lexicon CLI Usage in Bash\nDESCRIPTION: This snippet shows the usage information for the Lexicon CLI tool, including available commands and options. It demonstrates how to access help information and lists the main functionalities of the tool.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/lex-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: lex [options] [command]\n\nLexicon CLI\n\nOptions:\n  -V, --version                     output the version number\n  -h, --help                        display help for command\n\nCommands:\n  new [options] <nsid> [outfile]    Create a new schema json file\n  gen-md <schemas...>               Generate markdown documentation\n  gen-ts-obj <schemas...>           Generate a TS file that exports an array of schemas\n  gen-api <outdir> <schemas...>     Generate a TS client API\n  gen-server <outdir> <schemas...>  Generate a TS server API\n  help [command]                    display help for command\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Packages with Make\nDESCRIPTION: Shell commands using Make to set up the development environment, install dependencies, build packages, run tests, and start a local development environment with fake test accounts and data.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# use existing nvm to install node 18 and pnpm\nmake nvm-setup\n\n# pull dependencies and build all local packages\nmake deps\nmake build\n\n# run the tests, using Docker services as needed\nmake test\n\n# run a local PDS and AppView with fake test accounts and data\n# (this requires a global installation of `jq` and `docker`)\nmake run-dev-env\n\n# show all other commands\nmake help\n```\n\n----------------------------------------\n\nTITLE: Version 0.7.0 Subscribe Repo Updates\nDESCRIPTION: Updates to subscribeRepo functionality to include previous CIDs for operations and covering proofs for all operations.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/repo/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3449](https://github.com/bluesky-social/atproto/pull/3449) [`7e3678c08`](https://github.com/bluesky-social/atproto/commit/7e3678c089d2faa1a884a52a4fb80b8116c9854f) Thanks [@dholms](https://github.com/dholms)! - Updated subscribeRepo to include prev CIDs for operations and covering proofs for all ops.\n```\n\n----------------------------------------\n\nTITLE: Getting a User's Service Client in AT Protocol Dev Environment\nDESCRIPTION: Retrieves the ServiceClient for a user with the specified handle. This client can be used to interact with the AT Protocol services on behalf of the user.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/dev-env/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuser(handle: string): ServiceClient\n```\n\n----------------------------------------\n\nTITLE: Utilizing the Agent type for function parameters\nDESCRIPTION: This example shows how to properly type a function parameter as Agent to ensure forward compatibility with both AtpAgent and future OAuth agent implementations.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@atproto/api\";\n\nasync function doStuffWithAgent(agent: Agent, arg: string) {\n  return agent.resolveHandle(arg);\n}\n```\n\n----------------------------------------\n\nTITLE: ATProto API Version Changes - Markdown List\nDESCRIPTION: A markdown document detailing the version history and changes made to the @atproto/api package, including new features, patch changes, and dependency updates.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto/api\n\n## 0.15.3\n\n### Patch Changes\n\n- [#3773](https://github.com/bluesky-social/atproto/pull/3773) [`0087dc1c0`](https://github.com/bluesky-social/atproto/commit/0087dc1c0bafad1d0a0a1a16683d250dea031bf9) Thanks [@rafaelbsky](https://github.com/rafaelbsky)! - Add verification notifications\n\n## 0.15.2\n\n### Patch Changes\n\n- [#3770](https://github.com/bluesky-social/atproto/pull/3770) [`553c988f1`](https://github.com/bluesky-social/atproto/commit/553c988f1d226b3d2fbe94c117b088f5c82db794) Thanks [@estrattonbailey](https://github.com/estrattonbailey)! - Add `verificationPrefs` and `hideBadges` setting to user prefs.\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Repository Command\nDESCRIPTION: Command to rebuild a repository's MST (Merkle Search Tree) and sign a new commit using data from the actor's record table. Used when repository is corrupted with missing MST blocks.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/src/scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js rebuild-repo DID\n```\n\n----------------------------------------\n\nTITLE: Version 0.6.0 Proof Block Changes\nDESCRIPTION: Addition of relevant proof blocks to commit data structures.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/repo/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3033](https://github.com/bluesky-social/atproto/pull/3033) [`c9848edaf`](https://github.com/bluesky-social/atproto/commit/c9848edaf0947727aa5a60e3c67eecda3f48d46a) Thanks [@dholms](https://github.com/dholms)! - Add relevant proof blocks to commit data\n```\n\n----------------------------------------\n\nTITLE: Stopping a Server in AT Protocol Dev Environment\nDESCRIPTION: Stops the server running on the specified port. This is used to terminate PDS instances created with startPds().\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/dev-env/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstop(port: number)\n```\n\n----------------------------------------\n\nTITLE: Client Metadata JSON for Native Applications\nDESCRIPTION: This JSON snippet shows the structure of client metadata for native applications. It includes essential fields like client_id, redirect_uris, and application_type.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\": \"https://my-app.com/client-metadata.json\",\n  \"client_name\": \"My App\",\n  \"client_uri\": \"https://my-app.com\",\n  \"logo_uri\": \"https://my-app.com/logo.png\",\n  \"tos_uri\": \"https://my-app.com/tos\",\n  \"policy_uri\": \"https://my-app.com/policy\",\n  \"redirect_uris\": [\"https://my-app.com/atproto-oauth-callback\"],\n  \"scope\": \"atproto\",\n  \"grant_types\": [\"authorization_code\", \"refresh_token\"],\n  \"response_types\": [\"code\"],\n  \"application_type\": \"native\",\n  \"token_endpoint_auth_method\": \"none\",\n  \"dpop_bound_access_tokens\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SPA Environment for atproto OAuth\nDESCRIPTION: These bash commands set up the development environment for the SPA, installing necessary dependencies and creating the project structure.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/OAUTH.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\nnpm install --save-dev @atproto/oauth-client-browser\nnpm install --save-dev @atproto/api\nnpm install --save-dev parcel\nnpm install --save-dev parcel-reporter-static-files-copy\nmkdir -p src\nmkdir -p static\n```\n\n----------------------------------------\n\nTITLE: Publishing Identity Commands\nDESCRIPTION: Commands to publish identity events to the PDS's outgoing firehose for specified DIDs. Supports single DID, multiple DIDs, or reading DIDs from a file.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/src/scripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js publish-identity DID\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js publish-identity DID1 DID2 DID3 ...\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js publish-identity-file dids.txt\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version Updates\nDESCRIPTION: Documents version changes and dependencies updates for AT Protocol packages including API, common, sync, crypto and other modules.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/bsky/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`d90d999de`](https://github.com/bluesky-social/atproto/commit/d90d999defda01a9b04dbce129e254990062c283)]:\n  - @atproto/api@0.13.24\n\n## 0.0.101\n\n### Patch Changes\n\n- Updated dependencies [[`6d308b857`](https://github.com/bluesky-social/atproto/commit/6d308b857ba2a514ee3c75ebdef7225e298ed7d7), [`9ea2cce9a`](https://github.com/bluesky-social/atproto/commit/9ea2cce9a4c0a08994a8cb5abc81dc4bc2221d0c)]:\n  - @atproto/api@0.13.23\n```\n\n----------------------------------------\n\nTITLE: Account Deactivation and Session Status Enhancement\nDESCRIPTION: Implements account deactivation functionality and returns current hosting status on session routes in the PDS.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2531](https://github.com/bluesky-social/atproto/pull/2531) [`255d5ea1f`](https://github.com/bluesky-social/atproto/commit/255d5ea1f06726547cdbe59c83bd18f2d4746912) Thanks [@dholms](https://github.com/dholms)! - Account deactivation. Current hosting status returned on session routes.\n```\n\n----------------------------------------\n\nTITLE: Adding omit() Utility and Optimizing DID Document Parsing in @atproto/common-web\nDESCRIPTION: Patch changes in version 0.3.1 that add the omit() utility function and optimize DID document parsing.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common-web/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.1\n\n### Patch Changes\n\n- [#2770](https://github.com/bluesky-social/atproto/pull/2770) [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add omit() utility\n\n- [#2770](https://github.com/bluesky-social/atproto/pull/2770) [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3) Thanks [@matthieusieben](https://github.com/matthieusieben)! - DID document parsing optimization\n```\n\n----------------------------------------\n\nTITLE: Configuring Parcel for atproto OAuth SPA\nDESCRIPTION: This JSON configuration file for Parcel includes the necessary settings for building the SPA, including the static files copy reporter.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/OAUTH.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"@parcel/config-default\"],\n  \"reporters\": [\"...\", \"parcel-reporter-static-files-copy\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Key Rotation Commands\nDESCRIPTION: Commands to ensure account signing keys in PLC DID documents match local PDS keys. Supports single DID, multiple DIDs, file input, and recovery mode.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/src/scripts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js rotate-keys DID\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js rotate-keys DID1 DID2 DID3 ...\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js rotate-keys-file dids.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode run-script.js rotate-keys-recovery\n```\n\n----------------------------------------\n\nTITLE: Version History Entries in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, dependency changes, and feature additions across multiple package versions\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/bsky/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`e4d41d66f`](https://github.com/bluesky-social/atproto/commit/e4d41d66fa4757a696363f39903562458967b63d)]:\n  - @atproto/api@0.13.6\n\n## 0.0.80\n\n### Patch Changes\n\n- [#2751](https://github.com/bluesky-social/atproto/pull/2751) [`80ada8f47`](https://github.com/bluesky-social/atproto/commit/80ada8f47628f55f3074cd16a52857e98d117e14) Thanks [@devinivy](https://github.com/devinivy)! - Lexicons and support for video embeds within bsky posts.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Base32 Encoding Character Set in JavaScript\nDESCRIPTION: This snippet defines the character set for a custom base32 encoding scheme. It uses digits 2-7 and lowercase letters a-z, resulting in a 32-character set. The comment indicates that encoded strings should be 13 digits long.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/tid_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# 13 digits\n# 234567abcdefghijklmnopqrstuvwxyz\n```\n\n----------------------------------------\n\nTITLE: XrpcClient Initialization with Dynamic Headers and Service URL in TypeScript\nDESCRIPTION: Demonstrates XrpcClient initialization where service URLs and headers can be dynamically resolved by using functions. Headers can be omitted or included depending on runtime conditions. This pattern is preferable when request details (e.g., tokens) or endpoints may change during the application lifecycle. Requires @atproto/xrpc.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { XrpcClient } from \"@atproto/xrpc\";\n\nconst instance = new XrpcClient(\n  {\n    service: () => \"http://my-service.com\",\n    headers: {\n      \"my-header\": () => \"my-value\",\n      \"my-ignored-header\": () => null, // ignored\n    },\n  },\n  [\n    {\n      lexicon: 1,\n      id: \"io.example.doStuff\",\n      defs: {},\n    },\n  ],\n);\n\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Node Debugger\nDESCRIPTION: Instructions for running benchmarks and attaching a profiler to packages containing jest.bench.config.js. Describes how to use Chrome DevTools for profiling benchmark execution.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm bench\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm bench:profile\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Query with Ephemeral Database in Bash\nDESCRIPTION: Demonstrates the usage of the with-test-db.sh script to run a PostgreSQL query using an ephemeral database. The script starts a Docker container, executes the query, and then removes the container.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/dev-infra/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./with-test-db.sh psql -c 'select 1;'\n[+] Running 1/1\n ⠿ Container pg-db_test-1  Healthy                                                           1.8s\n\n ?column?\n----------\n        1\n(1 row)\n\n\n[+] Running 1/1\n ⠿ Container pg-db_test-1  Stopped                                                           0.1s\nGoing to remove pg-db_test-1\n[+] Running 1/0\n ⠿ Container pg-db_test-1  Removed\n```\n\n----------------------------------------\n\nTITLE: Version Update - Package Dependencies and Links\nDESCRIPTION: Markdown formatting for version changelog showing package dependencies, pull request links and commit hashes.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/ozone/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto/ozone\n\n## 0.1.106\n\n### Patch Changes\n\n- Updated dependencies [[`0087dc1c0`](https://github.com/bluesky-social/atproto/commit/0087dc1c0bafad1d0a0a1a16683d250dea031bf9)]:\n  - @atproto/api@0.15.3\n```\n\n----------------------------------------\n\nTITLE: AT Protocol URL Path Examples\nDESCRIPTION: Examples demonstrating valid path formats and strict path enforcement in AT Protocol URLs.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/asdf123\nat://did:abc:123\nat://did:abc:123/io.nsid.someFunc/record-key\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Session Events\nDESCRIPTION: TypeScript code demonstrating how to listen for session invalidation events.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclient.addEventListener(\n  'deleted',\n  (\n    event: CustomEvent<{\n      sub: string\n      cause: TokenRefreshError | TokenRevokedError | TokenInvalidError\n    }>,\n  ) => {\n    const { sub, cause } = event.detail\n    console.error(`Session for ${sub} is no longer available (cause: ${cause})`)\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CORS Max-Age Header for Optimized Requests\nDESCRIPTION: Sets the max-age CORS header to the maximum practical value to improve performance by reducing preflight requests.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2522](https://github.com/bluesky-social/atproto/pull/2522) [`53551be6c`](https://github.com/bluesky-social/atproto/commit/53551be6cf092a9b4d2e132788b94ac0d4ffcecc) Thanks [@devinivy](https://github.com/devinivy)! - Set max-age CORS header to max practical value\n```\n\n----------------------------------------\n\nTITLE: Restricting Service Token Distribution\nDESCRIPTION: Updates the authentication system to only distribute service tokens via non-app-pass access tokens for improved security.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- [`0e8acb9fb`](https://github.com/bluesky-social/atproto/commit/0e8acb9fbaf3edcebd8e4f8fe4a381ede0206895) Thanks [@devinivy](https://github.com/devinivy)! - Only distribute service tokens via non-app-pass access tokens\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Entry\nDESCRIPTION: Various version entries documenting changes to the codebase including version numbers, commit hashes, and description of changes\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.16\n\n### Patch Changes\n\n- Updated dependencies [[`3424a1770`](https://github.com/bluesky-social/atproto/commit/3424a17703891f5678ec76ef97e696afb3288b22)]:\n  - @atproto/api@0.12.5\n```\n\n----------------------------------------\n\nTITLE: Basic AT Protocol URI Formats\nDESCRIPTION: Demonstrates basic valid AT Protocol URI formats including DIDs, domain handles, and collection/record references.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123\nat://user.bsky.social\nat://did:plc:asdf123/com.atproto.feed.post\nat://did:plc:asdf123/com.atproto.feed.post/record\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth Client and Session Management\nDESCRIPTION: TypeScript code showing client initialization and session handling.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst result: undefined | { session: OAuthSession; state?: string } =\n  await client.init()\n\nif (result) {\n  const { session, state } = result\n  if (state != null) {\n    console.log(\n      `${session.sub} was successfully authenticated (state: ${state})`,\n    )\n  } else {\n    console.log(`${session.sub} was restored (last active session)`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Account Search Lexicon for Email Lookup\nDESCRIPTION: Adds a lexicon to allow searching for accounts using email address via com.atproto.admin.searchAccounts.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2426](https://github.com/bluesky-social/atproto/pull/2426) [`2b21b5be2`](https://github.com/bluesky-social/atproto/commit/2b21b5be293d32c5eb5ae971c39703bc7d2224fd) Thanks [@foysalit](https://github.com/foysalit)! - Add com.atproto.admin.searchAccounts lexicon to allow searching for accounts using email address\n```\n\n----------------------------------------\n\nTITLE: Class Implementation with Agent\nDESCRIPTION: Demonstrates how to implement a class that uses an Agent instance as a property.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, AtpAgent } from \"@atproto/api\";\n\nclass MyClass {\n  agent: Agent;\n\n  constructor() {\n    this.agent = new AtpAgent();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version Updates in Markdown Changelog\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, dependency changes, and improvements to JWT/JOSE implementation including better runtime compatibility and OAuth support.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/jwk-jose/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto/jwk-jose\n\n## 0.1.6\n\n### Patch Changes\n\n- Updated dependencies [[`26a077716`](https://github.com/bluesky-social/atproto/commit/26a07771673bf1090a61efb7c970235f0b2509fc)]:\n  - @atproto/jwk@0.1.5\n\n## 0.1.5\n\n### Patch Changes\n\n- Updated dependencies [[`850e39843`](https://github.com/bluesky-social/atproto/commit/850e39843cb0ec9ea716675f7568c0c601f45e29)]:\n  - @atproto/jwk@0.1.4\n\n## 0.1.4\n\n### Patch Changes\n\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Apply new linting rules regarding import order\n\n- Updated dependencies [[`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd)]:\n  - @atproto/jwk@0.1.3\n```\n\n----------------------------------------\n\nTITLE: Supported ISO 8601 Timestamp Formats\nDESCRIPTION: Additional supported timestamp formats including various timezone offsets and precision levels. These examples demonstrate compatibility with different timezone representations and optional decimal precision.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/datetime_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-04-12T23:20:50.1235678912345Z\n1985-04-12T23:20:50.100Z\n1985-04-12T23:20:50Z\n1985-04-12T23:20:50.0Z\n1985-04-12T23:20:50.123+00:00\n1985-04-12T23:20:50.123-07:00\n1985-04-12T23:20:50.123+07:00\n1985-04-12T23:20:50.123+01:45\n0985-04-12T23:20:50.123-07:00\n1985-04-12T23:20:50.123-07:00\n0123-01-01T00:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for atproto OAuth SPA\nDESCRIPTION: This HTML file serves as the entry point for the SPA, including the necessary meta tags and script reference to the TypeScript file.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/OAUTH.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>My First OAuth App</title>\n    <script type=\"module\" src=\"app.ts\"></script>\n  </head>\n  <body>\n    Loading...\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Blocking App Password Access to Chat Service\nDESCRIPTION: Implements security restriction to prevent app passwords from communicating with the chat service.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- [`cf25a60e2`](https://github.com/bluesky-social/atproto/commit/cf25a60e25b7531a359f0849729209a55193f7d6) Thanks [@devinivy](https://github.com/devinivy)! - Do not allow app passwords to communicate with chat service\n```\n\n----------------------------------------\n\nTITLE: Invalid ISO 8601 DateTime Examples\nDESCRIPTION: Examples of ISO 8601 datetime strings that satisfy syntax requirements but contain invalid values like zero month, nonexistent months (13), invalid hours (25), invalid minutes (99), and invalid seconds (61).\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/datetime_parse_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-00-12T23:20:50.123Z\n1985-04-00T23:20:50.123Z\n1985-13-12T23:20:50.123Z\n1985-04-12T25:20:50.123Z\n1985-04-12T23:99:50.123Z\n1985-04-12T23:20:61.123Z\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown\nDESCRIPTION: A markdown formatted changelog detailing version updates from 0.4.0 down to 0.1.1, including pull request references, commit hashes, and change descriptions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto/syntax\n\n## 0.4.0\n\n### Minor Changes\n\n- [#3635](https://github.com/bluesky-social/atproto/pull/3635) [`670b6b5de`](https://github.com/bluesky-social/atproto/commit/670b6b5de2bf91e6944761c98eb1126fb6a681ee) Thanks [@bnewbold](https://github.com/bnewbold)! - update NSID syntax to allow non-leading digits\n\n## 0.3.4\n\n### Patch Changes\n\n- [#2945](https://github.com/bluesky-social/atproto/pull/2945) [`850e39843`](https://github.com/bluesky-social/atproto/commit/850e39843cb0ec9ea716675f7568c0c601f45e29) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Deprecate unused classes\n\n## 0.3.3\n\n### Patch Changes\n\n- [#2999](https://github.com/bluesky-social/atproto/pull/2999) [`c53d943c8`](https://github.com/bluesky-social/atproto/commit/c53d943c8be5b8886254e020970a68c0f745b14c) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Improve performance of isValidTid\n\n## 0.3.2\n\n### Patch Changes\n\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Apply new linting rules regarding import order\n\n## 0.3.1\n\n### Patch Changes\n\n- [#2911](https://github.com/bluesky-social/atproto/pull/2911) [`bac9be2d3`](https://github.com/bluesky-social/atproto/commit/bac9be2d3ec904d1f984a871f43cf89aca17289d) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Improve performances of did validation\n\n## 0.3.0\n\n### Minor Changes\n\n- [#2169](https://github.com/bluesky-social/atproto/pull/2169) [`f689bd51a`](https://github.com/bluesky-social/atproto/commit/f689bd51a2f4e02d4eca40eb2568a1fcb95494e9) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Build system rework, stop bundling dependencies.\n\n## 0.2.1\n\n### Patch Changes\n\n- Updated dependencies [[`4eaadc0ac`](https://github.com/bluesky-social/atproto/commit/4eaadc0acb6b73b9745dd7a2b929d02e58083ab0)]:\n  - @atproto/common-web@0.2.4\n\n## 0.2.0\n\n### Minor Changes\n\n- [#2223](https://github.com/bluesky-social/atproto/pull/2223) [`0c815b964`](https://github.com/bluesky-social/atproto/commit/0c815b964c030aa0f277c40bf9786f130dc320f4) Thanks [@bnewbold](https://github.com/bnewbold)! - allow colon character in record-key syntax\n\n## 0.1.5\n\n### Patch Changes\n\n- [#1908](https://github.com/bluesky-social/atproto/pull/1908) [`3c0ef382`](https://github.com/bluesky-social/atproto/commit/3c0ef382c12a413cc971ae47ffb341236c545f60) Thanks [@gaearon](https://github.com/gaearon)! - prevent unnecessary throw/catch on uri syntax\n\n## 0.1.4\n\n### Patch Changes\n\n- [#1788](https://github.com/bluesky-social/atproto/pull/1788) [`84e2d4d2`](https://github.com/bluesky-social/atproto/commit/84e2d4d2b6694f344d80c18672c78b650189d423) Thanks [@bnewbold](https://github.com/bnewbold)! - update license to \"MIT or Apache2\"\n\n- Updated dependencies [[`84e2d4d2`](https://github.com/bluesky-social/atproto/commit/84e2d4d2b6694f344d80c18672c78b650189d423)]:\n  - @atproto/common-web@0.2.3\n\n## 0.1.3\n\n### Patch Changes\n\n- Updated dependencies [[`35d108ce`](https://github.com/bluesky-social/atproto/commit/35d108ce94866ce1b3d147cd0620a0ba1c4ebcd7)]:\n  - @atproto/common-web@0.2.2\n\n## 0.1.2\n\n### Patch Changes\n\n- Updated dependencies [[`41ee177f`](https://github.com/bluesky-social/atproto/commit/41ee177f5a440490280d17acd8a89bcddaffb23b)]:\n  - @atproto/common-web@0.2.1\n\n## 0.1.1\n\n### Patch Changes\n\n- [#1611](https://github.com/bluesky-social/atproto/pull/1611) [`b1dc3555`](https://github.com/bluesky-social/atproto/commit/b1dc355504f9f2e047093dc56682b8034518cf80) Thanks [@estrattonbailey](https://github.com/estrattonbailey)! - Fix imports in `README.md`.\n```\n\n----------------------------------------\n\nTITLE: Extreme Date Range ISO 8601 Timestamps\nDESCRIPTION: Examples of allowed timestamp formats with dates at the extremes of the acceptable range, from early dates to far future dates.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/datetime_syntax_valid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0010-12-31T23:00:00.000Z\n1000-12-31T23:00:00.000Z\n1900-12-31T23:00:00.000Z\n3001-12-31T23:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Updates in Markdown\nDESCRIPTION: Documents version history and changes for the @atproto/xrpc module, including dependency updates, new features for error handling, header management, and response type additions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto/xrpc\n\n## 0.6.12\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @atproto/lexicon@0.4.10\n\n## 0.6.11\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @atproto/lexicon@0.4.9\n\n## 0.6.10\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @atproto/lexicon@0.4.8\n```\n\n----------------------------------------\n\nTITLE: Improving keyBy Typing in @atproto/common-web\nDESCRIPTION: Minor change in version 0.4.0 that makes the typing for the keyBy function more strict.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common-web/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.0\n\n### Minor Changes\n\n- [#3445](https://github.com/bluesky-social/atproto/pull/3445) [`8a30e0ed9`](https://github.com/bluesky-social/atproto/commit/8a30e0ed9239cb2037d54fb98e70e8b0cfbc3e39) Thanks [@rafaelbsky](https://github.com/rafaelbsky)! - Make keyBy typing stricter\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.1.0\nDESCRIPTION: Presents the minor changes in version 0.1.0, highlighting the addition of OAuth provider capability and support for DPoP signed tokens.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/rollup-plugin-bundle-manifest/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0\n\n### Minor Changes\n\n- [#2482](https://github.com/bluesky-social/atproto/pull/2482) [`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add OAuth provider capability & support for DPoP signed tokens\n```\n\n----------------------------------------\n\nTITLE: Valid Handle Examples - Corner Cases\nDESCRIPTION: Examples of edge cases and special formatting that are valid according to modern and old RFCs.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_valid.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n12345.test\n8.cn\n4chan.org\n4chan.o-g\nblah.4chan.org\nthing.a01\n120.0.0.1.com\n0john.test\n9sta--ck.com\n99stack.com\n0ohn.test\njohn.t--t\nthing.0aa.thing\n```\n\n----------------------------------------\n\nTITLE: Enhancing DID Document Handling in @atproto/common-web\nDESCRIPTION: Patch change in version 0.2.2 that allows PDS to serve DID document with credentials and API client to respect PDS listed in the DID document.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common-web/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.2\n\n### Patch Changes\n\n- [`35d108ce`](https://github.com/bluesky-social/atproto/commit/35d108ce94866ce1b3d147cd0620a0ba1c4ebcd7) Thanks [@devinivy](https://github.com/devinivy)! - Allow pds to serve did doc with credentials, API client to respect PDS listed in the did doc.\n```\n\n----------------------------------------\n\nTITLE: AT Protocol URI Path Formats\nDESCRIPTION: Illustrates various valid path formats and record key patterns, including special characters and edge cases in record keys.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:abc:123/io.nsid.someFunc/record-key\n\nat://did:abc:123/io.nsid.someFunc/self.\nat://did:abc:123/io.nsid.someFunc/lang:\nat://did:abc:123/io.nsid.someFunc/:\nat://did:abc:123/io.nsid.someFunc/-\nat://did:abc:123/io.nsid.someFunc/_\nat://did:abc:123/io.nsid.someFunc/~\nat://did:abc:123/io.nsid.someFunc/...\nat://did:plc:asdf123/com.atproto.feed.postV2\n```\n\n----------------------------------------\n\nTITLE: Implementing Report Muting for Moderation\nDESCRIPTION: Adds functionality to mute reports from specific accounts via moderation events, enhancing content moderation capabilities.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2390](https://github.com/bluesky-social/atproto/pull/2390) [`58551bbe0`](https://github.com/bluesky-social/atproto/commit/58551bbe0595462c44fc3b6ab5b83e520f141933) Thanks [@foysalit](https://github.com/foysalit)! - Allow muting reports from accounts via `#modEventMuteReporter` event\n```\n\n----------------------------------------\n\nTITLE: Preventing Bypass of SSRF IP Verification\nDESCRIPTION: Implements measures to prevent bypassing of Server-Side Request Forgery (SSRF) IP verification.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch-node/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#2770](https://github.com/bluesky-social/atproto/pull/2770) [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Prevent bypass of ssrf ip verification\n```\n\n----------------------------------------\n\nTITLE: Valid Handle Examples - Onion Addresses\nDESCRIPTION: Examples of valid Tor .onion addresses and subdomains.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_valid.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nexpyuzz4wqqyqhjn.onion\nfriend.expyuzz4wqqyqhjn.onion\ng2zyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.onion\nfriend.g2zyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.onion\nfriend.g2zyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.onion\n2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.onion\nfriend.2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.onion\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting changes across multiple versions of the ATProto OAuth provider implementation, including dependency updates and breaking changes.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-provider/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#2729](https://github.com/bluesky-social/atproto/pull/2729) [`35a126429`](https://github.com/bluesky-social/atproto/commit/35a1264297bc22acaa6e5ed3f4aed8c351be8bbb) Thanks [@matthieusieben](https://github.com/matthieusieben)! - The non-standard `introspection_endpoint_auth_method`, and `introspection_endpoint_auth_signing_alg` client metadata properties were removed. The client's `token_endpoint_auth_method`, and `token_endpoint_auth_signing_alg` properties are now used as the only indication of how a client must authenticate at the introspection endpoint.\n\n- [#2729](https://github.com/bluesky-social/atproto/pull/2729) [`35a126429`](https://github.com/bluesky-social/atproto/commit/35a1264297bc22acaa6e5ed3f4aed8c351be8bbb) Thanks [@matthieusieben](https://github.com/matthieusieben)! - The non-standard `revocation_endpoint_auth_method`, and `revocation_endpoint_auth_signing_alg` client metadata properties were removed. The client's `token_endpoint_auth_method`, and `token_endpoint_auth_signing_alg` properties are now used as the only indication of how a client must authenticate at the revocation endpoint.\n\n- [#2729](https://github.com/bluesky-social/atproto/pull/2729) [`35a126429`](https://github.com/bluesky-social/atproto/commit/35a1264297bc22acaa6e5ed3f4aed8c351be8bbb) Thanks [@matthieusieben](https://github.com/matthieusieben)! - The non-standard `pushed_authorization_request_endpoint_auth_method`, and `pushed_authorization_request_endpoint_auth_signing_alg` client metadata properties were removed. The client's `token_endpoint_auth_method`, and `token_endpoint_auth_signing_alg` properties are now used as the only indication of how a client must authenticate at the introspection endpoint.\n\n- [#2728](https://github.com/bluesky-social/atproto/pull/2728) [`5131b027f`](https://github.com/bluesky-social/atproto/commit/5131b027f019cf9f8ec47605648063ae1857f1e3) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Allow charset in content-type header of incoming requests\n\n- [#2727](https://github.com/bluesky-social/atproto/pull/2727) [`3ebcd4e61`](https://github.com/bluesky-social/atproto/commit/3ebcd4e6161291d3649d7f8a9c5ee4ac26d590a2) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Do not require \"exp\" claim in dpop proof\n\n- Updated dependencies [[`35a126429`](https://github.com/bluesky-social/atproto/commit/35a1264297bc22acaa6e5ed3f4aed8c351be8bbb)]:\n  - @atproto/oauth-types@0.1.3\n\n## 0.1.2\n\n### Patch Changes\n\n- [#2483](https://github.com/bluesky-social/atproto/pull/2483) [`b934b396b`](https://github.com/bluesky-social/atproto/commit/b934b396b13ba32bf2bf7e75ecdf6871e5f310dd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Remove unused file\n\n- Updated dependencies [[`b934b396b`](https://github.com/bluesky-social/atproto/commit/b934b396b13ba32bf2bf7e75ecdf6871e5f310dd), [`b934b396b`](https://github.com/bluesky-social/atproto/commit/b934b396b13ba32bf2bf7e75ecdf6871e5f310dd), [`b934b396b`](https://github.com/bluesky-social/atproto/commit/b934b396b13ba32bf2bf7e75ecdf6871e5f310dd)]:\n  - @atproto/jwk-jose@0.1.2\n  - @atproto/oauth-types@0.1.2\n```\n\n----------------------------------------\n\nTITLE: Supported ISO 8601 DateTime Formats in atproto\nDESCRIPTION: DateTime formats that are supported but not preferred in the atproto project. These include formats with timezone offsets and various ways of representing seconds precision.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/datetime_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# \"supported\"\n1985-04-12T23:20:50.1235678912345Z\n1985-04-12T23:20:50.100Z\n1985-04-12T23:20:50Z\n1985-04-12T23:20:50.0Z\n1985-04-12T23:20:50.123+00:00\n1985-04-12T23:20:50.123-07:00\n1985-04-12T23:20:50.123+07:00\n1985-04-12T23:20:50.123+01:45\n0985-04-12T23:20:50.123-07:00\n1985-04-12T23:20:50.123-07:00\n0123-01-01T00:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Version 0.8.0 Minor Changes\nDESCRIPTION: Major rewrite of CAR (Content Addressable aRchive) implementation with dependency updates.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/repo/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3672](https://github.com/bluesky-social/atproto/pull/3672) [`4db923ca1`](https://github.com/bluesky-social/atproto/commit/4db923ca1c4fadd31d41c851933659e5186ee144) Thanks [@dholms](https://github.com/dholms)! - Rewrite CAR implementation\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP2 for SSRF IP Checks\nDESCRIPTION: Disables the use of HTTP2 when checking Server-Side Request Forgery (SSRF) IP addresses.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch-node/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#2854](https://github.com/bluesky-social/atproto/pull/2854) [`8943c1008`](https://github.com/bluesky-social/atproto/commit/8943c10082702bbc0fc150237c6cc421251afd51) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Disable use of HTTP2 when checking SSRF IP\n```\n\n----------------------------------------\n\nTITLE: Valid Handle Examples - Special TLDs\nDESCRIPTION: Examples of handles using special TLDs like .local and .arpa that are allowed at the protocol level.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nlaptop.local\nlaptop.arpa\n```\n\n----------------------------------------\n\nTITLE: Documenting Pull Request Changes in Markdown Changelog\nDESCRIPTION: This snippet demonstrates how to document changes from a specific pull request in a Markdown changelog. It includes the PR number, commit hash, author credit, and a brief description of the change.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/jwk-webcrypto/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Apply new linting rules regarding import order\n```\n\n----------------------------------------\n\nTITLE: Adding CAR Header Type in @atproto/common-web\nDESCRIPTION: Patch change in version 0.4.1 that adds a CAR Header type to the package.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common-web/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.1\n\n### Patch Changes\n\n- [#3672](https://github.com/bluesky-social/atproto/pull/3672) [`4db923ca1`](https://github.com/bluesky-social/atproto/commit/4db923ca1c4fadd31d41c851933659e5186ee144) Thanks [@dholms](https://github.com/dholms)! - Add CAR Header type\n```\n\n----------------------------------------\n\nTITLE: Adding lessThanAgoMs Utility in @atproto/common-web\nDESCRIPTION: Patch change in version 0.2.1 that adds the lessThanAgoMs utility function to the package.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common-web/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.1\n\n### Patch Changes\n\n- [#1568](https://github.com/bluesky-social/atproto/pull/1568) [`41ee177f`](https://github.com/bluesky-social/atproto/commit/41ee177f5a440490280d17acd8a89bcddaffb23b) Thanks [@dholms](https://github.com/dholms)! - Added lessThanAgoMs utility\n```\n\n----------------------------------------\n\nTITLE: Adding OAuth Provider and DPoP Token Support\nDESCRIPTION: Introduces OAuth provider capability and support for DPoP (Demonstrating Proof-of-Possession) signed tokens.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch-node/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#2482](https://github.com/bluesky-social/atproto/pull/2482) [`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add OAuth provider capability & support for DPoP signed tokens\n```\n\n----------------------------------------\n\nTITLE: Starting Mock UI Server with pnpm for Bluesky Social Development\nDESCRIPTION: Command to start a mock UI server using pnpm, which serves the UI through Vite at http://localhost:5173.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-provider-ui/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:ui\n```\n\n----------------------------------------\n\nTITLE: Special Case Handle Tests\nDESCRIPTION: Additional test cases for special validation scenarios, including international characters and invalid formats.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_invalid.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n-notvalid.at-all\n-thing.com\nwww.masełkowski.pl.com\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Markdown Changelog\nDESCRIPTION: This snippet shows the syntax for documenting dependency updates in a Markdown changelog. It includes the version number, change type, and links to the specific commit that made the change.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/jwk-webcrypto/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`26a077716`](https://github.com/bluesky-social/atproto/commit/26a07771673bf1090a61efb7c970235f0b2509fc)]:\n  - @atproto/jwk@0.1.5\n  - @atproto/jwk-jose@0.1.6\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP2 for Safe Fetch Requests\nDESCRIPTION: Prevents the use of HTTP2 connections when performing \"safe fetch\" HTTP requests.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch-node/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#2865](https://github.com/bluesky-social/atproto/pull/2865) [`80450cbf2`](https://github.com/bluesky-social/atproto/commit/80450cbf2ca27967ee9fe1a5f4bc590b26f1e6b2) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Do not use HTTP2 connection when performing \"safe fetch\" HTTP requests\n```\n\n----------------------------------------\n\nTITLE: Examples of Invalid Handles in ATProto\nDESCRIPTION: A list of handle patterns that are considered invalid in the ATProto specification. These examples demonstrate various handle format violations such as invalid characters, improper domain formatting, and punycode issues.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/atidentifier_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndid:thing.test\ndid:thing\njohn-.test\njohn.0\njohn.-\nxn--bcher-.tld\njohn..test\njo_hn.test\n```\n\n----------------------------------------\n\nTITLE: Preferred ISO 8601 DateTime Formats in atproto\nDESCRIPTION: A list of datetime formats that are preferred for use in the atproto project. These examples demonstrate the standard ISO 8601 format with different millisecond precisions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/datetime_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# \"preferred\"\n1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.000Z\n2000-01-01T00:00:00.000Z\n1985-04-12T23:20:50.123456Z\n1985-04-12T23:20:50.120Z\n1985-04-12T23:20:50.120000Z\n```\n\n----------------------------------------\n\nTITLE: TLD and Corner Case Validation Tests\nDESCRIPTION: Test cases for TLD validation including single-segment TLDs and corner cases for modern vs old RFC compliance.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_invalid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\norg\nai\ngg\nio\n\ncn.8\nthing.0aa\nthing.0aa\n```\n\n----------------------------------------\n\nTITLE: Documenting Pull Request Changes in Markdown\nDESCRIPTION: This snippet demonstrates how changes associated with specific pull requests are documented in the changelog. It includes the pull request number, commit hash, and a description of the changes made.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/identity/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Apply new linting rules regarding import order\n\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Update NodeJS engine requirement to >=18.7.0\n```\n\n----------------------------------------\n\nTITLE: Minor Version Changes\nDESCRIPTION: Breaking changes documentation including removal of OpenID compatibility and changes to OAuth client returns\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#2714] The `OAuthClient` no longer return @atproto/api `Agent` instances\n- [#2734] Remove \"openid\" compatibility\n```\n\n----------------------------------------\n\nTITLE: Reworking Build System in @atproto/common-web\nDESCRIPTION: Minor change in version 0.3.0 that reworks the build system and stops bundling dependencies.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common-web/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0\n\n### Minor Changes\n\n- [#2169](https://github.com/bluesky-social/atproto/pull/2169) [`f689bd51a`](https://github.com/bluesky-social/atproto/commit/f689bd51a2f4e02d4eca40eb2568a1fcb95494e9) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Build system rework, stop bundling dependencies.\n```\n\n----------------------------------------\n\nTITLE: Valid Handle Examples - Standard Domains\nDESCRIPTION: Examples of standard valid domain handles including educational institutions, test domains, and common TLDs.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nA.ISI.EDU\nXX.LCS.MIT.EDU\nSRI-NIC.ARPA\njohn.test\njan.test\na234567890123456789.test\njohn2.test\njohn-john.test\njohn.bsky.app\njo.hn\na.co\na.org\njoh.n\nj0.h0\njaymome-johnber123456.test\njay.mome-johnber123456.test\njohn.test.bsky.app\n```\n\n----------------------------------------\n\nTITLE: Variable Precision ISO 8601 Timestamps\nDESCRIPTION: Examples showing timestamp formats with increasing precision from 1 to 12 decimal places. Demonstrates the range of acceptable decimal precision in fractional seconds.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/datetime_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-04-12T23:20:50.1Z\n1985-04-12T23:20:50.12Z\n1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.1234Z\n1985-04-12T23:20:50.12345Z\n1985-04-12T23:20:50.123456Z\n1985-04-12T23:20:50.1234567Z\n1985-04-12T23:20:50.12345678Z\n1985-04-12T23:20:50.123456789Z\n1985-04-12T23:20:50.1234567890Z\n1985-04-12T23:20:50.12345678901Z\n1985-04-12T23:20:50.123456789012Z\n```\n\n----------------------------------------\n\nTITLE: Illustrating Disallowed Dot/Double-Dot Record Keys in AT URIs\nDESCRIPTION: These examples specifically show that using '.' or '..' as the record key segment in an AT Protocol URI is disallowed according to the specified rules.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_invalid.txt#2025-04-22_snippet_5\n\nLANGUAGE: uri\nCODE:\n```\n# disallow dot / double-dot\nat://did:plc:asdf123/com.atproto.feed.post/.\nat://did:plc:asdf123/com.atproto.feed.post/..\n```\n\n----------------------------------------\n\nTITLE: Version Changelog Entry in Markdown\nDESCRIPTION: Markdown documentation of version changes and updates for the @atproto/common package, tracking dependencies, patches, and feature additions across multiple versions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto/common\n\n## 0.4.10\n\n### Patch Changes\n\n- [#3672](https://github.com/bluesky-social/atproto/pull/3672) [`4db923ca1`](https://github.com/bluesky-social/atproto/commit/4db923ca1c4fadd31d41c851933659e5186ee144) Thanks [@dholms](https://github.com/dholms)! - Add DASL CID parser\n\n- Updated dependencies [[`4db923ca1`](https://github.com/bluesky-social/atproto/commit/4db923ca1c4fadd31d41c851933659e5186ee144)]:\n  - @atproto/common-web@0.4.1\n\n## 0.4.9\n\n### Patch Changes\n\n- [#2519](https://github.com/bluesky-social/atproto/pull/2519) [`bdbd3c3e3`](https://github.com/bluesky-social/atproto/commit/bdbd3c3e3f8fe8476a3fecac73810554846c938f) Thanks [@dholms](https://github.com/dholms)! - Add renameIfExists function\n```\n\n----------------------------------------\n\nTITLE: Valid Handle Examples - Punycode\nDESCRIPTION: Examples of internationalized domain names encoded in punycode format.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_valid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nxn--ls8h.test\nxn--bcher-kva.tld\nxn--3jk.com\nxn--w3d.com\nxn--vqb.com\nxn--ppd.com\nxn--cs9a.com\nxn--8r9a.com\nxn--cfd.com\nxn--5jk.com\nxn--2lb.com\n```\n\n----------------------------------------\n\nTITLE: Valid Standard Domain Handles\nDESCRIPTION: Examples of valid standard domain handles including institutional domains, test domains, and common TLDs.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/handle_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nA.ISI.EDU\nXX.LCS.MIT.EDU\nSRI-NIC.ARPA\njohn.test\njan.test\na234567890123456789.test\njohn2.test\njohn-john.test\njohn.bsky.app\njo.hn\na.co\na.org\njoh.n\nj0.h0\njaymome-johnber123456.test\njay.mome-johnber123456.test\njohn.test.bsky.app\n```\n\n----------------------------------------\n\nTITLE: Special Protocol Handles\nDESCRIPTION: Valid handles for special protocols including .local, .arpa, and .onion (Tor) addresses.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/handle_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nlaptop.local\nlaptop.arpa\n\nexpyuzz4wqqyqhjn.onion\nfriend.expyuzz4wqqyqhjn.onion\ng2zyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.onion\nfriend.g2zyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.onion\n2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.onion\n```\n\n----------------------------------------\n\nTITLE: Illustrating Valid Record Key Characters in AT URIs (Lexicon)\nDESCRIPTION: This set of examples demonstrates various valid characters and percent-encoding allowed within the record key segment of an AT Protocol URI when used with Lexicon schemas. It shows support for special characters like $, @, !, *, (, ), :, ;, ~, ., ', and percent-encoded values, although some encoding examples (%3, %, %zz, %%%) might be technically valid but practically problematic or nonsensical.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_invalid.txt#2025-04-22_snippet_4\n\nLANGUAGE: uri\nCODE:\n```\n# new less permissive about record keys for Lexicon use (with recordkey more specified)\nat://did:plc:asdf123/com.atproto.feed.post/%23\nat://did:plc:asdf123/com.atproto.feed.post/$@!*)(:,;~.sdf123\nat://did:plc:asdf123/com.atproto.feed.post/~'sdf123\")\nat://did:plc:asdf123/com.atproto.feed.post/$\nat://did:plc:asdf123/com.atproto.feed.post/@\nat://did:plc:asdf123/com.atproto.feed.post/!\nat://did:plc:asdf123/com.atproto.feed.post/*\nat://did:plc:asdf123/com.atproto.feed.post/(\nat://did:plc:asdf123/com.atproto.feed.post/,\nat://did:plc:asdf123/com.atproto.feed.post/;\nat://did:plc:asdf123/com.atproto.feed.post/abc%30123\nat://did:plc:asdf123/com.atproto.feed.post/%30\nat://did:plc:asdf123/com.atproto.feed.post/%3\nat://did:plc:asdf123/com.atproto.feed.post/%\nat://did:plc:asdf123/com.atproto.feed.post/%zz\nat://did:plc:asdf123/com.atproto.feed.post/%%%\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 0.0.2\nDESCRIPTION: Initial changelog entry documenting the split of OAuth Provider UI into its own package.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-provider-ui/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.2\n\n### Patch Changes\n\n- [#3640](https://github.com/bluesky-social/atproto/pull/3640) [`cc4122652`](https://github.com/bluesky-social/atproto/commit/cc4122652ed42ba55826c019d0ec57bf25df1ecd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Split OAuth Provider's ui into its own package\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 0.1.3\nDESCRIPTION: Changelog entry documenting UI fixes and removal of lazy loading for hcaptcha library.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-provider-ui/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.3\n\n### Patch Changes\n\n- [#3778](https://github.com/bluesky-social/atproto/pull/3778) [`81524fcb0`](https://github.com/bluesky-social/atproto/commit/81524fcb007f12161fd6928badbf176b1568b4b3) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Minor UI fixes\n\n- [#3781](https://github.com/bluesky-social/atproto/pull/3781) [`a70dad5ae`](https://github.com/bluesky-social/atproto/commit/a70dad5aea32ce26d2cca170a06d184935b4865d) Thanks [@estrattonbailey](https://github.com/estrattonbailey)! - Remove lazy loading of hcaptcha library to resolve chunk loading errors.\n```\n\n----------------------------------------\n\nTITLE: Punycode Domain Handles\nDESCRIPTION: Examples of valid punycode-encoded domain handles for internationalized domain names.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/handle_syntax_valid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nxn--ls8h.test\nxn--bcher-kva.tld\nxn--3jk.com\nxn--w3d.com\nxn--vqb.com\nxn--ppd.com\nxn--cs9a.com\nxn--8r9a.com\nxn--cfd.com\nxn--5jk.com\nxn--2lb.com\n```\n\n----------------------------------------\n\nTITLE: Maximum Length Domain Handles\nDESCRIPTION: Examples demonstrating maximum length constraints for domain handles and segments.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/handle_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nshoooort.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.test\n\nshort.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.test\n```\n\n----------------------------------------\n\nTITLE: AT Protocol URI Path and Fragment Validation\nDESCRIPTION: Test cases for validating ATP URI paths and fragments, including whitespace handling and fragment syntax.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123\nat://did:plc:asdf123/\nat://did:plc:asdf123\nat://did:plc:asdf123/com.atproto.feed.post\nat://did:plc:asdf123/com.atproto.feed.post#\nat://did:plc:asdf123/com.atproto.feed.post#/\nat://did:plc:asdf123/com.atproto.feed.post#/frag\nat://did:plc:asdf123/com.atproto.feed.post#fr ag\n```\n\n----------------------------------------\n\nTITLE: Dependency Update SHA Reference\nDESCRIPTION: Git commit SHA reference for dependency update in version 0.7.15\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc-server/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`4db923ca1`\n```\n\n----------------------------------------\n\nTITLE: ATProto URI Fragment and Path Tests\nDESCRIPTION: Test cases for validating URI fragments, paths, and special characters in ATProto URIs.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post\nat://did:plc:asdf123/com.atproto.feed.post#\nat://did:plc:asdf123/com.atproto.feed.post#/\nat://did:plc:asdf123/com.atproto.feed.post#/frag\nat://did:plc:asdf123/com.atproto.feed.post#fr ag\n```\n\n----------------------------------------\n\nTITLE: NSID Length Check Examples\nDESCRIPTION: Examples demonstrating maximum length constraints for NSIDs with various segment patterns.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/nsid_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.foo\ncom.example.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\ncom.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.foo\n```\n\n----------------------------------------\n\nTITLE: Valid Handle Format Examples in AT Protocol\nDESCRIPTION: Examples of valid handle formats including domain-style identifiers with periods and hyphens. Shows allowed character patterns and length restrictions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/atidentifier_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nXX.LCS.MIT.EDU\njohn.test\njan.test\na234567890123456789.test\njohn2.test\njohn-john.test\n```\n\n----------------------------------------\n\nTITLE: Corner Case NSID Test Cases\nDESCRIPTION: A set of corner cases for NSID validation, including special characters and edge cases.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/recordkey_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# more corner-cases\n:\n-\n_\n~\n...\nself.\nlang:\n:lang\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 0.1.1\nDESCRIPTION: Changelog entry documenting dependency fixes and explicit file exports.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-provider-ui/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.1\n\n### Patch Changes\n\n- [#3754](https://github.com/bluesky-social/atproto/pull/3754) [`1e461eab0`](https://github.com/bluesky-social/atproto/commit/1e461eab033f728f537db554b3072b7eda7e5e8f) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Fix dependencies\n\n- [#3754](https://github.com/bluesky-social/atproto/pull/3754) [`1e461eab0`](https://github.com/bluesky-social/atproto/commit/1e461eab033f728f537db554b3072b7eda7e5e8f) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Explicit exported package `files`\n```\n\n----------------------------------------\n\nTITLE: Disallowing Dot and Double-Dot in AT Protocol URI Record Keys\nDESCRIPTION: This snippet explicitly shows that dot (.) and double-dot (..) are not allowed in record keys of AT Protocol URIs. This restriction helps maintain the integrity and security of the URI structure.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_invalid.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n# disallow dot / double-dot\nat://did:plc:asdf123/com.atproto.feed.post/.\nat://did:plc:asdf123/com.atproto.feed.post/..\n```\n\n----------------------------------------\n\nTITLE: Illustrating Record Key Restrictions in AT Protocol URIs\nDESCRIPTION: This section demonstrates the more restrictive approach to record keys in AT Protocol URIs, particularly for Lexicon use. It shows various examples of valid and invalid character usage in record keys.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_invalid.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# new less permissive about record keys for Lexicon use (with recordkey more specified)\nat://did:plc:asdf123/com.atproto.feed.post/%23\nat://did:plc:asdf123/com.atproto.feed.post/$@!*)(:,;~.sdf123\nat://did:plc:asdf123/com.atproto.feed.post/~'sdf123\")\nat://did:plc:asdf123/com.atproto.feed.post/$\nat://did:plc:asdf123/com.atproto.feed.post/@\nat://did:plc:asdf123/com.atproto.feed.post/!\nat://did:plc:asdf123/com.atproto.feed.post/*\nat://did:plc:asdf123/com.atproto.feed.post/(\nat://did:plc:asdf123/com.atproto.feed.post/,\nat://did:plc:asdf123/com.atproto.feed.post/;\nat://did:plc:asdf123/com.atproto.feed.post/abc%30123\nat://did:plc:asdf123/com.atproto.feed.post/%30\nat://did:plc:asdf123/com.atproto.feed.post/%3\nat://did:plc:asdf123/com.atproto.feed.post/%\nat://did:plc:asdf123/com.atproto.feed.post/%zz\nat://did:plc:asdf123/com.atproto.feed.post/%%%\n```\n\n----------------------------------------\n\nTITLE: Valid NSID Format Examples\nDESCRIPTION: Standard valid NSID formats including alphanumeric segments, version numbers, and internationalized domain names.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/nsid_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.example.fooBar\ncom.example.fooBarV2\nnet.users.bob.ping\na.b.c\nm.xn--masekowski-d0b.pl\none.two.three\none.two.three.four-and.FiVe\none.2.three\na-0.b-1.c\na0.b1.cc\ncn.8.lex.stuff\ntest.12345.record\na01.thing.record\na.0.c\nxn--fiqs8s.xn--fiqa61au8b7zsevnm8ak20mc4a87e.record.two\na0.b1.c3\ncom.example.f00\n```\n\n----------------------------------------\n\nTITLE: Extreme Length NSID Test Case\nDESCRIPTION: A test case for validating an extremely long NSID, consisting of 512 repeated 'o' characters.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/recordkey_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# very long: 'o'.repeat(512)\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n```\n\n----------------------------------------\n\nTITLE: Permitting PSL Domains in Unicast Checks\nDESCRIPTION: Modifies unicast checks to allow Public Suffix List (PSL) domains.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch-node/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#3379](https://github.com/bluesky-social/atproto/pull/3379) [`9c0128193`](https://github.com/bluesky-social/atproto/commit/9c01281931a371304bcfa465005d7363c003bc5f) Thanks [@devinivy](https://github.com/devinivy)! - Unicast checks should permit PSL domains.\n```\n\n----------------------------------------\n\nTITLE: Valid DID Method Examples\nDESCRIPTION: Examples of valid DID strings for various methods including onion addresses, example DIDs, PLC identifiers, web DIDs, and key-based DIDs.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/did_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndid:onion:2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid\ndid:example:123456789abcdefghi\ndid:plc:7iza6de2dwap2sbkpav7c6c6\ndid:web:example.com\ndid:web:localhost%3A1234\ndid:key:zQ3shZc2QzApp2oymGvQbzP8eKheVshBHbU4ZYjeXqwSKEn6N\ndid:ethr:0xb9c5714089478a327f09197987f16f9e5d936e8a\n```\n\n----------------------------------------\n\nTITLE: AT Protocol URI Character and Format Restrictions\nDESCRIPTION: Test cases for validating character restrictions and format requirements in ATP URIs, including special characters and naming conventions.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_invalid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.p@st\nat://did:plc:asdf123/com.atproto.feed.p$st\nat://did:plc:asdf123/com.atproto.feed.p%st\nat://did:plc:asdf123/com.atproto.feed.p&st\nat://did:plc:asdf123/com.atproto.feed.p()t\nat://did:plc:asdf123/com.atproto.feed_post\nat://did:plc:asdf123/-com.atproto.feed.post\n```\n\n----------------------------------------\n\nTITLE: Basic AT Protocol URL Examples\nDESCRIPTION: Basic examples of valid AT Protocol URLs showing DID and domain formats with collection paths.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123\nat://user.bsky.social\nat://did:plc:asdf123/com.atproto.feed.post\nat://did:plc:asdf123/com.atproto.feed.post/record\n```\n\n----------------------------------------\n\nTITLE: Character Validation Test Cases\nDESCRIPTION: Various test cases for validating character handling including special characters, handles, spaces, numbers in brackets/parentheses, quotes, base64 strings, and a length limit test of 513 characters.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/recordkey_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# specs\nalpha/beta\n.\n..\n#extra\n@handle\nany space\nany+space\nnumber[3]\nnumber(3)\n\"quote\"\ndHJ1ZQ==\n\n# too long: 'o'.repeat(513)\nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n```\n\n----------------------------------------\n\nTITLE: Applying New Linting Rules for Import Order\nDESCRIPTION: Applies new linting rules regarding the order of imports in the codebase.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch-node/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Apply new linting rules regarding import order\n```\n\n----------------------------------------\n\nTITLE: NSID Length Check Examples\nDESCRIPTION: Examples demonstrating NSID length limitations and formatting with extremely long segments.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/nsid_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.foo\ncom.example.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\ncom.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.foo\n```\n\n----------------------------------------\n\nTITLE: Numeric Segment NSID Examples\nDESCRIPTION: Examples demonstrating valid NSID formats with numeric segments, similar to domain name rules.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/nsid_syntax_valid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\norg.4chan.lex.getThing\ncn.8.lex.stuff\nonion.2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.lex.deleteThing\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Permissive Fragment Handling in AT URIs\nDESCRIPTION: These examples show that AT Protocol URIs are highly permissive regarding the fragment part (following the '#'). Multiple '#' characters and fragments within path segments are illustrated.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_invalid.txt#2025-04-22_snippet_3\n\nLANGUAGE: uri\nCODE:\n```\n# is very permissive about fragments\nat://did:plc:asdf123#\nat://did:plc:asdf123##\n#at://did:plc:asdf123\nat://did:plc:asdf123#/asdf#/asdf\n```\n\n----------------------------------------\n\nTITLE: Long AT Protocol URI Example\nDESCRIPTION: Shows a maximum length URI example with a 512-character record key consisting of repeated 'o' characters.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n```\n\n----------------------------------------\n\nTITLE: Creating Client Metadata JSON for atproto OAuth\nDESCRIPTION: This JSON file contains the client metadata required for OAuth authentication with atproto services. It includes essential fields such as client_id, redirect_uris, and grant_types.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/OAUTH.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\": \"https://example.com/client-metadata.json\",\n  \"client_name\": \"Example atproto Browser App\",\n  \"client_uri\": \"https://example.com\",\n  \"logo_uri\": \"https://example.com/logo.png\",\n  \"tos_uri\": \"https://example.com/tos\",\n  \"policy_uri\": \"https://example.com/policy\",\n  \"redirect_uris\": [\"https://example.com/callback\"],\n  \"scope\": \"atproto\",\n  \"grant_types\": [\"authorization_code\", \"refresh_token\"],\n  \"response_types\": [\"code\"],\n  \"token_endpoint_auth_method\": \"none\",\n  \"application_type\": \"web\",\n  \"dpop_bound_access_tokens\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies in package.json for @atproto-labs/simple-store-memory\nDESCRIPTION: This code snippet shows the updated dependency versions for @atproto-labs/simple-store in the package.json file. It includes commit hashes for reference.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/simple-store-memory/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`0d77d1b55`](https://github.com/bluesky-social/atproto/commit/0d77d1b550a58117aee8f7f1e2be24d255ade9e4), [`0d77d1b55`](https://github.com/bluesky-social/atproto/commit/0d77d1b550a58117aee8f7f1e2be24d255ade9e4)]:\n  - @atproto-labs/simple-store@0.2.0\n```\n\n----------------------------------------\n\nTITLE: Onion NSID Examples\nDESCRIPTION: Examples of valid Tor onion service NSIDs, demonstrating the special case handling for .onion addresses.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/nsid_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nonion.expyuzz4wqqyqhjn.spec.getThing\nonion.g2zyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.lex.deleteThing\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ISO-8601 Date Format Variations in Plaintext\nDESCRIPTION: This snippet showcases various ISO-8601 date format examples, including subtle changes, incorrect formats, and edge cases. It's useful for testing date parsing functions or understanding the nuances of the ISO-8601 standard.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/datetime_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# subtle changes to: 1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.123z\n01985-04-12T23:20:50.123Z\n985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.Z\n1985-04-32T23;20:50.123Z\n1985-04-32T23;20:50.123Z\n\n# en-dash and em-dash\n1985—04-32T23;20:50.123Z\n1985–04-32T23;20:50.123Z\n\n# whitespace\n 1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.123Z \n1985-04-12T 23:20:50.123Z\n\n# not enough zero padding\n1985-4-12T23:20:50.123Z\n1985-04-2T23:20:50.123Z\n1985-04-12T3:20:50.123Z\n1985-04-12T23:0:50.123Z\n1985-04-12T23:20:5.123Z\n\n# too much zero padding\n01985-04-12T23:20:50.123Z\n1985-004-12T23:20:50.123Z\n1985-04-012T23:20:50.123Z\n1985-04-12T023:20:50.123Z\n1985-04-12T23:020:50.123Z\n1985-04-12T23:20:050.123Z\n\n# strict capitalization (ISO-8601)\n1985-04-12t23:20:50.123Z\n1985-04-12T23:20:50.123z\n\n# RFC-3339, but not ISO-8601\n1985-04-12T23:20:50.123-00:00\n1985-04-12_23:20:50.123Z\n1985-04-12 23:20:50.123Z\n\n# ISO-8601, but weird\n1985-04-274T23:20:50.123Z\n\n# timezone is required\n1985-04-12T23:20:50.123\n1985-04-12T23:20:50\n\n1985-04-12\n1985-04-12T23:20Z\n1985-04-12T23:20:5Z\n1985-04-12T23:20:50.123\n+001985-04-12T23:20:50.123Z\n23:20:50.123Z\n\n1985-04-12T23:20:50.123+00\n1985-04-12T23:20:50.123+00:0\n1985-04-12T23:20:50.123+0:00\n1985-04-12T23:20:50.123\n1985-04-12T23:20:50.123+0000\n1985-04-12T23:20:50.123+00\n1985-04-12T23:20:50.123+\n1985-04-12T23:20:50.123-\n\n# ISO-8601, but normalizes to a negative time\n0000-01-01T00:00:00+01:00\n-000001-12-31T23:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Invalid DID Method Examples\nDESCRIPTION: Examples of DID strings with various formatting patterns, including invalid characters, lengths, and special characters.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/did_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndid:method:val\ndid:method:VAL\ndid:method:val123\ndid:method:123\ndid:method:val-two\ndid:method:val_two\ndid:method:val.two\ndid:method:val:two\ndid:method:val%BB\ndid:method:vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\ndid:m:v\ndid:method::::val\ndid:method:-\ndid:method:-:_:.:%ab\ndid:method:.\ndid:method:_\ndid:method::.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Changelog entries documenting version updates and dependency changes for the OAuth provider API package.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-provider-api/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto/oauth-provider-api\n\n## 0.1.1\n\n### Patch Changes\n\n- Updated dependencies [[`30f9b6690`](https://github.com/bluesky-social/atproto/commit/30f9b6690e0e2c5810772e94e631322b9d89c65a), [`30f9b6690`](https://github.com/bluesky-social/atproto/commit/30f9b6690e0e2c5810772e94e631322b9d89c65a)]:\n  - @atproto/oauth-types@0.2.6\n\n## 0.1.0\n\n### Minor Changes\n\n- [#3659](https://github.com/bluesky-social/atproto/pull/3659) [`371e04aad`](https://github.com/bluesky-social/atproto/commit/371e04aad2a3e8ae3fe185ce15fc8eb051cab78e) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Various adaptations\n\n### Patch Changes\n\n- Updated dependencies [[`371e04aad`](https://github.com/bluesky-social/atproto/commit/371e04aad2a3e8ae3fe185ce15fc8eb051cab78e), [`26a077716`](https://github.com/bluesky-social/atproto/commit/26a07771673bf1090a61efb7c970235f0b2509fc)]:\n  - @atproto/oauth-types@0.2.5\n  - @atproto/jwk@0.1.5\n\n## 0.0.1\n\n### Patch Changes\n\n- [#3640](https://github.com/bluesky-social/atproto/pull/3640) [`cc4122652`](https://github.com/bluesky-social/atproto/commit/cc4122652ed42ba55826c019d0ec57bf25df1ecd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Exctracted types shared between OAuthProvider backand and it's UI into a separate package.\n```\n\n----------------------------------------\n\nTITLE: ATProto OAuth Changelog\nDESCRIPTION: Changelog entries documenting version updates and dependencies for ATProto OAuth implementation, including patch changes and minor version updates.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-types/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#2483](https://github.com/bluesky-social/atproto/pull/2483) [`b934b396b`](https://github.com/bluesky-social/atproto/commit/b934b396b13ba32bf2bf7e75ecdf6871e5f310dd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Better implement aptroto OAuth spec\n\n## 0.1.1\n\n### Patch Changes\n\n- [#2633](https://github.com/bluesky-social/atproto/pull/2633) [`acc9093d2`](https://github.com/bluesky-social/atproto/commit/acc9093d2845eba02b68fb2f9db33e4f1b59bb10) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add client_id_metadata_document_supported in metadata\n\n- Updated dependencies [[`acc9093d2`](https://github.com/bluesky-social/atproto/commit/acc9093d2845eba02b68fb2f9db33e4f1b59bb10)]:\n  - @atproto/jwk@0.1.1\n\n## 0.1.0\n\n### Minor Changes\n\n- [#2482](https://github.com/bluesky-social/atproto/pull/2482) [`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add OAuth provider capability & support for DPoP signed tokens\n\n### Patch Changes\n\n- Updated dependencies [[`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646)]:\n  - @atproto/jwk@0.1.0\n```\n\n----------------------------------------\n\nTITLE: Tor Onion NSID Examples\nDESCRIPTION: Examples showing valid NSID formats for Tor onion addresses.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/nsid_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nonion.expyuzz4wqqyqhjn.spec.getThing\nonion.g2zyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.lex.deleteThing\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates - Markdown Change Log\nDESCRIPTION: Structured list of version changes and dependency updates for AT Protocol packages, organized by release version numbers and including commit references.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/dev-env/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`d4e14b7bd`](https://github.com/bluesky-social/atproto/commit/d4e14b7bdc7752476757ecfe96343d146411b784), [`99e2809ca`](https://github.com/bluesky-social/atproto/commit/99e2809ca2ebf70acaa10254f140a8dd0fad4305), [`11d8d21be`](https://github.com/bluesky-social/atproto/commit/11d8d21beac4b79ac44b930197761f9d08dbb492), [`27b0a7be1`](https://github.com/bluesky-social/atproto/commit/27b0a7be1ed1b6e098114791d84ec9dc844db552), [`11d8d21be`](https://github.com/bluesky-social/atproto/commit/11d8d21beac4b79ac44b930197761f9d08dbb492), [`5cce76670`](https://github.com/bluesky-social/atproto/commit/5cce7667058981561340107e0124093203e796e3)]:\n  - @atproto/pds@0.4.104\n  - @atproto/api@0.14.7\n  - @atproto/bsky@0.0.124\n  - @atproto/ozone@0.1.86\n```\n\n----------------------------------------\n\nTITLE: Numeric-First Segment NSID Examples\nDESCRIPTION: Examples showing NSIDs with segments that begin with numbers, which are allowed similar to domain names.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/nsid_syntax_valid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\norg.4chan.lex.getThing\ncn.8.lex.stuff\nonion.2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.lex.deleteThing\n```\n\n----------------------------------------\n\nTITLE: Invalid Handle Format Test Cases\nDESCRIPTION: Collection of invalid handle formats that should throw validation errors, including handles with special characters, spaces, invalid starts/ends, and unicode characters.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndid:thing.test\ndid:thing\njohn-.test\njohn.0\njohn.-\nxn--bcher-.tld\njohn..test\njo_hn.test\n-john.test\n.john.test\njo!hn.test\njo%hn.test\njo&hn.test\njo@hn.test\njo*hn.test\njo|hn.test\njo:hn.test\njo/hn.test\njohn💩.test\nbücher.test\njohn .test\njohn.test.\njohn\njohn.\n.john\njohn.test.\n.john.test\n john.test\njohn.test \njoh-.test\njohn.-est\njohn.tes-\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry - Version 0.1.0\nDESCRIPTION: Changelog entry documenting new build system and client ID pathname handling.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-provider-ui/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0\n\n### Minor Changes\n\n- [#3659](https://github.com/bluesky-social/atproto/pull/3659) [`371e04aad`](https://github.com/bluesky-social/atproto/commit/371e04aad2a3e8ae3fe185ce15fc8eb051cab78e) Thanks [@matthieusieben](https://github.com/matthieusieben)! - New build system\n\n### Patch Changes\n\n- [#3667](https://github.com/bluesky-social/atproto/pull/3667) [`8b98fec88`](https://github.com/bluesky-social/atproto/commit/8b98fec8857aacddeed9efb5c755474951e6d9d4) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Hide client id pathname if it is exaclty `/oauth-client-metadata.json`\n```\n\n----------------------------------------\n\nTITLE: Basic ATProto URI Format Tests\nDESCRIPTION: Test cases that validate basic ATProto URI format requirements including protocol prefix, DID handling, and invalid variations.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na://did:plc:asdf123\nat//did:plc:asdf123\nat:/a/did:plc:asdf123\nat:/did:plc:asdf123\nAT://did:plc:asdf123\nhttp://did:plc:asdf123\n://did:plc:asdf123\nat:did:plc:asdf123\nat:/did:plc:asdf123\nat:///did:plc:asdf123\nat://:/did:plc:asdf123\nat:/ /did:plc:asdf123\n```\n\n----------------------------------------\n\nTITLE: Handle Resolver Package Version Updates\nDESCRIPTION: Package changelog showing version history with dependency updates, bug fixes, and feature additions across multiple releases\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/handle-resolver/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto-labs/handle-resolver\n\n## 0.1.8\n\n### Patch Changes\n\n- Updated dependencies [[`0d77d1b55`](https://github.com/bluesky-social/atproto/commit/0d77d1b550a58117aee8f7f1e2be24d255ade9e4), [`0d77d1b55`](https://github.com/bluesky-social/atproto/commit/0d77d1b550a58117aee8f7f1e2be24d255ade9e4)]:\n  - @atproto-labs/simple-store@0.2.0\n  - @atproto-labs/simple-store-memory@0.1.3\n\n## 0.1.7\n\n### Patch Changes\n\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Apply new linting rules regarding import order\n\n- Updated dependencies [[`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd)]:\n  - @atproto-labs/simple-store-memory@0.1.2\n  - @atproto-labs/simple-store@0.1.2\n  - @atproto/did@0.1.5\n\n## 0.1.6\n\n### Patch Changes\n\n- Updated dependencies [[`cc2a1222b`](https://github.com/bluesky-social/atproto/commit/cc2a1222bd2b8ddd70d70dad174c1c63246a2d87)]:\n  - @atproto/did@0.1.4\n\n## 0.1.5\n\n### Patch Changes\n\n- [#3046](https://github.com/bluesky-social/atproto/pull/3046) [`a200e5095`](https://github.com/bluesky-social/atproto/commit/a200e50951d297c3f9670e96027262196bc29b0b) Thanks [@sgarciac](https://github.com/sgarciac)! - This change makes the DoH handle resolver accept a wider range of content types for DoH API calls.\n\n  While there is no agreed upon MIME type for DoH's JSON Schema, this change supports a reasonable\n  set that include those used by major DoH providers such as Google and Cloudflare.\n\n## 0.1.4\n\n### Patch Changes\n\n- [#2871](https://github.com/bluesky-social/atproto/pull/2871) [`9d40ccbb6`](https://github.com/bluesky-social/atproto/commit/9d40ccbb69103fae9aae7e3cec31e9b3116f3ba2) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Use fetch()'s \"cache\" option instead of headers to force caching behavior\n\n- Updated dependencies [[`9d40ccbb6`](https://github.com/bluesky-social/atproto/commit/9d40ccbb69103fae9aae7e3cec31e9b3116f3ba2)]:\n  - @atproto/did@0.1.3\n\n## 0.1.3\n\n### Patch Changes\n\n- Updated dependencies [[`cb4abbb67`](https://github.com/bluesky-social/atproto/commit/cb4abbb673c69a8a89b49dca5c038f3da2153c6c), [`cb4abbb67`](https://github.com/bluesky-social/atproto/commit/cb4abbb673c69a8a89b49dca5c038f3da2153c6c), [`cb4abbb67`](https://github.com/bluesky-social/atproto/commit/cb4abbb673c69a8a89b49dca5c038f3da2153c6c)]:\n  - @atproto/did@0.1.2\n\n## 0.1.2\n\n### Patch Changes\n\n- [#2483](https://github.com/bluesky-social/atproto/pull/2483) [`b934b396b`](https://github.com/bluesky-social/atproto/commit/b934b396b13ba32bf2bf7e75ecdf6871e5f310dd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Updated to use \"AtprotoDid\" utils from @atproto/did\n\n- Updated dependencies [[`b934b396b`](https://github.com/bluesky-social/atproto/commit/b934b396b13ba32bf2bf7e75ecdf6871e5f310dd)]:\n  - @atproto/did@0.1.1\n\n## 0.1.1\n\n### Patch Changes\n\n- [#2633](https://github.com/bluesky-social/atproto/pull/2633) [`acc9093d2`](https://github.com/bluesky-social/atproto/commit/acc9093d2845eba02b68fb2f9db33e4f1b59bb10) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Use distinct type names to prevent conflicts\n\n- Updated dependencies [[`acc9093d2`](https://github.com/bluesky-social/atproto/commit/acc9093d2845eba02b68fb2f9db33e4f1b59bb10), [`acc9093d2`](https://github.com/bluesky-social/atproto/commit/acc9093d2845eba02b68fb2f9db33e4f1b59bb10)]:\n  - @atproto-labs/simple-store@0.1.1\n  - @atproto-labs/simple-store-memory@0.1.1\n\n## 0.1.0\n\n### Minor Changes\n\n- [#2482](https://github.com/bluesky-social/atproto/pull/2482) [`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add OAuth provider capability & support for DPoP signed tokens\n\n### Patch Changes\n\n- Updated dependencies [[`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646)]:\n  - @atproto-labs/simple-store-memory@0.1.0\n  - @atproto-labs/simple-store@0.1.0\n  - @atproto/did@0.1.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fragment Handling in AT Protocol URIs\nDESCRIPTION: This snippet shows examples of AT Protocol URIs with various fragment configurations. It demonstrates that the protocol is very permissive about fragments, allowing multiple hash symbols and different placements.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_invalid.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# is very permissive about fragments\nat://did:plc:asdf123#\nat://did:plc:asdf123##\n#at://did:plc:asdf123\nat://did:plc:asdf123#/asdf#/asdf\n```\n\n----------------------------------------\n\nTITLE: Maximum Length Handle Test Cases\nDESCRIPTION: Test cases for maximum handle length validation, including a long handle with repeated segments and a handle with maximum segment length.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nshoooort.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.test\n\nshort.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.test\n```\n\n----------------------------------------\n\nTITLE: Adding OAuth provider capability and DPoP signed token support\nDESCRIPTION: This code snippet documents a minor change that adds OAuth provider capability and support for DPoP signed tokens. It includes the pull request number and commit hash.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/simple-store-memory/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2482](https://github.com/bluesky-social/atproto/pull/2482) [`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add OAuth provider capability & support for DPoP signed tokens\n```\n\n----------------------------------------\n\nTITLE: IP Address Format Tests\nDESCRIPTION: Test cases to verify that IP addresses (both IPv4 and IPv6) are not allowed as handles.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_invalid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n127.0.0.1\n192.168.0.142\nfe80::7325:8a97:c100:94b\n2600:3c03::f03c:9100:feb0:af1f\n```\n\n----------------------------------------\n\nTITLE: Invalid NSID Format Examples\nDESCRIPTION: Examples showing invalid NSID patterns including wildcards, special characters, emojis, and incorrect segment formats\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/nsid_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# invalid examples\ncom.example.foo.*\ncom.example.foo.blah*\ncom.example.foo.*blah\ncom.exa💩ple.thing\na-0.b-1.c-3\na-0.b-1.c-o\n1.0.0.127.record\n0two.example.foo\nexample.com\ncom.example\na.\n.one.two.three\none.two.three \none.two..three\none .two.three\n one.two.three\ncom.exa💩ple.thing\ncom.atproto.feed.p@st\ncom.atproto.feed.p_st\ncom.atproto.feed.p*st\ncom.atproto.feed.po#t\ncom.atproto.feed.p!ot\ncom.example-.foo\ncom.example.fooBar.2\n```\n\n----------------------------------------\n\nTITLE: Generating Bundle Manifest JSON Structure\nDESCRIPTION: Example of the JSON structure generated by the Rollup plugin. It includes entries for JavaScript, source map, and CSS files with their respective metadata and content hashes.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/rollup-plugin-bundle-manifest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main.js\": {\n    \"type\": \"chunk\",\n    \"mime\": \"application/javascript\",\n    \"dynamicImports\": [],\n    \"isDynamicEntry\": false,\n    \"isEntry\": true,\n    \"isImplicitEntry\": false,\n    \"name\": \"main\",\n    \"sha256\": \"<sha256-hash>\",\n    \"data\": \"<base64-encoded-contents>\"\n  },\n  \"main.js.map\": {\n    \"type\": \"asset\",\n    \"mime\": \"application/json\",\n    \"sha256\": \"<sha256-hash>\",\n    \"data\": \"<base64-encoded-contents>\"\n  },\n  \"main.css\": {\n    \"type\": \"asset\",\n    \"mime\": \"text/css\",\n    \"sha256\": \"<sha256-hash>\",\n    \"data\": \"<base64-encoded-contents>\"\n  }\n  // ... more entries as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Base32 String Examples\nDESCRIPTION: Examples of 13-character base32 strings following specific patterns, including numeric and alphabetic combinations. Shows format used in ATProto system.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/tid_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n3jzfcijpj2z2a\n7777777777777\n3zzzzzzzzzzzz\n```\n\n----------------------------------------\n\nTITLE: Edge Cases and Special Character Tests\nDESCRIPTION: Test cases for handling edge cases and special characters in ATProto URIs, including invalid characters and formatting.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_invalid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nat://user.bsky.social//\nat://user.bsky.social//com.atproto.feed.post\nat://user.bsky.social/com.atproto.feed.post//\nat://did:plc:asdf123/com.atproto.feed.post/asdf123/more/more\nat://did:plc:asdf123/short/stuff\nat://did:plc:asdf123/12345\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.1.1\nDESCRIPTION: Lists patch changes in version 0.1.1, including linting rule updates and NodeJS engine requirement changes.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/rollup-plugin-bundle-manifest/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.1\n\n### Patch Changes\n\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Apply new linting rules regarding import order\n\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Update NodeJS engine requirement to >=18.7.0\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Silent Sign-In with Fallback in TypeScript\nDESCRIPTION: Provides functions to implement silent sign-in. `createLoginUrl` generates an authorization URL with `prompt=none` to attempt sign-in without user interaction. `handleCallback` processes the OAuth callback, attempts to finalize the session, and catches specific `OAuthCallbackError` types ('login_required', 'consent_required') to retry the authorization flow without `prompt=none`, ensuring the user is prompted if silent sign-in fails. It uses a custom error `MyLoginRequiredError` to signal the need for redirection.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nasync function createLoginUrl(handle: string, state?: string): string {\n  return client.authorize(handle, {\n    state,\n    // Use \"prompt=none\" to attempt silent sign-in\n    prompt: 'none',\n  })\n}\n\nasync function handleCallback(params: URLSearchParams) {\n  try {\n    return await client.callback(params)\n  } catch (err) {\n    // Silent sign-in failed, retry without prompt=none\n    if (\n      err instanceof OAuthCallbackError &&\n      ['login_required', 'consent_required'].includes(err.params.get('error'))\n    ) {\n      // Do *not* use prompt=none when retrying (to avoid infinite redirects)\n      const url = await client.authorize(handle, { state: err.state })\n\n      // Allow calling code to catch the error and redirect the user to the new URL\n      return new MyLoginRequiredError(url)\n    }\n\n    throw err\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Valid Handle Examples - Maximum Length Cases\nDESCRIPTION: Examples demonstrating maximum length handles and segments allowed in the specification.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nshoooort.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.test\n\nshort.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.test\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates in Package\nDESCRIPTION: Markdown changelog entries documenting version updates and dependency changes for the @atproto/oauth-client-node package.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto/oauth-client-node\n\n## 0.2.16\n\n### Patch Changes\n\n- Updated dependencies [[`0d77d1b55`](https://github.com/bluesky-social/atproto/commit/0d77d1b550a58117aee8f7f1e2be24d255ade9e4), [`30f9b6690`](https://github.com/bluesky-social/atproto/commit/30f9b6690e0e2c5810772e94e631322b9d89c65a), [`30f9b6690`](https://github.com/bluesky-social/atproto/commit/30f9b6690e0e2c5810772e94e631322b9d89c65a), [`0d77d1b55`](https://github.com/bluesky-social/atproto/commit/0d77d1b550a58117aee8f7f1e2be24d255ade9e4)]:\n  - @atproto-labs/simple-store@0.2.0\n  - @atproto/oauth-types@0.2.6\n  - @atproto-labs/did-resolver@0.1.12\n  - @atproto/oauth-client@0.3.15\n  - @atproto-labs/handle-resolver-node@0.1.15\n```\n\n----------------------------------------\n\nTITLE: Invalid ATProto Identifier Examples\nDESCRIPTION: Examples of invalid ATProto identifiers showing various validation rules including non-base32 characters, incorrect length, deprecated dash syntax, and invalid high bit patterns\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/tid_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# not base32\n3jzfcijpj2z21\n0000000000000\n\n# too long/short\n3jzfcijpj2z2aa\n3jzfcijpj2z2\n\n# old dashes syntax not actually supported (TTTT-TTT-TTTT-CC)\n3jzf-cij-pj2z-2a\n\n# high bit can't be high\nzzzzzzzzzzzzz\nkjzfcijpj2z2a\n```\n\n----------------------------------------\n\nTITLE: AT Protocol URI Edge Cases\nDESCRIPTION: Test cases for handling edge cases in ATP URIs, including multiple slashes, empty segments, and path variations.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_invalid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nat://user.bsky.social//\nat://user.bsky.social//com.atproto.feed.post\nat://user.bsky.social/com.atproto.feed.post//\nat://did:plc:asdf123/com.atproto.feed.post/asdf123/more/more\nat://did:plc:asdf123/short/stuff\nat://did:plc:asdf123/12345\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown\nDESCRIPTION: Markdown formatted changelog entries detailing version changes, including improvements to error response parsing, dependency management, linting rules, and OAuth provider capabilities.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @atproto-labs/fetch\n\n## 0.2.2\n\n### Patch Changes\n\n- [#2945](https://github.com/bluesky-social/atproto/pull/2945) [`850e39843`](https://github.com/bluesky-social/atproto/commit/850e39843cb0ec9ea716675f7568c0c601f45e29) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Improved error response parsing\n\n- [#2945](https://github.com/bluesky-social/atproto/pull/2945) [`850e39843`](https://github.com/bluesky-social/atproto/commit/850e39843cb0ec9ea716675f7568c0c601f45e29) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Remove explicit dependency on \"zod\". Improved typing of `fetchJsonZodProcessor` function.\n\n## 0.2.1\n\n### Patch Changes\n\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Apply new linting rules regarding import order\n\n## 0.2.0\n\n### Minor Changes\n\n- [#3343](https://github.com/bluesky-social/atproto/pull/3343) [`5ece8c6ae`](https://github.com/bluesky-social/atproto/commit/5ece8c6aeab9c5c3f51295d93ed6e27c3c6095c2) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Fix typo in `ResponseTranformer` and `fetchResponseJsonTranformer`\n\n### Patch Changes\n\n- [#3343](https://github.com/bluesky-social/atproto/pull/3343) [`5ece8c6ae`](https://github.com/bluesky-social/atproto/commit/5ece8c6aeab9c5c3f51295d93ed6e27c3c6095c2) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Response mime type check is now case-insensitive (as per rfc2616)\n\n## 0.1.2\n\n### Patch Changes\n\n- [#3135](https://github.com/bluesky-social/atproto/pull/3135) [`622654672`](https://github.com/bluesky-social/atproto/commit/6226546725d1bb0375e3c9e0d71af173e8253c4f) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Support parsing of more fetch() errors\n\n## 0.1.1\n\n### Patch Changes\n\n- [#2770](https://github.com/bluesky-social/atproto/pull/2770) [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Expose extractUrl utility\n\n- [#2770](https://github.com/bluesky-social/atproto/pull/2770) [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add redirectCheckRequestTransform utility to prevent request redirects\n\n- [#2770](https://github.com/bluesky-social/atproto/pull/2770) [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Allow customizing fetch logging function\n\n## 0.1.0\n\n### Minor Changes\n\n- [#2482](https://github.com/bluesky-social/atproto/pull/2482) [`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add OAuth provider capability & support for DPoP signed tokens\n\n### Patch Changes\n\n- Updated dependencies [[`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646)]:\n  - @atproto-labs/pipe@0.1.0\n```\n\n----------------------------------------\n\nTITLE: Valid NSID Examples\nDESCRIPTION: Standard valid NSID format examples showing allowed character patterns, multiple segments, and internationalized domain names.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/nsid_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.example.fooBar\ncom.example.fooBarV2\nnet.users.bob.ping\na.b.c\nm.xn--masekowski-d0b.pl\none.two.three\none.two.three.four-and.FiVe\none.2.three\na-0.b-1.c\na0.b1.cc\ncn.8.lex.stuff\ntest.12345.record\na01.thing.record\na.0.c\nxn--fiqs8s.xn--fiqa61au8b7zsevnm8ak20mc4a87e.record.two\na0.b1.c3\ncom.example.f00\n```\n\n----------------------------------------\n\nTITLE: NSID Length Validation Examples\nDESCRIPTION: Examples demonstrating maximum length constraints for NSID components and overall identifiers\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/nsid_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# length checks\ncom.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.foo\ncom.example.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\ncom.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.foo\n```\n\n----------------------------------------\n\nTITLE: Initial XRPC Utils Package Release Entry\nDESCRIPTION: Changelog entry for version 0.0.1 introducing the new utility package for working with xrpc-server, including pull request details and dependency updates.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/xrpc-utils/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#3177](https://github.com/bluesky-social/atproto/pull/3177) [`72eba67af`](https://github.com/bluesky-social/atproto/commit/72eba67af1af8320b5400bcb9319d5c3c8407d99) Thanks [@matthieusieben](https://github.com/matthieusieben)! - New utility package to work with xrpc-server\n\n- Updated dependencies []:\n  - @atproto/xrpc-server@0.7.5\n  - @atproto/xrpc@0.6.6\n```\n\n----------------------------------------\n\nTITLE: Corner Cases and Special Formats\nDESCRIPTION: Various edge cases and special format examples that are valid according to modern and old RFCs.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/handle_syntax_valid.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n12345.test\n8.cn\n4chan.org\n4chan.o-g\nblah.4chan.org\nthing.a01\n120.0.0.1.com\n0john.test\n9sta--ck.com\n99stack.com\n0ohn.test\njohn.t--t\nthing.0aa.thing\n```\n\n----------------------------------------\n\nTITLE: DID Format Examples\nDESCRIPTION: List of DID format variations showing different patterns and edge cases. Includes valid and invalid formats with various method types, values, separators, case variations, and special characters.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/did_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndid\ndidmethodval\nmethod:did:val\ndid:method:\ndidmethod:val\ndid:methodval)\n:did:method:val\ndid.method.val\ndid:method:val:\ndid:method:val%\nDID:method:val\ndid:METHOD:val\ndid:m123:val\ndid:method:val/two\ndid:method:val?two\ndid:method:val#two\ndid:method:val%\ndid:method:vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n```\n\n----------------------------------------\n\nTITLE: Exposing IP Filtering Utilities\nDESCRIPTION: Makes IP filtering utilities available for use in other parts of the codebase.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch-node/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#2770](https://github.com/bluesky-social/atproto/pull/2770) [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Expose IP filtering utilities\n```\n\n----------------------------------------\n\nTITLE: Valid DID Format Examples in AT Protocol\nDESCRIPTION: Examples of valid Decentralized Identifier (DID) formats showing allowed method names and values. Demonstrates valid character patterns including letters, numbers and hyphens.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/atidentifier_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndid:method:val\ndid:method:VAL\ndid:method:val123\ndid:method:123\ndid:method:val-two\n```\n\n----------------------------------------\n\nTITLE: Installing ATP API Package\nDESCRIPTION: Command to install the ATP API package using Yarn package manager.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/api/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @atproto/api\n```\n\n----------------------------------------\n\nTITLE: ISO 8601 DateTime Formats with Various Precision Levels\nDESCRIPTION: Examples of datetime formats with different levels of precision in the fractional seconds portion, ranging from 1 digit up to 12 digits of precision.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/datetime_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# various precisions, up through at least 12 digits\n1985-04-12T23:20:50.1Z\n1985-04-12T23:20:50.12Z\n1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.1234Z\n1985-04-12T23:20:50.12345Z\n1985-04-12T23:20:50.123456Z\n1985-04-12T23:20:50.1234567Z\n1985-04-12T23:20:50.12345678Z\n1985-04-12T23:20:50.123456789Z\n1985-04-12T23:20:50.1234567890Z\n1985-04-12T23:20:50.12345678901Z\n1985-04-12T23:20:50.123456789012Z\n```\n\n----------------------------------------\n\nTITLE: Examples of Invalid DIDs in ATProto\nDESCRIPTION: A collection of DID (Decentralized Identifier) formats that violate the ATProto DID syntax rules. These examples show missing components, incorrect formatting, and invalid characters in DID strings.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/atidentifier_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndid\ndidmethodval\nmethod:did:val\ndid:method:\ndidmethod:val\ndid:methodval)\n:did:method:val\ndid:method:val:\ndid:method:val%\nDID:method:val\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: Updates the dependencies for @atproto-labs/fetch package to version 0.2.2.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch-node/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`850e39843`](https://github.com/bluesky-social/atproto/commit/850e39843cb0ec9ea716675f7568c0c601f45e29), [`850e39843`](https://github.com/bluesky-social/atproto/commit/850e39843cb0ec9ea716675f7568c0c601f45e29)]:\n  - @atproto-labs/fetch@0.2.2\n```\n\n----------------------------------------\n\nTITLE: AT Protocol Basic URI Format Validation\nDESCRIPTION: Test cases for basic ATP URI format validation including various malformed URIs and invalid protocol specifications.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/aturi_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na://did:plc:asdf123\nat//did:plc:asdf123\nat:/a/did:plc:asdf123\nat:/did:plc:asdf123\nAT://did:plc:asdf123\nhttp://did:plc:asdf123\n://did:plc:asdf123\nat:did:plc:asdf123\nat:/did:plc:asdf123\nat:///did:plc:asdf123\nat://:/did:plc:asdf123\nat:/ /did:plc:asdf123\n```\n\n----------------------------------------\n\nTITLE: AT Protocol Invalid Namespace Examples\nDESCRIPTION: Collection of invalid namespace formats including wildcards, special characters, emoji, numeric starts, and incorrect domain formats.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/nsid_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.example.foo.*\ncom.example.foo.blah*\ncom.example.foo.*blah\ncom.exa💩ple.thing\na-0.b-1.c-3\na-0.b-1.c-o\n1.0.0.127.record\n0two.example.foo\nexample.com\ncom.example\na.\n.one.two.three\none.two.three \none.two..three\none .two.three\n one.two.three\ncom.exa💩ple.thing\ncom.atproto.feed.p@st\ncom.atproto.feed.p_st\ncom.atproto.feed.p*st\ncom.atproto.feed.po#t\ncom.atproto.feed.p!ot\ncom.example-.foo\ncom.example.fooBar.2\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: This snippet shows updating the @atproto/common-web dependency to version 0.4.1 in the package.json file.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/lexicon/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"@atproto/common-web\": \"0.4.1\"\n```\n\n----------------------------------------\n\nTITLE: Additional Invalid Identifier Examples in ATProto\nDESCRIPTION: Other types of identifiers that are not valid in the ATProto context, including email addresses, handle formats with @ symbols, and generic text strings that don't conform to any valid identifier pattern.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/atidentifier_syntax_invalid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nemail@example.com\n@handle@example.com\n@handle\nblah\n```\n\n----------------------------------------\n\nTITLE: Testing ISO-8601 Timestamp Format Variations\nDESCRIPTION: Collection of timestamp test cases showing variations in case sensitivity, padding, timezone formats, and common formatting errors. Includes examples of subtle modifications to the standard ISO-8601 format, whitespace handling, and timezone requirements.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/datetime_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# subtle changes to: 1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.123z\n01985-04-12T23:20:50.123Z\n985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.Z\n1985-04-32T23;20:50.123Z\n1985-04-32T23;20:50.123Z\n\n# en-dash and em-dash\n1985—04-32T23;20:50.123Z\n1985–04-32T23;20:50.123Z\n\n# whitespace\n 1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.123Z \n1985-04-12T 23:20:50.123Z\n\n# not enough zero padding\n1985-4-12T23:20:50.123Z\n1985-04-2T23:20:50.123Z\n1985-04-12T3:20:50.123Z\n1985-04-12T23:0:50.123Z\n1985-04-12T23:20:5.123Z\n\n# too much zero padding\n01985-04-12T23:20:50.123Z\n1985-004-12T23:20:50.123Z\n1985-04-012T23:20:50.123Z\n1985-04-12T023:20:50.123Z\n1985-04-12T23:020:50.123Z\n1985-04-12T23:20:050.123Z\n\n# strict capitalization (ISO-8601)\n1985-04-12t23:20:50.123Z\n1985-04-12T23:20:50.123z\n\n# RFC-3339, but not ISO-8601\n1985-04-12T23:20:50.123-00:00\n1985-04-12_23:20:50.123Z\n1985-04-12 23:20:50.123Z\n\n# ISO-8601, but weird\n1985-04-274T23:20:50.123Z\n\n# timezone is required\n1985-04-12T23:20:50.123\n1985-04-12T23:20:50\n\n1985-04-12\n1985-04-12T23:20Z\n1985-04-12T23:20:5Z\n1985-04-12T23:20:50.123\n+001985-04-12T23:20:50.123Z\n23:20:50.123Z\n\n1985-04-12T23:20:50.123+00\n1985-04-12T23:20:50.123+00:0\n1985-04-12T23:20:50.123+0:00\n1985-04-12T23:20:50.123\n1985-04-12T23:20:50.123+0000\n1985-04-12T23:20:50.123+00\n1985-04-12T23:20:50.123+\n1985-04-12T23:20:50.123-\n\n# ISO-8601, but normalizes to a negative time\n0000-01-01T00:00:00+01:00\n-000001-12-31T23:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates\nDESCRIPTION: Dependency version updates for various ATProto OAuth related packages\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- @atproto/oauth-types@0.1.5\n- @atproto/oauth-client@0.2.2\n- @atproto-labs/did-resolver@0.1.4\n```\n\n----------------------------------------\n\nTITLE: Extreme but Allowed ISO 8601 DateTime Examples\nDESCRIPTION: Date formats that are technically valid according to the ISO 8601 standard but represent extreme years (very early or very late). These are allowed within the atproto system despite being uncommon.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/datetime_syntax_valid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# extreme but currently allowed\n0010-12-31T23:00:00.000Z\n1000-12-31T23:00:00.000Z\n1900-12-31T23:00:00.000Z\n3001-12-31T23:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: This snippet shows updating the @atproto/syntax dependency to version 0.4.0 in the package.json file.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/lexicon/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"@atproto/syntax\": \"0.4.0\"\n```\n\n----------------------------------------\n\nTITLE: Invalid ISO-8601 DateTime Examples\nDESCRIPTION: Collection of ISO-8601 datetime strings that pass syntactic validation but are semantically invalid. Each example contains values that exceed allowed ranges (month 0 or 13, day 0, hour 25, minute 99, second 61).\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/datetime_parse_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n1985-00-12T23:20:50.123Z\n1985-04-00T23:20:50.123Z\n1985-13-12T23:20:50.123Z\n1985-04-12T25:20:50.123Z\n1985-04-12T23:99:50.123Z\n1985-04-12T23:20:61.123Z\n```\n\n----------------------------------------\n\nTITLE: Package dependencies section\nDESCRIPTION: List of package dependencies and versions that were updated in version 0.7.0 of @atproto/xrpc-server\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/sync/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3), [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3), [`87a1f2426`](https://github.com/bluesky-social/atproto/commit/87a1f24262e0e644b6cf31cc7a0446d9127ffa94), [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3), [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3), [`a07b21151`](https://github.com/bluesky-social/atproto/commit/a07b21151f1850340c4b7797ebb11521b1a6cdf3)]]:\n```\n\n----------------------------------------\n\nTITLE: Preferred ISO 8601 Timestamp Formats\nDESCRIPTION: Examples of preferred timestamp formats with consistent precision and UTC timezone (Z). These formats show various ways of representing milliseconds and microseconds.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/datetime_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.000Z\n2000-01-01T00:00:00.000Z\n1985-04-12T23:20:50.123456Z\n1985-04-12T23:20:50.120Z\n1985-04-12T23:20:50.120000Z\n```\n\n----------------------------------------\n\nTITLE: Standard NSID Test Cases\nDESCRIPTION: A set of standard test cases for validating NSIDs, including domain names, version-like strings, and encoded strings.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/recordkey_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# specs\nself\nexample.com\n~1.2-3_\ndHJ1ZQ\n_\nliteral:self\npre:fix\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: This snippet shows updating the @atproto/syntax dependency to version 0.3.4 in the package.json file.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/lexicon/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"@atproto/syntax\": \"0.3.4\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Links\nDESCRIPTION: Git commit links for various patch changes and dependency updates\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[`d794b0676`](https://github.com/bluesky-social/atproto/commit/d794b06763050b4b32484e90116461deae45cbe3)]\n[[`0087dc1c0`](https://github.com/bluesky-social/atproto/commit/0087dc1c0bafad1d0a0a1a16683d250dea031bf9)]\n[[`30f9b6690`](https://github.com/bluesky-social/atproto/commit/30f9b6690e0e2c5810772e94e631322b9d89c65a)]\n```\n\n----------------------------------------\n\nTITLE: Invalid Base32 String Examples\nDESCRIPTION: Examples demonstrating various invalid base32 strings including non-base32 characters, incorrect lengths, deprecated dash syntax, and invalid high bit patterns\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/tid_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# not base32\n3jzfcijpj2z21\n0000000000000\n\n# too long/short\n3jzfcijpj2z2aa\n3jzfcijpj2z2\n\n# old dashes syntax not actually supported (TTTT-TTT-TTTT-CC)\n3jzf-cij-pj2z-2a\n\n# high bit can't be high\nzzzzzzzzzzzzz\nkjzfcijpj2z2a\n```\n\n----------------------------------------\n\nTITLE: Applying new linting rules for import order in @atproto-labs/simple-store-memory\nDESCRIPTION: This snippet describes a patch change that applies new linting rules regarding import order. It includes the pull request number and commit hash.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/simple-store-memory/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Apply new linting rules regarding import order\n```\n\n----------------------------------------\n\nTITLE: Displaying Version and Change Information in Markdown\nDESCRIPTION: This snippet shows how version information and changes are formatted in the changelog using Markdown. It includes version numbers, change types (Patch, Minor), and links to pull requests and commits.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/identity/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.7\n\n### Patch Changes\n\n- Updated dependencies [[`4db923ca1`](https://github.com/bluesky-social/atproto/commit/4db923ca1c4fadd31d41c851933659e5186ee144)]:\n  - @atproto/common-web@0.4.1\n  - @atproto/crypto@0.4.4\n```\n\n----------------------------------------\n\nTITLE: Examples of Custom Base32 Encoded Strings in JavaScript\nDESCRIPTION: This snippet provides examples of valid encoded strings using the custom base32 encoding scheme. It includes a mixed alphanumeric string, a string of all 7s, and a string of all z's, each 13 characters long.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/interop-test-files/syntax/tid_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n3jzfcijpj2z2a\n7777777777777\n3zzzzzzzzzzzz\n```\n\n----------------------------------------\n\nTITLE: Example AT Protocol Identifiers and Keywords\nDESCRIPTION: Lists various example strings representing potential identifiers, handles, encoded data (like Base64 'true'), special keywords ('self', '_'), and prefixed values ('literal:', 'pre:') within the AT Protocol specification. These are likely used for testing or documentation.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/recordkey_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# specs\nself\nexample.com\n~1.2-3_\ndHJ1ZQ\n_\nliteral:self\npre:fix\n```\n\n----------------------------------------\n\nTITLE: GitHub Commit Link\nDESCRIPTION: Markdown link to GitHub commit for dependency update\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/xrpc-server/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`4db923ca1`](https://github.com/bluesky-social/atproto/commit/4db923ca1c4fadd31d41c851933659e5186ee144)\n```\n\n----------------------------------------\n\nTITLE: ATProto Package Version History Entry\nDESCRIPTION: Changelog entries documenting package updates and dependency changes, including removal of OpenID compatibility and changes to OAuth client behavior.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-node/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`ed325d863`](https://github.com/bluesky-social/atproto/commit/ed325d863ce8ea5986c5a45c3188aaa35288b7a8), `ed325d863`]:\n  - @atproto/oauth-types@0.1.5\n  - @atproto/oauth-client@0.2.2\n  - @atproto-labs/handle-resolver-node@0.1.4\n  - @atproto-labs/did-resolver@0.1.4\n```\n\n----------------------------------------\n\nTITLE: Updating License in @atproto/common-web\nDESCRIPTION: Patch change in version 0.2.3 that updates the license to \"MIT or Apache2\".\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/common-web/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.3\n\n### Patch Changes\n\n- [#1788](https://github.com/bluesky-social/atproto/pull/1788) [`84e2d4d2`](https://github.com/bluesky-social/atproto/commit/84e2d4d2b6694f344d80c18672c78b650189d423) Thanks [@bnewbold](https://github.com/bnewbold)! - update license to \"MIT or Apache2\"\n```\n\n----------------------------------------\n\nTITLE: Corner-Case Examples for AT Protocol Identifiers/Syntax\nDESCRIPTION: Showcases edge-case strings relevant to AT Protocol syntax or identifier validation. Includes single punctuation characters, ellipses, a keyword followed by a dot, and prefix/suffix colon usage, likely for testing parser robustness and handling of unusual inputs.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/recordkey_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# more corner-cases\n:\n-\n_\n~\n...\nself.\nlang:\n:lang\n```\n\n----------------------------------------\n\nTITLE: Documenting Minor Version Changes in Markdown Changelog\nDESCRIPTION: This snippet shows how to document minor version changes in a Markdown changelog. It includes the PR number, commit hash, author credit, and a description of the new features or significant changes introduced.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/jwk-webcrypto/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Minor Changes\n\n- [#2482](https://github.com/bluesky-social/atproto/pull/2482) [`a8d6c1123`](https://github.com/bluesky-social/atproto/commit/a8d6c112359f5c4c0cfbe2df63443ed275f2a646) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Add OAuth provider capability & support for DPoP signed tokens\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Changelog Entry\nDESCRIPTION: Version update entry showing dependency changes with commit links and version bumps\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/aws/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`4db923ca1`](https://github.com/bluesky-social/atproto/commit/4db923ca1c4fadd31d41c851933659e5186ee144), [`4db923ca1`](https://github.com/bluesky-social/atproto/commit/4db923ca1c4fadd31d41c851933659e5186ee144)]:\n  - @atproto/repo@0.8.0\n  - @atproto/common@0.4.10\n  - @atproto/crypto@0.4.4\n```\n\n----------------------------------------\n\nTITLE: AT Protocol Namespace Length Test Cases\nDESCRIPTION: Test cases for namespace length validation, showing examples that exceed maximum length limits for different parts of the namespace.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/nsid_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.foo\ncom.example.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\ncom.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.foo\n```\n\n----------------------------------------\n\nTITLE: AT Protocol Special Record Key Examples\nDESCRIPTION: Examples showing various special characters and patterns allowed in AT Protocol record keys.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_valid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:abc:123/io.nsid.someFunc/self.\nat://did:abc:123/io.nsid.someFunc/lang:\nat://did:abc:123/io.nsid.someFunc/:\nat://did:abc:123/io.nsid.someFunc/-\nat://did:abc:123/io.nsid.someFunc/_\nat://did:abc:123/io.nsid.someFunc/~\nat://did:abc:123/io.nsid.someFunc/...\nat://did:plc:asdf123/com.atproto.feed.postV2\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.2.0\nDESCRIPTION: Shows the minor changes made in version 0.2.0, including exporting the plugin as a named export.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/rollup-plugin-bundle-manifest/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n### Minor Changes\n\n- [#3659](https://github.com/bluesky-social/atproto/pull/3659) [`371e04aad`](https://github.com/bluesky-social/atproto/commit/371e04aad2a3e8ae3fe185ce15fc8eb051cab78e) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Export plugin as named export\n```\n\n----------------------------------------\n\nTITLE: Long AT Protocol URL Example\nDESCRIPTION: Example of a maximum length AT Protocol URL with extended record key (512 'o' characters).\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/aturi_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Update in Markdown\nDESCRIPTION: Version 0.3.15 changelog entry showing updated dependencies with commit references\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`0d77d1b55`](https://github.com/bluesky-social/atproto/commit/0d77d1b550a58117aee8f7f1e2be24d255ade9e4), [`30f9b6690`](https://github.com/bluesky-social/atproto/commit/30f9b6690e0e2c5810772e94e631322b9d89c65a), [`30f9b6690`](https://github.com/bluesky-social/atproto/commit/30f9b6690e0e2c5810772e94e631322b9d89c65a), [`0d77d1b55`](https://github.com/bluesky-social/atproto/commit/0d77d1b550a58117aee8f7f1e2be24d255ade9e4)]:\n  - @atproto-labs/simple-store@0.2.0\n  - @atproto/oauth-types@0.2.6\n  - @atproto-labs/did-resolver@0.1.12\n  - @atproto-labs/handle-resolver@0.1.8\n  - @atproto-labs/simple-store-memory@0.1.3\n  - @atproto-labs/identity-resolver@0.1.16\n```\n\n----------------------------------------\n\nTITLE: Package Version Section\nDESCRIPTION: Version headers and patch change entries\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/pds/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.132\n\n### Patch Changes\n\n- Updated dependencies\n```\n\n----------------------------------------\n\nTITLE: Updating NodeJS Engine Requirement\nDESCRIPTION: Updates the minimum required version of NodeJS to 18.7.0 or higher.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/fetch-node/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#3220](https://github.com/bluesky-social/atproto/pull/3220) [`61dc0d60e`](https://github.com/bluesky-social/atproto/commit/61dc0d60e19b88c6427a54c6d95a391b5f4da7bd) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Update NodeJS engine requirement to >=18.7.0\n```\n\n----------------------------------------\n\nTITLE: IndexedDB Documentation Header - Markdown\nDESCRIPTION: Documentation header explaining the purpose and scope of the IndexedDB utilities wrapper, noting its current usage in the oauth-client-browser package and maintenance context.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/oauth/oauth-client-browser/src/indexed-db/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# IndexedDB utilities\\n\\nThis is a small wrapper around the IndexedDB API that provides a simple way to\\nstore and retrieve data from an IndexedDB database.\\n\\nThis _could_ be used as a standalone library, but the Bluesky dev team does not\\nwant to maintain it as such. As it is currently only used by the\\n`@atproto/oauth-client-browser` package, it is included here.\n```\n\n----------------------------------------\n\nTITLE: Very Long String Example for AT Protocol Limit Testing\nDESCRIPTION: Provides an example of a very long string consisting of 512 'o' characters. This is intended for testing length limits, validation rules, or performance aspects within the AT Protocol, potentially for identifiers, text fields, or other data structures.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/recordkey_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# very long: 'o'.repeat(512)\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n```\n\n----------------------------------------\n\nTITLE: Displaying Security Contact Email in Markdown\nDESCRIPTION: Email address displayed in inline code format for reporting security vulnerabilities to the ATProto team.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`security@bsky.app`\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: A template for the boilerplate notice that should be included in files to apply the Apache License 2.0. The template includes placeholders for copyright year and owner, and includes standard license text about conditions of use.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/LICENSE-APACHE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Plugin for Bundle Manifest\nDESCRIPTION: Example of how to configure the Rollup plugin in a rollup.config.js file. It shows how to import the plugin and set options for the manifest file name and data embedding.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/rollup-plugin-bundle-manifest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// rollup.config.js\n\nimport bundleManifest from '@atproto-labs/rollup-plugin-bundle-manifest'\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    dir: 'dist',\n    format: 'es',\n  },\n  plugins: [\n    bundleManifest({\n      name: 'bundle-manifest.json',\n\n      // Optional: should the asset data be embedded (as base64 string) in the manifest?\n      data: false,\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.1.2\nDESCRIPTION: Documents the patch changes in version 0.1.2, focusing on improved typing of the plugin.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/internal/rollup-plugin-bundle-manifest/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.2\n\n### Patch Changes\n\n- [#2945](https://github.com/bluesky-social/atproto/pull/2945) [`850e39843`](https://github.com/bluesky-social/atproto/commit/850e39843cb0ec9ea716675f7568c0c601f45e29) Thanks [@matthieusieben](https://github.com/matthieusieben)! - Improve typing of plugin\n```\n\n----------------------------------------\n\nTITLE: Valid Handle Examples - Stack Overflow Cases\nDESCRIPTION: Additional examples from Stack Overflow demonstrating various valid domain formats.\nSOURCE: https://github.com/bluesky-social/atproto/blob/main/packages/syntax/tests/interop-files/handle_syntax_valid.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nstack.com\nsta-ck.com\nsta---ck.com\nsta--ck9.com\nstack99.com\nsta99ck.com\ngoogle.com.uk\ngoogle.co.in\ngoogle.com\nmaselkowski.pl\nm.maselkowski.pl\nxn--masekowski-d0b.pl\nxn--fiqa61au8b7zsevnm8ak20mc4a87e.xn--fiqs8s\nxn--stackoverflow.com\nstackoverflow.xn--com\nstackoverflow.co.uk\nxn--masekowski-d0b.pl\nxn--fiqa61au8b7zsevnm8ak20mc4a87e.xn--fiqs8s\n```"
  }
]