[
  {
    "owner": "qdrant",
    "repo": "rust-client",
    "content": "TITLE: Complete Qdrant Search Example\nDESCRIPTION: Full example demonstrating collection creation, point insertion, and vector search using the Qdrant client\nSOURCE: https://github.com/qdrant/rust-client/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::qdrant::{\\n    Condition, CreateCollectionBuilder, Distance, Filter, PointStruct, ScalarQuantizationBuilder,\\n    SearchParamsBuilder, SearchPointsBuilder, UpsertPointsBuilder, VectorParamsBuilder,\\n};\\nuse qdrant_client::{Payload, Qdrant, QdrantError};\\n\\n#[tokio::main]\\nasync fn main() -> Result<(), QdrantError> {\\n    // Example of top level client\\n    // You may also use tonic-generated client from `src/qdrant.rs`\\n    let client = Qdrant::from_url(\"http://localhost:6334\").build()?;\\n\\n    let collections_list = client.list_collections().await?;\\n    dbg!(collections_list);\\n    // collections_list = {\\n    //   \"collections\": [\\n    //     {\\n    //       \"name\": \"test\"\\n    //     }\\n    //   ]\\n    // }\\n\\n    let collection_name = \"test\";\\n    client.delete_collection(collection_name).await?;\\n\\n    client\\n        .create_collection(\\n            CreateCollectionBuilder::new(collection_name)\\n                .vectors_config(VectorParamsBuilder::new(10, Distance::Cosine))\\n                .quantization_config(ScalarQuantizationBuilder::default()),\\n        )\\n        .await?;\\n\\n    let collection_info = client.collection_info(collection_name).await?;\\n    dbg!(collection_info);\\n\\n    let payload: Payload = serde_json::json!(\\n        {\\n            \"foo\": \"Bar\",\\n            \"bar\": 12,\\n            \"baz\": {\\n                \"qux\": \"quux\"\\n            }\\n        }\\n    )\\n    .try_into()\\n    .unwrap();\\n\\n    let points = vec![PointStruct::new(0, vec![12.; 10], payload)];\\n    client\\n        .upsert_points(UpsertPointsBuilder::new(collection_name, points))\\n        .await?;\\n\\n    let search_result = client\\n        .search_points(\\n            SearchPointsBuilder::new(collection_name, [11.; 10], 10)\\n                .filter(Filter::all([Condition::matches(\"bar\", 12)]))\\n                .with_payload(true)\\n                .params(SearchParamsBuilder::default().exact(true)),\\n        )\\n        .await?;\\n    dbg!(&search_result);\\n    // search_result = [\\n    //   {\\n    //     \"id\": 0,\\n    //     \"version\": 0,\\n    //     \"score\": 1.0000001,\\n    //     \"payload\": {\\n    //       \"bar\": 12,\\n    //       \"baz\": {\\n    //         \"qux\": \"quux\"\\n    //       },\\n    //       \"foo\": \"Bar\"\\n    //     }\\n    //   }\\n    // ]\\n\\n    let found_point = search_result.result.into_iter().next().unwrap();\\n    let mut payload = found_point.payload;\\n    let baz_payload = payload.remove(\"baz\").unwrap().into_json();\\n    println!(\"baz: {}\", baz_payload);\\n    // baz: {\"qux\":\"quux\"}\\n\\n    Ok(())\\n}\n```\n\n----------------------------------------\n\nTITLE: Qdrant Cloud Client Configuration\nDESCRIPTION: Example showing how to configure the Qdrant client for connecting to Qdrant Cloud with API key authentication\nSOURCE: https://github.com/qdrant/rust-client/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse qdrant_client::Qdrant;\\n\\nlet client = Qdrant::from_url(\"http://xxxxxxxxxx.eu-central.aws.cloud.qdrant.io:6334\")\\n    // Use an environment variable for the API KEY for example\\n    .api_key(std::env::var(\"QDRANT_API_KEY\"))\\n    .build()?;\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client with Cargo\nDESCRIPTION: Command to add the qdrant-client dependency to a Rust project using cargo\nSOURCE: https://github.com/qdrant/rust-client/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo add qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to add all necessary dependencies for using the Qdrant client with async functionality\nSOURCE: https://github.com/qdrant/rust-client/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo add qdrant-client anyhow tonic tokio serde-json --features tokio/rt-multi-thread\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Docker Container with gRPC\nDESCRIPTION: Docker command to run Qdrant with gRPC interface enabled on port 6334\nSOURCE: https://github.com/qdrant/rust-client/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 -p 6334:6334 \\\n    -e QDRANT__SERVICE__GRPC_PORT=\"6334\" \\\n    qdrant/qdrant\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant gRPC Port\nDESCRIPTION: YAML configuration to enable gRPC interface in Qdrant\nSOURCE: https://github.com/qdrant/rust-client/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  grpc_port: 6334\n```"
  }
]