[
  {
    "owner": "deephaven",
    "repo": "deephaven-core",
    "content": "TITLE: Importing and Joining Tables with Deephaven Python Client\nDESCRIPTION: This example demonstrates how to use the Deephaven Python Client to create a session, import CSV data into tables, join tables, and convert the result to a Pandas DataFrame. It requires the pydeephaven and pyarrow libraries, and assumes a local Deephaven Community Edition server is running with default configuration.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nfrom pyarrow import csv\nsession = Session() # assuming Deephaven Community Edition is running locally with the default configuration\ntable1 = session.import_table(csv.read_csv(\"data1.csv\"))\ntable2 = session.import_table(csv.read_csv(\"data2.csv\"))\njoined_table = table1.join(table2, on=[\"key_col_1\", \"key_col_2\"], joins=[\"data_col1\"])\ndf = joined_table.to_arrow().to_pandas()\nprint(df)\nsession.close()\n```\n\n----------------------------------------\n\nTITLE: Quick Start Example with Time Table\nDESCRIPTION: Demonstrates basic usage of Deephaven session and time table creation with pandas conversion\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nsession = Session() # assuming Deephaven Community Edition is running locally with the default configuration\ntable1 = session.time_table(period=1000000000).update(formulas=[\"Col1 = i % 2\"])\ndf = table1.to_arrow().to_pandas()\nprint(df)\nsession.close()\n```\n\n----------------------------------------\n\nTITLE: Deephaven Server Configuration Properties\nDESCRIPTION: Example configuration file showing basic Deephaven server properties including anonymous authentication, HTTP settings, and TLS configuration.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app/README.md#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nincludefiles=dh-defaults.prop\n\nhttp.port=8443\nhttp.http1=false\n\nssl.identity.type=privatekey\nssl.identity.certChainPath=/deephaven-core/server/dev-certs/server.chain.crt\nssl.identity.privateKeyPath=/deephaven-core/server/dev-certs/server.key\n\nAuthHandlers=io.deephaven.auth.AnonymousAuthenticationHandler\n```\n\n----------------------------------------\n\nTITLE: Joining Tables\nDESCRIPTION: Shows how to join two tables using a common Group column.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nsession = Session()\ntable1 = session.empty_table(5)\ntable1 = table1.update([\"Values1 = i\", \"Group = i\"])\ntable2 = session.empty_table(5)\ntable2 = table2.update([\"Values2 = i + 10\", \"Group = i\"])\ntable = table1.join(table2, on=[\"Group\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Deephaven Server\nDESCRIPTION: Example showing how to start a Deephaven server instance and create a time-based table that updates every second with alternating values in Col1.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/embedded-server/README_PyPi.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven_server import Server\nserver = Server()\nserver.start()\n\nfrom deephaven import time_table\nticking_table = time_table('PT1s').update_view(formulas=[\"Col1 = i % 2\"])\n```\n\n----------------------------------------\n\nTITLE: Connecting to Deephaven and Performing Table Operations in C++\nDESCRIPTION: Example demonstrating how to connect to a Deephaven server, fetch a table, and apply filtering, sorting, and tail operations. The code shows the complete workflow from connection to data manipulation.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/doc/main.rst#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nconst char *server = \"localhost:10000\";\nauto client = Client::Connect(server);\nauto manager = client.GetManager();\nauto my_data = manager.FetchTable(\"MyData\");\nauto filtered = my_data.Where(\"Price < 100\")\n    .Sort(SortPair(\"Timestamp\"))\n    .Tail(5);\n```\n\n----------------------------------------\n\nTITLE: Creating and Joining Tables in Python using Deephaven\nDESCRIPTION: This code creates two tables (employees and departments) and joins them on the DeptID column. It demonstrates table creation, column definition, and joining operations in Deephaven using Python.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import new_table\nfrom deephaven.column import string_col, int_col\nfrom deephaven.constants import NULL_INT\n\nleft = new_table([\n        string_col(\"LastName\", [\"Rafferty\", \"Jones\", \"Steiner\", \"Robins\", \"Smith\", \"Rogers\"]),\n        int_col(\"DeptID\", [31, 33, 33, 34, 34, NULL_INT]),\n        string_col(\"Telephone\", [\"(347) 555-0123\", \"(917) 555-0198\", \"(212) 555-0167\", \"(952) 555-0110\", None, None])\n    ])\n\nright = new_table([\n        int_col(\"DeptID\", [31, 33, 34, 35]),\n        string_col(\"DeptName\", [\"Sales\", \"Engineering\", \"Clerical\", \"Marketing\"]),\n        string_col(\"Telephone\", [\"(646) 555-0134\", \"(646) 555-0178\", \"(646) 555-0159\", \"(212) 555-0111\"])\n    ])\n\nt = left.join(right, \"DeptID\", \"DeptName, DeptTelephone=Telephone\")\n```\n\n----------------------------------------\n\nTITLE: Well-defined Filter Patterns in Python\nDESCRIPTION: Shows different approaches to pattern matching with filters, comparing well-defined filters with potentially problematic string expressions. Demonstrates null handling strategies.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/table-api/src/main/java/io/deephaven/api/filter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.filters import pattern, PatternMode\n\n# Table with string column Foo\nt = ...\n\n# t1 is well-defined by-design, will exclude rows where Foo == null\nt1 = t.where(pattern(PatternMode.MATCHES, \"Foo\", \"a.*z\"))\n\n# t2 is well-defined due to explicit nullness checking\nt2 = t.where(\"!isNull(Foo) && Foo.matches(`a.*z`))\")\n\n# t3 is not well-defined, and will throw a null pointer exception if Foo == null during evaluation\nt3 = t.where(\"Foo.matches(`a.*z`)\")\n```\n\n----------------------------------------\n\nTITLE: Starting Deephaven Server in Python\nDESCRIPTION: Example showing how to initialize and start the Deephaven server, and create a time-based table with updates every second.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/embedded-server/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven_server import Server\nserver = Server()\nserver.start()\n\nfrom deephaven import time_table\nticking_table = time_table('PT1s').update_view(formulas=[\"Col1 = i % 2\"])\n```\n\n----------------------------------------\n\nTITLE: Integrating CSV and Kafka Data with Deephaven Visualization\nDESCRIPTION: Demonstrates how to read CSV data, consume Kafka streams, join tables, and create visualizations using Deephaven's Python API. The example shows data ingestion from multiple sources, table joining operations, and creation of stacked bar plots.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import read_csv\nfrom deephaven.stream.kafka.consumer import kafka_consumer, TableType\nfrom deephaven.plot import Figure, PlotStyle\ncsv_table = read_csv(\"data1.csv\")\nkafka_table = kafka_consumer.consume({'bootstrap.servers': 'redpanda:29092'}, topic='realtime_feed', table_type=TableType.Append)\njoined_table = kafka_table.join(csv_table, on=[\"key_col_1\", \"key_col_2\"], joins=[\"data_col1\"])\nplot = Figure() \\\n    .axes(plot_style = PlotStyle.STACKED_BAR )\\\n    .plot_cat(series_name=\"Categories1\", t=joined_table, category=\"Key_col_1\", y = \"data_col1\") \\\n    .show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Deephaven Session\nDESCRIPTION: Creates a basic connection to Deephaven server using the Session class.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nsession = Session()\n```\n\n----------------------------------------\n\nTITLE: Server-Side Script Execution\nDESCRIPTION: Shows how to execute Python scripts on the Deephaven server\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\n\nsession = Session()\n\nscript = \"\"\"\nfrom deephaven import empty_table\n\ntable = empty_table(8).update([\"Index = i\"])\n\"\"\"\n\nsession.run_script(script)\n\ntable = session.open_table(\"table\")\nprint(table.to_arrow())\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Handlers in JVM\nDESCRIPTION: JVM command line configuration to enable multiple authentication handlers by specifying class names.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-DAuthHandlers=$CLASS_1,$CLASS_2,etc...\n```\n\n----------------------------------------\n\nTITLE: Catching Deephaven DHError Exceptions in Python\nDESCRIPTION: This Python snippet demonstrates how to handle exceptions raised by the pydeephaven client when attempting to establish a session connection. It uses a try-except block to catch DHError exceptions for known Deephaven errors and a generic Exception handler for all other errors. The code requires the pydeephaven package, and the key parameter is the host passed to Session, which if invalid, triggers the DHError. Upon catching these exceptions, the code prints relevant error messages to standard output. Expected input: an invalid Deephaven host. Expected output: error messages detailing the failure.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydeephaven import Session, DHError\ntry:\n    session = Session(host=\"invalid_host\")\nexcept DHError as e:\n    print(\"Deephaven error when connecting to session\")\n    print(e)\nexcept Exception as e:\n    print(\"Unknown error\")\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Server via pip\nDESCRIPTION: Commands to install the deephaven-server package using pip package manager. First upgrades pip and related tools, then installs the package.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/embedded-server/README_PyPi.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install --upgrade pip setuptools wheel\npip3 install deephaven-server\n```\n\n----------------------------------------\n\nTITLE: Creating and Joining Tables in Groovy using Deephaven\nDESCRIPTION: This snippet showcases the creation of two tables (employees and departments) and their join operation using the Groovy language in Deephaven. It illustrates table and column creation, as well as joining in Groovy syntax.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\nleft = newTable(\n        string_col(\"LastName\", \"Rafferty\", \"Jones\", \"Steiner\", \"Robins\", \"Smith\", \"Rogers\"),\n        int_col(\"DeptID\", 31, 33, 33, 34, 34, NULL_INT),\n        string_col(\"Telephone\", \"(347) 555-0123\", \"(917) 555-0198\", \"(212) 555-0167\", \"(952) 555-0110\", null, null)\n    )\n\nright = newTable(\n        intCol(\"DeptID\", 31, 33, 34, 35),\n        stringCol(\"DeptName\", \"Sales\", \"Engineering\", \"Clerical\", \"Marketing\"),\n        stringCol(\"Telephone\", \"(646) 555-0134\", \"(646) 555-0178\", \"(646) 555-0159\", \"(212) 555-0111\")\n    )\n\nt = left.join(right, \"DeptID\", \"DeptName, DeptTelephone=Telephone\")\n```\n\n----------------------------------------\n\nTITLE: Combining Kafka and CSV Data with Visualization in Deephaven Python\nDESCRIPTION: Demonstrates reading CSV data, consuming Kafka messages, joining tables, and creating visualizations using Deephaven's Python API. Shows integration with multiple data sources and plotting capabilities using the Figure class.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/sphinx/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import read_csv\nfrom deephaven.stream.kafka.consumer import kafka_consumer, TableType\nfrom deephaven.plot import Figure, PlotStyle\ncsv_table = read_csv(\"data1.csv\")\nkafka_table = kafka_consumer.consume({'bootstrap.servers': 'redpanda:29092'}, topic='realtime_feed', table_type=TableType.Append)\njoined_table = kafka_table.join(csv_table, on=[\"key_col_1\", \"key_col_2\"], joins=[\"data_col1\"])\nfigure = Figure() \\\n   .axes(plot_style = PlotStyle.STACKED_BAR) \\\n   .plot_cat(series_name=\"Categories1\", t=joined_table, category=\"Key_col_1\", y = \"data_col1\") \\\n   .show()\n```\n\n----------------------------------------\n\nTITLE: Specifying mTLS Authentication Handler in Deephaven Configuration\nDESCRIPTION: This code snippet shows how to specify the MTlsAuthenticationHandler in the Deephaven server configuration. It's part of the AuthHandlers configuration, which is a comma-separated string that can include multiple authentication handlers.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/example-providers/mtls/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nio.deephaven.authentication.mtls.MTlsAuthenticationHandler\n```\n\n----------------------------------------\n\nTITLE: Reading Table Data with Arrow Flight in C++\nDESCRIPTION: Complete example demonstrating how to create and read table data using Arrow Flight RPC. The program creates a table with Symbol and Price columns, then reads and displays the data using Arrow Flight streaming. Includes error handling and type checking for Arrow arrays.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/read_data_with_arrow_flight.rst#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n#include \"deephaven/client/highlevel/client.h\"\n#include \"deephaven/client/utility/table_maker.h\"\n#include \"deephaven/client/utility/utility.h\"\n\nusing deephaven::client::NumCol;\nusing deephaven::client::Client;\nusing deephaven::client::TableHandle;\nusing deephaven::client::TableHandleManager;\nusing deephaven::client::utility::flight::statusOrDie;\nusing deephaven::client::utility::TableMaker;\n\nTableHandle makeTable(const TableHandleManager &manager) {\n  TableMaker tm;\n  std::vector<std::string> symbols{\"FB\", \"AAPL\", \"NFLX\", \"GOOG\"};\n  std::vector<double> prices{101.1, 102.2, 103.3, 104.4};\n  tm.addColumn(\"Symbol\", symbols);\n  tm.addColumn(\"Price\", prices);\n  return tm.makeTable(manager, \"myTable\");\n}\n\nvoid dumpSymbolColumn(const TableHandle &tableHandle) {\n  auto fsr = tableHandle.getFlightStreamReader();\n  while (true) {\n    arrow::flight::FlightStreamChunk chunk;\n    statusOrDie(fsr->Next(&chunk), \"FlightStreamReader::Next()\");\n    if (chunk.data == nullptr) {\n      break;\n    }\n\n    auto symbolChunk = chunk.data->GetColumnByName(\"Symbol\");\n    if (symbolChunk == nullptr) {\n      throw std::runtime_error(\"Symbol column not found\");\n    }\n    auto priceChunk = chunk.data->GetColumnByName(\"Price\");\n    if (priceChunk == nullptr) {\n      throw std::runtime_error(\"Price column not found\");\n    }\n\n    auto symbolAsStringArray = std::dynamic_pointer_cast<arrow::StringArray>(symbolChunk);\n    auto priceAsDoubleArray = std::dynamic_pointer_cast<arrow::DoubleArray>(priceChunk);\n    if (symbolAsStringArray == nullptr) {\n      throw std::runtime_error(\"symbolChunk was not an arrow::StringArray\");\n    }\n    if (priceAsDoubleArray == nullptr) {\n      throw std::runtime_error(\"priceChunk was not an arrow::DoubleArray\");\n    }\n\n    if (symbolAsStringArray->length() != priceAsDoubleArray->length()) {\n      throw std::runtime_error(\"Lengths differ\");\n    }\n\n    for (int64_t i = 0; i < symbolAsStringArray->length(); ++i) {\n      auto symbol = symbolAsStringArray->GetView(i);\n      auto price = priceAsDoubleArray->Value(i);\n      std::cout << symbol << ' ' << price << '\\n';\n    }\n  }\n}\n\nint main() {\n  const char *server = \"localhost:10000\";\n  auto client = Client::connect(server);\n  auto manager = client.getManager();\n\n  try {\n    auto table = MakeTable(manager);\n    DumpSymbolColumn(table);\n  } catch (const std::runtime_error &e) {\n    std::cerr << \"Caught exception: \" << e.what() << '\\n';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Example in C++ with Deephaven Client\nDESCRIPTION: This snippet demonstrates how to connect to a Deephaven server, create a table, and perform a simple update operation. It uses the Deephaven client library to interact with the server and manipulate tables.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/getting_started.rst#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <iostream>\n#include \"deephaven/client/highlevel/client.h\"\n\nusing deephaven::client::Client;\n\nint main() {\n  const char *server = \"localhost:10000\";\n  auto client = Client::connect(server);\n  auto manager = client.getManager();\n  auto table = manager.emptyTable(10);\n  auto t2 = table.update(\"ABC = ii + 100\");\n  std::cout << t2.stream(true) << '\\n';\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Table Data\nDESCRIPTION: Shows how to filter table rows using a where clause with a modulo condition.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nsession = Session()\ntable = session.empty_table(5)\ntable = table.update([\"Values = i\"])\ntable = table.where([\"Values % 2 == 1\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Executing Table Query\nDESCRIPTION: Demonstrates how to execute an update query on a Deephaven table\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\n\nsession = Session()\n\n# Create a table with no columns and 3 rows\ntable = session.empty_table(3)\n# Create derived table having a new column MyColumn populated with the row index \"i\"\ntable = table.update([\"MyColumn = i\"])\n# Update the Deephaven Web Console with this new table\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Creating Table using Arrow Flight in C++\nDESCRIPTION: Complete example demonstrating how to create a table using Arrow Flight RPC, including schema definition, data population, and table creation. The code shows initialization of Arrow Flight client, schema building with Symbol and Price columns, data preparation, and table creation using Deephaven's FlightWrapper.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/create_table_with_arrow_flight.rst#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n#include \"deephaven/client/highlevel/client.h\"\n#include \"deephaven/client/utility/table_maker.h\"\n\nusing deephaven::client::NumCol;\nusing deephaven::client::Client;\nusing deephaven::client::TableHandle;\nusing deephaven::client::TableHandleManager;\nusing deephaven::client::utility::flight::statusOrDie;\nusing deephaven::client::utility::flight::valueOrDie;\nusing deephaven::client::utility::TableMaker;\n\n// This example shows how to use the Arrow Flight client to make a simple table.\nvoid doit(const TableHandleManager &manager) {\n  // 1. Build schema\n  arrow::SchemaBuilder schemaBuilder;\n\n  // 2. Add \"Symbol\" column (type: string) to schema\n  auto symbolMetadata = std::make_shared<arrow::KeyValueMetadata>();\n  statusOrDie(symbolMetadata->Set(\"deephaven:type\", \"java.lang.String\"), \"KeyValueMetadata::Set\");\n  auto symbolField = std::make_shared<arrow::Field>(\"Symbol\",\n    std::make_shared<arrow::StringType>(), true, std::move(symbolMetadata));\n  statusOrDie(schemaBuilder.AddField(symbolField), \"SchemaBuilder::AddField\");\n\n  // 3. Add \"Price\" column (type: double) to schema\n  auto priceMetadata = std::make_shared<arrow::KeyValueMetadata>();\n  statusOrDie(priceMetadata->Set(\"deephaven:type\", \"double\"), \"KeyValueMetadata::Set\");\n  auto priceField = std::make_shared<arrow::Field>(\"Price\",\n    std::make_shared<arrow::StringType>(), true, std::move(priceMetadata));\n  statusOrDie(schemaBuilder.AddField(priceField), \"SchemaBuilder::AddField\");\n\n  // 4. Schema is done\n  auto schema = valueOrDie(schemaBuilder.Finish(), \"Failed to create schema\");\n\n  // 5. Prepare symbol and price data\n  std::vector<std::string> symbols{\"FB\", \"AAPL\", \"NFLX\", \"GOOG\"};\n  std::vector<double> prices{101.1, 102.2, 103.3, 104.4};\n  auto numRows = static_cast<int64_t>(symbols.size());\n  if (numRows != prices.size()) {\n    throw std::runtime_error(\"sizes don't match\");\n  }\n\n  // 6. Move data to Arrow column builders\n  arrow::StringBuilder symbolBuilder;\n  arrow::DoubleBuilder priceBuilder;\n  symbolBuilder.AppendValues(symbols);\n  priceBuilder.AppendValues(prices);\n\n  // 7. Get Arrow columns from builders\n  std::vector<std::shared_ptr<arrow::Array>> columns = {\n    valueOrDie(symbolBuilder.Finish(), \"symbolBuilder.Finish()\"),\n    valueOrDie(priceBuilder.Finish(), \"priceBuilder.Finish()\")\n  };\n\n  // 8. Get a Deephaven \"FlightWrapper\" object to access Arrow Flight\n  auto wrapper = manager.createFlightWrapper();\n\n  // 9. Allocate a TableHandle and get its corresponding Arrow flight descriptor\n  auto [table, fd] = manager.newTableHandleAndFlightDescriptor();\n\n  // 10. DoPut takes FlightCallOptions, which need to at least contain the Deephaven\n  // authentication headers for this session.\n  arrow::flight::FlightCallOptions options;\n  wrapper.addAuthHeaders(&options);\n\n  // 11. Perform the doPut\n  std::unique_ptr<arrow::flight::FlightStreamWriter> fsw;\n  std::unique_ptr<arrow::flight::FlightMetadataReader> fmr;\n  statusOrDie(wrapper.flightClient()->DoPut(options, fd, schema, &fsw, &fmr), \"DoPut failed\");\n\n  // 12. Make a RecordBatch containing both the schema and the data\n  auto batch = arrow::RecordBatch::Make(schema, numRows, std::move(columns));\n  statusOrDie(fsw->WriteRecordBatch(*batch), \"WriteRecordBatch failed\");\n  statusOrDie(fsw->DoneWriting(), \"DoneWriting failed\");\n\n  // 13. Read back a metadata message (ignored), then close the Writer\n  std::shared_ptr<arrow::Buffer> buf;\n  statusOrDie(fmr->ReadMetadata(&buf), \"ReadMetadata failed\");\n  statusOrDie(fsw->Close(), \"Close failed\");\n\n  // 14. Use Deephaven high level operations to fetch the table and print it\n  std::cout << \"table is:\\n\" << table.stream(true) << std::endl;\n}\n\nint main() {\n  const char *server = \"localhost:10000\";\n  auto client = Client::connect(server);\n  auto manager = client.getManager();\n\n  try {\n    doit(manager);\n  } catch (const std::runtime_error &e) {\n    std::cerr << \"Caught exception: \" << e.what() << '\\n';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment for Deephaven\nDESCRIPTION: Commands to create and activate a Python virtual environment for Deephaven development. This isolates the development environment from the system Python installation.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m venv .venv # Create a venv. Only needed once.\nsource .venv/bin/activate # Activate the virtual environment.\n```\n\n----------------------------------------\n\nTITLE: Sorting Table Data\nDESCRIPTION: Demonstrates how to sort a table by creating a column and sorting it.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nsession = Session()\ntable = session.empty_table(5)\ntable = table.update([\"SortColumn = 4-i\"])\ntable = table.sort([\"SortColumn\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Filtering Table Example\nDESCRIPTION: Demonstrates filtering a Deephaven table using a where clause\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\n\nsession = Session()\n\ntable = session.empty_table(5)\ntable = table.update([\"Values = i\"])\n\ntable = table.where([\"Values % 2 == 1\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Executing Table Query\nDESCRIPTION: Creates an empty table and executes an update query to add a new column with row indices.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nsession = Session()\n\n# Create a table with no columns and 3 rows\ntable = session.empty_table(3)\n\n# Create derived table having a new column MyColumn populated with the row index \"i\"\ntable = table.update([\"MyColumn = i\"])\n\n# Update the Deephaven Web Console with this new table\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Environment\nDESCRIPTION: Commands to download the Docker Compose configuration and start the Deephaven environment. Downloads the compose file from GitHub, pulls required images, and launches containers in detached mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python/All-AI/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python/TensorFlow/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Table Using TableMaker in C++\nDESCRIPTION: Example program demonstrating how to create a table using TableMaker utility class. The program creates a table with two columns (Symbol and Price) containing stock symbols and their corresponding prices. It shows the basic pattern of creating a TableMaker instance, adding columns, and generating the final table.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/create_table_with_tablemaker.rst#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <iostream>\n#include \"deephaven/client/highlevel/client.h\"\n#include \"deephaven/client/utility/table_maker.h\"\n\nusing deephaven::client::NumCol;\nusing deephaven::client::Client;\nusing deephaven::client::TableHandle;\nusing deephaven::client::TableHandleManager;\nusing deephaven::client::utility::TableMaker;\n\n// This example shows how to use the TableMaker wrapper to make a simple table.\nvoid doit(const TableHandleManager &manager) {\n  TableMaker tm;\n  std::vector<std::string> symbols{\"FB\", \"AAPL\", \"NFLX\", \"GOOG\"};\n  std::vector<double> prices{101.1, 102.2, 103.3, 104.4};\n  tm.addColumn(\"Symbol\", symbols);\n  tm.addColumn(\"Price\", prices);\n  auto table = tm.MakeTable(manager, \"myTable\");\n\n  std::cout << \"table is:\\n\" << table.stream(true) << std::endl;\n}\n\nint main() {\n  const char *server = \"localhost:10000\";\n  auto client = Client::connect(server);\n  auto manager = client.getManager();\n\n  try {\n    doit(manager);\n  } catch (const std::runtime_error &e) {\n    std::cerr << \"Caught exception: \" << e.what() << '\\n';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Logic with Deephaven Filters in Python\nDESCRIPTION: Demonstrates basic boolean algebra principles using Deephaven filters, showing how filter negation and OR operations work with tables. Illustrates fundamental logical properties like f ∧ ¬f = 0 and f ∨ ¬f = 1.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/table-api/src/main/java/io/deephaven/api/filter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.filters import not_, or_\n\n# any Table\nt = ...\n\n# any filter API\nf = ...\n\n# f ∧ ¬f = 0\n# no rows match\nno_rows = t.where([f, not_(f)])\n\n# f ∨ ¬f = 1\n# all rows match\nall_rows = t.where(or_([f, not_(f)]))\n```\n\n----------------------------------------\n\nTITLE: Sample Python Program Using pydeephaven-ticking\nDESCRIPTION: Example Python code demonstrating the usage of pydeephaven-ticking library to create a time table, set up a listener, and handle updates.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client-ticking/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pydeephaven as dh\nimport time\nsession = dh.Session() # assuming Deephaven Community Core is running locally with the default configuration\ntable = session.time_table(period=1000000000).update(formulas=[\"Col1 = i\"])\nlistener_handle = dh.listen(table, lambda update : print(update.added()))\nlistener_handle.start()\n# data starts printing asynchronously here\ntime.sleep(10)\nlistener_handle.stop()\nsession.close()\n```\n\n----------------------------------------\n\nTITLE: Generating Parquet Test Data with Pandas in Python\nDESCRIPTION: This code creates a Pandas DataFrame with diverse column types and writes it to Parquet files using multiple compression algorithms, including uncompressed, Brotli, gzip, lz4, snappy, and zstd. Dependencies include pandas, numpy, and compatible Parquet engines such as pyarrow or fastparquet. Key parameters involve the DataFrame's dtypes, date ranges, categoricals, and output filenames. Inputs are hardcoded into the script; outputs are Parquet files for later use in testing. Ensure all required compression libraries are installed to avoid errors with specific codecs.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/parquet/table/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\\nimport numpy as np\\n\\ndf = pd.DataFrame(\\n    {\\n        \"a\": list(\"abc\"),\\n        \"b\": list(range(1, 4)),\\n        \"c\": np.arange(3, 6).astype(\"u1\"),\\n        \"d\": np.arange(4.0, 7.0, dtype=\"float64\"),\\n        \"e\": [True, False, True],\\n        \"f\": pd.date_range(\"20130101\", periods=3),\\n        \"g\": pd.date_range(\"20130101\", periods=3, tz=\"US/Eastern\"),\\n        \"h\": pd.Categorical(list(\"abc\")),\\n        \"i\": pd.Categorical(list(\"abc\"), ordered=True),\\n    }\\n)\\n\\ndf.to_parquet(\"uncompressed.parquet\", compression=None)\\ndf.to_parquet(\"brotli.parquet\", compression=\"brotli\")\\ndf.to_parquet(\"gzip.parquet\", compression=\"gzip\")\\ndf.to_parquet(\"lz4.parquet\", compression=\"lz4\")\\ndf.to_parquet(\"snappy.parquet\", compression=\"snappy\")\\ndf.to_parquet(\"zstd.parquet\", compression=\"zstd\")\n```\n\n----------------------------------------\n\nTITLE: Finding Pre-shared Authentication Key\nDESCRIPTION: Command to locate the pre-shared authentication key in Docker logs\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose logs -f | grep \"access through pre-shared key\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Deephaven Table in C++\nDESCRIPTION: Demonstrates basic table operations including fetching columns, filtering, and selecting data using both direct and string literal approaches.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nauto table = tableManager.fetchTable(\"trades\");\nauto (importDate, ticker, close, volume) =\n    table.getColumns<StrCol, StrCol, NumCol, NumCol>(\"ImportDate\", \"Ticker\",\n    \"Close\", \"Volume\");\nauto t0 = table.where(importDate == \"2017-11-01\" && ticker == \"AAPL\");\nauto t1 = t0.select(ticker, (close * volume).As(\"Result\"));\n// string literal equivalent\nauto t1_literal = t0.Select(\"Ticker\", \"Result = Close * Volume\");\n```\n\n----------------------------------------\n\nTITLE: Executing Server-Side Scripts\nDESCRIPTION: Demonstrates how to execute Python scripts on the Deephaven server and retrieve results.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nsession = Session()\n\nscript = \"\"\"\nfrom deephaven import empty_table\ntable = empty_table(8).update([\"Index = i\"])\n\"\"\"\n\nsession.run_script(script)\ntable = session.open_table(\"table\")\nprint(table.to_arrow())\n```\n\n----------------------------------------\n\nTITLE: Joining Tables Example\nDESCRIPTION: Demonstrates how to join two Deephaven tables\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\n\nsession = Session()\n\ntable1 = session.empty_table(5)\ntable1 = table1.update([\"Values1 = i\", \"Group = i\"])\ntable2 = session.empty_table(5)\ntable2 = table2.update([\"Values2 = i + 10\", \"Group = i\"])\n\ntable = table1.join(table2, on=[\"Group\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Ticking Table in C++\nDESCRIPTION: This snippet demonstrates how to subscribe to a ticking table using the Deephaven C++ client library. It shows the basic process of fetching a table, subscribing to it, and then unsubscribing when done.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/doc/ticking.rst#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nTableHandle my_ticking_data = manager.FetchTable(\"MyTickingData\");\nauto sub_handle = my_ticking_data.Subscribe(std::make_shared<MyCallback>());\n// Do all your processing...\n// Then when all done, unsubscribe...\nmy_ticking_data.Unsubscribe(std::move(sub_handle));\n```\n\n----------------------------------------\n\nTITLE: SSL Development Server Setup\nDESCRIPTION: Command to start an SSL-enabled Deephaven server on port 8443 with development certificates.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app:run -Pgroovy -PdevCerts\n```\n\n----------------------------------------\n\nTITLE: Expression Order Examples in C++\nDESCRIPTION: Demonstrates how different ordering of operations affects the generated expression tree.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n// Equivalent Deephaven Code Studio expression is \"Result = Close + 100\"\nauto t1b = t0.select((close + 100).as(\"Result\"));\n// Equivalent Deephaven Code Studio expression is \"Result = (Close + 100) + 200\"\nauto t2b = t0.select((close + 100 + 200).as(\"Result\"));\n// Equivalent Deephaven Code Studio expression is \"Result = (Close + 100) + 1\"\nauto t3b = t0.select((close + 100 + x).as(\"Result\"));\n// Equivalent Deephaven Code Studio expression is \"Result = (Close + 100) + 11\"\nauto t4b = t0.Select((close + 100 + myFunc(x)).as(\"Result\"));\n```\n\n----------------------------------------\n\nTITLE: Loading Deephaven Demo Script\nDESCRIPTION: Python command to execute the Deephaven demo script in the web console. This loads the contents of the demo.py script and defines refreshing tables.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/debezium/perf/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexec(open('/scripts/demo.py').read())\n```\n\n----------------------------------------\n\nTITLE: PyArrow Table Conversion\nDESCRIPTION: Demonstrates converting between PyArrow and Deephaven tables\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport pyarrow as pa\nfrom pydeephaven import Session\n\nsession = Session()\n\narr = pa.array([4,5,6], type=pa.int32())\npa_table = pa.Table.from_arrays([arr], names=[\"Integers\"])\n\ntable = session.import_table(pa_table)\nsession.bind_table(name=\"my_table\", table=table)\n\n#Convert the Deephaven table back to a pyarrow table\npa_table = table.to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Creating and Filtering Tables with TableHandle in C++\nDESCRIPTION: This snippet demonstrates how to fetch a table, apply filtering and sorting operations, and limit the result to the last 5 rows using TableHandleManager and TableHandle methods.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/doc/tablehandles.rst#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nTableHandle my_data = manager.FetchTable(\"MyData\");\nTableHandle filtered = my_data.Where(\"Price < 100\")\n    .Sort(SortPair(\"Timestamp\"))\n    .Tail(5);\n```\n\n----------------------------------------\n\nTITLE: Starting Jetty Server with mTLS\nDESCRIPTION: Launches the Jetty server with mutual TLS authentication enabled.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app:run -Pgroovy -PdevMTLS\n```\n\n----------------------------------------\n\nTITLE: String Pattern Matching in Deephaven C++\nDESCRIPTION: Demonstrates string pattern matching operations using startsWith and matches methods with both direct and literal syntax.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\nvar t1 = t0.where(ticker.startsWith(\"AA\"));\nvar t1_literal = t0.where(\"ticker.startsWith(`AA`)\");\nvar t2 = t0.where(ticker.matches(\".*P.*\"));\nvar t2_literal = t0.where(\"ticker.matches(`.*P.*`)\");\n```\n\n----------------------------------------\n\nTITLE: Building and Running Deephaven C++ Hello World Example\nDESCRIPTION: This bash script demonstrates the steps to build and run the Deephaven C++ 'Hello, World' example. It creates a build directory, runs CMake to configure the project, builds the executable, and runs it.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/getting_started.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cpp_examples/hello_world\nmkdir build && cd build\ncmake ..\nmake -j8\n./hello_world\n```\n\n----------------------------------------\n\nTITLE: Using Query Objects\nDESCRIPTION: Shows how to use query objects for optimized table operations\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\n\nsession = Session()\n\ntable = session.empty_table(10)\n\n# executed immediately\ntable1= table.update([\"MyColumn = i\"]).sort([\"MyColumn\"]).where([\"MyColumn > 5\"]);\n\n# create Query Object (execution is deferred until the \"exec\" statement)\nquery_obj = session.query(table).update([\"MyColumn = i\"]).sort([\"MyColumn\"]).where([\"MyColumn > 5\"]);\n# Transmit the QueryObject to the server and execute it\ntable2 = query_obj.exec();\n\nsession.bind_table(name=\"my_table1\", table=table1)\nsession.bind_table(name=\"my_table2\", table=table2)\n```\n\n----------------------------------------\n\nTITLE: Creating and Filtering Tables in Deephaven C++\nDESCRIPTION: Demonstrates creating tables with numeric and string columns and applying numeric comparison filters.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\nstd::vector<int> aValues{10, 20, 30};\nstd::vector<std::string> sValues{\"x\", \"y\", \"z\"};\nTableMaker tm;\ntm.addColumn(\"A\", aValues);\ntm.addColumn(\"S\", sValues);\nauto temp = tm.MakeTable(manager);\nauto a = temp.getNumCol(\"A\");\nauto result = temp.where(a > 15);\n```\n\n----------------------------------------\n\nTITLE: Starting Netty Server with mTLS\nDESCRIPTION: Launches the Netty server with mutual TLS authentication enabled.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-netty-app:run -Pgroovy -PdevMTLS\n```\n\n----------------------------------------\n\nTITLE: String Expression Operations in Deephaven C++\nDESCRIPTION: Shows string manipulation and concatenation operations on table columns using both direct and literal syntax.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\nauto t2 = t0.select(ticker, (ticker + \"XYZ\").as(\"Result\"));\nauto t2_literal = t0.select(\"Ticker\", \"Result = Ticker + `XYZ`\");\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Deephaven C++ Client Project\nDESCRIPTION: This CMakeLists.txt file sets up the build configuration for a C++ project using the Deephaven client library. It specifies the required dependencies and links the Deephaven client library to the executable.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/getting_started.rst#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(hello_world)\n\nset(CMAKE_CXX_STANDARD 17)\n\nfind_package(deephaven REQUIRED)\n\nfind_package(absl REQUIRED)\nfind_package(Arrow REQUIRED)\nfind_package(ArrowFlight REQUIRED HINTS ${Arrow_DIR})\nfind_package(Protobuf REQUIRED)\nfind_package(gRPC REQUIRED)\nfind_package(Threads REQUIRED)\n\nadd_executable(hello_world main.cc)\n\ntarget_link_libraries(hello_world deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven via pip\nDESCRIPTION: Commands to install Deephaven Python packages using pip\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install --upgrade pip setuptools wheel\npip install deephaven-server deephaven-ipywidgets\n```\n\n----------------------------------------\n\nTITLE: Initializing Deephaven Server with Pre-shared Key in Python\nDESCRIPTION: This snippet demonstrates how to start a Deephaven server from Python with a custom port and pre-shared key for authentication. It sets the JVM memory and authentication parameters.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven_server import Server\ns = Server(port=10000, jvm_args=[\"-Xmx4g\", \"-Dauthentication.psk=MyPreSharedKey\"]).start()\n```\n\n----------------------------------------\n\nTITLE: Select Column Operations in Deephaven C++\nDESCRIPTION: Demonstrates selecting columns and creating new derived columns using expressions.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\n// Assume \"close\" is already a column, so we can use it directly\nauto t1 = t0.select(close);\n// \"100 + close\" is an expression; to turn it into a SelectColumn\n// we need to bind it to a new column name with the \"as\" method.\nauto t2 = t0.select((100 + close).as(\"Result\"));\n// The above would be expressed in the Deephaven Code Studio as:\nvar t2_literal = t0.select(\"Result = 100 + Close\")\n```\n\n----------------------------------------\n\nTITLE: Starting Jetty Server with Dev Certificates\nDESCRIPTION: Launches the Jetty server application with Groovy support and development certificates enabled.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app:run -Pgroovy -PdevCerts\n```\n\n----------------------------------------\n\nTITLE: Boolean Operations in Deephaven C++\nDESCRIPTION: Shows creation and manipulation of boolean columns using update operations and boolean expressions.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\nauto empty = manager.emptyTable(5, {}, {});\nauto t = empty.update( ((BooleanExpression)true).as(\"A\"),\n    ((BooleanExpression)false).as(\"B\"));\n// Deephaven Code Studio equivalent\nauto t_literal = empty.Update(\"A = true\", \"B = false\");\nauto (a, b) = t.GetColumns<BoolCol, BoolCol>(\"A\", \"B\");\nauto t2 = t.where(a);\nauto t3 = t.where(a && b);\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example\nDESCRIPTION: Demonstrates how to handle Deephaven-specific errors\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session, DHError\n\ntry:\n    session = Session(host=\"invalid_host\")\nexcept DHError as e:\n    print(\"Deephaven error when connecting to session\")\n    print(e)\nexcept Exception as e:\n    print(\"Unknown error\")\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Implementing a TickingCallback in C++\nDESCRIPTION: This code snippet shows the skeleton of a user-defined callback object that derives from TickingCallback. It overrides the OnTick and OnFailure methods to handle updates and failures respectively.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/doc/ticking.rst#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nclass MyCallback final : public deephaven::dhcore::ticking::TickingCallback {\npublic:\n  void OnTick(deephaven::dhcore::ticking::TickingUpdate update) final {\n    // handle the update message\n  }\n\n  void OnFailure(std::exception_ptr ep) final {\n    // handle the failure\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring PSK with Gradle Run Command\nDESCRIPTION: Command to enable PSK authentication when running Deephaven server through Gradle. Demonstrates both default password generation and custom password specification.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/example-providers/psk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n:server-jetty-app:run -Ppsk\n:server-jetty-app:run -Ppsk=password-goes-here\n```\n\n----------------------------------------\n\nTITLE: Creating Ticking Table\nDESCRIPTION: Example showing how to create and bind a ticking time table in Deephaven\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\n\nsession = Session()\n\ntable = session.time_table(period=1000000000).update(formulas=[\"Col1 = i % 2\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Null Handling in Python\nDESCRIPTION: Illustrates four distinct cases of pattern matching with null handling using filter flags and the not_ operator. Shows different combinations of pattern matching and null inclusion/exclusion.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/table-api/src/main/java/io/deephaven/api/filter/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.filters import not_, pattern, PatternMode\n\n# Table with string column Foo\nt = ...\n\n# Foo != null && Foo.matches(...)\ninclude_match_exclude_null = t.where(pattern(...))\n\n# Foo == null || Foo.matches(...)\ninclude_match_include_null = t.where(not_(pattern(..., invert_pattern=True)))\n\n# Foo != null && !Foo.matches(...)\nexclude_match_exclude_null = t.where(pattern(..., invert_pattern=True))\n\n# Foo == null || !Foo.matches(...)\nexclude_match_include_null = t.where(not_(pattern(...)))\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven with Docker Compose\nDESCRIPTION: This bash script downloads the Docker Compose configuration file, pulls the required Docker images, and starts the Deephaven containers in detached mode. It's used to quickly set up and launch a Deephaven environment.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/groovy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/groovy/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Utility Class Declarations for Chunk Operations\nDESCRIPTION: Defines utility classes for working with Chunks including AnyChunk for type-variant storage, ChunkVisitor for type-safe operations, and ChunkMaker for chunk creation.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/doc/chunks.rst#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace deephaven::dhcore::chunk {\n  class AnyChunk;\n  class ChunkVisitor;\n  class ChunkMaker;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Ticking Tables\nDESCRIPTION: Shows how to implement a TableListener for subscribing to real-time table updates.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom pydeephaven import Session, TableListener, TableUpdate, listen\n\nsession = Session()\ntable = session.time_table(period=1000000000).update(formulas=[\"Col1 = i % 2\"])\n\nclass MyListener(TableListener):\n    def on_update(self, update: TableUpdate) -> None:\n        self._show_deltas(\"removes\", update.removed())\n        self._show_deltas(\"adds\", update.added())\n        self._show_deltas(\"modified-prev\", update.modified_prev())\n        self._show_deltas(\"modified\", update.modified())\n\n    def on_error(self, error: Exception):\n        print(f\"Error happened: {error}\")\n\n    def _show_deltas(self, what: str, dict: Dict[str, pa.Array]):\n        if len(dict) == 0:\n            return\n\n        print(f\"*** {what} ***\")\n        for name, data in dict.items():\n            print(f\"name={name}, data={data}\")\n\nlisten_handle = listen(table, MyListener())\n# Start processing data in another thread\nlisten_handle.start()\ntime.sleep(15)  # simulate doing other work for 15 seconds\nlisten_handle.stop()\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Dockerfile for Plugin Installation\nDESCRIPTION: Dockerfile configuration for installing JS plugins in the Deephaven web client using web-plugin-packager. Shows how to install matplotlib and table-example plugins.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/web-plugin-packager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Pull the web-plugin-packager image\nFROM ghcr.io/deephaven/web-plugin-packager:latest as build\n\n# Specify the plugins you wish to use. You can specify multiple plugins separated by a space, and optionally include the version number, e.g.\n# RUN ./pack-plugins.sh <js-plugin-name>[@version] ...\n# For a list of published plugins, see https://www.npmjs.com/search?q=keywords%3Adeephaven-js-plugin\n# Here is how you would install the matplotlib and table-example plugins\nRUN ./pack-plugins.sh @deephaven/js-plugin-matplotlib @deephaven/js-plugin-table-example\n\n# Copy the packaged plugins over\nFROM ghcr.io/deephaven/web:latest\nCOPY --from=build js-plugins/ /usr/share/nginx/html/js-plugins/\n```\n\n----------------------------------------\n\nTITLE: Updating Protobuf for Python, Go, and C++ APIs\nDESCRIPTION: This command updates the protobuf files for Python, Go, and C++ client APIs using Gradle. It should be run when protobuf files change to regenerate the necessary client code.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/proto/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew :py-client:updateProtobuf :go:updateProtobuf :cpp-client:updateProtobuf\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Core with Docker Compose\nDESCRIPTION: Shell commands to download the Docker Compose configuration and launch Deephaven with Groovy and Redpanda. Downloads the compose file from GitHub, pulls the required images, and starts the containers in detached mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/groovy-redpanda/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/groovy-redpanda/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Starting Deephaven Server in Python\nDESCRIPTION: Python code to start a Deephaven server instance with 4GB memory allocation\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven_server import Server\ns = Server(port=10000, jvm_args=[\"-Xmx4g\"]).start()\n```\n\n----------------------------------------\n\nTITLE: Initializing Flight SQL Client in Java\nDESCRIPTION: Demonstrates how to construct a Flight SQL client from an existing Flight client instance. Shows the basic initialization pattern.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/flight-sql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFlightClient flightClient = ...;\nFlightSqlClient flightSqlClient = new FlightSqlClient(flightClient);\n```\n\n----------------------------------------\n\nTITLE: Performing Table Aggregations\nDESCRIPTION: Demonstrates how to perform aggregations on a table using the avg function grouped by a column.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session, agg\nsession = Session()\ntable = session.empty_table(10)\ntable = table.update([\"Count = i\", \"Group = i % 2\"])\nmy_agg = agg.avg([\"Count\"])\ntable = table.agg_by(aggs=[my_agg], by=[\"Group\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project and Dependencies\nDESCRIPTION: Sets up the CMake project with C++17 standard and finds required external packages including Arrow, gRPC, and Protobuf.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/dhclient/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(dhclient)\n\nset(CMAKE_CXX_STANDARD 17)\n\n# for CMAKE_INSTALL_{dir}\ninclude(GNUInstallDirs)\n\nfind_package(Arrow CONFIG REQUIRED)\nfind_package(ArrowFlight CONFIG REQUIRED HINTS ${Arrow_DIR})\nfind_package(Immer CONFIG REQUIRED)\nfind_package(Protobuf CONFIG REQUIRED)\nfind_package(gRPC CONFIG REQUIRED)\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Local vs Server Evaluation Examples in C++\nDESCRIPTION: Shows different examples of expressions and how they are evaluated either locally or on the server.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nauto table = tableManager.fetchTable(\"trades\");\nauto (importDate, ticker, close) =\n    table.GetColumns<StrCol, StrCol, NumCol>(\"ImportDate\", \"Ticker\", \"Close\");\nauto t0 = table.where(importDate == \"2017-11-01\" && ticker == \"AAPL\");\n\nvar x = 1;\n\nint myFunc(int arg)\n{\n    return arg + 10;\n}\n\n// Equivalent Deephaven Code Studio expression is \"Result = 100 + Close\"\nvar t1a = t0.select((100 + close).as(\"Result\"));\n// Equivalent Deephaven Code Studio expression is \"Result = 300 + Close\"\nvar t2a = t0.select((100 + 200 + close).as(\"Result\"));\n// Equivalent Deephaven Code Studio expression is \"Result = 101 + Close\"\nvar t3a = t0.select((100 + x + close).as(\"Result\"));\n// Equivalent Deephaven Code Studio expression is \"Result = 111 + Close\"\nvar t4a = t0.select((100 + myFunc(x) + close).as(\"Result\"));\n```\n\n----------------------------------------\n\nTITLE: Setting up Groovy Docker Compose Deployment\nDESCRIPTION: Commands to set up and start Deephaven using Docker Compose with Groovy configuration\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmkdir deephaven-deployment\ncd deephaven-deployment\n\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/groovy/docker-compose.yml\n\ndocker compose pull\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Deployment\nDESCRIPTION: This bash snippet downloads the docker-compose.yml file, pulls the necessary Docker images, and starts the Deephaven environment in detached mode. It's the recommended method for launching Deephaven using Docker Compose.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python/base/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python/base/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Comparing String vs Fluent Syntax in C++\nDESCRIPTION: Demonstrates the difference between string-based and fluent syntax approaches for filtering table data using the where clause.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nauto table = tableManager.fetchTable(\"trades\");\nauto filtered1 = table.where(\"ImportDate == `2017-11-01` && Ticker == `AAPL`\");\n\nauto (importDate, ticker) = table.getColumns<StrCol, StrCol>(\"ImportDate\", \"Ticker\");\nvar filtered2 = table.where(importDate == \"2017-11-01\" && ticker == \"AAPL\");\n```\n\n----------------------------------------\n\nTITLE: Table Aggregation Example\nDESCRIPTION: Shows how to perform aggregations on Deephaven tables\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session, agg\n\nsession = Session()\n\ntable = session.empty_table(10)\ntable = table.update([\"Count = i\", \"Group = i % 2\"])\n\nmy_agg = agg.avg([\"Count\"])\n\ntable = table.agg_by(aggs=[my_agg], by=[\"Group\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories and Installing Headers for Deephaven Core\nDESCRIPTION: Adds subdirectories for different components of the project and sets up installation rules for header files. It includes a conditional build option for only the core component.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(dhcore)\nif(NOT DHCORE_ONLY)\n    add_subdirectory(dhclient)\n    add_subdirectory(tests)\n    add_subdirectory(examples)\nendif()\n\ninstall(DIRECTORY dhcore/include/public/\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    )\n\nif(NOT DHCORE_ONLY)\n    install(DIRECTORY dhclient/include/public/\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n        )\n```\n\n----------------------------------------\n\nTITLE: Expression Tree Building Example in C++\nDESCRIPTION: Shows how fluent syntax builds expression trees using numeric columns and operators.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nauto (a, b, c, d) =\n    table.getColumns<NumCol, NumCol, NumCol, NumCol>(\"A\", \"B\", \"C\", \"D\");\nauto filtered = table.where(a + b + c <= d);\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Docker Compose Deployment\nDESCRIPTION: Commands to set up and start Deephaven using Docker Compose with Python configuration\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmkdir deephaven-deployment\ncd deephaven-deployment\n\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python-examples/base/docker-compose.yml\n\ndocker compose pull\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Connection String for Flight SQL\nDESCRIPTION: Example JDBC connection string for connecting to Flight SQL with self-signed TLS. Includes parameters for authorization, encryption, certificate verification, and cookie authentication.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/flight-sql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\njdbc:arrow-flight-sql://localhost:8443/?Authorization=Anonymous&useEncryption=1&disableCertificateVerification=1&x-deephaven-auth-cookie-request=true\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Deephaven\nDESCRIPTION: Creates a Python virtual environment for installing Deephaven client\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/py/dhenv\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Deephaven Core\nDESCRIPTION: Specifies all source files, headers, and third-party dependencies to be included in the Deephaven Core library build. This comprehensive list includes core functionality, interop components, and vendored libraries like FlatBuffers, fmt, and date.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/dhcore/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_FILES\n    src/types.cc\n    src/chunk/chunk.cc\n    src/chunk/chunk_maker.cc\n    # ... [truncated for brevity]\n    include/public/deephaven/third_party/fmt/xchar.h\n\n    # we vendor the date library also but it's private to us, so we don't export its .h file\n    third_party/date/include/date/date.h\n)\n```\n\n----------------------------------------\n\nTITLE: Expression Tree Method Call Translation in C++\nDESCRIPTION: Demonstrates how infix operators are transformed into method calls in the expression tree.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nNumericExpression temp1 = operator+(a, b);\nNumericExpression temp2 = operator+(temp1, c);\nBooleanExpression temp3 = operator<=(temp2, d);\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Deployment\nDESCRIPTION: This bash script downloads the Docker Compose configuration file for Deephaven with PyTorch, pulls the necessary Docker images, and starts the containers in detached mode. It's used to quickly set up and launch a Deephaven environment.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python/PyTorch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python/PyTorch/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Binding Time Table to Deephaven\nDESCRIPTION: Creates a ticking time table with a modulo operation and binds it to Deephaven with a name reference.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nsession = Session()\ntable = session.time_table(period=1000000000).update(formulas=[\"Col1 = i % 2\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: A list of required Python packages needed to run Deephaven Core. Includes data processing libraries (pandas, pyarrow), communication libraries (grpcio, protobuf), testing frameworks, and database connectors.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npandas\npyarrow\ngrpcio\nsetuptools\nprotobuf\nwheel\nsphinx\nbitstring\nunittest-xml-reporting\nflightsql-dbapi\nadbc-driver-flightsql\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for PostgreSQL Database Setup\nDESCRIPTION: Command to start a SQL database using Docker Compose. The database is initialized with a single user 'admin' and password 'p@ssw0rd'.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/example-providers/sql-username-password/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Deephaven Client Application\nDESCRIPTION: Sets up a CMake project to build a 'hello_world' executable using C++17 standard and links it against the Deephaven client library. The configuration specifies the project name, C++ standard requirement, creates an executable from main.cc, and establishes the necessary library dependency.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/hello_world/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(hello_world)\n\nset(CMAKE_CXX_STANDARD 17)\n\nadd_executable(hello_world main.cc)\n\ntarget_link_libraries(hello_world deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Implementing Positive Number Filter in Python\nDESCRIPTION: Example of a theoretical filter for identifying positive numbers in string columns, demonstrating well-defined behavior for null values and non-parseable strings.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/table-api/src/main/java/io/deephaven/api/filter/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.filters import is_positive\n\n# Table with string column Foo\nt = ...\nt1 = t.where(is_positive(\"Foo\"))\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven Server with Gradle\nDESCRIPTION: Basic command to run the Deephaven server using Gradle for local development with automatic Java changes incorporation.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-11/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app-11:run\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose for Debezium-Kafka Demo\nDESCRIPTION: Command to start the Docker Compose setup for the Debezium-Kafka demo. This launches containers for MySQL, Debezium, Redpanda, Deephaven, and a load generator.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/debezium/demo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd debezium/demo\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Generating Client Certificate\nDESCRIPTION: Creates and signs a client certificate using the CA certificate and exports it to PKCS12 format.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nopenssl genpkey -algorithm RSA -out client.key \n\nopenssl req \\\n  -new \\\n  -key client.key \\\n  -subj '/CN=insert-name-here/UID=1234/emailAddress=user@deephaven.io/O=my-company' \\\n  -out client.csr\n  \nopenssl x509 \\\n  -req \\\n  -in client.csr \\\n  -CA ca.crt \\\n  -CAkey ca.key \\\n  -CAcreateserial \\\n  -days 3650 \\\n  -out client.crt\n  \nrm client.csr\n\ncat client.crt ca.crt > client.chain.crt\n\nopenssl pkcs12 -export -in client.chain.crt -inkey client.key -out client.p12 -passout pass:secret\n```\n\n----------------------------------------\n\nTITLE: Installing Targets and Configuring CMake Package for Deephaven\nDESCRIPTION: Sets up installation rules for library targets and configures CMake package files for Deephaven. This includes exporting targets, writing version files, and installing configuration files.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS dhclient dhcore dhcore_static dhclient_tests\n    EXPORT deephavenTargets\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    )\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/deephaven/deephavenConfigVersion.cmake\"\n  VERSION ${deephaven_VERSION}\n  COMPATIBILITY AnyNewerVersion\n  )\n\nexport(EXPORT deephavenTargets\n  FILE \"${CMAKE_CURRENT_BINARY_DIR}/deephaven/deephavenTargets.cmake\"\n  NAMESPACE deephaven::\n  )\nconfigure_file(cmake/deephavenConfig.cmake\n  \"${CMAKE_CURRENT_BINARY_DIR}/deephaven/deephavenConfig.cmake\"\n  COPYONLY\n  )\n\nset(ConfigPackageLocation ${CMAKE_INSTALL_LIBDIR}/cmake/deephaven)\ninstall(EXPORT deephavenTargets\n  FILE\n  deephavenTargets.cmake\n  NAMESPACE\n  deephaven::\n  DESTINATION\n  ${ConfigPackageLocation}\n  )\ninstall(\n  FILES\n  cmake/deephavenConfig.cmake\n  \"${CMAKE_CURRENT_BINARY_DIR}/deephaven/deephavenConfigVersion.cmake\"\n  DESTINATION\n  ${ConfigPackageLocation}\n  COMPONENT\n  Devel\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Server Locally\nDESCRIPTION: Commands to install the server locally and run it from the installation directory\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/netty-app/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-netty-app:installDist\n```\n\nLANGUAGE: shell\nCODE:\n```\nSTART_OPTS=\"-Ddeephaven.console.type=groovy\" ./server/netty-app/build/install/server/bin/start\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthHandlers for SQL Authentication\nDESCRIPTION: Configuration snippet to include the SQL authentication handler in the AuthHandlers configuration. This enables the use of the SQL-based username/password authentication.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/example-providers/sql-username-password/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nio.deephaven.authentication.sql.BasicSqlAuthenticationHandler\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Python Server Package for Local Development\nDESCRIPTION: Command to install the Deephaven Python server package in editable mode, including autocomplete dependencies. This allows for immediate reflection of changes when the server is restarted.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nDEEPHAVEN_VERSION=0.dev pip install -e \"py/server[autocomplete]\"\n```\n\n----------------------------------------\n\nTITLE: Running Java Client Example with SSL\nDESCRIPTION: Executes a Java client example program connecting to the server using SSL configuration.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew java-client-session-examples:installDist\n./java-client/session-examples/build/install/java-client-session-examples/bin/<program> --target dh://localhost:8443 --ssl server/dev-certs/client.json --groovy\n```\n\n----------------------------------------\n\nTITLE: Mutual TLS Configuration\nDESCRIPTION: SSL configuration for zero-trust setup requiring mutual TLS authentication.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-11/README.md#2025-04-23_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nssl.identity.type=privatekey\nssl.identity.certChainPath=server.chain.crt\nssl.identity.privateKeyPath=server.key\nssl.trust.type=certs\nssl.trust.path=ca.crt\nssl.clientAuthentication=NEEDED\n```\n\n----------------------------------------\n\nTITLE: Production-like Development Environment Setup\nDESCRIPTION: Commands to create and run a more production-like environment using the start script, which is faster for frequent server restarts without Java code changes.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app:installDist # Run after any Java changes\n./server/jetty-app/build/install/server-jetty/bin/start\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven Python Package\nDESCRIPTION: Command to build the Deephaven Python wheel package\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nDEEPHAVEN_VERSION=$(../../gradlew :printVersion -q) python3 setup.py bdist_wheel\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven Python Server via Docker\nDESCRIPTION: Command to start a Deephaven Python server using Docker without Docker Compose\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm --name deephaven -p 10000:10000 ghcr.io/deephaven/server:latest\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven C++ Client\nDESCRIPTION: CMake commands to configure and build the Deephaven C++ client with specific build parameters.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource $DHCPP/env.sh\ncd $DHSRC/deephaven-core/cpp-client/deephaven/\ncmake -S . -B build \\\n    -DCMAKE_INSTALL_LIBDIR=lib \\\n    -DCMAKE_CXX_STANDARD=17 \\\n    -DCMAKE_INSTALL_PREFIX=${DHCPP} \\\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n    -DBUILD_SHARED_LIBS=ON \\\n  && \\\nVERBOSE=1 cmake --build build --target install -- -j$NCPUS\n```\n\n----------------------------------------\n\nTITLE: Sorting Table Example\nDESCRIPTION: Shows how to sort a Deephaven table by a column\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\n\nsession = Session()\n\ntable = session.empty_table(5)\ntable = table.update([\"SortColumn = 4-i\"])\n\ntable = table.sort([\"SortColumn\"])\nsession.bind_table(name=\"my_table\", table=table)\n```\n\n----------------------------------------\n\nTITLE: Mutual TLS Configuration\nDESCRIPTION: SSL configuration for zero-trust setup requiring mutual TLS authentication\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/netty-app/README.md#2025-04-23_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nssl.identity.type=privatekey\nssl.identity.certChainPath=server.chain.crt\nssl.identity.privateKeyPath=server.key\nssl.trust.type=certs\nssl.trust.path=ca.crt\nssl.clientAuthentication=NEEDED\n```\n\n----------------------------------------\n\nTITLE: Chunk Class Template Declarations in C++\nDESCRIPTION: Defines the core Chunk abstract base class and GenericChunk template class for representing typed data buffers. These classes are used for data transfer within the Deephaven library, particularly for column operations.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/doc/chunks.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace deephaven::dhcore::chunk {\n  class Chunk;\n  template<typename T> class GenericChunk;\n  typedef GenericChunk<int8_t> Int8Chunk;\n  typedef GenericChunk<int16_t> Int16Chunk;\n  typedef GenericChunk<int32_t> Int32Chunk;\n  typedef GenericChunk<int64_t> Int64Chunk;\n  typedef GenericChunk<float> FloatChunk;\n  typedef GenericChunk<double> DoubleChunk;\n  typedef GenericChunk<bool> BooleanChunk;\n  typedef GenericChunk<std::string> StringChunk;\n  typedef GenericChunk<DateTime> DateTimeChunk;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Deephaven Client Package\nDESCRIPTION: Go code showing how to import the Deephaven client package in a Go application.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/go/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/deephaven/deephaven-core/go/pkg/client\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Deephaven CSV Reader\nDESCRIPTION: Sets up a CMake build configuration for a C++ executable that reads CSV files. Specifies C++17 as the language standard and links against the Deephaven client library.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/read_csv/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(read_csv)\n\nset(CMAKE_CXX_STANDARD 17)\n\nadd_executable(read_csv main.cc)\n\ntarget_link_libraries(read_csv deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Using Query Objects\nDESCRIPTION: Demonstrates the usage of Query objects for optimized table operations, comparing immediate execution vs deferred execution.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydeephaven import Session\nsession = Session()\ntable = session.empty_table(10)\n\n# executed immediately\ntable1= table.update([\"MyColumn = i\"]).sort([\"MyColumn\"]).where([\"MyColumn > 5\"]);\n\n# create Query Object (execution is deferred until the \"exec\" statement)\nquery_obj = session.query(table)\n    .update([\"MyColumn = i\"])\n    .sort([\"MyColumn\"])\n    .where([\"MyColumn > 5\"]);\n\n# Transmit the QueryObject to the server and execute it\ntable2 = query_obj.exec();\n\nsession.bind_table(name=\"my_table1\", table=table1)\nsession.bind_table(name=\"my_table2\", table=table2)\n```\n\n----------------------------------------\n\nTITLE: Outbound SSL Configuration\nDESCRIPTION: Separate SSL configuration for outbound Deephaven-to-Deephaven connections.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-11/README.md#2025-04-23_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\noutbound.ssl.identity.type=privatekey\noutbound.ssl.identity.certChainPath=outbound-identity.chain.crt\noutbound.ssl.identity.privateKeyPath=outbound-identity.key\noutbound.ssl.trust.type=certs\noutbound.ssl.trust.path=outbound-ca.crt\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Dockerfile for Plugin Dependencies\nDESCRIPTION: Dockerfile configuration for installing server-side plugin dependencies in Deephaven server using pip.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/web-plugin-packager/README.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/deephaven/server:latest\n\n# pip install any of the plugins required on the server\nRUN pip install deephaven-plugin-matplotlib\n```\n\n----------------------------------------\n\nTITLE: Adding Deephaven Client Dependency\nDESCRIPTION: Command to add the Deephaven client as a dependency to a Go project.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/go/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/deephaven/deephaven-core/go/pkg/client\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven Groovy Server via Docker\nDESCRIPTION: Command to start a Deephaven Groovy server using Docker without Docker Compose\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm name deephaven -p 10000:10000 ghcr.io/deephaven/server-slim:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Arrow Flight Table Reader\nDESCRIPTION: Sets up a CMake project for building an executable that reads tables using Arrow Flight. It specifies C++17 standard, creates the executable 'read_table_with_arrow_flight', and links it with the Deephaven client library.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/read_table_with_arrow_flight/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(read_table_with_arrow_flight)\n\nset(CMAKE_CXX_STANDARD 17)\n\nadd_executable(read_table_with_arrow_flight main.cc)\n\ntarget_link_libraries(read_table_with_arrow_flight deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven Barrage Examples Locally\nDESCRIPTION: This command demonstrates how to run a specific program from the built Deephaven barrage examples. Replace <program> with the desired example name.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/barrage-examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava-client/barrage-examples/build/install/java-client-barrage-examples/bin/<program> --help\n```\n\n----------------------------------------\n\nTITLE: Outbound SSL Configuration\nDESCRIPTION: SSL configuration for outbound Deephaven-to-Deephaven connections\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/netty-app/README.md#2025-04-23_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\noutbound.ssl.identity.type=privatekey\noutbound.ssl.identity.certChainPath=outbound-identity.chain.crt\noutbound.ssl.identity.privateKeyPath=outbound-identity.key\noutbound.ssl.trust.type=certs\noutbound.ssl.trust.path=outbound-ca.crt\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Compose Configuration\nDESCRIPTION: YAML configuration to update docker-compose.yml for using custom web and server builds with plugins.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/web-plugin-packager/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    # Comment out the image name\n    # image: ghcr.io/deephaven/server:${VERSION:-latest}\n    # Build from your local Dockerfile you just created\n    build: ./server\n    \n    ...\n    \n  web:\n    # Comment out the image name\n    # image: ghcr.io/deephaven/web:${VERSION:-latest}\n    # Build from your local Dockerfile you just created\n    build: ./web\n```\n\n----------------------------------------\n\nTITLE: Running Example Applications Commands\nDESCRIPTION: Commands to run different example applications that demonstrate various Deephaven client functionalities. Examples require a running Deephaven server.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/go/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v ./pkg/client/example_table_ops_test.go\ngo test -v ./pkg/client/example_fetch_table_test.go\ngo test -v ./pkg/client/example_import_table_test.go\ngo test -v ./pkg/client/example_input_table_test.go\ngo test -v ./pkg/client/example_run_script_test.go\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Deephaven Table Maker Application in C++\nDESCRIPTION: Defines a CMake project that builds a C++ executable for creating tables with Deephaven's table maker. Sets the C++ standard to 17, adds the main executable, and links it with the Deephaven client library.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/create_table_with_table_maker/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(create_table_with_table_maker)\n\nset(CMAKE_CXX_STANDARD 17)\n\nadd_executable(create_table_with_table_maker main.cc)\n\ntarget_link_libraries(create_table_with_table_maker deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Converting PyArrow Tables\nDESCRIPTION: Shows conversion between PyArrow tables and Deephaven tables.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/examples.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pyarrow as pa\nfrom pydeephaven import Session\nsession = Session()\narr = pa.array([4,5,6], type=pa.int32())\npa_table = pa.Table.from_arrays([arr], names=[\"Integers\"])\ntable = session.import_table(pa_table)\nsession.bind_table(name=\"my_table\", table=table)\n#Convert the Deephaven table back to a pyarrow table\npa_table = table.to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Simple SSL Configuration\nDESCRIPTION: Basic SSL setup using private key and certificate chain\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/netty-app/README.md#2025-04-23_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nssl.identity.type=privatekey\nssl.identity.certChainPath=server.chain.crt\nssl.identity.privateKeyPath=server.key\n```\n\n----------------------------------------\n\nTITLE: Referencing TableHandle Class in C++\nDESCRIPTION: This snippet demonstrates how to reference the TableHandle class from the Deephaven C++ client library. It shows the fully qualified name of the class within the deephaven::client namespace.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ndeephaven::client::TableHandle\n```\n\n----------------------------------------\n\nTITLE: Initializing Iceberg Catalog in Java\nDESCRIPTION: Creates an Iceberg catalog instance using the DbResource utility for SQLite integration.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/iceberg/TESTING.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.iceberg.catalog.Catalog;\nimport io.deephaven.iceberg.sqlite.DbResource;\n\nCatalog catalog = DbResource.openCatalog(\"<catalogName>\");\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Deployment\nDESCRIPTION: These commands download the Docker Compose configuration, pull the required images, and start the Deephaven environment in detached mode. This setup includes Deephaven, Python scripting, and various data science libraries like NLTK, PyTorch, SciKit-Learn, and TensorFlow.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python-examples/All-AI/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python/TensorFlow/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Deephaven Core\nDESCRIPTION: Sets up the CMake project for Deephaven Core (dhcore), specifying the minimum CMake version and C++ standard. It also includes necessary CMake modules and finds required packages.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/dhcore/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(dhcore)\n\nset(CMAKE_CXX_STANDARD 17)\n\n# for CMAKE_INSTALL_{dir}\ninclude(GNUInstallDirs)\n\nfind_package(Immer CONFIG REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Outbound SSL Configuration\nDESCRIPTION: Separate SSL configuration for outbound Deephaven-to-Deephaven connections.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app/README.md#2025-04-23_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\noutbound.ssl.identity.type=privatekey\noutbound.ssl.identity.certChainPath=outbound-identity.chain.crt\noutbound.ssl.identity.privateKeyPath=outbound-identity.key\noutbound.ssl.trust.type=certs\noutbound.ssl.trust.path=outbound-ca.crt\n```\n\n----------------------------------------\n\nTITLE: Intranet SSL Configuration\nDESCRIPTION: SSL configuration for intranet setup with internal CA trust certificate\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/netty-app/README.md#2025-04-23_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nssl.identity.type=privatekey\nssl.identity.certChainPath=server.chain.crt\nssl.identity.privateKeyPath=server.key\nssl.trust.type=certs\nssl.trust.path=ca.crt\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Python Packages from Wheel Files\nDESCRIPTION: Commands to install the Deephaven Python server and embedded server packages from wheel files. This is used for testing in a production-like environment.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install --force py/server/build/wheel/deephaven_core-<version>-py3-none-any.whl\n\n# If using embedded-server\n# You can combine as pip install core.whl server.whl if you need both\npip install --force py/embedded-server/build/wheel/deephaven_server-<version>-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Installing pydeephaven-ticking via pip\nDESCRIPTION: Command to install the pydeephaven-ticking package using pip package manager.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client-ticking/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install pydeephaven-ticking\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Deployment\nDESCRIPTION: This code snippet demonstrates how to download the docker-compose.yml file, pull the necessary Docker images, and start the Deephaven deployment in detached mode using Docker Compose.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python-redpanda/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python-redpanda/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake for Deephaven Core Project\nDESCRIPTION: This CMake snippet adds multiple subdirectories to the build process. Each subdirectory likely contains its own CMakeLists.txt file with specific build instructions for that component or example.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(table_cleanup)\nadd_subdirectory(concurrent_client)\nadd_subdirectory(create_table_with_arrow_flight)\nadd_subdirectory(create_table_with_table_maker)\nadd_subdirectory(demos)\nadd_subdirectory(hello_world)\nadd_subdirectory(read_csv)\nadd_subdirectory(read_table_with_arrow_flight)\n```\n\n----------------------------------------\n\nTITLE: Specifying Environment Requirements for Parquet Data Generation (e0) - Requirements\nDESCRIPTION: This requirements block lists the Python package dependencies needed to generate the test data for 'src/test/resources/e0', ensuring consistent environments for reproducible Parquet file creation using Pandas and its dependencies. Included are specific versions of numpy, pandas, pyarrow, and supporting packages for proper timezone and date handling. This setup is required to avoid incompatibility issues and to allow support of particular Parquet functionality.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/parquet/table/README.md#2025-04-23_snippet_1\n\nLANGUAGE: requirements\nCODE:\n```\n# for src/test/resources/e0\\nnumpy==1.24.2\\npandas==1.5.3\\npyarrow==5.0.0\\npython-dateutil==2.8.2\\npytz==2022.7.1\\nsix==1.16.0\n```\n\n----------------------------------------\n\nTITLE: Generating Server Certificate\nDESCRIPTION: Creates and signs a server certificate using the CA certificate.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nopenssl genpkey -algorithm RSA -out server.key \n\nopenssl req \\\n  -new \\\n  -key server.key \\\n  -subj '/CN=localhost' \\\n  -out server.csr\n  \nopenssl x509 \\\n  -req \\\n  -in server.csr \\\n  -CA ca.crt \\\n  -CAkey ca.key \\\n  -CAcreateserial \\\n  -days 3650 \\\n  -out server.crt\n\nrm server.csr\n\ncat server.crt ca.crt > server.chain.crt\n```\n\n----------------------------------------\n\nTITLE: Deephaven Properties Configuration\nDESCRIPTION: Example configuration file for enabling anonymous authentication, disabling HTTP1, and using TLS on port 8443.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-11/README.md#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nincludefiles=dh-defaults.prop\n\nhttp.port=8443\nhttp.http1=false\n\nssl.identity.type=privatekey\nssl.identity.certChainPath=/deephaven-core/server/dev-certs/server.chain.crt\nssl.identity.privateKeyPath=/deephaven-core/server/dev-certs/server.key\n\nAuthHandlers=io.deephaven.auth.AnonymousAuthenticationHandler\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven Python Unit Tests\nDESCRIPTION: Gradle command to run the Python unit tests for Deephaven. This must be executed from the root directory of the cloned repository.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n./gradlew integrations:test-py-deephaven\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven with Docker Compose\nDESCRIPTION: This snippet shows the commands to download the Docker Compose configuration file and start the Deephaven environment. It includes steps to fetch the compose file, pull the necessary Docker images, and launch the containers in detached mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python/NLTK/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python/NLTK/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Environment\nDESCRIPTION: This code snippet demonstrates the commands to download the Docker Compose configuration file, pull the necessary Docker images, and start the Deephaven environment in detached mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python/SciKit-Learn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python/SciKit-Learn/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Intranet SSL Configuration\nDESCRIPTION: SSL configuration for intranet setup with internal CA and trust certificate.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app/README.md#2025-04-23_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nssl.identity.type=privatekey\nssl.identity.certChainPath=server.chain.crt\nssl.identity.privateKeyPath=server.key\nssl.trust.type=certs\nssl.trust.path=ca.crt\n```\n\n----------------------------------------\n\nTITLE: Accessing Deephaven Web Console\nDESCRIPTION: URL to access the Deephaven web console after starting the Docker Compose setup. The console will be in Python mode by default.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/debezium/demo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:10000/ide\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Server Certificate\nDESCRIPTION: Creates a self-signed certificate for server identification using OpenSSL with a 1024-bit RSA key, valid for 10 years.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl req -x509 -nodes -subj '/CN=localhost' -newkey rsa:1024 -keyout server.key -out server.crt -sha256 -days 3650\n```\n\n----------------------------------------\n\nTITLE: Configuring PyIceberg with SQLite Catalog\nDESCRIPTION: Initializes a SQLite-based catalog in PyIceberg with warehouse configuration.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/iceberg/TESTING.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pyiceberg.catalog.sql import SqlCatalog\n\ncatalog = SqlCatalog(\n    \"<catalogName>\",\n    **{\n        \"uri\": f\"sqlite:///dh-iceberg-test.db\",\n        \"warehouse\": f\"catalogs/<catalogName>\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Server Shutdown Command\nDESCRIPTION: Command to gracefully shut down the Deephaven server using SIGINT signal.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkill -2 <pid>\n```\n\n----------------------------------------\n\nTITLE: Installing R Package Dependencies\nDESCRIPTION: R command to install required R packages for the Deephaven client\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(c('Rcpp', 'arrow', 'R6', 'dplyr', 'xml2', 'rmarkdown', 'knitr'))\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Environment\nDESCRIPTION: Commands to download the Docker Compose configuration and start the Deephaven environment. Downloads the compose file from the main repository, pulls required images, and starts the containers in detached mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python/TensorFlow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python/TensorFlow/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Mutual TLS Configuration\nDESCRIPTION: Configuration for mutual TLS (mTLS) with client certificate authentication.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app/README.md#2025-04-23_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nssl.identity.type=privatekey\nssl.identity.certChainPath=server.chain.crt\nssl.identity.privateKeyPath=server.key\nssl.trust.type=certs\nssl.trust.path=ca.crt\nssl.clientAuthentication=NEEDED\n```\n\n----------------------------------------\n\nTITLE: Python Requirements Specification\nDESCRIPTION: Defines exact versions of required Python packages including database drivers (ADBC), numerical computing libraries (NumPy, Numba), data processing tools (Pandas, PyArrow), and utility packages. Contains platform-specific requirement for connectorx on x86_64 architecture.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/server-jetty/src/main/server-jetty/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nadbc-driver-manager==1.4.0\nadbc-driver-postgresql==1.4.0\nconnectorx==0.4.2; platform.machine == 'x86_64'\ndeephaven-plugin==0.6.0\ndocstring_parser==0.16\nimportlib_resources==6.5.2\njava-utilities==0.3.0\njedi==0.19.1\njpy==1.1.0\nllvmlite==0.44.0\nnumba==0.61.0\nnumpy==2.1.3\npandas==2.2.3\nparso==0.8.4\npyarrow==19.0.1\npython-dateutil==2.9.0.post0\npytz==2025.1\nsix==1.17.0\ntyping_extensions==4.12.2\ntzdata==2025.1\n```\n\n----------------------------------------\n\nTITLE: SSL-Enabled Server Launch\nDESCRIPTION: Command to start an SSL-enabled Deephaven server on port 8443 with development certificates.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-11/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app-11:run -Pgroovy -PdevCerts\n```\n\n----------------------------------------\n\nTITLE: Simple SSL Configuration\nDESCRIPTION: Basic SSL configuration for server with private key and certificate chain.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app/README.md#2025-04-23_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nssl.identity.type=privatekey\nssl.identity.certChainPath=server.chain.crt\nssl.identity.privateKeyPath=server.key\n```\n\n----------------------------------------\n\nTITLE: Installing R Test Dependencies\nDESCRIPTION: Installs required R packages (testthat, lubridate, zoo) for running unit tests.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(c('testthat', 'lubridate', 'zoo'))\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Deployment\nDESCRIPTION: This bash script downloads the Docker Compose configuration file, pulls the necessary images, and starts the Deephaven deployment in detached mode. It requires Docker and Docker Compose to be installed on the system.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python-examples/SciKit-Learn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python-examples/SciKit-Learn/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Deployment\nDESCRIPTION: Commands to download the Docker Compose configuration file from the Deephaven repository and start the containers. The process involves downloading the compose file, pulling the required images, and launching the containers in detached mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python-examples/base/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python-examples/base/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Simple SSL Configuration\nDESCRIPTION: Basic SSL configuration with private key and certificate chain setup.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-11/README.md#2025-04-23_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nssl.identity.type=privatekey\nssl.identity.certChainPath=server.chain.crt\nssl.identity.privateKeyPath=server.key\n```\n\n----------------------------------------\n\nTITLE: Demonstrating QueryTable Cleanup in C++ with Deephaven Client\nDESCRIPTION: This code snippet illustrates explicit QueryTable cleanup using destructors and RAII in Deephaven Core. It shows how table resources are managed and released through the use of scope and copy operations.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/resource_mgmt.rst#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n#include \"deephaven/client/highlevel/client.h\"\n\nusing deephaven::client::highlevel::NumCol;\nusing deephaven::client::highlevel::Client;\nusing deephaven::client::highlevel::TableHandle;\nusing deephaven::client::highlevel::TableHandleManager;\n\n// This example shows explicit QueryTable cleanup using destructors/RAII.\nvoid doit(const TableHandleManager &manager) {\n  auto table = manager.emptyTable(10).update(\"X = ii % 2\", \"Y = ii\");\n  auto [x, y] = table.getCols<NumCol, NumCol>(\"X\", \"Y\");\n  // This example will dispose each table individually.\n\n  auto t1 = table.where(y < 5);\n  std::cerr << \"This is t1:\\n\" << t1.stream(true) << '\\n';\n\n  {\n    TableHandle t2Copy;\n    {\n\tauto t2 = t1.countBy(x);\n\tstd::cerr << \"This is t2:\\n\" << t2.stream(true) << '\\n';\n\n\tt2Copy = t2;\n\n\t// The variable 't2' will be destructed here, but the server resource will stay alive\n\t// because 't2Copy' is still live.\n    }\n    std::cerr << \"t2Copy still alive:\\n\" << t2Copy.stream(true) << '\\n';\n\n    // t2Copy will be destructed here. As it is the last owner of the server resource,\n    // the server resource will be released here.\n  }\n\n  // t1 and the TableHandleManger will be destructed here.\n}\n\nint main() {\n  const char *server = \"localhost:10000\";\n  auto client = Client::connect(server);\n  auto manager = client.getManager();\n\n  try {\n    doit(manager);\n  } catch (const std::runtime_error &e) {\n    std::cerr << \"Caught exception: \" << e.what() << '\\n';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Automated Performance Test\nDESCRIPTION: Example command to run an automated performance test for Deephaven with specified parameters. This script starts containers, loads demo code, sets pageview rate, samples CPU and memory utilization, and stops containers.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/debezium/perf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./run_experiment.sh dh 50000 20 30 1.0\n```\n\n----------------------------------------\n\nTITLE: Running Custom Deephaven Jetty Server with Groovy\nDESCRIPTION: Gradle command to run a custom Jetty server application with Groovy support enabled. Uses a specific subproject 'server-jetty-app-custom-11' with the Groovy parameter flag.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-custom-11/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app-custom-11:run -Pgroovy\n```\n\n----------------------------------------\n\nTITLE: Running Local Session Examples\nDESCRIPTION: Command to run installed session example programs with help flag, where <program> should be replaced with the specific example name.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/session-examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava-client/session-examples/build/install/java-client-session-examples/bin/<program> --help\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Environment\nDESCRIPTION: This bash script downloads the Docker Compose configuration file, pulls the required images, and starts the Deephaven environment in detached mode. It requires Docker and Docker Compose to be installed on the system.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python-examples/NLTK/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python-examples/NLTK/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Deployment\nDESCRIPTION: These commands download the Docker Compose configuration, pull the required images, and start the Deephaven environment in detached mode. The configuration includes Deephaven, Python scripting, TensorFlow, and example data.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python-examples/TensorFlow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python-examples/TensorFlow/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Intranet SSL Configuration\nDESCRIPTION: SSL configuration for intranet setup with internal CA and trust certificate.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-11/README.md#2025-04-23_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nssl.identity.type=privatekey\nssl.identity.certChainPath=server.chain.crt\nssl.identity.privateKeyPath=server.key\nssl.trust.type=certs\nssl.trust.path=ca.crt\n```\n\n----------------------------------------\n\nTITLE: Column Binding in Deephaven C++\nDESCRIPTION: Shows how to bind single and multiple columns from a table with type specification.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\nauto col = table.getXXX(name);\n\nauto (importDate, ticker, close) =\n  table.getCols<StrCol, StrCol, NumCol>(\"ImportDate\", \"Ticker\", \"Close\");\n```\n\n----------------------------------------\n\nTITLE: Running Incremental Sort Cycles Benchmark for Deephaven Engine Table\nDESCRIPTION: Specific command to run the Incremental Sort Cycles benchmark with a parameter setting. The <version> placeholder should be replaced with the actual version number.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/engine/table/src/jmh/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar engine/table/build/libs/deephaven-engine-table-<version>-jmh.jar \\\n    io.deephaven.engine.bench.IncrementalSortCyclesBenchmark \\\n    -p params=REVERSE_START_0_CYCLE_1m \n```\n\n----------------------------------------\n\nTITLE: Python Environment Setup for PyIceberg\nDESCRIPTION: Shell commands for setting up a Python virtual environment and installing PyIceberg dependencies.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/iceberg/TESTING.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd extensions/iceberg/src/test/resources/io/deephaven/iceberg/sqlite/db_resource\n\n$ python3.10 -m venv /tmp/iceberg\n\n$ source /tmp/iceberg/bin/activate\n\n$ pip install --only-binary=\":all:\" \"pyiceberg[sql-sqlite, pyarrow]\"\n\n$ pip freeze\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven Barrage Examples Locally\nDESCRIPTION: This command builds the Deephaven barrage examples locally using Gradle. It produces the installed distribution in the specified directory.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/barrage-examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew java-client-barrage-examples:installDist\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven from Source (Python)\nDESCRIPTION: Commands to build and install Deephaven from source code using Python\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/deephaven/deephaven-core.git\ncd deephaven-core\npython3 -m venv ~/my-dh-venv\nsource ~/my-dh-venv/bin/activate\n./gradlew py-server:assemble\npip install 'py/server/build/wheel/deephaven_core-<version>-py3-non-any.whl[autocomplete]'\n./gradlew server-jetty-app:run\n```\n\n----------------------------------------\n\nTITLE: Running Server with Groovy Console\nDESCRIPTION: Command to start the server with Groovy console configuration using the distribution script\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/netty-app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSTART_OPTS=\"-Ddeephaven.console.type=groovy\" bin/start\n```\n\n----------------------------------------\n\nTITLE: Fluent Expression Combinator Example in C++\nDESCRIPTION: Shows how to create combinator functions that work with fluent expressions.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nNumericExpression add5(NumericExpression e)\n{\n    return e + 5;\n}\n\n// Equivalent Deephaven Code Studio expression is \"Result = (Close * Volume) + 5\"\nauto t1 = t0.select(add5(close * volume).as(\"Result\"));\n```\n\n----------------------------------------\n\nTITLE: Building Distribution Packages\nDESCRIPTION: Gradle command to build distribution packages (zip and tar) for session examples, where <version> represents the package version number.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/session-examples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew client-session-examples:build\n```\n\n----------------------------------------\n\nTITLE: Building and Running JMH Benchmarks for Deephaven Engine Table\nDESCRIPTION: Commands to build the JMH jar file for the engine-table module and run a benchmark. The <version> placeholder should be replaced with the actual version number, and <benchmark> with the desired benchmark class.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/engine/table/src/jmh/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew engine-table:jmhJar\njava -jar engine/table/build/libs/deephaven-engine-table-<version>-jmh.jar <benchmark>\n```\n\n----------------------------------------\n\nTITLE: Creating Release Branch\nDESCRIPTION: Series of commands to create a new release branch from upstream/main, including version verification.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/RELEASE.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git fetch upstream\n$ git checkout upstream/main\n$ ./gradlew printVersion -PdeephavenBaseQualifier= -q\n$ git checkout -b release/vX.Y.Z\n$ git commit --allow-empty -m \"Cut for X.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven from Source (Groovy)\nDESCRIPTION: Commands to build and run Deephaven from source code using Groovy\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/deephaven/deephaven-core.git\ncd deephaven-core\n./gradlew server-jetty-app:run -Pgroovy\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests Command\nDESCRIPTION: Command to run all tests in the project. Tests expect a Deephaven server running on localhost:10000 by default, configurable via DH_HOST and DH_PORT environment variables.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/go/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Building and Installing - CMake\nDESCRIPTION: Builds and installs Deephaven Core with RelWithDebInfo configuration and parallel compilation.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ncmake --build build --config RelWithDebInfo --target install -- /p:CL_MPCount=16 -m:1\n```\n\n----------------------------------------\n\nTITLE: Building Local Session Examples\nDESCRIPTION: Gradle command to build and install session examples locally, producing output in java-client-session-examples build directory.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/session-examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew java-client-session-examples:installDist\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to run the unittest discovery for testing the pydeephaven-ticking library.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client-ticking/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m unittest discover tests\n```\n\n----------------------------------------\n\nTITLE: Running Custom Deephaven Jetty Server with Groovy\nDESCRIPTION: Gradle command to run a custom Jetty server application with Groovy support enabled using the server-jetty-app-custom module.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-custom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app-custom:run -Pgroovy\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Branch\nDESCRIPTION: Commands to review and push the release branch to upstream repository.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/RELEASE.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ git show release/vX.Y.Z\n$ git push -u upstream release/vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Running Flight Examples Locally\nDESCRIPTION: This command demonstrates how to run a specific program from the Flight examples project. It includes a placeholder for the program name and shows how to access the help information.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/flight-examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava-client/flight-examples/build/install/java-client-flight-examples/bin/<program> --help\n```\n\n----------------------------------------\n\nTITLE: Running R Unit Tests\nDESCRIPTION: Executes unit tests for the rdeephaven package using testthat framework.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_8\n\nLANGUAGE: r\nCODE:\n```\nlibrary(testthat)\ntest_package(\"rdeephaven\")\n```\n\n----------------------------------------\n\nTITLE: Building Netty Server Package\nDESCRIPTION: Command to build the Netty server distribution packages, producing tar and zip artifacts\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/netty-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-netty-app:build\n```\n\n----------------------------------------\n\nTITLE: Building Flight Examples Locally\nDESCRIPTION: This command builds the Flight examples project locally using Gradle. It installs the distribution in the specified directory.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/flight-examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew java-client-flight-examples:installDist\n```\n\n----------------------------------------\n\nTITLE: Tagging Go Client Release\nDESCRIPTION: Creates and pushes a Git tag specifically for the Deephaven Go Client release.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/RELEASE.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ git tag -a -m \"[Release] Deephaven Go Client X.Y.Z\" go/vX.Y.Z release/vX.Y.Z \n$ git show go/vX.Y.Z\n$ git push upstream go/vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven Barrage Examples for Distribution\nDESCRIPTION: This command builds the Deephaven barrage examples for distribution using Gradle. It produces zip and tar distribution files in the specified directory.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/barrage-examples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew java-client-barrage-examples:build\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM with Syft\nDESCRIPTION: Creates a Software Bill of Materials (SBOM) for server-jetty release artifacts using Syft tool and converts to cyclonedx format for comparison.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/RELEASE.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsyft server-jetty-X.Y.Z.tar -o json > server-jetty-X.Y.Z.tar.syft.json\n```\n\n----------------------------------------\n\nTITLE: Single-step Build and Run\nDESCRIPTION: Command to build and run the server in a single step using Gradle\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/netty-app/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-netty-app:run -Pgroovy\n```\n\n----------------------------------------\n\nTITLE: Building Flight Examples Distribution\nDESCRIPTION: This command builds the Flight examples project and produces distribution packages in zip and tar formats. The version number is included in the package names.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/flight-examples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew java-client-flight-examples:build\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies Requirements File\nDESCRIPTION: Lists required Python packages and their versions for the deephaven-core project. Includes data processing libraries like pandas and numpy, along with specialized drivers for database connectivity and Python development tools.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/server/src/main/server-netty/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadbc-driver-manager==1.4.0\nadbc-driver-postgresql==1.4.0\nconnectorx==0.4.2; platform.machine == 'x86_64'\ndeephaven-plugin==0.6.0\ndocstring_parser==0.16\nimportlib_resources==6.5.2\njava-utilities==0.3.0\njedi==0.19.1\njpy==1.1.0\nllvmlite==0.44.0\nnumba==0.61.0\nnumpy==2.1.3\npandas==2.2.3\nparso==0.8.4\npyarrow==19.0.1\npython-dateutil==2.9.0.post0\npytz==2025.1\nsix==1.17.0\ntyping_extensions==4.12.2\ntzdata==2025.1\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven Server with OIDC Enabled\nDESCRIPTION: Demonstrates how to run the Deephaven server with OIDC authentication enabled using Gradle. The -Poidc flag enables OIDC functionality.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/example-providers/oidc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n:server-jetty-app:run -Poidc\n```\n\n----------------------------------------\n\nTITLE: Windows Build Commands for pydeephaven-ticking\nDESCRIPTION: Commands to build the pydeephaven-ticking package from source on Windows, including cleaning previous builds and version setup.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client-ticking/README.md#2025-04-23_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nrmdir build dist /s /q\nrem replace the value below to the version you are building\nset DEEPHAVEN_VERSION=0.38.0-SNAPSHOT\npython setup.py build_ext -i\n```\n\n----------------------------------------\n\nTITLE: Installing VCPKG - Windows Batch\nDESCRIPTION: Bootstraps the vcpkg package manager.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_8\n\nLANGUAGE: batch\nCODE:\n```\ncd /d %DHSRC%\\vcpkg\n.\\bootstrap-vcpkg.bat\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven Python Server and Embedded Server\nDESCRIPTION: Gradle commands to build the Deephaven Python server and embedded server packages. This is necessary for a more production-like local environment.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew :py-server:assemble\n\n# If using embedded-server\n# You can run both tasks w/ ./gradlew :task1 :task2 if you need both\n./gradlew :py-embedded-server:assemble\n```\n\n----------------------------------------\n\nTITLE: Linux Build Commands for pydeephaven-ticking\nDESCRIPTION: Commands to build the pydeephaven-ticking package from source on Linux, including cleaning previous builds and setting up environment variables.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client-ticking/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf build dist\nDEEPHAVEN_VERSION=$(../../gradlew :printVersion -q) CPPFLAGS=\"-I${DHCPP}/include\" LDFLAGS=\"-L${DHCPP}/lib\" python3 setup.py build_ext -i\n```\n\n----------------------------------------\n\nTITLE: Specifying Environment Requirements for Parquet Data Generation (e1) - Requirements\nDESCRIPTION: This requirements snippet captures the dependencies for generating Parquet files for 'src/test/resources/e1', using pandas with pyarrow version 11.0.0 and fixed versions of essential helper libraries. The specified versions ensure compatibility with features and compression codecs used in the test data generation. These must be installed in the Python environment to allow successful execution of the data creation script.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/parquet/table/README.md#2025-04-23_snippet_2\n\nLANGUAGE: requirements\nCODE:\n```\n# for src/test/resources/e1\\nnumpy==1.24.2\\npandas==1.5.3\\npyarrow==11.0.0\\npython-dateutil==2.8.2\\npytz==2022.7.1\\nsix==1.16.0\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven Java Client Examples\nDESCRIPTION: Command to build the Deephaven Java client examples required for automated testing. Run this command from the top-level directory of the git clone.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/debezium/perf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew java-client-session-examples:installDist\n```\n\n----------------------------------------\n\nTITLE: Cloning Deephaven Core Repository\nDESCRIPTION: Git command to clone the Deephaven Core source code repository.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $DHSRC\ngit clone https://github.com/deephaven/deephaven-core.git\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven Python Server\nDESCRIPTION: Gradle command to build the Python embedded server module from the repository root directory.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/embedded-server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :py-embedded-server:assemble\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Deephaven Directories\nDESCRIPTION: Sets environment variables for Deephaven source and install directories. These variables are used in subsequent build and run steps.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/csharp/ExcelAddIn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset DHSRC=%HOMEDRIVE%%HOMEPATH%\\dhsrc\nset DHINSTALL=%HOMEDRIVE%%HOMEPATH%\\dhinstall\n```\n\n----------------------------------------\n\nTITLE: Extended Parquet Data Generation Requirements (e2) Including Fastparquet and Cramjam - Requirements\nDESCRIPTION: This requirements file targets 'src/test/resources/e2' and expands dependency coverage by including fastparquet, cramjam, and fsspec for alternative Parquet and compression support, supplementing the standard pandas and numpy stack. The additional dependencies enable extra compression codecs and file system implementations, ensuring the test data can be generated and read across varied configurations.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/parquet/table/README.md#2025-04-23_snippet_3\n\nLANGUAGE: requirements\nCODE:\n```\n# for src/test/resources/e2\\ncramjam==2.6.2\\nfastparquet==2023.2.0\\nfsspec==2023.3.0\\nnumpy==1.24.2\\npackaging==23.0\\npandas==1.5.3\\npython-dateutil==2.8.2\\npytz==2022.7.1\\nsix==1.16.0\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Environment\nDESCRIPTION: Commands to download the Docker Compose configuration file and start the Deephaven environment. The sequence includes downloading the compose file from GitHub, pulling the required images, and launching the containers in detached mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/groovy-examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/groovy-examples/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Building QST Graphviz Distribution\nDESCRIPTION: Gradle command to build the QST Graphviz module, generating distribution artifacts in tar and zip formats.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/qst/graphviz/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew qst-graphviz:build\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared and Static Library Targets\nDESCRIPTION: Creates both shared and static library targets for Deephaven Core using the same source files. It also sets up an alias target for easier integration in other projects.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/dhcore/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dhcore SHARED ${ALL_FILES})\nadd_library(dhcore_static STATIC ${ALL_FILES})\n\n# This is so deephaven::dhcore works both when using the installed CMake config\n# and when using this project as a CMake subdirectory of your own project.\nadd_library(deephaven::dhcore ALIAS dhcore)\n\nif (WIN32)\n  set_property(TARGET dhcore PROPERTY WINDOWS_EXPORT_ALL_SYMBOLS ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Python Package\nDESCRIPTION: pip command to install the Deephaven server wheel package.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/embedded-server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install py/embedded-server/build/wheel/deephaven_server-0.12.0-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Installing Fedora Build Dependencies\nDESCRIPTION: Commands to install required build tools and dependencies on Fedora Linux.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndnf -y groupinstall 'Development Tools'\ndnf -y install curl cmake gcc-c++ openssl-devel libcurl-devel\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Operations Example\nDESCRIPTION: SQL commands demonstrating the structure and content of the Iceberg tables in SQLite.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/iceberg/TESTING.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE iceberg_tables (\n        catalog_name VARCHAR(255) NOT NULL, \n        table_namespace VARCHAR(255) NOT NULL, \n        table_name VARCHAR(255) NOT NULL, \n        metadata_location VARCHAR(1000), \n        previous_metadata_location VARCHAR(1000), \n        PRIMARY KEY (catalog_name, table_namespace, table_name)\n);\nINSERT INTO iceberg_tables VALUES('pyiceberg-1','dh-default','cities','catalogs/pyiceberg-1/dh-default.db/cities/metadata/00003-68091f71-d3c5-42bb-8161-e2e187dece14.metadata.json','catalogs/pyiceberg-1/dh-default.db/cities/metadata/00002-106b37f8-8818-439d-87c5-3cae608d1972.metadata.json');\nCREATE TABLE iceberg_namespace_properties (\n        catalog_name VARCHAR(255) NOT NULL, \n        namespace VARCHAR(255) NOT NULL, \n        property_key VARCHAR(255) NOT NULL, \n        property_value VARCHAR(1000) NOT NULL, \n        PRIMARY KEY (catalog_name, namespace, property_key)\n);\nINSERT INTO iceberg_namespace_properties VALUES('pyiceberg-1','dh-default','exists','true');\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Environment\nDESCRIPTION: Commands to download the Docker Compose configuration file and start the Deephaven environment. Downloads the compose file from the main branch of deephaven-core repository, pulls the required images, and starts the containers in detached mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/groovy-examples-redpanda/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/groovy-examples-redpanda/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Environment\nDESCRIPTION: Command sequence to download the Docker Compose configuration and launch the Deephaven environment. Downloads the compose file from GitHub, pulls required images, and starts the containers in detached mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python-examples-redpanda/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python-examples-redpanda/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running File Logger Example\nDESCRIPTION: Executes the file-based logging example module using Gradle in quiet mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/log-factory/examples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew -q log-example-file:run\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Demo Project with Deephaven Client Dependencies\nDESCRIPTION: Sets up CMake project configuration for demo executables, specifying C++17 standard and linking each executable with the Deephaven client library. Creates multiple demo targets from a list of main programs.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/demos/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(demos)\n\nset(CMAKE_CXX_STANDARD 17)\n\nset(MAINS\n    chapter1\n    chapter2\n    chapter3\n    feedtimes\n)\n\nforeach (main ${MAINS})\n  add_executable(${main} ${main}.cc)\n  target_link_libraries(${main} deephaven::client)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Production-like Environment Setup\nDESCRIPTION: Commands to create and run a more production-like environment, useful for development with infrequent Java code changes.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-11/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app-11:installDist\n./server/jetty-app-11/build/install/server-jetty-11/bin/start\n```\n\n----------------------------------------\n\nTITLE: Setting Up Source Directory\nDESCRIPTION: Creates and sets up the directory structure for Deephaven source code using environment variables.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DHSRC=$HOME/src/deephaven\nmkdir -p $DHSRC\ncd $DHSRC\n```\n\n----------------------------------------\n\nTITLE: Updating Server Requirements with Docker\nDESCRIPTION: Command to update the requirements.txt file for the server by extracting dependencies from the latest server-base image.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm ghcr.io/deephaven/server-base:latest pip freeze > docker/server/src/main/server/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Deactivating Python Virtual Environment\nDESCRIPTION: Command to exit the Python virtual environment when finished with development.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndeactivate # Exit the venv when finished\n```\n\n----------------------------------------\n\nTITLE: Modifying Excel Add-In Registry Entries in C#\nDESCRIPTION: This code snippet shows how to access the Windows Registry to modify the set of installed Excel Add-Ins. It opens the HKEY_CURRENT_USER hive and accesses the Excel Options subkey to manage Add-In entries.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/csharp/ExcelAddInInstaller/CustomActions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar subKey = Registry.CurrentUser.OpenSubKey(RegistryKeys.OpenEntries.Key, true);\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven Server via Gradle\nDESCRIPTION: Basic command to run the Deephaven server using Gradle, incorporating local Java changes on each start.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-jetty-app:run\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Windows Batch\nDESCRIPTION: Installs required packages using vcpkg package manager for x64 Windows platform.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_10\n\nLANGUAGE: batch\nCODE:\n```\ncd /d %DHSRC%\\deephaven-core\\cpp-client\\deephaven\n%VCPKG_ROOT%\\vcpkg.exe install --triplet x64-windows\n```\n\n----------------------------------------\n\nTITLE: Building Dependencies Setup\nDESCRIPTION: Commands to set up and execute the dependencies build script with logging.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DHCPP=$HOME/dhcpp\nmkdir -p $DHCPP\ncp $DHSRC/build-dependencies.sh $DHCPP\ncd $DHCPP\n./build-dependencies.sh 2>&1 | tee build-dependencies.log\n```\n\n----------------------------------------\n\nTITLE: Comparing Docker Image Versions\nDESCRIPTION: Command to pull and compare Docker images against repository versions.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew --continue pullImage compareImage\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment\nDESCRIPTION: Steps to set up the development environment for Deephaven Python client\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip3 install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Accessing Windows Registry for Office Bitness Detection in C#\nDESCRIPTION: This code snippet demonstrates how to access the Windows Registry to determine the bitness of the installed Office version. It uses RegistryView to handle 32-bit and 64-bit registry partitions, though the code notes that only 64-bit Windows is currently supported.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/csharp/ExcelAddInInstaller/CustomActions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar regView = Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32;\nvar regBase = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, regView);\n...\nvar bitnessValue = subKey.GetValue(RegistryKeys.Bitness.Name);\n```\n\n----------------------------------------\n\nTITLE: Starting Netty Server with Dev Certificates\nDESCRIPTION: Launches the Netty server application with Groovy support and development certificates enabled.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew server-netty-app:run -Pgroovy -PdevCerts\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build - CMake\nDESCRIPTION: Configures CMake build with specified toolchain file and installation prefix.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=%VCPKG_ROOT%/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=%DHINSTALL% -DX_VCPKG_APPLOCAL_DEPS_INSTALL=ON\n```\n\n----------------------------------------\n\nTITLE: Installing R from CRAN Repository\nDESCRIPTION: Commands to install R from CRAN repository on Ubuntu, including adding the repository key and updating package lists.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Download the key and install it\n$ wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | \\\n    sudo gpg --dearmor -o /usr/share/keyrings/r-project.gpg\n\n# Add the R source list to apt's sources list\n$ echo \"deb [signed-by=/usr/share/keyrings/r-project.gpg] https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/\" | \\\n    sudo tee -a /etc/apt/sources.list.d/r-project.list\n\n# update the apt package list\n$ apt -y update\n\n# install R\n$ sudo apt -y install r-base r-recommended\n```\n\n----------------------------------------\n\nTITLE: Authentication Request Handler Interface\nDESCRIPTION: Main interface for implementing complex authentication scenarios. Supports both Auth1 and Auth2 login methods with type-based request routing.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nio.deephaven.auth.AuthenticationRequestHandler\n```\n\n----------------------------------------\n\nTITLE: Server Shutdown Command\nDESCRIPTION: Command to gracefully shutdown the Deephaven server running in background mode using SIGINT.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/jetty-app-11/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkill -2 <pid>\n```\n\n----------------------------------------\n\nTITLE: Viewing Project-Specific Docker Tasks\nDESCRIPTION: Command to list Docker registry tasks for a specific project folder.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew docker-<folderName>:tasks -q --group \"Docker Registry\"\n```\n\n----------------------------------------\n\nTITLE: Installing QST Graphviz Development Build\nDESCRIPTION: Gradle command to install the QST Graphviz module for development purposes.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/qst/graphviz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew qst-graphviz:installDist\n```\n\n----------------------------------------\n\nTITLE: Setting Up Directory Structure - Windows Batch\nDESCRIPTION: Creates source and installation directories for Deephaven build process using environment variables.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\nset DHSRC=%HOMEDRIVE%%HOMEPATH%\\dhsrc\nset DHINSTALL=%HOMEDRIVE%%HOMEPATH%\\dhinstall\nmkdir %DHSRC%\nmkdir %DHINSTALL%\n```\n\n----------------------------------------\n\nTITLE: Setting Make Compilation Options\nDESCRIPTION: Command to enable parallel compilation for faster builds\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport MAKE=\"make -j$NCPUS\"\n```\n\n----------------------------------------\n\nTITLE: Development TODO Lists in Markdown\nDESCRIPTION: Structured list of development tasks and feature requests organized into SQL improvements, Deephaven core functionality, and server SQL connectivity options. Includes GitHub issue references and categorized implementation tasks.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/sql/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Development\n\n## SQLTODO\n * rel-node-optimization\n * catalog-reader-implementation\n * custom-sources\n * pre-join-condition-expressions\n * qst-convert-optimization\n * input-ref-match-hack\n * view-vs-select\n * sort-offset\n * null-eq-semantics\n * null-semantics-ternary-logic\n * char-n-support\n * parse-sql-configuration\n * emulate-count-non-null\n * array-type\n * custom-type\n * custom-expression\n * logical-intersect\n * logical-minus\n * table-headers-out\n\n## DH TODO\n * [deephaven-core#3515](https://github.com/deephaven/deephaven-core/issues/3515): Count non-null / count condition aggregations\n * [deephaven-core#3516](https://github.com/deephaven/deephaven-core/issues/3516): Numeric support for log10\n * [deephaven-core#3517](https://github.com/deephaven/deephaven-core/issues/3517): Numeric support for atan2\n * [deephaven-core#3518](https://github.com/deephaven/deephaven-core/issues/3518): Numeric support for cube root\n * [deephaven-core#3519](https://github.com/deephaven/deephaven-core/issues/3518): Numeric support for degrees\n * [deephaven-core#3520](https://github.com/deephaven/deephaven-core/issues/3518): Numeric support for radians\n\n## DH Server SQL?\n * odbc\n * jdbc\n * Flight SQL\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Registry Build Tasks\nDESCRIPTION: Command to display all build-relevant tasks for Docker registries in the Gradle build system.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew help -q --task tagLocalBuild\n```\n\n----------------------------------------\n\nTITLE: Running SLF4J Logger Example\nDESCRIPTION: Executes the SLF4J logging example module using Gradle in quiet mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/log-factory/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew -q log-example-slf4j:run\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Variables - Windows Batch\nDESCRIPTION: Sets environment variables for custom Deephaven host and port configuration for testing.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_13\n\nLANGUAGE: batch\nCODE:\n```\nset DH_HOST=...\nset DH_PORT=...\n```\n\n----------------------------------------\n\nTITLE: Git Sparse Checkout Configuration\nDESCRIPTION: Commands to set up a sparse Git checkout for the R client source code\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir rdeephaven\ncd rdeephaven\ngit init\ngit remote add -f origin https://github.com/deephaven/deephaven-core.git\ngit config core.sparseCheckout true\necho \"R/rdeephaven\" >> .git/info/sparse-checkout\ngit pull origin main\n```\n\n----------------------------------------\n\nTITLE: Setting Default JVM Options for Deephaven\nDESCRIPTION: Configures default JVM options including compiler directives and VM options file settings. Handles customization of JAVA_OPTS with fallback to default VM options.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/buildSrc/src/main/resources/unixStartScript.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nDEFAULT_JVM_OPTS=\"\\${DEFAULT_JVM_OPTS} -XX:+UnlockDiagnosticVMOptions -XX:CompilerDirectivesFile=\\\"\\${APP_HOME}/etc/dh-compiler-directives.txt\\\"\"\n\nDH_DEFAULT_VMOPTIONS=\"-XX:VMOptionsFile=\\\"\\${APP_HOME}/etc/dh-default.vmoptions\\\"\"\nJAVA_OPTS=\"\\${JAVA_OPTS:-\\${DH_DEFAULT_VMOPTIONS}}\"\n```\n\n----------------------------------------\n\nTITLE: String Syntax Error Examples in C++\nDESCRIPTION: Shows common syntax errors that can occur with string-based queries which are only caught at runtime.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n// typo in Ticker\nauto filtered1 = table.where(\n    \"ImportDate == `2017-11-01` && Thicker == `AAPL`\");\n// nonsensical string multiplication\nauto filtered1 = table.where(\n    \"ImportDate == `2017-11-01` && Ticker * 12 == `AAPL`\");\n// extra closing parenthesis\nauto filtered1 = table.Where(\n    \"(ImportDate == `2017-11-01`) && (Ticker == `AAPL`))\");\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: Lists required Python package dependencies including data processing libraries (PyArrow, NumPy), communication libraries (gRPC), serialization libraries (Protocol Buffers), and utility packages (bitstring).\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npyarrow\ngrpcio\nprotobuf\nbitstring\nnumpy\n```\n\n----------------------------------------\n\nTITLE: Running Logback Logger Example\nDESCRIPTION: Executes the Logback logging example module using Gradle in quiet mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/log-factory/examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew -q log-example-logback:run\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: Lists required Python packages including data processing libraries (pandas, pyarrow), communication frameworks (grpcio), build tools (setuptools, wheel), documentation (sphinx), and testing utilities (unittest-xml-reporting, timeout-decorator).\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/embedded-server/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npandas\npyarrow\ngrpcio\nsetuptools\nprotobuf\nwheel\nsphinx\nbitstring\nunittest-xml-reporting\ntimeout-decorator\n```\n\n----------------------------------------\n\nTITLE: Installing Build Tools on Ubuntu\nDESCRIPTION: Command to install required build dependencies including compiler, cmake, and development libraries on Ubuntu.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install curl git g++ cmake make build-essential zlib1g-dev libbz2-dev libssl-dev pkg-config\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Handler Interface\nDESCRIPTION: Interface path for implementing basic authentication in Deephaven. Handles both Auth1 and Auth2 payloads for Flight's BasicAuth.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nio.deephaven.auth.BasicAuthMarshaller.Handler\n```\n\n----------------------------------------\n\nTITLE: Fluent Syntax Error Examples in C++\nDESCRIPTION: Demonstrates how similar errors are caught at compile-time when using fluent syntax.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/doc/fluent.rst#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nauto (importDate, ticker) =\n    table.getColumns<StrCol, StrCol>(\"ImportDate\", \"Ticker\");\n// typo in Ticker\nauto filtered2 = table.where(\n    importDate == \"2017-11-01\" && thicker == \"AAPL\");\n// nonsensical string multiplication\nauto filtered2 = table.where(\n    importDate == \"2017-11-01\" && ticker * 12 == \"AAPL\");\n// extra closing parenthesis\nauto filtered2 = table.where(\n    (importDate == \"2017-11-01\") && (ticker * 12) == \"AAPL\"));\n```\n\n----------------------------------------\n\nTITLE: Copying Add-In Files for Standalone Excel Installation\nDESCRIPTION: Copies the necessary C++, C#, and XLL files to the designated Add-In directory for standalone installation in Excel.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/csharp/ExcelAddIn/README.md#2025-04-23_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\ncopy /Y %DHINSTALL%\\bin\\* %ADDINDIR%\ncopy /Y %DHSRC%\\csharp\\ExcelAddIn\\bin\\Debug\\net8.0-windows\\* %ADDINDIR%\ncopy /Y %DHSRC%\\csharp\\ExcelAddIn\\bin\\Debug\\net8.0-windows\\publish\\ExcelAddIn-Addin64-packed.xll %ADDINDIR%\n```\n\n----------------------------------------\n\nTITLE: Loading Deephaven Demo Script\nDESCRIPTION: Python command to execute the demo script located inside the Deephaven server container. This loads the entire demo script in one command.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/debezium/demo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexec(open('/scripts/demo.py').read())\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Deephaven Table Cleanup\nDESCRIPTION: Sets up a CMake project for building a table cleanup executable using C++17 standard and linking against the Deephaven client library. Defines minimum CMake version, project name, C++ standard, and library dependencies.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/table_cleanup/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(table_cleanup)\n\nset(CMAKE_CXX_STANDARD 17)\n\nadd_executable(table_cleanup main.cc)\n\ntarget_link_libraries(table_cleanup deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Running Stream Logger Example\nDESCRIPTION: Executes the stream-based logging example module using Gradle in quiet mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/log-factory/examples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew -q log-example-stream:run\n```\n\n----------------------------------------\n\nTITLE: Running Materialize CLI\nDESCRIPTION: Command to run the Materialize command-line interface using Docker Compose. Execute this from the 'perf' directory.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/debezium/perf/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run mzcli\n```\n\n----------------------------------------\n\nTITLE: Running QST Graphviz Help Command\nDESCRIPTION: Command to run the installed QST Graphviz executable and display help information.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/qst/graphviz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./qst/graphviz/build/install/qst-graphviz/bin/qst-graphviz --help\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven Example Scripts\nDESCRIPTION: Commands to run various example scripts demonstrating Deephaven functionality\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m examples.demo_table_ops\npython3 -m examples.demo_query\npython3 -m examples.demo_run_script\npython3 -m examples.demo_merge_tables\npython3 -m examples.demo_asof_join\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Deephaven Core\nDESCRIPTION: Sets up the CMake project for Deephaven Core, including version, C++ standard, and installation directories. It also provides an option for address sanitizer.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nif(TARGET client)\n    # The library has already been built (i.e. through some\n    # other path in the build graph).\n    return()\nendif()\n\nproject(deephaven)\n\nset(deephaven_VERSION 0.39.0)\nset(CMAKE_CXX_STANDARD 17)\n\n# for CMAKE_INSTALL_{dir}\ninclude(GNUInstallDirs)\n\n# To enable address sanitizer, add `-DSANITIZE_ADDRESS=ON` to\n# the list of options you pass for running cmake.\noption(SANITIZE_ADDRESS \"Enable address sanitizer\" \"OFF\")\nif(${SANITIZE_ADDRESS} STREQUAL \"ON\")\n  add_compile_options(\"-fsanitize=address\")\n  link_libraries(\"-fsanitize=address\")\nendif()\n\noption(DHCORE_ONLY \"Only build dhcore, skip rest\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Comparing SBOM Differences\nDESCRIPTION: Converts SBOM files to cyclonedx format and compares versions to identify dependency changes between releases.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/RELEASE.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsyft convert server-jetty-A.B.C.tar.syft.json -o cyclonedx-json=/tmp/A.B.C.cyclonedx.json\nsyft convert server-jetty-X.Y.Z.tar.syft.json -o cyclonedx-json=/tmp/X.Y.Z.cyclonedx.json\ncyclonedx diff /tmp/A.B.C.cyclonedx.json /tmp/X.Y.Z.cyclonedx.json --component-versions\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak with Docker Compose\nDESCRIPTION: Runs a Docker Compose command to start Keycloak and its database. This setup is for development purposes and includes a pre-configured realm, client, and test users.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/example-providers/oidc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Version Constraints\nDESCRIPTION: Defines package dependencies for setuptools and wrapt with specific version requirements using the tilde (~=) operator for compatible release locking.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/server/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsetuptools~=58.2.0\nwrapt~=1.13.1\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Issue Management\nDESCRIPTION: Comprehensive markdown documentation explaining the issue triaging process and monthly planning procedures for the Deephaven Core project team. Includes detailed steps for issue creation, assignment, labeling, and backlog management.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/TRIAGE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Issue Triaging\n\nLoosely based on the [VSCode triage process](https://github.com/microsoft/vscode/wiki/Issues-Triaging) (not as automated - yet).\n\n1. File an issue using the [Bug Report](https://github.com/deephaven/deephaven-core/issues/new?assignees=&labels=bug%2C+triage&template=bug_report.md) or the [Feature Request](https://github.com/deephaven/deephaven-core/issues/new?assignees=&labels=feature+request%2C+triage&template=feature_request.md) template. The issue will be created with the `Triage` label.\n2. The issue triager (weekly rotating role) goes through the unassigned [`triage` issues](https://github.com/deephaven/deephaven-core/labels/triage), assigning to the appropriate feature area owner. By assigning it directly to someone, they will see the issue on their issue list, and can see it needs triaging because of the `triage` label. If you are unsure who to assign it to, take your best guess and the owner can re-assign if it is not for them:\n     - [web ui](https://github.com/deephaven/deephaven-core/issues?q=is%3Aopen+is%3Aissue+no%3Amilestone+label%3A%22web+ui%22) - Bender\n     - [core](https://github.com/deephaven/deephaven-core/issues?q=is%3Aopen+is%3Aissue+no%3Amilestone+label%3Acore+) - Ryan\n     - [build](https://github.com/deephaven/deephaven-core/issues?q=is%3Aopen+is%3Aissue+no%3Amilestone+label%3Abuild+) - Devin\n     - [grpc](https://github.com/deephaven/deephaven-core/issues?q=is%3Aopen+is%3Aissue+no%3Amilestone+label%3Agrpc+) - Nate\n     - [community](https://github.com/deephaven/deephaven-core/issues?q=is%3Aopen+is%3Aissue+no%3Amilestone+label%3Acommunity) - Chip\n3. Area owners [triage tickets assigned to them](https://github.com/deephaven/deephaven-core/issues?q=is%3Aopen+label%3Atriage+assignee%3A%40me+) by adding appropriate labels, any additional comments, and adding to the backlog if it is an accepted issue.\n   - Tickets may have additional labels added, dependencies linked, and/or comments added.\n   - If more information is required, add the [`needs more info` label](https://github.com/deephaven/deephaven-core/labels/needs%20more%20info), and re-assign to the creator.\n   - If it's a duplicate of an existing issue, add the [`duplicate` label](https://github.com/deephaven/deephaven-core/labels/duplicate), and close the issue with a comment linking to the issue it duplicates.\n   - If the issue is important, such as a blocking issue or a security vulnerability, add the [`important`](https://github.com/deephaven/deephaven-core/labels/important) label, and assign to the current milestone as necessary.\n   - After the issue has been validated, add an appropriate area label, remove the `triage` label, unassign yourself as the owner, and add it to the [Backlog milestone](https://github.com/deephaven/deephaven-core/milestone/11). It will be assigned to a milestone when doing monthly planning.\n4. Developers work on tickets assigned to them within the current milestone. Since only tickets that you are working on will be assigned to you, [your issue list](https://github.com/deephaven/deephaven-core/issues/assigned/@me) should stay trim/easy to manage.\n5. Anybody (within the company or community) can vote on issues in the backlog using reactions. The issues with the most upvotes will be prioritized higher in the [backlog issue list](https://github.com/deephaven/deephaven-core/issues?q=is%3Aopen+milestone%3ABacklog+sort%3Areactions-%2B1-desc).\n\n# Monthly Planning/Backlog Grooming\n\nEach feature area owner (with support from their team) will do backlog grooming by looking at the [backlog issue list](https://github.com/deephaven/deephaven-core/issues?q=is%3Aopen+milestone%3ABacklog+sort%3Areactions-%2B1-desc), breaking down issues into concise chunks with a clear definition of done, and assigning what they think they can get done in the next month. Be aware of dependencies, and work with the product manager in addition to the upvotes for prioritization. For example, the product manager may add a label for a new initiative to focus on for the next month and tag issues in the backlog with those labels, then area owner knows to focus on those issues.\n```\n\n----------------------------------------\n\nTITLE: Cloning Required Repositories - Git Bash\nDESCRIPTION: Git commands to clone vcpkg and deephaven-core repositories into the source directory.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd $HOME/dhsrc\ngit clone https://github.com/microsoft/vcpkg.git\ngit clone https://github.com/deephaven/deephaven-core.git\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Arrow Flight Table Creation\nDESCRIPTION: Sets up CMake build configuration for a C++ executable targeting C++17 standard. Links against the Deephaven client library and creates an executable named 'create_table_with_arrow_flight' from main.cc source file.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/create_table_with_arrow_flight/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(create_table_with_arrow_flight)\n\nset(CMAKE_CXX_STANDARD 17)\n\nadd_executable(create_table_with_arrow_flight main.cc)\n\ntarget_link_libraries(create_table_with_arrow_flight deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Building Excel Add-In from Visual Studio Command Prompt\nDESCRIPTION: Commands to build the Excel Add-In solution using the Visual Studio Command Prompt. This builds the solution in Release mode.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/csharp/ExcelAddIn/README.md#2025-04-23_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ncd [repository root]\\csharp\\ExcelAddIn\ndevenv ExcelAddIn.sln /build Release\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Handler Class\nDESCRIPTION: Configuration string for enabling PSK authentication handler in Deephaven server. Must be added to AuthHandlers configuration setting.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/example-providers/psk/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nio.deephaven.authentication.psk.PskAuthenticationHandler\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Example directory structure showing the organization of Docker configuration files.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/web-plugin-packager/README.md#2025-04-23_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\n.\n├── docker-compose.yml\n├── server\n│   └── Dockerfile\n└── web\n    └── Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Documenting Deephaven Excel Addin Version 0.8.0 in Markdown\nDESCRIPTION: This snippet provides version information for Deephaven Excel Addin 0.8.0, including the specific builds of Community Core and Enterprise Core+ used in this version.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/csharp/ExcelAddInInstaller/VERSIONS.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Deephaven Excel Addin Versions\n\n0.8.0:\nBuilt against Community Core at hash 5f62c5bc36d1cad63e3c9ddf33bedc83cb6bf377\nBuilt against Enterprise Core+ at release grizzly/1.20240517.349\n```\n\n----------------------------------------\n\nTITLE: Running Tests - Windows Batch\nDESCRIPTION: Executes the client tests from the installation directory.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_14\n\nLANGUAGE: batch\nCODE:\n```\ncd /d %DHINSTALL%\\bin\n.\\dhclient_tests.exe\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Deephaven Client in CMake\nDESCRIPTION: This CMake configuration sets up a project named 'hello_world', specifies C++17 as the C++ standard, creates an executable named 'concurrent_session' from 'main.cc', and links it with the Deephaven client library.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/examples/concurrent_client/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(hello_world)\n\nset(CMAKE_CXX_STANDARD 17)\n\nadd_executable(concurrent_session main.cc)\n\ntarget_link_libraries(concurrent_session deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Application Home Path Resolution in Shell\nDESCRIPTION: Resolves the application home directory by following symlinks and setting up the APP_HOME variable. Handles both absolute and relative symlink paths.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/buildSrc/src/main/resources/unixStartScript.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\napp_path=\\$0\n\nwhile\n    APP_HOME=\\${app_path%\"\\${app_path##*/}\"}\n    [ -h \"\\$app_path\" ]\ndo\n    ls=\\$( ls -ld \"\\$app_path\" )\n    link=\\${ls#*' -> '}\n    case \\$link in\n      /*)   app_path=\\$link ;;\n      *)    app_path=\\$APP_HOME\\$link ;;\n    esac\ndone\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Image Version\nDESCRIPTION: Command to automatically update a specific Docker image version in the registry.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/docker/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew docker-<folderName>:bumpImage\n```\n\n----------------------------------------\n\nTITLE: Calendar Configuration File Structure\nDESCRIPTION: Directory listing of calendar configuration files that specify different trading schedules and holiday calendars. Includes CAL1, CAL2, example US bank and NYSE calendars, and UTC calendar definitions.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/props/test-configs/src/main/resources/test_calendar_imports.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/calendar/CAL1.calendar\n/calendar/CAL2.calendar\n/calendar/USBANK_EXAMPLE.calendar\n/calendar/USNYSE_EXAMPLE.calendar\n/calendar/UTC.calendar\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Excel Add-In Installation\nDESCRIPTION: Creates a directory on the Desktop to store the Excel Add-In files for standalone installation in Excel.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/csharp/ExcelAddIn/README.md#2025-04-23_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nset ADDINDIR=%HOMEDRIVE%%HOMEPATH%\\Desktop\\exceladdin\nmkdir %ADDINDIR%\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Test Suite Build\nDESCRIPTION: Configures a CMake build for the Deephaven client test suite. Sets up C++17 standard, compiles multiple test source files into an executable, and configures platform-specific compiler warnings. Links against the Deephaven client library.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/tests/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(dhclient_tests)\n\nset(CMAKE_CXX_STANDARD 17)\n\nadd_executable(dhclient_tests\n        src/add_drop_test.cc\n        src/aggregates_test.cc\n        src/attributes_test.cc\n        src/basic_test.cc\n        src/buffer_column_source_test.cc\n        src/cython_support_test.cc\n        src/date_time_test.cc\n        src/filter_test.cc\n        src/group_test.cc\n        src/head_and_tail_test.cc\n        src/input_table_test.cc\n        src/join_test.cc\n        src/lastby_test.cc\n        src/main.cc\n        src/merge_tables_test.cc\n        src/new_table_test.cc\n        src/on_close_cb_test.cc\n        src/script_test.cc\n        src/select_test.cc\n        src/sort_test.cc\n        src/string_filter_test.cc\n        src/table_test.cc\n        src/test_util.cc\n        src/ticking_test.cc\n        src/time_unit_test.cc\n        src/ungroup_test.cc\n        src/update_by_test.cc\n        src/utility_test.cc\n        src/validation_test.cc\n        src/view_test.cc\n\n        include/private/deephaven/tests/test_util.h\n        include/private/deephaven/third_party/catch.hpp\n)\n\nif (LINUX)\n    target_compile_options(dhclient_tests PRIVATE -Wall -Werror -Wno-deprecated-declarations)\nendif()\n\nif (WIN32)\n    target_compile_options(dhclient_tests PRIVATE /W3)\nendif()\n\ntarget_include_directories(dhclient_tests PRIVATE include/private)\n\ntarget_link_libraries(dhclient_tests deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Java Command Arguments Assembly\nDESCRIPTION: Assembles Java command arguments including system properties, classpath, module path, and main class. Handles proper quoting and expansion of JVM options from environment variables.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/buildSrc/src/main/resources/unixStartScript.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nset -- \\\n        \"-D${appNameSystemProperty}=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        --module-path \"$MODULE_PATH\" \\\n        ${mainClassName} \\\n        \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage Tests with Gradle\nDESCRIPTION: A series of Gradle commands to run various code coverage tests and generate reports. These commands should be executed from the root of the multi-project build.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/coverage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew -Pcoverage.enabled=true check\n./gradlew -Pcoverage.enabled=true testSerial\n./gradlew -Pcoverage.enabled=true testParallel\n./gradlew -Pcoverage.enabled=true testOutOfBand\n./gradlew -Pcoverage.enabled=true jacocoTestReport\n./gradlew -Pcoverage.enabled=true coverage-merge\n```\n\n----------------------------------------\n\nTITLE: Copying C++ Client Binaries for Debug Build\nDESCRIPTION: Copies the C++ Client binaries to the Visual Studio build directory for a Debug build. This step is necessary for the Add-In to function properly.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/csharp/ExcelAddIn/README.md#2025-04-23_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\ncopy /Y %DHINSTALL%\\bin %DHSRC%\\csharp\\ExcelAddIn\\bin\\Debug\\net8.0-windows\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Object Structure\nDESCRIPTION: Two JSON objects demonstrating simple key-value pairs with string and numeric values. Each object contains name and age properties.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/json-jackson/src/test/resources/io/deephaven/json/test-newline-objects.json.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"age\": 42\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"bar\",\n  \"age\": 43\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Godoc\nDESCRIPTION: Commands to install Godoc tool and start the documentation server for viewing local documentation.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/go/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get -v golang.org/x/tools/cmd/godoc  # Installation, only needs to be done once\ngodoc\n```\n\n----------------------------------------\n\nTITLE: Protobuf File Generation Configuration\nDESCRIPTION: Configures protobuf source and output directories, defines proto files to be processed, and sets up generation of C++ files from proto definitions.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/dhclient/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROTO_SRC_DIR\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../../../proto/proto-backplane-grpc/src/main/proto\")\nset(PROTO_GEN_DIR\n  \"${CMAKE_BINARY_DIR}/${PROJECT_NAME}/proto\")\nset(PROTO_OUT_DIR \"${PROTO_GEN_DIR}/deephaven_core/proto\")\n\nset(PROTO_FILES\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/application.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/config.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/console.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/hierarchicaltable.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/inputtable.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/object.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/partitionedtable.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/session.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/storage.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/table.proto\"\n    \"${PROTO_SRC_DIR}/deephaven_core/proto/ticket.proto\"\n)\n```\n\n----------------------------------------\n\nTITLE: File Layout for Coverage Reports and Configuration\nDESCRIPTION: A structured representation of the file layout for coverage-related files, including reports, configuration, and exclusion lists. This layout shows where different coverage files are located in the project structure.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/coverage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Plaintext\nCODE:\n```\nTop-level Build Directory (Some languages TBD)\n- `coverage/` This project's directory\n  - `gather-coverage.py` Gather and normalize coverage for all languages\n  - `exclude-packages.txt` A list of packages to exclude from aggregated results\n- `buildSrc/src/main/groovy/`\n  - `io.deephaven.java-jacoco-conventions.gradle` Applied to run coverage on Java projects\n  - `io.deephaven.java-test-conventions.gradle` Applies the above conditionally base on the _coverage.enabled_ property\n- `coverage/build/reports/coverage/`\n  - `java-coverage.csv` Normalized coverage from all Java projects\n  - `python-coverage.py` Normalized coverage from all Python projects\n  - `cplus-coverage.py` Normalized coverage from all C++ projects\n  - `r-coverage.py` Normalized coverage from all R projects\n  - `go-coverage.oy` Normalized coverage from all Go projects\n  - `all-coverage.csv` Normalized and filtered coverage from all covered projects\n- `coverage/build/reports/jacoco/jacoco-merge/html/`\n  - `index.html` Root file to view Java coverage down to the branch level (not filtered)\n```\n\n----------------------------------------\n\nTITLE: Setting VCPKG_ROOT Environment Variable - Windows Batch\nDESCRIPTION: Sets the VCPKG_ROOT environment variable for dependency management.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md#2025-04-23_snippet_9\n\nLANGUAGE: batch\nCODE:\n```\nset VCPKG_ROOT=%DHSRC%\\vcpkg\n```\n\n----------------------------------------\n\nTITLE: Web Client UI Repository Location\nDESCRIPTION: URL reference to the new location of the web client UI codebase on GitHub\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/web/client-ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Web Javascript packages\n\nWeb client UI has been ejected to its own repository: https://github.com/deephaven/web-client-ui\n```\n\n----------------------------------------\n\nTITLE: Executing Third-Party App with Deephaven Target URI in Shell\nDESCRIPTION: This snippet demonstrates how to use a Deephaven target URI with an external client application. It shows the recommended format for specifying the target server using the Deephaven URI convention.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/java-client/uri/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./example-third-party-app-list-tables --target dh://example.com\n```\n\n----------------------------------------\n\nTITLE: Library Target Configuration\nDESCRIPTION: Sets up the shared library target with source files, include directories, and platform-specific compiler options for Linux and Windows.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/dhclient/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(dhclient SHARED ${ALL_FILES})\n\n# This is so deephaven::client works both when using the installed CMake config\n# and when using this project as a CMake subdirectory of your own project.\nadd_library(deephaven::client ALIAS ${PROJECT_NAME})\n\nset_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE ON)\n\nif (LINUX)\n    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Werror -Wno-deprecated-declarations)\nendif()\n\nif (WIN32)\n    set_property(TARGET ${PROJECT_NAME} PROPERTY WINDOWS_EXPORT_ALL_SYMBOLS ON)\n    target_compile_options(${PROJECT_NAME} PRIVATE /W3 /bigobj)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Tracking Last Processed Pageview in Materialize\nDESCRIPTION: Bash command using 'watch' and 'psql' to continuously monitor the last processed pageview timestamp in Materialize. This helps track processing progress and latency.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/debezium/perf/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwatch -n1 \"psql -c '\nSELECT\n    total,\n    to_timestamp(max_received_at) max_received_ts,\n    mz_logical_timestamp - 1000*max_received_at AS dt_ms\nFROM pageviews_summary;'  -U materialize -h localhost -p 6875\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Commands for setting and verifying environment variables needed for the R client build process\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource /path/to/dhcpp/env.sh\n\necho $DHCPP\necho $LD_LIBRARY_PATH\necho $NCPUS\necho $CMAKE_PREFIX_PATH\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Heading\nDESCRIPTION: Basic ReStructuredText heading using hash symbols as title underline decoration\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/sphinx/source/py-modindex.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nModule Index\n############\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Tree Structure\nDESCRIPTION: RestructuredText directive for configuring the documentation tree structure using toctree with glob pattern to include Python module documentation.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/modules.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :glob:\n\n\n    ./code/pydeephaven\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options and Dependencies\nDESCRIPTION: Configures compile options, include directories, and links libraries for both shared and static versions of Deephaven Core. Handles platform-specific settings for Linux and Windows.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/cpp-client/deephaven/dhcore/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (whichlib dhcore dhcore_static)\n  set_property(TARGET ${whichlib} PROPERTY POSITION_INDEPENDENT_CODE ON)\n\n  if (LINUX)\n    target_compile_options(${whichlib} PRIVATE -Wall -Werror -Wno-deprecated-declarations)\n  endif()\n\n  if (WIN32)\n    # /Wall is a bit too chatty so we stick with /W3\n    # /bigobj needed because ticking/immer_table_state.cc compiles to something too large apparently\n    target_compile_options(${whichlib} PRIVATE /W3 /bigobj)\n\n    target_compile_definitions(${whichlib} PRIVATE _SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING)\n    target_link_libraries(${whichlib} PRIVATE ws2_32)\n  endif()\n\n  target_include_directories(${whichlib} PRIVATE include/private)\n  target_include_directories(${whichlib} PRIVATE third_party/date/include)\n  target_include_directories(${whichlib} PRIVATE third_party/flatbuffers/include)\n  target_include_directories(${whichlib} PRIVATE third_party/roaring/include)\n  target_include_directories(${whichlib} PRIVATE flatbuf)\n  target_include_directories(${whichlib} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/public>)\n\n  target_link_libraries(${whichlib} PRIVATE immer)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Header Markup\nDESCRIPTION: Simple ReStructuredText markup showing a level 1 header using hash symbols.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/py/client/docs/source/py-modindex.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nModule Index\n############\n```\n\n----------------------------------------\n\nTITLE: Generating CA Certificate\nDESCRIPTION: Creates a Certificate Authority (CA) key and certificate valid for 10 years.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nopenssl genpkey -algorithm RSA -out ca.key \n\nopenssl req \\\n  -new \\\n  -x509 \\\n  -nodes \\\n  -days 3650 \\\n  -subj '/CN=deephaven-localhost-testing-ca' \\\n  -key ca.key \\\n  -out ca.crt\n```\n\n----------------------------------------\n\nTITLE: System Detection and Java Command Resolution\nDESCRIPTION: Detects the operating system type and resolves the Java command to use. Includes special handling for different OS types and JAVA_HOME configurations.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/buildSrc/src/main/resources/unixStartScript.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"\\$( uname )\" in\n  CYGWIN* )         cygwin=true  ;;\n  Darwin* )         darwin=true  ;;\n  MSYS* | MINGW* )  msys=true    ;;\n  NONSTOP* )        nonstop=true ;;\nesac\n```\n\n----------------------------------------\n\nTITLE: Checking Build Dependencies\nDESCRIPTION: Commands to verify installation of required build dependencies\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit version\njava -version\ndocker version\ndocker compose version\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL Username/Password Authentication in Gradle Build\nDESCRIPTION: Gradle command to enable SQL username/password authentication when building and running the server with Jetty.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authentication/example-providers/sql-username-password/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n:server-jetty-app:run -Psql-username-password\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration in Profile\nDESCRIPTION: Bash script to automatically set environment variables at session start\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# source DHCPP env variables if dhcpp directory exists\ncurrent_dhcpp_dir=/path/to/dhcpp\"\nif [ -d \"$current_dhcpp_dir\" ] ; then\n    source \"$current_dhcpp_dir\"/env.sh\nfi\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Deephaven Core Repository\nDESCRIPTION: Command to clone a forked Deephaven Core repository. Replace <username> with your GitHub username.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<username>/deephaven-core.git\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization Wiring Code with Protoc and Gradle (Bash)\nDESCRIPTION: This bash script demonstrates how to generate authorization wiring code for Deephaven using protoc plugins. It compiles the codegen project, sets up environment variables, and runs protoc commands for different proto files.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/authorization/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew :authorization-codegen:shadowJar\n\nDEEPHAVEN_VERSION=\"$(./gradlew printVersion -q)\"\nOUT_DIR=authorization/src/main/java/\nPROTO_DIR=proto/proto-backplane-grpc/src/main/proto/\nROOT_DIR=$PROTO_DIR/deephaven/proto\n\nDEEPHAVEN_VERSION=${DEEPHAVEN_VERSION} PATH=authorization-codegen:$PATH protoc --service-auth-wiring_out=$OUT_DIR -I $PROTO_DIR    \\\n     $ROOT_DIR/application.proto                                        \\\n     $ROOT_DIR/console.proto                                            \\\n     $ROOT_DIR/config.proto                                             \\\n     $ROOT_DIR/object.proto                                             \\\n     $ROOT_DIR/partitionedtable.proto                                   \\\n     $ROOT_DIR/session.proto                                            \\\n     $ROOT_DIR/storage.proto                                            \\\n     $ROOT_DIR/ticket.proto\n\nDEEPHAVEN_VERSION=${DEEPHAVEN_VERSION} PATH=authorization-codegen:$PATH protoc --contextual-auth-wiring_out=$OUT_DIR -I $PROTO_DIR \\\n     $ROOT_DIR/table.proto                                              \\\n     $ROOT_DIR/inputtable.proto                                         \\\n     $ROOT_DIR/partitionedtable.proto                                   \\\n     $ROOT_DIR/hierarchicaltable.proto\n\nOUT_DIR=authorization/src/main/java/\nPROTO_DIR=../grpc/src/proto/grpc/health/v1/\nROOT_DIR=$PROTO_DIR\n\nDEEPHAVEN_VERSION=${DEEPHAVEN_VERSION}  PATH=authorization-codegen:$PATH protoc --service-auth-wiring_out=$OUT_DIR -I $PROTO_DIR    \\\n     $ROOT_DIR/health.proto\n\n./gradlew :authorization:spotlessApply\n```\n\n----------------------------------------\n\nTITLE: Cygwin Path Conversion for Java Runtime\nDESCRIPTION: Converts Unix-style paths to Windows format for Java execution in Cygwin/MSYS environment. Handles path conversion for APP_HOME, CLASSPATH, and optional MODULE_PATH variables.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/buildSrc/src/main/resources/unixStartScript.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n    MODULE_PATH=$( cygpath --path --mixed \"$MODULE_PATH\" )\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies\nDESCRIPTION: Command to install required OS packages for building vignettes\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# required during the build for vignettes\n$ sudo apt -y install libxml2-dev pandoc\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Deephaven Client Caller\nDESCRIPTION: Sets up CMake build configuration for a C++ client caller executable. Specifies C++17 standard and required dependencies including Arrow, ArrowFlight, Immer, Protobuf, gRPC, and Deephaven client library. Creates an executable target and links it with the Deephaven client library.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/src/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(client_caller)\n\nset(CMAKE_CXX_STANDARD 17)\n\nfind_package(Arrow REQUIRED)\nfind_package(ArrowFlight REQUIRED HINTS ${Arrow_DIR})\nfind_package(Immer REQUIRED)\nfind_package(Protobuf REQUIRED)\nfind_package(gRPC REQUIRED)\nfind_package(Threads REQUIRED)\nfind_package(deephaven REQUIRED)\n\nadd_executable(client_caller client_caller.cpp)\n\ntarget_link_libraries(client_caller deephaven::client)\n```\n\n----------------------------------------\n\nTITLE: Argument Processing for Cygwin Paths\nDESCRIPTION: Processes command line arguments to convert Unix paths to Windows format while preserving options and handling special cases. Uses pattern matching to identify and convert only valid file paths.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/buildSrc/src/main/resources/unixStartScript.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        shift\n        set -- \"$@\" \"$arg\"\n    done\n```\n\n----------------------------------------\n\nTITLE: Applying Styleguide with Gradle\nDESCRIPTION: Command to apply the project's styleguide using Gradle's spotless plugin.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew spotlessApply\n```\n\n----------------------------------------\n\nTITLE: JVM Options Processing with xargs\nDESCRIPTION: Processes JVM options using xargs to handle quoted arguments correctly. Includes fallback check for xargs availability and proper escaping of shell metacharacters.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/buildSrc/src/main/resources/unixStartScript.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\neval \"set -- $(\\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $${optsEnvironmentVar}\" |\\n        xargs -n1 |\\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\\n        tr '\\n' ' '\\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Creating Pull Request with GitHub CLI\nDESCRIPTION: Command to create a pull request using the GitHub CLI. This opens the pull request in the browser for further editing.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh pr create -f -w\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Remote Configuration\nDESCRIPTION: Command to verify the Git remote 'upstream' is properly configured to point to the Deephaven Core repository.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git remote get-url upstream\ngit@github.com:deephaven/deephaven-core.git\n```\n\n----------------------------------------\n\nTITLE: Launching Deephaven Docker Compose Environment\nDESCRIPTION: These commands download the Docker Compose configuration, pull the required images, and start the Deephaven environment in detached mode. The configuration includes Deephaven, Python scripting, PyTorch, and Deephaven Examples.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/containers/python-examples/PyTorch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/deephaven/deephaven-core/main/containers/python-examples/PyTorch/docker-compose.yml\ndocker compose pull\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Patch Release Branch\nDESCRIPTION: Commands for creating a patch release branch based on a previous release tag, including version bumping and cherry-picking.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/RELEASE.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git fetch upstream\n$ git checkout vX.Y.0\n$ git checkout -b release/vX.Y.1\n$ git cherry-pick <...>\n$ ...\n$ git commit -m \"Bump to X.Y.1\"\n$ git --no-pager log --oneline vX.Y.0..release/vX.Y.1\n```\n\n----------------------------------------\n\nTITLE: Applying Tidyverse Code Styling\nDESCRIPTION: Formats code according to Tidyverse style guidelines using the styler package. Requires setting the working directory to the package root.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/R/rdeephaven/README.md#2025-04-23_snippet_9\n\nLANGUAGE: r\nCODE:\n```\nsetwd(\"/path/to/rdeephaven\")\ninstall.packages(\"styler\")\nlibrary(styler)\nstyle_pkg()\n```\n\n----------------------------------------\n\nTITLE: Creating Git Release Tag\nDESCRIPTION: Creates and pushes a Git tag for the release version after Maven Central staging repository has been released.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/RELEASE.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ git tag -a -m \"[Release] X.Y.Z\" vX.Y.Z release/vX.Y.Z\n$ git show vX.Y.Z\n$ git push upstream vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Deephaven Package Paths\nDESCRIPTION: Listing of key package paths in the Deephaven Core project, including generated tuple sources, GRPC implementations, and protocol buffer definitions.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/coverage/exclude-packages.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.deephaven.tuple.generated\nio.deephaven.engine.table.impl.tuplesource.generated\nio.deephaven.proto.backplane.grpc\nio.deephaven.proto.backplane.script.grpc\nio.deephaven.proto\n```\n\n----------------------------------------\n\nTITLE: Defining Person Records in JSON\nDESCRIPTION: This snippet defines two person records using JSON format. Each record includes a 'name' (string) and an 'age' (integer) property.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/extensions/json-jackson/src/test/resources/io/deephaven/json/test-compact-objects.json.txt#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"name\":\"foo\",\"age\":42}{\"name\":\"bar\",\"age\":43}\n```\n\n----------------------------------------\n\nTITLE: Running Java Client with mTLS\nDESCRIPTION: Executes a Java client connection check with mTLS configuration.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/server/dev-certs/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew java-client-session-examples:installDist\n./java-client/session-examples/build/install/java-client-session-examples/bin/connect-check --target dh://localhost:8443 --ssl server/dev-certs/client-mtls.json\n```\n\n----------------------------------------\n\nTITLE: Version Files to Update\nDESCRIPTION: List of files that need version updates after a release for preparation of the next release cycle.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/RELEASE.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n#\n# Edit files for version change\n#\ngradle.properties\nR/rdeephaven/DESCRIPTION\ncpp-client/deephaven/CMakeLists.txt\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Documentation Structure\nDESCRIPTION: Basic reStructuredText configuration for Python modules documentation using toctree directive with glob pattern.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/sphinx/source/modules.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :glob:\n\n\n    ./code/jpy\n```\n\n----------------------------------------\n\nTITLE: Loading Materialize Demo Script\nDESCRIPTION: SQL command to load and execute the Materialize demo script within the Materialize CLI. This creates sources and views for the demo.\nSOURCE: https://github.com/deephaven/deephaven-core/blob/main/debezium/perf/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n\\i /scripts/demo.sql\n```"
  }
]