[
  {
    "owner": "paradigmxyz",
    "repo": "ress",
    "content": "TITLE: Installing Ress Using Cargo\nDESCRIPTION: Command to install Ress (reth stateless) directly from the GitHub repository using Cargo package manager with the --locked flag to ensure dependency consistency.\nSOURCE: https://github.com/paradigmxyz/ress/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --git https://github.com/paradigmxyz/ress ress --locked\n```\n\n----------------------------------------\n\nTITLE: Running Stateful Reth Client with Ress Support\nDESCRIPTION: Command to start a stateful Reth node with the --ress.enable flag that enables support for the ress subprotocol, allowing stateless nodes to fetch required state data.\nSOURCE: https://github.com/paradigmxyz/ress/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nreth --ress.enable\n```\n\n----------------------------------------\n\nTITLE: Running Ress Client with Trusted Peers\nDESCRIPTION: Command to run a Ress client specifying trusted peers using their enode identifiers. These peers provide the state data required for validation via the ress subprotocol.\nSOURCE: https://github.com/paradigmxyz/ress/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nress --trusted-peers \\\n    \"enode://04bcda1f0a750ce5fd986187825ffcd7aa1ad3641027f646707c2121443e85ae309e047f228c0067aac382f0c0cab21e91a2852e10b4f7724187b0185bb78b2b@100.126.2.26:30303,\\\n    enode://04e4e548eee6f042685ad0b6793de36a4c5c6a3107cdf54cbfeedbeb0df4138d4c65b534fb700072341098644eb5a6b125e63c36464d8f57c19b6e26ca36ae7c@100.75.245.88:30303,\\\n    enode://2c464310c41c2a9d7be44783d38ab2b8517e4c5133719de1a4b605294cfd201f33b2c5b4158054b171a3ba26837f85a97f6a8553622ea1033d70c98fc1b70fa0@69.67.151.138:30303,\\\n    enode://065cffdc5c824d42c23f933ca615daad8b887f2330b1313e8c1a5d850be93d3b6e95698d4f774bbf7b2639ac6d6d870645156eeb805bd3448107806cc0a6e5f9@69.67.151.138:30303\"\n```\n\n----------------------------------------\n\nTITLE: Ress Components Architecture Diagram\nDESCRIPTION: Mermaid flowchart showing the architecture of a complete Ress setup, including both the stateful client pair (Consensus Layer and Reth) and stateless client pair (Consensus Layer and Ress), connected via the RLPx subprotocol.\nSOURCE: https://github.com/paradigmxyz/ress/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    subgraph Stateful[\"Stateful Client Pair\"]\n        SFCL[\"Consensus Layer\"]\n        Reth[\"Reth Node\"]\n        SFCL -->|Engine API| Reth\n    end\n    \n    subgraph Stateless[\"Stateless Client Pair\"]\n        SLCL[\"Consensus Layer\"]\n        Ress[\"Ress Node\"]\n        SLCL -->|Engine API| Ress\n    end\n\n    Ress -->|ress RLPx subprotocol| Reth\n```\n\n----------------------------------------\n\nTITLE: Ress Payload Validation Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the interaction between a Consensus Layer client, Ress node, and Reth node during the payload validation process, showing how Ress fetches witnesses and bytecode to validate a new block.\nSOURCE: https://github.com/paradigmxyz/ress/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    CL->>Ress: NewPayload\n    Ress->>Reth: GetWitness\n    Reth-->>Ress: Witness\n    Ress->>Reth: GetBytecode\n    Note over Ress,Reth: (only missing)\n    Reth-->>Ress: Bytecode\n    Ress->>Ress: Validate Payload\n    Ress-->>CL: PayloadStatus\n```\n\n----------------------------------------\n\nTITLE: Fetching Enode Information from Reth Node\nDESCRIPTION: Command using cast to retrieve the enode identifier from a locally running Reth node, which can then be used as a trusted peer for the Ress client.\nSOURCE: https://github.com/paradigmxyz/ress/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncast rpc admin_nodeInfo -r http://localhost:9545 | jq .enode\n```\n\n----------------------------------------\n\nTITLE: Running Hive Tests with RETH and RESS Adapter\nDESCRIPTION: Steps to set up and run Hive tests using the custom adapter for RETH and RESS. Includes cloning the Hive repository, building necessary components, and executing the Hive simulator.\nSOURCE: https://github.com/paradigmxyz/ress/blob/main/bin/adapter/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ethereum/hive && cd hive && go build .\n```\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf workspace/ && ./hive --sim ethereum/engine --sim.limit api --client reth\n```\n\n----------------------------------------\n\nTITLE: Accessing Hive Test Logs\nDESCRIPTION: Instructions for locating and checking logs generated during Hive test runs. Shows the path to a sample log file.\nSOURCE: https://github.com/paradigmxyz/ress/blob/main/bin/adapter/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhive/workspace/logs/reth/client-fc9f9ef80a74664e877fd59008e59e24fba35c43d02bbc30e2530952cc07a907.log\n```"
  }
]