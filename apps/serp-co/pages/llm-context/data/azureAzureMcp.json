[
  {
    "owner": "azure",
    "repo": "azure-mcp",
    "content": "TITLE: Complete Command Implementation Example in C#\nDESCRIPTION: Full implementation example of a container list command showing proper structure, error handling, and argument processing.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ContainersListCommand : BaseStorageCommand<ContainersListArguments>\n{\n    public ContainersListCommand() : base()\n    {\n        RegisterArgumentChain(\n            CreateAccountArgument(GetStorageAccountOptions),\n            CreateContainerArgument(GetContainerOptions)\n        );\n    }\n\n    public override Command GetCommand()\n    {\n        var command = new Command(\n            \"list\",\n            \"List all containers in a storage account. Returns an array of container names.\");\n\n        AddBaseOptionsToCommand(command);\n        command.AddOption(_accountOption);\n        return command;\n    }\n\n    public override async Task<CommandResponse> ExecuteAsync(CommandContext context, ParseResult parseResult)\n    {\n        var args = BindArguments(parseResult);\n\n        try\n        {\n            if (!await ProcessArgumentChain(context, args))\n            {\n                return context.Response;\n            }\n\n            var service = context.GetService<IStorageService>();\n            var containers = await service.ListContainers(\n                options.Account!,\n                options.Subscription!,\n                options.AuthMethod ?? AuthMethod.Credential,\n                options.TenantId,\n                options.RetryPolicy);\n\n            context.Response.Results = containers?.Count > 0 ? \n                new { containers } : \n                null;\n        }\n        catch (Exception ex)\n        {\n            HandleException(context.Response, ex);\n        }\n\n        return context.Response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Command Interface in Azure CLI\nDESCRIPTION: Definition of the core command interface IBaseCommand that all Azure CLI commands must implement. Specifies the contract for command execution and argument management.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IBaseCommand\n{\n    Command GetCommand();\n    Task<CommandResponse> ExecuteAsync(CommandContext context, ParseResult commandOptions);\n    IEnumerable<ArgumentDefinition<string>>? GetArguments();\n    void ClearArguments();\n    void AddArgument(ArgumentDefinition<string> argument);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Server in STDIO Mode\nDESCRIPTION: Builds the project and starts the server in STDIO mode using the ModelContextProtocol inspector.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Commands/Server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build && npx @modelcontextprotocol/inspector ./bin/Debug/net9.0/azmcp.exe server start\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface Method in C#\nDESCRIPTION: Template for defining a method in the service interface, including XML documentation and parameter descriptions.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface I{Service}Service\n{\n    /// <summary>\n    /// {Operation description}\n    /// </summary>\n    /// <param name=\"requiredParam1\">Required parameter description</param>\n    /// <param name=\"subscription\">Subscription ID or name</param>\n    /// <param name=\"tenantId\">Optional tenant ID for cross-tenant operations</param>\n    /// <param name=\"retryPolicy\">Optional retry policy for the operation</param>\n    /// <returns>List of results</returns>\n    /// <exception cref=\"AuthenticationFailedException\">When authentication fails</exception>\n    /// <exception cref=\"RequestFailedException\">When the service request fails</exception>\n    Task<List<string>> {Operation}{Resource}(\n        string {requiredParam1},\n        string subscription,\n        AuthMethod? authMethod = null,\n        string? tenantId = null,\n        RetryPolicyArguments? retryPolicy = null);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Command Class in C#\nDESCRIPTION: Template for creating a command class, including option registration, argument binding, and command execution logic.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.CommandLine;\nusing System.CommandLine.Parsing;\nusing AzureMcp.Models.Command;\nusing AzureMcp.Services.Interfaces;\nusing ModelContextProtocol.Server;\n\nnamespace AzureMcp.Commands.{Service}.{SubService}.{Resource};\n\npublic sealed class {Resource}{Operation}Command : Base{Service}Command<{Resource}{Operation}Arguments>\n{\n    private readonly Option<string> _resourceOption = ArgumentDefinitions.{Service}.Resource.ToOption();\n\n    protected override string GetCommandName() => \"{operation}\";\n\n    protected override string GetCommandDescription() =>\n        $\"\"\"\n        {Detailed description of what the command does}.\n        Returns {description of return format}.\n        \n        Required arguments:\n        - {ArgumentDefinitions.{Service}.Resource.Name}\n        \"\"\";\n\n    protected override void RegisterOptions(Command command)\n    {\n        base.RegisterOptions(command);\n        command.AddOption(_resourceOption);\n    }\n\n    protected override void RegisterArguments()\n    {\n        base.RegisterArguments();\n        AddArgument(Create{Resource}Argument());\n    }\n\n    protected override {Resource}{Operation}Arguments BindArguments(ParseResult parseResult)\n    {\n        var args = base.BindArguments(parseResult);\n        args.Resource = parseResult.GetValueForOption(_resourceOption);\n        return args;\n    }\n\n    [McpServerTool(Destructive = false, ReadOnly = true)]\n    public override async Task<CommandResponse> ExecuteAsync(CommandContext context, ParseResult parseResult)\n    {\n        var args = BindArguments(parseResult);\n\n        try\n        {\n            if (!await ProcessArguments(context, args))\n            {\n                return context.Response;\n            }\n\n            var service = context.GetService<I{Service}Service>();\n            var results = await service.{Operation}{Resource}(\n                args.Resource!,\n                args.Subscription!,\n                args.Tenant,\n                args.RetryPolicy);\n\n            context.Response.Results = results?.Count > 0 ? \n                new { results } : \n                null;\n        }\n        catch (Exception ex)\n        {\n            HandleException(context.Response, ex);\n        }\n\n        return context.Response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Server in SSE Mode\nDESCRIPTION: Builds and starts the server in SSE (Server-Sent Events) transport mode on port 5008.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Commands/Server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build && ./bin/Debug/net9.0/azmcp.exe server start --transport sse\n```\n\n----------------------------------------\n\nTITLE: Creating Arguments Class in C#\nDESCRIPTION: Template for creating an Arguments class for a specific command, inheriting from BaseArgumentsWithSubscription and defining custom parameters.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace AzureMcp.Arguments.{Service}.{SubService}.{Resource};\n\npublic class {Resource}{Operation}Arguments : BaseArgumentsWithSubscription\n{\n    public string? {SpecificParam} { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Extension Operations in Bash\nDESCRIPTION: Commands to execute any Azure CLI command through the MCP extension, with examples for listing resource groups, retrieving storage account details, and listing virtual machines.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Execute any Azure CLI command\nazmcp extension az --command \"<command>\"\n\n# Examples:\n# List resource groups\nazmcp extension az --command \"group list\"\n\n# Get storage account details\nazmcp extension az --command \"storage account show --name <account-name> --resource-group <resource-group>\"\n\n# List virtual machines\nazmcp extension az --command \"vm list --resource-group <resource-group>\"\n```\n\n----------------------------------------\n\nTITLE: Registering Monitor Commands in Command Factory\nDESCRIPTION: Implementation of command group registration for Azure Monitor operations, showing hierarchical command structure and group organization.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void RegisterMonitorCommands()\n{\n    // Create Monitor command group with clear description\n    var monitor = new CommandGroup(\"monitor\",\n        \"Azure Monitor operations - Commands for querying and analyzing Azure Monitor logs and metrics.\");\n    _rootGroup.AddSubGroup(monitor);\n\n    // Create descriptive subgroups\n    var logs = new CommandGroup(\"log\",\n        \"Azure Monitor logs operations - Commands for querying Log Analytics workspaces using KQL.\");\n    monitor.AddSubGroup(logs);\n\n    var workspaces = new CommandGroup(\"workspace\",\n        \"Log Analytics workspace operations - Commands for managing Log Analytics workspaces.\");\n    monitor.AddSubGroup(workspaces);\n\n    // Register commands under appropriate groups\n    logs.AddCommand(\"query\", new Monitor.Log.LogQueryCommand());\n    workspaces.AddCommand(\"list\", new Monitor.Workspace.WorkspaceListCommand());\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Subscriptions in Bash\nDESCRIPTION: Command to list available Azure subscriptions with an optional tenant ID parameter.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List available Azure subscriptions\nazmcp subscription list [--tenant-id <tenant-id>]\n```\n\n----------------------------------------\n\nTITLE: Root Command Group Registration in C#\nDESCRIPTION: Top-level command group registration pattern showing the organization of major command categories.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void RegisterCommandGroup()\n{\n    // Register top-level command groups\n    RegisterCosmosCommands();\n    RegisterStorageCommands();\n    RegisterMonitorCommands();\n    RegisterToolsCommands();\n    RegisterSubscriptionCommands();\n    RegisterGroupCommands();\n    RegisterMcpServerCommands();\n}\n```\n\n----------------------------------------\n\nTITLE: App Configuration Operations in Bash\nDESCRIPTION: Commands for Azure App Configuration operations including listing accounts, key-value settings, and managing key-value pairs.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# List App Configuration stores in a subscription\nazmcp appconfig account list --subscription <subscription>\n\n# List all key-value settings in an App Configuration store\nazmcp appconfig kv list --subscription <subscription> --account-name <account-name> [--key <key>] [--label <label>]\n\n# Show a specific key-value setting\nazmcp appconfig kv show --subscription <subscription> --account-name <account-name> --key <key> [--label <label>]\n\n# Set a key-value setting\nazmcp appconfig kv set --subscription <subscription> --account-name <account-name> --key <key> --value <value> [--label <label>]\n\n# Lock a key-value setting (make it read-only)\nazmcp appconfig kv lock --subscription <subscription> --account-name <account-name> --key <key> [--label <label>]\n\n# Unlock a key-value setting (make it editable)\nazmcp appconfig kv unlock --subscription <subscription> --account-name <account-name> --key <key> [--label <label>]\n\n# Delete a key-value setting\nazmcp appconfig kv delete --subscription <subscription> --account-name <account-name> --key <key> [--label <label>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Service-Specific Base Command in C#\nDESCRIPTION: Demonstrates how to create a service-specific base command class with helper methods for common arguments, ensuring proper type constraints and inheritance.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.CommandLine;\nusing AzureMcp.Models;\nusing AzureMcp.Services.Interfaces;\nusing AzureMcp.Arguments;\n\npublic abstract class BaseAppConfigCommand<TArgs> : BaseCommand<TArgs>\n{\n    protected ArgumentChain<TArgs> CreateAccountArgument()\n    {\n        return ArgumentChain<TArgs>\n            .Create(ArgumentDefinitions.AppConfig.Account.Name, ArgumentDefinitions.AppConfig.Account.Description)\n            .WithValueAccessor(args => ((dynamic)args).Account ?? string.Empty)\n            .WithCommandExample(ArgumentDefinitions.GetCommandExample(GetCommandPath(), ArgumentDefinitions.AppConfig.Account))\n            .WithValueLoader(async (context, args) => await GetAccountOptions(context, args.Subscription ?? string.Empty))\n            .WithIsRequired(ArgumentDefinitions.AppConfig.Account.Required);\n    }\n\n    // Other helper methods...\n}\n\npublic class KeyValueLockCommand : BaseAppConfigCommand<KeyValueLockArguments>\n{\n    public KeyValueLockCommand() : base()\n    {\n        RegisterArgumentChain(\n            CreateAccountArgument(),\n            CreateKeyArgument()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Standalone Aspire Dashboard for OpenTelemetry in Docker\nDESCRIPTION: This Docker command runs a standalone Aspire dashboard container for visualizing OpenTelemetry data exported from the Azure MCP Server. It exposes ports for the dashboard interface and OTLP endpoint.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/TROUBLESHOOTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -d \\\n    -p 18888:18888 \\\n    -p 4317:18889 \\\n    --name aspire-dashboard \\\n    mcr.microsoft.com/dotnet/aspire-dashboard:9.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in C# for Azure MCP Commands\nDESCRIPTION: Shows how to implement error handling methods in Azure MCP commands, including custom error messages and status codes for different exception types.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override string GetErrorMessage(Exception ex) => ex switch\n{\n    AuthenticationFailedException authEx =>\n        $\"Authentication failed. Please run 'az login' to sign in to Azure. Details: {authEx.Message}\",\n    RequestFailedException rfEx => rfEx.Message,\n    HttpRequestException httpEx =>\n        $\"Service unavailable or network connectivity issues. Details: {httpEx.Message}\",\n    _ => base.GetErrorMessage(ex)\n};\n\nprotected override int GetStatusCode(Exception ex) => ex switch\n{\n    AuthenticationFailedException => 401,\n    RequestFailedException rfEx => rfEx.Status,\n    HttpRequestException => 503,\n    _ => 500\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Method in C#\nDESCRIPTION: Template for implementing a service method, including credential retrieval, SDK client usage, and exception handling.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class {Service}Service : Base{Service}Service, I{Service}Service\n{\n    public async Task<List<string>> {Operation}{Resource}(\n        string {requiredParam1},\n        string subscription,\n        string? tenantId = null)\n    {\n        var credential = await GetCredential(tenantId);\n\n        try\n        {\n            var client = new {ServiceClient}(\n                endpoint,\n                credential);\n\n            var response = await client.{SdkMethod}Async();\n\n            return response.Value.Select(item => item.Name).ToList();\n        }\n        catch (Exception ex)\n        {\n            throw new Exception($\"Error in {nameof({Operation}{Resource})}: {ex.Message}\", ex);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure MCP CLI Response Format in JSON\nDESCRIPTION: Standard JSON response format returned by all Azure MCP CLI commands, including status code, message, arguments, results, and operation duration.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"200|403|500, etc\",\n  \"message\": \"\",\n  \"args\": [],\n  \"results\": [],\n  \"duration\": 123\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Status Code Exception Mapping in C#\nDESCRIPTION: Maps different exception types to appropriate HTTP status codes for consistent error response handling across the application.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override int GetStatusCode(Exception ex) => ex switch\n{\n    AuthenticationFailedException => 401,\n    RequestFailedException rfEx => rfEx.Status,\n    HttpRequestException => 503,\n    ResourceNotFoundException => 404,\n    ValidationException => 400,\n    _ => 500\n};\n```\n\n----------------------------------------\n\nTITLE: Storage Operations in Bash\nDESCRIPTION: Commands for Azure Storage operations including listing accounts, tables, blobs, containers, and retrieving container details.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# List Storage accounts in a subscription\nazmcp storage account list --subscription <subscription>\n\n# List tables in a Storage account\nazmcp storage table list --subscription <subscription> --account-name <account-name>\n\n# List blobs in a Storage container\nazmcp storage blob list --subscription <subscription> --account-name <account-name> --container-name <container-name>\n\n# List containers in a Storage blob service\nazmcp storage blob container list --subscription <subscription> --account-name <account-name>\n\n# Get detailed properties of a storage container\nazmcp storage blob container details --subscription <subscription> --account-name <account-name> --container-name <container-name>\n```\n\n----------------------------------------\n\nTITLE: Testing Argument Chain Validation in Azure Commands\nDESCRIPTION: Unit test for validating argument dependencies and suggestion generation in Azure CLI commands. Tests the command's ability to provide suggested values for arguments based on service responses.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task ProcessArguments_WithMissingDependentValue_ReturnsSuggestions()\n{\n    // Arrange\n    var service = _serviceProvider.GetRequiredService<IStorageService>();\n    service.GetStorageAccounts(Arg.Any<string>())\n        .Returns([\"account1\", \"account2\"]);\n\n    // Act\n    var result = await _command.ExecuteAsync(_context, _parser);\n\n    // Assert\n    Assert.NotNull(result.Arguments);\n    var accountArg = result.Arguments.First(a => a.Name == \"account\");\n    Assert.NotNull(accountArg.SuggestedValues);\n    Assert.Contains(\"account1\", accountArg.SuggestedValues.Select(v => v.Name));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Resources for Azure Key Vault in PowerShell\nDESCRIPTION: This snippet demonstrates how to connect to an Azure account and create test resources for Azure Key Vault using the New-TestResources.ps1 script. It includes setting up a service principal and specifying a subscription.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-AzAccount -Subscription 'YOUR SUBSCRIPTION ID'\neng\\common\\TestResources\\New-TestResources.ps1 keyvault\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication Failures in Azure Commands\nDESCRIPTION: Unit test for handling authentication failures in Azure CLI commands. Verifies proper error messages and status codes are returned when authentication fails.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task ExecuteAsync_WithAuthFailure_ReturnsUnauthorized()\n{\n    // Arrange\n    var service = _serviceProvider.GetRequiredService<IStorageService>();\n    service.ListContainers(Arg.Any<string>(), Arg.Any<string>())\n        .Throws(new AuthenticationFailedException(\"Not authenticated\"));\n\n    // Act\n    var result = await _command.ExecuteAsync(_context, _parser);\n\n    // Assert\n    Assert.Equal(401, result.Status);\n    Assert.Contains(\"Please run 'az login'\", result.Message);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Argument Creation in C#\nDESCRIPTION: Demonstrates best practices for implementing type-safe argument creation in Azure MCP commands.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nprotected ArgumentBuilder<TArgs> CreateResourceArgument()\n{\n    return ArgumentBuilder<TArgs>\n        .Create(ArgumentDefinitions.Service.Resource.Name, ArgumentDefinitions.Service.Resource.Description)\n        .WithValueAccessor(args => args.Resource ?? string.Empty)\n        .WithSuggestedValuesLoader(async (context, args) =>\n        {\n            if (string.IsNullOrEmpty(args.Subscription)) return [];\n            var service = context.GetService<IServiceName>();\n            var resources = await service.GetResources(args.Subscription);\n            return resources?.Select(r => new ArgumentOption { Name = r, Id = r }).ToList() ?? [];\n        })\n        .WithIsRequired(ArgumentDefinitions.Service.Resource.Required);\n}\n```\n\n----------------------------------------\n\nTITLE: Monitor Operations in Bash\nDESCRIPTION: Commands for Azure Monitor operations including listing workspaces, tables, and querying logs using KQL queries.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# List Log Analytics workspaces in a subscription\nazmcp monitor workspace list --subscription <subscription>\n\n# List tables in a Log Analytics workspace\nazmcp monitor table list --subscription <subscription> --workspace <workspace> --resource-group <resource-group>\n\n# Query logs from Azure Monitor using KQL\nazmcp monitor log query --subscription <subscription> \\\n                        --workspace <workspace> \\\n                        --table-name <table-name> \\\n                        --query \"<kql-query>\" \\\n                        [--hours <hours>] \\\n                        [--limit <limit>]\n\n# Examples:\n# Query logs from a specific table\nazmcp monitor log query --subscription <subscription> \\\n                        --workspace <workspace> \\\n                        --table-name \"AppEvents_CL\" \\\n                        --query \"| order by TimeGenerated desc\"\n```\n\n----------------------------------------\n\nTITLE: Executing Merge Proxy Tags Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to run the merge-proxy-tags.ps1 script to combine proxy tags. It requires PowerShell 6+ and assumes the script is located in the eng/common/testproxy/scripts/tag-merge/ directory of the repository.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/scripts/tag-merge/README.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncd \"path/to/language/repo/root\"\n./eng/common/testproxy/scripts/tag-merge/merge-proxy-tags.ps1 sdk/storage/azure-storage-blob/assets.json integration/example/storage_feature_addition2 integration/example/storage_feature_addition1\ntest-proxy push -a sdk/storage/azure-storage-blob/assets.json\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure in JSON\nDESCRIPTION: Standardized JSON structure for error responses including status code, message, results, and argument details.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": 404,\n    \"message\": \"Storage container not found. Please check the container name and try again.\",\n    \"results\": null,\n    \"arguments\": [\n        {\n            \"name\": \"container\",\n            \"description\": \"Name of the container\",\n            \"value\": \"missing-container\",\n            \"required\": true,\n            \"suggestedValues\": [\"container1\", \"container2\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Container List Command in C#\nDESCRIPTION: Implements the ContainersListCommand class for listing containers in Azure Storage. It handles command-line arguments, executes the list operation, and processes the results.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace AzureMcp.Commands.Storage;\n\npublic class ContainersListCommand : BaseStorageCommand\n{\n    public ContainersListCommand() : base()\n    {\n        RegisterArgumentChain<ContainersListArguments>(\n            CreateAccountArgument<ContainersListArguments>(GetAccountOptions)\n        );\n    }\n\n    public override Command GetCommand()\n    {\n        var command = new Command(\n            \"list\",\n            \"List all containers in a storage account.\");\n\n        AddBaseOptionsToCommand(command);\n        return command;\n    }\n\n    public override async Task<CommandResponse> ExecuteAsync(CommandContext context, object commandOptions)\n    {\n        var parseResult = (System.CommandLine.Parsing.ParseResult)commandOptions;\n        var options = ParseOptions<ContainersListArguments>(parseResult);\n\n        try\n        {\n            if (!await ProcessArgumentChain(context, args))\n            {\n                return context.Response;\n            }\n\n            var storageService = context.GetService<IStorageService>();\n            var containers = await storageService.ListContainers(\n                options.Account!,\n                options.Subscription!,\n                options.TenantId,\n                options.RetryPolicy);\n\n            context.Response.Results = containers?.Count > 0 ? \n                new { containers } : \n                null;\n        }\n        catch (Exception ex)\n        {\n            HandleException(context.Response, ex);\n        }\n\n        return context.Response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cosmos DB Operations in Bash\nDESCRIPTION: Commands for Cosmos DB operations including listing accounts, databases, containers, and querying items.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# List Cosmos DB accounts in a subscription\nazmcp cosmos account list --subscription <subscription>\n\n# List databases in a Cosmos DB account\nazmcp cosmos database list --subscription <subscription> --account-name <account-name>\n\n# List containers in a Cosmos DB database\nazmcp cosmos database container list --subscription <subscription> --account-name <account-name> --database-name <database-name>\n\n# Query items in a Cosmos DB container\nazmcp cosmos database container item query --subscription <subscription> \\\n                       --account-name <account-name> \\\n                       --database-name <database-name> \\\n                       --container-name <container-name> \\\n                       [--query \"SELECT * FROM c\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Test Resources Expiration in PowerShell\nDESCRIPTION: This snippet shows how to use the Update-TestResources.ps1 script to extend the expiration time of test resources for Azure Key Vault. This is useful when you need more time for testing before resources are automatically deleted.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-TestResources.ps1 keyvault\n```\n\n----------------------------------------\n\nTITLE: Defining Command Structure in C#\nDESCRIPTION: Demonstrates the basic structure of an azmcp command, showing the service, resource, and operation components.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nazmcp <service> <resource> <operation>\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage-Specific Base Command in Azure CLI\nDESCRIPTION: Base implementation for Azure Storage-specific commands with account management functionality. Extends SubscriptionCommand with storage-specific features and argument handling.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class BaseStorageCommand<T> : SubscriptionCommand<T>\n    where T : BaseStorageArguments, new()\n{\n    protected readonly Option<string> _accountOption = ArgumentDefinitions.Storage.Account.ToOption();\n\n    protected override void RegisterOptions(Command command)\n    {\n        base.RegisterOptions(command);\n        command.AddOption(_accountOption);\n    }\n\n    protected override void RegisterArguments()\n    {\n        base.RegisterArguments();\n        AddArgument(CreateAccountArgument());\n    }\n\n    protected ArgumentBuilder<T> CreateAccountArgument()\n    {\n        return ArgumentBuilder<T>\n            .Create(ArgumentDefinitions.Storage.Account.Name,\n                   ArgumentDefinitions.Storage.Account.Description)\n            .WithValueAccessor(args => args.Account ?? string.Empty)\n            .WithSuggestedValuesLoader(GetStorageAccounts)\n            .WithIsRequired(ArgumentDefinitions.Storage.Account.Required);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating X509 Certificates with V3 Extensions in PowerShell\nDESCRIPTION: Demonstrates generating a certificate with V3 extensions, including Subject Alternative Names, Key Usage flags, and TLS capabilities. This example shows how to create a CA certificate suitable for TLS with specific key usage permissions and format it as both a PEM certificate with PKCS#8 private key and a Base64-encoded certificate.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/scripts/X509Certificate2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name eng/scripts/X509Certificate2.psm1 # assumes $PWD is repo root\n\n$cert2 = New-X509Certificate2 -SubjectName 'CN=Azure SDK' -SubjectAlternativeNames (New-X509Certificate2SubjectAlternativeNames -EmailAddress azuresdk@microsoft.com) -KeyUsageFlags KeyEncipherment, NonRepudiation, DigitalSignature -CA -TLS -ValidDays 3652\n\n$PemCertificateWithV3Extensions = ($cert2 | Format-X509Certificate2 -Type Certificate) + \"`n\" + ($cert2 | Format-X509Certificate2 -Type Pkcs8)\n$CertificateWithV3ExtensionsBase64 = $cert2 | Format-X509Certificate2 -Type CertificateBase64\n```\n\n----------------------------------------\n\nTITLE: Updating README.md Documentation for Azure MCP\nDESCRIPTION: Demonstrates how to document a new command in the README.md file, including the command structure and example usage.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#### Resource Group Operations\n# List resource groups in a subscription\nazmcp groups list --subscription <subscription> [--tenant-id <tenant-id>]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Query logs from a specific table\nazmcp monitor logs query --subscription <subscription> \\\n                        --workspace-id <workspace-id> \\\n                        --table \"AppEvents_CL\" \\\n                        --query \"| order by TimeGenerated desc\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Base Command Class in Azure CLI\nDESCRIPTION: Abstract base implementation of IBaseCommand providing common functionality for Azure CLI commands. Includes command initialization, argument management, and error handling.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class BaseCommand : IBaseCommand\n{\n    protected readonly HashSet<string> _registeredArgumentNames = [];\n    protected readonly List<ArgumentDefinition<string>> _arguments = [];\n    private readonly Command? _command;\n\n    protected BaseCommand()\n    {\n        _command = new Command(GetCommandName(), GetCommandDescription());\n        RegisterOptions(_command);\n        RegisterArguments();\n    }\n\n    protected abstract string GetCommandName();\n    protected abstract string GetCommandDescription();\n    protected virtual void RegisterOptions(Command command) { }\n    protected virtual void RegisterArguments() { }\n    protected virtual void HandleException(CommandResponse response, Exception ex)\n    {\n        response.Status = GetStatusCode(ex);\n        response.Message = GetErrorMessage(ex);\n        response.Results = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Build Verification Script\nDESCRIPTION: PowerShell script command for building and verifying changes locally with specific build parameters.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# Build and verify the changes locally\n./eng/scripts/Build-Local.ps1 -UsePaths -VerifyNpx\n```\n\n----------------------------------------\n\nTITLE: Removing Test Resources for Azure Key Vault in PowerShell\nDESCRIPTION: This snippet demonstrates how to use the Remove-TestResources.ps1 script to immediately delete test resources created for Azure Key Vault. The -Force parameter is used to skip confirmation prompts.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 keyvault -Force\n```\n\n----------------------------------------\n\nTITLE: Defining AdditionalParameters Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the AdditionalParameters parameter, which are optional key-value pairs of parameters to pass to the ARM template(s) and pre-post scripts.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Registering Command Group for Storage Operations in C#\nDESCRIPTION: Shows how to register a command group for storage operations, including a subgroup for container operations and the ContainerListCommand.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void RegisterCommandGroup()\n{\n    var storage = new CommandGroup(\"storage\", \"Storage operations\");\n    _rootGroup.AddSubGroup(storage);\n\n    var container = new CommandGroup(\n        \"container\",\n        \"Storage container operations\");\n    storage.AddSubGroup(container);\n\n    container.AddCommand(\"list\", new Storage.ContainerListCommand());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Resources with Additional Parameters in PowerShell\nDESCRIPTION: This snippet shows how to use the New-TestResources.ps1 script with additional parameters to control resource configuration. In this example, it enables HSM for Azure Key Vault.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 keyvault -AdditionalParameters @{enableHsm = $true}\n```\n\n----------------------------------------\n\nTITLE: Defining TestApplicationSecret Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the TestApplicationSecret parameter, which is an optional service principal secret used to authenticate the test runner against deployed resources. It is passed to the ARM template as 'testApplicationSecret'.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Generating and Formatting Basic X509 Certificates in PowerShell\nDESCRIPTION: Creates a self-signed X509 certificate with standard attributes and demonstrates how to format it in different encodings (Certificate Base64, PKCS#1 PEM, PKCS#12 Base64). The certificate is valid for 10 years (3652 days) and includes standard subject information.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/scripts/X509Certificate2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name ./eng/common/scripts/X509Certificate2 # assumes $PWD is repo root\n\n$cert1 = New-X509Certificate2 -SubjectName 'E=opensource@microsoft.com, CN=Azure SDK, OU=Azure SDK, O=Microsoft, L=Redmond, S=WA, C=US' -ValidDays 3652\n\n$CaPublicKeyBase64 = $cert1 | Format-X509Certificate2 -Type CertificateBase64\n$CaPrivateKeyPem = $cert1 | Format-X509Certificate2 -Type Pkcs1\n$CaKeyPairPkcs12Base64 = $cert1 | Format-X509Certificate2 -Type Pkcs12Base64\n```\n\n----------------------------------------\n\nTITLE: Azure Pipeline YAML for Test Resource Management\nDESCRIPTION: This YAML snippet demonstrates how to include test resource deployment and removal steps in an Azure Pipeline. It uses templates for deploying and removing test resources, which should be linked to the 'Secrets for Resource Provisioner' variable group.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- template: /eng/common/TestResources/deploy-test-resources.yml\n  parameters:\n    ServiceDirectory: '${{ parameters.ServiceDirectory }}'\n\n# Run tests\n\n- template: /eng/common/TestResources/remove-test-resources.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Command Class for Azure CLI\nDESCRIPTION: Generic implementation of global Azure command functionality including tenant and authentication method handling. Extends BaseCommand with Azure-specific features.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class GlobalCommand<TArgs> : BaseCommand\n    where TArgs : GlobalArguments, new()\n{\n    protected readonly Option<string> _tenantOption = ArgumentDefinitions.Common.Tenant.ToOption();\n    protected readonly Option<AuthMethod> _authMethodOption = ArgumentDefinitions.Common.AuthMethod.ToOption();\n\n    protected override void RegisterOptions(Command command)\n    {\n        base.RegisterOptions(command);\n        command.AddOption(_tenantOption);\n        command.AddOption(_authMethodOption);\n        // Add retry options...\n    }\n\n    protected override void RegisterArguments()\n    {\n        base.RegisterArguments();\n        AddArgument(CreateAuthMethodArgument());\n        AddArgument(CreateTenantArgument());\n        foreach (var argument in CreateRetryArguments())\n        {\n            AddArgument(argument);\n        }\n    }\n\n    protected virtual async Task<List<ArgumentOption>> GetAuthMethodOptions(CommandContext context) =>\n        await Task.FromResult(AuthMethodArgument.GetAuthMethodOptions());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating X509 Certificate in PowerShell Pre-Script\nDESCRIPTION: This snippet from a test-resources-pre.ps1 file shows how to create an X509 certificate and add its details to the $templateFileParameters variable. This is used to pass data to the test-resources.json file for ARM template deployment.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module -Name ./eng/common/scripts/X509Certificate2\n$cert = New-X509Certificate2 -SubjectName 'E=opensource@microsoft.com, CN=Azure SDK, OU=Azure SDK, O=Microsoft, L=Frisco, S=TX, C=US' -ValidDays 3652\n# Create new entries in $templateFileParameters\n$templateFileParameters['ConfidentialLedgerPrincipalPEM'] = Format-X509Certificate2 -Certificate $cert\n$templateFileParameters['ConfidentialLedgerPrincipalPEMPK'] = Format-X509Certificate2 -Type Pkcs8 -Certificate $cert\n```\n\n----------------------------------------\n\nTITLE: Using Copilot to Generate Azure MCP Commands\nDESCRIPTION: Command to use with GitHub Copilot Chat in Agent mode to generate new commands for Azure MCP. This leverages reference documentation to create command implementations based on a specified service, resource, and operation.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nExecute in Copilot Chat:\n\"create [service] [resource] [operation] command using #new-command.md as a reference\"\n```\n\n----------------------------------------\n\nTITLE: Removing Azure Test Resources by Resource Group Name\nDESCRIPTION: This snippet illustrates how to remove test resources by specifying a resource group name without using provisioner authentication. It includes options for CI environments and various Azure-specific parameters.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-22_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 [-ResourceGroupName <String>] [-SubscriptionId <String>]\n [[-ServiceDirectory] <String>] [-Environment <String>] [-CI] [-ResourceType <String>] [-ServicePrincipalAuth]\n [-Force] [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing Azure Test Resources by Resource Group Name with Provisioner\nDESCRIPTION: This snippet shows how to remove test resources by specifying a resource group name and using provisioner authentication. It includes parameters for CI environments and additional Azure-specific options.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 [-ResourceGroupName <String>] -TenantId <String> [-SubscriptionId <String>]\n -ProvisionerApplicationId <String> [-ProvisionerApplicationSecret <String>] [[-ServiceDirectory] <String>]\n [-Environment <String>] [-CI] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]\n [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Arguments for Container Listing in C#\nDESCRIPTION: Defines a ContainersListArguments class that inherits from BaseStorageArguments and adds a Container property. This class is used to pass arguments for listing containers in Azure Storage.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace AzureMcp.Arguments.Storage;\n\npublic class ContainersListArguments : BaseStorageArguments\n{\n    public string? Container { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Platform and Executing CLI Commands in JavaScript\nDESCRIPTION: The index.js file in the @azure/mcp package is responsible for detecting the platform and CPU architecture, loading the appropriate platform-specific package, and passing CLI arguments to the platform package's index.js file. It serves as the entry point for npx calls and global installations.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/npm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// index.js\n// Code for detecting platform and CPU architecture\n// Loading platform-specific package\n// Passing CLI arguments to platform package's index.js\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Key Vault in PowerShell\nDESCRIPTION: This snippet shows the output of environment variables generated by the New-TestResources.ps1 script for Azure Key Vault. It includes variables for tenant ID, client ID, client secret, subscription ID, resource group, location, SKU, and Key Vault URL.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n${env:KEYVAULT_TENANT_ID} = '<<secret>>'\n${env:KEYVAULT_CLIENT_ID} = '<<secret>>'\n${env:KEYVAULT_CLIENT_SECRET} = '<<secret>>'\n${env:KEYVAULT_SUBSCRIPTION_ID} = 'YOUR SUBSCRIPTION ID'\n${env:KEYVAULT_RESOURCE_GROUP} = 'rg-myusername'\n${env:KEYVAULT_LOCATION} = 'westus'\n${env:KEYVAULT_SKU} = 'premium'\n${env:AZURE_KEYVAULT_URL} = '<<url>>'\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Resource Group with Subscription ID in PowerShell\nDESCRIPTION: This example shows how to update a specific resource group named 'rg-userkeyvault' in a given subscription. It sets the deletion time to 48 hours from the current time.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/Update-TestResources.ps1.md#2025-04-22_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-TestResources.ps1 -ResourceGroupName rg-userkeyvault -Subscription fa9c6912-f641-4226-806c-5139584b89ca\n```\n\n----------------------------------------\n\nTITLE: Persisting Azure Key Vault Environment Variables in PowerShell\nDESCRIPTION: This snippet demonstrates how to persistently set environment variables for Azure Key Vault using the setx command in PowerShell. This allows the variables to be available in future terminal sessions and applications.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nsetx KEYVAULT_TENANT_ID ${env:KEYVAULT_TENANT_ID}\nsetx KEYVAULT_CLIENT_ID ${env:KEYVAULT_CLIENT_ID}\nsetx KEYVAULT_CLIENT_SECRET ${env:KEYVAULT_CLIENT_SECRET}\nsetx KEYVAULT_SUBSCRIPTION_ID ${env:KEYVAULT_SUBSCRIPTION_ID}\nsetx KEYVAULT_RESOURCE_GROUP ${env:KEYVAULT_RESOURCE_GROUP}\nsetx KEYVAULT_LOCATION ${env:KEYVAULT_LOCATION}\nsetx KEYVAULT_SKU ${env:KEYVAULT_SKU}\nsetx AZURE_KEYVAULT_URL ${env:AZURE_KEYVAULT_URL}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service-Specific Exception Handling in C#\nDESCRIPTION: Custom error message handler that provides specific messages based on exception types from different Azure services like Cosmos DB, Storage, and Monitor.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override string GetErrorMessage(Exception ex) => ex switch\n{\n    CosmosException cosmosEx when cosmosEx.Status == 404 => \n        $\"Cosmos DB container not found. Please check the container name and try again.\",\n    StorageException storageEx when storageEx.ErrorCode == \"ContainerNotFound\" =>\n        $\"Storage container not found. Please check the container name and try again.\",\n    MonitorException monitorEx when monitorEx.Code == \"ResourceNotFound\" =>\n        $\"Log Analytics workspace not found. Please check the workspace ID and try again.\",\n    _ => base.GetErrorMessage(ex)\n};\n```\n\n----------------------------------------\n\nTITLE: Updating KeyVault Test Resources with DeleteAfterHours in PowerShell\nDESCRIPTION: This example demonstrates updating a KeyVault resource group to be deleted after 24 hours. It uses the ServiceDirectory parameter to specify the 'keyvault' directory.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/Update-TestResources.ps1.md#2025-04-22_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-TestResources.ps1 keyvault -DeleteAfterHours 24\n```\n\n----------------------------------------\n\nTITLE: Defining OutFile Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the OutFile parameter, which saves test environment settings into a .env file next to test resources template. The contents of the file are protected via the .NET Data Protection API (DPAPI).\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining Certificate Parameters in ARM Template JSON\nDESCRIPTION: This JSON snippet from a test-resources.json file demonstrates how to define parameters for certificate details that are passed from the pre-script. These parameters can be used in the ARM template for resource deployment.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"_comment\": \"Other required parameters would go here... (this is not part of the actual test-resources.json)\",\n    \"ConfidentialLedgerPrincipalPEM\": {\n      \"type\": \"string\",\n      \"metadata\": {\n        \"description\": \"The certificate to configure as a certBasedSecurityPrincipal.\"\n      }\n    },\n    \"ConfidentialLedgerPrincipalPEMPK\": {\n      \"type\": \"string\",\n      \"metadata\": {\n        \"description\": \"The certificate to configure as a certBasedSecurityPrincipal.\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Confirm Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the Confirm parameter, which prompts for confirmation before running the cmdlet.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Output for Azure MCP Package in PowerShell\nDESCRIPTION: This snippet demonstrates how to set the DEBUG environment variable to 'true' and run the Azure MCP package with the --version flag using NPX in PowerShell. This allows viewing debug text from the wrapper and platform packages.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/npm/TROUBLESHOOTING.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n> $env:DEBUG='true'   #`export DEBUG=true` in bash\n> npx --yes @azure/mcp@latest --version\n```\n\n----------------------------------------\n\nTITLE: Defining SuppressVsoCommands Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the SuppressVsoCommands parameter, which suppresses printing out secrets to logs with Azure Pipelines log commands that cause them to be redacted. This is useful for CI environments that don't support this feature.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: ($null -eq $env:SYSTEM_TEAMPROJECTID)\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Resource Group Operations in Bash\nDESCRIPTION: Command to list resource groups in an Azure subscription.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# List resource groups in a subscription\nazmcp group list --subscription <subscription>\n```\n\n----------------------------------------\n\nTITLE: Running Azure MCP Tests with PowerShell\nDESCRIPTION: Command to run tests with coverage for the Azure MCP project using PowerShell. This script should be executed to validate code changes before submitting a pull request.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: pwsh\nCODE:\n```\n# Run tests with coverage\n./eng/scripts/Test-Code.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing Platform-Specific Binary in JavaScript\nDESCRIPTION: The index.js file in platform-specific packages reads its own package.json to discover the file name for its executable, then calls that executable with all the passed-in arguments. This allows for direct execution of the platform-specific binary when invoked through npx or global installation.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/npm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// index.js in platform-specific package\n// Code for reading package.json\n// Discovering executable file name\n// Calling executable with passed-in arguments\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script - Basic Usage\nDESCRIPTION: Example of running the migration script from within a service directory in the language repository\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# if downloading the file singly, cd to the directory containing generate-assets-json.ps1\ncd \"<target-language-repo>/sdk/<service>\"\n<path-to-transition-script>/generate-assets-json.ps1\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Inspector\nDESCRIPTION: Launches the ModelContextProtocol inspector standalone for SSE mode.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Commands/Server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx @modelcontextprotocol/inspector\n```\n\n----------------------------------------\n\nTITLE: Conflicting assets.json Example in Git Merge\nDESCRIPTION: An example of a conflicting assets.json file during a Git merge, showing the conflict markers and differing Tag values.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/scripts/resolve-asset-conflict/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AssetsRepo\": \"Azure/azure-sdk-assets-integration\",\n  \"AssetsRepoPrefixPath\": \"python\",\n  \"TagPrefix\": \"python/storage/azure-storage-blob\",\n<<<<<<< HEAD\n  \"Tag\": \"integration/example/storage_feature_addition2\"\n=======\n  \"Tag\": \"integration/example/storage_feature_addition1\"\n>>>>>>> test-storage-tag-combination\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Inspector Timeout Configuration URL\nDESCRIPTION: URL pattern for configuring the timeout value in the MCP inspector web interface.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Commands/Server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:5173/?timeout=2000000000#resources\n```\n\n----------------------------------------\n\nTITLE: Registering Service Dependency in C#\nDESCRIPTION: Demonstrates how to register a new service dependency in the Program.cs file of the Azure MCP project.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton<IYourService, YourService>();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script - Tool Integration\nDESCRIPTION: Example of running the migration script with initial push for local test-proxy tool integration\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-22_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# calling transition script against tool, given local clones of azure-sdk-for-java and azure-sdk-tools\ncd c:/src/azure-sdk-for-java/sdk/attestation\n<path-to-transition-script>/generate-assets-json.ps1 -InitialPush\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure MCP Server in VS Code\nDESCRIPTION: JSON configuration for installing the Azure MCP Server in Visual Studio Code. This snippet defines the server configuration in the mcp.json file.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"servers\": {\n    \"Azure MCP Server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@azure/mcp@latest\",\n        \"server\",\n        \"start\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Transition Script - PowerShell\nDESCRIPTION: PowerShell command to download the generate-assets-json.ps1 script from Azure SDK tools repository\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-WebRequest -OutFile \"generate-assets-json.ps1\" https://raw.githubusercontent.com/Azure/azure-sdk-tools/main/eng/common/testproxy/onboarding/generate-assets-json.ps1\n```\n\n----------------------------------------\n\nTITLE: Adding Required Using Statements in C#\nDESCRIPTION: Shows the necessary using statement to include for a new service in the Program.cs file.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing AzureMcp.Services.Azure.YourService;  // For YourService implementation\n```\n\n----------------------------------------\n\nTITLE: Updating MCP Server Service Registration in C#\nDESCRIPTION: Illustrates how to update the ConfigureServices method in ServiceStartCommand.cs to include a new service registration.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nprivate static void ConfigureServices(IServiceCollection services, IServiceProvider rootServiceProvider)\n{\n    services.AddSingleton(rootServiceProvider.GetRequiredService<CommandFactory>());\n    services.AddSingleton(rootServiceProvider.GetRequiredService<ISubscriptionService>());\n    services.AddSingleton(rootServiceProvider.GetRequiredService<IStorageService>());\n    services.AddSingleton(rootServiceProvider.GetRequiredService<ICosmosService>());\n    services.AddSingleton(rootServiceProvider.GetRequiredService<IMonitorService>());\n    services.AddSingleton(rootServiceProvider.GetRequiredService<IResourceGroupService>());\n    services.AddSingleton(rootServiceProvider.GetRequiredService<IYourService>()); // Add your service here\n}\n```\n\n----------------------------------------\n\nTITLE: Continuing Git Cherry-Pick After Conflict Resolution\nDESCRIPTION: This snippet demonstrates how to continue the Git cherry-pick operation after resolving conflicts. It assumes that the conflicts have been resolved and the changes have been staged using git add.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/scripts/tag-merge/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nC:/repo/azure-sdk-for-python/.assets/eDscgL1p9G/python [???]|>git cherry-pick --continue\n[detached HEAD 236e234] add the same file names as what was present in tag integration/example/storage_feature_addition2. In this case, the files themselves are just different enough from integration/example/storage_feature_addition2 that we should intentionally cause a conflict\n Date: Fri Dec 1 16:57:52 2023 -0800\n 1 file changed, 2 insertions(+), 2 deletions(-)\n```\n\n----------------------------------------\n\nTITLE: Declaring Storage Service Interface Method in C#\nDESCRIPTION: Defines an interface method ListContainers in IStorageService for listing containers in an Azure Storage account. It takes account name, subscription ID, optional tenant ID, and retry policy as parameters.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IStorageService\n{\n    Task<List<string>> ListContainers(\n        string accountName,\n        string subscriptionId,\n        string? tenantId = null,\n        RetryPolicyArguments? retryPolicy = null);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Test Resources with ResourceGroup Parameters in PowerShell\nDESCRIPTION: This snippet shows the ResourceGroup parameter set for updating test resources. It allows specifying a ResourceGroupName, SubscriptionId, and DeleteAfterHours.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/Update-TestResources.ps1.md#2025-04-22_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-TestResources.ps1 [-ResourceGroupName <String>] [-SubscriptionId <String>] [-DeleteAfterHours <Int32>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Resolving Git Conflicts in Bash\nDESCRIPTION: This snippet shows the process of resolving Git conflicts that may occur during the merge process. It includes checking the status of conflicted files, resolving conflicts, and continuing the cherry-pick operation.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/scripts/tag-merge/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nC:/repo/azure-sdk-for-python/.assets/eDscgL1p9G/python |>git status\nHEAD detached from python/storage/azure-storage-blob_12c8154ae2\nYou are currently cherry-picking commit 1fd0865.\n  (fix conflicts and run \"git cherry-pick --continue\")\n  (use \"git cherry-pick --skip\" to skip this patch)\n  (use \"git cherry-pick --abort\" to cancel the cherry-pick operation)\n\nYou are in a sparse checkout with 100% of tracked files present.\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n        both added:      sdk/storage/azure-storage-blob/tests/recordings/test_append_blob_async.pyTestStorageAppendBlobAsynctest_append_blob_from_text_new.json\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n----------------------------------------\n\nTITLE: Updating Test Resources with Default Parameters in PowerShell\nDESCRIPTION: This snippet shows the default parameter set for updating test resources. It requires a ServiceDirectory and allows optional parameters for BaseName, SubscriptionId, and DeleteAfterHours.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/Update-TestResources.ps1.md#2025-04-22_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-TestResources.ps1 [-ServiceDirectory] <String> [-BaseName <String>] [-SubscriptionId <String>]\n [-DeleteAfterHours <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Executing Merge Proxy Tags Script in PowerShell\nDESCRIPTION: PowerShell commands to navigate to the repo root, perform a Git merge, and then run the resolve-asset-conflict.ps1 script to automatically resolve conflicting tag values in the assets.json file.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/scripts/resolve-asset-conflict/README.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# including context to get into a merge conflict\ncd \"path/to/language/repo/root\"\ngit checkout base-branch\ngit merge target-branch\n# auto resolve / merge conflicting tag values\n./eng/common/testproxy/scripts/resolve-asset-conflict/resolve-asset-conflict.ps1 sdk/storage/azure-storage-blob/assets.json\n# user pushes\ntest-proxy push -a sdk/storage/azure-storage-blob/assets.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Matrix Batching in YAML\nDESCRIPTION: This YAML snippet shows how to disable matrix batching for a specific configuration in the pullrequest pipeline by setting PRBatching to false.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/scripts/job-matrix/pullrequest-faq.md#2025-04-22_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nMatrixConfigs:\n  - Name: version_overrides_tests\n    Path: sdk/core/version-overrides-matrix.json\n    Selection: all\n    PRBatching: false # the new key\n    GenerateVMJobs: true\n```\n\n----------------------------------------\n\nTITLE: Pseudocode for Package Batching in Pullrequest Pipeline\nDESCRIPTION: This pseudocode explains how packages are batched for testing in the pullrequest pipeline, including the logic for direct and indirect changes.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/scripts/job-matrix/pullrequest-faq.md#2025-04-22_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nbatchSize = configurable # of packages in each test batch, defaults to 10\ndirectPackages = the list of packages with directly changed code in the PR\n\ngroup the direct packages by matrix configuration\n  - each matrix contribution\n    - group by batch size\n      - assign the matrix to the full batch\n      - if multiple batches exist, add suffix\n```\n\n----------------------------------------\n\nTITLE: Creating Arguments in C# for Azure MCP Commands\nDESCRIPTION: Shows two methods for creating arguments in Azure MCP commands: using base command helper methods and creating custom arguments.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nRegisterArgumentChain(\n    CreateAccountArgument(GetAccountOptions),\n    CreateContainerArgument(GetContainerOptions)\n);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nArgumentChain<TArgs>\n    .Create(\"name\", \"description\")\n    .WithValueAccessor(args => args.Property)\n    .WithValueLoader(async (context, args) => await LoadValues())\n    .WithIsRequired(true);\n```\n\n----------------------------------------\n\nTITLE: Python Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Python files using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: C Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for C files using multiline comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License\n */\n```\n\n----------------------------------------\n\nTITLE: Batchfile Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Batchfile scripts using double-colon comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_0\n\nLANGUAGE: Batchfile\nCODE:\n```\n:: Copyright (c) Microsoft Corporation.\n:: Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Starting the MCP Server in Bash\nDESCRIPTION: Command to start the Azure MCP server with an optional transport parameter.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Start the MCP Server\nazmcp server start [--transport <transport>]\n```\n\n----------------------------------------\n\nTITLE: Ruby Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Ruby files using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_30\n\nLANGUAGE: Ruby\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: SQL Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for SQL files using double-dash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_34\n\nLANGUAGE: SQL\nCODE:\n```\n-- Copyright (c) Microsoft Corporation.\n-- Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Haskell Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Haskell files using block comment syntax, including a module declaration.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_13\n\nLANGUAGE: Haskell\nCODE:\n```\n{-\nCopyright : (c) Microsoft Corporation.\nLicense : MIT\n-}\nmodule <module-name>\n```\n\n----------------------------------------\n\nTITLE: Unit Test Structure for Commands\nDESCRIPTION: Example of unit test implementation for container list command, showing setup, constructor testing, and execution testing.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ContainerListCommandTests\n{\n    private readonly IServiceProvider _serviceProvider;\n    private readonly ContainerListCommand _command;\n    private readonly CommandContext _context;\n    private readonly ParseResult _parser;\n\n    public ContainerListCommandTests()\n    {\n        var storageService = Substitute.For<IStorageService>();\n        var collection = new ServiceCollection()\n            .AddSingleton(storageService);\n\n        _serviceProvider = collection.BuildServiceProvider();\n        _command = new();\n        _context = new(_serviceProvider);\n        _parser = new(_command.GetCommand());\n    }\n\n    [Fact]\n    public void Constructor_InitializesCommandCorrectly()\n    {\n        // Assert\n        Assert.Equal(\"list\", _command.GetCommand().Name);\n        Assert.NotEmpty(_command.GetCommand().Description);\n    }\n\n    [Fact]\n    public async Task ExecuteAsync_WithValidInput_ReturnsSuccess()\n    {\n        // Arrange\n        var storageService = _serviceProvider.GetRequiredService<IStorageService>();\n        storageService.ListContainers(\n            Arg.Any<string>(),\n            Arg.Any<string>(),\n            Arg.Any<string>())\n            .Returns([]);\n\n        // Act\n        var result = await _command.ExecuteAsync(_context, _parser);\n\n        // Assert\n        Assert.Equal(200, result.Status);\n        Assert.NotNull(result.Results);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArmTemplateParameters Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the ArmTemplateParameters parameter, which are optional key-value pairs of parameters to pass to the ARM template(s).\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: GLSL Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for GLSL files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_10\n\nLANGUAGE: GLSL\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Defining EnvironmentVariables Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the EnvironmentVariables parameter, which are optional key-value pairs of parameters to set as environment variables to the shell.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: @{}\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Julia Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Julia files using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_17\n\nLANGUAGE: Julia\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Defining ServicePrincipalAuth Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the ServicePrincipalAuth parameter, which uses the provisioner SP credentials to deploy and pass the test SP credentials to tests. If not set, it provisions an SP with user credentials and passes the new SP to tests.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Groovy Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Groovy files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_12\n\nLANGUAGE: Groovy\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in Azure CLI Commands with xUnit\nDESCRIPTION: Demonstrates unit tests for command error paths including missing arguments and service errors. Uses xUnit test framework with async/await patterns for testing command execution failures.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic async Task ExecuteAsync_WithMissingArguments_ReturnsBadRequest()\n{\n    // Arrange\n    _parser = _parser.WithOption(_accountOption, string.Empty);\n\n    // Act\n    var result = await _command.ExecuteAsync(_context, _parser);\n\n    // Assert\n    Assert.Equal(400, result.Status);\n    Assert.Contains(\"Missing required arguments\", result.Message);\n}\n\n[Fact]\npublic async Task ExecuteAsync_WithServiceError_HandlesErrorCorrectly()\n{\n    // Arrange\n    var service = _serviceProvider.GetRequiredService<IStorageService>();\n    service.ListContainers(Arg.Any<string>(), Arg.Any<string>())\n        .Throws(new RequestFailedException(404, \"Not found\"));\n\n    // Act\n    var result = await _command.ExecuteAsync(_context, _parser);\n\n    // Assert\n    Assert.Equal(404, result.Status);\n    Assert.Contains(\"Not found\", result.Message);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TenantId Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the TenantId parameter, which is the tenant ID of a service principal when a provisioner is specified. The same Tenant ID is used for both Test Application and Provisioner Application.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: Provisioner\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Objective-C Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Objective-C files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_23\n\nLANGUAGE: Objective-C\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteAfterHours Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the DeleteAfterHours parameter, which is a positive integer number of hours from the current time to set the 'DeleteAfter' tag on the created resource group. It is used for CI automation.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 120\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: LLVM Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for LLVM files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_19\n\nLANGUAGE: LLVM\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Defining Location Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the Location parameter, which is an optional location where resources should be created. If left empty, the default is based on the cloud to which the template is being deployed.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Provisioner Parameter Set for New-TestResources.ps1\nDESCRIPTION: Parameter set for deploying test resources using a provisioner service principal, including mandatory parameters for tenant and provisioner authentication.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 [-BaseName <String>] [-ResourceGroupName <String>] [-ServiceDirectory] <String>\n [-TestResourcesDirectory <String>] [-TestApplicationId <String>] [-TestApplicationSecret <String>]\n [-TestApplicationOid <String>] -TenantId <String> [-SubscriptionId <String>]\n -ProvisionerApplicationId <String> [-ProvisionerApplicationOid <String>]\n [-ProvisionerApplicationSecret <String>] [-DeleteAfterHours <Int32>] [-Location <String>]\n [-Environment <String>] [-ResourceType <String>] [-ArmTemplateParameters <Hashtable>]\n [-AdditionalParameters <Hashtable>] [-EnvironmentVariables <Hashtable>] [-CI] [-Force] [-OutFile]\n [-SuppressVsoCommands] [-ServicePrincipalAuth] [-NewTestResourcesRemainingArguments <Object>]\n [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Force Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the Force parameter, which forces creation of resources instead of being prompted.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining WhatIf Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the WhatIf parameter, which shows what would happen if the cmdlet runs without actually running it.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressAction Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the ProgressAction parameter. The description for this parameter is not provided in the given content.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nType: ActionPreference\nParameter Sets: (All)\nAliases: proga\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Default Parameter Set for New-TestResources.ps1\nDESCRIPTION: Default parameter set for deploying test resources, including optional parameters for resource naming, service principal configuration, and resource management settings.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-TestResources.ps1 [-BaseName <String>] [-ResourceGroupName <String>] [-ServiceDirectory] <String>\n [-TestResourcesDirectory <String>] [-TestApplicationId <String>] [-TestApplicationSecret <String>]\n [-TestApplicationOid <String>] [-SubscriptionId <String>] [-DeleteAfterHours <Int32>] [-Location <String>]\n [-Environment <String>] [-ResourceType <String>] [-ArmTemplateParameters <Hashtable>]\n [-AdditionalParameters <Hashtable>] [-EnvironmentVariables <Hashtable>] [-CI] [-Force] [-OutFile]\n [-SuppressVsoCommands] [-ServicePrincipalAuth] [-NewTestResourcesRemainingArguments <Object>]\n [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Debugging NPX Execution of Azure MCP Package\nDESCRIPTION: This snippet shows how to run the Azure MCP package using NPX with the Node.js inspector enabled. It uses the --node-options flag to pass the --inspect-brk option, which pauses execution until a debugger is attached.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/npm/TROUBLESHOOTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx --node-options=\"--inspect-brk\" @azure/mcp@latest\n```\n\n----------------------------------------\n\nTITLE: Debug Output Example for Azure MCP Package\nDESCRIPTION: This snippet shows the expected debug output when running the Azure MCP package with DEBUG=true. It displays information about the platform package being loaded, command arguments, executable paths, and the package version.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/npm/TROUBLESHOOTING.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAttempting to require platform package: @azure/mcp-linux-x64\nAll args:\n0: /usr/bin/node\n1: /home/user/.npm/_npx/541454632b79112e/node_modules/.bin/azmcp\n2: --version\nAll args:\n0: --version\nFound executable in package.json: azmcp\nExecutable path: /home/user/.npm/_npx/541454632b79112e/node_modules/@azure/mcp-linux-x64/azmcp\nStarting /home/user/.npm/_npx/541454632b79112e/node_modules/@azure/mcp-linux-x64/azmcp\n0.0.6+90c3def5f15860420244db365c04eb302494da5b\nProcess exited with code: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure MCP Server for SSE in VS Code\nDESCRIPTION: JSON configuration for using the Azure MCP Server with Server-Sent Events (SSE) in Visual Studio Code. This snippet defines the SSE server configuration in the mcp.json file.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"servers\": {\n     \"Azure MCP Server\": {\n       \"type\": \"sse\",\n       \"url\": \"http://localhost:5008/sse\"\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Azure Test Resources with Default Parameters\nDESCRIPTION: This snippet shows the default parameter set for the Remove-TestResources.ps1 script. It allows specifying a base name, subscription ID, service directory, and other optional parameters to remove test resources.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 [-BaseName <String>] [-SubscriptionId <String>] [[-ServiceDirectory] <String>]\n [-Environment <String>] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]\n [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing Azure Test Resources with Provisioner Authentication\nDESCRIPTION: This snippet demonstrates the parameter set for removing test resources using a provisioner application for authentication. It requires a base name, tenant ID, and provisioner application ID, along with other optional parameters.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/Remove-TestResources.ps1.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-TestResources.ps1 -BaseName <String> -TenantId <String> [-SubscriptionId <String>]\n -ProvisionerApplicationId <String> [-ProvisionerApplicationSecret <String>] [[-ServiceDirectory] <String>]\n [-Environment <String>] [-ResourceType <String>] [-ServicePrincipalAuth] [-Force]\n [-RemoveTestResourcesRemainingArguments <Object>] [-ProgressAction <ActionPreference>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for TypeScript files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: C# Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for C# files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Error Response with Missing Arguments in JSON\nDESCRIPTION: Example JSON error response when required arguments are missing, showing status code, descriptive message, and suggested values for the missing arguments.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/docs/azmcp-commands.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 400,\n  \"message\": \"Missing required args\",\n  \"args\": [\n    {\n      \"name\": \"subscription\",\n      \"description\": \"Azure Subscription ID\",\n      \"command\": \"azmcp cosmos database list --subscription <subscription>\",\n      \"value\": \"<sub-id>\",\n      \"values\": []\n    },\n    {\n      \"name\": \"account-name\",\n      \"description\": \"Cosmos DB Account Name\",\n      \"command\": \"azmcp cosmos database list --account-name <account-name>\",\n      \"value\": \"\",\n      \"values\": [\n        {\n          \"name\": \"cosmosaccount1\",\n          \"id\": \"cosmosaccount1\"\n        }\n      ]\n    }\n  ],\n  \"duration\": 156\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for JavaScript files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Dart Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Dart files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Java Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Java files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: C++ Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for C++ files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Defining ProvisionerApplicationId Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the ProvisionerApplicationId parameter, which is an optional Application ID of the Azure Active Directory service principal to use for provisioning test resources. It requires specific permissions to the Microsoft Graph API.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: Provisioner\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: PHP Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for PHP files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Rust Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Rust files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_31\n\nLANGUAGE: Rust\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: F# Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for F# files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_9\n\nLANGUAGE: F#\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Defining TestApplicationOid Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the TestApplicationOid parameter, which is the Service Principal Object ID of the AAD Test Application. It is used to assign permissions to the AAD application for accessing tested features on live test resources.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: HTML Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for HTML files using HTML comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Copyright (c) Microsoft Corporation.\n Licensed under the MIT License. -->\n```\n\n----------------------------------------\n\nTITLE: TeX Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for TeX files using percent sign comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_35\n\nLANGUAGE: TeX\nCODE:\n```\n% Copyright (c) Microsoft Corporation.\n% Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionId Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the SubscriptionId parameter, which is an optional subscription ID to use for new resources when logging in as a provisioner. If not specified, one will be automatically selected by Connect-AzAccount cmdlet.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining CI Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the CI parameter, which indicates the script is run as part of a Continuous Integration / Continuous Deployment (CI/CD) build. Currently, only Azure Pipelines is supported.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: ($null -ne $env:SYSTEM_TEAMPROJECTID)\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining ProvisionerApplicationSecret Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the ProvisionerApplicationSecret parameter, which is a service principal secret used to provision test resources when a provisioner is specified. This value is not passed to the ARM template.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: Provisioner\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: OCaml Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for OCaml files using parenthesized asterisk comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_24\n\nLANGUAGE: OCaml\nCODE:\n```\n(* Copyright (c) Microsoft Corporation. *)\n(* Licensed under the MIT License. *)\n```\n\n----------------------------------------\n\nTITLE: Lua Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Lua files using double-dash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\n-- Copyright (c) Microsoft Corporation.\n-- Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Defining ProvisionerApplicationOid Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the ProvisionerApplicationOid parameter. The description for this parameter is not provided in the given content.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: Provisioner\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Code Style Examples in C#\nDESCRIPTION: Demonstration of good and bad coding practices, focusing on self-documenting code without comments.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/src/Docs/new-command.md#2025-04-22_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n// BAD - uses comments\n// Get the storage account client\nvar client = new StorageAccountClient(endpoint, credential);\n\n// GOOD - self-documenting code\nvar storageClient = new StorageAccountClient(endpoint, credential);\n\n// BAD - commented steps\n// First validate the input\nif (string.IsNullOrEmpty(accountName)) return false;\n// Then check permissions\nif (!await HasPermissions()) return false;\n\n// GOOD - extracted to meaningful method\nif (!await ValidateAccountAccess(accountName)) return false;\n```\n\n----------------------------------------\n\nTITLE: Listing Common Parameters for Azure MCP Cmdlets in PowerShell\nDESCRIPTION: This snippet lists the common parameters supported by Azure MCP cmdlets. These parameters provide functionality for debugging, error handling, information output, and variable management across all cmdlets in the Azure MCP module.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\n-Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, -WarningVariable\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the Environment parameter, which is an optional name of the cloud environment. The default is the Azure Public Cloud ('AzureCloud').\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: AzureCloud\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceType Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the ResourceType parameter. The description for this parameter is not provided in the given content.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: Test\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Downloading Transition Script - Bash\nDESCRIPTION: Bash command to download the generate-assets-json.ps1 script from Azure SDK tools repository\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/Azure/azure-sdk-tools/main/eng/common/testproxy/onboarding/generate-assets-json.ps1 -o generate-assets-json.ps1\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script - Docker Integration\nDESCRIPTION: Example of running the migration script using Docker container with git token for authentication\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/onboarding/README.md#2025-04-22_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# calling transition script against docker, given local clones of azure-sdk-for-java and azure-sdk-tools\n$env:GIT_TOKEN=\"my git token\"\ncd c:/src/azure-sdk-for-java/sdk/attestation\n<path-to-transition-script>/generate-assets-json.ps1 -TestProxyExe \"docker\" -InitialPush\n```\n\n----------------------------------------\n\nTITLE: Pushing Combined Tag Using Test-Proxy\nDESCRIPTION: This snippet shows how to push the combined tag using the test-proxy command after successfully merging the proxy tags. It assumes that the merge process has completed without errors.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/scripts/tag-merge/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntest-proxy push sdk/storage/azure-storage-blob/assets.json\n```\n\n----------------------------------------\n\nTITLE: Azure MCP Development Version String\nDESCRIPTION: This snippet represents the development version number for Azure MCP. The version string follows semantic versioning with dev prefix, date stamp (YYYYMMDD format), and build number.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/testproxy/target_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.0.0-dev.20250221.1\n```\n\n----------------------------------------\n\nTITLE: Defining NewTestResourcesRemainingArguments Parameter in PowerShell for Azure Resource Management\nDESCRIPTION: Defines the NewTestResourcesRemainingArguments parameter, which captures any arguments not declared in the script. This enables backwards compatibility with old script versions in hotfix branches.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/New-TestResources.ps1.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nType: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Generating PowerShell Script Documentation with PlatyPS\nDESCRIPTION: This PowerShell snippet shows how to install the PlatyPS module and use it to generate markdown documentation for the New-TestResources.ps1 script. This is useful for maintaining up-to-date documentation for PowerShell scripts.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/TestResources/README.md#2025-04-22_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module platyPS -Scope CurrentUser -Force\nNew-MarkdownHelp -Command .\\New-TestResources.ps1 -OutputFolder . -Force\n```\n\n----------------------------------------\n\nTITLE: Illustrating Azure SDK Repository Structure\nDESCRIPTION: This snippet shows the typical structure of an Azure SDK repository, including the location of service packages and the ci.yml file.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/common/scripts/job-matrix/pullrequest-faq.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\nsdk/\n  storage\n    Azure.Storage.Blobs\n    Azure.Storage.Queues\n    ...\n  <service>\n    <service-package-1>\n    ..\n    <service-package-N>\n    // the ci.yml is what AZDO build defs are based upon\n    ci.yml\n```\n\n----------------------------------------\n\nTITLE: PowerShell Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for PowerShell files using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Shell Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Shell scripts using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_33\n\nLANGUAGE: Shell\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Bicep Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Bicep files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_1\n\nLANGUAGE: Bicep\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Go Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Go files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Kotlin Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Kotlin files using multiline comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License\n */\n```\n\n----------------------------------------\n\nTITLE: CoffeeScript Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for CoffeeScript files using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_6\n\nLANGUAGE: CoffeeScript\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: CMake Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for CMake files using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Scala Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Scala files using double-slash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_32\n\nLANGUAGE: Scala\nCODE:\n```\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: R Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for R files using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_29\n\nLANGUAGE: R\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Perl Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Perl files using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_25\n\nLANGUAGE: Perl\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Matlab Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Matlab files using percent sign comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_22\n\nLANGUAGE: Matlab\nCODE:\n```\n% Copyright (c) Microsoft Corporation.\n% Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Makefile Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Makefiles using hash comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_21\n\nLANGUAGE: Makefile\nCODE:\n```\n# Copyright (c) Microsoft Corporation.\n# Licensed under the MIT License.\n```\n\n----------------------------------------\n\nTITLE: Emacs Lisp Copyright Header\nDESCRIPTION: Standard copyright and MIT license header for Emacs Lisp files using double-semicolon comment syntax.\nSOURCE: https://github.com/azure/azure-mcp/blob/main/eng/scripts/CopyrightHeaders.md#2025-04-22_snippet_8\n\nLANGUAGE: Emacs Lisp\nCODE:\n```\n;; Copyright (c) Microsoft Corporation.\n;; Licensed under the MIT License.\n```"
  }
]