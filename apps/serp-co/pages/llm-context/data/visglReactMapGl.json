[
  {
    "owner": "visgl",
    "repo": "react-map-gl",
    "content": "TITLE: Wrapping Application with MapProvider in TypeScript\nDESCRIPTION: This code snippet demonstrates how to wrap the root component of your application with the MapProvider. This allows any child component to access the Map instance using the useMap hook. It imports the MapProvider from 'react-map-gl/maplibre' and renders it around the application tree, where one or more Map components are rendered.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/map-provider.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {MapProvider} from 'react-map-gl/maplibre';\n\nfunction Root() {\n  return (\n    <MapProvider>\n      {\n        // Application tree, somewhere one or more <Map /> component(s) are rendered\n      }\n    </MapProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useMap with Map Component (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `useMap` hook within a `Map` component to access the `Map` instance. The `NavigateButton` component uses the `useMap` hook to get the current map instance and then uses the `flyTo` method to navigate to a specific location. Dependencies: react-map-gl/mapbox.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/use-map.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Map, useMap} from 'react-map-gl/mapbox';\n\nfunction Root() {\n  return (\n    <Map ... >\n      <NavigationButton />\n    </Map>\n  );\n}\n\nfunction NavigateButton() {\n  const {current: map} = useMap();\n\n  const onClick = () => {\n    map.flyTo({center: [-122.4, 37.8]});\n  };\n\n  return <button onClick={onClick}>Go</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: useMap Hook with direct Map Component (TypeScript)\nDESCRIPTION: This example demonstrates using the `useMap` hook within a component that's directly nested inside a `Map` component. It retrieves the `Map` instance and uses it to fly to a specific location on a button click.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/use-map.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Map, useMap} from 'react-map-gl/maplibre';\n\nfunction Root() {\n  return (\n    <Map ... >\n      <NavigateButton />\n    </Map>\n  );\n}\n\nfunction NavigateButton() {\n  const {current: map} = useMap();\n\n  const onClick = () => {\n    map.flyTo({center: [-122.4, 37.8]});\n  };\n\n  return <button onClick={onClick}>Go</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Map Layer with React Map GL in Typescript\nDESCRIPTION: This code demonstrates how to create a map layer using the `Layer` component from `react-map-gl/maplibre`. It defines a `FillLayer` configuration for a park landuse, sets its style properties, and renders it within a `Map` component. The code imports necessary modules and styles from react-map-gl and maplibre-gl.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/layer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {Map, Layer} from 'react-map-gl/maplibre';\nimport type {FillLayer} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nconst parkLayer: FillLayer = {\n  id: 'landuse_park',\n  type: 'fill',\n  source: 'vector',\n  'source-layer': 'landuse',\n  filter: ['==', 'class', 'park'],\n  paint: {\n    'fill-color': '#4E3FC8'\n  }\n};\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.8,\n      zoom: 14\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n  >\n    <Layer {...parkLayer} />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Map Control with useControl in React\nDESCRIPTION: This code demonstrates how to use the `useControl` hook to create a React wrapper for a custom map control, specifically MapboxDraw, within a `react-map-gl` application. It imports necessary components from `@mapbox/mapbox-gl-draw` and `react-map-gl/maplibre`. The `DrawControl` component utilizes `useControl` to instantiate `MapboxDraw` and manage its lifecycle within the map. The `App` component integrates `DrawControl` into a `Map` component.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/use-control.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport {Map, useControl} from 'react-map-gl/maplibre';\n\nfunction DrawControl(props: DrawControlProps) {\n  useControl(() => new MapboxDraw(props), {\n    position: props.position\n  });\n\n  return null;\n}\n\nfunction App() {\n  return (\n    <Map\n      initialViewState={{\n        longitude: -122.4,\n        latitude: 37.8,\n        zoom: 14\n      }}\n      mapStyle=\"https://demotiles.maplibre.org/style.json\"\n    >\n      <DrawControl\n        position=\"top-left\"\n        displayControlsDefault={false}\n        controls={{\n          polygon: true,\n          trash: true\n        }}\n      />\n    </Map>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Controlled Map with React Map GL\nDESCRIPTION: This snippet initializes a controlled `Map` component from `react-map-gl/maplibre`. The application manages the view state using `React.useState` and passes it to the map via props.  The `onMove` event handler is used to update the state when the user interacts with the map. The return is a Map component with properties viewState, onMove and mapStyle.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/state-management.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map from 'react-map-gl/maplibre';\n\nfunction App() {\n  const [viewState, setViewState] = React.useState({\n    longitude: -100,\n    latitude: 40,\n    zoom: 3.5\n  });\n\n  return <Map\n    {...viewState}\n    onMove={evt => setViewState(evt.viewState)}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining Camera with GeoJSON Geofence in React Map GL\nDESCRIPTION: This snippet shows how to use `react-map-gl/maplibre` as a controlled component to restrict the map center inside a GeoJSON geofence. It uses the `@turf/turf` library to check if the new center is within the geofence before updating the view state. The onMove callback is used to determine whether the viewState is updated or not.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/state-management.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map from 'react-map-gl/maplibre';\n\n// npm install @turf/turf\nimport * as turf from '@turf/turf';\n\n// A circle of 5 mile radius of the Empire State Building\nconst GEOFENCE = turf.circle([-74.0122106, 40.7467898], 5, {units: 'miles'});\n\nfunction App() {\n  const [viewState, setViewState] = React.useState({\n    longitude: -100,\n    latitude: 40,\n    zoom: 3.5\n  });\n\n  const onMove = React.useCallback(({viewState}) => {\n    const newCenter = [viewState.longitude, viewState.latitude];\n    // Only update the view state if the center is inside the geofence\n    if (turf.booleanPointInPolygon(newCenter, GEOFENCE)) {\n      setViewState(viewState);\n    }\n  }, [])\n\n  return <Map\n    {...viewState}\n    onMove={onMove}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapProvider to Wrap Application Tree (TSX)\nDESCRIPTION: This code snippet demonstrates how to use the MapProvider component to wrap the application tree.  This allows components within the tree to access the map instance and related functionalities through the useMap hook.  The MapProvider facilitates sharing the map context throughout the application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/map-provider.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MapProvider} from 'react-map-gl/mapbox';\n\nfunction Root() {\n  return (\n    <MapProvider>\n      {\n        // Application tree, somewhere one or more <Map /> component(s) are rendered\n      }\n    </MapProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Methods with React Ref and useMap Hook\nDESCRIPTION: This example demonstrates how to access and use the underlying Mapbox GL JS or Maplibre GL JS `Map` instance methods through a React ref. The `useRef` hook creates a ref to the `Map` component, and the `onLoad` event handler is used to access the map instance and attach event listeners. The `MapRef` type provides type safety for accessing supported map methods.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/map.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {useRef, useCallback} from 'react';\nimport Map from 'react-map-gl/mapbox';\nimport type {MapRef} from 'react-map-gl/mapbox';\n\nfunction App() {\n  const mapRef = useRef<MapRef>(null);\n\n  const onMapLoad = useCallback(() => {\n    mapRef.current.on('move', () => {\n      // do something\n    });\n  }, []);\n\n  return <Map ref={mapRef} onLoad={onMapLoad} ... />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Map Layer with React-Map-GL (Typescript)\nDESCRIPTION: This example demonstrates how to create a map layer using the Layer component in react-map-gl. It imports necessary modules from 'react' and 'react-map-gl/mapbox', defines a FillLayer object (parkLayer) with specific properties, and renders a Map component with the specified access token, initial view state, and map style. The parkLayer is then added as a child of the Map component using the Layer component.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/layer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport Map, {Layer} from 'react-map-gl/mapbox';\nimport type {FillLayer} from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst parkLayer: FillLayer = {\n  id: 'landuse_park',\n  type: 'fill',\n  source: 'mapbox',\n  'source-layer': 'landuse',\n  filter: ['==', 'class', 'park'],\n  paint: {\n    'fill-color': '#4E3FC8'\n  }\n};\n\nfunction App() {\n  return <Map\n    mapboxAccessToken=\"<Mapbox access token>\"\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.8,\n      zoom: 14\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    <Layer {...parkLayer} />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigationControl in React-Map-GL (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use the NavigationControl component within a React Map GL application. It showcases the basic setup including importing necessary modules from 'react' and 'react-map-gl/mapbox'. The component is rendered inside a Map component with a specified mapboxAccessToken, initial view state and map style.  The NavigationControl component adds zoom and compass controls to the map. It depends on react and react-map-gl/mapbox.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/navigation-control.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport Map, {NavigationControl} from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return <Map\n    mapboxAccessToken=\"<Mapbox access token>\"\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    <NavigationControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Marker in React Map GL with TSX\nDESCRIPTION: This code snippet demonstrates how to render a basic marker on a Mapbox GL JS map using the react-map-gl library. It includes setting the mapbox access token, initial view state, and map style. The marker is positioned using latitude and longitude, and it uses an image as its content.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/marker.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map, {Marker} from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return <Map\n    mapboxAccessToken=\"<Mapbox access token>\"\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    <Marker longitude={-100} latitude={40} anchor=\"bottom\" >\n      <img src=\"./pin.png\" />\n    </Marker>\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Popup - React-Map-GL\nDESCRIPTION: This example demonstrates how to display a basic popup on a Maplibre GL JS map using the react-map-gl library. The popup's visibility is controlled by a state variable. When the showPopup state is true, a Popup component is rendered with a specified longitude, latitude, anchor, and content.  Clicking the popup closes it by setting the showPopup state to false.  The example imports necessary components from 'react', 'react-map-gl/maplibre', and 'maplibre-gl/dist/maplibre-gl.css'.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/popup.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {useState} from 'react';\nimport {Map, Popup} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  const [showPopup, setShowPopup] = useState<boolean>(true);\n\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n  >\n    {showPopup && (\n      <Popup longitude={-100} latitude={40}\n        anchor=\"bottom\"\n        onClose={() => setShowPopup(false)}>\n        You are here\n      </Popup>)}\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Marker Instance with React Ref in TSX\nDESCRIPTION: This code demonstrates how to access the underlying Mapbox GL JS Marker instance using a React ref.  It initializes a popup and provides a button to toggle the popup's visibility. The marker properties like longitude, latitude, color, and popup are set.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/marker.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {useRef, useMemo, useCallback} from 'react';\nimport Map, {Marker} from 'react-map-gl/mapbox';\nimport mapboxgl from 'mapbox-gl';\n\nfunction App() {\n  const markerRef = useRef<mapboxgl.Marker>();\n\n  const popup = useMemo(() => {\n    return mapboxgl.Popup().setText('Hello world!');\n  }, [])\n\n  const togglePopup = useCallback(() => {\n    markerRef.current?.togglePopup();\n  }, []);\n\n  return <>\n    <Map>\n      <Marker longitude={-122.4} latitude={37.8} color=\"red\" popup={popup} ref={markerRef} />\n    </Map>\n    <button onClick={togglePopup}>Toggle popup</button>\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Popup with React Map GL\nDESCRIPTION: This code demonstrates how to implement a basic popup using the react-map-gl library. It imports necessary components from 'react', 'react-map-gl/mapbox', and 'mapbox-gl/dist/mapbox-gl.css'. The component uses state to control the visibility of the popup and sets the latitude, longitude, anchor and the popup content. The mapboxAccessToken should be replaced with a valid token.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/popup.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {useState} from 'react';\nimport Map, {Popup} from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  const [showPopup, setShowPopup] = useState<boolean>(true);\n\n  return <Map\n    mapboxAccessToken=\"<Mapbox access token>\"\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    {showPopup && (\n      <Popup longitude={-100} latitude={40}\n        anchor=\"bottom\"\n        onClose={() => setShowPopup(false)}>\n        You are here\n      </Popup>)}\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: NavigationControl Integration with React Map GL\nDESCRIPTION: This code snippet demonstrates how to integrate the NavigationControl component into a React Map GL application using TypeScript. It imports necessary modules from 'react' and 'react-map-gl/maplibre', as well as maplibre-gl's CSS. It initializes a Map component with initial view state and map style, then adds the NavigationControl component within the Map.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/navigation-control.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {Map, NavigationControl} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n  >\n    <NavigationControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Map Errors in React Map GL\nDESCRIPTION: This event handler allows you to catch and handle errors that occur within the Map component. The default implementation logs the error to the console, but you can customize this to implement more sophisticated error handling.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/map.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nevt => console.error(evt.error)\n```\n\n----------------------------------------\n\nTITLE: Using GeolocateControl Component in React\nDESCRIPTION: This code demonstrates how to integrate the GeolocateControl component into a React application using react-map-gl.  It imports necessary modules from 'react', 'react-map-gl/maplibre', and 'maplibre-gl/dist/maplibre-gl.css'. It initializes the map with specified initial view state and adds the GeolocateControl. The 'maplibre-gl/dist/maplibre-gl.css' import is necessary for proper styling.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/geolocate-control.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {Map, GeolocateControl} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n  >\n    <GeolocateControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using FullscreenControl in React Map GL\nDESCRIPTION: This code snippet demonstrates how to integrate the FullscreenControl component into a react-map-gl application. It imports the necessary modules from 'react' and 'react-map-gl/mapbox', including the FullscreenControl component itself. The component is then placed within a Map component, enabling the fullscreen toggle functionality.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/fullscreen-control.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map, {FullscreenControl} from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return <Map\n    mapboxAccessToken=\"<Mapbox access token>\"\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    <FullscreenControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Marker Component in React\nDESCRIPTION: This code snippet demonstrates how to render a basic Marker component within a Map component from the react-map-gl library. It imports necessary modules from react, react-map-gl/maplibre, and maplibre-gl, and configures the Map's initial view state and map style. A Marker is then added with specified longitude, latitude, and anchor properties, displaying a custom image.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/marker.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {Map, Marker} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n  >\n    <Marker longitude={-100} latitude={40} anchor=\"bottom\" >\n      <img src=\"./pin.png\" />\n    </Marker>\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: React Map Component with reuseMaps Prop\nDESCRIPTION: This code demonstrates how to use the `reuseMaps` prop in a React Map GL component to prevent unnecessary map initializations and associated billable events. Setting `reuseMaps` to `true` ensures that the map instance is reused when the component is unmounted and remounted, improving performance and reducing costs.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/tips-and-tricks.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n  <TabPanel value=\"map\">\n    <Map reuseMaps mapStyle=\"mapbox://styles/mapbox/streets-v9\" >\n      {items.map(renderMarker)}\n    </Map>\n  </TabPanel>\n```\n\n----------------------------------------\n\nTITLE: Adding GeoJSON Data with Native Mapbox Layers in React Map GL (Typescript)\nDESCRIPTION: This code snippet demonstrates how to add GeoJSON data to a React Map GL component using the Source and Layer components. It imports necessary modules from react-map-gl/maplibre and defines a FeatureCollection. It then defines a CircleLayer style and renders the Map component, including the Source and Layer components to display the GeoJSON data.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/adding-custom-data.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport Map, {Source, Layer} from 'react-map-gl/maplibre';\nimport type {CircleLayer} from 'react-map-gl/maplibre';\nimport type {FeatureCollection} from 'geojson';\n\nconst geojson: FeatureCollection = {\n  type: 'FeatureCollection',\n  features: [\n    {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [-122.4, 37.8]\n      },\n      properties: {title: '915 Front Street, San Francisco, California'}\n    }\n  ]\n};\n\nconst layerStyle: CircleLayer = {\n  id: 'point',\n  type: 'circle',\n  paint: {\n    'circle-radius': 10,\n    'circle-color': '#007cbf'\n  }\n};\n\nfunction App() {\n  return (\n    <Map\n      initialViewState={{\n        longitude: -122.45,\n        latitude: 37.78,\n        zoom: 14\n      }}>\n      <Source id=\"my-data\" type=\"geojson\" data={geojson}>\n        <Layer {...layerStyle} />\n      </Source>\n    </Map>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GeolocateControl Basic Usage\nDESCRIPTION: This code snippet demonstrates the basic usage of the GeolocateControl component within a react-map-gl Map component. It imports necessary modules from 'react' and 'react-map-gl/mapbox', sets up initial map view and adds the GeolocateControl.  Requires a Mapbox access token.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/geolocate-control.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map, {GeolocateControl} from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return <Map\n    mapboxAccessToken=\"<Mapbox access token>\"\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    <GeolocateControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: useControl Signature in JavaScript\nDESCRIPTION: This snippet shows the different function signatures of the `useControl` hook in JavaScript, including the options for `onCreate` only, `onCreate` and `onRemove`, and `onCreate`, `onAdd`, and `onRemove`. Each signature accepts a function to create an IControl instance, and optionally, functions to handle addition and removal from the map. An options object can specify the control's position.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/use-control.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseControl<T extends IControl>(\n  onCreate: ({map: MapRef, mapLib: maplibregl}) => IControl,\n  options?: {\n    position?: ControlPosition;\n  }\n): T\n\nuseControl<T extends IControl>(\n  onCreate: ({map: MapRef, mapLib: maplibregl}) => IControl,\n  onRemove: ({map: MapRef, mapLib: maplibregl}) => void,\n  options?: {\n    position?: ControlPosition;\n  }\n): T\n\nuseControl<T extends IControl>(\n  onCreate: ({map: MapRef, mapLib: maplibregl}) => IControl,\n  onAdd: ({map: MapRef, mapLib: maplibregl}) => void,\n  onRemove: ({map: MapRef, mapLib: maplibregl}) => void,\n  options?: {\n    position?: ControlPosition;\n  }\n): T\n```\n\n----------------------------------------\n\nTITLE: Using React Ref with Marker to toggle Popup\nDESCRIPTION: This code snippet shows how to use a React ref to access the underlying maplibregl.Marker instance and interact with its methods, specifically toggling a popup. It utilizes useRef to create a reference to the Marker component, useMemo to create a popup instance, and useCallback to define a function that toggles the popup. The Map component renders a Marker with a specified color and popup, and a button is provided to trigger the popup toggle.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/marker.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {useRef, useMemo, useCallback} from 'react';\nimport {Map, Marker} from 'react-map-gl/maplibre';\nimport maplibregl from 'maplibre-gl';\n\nfunction App() {\n  const markerRef = useRef<maplibregl.Marker>();\n\n  const popup = useMemo(() => {\n    return maplibregl.Popup().setText('Hello world!');\n  }, [])\n\n  const togglePopup = useCallback(() => {\n    markerRef.current?.togglePopup();\n  }, []);\n\n  return <>\n    <Map>\n      <Marker longitude={-122.4} latitude={37.8} color=\"red\" popup={popup} ref={markerRef} />\n    </Map>\n    <button onClick={togglePopup}>Toggle popup</button>\n  </>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Map Component in React\nDESCRIPTION: This code snippet demonstrates how to import and render the Map component from the react-map-gl library. It sets up a basic map with initial view state, style, and a Mapbox access token. The component utilizes React hooks for managing state.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/map.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport Map from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return (\n    <Map\n      mapboxAccessToken=\"<Mapbox access token>\"\n      initialViewState={{\n        longitude: -122.4,\n        latitude: 37.8,\n        zoom: 14\n      }}\n      style={{width: 600, height: 400}}\n      mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Mapbox GL JS module with React Map GL\nDESCRIPTION: This code snippet demonstrates how to import the Mapbox GL JS library as a module and use it with the React Map GL Map component.  It shows a basic setup using a direct import and embedding into the final bundle. The `mapLib` prop of the `Map` component is used to pass the imported `mapboxgl` object.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/map.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map from 'react-map-gl/mapbox';\nimport mapboxgl from 'mapbox-gl';\n\nfunction App() {\n  return <Map mapLib={mapboxgl} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Check if Point is within Viewport\nDESCRIPTION: This code snippet demonstrates how to check if a given latitude and longitude are within the current viewport of a React Map GL map. It utilizes the `useRef` hook to access the Map instance and the `getBounds()` method to retrieve the viewport bounds, then uses the `contains()` method to check if the point is within those bounds.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/tips-and-tricks.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst mapRef = useRef<MapRef>();\n\nconst checkIfPositionInViewport = (lat, lng) => {\n    const bounds = mapRef.current.getBounds();\n    return bounds.contains([lng, lat]);\n}\n\nreturn <Map ref={mapRef} ... />\n```\n\n----------------------------------------\n\nTITLE: Initializing Terrain with React Map GL and Maplibre GL JS\nDESCRIPTION: This code snippet demonstrates how to initialize a map with terrain using react-map-gl and maplibre-gl. It imports necessary modules, defines a map style with terrain source and layers, and renders a Map component with the TerrainControl.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/terrain-control.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {Map, MapStyle, TerrainControl} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\n// https://maplibre.org/maplibre-gl-js/docs/examples/3d-terrain/\nconst MAP_STYLE: MapStyle = {\n  version: 8,\n  sources: {\n    osm: {\n      type: 'raster',\n      tiles: ['https://a.tile.openstreetmap.org/{z}/{x}/{y}.png'],\n      tileSize: 256,\n      attribution: '&copy; OpenStreetMap Contributors',\n      maxzoom: 19\n    },\n    terrainSource: {\n      type: 'raster-dem',\n      url: 'https://demotiles.maplibre.org/terrain-tiles/tiles.json',\n      tileSize: 256\n    }\n  },\n  layers: [\n    {\n      id: 'osm',\n      type: 'raster',\n      source: 'osm'\n    }\n  ],\n  terrain: {\n    source: 'terrainSource',\n    exaggeration: 1\n  },\n  sky: {}\n};\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle={MAP_STYLE}\n  >\n    <TerrainControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Uncontrolled Map with React Map GL\nDESCRIPTION: This snippet initializes an uncontrolled `Map` component from `react-map-gl/maplibre`. The application sets the initial `viewState` and `mapStyle` when the map is mounted. The component automatically handles view state changes after the initial setup. The return is a Map component with properties initialViewState and mapStyle\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/state-management.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map from 'react-map-gl/maplibre';\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using LogoControl in React Map GL with MapLibre\nDESCRIPTION: This code snippet demonstrates how to integrate the LogoControl component into a React Map GL application using MapLibre. It imports necessary components from 'react' and 'react-map-gl/maplibre', initializes a Map component, and nests the LogoControl component within it. The mapStyle is set to a MapLibre style URL, and initial map view state is defined.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/logo-control.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {Map, LogoControl} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n  >\n    <LogoControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Mapbox Draw Control with useControl in React Map GL\nDESCRIPTION: This code demonstrates how to integrate the Mapbox Draw control using the `useControl` hook in a React Map GL application. It defines a `DrawControl` component that instantiates `MapboxDraw` and uses `useControl` to manage its lifecycle within the map. The component is then integrated into the `App` component, which renders a map with the Draw control positioned in the top-left corner.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/use-control.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport Map, {useControl} from 'react-map-gl/mapbox';\n\nfunction DrawControl(props: DrawControlProps) {\n  useControl(() => new MapboxDraw(props), {\n    position: props.position\n  });\n\n  return null;\n}\n\nfunction App() {\n  return (\n    <Map\n      mapLib={import('mapbox-gl')}\n      initialViewState={{\n        longitude: -122.4,\n        latitude: 37.8,\n        zoom: 14\n      }}\n      mapStyle=\"mapbox://styles/mapbox/satellite-v9\"\n    >\n      <DrawControl\n        position=\"top-left\"\n        displayControlsDefault={false}\n        controls={{\n          polygon: true,\n          trash: true\n        }}\n      />\n    </Map>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Import Filter App Component\nDESCRIPTION: This snippet imports the `App` component from the `maplibre-examples/filter/src/app` module. This component likely contains the logic and UI for filtering data displayed on a map. It's a prerequisite for rendering the filter app within the current application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/filter.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/filter/src/app';\n```\n\n----------------------------------------\n\nTITLE: Import and Render App Component (maplibre-examples)\nDESCRIPTION: This snippet imports the App component from the 'maplibre-examples/layers/src/app' module and renders it within the current React context.  The App component likely handles map initialization, data loading, and dynamic style application based on user interactions or data updates. It assumes that maplibre-gl is available as a dependency within the project.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/layers.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/layers/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Implementing FullscreenControl in React Map GL\nDESCRIPTION: This code snippet demonstrates how to integrate the FullscreenControl component into a React Map GL application. It initializes a map with a specified style and initial view state, then adds the FullscreenControl component. The code requires react, react-map-gl/maplibre, and maplibre-gl/dist/maplibre-gl.css as dependencies.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/fullscreen-control.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {Map, FullscreenControl} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n  >\n    <FullscreenControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Popup Instance with Ref - React-Map-GL\nDESCRIPTION: This code snippet shows how to access the underlying Maplibre GL JS `Popup` instance using a React ref in react-map-gl.  A `useRef` hook is used to create a ref to the `Popup` component. An effect hook `useEffect` calls the `trackPointer` method on the `Popup` instance when the component mounts and when the `popupRef.current` changes. The `Popup` instance can then be manipulated using its API. This requires importing `useRef` and `useEffect` from 'react' and `maplibregl` from 'maplibre-gl'.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/popup.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {useRef, useEffect} from 'react';\nimport {Map, Popup} from 'react-map-gl/maplibre';\nimport maplibregl from 'maplibre-gl';\n\nfunction App() {\n  const popupRef = useRef<maplibregl.Popup>();\n\n  useEffect(() => {\n    popupRef.current?.trackPointer();\n  }, [popupRef.current])\n\n  return <Map>\n    <Popup longitude={-122.4} latitude={37.8} ref={popupRef} >\n      Tooltip\n    </Popup>\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Render App Component JSX\nDESCRIPTION: This snippet imports the `App` component from the `mapbox-examples/viewport-animation/src/app` module and renders it within a JSX context.  The App component likely handles the logic for camera transitions. No dependencies are directly defined in the provided snippet, assuming `App` handles them.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/viewport-animation.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport App from 'mapbox-examples/viewport-animation/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Import App component\nDESCRIPTION: Imports the main application component from the `maplibre-examples/draw-polygon/src/app` module. This component is responsible for rendering the map and handling the polygon drawing logic.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/draw-polygon.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/draw-polygon/src/app';\n```\n\n----------------------------------------\n\nTITLE: Rendering a Map with Maplibre in react-map-gl\nDESCRIPTION: This example shows how to render a basic map using react-map-gl with Maplibre GL JS. It imports the necessary components, defines an initial view state, and sets the map style.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using Maplibre\nimport * as React from 'react';\nimport Map from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return (\n    <Map\n      initialViewState={{\n        longitude: -122.4,\n        latitude: 37.8,\n        zoom: 14\n      }}\n      style={{width: 600, height: 400}}\n      mapStyle=\"https://api.maptiler.com/maps/streets/style.json?key=<Maptiler access token>\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Native Popup Instance with React Ref\nDESCRIPTION: This code demonstrates how to access the underlying native Mapbox GL JS Popup instance using a React ref. It imports necessary components, including useRef and useEffect hooks.  The useEffect hook calls `trackPointer` to track pointer location using the underlying Mapbox GL JS API. The popupRef is passed to the Popup component's `ref` property.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/popup.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {useRef, useEffect} from 'react';\nimport Map, {Popup} from 'react-map-gl/mapbox';\nimport mapboxgl from 'mapbox-gl';\n\nfunction App() {\n  const popupRef = useRef<mapboxgl.Popup>();\n\n  useEffect(() => {\n    popupRef.current?.trackPointer();\n  }, [popupRef.current])\n\n  return <Map>\n    <Popup longitude={-122.4} latitude={37.8} ref={popupRef} >\n      Tooltip\n    </Popup>\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Draggable Marker App Component - JSX\nDESCRIPTION: This snippet imports and renders the App component, which is responsible for implementing the draggable marker functionality.  The App component is assumed to handle map initialization, marker rendering, and the drag event handling. It relies on React Map GL and related libraries for map interactions.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/draggable-markers.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport App from 'maplibre-examples/draggable-markers/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Map with Mapbox\nDESCRIPTION: This code snippet demonstrates how to display a map using react-map-gl with Mapbox. It imports the necessary modules, defines a functional component, and renders a Map component with initial view state, map style, and access token.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/get-started.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map from 'react-map-gl/mapbox';\n// If using with mapbox-gl v1:\n// import Map from 'react-map-gl/mapbox-legacy';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return (\n    <Map\n      mapboxAccessToken=\"<Mapbox access token>\"\n      initialViewState={{\n        longitude: -122.4,\n        latitude: 37.8,\n        zoom: 14\n      }}\n      style={{width: 600, height: 400}}\n      mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Memoized Markers for Performance Improvement\nDESCRIPTION: This code snippet demonstrates how to use `useMemo` to optimize the rendering of markers in a React Map GL component. By memoizing the markers array, the component avoids unnecessary re-renders of the markers unless the underlying data (vehicles) has changed, significantly improving performance with a large number of markers.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/tips-and-tricks.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const markers = useMemo(() => vehicles.map(vehicle => (\n    <Marker key={vehicle.id}\n      longitude={vehicle.coordinates[0]}\n      latitude={vehicle.coordinates[1]}>\n      <svg>\n        // vehicle icon\n      </svg>\n    </Marker>)\n  ), [vehicles]);\n\n  return (\n    <Map\n      {...viewState}\n      onMove={onMove}\n      mapStyle=\"mapbox://styles/mapbox/streets-v9\" >\n    >\n      {markers}\n    </Map>\n  );\n```\n\n----------------------------------------\n\nTITLE: Import App Component (GeoJSON Example)\nDESCRIPTION: This snippet imports the 'App' component, likely responsible for rendering a map with GeoJSON data. It's part of a mapbox-examples project for demonstrating GeoJSON integration.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/geojson.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'mapbox-examples/geojson/src/app';\n```\n\n----------------------------------------\n\nTITLE: Importing App Component in React\nDESCRIPTION: Imports the App component from the specified path. This component likely contains the logic for displaying and animating GeoJSON data on a Mapbox map. It assumes that the App component is exported from the 'src/app.js' file within the 'mapbox-examples/geojson-animation' directory.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/geojson-animation.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'mapbox-examples/geojson-animation/src/app';\n```\n\n----------------------------------------\n\nTITLE: Installing react-map-gl with Maplibre\nDESCRIPTION: This command installs the react-map-gl library along with maplibre-gl as a dependency using npm. This is the recommended installation method for using react-map-gl with Maplibre.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/modules/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install react-map-gl maplibre-gl\n```\n\n----------------------------------------\n\nTITLE: Rendering ScaleControl in React Map GL\nDESCRIPTION: This code snippet demonstrates how to render a ScaleControl component within a react-map-gl Map component. It requires importing React, Map, ScaleControl from react-map-gl/mapbox, and the mapbox-gl CSS. The Map component is initialized with a Mapbox access token, initial view state, and map style. The ScaleControl component is then added as a child of the Map component.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/scale-control.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport Map, {ScaleControl} from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return <Map\n    mapboxAccessToken=\"<Mapbox access token>\"\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    <ScaleControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Render Map Interaction Component\nDESCRIPTION: This code snippet imports the 'App' component from 'maplibre-examples/interaction/src/app' and renders it. The 'App' component likely encapsulates the logic for controlling map interaction within a React Map GL application. It assumes that the 'App' component is designed to handle limiting map interactions.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/interaction.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'maplibre-examples/interaction/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Import Side-by-Side App Component (JSX)\nDESCRIPTION: This code snippet imports the `App` component from a specific path within the `mapbox-examples` project and renders it.  The `App` component is responsible for implementing the side-by-side map comparison. The import statement makes the `App` component available for use in the JSX.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/side-by-side.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport App from 'mapbox-examples/side-by-side/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: FitBounds Utility Function\nDESCRIPTION: This code snippet demonstrates how to use the `fitBounds` utility function from the `viewport-mercator-project` library. It calculates the viewport parameters required to fit a given bounding box within the map's visible area, taking into account padding and offset values. It requires `viewport-mercator-project` as a dependency.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/upgrade-guide.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport WebMercatorViewport from 'viewport-mercator-project';\nconst viewport = new WebMercatorViewport({width: 600, height: 400});\nconst bound = viewport.fitBounds(\n  [[-73.9876, 40.7661], [-72.9876, 41.7661]],\n  {padding: 20, offset: [0, -40]}\n);\n// => bounds: instance of WebMercatorViewport\n// {longitude: -73.48760000000007, latitude: 41.268014439447484, zoom: 7.209231188444142}\n```\n\n----------------------------------------\n\nTITLE: Import Side-by-Side App Component JavaScript\nDESCRIPTION: This imports the main `App` component from a side-by-side example within the `maplibre-examples` project. The `App` component likely contains the logic for displaying and managing the side-by-side maps.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/side-by-side.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/side-by-side/src/app';\n```\n\n----------------------------------------\n\nTITLE: Render App Component (JSX)\nDESCRIPTION: Renders the imported App component within a JSX context. This is the core part of the example where the map with zoom-to-bounds functionality is displayed.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/zoom-to-bounds.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Maplibre CSS Import\nDESCRIPTION: This CSS import is necessary to style the maplibre-gl components correctly, including the NavigationControl.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/navigation-control.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nimport 'maplibre-gl/dist/maplibre-gl.css';\n```\n\n----------------------------------------\n\nTITLE: Accessing GeolocateControl instance with React ref\nDESCRIPTION: This code shows how to access the underlying native GeolocateControl instance using a React ref.  It utilizes useRef and useEffect hooks to interact with the control after it's loaded.  Specifically, it triggers the GeolocateControl using `geoControlRef.current?.trigger()` inside a useEffect hook that runs when the ref is attached to the component. Requires importing `useRef` and `useEffect` from 'react' and `maplibregl` from 'maplibre-gl'.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/geolocate-control.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {useRef, useEffect} from 'react';\nimport {Map, GeolocateControl} from 'react-map-gl/maplibre';\nimport type maplibregl from 'maplibre-gl';\n\nfunction App() {\n  const geoControlRef = useRef<maplibregl.GeolocateControl>();\n\n  useEffect(() => {\n    // Activate as soon as the control is loaded\n    geoControlRef.current?.trigger();\n  }, [geoControlRef.current]);\n\n  return <Map>\n    <GeolocateControl ref={geoControlRef} />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Render Draggable Marker App\nDESCRIPTION: This snippet imports the `App` component, which likely contains the logic for a draggable marker on a Mapbox GL map, from a specific path within the `mapbox-examples` project.  It then renders the component using JSX.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/draggable-markers.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport App from 'mapbox-examples/draggable-markers/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Render GeoJSON Example App Component (JSX)\nDESCRIPTION: This snippet renders the imported 'App' component. The App component likely handles the map initialization, GeoJSON data loading, and rendering within the React Map GL context. The expected output is a map displaying GeoJSON data.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/geojson.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: React Map with Externally Managed Camera State\nDESCRIPTION: This example illustrates a React Map GL component that utilizes externally managed camera state (e.g., using Redux) and renders multiple markers. The `onMove` callback dispatches an action to update the view state in the Redux store, triggering a re-render of the component and markers.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/tips-and-tricks.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useSelector, useDispatch} from 'react-redux';\nimport Map, {Marker} from 'react-map-gl/maplibre';\n\nfunction MapView() {\n  const viewState = useSelector((s: RootState) => s.viewState);\n  const vehicles = useSelector((s: RootState) => s.vehicles);\n  const dispatch = useDispatch();\n\n  const onMove = useCallback(evt => {\n    dispatch({type: 'setViewState', payload: evt.viewState});\n  }, []);\n\n  return (\n    <Map\n      {...viewState}\n      onMove={onMove}\n      mapStyle=\"mapbox://styles/mapbox/streets-v9\" >\n    >\n      {vehicles.map(vehicle => (\n        <Marker key={vehicle.id}\n          longitude={vehicle.coordinates[0]}\n          latitude={vehicle.coordinates[1]}>\n          <svg>\n            // vehicle icon\n          </svg>\n        </Marker>)\n      )}\n    </Map>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Import Geocoder App Component\nDESCRIPTION: This code snippet imports the main application component for the geocoder example from the 'maplibre-examples' library. The imported component is named 'App'.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/geocoder.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/geocoder/src/app';\n```\n\n----------------------------------------\n\nTITLE: Importing Heatmap App Component (React Map GL)\nDESCRIPTION: Imports the App component from the specified path within the mapbox-examples project. This App component is expected to contain the implementation for rendering a heatmap on a React Map GL map.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/heatmap.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'mapbox-examples/heatmap/src/app';\n```\n\n----------------------------------------\n\nTITLE: Start the Application\nDESCRIPTION: Starts the React Map GL application. This command typically executes a script defined in the project's package.json file, which may involve building the application and serving it locally for development.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/interaction/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Import App Component (JavaScript)\nDESCRIPTION: Imports the App component from the specified path within the 'maplibre-examples' library. This component likely contains the logic for zooming to specific bounds on a map.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/zoom-to-bounds.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/zoom-to-bounds/src/app';\n```\n\n----------------------------------------\n\nTITLE: Start Application\nDESCRIPTION: This command starts the application, likely running a development server to view the DeckGL overlay on react-maplibre.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/deckgl-overlay/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Import and Render Cluster App Component (JSX)\nDESCRIPTION: This snippet imports the `App` component from the `maplibre-examples/clusters/src/app` directory and renders it within the JSX structure.  It showcases a simple cluster implementation using React Map GL. No specific dependencies are explicitly shown in this snippet, but the `App` component likely depends on `react-map-gl` and related libraries.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/clusters.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'maplibre-examples/clusters/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Methods via React Ref (React)\nDESCRIPTION: Illustrates how to access imperative MapLibre GL JS methods using a React ref and the `onLoad` event. This example shows how to get a reference to the underlying Map instance and attach event listeners. Dependencies: react, useRef, useCallback, react-map-gl/maplibre.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/map.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {useRef, useCallback} from 'react';\nimport {Map} from 'react-map-gl/maplibre';\nimport type {MapRef} from 'react-map-gl/maplibre';\n\nfunction App() {\n  const mapRef = useRef<MapRef>();\n\n  const onMapLoad = useCallback(() => {\n    mapRef.current.on('move', () => {\n      // do something\n    });\n  }, []);\n\n  return <Map ref={mapRef} onLoad={onMapLoad} ... />;\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Render Geocoder App Component\nDESCRIPTION: This snippet imports the main application component, `App`, from the 'mapbox-examples/geocoder/src/app' directory.  It then renders this component using JSX syntax, effectively embedding the geocoder example within the React Map GL application. The expected output is a fully functional map with geocoding search capabilities.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/geocoder.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'mapbox-examples/geocoder/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Render App Component (JSX)\nDESCRIPTION: This snippet renders the imported App component.  It is assumed that App is a React component. Rendering this component displays the map and its dynamically styled layers, as defined within the App component itself. The dynamic styling is achieved by manipulating the map's layer properties based on data or user interactions.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/layers.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Render React Component\nDESCRIPTION: This snippet renders the imported App component using JSX. This will instantiate the component and display it within the React application, initiating the map with limited interaction capabilities.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/interaction.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Start Application\nDESCRIPTION: This snippet shows how to install the necessary dependencies and start the application. It uses `npm i` to install all dependencies listed in the `package.json` file and `npm run start` to execute the start script, typically initiating the development server.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/redux/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Creating a GeoJSON Source with React Map GL\nDESCRIPTION: This code snippet demonstrates how to create a GeoJSON source and a corresponding circle layer using the react-map-gl library.  It imports necessary modules from 'react', 'react-map-gl/maplibre', and 'geojson'.  The component renders a Map, a Source linked to GeoJSON data, and a Layer for displaying the GeoJSON data as circles.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/source.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {Map, Source, Layer} from 'react-map-gl/maplibre';\nimport type {CircleLayer} from 'react-map-gl/maplibre';\nimport type {FeatureCollection} from 'geojson';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nconst geojson: FeatureCollection = {\n  type: 'FeatureCollection',\n  features: [\n    {type: 'Feature', geometry: {type: 'Point', coordinates: [-122.4, 37.8]}}\n  ]\n};\n\nconst layerStyle: CircleLayer = {\n  id: 'point',\n  type: 'circle',\n  paint: {\n    'circle-radius': 10,\n    'circle-color': '#007cbf'\n  }\n};\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.8,\n      zoom: 14\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n  >\n    <Source id=\"my-data\" type=\"geojson\" data={geojson}>\n      <Layer {...layerStyle} />\n    </Source>\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Install and Start the React-Map-GL Application\nDESCRIPTION: These commands install the necessary dependencies for the React-Map-GL application and then starts the application using npm. This assumes that the project has a `package.json` file with the required scripts.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/custom-overlay/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Signature of useControl Hook in React Map GL\nDESCRIPTION: These code snippets define the signature for the `useControl` hook, showing the various ways it can be called with different parameters for creating, adding, and removing custom map controls. It highlights the use of `onCreate`, `onAdd`, and `onRemove` callback functions, along with an optional `options` object for specifying the control's position on the map.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/use-control.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseControl<T extends IControl>(\n  onCreate: ({map: MapRef, mapLib: mapboxgl}) => IControl,\n  options?: {\n    position?: ControlPosition;\n  }\n): T\n\nuseControl<T extends IControl>(\n  onCreate: ({map: MapRef, mapLib: mapboxgl}) => IControl,\n  onRemove: ({map: MapRef, mapLib: mapboxgl}) => void,\n  options?: {\n    position?: ControlPosition;\n  }\n): T\n\nuseControl<T extends IControl>(\n  onCreate: ({map: MapRef, mapLib: mapboxgl}) => IControl,\n  onAdd: ({map: MapRef, mapLib: mapboxgl}) => void,\n  onRemove: ({map: MapRef, mapLib: mapboxgl}) => void,\n  options?: {\n    position?: ControlPosition;\n  }\n): T\n```\n\n----------------------------------------\n\nTITLE: Import and Render React Component\nDESCRIPTION: This snippet imports a React component named 'App' from a specific path within the 'mapbox-examples' project.  It then renders the 'App' component, presumably to display a map with interactive filtering capabilities. The component likely uses React Map GL to implement map functionality and data visualization.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/filter.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport App from 'mapbox-examples/filter/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Map with Maplibre\nDESCRIPTION: This code snippet demonstrates how to display a map using react-map-gl with Maplibre. It imports the necessary modules, defines a functional component, and renders a Map component with initial view state and map style.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/get-started.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return (\n    <Map\n      initialViewState={{\n        longitude: -122.4,\n        latitude: 37.8,\n        zoom: 14\n      }}\n      style={{width: 600, height: 400}}\n      mapStyle=\"https://api.maptiler.com/maps/streets/style.json?key=get_your_own_key\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install and Run Supercluster Example\nDESCRIPTION: These commands are used to install dependencies and start the application. The `npm i` command installs the project's dependencies from the `package.json` file. The `npm run start` command starts the development server, typically running the application in a browser.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/clusters/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: useMap with MapProvider (TSX)\nDESCRIPTION: This snippet shows how to use the `useMap` hook with a `MapProvider` to access multiple `Map` instances using their IDs. The `NavigateButton` component uses the `useMap` hook to get references to two different maps (`myMapA` and `myMapB`) and then uses the `flyTo` method on each map to navigate to different locations.  Dependencies: react-map-gl/mapbox.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/use-map.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MapProvider, Map, useMap} from 'react-map-gl/mapbox';\n\nfunction Root() {\n  // Note: `useMap` will not work in <Root>, only children of <MapProvider> can use `useMap`\n\n  return (\n    <MapProvider>\n      <Map id=\"myMapA\" ... />\n      <Map id=\"myMapB\" ... />\n      <NavigateButton />\n    </MapProvider>\n  );\n}\n\nfunction NavigateButton() {\n  const {myMapA, myMapB} = useMap();\n\n  const onClick = () => {\n    myMapA.flyTo({center: [-122.4, 37.8]});\n    myMapB.flyTo({center: [-74, 40.7]});\n  };\n\n  return <button onClick={onClick}>Go</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Overlays (v1.0)\nDESCRIPTION: This snippet illustrates how to import overlay components in react-map-gl version 1.0. The overlay components are now named exports and must be imported directly from the react-map-gl library.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/upgrade-guide.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// v1.0\nimport MapGL, {SVGOverlay} from 'react-map-gl';\n```\n\n----------------------------------------\n\nTITLE: Rendering Heatmap App Component (React Map GL)\nDESCRIPTION: Renders the imported App component using JSX. This will display the heatmap on the React Map GL map canvas, utilizing any configurations or data handling within the App component.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/heatmap.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Load Pre-bundled MapLibre GL (HTML)\nDESCRIPTION: Shows how to include MapLibre GL by loading a pre-bundled version of the library using a script tag in HTML.  This method relies on a globally available `maplibregl` object.  This avoids bundling the library directly into the application, potentially improving caching.  No dependencies.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/map.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/maplibre-gl@4.7.1/dist/maplibre-gl.js\" ></script>\n```\n\n----------------------------------------\n\nTITLE: Running the React Map GL Interaction Example\nDESCRIPTION: These commands install the necessary dependencies and start the React Map GL application. It assumes that Node.js and npm are already installed on your system. It prepares the environment for running the interaction example.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/interaction/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Symbol Layer for High-Performance Marker Rendering\nDESCRIPTION: This snippet showcases the use of a symbol layer instead of individual markers for improved performance in React Map GL.  It converts vehicle data into a GeoJSON FeatureCollection and renders it as a symbol layer. Symbol layers are rendered in WebGL and are significantly more performant for displaying a large number of points compared to DOM-based markers.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/tips-and-tricks.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const vehiclesGeoJSON = useMemo(() => {\n    return {\n      type: 'FeatureCollection',\n      features: vehicles.map(vehicle => turf.point(vehicle.coordinates, vehicle))\n    };\n  }, [vehicles]);\n\n  return (\n    <Map\n      {...viewState}\n      onMove={onMove}\n      mapStyle=\"mapbox://styles/mapbox/streets-v9\" >\n    >\n      <Source id=\"vehicles\" type=\"geojson\" data={vehiclesGeoJSON}>\n        <Layer type=\"symbol\"\n          layout={{\n            'icon-image': 'vehicle-icon',\n            'icon-size': 1,\n            'text-field': ['get', 'id']\n          }}\n        />\n      </Source>\n    </Map>\n  );\n```\n\n----------------------------------------\n\nTITLE: Install and Start GeoJSON Example\nDESCRIPTION: These commands install the necessary dependencies and start the application, allowing users to view and interact with the GeoJSON example.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/geojson/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Using AttributionControl in React Map GL\nDESCRIPTION: This snippet demonstrates how to use the AttributionControl component within a React Map GL application.  It imports necessary components from 'react-map-gl/mapbox' and 'mapbox-gl/dist/mapbox-gl.css'. The Map component is configured with an access token, initial view state, and map style. The AttributionControl component is added to the map, allowing custom attributions. The attributionControl prop on the Map component is set to false to disable the default attribution.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/attribution-control.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map, {AttributionControl} from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return <Map\n    mapboxAccessToken=\"<Mapbox access token>\"\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n    // disable the default attribution\n    attributionControl={false}\n  >\n    <AttributionControl customAttribution=\"Map design by me\" />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Source and Layer Components in React Map GL with TypeScript\nDESCRIPTION: This example demonstrates how to use the Source component to add a GeoJSON source to a react-map-gl map. It includes a Layer component to style the GeoJSON data. The code defines a FeatureCollection, a CircleLayer style, and renders a Map component with a Source and Layer.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/source.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport Map, {Source, Layer} from 'react-map-gl/mapbox';\nimport type {CircleLayer} from 'react-map-gl/mapbox';\nimport type {FeatureCollection} from 'geojson';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nconst geojson: FeatureCollection = {\n  type: 'FeatureCollection',\n  features: [\n    {type: 'Feature', geometry: {type: 'Point', coordinates: [-122.4, 37.8]}}\n  ]\n};\n\nconst layerStyle: CircleLayer = {\n  id: 'point',\n  type: 'circle',\n  paint: {\n    'circle-radius': 10,\n    'circle-color': '#007cbf'\n  }\n};\n\nfunction App() {\n  return <Map\n    mapLib={import('mapbox-gl')}\n    initialViewState={{\n      longitude: -122.4,\n      latitude: 37.8,\n      zoom: 14\n    }}\n    mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n  >\n    <Source id=\"my-data\" type=\"geojson\" data={geojson}>\n      <Layer {...layerStyle} />\n    </Source>\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Render App component\nDESCRIPTION: Renders the imported `App` component within the React application. This will display the map and enable the user to draw polygons on it.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/draw-polygon.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Using Pre-bundled Mapbox GL JS with React Map GL\nDESCRIPTION: This snippet shows how to use a pre-bundled version of Mapbox GL JS loaded via a `<script>` tag in the HTML.  This approach requires the `mapboxgl` object to be available in the global scope (i.e., `window.mapboxgl`).  The `mapLib` prop is then set to `window.mapboxgl`.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/map.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://api.mapbox.com/mapbox-gl-js/v2.4.0/mapbox-gl.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Run the react-map-gl example\nDESCRIPTION: This command starts the development server for the react-map-gl example project.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/controlled/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Build Production Version\nDESCRIPTION: Builds a production-ready version of the react-map-gl application using npm. This command optimizes the application for deployment.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/basic/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Initializing Mapbox GL Map in React\nDESCRIPTION: This code demonstrates how to initialize a Mapbox GL map within a React component using react-map-gl. It imports the necessary components and styles, then renders a Map component with initial view state, mapbox access token, and map style configured. The mapStyle prop specifies the Mapbox style URL, and mapboxAccessToken is required for Mapbox GL integration.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/modules/main/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using Mapbox\nimport * as React from 'react';\nimport Map from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return (\n    <Map\n      // https://visgl.github.io/react-map-gl/docs/get-started/mapbox-tokens\n      mapboxAccessToken=\"<Mapbox access token>\"\n      initialViewState={{\n        longitude: -100,\n        latitude: 40,\n        zoom: 3.5\n      }}\n      style={{width: 600, height: 400}}\n      mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering App Component in JSX\nDESCRIPTION: Renders the imported App component within the JSX structure. This integrates the Mapbox GeoJSON animation functionality into the React application's user interface. The App component is responsible for handling the map initialization, data loading, and animation updates.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/geojson-animation.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Start Application\nDESCRIPTION: This command starts the react-map-gl application. It typically executes a script defined in the project's package.json file, which may involve building the application and starting a development server.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/controls/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Start the Application\nDESCRIPTION: This command starts the React Map GL application. It typically executes a script defined in the project's package.json file, which usually involves starting a development server and building/serving the application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/custom-overlay/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Accessing GeolocateControl Instance with React Ref\nDESCRIPTION: This code snippet demonstrates how to access the underlying Mapbox GL JS GeolocateControl instance using a React ref. It initializes a ref, assigns it to the GeolocateControl component, and uses a useEffect hook to trigger the control's action as soon as it's loaded.  Requires 'mapbox-gl' as a dev dependency and type import.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/geolocate-control.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {useRef, useEffect} from 'react';\nimport Map, {GeolocateControl} from 'react-map-gl/mapbox';\nimport type mapboxgl from 'mapbox-gl';\n\nfunction App() {\n  const geoControlRef = useRef<mapboxgl.GeolocateControl>();\n\n  useEffect(() => {\n    // Activate as soon as the control is loaded\n    geoControlRef.current?.trigger();\n  }, [geoControlRef.current]);\n\n  return <Map>\n    <GeolocateControl ref={geoControlRef} />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Install and Run the Example\nDESCRIPTION: These commands install the necessary dependencies and start the application. It assumes npm is installed.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/side-by-side/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Using AttributionControl in React with react-map-gl\nDESCRIPTION: This code snippet demonstrates how to integrate the AttributionControl component within a react-map-gl Map component. It imports necessary modules from 'react', 'react-map-gl/maplibre', and 'maplibre-gl/dist/maplibre-gl.css'. The example shows how to disable the default attribution and add a custom attribution.  It requires react-map-gl and maplibre-gl CSS to be installed.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/attribution-control.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {Map, AttributionControl} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n    // disable the default attribution\n    attributionControl={false}\n  >\n    <AttributionControl customAttribution=\"Map design by me\" />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Render App Component (JSX)\nDESCRIPTION: This snippet imports the 'App' component from the specified path and renders it within the current component's JSX structure.  The 'App' component is assumed to handle the initialization and display of markers, popups, and controls using React Map GL.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/controls.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport App from 'mapbox-examples/controls/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Start Development Server\nDESCRIPTION: This command starts the development server, which typically runs a local web server that hosts the application. It uses npm to execute the script defined for the 'start' command in the package.json file. This command usually watches for file changes and automatically reloads the application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/side-by-side/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing react-map-gl with Mapbox\nDESCRIPTION: This command installs the react-map-gl library along with mapbox-gl as a dependency using npm. This is the installation method for using react-map-gl with Mapbox.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/modules/main/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install react-map-gl mapbox-gl\n```\n\n----------------------------------------\n\nTITLE: Importing the App Component\nDESCRIPTION: This code imports the 'App' component from the specified file path. The App component likely contains the core logic for implementing a custom cursor within a React Map GL application. This allows the example to be rendered within the current context.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/custom-cursor.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport App from 'mapbox-examples/custom-cursor/src/app';\n```\n\n----------------------------------------\n\nTITLE: Import and Render Terrain App (JSX)\nDESCRIPTION: This snippet imports the `App` component from the `maplibre-examples/terrain/src/app` module and renders it within the current React component. This component is responsible for displaying the terrain using Maplibre GL JS. The snippet assumes that the `App` component handles the map initialization and terrain data fetching.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/terrain.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport App from 'maplibre-examples/terrain/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Installing react-map-gl with Maplibre\nDESCRIPTION: This command installs react-map-gl along with the maplibre-gl library. It is required for using react-map-gl with Maplibre.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/get-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-map-gl maplibre-gl\n```\n\n----------------------------------------\n\nTITLE: useMap Hook with MapProvider (TypeScript)\nDESCRIPTION: This example showcases the usage of `useMap` with `MapProvider`. It allows accessing multiple `Map` instances (identified by their `id` props) that are rendered outside the direct component's render tree, enabling interaction with multiple maps.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/use-map.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MapProvider, Map, useMap} from 'react-map-gl/maplibre';\n\nfunction Root() {\n  return (\n    <MapProvider>\n      <Map id=\"myMapA\" ... />\n      <Map id=\"myMapB\" ... />\n      <NavigateButton />\n    </MapProvider>\n  );\n}\n\nfunction NavigateButton() {\n  const {myMapA, myMapB} = useMap();\n\n  const onClick = () => {\n    myMapA.flyTo({center: [-122.4, 37.8]});\n    myMapB.flyTo({center: [-74, 40.7]});\n  };\n\n  return <button onClick={onClick}>Go</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Maplibre GL Map in React\nDESCRIPTION: This code demonstrates how to initialize a Maplibre GL map within a React component using react-map-gl. It imports the necessary components and styles, then renders a Map component with initial view state and map style configured. The mapStyle prop specifies the URL to the Maplibre style JSON.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/modules/main/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using Maplibre\nimport * as React from 'react';\nimport Map from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return (\n    <Map\n      initialViewState={{\n        longitude: -122.4,\n        latitude: 37.8,\n        zoom: 14\n      }}\n      style={{width: 600, height: 400}}\n      mapStyle=\"https://api.maptiler.com/maps/streets/style.json?key=<Maptiler access token>\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Installs the necessary dependencies for the project using npm. This command is required before running the example application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/draggable-markers/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Render GeoJSON Example App (JSX)\nDESCRIPTION: This JSX snippet renders the imported 'App' component. It serves as the entry point to visualize GeoJSON data within the React-Map-GL context. The App component likely uses React-Map-GL to display the geographical data.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/geojson.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Install dependencies\nDESCRIPTION: This command installs the necessary dependencies for the React Map GL project using npm.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/viewport-animation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Installs the necessary dependencies for the project. This command uses npm to download and install the required packages specified in the project's package.json file.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/zoom-to-bounds/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Install dependencies\nDESCRIPTION: Installs the necessary dependencies for the project using npm.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/maplibre/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Render Geocoder App Component\nDESCRIPTION: This code snippet renders the imported 'App' component within a React environment. It assumes that 'App' is a valid React component.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/geocoder.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Import App Component\nDESCRIPTION: Imports the App component from the mapbox-examples/zoom-to-bounds/src/app directory. This component is presumably responsible for implementing the zoom to bounds functionality using React-Map-GL.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/zoom-to-bounds.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'mapbox-examples/zoom-to-bounds/src/app';\n```\n\n----------------------------------------\n\nTITLE: Implementing ScaleControl in React Map GL\nDESCRIPTION: This code snippet demonstrates how to use the ScaleControl component within a React Map GL application. It imports necessary modules from 'react', 'react-map-gl/maplibre', and 'maplibre-gl', sets up initial map view state, specifies a map style, and renders the ScaleControl component as a child of the Map component.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/scale-control.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {Map, ScaleControl} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return <Map\n    initialViewState={{\n      longitude: -100,\n      latitude: 40,\n      zoom: 3.5\n    }}\n    mapStyle=\"https://demotiles.maplibre.org/style.json\"\n  >\n    <ScaleControl />\n  </Map>;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Maplibre CSS stylesheet\nDESCRIPTION: This HTML snippet shows how to include the Maplibre CSS stylesheet in the head of an HTML page. It is necessary for styling the map and its components.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/get-started.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link href='https://unpkg.com/maplibre-gl@<YOUR_MAPLIBRE_VERSION>/dist/maplibre-gl.css' rel='stylesheet' />\n```\n\n----------------------------------------\n\nTITLE: Initializing Map Component with Maplibre GL JS in React\nDESCRIPTION: This snippet demonstrates how to initialize the Map component with Maplibre GL JS in a React application. It imports the necessary modules, sets up an initial view state with longitude, latitude, and zoom level, defines the map style, and renders the map within a React component.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/map.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport {Map} from 'react-map-gl/maplibre';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n\nfunction App() {\n  return (\n    <Map\n      initialViewState={{\n        longitude: -122.4,\n        latitude: 37.8,\n        zoom: 14\n      }}\n      style={{width: 600, height: 400}}\n      mapStyle=\"https://demotiles.maplibre.org/style.json\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Map with Mapbox in react-map-gl\nDESCRIPTION: This example demonstrates how to render a basic map using react-map-gl with Mapbox GL JS. It imports the required components, sets the mapbox access token, specifies the initial view state, and configures the map style.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using Mapbox\nimport * as React from 'react';\nimport Map from 'react-map-gl/mapbox';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nfunction App() {\n  return (\n    <Map\n      // https://visgl.github.io/react-map-gl/docs/get-started/mapbox-tokens\n      mapboxAccessToken=\"<Mapbox access token>\"\n      initialViewState={{\n        longitude: -100,\n        latitude: 40,\n        zoom: 3.5\n      }}\n      style={{width: 600, height: 400}}\n      mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Map v7.0: Incorrect MapLib Usage - TSX\nDESCRIPTION: This code shows the incorrect usage of the Map component in react-map-gl v7.0 when using maplibre-gl, highlighting the need to set the `mapLib` prop and the potential for TypeScript errors if properties from the base map library are not correctly handled.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/upgrade-guide.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport Map from 'react-map-gl';\nimport maplibregl from 'maplibre-gl';\n\nfunction App() {\n  return <Map\n    mapLib={maplibregl}\n    style={MAP_STYLE}\n    maplibreLogo  // This will generate a TypeScript error because it's not defined in Mapbox options\n    />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-map-gl with Mapbox\nDESCRIPTION: This command installs react-map-gl along with the mapbox-gl library and its TypeScript definitions. It is required for using react-map-gl with Mapbox.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/get-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-map-gl mapbox-gl @types/mapbox-gl\n```\n\n----------------------------------------\n\nTITLE: Import and Render Custom Cursor App Component\nDESCRIPTION: This snippet imports a React component named 'App' from the 'maplibre-examples/custom-cursor/src/app' directory. It then renders this component, which is assumed to contain the implementation details for displaying a custom cursor within the React Map GL application. No specific dependencies are listed other than React and the imported component.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/custom-cursor.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport App from 'maplibre-examples/custom-cursor/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Build Production Version: React-Map-GL\nDESCRIPTION: This snippet demonstrates how to build a production-ready version of the react-map-gl application. It utilizes the npm build script defined in the project's package.json.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/hook/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Rendering App Component (JSX)\nDESCRIPTION: Renders the imported 'App' component within a JSX context. This will likely instantiate and display the map with markers, popups and controls, as defined within the component's implementation.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/controls.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dev Environment with Yarn\nDESCRIPTION: These commands are used to set up the development environment for react-map-gl. It checks out the master branch, bootstraps the dependencies using yarn, and then runs the tests to ensure everything is working correctly. Yarn must be installed beforehand.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\nyarn bootstrap\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Heatmap Example: Import and Render App Component\nDESCRIPTION: This code snippet imports the App component from the 'maplibre-examples/heatmap/src/app' module and renders it within the current component.  The App component is expected to handle the heatmap rendering logic and configuration, potentially using React Map GL components internally. No specific dependencies are explicitly listed but React Map GL is required.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/heatmap.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/heatmap/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Install and Start React-Map-GL Example (npm)\nDESCRIPTION: This snippet demonstrates how to install dependencies and start the react-map-gl example using npm.  It assumes Node.js and npm are already installed.  It installs the required packages using `npm i` and then starts the development server using `npm run start`.  This command assumes there is a `start` script defined in the `package.json` file.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/controls/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Rendering Examples Index with Custom Thumbnail Function\nDESCRIPTION: This snippet demonstrates how to use the ExamplesIndex component to display a list of examples. It defines a custom `getThumbnail` function that generates the path to the thumbnail image based on the example's docId or label. The component uses the generated path to display the thumbnail for each example.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/index.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<ExamplesIndex getThumbnail={item => {\n  let id = item.docId || item.label.toLowerCase();\n  id = id.slice(id.indexOf('/'));\n  return `/images/examples/${id}.jpg`;\n}} />\n```\n\n----------------------------------------\n\nTITLE: Running Browser Tests with Yarn\nDESCRIPTION: This command runs the browser tests for react-map-gl using Yarn. It allows for debugging using browser developer tools such as Chrome DevTools.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test browser\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting the Application\nDESCRIPTION: This snippet provides commands for installing the project's dependencies and starting the application. It requires Node.js and npm to be installed. The command `npm i` installs the dependencies listed in the `package.json` file. `npm run start` executes the start script defined in the `package.json` file, typically starting a development server.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/heatmap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Import App Component (JavaScript)\nDESCRIPTION: Imports the main application component from 'maplibre-examples/viewport-animation/src/app'. This component likely contains the logic for handling map interactions and camera transitions using React Map GL. No specific dependencies are mentioned other than the imported module itself.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/viewport-animation.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/viewport-animation/src/app';\n```\n\n----------------------------------------\n\nTITLE: Import MapLibre GL by Module Import (React)\nDESCRIPTION: Demonstrates how to import MapLibre GL using a module import, embedding it directly into the final bundle.  This is a common approach that ensures MapLibre GL is included as part of the application's primary bundle. Dependencies: react, react-map-gl/maplibre, maplibre-gl.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/map.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {Map} from 'react-map-gl/maplibre';\nimport maplibregl from 'maplibre-gl';\n\nfunction App() {\n  return <Map mapLib={maplibregl} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Map v7.1: Correct MapLib Usage - TSX\nDESCRIPTION: This code shows the correct way to import and use the Map component in react-map-gl v7.1 when using maplibre-gl, utilizing the dedicated endpoint `react-map-gl/maplibre`.  The `mapLib` prop is no longer required as it defaults to maplibre-gl.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/upgrade-guide.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Map from 'react-map-gl/maplibre'; // <- mind the updated import\n\nfunction App() {\n  return <Map\n    // mapLib is default to `import('maplibre-gl')`\n    style={MAP_STYLE}\n    maplibreLogo\n    />\n}\n```\n\n----------------------------------------\n\nTITLE: Including Mapbox CSS stylesheet\nDESCRIPTION: This HTML snippet shows how to include the Mapbox CSS stylesheet in the head of an HTML page.  It is necessary for styling the map and its components.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/get-started.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v<YOUR_MAPBOX_VERSION>/mapbox-gl.css' rel='stylesheet' />\n```\n\n----------------------------------------\n\nTITLE: Render Side-by-Side App Component JSX\nDESCRIPTION: This renders the imported `App` component using JSX. This line integrates the side-by-side map functionality into the React application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/side-by-side.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Use Pre-bundled MapLibre GL (React)\nDESCRIPTION: Demonstrates how to use a pre-bundled MapLibre GL library within a React component, assuming it has been loaded via a script tag.  This example shows how to access the global `maplibregl` object. Dependencies: react, react-map-gl/maplibre.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/map.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {Map} from 'react-map-gl/maplibre';\n\nfunction App() {\n  return <Map mapLib={window.maplibregl} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Installs the necessary dependencies for the react-map-gl application using npm. This command is a prerequisite to run the example application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/basic/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Import App Component (JavaScript)\nDESCRIPTION: This snippet imports the App component from a specific path within the mapbox-examples repository. This App component likely contains the logic for creating and styling map layers dynamically. The import statement makes the App component available for use in the current file.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/layers.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'mapbox-examples/layers/src/app';\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import of MapLibre GL (React)\nDESCRIPTION: Illustrates the dynamic import of MapLibre GL, enabling bundle splitting for improved loading performance.  This example shows how to lazy-load MapLibre GL, reducing the initial bundle size. Dependencies: react, react-map-gl/maplibre.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/maplibre/map.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport {Map} from 'react-map-gl/maplibre';\n\nfunction App() {\n  return <Map mapLib={import('maplibre-gl')} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing App Component in JSX\nDESCRIPTION: This snippet imports the 'App' component from the 'maplibre-examples/geojson-animation/src/app' module, which likely contains the logic for the GeoJSON animation. It then renders the imported component within a JSX context, integrating the animation functionality into the application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/geojson-animation.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/geojson-animation/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: NPM Install and Start\nDESCRIPTION: This snippet provides the commands to install dependencies and start the development server for the React Map GL custom cursor example. It uses npm to manage the project's dependencies and run the application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/custom-cursor/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Install and Run Project\nDESCRIPTION: These commands install project dependencies and starts the application. It assumes that Node.js and npm are already installed.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/filter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Disable Inertia on Map Controller - JS\nDESCRIPTION: This JavaScript snippet demonstrates how to disable inertia on the map controller in react-map-gl.  It sets the inertia property to 0 for dragPan, dragRotate, and touchZoom interactions. This is useful for reverting to the behavior of previous versions of react-map-gl.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/upgrade-guide.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst CONTROLLER_OPTS = {\n  dragPan: {inertia: 0},\n  dragRotate: {inertia: 0},\n  touchZoom: {inertia: 0}\n};\n\n<MapGL {...CONTROLLER_OPTS} ... />\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the project. It uses npm, the Node Package Manager, to fetch and install packages listed in the project's package.json file.  This step is required before running the application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/side-by-side/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Import and Render Cluster App Component (JSX)\nDESCRIPTION: This snippet imports the `App` component from a specified path and renders it within the React environment. The component likely handles the map rendering and cluster logic. This is a JSX code snippet designed for use within a React application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/clusters.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport App from 'mapbox-examples/clusters/src/app';\n\n<App />\n```\n\n----------------------------------------\n\nTITLE: Running tests in browser with yarn\nDESCRIPTION: This snippet shows how to run the test suite in a browser environment using yarn. This enables testing of the UI components and their interactions within a web browser, allowing for debugging with browser developer tools.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test browser\n```\n\n----------------------------------------\n\nTITLE: Render App Component (JSX)\nDESCRIPTION: Renders the imported 'App' component within the React application.  This will likely trigger the map to render and initiate any camera transition logic implemented within the 'App' component. The specific appearance and behavior depend on the implementation of the App component.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/viewport-animation.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Installing react-map-gl with Maplibre\nDESCRIPTION: This command installs react-map-gl and maplibre-gl as dependencies using npm.  This allows you to use Maplibre GL JS as the underlying map library for react-map-gl.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install react-map-gl maplibre-gl\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the React Map GL project, likely including react-map-gl and any related libraries.  It is a standard npm command used to download and install packages listed in the project's package.json file.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/custom-overlay/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Import React Component\nDESCRIPTION: This snippet imports the App component from the specified path.  The App component likely contains the React Map GL implementation with limited interaction functionalities. No specific dependencies are listed, but it relies on React and React Map GL.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/interaction.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'mapbox-examples/interaction/src/app';\n```\n\n----------------------------------------\n\nTITLE: Install and Start the Draggable Marker Example (Bash)\nDESCRIPTION: These commands install the necessary dependencies and start the development server for the draggable marker example. It requires Node.js and npm to be installed on the system. It assumes the current directory is the root of the project.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/draggable-markers/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Render Terrain Example App (JSX)\nDESCRIPTION: This snippet renders the imported `App` component.  The App component is responsible for setting up and rendering the map with terrain enabled. It is assumed that `App` is a React component that utilizes `react-map-gl` and Mapbox GL JS.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/terrain.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment using yarn\nDESCRIPTION: This snippet demonstrates the commands required to set up the development environment for react-map-gl. It involves checking out the master branch, bootstrapping the project with yarn, and running the tests.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\nyarn bootstrap\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Import App component (JavaScript)\nDESCRIPTION: This snippet imports the main App component from the 'mapbox-examples/draw-polygon/src/app' directory.  This component likely contains the logic for rendering a map and implementing polygon drawing functionality.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/draw-polygon.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'mapbox-examples/draw-polygon/src/app';\n```\n\n----------------------------------------\n\nTITLE: Install dependencies\nDESCRIPTION: This command installs the necessary dependencies for the React-Map-GL application, typically listed in a `package.json` file. It uses the Node Package Manager (npm) to download and install all required packages.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/draw-polygon/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Install and Start Application\nDESCRIPTION: These commands install the necessary dependencies and start the development server for the application. It assumes that Node.js and npm are already installed. This is a standard way to start a React application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/geojson-animation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: MapLibre: Setting RTLTextPlugin URL - TSX\nDESCRIPTION: This code snippet demonstrates how to specify the URL for the RTLTextPlugin when using MapLibre to maintain previous behavior after removing the default plugin.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/upgrade-guide.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Map RTLTextPlugin=\"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js\" />\n```\n\n----------------------------------------\n\nTITLE: Run Application\nDESCRIPTION: Starts the react-map-gl application using npm. This command executes the application, making it accessible for testing and development.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/basic/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using npm\nDESCRIPTION: This command installs the necessary project dependencies using npm (Node Package Manager). It retrieves all packages listed in the project's package.json file and installs them in the node_modules directory. This step is essential before running or developing the application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/layers/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Render App component (JSX)\nDESCRIPTION: This snippet renders the imported App component. This likely triggers the rendering of the map and the polygon drawing controls. The App component is assumed to be a functional or class component defined in the imported module.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/draw-polygon.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Import Terrain Example App Component (JavaScript)\nDESCRIPTION: This snippet imports the `App` component from the specified path, which is likely a React component responsible for rendering the terrain example. It serves as the entry point for the terrain visualization.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/terrain.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'mapbox-examples/terrain/src/app';\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Development Server\nDESCRIPTION: This code snippet shows the commands to run the Next.js development server using either npm or yarn. It starts the application and makes it accessible at http://localhost:3000.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/nextjs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Access Browser Tests with Mapbox Token\nDESCRIPTION: This URL provides access to the browser tests for React Map GL. It requires a valid Mapbox Access Token to be appended as a query parameter, enabling the tests to authenticate with the Mapbox service.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/TESTING.md#_snippet_2\n\nLANGUAGE: URL\nCODE:\n```\nhttp://localhost:8080/?access_token=MAPBOX_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Running the Animated GeoJSON Example\nDESCRIPTION: This command installs the necessary dependencies and starts the development server for the Animated GeoJSON example. It assumes that Node.js and npm are already installed on the system.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/geojson-animation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Render Filter App Component\nDESCRIPTION: This snippet renders the `App` component using JSX syntax.  It assumes that `App` is a valid React component that can be rendered directly. The App component likely contains map-related functionalities and filter UI elements.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/filter.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Import GeoJSON Example App (JavaScript)\nDESCRIPTION: This snippet imports the 'App' component from the 'maplibre-examples/geojson/src/app' module. This component presumably contains the logic for rendering a GeoJSON dataset on a map using React-Map-GL.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/geojson.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/geojson/src/app';\n```\n\n----------------------------------------\n\nTITLE: Run Unit and Lint Tests - npm\nDESCRIPTION: This command executes unit and lint tests for the React Map GL library.  It is essential for ensuring code quality and adherence to style guidelines before committing changes.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/TESTING.md#_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running the Example App with npm\nDESCRIPTION: This code snippet demonstrates how to install dependencies and start the React Map GL application using npm. It assumes that Node.js and npm are installed on the system.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/clusters/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running tests in Node.js with yarn\nDESCRIPTION: This snippet demonstrates how to run the test suite specifically within a Node.js environment using yarn. This allows for focused testing of server-side or Node.js-specific components.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test node\n```\n\n----------------------------------------\n\nTITLE: Rendering the App Component\nDESCRIPTION: This code snippet renders the imported 'App' component. It's assumed that 'App' is a React component that handles the custom cursor logic. This rendering triggers the display of the map and the custom cursor functionality.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/custom-cursor.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Running the Example\nDESCRIPTION: These commands install dependencies and start the React Map GL application.  It assumes npm is installed and configured.  The `npm start` command runs the application in development mode.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/custom-cursor/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Install and Run: React-Map-GL\nDESCRIPTION: This snippet shows how to install the necessary dependencies and start the development server for the react-map-gl example.  It assumes npm is installed and configured.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/hook/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running tests with yarn\nDESCRIPTION: This snippet shows how to execute the test suite using yarn.  This is a crucial step to ensure that any changes made do not introduce regressions.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Start the React Map GL application\nDESCRIPTION: This command starts the React Map GL application. It typically executes a script defined in the project's package.json file, which may involve compiling the code, starting a development server, and opening the application in a web browser. This command is used to run and test the application after installing the dependencies.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/layers/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the react-map-gl project using npm. It fetches and installs all packages listed in the project's package.json file.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/controls/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Running the React-Map-GL Example\nDESCRIPTION: This snippet provides commands to install dependencies and start the react-map-gl example application. It assumes that the project has been set up according to the instructions in the documentation.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/terrain/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running the Geocoder Example\nDESCRIPTION: This command installs the necessary dependencies and starts the React Map GL application for the geocoder example. It assumes that Node.js and npm are installed.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/geocoder/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing react-map-gl with Mapbox\nDESCRIPTION: This command installs react-map-gl and mapbox-gl as dependencies using npm. This allows you to use Mapbox GL JS as the underlying map library for react-map-gl.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install react-map-gl mapbox-gl\n```\n\n----------------------------------------\n\nTITLE: Render App Component\nDESCRIPTION: Renders the imported App component within the React application. This is the primary component responsible for displaying and managing the zoom to bounds feature in React-Map-GL.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/mapbox/zoom-to-bounds.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<App />\n```\n\n----------------------------------------\n\nTITLE: Running the React Map GL Example (npm)\nDESCRIPTION: These commands install the necessary dependencies and start the React Map GL application using npm.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/filter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: ReactMapGL Component Usage (Correct)\nDESCRIPTION: This snippet shows the correct way to use the ReactMapGL component. By defining 'width' and 'height' after the viewport props, they correctly override any values from the viewport, ensuring the component renders with the specified dimensions.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/upgrade-guide.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// GOOD: 'width' and 'height' below will override the values in 'viewport'\n<ReactMapGL {...viewport} width={500} height={400} />\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Installs the necessary dependencies for the project using npm. This command downloads and installs all packages listed in the project's package.json file.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/interaction/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Start the Application\nDESCRIPTION: Starts the application using npm. This command typically executes a script defined in the package.json file, often starting a development server.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/geocoder/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Installs the necessary dependencies for the project using npm. This command downloads and installs all the packages listed in the package.json file.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/geocoder/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Running the GeoJSON Example\nDESCRIPTION: These commands install dependencies and start the development server for the GeoJSON example application. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/geojson/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Start Application\nDESCRIPTION: Starts the React-Map-GL application using npm. This command will typically run a development server and open the application in a browser.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/terrain/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Run the application\nDESCRIPTION: This command starts the React Map GL application using npm.  It assumes the project has been configured with a start script.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/viewport-animation/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Install and Run the Project\nDESCRIPTION: This snippet provides instructions on how to install the project dependencies and start the development server using npm. It assumes Node.js and npm are already installed on the system.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/heatmap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Start Application\nDESCRIPTION: Starts the example application using npm. This command runs the application after dependencies have been installed.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/draggable-markers/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Run the Example\nDESCRIPTION: These commands install the necessary dependencies and start the application.  It uses npm to install dependencies and then run the start script defined in `package.json`.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/draw-polygon/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing Mapbox CSS for ScaleControl\nDESCRIPTION: This CSS import is necessary to style the map and its components, including ScaleControl. Without importing it, the component may not render correctly.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/scale-control.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nimport 'mapbox-gl/dist/mapbox-gl.css';\n```\n\n----------------------------------------\n\nTITLE: Start the application\nDESCRIPTION: This command starts the React-Map-GL application, usually by executing a script defined in the `package.json` file. This command initiates the development server and makes the application accessible in a web browser.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/draw-polygon/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Install and Start React Map GL Example (npm)\nDESCRIPTION: These commands install the necessary dependencies and start the React Map GL application. The `npm i` command installs all packages listed in the `package.json` file, and `npm run start` executes the start script defined in the same file, typically launching a development server.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/viewport-animation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the project using npm.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/deckgl-overlay/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Start Development Server\nDESCRIPTION: Starts the development server for the project. This command typically uses a script defined in the project's package.json file to launch a local server, enabling live reloading and hot module replacement for development purposes.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/zoom-to-bounds/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing App Component\nDESCRIPTION: Imports the 'App' component from an external module, likely containing the implementation for markers, popups, and controls. The 'maplibre-examples' path suggests that the component demonstrates usage with Maplibre GL JS.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/website/src/examples/maplibre/controls.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport App from 'maplibre-examples/controls/src/app';\n```\n\n----------------------------------------\n\nTITLE: Start development server\nDESCRIPTION: Starts the development server using npm.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/maplibre/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and starting the application\nDESCRIPTION: These commands install the necessary dependencies for the project using npm and then start the application. 'npm i' installs the dependencies listed in the package.json file, and 'npm run start' executes the start script defined in the same file.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/globe/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Build production version of react-map-gl example\nDESCRIPTION: This command builds a production-ready version of the react-map-gl example project.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/controlled/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting the App\nDESCRIPTION: This snippet shows how to install the project dependencies using npm and then starts the application. It's the standard way to start a project after cloning or downloading it.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/deckgl-overlay/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Build production version\nDESCRIPTION: Builds a production-ready version of the application using npm.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/maplibre/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Installs the necessary dependencies for the React-Map-GL application using npm.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/maplibre/terrain/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: ReactMapGL Component Usage (Incorrect)\nDESCRIPTION: This snippet demonstrates an incorrect way of using the ReactMapGL component where the 'width' and 'height' props are overridden by the viewport object, potentially leading to unexpected behavior. It's important to define width and height after the spread viewport props to ensure correct rendering.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/upgrade-guide.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// BAD: 'width' and 'height' below will be overridden by what's in the 'viewport' object\n<ReactMapGL width={500} height={400} {...viewport} />\n```\n\n----------------------------------------\n\nTITLE: Build Production Version\nDESCRIPTION: This snippet shows how to build a production version of the application. It uses the `npm run build` command, which executes the build script defined in the `package.json` file. This typically involves bundling and optimizing the application for deployment.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/redux/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Run Browser Tests - npm\nDESCRIPTION: This command initiates browser tests for the React Map GL library.  A Mapbox Access Token must be provided in the URL for the tests to pass, simulating real-world usage scenarios and validating browser compatibility.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/TESTING.md#_snippet_1\n\nLANGUAGE: npm\nCODE:\n```\nnpm run test-browser\n```\n\n----------------------------------------\n\nTITLE: Running the React Map GL Example\nDESCRIPTION: This code snippet provides the commands to install dependencies and start the React Map GL application.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/layers/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Mapbox Token\nDESCRIPTION: This code snippet shows how to configure Webpack to inject the Mapbox access token as an environment variable into the application. It uses the DefinePlugin to conditionally define the token based on the environment (production or development), fetching the appropriate token from environment variables.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/tips-and-tricks.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  /// webpack.config.js\n  const {DefinePlugin} = require('webpack');\n\n  module.exports = {\n    ...\n    plugins: [\n      new DefinePlugin({\n        'process.env.MapboxAccessToken': JSON.stringify(process.env.NODE_ENV == 'production' ? process.env.MapboxAccessTokenProd : process.env.MapboxAccessTokenDev)\n      })\n    ]\n  };\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration for Mapbox Token\nDESCRIPTION: This snippet configures Rollup to replace a placeholder environment variable with the actual Mapbox access token during the build process. It leverages the @rollup/plugin-replace plugin to conditionally substitute the token based on the NODE_ENV environment variable, ensuring different tokens are used for production and development.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/tips-and-tricks.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  /// rollup.config.js\n  const replace = require('@rollup/plugin-replace').default;\n\n  module.exports = {\n    ...\n    plugins: [\n      replace({ \n        'process.env.MapboxAccessToken': JSON.stringify(process.env.NODE_ENV == 'production' ? process.env.MapboxAccessTokenProd : process.env.MapboxAccessTokenDev)\n      })\n    ]\n  };\n```\n\n----------------------------------------\n\nTITLE: Using Pre-bundled Mapbox GL JS with React Map GL\nDESCRIPTION: This Typescript snippet shows how to use a pre-bundled version of Mapbox GL JS loaded via a `<script>` tag in the HTML.  This approach requires the `mapboxgl` object to be available in the global scope (i.e., `window.mapboxgl`).  The `mapLib` prop is then set to `window.mapboxgl`.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/map.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map from 'react-map-gl/mapbox';\n\nfunction App() {\n  return <Map mapLib={window.mapboxgl} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Overlays (v0.6)\nDESCRIPTION: This snippet shows how overlays were imported in older versions (v0.6) of react-map-gl.  Overlays were imported via their relative source paths. This approach is deprecated in newer versions.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/upgrade-guide.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// v0.6\nimport MapGL from 'react-map-gl';\nimport SVGOverlay from 'react-map-gl/src/api-reference/svg-overlay';\n```\n\n----------------------------------------\n\nTITLE: Dynamic Importing Mapbox GL JS with React Map GL\nDESCRIPTION: This example illustrates dynamic importing of the Mapbox GL JS library.  This enables bundle splitting, potentially improving initial load times.  The `mapLib` prop of the `Map` component is assigned the result of the dynamic import, which is a Promise that resolves to the `mapboxgl` object.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/mapbox/map.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Map from 'react-map-gl/mapbox';\n\nfunction App() {\n  return <Map mapLib={import('mapbox-gl')} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Transform Request Function with Header-Based Authentication in TypeScript\nDESCRIPTION: This TypeScript function demonstrates how to modify outgoing requests to include an authentication header when accessing a specific tile source. It checks if the resource type is 'Tile' and the URL matches the target tile source, and then adds an 'Authorization' header with a bearer token.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/get-started/mapbox-tokens.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst transformRequest = (url, resourceType) => {\n  if (resourceType === 'Tile' && url.match('yourTileSource.com')) {\n    return {\n      url: url,\n      headers: { 'Authorization': 'Bearer ' + yourAuthToken }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn\nDESCRIPTION: This command runs the tests for react-map-gl using Yarn. It ensures that all tests pass before submitting a pull request.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Running Node Tests with Yarn\nDESCRIPTION: This command runs the Node.js tests for react-map-gl using Yarn. It targets the Node.js environment for testing.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/docs/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test node\n```\n\n----------------------------------------\n\nTITLE: Install and Run the Application\nDESCRIPTION: This snippet shows the commands to install dependencies and run the application. It requires npm to be installed.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/mapbox/zoom-to-bounds/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Install dependencies using npm\nDESCRIPTION: This command installs the necessary dependencies for the react-map-gl example project.\nSOURCE: https://github.com/visgl/react-map-gl/blob/master/examples/get-started/controlled/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```"
  }
]