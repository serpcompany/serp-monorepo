[
  {
    "owner": "jamiemason",
    "repo": "syncpack",
    "content": "TITLE: Updating Dependencies with Syncpack CLI Commands\nDESCRIPTION: This snippet demonstrates various Syncpack CLI commands for updating dependencies. It includes examples for updating devDependencies, filtering updates by package name, updating specific package types, and updating dependencies in a single package.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# update packages in `devDependencies` in the whole repo\nsyncpack update --types dev\n# update eslint related packages\nsyncpack update --filter eslint\n# update `dependencies` in just one package\nsyncpack update --source packages/foo --types prod\n# update react related packages in `dependencies` only\nsyncpack update --filter react --types prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Groups in Syncpack JSON Configuration\nDESCRIPTION: This snippet demonstrates how to set up Version Groups in the .syncpackrc configuration file. It shows how to define groups for packages using different versions of a framework, allowing for internal consistency within groups while maintaining differences between groups.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyTypes\": [\"prod\"],\n  \"semverGroups\": [\n    {\n      \"label\": \"use caret ranges in the dashboard-ui in production\",\n      \"packages\": [\"dashboard-ui\"],\n      \"dependencyTypes\": [\"prod\"],\n      \"dependencies\": [\"**\"],\n      \"range\": \"^\"\n    },\n    {\n      \"label\": \"use exact version numbers in production\",\n      \"packages\": [\"**\"],\n      \"dependencyTypes\": [\"prod\"],\n      \"dependencies\": [\"**\"],\n      \"range\": \"\"\n    }\n  ],\n  \"versionGroups\": [\n    {\n      \"label\": \"These packages are stuck on next@11 for now\",\n      \"packages\": [\"@stricken/server\", \"@stricken/ui\"],\n      \"dependencyTypes\": [\"prod\"],\n      \"dependencies\": [\"next\", \"react\", \"react-dom\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Groups in syncpack JSON Configuration\nDESCRIPTION: A comprehensive example of version group configuration that demonstrates all available types: pinned, banned, ignored, snapped, and standard groups. This configuration allows for fine-grained control of dependency versions across different packages in a monorepo.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/version-groups.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      // Pinned\n      \"label\": \"Ensure AWS SDK dependencies always use the same version\",\n      \"packages\": [\"**\"],\n      \"dependencies\": [\"@aws-sdk/**\"],\n      \"pinVersion\": \"3.272.0\"\n    },\n    {\n      // Banned\n      \"label\": \"Please use lodash instead of underscore\",\n      \"packages\": [\"**\"],\n      \"dependencies\": [\"underscore\"],\n      \"isBanned\": true\n    },\n    {\n      // Ignored\n      \"label\": \"Ignore issues in these dodgy packages\",\n      \"packages\": [\"oops-moment\", \"workaround\"],\n      \"dependencies\": [\"**\"],\n      \"isIgnored\": true\n    },\n    {\n      // Snapped\n      \"label\": \"Ensure all packages use whatever version the mobile-core package is using\",\n      \"dependencies\": [\"react\", \"react-native\"],\n      \"packages\": [\"**\"],\n      \"snapTo\": [\"mobile-core\"]\n    },\n    {\n      // Pinned\n      \"label\": \"Use '*' under 'peerDependencies' everywhere\",\n      \"packages\": [\"**\"],\n      \"dependencies\": [\"**\"],\n      \"dependencyTypes\": [\"peer\"],\n      \"pinVersion\": \"*\"\n    },\n    {\n      // Standard\n      \"label\": \"Resolve mismatches here with the oldest version instead of the newest\",\n      \"dependencies\": [\"@vintage/**\"],\n      \"packages\": [\"**\"],\n      \"preferVersion\": \"lowestSemver\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Syncpack Configuration with Semver Groups\nDESCRIPTION: Extended configuration with semver group definitions for version number standardization\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyTypes\": [\"prod\"],\n  \"semverGroups\": [\n    {\n      \"label\": \"use exact version numbers in production\",\n      \"packages\": [\"**\"],\n      \"dependencyTypes\": [\"prod\"],\n      \"dependencies\": [\"**\"],\n      \"range\": \"\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Syncpack Configuration with Overrides\nDESCRIPTION: Configuration demonstrating how to override semver ranges for specific packages\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyTypes\": [\"prod\"],\n  \"semverGroups\": [\n    {\n      \"label\": \"use caret ranges in the dashboard-ui in production\",\n      \"packages\": [\"dashboard-ui\"],\n      \"dependencyTypes\": [\"prod\"],\n      \"dependencies\": [\"**\"],\n      \"range\": \"^\"\n    },\n    {\n      \"label\": \"use exact version numbers in production\",\n      \"packages\": [\"**\"],\n      \"dependencyTypes\": [\"prod\"],\n      \"dependencies\": [\"**\"],\n      \"range\": \"\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Syncpack Configuration\nDESCRIPTION: Initial .syncpackrc configuration focusing on production dependencies\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyTypes\": [\"prod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syncpack with Version Groups in .syncpackrc\nDESCRIPTION: This configuration defines two version groups in a .syncpackrc file, pinning @types/node to version 14.18.36 and chalk to version 4.1.2 across all packages. The configuration leverages the JSON Schema introduced in Syncpack 11.2.1 for validation.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/_json-schema.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/syncpack/dist/schema.json\",\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"@types/node\"],\n      \"packages\": [\"**\"],\n      \"pinVersion\": \"14.18.36\"\n    },\n    {\n      \"dependencies\": [\"chalk\"],\n      \"packages\": [\"**\"],\n      \"pinVersion\": \"4.1.2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Syncpack Configuration for Dev Dependencies\nDESCRIPTION: This snippet shows how to modify the .syncpackrc file to include devDependencies in Syncpack's linting process. It adds the 'dev' dependency type to the configuration.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyTypes\": [\"prod\", \"dev\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Syncpack Configuration File\nDESCRIPTION: Provides the complete default configuration for Syncpack. This JavaScript configuration file specifies custom dependency types, indentation, sorting preferences, file paths to process, and other configuration options. This serves as a starting point for customization.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/syncpackrc.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/** @type {import(\"syncpack\").RcFile} */\nconst config = {\n  customTypes: {\n    dev: {\n      strategy: 'versionsByName',\n      path: 'devDependencies',\n    },\n    local: {\n      strategy: 'name~version',\n      namePath: 'name',\n      path: 'version',\n    },\n    overrides: {\n      strategy: 'versionsByName',\n      path: 'overrides',\n    },\n    peer: {\n      strategy: 'versionsByName',\n      path: 'peerDependencies',\n    },\n    pnpmOverrides: {\n      strategy: 'versionsByName',\n      path: 'pnpm.overrides',\n    },\n    prod: {\n      strategy: 'versionsByName',\n      path: 'dependencies',\n    },\n    resolutions: {\n      strategy: 'versionsByName',\n      path: 'resolutions',\n    },\n  },\n  dependencyTypes: ['**'],\n  filter: '.',\n  formatBugs: true,\n  formatRepository: true,\n  indent: '  ',\n  semverGroups: [],\n  sortAz: ['bin', 'contributors', 'dependencies', 'devDependencies', 'keywords', 'peerDependencies', 'resolutions', 'scripts'],\n  sortExports: ['types', 'node-addons', 'node', 'browser', 'import', 'require', 'development', 'production', 'default'],\n  sortFirst: ['name', 'description', 'version', 'author'],\n  sortPackages: true,\n  source: ['package.json', 'packages/*/package.json'],\n  specifierTypes: ['**'],\n  versionGroups: [],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Running Syncpack via NPX\nDESCRIPTION: Quick way to try Syncpack using NPX without installation\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx syncpack list\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Dependencies in Syncpack\nDESCRIPTION: Configuration example showing how to set up version groups to ignore specific dependencies. The configuration uses isIgnored flag to completely exclude dependencies from version synchronization.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/version-groups/ignored.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"keep-walking\"],\n      \"isIgnored\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Syncpack via NPM\nDESCRIPTION: Command to install syncpack as a development dependency in your project. This makes the syncpack CLI available for use in your project scripts.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev syncpack\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Dependencies in Syncpack JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up Syncpack to ignore specific dependencies. It uses the 'isIgnored' flag to exclude the 'oops-moment' and 'workaround' packages from semver range synchronization for all dependencies.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/semver-groups/ignored.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semverGroups\": [\n    {\n      \"packages\": [\"oops-moment\", \"workaround\"],\n      \"dependencies\": [\"**\"],\n      \"isIgnored\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Syncpack with Custom Configuration Path\nDESCRIPTION: Shows how to specify a custom location for the Syncpack configuration file when running the syncpack command. This allows you to keep your configuration in a non-standard location.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/syncpackrc.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list --config ./config/syncpack.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Dependency Pattern Semver Ranges in Syncpack\nDESCRIPTION: Configuration example showing how to set tilde (~) semver ranges for all @alpha/** dependencies across the entire monorepo.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/semver-groups.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semverGroups\": [\n    {\n      \"range\": \"~\",\n      \"dependencies\": [\"@alpha/**\"],\n      \"packages\": [\"**\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Syncpack Commands on Specific Sources in Bash\nDESCRIPTION: Demonstrates how to use the --source flag with Syncpack to target specific package.json files or directories. It shows examples for targeting the root package, packages matching a glob pattern, and using multiple source values.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/option/_source.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# only the root package\nsyncpack ${props.command} --source 'package.json'\n# only packages matching a glob\nsyncpack ${props.command} --source 'packages/beta-*'\n# multiple values can be provided\nsyncpack ${props.command} --source 'package.json' --source 'packages/beta-*'\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Version Pinning with snapTo in Syncpack\nDESCRIPTION: This configuration example demonstrates how to ensure all packages in a monorepo use the same version of React and React Native that the mobile-app package is using. The snapTo array specifies which package's versions should be used as the reference point.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/version-groups/snapped-to.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"react\", \"react-native\"],\n      \"snapTo\": [\"mobile-app\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Semver Range Group in Syncpack JSON Configuration\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up a semver range group in Syncpack. It specifies a range of '~' for dependencies matching '@alpha/**' across all packages.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/semver-groups/with-range.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semverGroups\": [\n    {\n      \"range\": \"~\",\n      \"dependencies\": [\"@alpha/**\"],\n      \"packages\": [\"**\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Configuration File in Syncpack CLI\nDESCRIPTION: This command shows how to run a Syncpack command with a custom configuration file location using the --config flag. It directs Syncpack to use a configuration file located at ./config/.syncpackrc instead of the default locations.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/option/_config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack ${props.command} --config ./config/.syncpackrc\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript-validated Syncpack Configuration File in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a .syncpackrc.js configuration file with TypeScript validation. The example shows how to pin specific versions of dependencies (@types/node and chalk) across all packages in a monorepo.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/_intellisense.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\n/** @type {import(\"syncpack\").RcFile} */\nconst config = {\n  versionGroups: [\n    {\n      dependencies: ['@types/node'],\n      packages: ['**'],\n      pinVersion: '14.18.36',\n    },\n    {\n      dependencies: ['chalk'],\n      packages: ['**'],\n      pinVersion: '4.1.2',\n    },\n  ],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Filtering Syncpack Commands with Regular Expressions in Bash\nDESCRIPTION: Demonstrates how to use the '--filter' option with syncpack commands to target specific packages. The filter pattern is passed to a RegExp constructor to match package names, allowing for operations on only packages that match the specified pattern.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/option/_filter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# only include react, react-dom, preact etc\nsyncpack ${props.command} --filter 'react'\n# only include typescript or eslint packages\nsyncpack ${props.command} --filter 'typescript|eslint'\n```\n\n----------------------------------------\n\nTITLE: Overriding Indentation in Syncpack CLI Commands\nDESCRIPTION: Shows different ways to configure indentation in Syncpack CLI commands. You can specify four spaces, a single tab character, or use the escape sequence '\\t' which gets converted to a tab character. The default indentation is 2 spaces if not specified.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/option/_indent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# four spaces\nsyncpack ${props.command} --indent \"    \"\n# one tab\nsyncpack ${props.command} --indent '\\t'\n# \\t is converted into a tab\nsyncpack ${props.command} --indent '\\t'\n```\n\n----------------------------------------\n\nTITLE: Configuring Banned Dependencies in Syncpack\nDESCRIPTION: Example configuration showing how to ban a dependency named 'never-gonna' using the syncpack configuration file. The configuration uses the isBanned property in combination with the dependencies array to specify which packages should be banned.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/version-groups/banned.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"never-gonna\"],\n      \"isBanned\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syncpack Version Groups for AWS SDK in JSON\nDESCRIPTION: This snippet shows how to configure Syncpack to pin all @aws-sdk dependencies to a specific version. It uses a .syncpackrc file to define a version group that matches all @aws-sdk packages and sets their version to 3.272.0.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_pin-aws.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"@aws-sdk/**\"],\n      \"pinVersion\": \"3.272.0\",\n      \"label\": \"AWS SDK Dependencies should all have the same version\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Indentation in Syncpack JSON Configuration\nDESCRIPTION: This snippet shows how to configure the indentation style in the .syncpackrc configuration file. The 'indent' property specifies the characters used for indentation when Syncpack writes to package.json files.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/indent.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"indent\": \"  \"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lowest Version Selection in Syncpack\nDESCRIPTION: Configuration example showing how to set up a version group that selects the lowest valid semver version when resolving version mismatches across all packages and dependency types.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/version-groups/lowest-version.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"packages\": [\"**\"],\n      \"dependencies\": [\"**\"],\n      \"dependencyTypes\": [\"**\"],\n      \"preferVersion\": \"lowestSemver\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Types in Syncpack JSON Configuration\nDESCRIPTION: This snippet demonstrates how to configure the dependencyTypes property in the .syncpackrc file to include only dependencies and devDependencies. It uses an array of strings to specify the desired dependency types.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/dependency-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyTypes\": [\"dev\", \"prod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Groups for Flexible Rules\nDESCRIPTION: Advanced configuration using version groups to allow compatible but non-identical Node.js versions while maintaining strict checking for other engine types.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyTypes\": [\n    \"dev\"\n    \"engines\"\n    \"peer\"\n    \"prod\"\n  ],\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"node\"],\n      \"dependencyTypes\": [\"engines\"],\n      \"policy\": \"sameRange\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syncpack Version Groups to Ban @types Packages Outside devDependencies\nDESCRIPTION: JSON configuration for syncpack that creates a version group to ban @types packages from appearing anywhere except in devDependencies. The configuration uses pattern matching to identify @types packages and marks them as banned in non-dev dependency sections.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_ban-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"@types/**\"],\n      \"dependencyTypes\": [\"!dev\"],\n      \"isBanned\": true,\n      \"label\": \"@types packages should only be under devDependencies\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Dependency Types in Syncpack JSON Configuration\nDESCRIPTION: This example shows how to configure the dependencyTypes property in the .syncpackrc file to exclude dependencies and devDependencies. It uses an array of strings with negation to specify the dependency types to be excluded.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/dependency-types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyTypes\": [\"!dev\", \"!prod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js Engine Type to Syncpack Dependency Checks\nDESCRIPTION: Configuration that adds the custom 'nodeEngine' type to the list of dependency types that Syncpack will check by default. This ensures Node.js engine versions are included in regular Syncpack operations.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines-node.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customTypes\": {\n    \"nodeEngine\": {\n      \"path\": \"engines.node\",\n      \"strategy\": \"version\"\n    }\n  },\n\n  \"dependencyTypes\": [\n    \"dev\"\n    \"nodeEngine\"\n    \"peer\"\n    \"prod\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syncpack Version Groups in JSON\nDESCRIPTION: This JSON configuration for Syncpack defines a Version Group that ensures all packages use the same versions of React and React Native as specified in the mobile-app package. It demonstrates how to set up dependency synchronization across a monorepo.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_react-native.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"label\": \"Always use the versions of react brought in by the Mobile App\",\n      \"dependencies\": [\"react\", \"react-native\"],\n      \"snapTo\": [\"mobile-app\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinned Versions in Syncpack JSON\nDESCRIPTION: This snippet demonstrates how to configure Syncpack to pin a specific version of a dependency. In this example, it pins the @types/node package to version 18.14.2 across all projects.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/version-groups/pinned.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"@types/node\"],\n      \"pinVersion\": \"18.14.2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syncpack to Exclude File Specifier Type\nDESCRIPTION: This example shows how to configure Syncpack to exclude dependencies with the 'file' specifier type. This will prevent inspection of dependencies specified with 'file:path/to/package.tgz' format, while including all other types.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/specifier-types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"specifierTypes\": [\"!file\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Banned Dependencies in Syncpack JSON\nDESCRIPTION: This snippet shows how to add a version group in the .syncpackrc file to ban a specific dependency. It uses the 'isBanned' property to mark the dependency as prohibited.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_ban-always.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"never-gonna\"],\n      \"isBanned\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default sortExports Configuration in Syncpack\nDESCRIPTION: The default configuration for sortExports in .syncpackrc, which orders properties according to the Node.js documentation for conditional exports. The order follows the recommended pattern from the Node.js documentation.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/sort-exports.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sortExports\": [\"types\", \"node-addons\", \"node\", \"browser\", \"import\", \"require\", \"development\", \"production\", \"default\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syncpack to Include Specific Specifier Types\nDESCRIPTION: This snippet demonstrates how to configure Syncpack to only include dependencies with 'latest' and 'workspace-protocol' specifier types. This will limit inspection to dependencies using '*' and 'workspace:*', 'workspace:~', etc.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/specifier-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"specifierTypes\": [\"latest\", \"workspace-protocol\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinned Version Groups in Syncpack with .syncpackrc\nDESCRIPTION: An example configuration for .syncpackrc that creates a Pinned Version Group to enforce 'workspace:*' protocol for local packages in devDependencies. The configuration includes label, dependencies list, dependency type restriction, and pinVersion setting.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_pin-workspace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"label\": \"Use workspace protocol when developing local packages\",\n      \"dependencies\": [\"@your-repo/node-client-plugin-retry\", \"@your-repo/node-client\", \"dashboard-ui\"],\n      \"dependencyTypes\": [\"dev\"],\n      \"pinVersion\": \"workspace:*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring lintSemverRanges in .syncpackrc\nDESCRIPTION: Default configuration for the lintSemverRanges option in the .syncpackrc configuration file. When set to true, syncpack will check that all semver ranges in package.json files are valid during the lint process.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/lint-semver-ranges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lintSemverRanges\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Types for Engines and Package Manager in .syncpackrc\nDESCRIPTION: This JSON configuration defines custom types for 'engines' and 'packageManager' in the .syncpackrc file. It specifies the path and strategy for version management in package.json files.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_package-manager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customTypes\": {\n    \"engines\": {\n      \"path\": \"engines\",\n      \"strategy\": \"versionsByName\"\n    },\n    \"packageManager\": {\n      \"path\": \"packageManager\",\n      \"strategy\": \"name@version\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Same Range Version Group in Syncpack\nDESCRIPTION: Configuration for setting up a Same Range Version Group that ensures semver ranges for locally developed packages in devDependencies or peerDependencies satisfy the local version. The policy 'sameRange' ensures all packages use matching ranges.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_same-range.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"label\": \"Ensure semver ranges for locally developed packages satisfy the local version\",\n      \"dependencies\": [\"@your-repo/node-client-plugin-retry\", \"@your-repo/node-client\", \"dashboard-ui\"],\n      \"dependencyTypes\": [\"dev\", \"peer\"],\n      \"policy\": \"sameRange\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sameRange Policy in Syncpack\nDESCRIPTION: JSON configuration for setting up the 'sameRange' policy in a .syncpackrc file. This policy ensures that all versions have semver ranges which satisfy each other, without requiring them to be identical.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/version-groups/same-range.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"dependencies\": [\"prod\", \"dev\", \"peer\"],\n      \"policy\": \"sameRange\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Field Order in SyncPack JSON\nDESCRIPTION: Default configuration for the sortFirst option that specifies which fields should appear at the top of package.json files and their ordering. The configuration is set in .syncpackrc file.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/sort-first.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sortFirst\": [\"name\", \"description\", \"version\", \"author\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Type Configuration in Syncpack\nDESCRIPTION: Defines a custom type 'engines' in .syncpackrc to enable version checking for the engines property in package.json files.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"customTypes\": {\n    \"engines\": {\n      // ^ this is your custom name\n      \"path\": \"engines\",\n      \"strategy\": \"versionsByName\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lowest Semver Version Preference in Syncpack\nDESCRIPTION: Sets up a version group configuration that uses the lowest valid semver version when fixing mismatches, instead of the default 'highestSemver'. This can be applied globally by placing it as the last item in the versionGroups array.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/version-groups/standard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"preferVersion\": \"lowestSemver\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sortPackages in .syncpackrc\nDESCRIPTION: Default configuration for the sortPackages option in .syncpackrc file. When set to true, it enables alphabetical sorting of root properties in package.json files during the format command execution.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/sort-packages.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sortPackages\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Type for Node.js Engine in Syncpack\nDESCRIPTION: Defines a custom type 'nodeEngine' in the Syncpack configuration to track the engines.node field across packages. This setup instructs Syncpack to treat the Node.js engine version as a versioned dependency.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customTypes\": {\n    \"nodeEngine\": {\n      \"path\": \"engines.node\",\n      \"strategy\": \"version\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring lintVersions in Syncpack JSON Configuration\nDESCRIPTION: This snippet shows the default configuration for the 'lintVersions' option in the .syncpackrc file. When set to true, it enables checking that all versions are valid during the 'syncpack lint' operation.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/lint-versions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lintVersions\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compatible Node.js Engine Versions with Syncpack\nDESCRIPTION: Advanced configuration that allows Node.js engine versions to be different across packages as long as they're compatible with each other. Uses the 'sameRange' policy in a version group specific to the nodeEngine type.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines-node.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customTypes\": {\n    \"nodeEngine\": {\n      \"path\": \"engines.node\",\n      \"strategy\": \"version\"\n    }\n  },\n\n  \"dependencyTypes\": [\n    \"dev\"\n    \"nodeEngine\"\n    \"peer\"\n    \"prod\"\n  ],\n\n  \"versionGroups\": [\n    {\n      \"dependencyTypes\": [\"nodeEngine\"],\n      \"policy\": \"sameRange\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Misplaced @types Packages with Syncpack\nDESCRIPTION: Bash command to execute syncpack for identifying any TypeScript declaration packages that are incorrectly placed outside of the devDependencies section. This command will report any mismatches based on the configuration rules defined in the .syncpackrc file.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_ban-types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list-mismatches\n```\n\n----------------------------------------\n\nTITLE: Checking Engine Versions with Syncpack CLI\nDESCRIPTION: Commands for checking and synchronizing engine versions across packages using syncpack CLI.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list --types engines\n```\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack fix-mismatches --types engines\n```\n\n----------------------------------------\n\nTITLE: Removing Banned Dependencies with Syncpack CLI\nDESCRIPTION: This command uses Syncpack's CLI to automatically fix mismatches in dependencies, which includes removing any banned dependencies from the project.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_ban-always.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack fix-mismatches\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Types in Syncpack\nDESCRIPTION: Updates .syncpackrc to include the engines custom type in dependencyTypes for regular version checking.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyTypes\": [\n    \"dev\"\n    \"engines\"\n    \"peer\"\n    \"prod\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Example Component in MDX for @types Package Configuration\nDESCRIPTION: This code snippet imports an Example component from a partials directory and renders it with a heading level prop. The component likely contains the actual configuration example for ensuring @types packages are only in devDependencies.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/examples/only-allow-types-in-dev-dependencies.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Example from '@site/partials/examples/_ban-types.mdx';\n\n<Example level=\"h2\" />\n```\n\n----------------------------------------\n\nTITLE: Fixing Mismatched AWS SDK Versions with Syncpack in Bash\nDESCRIPTION: This command uses Syncpack to automatically fix any @aws-sdk packages that do not match the expected version defined in the version group.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_pin-aws.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack fix-mismatches\n```\n\n----------------------------------------\n\nTITLE: Configuring Package-Specific Semver Ranges in Syncpack\nDESCRIPTION: Configuration example showing how to set tilde (~) semver ranges for all dependencies in a specific package @myrepo/library.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/semver-groups.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semverGroups\": [\n    {\n      \"range\": \"~\",\n      \"dependencies\": [\"**\"],\n      \"packages\": [\"@myrepo/library\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Format in .syncpackrc\nDESCRIPTION: Default configuration for the formatRepository option in .syncpackrc file. When set to true, enables automatic formatting of the repository field in package.json files to use shorthand format.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/format-repository.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatRepository\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Node.js Engine Version Mismatches with Syncpack\nDESCRIPTION: Command to automatically fix mismatches in Node.js engine versions by synchronizing all packages to use the highest semver version currently in use.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines-node.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack fix-mismatches --types nodeEngine\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency-Specific Semver Ranges in Syncpack\nDESCRIPTION: Configuration example showing how to set caret (^) semver ranges for specific @alpha/** dependencies within @myrepo/library package.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/semver-groups.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semverGroups\": [\n    {\n      \"range\": \"^\",\n      \"dependencies\": [\"@alpha/**\"],\n      \"packages\": [\"@myrepo/library\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring formatBugs Option in Syncpack\nDESCRIPTION: Default configuration for the formatBugs option in .syncpackrc file. When set to true, enables the shorthand formatting of the bugs field in package.json files.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/format-bugs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatBugs\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Node.js Engine Version Mismatches with Syncpack\nDESCRIPTION: Command to list all instances of the custom 'nodeEngine' type across packages, helping identify version mismatches for Node.js engine requirements.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines-node.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list --types nodeEngine\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency-Type Specific Semver Ranges in Syncpack\nDESCRIPTION: Configuration example showing how to set different semver ranges based on dependency types: fixed versions for production dependencies, tilde ranges for dev dependencies, and caret ranges for peer dependencies.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/semver-groups.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"semverGroups\": [\n    {\n      \"range\": \"\",\n      \"dependencyTypes\": [\"prod\", \"resolutions\", \"overrides\", \"pnpmOverrides\", \"local\"],\n      \"dependencies\": [\"**\"],\n      \"packages\": [\"**\"]\n    },\n    {\n      \"range\": \"~\",\n      \"dependencyTypes\": [\"dev\"],\n      \"dependencies\": [\"**\"],\n      \"packages\": [\"**\"]\n    },\n    {\n      \"range\": \"^\",\n      \"dependencyTypes\": [\"peer\"],\n      \"dependencies\": [\"**\"],\n      \"packages\": [\"**\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Standard Syncpack Check Including Node.js Engine\nDESCRIPTION: Command to run a standard Syncpack check that now includes the Node.js engine version since it was added to the dependencyTypes.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines-node.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Dependencies in Syncpack\nDESCRIPTION: This snippet shows how to set up a version group in the .syncpackrc file to ignore specific packages and dependency types. It demonstrates ignoring peerDependencies for two packages, with a label to document the decision.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_ignore-deps.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionGroups\": [\n    {\n      \"label\": \"Nothing to see here, will fix soon\",\n      \"packages\": [\"oops-moment\", \"workaround\"],\n      \"dependencyTypes\": [\"peer\"],\n      \"isIgnored\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependency Fields Structure\nDESCRIPTION: Shows the structure of a package.json file and all the locations where dependency patterns can be matched.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_dependencies.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"HERE\",\n  \"dependencies\": { \"HERE\": \"0.0.0\" },\n  \"devDependencies\": { \"HERE\": \"0.0.0\" },\n  \"overrides\": { \"HERE\": \"0.0.0\" },\n  \"peerDependencies\": { \"HERE\": \"0.0.0\" },\n  \"pnpm\": { \"overrides\": { \"HERE\": \"0.0.0\" } },\n  \"resolutions\": { \"HERE\": \"0.0.0\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Mismatched AWS SDK Versions with Syncpack in Bash\nDESCRIPTION: This command uses Syncpack to list any @aws-sdk packages that do not match the expected version defined in the version group.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_pin-aws.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list-mismatches\n```\n\n----------------------------------------\n\nTITLE: Filtering Dependencies by Version Specifier Type in Syncpack\nDESCRIPTION: Demonstrates how to use the --specs flag to include or exclude certain types of version specifiers when running Syncpack commands. Shows examples of filtering for exact versions, latest/range versions, and excluding unsupported versions.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/option/_specs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# only include exact versions\nsyncpack ${props.command} --specs 'exact'\n# only include latest and range versions\nsyncpack ${props.command} --specs 'latest,range'\n# exclude unsupported versions\nsyncpack ${props.command} --specs '!unsupported'\n```\n\n----------------------------------------\n\nTITLE: Listing Mismatches Including Banned Dependencies with Syncpack CLI\nDESCRIPTION: This command uses Syncpack's CLI to list all mismatches in dependencies, including any banned dependencies that are present in the project.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_ban-always.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list\n```\n\n----------------------------------------\n\nTITLE: Version Range Syntax Examples in Package Management\nDESCRIPTION: A markdown table demonstrating various version range operators used in package.json and other dependency management files. Shows different ways to specify version constraints like less than, greater than, tilde, caret and exact versions.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/_supported-ranges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Range | Example   |\n| ----- | --------- |\n| `<`   | `<1.4.2`  |\n| `<=`  | `<=1.4.2` |\n| \"\"`  | `1.4.2`   |\n| `~`   | `~1.4.2`  |\n| `^`   | `^1.4.2`  |\n| `>=`  | `>=1.4.2` |\n| `>`   | `>1.4.2`  |\n| `*`   | `*`       |\n```\n\n----------------------------------------\n\nTITLE: Using $LOCAL Keyword to Simplify Syncpack Configuration\nDESCRIPTION: A diff showing how to use the $LOCAL keyword in Syncpack configuration to automatically target all local packages instead of listing them individually in the dependencies array.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_pin-workspace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n\"dependencies\": [\n+  \"$LOCAL\"\n-  \"@your-repo/node-client-plugin-retry\",\n-  \"@your-repo/node-client\",\n-  \"dashboard-ui\"\n],\n```\n\n----------------------------------------\n\nTITLE: Package Version Format Examples in Markdown\nDESCRIPTION: A markdown table listing different package version formats including aliases, exact versions, file paths, git URLs, version ranges, tags, and workspace protocols. Each format is shown with practical examples of its usage.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/_specifier-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Value                | Example                                                                             |\n| :------------------- | :---------------------------------------------------------------------------------- |\n| `alias`              | `npm:foo@1.2.3`                                                                     |\n| `exact`              | `8.1.2`                                                                             |\n| `file`               | `file:path/to/foo.tgz`, `file:path/to/directory`                                    |\n| `hosted-git`         | `git+https://github.com/user/foo`, `git+ssh://git@notgithub.com/user/foo#1.2.3` etc |\n| `latest`             | `*` or `latest`                                                                     |\n| `range`              | `^4.1.1`, `>=5.0.0`, `~1.2.1` etc                                                   |\n| `tag`                | `alpha`, `canary`                                                                   |\n| `unsupported`        | `$typescript`, `1.typo.wat`                                                         |\n| `url`                | `https://server.com/foo.tgz`                                                        |\n| `workspace-protocol` | `workspace:*`, `workspace:~`, `workspace:^`                                         |\n```\n\n----------------------------------------\n\nTITLE: Filtering Dependencies with Syncpack CLI\nDESCRIPTION: Examples of using the --types flag with syncpack to include or exclude specific dependency types. Shows filtering for peerDependencies, combining multiple types like dependencies and devDependencies, and excluding local package versions.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/option/_types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# only include peerDependencies\nsyncpack ${props.command} --types 'peer'\n# only include dependencies and devDependencies\nsyncpack ${props.command} --types 'prod,dev'\n# exclude local package.json versions\nsyncpack ${props.command} --types '!local'\n```\n\n----------------------------------------\n\nTITLE: Package.json Name Field Example\nDESCRIPTION: Shows the location in package.json where the name pattern is matched against.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_packages.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"HERE\",\n  \"version\": \"1.0.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Syncpack List Commands\nDESCRIPTION: Various commands to list dependencies using different filters\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list\n```\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list --types dev,prod\n```\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list --types local\n```\n\n----------------------------------------\n\nTITLE: Configuring lintFormatting in SyncPack\nDESCRIPTION: Configuration setting in .syncpackrc file that enables checking if package.json files match the formatting from syncpack format command. This setting defaults to true and has no CLI equivalent option.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/lint-formatting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lintFormatting\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Syncpack as Dev Dependency\nDESCRIPTION: Command to install Syncpack as a development dependency in your project\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install syncpack --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring sortAz in Syncpack\nDESCRIPTION: Default configuration for the sortAz option in Syncpack that determines which fields in package.json files should be sorted alphabetically. This includes common fields like dependencies, scripts, and keywords.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/sort-az.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sortAz\": [\"bin\", \"contributors\", \"dependencies\", \"devDependencies\", \"keywords\", \"peerDependencies\", \"resolutions\", \"scripts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Local Syncpack Installation\nDESCRIPTION: Using npm exec to run locally installed Syncpack\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec syncpack -- list\n```\n\n----------------------------------------\n\nTITLE: Disabling sortExports in Syncpack\nDESCRIPTION: Configuration to disable the sortExports functionality by setting it to an empty array. This prevents Syncpack from automatically sorting the exports property in package.json files during format operations.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/sort-exports.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sortExports\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Using $LOCAL Keyword in Syncpack Configuration\nDESCRIPTION: A shorthand technique for Syncpack configuration using the $LOCAL keyword to automatically include all local packages without listing them individually in the dependencies array.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_same-range.mdx#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n\"dependencies\": [\n+  \"$LOCAL\"\n-  \"@your-repo/node-client-plugin-retry\",\n-  \"@your-repo/node-client\",\n-  \"dashboard-ui\"\n],\n```\n\n----------------------------------------\n\nTITLE: Package Name Pattern Examples\nDESCRIPTION: Demonstrates valid and invalid pattern configurations for matching package names, including glob patterns and negation syntax. Shows proper usage of wildcards and scoped packages.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_packages.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// ✅ match any package name\npackages: [\"**\"]\n\n// ✅ match any package name with this scope\npackages: [\"@my-repo/**\"]\n\n// ✅ match specific packages by name\npackages: [\"my-server\", \"my-client\"]\n\n// ✅ match all packages except negated ones\npackages: [\"!my-server\", \"!@my-repo/**]\n\n// ❌ no mixing of specific and negated packages\npackages: [\"my-client\", \"!@my-repo/**\"]\n\n// ❌ not file system paths, name properties of package.json files\npackages: [\"packages/my-client\"]\n\n// ❌ not file system globs, name properties of package.json files\npackages: [\"packages/**\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Verbose Logging Environment Variable for Syncpack\nDESCRIPTION: Shows how to enable verbose logging in Syncpack by setting the SYNCPACK_VERBOSE environment variable to true before running any syncpack command. This provides more detailed output during execution.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/option/_log-level.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSYNCPACK_VERBOSE=true syncpack ${props.command}\n```\n\n----------------------------------------\n\nTITLE: Dependency Pattern Examples in JSON\nDESCRIPTION: Demonstrates different patterns for matching dependencies including wildcards, scoped packages, and specific package names.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_dependencies.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// match any dependency\ndependencies: [\"**\"]\n\n// match all dependencies with a certain scope\ndependencies: [\"@aws-sdk/**\"]\n\n// match specific dependencies by name\ndependencies: [\"react\", \"react-dom\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Syncpack CLI Help\nDESCRIPTION: Shows how to display help information for a Syncpack command using the --help flag. Takes a command prop to specify which command's help to display.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/option/_help.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack ${props.command} --help\n```\n\n----------------------------------------\n\nTITLE: Defining a Frontend Application with Dependencies in JSON\nDESCRIPTION: Example package.json for a dashboard UI application that depends on local packages from the same monorepo, showing exact version pinning.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/local-package-versions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"dashboard-ui\",\n  \"version\": \"0.3.1\",\n  \"dependencies\": {\n    \"@your-repo/node-client\": \"1.1.4\",\n    \"@your-repo/node-client-plugin-retry\": \"1.7.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Syncpack Configuration Examples List in Markdown\nDESCRIPTION: A markdown formatted list of links to various Syncpack configuration examples for monorepo management, including dependency banning, version synchronization, and workspace protocols.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/examples/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Ban dependency from monorepo](/syncpack/examples/ban-dependency-from-monorepo/)\n- [Ensure AWS SDK dependencies always have the same version](/syncpack/examples/fix-aws-sdk-version-mismatch/)\n- [Ensure that semver ranges for a dependency all match each other](/syncpack/examples/ensure-versions-satisfy-same-range/)\n- [Fix React Native version mismatch](/syncpack/examples/fix-react-native-version-mismatch/)\n- [Hide dependencies from syncpack](/syncpack/examples/ignore-dependencies-in-syncpack/)\n- [Manage monorepo packageManager version](/syncpack/examples/sync-package-manager-version/)\n- [Manage npm engines throughout monorepo](/syncpack/examples/sync-engines-in-monorepo/)\n- [Only allow @types packages in devDependencies](/syncpack/examples/only-allow-types-in-dev-dependencies/)\n- [Pin local versions to pnpm workspace:*](/syncpack/examples/pnpm-workspace-protocol/)\n- [Synchronise Node.js version in monorepo](/syncpack/examples/sync-nodejs-version-in-monorepo/)\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin Package with Workspace Protocol in JSON\nDESCRIPTION: Example package.json for a plugin that extends the Node.js client, using workspace protocol for local development and peer dependencies for published packages.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/local-package-versions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@your-repo/node-client-plugin-retry\",\n  \"version\": \"1.7.1\",\n  \"devDependencies\": {\n    \"@your-repo/node-client\": \"workspace:*\"\n  },\n  \"peerDependencies\": {\n    \"@your-repo/node-client\": \"^1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Filter Option Component in Syncpack Documentation\nDESCRIPTION: Usage of the FilterOption component which documents the 'filter' CLI option for the 'list' command in Syncpack.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/list.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FilterOption command=\"list\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Node.js Client Package in JSON\nDESCRIPTION: Example package.json for a Node.js client library within a monorepo, showing the name and version declaration.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/local-package-versions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@your-repo/node-client\",\n  \"version\": \"1.2.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using LogLevel Option Component in Syncpack Documentation\nDESCRIPTION: Usage of the LogLevelOption component which documents the 'log-level' troubleshooting option for the 'list' command in Syncpack.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/list.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<LogLevelOption command=\"list\" />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for CLI Option Documentation\nDESCRIPTION: These import statements bring in reusable MDX components that describe various CLI options for the 'format' command. Each component likely contains detailed information about a specific option.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ConfigOption from '@site/partials/option/_config.mdx';\nimport HelpOption from '@site/partials/option/_help.mdx';\nimport IndentOption from '@site/partials/option/_indent.mdx';\nimport SourceOption from '@site/partials/option/_source.mdx';\nimport LogLevelOption from '@site/partials/option/_log-level.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering Optional Pill Component in Astro\nDESCRIPTION: Imports and renders an OptionalPill component that wraps child content.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_dependencies.mdx#2025-04-23_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport OptionalPill from '@site/components/pill/optional.astro';\n\n<OptionalPill>{props.children}</OptionalPill>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for CLI Options Documentation in Markdown\nDESCRIPTION: This snippet imports various React components used to render documentation for different CLI options of the 'lint-semver-ranges' command. These components likely contain reusable documentation content.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/lint-semver-ranges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ConfigOption from '@site/partials/option/_config.mdx';\nimport FilterOption from '@site/partials/option/_filter.mdx';\nimport HelpOption from '@site/partials/option/_help.mdx';\nimport SourceOption from '@site/partials/option/_source.mdx';\nimport SpecsOption from '@site/partials/option/_specs.mdx';\nimport TypesOption from '@site/partials/option/_types.mdx';\nimport LogLevelOption from '@site/partials/option/_log-level.mdx';\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry in Markdown Format\nDESCRIPTION: Release notes and commit history documented in markdown format showing version numbers, dates, links to issues/PRs, and commit hashes\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### [8.3.8](https://github.com/JamieMason/syncpack/compare/8.2.5...8.3.8)\n\n> 28 October 2022\n\n- feat(config): include config.syncpack of package.json [`#86`](https://github.com/JamieMason/syncpack/issues/86)\n- fix(set-semver-ranges): handle 'workspace' type [`#84`](https://github.com/JamieMason/syncpack/issues/84)\n```\n\n----------------------------------------\n\nTITLE: Rendering CLI Option Documentation Components in Markdown\nDESCRIPTION: These snippets demonstrate the usage of imported components to render documentation for various CLI options of the 'lint-semver-ranges' command. Each component is passed the command name as a prop.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/lint-semver-ranges.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<SourceOption command=\"lint-semver-ranges\" />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<FilterOption command=\"lint-semver-ranges\" />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<ConfigOption command=\"lint-semver-ranges\" />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<SpecsOption command=\"lint-semver-ranges\" />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<TypesOption command=\"lint-semver-ranges\" />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<HelpOption command=\"lint-semver-ranges\" />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<LogLevelOption command=\"lint-semver-ranges\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Component Options in Markdown\nDESCRIPTION: These import statements are used to include various option components in the markdown documentation. Each component represents a different CLI option for the set-semver-ranges command.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/set-semver-ranges.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ConfigOption from '@site/partials/option/_config.mdx';\nimport FilterOption from '@site/partials/option/_filter.mdx';\nimport HelpOption from '@site/partials/option/_help.mdx';\nimport IndentOption from '@site/partials/option/_indent.mdx';\nimport SourceOption from '@site/partials/option/_source.mdx';\nimport SpecsOption from '@site/partials/option/_specs.mdx';\nimport TypesOption from '@site/partials/option/_types.mdx';\nimport LogLevelOption from '@site/partials/option/_log-level.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Example Component in MDX\nDESCRIPTION: This snippet imports an example component from a specific path and renders it with a 'level' prop set to 'h2'. The component likely demonstrates how to use syncpack for ensuring consistent semver ranges.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/examples/ensure-versions-satisfy-same-range.mdx#2025-04-23_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport Example from '@site/partials/examples/_same-range.mdx';\n\n<Example level=\"h2\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Example Component for Node.js Version Synchronization in JSX\nDESCRIPTION: This code imports an Example component from a partials directory to demonstrate how to synchronize Node.js version specifications across packages in a monorepo. The component is then rendered with a heading level of 'h2'.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/examples/sync-nodejs-version-in-monorepo.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Example from '@site/partials/examples/_engines-node.mdx';\n\n<Example level=\"h2\" />\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Example Component in MDX\nDESCRIPTION: MDX code that imports and renders an example component related to React Native version management, using a relative path import and rendering with a heading level prop.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/examples/fix-react-native-version-mismatch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Example from '@site/partials/examples/_react-native.mdx';\n\n<Example level=\"h2\" />\n```\n\n----------------------------------------\n\nTITLE: Using Config Option Component in Syncpack Documentation\nDESCRIPTION: Usage of the ConfigOption component which documents the 'config' CLI option for the 'list' command in Syncpack.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/list.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfigOption command=\"list\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Optional Pill Component in Astro\nDESCRIPTION: Imports and uses an OptionalPill component from the site components directory to wrap child content.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_packages.mdx#2025-04-23_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport OptionalPill from '@site/components/pill/optional.astro';\n\n<OptionalPill>{props.children}</OptionalPill>\n```\n\n----------------------------------------\n\nTITLE: Using Specs Option Component in Syncpack Documentation\nDESCRIPTION: Usage of the SpecsOption component which documents the 'specs' CLI option for the 'list' command in Syncpack.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/list.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SpecsOption command=\"list\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Dependency Group Configuration in JavaScript/React\nDESCRIPTION: This snippet imports two components: OptionalPill from a local file and SpecifierTypes from a partial MDX file. These components are used to enhance the documentation for dependency group specifiers.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_specifier-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport OptionalPill from '@site/components/pill/optional.astro';\nimport SpecifierTypes from '@site/partials/_specifier-types.mdx';\n```\n\n----------------------------------------\n\nTITLE: Using Types Option Component in Syncpack Documentation\nDESCRIPTION: Usage of the TypesOption component which documents the 'types' CLI option for the 'list' command in Syncpack.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/list.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<TypesOption command=\"list\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering OptionalPill Component in JSX\nDESCRIPTION: This snippet demonstrates the usage of the OptionalPill component in JSX. It wraps the component's children, likely used to indicate optional configuration elements in the documentation.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_specifier-types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<OptionalPill>{props.children}</OptionalPill>\n```\n\n----------------------------------------\n\nTITLE: Using Source Option Component in Syncpack Documentation\nDESCRIPTION: Usage of the SourceOption component which documents the 'source' CLI option for the 'list' command in Syncpack.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SourceOption command=\"list\" />\n```\n\n----------------------------------------\n\nTITLE: Using Help Option Component in Syncpack Documentation\nDESCRIPTION: Usage of the HelpOption component which documents the 'help' CLI option for the 'list' command in Syncpack.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/list.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<HelpOption command=\"list\" />\n```\n\n----------------------------------------\n\nTITLE: Including CLI Option Components in Markdown\nDESCRIPTION: These markdown snippets include the imported option components in the documentation. Each component is used to render the documentation for a specific CLI option of the set-semver-ranges command.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/set-semver-ranges.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<SourceOption command=\"set-semver-ranges\" />\n\n<FilterOption command=\"set-semver-ranges\" />\n\n<ConfigOption command=\"set-semver-ranges\" />\n\n<SpecsOption command=\"set-semver-ranges\" />\n\n<TypesOption command=\"set-semver-ranges\" />\n\n<IndentOption command=\"set-semver-ranges\" />\n\n<HelpOption command=\"set-semver-ranges\" />\n\n<LogLevelOption command=\"set-semver-ranges\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Partial Components in Markdown\nDESCRIPTION: This section imports various partial components that are used to render documentation for different command options. These components likely contain reusable documentation snippets.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/update.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport ConfigOption from '@site/partials/option/_config.mdx';\nimport FilterOption from '@site/partials/option/_filter.mdx';\nimport HelpOption from '@site/partials/option/_help.mdx';\nimport SourceOption from '@site/partials/option/_source.mdx';\nimport SpecsOption from '@site/partials/option/_specs.mdx';\nimport TypesOption from '@site/partials/option/_types.mdx';\nimport LogLevelOption from '@site/partials/option/_log-level.mdx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Patterns in syncpack\nDESCRIPTION: Default configuration for the 'source' property in a .syncpackrc file. This pattern matches the root package.json and package.json files in immediate subdirectories of the packages folder, which is common for monorepo setups using Lerna or Yarn Workspaces.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/config/source.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": [\"package.json\", \"packages/*/package.json\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Component Imports in Syncpack Documentation\nDESCRIPTION: Import statements for various component options used in the Syncpack 'list' command documentation. These components represent different CLI options available for the command.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/command/list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ConfigOption from '@site/partials/option/_config.mdx';\nimport FilterOption from '@site/partials/option/_filter.mdx';\nimport HelpOption from '@site/partials/option/_help.mdx';\nimport SourceOption from '@site/partials/option/_source.mdx';\nimport SpecsOption from '@site/partials/option/_specs.mdx';\nimport TypesOption from '@site/partials/option/_types.mdx';\nimport LogLevelOption from '@site/partials/option/_log-level.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering JSON Schema Component in MDX\nDESCRIPTION: Imports a partial MDX component that contains the JSON schema documentation and renders it on the page. This is using MDX syntax which combines Markdown with JSX components.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/integrations/json-schema.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport JsonSchema from '@site/partials/_json-schema.mdx';\n\n<JsonSchema />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Intellisense Component in Markdown\nDESCRIPTION: This snippet imports an Intellisense component from a partial file and renders it within the Markdown document. It's likely used to include TypeScript Intellisense configuration or documentation in the project's documentation.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/integrations/intellisense.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: TypeScript Intellisense\n---\n\nimport Intellisense from '@site/partials/_intellisense.mdx';\n\n<Intellisense />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Example Component\nDESCRIPTION: Imports a reusable example component for displaying workspace version pinning documentation.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/examples/pnpm-workspace-protocol.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Example from '@site/partials/examples/_pin-workspace.mdx';\n\n<Example level=\"h2\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Status Code Components in MDX\nDESCRIPTION: This snippet demonstrates the import of multiple status code components from partial MDX files. These components are likely used to render detailed explanations for each status code in the documentation.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/guide/status-codes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport Banned from '@site/partials/status-codes/_banned.mdx';\nimport FilteredOut from '@site/partials/status-codes/_filtered-out.mdx';\nimport HighestSemverMismatch from '@site/partials/status-codes/_highest-semver-mismatch.mdx';\nimport Ignored from '@site/partials/status-codes/_ignored.mdx';\nimport LocalPackageMismatch from '@site/partials/status-codes/_local-package-mismatch.mdx';\nimport LowestSemverMismatch from '@site/partials/status-codes/_lowest-semver-mismatch.mdx';\nimport MissingLocalVersion from '@site/partials/status-codes/_missing-local-version.mdx';\nimport MissingSnappedToMismatch from '@site/partials/status-codes/_missing-snapped-to-mismatch.mdx';\nimport PinnedMismatch from '@site/partials/status-codes/_pinned-mismatch.mdx';\nimport SameRangeMismatch from '@site/partials/status-codes/_same-range-mismatch.mdx';\nimport SemverRangeMismatch from '@site/partials/status-codes/_semver-range-mismatch.mdx';\nimport SnappedToMismatch from '@site/partials/status-codes/_snapped-to-mismatch.mdx';\nimport UnsupportedMismatch from '@site/partials/status-codes/_unsupported-mismatch.mdx';\nimport Valid from '@site/partials/status-codes/_valid.mdx';\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Syncpack Documentation in JSX/MDX\nDESCRIPTION: Imports required components for the syncpack documentation including OptionalPill, DefaultDependencyTypes, and CustomTypesTip from site components and partials.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_dependency-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport OptionalPill from '@site/components/pill/optional.astro';\nimport DefaultDependencyTypes from '@site/partials/_default-dependency-types.mdx';\nimport CustomTypesTip from '@site/partials/tips/_custom-types.mdx';\n```\n\n----------------------------------------\n\nTITLE: Rendering OptionalPill Component with Children in JSX/MDX\nDESCRIPTION: Renders the OptionalPill component passing the children props, and includes the CustomTypesTip component for additional context about custom types.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_dependency-types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OptionalPill>{props.children}</OptionalPill>\n<CustomTypesTip />\n```\n\n----------------------------------------\n\nTITLE: Defining Constant Level in TypeScript\nDESCRIPTION: This snippet defines a constant 'level' with the value 'h1'. It's likely used for determining heading levels in a documentation or UI context.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_react-native.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const level = 'h1';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using OptionalPill Component in Astro\nDESCRIPTION: Demonstrates how to import and implement the OptionalPill component from the site components. The component wraps children props to display them with an optional pill styling.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/group-config/_label.mdx#2025-04-23_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport OptionalPill from '@site/components/pill/optional.astro';\n```\n\nLANGUAGE: astro\nCODE:\n```\n<OptionalPill>{props.children}</OptionalPill>\n```\n\n----------------------------------------\n\nTITLE: Running General Version Check with Syncpack\nDESCRIPTION: Command to perform a general version check including the newly added engines type.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/partials/examples/_engines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsyncpack list\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility Styling with CSS\nDESCRIPTION: This CSS snippet defines styling for screen-reader-only elements and the #_top anchor, making them visually hidden but still accessible to screen readers. It uses common accessibility patterns to hide elements visually while keeping them available for assistive technologies.\nSOURCE: https://github.com/jamiemason/syncpack/blob/main/site/src/content/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.sr-only, #_top {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n```"
  }
]