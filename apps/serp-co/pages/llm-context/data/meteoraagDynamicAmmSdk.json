[
  {
    "owner": "meteoraag",
    "repo": "dynamic-amm-sdk",
    "content": "TITLE: Common Operations with Meteora Dynamic AMM SDK\nDESCRIPTION: Demonstrates common operations such as getting LP supply, checking pool balance, and updating pool state using the Meteora Dynamic AMM SDK.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Get Lp Supply\n// To refetch the pool's latest supply\n// Alternatively, use `AmmImpl.poolState.lpSupply`\nconst lpSupply = await pool.getLpSupply();\n\n// Check Pool Balance\n// Get the user's ATA LP balance\nconst userLpBalance = await pool.getUserBalance(mockWallet.publicKey);\n\n// Update Pool State (It's recommended to update the deposit before perform any quotation)\nawait pool.updateState();\n```\n\n----------------------------------------\n\nTITLE: Initializing AmmImpl Instance for Meteora Dynamic AMM SDK\nDESCRIPTION: Sets up the necessary connections and creates AmmImpl instances for different pool types using the Meteora Dynamic AMM SDK.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport AmmImpl, { MAINNET_POOL } from '@meteora-ag/dynamic-amm-sdk';\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport { AnchorProvider, Wallet } from '@coral-xyz/anchor';\n\n// Connection, Wallet, and AnchorProvider to interact with the network\nconst mainnetConnection = new Connection('https://api.mainnet-beta.solana.com');\nconst mockWallet = new Wallet(new Keypair());\nconst provider = new AnchorProvider(mainnetConnection, mockWallet, {\n  commitment: 'confirmed',\n});\n// Alternatively, to use Solana Wallet Adapter\n\n// Create single instance\nconst constantProductPool = await AmmImpl.create(mainnetConnection, MAINNET_POOL.USDC_SOL);\nconst stablePool = await AmmImpl.create(mainnetConnection, MAINNET_POOL.USDT_USDC);\n// Or with any other pool address, refer to the pool creation section below\nconst pool = await AmmImpl.create(mainnetConnection, new PublicKey('...'));\n\n// If you need to create multiple, can consider using `createMultiple`\nconst pools = [MAINNET_POOL.USDC_SOL, MAINNET_POOL.USDT_USDC];\nconst [constantProductPool, stablePool] = await AmmImpl.createMultiple(mainnetConnection, pools);\n```\n\n----------------------------------------\n\nTITLE: Constant Product Pool Operations with Meteora Dynamic AMM SDK\nDESCRIPTION: Shows how to perform deposit, withdraw, and swap operations on a Constant Product Pool using the Meteora Dynamic AMM SDK.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Deposit\nconst balance = true;\nconst slippage = 0.1; // Max to 2 decimal place\nconst inAmountALamport = new BN(1 * 10 ** constantProductPool.tokenAMint.decimals);\n\n// Get deposit quote\nconst { poolTokenAmountOut, tokenAInAmount, tokenBInAmount } = constantProductPool.getDepositQuote(\n  inAmountALamport,\n  new BN(0),\n  balance,\n  slippage,\n);\n\nconst depositTx = await constantProductPool.deposit(\n  mockWallet.publicKey,\n  tokenAInAmount,\n  tokenBInAmount,\n  poolTokenAmountOut,\n); // Web3 Transaction Object\nconst depositResult = await provider.sendAndConfirm(depositTx); // Transaction hash\n\n// Withdraw\nconst slippage = 0.1; // Max to 2 decimal place\nconst outTokenAmountLamport = new BN(0.1 * 10 ** constantProductPool.decimals);\n\nconst { poolTokenAmountIn, tokenAOutAmount, tokenBOutAmount } = constantProductPool.getWithdrawQuote(\n  outTokenAmountLamport,\n  slippage,\n); // use lp balance for full withdrawal\nconst withdrawTx = await constantProductPool.withdraw(\n  mockWallet.publicKey,\n  poolTokenAmountIn,\n  tokenAOutAmount,\n  tokenBOutAmount,\n); // Web3 Transaction Object\nconst withdrawResult = await provider.sendAndConfirm(withdrawTx); // Transaction hash\n\n// Swap\nconst slippage = 0.1; // Max to 2 decimal place\nconst inAmountLamport = new BN(0.1 * 10 ** constantProductPool.tokenB.decimals);\n\nconst { minSwapOutAmount } = constantProductPool.getSwapQuote(\n  new PublicKey(constantProductPool.tokenB.address),\n  inAmountLamport,\n  slippage,\n);\n\nconst swapTx = await constantProductPool.swap(\n  mockWallet.publicKey,\n  new PublicKey(constantProductPool.tokenB.address),\n  inAmountLamport,\n  minSwapOutAmount,\n);\nconst swapResult = await provider.sendAndConfirm(swapTx);\n```\n\n----------------------------------------\n\nTITLE: Swapping Tokens in a StablePool\nDESCRIPTION: Shows how to swap one token for another within a stable pool. This operation takes a specific input token and amount, calculates the expected output with slippage protection, and executes the swap transaction.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst slippage = 0.1; // Max to 2 decimal place\nconst inAmountLamport = new BN(0.1 * 10 ** stablePool.tokenB.decimals);\n\nconst { minSwapOutAmount } = stablePool.getSwapQuote(\n  new PublicKey(stablePool.tokenB.address),\n  inAmountLamport,\n  slippage,\n);\n\nconst swapTx = await stablePool.swap(\n  mockWallet.publicKey,\n  new PublicKey(stablePool.tokenB.address),\n  inAmountLamport,\n  minSwapOutAmount,\n);\nconst swapResult = await provider.sendAndConfirm(swapTx);\n```\n\n----------------------------------------\n\nTITLE: Creating Constant Product Pool with Meteora Dynamic AMM SDK\nDESCRIPTION: Demonstrates how to create a new Constant Product Pool using the Meteora Dynamic AMM SDK, including setting up token mints, amounts, and configuration.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport AmmImpl, { PROGRAM_ID } from '@meteora-ag/dynamic-amm-sdk';\nimport { derivePoolAddressWithConfig } from '@meteora-ag/dynamic-amm-sdk/dist/cjs/src/amm/utils';\nimport { BN } from 'bn.js';\n\n// Token A/B address of the pool.\nconst tokenAMint = new PublicKey('...');\nconst tokenBMint = new PublicKey('...');\n\n// Configuration address for the pool. It will decide the fees of the pool.\nconst config = new PublicKey('...');\n\n// Amount of token A and B to be deposited to the pool.\nconst tokenAAmount = new BN(100_000);\nconst tokenBAmount = new BN(500_000);\n\n// Get pool address\nconst programId = new PublicKey(PROGRAM_ID);\nconst poolPubkey = derivePoolAddressWithConfig(tokenAMint, tokenBMint, config, programId);\n\n// Create pool\nconst transactions = await AmmImpl.createPermissionlessConstantProductPoolWithConfig(\n  provider.connection,\n  mockWallet.publicKey, // payer\n  tokenAMint,\n  tokenBMint,\n  tokenAAmount,\n  tokenBAmount,\n  config,\n);\n\n// Or if you need to set the activation point earlier than the default derived from the config\nconst startTime = '...';\nconst transactions = await AmmImpl.createPermissionlessConstantProductPoolWithConfig2(\n  provider.connection,\n  mockWallet.publicKey, // payer\n  tokenAMint,\n  tokenBMint,\n  tokenAAmount,\n  tokenBAmount,\n  config,\n  {\n    activationPoint: startTime !== 'now' ? new BN(Math.floor(new UTCDate(startTime).getTime() / 1000)) : undefined,\n  },\n);\n\nfor (const transaction of transactions) {\n  transaction.sign(mockWallet.payer);\n  const txHash = await provider.connection.sendRawTransaction(transaction.serialize());\n  await provider.connection.confirmTransaction(txHash, 'finalized');\n  console.log('transaction %s', txHash);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stable Pool with Meteora Dynamic AMM SDK\nDESCRIPTION: Shows the process of creating a new Stable Pool using the Meteora Dynamic AMM SDK, including setting up token mints, amounts, and fee configuration.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport AmmImpl, { derivePoolAddress } from '@meteora-ag/dynamic-amm-sdk';\nimport { BN } from 'bn.js';\n\n// Token A/B address of the pool.\nconst tokenAMint = new PublicKey('...');\nconst tokenBMint = new PublicKey('...');\n\nconst tokenADecimal = 6;\nconst tokenBDecimal = 6;\n\nconst feeBps = new BN(1); // 0.01%\n\n// Get pool address\nconst poolPubkey = derivePoolAddress(\n  provider.connection,\n  tokenAMint,\n  tokenBMint,\n  tokenADecimal,\n  tokenBDecimal,\n  true, // stable\n  feeBps,\n);\n\n// Create pool\nconst transactions = await AmmImpl.createPermissionlessPool(\n  provider.connection,\n  mockWallet.publicKey, // payer\n  tokenAMint,\n  tokenBMint,\n  tokenAAmount,\n  tokenBAmount,\n  true, // stable,\n  feeBps,\n);\n\nfor (const transaction of transactions) {\n  transaction.sign(mockWallet.payer);\n  const txHash = await provider.connection.sendRawTransaction(transaction.serialize());\n  await provider.connection.confirmTransaction(txHash, 'finalized');\n  console.log('transaction %s', txHash);\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Balanced Deposit into a StablePool\nDESCRIPTION: Demonstrates how to perform a balanced deposit into a stable pool. This operation converts a single token input into a balanced deposit by calculating the appropriate amounts for both tokens and returning LP tokens. Includes slippage protection.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst slippage = 0.1; // Max to 2 decimal place\nconst balance = true;\nconst inAmountALamport = new BN(0.1 * 10 ** stablePool.tokenA.decimals);\n\nconst { poolTokenAmountOut, tokenAInAmount, tokenBInAmount } = stablePool.getDepositQuote(\n  inAmountALamport,\n  new BN(0),\n  balance,\n  slippage,\n);\n\nconst depositTx = await stablePool.deposit(mockWallet.publicKey, tokenAInAmount, tokenBInAmount, poolTokenAmountOut); // Web3 Transaction Object\nconst depositResult = await provider.sendAndConfirm(depositTx); // Transaction hash\n```\n\n----------------------------------------\n\nTITLE: Performing Double-Sided Imbalanced Deposit into a StablePool\nDESCRIPTION: Shows how to perform an imbalanced deposit using both token A and token B into a stable pool. In this case, the balance parameter is set to false, allowing uneven token proportions while still receiving LP tokens.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst slippage = 0.1; // Max to 2 decimal place\nconst balance = false;\nconst inAmountALamport = new BN(0.1 * 10 ** stablePool.tokenA.decimals);\nconst inAmountBLamport = new BN(0.1 * 10 ** stablePool.tokenB.decimals);\n\nconst { poolTokenAmountOut, tokenAInAmount, tokenBInAmount } = stablePool.getDepositQuote(\n  inAmountALamport,\n  inAmountBLamport,\n  balance,\n  slippage,\n); // Web3 Transaction Object\nconst depositTx = await stablePool.deposit(mockWallet.publicKey, tokenAInAmount, tokenBInAmount, poolTokenAmountOut);\nconst depositResult = await provider.sendAndConfirm(depositTx); // Transaction hash\n```\n\n----------------------------------------\n\nTITLE: Performing Single-Sided Imbalanced Deposit into a StablePool\nDESCRIPTION: Demonstrates depositing only token A into a stable pool with an imbalanced approach. This is useful when a user wants to provide liquidity with just one token type, with the balance parameter set to false.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst slippage = 0.1; // Max to 2 decimal place\nconst balance = false;\nconst inAmountALamport = new BN(0.1 * 10 ** stablePool.tokenA.decimals);\n\nconst { poolTokenAmountOut, tokenAInAmount, tokenBInAmount } = stablePool.getDepositQuote(\n  inAmountALamport,\n  new BN(0),\n  balance,\n  slippage,\n); // Web3 Transaction Object\nconst depositTx = await stablePool.deposit(mockWallet.publicKey, tokenAInAmount, tokenBInAmount, poolTokenAmountOut);\nconst depositResult = await provider.sendAndConfirm(depositTx); // Transaction hash\n```\n\n----------------------------------------\n\nTITLE: Performing Balanced Withdrawal from a StablePool\nDESCRIPTION: Shows how to perform a balanced withdrawal from a stable pool. This operation burns LP tokens and returns both token A and token B in proportion to the pool's current reserves, with slippage protection.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst slippage = 0.1; // Max to 2 decimal place\nconst outTokenAmountLamport = new BN(0.1 * 10 ** stablePool.decimals);\n\nconst { poolTokenAmountIn, tokenAOutAmount, tokenBOutAmount } = stablePool.getWithdrawQuote(\n  outTokenAmountLamport,\n  slippage,\n); // use lp balance for full withdrawal\nconst withdrawTx = await stablePool.withdraw(mockWallet.publicKey, poolTokenAmountIn, tokenAOutAmount, tokenBOutAmount); // Web3 Transaction Object\nconst withdrawResult = await provider.sendAndConfirm(withdrawTx);\n```\n\n----------------------------------------\n\nTITLE: Performing Imbalanced Withdrawal from a StablePool\nDESCRIPTION: Demonstrates how to perform an imbalanced withdrawal from a stable pool by specifying which token to receive. This allows withdrawing liquidity predominantly as one token type by providing the token mint address.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst slippage = 0.1; // Max to 2 decimal place\nconst outTokenAmountLamport = new BN(0.1 * 10 ** stablePool.decimals);\n\nconst { poolTokenAmountIn, tokenAOutAmount, tokenBOutAmount } = stablePool.getWithdrawQuote(\n  outTokenAmountLamport,\n  slippage,\n  new PublicKey(stablePool.tokenA.address), // Pass in token A/B mint to perform imbalanced withdraw\n);\nconst withdrawTx = await stablePool.withdraw(mockWallet.publicKey, poolTokenAmountIn, tokenAOutAmount, tokenBOutAmount); // Web3 Transaction Object\nconst withdrawResult = await provider.sendAndConfirm(withdrawTx);\n```\n\n----------------------------------------\n\nTITLE: Depositing into a MemecoinPool\nDESCRIPTION: Demonstrates how to deposit into a memecoin pool using a balanced approach. Similar to stable pools, this calculates appropriate token amounts and returns LP tokens, but uses the constant product formula specific to memecoin pools.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst balance = true;\nconst slippage = 0.1; // Max to 2 decimal place\nconst inAmountALamport = new BN(1 * 10 ** memecoinPool.tokenA.decimals);\n\n// Get deposit quote for constant product\nconst { poolTokenAmountOut, tokenAInAmount, tokenBInAmount } = memecoinPool.getDepositQuote(\n  inAmountALamport,\n  new BN(0),\n  balance,\n  slippage,\n);\n\nconst depositTx = await memecoinPool.deposit(mockWallet.publicKey, tokenAInAmount, tokenBInAmount, poolTokenAmountOut); // Web3 Transaction Object\nconst depositResult = await provider.sendAndConfirm(depositTx); // Transaction hash\n```\n\n----------------------------------------\n\nTITLE: Withdrawing from a MemecoinPool\nDESCRIPTION: Shows how to withdraw liquidity from a memecoin pool. This operation burns LP tokens and returns both token A and token B according to the constant product formula used by memecoin pools, with slippage protection.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst slippage = 0.1; // Max to 2 decimal place\nconst outTokenAmountLamport = new BN(0.1 * 10 ** memecoinPool.decimals);\n\nconst { poolTokenAmountIn, tokenAOutAmount, tokenBOutAmount } = memecoinPool.getWithdrawQuote(\n  outTokenAmountLamport,\n  slippage,\n); // use lp balance for full withdrawal\nconst withdrawTx = await memecoinPool.withdraw(\n  mockWallet.publicKey,\n  poolTokenAmountIn,\n  tokenAOutAmount,\n  tokenBOutAmount,\n); // Web3 Transaction Object\nconst withdrawResult = await provider.sendAndConfirm(withdrawTx); // Transaction hash\n```\n\n----------------------------------------\n\nTITLE: Swapping Tokens in a MemecoinPool\nDESCRIPTION: Demonstrates how to swap one token for another within a memecoin pool. This uses the constant product formula to calculate expected outputs with slippage protection and executes the swap transaction.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst slippage = 0.1; // Max to 2 decimal place\nconst inAmountLamport = new BN(0.1 * 10 ** memecoinPool.tokenB.decimals);\n\nconst { minSwapOutAmount } = memecoinPool.getSwapQuote(\n  new PublicKey(memecoinPool.tokenB.address),\n  inAmountLamport,\n  slippage,\n);\n\nconst swapTx = await memecoinPool.swap(\n  mockWallet.publicKey,\n  new PublicKey(memecoinPool.tokenB.address),\n  inAmountLamport,\n  minSwapOutAmount,\n);\nconst swapResult = await provider.sendAndConfirm(swapTx);\n```\n\n----------------------------------------\n\nTITLE: Creating Memecoin Pool with Meteora Dynamic AMM SDK\nDESCRIPTION: Illustrates the creation of a Memecoin Pool using the Meteora Dynamic AMM SDK, including options for setting up an M3M3 vault and configuring fee parameters.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport AmmImpl, { PROGRAM_ID } from '@meteora-ag/dynamic-amm-sdk';\nimport { derivePoolAddressWithConfig } from '@meteora-ag/dynamic-amm-sdk/dist/cjs/src/amm/utils';\nimport { BN } from 'bn.js';\nimport { roundToNearestMinutes } from 'date-fns';\n\n// Token A/B address of the pool.\nconst memecoinMint = new PublicKey('...');\nconst tokenBMint = new PublicKey('...');\n\nconst memecoinAmount = new BN(100_000);\nconst tokenBAmount = new BN(500_000);\n\n// Get pool address\nconst poolAddress = derivePoolAddressWithConfig(memecoinMint, tokenBMint, feeConfig.publicKey, programId);\n\n// Create pool\nconst programId = new PublicKey(PROGRAM_ID);\n\nconst isNow = true;\nconst CONFIG_KEY = new PublicKey('..');\nconst feeConfigurations = await AmmImpl.getFeeConfigurations(provider.connection, {\n  programId,\n});\nconst feeConfig = feeConfigurations.find(({ publicKey }) => publicKey.equals(CONFIG_KEY));\n\nconst transactions = await AmmImpl.createPermissionlessConstantProductMemecoinPoolWithConfig(\n  provider.connection,\n  mockWallet.publicKey, // payer\n  memecoinMint,\n  tokenBMint,\n  memecoinAmount,\n  tokenBAmount,\n  feeConfig.publicKey,\n  { isMinted: true },\n);\n\n// with M3M3 vault\nconst feeDurationInDays = 7;\nconst numOfStakers = 1000;\nconst feeClaimStartTime = roundToNearestMinutes(new Date(), {\n  nearestTo: 30,\n});\nconst cooldownDurationInHours = 6;\n\nconst transactions = await AmmImpl.createPermissionlessConstantProductMemecoinPoolWithConfig(\n  provider.connection,\n  mockWallet.publicKey, // payer\n  memecoinMint,\n  tokenBMint,\n  memecoinAmount,\n  tokenBAmount,\n  feeConfig.publicKey,\n  { isMinted: true },\n  {\n    feeVault: {\n      secondsToFullUnlock: feeDurationInDays ? new BN(feeDurationInDays * 86400) : new BN(0),\n      topListLength: numOfStakers || 0,\n      startFeeDistributeTimestamp: feeClaimStartTime ? new BN(feeClaimStartTime.getTime() / 1000) : null,\n      unstakeLockDuration: cooldownDurationInHours ? new BN(cooldownDurationInHours * 3600) : new BN(0),\n    },\n    // other options\n  },\n);\n\nfor (const transaction of transactions) {\n  transaction.sign(mockWallet.payer);\n  const txHash = await provider.connection.sendRawTransaction(transaction.serialize());\n  await provider.connection.confirmTransaction(txHash, 'finalized');\n  console.log('transaction %s', txHash);\n}\n```\n\n----------------------------------------\n\nTITLE: New SDK Functions in Dynamic AMM\nDESCRIPTION: Addition of new SDK functions for working with pool configurations and locked liquidity. Includes methods for retrieving pool configs, checking pool existence, and managing locked LP tokens.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAmmImpl.getPoolConfigsWithPoolCreatorAuthority();\nAmmImpl.createPermissionlessConstantProductPoolWithConfig();\nAmmImpl.getFeeConfigurations();\nAmmImpl.getLockedAtaAmount();\nAmmImpl.getLockedLpAmount();\nAmmImpl.getUserLockEscrow();\nAmmImpl.lockLiquidity();\nAmmImpl.claimLockFee();\n```\n\n----------------------------------------\n\nTITLE: Pool Configuration Management\nDESCRIPTION: Methods for managing pool configurations and checking pool existence. These functions allow retrieving pool configurations and validating pool existence against config pubkeys.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetPoolConfig(); // Get pool config based on config pubkey\ncheckPoolWithConfigsExists(); // Accepts array of config pubkey\n```\n\n----------------------------------------\n\nTITLE: Creating a Mercurial Dynamic AMM Pool\nDESCRIPTION: Example command to create a new AMM pool with specified token mints, fee basis points, and token amounts. The command requires RPC URL, priority fee, and keypair path parameters.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/rust-client/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$cli --rpc-url $rpc --priority-fee $priority_fee --keypair-path $root_keypair dynamic-amm create-pool\\\n --token-a-mint $token_a_mint --token-b-mint $token_b_mint --trade-fee-bps $trade_fee_bps --token-a-amount $token_a_amount --token-b-amount $token_b_amount\n```\n\n----------------------------------------\n\nTITLE: Installing Meteora Dynamic AMM SDK and Dependencies\nDESCRIPTION: Commands to install the Meteora Dynamic AMM SDK and its required dependencies using NPM or Yarn.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/ts-client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm i @meteora-ag/dynamic-amm-sdk @coral-xyz/anchor @solana/web3.js @solana/spl-token\n# YARN\nyarn add @meteora-ag/dynamic-amm-sdk @coral-xyz/anchor @solana/web3.js @solana/spl-token\n# Or, use any package manager of your choice.\n```\n\n----------------------------------------\n\nTITLE: Supported Trade Fee Basis Points\nDESCRIPTION: List of allowable trade fee basis points values for pool creation. The system supports 0.25%, 1%, 4%, and 6% fee tiers, represented as basis points (25, 100, 400, 600).\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/rust-client/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// 0.25%, 1%, 4%, 6%\n&[25, 100, 400, 600]\n```\n\n----------------------------------------\n\nTITLE: Running Quote Tests for Dynamic AMM in Rust\nDESCRIPTION: Command to execute the quote tests for the Dynamic AMM package using Cargo. The command specifically targets the test_quote functionality within the dynamic-amm-quote package.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo t -p dynamic-amm-quote test_quote\n```\n\n----------------------------------------\n\nTITLE: Building the Mercurial Dynamic AMM CLI\nDESCRIPTION: Command to build the CLI package using Cargo, the Rust package manager.\nSOURCE: https://github.com/meteoraag/dynamic-amm-sdk/blob/main/rust-client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo build -p cli\n```"
  }
]