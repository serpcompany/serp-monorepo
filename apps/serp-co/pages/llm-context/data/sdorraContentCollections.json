[
  {
    "owner": "sdorra",
    "repo": "content-collections",
    "content": "TITLE: Transforming Documents in Content Collection using TypeScript\nDESCRIPTION: This code shows how to define a transform function for a Content Collection. It adds a computed 'fullName' property by combining firstName and lastName.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntransform: (doc) => ({\n  ...doc,\n  fullName: `${doc.firstName} ${doc.lastName}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collections in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a content-collections.ts configuration file for setting up collections. It defines a 'posts' collection that includes Markdown files from a specific directory and validates them against a schema.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"src/posts\",\n  include: \"**/*.md\",\n  schema: (z) => ({\n    title: z.string(),\n    summary: z.string(),\n  }),\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collections with TypeScript\nDESCRIPTION: This comprehensive example demonstrates how to configure Content Collections using TypeScript. It includes defining a collection, setting up schema, transform function, and success callback.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst authors = defineCollection({\n  name: \"authors\",\n  directory: \"content/authors\",\n  include: \"**/*.md\",\n  schema: (z) => ({\n    firstName: z.string(),\n    lastName: z.string(),\n    middleName: z.string().optional(),\n    age: z.number(),\n    email: z.string().email(),\n  }),\n  transform: (doc) => ({\n    ...doc,\n    fullName: `${doc.firstName} ${doc.lastName}`,\n  }),\n  onSuccess: (docs) => {\n    console.log(`generated collection with ${docs.length}`);\n  },\n});\n\nexport default defineConfig({\n  collections: [authors],\n});\n```\n\n----------------------------------------\n\nTITLE: Caching Markdown to HTML Conversion in Content Collections Transform Function\nDESCRIPTION: This snippet demonstrates how to use the cache function within a transform to efficiently convert markdown content to HTML, caching the result for improved performance.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/transform.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntransform: async (doc, { cache }) => {\n  const html = await cache(doc.content, async (content) => {\n    return markdownToHtml(content);\n  });\n\n  return {\n    ...doc,\n    html,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Joining Collections in Content Collections Configuration\nDESCRIPTION: This comprehensive example demonstrates how to define multiple collections and join them using the transform function, enabling complex data relationships between different content types.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/transform.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst authors = defineCollection({\n  name: \"authors\",\n  directory: \"content/authors\",\n  include: \"*.md\",\n  schema: (z) => ({\n    ref: z.string(),\n    displayName: z.string(),\n    email: z.string().email(),\n  }),\n});\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"content/posts\",\n  include: \"*.md\",\n  schema: (z) => ({\n    title: z.string(),\n    author: z.string(),\n  }),\n  transform: async (document, context) => {\n    const author = await context\n      .documents(authors)\n      .find((a) => a.ref === document.author);\n    return {\n      ...document,\n      author,\n    };\n  },\n});\n\nexport default defineConfig({\n  collections: [authors, posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for Content Collection in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a schema for a Content Collection using Zod. It includes various field types and validation rules.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nschema: (z) => ({\n  firstName: z.string(),\n  lastName: z.string(),\n  middleName: z.string().optional(),\n  age: z.number(),\n  email: z.string().email(),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Content Collections in React components\nDESCRIPTION: Example React component that imports and iterates over the 'allPosts' collection to display a list of post titles and summaries with links to individual post pages.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/remix-vite.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport function Posts() {\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post._meta.path}>\n          <a href={`/posts/${post._meta.path}`}>\n            <h3>{post.title}</h3>\n            <p>{post.summary}</p>\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Collection and Transformation\nDESCRIPTION: TypeScript configuration for setting up an MDX collection and defining the transform function to compile MDX content. Uses defineCollection and compileMDX to process MDX files.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/content/mdx.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\nimport { compileMDX } from \"@content-collections/mdx\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"content\",\n  include: \"*.mdx\",\n  schema: (z) => ({\n    title: z.string(),\n  }),\n  transform: async (document, context) => {\n    const mdx = await compileMDX(context, document);\n    return {\n      ...document,\n      mdx,\n    };\n  },\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Collection Data in TypeScript\nDESCRIPTION: Example of iterating through documents in a collection and accessing their properties. This demonstrates how to work with the generated type-safe objects to display content properties.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nallPosts.forEach((post) => {\n  console.log(post.title);\n  console.log(post.summary);\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing and Rendering MDX Content in Next.js\nDESCRIPTION: This code demonstrates how to dynamically import and render MDX content in a Next.js component using Content Collections. It finds the post by slug and uses dynamic import to let Next.js compile the MDX file.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-dynamic-import/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Post({ params: { slug } }: Props) {\n  const post = allPosts.find((post) => post.slug === slug);\n  if (!post) {\n    return notFound();\n  }\n\n  const { default: Content } = await import(`../../content/posts/${post.slug}.mdx`);\n\n  return (\n    <article className=\"post\">\n      <h2>{post.title}</h2>\n      <div className=\"content\">\n        <Content />\n      </div>\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Markdown Content to HTML with Content Collections\nDESCRIPTION: TypeScript code demonstrating how to define a collection and transform markdown content to HTML using the compileMarkdown function. The code configures a 'posts' collection for markdown files and adds the HTML output to each document.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/content/markdown.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\nimport { compileMarkdown } from \"@content-collections/markdown\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"content\",\n  include: \"*.md\",\n  schema: (z) => ({\n    title: z.string(),\n  }),\n  transform: async (document, context) => {\n    const html = await compileMarkdown(context, document);\n    return {\n      ...document,\n      html,\n    };\n  },\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Content Collections in a React Component\nDESCRIPTION: This code snippet demonstrates how to consume content from Collections in a React component. It imports the 'allPosts' collection and renders a list of posts with their titles and summaries, linking to individual post pages.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport function Posts() {\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post._meta.path}>\n          <a href={`/posts/${post._meta.path}`}>\n            <h3>{post.title}</h3>\n            <p>{post.summary}</p>\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collections for MDX Static Imports in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Content Collections to discover MDX files, exclude the content, and create static imports. It defines a collection for posts with frontmatter-only parsing and transforms the data to include a static import to the MDX file.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-static-import/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createDefaultImport,\n  defineCollection,\n  defineConfig,\n} from \"@content-collections/core\";\nimport { MDXContent } from \"mdx/types\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"./content/posts\",\n  include: \"*.mdx\",\n  parser: \"frontmatter-only\",\n  schema: (z) => ({\n    title: z.string(),\n    slug: z.string(),\n  }),\n  transform: ({ _meta, ...post }) => {\n    const mdxContent = createDefaultImport<MDXContent>(`@/content/posts/${_meta.filePath}`);\n    return {\n      ...post,\n      mdxContent,\n    };\n  },\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Content Collections Configuration File\nDESCRIPTION: TypeScript configuration file that defines a 'posts' collection with schema validation. The collection includes all markdown files in the src/posts directory and validates title and summary fields.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/cli.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"src/posts\",\n  include: \"**/*.md\",\n  schema: (z) => ({\n    title: z.string(),\n    summary: z.string(),\n  }),\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Content Collections in React\nDESCRIPTION: Example of how to import and use the generated collections in React components. The allPosts collection contains all validated posts with their metadata and content.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/cli.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with MDX and Content Collections\nDESCRIPTION: This snippet shows how to configure Next.js to handle MDX files with Content Collections. It sets up remark plugins to handle frontmatter separately and combines MDX configuration with Content Collections using the withContentCollections and createMDX helpers.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-static-import/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withContentCollections } from \"@content-collections/next\";\nimport createMDX from \"@next/mdx\";\nimport remarkFrontmatter from 'remark-frontmatter'\nimport remarkMdxFrontmatter from 'remark-mdx-frontmatter'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: [\"js\", \"jsx\", \"md\", \"mdx\", \"ts\", \"tsx\"],\n};\n\nconst withMDX = createMDX({\n  options: {\n    remarkPlugins: [remarkFrontmatter, remarkMdxFrontmatter],\n    rehypePlugins: [],\n  },\n});\n\nexport default withContentCollections(withMDX(nextConfig));\n```\n\n----------------------------------------\n\nTITLE: Accessing Other Collections in Content Collections Transform Function\nDESCRIPTION: This snippet illustrates how to access documents from other collections within a transform function, enabling cross-collection data relationships.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/transform.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst authors = defineCollection({\n  // ...\n  schema: (z) => ({\n    ref: z.string(),\n    displayName: z.string()\n  }),\n});\n\nconst posts = defineCollection({\n  // ...\n  transform: async (doc, { documents }) => {\n    const author = await documents(authors).find(\n      (a) => a.ref === doc.author\n    );\n    return {\n      ...doc,\n      author: author.displayName\n    };\n  },\n```\n\n----------------------------------------\n\nTITLE: Transforming Metadata in Content Collections (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the transform function in Content Collections to create a '_raw' field that mirrors Contentlayer's structure. It maps file information from the '_meta' field to match Contentlayer's '_raw' field format.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/migration/contentlayer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntransform: (doc) => {\n  return {\n    ...doc,\n    _raw: {\n      sourceFilePath: doc._meta.filePath,\n      sourceFileName: doc._meta.fileName,\n      sourceFileDir: doc._meta.directory,\n      flattenedPath: doc._meta.path,\n      contentType: \"mdx\", // or markdown\n    },\n  };\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Content Collections schema and configuration\nDESCRIPTION: Configuration file that defines a content collection with validation schema. This example creates a 'posts' collection that validates title and summary fields in markdown files.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/tanstack-start.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"content/posts\",\n  include: \"**/*.md\",\n  schema: (z) => ({\n    title: z.string(),\n    summary: z.string(),\n  }),\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching External Data in Content Collections Transform Function\nDESCRIPTION: This example demonstrates how to fetch and cache external data within a transform function, allowing for the integration of external APIs into document processing.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/transform.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntransform: async (author, { cache }) => {\n  const bio: string = await cache(\n    `https://api.authors.com/bio/${author.username}`,\n    async (url) => {\n      const response = await fetch(url);\n      const user = await response.json();\n      return user.bio;\n    },\n  );\n\n  return {\n    ...user,\n    bio,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Content Collections in TypeScript\nDESCRIPTION: Basic example of importing a collection from Content Collections. This code demonstrates how to access the generated document array after setting up the import alias.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content using React Markdown and Content Collections\nDESCRIPTION: Component that maps through collected markdown posts and renders them using React Markdown. The content from each post is passed as children to the ReactMarkdown component to render the markdown content as React elements.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/react-markdown/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\nimport Markdown from \"react-markdown\";\n\nfunction Posts() {\n  return (\n    <main>\n      <h1>Posts</h1>\n      {allPosts.map((post) => (\n        <article key={post._meta.path}>\n          <h2>{post.title}</h2>\n          <Markdown>{post.content}</Markdown>\n        </article>\n      ))}\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sibling Documents in Content Collections Transform Function\nDESCRIPTION: This example shows how to access other documents in the same collection within a transform function, allowing for the creation of previous and next links between documents.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/transform.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = defineCollection({\n  // ...\n  transform: async (doc, { collection }) => {\n    const docs = await collection.documents();\n    const idx = docs.findIndex((d) => doc._meta.filePath === d._meta.filePath);\n    return {\n      ...doc,\n      prev: idx > 0 ? docs[idx - 1] : null,\n      next: idx < docs.length - 1 ? docs[idx + 1] : null,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Content in React\nDESCRIPTION: React component demonstrating how to access and display markdown content that has been transformed to HTML. Uses dangerouslySetInnerHTML to render the HTML content safely.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/content/markdown.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport default function App() {\n  return (\n    <main>\n      <h1>Posts</h1>\n      <ul>\n        {allPosts.map((post) => (\n          <li key={post._meta.path}>\n            <h2>{post.title}</h2>\n            <div dangerouslySetInnerHTML={{ __html: post.html }} />\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDX Collection with Transformation\nDESCRIPTION: Defines a content collection for MDX files with a transformation function that compiles MDX content. The collection specifies the directory, file pattern, and schema validation for posts.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/mdx/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\nimport { compileMDX } from \"@content-collections/mdx\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"content\",\n  include: \"*.mdx\",\n  schema: (z) => ({\n    title: z.string(),\n  }),\n  transform: async (document, context) => {\n    const body = await compileMDX(context, document);\n    return {\n      ...document,\n      body,\n    };\n  },\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Git Modification Date in Content Collections Transform Function\nDESCRIPTION: This snippet shows how to use Git commands within a transform function to retrieve the last modification date of a document, useful for displaying content update times.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/transform.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntransform: async (doc, { cache }) => {\n  const lastModified = await cache(doc._meta.filePath, async (filePath) => {\n    const { stdout } = await exec(`git log -1 --format=%ai -- ${filePath}`);\n    if (stdout) {\n      return new Date(stdout.trim()).toISOString();\n    }\n    return new Date().toISOString();\n  });\n\n  return {\n    ...doc,\n    lastModified,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Content Collection Configuration\nDESCRIPTION: Configuration file for Content Collections defining schema and collection settings\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/svelte-kit.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"src/posts\",\n  include: \"**/*.md\",\n  schema: (z) => ({\n    title: z.string(),\n    summary: z.string(),\n  }),\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Content in React Components\nDESCRIPTION: React component that renders a list of posts with their MDX content. Uses the MDXContent component from @content-collections/mdx/react to display the compiled MDX body of each post.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/mdx/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\nimport { MDXContent } from \"@content-collections/mdx/react\";\n\nexport default function App() {\n  return (\n    <main>\n      <h1>Posts</h1>\n      <ul>\n        {allPosts.map((post) => (\n          <li key={post._meta.path}>\n            <h2>{post.title}</h2>\n            <MDXContent code={post.body} />\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Collections Configuration for Qwik\nDESCRIPTION: Configuration file that defines a collection for posts with schema validation. This sets up a collection that includes markdown files from the src/posts directory and validates their title and summary fields.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/qwik.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"src/posts\",\n  include: \"**/*.md\",\n  schema: (z) => ({\n    title: z.string(),\n    summary: z.string(),\n  }),\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Content Collections configuration file\nDESCRIPTION: Definition of the content-collections.ts configuration file that sets up a 'posts' collection for markdown files with a schema for validation.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/remix-vite.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"src/posts\",\n  include: \"**/*.md\",\n  schema: (z) => ({\n    title: z.string(),\n    summary: z.string(),\n  }),\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collections with Markdown Compilation\nDESCRIPTION: TypeScript configuration for Content Collections using the compileMarkdown function to transform Markdown to HTML at build time. Defines a collection named 'posts' that processes Markdown files and adds HTML content.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/markdown/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\nimport { compileMarkdown } from \"@content-collections/markdown\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"content\",\n  include: \"*.md\",\n  schema: (z) => ({\n    title: z.string(),\n  }),\n  transform: async (document, context) => {\n    const html = await compileMarkdown(context, document);\n    return {\n      ...document,\n      html,\n    };\n  },\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Individual MDX Post Content in Next.js\nDESCRIPTION: This snippet demonstrates how to render the content of a specific MDX post. It retrieves the post by slug from the allPosts collection, imports the MDX content as a component, and renders it within an article element.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-static-import/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default async function Post({ params: { slug } }: Props) {\n  const post = allPosts.find((post) => post.slug === slug);\n  if (!post) {\n    return notFound();\n  }\n\n  const MdxContent = post.mdxContent;\n\n  return (\n    <article className=\"post\">\n      <h2>{post.title}</h2>\n      <div className=\"content\">\n        <MdxContent />\n      </div>\n    </article>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Collection Configuration\nDESCRIPTION: Configuration file that defines the content collection structure, schema, and validation rules\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/solid-start.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"src/posts\",\n  include: \"**/*.md\",\n  schema: (z) => ({\n    title: z.string(),\n    summary: z.string(),\n  }),\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Compiled Markdown in React\nDESCRIPTION: React component that renders a list of posts with their titles and compiled HTML content. Uses dangerouslySetInnerHTML to display the HTML generated from Markdown.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/markdown/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport default function App() {\n  return (\n    <main>\n      <h1>Posts</h1>\n      <ul>\n        {allPosts.map((post) => (\n          <li key={post._meta.path}>\n            <h2>{post.title}</h2>\n            <div dangerouslySetInnerHTML={{ __html: post.html }} />\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding '_id' Field in Content Collections (TypeScript)\nDESCRIPTION: This snippet shows how to use the transform function in Content Collections to add an '_id' field to each document, mirroring Contentlayer's '_id' field. It assigns the 'filePath' from the '_meta' field as the '_id'.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/migration/contentlayer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntransform: (doc) => {\n  return {\n    ...doc,\n    _id: doc._meta.filePath,\n  };\n},\n```\n\n----------------------------------------\n\nTITLE: Using Content Collections in Qwik Components\nDESCRIPTION: Qwik component that imports and displays content from a Content Collection. This example shows how to access and render data from the collections in a Qwik component.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/qwik.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\";\nimport type { DocumentHead } from \"@builder.io/qwik-city\";\nimport { allCharacters } from \"content-collections\";\n\nexport default component$(() => {\n  return (\n    <main>\n      <h1>Characters</h1>\n      <ul>\n        {allCharacters.map((character) => (\n          <li key={character.name}>\n            <h2>{character.name}</h2>\n            <ul>\n              <li>Planet of origin: {character.origin}</li>\n              <li>Species: {character.species}</li>\n            </ul>\n            <p>{character.content}</p>\n            <a href={character.source}>Source</a>\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n});\n\nexport const head: DocumentHead = {\n  title: \"Welcome to Qwik\",\n  meta: [\n    {\n      name: \"description\",\n      content: \"Qwik site description\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for MDX Compilation with Content Collections\nDESCRIPTION: This code configures Next.js to remove frontmatter from MDX files during compilation, as it's handled by Content Collections. It sets up remark plugins and combines MDX support with Content Collections.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-dynamic-import/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withContentCollections } from \"@content-collections/next\";\nimport createMDX from \"@next/mdx\";\nimport remarkFrontmatter from 'remark-frontmatter'\nimport remarkMdxFrontmatter from 'remark-mdx-frontmatter'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: [\"js\", \"jsx\", \"md\", \"mdx\", \"ts\", \"tsx\"],\n};\n\nconst withMDX = createMDX({\n  options: {\n    remarkPlugins: [remarkFrontmatter,remarkMdxFrontmatter],\n    rehypePlugins: [],\n  },\n});\n\nexport default withContentCollections(withMDX(nextConfig));\n```\n\n----------------------------------------\n\nTITLE: Generating Slugs in Content Collections Transform Function\nDESCRIPTION: This snippet shows how to generate a slug from a document's title within a transform function, useful for creating URL-friendly identifiers.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/transform.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntransform: (doc) => {\n  return {\n    ...doc,\n    slug: doc.title.toLowerCase().replace(/ /g, \"-\"),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Content Collections in a TanStack Start component\nDESCRIPTION: React component example that imports and renders content from a collection. This shows how to access the generated collection data and use it within your application.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/tanstack-start.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport function Posts() {\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li>\n          <a href={`/posts/${post._meta.path}`}>\n            <h3>{post.title}</h3>\n            <p>{post.summary}</p>\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Post List with Next.js and Content Collections\nDESCRIPTION: This snippet shows how to use the generated 'allPosts' collection to create a list of post links in a Next.js component.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-dynamic-import/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ul>\n  {allPosts.map((post) => (\n    <li key={post.slug}>\n      <Link href={`/posts/${post.slug}`}>\n        {post.title}\n      </Link>\n    </li>\n  ))}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Content in React\nDESCRIPTION: React component implementation showing how to render compiled MDX content using the MDXContent component from @content-collections/mdx/react.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/content/mdx.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\nimport { MDXContent } from \"@content-collections/mdx/react\";\n\nexport default function App() {\n  return (\n    <main>\n      <h1>Posts</h1>\n      <ul>\n        {allPosts.map((post) => (\n          <li key={post._meta.path}>\n            <h2>{post.title}</h2>\n            <MDXContent code={post.mdx} />\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Content Collections in React component\nDESCRIPTION: Demonstrates how to import and use the generated Content Collections data in a React component.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/vite.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport function Posts() {\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li key={post._meta.path}>\n          <a href={`/posts/${post._meta.path}`}>\n            <h3>{post.title}</h3>\n            <p>{post.summary}</p>\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a List of MDX Posts with Next.js\nDESCRIPTION: This code shows how to render a list of posts using the allPosts collection generated by Content Collections. It maps through each post to create a list of links to individual post pages.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-static-import/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ul>\n  {allPosts.map((post) => (\n    <li key={post.slug}>\n      <Link href={`/posts/${post.slug}`}>\n        {post.title}\n      </Link>\n    </li>\n  ))}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Static Imports in Content Collections Transform Function\nDESCRIPTION: This example demonstrates how to use static imports within a transform function to reference external components or content files.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/transform.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntransform: async (doc) => {\n  const component = createDefaultImport<React.ComponentType>(`@/components/${doc.component}`);\n  return {\n    ...doc,\n    component,\n  };\n},\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Content in Svelte\nDESCRIPTION: Svelte component demonstrating how to access and display markdown content that has been transformed to HTML. Uses the {@html} directive to render the HTML content.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/content/markdown.mdx#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { allPosts } from \"content-collections\";\n</script>\n\n<h1>Posts</h1>\n\n<ul>\n  {#each allPosts as post}\n    <li>\n      <h2>{post.title}</h2>\n      <div>{@html post.html}</div>\n    </li>\n  {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Collection Sorting in TypeScript\nDESCRIPTION: Shows how to create a custom sorting implementation for blog posts by date in descending order. The code creates a new sorted array using the toSorted() method to sort posts based on their timestamp.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/sorting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport const postsSortedByDate = allPosts.toSorted(\n  (a, b) => b.date.getTime() - a.date.getTime(),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Content Collections in Svelte\nDESCRIPTION: Example of using the Content Collections in a Svelte component to display posts\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/svelte-kit.mdx#2025-04-23_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { allPosts } from \"content-collections\";\n</script>\n\n<h1>Posts</h1>\n\n<ul>\n  {#each allPosts as post}\n    <li>\n      <h2>{post.title}</h2>\n      <p>{post.summary}</p>\n    </li>\n  {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Content in Solid.js\nDESCRIPTION: Solid.js component demonstrating how to access and display markdown content that has been transformed to HTML. Uses the innerHTML property to render the HTML content.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/content/markdown.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport default function App() {\n  return (\n    <main>\n      <h1>Posts</h1>\n      <ul>\n        {allPosts.map((post) => (\n          <li>\n            <h2>{post.title}</h2>\n            <div innerHTML={post.html} />\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Sorted Collection in TypeScript\nDESCRIPTION: Demonstrates how to import and use the pre-sorted collection from a custom sorting implementation file.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/sorting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { postsSortedByDate } from \"./sorted\";\n\n// Do something with the sorted posts\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collections for MDX Posts\nDESCRIPTION: Configuration setup for Content Collections including collection definition, schema validation, and slug transformation for MDX posts.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/remix-mdx-routes/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"app/routes\",\n  include: \"posts.*.mdx\",\n  schema: (z) => ({\n    title: z.string(),\n  }),\n  // we can exclude the content from the data\n  // because remix will load the content for us\n  transform: async ({ content, _meta, ...data }) => {\n    // turn e.g.: posts.hello-world.mdx into hello-world\n    const slug = _meta.path.replace(\"posts.\", \"\");\n    return {\n      ...data,\n      slug,\n    };\n  },\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Content Collections plugin into Vite configuration\nDESCRIPTION: Setup for the Vite configuration file to include the Content Collections plugin. Imports and adds the plugin to the Vite plugins array.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/vite.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport contentCollections from \"@content-collections/vite\";\n\nexport default defineConfig({\n  plugins: [, /** other plugins */ contentCollections()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Content Collections\nDESCRIPTION: Updates to the TypeScript configuration to add necessary path aliases for Content Collections. Includes path mapping for the generated files directory.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/remix-vite.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"~/*\": [\"./app/*\"],\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Content Collections plugin to Vite configuration\nDESCRIPTION: Configuration for vite.config.ts that adds the Content Collections plugin to the Vite build process for Remix applications.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/remix.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { vitePlugin as remix } from \"@remix-run/dev\";\nimport { defineConfig } from \"vite\";\nimport tsconfigPaths from \"vite-tsconfig-paths\";\nimport contentCollections from \"@content-collections/vite\";\n\nexport default defineConfig({\n  plugins: [remix(), tsconfigPaths(), contentCollections()],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Content Collections plugin to Vite configuration\nDESCRIPTION: Modification of vite.config.ts to incorporate the Content Collections plugin alongside the Remix plugin and TypeScript path configuration.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/remix-vite.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { vitePlugin as remix } from \"@remix-run/dev\";\nimport { defineConfig } from \"vite\";\nimport tsconfigPaths from \"vite-tsconfig-paths\";\nimport contentCollections from \"@content-collections/remix-vite\";\n\nexport default defineConfig({\n  plugins: [remix(), tsconfigPaths(), contentCollections()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Start with Content Collections\nDESCRIPTION: TanStack Start configuration that integrates the Content Collections plugin with Vinxi. This setup is necessary to enable the content processing pipeline during build.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/tanstack-start.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport contentCollections from \"@content-collections/vinxi\";\nimport { defineConfig } from \"@tanstack/start/config\";\nimport tsConfigPaths from \"vite-tsconfig-paths\";\n\nexport default defineConfig({\n  vite: {\n    plugins: [\n      contentCollections(),\n      tsConfigPaths({\n        projects: [\"./tsconfig.json\"],\n      }),\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Content Files for Qwik Content Collections\nDESCRIPTION: Example of a markdown content file with frontmatter for Content Collections. This demonstrates how to structure markdown files with metadata that can be validated against the defined schema.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/qwik.mdx#2025-04-23_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: \"Hello world\"\nsummary: \"This is my first post!\"\n---\n\n# Hello world\n\nThis is my first post!\n... rest of the content\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Content Collections\nDESCRIPTION: Modifies the vite.config.ts file to include the Content Collections plugin.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/vite.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport contentCollections from \"@content-collections/vite\";\n\nexport default defineConfig({\n  plugins: [, /** other plugins */ contentCollections()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi Content Collections Plugin\nDESCRIPTION: Configuration for enabling the Content Collections plugin in the Vinxi/SolidStart app configuration.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/vinxi.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\nimport contentCollections from \"@content-collections/vinxi\";\nexport default defineConfig({\n  vite: {\n    plugins: [contentCollections()],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating markdown content file with frontmatter\nDESCRIPTION: Example of a markdown content file with frontmatter metadata that matches the schema defined in the configuration file. Includes title and summary fields.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/remix-vite.mdx#2025-04-23_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: \"Hello world\"\nsummary: \"This is my first post!\"\n---\n\n# Hello world\n\nThis is my first post!\n... rest of the content\n```\n\n----------------------------------------\n\nTITLE: Defining Content Collections configuration\nDESCRIPTION: Creates a content-collections.ts file to define a collection named 'posts' with its schema and location.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/vite.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"src/posts\",\n  include: \"**/*.md\",\n  schema: (z) => ({\n    title: z.string(),\n    summary: z.string(),\n  }),\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Collections for MDX Discovery in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Content Collections to discover MDX files while excluding the content from generated files. It defines a 'posts' collection and transforms the data to omit the content property.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-dynamic-import/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCollection, defineConfig } from \"@content-collections/core\";\n\nconst posts = defineCollection({\n  name: \"posts\",\n  directory: \"./content/posts\",\n  include: \"*.mdx\",\n  schema: (z) => ({\n    title: z.string(),\n  }),\n  transform: ({ content: _, ...post }) => {\n    return post;\n  },\n});\n\nexport default defineConfig({\n  collections: [posts],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating content file for Content Collections\nDESCRIPTION: Example of creating a markdown content file (src/posts/hello-world.md) that conforms to the defined schema.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/vite.mdx#2025-04-23_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: \"Hello world\"\nsummary: \"This is my first post!\"\n---\n\n# Hello world\n\nThis is my first post!\n... rest of the content\n```\n\n----------------------------------------\n\nTITLE: Setting up Vite Configuration\nDESCRIPTION: Configuration of Vite with Content Collections plugin\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/svelte-kit.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sveltekit } from \"@sveltejs/kit/vite\";\nimport contentCollections from \"@content-collections/vite\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  plugins: [sveltekit(), contentCollections()],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Content Collections plugin in Solid Start\nDESCRIPTION: TypeScript configuration for adding the Content Collections plugin to the Solid Start application configuration file (app.config.ts).\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/solid-start.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\nimport contentCollections from \"@content-collections/solid-start\";\nexport default defineConfig({\n  vite: {\n    plugins: [contentCollections()],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases for Content Collections\nDESCRIPTION: TypeScript configuration that adds a path alias for the generated files from Content Collections. The alias points to the .content-collections/generated directory.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases\nDESCRIPTION: TSConfig configuration to add path aliases for generated collections, enabling proper module resolution.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/vinxi.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"~/*\": [\"./src/*\"],\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Content Collections Plugin to Vite Configuration in Qwik\nDESCRIPTION: Vite configuration that incorporates the Content Collections plugin alongside Qwik plugins. This setup enables the Content Collections functionality within the Vite build process.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/qwik.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig, type UserConfig } from \"vite\";\nimport { qwikVite } from \"@builder.io/qwik/optimizer\";\nimport { qwikCity } from \"@builder.io/qwik-city/vite\";\nimport tsconfigPaths from \"vite-tsconfig-paths\";\nimport contentCollections from \"@content-collections/vite\";\n\nexport default defineConfig((): UserConfig => {\n  return {\n    plugins: [qwikCity(), qwikVite(), tsconfigPaths(), contentCollections()],\n    // ...\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json with path alias for Content Collections\nDESCRIPTION: Configuration for the TypeScript compiler to recognize the generated collections through a path alias. Adds a path mapping for 'content-collections' pointing to the generated files directory.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/vite.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post List in Remix Index Route\nDESCRIPTION: React component implementation for the index route that displays a list of all posts using the configured content collection.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/remix-mdx-routes/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from \"@remix-run/react\";\nimport { allPosts } from \"content-collections\";\n\nexport default function Index() {\n  return (\n    <main>\n      <h1>Posts</h1>\n      <ul>\n        {allPosts.map((post) => (\n          <li key={post.slug}>\n            <Link to={`/posts/${post.slug}`}>{post.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Content for Collections\nDESCRIPTION: Example markdown file showing the format for content files with frontmatter. The file includes required title and summary fields which will be validated against the schema.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/cli.mdx#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello world\"\nsummary: \"This is my first post!\"\n---\n\n# Hello world\n\nThis is my first post!\n... rest of the content\n```\n\n----------------------------------------\n\nTITLE: Configuring path aliases in tsconfig.json\nDESCRIPTION: TSConfig configuration that adds path aliases for the Content Collections generated files. This is required to enable proper imports of the generated collection data.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/tanstack-start.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"~/*\": [\"./app/*\"],\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Vinxi Plugin Configuration\nDESCRIPTION: Configuration for the Content Collections Vinxi plugin in the app config file\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/solid-start.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\nimport contentCollections from \"@content-collections/vinxi\";\nexport default defineConfig({\n  vite: {\n    plugins: [contentCollections()],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Content in Markdown Format\nDESCRIPTION: This snippet shows how to structure content in Markdown files for use with Content Collections. It includes a YAML frontmatter section with metadata (title and summary) followed by the actual Markdown content.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hello World\nsummary: This is my first post\n---\n\n# Hello World\n\nThis is my first post.\n```\n\n----------------------------------------\n\nTITLE: Configuring path aliases in tsconfig.json\nDESCRIPTION: JSON configuration for adding path aliases to the tsconfig.json file, which includes a specific alias for the generated content collections directory.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/solid-start.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"~/*\": [\"./src/*\"],\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown content with frontmatter for Content Collections\nDESCRIPTION: Example of a markdown file with frontmatter that conforms to the defined schema. This demonstrates how to structure content files that will be processed by Content Collections.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/tanstack-start.mdx#2025-04-23_snippet_5\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: \"Hello world\"\nsummary: \"This is my first post!\"\n---\n\n# Hello world\n\nThis is my first post!\n... rest of the content\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Content Collections\nDESCRIPTION: Adjusts the tsconfig.json file to include a path alias for the generated Content Collections files.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/vite.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Content Collections CLI Scripts to package.json\nDESCRIPTION: Package.json script configuration that adds CLI commands for development and build processes. Uses concurrently to run the watch command alongside the main dev script.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"concurrently \\\"content-collections watch\\\" \\\"build-scripts dev\\\"\",\n    \"build\": \"content-collections build && build-scripts build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Content Example\nDESCRIPTION: Example of a markdown content file with frontmatter metadata that matches the defined schema\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/solid-start.mdx#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello world\"\nsummary: \"This is my first post!\"\n---\n\n# Hello world\n\nThis is my first post!\n... rest of the content\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Paths for Content Collections in Qwik\nDESCRIPTION: TSConfig adjustment to add path aliases for Content Collections. This sets up a path alias for the generated files that will be stored in the .content-collections/generated folder.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/qwik.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"~/*\": [\"./src/*\"],\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Aliases\nDESCRIPTION: Configuration of path alias in svelte.config.js for generated content files\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/svelte-kit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  // ...\n  kit: {\n    // ...\n    alias: {\n      \"content-collections\": \"./.content-collections/generated\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring path aliases in tsconfig.json for Content Collections\nDESCRIPTION: Configuration for tsconfig.json to add a path alias for the generated collections, which is required for Content Collections to work properly.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/remix.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"~/*\": [\"./app/*\"],\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Content Collections CLI Scripts to Package.json\nDESCRIPTION: This JSON snippet shows how to modify the package.json scripts to incorporate the Content Collections CLI. It includes a dev script for watching changes and a build script for production builds.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"concurrently \\\"content-collections watch\\\" \\\"build-scripts dev\\\"\",\n    \"build\": \"content-collections build && build-scripts build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Structure Example for Remix MDX Routes\nDESCRIPTION: Demonstrates the basic file structure for implementing MDX routes in a Remix application with flat routing.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/remix-mdx-routes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n|- app\n   |- routes\n      |- _index.tsx\n      |- posts.hello-world.mdx\n      |- posts.second-post.mdx\n```\n\n----------------------------------------\n\nTITLE: Configuring TSConfig for Content Collections\nDESCRIPTION: This JSON snippet demonstrates how to add a path alias for the generated collections in the tsconfig.json file. It sets up a path for 'content-collections' pointing to the generated files directory.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Content Collections to .gitignore\nDESCRIPTION: Gitignore entry to exclude the generated .content-collections directory from version control, as these files are regenerated during the build process.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/cli.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n.content-collections\n```\n\n----------------------------------------\n\nTITLE: Front Matter Configuration for Next.js Content Collections\nDESCRIPTION: YAML front matter configuration showing metadata and adapter settings for Content Collections integration with Next.js\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Next.js\ndescription: Using content-collections with Next.js App Router\ntags:\n  - next.js\n  - react\n  - rsc\nadapter: next\n```\n\n----------------------------------------\n\nTITLE: Adding Content Collections Directory to .gitignore\nDESCRIPTION: Git configuration to ignore the generated Content Collections directory. This ensures that the automatically regenerated files are not tracked in version control.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/qwik.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n.content-collections\n```\n\n----------------------------------------\n\nTITLE: Content Collections Project Configuration\nDESCRIPTION: YAML frontmatter configuration for a React Router 7 project using content-collections with Remix adapter.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/react-router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: React Router 7\ndescription: Sample of content-collections with React Router 7\ntags:\n  - react-router\n  - react\n  - remix\n  - vite\nadapter: remix\n```\n\n----------------------------------------\n\nTITLE: Adding .content-collections to .gitignore\nDESCRIPTION: Entry for .gitignore file to exclude the generated Content Collections files from version control. These files are regenerated during build and should not be committed.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/tanstack-start.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n.content-collections\n```\n\n----------------------------------------\n\nTITLE: Adding generated files to .gitignore\nDESCRIPTION: Entry to add to .gitignore file to exclude the automatically generated Content Collections files from version control.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/remix-vite.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n.content-collections\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections packages for Remix/React Router\nDESCRIPTION: Command to install the required packages for using Content Collections with Remix or React Router v7.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/remix.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm i @content-collections/core @content-collections/remix-vite --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding .content-collections to .gitignore\nDESCRIPTION: Adds the .content-collections directory to the project's .gitignore file to exclude generated files from version control.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/vite.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n.content-collections\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections Dependencies\nDESCRIPTION: Command to install the required Content Collections packages for SolidStart integration\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/solid-start.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm i @content-collections/core @content-collections/vinxi -D\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections packages for TanStack Start\nDESCRIPTION: Command to install the core Content Collections packages required for a TanStack Start project, including the core library and the Vinxi adapter.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/tanstack-start.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @content-collections/core @content-collections/vinxi -D\n```\n\n----------------------------------------\n\nTITLE: Rendering Compiled Markdown in Solid\nDESCRIPTION: Solid component that renders a list of posts with their titles and compiled HTML content. Uses the innerHTML property to display the HTML generated from Markdown.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/markdown/README.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport default function App() {\n  return (\n    <main>\n      <h1>Posts</h1>\n      <ul>\n        {allPosts.map((post) => (\n          <li>\n            <h2>{post.title}</h2>\n            <div innerHTML={post.html} />\n          </li>\n        ))}\n      </ul>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections Packages\nDESCRIPTION: Installation of required npm packages for Content Collections integration\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/svelte-kit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @content-collections/core @content-collections/vite -D\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases\nDESCRIPTION: TSConfig configuration to set up path aliases for Content Collections generated files\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/solid-start.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"~/*\": [\"./src/*\"],\n      \"content-collections\": [\"./.content-collections/generated\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Compiled Markdown in Svelte\nDESCRIPTION: Svelte component that displays a list of posts with their titles and compiled HTML content. Uses the {@html} directive to render the HTML generated from Markdown.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/markdown/README.md#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { allPosts } from \"content-collections\";\n</script>\n\n<h1>Posts</h1>\n\n<ul>\n  {#each allPosts as post}\n    <li>\n      <h2>{post.title}</h2>\n      <div>{@html post.html}</div>\n    </li>\n  {/each}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Installing @content-collections/mdx Package\nDESCRIPTION: Command to install the required @content-collections/mdx package using pnpm package manager.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/mdx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @content-collections/mdx\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections CLI and Dependencies\nDESCRIPTION: Command to install the required packages for Content Collections CLI, including the core package, CLI tool, and concurrently for running parallel commands.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @content-collections/core @content-collections/cli concurrently -D\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter defining the blog post metadata including title, summary, date, and author information.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-static-import/content/posts/my-gps-was-possessed-by-a-mischievous-mountain-goat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My GPS Was Possessed By A Mischievous Mountain Goat\nsummary: A hilarious tale of ContentCrafter's collection team's misadventures in the Swiss Alps, where a tech-savvy mountain goat repeatedly altered their GPS coordinates, leading to an unexpected discovery of an ancient cheese-making tradition. The story showcases how sometimes the best content comes from embracing the unexpected, even if it means following a goat's digital breadcrumbs.\ndate: 2023-09-15\nauthor: Alexandra Winters\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections CLI Dependencies\nDESCRIPTION: This snippet shows how to install the required packages for the Content Collections CLI using npm. It includes the core package, CLI package, and concurrently for running multiple commands.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm i @content-collections/core @content-collections/cli concurrently -D\n```\n\n----------------------------------------\n\nTITLE: Defining blog post metadata and content in Markdown\nDESCRIPTION: This snippet shows how to structure a blog post using YAML front matter for metadata and Markdown for content. It includes fields for title and author, followed by a main heading for the post content.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/packages/core/src/__tests__/sources/posts/first.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: First post\nauthor: trillian\n---\n\n# First post\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections packages for Vite\nDESCRIPTION: Command to install the required packages for using Content Collections with Vite. Installs both the core package and the Vite adapter as development dependencies.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/vite.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @content-collections/core @content-collections/vite -D\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections Dependencies\nDESCRIPTION: Command to install the required Content Collections packages for Vinxi integration.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/vinxi.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm i @content-collections/core @content-collections/vinxi -D\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Arthur Dent Character Profile\nDESCRIPTION: YAML metadata block defining key attributes of Arthur Dent including his name, origin planet, species, and information source URL.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/remix-vite/characters/arthur.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Arthur Dent\norigin: Earth\nspecies: Human\nsource: https://hitchhikers.fandom.com/wiki/Arthur_Dent\n---\n```\n\n----------------------------------------\n\nTITLE: Installing @content-collections/markdown Package\nDESCRIPTION: Command for installing the @content-collections/markdown package as a development dependency.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/content/markdown.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @content-collections/markdown -D\n```\n\n----------------------------------------\n\nTITLE: Defining Character Metadata in YAML Frontmatter\nDESCRIPTION: YAML frontmatter block containing basic character information including name, planet of origin, species classification, and reference source URL.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/qwik/characters/arthur.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Arthur Dent\norigin: Earth\nspecies: Human\nsource: https://hitchhikers.fandom.com/wiki/Arthur_Dent\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections Packages for Qwik\nDESCRIPTION: Command to install the required Content Collections packages for Qwik integration. This includes the core package and the Vite adapter.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/qwik.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm i @content-collections/core @content-collections/vite -D\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Post with YAML Frontmatter\nDESCRIPTION: Blog post markdown file with YAML frontmatter metadata defining post properties including title, description, publication date and author. The content section contains a simple heading.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/cli/posts/one.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Post One\"\ndescription: \"This is the first post\"\ndate: \"2019-01-01\"\nauthor: trillian\n---\n\n# One\n```\n\n----------------------------------------\n\nTITLE: Defining Character Reference Metadata in YAML Front Matter\nDESCRIPTION: YAML front matter that defines the reference ID and display name for the character Tricia Marie McMillan (Trillian).\nSOURCE: https://github.com/sdorra/content-collections/blob/main/packages/core/src/__tests__/sources/authors/trillian.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: trillian\ndisplayName: Tricia Marie McMillan\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections packages for Remix\nDESCRIPTION: Command to install the required Content Collections packages (@content-collections/core and @content-collections/remix-vite) as development dependencies.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/remix-vite.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @content-collections/core @content-collections/remix-vite -D\n```\n\n----------------------------------------\n\nTITLE: Adding GitIgnore Entry\nDESCRIPTION: Adding .content-collections directory to .gitignore file\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/svelte-kit.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n.content-collections\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections packages for Solid Start\nDESCRIPTION: Command to install the required dependencies (@content-collections/core and @content-collections/solid-start) for integrating Content Collections with a Solid Start application.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/adapter/solid-start.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @content-collections/core @content-collections/solid-start -D\n```\n\n----------------------------------------\n\nTITLE: Adding GitIgnore Entry\nDESCRIPTION: GitIgnore configuration to exclude generated Content Collections files\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/solid-start.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n.content-collections\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections packages for Vite\nDESCRIPTION: Installs the required packages for using Content Collections with Vite: @content-collections/core and @content-collections/vite.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/vite.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @content-collections/core @content-collections/vite -D\n```\n\n----------------------------------------\n\nTITLE: Character Metadata in YAML Frontmatter\nDESCRIPTION: YAML frontmatter containing basic identifying information about the Ford Prefect character, including his name, planet of origin, species, and an external reference source.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/svelte-kit/characters/ford.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Ford Prefect\norigin: Betelgeuse V\nspecies: Betelgeusian\nsource: https://hitchhikers.fandom.com/wiki/Ford_Prefect\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections Using Automatic Installation\nDESCRIPTION: Command to automatically install Content Collections in supported frameworks (Next.js, Remix, Qwik, SvelteKit, SolidStart, TanStack Start, and Vite). This installation process will guide you through the setup and configuration.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx content-collections install\n```\n\n----------------------------------------\n\nTITLE: Character Metadata in YAML Frontmatter\nDESCRIPTION: YAML frontmatter block defining basic character attributes including name, origin planet, species, and reference source.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/qwik/characters/ford.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Ford Prefect\norigin: Betelgeuse V\nspecies: Betelgeusian\nsource: https://hitchhikers.fandom.com/wiki/Ford_Prefect\n---\n```\n\n----------------------------------------\n\nTITLE: Content Collections Next.js Package Changelog\nDESCRIPTION: Markdown changelog detailing version history, bug fixes, and features for the @content-collections/next package\nSOURCE: https://github.com/sdorra/content-collections/blob/main/packages/next/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @content-collections/next\n\n## 0.2.6\n\n### Patch Changes\n\n- [#520](https://github.com/sdorra/content-collections/pull/520) [`2f096e8`](https://github.com/sdorra/content-collections/commit/2f096e8d752199db7d3b4e21d12e423d610a9e0d) Thanks [@sdorra](https://github.com/sdorra)! - Check for ppid ooly on dev mode\n\n- Updated dependencies []:\n  - @content-collections/integrations@0.2.1\n\n## 0.2.5\n\n### Patch Changes\n\n- [#506](https://github.com/sdorra/content-collections/pull/506) [`0c2b1c8`](https://github.com/sdorra/content-collections/commit/0c2b1c88d2703dfa2444a15696c751c150582bbf) Thanks [@sdorra](https://github.com/sdorra)! - Fix rerun on sigint\n\n## 0.2.4\n\n### Patch Changes\n\n- [#409](https://github.com/sdorra/content-collections/pull/409) [`2677acc`](https://github.com/sdorra/content-collections/commit/2677acc67409f7cecb51ecc2de5ef1417c9caeaf) Thanks [@sdorra](https://github.com/sdorra)! - Fix double execution if next.config.ts is used on canary #397\n\n## 0.2.3\n\n### Patch Changes\n\n- [#330](https://github.com/sdorra/content-collections/pull/330) [`b2c89ce`](https://github.com/sdorra/content-collections/commit/b2c89ce6075d9a5115486d8ff9c0b84f4c0841dd) Thanks [@sdorra](https://github.com/sdorra)! - Ensure types is exported before imports and require\n\n- Updated dependencies [[`b2c89ce`](https://github.com/sdorra/content-collections/commit/b2c89ce6075d9a5115486d8ff9c0b84f4c0841dd)]:\n  - @content-collections/integrations@0.2.1\n\n## 0.2.2\n\n### Patch Changes\n\n- [#319](https://github.com/sdorra/content-collections/pull/319) [`a0d1a67`](https://github.com/sdorra/content-collections/commit/a0d1a678ad13c66607ffd578485a2b3cfb902c0e) Thanks [@sdorra](https://github.com/sdorra)! - Fix double execution when next.config.ts is used\n\n- Updated dependencies []:\n  - @content-collections/integrations@0.2.0\n\n## 0.2.1\n\n### Patch Changes\n\n- Updated dependencies [[`207a3de`](https://github.com/sdorra/content-collections/commit/207a3deaa95e34902c262ed8abc6320880b43dc2), [`2af05da`](https://github.com/sdorra/content-collections/commit/2af05da080720c16a02565cac9228d1ebcd9f649), [`a1dd55b`](https://github.com/sdorra/content-collections/commit/a1dd55bcfe198487de40402284d907b977eedcec)]:\n  - @content-collections/integrations@0.2.0\n\n## 0.2.0\n\n### Minor Changes\n\n- [#121](https://github.com/sdorra/content-collections/pull/121) [`370caac`](https://github.com/sdorra/content-collections/commit/370caac3c47e1f0c56116c950d67ea88b5692599) Thanks [@sdorra](https://github.com/sdorra)! - Support for turbopack\n\n## 0.1.3\n\n### Patch Changes\n\n- [`4aa2362`](https://github.com/sdorra/content-collections/commit/4aa2362c5e05f766725766fa2ce17bdebcb9a212) Thanks [@sdorra](https://github.com/sdorra)! - Remove the workaround that suppresses warning messages from the output\n\n- Updated dependencies []:\n  - @content-collections/integrations@0.1.1\n\n## 0.1.2\n\n### Patch Changes\n\n- [`d7be23b`](https://github.com/sdorra/content-collections/commit/d7be23baadc86d41453beeb219aab51c6fdf9467) Thanks [@sdorra](https://github.com/sdorra)! - Fix typo in function names\n\n- Updated dependencies []:\n  - @content-collections/integrations@0.1.1\n\n## 0.1.1\n\n### Patch Changes\n\n- [`5c7022f`](https://github.com/sdorra/content-collections/commit/5c7022f630a9194ff5579f792c06dcca31611cd5) Thanks [@sdorra](https://github.com/sdorra)! - Update version range of core package\n\n- Updated dependencies [[`5c7022f`](https://github.com/sdorra/content-collections/commit/5c7022f630a9194ff5579f792c06dcca31611cd5)]:\n  - @content-collections/integrations@0.1.1\n\n## 0.1.0\n\n### Minor Changes\n\n- [`a0d3bb0`](https://github.com/sdorra/content-collections/commit/a0d3bb0103371809a41bffd23f4dc5a43b474e4e) Thanks [@sdorra](https://github.com/sdorra)! - Add integration for Next.js\n\n### Patch Changes\n\n- [`842b7e0`](https://github.com/sdorra/content-collections/commit/842b7e0b221172eef51e203a833fbc256af4b501) Thanks [@sdorra](https://github.com/sdorra)! - Core should be a peer dependency of integrations\n\n- Updated dependencies [[`52376e2`](https://github.com/sdorra/content-collections/commit/52376e2d7b5dff5c2376da57f76b273ef07e2af4), [`b4f640b`](https://github.com/sdorra/content-collections/commit/b4f640b26f18dbe9eb8b3913428010194d918ad1), [`a0d3bb0`](https://github.com/sdorra/content-collections/commit/a0d3bb0103371809a41bffd23f4dc5a43b474e4e), [`842b7e0`](https://github.com/sdorra/content-collections/commit/842b7e0b221172eef51e203a833fbc256af4b501)]:\n  - @content-collections/integrations@0.1.0\n  - @content-collections/core@0.1.1\n```\n\n----------------------------------------\n\nTITLE: Installing Content Collections Adapter for SolidStart\nDESCRIPTION: Package reference for the Vinxi adapter needed to integrate content-collections with SolidStart projects.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/solid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@content-collections/vinxi\n```\n\n----------------------------------------\n\nTITLE: Installing MDX Package\nDESCRIPTION: Command to install the @content-collections/mdx package as a development dependency.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/content/mdx.mdx#2025-04-23_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpm i @content-collections/mdx -D\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Internship Component in React\nDESCRIPTION: This code snippet imports an Internship component from a local file and renders it within the page content. It demonstrates the use of JSX syntax to integrate custom React components into the page structure.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-dynamic-import/content/posts/the-day-a-monkey-became-our-content-consultant.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Internship } from \"@/components/Internship\";\n\n<Internship />\n```\n\n----------------------------------------\n\nTITLE: Character Description in Markdown\nDESCRIPTION: Markdown content block providing a narrative description of the character Arthur Dent, including his background and role in the story.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/remix-mdx-routes/app/routes/characters.arthur.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Arthur Dent\n\nArthur Dent is a friendly but simple-minded human from Earth who escaped his planet's destruction and travelled the universe with his best friend, Ford Prefect. He spent several years being helplessly launched from crisis to crisis while trying to straighten out his lifestyle.\n```\n\n----------------------------------------\n\nTITLE: Blog Post Front Matter in YAML\nDESCRIPTION: YAML front matter block defining metadata for a blog post including title, description, publication date and author name.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/cli/posts/two.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Post Two\ndescription: This is the second post\ndate: 2020-01-01\nauthor: trillian\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Internship Component in JSX\nDESCRIPTION: This code snippet imports the Internship component from a local file and renders it within the page content. It demonstrates the use of JSX syntax in a Markdown-like environment.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-dynamic-import/content/posts/the-day-a-penguin-became-our-tour-guide.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Internship } from \"@/components/Internship\";\n\n<Internship />\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Content\nDESCRIPTION: Example of a markdown content file with front matter for the posts collection\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/svelte-kit.mdx#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello world\"\nsummary: \"This is my first post!\"\n---\n\n# Hello world\n\nThis is my first post!\n... rest of the content\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Internship Component in JSX\nDESCRIPTION: This code snippet imports the Internship component from the components directory and renders it within the page. The component is likely used to display internship-related information within the article about deadline management.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next-mdx-static-import/content/posts/how-a-sloth-revolutionized-our-deadline-management.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Internship } from \"@/components/Internship\";\n\n<Internship />\n```\n\n----------------------------------------\n\nTITLE: Creating Streams from Collections in Java\nDESCRIPTION: This snippet demonstrates different ways to create streams from collections in Java. It shows how to create a stream from a collection, from specified elements, and from a range of values.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/qwik/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Create a stream from a collection\nList<String> list = Arrays.asList(\"a\", \"b\", \"c\");\nStream<String> streamFromCollection = list.stream();\n\n// Create a stream from specified elements\nStream<String> streamFromElements = Stream.of(\"a\", \"b\", \"c\");\n\n// Create a stream from a range of values\nIntStream streamFromRange = IntStream.rangeClosed(1, 5);\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Collection in React Component\nDESCRIPTION: Example React component showing how to import and use the content collection data\nSOURCE: https://github.com/sdorra/content-collections/blob/main/docs/quickstart/solid-start.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { allPosts } from \"content-collections\";\n\nexport function Posts() {\n  return (\n    <ul>\n      {allPosts.map((post) => (\n        <li>\n          <a href={`/posts/${post._meta.path}`}>\n            <h3>{post.title}</h3>\n            <p>{post.summary}</p>\n          </a>\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/website/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Content Collection Entry\nDESCRIPTION: YAML frontmatter block defining properties for a content collection entry, containing only a name property set to 'One'.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/packages/core/src/__tests__/sources/test/001.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: One\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Character Profile Data\nDESCRIPTION: YAML frontmatter that stores structured data about the character Trillian, including a reference ID, display name, and email address. This format allows for structured data to be included at the top of a markdown file.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/cli/authors/trillian.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nref: trillian\ndisplayName: Tricia Marie McMillan\nemail: trillian@hitchhiker.com\n---\n```\n\n----------------------------------------\n\nTITLE: Character Metadata in Markdown Frontmatter\nDESCRIPTION: YAML frontmatter that defines key attributes of the Ford Prefect character, including his name, planet of origin, species, and a reference source link.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/remix-vite/characters/ford.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Ford Prefect\norigin: Betelgeuse V\nspecies: Betelgeusian\nsource: https://hitchhikers.fandom.com/wiki/Ford_Prefect\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Character Metadata in YAML Frontmatter\nDESCRIPTION: YAML frontmatter block defining basic character attributes including name, origin, species, and reference source.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/remix-mdx-routes/app/routes/characters.arthur.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Arthur Dent\norigin: Earth\nspecies: Human\nsource: https://hitchhikers.fandom.com/wiki/Arthur_Dent\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter - Character Profile Data Structure\nDESCRIPTION: YAML metadata block defining core attributes of the Ford Prefect character including name, origin planet, species and reference source\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/next/characters/ford.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Ford Prefect\norigin: Betelgeuse V\nspecies: Betelgeusian\nsource: https://hitchhikers.fandom.com/wiki/Ford_Prefect\n---\n```\n\n----------------------------------------\n\nTITLE: Content Collections Changelog Markdown\nDESCRIPTION: Complete changelog entries documenting version updates, changes, and bug fixes for the @content-collections/core package\nSOURCE: https://github.com/sdorra/content-collections/blob/main/packages/core/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @content-collections/core\n\n## 0.8.2\n\n### Patch Changes\n\n- [#518](https://github.com/sdorra/content-collections/pull/518) [`d5a9b5a`](https://github.com/sdorra/content-collections/commit/d5a9b5ac259cadae496987468a44b883978c3e49) Thanks [@sdorra](https://github.com/sdorra)! - Add an option to cache the API, allowing the inclusion of an additional key to prevent cache collisions\n\n## 0.8.1\n\n### Patch Changes\n\n- [#512](https://github.com/sdorra/content-collections/pull/512) [`94c12cd`](https://github.com/sdorra/content-collections/commit/94c12cdb00d81f60b83edf6111f997e80fe46ab2) Thanks [@sdorra](https://github.com/sdorra)! - Update esbuild in order to fix docker standalone builds\n```\n\n----------------------------------------\n\nTITLE: Blog Post Content in Markdown\nDESCRIPTION: Markdown content section of the blog post containing a level 2 heading.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/cli/posts/two.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Two\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements in a Java Stream\nDESCRIPTION: This code shows how to filter elements in a Java stream based on specific conditions. The example filters a list of strings to include only those starting with the letter 'a'.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/qwik/public/robots.txt#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nList<String> list = Arrays.asList(\"apple\", \"banana\", \"apricot\", \"orange\", \"avocado\");\n\nList<String> filtered = list.stream()\n    .filter(s -> s.startsWith(\"a\"))\n    .collect(Collectors.toList());\n\n// Result: [apple, apricot, avocado]\n```\n\n----------------------------------------\n\nTITLE: Aggregating Data in Java Streams\nDESCRIPTION: This code demonstrates aggregation operations on a Java stream. It calculates the sum of integers in a list using the reduce method with an initial value of 0 and the Integer::sum method reference.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/qwik/public/robots.txt#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n\nint sum = numbers.stream()\n    .reduce(0, Integer::sum);\n\n// Result: 15\n```\n\n----------------------------------------\n\nTITLE: Installing @content-collections/markdown Package\nDESCRIPTION: Command to install the @content-collections/markdown package using pnpm package manager.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/markdown/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @content-collections/markdown\n```\n\n----------------------------------------\n\nTITLE: Collecting Stream Results in Java\nDESCRIPTION: This snippet shows how to collect stream results into different collection types in Java. It demonstrates collecting into a list, set, and map, as well as joining elements into a string with a delimiter.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/qwik/public/robots.txt#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nList<String> list = Arrays.asList(\"apple\", \"banana\", \"orange\", \"apple\");\n\n// Collect to list\nList<String> resultList = list.stream().collect(Collectors.toList());\n\n// Collect to set (removes duplicates)\nSet<String> resultSet = list.stream().collect(Collectors.toSet());\n\n// Collect to map\nMap<String, Integer> resultMap = list.stream()\n    .distinct()\n    .collect(Collectors.toMap(s -> s, String::length));\n\n// Join elements\nString joined = list.stream().collect(Collectors.joining(\", \"));\n// Result: \"apple, banana, orange, apple\"\n```\n\n----------------------------------------\n\nTITLE: Transforming Data in Java Streams with Map\nDESCRIPTION: This example demonstrates how to transform data in a Java stream using the map function. It converts a list of strings to uppercase and then collects the results into a new list.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/qwik/public/robots.txt#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nList<String> list = Arrays.asList(\"apple\", \"banana\", \"orange\");\n\nList<String> uppercase = list.stream()\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());\n\n// Result: [APPLE, BANANA, ORANGE]\n```\n\n----------------------------------------\n\nTITLE: Calculating Weather Prediction Accuracy using LaTeX\nDESCRIPTION: A mathematical formula expressed in LaTeX that calculates the accuracy rate of weather predictions by dividing correct predictions by total predictions and multiplying by 100.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/react-router/content/our-weather-forecast-was-hijacked-by-a-stand-up-comedian-seagull.md#2025-04-23_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nAccuracy = \\frac{Correct\\_Predictions}{Total\\_Predictions} \\times 100\\%\n```\n\n----------------------------------------\n\nTITLE: Displaying Accuracy Percentage in LaTeX\nDESCRIPTION: A LaTeX expression showing the seagull's weather prediction accuracy rate as a percentage.\nSOURCE: https://github.com/sdorra/content-collections/blob/main/samples/react-router/content/our-weather-forecast-was-hijacked-by-a-stand-up-comedian-seagull.md#2025-04-23_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n87.5\\%\n```"
  }
]