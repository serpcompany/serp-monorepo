[
  {
    "owner": "kuzudb",
    "repo": "kuzu",
    "content": "TITLE: Defining KuzuDB Function Algorithm Object Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_function_algorithm' containing various graph algorithm implementations including path finding, page rank, connected components, and other graph processing utilities.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/gds/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_function_algorithm\n        OBJECT\n        asp_destinations.cpp\n        asp_paths.cpp\n        awsp_paths.cpp\n        bfs_graph.cpp\n        frontier_morsel.cpp\n        gds.cpp\n        gds_frontier.cpp\n        gds_state.cpp\n        gds_task.cpp\n        gds_utils.cpp\n        k_core_decomposition.cpp\n        output_writer.cpp\n        page_rank.cpp\n        rec_joins.cpp\n        ssp_destinations.cpp\n        ssp_paths.cpp\n        variable_length_path.cpp\n        weakly_connected_components.cpp\n        strongly_connected_components_kosaraju.cpp\n        strongly_connected_components.cpp\n        wsp_destinations.cpp\n        wsp_paths.cpp\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Library Dependencies\nDESCRIPTION: Sets up library dependencies with platform-specific conditions for threading, dynamic loading, and atomic operations. Includes various third-party libraries required by KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(KUZU_LIBRARIES antlr4_cypher antlr4_runtime brotlidec brotlicommon fast_float utf8proc re2 fastpfor parquet snappy thrift yyjson zstd miniz mbedtls lz4 roaring_bitmap simsimd)\nif (NOT __SINGLE_THREADED__)\n        set(KUZU_LIBRARIES ${KUZU_LIBRARIES} Threads::Threads)\nendif()\nif(NOT WIN32)\n        set(KUZU_LIBRARIES dl ${KUZU_LIBRARIES})\nendif()\nif ((NOT APPLE AND CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\") AND NOT __WASM__ AND NOT __SINGLE_THREADED__)\n        set(KUZU_LIBRARIES atomic ${KUZU_LIBRARIES})\nendif()\nif (ENABLE_BACKTRACES)\n        set(KUZU_LIBRARIES ${KUZU_LIBRARIES} cpptrace::cpptrace)\nendif()\ntarget_link_libraries(kuzu PUBLIC ${KUZU_LIBRARIES})\ntarget_link_libraries(kuzu_shared PUBLIC ${KUZU_LIBRARIES})\nunset(KUZU_LIBRARIES)\n```\n\n----------------------------------------\n\nTITLE: Compiler and Build Settings Configuration\nDESCRIPTION: Configures compiler settings, visibility, and build options including C++ standard and position independent code.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\nset(CMAKE_C_VISIBILITY_PRESET hidden)\nset(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)\nset(CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS TRUE)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nset(CMAKE_VISIBILITY_INLINES_HIDDEN ON)\nset(CMAKE_ENABLE_EXPORTS TRUE)\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB WebAssembly Executable in CMake\nDESCRIPTION: This snippet defines the kuzu_wasm executable, specifies its source files including C++ API components, and links it with the kuzu library. It also sets output properties for the WASM build and copies JavaScript files to the build directory.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(kuzu_wasm\n    src_cpp/main.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/connection.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/database.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/data_type.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/helpers.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/flat_tuple.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/prepared_statement.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/query_result.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/query_summary.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/value.cpp\n    ${PROJECT_SOURCE_DIR}/src/c_api/version.cpp\n)\n\nfile(GLOB JS_SOURCE_FILES ./src_js/*)\n\ntarget_link_libraries(kuzu_wasm PRIVATE kuzu)\n\nset_target_properties(kuzu_wasm\n    PROPERTIES\n    LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/build/kuzu\"\n    RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/build/kuzu\"\n    ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/build/kuzu\"\n)\n\nfile(COPY ${JS_SOURCE_FILES} DESTINATION  \"${CMAKE_CURRENT_SOURCE_DIR}/build\")\n```\n\n----------------------------------------\n\nTITLE: Configuring C Example Application with KuzuDB in CMake\nDESCRIPTION: This CMake snippet configures a C example application named 'example_c'. It creates the executable from main.c, links it against the KuzuDB shared library, and sets up the include directories to access the KuzuDB C API headers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/examples/c/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(example_c main.c)\ntarget_link_libraries(example_c kuzu_shared)\ntarget_include_directories(example_c PRIVATE ${PROJECT_SOURCE_DIR}/src/include/c_api)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options for KuzuDB Components\nDESCRIPTION: Defines CMake options for building various components of KuzuDB, including grammar updates, benchmarks, extensions, examples, language bindings, and tests.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\noption(AUTO_UPDATE_GRAMMAR \"Automatically regenerate C++ grammar files on change.\" TRUE)\noption(BUILD_BENCHMARK \"Build benchmarks.\" FALSE)\noption(BUILD_EXTENSIONS \"Semicolon-separated list of extensions to build.\" \"\")\noption(BUILD_EXAMPLES \"Build examples.\" FALSE)\noption(BUILD_JAVA \"Build Java API.\" FALSE)\noption(BUILD_NODEJS \"Build NodeJS API.\" FALSE)\noption(BUILD_PYTHON \"Build Python API.\" FALSE)\noption(BUILD_SHELL \"Build Interactive Shell\" TRUE)\noption(BUILD_SINGLE_FILE_HEADER \"Build single file header. Requires Python >= 3.9.\" TRUE)\noption(BUILD_TESTS \"Build C++ tests.\" FALSE)\noption(BUILD_EXTENSION_TESTS \"Build C++ extension tests.\" FALSE)\noption(BUILD_KUZU \"Build Kuzu.\" TRUE)\noption(ENABLE_BACKTRACES \"Enable backtrace printing for exceptions and segfaults\" FALSE)\n```\n\n----------------------------------------\n\nTITLE: Setting KuzuDB Global Definitions and Building Components\nDESCRIPTION: Adds global definitions for KuzuDB root directory and version information, adds subdirectories for extensions, and configures the main build process for KuzuDB components when BUILD_KUZU is enabled.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DKUZU_ROOT_DIRECTORY=\"${PROJECT_SOURCE_DIR}\")\nadd_definitions(-DKUZU_CMAKE_VERSION=\"${CMAKE_PROJECT_VERSION}\")\nadd_definitions(-DKUZU_EXTENSION_VERSION=\"0.9.0\")\n\nif (EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/extension/CMakeLists.txt\")\n    add_subdirectory(extension)\nendif ()\n\nif(BUILD_KUZU)\n\ninclude_directories(\n    src/include\n    ${CMAKE_BINARY_DIR}/src/include\n)\n\nadd_subdirectory(src)\nif (${BUILD_TESTS} OR ${BUILD_EXTENSION_TESTS})\n    add_subdirectory(test)\nelseif (${BUILD_BENCHMARK})\n    add_subdirectory(test/test_helper)\nendif ()\nadd_subdirectory(tools)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanitizer Options for KuzuDB\nDESCRIPTION: Sets up compiler flags for various sanitizers (thread, address, undefined behavior) with platform-specific configurations for MSVC and other compilers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(${ENABLE_THREAD_SANITIZER} AND (NOT __SINGLE_THREADED__))\n    if(MSVC)\n        message(FATAL_ERROR \"Thread sanitizer is not supported on MSVC\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=thread -fno-omit-frame-pointer\")\n    endif()\nendif()\nif(${ENABLE_ADDRESS_SANITIZER})\n    if(MSVC)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /fsanitize=address\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer\")\n    endif()\nendif()\nif(${ENABLE_UBSAN})\n    if(MSVC)\n        message(FATAL_ERROR \"Undefined behavior sanitizer is not supported on MSVC\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_planner_plan_operator Library in CMake\nDESCRIPTION: Creates an OBJECT library named kuzu_planner_plan_operator that includes various operator implementation files. These files implement query plan operators like append, scan, filter, join, and other database operations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/plan/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_planner_plan_operator\n        OBJECT\n        append_accumulate.cpp\n        append_aggregate.cpp\n        append_insert.cpp\n        append_cross_product.cpp\n        append_delete.cpp\n        append_distinct.cpp\n        append_dummy_scan.cpp\n        append_empty_result.cpp\n        append_expressions_scan.cpp\n        append_extend.cpp\n        append_filter.cpp\n        append_flatten.cpp\n        append_table_function_call.cpp\n        append_join.cpp\n        append_limit.cpp\n        append_multiplicity_reducer.cpp\n        append_order_by.cpp\n        append_projection.cpp\n        append_scan_node_table.cpp\n        append_set.cpp\n        append_simple.cpp\n        append_unwind.cpp\n        plan_copy.cpp\n        plan_join_order.cpp\n        plan_node_scan.cpp\n        plan_node_semi_mask.cpp\n        plan_projection.cpp\n        plan_read.cpp\n        plan_single_query.cpp\n        plan_subquery.cpp\n        plan_update.cpp\n        plan_port_db.cpp)\n```\n\n----------------------------------------\n\nTITLE: Build Type and Cache Configuration\nDESCRIPTION: Sets up build type, Python configuration, and compiler cache settings using ccache or sccache.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release)\nendif()\n\nif(DEFINED ENV{PYBIND11_PYTHON_VERSION})\n    set(PYBIND11_PYTHON_VERSION $ENV{PYBIND11_PYTHON_VERSION})\nendif()\n\nif(DEFINED ENV{PYTHON_EXECUTABLE})\n    set(PYTHON_EXECUTABLE $ENV{PYTHON_EXECUTABLE})\nendif()\n\nfind_program(CCACHE_PROGRAM ccache)\nif (CCACHE_PROGRAM)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\nelse ()\n    find_program(CCACHE_PROGRAM sccache)\n    if (CCACHE_PROGRAM)\n        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB C API Test Files to CMake Test Suite\nDESCRIPTION: This CMake function call adds multiple C++ test files to the c_api_test test suite for KuzuDB. The test files cover various aspects of the C API functionality including connection handling, data types, database operations, tuple manipulation, prepared statements, query results, value handling, and version information.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/c_api/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_kuzu_api_test(c_api_test\n        connection_test.cpp\n        data_type_test.cpp\n        database_test.cpp\n        flat_tuple_test.cpp\n        prepared_statement_test.cpp\n        query_result_test.cpp\n        value_test.cpp\n        version_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Processor Operator Library in CMake\nDESCRIPTION: This snippet defines the 'kuzu_processor_operator' library as an OBJECT library in CMake. It lists all the source files that are part of this library, covering various operations and functionalities of the KuzuDB processor.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator\n        OBJECT\n        cross_product.cpp\n        empty_result.cpp\n        filter.cpp\n        filtering_operator.cpp\n        flatten.cpp\n        index_lookup.cpp\n        limit.cpp\n        multiplicity_reducer.cpp\n        partitioner.cpp\n        path_property_probe.cpp\n        physical_operator.cpp\n        projection.cpp\n        profile.cpp\n        recursive_extend.cpp\n        result_collector.cpp\n        semi_masker.cpp\n        skip.cpp\n        standalone_call.cpp\n        table_function_call.cpp\n        transaction.cpp\n        unwind.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Addon Library Build\nDESCRIPTION: Sets up the shared library build configuration for the Node.js addon, including output locations and platform-specific link options.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzujs SHARED ${CPP_SOURCE_FILES} ${CMAKE_JS_SRC})\nset_target_properties(kuzujs PROPERTIES PREFIX \"\" SUFFIX \".node\")\nset_target_properties(kuzujs\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/build\"\n  LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/build\"\n  ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/build\")\nif(APPLE)\n  target_link_options(kuzujs PRIVATE -undefined dynamic_lookup)\nendif()\ntarget_link_libraries(kuzujs PRIVATE kuzu ${CMAKE_JS_LIB})\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Python Binding Module in CMake\nDESCRIPTION: This CMake snippet configures the build process for the KuzuDB Python binding module. It sets the C++ standard, defines source files, configures the pybind11 module, sets output directories, and links necessary libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/python_api/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(FetchContent)\nproject(_kuzu)\n\nset(CMAKE_CXX_STANDARD 20)\n\nfile(GLOB SOURCE_PY\n        \"src_py/*\")\n\npybind11_add_module(_kuzu\n        SHARED\n        src_cpp/kuzu_binding.cpp\n        src_cpp/cached_import/py_cached_item.cpp\n        src_cpp/cached_import/py_cached_import.cpp\n        src_cpp/py_connection.cpp\n        src_cpp/py_database.cpp\n        src_cpp/py_prepared_statement.cpp\n        src_cpp/py_query_result.cpp\n        src_cpp/py_query_result_converter.cpp\n        src_cpp/py_scan_config.cpp\n        src_cpp/py_udf.cpp\n        src_cpp/py_conversion.cpp\n        src_cpp/pyarrow/pyarrow_bind.cpp\n        src_cpp/pyarrow/pyarrow_scan.cpp\n        src_cpp/pandas/pandas_bind.cpp\n        src_cpp/pandas/pandas_scan.cpp\n        src_cpp/pandas/pandas_analyzer.cpp\n        src_cpp/numpy/numpy_type.cpp\n        src_cpp/numpy/numpy_scan.cpp)\n\nset_target_properties(_kuzu\n        PROPERTIES\n        LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_SOURCE_DIR}/build/kuzu\"\n        RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_SOURCE_DIR}/build/kuzu\"\n        ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_SOURCE_DIR}/build/kuzu\")\n\ntarget_link_libraries(_kuzu\n        PRIVATE\n        kuzu)\n\ntarget_include_directories(\n        _kuzu\n        PUBLIC\n        src_cpp/include)\n\nget_target_property(PYTHON_DEST _kuzu LIBRARY_OUTPUT_DIRECTORY)\n\nfile(COPY ${SOURCE_PY} DESTINATION ${PYTHON_DEST})\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC-Specific Compiler Options for KuzuDB\nDESCRIPTION: Sets up Microsoft Visual Studio C++ compiler options and definitions, including workarounds for Windows-specific issues. The configuration includes handling of special constants, defines, encoding settings, and specific compiler flags needed for the Windows build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n    # Required for M_PI on Windows\n    add_compile_definitions(_USE_MATH_DEFINES)\n    add_compile_definitions(NOMINMAX)\n    add_compile_definitions(SERD_STATIC)\n    # This is a workaround for regex oom issue on windows in gtest.\n    add_compile_definitions(_REGEX_MAX_STACK_COUNT=0)\n    add_compile_definitions(_REGEX_MAX_COMPLEXITY_COUNT=0)\n    # Disable constexpr mutex constructor to avoid compatibility issues with\n    # older versions of the MSVC runtime library\n    # See: https://github.com/microsoft/STL/wiki/Changelog#vs-2022-1710\n    add_compile_definitions(_DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR)\n    # TODO (bmwinger): Figure out if this can be set automatically by cmake,\n    # or at least better integrated with user-specified options\n    # For now, hardcode _AMD64_\n    # CMAKE_GENERATOR_PLATFORM can be used for visual studio builds, but not for ninja\n    add_compile_definitions(_AMD64_)\n    # Non-english windows system may use other encodings other than utf-8 (e.g. Chinese use GBK).\n    add_compile_options(\"/utf-8\")\n    # Enables support for custom hardware exception handling\n    add_compile_options(\"/EHa\")\n    # Reduces the size of the static library by roughly 1/2\n    add_compile_options(\"/Zc:inline\")\n    # Remove the default to avoid warnings\n    STRING(REPLACE \"/EHsc\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    STRING(REPLACE \"/EHs\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    # Store all libraries and binaries in the same directory so that kuzu_shared.dll is found at runtime\n    set(LIBRARY_OUTPUT_PATH \"${CMAKE_BINARY_DIR}/src\")\n    set(EXECUTABLE_OUTPUT_PATH \"${CMAKE_BINARY_DIR}/src\")\n    # This is a workaround for regex stackoverflow issue on windows in gtest.\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /STACK:8388608\")\n\n    string(REGEX REPLACE \"/W[3|4]\" \"/w\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    add_compile_options($<$<CONFIG:Release>:/W0>)\nelse()\n    add_compile_options(-Wall -Wextra)\n    # Disable warnings for unknown pragmas, which is used by several third-party libraries\n    add_compile_options(-Wno-unknown-pragmas)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for KuzuDB C++ Example\nDESCRIPTION: This CMake snippet sets up a C++ example project that uses the KuzuDB library. It creates an executable named 'example_cpp', links it with the KuzuDB shared library, sets the include directories, and adds a dependency on the 'single_file_header' target.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/examples/cpp/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(example_cpp main.cpp)\ntarget_link_libraries(example_cpp kuzu_shared)\ntarget_include_directories(example_cpp PRIVATE ${CMAKE_BINARY_DIR}/src)\nadd_dependencies(example_cpp single_file_header)\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Configuration for KuzuDB Components in CMake\nDESCRIPTION: This CMake snippet conditionally adds subdirectories for different KuzuDB components based on build flags. It includes options for shell, Java API, Node.js API, Python API, benchmarks, and WebAssembly support.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_SHELL})\n    add_subdirectory(shell)\nendif()\nif(${BUILD_JAVA})\n    add_subdirectory(java_api)\nendif()\nif(${BUILD_NODEJS})\n    add_subdirectory(nodejs_api)\nendif()\nif(${BUILD_PYTHON})\n    add_subdirectory(python_api)\nendif()\nif(${BUILD_BENCHMARK})\n    add_subdirectory(benchmark)\nendif()\nif(${BUILD_WASM})\n    add_subdirectory(wasm)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Worker Path in JavaScript\nDESCRIPTION: Example of how to set a custom path for the worker script in Kuzu-Wasm. This must be done before any other function calls to the WebAssembly module.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport kuzu from \"kuzu-wasm\";\nkuzu.setWorkerPath('path/to/worker.js');\n```\n\n----------------------------------------\n\nTITLE: Defining Object Library for KuzuDB Common Types in CMake\nDESCRIPTION: Creates an OBJECT library target named 'kuzu_common_types' containing implementations of various data types such as blob, date, timestamp, string, and other custom types used within KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/types/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_common_types\n        OBJECT\n        blob.cpp\n        date_t.cpp\n        dtime_t.cpp\n        interval_t.cpp\n        ku_list.cpp\n        ku_string.cpp\n        timestamp_t.cpp\n        types.cpp\n        int128_t.cpp\n        uuid.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebAssembly (WASM) Build Options for KuzuDB\nDESCRIPTION: Sets up compiler and linker options for building KuzuDB with WebAssembly. Different configurations are provided for test builds versus regular builds, with options for file system access, memory management, and module export.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_WASM})\n    if(NOT __SINGLE_THREADED__)\n        add_compile_options(-pthread)\n        add_link_options(-pthread)\n        add_link_options(-sPTHREAD_POOL_SIZE=8)\n    endif()\n    add_compile_options(-s DISABLE_EXCEPTION_CATCHING=0)\n    add_link_options(-sSTACK_SIZE=4MB)\n    add_link_options(-sASSERTIONS=1)\n    add_link_options(-lembind)\n    add_link_options(-sWASM_BIGINT)\n\n    if(BUILD_TESTS OR BUILD_EXTENSION_TESTS)\n        add_link_options(-sINITIAL_MEMORY=3892MB)\n        add_link_options(-sNODERAWFS=1)\n    elseif(WASM_NODEFS)\n        add_link_options(-sNODERAWFS=1)\n        add_link_options(-sALLOW_MEMORY_GROWTH=1)\n        add_link_options(-sMODULARIZE=1)\n        add_link_options(-sEXPORTED_RUNTIME_METHODS=FS,wasmMemory)\n        add_link_options(-sEXPORT_NAME=kuzu)\n        add_link_options(-sMAXIMUM_MEMORY=4GB)\n    else()\n        add_link_options(-sSINGLE_FILE=1)\n        add_link_options(-sALLOW_MEMORY_GROWTH=1)\n        add_link_options(-sMODULARIZE=1)\n        add_link_options(-sEXPORTED_RUNTIME_METHODS=FS,wasmMemory)\n        add_link_options(-lidbfs.js)\n        add_link_options(-lworkerfs.js)\n        add_link_options(-sEXPORT_NAME=kuzu)\n        add_link_options(-sMAXIMUM_MEMORY=4GB)\n    endif()\n    set(__WASM__ TRUE)\n    add_compile_options(-fexceptions)\n    add_link_options(-s DISABLE_EXCEPTION_CATCHING=0)\n    add_link_options(-fexceptions)\n    add_compile_definitions(__WASM__)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for KuzuDB Dependencies\nDESCRIPTION: Sets up include directories for all third-party dependencies used by KuzuDB, including libraries for parsing, serialization, compression, JSON handling, and various utilities.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(third_party/antlr4_cypher/include)\ninclude_directories(third_party/antlr4_runtime/src)\ninclude_directories(third_party/brotli/c/include)\ninclude_directories(third_party/fast_float/include)\ninclude_directories(third_party/mbedtls/include)\ninclude_directories(third_party/parquet)\ninclude_directories(third_party/snappy)\ninclude_directories(third_party/thrift)\ninclude_directories(third_party/miniz)\ninclude_directories(third_party/nlohmann_json)\ninclude_directories(third_party/pybind11/include)\ninclude_directories(third_party/pyparse)\ninclude_directories(third_party/re2/include)\ninclude_directories(third_party/alp/include)\nif (${BUILD_TESTS} OR ${BUILD_EXTENSION_TESTS})\n    include_directories(third_party/spdlog)\nelseif (${BUILD_BENCHMARK})\n    include_directories(third_party/spdlog)\nendif ()\ninclude_directories(third_party/utf8proc/include)\ninclude_directories(third_party/zstd/include)\ninclude_directories(third_party/httplib)\ninclude_directories(third_party/pcg)\ninclude_directories(third_party/lz4)\ninclude_directories(third_party/roaring_bitmap)\n# Use SYSTEM to suppress warnings from simsimd\ninclude_directories(SYSTEM third_party/simsimd/include)\n\nadd_subdirectory(third_party)\n```\n\n----------------------------------------\n\nTITLE: Running Kuzu Java API Example\nDESCRIPTION: Commands to navigate to the example directory and run the sample application using Gradle. This demonstrates basic usage of the Kuzu Java API.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/java_api/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd example && gradle run\n```\n\n----------------------------------------\n\nTITLE: Configuring Delta Format Installer Extension for Non-Windows Platforms in CMake\nDESCRIPTION: Creates a shared library for a delta format installer on non-Windows platforms. It includes the necessary source files and sets extension properties. For macOS, additional dynamic lookup settings are applied.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/src/installer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT WIN32)\n    add_library(delta_installer\n            SHARED\n            delta_install_func.cpp\n            ${PROJECT_SOURCE_DIR}/extension/duckdb/src/installer/duckdb_installer.cpp)\n    set_extension_properties(delta_installer delta_installer delta)\nendif ()\n\nif (APPLE)\n    set_apple_dynamic_lookup(delta_installer)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Installing Kuzu in Rust\nDESCRIPTION: Command to add Kuzu database as a dependency in Rust using Cargo package manager.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo add kuzu\n```\n\n----------------------------------------\n\nTITLE: Installation Directory Configuration\nDESCRIPTION: Defines installation directories for libraries, executables, headers, and CMake files.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_LIB_DIR\n        lib\n        CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_BIN_DIR\n        bin\n        CACHE PATH \"Installation directory for executables\")\nset(INSTALL_INCLUDE_DIR\n        include\n        CACHE PATH \"Installation directory for header files\")\nset(INSTALL_CMAKE_DIR\n        ${DEF_INSTALL_CMAKE_DIR}\n        CACHE PATH \"Installation directory for CMake files\")\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Planner Operator Library in CMake\nDESCRIPTION: Creates an OBJECT library target named 'kuzu_planner_operator' that includes various logical operator implementation files. These logical operators are components of the query planning system used to build and optimize query execution plans.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_planner_operator\n        OBJECT\n        logical_accumulate.cpp\n        logical_aggregate.cpp\n        logical_create_macro.cpp\n        logical_cross_product.cpp\n        logical_distinct.cpp\n        logical_dummy_scan.cpp\n        logical_dummy_sink.cpp\n        logical_explain.cpp\n        logical_filter.cpp\n        logical_flatten.cpp\n        logical_hash_join.cpp\n        logical_table_function_call.cpp\n        logical_intersect.cpp\n        logical_limit.cpp\n        logical_operator.cpp\n        logical_order_by.cpp\n        logical_partitioner.cpp\n        logical_path_property_probe.cpp\n        logical_plan.cpp\n        logical_plan_util.cpp\n        logical_projection.cpp\n        logical_union.cpp\n        logical_unwind.cpp\n        schema.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Directories and Definitions for KuzuDB\nDESCRIPTION: Sets up include directories and compile definitions for the KuzuDB build process. Adds multiple subdirectories for different components of the project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n\nadd_compile_definitions(KUZU_EXPORTS)\nadd_compile_definitions(ANTLR4CPP_STATIC)\nadd_subdirectory(binder)\nadd_subdirectory(c_api)\nadd_subdirectory(catalog)\nadd_subdirectory(common)\nadd_subdirectory(expression_evaluator)\nadd_subdirectory(function)\nadd_subdirectory(graph)\nadd_subdirectory(main)\nadd_subdirectory(optimizer)\nadd_subdirectory(parser)\nadd_subdirectory(planner)\nadd_subdirectory(processor)\nadd_subdirectory(storage)\nadd_subdirectory(transaction)\nadd_subdirectory(extension)\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test with CMake for KuzuDB\nDESCRIPTION: Sets up the Google Test framework as a dependency for the KuzuDB project using CMake's FetchContent module. The configuration disables warnings as errors and Link Time Optimization for Google Test, fetches version v1.13.0 from the official repository, forces shared CRT runtime, and makes the dependency available to the project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/gtest/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\n\n# Disable WERROR for gtest.\nset(CMAKE_COMPILE_WARNING_AS_ERROR FALSE)\n# Disable LTO for gtest, since it uses an older version of CMake.\nset(CMAKE_INTERPROCEDURAL_OPTIMIZATION FALSE)\n\nFetchContent_Declare(\n        googletest\n        GIT_REPOSITORY https://github.com/google/googletest.git\n        GIT_TAG v1.13.0\n)\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n```\n\n----------------------------------------\n\nTITLE: Initializing Command Line Arguments in KuzuDB Shell\nDESCRIPTION: Demonstrates the setup of command line argument parsing using the args library. Defines various flag types including positional arguments, help flags, value flags and boolean flags for shell configuration.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/shell_development_guide.md#2025-04-17_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nargs::ArgumentParser  parser(\"KuzuDB Shell\");\nargs::Positional<std::string> inputDirFlag(parser, \"databasePath\",\n\"Path to the database. If not given or set to \\\":memory:\\\", the database will be opened \"\n\"under in-memory mode.\");\nargs::HelpFlag  help(parser, \"help\", \"Display this help menu\", {'h', \"help\"});\nargs::ValueFlag<uint64_t> bpSizeInMBFlag(parser, \"\",\n\"Size of buffer pool for default and large page sizes in megabytes\",\n{'d', \"default_bp_size\", \"defaultbpsize\"}, -1u);\nargs::Flag  disableCompression(parser, \"no_compression\", \"Disable compression\",\n{\"no_compression\", \"nocompression\"});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Build Options for KuzuDB\nDESCRIPTION: Detects and configures Android-specific build settings by checking for the ANDROID_ABI variable and setting the appropriate compiler definitions.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(ANDROID_ABI)\n    message(STATUS \"Android ABI detected: ${ANDROID_ABI}\")\n    add_compile_definitions(__ANDROID__)\n    set(__ANDROID__ TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Library Naming for Kuzu Java API\nDESCRIPTION: Sets up platform-specific naming for the JNI shared library based on OS and architecture.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/java_api/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"OS_NAME=${OS_NAME}\")\nmessage(STATUS \"OS_ARCH=${OS_ARCH}\")\nstring(JOIN \"_\" LIB_SUFFIX \".so\" ${OS_NAME} ${OS_ARCH})\n\nset_target_properties(kuzu_java_native PROPERTIES SUFFIX ${LIB_SUFFIX})\nset_target_properties(kuzu_java_native PROPERTIES PREFIX \"lib\")\nset_target_properties(kuzu_java_native\n        PROPERTIES\n        LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_SOURCE_DIR}/build\"\n        RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_SOURCE_DIR}/build\"\n        ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_SOURCE_DIR}/build\")\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake\nDESCRIPTION: Sets up initial project configuration including version, languages, and threading options.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nproject(Kuzu VERSION 0.9.1 LANGUAGES CXX C)\n\noption(SINGLE_THREADED \"Single-threaded mode\" FALSE)\nif(SINGLE_THREADED)\n    set(__SINGLE_THREADED__ TRUE)\n    add_compile_definitions(__SINGLE_THREADED__)\n    message(STATUS \"Single-threaded mode is enabled\")\nelse()\n    find_package(Threads REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing KuzuDB Shell\nDESCRIPTION: Configures the installation of the kuzu_shell executable\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS kuzu_shell)\n```\n\n----------------------------------------\n\nTITLE: Using Kuzu Node.js API to Create and Query a Database\nDESCRIPTION: Example demonstrating how to create a database, establish a connection, create tables, load data, and execute a query using the Kuzu Node.js API.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Import library\nconst kuzu = require(\"kuzu\");\n\n(async () => {\n  // Create an empty database and connect to it\n  const db = new kuzu.Database(\"./test\");\n  const conn = new kuzu.Connection(db);\n\n  // Create the tables\n  await conn.query(\n    \"CREATE NODE TABLE User(name STRING, age INT64, PRIMARY KEY (name))\"\n  );\n  await conn.query(\n    \"CREATE NODE TABLE City(name STRING, population INT64, PRIMARY KEY (name))\"\n  );\n  await conn.query(\"CREATE REL TABLE Follows(FROM User TO User, since INT64)\");\n  await conn.query(\"CREATE REL TABLE LivesIn(FROM User TO City)\");\n\n  // Load the data\n  await conn.query('COPY User FROM \"user.csv\"');\n  await conn.query('COPY City FROM \"city.csv\"');\n  await conn.query('COPY Follows FROM \"follows.csv\"');\n  await conn.query('COPY LivesIn FROM \"lives-in.csv\"');\n\n  const queryResult = await conn.query(\"MATCH (u:User) RETURN u.name, u.age;\");\n\n  // Get all rows from the query result\n  const rows = await queryResult.getAll();\n\n  // Print the rows\n  for (const row of rows) {\n    console.log(row);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB Library Targets\nDESCRIPTION: Creates static and shared library targets for KuzuDB using the collected object files.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu STATIC ${ALL_OBJECT_FILES})\nadd_library(kuzu_shared SHARED ${ALL_OBJECT_FILES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test and Test Directory Structure for KuzuDB with CMake\nDESCRIPTION: Configures Google Test for use in the KuzuDB test suite without installing the libraries. Creates interface imports for GTest and GMock, then enables testing and adds various test subdirectories covering different components of the database system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Don't install gtest libraries.\nadd_subdirectory(gtest EXCLUDE_FROM_ALL)\n\n# Make gtest available to subdirectories.\nadd_library(GTest::GTest INTERFACE IMPORTED)\ntarget_link_libraries(GTest::GTest INTERFACE gtest_main)\ntarget_link_libraries(GTest::GTest INTERFACE gmock_main)\n\nenable_testing()\nadd_subdirectory(test_helper)\nadd_subdirectory(test_runner)\nadd_subdirectory(graph_test)\nadd_subdirectory(c_api)\nadd_subdirectory(common)\nadd_subdirectory(main)\nadd_subdirectory(optimizer)\nadd_subdirectory(planner)\nadd_subdirectory(runner)\nadd_subdirectory(storage)\nadd_subdirectory(transaction)\nadd_subdirectory(util_tests)\nadd_subdirectory(copy)\nadd_subdirectory(function/gds)\nadd_subdirectory(binder)\n```\n\n----------------------------------------\n\nTITLE: Installing Kuzu in Go\nDESCRIPTION: Command to install Kuzu database in Go using the go get command.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/kuzudb/go-kuzu\n```\n\n----------------------------------------\n\nTITLE: Creating Data Chunk Library in CMake for KuzuDB\nDESCRIPTION: Defines an object library named 'kuzu_common_data_chunk' with five source files related to data chunk functionality. This creates compiled object files that can be linked into other targets in the KuzuDB build system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/data_chunk/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_common_data_chunk\n        OBJECT\n        data_chunk.cpp\n        data_chunk_collection.cpp\n        data_chunk_state.cpp\n        sel_vector.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Filesystem Extension Build Configuration in CMake\nDESCRIPTION: Configures the object files to be included in the extension library, builds the extension library with the specified static/dynamic option, and links the required dependencies including mbedTLS and OpenSSL.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/httpfs/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(HTTPFS_EXTENSION_OBJECT_FILES\n        ${HTTPFS_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:httpfs_extension_source>)\n\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"httpfs\")\n\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        mbedtls\n        ${OPENSSL_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cross-Platform Testing Environment\nDESCRIPTION: Configures the testing environment for different platforms and cross-compilation scenarios. This includes detection of Wine for Windows tests and QEMU for ARM/AArch64 cross-compilation testing.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Tests\n\n# Integration tests, those depend on `brotli` binary\nif(NOT BROTLI_DISABLE_TESTS AND BROTLI_BUILD_TOOLS)\n  # If we're targeting Windows but not running on Windows, we need Wine\n  # to run the tests...\n  if(WIN32 AND NOT CMAKE_HOST_WIN32)\n    find_program(BROTLI_WRAPPER NAMES wine)\n\n    if(NOT BROTLI_WRAPPER)\n      message(STATUS \"wine not found, disabling tests\")\n      set(BROTLI_DISABLE_TESTS TRUE)\n    endif()\n  endif()\n  # If our compiler is a cross-compiler that we know about (arm/aarch64),\n  # then we need to use qemu to execute the tests.\n  if (\"${CMAKE_C_COMPILER}\" MATCHES \"^.*/arm-linux-gnueabihf-.*$\")\n    message(STATUS \"Detected arm-linux-gnueabihf cross-compilation\")\n    set(BROTLI_WRAPPER \"qemu-arm\")\n    set(BROTLI_WRAPPER_LD_PREFIX \"/usr/arm-linux-gnueabihf\")\n  endif()\n\n  if (\"${CMAKE_C_COMPILER}\" MATCHES \"^.*/arm-linux-gnueabi-.*$\")\n    message(STATUS \"Detected arm-linux-gnueabi cross-compilation\")\n    set(BROTLI_WRAPPER \"qemu-arm\")\n    set(BROTLI_WRAPPER_LD_PREFIX \"/usr/arm-linux-gnueabi\")\n  endif()\n\n  if (\"${CMAKE_C_COMPILER}\" MATCHES \"^.*/aarch64-linux-gnu-.*$\")\n    message(STATUS \"Detected aarch64-linux-gnu cross-compilation\")\n    set(BROTLI_WRAPPER \"qemu-aarch64\")\n    set(BROTLI_WRAPPER_LD_PREFIX \"/usr/aarch64-linux-gnu\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB ANTLR Parser Library in CMake\nDESCRIPTION: Creates an object library for the KuzuDB parser components using CMake. The library includes the main Cypher parser, error listener, and error strategy implementations. Updates the parent scope's object files list with the new parser library objects.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/parser/antlr_parser/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_parser_antlr_parser\n        OBJECT\n        kuzu_cypher_parser.cpp\n        parser_error_listener.cpp\n        parser_error_strategy.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_parser_antlr_parser>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregate Functions Library in CMake for KuzuDB\nDESCRIPTION: Creates an object library named 'kuzu_function_aggregate' that includes various aggregate function implementations such as count, count_star, collect, min_max, sum, and avg. These are the standard aggregate functions used in the KuzuDB database system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/aggregate/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_function_aggregate\n        OBJECT\n        count.cpp\n        count_star.cpp\n        collect.cpp\n        min_max.cpp\n        sum.cpp\n        avg.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Dependencies for KuzuDB\nDESCRIPTION: CMake build script that configures compiler options and includes multiple third-party libraries. It disables extra warnings for non-MSVC compilers and conditionally includes Python bindings based on BUILD_PYTHON flag. The script manages essential dependencies like brotli, fastpfor, parquet, and various compression libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT MSVC)\n    add_compile_options(-Wno-extra)\nendif()\n\nadd_subdirectory(alp)\nadd_subdirectory(antlr4_cypher)\nadd_subdirectory(antlr4_runtime)\nset(BROTLI_BUNDLED_MODE ON)\nadd_subdirectory(brotli)\nadd_subdirectory(fast_float)\nadd_subdirectory(fastpfor)\nadd_subdirectory(glob)\nadd_subdirectory(lz4)\nadd_subdirectory(mbedtls)\nadd_subdirectory(miniz)\nadd_subdirectory(parquet)\nif(${BUILD_PYTHON})\n    add_subdirectory(pybind11)\nendif()\nadd_subdirectory(re2)\nadd_subdirectory(roaring_bitmap)\nadd_subdirectory(simsimd)\nadd_subdirectory(snappy)\nadd_subdirectory(thrift)\nadd_subdirectory(utf8proc)\nadd_subdirectory(yyjson)\nadd_subdirectory(zstd)\n```\n\n----------------------------------------\n\nTITLE: Building Extension Libraries in CMake\nDESCRIPTION: Defines a function to build either static or shared extension libraries based on the provided parameters, with platform-specific configurations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(build_extension_lib build_static ext_name)\n    string(TOUPPER \"${ext_name}\" ext_name_upper_case)\n    if (build_static)\n        add_library(kuzu_${ext_name}_static_extension\n                STATIC\n                ${${ext_name_upper_case}_EXTENSION_OBJECT_FILES})\n        SET(EXTENSION_LIB_NAME \"${ext_name}_static\" PARENT_SCOPE)\n        SET(EXTENSION_LIB_NAME \"${ext_name}_static\")\n    else ()\n        add_library(kuzu_${ext_name}_extension\n                SHARED\n                ${${ext_name_upper_case}_EXTENSION_OBJECT_FILES})\n        SET(EXTENSION_LIB_NAME \"${ext_name}\" PARENT_SCOPE)\n        SET(EXTENSION_LIB_NAME \"${ext_name}\")\n    endif ()\n    set_extension_properties(kuzu_${EXTENSION_LIB_NAME}_extension ${EXTENSION_LIB_NAME} ${ext_name})\n    if (WIN32 OR build_static)\n        # See comments in extension/httpfs/CMakeLists.txt.\n        target_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension PRIVATE kuzu)\n    endif ()\n    if (APPLE AND NOT build_static)\n        set_apple_dynamic_lookup(kuzu_${EXTENSION_LIB_NAME}_extension)\n    endif ()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_main Object Library in CMake\nDESCRIPTION: Creates an OBJECT library target named kuzu_main containing all the core source files for the KuzuDB database system. This includes components for database management, query execution, client handling, and configuration.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_main\n        OBJECT\n        attached_database.cpp\n        client_context.cpp\n        connection.cpp\n        database.cpp\n        database_manager.cpp\n        plan_printer.cpp\n        prepared_statement.cpp\n        query_result.cpp\n        query_summary.cpp\n        storage_driver.cpp\n        version.cpp\n        db_config.cpp\n        settings.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_catalog_entry Library with Source Files in CMake\nDESCRIPTION: Sets up the kuzu_catalog_entry object library by specifying all the source files that implement different catalog entry types. The catalog entry components handle metadata storage for various database objects.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/catalog/catalog_entry/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_catalog_entry\n        OBJECT\n        catalog_entry.cpp\n        catalog_entry_type.cpp\n        function_catalog_entry.cpp\n        table_catalog_entry.cpp\n        node_table_catalog_entry.cpp\n        rel_table_catalog_entry.cpp\n        rel_group_catalog_entry.cpp\n        scalar_macro_catalog_entry.cpp\n        type_catalog_entry.cpp\n        sequence_catalog_entry.cpp\n        index_catalog_entry.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Brotli using Vcpkg\nDESCRIPTION: Commands to download and install Brotli using the Vcpkg dependency manager. This sequence clones the Vcpkg repository, bootstraps it, integrates it with the system, and installs the Brotli package.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install brotli\n```\n\n----------------------------------------\n\nTITLE: Defining Arrow Integration Library in CMake\nDESCRIPTION: Creates an object library named kuzu_common_arrow with various Arrow-related source files. The library includes converters, scanners, and type handling for Apache Arrow integration with KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/arrow/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_common_arrow\n        OBJECT\n        arrow_array_scan.cpp\n        arrow_converter.cpp\n        arrow_null_mask_tree.cpp\n        arrow_row_batch.cpp\n        arrow_type.cpp)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for KuzuDB Extension\nDESCRIPTION: Links the Snowball stemming library and RE2 regular expression library to the KuzuDB extension.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        snowball\n        re2)\n```\n\n----------------------------------------\n\nTITLE: Configuring NAPI Definitions and Platform-Specific NPX Command\nDESCRIPTION: Sets up NAPI version and Node.js related definitions, and configures the NPX command based on the platform (Windows vs non-Windows).\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DNAPI_VERSION=6)\nadd_definitions(-DNODE_RUNTIME=node)\nadd_definitions(-DBUILDING_NODE_EXTENSION)\n\nif(WIN32)\n  set(NPX_CMD npx.cmd)\nelse()\n  set(NPX_CMD npx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Object Library for KuzuDB Planner Join Order Component in CMake\nDESCRIPTION: Creates an object library named 'kuzu_planner_join_order' that includes various source files related to join order planning, cardinality estimation, and cost modeling. These components likely form the join order optimization module of the KuzuDB query planner.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/join_order/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_planner_join_order\n        OBJECT\n        cardinality_estimator.cpp\n        cost_model.cpp\n        join_order_util.cpp\n        join_plan_solver.cpp\n        join_tree.cpp\n        join_tree_constructor.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_planner_join_order>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building Kuzu Node.js API Project\nDESCRIPTION: Command to build the Kuzu Node.js API project for local development.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Building Components for KuzuDB in CMake\nDESCRIPTION: This CMake snippet configures the include directories for the KuzuDB project, adds source subdirectories for function and main components, and builds a Neo4j migration extension library. It sets up paths to include project source directories and third-party dependencies like the Snowball libstemmer.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/neo4j_migration/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        src/include\n        third_party/snowball/libstemmer)\n\nadd_subdirectory(src/function)\nadd_subdirectory(src/main)\n\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"neo4j_migration\")\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB Common Enums Library\nDESCRIPTION: Defines a CMake object library 'kuzu_common_enums' containing various enumeration type implementations for KuzuDB. Includes files for handling accumulation, paths, relations, transactions, and other core database operations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/enums/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_common_enums\\n        OBJECT\\n        accumulate_type.cpp\\n        path_semantic.cpp\\n        query_rel_type.cpp\\n        rel_direction.cpp\\n        rel_multiplicity.cpp\\n        scan_source_type.cpp\\n        table_type.cpp\\n        transaction_action.cpp\\n        drop_type.cpp\\n        extend_direction_util.cpp\\n        conflict_action.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_c_api Library Components in CMake\nDESCRIPTION: Configures the kuzu_c_api library by listing all C++ source files to be compiled as object files. The library provides a C interface for the Kuzu database with components for connections, database operations, data types, and query processing.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/c_api/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_c_api\n        OBJECT\n        connection.cpp\n        database.cpp\n        data_type.cpp\n        helpers.cpp\n        flat_tuple.cpp\n        prepared_statement.cpp\n        query_result.cpp\n        query_summary.cpp\n        value.cpp\n        version.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_common_exception Library in CMake\nDESCRIPTION: Creates an OBJECT library named kuzu_common_exception with exception.cpp and message.cpp source files. It conditionally links with cpptrace if backtraces are enabled, and adds the library to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/exception/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_common_exception\n        OBJECT\n        exception.cpp\n        message.cpp)\n\nif (ENABLE_BACKTRACES)\n        target_link_libraries(kuzu_common_exception PRIVATE cpptrace::cpptrace)\nendif()\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_exception>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage Support for KuzuDB\nDESCRIPTION: Sets up compiler flags for generating code coverage reports using LCOV when the BUILD_LCOV option is enabled.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_LCOV \"Build coverage report.\" FALSE)\nif(${BUILD_LCOV})\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Kuzu in Python\nDESCRIPTION: Command to install Kuzu database in Python using pip package manager.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install kuzu\n```\n\n----------------------------------------\n\nTITLE: Building the WebAssembly Module\nDESCRIPTION: Command to build the WebAssembly module for Kuzu-Wasm. This creates a release build in the 'release' directory and a tarball for publishing.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Kuzu in NodeJS\nDESCRIPTION: Command to install Kuzu database in NodeJS using npm package manager.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install kuzu\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Subdirectories in CMake for KuzuDB\nDESCRIPTION: This snippet sets up include directories for the KuzuDB project and adds necessary subdirectories. It includes paths for the project source, binary output, and third-party libraries like SimSIMD.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/vector/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        src/include\n        ${PROJECT_SOURCE_DIR}/third_party/simsimd/include)\n\nadd_subdirectory(src/catalog)\nadd_subdirectory(src/function)\nadd_subdirectory(src/index)\nadd_subdirectory(src/main)\n```\n\n----------------------------------------\n\nTITLE: Creating Path Functions Object Library in CMake\nDESCRIPTION: Defines an object library 'kuzu_function_path' containing path-related function implementations including length, nodes, properties, relationships, and semantic functions. The compiled objects are added to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/path/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_function_path\n        OBJECT\n        length_function.cpp\n        nodes_function.cpp\n        properties_function.cpp\n        rels_function.cpp\n        semantic_function.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_path>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB Shell Executable\nDESCRIPTION: Defines the kuzu_shell executable target with its source files including embedded shell, linenoise, and shell runner implementations\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(kuzu_shell\n        ${KUZU_SHELL_OBJECT_FILES}\n        embedded_shell.cpp\n        linenoise.cpp\n        shell_runner.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Source Subdirectories\nDESCRIPTION: Adds various subdirectories containing the source code components of the KuzuDB project, including different types of functions, utilities, and core components.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(src/functions/cast_functions)\nadd_subdirectory(src/functions/creation_functions)\nadd_subdirectory(src/functions/export_functions)\nadd_subdirectory(src/functions/extract_functions)\nadd_subdirectory(src/functions/scalar_functions)\nadd_subdirectory(src/functions/table_functions)\nadd_subdirectory(src/utils)\nadd_subdirectory(src/reader)\nadd_subdirectory(src/type)\nadd_subdirectory(src/common)\nadd_subdirectory(src/main)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Storage Library Target\nDESCRIPTION: Creates an OBJECT library target 'kuzu_storage' that includes core storage implementation files for file handling, page management, WAL replaying, and other storage utilities.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_storage\n        OBJECT\n        free_space_manager.cpp\n        page_manager.cpp\n        db_file_id.cpp\n        file_handle.cpp\n        shadow_utils.cpp\n        storage_manager.cpp\n        storage_utils.cpp\n        storage_version_info.cpp\n        undo_buffer.cpp\n        wal_replayer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Kuzu Node.js API\nDESCRIPTION: Command to execute tests for the Kuzu Node.js API project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining Shell Commands Structure\nDESCRIPTION: Defines the available shell commands as constants in a struct, including commands for help, clear, quit, display settings and mode controls.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/shell_development_guide.md#2025-04-17_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n// build-in shell command\nstruct ShellCommand {\n    const char* HELP = \":help\";\n    const char* CLEAR = \":clear\";\n    const char* QUIT = \":quit\";\n    const char* MAX_ROWS = \":max_rows\";\n    const char* MAX_WIDTH = \":max_width\";\n    const char* MODE = \":mode\";\n    const char* STATS = \":stats\";\n    const char* MULTI = \":multiline\";\n    const char* SINGLE = \":singleline\";\n    const char* HIGHLIGHT = \":highlight\";\n    const char* ERRORS = \":render_errors\";\n    const std::array<const char*, 11> commandList = {HELP, CLEAR, QUIT, MAX_ROWS, MAX_WIDTH, MODE,\n        STATS, MULTI, SINGLE, HIGHLIGHT, ERRORS};\n} shellCommand;\n```\n\n----------------------------------------\n\nTITLE: Building FTS Extension Library\nDESCRIPTION: Builds the full-text search extension library with configurable static/dynamic linking.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"fts\")\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_list_function Library in CMake\nDESCRIPTION: Declares the kuzu_list_function library as an OBJECT library and lists all source files related to list operations. This configuration includes various list manipulation functions such as aggregation, filtering, transformation, and other utilities.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/list/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_list_function\n        OBJECT\n        list_agg_function.cpp\n        list_any_value_function.cpp\n        list_any.cpp\n        list_all.cpp\n        list_append_function.cpp\n        list_concat_function.cpp\n        list_contains_function.cpp\n        list_creation.cpp\n        list_distinct_function.cpp\n        list_extract_function.cpp\n        list_range_function.cpp\n        list_reverse_function.cpp\n        list_slice_function.cpp\n        list_sort_function.cpp\n        list_to_string_function.cpp\n        list_unique_function.cpp\n        list_prepend_function.cpp\n        list_position_function.cpp\n        list_transform.cpp\n        list_filter.cpp\n        list_reduce.cpp\n        list_none.cpp\n        list_single.cpp\n        size_function.cpp\n        quantifier_functions.cpp\n        list_has_all.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Static Library Usage in CMake\nDESCRIPTION: Determines whether to use static or dynamic DuckDB libraries based on the platform and build type. Sets the DuckDB_USE_STATIC_LIBS variable accordingly.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32 OR BUILD_STATIC_EXTENSION)\n    set(DuckDB_USE_STATIC_LIBS ON)\nelse ()\n    set(DuckDB_USE_STATIC_LIBS OFF)\nendif ()\nfind_package(DuckDB REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for KuzuDB Components in CMake\nDESCRIPTION: Adds subdirectories for various components of the KuzuDB project, including connector, storage, main, installer, and function modules.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(src/connector)\nadd_subdirectory(src/storage)\nadd_subdirectory(src/main)\nadd_subdirectory(src/installer)\nadd_subdirectory(src/function)\n```\n\n----------------------------------------\n\nTITLE: Creating Kuzu Processor Library Target\nDESCRIPTION: Defines an OBJECT library target for the Kuzu processor, including core source files for warning context, processor, and processor task implementations\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_processor\n        OBJECT\n        warning_context.cpp\n        processor.cpp\n        processor_task.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Kuzu Node.js API\nDESCRIPTION: Command to install development dependencies for contributing to the Kuzu Node.js API project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --include=dev\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Common Library Object in CMake\nDESCRIPTION: This snippet defines the kuzu_common library as an OBJECT library in CMake. It lists all the source files that are part of this library, covering various utility functions and core components of KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_common\n        OBJECT\n        case_insensitive_map.cpp\n        constants.cpp\n        expression_type.cpp\n        in_mem_overflow_buffer.cpp\n        mask.cpp\n        md5.cpp\n        metric.cpp\n        null_mask.cpp\n        profiler.cpp\n        random_engine.cpp\n        roaring_mask.cpp\n        sha256.cpp\n        string_utils.cpp\n        system_message.cpp\n        type_utils.cpp\n        utils.cpp\n        windows_utils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building Kuzu Java API with Gradle\nDESCRIPTION: Command to build the Kuzu Java API project using Gradle wrapper. This process compiles the source code and generates the JAR file with bundled JNI bindings.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/java_api/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Configuring ANTLR4 Runtime as Static Library in CMake\nDESCRIPTION: This snippet defines the ANTLR4 runtime library configuration in CMake. It sets the library name, lists all source files needed for compilation, creates a static library target, configures include directories, and adds necessary compilation definitions for static linking.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/antlr4_runtime/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(ANTLR4_RUNTIME antlr4_runtime CACHE INTERNAL \"\")\nset(ANTLR4_RUNTIME_SRC\n    src/antlr4-common.h\n    src/antlr4-runtime.h\n    src/ANTLRErrorListener.cpp\n    src/ANTLRErrorListener.h\n    # ... many more files listed\n    src/WritableToken.cpp\n    src/WritableToken.h\n)\n\nadd_library(${ANTLR4_RUNTIME} STATIC ${ANTLR4_RUNTIME_SRC})\n\ntarget_include_directories(${ANTLR4_RUNTIME} PUBLIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/src\n)\n\ntarget_compile_definitions(${ANTLR4_RUNTIME} PUBLIC -DANTLR4CPP_STATIC)\n\nif(MSVC)\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Binder Rewriter Library in CMake\nDESCRIPTION: Creates an object library named kuzu_binder_rewriter from multiple source files handling different aspects of query rewriting. The library is then added to the project's object files collection.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/rewriter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        kuzu_binder_rewriter\n        OBJECT\n        match_clause_pattern_label_rewriter.cpp\n        normalized_query_part_match_rewriter.cpp\n        with_clause_projection_rewriter.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_rewriter>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Table Function Library in CMake\nDESCRIPTION: Configures the kuzu_table_function object library by listing all source files that implement database utility functions. These include system information functions, catalog operations, and table management functionality for the KuzuDB graph database.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/table/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_table_function\n        OBJECT\n        bind_data.cpp\n        bind_input.cpp\n        bm_info.cpp\n        cache_column.cpp\n        catalog_version.cpp\n        clear_warnings.cpp\n        create_project_graph.cpp\n        current_setting.cpp\n        db_version.cpp\n        drop_project_graph.cpp\n        free_space_info.cpp\n        show_attached_databases.cpp\n        show_connection.cpp\n        show_functions.cpp\n        show_indexes.cpp\n        show_loaded_extensions.cpp\n        show_official_extensions.cpp\n        show_projected_graphs.cpp\n        show_sequences.cpp\n        show_tables.cpp\n        show_warnings.cpp\n        stats_info.cpp\n        storage_info.cpp\n        simple_table_function.cpp\n        table_function.cpp\n        table_info.cpp\n        )\n```\n\n----------------------------------------\n\nTITLE: Linking DuckDB Libraries to KuzuDB Extension\nDESCRIPTION: Links the DuckDB libraries to the KuzuDB extension target, making the DuckDB functionality available to the extension.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        ${DuckDB_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Defining Library Targets and Source Files\nDESCRIPTION: Creates the three main Brotli library targets (common, decoder, encoder) and configures their source files. These libraries form the core components of Brotli.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB_RECURSE BROTLI_COMMON_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} c/common/*.c)\nadd_library(brotlicommon ${BROTLI_COMMON_SOURCES})\n\nfile(GLOB_RECURSE BROTLI_DEC_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} c/dec/*.c)\nadd_library(brotlidec ${BROTLI_DEC_SOURCES})\n\nfile(GLOB_RECURSE BROTLI_ENC_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} c/enc/*.c)\nadd_library(brotlienc ${BROTLI_ENC_SOURCES})\n\n# Older CMake versions does not understand INCLUDE_DIRECTORIES property.\ninclude_directories(${BROTLI_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Binder Object Library\nDESCRIPTION: Creates an object library named 'kuzu_binder' with various source files. This library includes core binder functionality such as expression binding and statement rewriting.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_binder\n        OBJECT\n        binder.cpp\n        binder_scope.cpp\n        bound_statement_result.cpp\n        bound_scan_source.cpp\n        bound_statement_rewriter.cpp\n        bound_statement_visitor.cpp\n        expression_binder.cpp\n        expression_visitor.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Kuzu Node.js API via npm\nDESCRIPTION: Command to install the Kuzu Node.js API package using npm.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i kuzu\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_expression_evaluator Library in CMake\nDESCRIPTION: Creates an object library named kuzu_expression_evaluator that includes various C++ files related to different expression evaluation components. These components handle different types of expressions like case statements, functions, lambdas, literals, patterns, paths, and references.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/expression_evaluator/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_expression_evaluator\n        OBJECT\n        case_evaluator.cpp\n        expression_evaluator.cpp\n        expression_evaluator_utils.cpp\n        expression_evaluator_visitor.cpp\n        function_evaluator.cpp\n        lambda_evaluator.cpp\n        list_slice_info.cpp\n        literal_evaluator.cpp\n        pattern_evaluator.cpp\n        path_evaluator.cpp\n        reference_evaluator.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building Brotli with CMake\nDESCRIPTION: Basic commands to build and install Brotli using CMake. Creates a build directory, configures the project with specified build type and installation path, then builds and installs the targets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir out && cd out\n$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed ..\n$ cmake --build . --config Release --target install\n```\n\n----------------------------------------\n\nTITLE: Creating the kuzu_file_system Library in CMake\nDESCRIPTION: Defines an OBJECT library named kuzu_file_system with file-related source files. The library is linked against the Glob dependency and its objects are added to the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/file_system/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_file_system\n        OBJECT\n        file_info.cpp\n        file_system.cpp\n        local_file_system.cpp\n        virtual_file_system.cpp)\n\ntarget_link_libraries(kuzu_file_system Glob)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_file_system>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Utility Functions Library in CMake\nDESCRIPTION: This CMake snippet creates an object library named 'kuzu_utility_function' with various utility function source files. It includes functions for coalescing, hashing, error handling, and type operations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/utility/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_utility_function\n        OBJECT\n        coalesce.cpp\n        md5.cpp\n        sha256.cpp\n        constant_or_null.cpp\n        count_if.cpp\n        error.cpp\n        nullif.cpp\n        typeof.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectories for Delta Extension\nDESCRIPTION: Adds the required subdirectories for building components of the Delta extension, including connectors, functions, installer, and main application code.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(src/connector)\nadd_subdirectory(src/function)\nadd_subdirectory(src/installer)\nadd_subdirectory(src/main)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings\nDESCRIPTION: Detects the platform (Linux, FreeBSD, macOS) and configures appropriate compiler definitions and settings for each platform. This ensures compatibility across different operating systems.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n  add_definitions(-DOS_LINUX)\nelseif(${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n  add_definitions(-DOS_FREEBSD)\nelseif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n  add_definitions(-DOS_MACOSX)\n  set(CMAKE_MACOS_RPATH TRUE)\n  set(CMAKE_INSTALL_NAME_DIR \"${CMAKE_INSTALL_FULL_LIBDIR}\")\nendif()\n\nif(BROTLI_EMSCRIPTEN)\n  set(BUILD_SHARED_LIBS OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Structure Objects to Parent Scope in CMake\nDESCRIPTION: Adds the compiled objects from the kuzu_storage_structure library to the ALL_OBJECT_FILES variable in the parent scope. This allows the parent CMakeLists.txt to include these objects when building the final target.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/storage_structure/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage_structure>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Kuzu-Wasm via npm\nDESCRIPTION: Command to install Kuzu-Wasm using npm package manager. This adds the Kuzu-Wasm library to your project's dependencies.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i kuzu-wasm\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_processor_mapper Library in CMake\nDESCRIPTION: Configures an OBJECT library named kuzu_processor_mapper with all the source files containing mapping logic for various database operations. The library includes components for operations like joins, aggregations, scans, and other query processing elements.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/map/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_mapper\n        OBJECT\n        create_dummy_sink.cpp\n        create_factorized_table_scan.cpp\n        create_result_collector.cpp\n        expression_mapper.cpp\n        map_acc_hash_join.cpp\n        map_accumulate.cpp\n        map_aggregate.cpp\n        map_standalone_call.cpp\n        map_table_function_call.cpp\n        map_copy_to.cpp\n        map_copy_from.cpp\n        map_insert.cpp\n        map_create_macro.cpp\n        map_cross_product.cpp\n        map_ddl.cpp\n        map_delete.cpp\n        map_distinct.cpp\n        map_explain.cpp\n        map_expressions_scan.cpp\n        map_dummy_scan.cpp\n        map_dummy_sink.cpp\n        map_empty_result.cpp\n        map_extend.cpp\n        map_filter.cpp\n        map_flatten.cpp\n        map_hash_join.cpp\n        map_index_scan_node.cpp\n        map_intersect.cpp\n        map_label_filter.cpp\n        map_limit.cpp\n        map_merge.cpp\n        map_multiplicity_reducer.cpp\n        map_order_by.cpp\n        map_path_property_probe.cpp\n        map_projection.cpp\n        map_recursive_extend.cpp\n        map_scan_node_table.cpp\n        map_semi_masker.cpp\n        map_set.cpp\n        map_simple.cpp\n        map_transaction.cpp\n        map_union.cpp\n        map_unwind.cpp\n        plan_mapper.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring the api_graph_test Library in CMake\nDESCRIPTION: Creates an api_graph_test object library and configures its include directories and dependencies. This test library links against the shared KuzuDB library and Google Test framework.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/graph_test/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(\n        api_graph_test\n        OBJECT\n        base_graph_test.cpp)\n\ntarget_include_directories(\n        api_graph_test\n        PUBLIC\n        ../include/\n)\n\ntarget_link_libraries(api_graph_test PUBLIC GTest::GTest kuzu_shared)\n```\n\n----------------------------------------\n\nTITLE: History Management in Linenoise Shell\nDESCRIPTION: Functions for loading, saving, and managing command history, including special handling for single-line mode where whitespace is normalized.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/shell_development_guide.md#2025-04-17_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nlinenoiseHistoryLoad()\nlinenoiseHistorySave()\nlinenoiseHistoryAdd()\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB FTS Library Target in CMake\nDESCRIPTION: Defines a CMake object library target 'kuzu_fts_function' with various source files for full text search functionality including index creation, querying, and text stemming operations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/src/function/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_fts_function\n        OBJECT\n        create_fts_index.cpp\n        drop_fts_index.cpp\n        fts_config.cpp\n        fts_index_utils.cpp\n        query_fts_index.cpp\n        query_fts_bind_data.cpp\n        stem.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectories\nDESCRIPTION: Includes various project components like connector, storage, main, installer, and function modules.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(src/connector)\nadd_subdirectory(src/storage)\nadd_subdirectory(src/main)\nadd_subdirectory(src/installer)\nadd_subdirectory(src/function)\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Compression Library in CMake\nDESCRIPTION: Creates a new library target for kuzu_storage_compression with multiple source files for compression functionality. Links against fastpfor and libalp dependencies.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/compression/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_storage_compression\n        OBJECT\n        compression.cpp\n        float_compression.cpp\n        bitpacking_int128.cpp\n        bitpacking_utils.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage_compression>\n        PARENT_SCOPE)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(kuzu_storage_compression PRIVATE fastpfor libalp)\n```\n\n----------------------------------------\n\nTITLE: Running Kuzu Java API Tests\nDESCRIPTION: Command to execute the test suite for the Kuzu Java API using Gradle wrapper. This runs all unit and integration tests in the project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/java_api/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test\n```\n\n----------------------------------------\n\nTITLE: Running API Tests for Kuzu-Wasm\nDESCRIPTION: Command to run the API tests for Kuzu-Wasm. This helps ensure the functionality of the WebAssembly module is working as expected.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Defining Kuzu String Function Library in CMake\nDESCRIPTION: This CMake snippet creates an object library named kuzu_string_function, consisting of several string manipulation function source files. It then adds the resulting object files to the parent scope's ALL_OBJECT_FILES variable for further use in the build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/string/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_string_function\n        OBJECT\n        string_split_function.cpp\n        init_cap_function.cpp\n        levenshtein_function.cpp\n        split_part.cpp\n        regex_full_match_function.cpp\n        regex_replace_function.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_string_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Snowball Stemming Library with CMake\nDESCRIPTION: This CMake configuration sets up the Snowball stemming library as a static library. It includes multiple source files for various language-specific stemming algorithms and sets the necessary include directories. The library is named 'snowball' and includes stemming support for numerous languages.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/third_party/snowball/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n\ninclude_directories(libstemmer runtime src_c)\n\nadd_library(\n  snowball\n  STATIC\n  libstemmer/libstemmer.c\n  runtime/utilities.c\n  runtime/api.c\n  src_c/stem_UTF_8_arabic.c\n  src_c/stem_UTF_8_basque.c\n  src_c/stem_UTF_8_catalan.c\n  src_c/stem_UTF_8_danish.c\n  src_c/stem_UTF_8_dutch.c\n  src_c/stem_UTF_8_english.c\n  src_c/stem_UTF_8_finnish.c\n  src_c/stem_UTF_8_french.c\n  src_c/stem_UTF_8_german.c\n  src_c/stem_UTF_8_german2.c\n  src_c/stem_UTF_8_greek.c\n  src_c/stem_UTF_8_hindi.c\n  src_c/stem_UTF_8_hungarian.c\n  src_c/stem_UTF_8_indonesian.c\n  src_c/stem_UTF_8_irish.c\n  src_c/stem_UTF_8_italian.c\n  src_c/stem_UTF_8_kraaij_pohlmann.c\n  src_c/stem_UTF_8_lithuanian.c\n  src_c/stem_UTF_8_lovins.c\n  src_c/stem_UTF_8_nepali.c\n  src_c/stem_UTF_8_norwegian.c\n  src_c/stem_UTF_8_porter.c\n  src_c/stem_UTF_8_portuguese.c\n  src_c/stem_UTF_8_romanian.c\n  src_c/stem_UTF_8_russian.c\n  src_c/stem_UTF_8_serbian.c\n  src_c/stem_UTF_8_spanish.c\n  src_c/stem_UTF_8_swedish.c\n  src_c/stem_UTF_8_tamil.c\n  src_c/stem_UTF_8_turkish.c)\n\ntarget_include_directories(\n  snowball PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Properties in CMake\nDESCRIPTION: Defines a function to set common properties for extension targets, including output directories and naming conventions.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(set_extension_properties target_name output_name extension_name)\n    set_target_properties(${target_name}\n            PROPERTIES\n            ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_SOURCE_DIR}/extension/${extension_name}/build\"\n            LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_SOURCE_DIR}/extension/${extension_name}/build\"\n            RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_SOURCE_DIR}/extension/${extension_name}/build\"\n            OUTPUT_NAME ${output_name}\n            PREFIX \"lib\"\n            SUFFIX \".kuzu_extension\"\n    )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Helper Functions for KuzuDB\nDESCRIPTION: Defines two functions for adding KuzuDB tests: add_kuzu_test for regular tests and add_kuzu_api_test for API tests. These functions set up the necessary dependencies and test discovery.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_kuzu_test TEST_NAME)\n    set(SRCS ${ARGN})\n    add_executable(${TEST_NAME} ${SRCS})\n    target_link_libraries(${TEST_NAME} PRIVATE test_helper test_runner graph_test)\n    if (ENABLE_BACKTRACES)\n        target_link_libraries(${TEST_NAME} PRIVATE register_backtrace_signal_handler)\n    endif()\n    target_include_directories(${TEST_NAME} PRIVATE ${PROJECT_SOURCE_DIR}/test/include)\n    include(GoogleTest)\n\n    if (TEST_NAME STREQUAL \"e2e_test\")\n        gtest_discover_tests(${TEST_NAME}\n            DISCOVERY_TIMEOUT 600\n            DISCOVERY_MODE PRE_TEST\n            TEST_PREFIX e2e_test_\n        )\n    else()\n        gtest_discover_tests(${TEST_NAME}\n            DISCOVERY_TIMEOUT 600\n            DISCOVERY_MODE PRE_TEST\n        )\n    endif()\nendfunction()\n\nfunction(add_kuzu_api_test TEST_NAME)\n    set(SRCS ${ARGN})\n    add_executable(${TEST_NAME} ${SRCS})\n    target_link_libraries(${TEST_NAME} PRIVATE api_graph_test api_test_helper)\n    if (ENABLE_BACKTRACES)\n        target_link_libraries(${TEST_NAME} PRIVATE register_backtrace_signal_handler)\n    endif()\n    target_include_directories(${TEST_NAME} PRIVATE ${PROJECT_SOURCE_DIR}/test/include)\n    include(GoogleTest)\n    gtest_discover_tests(${TEST_NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Kuzu Catalog Library in CMake\nDESCRIPTION: This CMake script sets up the Kuzu catalog library. It adds a subdirectory for catalog entries, defines the kuzu_catalog library as an object library, and updates the list of all object files to include the catalog library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/catalog/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(catalog_entry)\n\nadd_library(kuzu_catalog\n        OBJECT\n        catalog.cpp\n        catalog_set.cpp\n        property_definition_collection.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_catalog>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Apple Dynamic Lookup for Extensions in CMake\nDESCRIPTION: Defines a function to set Apple-specific linking options for dynamic loading of extensions.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(set_apple_dynamic_lookup target_name)\n    set_target_properties(${target_name} PROPERTIES LINK_FLAGS \"-undefined dynamic_lookup\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Hash Join Operator Library in CMake\nDESCRIPTION: Creates a CMake object library named 'kuzu_processor_operator_hash_join' that includes hash join build, probe, and table implementation files. The object files are then added to a parent scope variable for inclusion in the main build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/hash_join/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_hash_join\n        OBJECT\n        hash_join_build.cpp\n        hash_join_probe.cpp\n        join_hash_table.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Tests in CMake\nDESCRIPTION: Conditionally adds the test subdirectory if the BUILD_EXTENSION_TESTS flag is enabled, allowing for optional compilation of tests for the HTTP filesystem extension.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/httpfs/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (${BUILD_EXTENSION_TESTS})\n    add_subdirectory(test)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB Processor Operator Scan Library in CMake\nDESCRIPTION: Defines an object library named 'kuzu_processor_operator_scan' with source files related to scanning operations. This library is part of the KuzuDB project and includes various scan-related implementations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/scan/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_scan\n        OBJECT\n        primary_key_scan_node_table.cpp\n        scan_multi_rel_tables.cpp\n        scan_node_table.cpp\n        scan_rel_table.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding CPP Examples to CMake Build\nDESCRIPTION: CMake configuration snippet showing how to include the C++ examples directory in the build process using add_subdirectory command.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/examples/README.md#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(examples/cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Kuzu WebAssembly Example\nDESCRIPTION: This command installs the necessary dependencies for the Kuzu WebAssembly example using npm (Node Package Manager).\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/examples/browser_persistent/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Packaging Native Library into JAR for Kuzu Java API\nDESCRIPTION: Creates a custom command to package the native library into the JAR file after building.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/java_api/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(OUTPUT dummy_jar_target\n    DEPENDS kuzu_java_native kuzu_java\n    COMMAND ${Java_JAR_EXECUTABLE} uf ${_jarFile} -C\n            $<TARGET_FILE_DIR:kuzu_java_native> $<TARGET_FILE_NAME:kuzu_java_native>)\n\nadd_custom_target(kuzu_java_api ALL DEPENDS dummy_jar_target)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for KuzuDB Binder Components\nDESCRIPTION: Adds various subdirectories to the build process, including bind, expression, query, and others. This ensures all necessary components are included in the build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(bind)\nadd_subdirectory(bind_expression)\nadd_subdirectory(ddl)\nadd_subdirectory(expression)\nadd_subdirectory(query)\nadd_subdirectory(rewriter)\nadd_subdirectory(visitor)\n```\n\n----------------------------------------\n\nTITLE: Exposing Brotli Variables to Parent Projects\nDESCRIPTION: Sets up variables for parent projects to easily integrate with Brotli. This allows including Brotli in other projects with simple include and linking commands.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# For projects stuck on older versions of CMake, this will set the\n# BROTLI_INCLUDE_DIRS and BROTLI_LIBRARIES variables so they still\n# have a relatively easy way to use Brotli:\n#\n#   include_directories(${BROTLI_INCLUDE_DIRS})\n#   target_link_libraries(foo ${BROTLI_LIBRARIES})\nif(BROTLI_PARENT_DIRECTORY)\n  set(BROTLI_INCLUDE_DIRS \"${BROTLI_INCLUDE_DIRS}\" PARENT_SCOPE)\n  set(BROTLI_LIBRARIES \"${BROTLI_LIBRARIES}\" PARENT_SCOPE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Vector Extension Library in CMake for KuzuDB\nDESCRIPTION: This snippet builds a vector extension library for KuzuDB. It uses a custom CMake function 'build_extension_lib' to create the library, with the build type (static or dynamic) determined by the BUILD_STATIC_EXTENSION variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/vector/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"vector\")\n```\n\n----------------------------------------\n\nTITLE: Building Iceberg Extension Library\nDESCRIPTION: Creates the Iceberg extension library using a custom build function. The static/dynamic nature is determined by the BUILD_STATIC_EXTENSION parameter.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"iceberg\")\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Component Subdirectories\nDESCRIPTION: Adds all the necessary KuzuDB component subdirectories to the build, including catalog, connector, main, function, storage, installer, and loader modules.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(src/catalog)\nadd_subdirectory(src/connector)\nadd_subdirectory(src/main)\nadd_subdirectory(src/function)\nadd_subdirectory(src/storage)\nadd_subdirectory(src/installer)\nadd_subdirectory(src/loader)\n```\n\n----------------------------------------\n\nTITLE: KuzuDB Source Header Files Directory Structure\nDESCRIPTION: Sorted listing of header file paths relative to the repository root, organized in the src/include directory structure. Includes core components like binder, common utilities, functions, main database components, parser, planner, processor, storage, and transaction management.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/scripts/headers.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/include/binder/expression/expression.h\nsrc/include/common/api.h\nsrc/include/common/array_utils.h\nsrc/include/common/arrow/arrow.h\nsrc/include/common/assert.h\nsrc/include/common/case_insensitive_map.h\nsrc/include/common/cast.h\nsrc/include/common/constants.h\nsrc/include/common/copier_config/csv_reader_config.h\nsrc/include/common/copier_config/file_scan_info.h\nsrc/include/common/copy_constructors.h\nsrc/include/common/data_chunk/data_chunk.h\nsrc/include/common/data_chunk/data_chunk_state.h\nsrc/include/common/data_chunk/sel_vector.h\nsrc/include/common/enums/expression_type.h\nsrc/include/common/enums/path_semantic.h\nsrc/include/common/enums/statement_type.h\nsrc/include/common/exception/binder.h\nsrc/include/common/exception/catalog.h\nsrc/include/common/exception/exception.h\nsrc/include/common/exception/internal.h\nsrc/include/common/in_mem_overflow_buffer.h\nsrc/include/common/mask.h\nsrc/include/common/null_mask.h\nsrc/include/common/string_format.h\nsrc/include/common/timer.h\nsrc/include/common/type_utils.h\nsrc/include/common/types/blob.h\nsrc/include/common/types/date_t.h\nsrc/include/common/types/dtime_t.h\nsrc/include/common/types/int128_t.h\nsrc/include/common/types/interval_t.h\nsrc/include/common/types/ku_list.h\nsrc/include/common/types/ku_string.h\nsrc/include/common/types/timestamp_t.h\nsrc/include/common/types/types.h\nsrc/include/common/types/uuid.h\nsrc/include/common/types/value/nested.h\nsrc/include/common/types/value/node.h\nsrc/include/common/types/value/recursive_rel.h\nsrc/include/common/types/value/rel.h\nsrc/include/common/types/value/value.h\nsrc/include/common/vector/auxiliary_buffer.h\nsrc/include/common/vector/value_vector.h\nsrc/include/function/binary_function_executor.h\nsrc/include/function/cast/cast_function_bind_data.h\nsrc/include/function/const_function_executor.h\nsrc/include/function/function.h\nsrc/include/function/pointer_function_executor.h\nsrc/include/function/scalar_function.h\nsrc/include/function/table/bind_input.h\nsrc/include/function/table/scan_replacement.h\nsrc/include/function/ternary_function_executor.h\nsrc/include/function/udf_function.h\nsrc/include/function/unary_function_executor.h\nsrc/include/function/table/table_function.h\nsrc/include/main/client_config.h\nsrc/include/main/client_context.h\nsrc/include/main/connection.h\nsrc/include/main/database.h\nsrc/include/main/db_config.h\nsrc/include/main/kuzu.h\nsrc/include/main/kuzu_fwd.h\nsrc/include/main/prepared_statement.h\nsrc/include/main/query_result.h\nsrc/include/main/query_summary.h\nsrc/include/main/storage_driver.h\nsrc/include/main/version.h\nsrc/include/parser/statement.h\nsrc/include/parser/query/reading_clause/yield_variable.h\nsrc/include/planner/operator/operator_print_info.h\nsrc/include/processor/data_pos.h\nsrc/include/processor/operator/physical_operator.h\nsrc/include/processor/operator/persistent/reader/copy_from_error.h\nsrc/include/processor/result/result_set.h\nsrc/include/processor/result/result_set_descriptor.h\nsrc/include/processor/result/flat_tuple.h\nsrc/include/processor/warning_context.h\nsrc/include/storage/storage_version_info.h\nsrc/include/transaction/transaction.h\nsrc/include/transaction/transaction_context.h\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring the Kuzu Iceberg Connector Library in CMake\nDESCRIPTION: Creates an OBJECT library named kuzu_iceberg_connector with source files from both the project's DuckDB extension directory and local iceberg_connector.cpp. Then sets the DELTA_EXTENSION_OBJECT_FILES variable in the parent scope to include the compiled objects from this library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/src/connector/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_iceberg_connector\n        OBJECT\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_secret_manager.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_connector.cpp\n        iceberg_connector.cpp)\n\nset(DELTA_EXTENSION_OBJECT_FILES\n        ${DELTA_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_iceberg_connector>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB Shell Printer Library\nDESCRIPTION: Defines an object library for the shell printer component, including JSON-related source files.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/printer/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_shell_printer\n        OBJECT\n        json_printer.cpp\n        printer_factory.cpp\n        ${PROJECT_SOURCE_DIR}/extension/json/src/utils/json_utils.cpp\n        ${PROJECT_SOURCE_DIR}/extension/json/src/type/json_type.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_optimizer Library in CMake\nDESCRIPTION: Configures the kuzu_optimizer object library target by specifying its source files. These files implement various query optimization strategies such as hash join optimization, filter push down, projection push down, and other query transformation techniques.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/optimizer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_optimizer\n        OBJECT\n        acc_hash_join_optimizer.cpp\n        agg_key_dependency_optimizer.cpp\n        cardinality_updater.cpp\n        correlated_subquery_unnest_solver.cpp\n        factorization_rewriter.cpp\n        filter_push_down_optimizer.cpp\n        logical_operator_collector.cpp\n        logical_operator_visitor.cpp\n        optimizer.cpp\n        projection_push_down_optimizer.cpp\n        schema_populator.cpp\n        remove_factorization_rewriter.cpp\n        remove_unnecessary_join_optimizer.cpp\n        top_k_optimizer.cpp\n        limit_push_down_optimizer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Extension Library\nDESCRIPTION: Links the PostgreSQL extension with DuckDB libraries and handles platform-specific loader configuration for non-Windows systems.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"postgres\")\n\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        ${DuckDB_LIBRARIES})\n\nif (NOT WIN32 AND NOT BUILD_STATIC_EXTENSION)\n    add_library(postgres_loader\n            SHARED\n            ${PROJECT_SOURCE_DIR}/extension/duckdb/src/loader/duckdb_loader.cpp)\n    set_extension_properties(postgres_loader postgres_loader postgres)\nendif ()\n\nif (APPLE AND NOT BUILD_STATIC_EXTENSION)\n    set_apple_dynamic_lookup(postgres_loader)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building KuzuDB SQLite Storage Extension in CMake\nDESCRIPTION: Creates a CMake object library named 'kuzu_sqlite_storage' with SQLite storage implementation files and DuckDB extension files. The library includes the main SQLite storage implementation and several DuckDB-related source files for catalog and function operations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/src/storage/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_sqlite_storage\n        OBJECT\n        sqlite_storage.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/catalog/duckdb_catalog.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/function/duckdb_scan.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/catalog/duckdb_table_catalog_entry.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/function/clear_cache.cpp)\n```\n\n----------------------------------------\n\nTITLE: KuzuDB SQL Keywords List\nDESCRIPTION: Complete list of reserved keywords used in KuzuDB SQL dialect, including database operations, logical operators, and query control statements.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/antlr4/keywords.txt#2025-04-17_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nACYCLIC\nANY\nADD\nALL\nALTER\nAND\nAS\nASC\nASCENDING\nATTACH\nBEGIN\nBY\nCALL\nCASE\nCAST\nCHECKPOINT\nCOLUMN\nCOMMENT\nCOMMIT\nCOMMIT_SKIP_CHECKPOINT\nCONTAINS\nCOPY\nCOUNT\nCREATE\nCYCLE\nDATABASE\nDBTYPE\nDEFAULT\nDELETE\nDESC\nDESCENDING\nDETACH\nDISTINCT\nDROP\nELSE\nEND\nENDS\nEXISTS\nEXPLAIN\nEXPORT\nEXTENSION\nFALSE\nFROM\nGLOB\nGRAPH\nGROUP\nHEADERS\nHINT\nIMPORT\nIF\nIN\nINCREMENT\nINSTALL\nIS\nJOIN\nKEY\nLIMIT\nLOAD\nLOGICAL\nMACRO\nMATCH\nMAXVALUE\nMERGE\nMINVALUE\nMULTI_JOIN\nNO\nNODE\nNOT\nNONE\nNULL\nON\nONLY\nOPTIONAL\nOR\nORDER\nPRIMARY\nPROFILE\nPROJECT\nREAD\nREL\nRENAME\nRETURN\nROLLBACK\nROLLBACK_SKIP_CHECKPOINT\nSEQUENCE\nSET\nSHORTEST\nSTART\nSTARTS\nTABLE\nTHEN\nTO\nTRAIL\nTRANSACTION\nTRUE\nTYPE\nUNION\nUNWIND\nUSE\nWHEN\nWHERE\nWITH\nWRITE\nWSHORTEST\nXOR\nSINGLE\nYIELD\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Kuzu WebAssembly Module\nDESCRIPTION: This command runs the bootstrap process, which copies the WebAssembly module to the appropriate location for the example.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/examples/browser_persistent/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run bootstrap\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Binder Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_binder_bind' with various source files related to database operations such as attaching, creating, explaining, and binding different clauses and functions.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(\n        kuzu_binder_bind\n        OBJECT\n        bind_attach_database.cpp\n        bind_create_macro.cpp\n        bind_ddl.cpp\n        bind_detach_database.cpp\n        bind_explain.cpp\n        bind_file_scan.cpp\n        bind_graph_pattern.cpp\n        bind_projection_clause.cpp\n        bind_query.cpp\n        bind_reading_clause.cpp\n        bind_standalone_call.cpp\n        bind_table_function.cpp\n        bind_transaction.cpp\n        bind_updating_clause.cpp\n        bind_extension.cpp\n        bind_export_database.cpp\n        bind_import_database.cpp\n        bind_use_database.cpp\n        bind_standalone_call_function.cpp\n        bind_table_function.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Static Library Usage in CMake\nDESCRIPTION: Determines whether to use static or dynamic DuckDB libraries based on platform and build configuration. On Windows or when building a static extension, static libraries are used.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32 OR BUILD_STATIC_EXTENSION)\n    set(DuckDB_USE_STATIC_LIBS ON)\nelse ()\n    set(DuckDB_USE_STATIC_LIBS OFF)\nendif ()\nfind_package(DuckDB REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Serializer Library in CMake\nDESCRIPTION: Creates an object library for KuzuDB's serialization components and adds the compiled objects to a parent variable. The library contains serializer, deserializer, and buffered file operation implementations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/serializer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_common_serializer\n        OBJECT\n        serializer.cpp\n        deserializer.cpp\n        buffered_file.cpp\n        buffered_serializer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unity Catalog Connector Library\nDESCRIPTION: Creates an OBJECT library named kuzu_unity_catalog_connector that includes the main connector file and DuckDB connector components. Defines source files for compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/src/connector/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_unity_catalog_connector\n        OBJECT\n        unity_catalog_connector.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_connector.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_result_converter.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer Manager Library in CMake for KuzuDB\nDESCRIPTION: This CMake snippet defines the kuzu_storage_buffer_manager library as an OBJECT library, specifying its source files. It then updates the ALL_OBJECT_FILES variable in the parent scope to include the compiled objects from this library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/buffer_manager/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_storage_buffer_manager\n        OBJECT\n        vm_region.cpp\n        buffer_manager.cpp\n        memory_manager.cpp\n        spiller.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage_buffer_manager>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Local Storage Library in CMake\nDESCRIPTION: Defines an object library for KuzuDB's local storage component and adds its source files. Also adds the compiled objects to a parent scope variable for further use in the build system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/local_storage/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_storage_local_storage\n        OBJECT\n        local_node_table.cpp\n        local_rel_table.cpp\n        local_storage.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage_local_storage>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpFS Extension in CMake\nDESCRIPTION: Adds special configuration for the HttpFS extension when it's statically linked. This includes enabling OpenSSL support in httplib and adding OpenSSL include directories.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/extension/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Both the kuzu source and httpfs extension includes the httplib which is a header\n# only library. Httpfs requires the openssl function to be enabled in httplib, so\n# we also have to enable httplib there if httpfs is static linked.\nif(\"httpfs\" IN_LIST STATICALLY_LINKED_EXTENSIONS)\n    add_compile_definitions(CPPHTTPLIB_OPENSSL_SUPPORT)\n    include_directories(${OPENSSL_INCLUDE_DIR})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Loader for Non-Windows Platforms in CMake\nDESCRIPTION: Creates a shared library for the SQLite loader on non-Windows platforms when not building a static extension. Sets extension properties for the loader.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT WIN32 AND NOT BUILD_STATIC_EXTENSION)\n    add_library(sqlite_loader\n            SHARED\n            ${PROJECT_SOURCE_DIR}/extension/duckdb/src/loader/duckdb_loader.cpp)\n    set_extension_properties(sqlite_loader sqlite_loader sqlite)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for KuzuDB Rust Bindings\nDESCRIPTION: Defines a static library target kuzu_rs using C++ and Rust binding source files.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/rust_api/src/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_rs STATIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/kuzu_rs.cpp\n    ${KUZU_RS_BINDINGS_DIR}/sources/kuzu/src/lib.rs.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_binder_query Library in CMake\nDESCRIPTION: Creates an OBJECT library called kuzu_binder_query with various query-related source files. This library includes bound clause implementations for database operations and query graph functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/query/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        kuzu_binder_query\n        OBJECT\n        bound_insert_clause.cpp\n        bound_delete_clause.cpp\n        bound_merge_clause.cpp\n        bound_set_clause.cpp\n        query_graph.cpp\n        query_graph_label_analyzer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_storage_structure Object Library in CMake\nDESCRIPTION: Defines an object library for KuzuDB storage structure components including disk array, disk array collection, and overflow file implementations. Object libraries in CMake are used to compile source files without linking them into a final library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/storage_structure/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_storage_structure\n        OBJECT\n        disk_array.cpp\n        disk_array_collection.cpp\n        overflow_file.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories and Library References\nDESCRIPTION: Defines the include paths and library references needed to build and link with Brotli. These variables can be used by parent projects to easily integrate with Brotli.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(BROTLI_INCLUDE_DIRS \"${CMAKE_CURRENT_SOURCE_DIR}/c/include\")\nmark_as_advanced(BROTLI_INCLUDE_DIRS)\n\nset(BROTLI_LIBRARIES_CORE brotlienc brotlidec brotlicommon)\nset(BROTLI_LIBRARIES ${BROTLI_LIBRARIES_CORE} ${LIBM_LIBRARY})\nmark_as_advanced(BROTLI_LIBRARIES)\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Function Map Library in CMake\nDESCRIPTION: Creates an object library named kuzu_function_map containing map-related function implementations. Includes source files for map creation, extraction, keys, and values operations. Also adds the generated object files to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/map/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_function_map\n        OBJECT\n        map_creation_function.cpp\n        map_extract_function.cpp\n        map_keys_function.cpp\n        map_values_function.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_map>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake and C++ Standards for Kuzu Java API\nDESCRIPTION: Sets up CMake configuration, C++ standard, and project name for the Kuzu Java API build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/java_api/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS TRUE)\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nproject (kuzu_java_api)\n```\n\n----------------------------------------\n\nTITLE: Running Kuzu WebAssembly Example\nDESCRIPTION: Command to start the Kuzu WebAssembly example application in Node.js.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/examples/nodejs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library for Neo4j Migration Extension in CMake\nDESCRIPTION: Creates an object library named 'neo4j_migration_extension_main' from the neo4j_migration_extension.cpp source file. The object library pattern in CMake allows the compiled objects to be included in other targets without being compiled again.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/neo4j_migration/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(neo4j_migration_extension_main\n        OBJECT\n        neo4j_migration_extension.cpp)\n```\n\n----------------------------------------\n\nTITLE: Coalescing Brotli Short Form Options in Shell\nDESCRIPTION: Illustrates how multiple short form options can be combined in the brotli command. This example shows different ways to specify the same set of options: decompress, stdout, and custom suffix.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/c/tools/brotli.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"--decompress --stdout --suffix=.b\" works the same as\n\"-d -s -S .b\" and\n\"-dsS .b\"\n```\n\n----------------------------------------\n\nTITLE: Starting Web Server for Kuzu WebAssembly Example\nDESCRIPTION: This command starts a local web server to host the Kuzu WebAssembly example, making it accessible through a web browser.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/examples/browser_in_memory/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Defining Unity Catalog Storage Library in CMake\nDESCRIPTION: Configures an object library named kuzu_unity_catalog_storage with the necessary source files from both the current directory and the DuckDB extension directories.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/src/storage/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_unity_catalog_storage\n        OBJECT\n        unity_catalog_storage.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/catalog/duckdb_catalog.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/function/duckdb_scan.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/function/clear_cache.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_type_converter.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/catalog/duckdb_table_catalog_entry.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing KuzuDB from Source with pip\nDESCRIPTION: Commands to package and install KuzuDB from source code. This process requires having the build prerequisites installed: CMake (>=3.11), Python 3, and a C++20-compatible compiler. The installation works on both Linux and macOS systems.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/scripts/pip-package/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x package_tar.py\n./package_tar.py\npip install kuzu.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Store Library Components in CMake\nDESCRIPTION: This CMake snippet defines an OBJECT library named 'kuzu_storage_store' consisting of various C++ source files related to database storage operations. It includes implementations for columns, node groups, tables, and other storage components.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/store/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_storage_store\n        OBJECT\n        chunked_node_group.cpp\n        column.cpp\n        column_chunk.cpp\n        column_chunk_data.cpp\n        column_chunk_stats.cpp\n        csr_chunked_node_group.cpp\n        csr_node_group.cpp\n        column_reader_writer.cpp\n        column_chunk_data.cpp\n        column_chunk_metadata.cpp\n        compression_flush_buffer.cpp\n        dictionary_chunk.cpp\n        dictionary_column.cpp\n        in_mem_chunked_node_group_collection.cpp\n        in_memory_exception_chunk.cpp\n        list_chunk_data.cpp\n        list_column.cpp\n        node_group.cpp\n        node_group_collection.cpp\n        node_table.cpp\n        null_column.cpp\n        rel_table.cpp\n        rel_table_data.cpp\n        string_chunk_data.cpp\n        string_column.cpp\n        struct_chunk_data.cpp\n        struct_column.cpp\n        table.cpp\n        update_info.cpp\n        version_info.cpp\n        version_record_handler.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Iceberg Functions Library in CMake\nDESCRIPTION: Defines a CMake object library called 'kuzu_iceberg_functions' with all necessary source files for Iceberg integration. It includes local Iceberg implementation files and external connector components from DuckDB and Delta extensions. The configured object files are then made available to the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/src/function/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_iceberg_functions\n        OBJECT\n        iceberg_bindfunc.cpp\n        iceberg_scan.cpp\n        iceberg_metadata.cpp\n        iceberg_snapshots.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_type_converter.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_result_converter.cpp\n        ${PROJECT_SOURCE_DIR}/extension/delta/src/function/delta_scan.cpp\n        ${PROJECT_SOURCE_DIR}/extension/iceberg/src/connector/iceberg_connector.cpp\n)\n\nset(ICEBERG_EXTENSION_OBJECT_FILES\n        ${ICEBERG_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_iceberg_functions>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Library Dependencies in CMake\nDESCRIPTION: Sets up DuckDB library dependencies based on platform conditions. For Windows or static extension builds, it uses static libraries; otherwise, it uses dynamic libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32 OR BUILD_STATIC_EXTENSION)\n    set(DuckDB_USE_STATIC_LIBS ON)\nelse ()\n    set(DuckDB_USE_STATIC_LIBS OFF)\nendif ()\nfind_package(DuckDB REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Dependencies for KuzuDB in Python\nDESCRIPTION: This snippet lists the Python packages required for running tests in the KuzuDB project. It includes data manipulation libraries, machine learning frameworks, and testing tools with specific version requirements.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/python_api/requirements_dev.txt#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# required for tests\nnetworkx~=3.0\nnumpy~=1.26\npandas\npolars~=0.20\npyarrow>=15\npybind11>=2.6.0\npytest\ntorch\ntorch-geometric~=2.3.0\nsetuptools~=70.0\npytest-asyncio~=0.25\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Extension Library in CMake\nDESCRIPTION: Creates a library target for the JSON extension and sets up the object files for parent scope compilation. Adds json_extension.cpp as the source file and configures object files for linking.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_json_main\n        OBJECT\n        json_extension.cpp)\n\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Filesystem Extension Source Files in CMake\nDESCRIPTION: Creates an object library for the HTTP filesystem extension source files, including implementation files for HTTP and S3 filesystem functionality, crypto utilities, and configuration handlers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/httpfs/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(httpfs_extension_source\n        OBJECT\n        src/httpfs.cpp\n        src/httpfs_extension.cpp\n        src/s3fs.cpp\n        src/crypto.cpp\n        src/http_config.cpp\n        src/cached_file_manager.cpp\n        src/s3fs_config.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Column Schema for KuzuDB Table with Multiple INT64 Columns\nDESCRIPTION: A structured schema definition for a KuzuDB table consisting of 365 columns, all with INT64 data type. Column 'col1' is marked as the primary key (True), while all others are non-primary key columns (False). Each line represents a column with its index, name, data type, null constraint, and primary key status.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/function_table_info_answer.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0|col1|INT64|NULL|True\n1|col2|INT64|NULL|False\n2|col3|INT64|NULL|False\n3|col4|INT64|NULL|False\n4|col5|INT64|NULL|False\n5|col6|INT64|NULL|False\n6|col7|INT64|NULL|False\n7|col8|INT64|NULL|False\n8|col9|INT64|NULL|False\n9|col10|INT64|NULL|False\n10|col11|INT64|NULL|False\n11|col12|INT64|NULL|False\n12|col13|INT64|NULL|False\n13|col14|INT64|NULL|False\n14|col15|INT64|NULL|False\n15|col16|INT64|NULL|False\n16|col17|INT64|NULL|False\n17|col18|INT64|NULL|False\n18|col19|INT64|NULL|False\n19|col20|INT64|NULL|False\n20|col21|INT64|NULL|False\n21|col22|INT64|NULL|False\n22|col23|INT64|NULL|False\n23|col24|INT64|NULL|False\n24|col25|INT64|NULL|False\n25|col26|INT64|NULL|False\n26|col27|INT64|NULL|False\n27|col28|INT64|NULL|False\n28|col29|INT64|NULL|False\n29|col30|INT64|NULL|False\n30|col31|INT64|NULL|False\n31|col32|INT64|NULL|False\n32|col33|INT64|NULL|False\n33|col34|INT64|NULL|False\n34|col35|INT64|NULL|False\n35|col36|INT64|NULL|False\n36|col37|INT64|NULL|False\n37|col38|INT64|NULL|False\n38|col39|INT64|NULL|False\n39|col40|INT64|NULL|False\n40|col41|INT64|NULL|False\n41|col42|INT64|NULL|False\n42|col43|INT64|NULL|False\n43|col44|INT64|NULL|False\n44|col45|INT64|NULL|False\n45|col46|INT64|NULL|False\n46|col47|INT64|NULL|False\n47|col48|INT64|NULL|False\n48|col49|INT64|NULL|False\n49|col50|INT64|NULL|False\n50|col51|INT64|NULL|False\n51|col52|INT64|NULL|False\n52|col53|INT64|NULL|False\n53|col54|INT64|NULL|False\n54|col55|INT64|NULL|False\n55|col56|INT64|NULL|False\n56|col57|INT64|NULL|False\n57|col58|INT64|NULL|False\n58|col59|INT64|NULL|False\n59|col60|INT64|NULL|False\n60|col61|INT64|NULL|False\n61|col62|INT64|NULL|False\n62|col63|INT64|NULL|False\n63|col64|INT64|NULL|False\n64|col65|INT64|NULL|False\n65|col66|INT64|NULL|False\n66|col67|INT64|NULL|False\n67|col68|INT64|NULL|False\n68|col69|INT64|NULL|False\n69|col70|INT64|NULL|False\n70|col71|INT64|NULL|False\n71|col72|INT64|NULL|False\n72|col73|INT64|NULL|False\n73|col74|INT64|NULL|False\n74|col75|INT64|NULL|False\n75|col76|INT64|NULL|False\n76|col77|INT64|NULL|False\n77|col78|INT64|NULL|False\n78|col79|INT64|NULL|False\n79|col80|INT64|NULL|False\n80|col81|INT64|NULL|False\n81|col82|INT64|NULL|False\n82|col83|INT64|NULL|False\n83|col84|INT64|NULL|False\n84|col85|INT64|NULL|False\n85|col86|INT64|NULL|False\n86|col87|INT64|NULL|False\n87|col88|INT64|NULL|False\n88|col89|INT64|NULL|False\n89|col90|INT64|NULL|False\n90|col91|INT64|NULL|False\n91|col92|INT64|NULL|False\n92|col93|INT64|NULL|False\n93|col94|INT64|NULL|False\n94|col95|INT64|NULL|False\n95|col96|INT64|NULL|False\n96|col97|INT64|NULL|False\n97|col98|INT64|NULL|False\n98|col99|INT64|NULL|False\n99|col100|INT64|NULL|False\n100|col101|INT64|NULL|False\n101|col102|INT64|NULL|False\n102|col103|INT64|NULL|False\n103|col104|INT64|NULL|False\n104|col105|INT64|NULL|False\n105|col106|INT64|NULL|False\n106|col107|INT64|NULL|False\n107|col108|INT64|NULL|False\n108|col109|INT64|NULL|False\n109|col110|INT64|NULL|False\n110|col111|INT64|NULL|False\n111|col112|INT64|NULL|False\n112|col113|INT64|NULL|False\n113|col114|INT64|NULL|False\n114|col115|INT64|NULL|False\n115|col116|INT64|NULL|False\n116|col117|INT64|NULL|False\n117|col118|INT64|NULL|False\n118|col119|INT64|NULL|False\n119|col120|INT64|NULL|False\n120|col121|INT64|NULL|False\n121|col122|INT64|NULL|False\n122|col123|INT64|NULL|False\n123|col124|INT64|NULL|False\n124|col125|INT64|NULL|False\n125|col126|INT64|NULL|False\n126|col127|INT64|NULL|False\n127|col128|INT64|NULL|False\n128|col129|INT64|NULL|False\n129|col130|INT64|NULL|False\n130|col131|INT64|NULL|False\n131|col132|INT64|NULL|False\n132|col133|INT64|NULL|False\n133|col134|INT64|NULL|False\n134|col135|INT64|NULL|False\n135|col136|INT64|NULL|False\n136|col137|INT64|NULL|False\n137|col138|INT64|NULL|False\n138|col139|INT64|NULL|False\n139|col140|INT64|NULL|False\n140|col141|INT64|NULL|False\n141|col142|INT64|NULL|False\n142|col143|INT64|NULL|False\n143|col144|INT64|NULL|False\n144|col145|INT64|NULL|False\n145|col146|INT64|NULL|False\n146|col147|INT64|NULL|False\n147|col148|INT64|NULL|False\n148|col149|INT64|NULL|False\n149|col150|INT64|NULL|False\n150|col151|INT64|NULL|False\n151|col152|INT64|NULL|False\n152|col153|INT64|NULL|False\n153|col154|INT64|NULL|False\n154|col155|INT64|NULL|False\n155|col156|INT64|NULL|False\n156|col157|INT64|NULL|False\n157|col158|INT64|NULL|False\n158|col159|INT64|NULL|False\n159|col160|INT64|NULL|False\n160|col161|INT64|NULL|False\n161|col162|INT64|NULL|False\n162|col163|INT64|NULL|False\n163|col164|INT64|NULL|False\n164|col165|INT64|NULL|False\n165|col166|INT64|NULL|False\n166|col167|INT64|NULL|False\n167|col168|INT64|NULL|False\n168|col169|INT64|NULL|False\n169|col170|INT64|NULL|False\n170|col171|INT64|NULL|False\n171|col172|INT64|NULL|False\n172|col173|INT64|NULL|False\n173|col174|INT64|NULL|False\n174|col175|INT64|NULL|False\n175|col176|INT64|NULL|False\n176|col177|INT64|NULL|False\n177|col178|INT64|NULL|False\n178|col179|INT64|NULL|False\n179|col180|INT64|NULL|False\n180|col181|INT64|NULL|False\n181|col182|INT64|NULL|False\n182|col183|INT64|NULL|False\n183|col184|INT64|NULL|False\n184|col185|INT64|NULL|False\n185|col186|INT64|NULL|False\n186|col187|INT64|NULL|False\n187|col188|INT64|NULL|False\n188|col189|INT64|NULL|False\n189|col190|INT64|NULL|False\n190|col191|INT64|NULL|False\n191|col192|INT64|NULL|False\n192|col193|INT64|NULL|False\n193|col194|INT64|NULL|False\n194|col195|INT64|NULL|False\n195|col196|INT64|NULL|False\n196|col197|INT64|NULL|False\n197|col198|INT64|NULL|False\n198|col199|INT64|NULL|False\n199|col200|INT64|NULL|False\n200|col201|INT64|NULL|False\n201|col202|INT64|NULL|False\n202|col203|INT64|NULL|False\n203|col204|INT64|NULL|False\n204|col205|INT64|NULL|False\n205|col206|INT64|NULL|False\n206|col207|INT64|NULL|False\n207|col208|INT64|NULL|False\n208|col209|INT64|NULL|False\n209|col210|INT64|NULL|False\n210|col211|INT64|NULL|False\n211|col212|INT64|NULL|False\n212|col213|INT64|NULL|False\n213|col214|INT64|NULL|False\n214|col215|INT64|NULL|False\n215|col216|INT64|NULL|False\n216|col217|INT64|NULL|False\n217|col218|INT64|NULL|False\n218|col219|INT64|NULL|False\n219|col220|INT64|NULL|False\n220|col221|INT64|NULL|False\n221|col222|INT64|NULL|False\n222|col223|INT64|NULL|False\n223|col224|INT64|NULL|False\n224|col225|INT64|NULL|False\n225|col226|INT64|NULL|False\n226|col227|INT64|NULL|False\n227|col228|INT64|NULL|False\n228|col229|INT64|NULL|False\n229|col230|INT64|NULL|False\n230|col231|INT64|NULL|False\n231|col232|INT64|NULL|False\n232|col233|INT64|NULL|False\n233|col234|INT64|NULL|False\n234|col235|INT64|NULL|False\n235|col236|INT64|NULL|False\n236|col237|INT64|NULL|False\n237|col238|INT64|NULL|False\n238|col239|INT64|NULL|False\n239|col240|INT64|NULL|False\n240|col241|INT64|NULL|False\n241|col242|INT64|NULL|False\n242|col243|INT64|NULL|False\n243|col244|INT64|NULL|False\n244|col245|INT64|NULL|False\n245|col246|INT64|NULL|False\n246|col247|INT64|NULL|False\n247|col248|INT64|NULL|False\n248|col249|INT64|NULL|False\n249|col250|INT64|NULL|False\n250|col251|INT64|NULL|False\n251|col252|INT64|NULL|False\n252|col253|INT64|NULL|False\n253|col254|INT64|NULL|False\n254|col255|INT64|NULL|False\n255|col256|INT64|NULL|False\n256|col257|INT64|NULL|False\n257|col258|INT64|NULL|False\n258|col259|INT64|NULL|False\n259|col260|INT64|NULL|False\n260|col261|INT64|NULL|False\n261|col262|INT64|NULL|False\n262|col263|INT64|NULL|False\n263|col264|INT64|NULL|False\n264|col265|INT64|NULL|False\n265|col266|INT64|NULL|False\n266|col267|INT64|NULL|False\n267|col268|INT64|NULL|False\n268|col269|INT64|NULL|False\n269|col270|INT64|NULL|False\n270|col271|INT64|NULL|False\n271|col272|INT64|NULL|False\n272|col273|INT64|NULL|False\n273|col274|INT64|NULL|False\n274|col275|INT64|NULL|False\n275|col276|INT64|NULL|False\n276|col277|INT64|NULL|False\n277|col278|INT64|NULL|False\n278|col279|INT64|NULL|False\n279|col280|INT64|NULL|False\n280|col281|INT64|NULL|False\n281|col282|INT64|NULL|False\n282|col283|INT64|NULL|False\n283|col284|INT64|NULL|False\n284|col285|INT64|NULL|False\n285|col286|INT64|NULL|False\n286|col287|INT64|NULL|False\n287|col288|INT64|NULL|False\n288|col289|INT64|NULL|False\n289|col290|INT64|NULL|False\n290|col291|INT64|NULL|False\n291|col292|INT64|NULL|False\n292|col293|INT64|NULL|False\n293|col294|INT64|NULL|False\n294|col295|INT64|NULL|False\n295|col296|INT64|NULL|False\n296|col297|INT64|NULL|False\n297|col298|INT64|NULL|False\n298|col299|INT64|NULL|False\n299|col300|INT64|NULL|False\n300|col301|INT64|NULL|False\n301|col302|INT64|NULL|False\n302|col303|INT64|NULL|False\n303|col304|INT64|NULL|False\n304|col305|INT64|NULL|False\n305|col306|INT64|NULL|False\n306|col307|INT64|NULL|False\n307|col308|INT64|NULL|False\n308|col309|INT64|NULL|False\n309|col310|INT64|NULL|False\n310|col311|INT64|NULL|False\n311|col312|INT64|NULL|False\n312|col313|INT64|NULL|False\n313|col314|INT64|NULL|False\n314|col315|INT64|NULL|False\n315|col316|INT64|NULL|False\n316|col317|INT64|NULL|False\n317|col318|INT64|NULL|False\n318|col319|INT64|NULL|False\n319|col320|INT64|NULL|False\n320|col321|INT64|NULL|False\n321|col322|INT64|NULL|False\n322|col323|INT64|NULL|False\n323|col324|INT64|NULL|False\n324|col325|INT64|NULL|False\n325|col326|INT64|NULL|False\n326|col327|INT64|NULL|False\n327|col328|INT64|NULL|False\n328|col329|INT64|NULL|False\n329|col330|INT64|NULL|False\n330|col331|INT64|NULL|False\n331|col332|INT64|NULL|False\n332|col333|INT64|NULL|False\n333|col334|INT64|NULL|False\n334|col335|INT64|NULL|False\n335|col336|INT64|NULL|False\n336|col337|INT64|NULL|False\n337|col338|INT64|NULL|False\n338|col339|INT64|NULL|False\n339|col340|INT64|NULL|False\n340|col341|INT64|NULL|False\n341|col342|INT64|NULL|False\n342|col343|INT64|NULL|False\n343|col344|INT64|NULL|False\n344|col345|INT64|NULL|False\n345|col346|INT64|NULL|False\n346|col347|INT64|NULL|False\n347|col348|INT64|NULL|False\n348|col349|INT64|NULL|False\n349|col350|INT64|NULL|False\n350|col351|INT64|NULL|False\n351|col352|INT64|NULL|False\n352|col353|INT64|NULL|False\n353|col354|INT64|NULL|False\n354|col355|INT64|NULL|False\n355|col356|INT64|NULL|False\n356|col357|INT64|NULL|False\n357|col358|INT64|NULL|False\n358|col359|INT64|NULL|False\n359|col360|INT64|NULL|False\n360|col361|INT64|NULL|False\n361|col362|INT64|NULL|False\n362|col363|INT64|NULL|False\n363|col364|INT64|NULL|False\n```\n\n----------------------------------------\n\nTITLE: Using Brotli Command-Line Tool in Shell\nDESCRIPTION: Demonstrates the basic syntax for using the brotli command-line tool. It shows how to invoke brotli with options and file arguments, and provides equivalent commands for brcat and unbrotli.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/c/tools/brotli.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrotli [OPTION|FILE]...\n\nbrcat is equivalent to brotli --decompress --concatenated --stdout\n\nunbrotli is equivalent to brotli --decompress\n```\n\n----------------------------------------\n\nTITLE: Creating WAL Storage Object Library in CMake\nDESCRIPTION: Defines an object library for Kuzu's WAL (Write-Ahead Logging) storage component by specifying the source files to compile. The library includes components for shadow files, the main WAL functionality, and WAL record handling.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/wal/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_storage_wal\n        OBJECT\n        shadow_file.cpp\n        wal.cpp\n        wal_record.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring JSON Cast Functions Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_json_cast_functions' that compiles json_cast.cpp. The resulting object files are then added to a parent-scope variable 'JSON_EXTENSION_OBJECT_FILES' to be incorporated into the main KuzuDB build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/functions/cast_functions/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_json_cast_functions\n        OBJECT\n        json_cast.cpp)\n\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_cast_functions>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Delta Function Library in CMake\nDESCRIPTION: Creates a library named kuzu_delta_function containing delta scan functionality and DuckDB connectors. Includes source files for result conversion, type conversion, and scanning operations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/src/function/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_delta_function\n        OBJECT\n        delta_scan.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_result_converter.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_type_converter.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/function/duckdb_scan.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for KuzuDB Parser in CMake\nDESCRIPTION: Adds subdirectories for various components of the KuzuDB parser, including antlr_parser, expression, transform, and visitor.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/parser/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(antlr_parser)\nadd_subdirectory(expression)\nadd_subdirectory(transform)\nadd_subdirectory(visitor)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Scalar Functions Library in CMake for KuzuDB\nDESCRIPTION: This CMake snippet creates an object library named 'kuzu_json_scalar_functions' with several JSON-related source files. It then adds the compiled objects to a parent scope variable for integration into the larger project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/functions/scalar_functions/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_json_scalar_functions\n        OBJECT\n        json_array_length.cpp\n        json_contains.cpp\n        json_keys.cpp\n        json_structure.cpp\n        json_valid.cpp\n        json_minify.cpp)\n\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_scalar_functions>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options and Default Build Type\nDESCRIPTION: Sets the default build options including whether to build shared libraries and CLI tools. Also ensures that a build type is set, defaulting to Release if none was specified.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SHARED_LIBS \"Build shared libraries\" OFF)\nset(BROTLI_BUILD_TOOLS OFF CACHE BOOL \"Build/install CLI tools\")\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to Release as none was specified.\")\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build\" FORCE)\nelse()\n  message(STATUS \"Build type is '${CMAKE_BUILD_TYPE}'\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Postgres Connector Library in CMake for Kuzu\nDESCRIPTION: Creates an object library named 'kuzu_postgres_connector' that includes DuckDB connector source files and a Postgres connector file. Then adds the compiled objects to the parent scope variable for use in the Postgres extension build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/src/connector/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_postgres_connector\n        OBJECT\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_connector.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_result_converter.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_type_converter.cpp\n        postgres_connector.cpp)\n\nset(POSTGRES_EXTENSION_OBJECT_FILES\n        ${POSTGRES_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_postgres_connector>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Files for Extension Loading in CMake\nDESCRIPTION: Configures template files for extension loading by generating header and implementation files. It replaces placeholders in the template files with the actual extensions to be loaded.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/extension/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n        \"generated_extension_loader.h.in\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/codegen/include/generated_extension_loader.h\"\n        @ONLY\n)\n\nconfigure_file(\n        \"generated_extension_loader.cpp.in\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/codegen/generated_extension_loader.cpp\"\n        @ONLY\n)\n\nset(GENERATED_CPP_FILE\n        ${CMAKE_CURRENT_BINARY_DIR}/codegen/generated_extension_loader.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_function_export Library in CMake for KuzuDB\nDESCRIPTION: This CMake snippet creates an OBJECT library named kuzu_function_export, which includes CSV and Parquet export functionality. It specifies the source files for the library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/export/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_function_export\n        OBJECT\n        export_csv_function.cpp\n        export_parquet_function.cpp)\n```\n\n----------------------------------------\n\nTITLE: Executing CMake.js Commands for Build Configuration\nDESCRIPTION: Executes CMake.js commands to retrieve include paths, library paths, and source paths needed for the build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process(\n  COMMAND ${NPX_CMD} cmake-js print-cmakejs-include\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  OUTPUT_VARIABLE CMAKE_JS_INC\n)\nexecute_process(\n  COMMAND ${NPX_CMD} cmake-js print-cmakejs-lib\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  OUTPUT_VARIABLE CMAKE_JS_LIB\n)\nexecute_process(\n  COMMAND ${NPX_CMD} cmake-js print-cmakejs-src\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  OUTPUT_VARIABLE CMAKE_JS_SRC\n)\n\nstring(STRIP ${CMAKE_JS_INC} CMAKE_JS_INC)\nstring(STRIP ${CMAKE_JS_LIB} CMAKE_JS_LIB)\nstring(STRIP ${CMAKE_JS_SRC} CMAKE_JS_SRC)\n```\n\n----------------------------------------\n\nTITLE: Generating Brotli library pkg-config files in CMake\nDESCRIPTION: Code that generates pkg-config files for different Brotli library components (common, decoder, encoder) by calling the transform_pc_file function with appropriate template files and the Brotli version. These generated files provide the necessary metadata for applications that use pkg-config to locate and link against the Brotli libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ntransform_pc_file(\"scripts/libbrotlicommon.pc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlicommon.pc\" \"${BROTLI_VERSION}\")\n\ntransform_pc_file(\"scripts/libbrotlidec.pc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlidec.pc\" \"${BROTLI_VERSION}\")\n\ntransform_pc_file(\"scripts/libbrotlienc.pc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlienc.pc\" \"${BROTLI_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Tests with CMake\nDESCRIPTION: These commands add test executables to the KuzuDB test suite using a custom CMake macro called add_kuzu_test. The macro takes the test name and corresponding source file as parameters.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_kuzu_test(e2e_test e2e_test.cpp)\nadd_kuzu_test(cleanup_test cleanup_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Iceberg Installer Library in CMake with Platform-Specific Settings\nDESCRIPTION: This CMake script configures the Iceberg installer as a shared library for non-Windows platforms. It includes source files from both the current directory and the DuckDB extension directory, and sets extension properties. For macOS (Apple) systems, it applies dynamic lookup settings.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/src/installer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT WIN32)\n    add_library(iceberg_installer\n            SHARED\n            iceberg_install_func.cpp\n            ${PROJECT_SOURCE_DIR}/extension/duckdb/src/installer/duckdb_installer.cpp)\n    set_extension_properties(iceberg_installer iceberg_installer iceberg)\nendif ()\n\nif (APPLE)\n    set_apple_dynamic_lookup(iceberg_installer)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_processor_result Library in CMake for KuzuDB\nDESCRIPTION: Creates an OBJECT library named kuzu_processor_result with multiple source files related to result processing in KuzuDB. This library includes various components for handling factorized tables, result sets, and pattern creation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/result/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_result\n        OBJECT\n        base_hash_table.cpp\n        factorized_table.cpp\n        factorized_table_pool.cpp\n        factorized_table_schema.cpp\n        factorized_table_util.cpp\n        flat_tuple.cpp\n        pattern_creation_info_table.cpp\n        result_set.cpp\n        result_set_descriptor.cpp\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Reader Binding Library\nDESCRIPTION: Creates a CMake object library 'kuzu_binder_bind_read' containing source files for various read operations like query calls, loading, matching, and unwinding. The object files are then added to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind/read/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_binder_bind_read\n        OBJECT\n        bind_in_query_call.cpp\n        bind_load_from.cpp\n        bind_match.cpp\n        bind_unwind.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_bind_read>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories and Libraries for KuzuDB Extensions\nDESCRIPTION: Sets up include directories for the generated code and third-party libraries like httplib. It also creates object libraries for extension loading functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/extension/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n        \"${CMAKE_CURRENT_BINARY_DIR}/codegen/include/\"\n        ${PROJECT_SOURCE_DIR}/third_party/httplib\n)\n\nadd_library(kuzu_generated_extension_loader OBJECT ${GENERATED_CPP_FILE})\n```\n\n----------------------------------------\n\nTITLE: Creating Expression Binder Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_binder_expression' containing various expression-related source files for the KuzuDB query binder. Includes files for handling different types of expressions like aggregate functions, case statements, literals, and property access.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/expression/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        kuzu_binder_expression\n        OBJECT\n        aggregate_function_expression.cpp\n        case_expression.cpp\n        expression.cpp\n        expression_util.cpp\n        literal_expression.cpp\n        node_expression.cpp\n        node_rel_expression.cpp\n        parameter_expression.cpp\n        property_expression.cpp\n        rel_expression.cpp\n        scalar_function_expression.cpp\n        variable_expression.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Processor Operator Create Macro Library in CMake\nDESCRIPTION: This snippet adds a new object library named kuzu_processor_operator_create_macro with the source file create_macro.cpp. It then adds the objects from this library to the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/macro/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_create_macro\n        OBJECT\n        create_macro.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_create_macro>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Miniz Static Library in CMake\nDESCRIPTION: Adds Miniz as a static library to the project, specifying miniz.cpp as the source file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/miniz/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(miniz STATIC miniz.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Task System Library in CMake\nDESCRIPTION: This snippet creates an object library named 'kuzu_common_task_system' with source files related to task management and progress display. It includes task.cpp, task_scheduler.cpp, progress_bar.cpp, and terminal_progress_bar_display.cpp.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/task_system/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_common_task_system\n        OBJECT\n        task.cpp\n        task_scheduler.cpp \n        progress_bar.cpp\n        terminal_progress_bar_display.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Delta Connector Include Directories\nDESCRIPTION: Specifies private include directories for the Delta connector, ensuring it can access necessary header files from Delta, DuckDB, and HTTPFS extensions.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(delta_connector PRIVATE\n    ${PROJECT_SOURCE_DIR}/extension/delta/src/include\n    ${PROJECT_SOURCE_DIR}/extension/duckdb/src/include\n    ${PROJECT_SOURCE_DIR}/extension/httpfs/src/include\n)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Function Library in CMake\nDESCRIPTION: This snippet creates an object library named 'kuzu_function' with multiple source files. It includes various function implementations for different data types and operations in KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_function\n        OBJECT\n        aggregate_function.cpp\n        base_lower_upper_operation.cpp\n        built_in_function_utils.cpp\n        cast_string_non_nested_functions.cpp\n        cast_from_string_functions.cpp\n        comparison_functions.cpp\n        find_function.cpp\n        function.cpp\n        function_collection.cpp\n        scalar_macro_function.cpp\n        vector_arithmetic_functions.cpp\n        vector_boolean_functions.cpp\n        vector_cast_functions.cpp\n        vector_date_functions.cpp\n        vector_hash_functions.cpp\n        vector_null_functions.cpp\n        vector_node_rel_functions.cpp\n        vector_string_functions.cpp\n        vector_timestamp_functions.cpp\n        vector_blob_functions.cpp\n        vector_uuid_functions.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Planner Persistent Library in CMake\nDESCRIPTION: Creates an object library named kuzu_planner_persistent with specified source files. This library includes logical operations for copy, insert, delete, merge, and set functionalities.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/persistent/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_planner_persistent\n        OBJECT\n        logical_copy_from.cpp\n        logical_copy_to.cpp\n        logical_insert.cpp\n        logical_delete.cpp\n        logical_merge.cpp\n        logical_set.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules\nDESCRIPTION: Sets up installation rules for libraries, headers, and executables when not in bundled mode. This allows system-wide installation of Brotli components.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# Installation\nif(NOT BROTLI_BUNDLED_MODE)\n  if (BROTLI_BUILD_TOOLS)\n    install(\n      TARGETS brotli\n      RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n    )\n  endif()\n\n  install(\n    TARGETS ${BROTLI_LIBRARIES_CORE}\n    ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n  )\n\n  install(\n    DIRECTORY ${BROTLI_INCLUDE_DIRS}/brotli\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n  )\nendif()  # BROTLI_BUNDLED_MODE\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Planner Object Library\nDESCRIPTION: Creates an object library for the KuzuDB planner component, including source files for join order enumeration, planning, and subplans management.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_planner\n        OBJECT\n        join_order_enumerator_context.cpp\n        planner.cpp\n        query_planner.cpp\n        subplans_table.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Processor Operator Aggregate Library in CMake\nDESCRIPTION: This CMake code defines the kuzu_processor_operator_aggregate library as an OBJECT library and specifies its source files. It includes various aggregate-related source files for the KuzuDB processor.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/aggregate/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_aggregate\n        OBJECT\n        aggregate_hash_table.cpp\n        base_aggregate.cpp\n        base_aggregate_scan.cpp\n        hash_aggregate.cpp\n        hash_aggregate_scan.cpp\n        simple_aggregate.cpp\n        simple_aggregate_scan.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_processor_operator_order_by Library in CMake\nDESCRIPTION: Creates an object library named kuzu_processor_operator_order_by with specified source files. This library contains components related to order by operations in the KuzuDB processor.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/order_by/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_order_by\n        OBJECT\n        key_block_merger.cpp\n        order_by.cpp\n        order_by_key_encoder.cpp\n        order_by_merge.cpp\n        order_by_scan.cpp\n        radix_sort.cpp\n        sort_state.cpp\n        top_k.cpp\n        top_k_scanner.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for KuzuDB SQLite Extension in CMake\nDESCRIPTION: Configures include directories for the project, including source directories, binary directories, and external dependencies like DuckDB and S3 configuration.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        ${PROJECT_SOURCE_DIR}/extension/httpfs/src/include  # For S3 configuration\n        src/include\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/include\n        ${DuckDB_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Creating Array Functions Library in CMake\nDESCRIPTION: Defines a new object library named kuzu_function_array with array_functions.cpp and array_value.cpp source files. Adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/array/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_function_array\n        OBJECT\n        array_functions.cpp\n        array_value.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_array>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unity Catalog Installer Library for Non-Windows Platforms\nDESCRIPTION: Creates a shared library for the Unity Catalog installer on non-Windows systems. It includes source files and sets extension properties.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/src/installer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT WIN32)\n    add_library(unity_catalog_installer\n            SHARED\n            unity_catalog_install_func.cpp\n            ${PROJECT_SOURCE_DIR}/extension/duckdb/src/installer/duckdb_installer.cpp)\n    set_extension_properties(unity_catalog_installer unity_catalog_installer unity_catalog)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_planner_scan Library in CMake\nDESCRIPTION: Creates an object library named kuzu_planner_scan with specified source files for logical expressions, index lookups, and table scans.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/scan/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_planner_scan\n        OBJECT\n        logical_expressions_scan.cpp\n        logical_index_look_up.cpp\n        logical_scan_node_table.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB API Tests with Conditional Compilation\nDESCRIPTION: Defines API test files to be included in the build process with conditional logic based on the compiler. MSVC builds exclude the db_locking_test.cpp file, while other compilers include it. Also sets up a separate transaction test that requires private APIs.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    add_kuzu_api_test(main_test\n            system_config_test.cpp\n            arrow_test.cpp\n            connection_test.cpp\n            prepare_test.cpp\n            result_value_test.cpp\n            storage_driver_test.cpp\n            udf_test.cpp)\nelse()\n    add_kuzu_api_test(main_test\n            system_config_test.cpp\n            arrow_test.cpp\n            connection_test.cpp\n            db_locking_test.cpp\n            prepare_test.cpp\n            result_value_test.cpp\n            storage_driver_test.cpp\n            udf_test.cpp)\nendif()\n\n# Also tested for coverage in connection_test.cpp\n# but full testing requires some private APIs\nadd_kuzu_test(transaction_test transaction_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Parser Library in CMake\nDESCRIPTION: Creates an object library named kuzu_parser, including source files for create_macro, parser, parsed_statement_visitor, and transformer.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/parser/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_parser\n        OBJECT\n        create_macro.cpp\n        parser.cpp\n        parsed_statement_visitor.cpp\n        transformer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Parser Visitor Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_parser_visitor' with two source files: 'standalone_call_rewriter.cpp' and 'statement_read_write_analyzer.cpp'. This library is likely part of the parsing components for KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/parser/visitor/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(\n        kuzu_parser_visitor\n        OBJECT\n        standalone_call_rewriter.cpp\n        statement_read_write_analyzer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Extension Object Library in CMake\nDESCRIPTION: Creates an object library named 'postgres_extension_main' from the postgres_extension.cpp source file. Then adds the compiled objects to a parent scope variable for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(postgres_extension_main\n        OBJECT\n        postgres_extension.cpp)\n\nset(POSTGRES_EXTENSION_OBJECT_FILES\n        ${POSTGRES_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:postgres_extension_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Storage Library in CMake\nDESCRIPTION: Creates a library target for PostgreSQL storage integration, specifying source files from both local and DuckDB extension directories. Sets up object files for parent scope compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/src/storage/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_postgres_storage\n        OBJECT\n        postgres_storage.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/catalog/duckdb_catalog.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/function/duckdb_scan.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/catalog/duckdb_table_catalog_entry.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/function/clear_cache.cpp)\n\nset(POSTGRES_EXTENSION_OBJECT_FILES\n        ${POSTGRES_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_postgres_storage>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB JSON Creation Functions Library in CMake\nDESCRIPTION: This CMake code defines an object library named 'kuzu_json_creation_functions' that includes several JSON-related source files. It then adds the compiled objects to a parent scope variable for further use in the build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/functions/creation_functions/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_json_creation_functions\n        OBJECT\n        json_array.cpp\n        json_merge_patch.cpp\n        json_object.cpp\n        to_json.cpp)\n\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_creation_functions>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: History Search Implementation in Linenoise\nDESCRIPTION: Reverse-i-search functionality triggered by ctrl+r, matching user input against history entries and displaying matches with highlighting and underlining.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/shell_development_guide.md#2025-04-17_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nhighlight()\nhighlightingTokenize()\nconvertToken()\n```\n\n----------------------------------------\n\nTITLE: Linking SimSIMD Library to KuzuDB Extension in CMake\nDESCRIPTION: This snippet links the SimSIMD library to the KuzuDB vector extension. It uses target_link_libraries to establish a private dependency between the extension and SimSIMD.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/vector/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        simsimd)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Graph Library Build Target\nDESCRIPTION: Creates an OBJECT library target named kuzu_graph composed of three source files: graph.cpp, graph_entry.cpp, and on_disk_graph.cpp. Object libraries are used for better compilation organization and linking flexibility.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/graph/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_graph\n        OBJECT\n        graph.cpp\n        graph_entry.cpp\n        on_disk_graph.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Roundtrip Compression Tests\nDESCRIPTION: Sets up tests to verify that files can be properly compressed and decompressed with different quality settings. This ensures the library works correctly for various input types and compression levels.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n  include(CTest)\n  enable_testing()\n\n  set(ROUNDTRIP_INPUTS\n    tests/testdata/alice29.txt\n    tests/testdata/asyoulik.txt\n    tests/testdata/lcet10.txt\n    tests/testdata/plrabn12.txt\n    c/enc/encode.c\n    c/common/dictionary.h\n    c/dec/decode.c)\n\n  foreach(INPUT ${ROUNDTRIP_INPUTS})\n    get_filename_component(OUTPUT_NAME \"${INPUT}\" NAME)\n\n    set(OUTPUT_FILE \"${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT_NAME}\")\n    set(INPUT_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/${INPUT}\")\n\n    if (EXISTS \"${INPUT_FILE}\")\n      foreach(quality 1 6 9 11)\n        add_test(NAME \"${BROTLI_TEST_PREFIX}roundtrip/${INPUT}/${quality}\"\n          COMMAND \"${CMAKE_COMMAND}\"\n            -DBROTLI_WRAPPER=${BROTLI_WRAPPER}\n            -DBROTLI_WRAPPER_LD_PREFIX=${BROTLI_WRAPPER_LD_PREFIX}\n            -DBROTLI_CLI=$<TARGET_FILE:brotli>\n            -DQUALITY=${quality}\n            -DINPUT=${INPUT_FILE}\n            -DOUTPUT=${OUTPUT_FILE}.${quality}\n            -P ${CMAKE_CURRENT_SOURCE_DIR}/tests/run-roundtrip-test.cmake)\n      endforeach()\n    else()\n      message(NOTICE \"Test file ${INPUT} does not exist; OK on tarball builds; consider running scripts/download_testdata.sh before configuring.\")\n    endif()\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting KuzuDB Include Directories\nDESCRIPTION: Configures include directories for both static and shared library targets, handling both build-time and installation paths.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(KUZU_INCLUDES $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/include/c_api)\ntarget_include_directories(kuzu PUBLIC ${KUZU_INCLUDES})\ntarget_include_directories(kuzu_shared PUBLIC ${KUZU_INCLUDES})\nunset(KUZU_INCLUDES)\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB Binder Visitor Object Library\nDESCRIPTION: Defines an object library named 'kuzu_binder_visitor' with three source files related to statement analysis, type solving, and property collection.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/visitor/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        kuzu_binder_visitor\n        OBJECT\n        confidential_statement_analyzer.cpp\n        default_type_solver.cpp\n        property_collector.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Export Functions Library in CMake for KuzuDB\nDESCRIPTION: Creates an object library for JSON export functions and adds its object files to the parent scope variable. This allows the JSON export functionality to be integrated into the KuzuDB build system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/functions/export_functions/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_json_export_functions\n        OBJECT\n        json_export.cpp)\n\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_export_functions>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Common Library in CMake\nDESCRIPTION: Creates a static library named kuzu_json_common from json_common.cpp source file. Sets up object files for JSON extension by adding the compiled objects to a parent scope variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/common/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_json_common\n        OBJECT\n        json_common.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_common>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index Catalog Object Library in CMake\nDESCRIPTION: Defines an object library named 'kuzu_hnsw_index_catalog' that includes the hnsw_index_catalog_entry.cpp source file. Then adds this library's objects to the VECTOR_EXTENSION_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/vector/src/catalog/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_hnsw_index_catalog\n        OBJECT\n        hnsw_index_catalog_entry.cpp)\n\nset(VECTOR_EXTENSION_OBJECT_FILES\n        ${VECTOR_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_hnsw_index_catalog>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Processing Statically Linked Extensions in CMake\nDESCRIPTION: Iterates through statically linked extensions, converts extension names to camel case, and generates code for loading each extension. This snippet also sets up include directories for each extension.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/extension/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INCLUDES \"\")\nset(LOAD_LINKED_EXTENSION \"\")\n\nforeach(EXT_NAME IN LISTS STATICALLY_LINKED_EXTENSIONS)\n    string(TOLOWER \"${EXT_NAME}\" EXT_NAME_LOWER)\n    # Convert to camel case\n    string(REPLACE \"_\" \";\" EXT_NAME_SPLIT ${EXT_NAME})\n    set(EXT_NAME_CAMELCASE \"\")\n    foreach(EXT_NAME_PART IN LISTS EXT_NAME_SPLIT)\n        string(SUBSTRING ${EXT_NAME_PART} 0 1 FIRST_LETTER)\n        string(SUBSTRING ${EXT_NAME_PART} 1 -1 REMAINDER)\n        string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)\n        set(EXT_NAME_CAMELCASE \"${EXT_NAME_CAMELCASE}${FIRST_LETTER}${REMAINDER}\")\n    endforeach()\n\n    set(LOAD_LINKED_EXTENSION \"${LOAD_LINKED_EXTENSION}\\\n    {\n        ${EXT_NAME_LOWER}_extension::${EXT_NAME_CAMELCASE}Extension extension{};\n        extension.load(context);\n    }\\n\")\n    include_directories(${PROJECT_SOURCE_DIR}/extension/${EXT_NAME}/src/include/main)\n    set(INCLUDES \"${INCLUDES}#include \\\"${EXT_NAME_LOWER}_extension.h\\\"\\n\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Directory for Python Include in CMake\nDESCRIPTION: This snippet sets the relative path for the Python include directory based on the Python_INCLUDE_DIRS or PYTHON_INCLUDE_DIR variables. It's used to configure the installation directory for pybind11 headers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/pybind11/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_PYTHON_INCLUDE_DIR AND DEFINED Python_INCLUDE_DIRS)\n  file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${Python_INCLUDE_DIRS})\nelseif(USE_PYTHON_INCLUDE_DIR AND DEFINED PYTHON_INCLUDE_DIR)\n  file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${PYTHON_INCLUDE_DIRS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Line Editing and Refresh in Linenoise Shell\nDESCRIPTION: Core functionality for processing user input character-by-character and refreshing the display. Handles line truncation and highlighting in single-line mode.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/shell_development_guide.md#2025-04-17_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nlinenoiseEdit()\nrefreshLine()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pattern Function Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_function_pattern' comprising multiple source files for pattern-related functions. The library includes implementation files for ID functions, label functions, and start/end node functions.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/pattern/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_function_pattern\n        OBJECT\n        id_function.cpp\n        label_function.cpp\n        start_end_node_function.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring SimSIMD Static Library Build\nDESCRIPTION: Creates a static library target for SimSIMD, sets include directories, and configures compiler-specific warning options. Handles different warning flags for MSVC and non-MSVC compilers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/simsimd/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(simsimd\n        STATIC\n        lib.c)\n\ntarget_include_directories(simsimd PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR})\n\nif(NOT MSVC)\n    target_compile_options(simsimd PRIVATE -w)\nelseif (MSVC)\n    target_compile_options(simsimd PRIVATE /w)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Subdirectories for Kuzu Database Components\nDESCRIPTION: Adds required subdirectories for map, operator, and result components to the build system\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(map)\nadd_subdirectory(operator)\nadd_subdirectory(result)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Test Cases\nDESCRIPTION: Configures multiple test cases for different components of KuzuDB including node operations, compression, buffer management, and scanning functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/storage/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_kuzu_test(node_insertion_deletion_test node_insertion_deletion_test.cpp)\nadd_kuzu_test(compression_test compression_test.cpp compress_chunk_test.cpp)\nadd_kuzu_test(column_chunk_metadata_test column_chunk_metadata_test.cpp)\nadd_kuzu_test(local_hash_index_test local_hash_index_test.cpp)\nadd_kuzu_test(buffer_manager_test buffer_manager_test.cpp)\nadd_kuzu_test(rel_scan_test rel_scan_test.cpp)\nadd_kuzu_test(node_update_test node_update_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Table Functions Library in CMake for KuzuDB\nDESCRIPTION: This snippet creates an object library named 'kuzu_json_table_functions' with the source file 'json_scan.cpp'. It then adds the resulting object files to the JSON_EXTENSION_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/functions/table_functions/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_json_table_functions\n        OBJECT\n        json_scan.cpp)\n\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_table_functions>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Propagating KuzuDB Object Files to Parent Scope in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope by adding the objects generated from the kuzu_common_types library. This allows the parent CMakeLists.txt to include these objects in the final build targets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/types/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_types>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Delta Extension\nDESCRIPTION: Configures the include directories needed for the KuzuDB Delta extension, including project source directories, generated header directories, and DuckDB include paths.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        src/include\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/include\n        ${PROJECT_SOURCE_DIR}/extension/httpfs/src/include\n        ${DuckDB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Static/Dynamic Linking in CMake\nDESCRIPTION: Sets DuckDB linking mode based on platform (Windows) or build configuration. Static libraries are used for Windows or when explicitly building a static extension.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32 OR BUILD_STATIC_EXTENSION)\n    set(DuckDB_USE_STATIC_LIBS ON)\nelse ()\n    set(DuckDB_USE_STATIC_LIBS OFF)\nendif ()\nfind_package(DuckDB REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in KuzuDB CMake Configuration\nDESCRIPTION: This snippet adds multiple subdirectories to the CMake build process. These subdirectories likely contain specific implementations for different function categories in KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(aggregate)\nadd_subdirectory(arithmetic)\nadd_subdirectory(array)\nadd_subdirectory(cast)\nadd_subdirectory(date)\nadd_subdirectory(gds)\nadd_subdirectory(list)\nadd_subdirectory(map)\nadd_subdirectory(path)\nadd_subdirectory(pattern)\nadd_subdirectory(sequence)\nadd_subdirectory(struct)\nadd_subdirectory(table)\nadd_subdirectory(union)\nadd_subdirectory(utility)\nadd_subdirectory(string)\nadd_subdirectory(export)\nadd_subdirectory(internal_id)\nadd_subdirectory(timestamp)\n```\n\n----------------------------------------\n\nTITLE: Defining DDL Operator Library in CMake\nDESCRIPTION: Creates an object library for KuzuDB's DDL operators containing source files for various DDL operations like alter, create, and drop commands.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/ddl/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_processor_operator_ddl\n        OBJECT\n        alter.cpp\n        create_table.cpp\n        create_type.cpp\n        drop.cpp\n        create_sequence.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Extension Build in CMake\nDESCRIPTION: Checks if there are any statically linked extensions and sets BUILD_STATIC_EXTENSION accordingly, with dynamic loading configuration when needed.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(LENGTH STATICALLY_LINKED_EXTENSIONS LIST_SIZE)\nif (NOT LIST_SIZE EQUAL 0)\n    SET(BUILD_STATIC_EXTENSION ON)\nelse ()\n    SET(BUILD_STATIC_EXTENSION OFF)\n    add_compile_definitions(BUILD_DYNAMIC_LOAD)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating DDL Binder Library with CMake\nDESCRIPTION: Defines an OBJECT library named kuzu_binder_ddl that includes bound_alter_info.cpp and property_definition.cpp source files. The library's object files are then added to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/ddl/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        kuzu_binder_ddl\n        OBJECT\n        bound_alter_info.cpp\n        property_definition.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_ddl>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Installer Library for Non-Windows Systems\nDESCRIPTION: Creates a shared library for DuckDB installer on non-Windows platforms. Includes source files and sets extension properties.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/installer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT WIN32)\n    add_library(duckdb_installer\n            SHARED\n            duckdb_installer.cpp\n            duckdb_install_func.cpp)\n    set_extension_properties(duckdb_installer duckdb_installer duckdb)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Global Object Files Variable\nDESCRIPTION: Adds the kuzu_storage object files to the parent scope's ALL_OBJECT_FILES variable for inclusion in the final build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Module Subdirectories in CMake\nDESCRIPTION: Adds required subdirectories for different storage components including buffer manager, compression, local storage, predicate handling, indexing, statistics, storage structure, store, and WAL.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(buffer_manager)\nadd_subdirectory(compression)\nadd_subdirectory(local_storage)\nadd_subdirectory(predicate)\nadd_subdirectory(index)\nadd_subdirectory(stats)\nadd_subdirectory(storage_structure)\nadd_subdirectory(store)\nadd_subdirectory(wal)\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Function Library in CMake for KuzuDB\nDESCRIPTION: This CMake snippet creates an object library named 'kuzu_postgres_function' with the source file 'sql_query.cpp'. It's likely part of building a PostgreSQL extension for KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/src/function/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_postgres_function\n        OBJECT\n        sql_query.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in KuzuDB CMake Configuration\nDESCRIPTION: Adds five subdirectories to the build process: extend, factorization, persistent, scan, and simple. These directories likely contain related components of the KuzuDB query planner.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(extend)\nadd_subdirectory(factorization)\nadd_subdirectory(persistent)\nadd_subdirectory(scan)\nadd_subdirectory(simple)\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Transaction Library in CMake\nDESCRIPTION: Creates an OBJECT library named kuzu_transaction with transaction-related source files and adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/transaction/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_transaction\n        OBJECT\n        transaction.cpp\n        transaction_context.cpp\n        transaction_manager.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_transaction>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining INT64 Columns in Database Schema\nDESCRIPTION: This snippet defines a series of INT64 columns in a database schema. Each line represents a column with its index, name, data type (INT64), NULL constraint, and primary key status (False).\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/function_table_info_answer.txt#2025-04-17_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n364|col365|INT64|NULL|False\n365|col366|INT64|NULL|False\n366|col367|INT64|NULL|False\n367|col368|INT64|NULL|False\n368|col369|INT64|NULL|False\n369|col370|INT64|NULL|False\n370|col371|INT64|NULL|False\n371|col372|INT64|NULL|False\n372|col373|INT64|NULL|False\n373|col374|INT64|NULL|False\n374|col375|INT64|NULL|False\n375|col376|INT64|NULL|False\n376|col377|INT64|NULL|False\n377|col378|INT64|NULL|False\n378|col379|INT64|NULL|False\n379|col380|INT64|NULL|False\n380|col381|INT64|NULL|False\n381|col382|INT64|NULL|False\n382|col383|INT64|NULL|False\n383|col384|INT64|NULL|False\n384|col385|INT64|NULL|False\n385|col386|INT64|NULL|False\n386|col387|INT64|NULL|False\n387|col388|INT64|NULL|False\n388|col389|INT64|NULL|False\n389|col390|INT64|NULL|False\n390|col391|INT64|NULL|False\n391|col392|INT64|NULL|False\n392|col393|INT64|NULL|False\n393|col394|INT64|NULL|False\n394|col395|INT64|NULL|False\n395|col396|INT64|NULL|False\n396|col397|INT64|NULL|False\n397|col398|INT64|NULL|False\n398|col399|INT64|NULL|False\n399|col400|INT64|NULL|False\n400|col401|INT64|NULL|False\n401|col402|INT64|NULL|False\n402|col403|INT64|NULL|False\n403|col404|INT64|NULL|False\n404|col405|INT64|NULL|False\n405|col406|INT64|NULL|False\n406|col407|INT64|NULL|False\n407|col408|INT64|NULL|False\n408|col409|INT64|NULL|False\n409|col410|INT64|NULL|False\n410|col411|INT64|NULL|False\n411|col412|INT64|NULL|False\n412|col413|INT64|NULL|False\n413|col414|INT64|NULL|False\n414|col415|INT64|NULL|False\n415|col416|INT64|NULL|False\n416|col417|INT64|NULL|False\n417|col418|INT64|NULL|False\n418|col419|INT64|NULL|False\n419|col420|INT64|NULL|False\n420|col421|INT64|NULL|False\n421|col422|INT64|NULL|False\n422|col423|INT64|NULL|False\n423|col424|INT64|NULL|False\n424|col425|INT64|NULL|False\n425|col426|INT64|NULL|False\n426|col427|INT64|NULL|False\n427|col428|INT64|NULL|False\n428|col429|INT64|NULL|False\n429|col430|INT64|NULL|False\n430|col431|INT64|NULL|False\n431|col432|INT64|NULL|False\n432|col433|INT64|NULL|False\n433|col434|INT64|NULL|False\n434|col435|INT64|NULL|False\n435|col436|INT64|NULL|False\n436|col437|INT64|NULL|False\n437|col438|INT64|NULL|False\n438|col439|INT64|NULL|False\n439|col440|INT64|NULL|False\n440|col441|INT64|NULL|False\n441|col442|INT64|NULL|False\n442|col443|INT64|NULL|False\n443|col444|INT64|NULL|False\n444|col445|INT64|NULL|False\n445|col446|INT64|NULL|False\n446|col447|INT64|NULL|False\n447|col448|INT64|NULL|False\n448|col449|INT64|NULL|False\n449|col450|INT64|NULL|False\n450|col451|INT64|NULL|False\n451|col452|INT64|NULL|False\n452|col453|INT64|NULL|False\n453|col454|INT64|NULL|False\n454|col455|INT64|NULL|False\n455|col456|INT64|NULL|False\n456|col457|INT64|NULL|False\n457|col458|INT64|NULL|False\n458|col459|INT64|NULL|False\n459|col460|INT64|NULL|False\n460|col461|INT64|NULL|False\n461|col462|INT64|NULL|False\n462|col463|INT64|NULL|False\n463|col464|INT64|NULL|False\n464|col465|INT64|NULL|False\n465|col466|INT64|NULL|False\n466|col467|INT64|NULL|False\n467|col468|INT64|NULL|False\n468|col469|INT64|NULL|False\n469|col470|INT64|NULL|False\n470|col471|INT64|NULL|False\n471|col472|INT64|NULL|False\n472|col473|INT64|NULL|False\n473|col474|INT64|NULL|False\n474|col475|INT64|NULL|False\n475|col476|INT64|NULL|False\n476|col477|INT64|NULL|False\n477|col478|INT64|NULL|False\n478|col479|INT64|NULL|False\n479|col480|INT64|NULL|False\n480|col481|INT64|NULL|False\n481|col482|INT64|NULL|False\n482|col483|INT64|NULL|False\n483|col484|INT64|NULL|False\n484|col485|INT64|NULL|False\n485|col486|INT64|NULL|False\n486|col487|INT64|NULL|False\n487|col488|INT64|NULL|False\n488|col489|INT64|NULL|False\n489|col490|INT64|NULL|False\n490|col491|INT64|NULL|False\n491|col492|INT64|NULL|False\n492|col493|INT64|NULL|False\n493|col494|INT64|NULL|False\n494|col495|INT64|NULL|False\n495|col496|INT64|NULL|False\n496|col497|INT64|NULL|False\n497|col498|INT64|NULL|False\n498|col499|INT64|NULL|False\n499|col500|INT64|NULL|False\n500|col501|INT64|NULL|False\n501|col502|INT64|NULL|False\n502|col503|INT64|NULL|False\n503|col504|INT64|NULL|False\n504|col505|INT64|NULL|False\n505|col506|INT64|NULL|False\n506|col507|INT64|NULL|False\n507|col508|INT64|NULL|False\n508|col509|INT64|NULL|False\n509|col510|INT64|NULL|False\n510|col511|INT64|NULL|False\n511|col512|INT64|NULL|False\n512|col513|INT64|NULL|False\n513|col514|INT64|NULL|False\n514|col515|INT64|NULL|False\n515|col516|INT64|NULL|False\n516|col517|INT64|NULL|False\n517|col518|INT64|NULL|False\n518|col519|INT64|NULL|False\n519|col520|INT64|NULL|False\n520|col521|INT64|NULL|False\n521|col522|INT64|NULL|False\n522|col523|INT64|NULL|False\n523|col524|INT64|NULL|False\n524|col525|INT64|NULL|False\n525|col526|INT64|NULL|False\n526|col527|INT64|NULL|False\n527|col528|INT64|NULL|False\n528|col529|INT64|NULL|False\n529|col530|INT64|NULL|False\n530|col531|INT64|NULL|False\n531|col532|INT64|NULL|False\n532|col533|INT64|NULL|False\n533|col534|INT64|NULL|False\n534|col535|INT64|NULL|False\n535|col536|INT64|NULL|False\n536|col537|INT64|NULL|False\n537|col538|INT64|NULL|False\n538|col539|INT64|NULL|False\n539|col540|INT64|NULL|False\n540|col541|INT64|NULL|False\n541|col542|INT64|NULL|False\n542|col543|INT64|NULL|False\n543|col544|INT64|NULL|False\n544|col545|INT64|NULL|False\n545|col546|INT64|NULL|False\n546|col547|INT64|NULL|False\n547|col548|INT64|NULL|False\n548|col549|INT64|NULL|False\n549|col550|INT64|NULL|False\n550|col551|INT64|NULL|False\n551|col552|INT64|NULL|False\n552|col553|INT64|NULL|False\n553|col554|INT64|NULL|False\n554|col555|INT64|NULL|False\n555|col556|INT64|NULL|False\n556|col557|INT64|NULL|False\n557|col558|INT64|NULL|False\n558|col559|INT64|NULL|False\n559|col560|INT64|NULL|False\n560|col561|INT64|NULL|False\n561|col562|INT64|NULL|False\n562|col563|INT64|NULL|False\n563|col564|INT64|NULL|False\n564|col565|INT64|NULL|False\n565|col566|INT64|NULL|False\n566|col567|INT64|NULL|False\n567|col568|INT64|NULL|False\n568|col569|INT64|NULL|False\n569|col570|INT64|NULL|False\n570|col571|INT64|NULL|False\n571|col572|INT64|NULL|False\n572|col573|INT64|NULL|False\n573|col574|INT64|NULL|False\n574|col575|INT64|NULL|False\n575|col576|INT64|NULL|False\n576|col577|INT64|NULL|False\n577|col578|INT64|NULL|False\n578|col579|INT64|NULL|False\n579|col580|INT64|NULL|False\n580|col581|INT64|NULL|False\n581|col582|INT64|NULL|False\n582|col583|INT64|NULL|False\n583|col584|INT64|NULL|False\n584|col585|INT64|NULL|False\n585|col586|INT64|NULL|False\n586|col587|INT64|NULL|False\n587|col588|INT64|NULL|False\n588|col589|INT64|NULL|False\n589|col590|INT64|NULL|False\n590|col591|INT64|NULL|False\n591|col592|INT64|NULL|False\n592|col593|INT64|NULL|False\n593|col594|INT64|NULL|False\n594|col595|INT64|NULL|False\n595|col596|INT64|NULL|False\n596|col597|INT64|NULL|False\n597|col598|INT64|NULL|False\n598|col599|INT64|NULL|False\n599|col600|INT64|NULL|False\n600|col601|INT64|NULL|False\n601|col602|INT64|NULL|False\n602|col603|INT64|NULL|False\n603|col604|INT64|NULL|False\n604|col605|INT64|NULL|False\n605|col606|INT64|NULL|False\n606|col607|INT64|NULL|False\n607|col608|INT64|NULL|False\n608|col609|INT64|NULL|False\n609|col610|INT64|NULL|False\n610|col611|INT64|NULL|False\n611|col612|INT64|NULL|False\n612|col613|INT64|NULL|False\n613|col614|INT64|NULL|False\n614|col615|INT64|NULL|False\n615|col616|INT64|NULL|False\n616|col617|INT64|NULL|False\n617|col618|INT64|NULL|False\n618|col619|INT64|NULL|False\n619|col620|INT64|NULL|False\n620|col621|INT64|NULL|False\n621|col622|INT64|NULL|False\n622|col623|INT64|NULL|False\n623|col624|INT64|NULL|False\n624|col625|INT64|NULL|False\n625|col626|INT64|NULL|False\n626|col627|INT64|NULL|False\n627|col628|INT64|NULL|False\n628|col629|INT64|NULL|False\n629|col630|INT64|NULL|False\n630|col631|INT64|NULL|False\n631|col632|INT64|NULL|False\n632|col633|INT64|NULL|False\n633|col634|INT64|NULL|False\n634|col635|INT64|NULL|False\n635|col636|INT64|NULL|False\n636|col637|INT64|NULL|False\n637|col638|INT64|NULL|False\n638|col639|INT64|NULL|False\n639|col640|INT64|NULL|False\n640|col641|INT64|NULL|False\n641|col642|INT64|NULL|False\n642|col643|INT64|NULL|False\n643|col644|INT64|NULL|False\n644|col645|INT64|NULL|False\n645|col646|INT64|NULL|False\n646|col647|INT64|NULL|False\n647|col648|INT64|NULL|False\n648|col649|INT64|NULL|False\n649|col650|INT64|NULL|False\n650|col651|INT64|NULL|False\n651|col652|INT64|NULL|False\n652|col653|INT64|NULL|False\n653|col654|INT64|NULL|False\n654|col655|INT64|NULL|False\n655|col656|INT64|NULL|False\n656|col657|INT64|NULL|False\n657|col658|INT64|NULL|False\n658|col659|INT64|NULL|False\n659|col660|INT64|NULL|False\n660|col661|INT64|NULL|False\n661|col662|INT64|NULL|False\n662|col663|INT64|NULL|False\n663|col664|INT64|NULL|False\n664|col665|INT64|NULL|False\n665|col666|INT64|NULL|False\n666|col667|INT64|NULL|False\n667|col668|INT64|NULL|False\n668|col669|INT64|NULL|False\n669|col670|INT64|NULL|False\n670|col671|INT64|NULL|False\n671|col672|INT64|NULL|False\n672|col673|INT64|NULL|False\n673|col674|INT64|NULL|False\n674|col675|INT64|NULL|False\n675|col676|INT64|NULL|False\n676|col677|INT64|NULL|False\n677|col678|INT64|NULL|False\n678|col679|INT64|NULL|False\n679|col680|INT64|NULL|False\n680|col681|INT64|NULL|False\n681|col682|INT64|NULL|False\n682|col683|INT64|NULL|False\n683|col684|INT64|NULL|False\n684|col685|INT64|NULL|False\n685|col686|INT64|NULL|False\n686|col687|INT64|NULL|False\n687|col688|INT64|NULL|False\n688|col689|INT64|NULL|False\n689|col690|INT64|NULL|False\n690|col691|INT64|NULL|False\n691|col692|INT64|NULL|False\n692|col693|INT64|NULL|False\n693|col694|INT64|NULL|False\n694|col695|INT64|NULL|False\n695|col696|INT64|NULL|False\n696|col697|INT64|NULL|False\n697|col698|INT64|NULL|False\n698|col699|INT64|NULL|False\n699|col700|INT64|NULL|False\n700|col701|INT64|NULL|False\n701|col702|INT64|NULL|False\n702|col703|INT64|NULL|False\n703|col704|INT64|NULL|False\n704|col705|INT64|NULL|False\n705|col706|INT64|NULL|False\n706|col707|INT64|NULL|False\n707|col708|INT64|NULL|False\n708|col709|INT64|NULL|False\n709|col710|INT64|NULL|False\n710|col711|INT64|NULL|False\n711|col712|INT64|NULL|False\n712|col713|INT64|NULL|False\n713|col714|INT64|NULL|False\n714|col715|INT64|NULL|False\n715|col716|INT64|NULL|False\n716|col717|INT64|NULL|False\n717|col718|INT64|NULL|False\n718|col719|INT64|NULL|False\n719|col720|INT64|NULL|False\n720|col721|INT64|NULL|False\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB Benchmark Executable\nDESCRIPTION: Defines the kuzu_benchmark executable and specifies its source files.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/benchmark/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(kuzu_benchmark\n        benchmark.cpp\n        benchmark_runner.cpp\n        main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for KuzuDB Benchmark\nDESCRIPTION: Sets up the include directories for the KuzuDB benchmark project, including local headers and test helper headers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/benchmark/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n        ./include\n        ${PROJECT_SOURCE_DIR}/test/include/test_helper)\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Store Objects to Parent Scope in CMake\nDESCRIPTION: This CMake command adds the compiled object files from the kuzu_storage_store library to a parent-scope variable named ALL_OBJECT_FILES. This allows the parent CMakeLists.txt to include these object files in the final build targets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/store/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage_store>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in CMake\nDESCRIPTION: Adds the compiled object files from the kuzu_processor_mapper library to the ALL_OBJECT_FILES variable in the parent scope. This allows the objects to be included when building the main KuzuDB executable or library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/map/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_mapper>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Binder Copy Library in CMake\nDESCRIPTION: Creates an object library named kuzu_binder_bind_copy with two source files for copy operations. This library is likely part of the KuzuDB project's binding mechanism.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind/copy/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_binder_bind_copy\n        OBJECT\n        bind_copy_to.cpp\n        bind_copy_from.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Snappy Library in CMake\nDESCRIPTION: Adds the Snappy library as a static library to the project, specifying the source files to be compiled. It then sets up the include directories for the library, making them available to other parts of the project that depend on Snappy.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/snappy/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(snappy\n    STATIC\n    snappy.cc\n    snappy-sinksource.cc)\n\ntarget_include_directories(snappy PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Defining Arithmetic Function Library Components in CMake\nDESCRIPTION: Creates an object library named kuzu_function_arithmetic containing various arithmetic operation implementations. The library includes source files for fundamental arithmetic operations used in the Kuzu database system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/arithmetic/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_function_arithmetic\n        OBJECT\n        multiply.cpp\n        add.cpp\n        subtract.cpp\n        divide.cpp\n        modulo.cpp\n        negate.cpp\n        abs.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Checks and Debugging Options for KuzuDB\nDESCRIPTION: Adds compiler definitions for runtime checks, deserialization debugging, and Link Time Optimization (LTO) based on CMake options.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(${ENABLE_RUNTIME_CHECKS})\n    add_compile_definitions(KUZU_RUNTIME_CHECKS)\nendif()\n\nif (${ENABLE_DESER_DEBUG})\n    add_compile_definitions(KUZU_DESER_DEBUG)\nendif()\n\nif(${ENABLE_LTO})\n    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting ANTLR4 Runtime Compile Options for Windows and Non-Windows Platforms\nDESCRIPTION: This CMake code sets compile options for the ANTLR4 runtime library. It differentiates between Windows and non-Windows platforms, and applies different options for Debug and Release configurations. For Windows, it sets warning levels and optimization flags. For non-Windows platforms, it sets debug symbols, warnings, and optimization levels.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/antlr4_runtime/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(${ANTLR4_RUNTIME} PRIVATE\n    $<$<CONFIG:Debug>:/W4 /Od>\n    $<$<CONFIG:Release>:/O2>\n)\nelse()\n    target_compile_options(${ANTLR4_RUNTIME} PRIVATE\n        $<$<CONFIG:Debug>:-g -Wall -O0>\n        $<$<CONFIG:Release>:-w -O3>\n    )\n    target_compile_options(${ANTLR4_RUNTIME} PUBLIC\n        $<$<CONFIG:Release>:-Wno-attributes>\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Expression Binding Object Library in CMake\nDESCRIPTION: Defines an object library named 'kuzu_binder_bind_expression' with multiple source files for different expression binding implementations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind_expression/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        kuzu_binder_bind_expression\n        OBJECT\n        bind_boolean_expression.cpp\n        bind_case_expression.cpp\n        bind_comparison_expression.cpp\n        bind_function_expression.cpp\n        bind_literal_expression.cpp\n        bind_null_operator_expression.cpp\n        bind_parameter_expression.cpp\n        bind_property_expression.cpp\n        bind_subquery_expression.cpp\n        bind_variable_expression.cpp\n        bind_lambda_expression.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Expression Objects to Parent Scope\nDESCRIPTION: Adds the compiled objects from the kuzu_binder_expression library to the parent scope's ALL_OBJECT_FILES variable for inclusion in the final build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/expression/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_expression>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Processor Operator Scan Library to Project Object Files in CMake\nDESCRIPTION: Appends the objects from the 'kuzu_processor_operator_scan' library to the project's ALL_OBJECT_FILES variable. This ensures that the scan operator objects are included in the final build of the KuzuDB project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/scan/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_scan>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories in KuzuDB CMake\nDESCRIPTION: Sets up include directories for the KuzuDB project, including the main source directory, binary directory, and the third-party yyjson library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n        src/include\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        ${PROJECT_SOURCE_DIR}/third_party/yyjson/src\n)\n```\n\n----------------------------------------\n\nTITLE: Adding kuzu_planner_scan to All Object Files in CMake\nDESCRIPTION: Appends the kuzu_planner_scan library objects to the ALL_OBJECT_FILES variable and propagates it to the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/scan/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_planner_scan>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library for Kuzu Function Cast in CMake\nDESCRIPTION: Defines an object library named kuzu_function_cast with cast_array.cpp as its source file. This library is likely part of the Kuzu database project's function casting functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/cast/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_function_cast\n        OBJECT\n        cast_array.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Planner Persistent Objects to Parent Scope in CMake\nDESCRIPTION: Appends the objects from the kuzu_planner_persistent library to the ALL_OBJECT_FILES variable in the parent scope. This allows the objects to be used in the parent CMakeLists.txt file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/persistent/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_planner_persistent>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for YYJSON\nDESCRIPTION: Configures the public include directories for the yyjson library target, making the current source directory available to dependents\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/yyjson/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(yyjson PUBLIC\n    ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Properties\nDESCRIPTION: Sets up specific compiler definitions and properties for shared library builds. This ensures proper symbol visibility and compatibility when building Brotli as shared libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_SHARED_LIBS)\n  foreach(lib ${BROTLI_LIBRARIES_CORE})\n    target_compile_definitions(${lib} PUBLIC \"BROTLI_SHARED_COMPILATION\" )\n    string(TOUPPER \"${lib}\" LIB)\n    set_target_properties (${lib} PROPERTIES DEFINE_SYMBOL \"${LIB}_SHARED_COMPILATION\")\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Interface Library in CMake\nDESCRIPTION: Creates an interface library named libalp and sets its include directories. Interface libraries in CMake are header-only libraries that specify compilation requirements for their dependencies.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/alp/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(libalp INTERFACE)\n\ntarget_include_directories(libalp INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Reader Operator Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_processor_operator_csv_reader' with specified source files for CSV reading operations in the Kuzu database processor.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/reader/csv/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_csv_reader\n        OBJECT\n        base_csv_reader.cpp\n        driver.cpp\n        parallel_csv_reader.cpp\n        serial_csv_reader.cpp\n        dialect_detection.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Apple-Specific Dynamic Lookup for SQLite Loader in CMake\nDESCRIPTION: Configures dynamic symbol lookup for the SQLite loader on Apple platforms when not building a static extension.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (APPLE AND NOT BUILD_STATIC_EXTENSION)\n    set_apple_dynamic_lookup(sqlite_loader)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Binder Visitor Objects to Parent Scope\nDESCRIPTION: Adds the compiled objects from kuzu_binder_visitor to the ALL_OBJECT_FILES variable in the parent scope for inclusion in the final build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/visitor/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_visitor>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining MbedTLS Static Library\nDESCRIPTION: Creates a static library target for MbedTLS with all its source files including cryptographic implementations and utilities\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/mbedtls/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mbedtls STATIC\n        library/aes.cpp\n        library/aria.cpp\n        library/asn1parse.cpp\n        library/base64.cpp\n        library/bignum.cpp\n        library/camellia.cpp\n        library/cipher.cpp\n        library/cipher_wrap.cpp\n        library/constant_time.cpp\n        library/entropy.cpp\n        library/entropy_poll.cpp\n        library/gcm.cpp\n        library/md.cpp\n        library/oid.cpp\n        library/pem.cpp\n        library/pk.cpp\n        library/pk_wrap.cpp\n        library/pkparse.cpp\n        library/platform_util.cpp\n        library/rsa.cpp\n        library/rsa_alt_helpers.cpp\n        library/sha1.cpp\n        library/sha256.cpp\n        library/sha512.cpp)\n```\n\n----------------------------------------\n\nTITLE: Updating Project Object Files List\nDESCRIPTION: Adds the compiled objects from kuzu_graph library to the parent scope's ALL_OBJECT_FILES variable, which is likely used for final linking of the project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/graph/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_graph>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Static ANTLR4 Cypher Parser Library in CMake\nDESCRIPTION: Configures the compilation of a static library 'antlr4_cypher' from the generated lexer and parser source files. Sets up include directories and links against the ANTLR4 runtime library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/antlr4_cypher/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(antlr4_cypher\n        STATIC\n        cypher_lexer.cpp\n        cypher_parser.cpp)\n\ntarget_include_directories(antlr4_cypher\n        PRIVATE ../antlr4_runtime/src)\n\ntarget_link_libraries(antlr4_cypher PRIVATE antlr4_runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Processor Operator Persistent Object Library\nDESCRIPTION: Creates an object library named 'kuzu_processor_operator_persistent' that includes various implementation files for database operations like batch insertion, deletion, copying, and indexing.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_persistent\n        OBJECT\n        batch_insert_error_handler.cpp\n        node_batch_insert.cpp\n        node_batch_insert_error_handler.cpp\n        rel_batch_insert.cpp\n        copy_to.cpp\n        delete.cpp\n        delete_executor.cpp\n        index_builder.cpp\n        insert.cpp\n        insert_executor.cpp\n        merge.cpp\n        set.cpp\n        set_executor.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Library for KuzuDB Iceberg Extension in CMake\nDESCRIPTION: Defines the kuzu_iceberg_main library with required source files from both the iceberg extension and other dependencies like duckdb and httpfs extensions. This library is used as part of the Iceberg extension integration in KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_iceberg_main\n        OBJECT\n        iceberg_extension.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/main/duckdb_options.cpp\n        ${PROJECT_SOURCE_DIR}/extension/httpfs/src/s3fs_config.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding kuzu_c_api Objects to Parent Scope in CMake\nDESCRIPTION: Adds the generated object files from the kuzu_c_api library to a parent variable named ALL_OBJECT_FILES. This allows the parent CMakeLists.txt file to incorporate these objects into a larger build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/c_api/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_c_api>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Intersect Operator Library in CMake\nDESCRIPTION: Creates an object library for the intersect operator component and adds its objects to the parent scope's object files collection. This configuration is part of KuzuDB's build system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/intersect/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_processor_operator_intersect\n        OBJECT\n        intersect.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_intersect>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating Parent Scope Object Files in CMake\nDESCRIPTION: Appends the kuzu_optimizer object files to the ALL_OBJECT_FILES variable in the parent scope. This allows the parent CMake configuration to include these files in the final build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/optimizer/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_optimizer>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Kuzu Processor Operator Table Scan Objects to Project in CMake\nDESCRIPTION: Appends the objects from the kuzu_processor_operator_table_scan library to the ALL_OBJECT_FILES variable in the parent scope. This allows the objects to be included in the main project build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/table_scan/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_table_scan>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Library to Parent Scope in CMake\nDESCRIPTION: Adds the compiled object files from kuzu_function_algorithm library to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/gds/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_algorithm>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Objects to Parent Scope in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the compiled objects from the kuzu_planner_factorization library. This allows these objects to be used when linking the final targets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/factorization/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_planner_factorization>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Copy Tests to KuzuDB Test Suite\nDESCRIPTION: This snippet calls a custom CMake function named add_kuzu_test to register three copy-related test files into the test suite. The function takes 'copy_tests' as the test group name followed by the list of test source files.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/copy/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_kuzu_test(copy_tests\n        multi_copy_test.cpp\n        import_export.cpp\n        copy_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Extension Library in CMake\nDESCRIPTION: Creates a library target 'duckdb_extension_main' from source files including the main extension, options, and S3 filesystem configuration. Also sets up object files for parent scope compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(duckdb_extension_main\n        OBJECT\n        duckdb_extension.cpp\n        duckdb_options.cpp\n        ${PROJECT_SOURCE_DIR}/extension/httpfs/src/s3fs_config.cpp)\n\nset(DUCKDB_EXTENSION_OBJECT_FILES\n        ${DUCKDB_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_extension_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Union Function Library in CMake\nDESCRIPTION: This CMake code creates an OBJECT library named 'kuzu_function_union' from three source files that handle union extraction, tagging, and values. It then adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/union/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_function_union\n        OBJECT\n        union_extract_function.cpp\n        union_tag_function.cpp\n        union_value_function.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_union>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Expression Binding Objects to Project Scope\nDESCRIPTION: Adds the compiled objects from the expression binding library to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind_expression/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_bind_expression>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Links required libraries including the core kuzu library, optional backtrace support, and Windows-specific ws2_32 library\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(kuzu_shell kuzu)\nif (ENABLE_BACKTRACES)\n    target_link_libraries(kuzu_shell register_backtrace_signal_handler)\nendif ()\nif (MSVC)\n    target_link_libraries(kuzu_shell ws2_32)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding WAL Objects to Parent Scope in CMake\nDESCRIPTION: Adds the compiled objects from the kuzu_storage_wal library to the parent scope's ALL_OBJECT_FILES variable. This makes the WAL component available to the parent build scope for linking into the final executable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/wal/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage_wal>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Kuzu DuckDB Function Objects to Extension in CMake\nDESCRIPTION: Appends the object files from the 'kuzu_duckdb_function' library to the DUCKDB_EXTENSION_OBJECT_FILES variable. This step integrates the Kuzu-specific functions into the broader DuckDB extension build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/function/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(DUCKDB_EXTENSION_OBJECT_FILES\n        ${DUCKDB_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_duckdb_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Unity Catalog Extension Object Files\nDESCRIPTION: Adds the compiled objects from kuzu_unity_catalog_connector library to the parent scope's UNITY_CATALOG_EXTENSION_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/src/connector/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(UNITY_CATALOG_EXTENSION_OBJECT_FILES\n        ${UNITY_CATALOG_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_unity_catalog_connector>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Data Chunk Object Files to Parent Scope in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the object files from the kuzu_common_data_chunk library. This allows the parent CMakeLists.txt to include these files in the final compilation process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/data_chunk/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_data_chunk>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Simple Processor Operators Library\nDESCRIPTION: Creates an object library for simple database operations in KuzuDB. Includes source files for database management operations like attaching, detaching, importing, exporting, and managing extensions.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/simple/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_processor_operator_simple\n        OBJECT\n        attach_database.cpp\n        detach_database.cpp\n        simple.cpp\n        install_extension.cpp\n        load_extension.cpp\n        import_db.cpp\n        export_db.cpp\n        use_database.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding FTS Tests in CMake for KuzuDB\nDESCRIPTION: This CMake snippet conditionally adds full-text search (FTS) tests to the build process when the BUILD_EXTENSION_TESTS flag is enabled. It includes two test files: prepare_test.cpp for testing FTS preparation functionality and read_only_test.cpp for testing FTS read-only operations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/test/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (${BUILD_EXTENSION_TESTS})\n    add_kuzu_test(fts_prepare_test prepare_test.cpp)\n    add_kuzu_test(fts_read_only_test read_only_test.cpp)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating Static Parquet Library in CMake\nDESCRIPTION: Defines a static library named 'parquet' with two source files: parquet_constants.cpp and parquet_types.cpp. This creates the core Parquet library that can be linked into other targets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/parquet/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(parquet\n        STATIC\n        parquet_constants.cpp\n        parquet_types.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building JSON Extension Library for KuzuDB\nDESCRIPTION: Builds a JSON extension library for KuzuDB, with the option to build it as a static library controlled by the BUILD_STATIC_EXTENSION variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"json\")\n```\n\n----------------------------------------\n\nTITLE: Adding SQLite Scan Library in CMake for KuzuDB\nDESCRIPTION: This CMake snippet adds a new library 'kuzu_sqlite_scan' for SQLite scanning functionality. It then updates the SQLITE_EXTENSION_OBJECT_FILES variable to include the newly created library's objects, propagating the change to the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/src/function/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_sqlite_scan\n        OBJECT\n        sqlite_scan.cpp)\n\nset(SQLITE_EXTENSION_OBJECT_FILES\n        ${SQLITE_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_sqlite_scan>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring FTS Extension Library in CMake\nDESCRIPTION: Creates an object library for the Full Text Search extension from fts_extension.cpp source file and adds its objects to the parent scope FTS extension object files collection.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(fts_extension_main\n        OBJECT\n        fts_extension.cpp)\n\nset(FTS_EXTENSION_OBJECT_FILES\n        ${FTS_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:fts_extension_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Objects to Parent Scope\nDESCRIPTION: Adds the compiled objects from kuzu_list_function to the ALL_OBJECT_FILES variable in the parent scope. This allows the parent CMake configuration to include these objects in the final build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/list/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_list_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Apple-specific Dynamic Lookup for Unity Catalog Installer\nDESCRIPTION: Applies Apple-specific dynamic lookup settings to the Unity Catalog installer library when building on Apple platforms.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/src/installer/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (APPLE)\n    set_apple_dynamic_lookup(unity_catalog_installer)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Deleting Records from Iceberg Table in PySpark\nDESCRIPTION: SQL delete statement that removes records from lineitem_iceberg table where extended price is less than 10000.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/test/iceberg_tables/lineitem_iceberg_alter_name/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM iceberg_catalog.lineitem_iceberg where l_extendedprice < 10000\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Binder Copy Objects to All Objects List in CMake\nDESCRIPTION: Appends the objects from the kuzu_binder_bind_copy library to the ALL_OBJECT_FILES variable. This variable is set in the parent scope, suggesting it's used for compiling the entire KuzuDB project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind/copy/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_bind_copy>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Task System Objects to Project in CMake\nDESCRIPTION: This snippet adds the objects from the 'kuzu_common_task_system' library to the overall project's object files list. It updates the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/task_system/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_task_system>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Catalog Library in CMake\nDESCRIPTION: Creates an object library named kuzu_duckdb_catalog with catalog-related source files and adds its objects to the DUCKDB_EXTENSION_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/catalog/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_duckdb_catalog\n        OBJECT\n        duckdb_catalog.cpp\n        duckdb_table_catalog_entry.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(DUCKDB_EXTENSION_OBJECT_FILES\n        ${DUCKDB_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_duckdb_catalog>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Delta Loader for Non-Windows Dynamic Extensions\nDESCRIPTION: For non-Windows platforms with dynamic extensions, creates a shared library loader for the Delta extension. This handles the dynamic loading of the extension into DuckDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT WIN32 AND NOT BUILD_STATIC_EXTENSION)\n    add_library(delta_loader\n            SHARED\n            ${PROJECT_SOURCE_DIR}/extension/duckdb/src/loader/duckdb_loader.cpp)\n    set_extension_properties(delta_loader delta_loader delta)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating FTS Index Catalog Library in CMake\nDESCRIPTION: Defines an object library named 'kuzu_fts_index_catalog' that includes the fts_index_catalog_entry.cpp source file. This library is part of KuzuDB's full-text search functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/src/catalog/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_fts_index_catalog\n        OBJECT\n        fts_index_catalog_entry.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in CMake\nDESCRIPTION: Appends the compiled object files from the kuzu_common_types_value library to the ALL_OBJECT_FILES variable in the parent scope. This allows the parent CMakeLists.txt to incorporate these objects into the final build targets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/types/value/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_types_value>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Platform-Specific Compilation Flags\nDESCRIPTION: Sets platform-specific compilation flags for Windows and Unix systems.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/re2/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n    add_definitions(-DUNICODE\n            -D_UNICODE\n            -DSTRICT\n            -DNOMINMAX)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)\nelseif(UNIX)\n    # add_compile_options(-pthread) list(APPEND EXTRA_TARGET_LINK_LIBRARIES\n    # -pthread)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Iceberg Extension\nDESCRIPTION: Configures include paths for the project, including DuckDB extensions and dependencies. Ensures all necessary header files are available during compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        src/include\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/include\n        ${PROJECT_SOURCE_DIR}/extension/httpfs/src/include\n        ${PROJECT_SOURCE_DIR}/extension/delta/src/include\n        ${DuckDB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Pattern Function Objects to Parent Scope\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the compiled objects from the kuzu_function_pattern library. This makes the pattern function objects available for linking in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/pattern/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_pattern>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Static Extension Linking in KuzuDB CMake\nDESCRIPTION: Iterates through a list of extensions that require static linking and links them to both the static (kuzu) and shared (kuzu_shared) library targets. Each extension follows the naming pattern 'kuzu_[extension_name]_static_extension'.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(ext IN LISTS STATICALLY_LINKED_EXTENSIONS)\n    target_link_libraries(kuzu PRIVATE \"kuzu_${ext}_static_extension\")\n    target_link_libraries(kuzu_shared PRIVATE \"kuzu_${ext}_static_extension\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Storage Index Objects to Project Scope\nDESCRIPTION: Adds the object files from the kuzu_storage_index library to the ALL_OBJECT_FILES variable in the parent scope. This ensures these objects are included in the main project compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/index/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage_index>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Static Library Usage Based on Platform\nDESCRIPTION: Sets whether to use static DuckDB libraries based on the platform (Windows) or build configuration. On Windows or when building a static extension, it uses static libraries; otherwise, it uses dynamic libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32 OR BUILD_STATIC_EXTENSION)\n    set(DuckDB_USE_STATIC_LIBS ON)\nelse ()\n    set(DuckDB_USE_STATIC_LIBS OFF)\nendif ()\nfind_package(DuckDB REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler-Specific Options for GCC in KuzuDB\nDESCRIPTION: Sets compiler-specific options for the GNU C++ Compiler (GCC), including disabling the 'restrict' warning due to a known bug in GCC.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    add_compile_options(-Wno-restrict) # no restrict until https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105651 is fixed\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Extension Library and Object Files in CMake for KuzuDB\nDESCRIPTION: This CMake snippet creates a library target for the vector extension and adds its object files to a parent scope variable. It sets up the 'vector_extension_main' library and appends its objects to the 'VECTOR_EXTENSION_OBJECT_FILES' variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/vector/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(vector_extension_main\n        OBJECT\n        vector_extension.cpp)\n\nset(VECTOR_EXTENSION_OBJECT_FILES\n        ${VECTOR_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:vector_extension_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Object Library for Kuzu Planner Factorization in CMake\nDESCRIPTION: Creates an object library named 'kuzu_planner_factorization' with two source files: flatten_resolver.cpp and sink_util.cpp. Object libraries in CMake compile source files but don't archive or link them, making them useful for code organization.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/factorization/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_planner_factorization\n        OBJECT\n        flatten_resolver.cpp\n        sink_util.cpp)\n```\n\n----------------------------------------\n\nTITLE: Propagating Arrow Library Objects to Parent Scope in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the objects from the kuzu_common_arrow library, ensuring they're available for linking in the parent CMake configuration.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/arrow/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_arrow>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Propagating SQLite Extension Object Files to Parent Scope in CMake\nDESCRIPTION: Sets the SQLITE_EXTENSION_OBJECT_FILES variable in the parent scope to include the objects from the kuzu_sqlite_storage target. This allows the parent CMake file to use these object files when linking the final library or executable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/src/storage/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SQLITE_EXTENSION_OBJECT_FILES\n        ${SQLITE_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_sqlite_storage>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Miniz in CMake\nDESCRIPTION: Sets up the include directories for the Miniz library. It uses generator expressions to specify the build interface include path as the current source directory.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/miniz/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  miniz\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanitizer Support and Math Library Detection\nDESCRIPTION: Sets up compiler flags for sanitizer support if enabled, and checks whether the math library is available. This ensures proper linking with required system libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_SANITIZER)\n  set(CMAKE_C_FLAGS \" ${CMAKE_C_FLAGS} -fsanitize=${ENABLE_SANITIZER}\")\n  set(CMAKE_CXX_FLAGS \" ${CMAKE_CXX_FLAGS} -fsanitize=${ENABLE_SANITIZER}\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=${ENABLE_SANITIZER}\")\nendif ()\n\ninclude(CheckLibraryExists)\nset(LIBM_LIBRARY)\nCHECK_LIBRARY_EXISTS(m log2 \"\" HAVE_LIB_M)\nif(HAVE_LIB_M)\n  set(LIBM_LIBRARY \"m\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Neo4j Migration Extension Objects to Parent Scope in CMake\nDESCRIPTION: Updates the NEO4J_MIGRATION_EXTENSION_OBJECT_FILES variable in the parent scope to include the object files from the neo4j_migration_extension_main target. This makes the compiled objects available to parent CMake files.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/neo4j_migration/src/main/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(NEO4J_MIGRATION_EXTENSION_OBJECT_FILES\n        ${NEO4J_MIGRATION_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:neo4j_migration_extension_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding DDL Objects to Parent Scope\nDESCRIPTION: Adds the compiled DDL operator objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/ddl/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_ddl>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating RE2 Static Library Target\nDESCRIPTION: Adds the RE2 library as a static library target and sets its include directories.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/re2/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(re2 STATIC ${RE2_SOURCES})\ntarget_include_directories(\n        re2\n        PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Columns with INT64 Data Type\nDESCRIPTION: This schema defines a series of columns for a database table. Each column is specified with an ID, name (col[number]), INT64 data type, NULL default value, and a False nullable property.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/function_table_info_answer.txt#2025-04-17_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n1072|col1073|INT64|NULL|False\n1073|col1074|INT64|NULL|False\n1074|col1075|INT64|NULL|False\n...\n1403|col1404|INT64|NULL|False\n1404|col1405|INT64|NULL|False\n```\n\n----------------------------------------\n\nTITLE: Adding kuzu_catalog_entry Library to Parent Scope in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the objects from the kuzu_catalog_entry library. This makes the catalog entry objects available for linking with the main KuzuDB application.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/catalog/catalog_entry/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_catalog_entry>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Extract Functions to Parent Scope in CMake\nDESCRIPTION: Adds the compiled object files from the kuzu_json_extract_functions library to a parent scope variable named JSON_EXTENSION_OBJECT_FILES, making them available for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/functions/extract_functions/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_extract_functions>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Linking JSON Extension with yyjson Library\nDESCRIPTION: Links the KuzuDB JSON extension library with the yyjson library as a private dependency, providing JSON parsing and manipulation capabilities.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        yyjson\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files List in Parent Scope for Kuzu Build in CMake\nDESCRIPTION: This snippet updates the ALL_OBJECT_FILES variable in the parent scope, adding the objects from the kuzu_processor_operator_persistent_reader library. This is likely used for compiling the main Kuzu database executable or library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/reader/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_persistent_reader>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Scope Variables for Iceberg Extension in CMake\nDESCRIPTION: Sets the ICEBERG_EXTENSION_OBJECT_FILES variable in the parent scope to include the objects generated from the kuzu_iceberg_main library. This allows the parent CMake scope to access and link with these object files.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/src/main/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ICEBERG_EXTENSION_OBJECT_FILES\n        ${ICEBERG_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_iceberg_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building JNI Shared Library for Kuzu Java API\nDESCRIPTION: Sets up the build process for the JNI shared library, linking it with the Kuzu native library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/java_api/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${JNI_INCLUDE_DIRS} ${_classDir} ${_stubDir})\nadd_library(kuzu_java_native SHARED src/jni/kuzu_java.cpp)\ntarget_link_libraries(kuzu_java_native PRIVATE kuzu_native_header kuzu)\n```\n\n----------------------------------------\n\nTITLE: Adding Hash Join Object Files to Parent Scope in CMake\nDESCRIPTION: Appends the generated object files from the hash join operator library to the ALL_OBJECT_FILES variable in the parent scope. This makes the compiled objects available for linking in the parent CMakeLists.txt file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/hash_join/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_hash_join>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating FastPFor Static Library in CMake\nDESCRIPTION: Creates a static library named 'fastpfor' using the bitpacking.cpp source file and configures its include directories. The library will be accessible to other targets that link against it with the specified include path.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/fastpfor/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(fastpfor\n        STATIC\n        fastpfor/bitpacking.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(fastpfor PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Group Size in KuzuDB with CMake\nDESCRIPTION: Sets the log2 of vector capacity for node groups, with a default value of 17 (resulting in 64 * 2048 nodes per group). The value is used to generate the system_config.h file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# 64 * 2048 nodes per group\noption(KUZU_NODE_GROUP_SIZE_LOG2 \"Log2 of the vector capacity.\" 17)\nif(NOT KUZU_NODE_GROUP_SIZE_LOG2)\n    set(KUZU_NODE_GROUP_SIZE_LOG2 17)\nendif()\nmessage(STATUS \"KUZU_NODE_GROUP_SIZE_LOG2: ${KUZU_NODE_GROUP_SIZE_LOG2}\")\n\nconfigure_file(${CMAKE_SOURCE_DIR}/cmake/templates/system_config.h.in ${CMAKE_BINARY_DIR}/src/include/common/system_config.h @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Processor Operator Aggregate Objects to ALL_OBJECT_FILES\nDESCRIPTION: This CMake code appends the object files from the kuzu_processor_operator_aggregate library to the ALL_OBJECT_FILES variable. The PARENT_SCOPE keyword ensures that the changes are visible in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/aggregate/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_aggregate>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Unity Catalog Options Library in CMake\nDESCRIPTION: Defines an object library for Unity Catalog options and adds object files to parent scope compilation. Creates a library named kuzu_unity_catalog_options from unity_catalog_options.cpp source file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/src/options/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_unity_catalog_options\n        OBJECT\n        unity_catalog_options.cpp)\n\nset(UNITY_CATALOG_EXTENSION_OBJECT_FILES\n        ${UNITY_CATALOG_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_unity_catalog_options>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Propagating FTS Extension Object Files to Parent Scope\nDESCRIPTION: Adds the object files from the kuzu_fts_index_catalog library to the FTS_EXTENSION_OBJECT_FILES variable and propagates it to the parent scope. This enables higher-level CMake files to include these objects in the final build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/src/catalog/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(FTS_EXTENSION_OBJECT_FILES\n        ${FTS_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_fts_index_catalog>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Checking for Emscripten Compiler Environment\nDESCRIPTION: Detects whether the code is being compiled with Emscripten, which affects certain build settings. This check helps configure platform-specific compilation options.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCSourceCompiles)\ncheck_c_source_compiles(\n  \"#if defined(__EMSCRIPTEN__)\n   int main() {return 0;}\n   #endif\"\n  BROTLI_EMSCRIPTEN\n)\nif (BROTLI_EMSCRIPTEN)\n  message(\"-- Compiler is EMSCRIPTEN\")\nelse()\n  message(\"-- Compiler is not EMSCRIPTEN\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Column Schema Definitions\nDESCRIPTION: Database table column definitions specifying column ID, name, data type (INT64), null handling, and a boolean flag. Each line follows the format: ID|colName|INT64|NULL|False\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/function_table_info_answer.txt#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n1738|col1739|INT64|NULL|False\n1739|col1740|INT64|NULL|False\n1740|col1741|INT64|NULL|False\n[...]\n2069|col2070|INT64|NULL|False\n2070|col2071|INT64|NULL|False\n```\n\n----------------------------------------\n\nTITLE: Setting Windows-Specific Output Name\nDESCRIPTION: Configures the output name to 'kuzu' except on Windows (MSVC) to avoid naming conflicts with library files\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT MSVC)\n    # On Windows, rename the executable to kuzu.exe will cause an error\n    # \"multiple rules generate src/kuzu.lib\", so we do not set the output\n    # name for MSVC.\n    set_target_properties(kuzu_shell PROPERTIES OUTPUT_NAME kuzu)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Scope Object Files in KuzuDB CMake Configuration\nDESCRIPTION: Appends the objects from the 'kuzu_processor_operator_persistent' library to the ALL_OBJECT_FILES variable in the parent scope, making them available for linking in the parent CMakeLists.txt file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_persistent>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Parquet Library in CMake\nDESCRIPTION: Configures the include directories for the 'parquet' target. It uses the BUILD_INTERFACE generator expression to include the current source directory, allowing other targets to include Parquet headers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/parquet/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(parquet PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Delta Extension Library in CMake for KuzuDB\nDESCRIPTION: This CMake snippet defines the delta_extension_main library and sets up its object files. It includes source files from the main project directory and related extensions like DuckDB and HTTPFS.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(delta_extension_main\n        OBJECT\n        delta_extension.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/main/duckdb_options.cpp\n        ${PROJECT_SOURCE_DIR}/extension/httpfs/src/s3fs_config.cpp)\n\nset(DELTA_EXTENSION_OBJECT_FILES\n        ${DELTA_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:delta_extension_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Processing Content-Encoding Header for Shared Brotli\nDESCRIPTION: Defines the steps for handling the Content-Encoding and Sbr-Dict headers when processing a response that uses Shared Brotli compression.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/fetch-spec/shared-brotli-fetch-spec.txt#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nContent-Encoding: sbr\nSbr-Dict: [dictionary-url-and-hash]\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories in CMake for KuzuDB\nDESCRIPTION: Sets up include paths for the project, including the main source directory, binary directory, and the Snowball stemming library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        src/include\n        third_party/snowball/libstemmer)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for RE2\nDESCRIPTION: Sets up the CMake project for RE2, including minimum version requirements, policies, and project name.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/re2/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nif(POLICY CMP0048)\n    cmake_policy(SET CMP0048 NEW)\nendif()\n\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n\nif(POLICY CMP0069)\n    cmake_policy(SET CMP0069 NEW)\nendif()\n\nproject(RE2 CXX)\n\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n\ninclude(CTest)\n\noption(RE2_BUILD_TESTING \"enable testing for RE2\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy for Roaring Bitmap Library\nDESCRIPTION: This snippet sets the CMake policy CMP0063 to NEW if it is defined. This policy affects the visibility of symbols in shared libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/roaring_bitmap/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Position Independent Code\nDESCRIPTION: Enables position independent code compilation for the entire project\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/mbedtls/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n```\n\n----------------------------------------\n\nTITLE: Adding Printer Subdirectory\nDESCRIPTION: Includes the printer subdirectory in the build process\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(printer)\n```\n\n----------------------------------------\n\nTITLE: Configuring HNSW Function Library in CMake for KuzuDB\nDESCRIPTION: Sets up the 'kuzu_hnsw_function' library with object files for creating, dropping, and querying HNSW indexes. The compiled objects are then added to the VECTOR_EXTENSION_OBJECT_FILES variable for use in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/vector/src/function/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_hnsw_function\n        OBJECT\n        create_hnsw_index.cpp\n        drop_hnsw_index.cpp\n        query_hnsw_index.cpp)\n\nset(VECTOR_EXTENSION_OBJECT_FILES\n        ${VECTOR_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_hnsw_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Kuzu Components in CMake\nDESCRIPTION: This snippet adds subdirectories for CSV, NPY, and Parquet components to the build process. These are likely separate modules or libraries within the Kuzu database project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/reader/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(csv)\nadd_subdirectory(npy)\nadd_subdirectory(parquet)\n```\n\n----------------------------------------\n\nTITLE: Setting Statically Linked Extensions Variable in CMake\nDESCRIPTION: Initializes an empty list of statically linked extensions and defines a function to add extensions to this list.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(STATICALLY_LINKED_EXTENSIONS \"\" PARENT_SCOPE)\nfunction(add_static_link_extension extension_name)\n    list(APPEND STATICALLY_LINKED_EXTENSIONS ${extension_name})\n    set(STATICALLY_LINKED_EXTENSIONS \"${STATICALLY_LINKED_EXTENSIONS}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Backtrace Support for KuzuDB\nDESCRIPTION: Sets up the cpptrace library for backtrace functionality when ENABLE_BACKTRACES is enabled. If the library is not found, it fetches it using FetchContent.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_BACKTRACES)\n    find_package(cpptrace)\n    if (NOT cpptrace_FOUND)\n        include(FetchContent)\n        FetchContent_Declare(\n          cpptrace\n          GIT_REPOSITORY https://github.com/jeremy-rifkin/cpptrace.git\n          GIT_TAG        v0.5.4\n          GIT_SHALLOW    TRUE\n        )\n        FetchContent_MakeAvailable(cpptrace)\n    endif()\n    add_compile_definitions(KUZU_BACKTRACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Accept-Encoding Header for Shared Brotli\nDESCRIPTION: Specifies how the Accept-Encoding header should be modified when the recursive-sbr flag is enabled, preventing sbr encoding from being included.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/fetch-spec/shared-brotli-fetch-spec.txt#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nAccept-Encoding: [not containing 'sbr' when recursive-sbr flag is enabled]\n```\n\n----------------------------------------\n\nTITLE: Defining Object Library for Sequence Functions in KuzuDB with CMake\nDESCRIPTION: Creates an object library named kuzu_function_sequence that compiles sequence_functions.cpp. The compiled objects are then added to the ALL_OBJECT_FILES variable in the parent scope for inclusion in the main build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/sequence/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_function_sequence\n        OBJECT\n        sequence_functions.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_sequence>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories\nDESCRIPTION: Sets up the include directory path for header files\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/mbedtls/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Adding 64-bit Only Extensions in CMake\nDESCRIPTION: Calls the conditional include function for extensions that should only be built on 64-bit platforms.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_extension_if_enabled_and_skip_32bit(\"duckdb\")\nadd_extension_if_enabled_and_skip_32bit(\"postgres\")\nadd_extension_if_enabled_and_skip_32bit(\"sqlite\")\nadd_extension_if_enabled_and_skip_32bit(\"delta\")\nadd_extension_if_enabled_and_skip_32bit(\"iceberg\")\nadd_extension_if_enabled_and_skip_32bit(\"unity_catalog\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Extension Include Function in CMake\nDESCRIPTION: Defines a function to conditionally include extension subdirectories if they are in either BUILD_EXTENSIONS or STATICALLY_LINKED_EXTENSIONS lists.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_extension_if_enabled extension)\n    if (\"${extension}\" IN_LIST BUILD_EXTENSIONS OR\n            \"${extension}\" IN_LIST STATICALLY_LINKED_EXTENSIONS)\n        add_subdirectory(${extension})\n    endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking KuzuDB Core Library\nDESCRIPTION: Links the core kuzu library to the Rust bindings library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/rust_api/src/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(kuzu_rs kuzu)\n```\n\n----------------------------------------\n\nTITLE: Defining HNSW Index Library in CMake for KuzuDB\nDESCRIPTION: Creates an OBJECT library named 'kuzu_hnsw_index' that includes several source files related to the HNSW (Hierarchical Navigable Small World) indexing functionality. This type of index is commonly used for approximate nearest neighbor search in vector databases.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/vector/src/index/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_hnsw_index\n        OBJECT\n        hnsw_config.cpp\n        hnsw_index.cpp\n        hnsw_index_utils.cpp\n        hnsw_graph.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library for Kuzu Persistent Reader in CMake\nDESCRIPTION: This snippet defines an object library named 'kuzu_processor_operator_persistent_reader'. It includes source files related to copy operations, file error handling, and reader binding utilities.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/reader/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_persistent_reader\n        OBJECT\n        copy_from_error.cpp\n        file_error_handler.cpp\n        reader_bind_utils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake for KuzuDB Components\nDESCRIPTION: This snippet adds multiple subdirectories to the CMake build, each representing a component of the KuzuDB system. These subdirectories likely contain additional CMakeLists.txt files for their respective components.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(aggregate)\nadd_subdirectory(ddl)\nadd_subdirectory(hash_join)\nadd_subdirectory(intersect)\nadd_subdirectory(order_by)\nadd_subdirectory(persistent)\nadd_subdirectory(scan)\nadd_subdirectory(simple)\nadd_subdirectory(table_scan)\nadd_subdirectory(macro)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Configuration\nDESCRIPTION: Sets the minimum required CMake version to 3.15 and configures project parameters with policy settings. This ensures compatibility with various platforms including Ubuntu 20.04 LTS and Solaris 11.4.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Available CMake versions:\n#  - Ubuntu  20.04 LTS   : 3.16.3\n#  - Solaris 11.4 SRU 15 : 3.15\ncmake_minimum_required(VERSION 3.15)\n\n# Since this project's version is loaded from other files, this policy\n# will help suppress the warning generated by cmake.\n# This policy is set because we can't provide \"VERSION\" in \"project\" command.\n# Use `cmake --help-policy CMP0048` for more information.\ncmake_policy(SET CMP0048 NEW)\nproject(brotli C)\n```\n\n----------------------------------------\n\nTITLE: Adding Kuzu Function Cast to All Object Files in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable to include the objects from the kuzu_function_cast library. This ensures the cast functions are included in the main project compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/cast/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_cast>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Visibility\nDESCRIPTION: Configures C++ symbol visibility to hidden by default\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/mbedtls/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n```\n\n----------------------------------------\n\nTITLE: Adding a Child Directory in CMake for KuzuDB\nDESCRIPTION: Adds a subdirectory named 'value' to the build. This allows the build system to process the CMakeLists.txt file in that directory.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/types/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(value)\n```\n\n----------------------------------------\n\nTITLE: Defining Roaring Bitmap Static Library\nDESCRIPTION: This command defines a static library named 'roaring_bitmap' using the source file 'roaring.c'.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/roaring_bitmap/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(roaring_bitmap STATIC roaring.c)\n```\n\n----------------------------------------\n\nTITLE: Linking Parquet Library to KuzuDB Parquet Writer\nDESCRIPTION: Links the Parquet library to the kuzu_processor_operator_parquet_writer target. This provides the necessary Parquet functionality to the KuzuDB Parquet writer component.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/writer/parquet/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(kuzu_processor_operator_parquet_writer PUBLIC parquet)\n```\n\n----------------------------------------\n\nTITLE: Creating Date Functions Object Library in KuzuDB with CMake\nDESCRIPTION: Creates an object library named 'kuzu_function_date' from the date_functions.cpp source file and adds it to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main KuzuDB build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/date/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_function_date\n        OBJECT\n        date_functions.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_date>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating All Object Files List in CMake\nDESCRIPTION: Appends the objects from the 'kuzu_processor_operator_csv_reader' library to the ALL_OBJECT_FILES variable and propagates it to the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/reader/csv/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_csv_reader>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Generating pkg-config paths with variable substitution in CMake\nDESCRIPTION: This function generates paths for pkg-config files, replacing absolute paths with variable references when possible. It checks if a path matches or is a subdirectory of known variables like prefix, allowing for portable .pc files that work across different installation directories.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(generate_pkg_config_path outvar path)\n  string(LENGTH \"${path}\" path_length)\n\n  set(path_args ${ARGV})\n  list(REMOVE_AT path_args 0 1)\n  list(LENGTH path_args path_args_remaining)\n\n  set(\"${outvar}\" \"${path}\")\n\n  while(path_args_remaining GREATER 1)\n    list(GET path_args 0 name)\n    list(GET path_args 1 value)\n\n    get_filename_component(value_full \"${value}\" ABSOLUTE)\n    string(LENGTH \"${value}\" value_length)\n\n    if(path_length EQUAL value_length AND path STREQUAL value)\n      set(\"${outvar}\" \"\\${${name}}\")\n      break()\n    elseif(path_length GREATER value_length)\n      # We might be in a subdirectory of the value, but we have to be\n      # careful about a prefix matching but not being a subdirectory\n      # (for example, /usr/lib64 is not a subdirectory of /usr/lib).\n      # We'll do this by making sure the next character is a directory\n      # separator.\n      string(SUBSTRING \"${path}\" ${value_length} 1 sep)\n      if(sep STREQUAL \"/\")\n        string(SUBSTRING \"${path}\" 0 ${value_length} s)\n        if(s STREQUAL value)\n          string(SUBSTRING \"${path}\" \"${value_length}\" -1 suffix)\n          set(\"${outvar}\" \"\\${${name}}${suffix}\")\n          break()\n        endif()\n      endif()\n    endif()\n\n    list(REMOVE_AT path_args 0 1)\n    list(LENGTH path_args path_args_remaining)\n  endwhile()\n\n  set(\"${outvar}\" \"${${outvar}}\" PARENT_SCOPE)\nendfunction(generate_pkg_config_path)\n```\n\n----------------------------------------\n\nTITLE: Enforcing KuzuDB Build for Windows Extensions\nDESCRIPTION: Sets BUILD_KUZU to TRUE when building on Windows with extensions, as Windows doesn't support dynamic lookup and requires linking extensions against KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n# Windows doesn't support dynamic lookup, so we have to link extensions against kuzu.\nif (MSVC AND (NOT BUILD_EXTENSIONS EQUAL \"\"))\n    set(BUILD_KUZU TRUE)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for KuzuDB Extension\nDESCRIPTION: Configures the include directories needed for building the KuzuDB extension, including project source directories, binary directories, and DuckDB include paths.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        ${PROJECT_SOURCE_DIR}/extension/httpfs/src/include  # For S3 configuration\n        src/include\n        ${DuckDB_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Conditional Example Directory Inclusion in KuzuDB CMake\nDESCRIPTION: Conditionally adds the C and C++ example subdirectories to the build process based on the BUILD_EXAMPLES CMake variable. This allows example code to be optionally built alongside the main project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif (${BUILD_EXAMPLES})\n    add_subdirectory(examples/c)\n    add_subdirectory(examples/cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding GDS Utils Test to KuzuDB Test Suite with CMake\nDESCRIPTION: Registers the 'gds_utils_test' as a test in the KuzuDB test suite. The test is built from the source file 'gds_utils_test.cpp' and added to the build system using a custom CMake function 'add_kuzu_test'.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/function/gds/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_kuzu_test(gds_utils_test gds_utils_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Glob Interface Library in CMake\nDESCRIPTION: Creates an interface library named Glob and configures its include directories to use the current source directory path. Interface libraries in CMake are header-only libraries that only propagate compilation requirements to their dependencies.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/glob/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(Glob INTERFACE)\n\ntarget_include_directories(Glob INTERFACE ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Multiline Mode Implementation\nDESCRIPTION: Special handling for multiline mode including display formatting, cursor positioning, continuation markers, and enhanced highlighting for comments and errors.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/shell_development_guide.md#2025-04-17_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nrefreshLine()\nhighlight()\nhighlightErrors()\n```\n\n----------------------------------------\n\nTITLE: Adding kuzu_function_export Objects to ALL_OBJECT_FILES in CMake\nDESCRIPTION: This CMake snippet adds the objects from the kuzu_function_export library to the ALL_OBJECT_FILES variable. It uses the PARENT_SCOPE keyword to modify the variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/export/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_export>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Installer Library in CMake for Non-Windows Systems\nDESCRIPTION: Defines the 'postgres_installer' shared library for non-Windows platforms. It includes source files and sets extension properties. For Apple systems, it configures dynamic symbol lookup.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/src/installer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT WIN32)\n    add_library(postgres_installer\n            SHARED\n            postgres_install_func.cpp\n            ${PROJECT_SOURCE_DIR}/extension/duckdb/src/installer/duckdb_installer.cpp)\n    set_extension_properties(postgres_installer postgres_installer postgres)\nendif ()\n\nif (APPLE)\n    set_apple_dynamic_lookup(postgres_installer)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Extract Functions Library in CMake\nDESCRIPTION: Creates an OBJECT library named kuzu_json_extract_functions that compiles json_extract.cpp. This library provides JSON extraction functionality for the KuzuDB database system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/functions/extract_functions/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_json_extract_functions\n        OBJECT\n        json_extract.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Planner Extension Library\nDESCRIPTION: Creates an object library named 'kuzu_planner_extend' from source files implementing logical extension functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/extend/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_planner_extend\n        OBJECT\n        base_logical_extend.cpp\n        logical_extend.cpp\n        logical_recursive_extend.cpp)\n```\n\n----------------------------------------\n\nTITLE: Transforming pkg-config template files in CMake\nDESCRIPTION: Function that transforms pkg-config template files by replacing placeholders with actual values. It substitutes variables like @prefix@, @exec_prefix@, @libdir@, @includedir@, and @PACKAGE_VERSION@ with appropriate values based on CMake variables and installation paths.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(transform_pc_file INPUT_FILE OUTPUT_FILE VERSION)\n  file(READ ${INPUT_FILE} TEXT)\n\n  set(PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n  string(REGEX REPLACE \"@prefix@\" \"${PREFIX}\" TEXT ${TEXT})\n  string(REGEX REPLACE \"@exec_prefix@\" \"${PREFIX}\" TEXT ${TEXT})\n\n  generate_pkg_config_path(LIBDIR \"${CMAKE_INSTALL_FULL_LIBDIR}\" prefix \"${PREFIX}\")\n  string(REGEX REPLACE \"@libdir@\" \"${LIBDIR}\" TEXT ${TEXT})\n\n  generate_pkg_config_path(INCLUDEDIR \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\" prefix \"${PREFIX}\")\n  string(REGEX REPLACE \"@includedir@\" \"${INCLUDEDIR}\" TEXT ${TEXT})\n\n  string(REGEX REPLACE \"@PACKAGE_VERSION@\" \"${VERSION}\" TEXT ${TEXT})\n\n  file(WRITE ${OUTPUT_FILE} ${TEXT})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Delta Extension Object Files in CMake\nDESCRIPTION: Adds the objects from the kuzu_delta_connector library to the DELTA_EXTENSION_OBJECT_FILES variable. This variable is set in the parent scope, likely for use in the main CMakeLists.txt file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/src/connector/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(DELTA_EXTENSION_OBJECT_FILES\n        ${DELTA_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_delta_connector>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Kuzu Database Test in CMake\nDESCRIPTION: This snippet adds a test named 'binder_test' to the Kuzu database project. The test is associated with the source file 'binder_test.cpp'. This is likely part of a CMake configuration for managing project tests.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/binder/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_kuzu_test(binder_test binder_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Build for pybind11 in CMake\nDESCRIPTION: This snippet handles the configuration for building tests. It checks various conditions like BUILD_TESTING, PYBIND11_TEST, and _pybind11_nopython to determine whether to add the tests subdirectory.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/pybind11/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(PYBIND11_MASTER_PROJECT AND DEFINED BUILD_TESTING)\n  if(BUILD_TESTING)\n    if(_pybind11_nopython)\n      message(FATAL_ERROR \"Cannot activate tests in NOPYTHON mode\")\n    else()\n      add_subdirectory(tests)\n    endif()\n  endif()\nelse()\n  if(PYBIND11_TEST)\n    if(_pybind11_nopython)\n      message(FATAL_ERROR \"Cannot activate tests in NOPYTHON mode\")\n    else()\n      add_subdirectory(tests)\n    endif()\n  endif()\nendif()\n\nif(NOT PYBIND11_MASTER_PROJECT)\n  set(pybind11_FOUND\n      TRUE\n      CACHE INTERNAL \"True if pybind11 and all required components found on the system\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Publishing Kuzu-Wasm to npm\nDESCRIPTION: Command to publish the built Kuzu-Wasm package to npm. This makes the package publicly available for other developers to use.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish --access public\n```\n\n----------------------------------------\n\nTITLE: Creating NPY Reader Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_processor_operator_npy_reader' from npy_reader.cpp source file and adds it to the project's object files list for compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/reader/npy/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_processor_operator_npy_reader\n        OBJECT\n        npy_reader.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_npy_reader>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Zstd Static Library Sources\nDESCRIPTION: Creates a static library target for Zstd and specifies all source files to be compiled, including compression, decompression, and common utilities.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/zstd/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(zstd STATIC\n        common/entropy_common.cpp\n        common/error_private.cpp\n        common/fse_decompress.cpp\n        common/xxhash.cpp\n        common/zstd_common.cpp\n        compress/fse_compress.cpp\n        compress/hist.cpp\n        compress/huf_compress.cpp\n        compress/zstd_compress.cpp\n        compress/zstd_compress_literals.cpp\n        compress/zstd_compress_sequences.cpp\n        compress/zstd_compress_superblock.cpp\n        compress/zstd_double_fast.cpp\n        compress/zstd_fast.cpp\n        compress/zstd_lazy.cpp\n        compress/zstd_ldm.cpp\n        compress/zstd_opt.cpp\n        decompress/huf_decompress.cpp\n        decompress/zstd_ddict.cpp\n        decompress/zstd_decompress.cpp\n        decompress/zstd_decompress_block.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Storage Index Library in CMake\nDESCRIPTION: Creates an object library named kuzu_storage_index with hash_index.cpp and in_mem_hash_index.cpp source files. This library is likely part of the storage indexing functionality in KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/index/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_storage_index\n        OBJECT\n        hash_index.cpp\n        in_mem_hash_index.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library for Neo4j Migration Extension Function in CMake\nDESCRIPTION: This CMake snippet creates an object library named 'kuzu_neo4j_migration_extension_function' from the 'neo4j_migrate.cpp' source file. It's part of the KuzuDB project and is used for Neo4j migration functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/neo4j_migration/src/function/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_neo4j_migration_extension_function\n        OBJECT\n        neo4j_migrate.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Planner Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for join order, operator, and plan components to the build system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(join_order)\nadd_subdirectory(operator)\nadd_subdirectory(plan)\n```\n\n----------------------------------------\n\nTITLE: TPC-H Q06 Query Result\nDESCRIPTION: Output showing the revenue result from TPC-H Q06 query execution in PySpark format.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/test/iceberg_tables/lineitem_iceberg_alter_name/README.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[Row(revenue=Decimal('1077536.9101'))]\n```\n\n----------------------------------------\n\nTITLE: Setting macOS-Specific Dynamic Lookup for Iceberg Loader\nDESCRIPTION: Configures dynamic symbol lookup for the Iceberg loader on macOS platforms when building a dynamic extension. This addresses macOS-specific dynamic linking requirements.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE AND NOT BUILD_STATIC_EXTENSION)\n    set_apple_dynamic_lookup(iceberg_loader)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectories in CMake\nDESCRIPTION: Adds various subdirectories to the build process including installer, main, connector, storage, and options components.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(src/installer)\nadd_subdirectory(src/main)\nadd_subdirectory(src/connector)\nadd_subdirectory(src/storage)\nadd_subdirectory(src/options)\n```\n\n----------------------------------------\n\nTITLE: Defining Shell Configuration Structure\nDESCRIPTION: Shows the ShellConfig struct that holds shell settings like history path, maximum row size, print width, printer type and statistics display settings.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/shell_development_guide.md#2025-04-17_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nstruct  ShellConfig {\n\tconst  char* path_to_history = \"\";\n\tuint64_t  maxRowSize = defaultMaxRows;\n\tuint32_t  maxPrintWidth = 0;\n\tstd::unique_ptr<Printer> printer = std::make_unique<BoxPrinter>();\n\tbool  stats = true;\n};\n```\n\n----------------------------------------\n\nTITLE: Packaging Kuzu Node.js API with Prebuilt Binaries\nDESCRIPTION: Command to package the Kuzu Node.js API, including prebuilt binaries for different platforms and architectures.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode package\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Extension Library in CMake\nDESCRIPTION: Defines an object library named 'sqlite_extension_main' with the source file 'sqlite_extension.cpp'. This creates a compilation target for the SQLite extension functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(sqlite_extension_main\n        OBJECT\n        sqlite_extension.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating YYJSON Static Library Target\nDESCRIPTION: Defines a static library target named 'yyjson' that compiles the yyjson.c source file\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/yyjson/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(yyjson\n    STATIC\n    src/yyjson.c)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories and Source Files\nDESCRIPTION: Configures include directories for Node.js addon development and collects source files for the build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/nodejs_api/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nget_filename_component(NODE_ADDON_API_INCLUDE_PATH ./node_modules/node-addon-api ABSOLUTE)\n\ninclude_directories(${CMAKE_JS_INC})\ninclude_directories(${NODE_ADDON_API_INCLUDE_PATH})\n\nfile(GLOB CPP_SOURCE_FILES ./src_cpp/*)\nfile(GLOB JS_SOURCE_FILES ./src_js/*.js)\nfile(COPY ${JS_SOURCE_FILES} DESTINATION  \"${CMAKE_CURRENT_SOURCE_DIR}/build\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Kuzu SQLite Connector Library and Object Files in CMake\nDESCRIPTION: Defines the kuzu_sqlite_connector library as an OBJECT library with source files from DuckDB connector and SQLite connector. After defining the library, it adds the resulting object files to the SQLITE_EXTENSION_OBJECT_FILES variable and propagates it to the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/src/connector/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_sqlite_connector\n        OBJECT\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_connector.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_result_converter.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_type_converter.cpp\n        sqlite_connector.cpp)\n\nset(SQLITE_EXTENSION_OBJECT_FILES\n        ${SQLITE_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_sqlite_connector>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting C++17 Standard for Compilation\nDESCRIPTION: Adds a compile option to use the C++17 standard for all compilers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/re2/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_options(-std=c++17)\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Extension Library for KuzuDB in CMake\nDESCRIPTION: Builds the SQLite extension library and links it with DuckDB libraries. The build_extension_lib function is called with the BUILD_STATIC_EXTENSION flag.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"sqlite\")\n\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        ${DuckDB_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Including Extension Configuration in CMake\nDESCRIPTION: Includes the extension configuration file and propagates the STATICALLY_LINKED_EXTENSIONS variable to the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(extension_config.cmake)\nset(STATICALLY_LINKED_EXTENSIONS \"${STATICALLY_LINKED_EXTENSIONS}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for Unity Catalog Extension\nDESCRIPTION: Configures the include directories for the project, including the main source directories, binary directory, DuckDB extension, and httpfs extension for S3 configuration.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        src/include\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/include\n        ${PROJECT_SOURCE_DIR}/extension/httpfs/src/include  # For S3 configuration\n        ${DuckDB_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Mapping Numeric Identifiers in KuzuDB Project\nDESCRIPTION: This data structure represents a mapping of numeric identifiers to their corresponding values. Each line follows the format 'key|value1:value2|value3', where 'key' is a unique identifier, 'value1' is always 1, 'value2' is the same as the key, and 'value3' is always 0.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_single_bwd_answer.txt#2025-04-17_snippet_3\n\nLANGUAGE: Plain Text\nCODE:\n```\n4919|1:4919|0\n491|1:491|0\n4920|1:4920|0\n4921|1:4921|0\n4922|1:4922|0\n...\n9|1:9|0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Local Development\nDESCRIPTION: Command to install necessary dependencies for local development of Kuzu-Wasm. This is relevant for contributors to the project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Defining and Adding KuzuDB Storage Predicate Library in CMake\nDESCRIPTION: Creates an object library called kuzu_storage_predicate with three source files (null_predicate.cpp, column_predicate.cpp, and constant_predicate.cpp), then adds the compiled objects to the ALL_OBJECT_FILES variable in the parent scope for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/predicate/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_storage_predicate\n        OBJECT\n        null_predicate.cpp\n        column_predicate.cpp\n        constant_predicate.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage_predicate>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options for Non-MSVC Builds\nDESCRIPTION: Conditional compiler flag setting that adds -Wno-extra option for non-Microsoft Visual C++ compilers to suppress extra warnings\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/yyjson/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT MSVC)\n    add_compile_options(-Wno-extra)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB Storage Statistics Library in CMake\nDESCRIPTION: Defines an object library named kuzu_storage_stats with source files for column stats, HyperLogLog, and table stats. It then adds the generated object files to the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/storage/stats/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_storage_stats\n        OBJECT\n        column_stats.cpp\n        hyperloglog.cpp\n        table_stats.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_storage_stats>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Delta Extension Object Files\nDESCRIPTION: Appends the compiled objects from kuzu_delta_function library to the DELTA_EXTENSION_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/src/function/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(DELTA_EXTENSION_OBJECT_FILES\n        ${DELTA_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_delta_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Parser to All Object Files in CMake\nDESCRIPTION: Appends the kuzu_parser object library to the ALL_OBJECT_FILES variable, which is then propagated to the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/parser/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_parser>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Person Data File Structure in CSV Format\nDESCRIPTION: This comment describes the structure of the vPerson.csv file, indicating it contains 10,000 person nodes with a maximum offset of 9999. This is likely used for data import into KuzuDB graph database.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/dataset/hash-index-test/string-pk-test/readme.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Contains 10K nodes (so maxOffset is 9999)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Compression Test\nDESCRIPTION: Specifies additional include directory for the compression test target, linking to ALP library headers in third party dependencies.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/storage/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(compression_test PRIVATE ${PROJECT_SOURCE_DIR}/third_party/alp/include)\n```\n\n----------------------------------------\n\nTITLE: Specifying Linting and Formatting Dependencies for KuzuDB in Python\nDESCRIPTION: This snippet lists the Python packages required for linting and formatting in the KuzuDB project. It includes specific versions of ruff for linting, mypy for static type checking, and uv for package management.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/python_api/requirements_dev.txt#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# required for lint/formatting\nruff==0.3.2\nmypy==1.9.0\nuv==0.1.17\n```\n\n----------------------------------------\n\nTITLE: Adding Planner Cardinality Test for KuzuDB in CMake\nDESCRIPTION: This CMake command adds a test for the KuzuDB planner module, focusing on cardinality estimation. It uses a custom function 'add_kuzu_test' to include the test file 'cardinality_test.cpp' in the 'planner_tests' test suite.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/planner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_kuzu_test(planner_tests cardinality_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Current Time Test in KuzuDB with CMake\nDESCRIPTION: Uses the custom add_kuzu_test CMake function to register a test for the current_time functionality. The function call specifies the test name and the corresponding C++ source file to be compiled and executed as part of the test suite.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/transaction/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_kuzu_test(current_time_test current_time_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Kuzu Processor Operator Table Scan Library in CMake\nDESCRIPTION: Creates a new object library named kuzu_processor_operator_table_scan with source files ftable_scan_function.cpp and union_all_scan.cpp. This library is part of the Kuzu database project's processor component.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/table_scan/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_table_scan\n        OBJECT\n        ftable_scan_function.cpp\n        union_all_scan.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Compatibility Tests\nDESCRIPTION: Configures tests to verify compatibility with pre-compressed files. This ensures the decoder can properly decompress files created with other versions of Brotli or specific settings.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n  file(GLOB_RECURSE\n    COMPATIBILITY_INPUTS\n    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}\n    tests/testdata/*.compressed*)\n\n  foreach(INPUT ${COMPATIBILITY_INPUTS})\n    add_test(NAME \"${BROTLI_TEST_PREFIX}compatibility/${INPUT}\"\n      COMMAND \"${CMAKE_COMMAND}\"\n        -DBROTLI_WRAPPER=${BROTLI_WRAPPER}\n        -DBROTLI_WRAPPER_LD_PREFIX=${BROTLI_WRAPPER_LD_PREFIX}\n        -DBROTLI_CLI=$<TARGET_FILE:brotli>\n        -DINPUT=${CMAKE_CURRENT_SOURCE_DIR}/${INPUT}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/tests/run-compatibility-test.cmake)\n  endforeach()\nendif()  # BROTLI_DISABLE_TESTS\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definition for Parquet Library in CMake\nDESCRIPTION: Adds a compile definition 'HAVE_STDINT_H' to the 'parquet' target. This definition is made public, meaning it will be propagated to targets that link against the Parquet library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/parquet/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(parquet PUBLIC HAVE_STDINT_H)\n```\n\n----------------------------------------\n\nTITLE: Pipe-Delimited Data Records\nDESCRIPTION: CSV-like data containing three columns: an ID number, a mapped value, and an array representation of the mapped value. The data follows a consistent pattern of pipe-delimited fields with bracketed array values.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/insert_rels_to_large_list_commit.txt#2025-04-17_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n578|2422|[2422]\n579|2421|[2421]\n57|2943|[2943]\n580|2420|[2420]\n581|2419|[2419]\n...\n|ontario|[excellent]\n||\n```\n\n----------------------------------------\n\nTITLE: Running Kuzu LSQB Benchmark\nDESCRIPTION: Command to execute the LSQB (Labeled Subgraph Query Benchmark) runner script for Kuzu database performance testing.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/benchmark/lsqb/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 benchmark/lsqb/benchmark_runner.py\n```\n\n----------------------------------------\n\nTITLE: Linking DuckDB Libraries to Iceberg Extension\nDESCRIPTION: Links the DuckDB libraries and delta connector to the Iceberg extension. Establishes dependencies between the components.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        ${DuckDB_LIBRARIES}\n        delta_connector)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Optimizer Test in CMake\nDESCRIPTION: This CMake command adds a test for the KuzuDB optimizer. It uses a custom function 'add_kuzu_test' to create the test, specifying the test name as 'optimizer_test' and the source file as 'optimizer_test.cpp'.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/optimizer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_kuzu_test(optimizer_test optimizer_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Connector Object Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_duckdb_connector' that compiles various DuckDB connector implementation files. The library contains components for local and remote connectors, a factory class, and various type and result converters.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/connector/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_duckdb_connector\n        OBJECT\n        duckdb_connector.cpp\n        local_duckdb_connector.cpp\n        remote_duckdb_connector.cpp\n        connector_factory.cpp\n        duckdb_result_converter.cpp\n        duckdb_secret_manager.cpp\n        duckdb_type_converter.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Brotli pkg-config files and documentation in CMake\nDESCRIPTION: CMake code that handles the installation of generated pkg-config files and documentation. It installs the .pc files to the pkgconfig directory within the library directory, and optionally installs man pages for Brotli tools. The installation is conditional based on build configuration flags.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT BROTLI_BUNDLED_MODE)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlicommon.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlidec.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlienc.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nendif()  # BROTLI_BUNDLED_MODE\n\nif (BROTLI_BUILD_TOOLS)\n  install(FILES \"docs/brotli.1\"\n    DESTINATION \"${CMAKE_INSTALL_FULL_MANDIR}/man1\")\nendif()\n\nif (ENABLE_COVERAGE STREQUAL \"yes\")\n  setup_target_for_coverage(coverage test coverage)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options for MSVC\nDESCRIPTION: Sets compiler options for Microsoft Visual Studio, including warning suppressions and UTF-8 encoding.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/re2/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\")\n    if(MSVC_VERSION LESS 1900)\n        message(FATAL_ERROR \"you need Visual Studio 2015 or later\")\n    endif()\n    if(BUILD_SHARED_LIBS)\n        cmake_minimum_required(VERSION 3.4)\n        set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n    endif()\n    add_compile_options(/wd4100\n            /wd4201\n            /wd4456\n            /wd4457\n            /wd4702\n            /wd4815)\n    add_compile_options(/utf-8)\nelseif(CYGWIN OR MINGW)\n    add_compile_options(-std=gnu++11)\nelseif(CMAKE_CXX_COMPILER_ID MATCHES \"GNU|Clang\")\n    add_compile_options(-std=c++17)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB Extension Library\nDESCRIPTION: Invokes the build_extension_lib function to build the DuckDB extension library with the specified static extension flag.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"duckdb\")\n```\n\n----------------------------------------\n\nTITLE: Adding Thrift Static Library in CMake for KuzuDB\nDESCRIPTION: This CMake snippet adds the Thrift library as a static library to the KuzuDB project. It specifies the source files for the library and sets the include directories.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/thrift/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(thrift\n        STATIC\n        protocol/TProtocol.cpp\n        transport/TTransportException.cpp\n        transport/TBufferTransports.cpp)\n\ntarget_include_directories(thrift PUBLIC ./include)\n```\n\n----------------------------------------\n\nTITLE: Creating Kuzu DuckDB Function Library in CMake\nDESCRIPTION: Defines an object library named 'kuzu_duckdb_function' with source files for clearing cache and DuckDB scanning functionality. This library is part of the Kuzu project's integration with DuckDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/function/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_duckdb_function\n        OBJECT\n        clear_cache.cpp\n        duckdb_scan.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Kuzu WebAssembly\nDESCRIPTION: Command to install required Node.js dependencies for the Kuzu WebAssembly example.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/examples/nodejs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Defining Parquet Reader Library in CMake\nDESCRIPTION: Creates an object library for the Parquet reader component with multiple source files handling different column types. Sets up the compilation of various column readers for Parquet format processing.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/reader/parquet/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_processor_operator_parquet_reader\n        OBJECT\n        boolean_column_reader.cpp\n        column_reader.cpp\n        parquet_reader.cpp\n        interval_column_reader.cpp\n        struct_column_reader.cpp\n        string_column_reader.cpp\n        list_column_reader.cpp\n        parquet_timestamp.cpp\n        uuid_column_reader.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Utils Test with String Format in KuzuDB\nDESCRIPTION: Adds a test named 'utils_test' to the KuzuDB test suite using the string_format.cpp file as the test source. This uses a custom CMake function named 'add_kuzu_test' defined elsewhere in the project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/util_tests/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_kuzu_test(utils_test\n        string_format.cpp)\n```\n\n----------------------------------------\n\nTITLE: Platform Detection and Architecture Settings\nDESCRIPTION: Detects operating system and architecture, setting appropriate variables and compile definitions.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(OS_NAME \"unknown\")\nset(OS_ARCH \"amd64\")\n\nstring(REGEX MATCH \"(arm64|aarch64)\" IS_ARM \"${CMAKE_SYSTEM_PROCESSOR}\")\nif(IS_ARM)\n  set(OS_ARCH \"arm64\")\nelseif(FORCE_32_BIT)\n  set(OS_ARCH \"i386\")\nendif()\n\nif(APPLE)\n  set(OS_NAME \"osx\")\nendif()\nif(WIN32)\n  set(OS_NAME \"windows\")\nendif()\nif(UNIX AND NOT APPLE)\n  set(OS_NAME \"linux\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for KuzuDB Shell\nDESCRIPTION: Sets up include paths for the project including core headers and third-party dependencies like taywee_args and yyjson\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n        include\n        ${PROJECT_SOURCE_DIR}/third_party/taywee_args/include\n        ${PROJECT_SOURCE_DIR}/third_party/yyjson/src\n        ${PROJECT_SOURCE_DIR}/extension/json/src/include\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectories in CMake\nDESCRIPTION: Adds various project subdirectories including catalog, function, main components, tests, and third-party dependencies.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(src/catalog)\nadd_subdirectory(src/function)\nadd_subdirectory(src/main)\nadd_subdirectory(test)\n\nadd_subdirectory(third_party/snowball)\n```\n\n----------------------------------------\n\nTITLE: Delete Operation on Iceberg Table\nDESCRIPTION: SQL delete query to remove records from lineitem_iceberg table where extended price is less than 10000.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/test/iceberg_tables/lineitem_iceberg/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM iceberg_catalog.lineitem_iceberg where l_extendedprice < 10000\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Kuzu WebAssembly Example\nDESCRIPTION: This command installs the necessary dependencies for the Kuzu WebAssembly example project using npm (Node Package Manager).\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/examples/browser_in_memory/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Utility Function Objects to Project in CMake\nDESCRIPTION: This CMake snippet adds the compiled object files from the 'kuzu_utility_function' library to the overall project's object files list. It uses the PARENT_SCOPE keyword to modify the variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/utility/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_utility_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Graph Structure Comments Documentation\nDESCRIPTION: Detailed documentation of a graph structure with 6000 person nodes, describing node relationships, edge properties, and storage specifications. Includes information about edge properties and their values, particularly focusing on the int64Prop property behavior.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/dataset/read-list-tests/large-list/readme.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# This graph has 6000 person nodes (we abbreviate person to p below)\n# node p0: has edges to all 5K p's including a self loop.\n# nodes p1-p5000 have edges to p5000.\n# p5001-p6000: have no incoming or outgoing edges\n# This structures ensures the following:\n# p0 has a large forward list and 1-edge backward list.\n# p5000 has: a large backward list and 1-edge forward list.\n# p1-p4999: have small forward, small backward lists.\n# p5001-p6000: are singletons (empty forward and backward lists).\n# This is a MANY-TO-MANY relationship. Because there are < 65536 person nodes,\n# knows edges should use 2 bytes/edge: 0 byte for label and 2 bytes for offset.\n# Finally: The edges have an INT64 property with key int64Prop. For any edge\n# whose source is p0, the value is the ID of the destination node, e.g., e=0->5 has\n# int64Prop:5. The only exceptions are 0->0, 0->1000, 0->2000,... 0->5000. These 6\n# edges have null int64prop values. For others the property is null.\n```\n\n----------------------------------------\n\nTITLE: Creating Static Test Helper Library for KuzuDB in CMake\nDESCRIPTION: Defines a static library called 'test_helper' using test_helper.cpp source file, sets include directories, and links it with the static 'kuzu' library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/test_helper/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        test_helper\n        OBJECT\n        test_helper.cpp\n)\n\ntarget_include_directories(\n        test_helper\n        PUBLIC\n        ../include/\n)\n\ntarget_link_libraries(test_helper PUBLIC kuzu)\n```\n\n----------------------------------------\n\nTITLE: Conditional Backtrace Library Configuration in CMake\nDESCRIPTION: CMake code that conditionally builds a backtrace signal handler library when ENABLE_BACKTRACES is true. The library is created from register.cpp and linked against the cpptrace library for stack trace functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/signal/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (ENABLE_BACKTRACES)\n    add_library(register_backtrace_signal_handler OBJECT register.cpp)\n    target_link_libraries(register_backtrace_signal_handler cpptrace::cpptrace)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting FTS Extension Object Files in Parent Scope\nDESCRIPTION: Adds the compiled objects from kuzu_fts_function library to the parent scope's FTS_EXTENSION_OBJECT_FILES variable for further use in the build system.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/fts/src/function/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(FTS_EXTENSION_OBJECT_FILES\n        ${FTS_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_fts_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring the graph_test Library in CMake\nDESCRIPTION: Creates a graph_test object library from source files and configures its include directories and dependencies. This test library links against the static KuzuDB library and Google Test framework.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/graph_test/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(\n        graph_test\n        OBJECT\n        base_graph_test.cpp\n        graph_test.cpp)\n\ntarget_include_directories(\n        graph_test\n        PUBLIC\n        ../include/\n)\n\ntarget_link_libraries(graph_test PUBLIC GTest::GTest kuzu)\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Kuzu WebAssembly Module\nDESCRIPTION: This command runs a bootstrap script that copies the WebAssembly module to the appropriate location in the project structure.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/examples/browser_in_memory/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run bootstrap\n```\n\n----------------------------------------\n\nTITLE: Propagating Object Files to Parent Scope in CMake\nDESCRIPTION: Appends the compiled objects from the kuzu_main library to the ALL_OBJECT_FILES variable in the parent scope. This allows these object files to be used when linking the final library or executable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/main/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Package Reference Example\nDESCRIPTION: Inline code reference showing the package name for documentation purposes.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/src_js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`kuzu-wasm`\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Struct Function Library in CMake\nDESCRIPTION: Defines an object library named 'kuzu_function_struct' that includes implementation files for struct extraction, packing, and key operations. The compiled object files are added to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/struct/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_function_struct\n        OBJECT\n        struct_extract_function.cpp\n        struct_pack_function.cpp\n        keys_function.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_struct>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating ALL_OBJECT_FILES with kuzu_processor_result Objects in CMake\nDESCRIPTION: Appends the objects from the kuzu_processor_result library to the ALL_OBJECT_FILES variable. This is done in the parent scope, likely to be used for further compilation or linking steps in the project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/result/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_result>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffered JSON Reader Library in CMake\nDESCRIPTION: Creates an object library for buffered JSON reader component and adds its object files to a parent scope variable for JSON extensions. Uses CMake's add_library and set commands to manage build configuration.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/reader/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_buffered_json_reader\n        OBJECT\n        buffered_json_reader.cpp)\n\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_buffered_json_reader>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Iceberg Loader Library for Non-Windows Platforms\nDESCRIPTION: Creates a shared library for loading the Iceberg extension on non-Windows platforms when not building a static extension. Uses DuckDB's loader mechanism.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT WIN32 AND NOT BUILD_STATIC_EXTENSION)\n    add_library(iceberg_loader\n            SHARED\n            ../duckdb/src/loader/duckdb_loader.cpp)\n    set_extension_properties(iceberg_loader iceberg_loader iceberg)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Unity Catalog Extension Object Files Variable\nDESCRIPTION: Sets the UNITY_CATALOG_EXTENSION_OBJECT_FILES variable in the parent scope to include the object files from the kuzu_unity_catalog_storage target.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/src/storage/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(UNITY_CATALOG_EXTENSION_OBJECT_FILES\n        ${UNITY_CATALOG_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_unity_catalog_storage>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB JSON Utils Library\nDESCRIPTION: Creates an OBJECT library named kuzu_json_utils from json_utils.cpp source file and adds its object files to JSON_EXTENSION_OBJECT_FILES variable in parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/utils/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_json_utils\n        OBJECT\n        json_utils.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_utils>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple-Specific Dynamic Lookup for Extension Loader\nDESCRIPTION: For Apple platforms that aren't building a static extension, sets up dynamic symbol lookup for the Unity Catalog loader library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE AND NOT BUILD_STATIC_EXTENSION)\n    set_apple_dynamic_lookup(unity_catalog_loader)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Apple-Specific Dynamic Lookup for DuckDB Installer\nDESCRIPTION: Applies Apple-specific dynamic lookup settings for the DuckDB installer library when building on macOS platforms.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/installer/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE)\n    set_apple_dynamic_lookup(duckdb_installer)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding SQLite Extension Objects to Parent Scope in CMake\nDESCRIPTION: Appends the object files from the 'sqlite_extension_main' library to the SQLITE_EXTENSION_OBJECT_FILES variable in the parent scope. This allows the parent CMakeLists.txt to include these objects in the final build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/src/main/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SQLITE_EXTENSION_OBJECT_FILES\n        ${SQLITE_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:sqlite_extension_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Common Copier Configuration Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_common_copier_config' with CSV reader and general reader configuration implementations. The compiled objects are then added to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/copier_config/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_common_copier_config\n        OBJECT\n        csv_reader_config.cpp\n        reader_config.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting C Standard Version\nDESCRIPTION: Sets the C language standard to C99 for the mbedtls target\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/mbedtls/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET mbedtls PROPERTY C_STANDARD 99)\n```\n\n----------------------------------------\n\nTITLE: Graph Structure Comment Description\nDESCRIPTION: Documents the structure of a test graph with 4090 person nodes, specifying the edge relationships between nodes. Node p0 connects to all other nodes, p1 connects to a specific range, and remaining nodes have no edges.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/dataset/read-list-tests/large-list-sub-query-tests/readme.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This graph has 4090 person nodes (we abbreviate person to p below)\n# node p0: has edges to all other nodes except p0.\n# nodes p1: has edges to [p2,p3,...,p2049,p2050].\n# all other nodes don't have any edges.\n# See \"test/runner/queries/list-reading/large-list-sub-query.test\" for an example test.\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB Loader Extension for Non-Windows Systems\nDESCRIPTION: Configures the build process for the DuckDB loader extension as a shared library on non-Windows systems. It sets up the library target and applies extension-specific properties.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/loader/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT WIN32)\n    add_library(duckdb_loader\n            SHARED\n            duckdb_loader.cpp)\n    set_extension_properties(duckdb_loader duckdb_loader duckdb)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Planner Extension Objects to Parent Scope\nDESCRIPTION: Adds the compiled object files from kuzu_planner_extend to the parent scope's ALL_OBJECT_FILES variable for further linking.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/extend/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_planner_extend>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for KuzuDB Rust Bindings\nDESCRIPTION: Sets up private include directories for the kuzu_rs library, including core headers and Rust binding headers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/rust_api/src/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(kuzu_rs\n    PRIVATE\n        ${CMAKE_CURRENT_SOURCE_DIR}/../include\n        ${KUZU_RS_BINDINGS_DIR}/include\n        ${KUZU_RS_BINDINGS_DIR}/crate\n        ${KUZU_RS_BINDINGS_DIR}/sources\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Storage Library in CMake\nDESCRIPTION: Creates a DuckDB storage library as an object library and adds its object files to the parent scope's DUCKDB_EXTENSION_OBJECT_FILES variable. This configuration enables the integration of DuckDB storage functionality into the KuzuDB project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/storage/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_duckdb_storage\n        OBJECT\n        duckdb_storage.cpp)\n\nset(DUCKDB_EXTENSION_OBJECT_FILES\n        ${DUCKDB_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_duckdb_storage>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Brotli Python Module\nDESCRIPTION: Commands to install the Brotli Python module. The first command installs the latest release version via pip, while the second installs the development version directly from the GitHub repository.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install brotli\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install --upgrade git+https://github.com/google/brotli\n```\n\n----------------------------------------\n\nTITLE: Creating Unity Catalog Extension Library in CMake\nDESCRIPTION: Adds a new library target for the Unity Catalog Extension. The library is created as an OBJECT library, which means it will be used to generate object files that can be linked into other targets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(unity_catalog_extension_main\n        OBJECT\n        unity_catalog_extension.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Timestamp Function Library in CMake\nDESCRIPTION: Creates an object library named kuzu_timestamp_function including to_epoch_ms.cpp source file and adds it to the parent scope's object files collection.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/timestamp/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_timestamp_function\n        OBJECT\n        to_epoch_ms.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_timestamp_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Database ID Mapping Format\nDESCRIPTION: This snippet demonstrates the format used for mapping database IDs to internal system IDs. Each line represents a single record with three fields: the original ID, a derived internal ID (prefixed with '1:'), and a constant value of 5000.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_single_fwd_answer.txt#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n777|1:5777|5000\n778|1:5778|5000\n779|1:5779|5000\n77|1:5077|5000\n780|1:5780|5000\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0063 for LZ4 Library\nDESCRIPTION: This snippet sets the CMake policy CMP0063 to NEW if it's available. This policy determines the visibility of symbols in shared libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/lz4/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSSL for HTTP Filesystem Extension in CMake\nDESCRIPTION: Sets up OpenSSL dependency configuration, adjusting static/dynamic linking based on whether address sanitizer is enabled. When address sanitizer is enabled, dynamic linking is used to avoid ABI compatibility issues.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/httpfs/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)\nSET(CMAKE_FIND_PACKAGE_SORT_DIRECTION DEC)\n# Address sanitizer may change the ABI, so we use dynamic linking\n# if it's enabled.\nif (${ENABLE_ADDRESS_SANITIZER})\n    SET(OPENSSL_USE_STATIC_LIBS FALSE)\nelse ()\n    SET(OPENSSL_USE_STATIC_LIBS TRUE)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding HNSW Index Objects to Parent Scope in CMake\nDESCRIPTION: Appends the compiled object files from the HNSW index library to the VECTOR_EXTENSION_OBJECT_FILES variable in the parent scope. This allows these objects to be included when building the main KuzuDB project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/vector/src/index/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(VECTOR_EXTENSION_OBJECT_FILES\n        ${VECTOR_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_hnsw_index>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Independent Extensions in CMake\nDESCRIPTION: Calls the standard conditional include function for extensions that can be built on any platform.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_extension_if_enabled(\"json\")\nadd_extension_if_enabled(\"fts\")\nadd_extension_if_enabled(\"vector\")\nadd_extension_if_enabled(\"httpfs\")\nadd_extension_if_enabled(\"neo4j_migration\")\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library for Internal ID Functions in KuzuDB with CMake\nDESCRIPTION: Creates an object library named 'kuzu_function_internal_id' from the internal_id_creation_function.cpp source file. After defining the library, it adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/internal_id/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_function_internal_id\n        OBJECT\n        internal_id_creation_function.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_internal_id>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Parquet Writer Library in CMake for KuzuDB\nDESCRIPTION: Creates an object library named kuzu_processor_operator_parquet_writer with various source files for different column types and Parquet-related functionalities. It sets up the library structure for the Parquet writer component of KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/writer/parquet/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_processor_operator_parquet_writer\n        OBJECT\n        basic_column_writer.cpp\n        boolean_column_writer.cpp\n        column_writer.cpp\n        interval_column_writer.cpp\n        struct_column_writer.cpp\n        string_column_writer.cpp\n        list_column_writer.cpp\n        parquet_writer.cpp\n        parquet_rle_bp_encoder.cpp\n        uuid_column_writer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining RE2 Library Source Files\nDESCRIPTION: Lists all the source files that make up the RE2 library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/re2/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(RE2_SOURCES\n        bitstate.cpp\n        compile.cpp\n        dfa.cpp\n        filtered_re2.cpp\n        mimics_pcre.cpp\n        nfa.cpp\n        onepass.cpp\n        parse.cpp\n        perl_groups.cpp\n        prefilter.cpp\n        prefilter_tree.cpp\n        prog.cpp\n        re2.cpp\n        regexp.cpp\n        set.cpp\n        simplify.cpp\n        stringpiece.cpp\n        tostring.cpp\n        unicode_casefold.cpp\n        unicode_groups.cpp\n        rune.cpp\n        strutil.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenSSL and Include Directories for HTTP Extension in CMake\nDESCRIPTION: Finds and includes OpenSSL package, defines the CPPHTTPLIB_OPENSSL_SUPPORT compile definition, and sets up necessary include directories for the project including httplib third-party library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/httpfs/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(OpenSSL REQUIRED)\ninclude_directories(${OPENSSL_INCLUDE_DIR})\nadd_compile_definitions(CPPHTTPLIB_OPENSSL_SUPPORT)\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}/src/include\n        ${CMAKE_BINARY_DIR}/src/include\n        ${PROJECT_SOURCE_DIR}/third_party/httplib\n        src/include)\n```\n\n----------------------------------------\n\nTITLE: Conditional Grammar File Generation with ANTLR4 in CMake\nDESCRIPTION: Defines a custom command to generate Cypher lexer and parser files using ANTLR4 when AUTO_UPDATE_GRAMMAR is enabled. The command executes a CMake script that processes the Cypher grammar file to produce C++ lexer and parser implementations.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/antlr4_cypher/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(${AUTO_UPDATE_GRAMMAR})\n        add_custom_command(\n                OUTPUT\n                        ${CMAKE_CURRENT_SOURCE_DIR}/cypher_lexer.cpp\n                        ${CMAKE_CURRENT_SOURCE_DIR}/cypher_parser.cpp\n                        ${CMAKE_CURRENT_SOURCE_DIR}/include/cypher_lexer.h\n                        ${CMAKE_CURRENT_SOURCE_DIR}/include/cypher_parser.h\n                COMMAND cmake -D ROOT_DIR=${PROJECT_SOURCE_DIR} -P generate_grammar.cmake\n                DEPENDS\n                        ${PROJECT_SOURCE_DIR}/src/antlr4/Cypher.g4\n                        ${PROJECT_SOURCE_DIR}/scripts/antlr4/generate_grammar.cmake\n                WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/scripts/antlr4)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in CMake\nDESCRIPTION: Adds the compiled object files from the 'kuzu_duckdb_connector' library to the parent scope's DUCKDB_EXTENSION_OBJECT_FILES variable. This allows the parent CMake file to include these objects when building the complete DuckDB extension.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/connector/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(DUCKDB_EXTENSION_OBJECT_FILES\n        ${DUCKDB_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_duckdb_connector>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Finding Java and JNI Dependencies for Kuzu Java API\nDESCRIPTION: Locates Java and JNI dependencies, reporting their paths or throwing an error if not found.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/java_api/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Java REQUIRED)\nfind_package(JNI REQUIRED)\nif (JNI_FOUND)\n    message (STATUS \"JNI_INCLUDE_DIRS=${JNI_INCLUDE_DIRS}\")\n    message (STATUS \"JNI_LIBRARIES=${JNI_LIBRARIES}\")\nelse()\n    message (FATAL_ERROR \"Java/JNI not found\")\nendif()\ninclude(UseJava)\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB JSON Type Library in CMake\nDESCRIPTION: Creates an object library named kuzu_json_type from json_type.cpp source file and adds it to the JSON extension object files collection in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/json/src/type/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_json_type\n        OBJECT\n        json_type.cpp)\n\nset(JSON_EXTENSION_OBJECT_FILES\n        ${JSON_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_json_type>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for KuzuDB Benchmark\nDESCRIPTION: Links the kuzu_benchmark executable with the required libraries: kuzu and test_helper.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/benchmark/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(kuzu_benchmark kuzu test_helper)\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Operator Objects to Parent Scope\nDESCRIPTION: Adds the compiled objects from the kuzu_processor_operator_simple library to the parent scope's ALL_OBJECT_FILES variable for inclusion in the final build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/simple/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_simple>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Compiling Java Sources and Creating JAR for Kuzu Java API\nDESCRIPTION: Compiles Java source files and creates a JAR file with native headers generation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/java_api/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB JAVA_SRC_FILES src/main/java/com/kuzudb/*.java)\n\nset(CMAKE_JAVA_COMPILE_FLAGS -source 1.8 -target 1.8 -encoding utf-8)\nadd_jar(kuzu_java ${JAVA_SRC_FILES}\n    OUTPUT_DIR \"${PROJECT_SOURCE_DIR}/build\"\n    GENERATE_NATIVE_HEADERS kuzu_native_header)\nget_target_property(_jarFile kuzu_java JAR_FILE)\nget_target_property(_classDir kuzu_java CLASSDIR)\n\nset (_stubDir \"${CMAKE_CURRENT_BINARY_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Building the Unity Catalog Extension Library\nDESCRIPTION: Builds the Unity Catalog extension library and links it with DuckDB libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"unity_catalog\")\n\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        ${DuckDB_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring FastFloat Interface Library in CMake\nDESCRIPTION: This snippet adds FastFloat as an interface library and sets its include directories. It uses CMake commands to define the library structure without compiling any source files.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/fast_float/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(fast_float INTERFACE)\n\ntarget_include_directories(fast_float INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Installer Library for Non-Windows Platforms in CMake\nDESCRIPTION: This snippet defines the 'sqlite_installer' shared library for non-Windows platforms. It specifies the source files and sets extension properties. For Apple platforms, it applies additional dynamic lookup settings.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/sqlite/src/installer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT WIN32)\n    add_library(sqlite_installer\n            SHARED\n            sqlite_install_func.cpp\n            ${PROJECT_SOURCE_DIR}/extension/duckdb/src/installer/duckdb_installer.cpp)\n    set_extension_properties(sqlite_installer sqlite_installer sqlite)\nendif ()\n\nif (APPLE)\n    set_apple_dynamic_lookup(sqlite_installer)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining KuzuDB Value Types Object Library in CMake\nDESCRIPTION: Creates an object library named kuzu_common_types_value from multiple source files related to value types in KuzuDB. The library includes implementations for nested types, nodes, recursive relationships, regular relationships, and general values.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/types/value/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_common_types_value\n        OBJECT\n        nested.cpp\n        node.cpp\n        recursive_rel.cpp\n        rel.cpp\n        value.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Data for Multi-threaded ORDER BY Operations\nDESCRIPTION: Documentation comment for a test dataset that spans multiple batch sizes to verify multi-threading behavior. The dataset is structured to have 3000 rows with a batch size of 2048 tuples, ensuring work distribution across two threads.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/dataset/order-by-tests/readme.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This dataset is used to test the multi-threading part of ORDER BY operators.\\n# The batch size of scanNodeId is 2048 tuples. If we have 3000 rows, 2 threads will get work to do.\n```\n\n----------------------------------------\n\nTITLE: Integer Sequence 0-50\nDESCRIPTION: A list of integers from 0 to 50 stored one per line. The numbers appear to be part of a data or configuration file, possibly used for testing or as input data.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/update_each_element_of_small_list_rollback.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0\n1\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n2\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n3\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n4\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n5\n50\n6\n7\n8\n9\n```\n\n----------------------------------------\n\nTITLE: Shared Brotli Dictionary Request Structure\nDESCRIPTION: Defines the structure of an HTTP GET request for fetching a Shared Brotli dictionary, including CORS mode settings.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/fetch-spec/shared-brotli-fetch-spec.txt#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET [dictionaryURL]\nMode: cors\n```\n\n----------------------------------------\n\nTITLE: Generating Large Array of Objects in JSON\nDESCRIPTION: This code snippet demonstrates a large JSON array containing 1110 objects. Each object has a single property 'a' with values incrementing from 1 to 1110. This structure could be used for testing or as sample data for applications that need to handle large datasets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/large_list_of_struct_answer.txt#2025-04-17_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[{\"a\": 1},{\"a\": 2},{\"a\": 3},... {\"a\": 1108},{\"a\": 1109},{\"a\": 1110}]\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_delta_connector Library in CMake\nDESCRIPTION: Creates an OBJECT library named kuzu_delta_connector with source files from DuckDB connector and a custom delta_connector.cpp. This library is used for the Delta Connector functionality in KuzuDB.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/src/connector/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_delta_connector\n        OBJECT\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_secret_manager.cpp\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_connector.cpp\n        delta_connector.cpp)\n```\n\n----------------------------------------\n\nTITLE: Processing Edge List Data Format in KuzuDB\nDESCRIPTION: This data file represents edges in KuzuDB graph database using pipe-delimited format. Each line contains a source vertex ID, an edge type with ID, and a target vertex ID. The pattern follows source_id|edge_type:edge_id|target_id, where all target IDs are 5000 in this dataset.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_single_fwd_answer.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1000|1:6000|5000\n1001|1:6001|5000\n1002|1:6002|5000\n1003|1:6003|5000\n1004|1:6004|5000\n1005|1:6005|5000\n1006|1:6006|5000\n1007|1:6007|5000\n1008|1:6008|5000\n1009|1:6009|5000\n100|1:5100|5000\n1010|1:6010|5000\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectories in CMake\nDESCRIPTION: Includes necessary subdirectories containing implementation code for the extension. Each subdirectory contains specific functionality components.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(src/function)\nadd_subdirectory(src/connector)\nadd_subdirectory(src/installer)\nadd_subdirectory(src/main)\n```\n\n----------------------------------------\n\nTITLE: Numeric Mapping Records in Pipe-Delimited Format\nDESCRIPTION: A structured data file containing three columns in pipe-delimited format. Each row follows the pattern: positive_number|negative_number|[negative_number]. The data ranges from 1385 to 1500 with their corresponding negative values.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/small_list_becomes_large_list_after_insertion_commit.txt#2025-04-17_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n1385|-385|[-385]\n1386|-386|[-386]\n1387|-387|[-387]\n1388|-388|[-388]\n1389|-389|[-389]\n1390|-390|[-390]\n...\n1498|-498|[-498]\n1499|-499|[-499]\n1500|-500|[-500]\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Configures include paths for the project, including DuckDB headers, HTTPFS (S3 support), and project-specific directories.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n        src/include\n        ${PROJECT_SOURCE_DIR}/extension/duckdb/src/include\n        ${PROJECT_SOURCE_DIR}/extension/httpfs/src/include  # For S3 configuration\n        ${DuckDB_INCLUDE_DIRS}\n        ${CMAKE_BINARY_DIR}/src/include\n        ${PROJECT_SOURCE_DIR}/src/include)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for KuzuDB Components in CMake\nDESCRIPTION: This snippet adds multiple subdirectories to the CMake build, each representing a component of the KuzuDB project. These subdirectories likely contain additional CMakeLists.txt files for their respective components.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(arrow)\nadd_subdirectory(copier_config)\nadd_subdirectory(data_chunk)\nadd_subdirectory(enums)\nadd_subdirectory(exception)\nadd_subdirectory(serializer)\nadd_subdirectory(signal)\nadd_subdirectory(task_system)\nadd_subdirectory(types)\nadd_subdirectory(vector)\nadd_subdirectory(file_system)\n```\n\n----------------------------------------\n\nTITLE: Array of Objects with Numeric Values in JSON\nDESCRIPTION: This snippet represents a portion of a JSON array containing objects. Each object has a single key 'a' with a numeric value. The values follow a sequential pattern from 2111 to 2400, with two outliers at the end.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/large_list_of_struct_answer.txt#2025-04-17_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[{a: 2111},{a: 2112},{a: 2113},/* ... */,{a: 2398},{a: 2399},{a: 2400},{a: 99},{a: 200}]\n```\n\n----------------------------------------\n\nTITLE: Setting ALL_OBJECT_FILES Variable in KuzuDB CMake\nDESCRIPTION: This snippet appends the objects from the 'kuzu_function' library to the ALL_OBJECT_FILES variable and sets it in the parent scope. This is likely used for further compilation or linking processes.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating KuzuDB Extension Libraries and Adding Object Files\nDESCRIPTION: Creates the main extension library and adds all extension-related object files to the parent scope. This enables the parent CMake script to link against these objects.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/extension/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_extension\n        OBJECT\n        catalog_extension.cpp\n        extension.cpp\n        extension_entries.cpp\n        extension_installer.cpp\n        extension_manager.cpp\n        loaded_extension.cpp\n        )\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_extension>\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_generated_extension_loader>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating PostgreSQL Extension Object Files in CMake for KuzuDB\nDESCRIPTION: This CMake snippet adds the objects from the 'kuzu_postgres_function' library to the 'POSTGRES_EXTENSION_OBJECT_FILES' variable. It uses generator expressions to reference the target objects and sets the variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/src/function/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(POSTGRES_EXTENSION_OBJECT_FILES\n        ${POSTGRES_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_postgres_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Kuzu Parser Expression Library in CMake\nDESCRIPTION: This CMake snippet defines the kuzu_parser_expression library as an OBJECT library, including various parsed expression files. It then adds the library's object files to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/parser/expression/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_parser_expression\n        OBJECT\n        parsed_case_expression.cpp\n        parsed_expression.cpp\n        parsed_expression_visitor.cpp\n        parsed_function_expression.cpp\n        parsed_property_expression.cpp\n        parsed_variable_expression.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_parser_expression>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Binder Objects to Parent Scope in CMake\nDESCRIPTION: Adds the objects from the kuzu_binder_bind_ddl library to the ALL_OBJECT_FILES variable in the parent scope. This allows the objects to be included in the final build targets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind/ddl/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_bind_ddl>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zstd Compilation Settings\nDESCRIPTION: Sets compilation definitions to hide Zstd symbols and configures include directories for the library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/zstd/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_definitions(zstd ZSTDLIB_VISIBILITY= ZSTDERRORLIB_VISIBILITY=)\n\ntarget_include_directories(\n        zstd\n        PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)\n```\n\n----------------------------------------\n\nTITLE: Configuring UTF8Proc Static Library Build in CMake\nDESCRIPTION: Creates a static library named utf8proc using utf8proc.cpp and utf8proc_wrapper.cpp source files. Sets up public include directories for the library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/utf8proc/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(utf8proc\n        STATIC\n        utf8proc.cpp\n        utf8proc_wrapper.cpp)\n\ntarget_include_directories(utf8proc PUBLIC ./include)\n```\n\n----------------------------------------\n\nTITLE: Setting ALL_OBJECT_FILES Variable in CMake for KuzuDB\nDESCRIPTION: This snippet appends the objects from the kuzu_common library to the ALL_OBJECT_FILES variable. It uses generator expressions to reference the objects and sets the variable in the parent scope, likely for use in a higher-level CMakeLists.txt file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Object Library for KuzuDB DDL Binder Module in CMake\nDESCRIPTION: Creates an object library named kuzu_binder_bind_ddl that includes the bound_create_table_info.cpp source file. This library is part of the KuzuDB data definition language binding module.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind/ddl/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(kuzu_binder_bind_ddl\n        OBJECT\n        bound_create_table_info.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Arithmetic Library Objects to Parent Scope in CMake\nDESCRIPTION: Appends the compiled objects from the kuzu_function_arithmetic library to the ALL_OBJECT_FILES variable in the parent scope. This allows these objects to be included in the final build targets defined at a higher level.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/arithmetic/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_arithmetic>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Serializer Objects to Parent Scope in CMake\nDESCRIPTION: Sets the ALL_OBJECT_FILES variable in the parent scope to include the objects from the kuzu_common_serializer library. This allows the objects to be included in the final build target.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/serializer/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_serializer>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope\nDESCRIPTION: Adds the compiled object files from the Parquet reader library to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/reader/parquet/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_parquet_reader>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: ID Mapping Records in KuzuDB\nDESCRIPTION: Data records showing mappings between numeric IDs and their array representations. Each line follows the format of 'id|mapped_value|[mapped_value]' where the third column is an array containing the second column's value.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/insert_rels_to_large_list_rollback.txt#2025-04-17_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n2073|927|[927]\n2074|926|[926]\n2075|925|[925]\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Common Library Properties and Dependencies\nDESCRIPTION: Configures common properties for all Brotli libraries including version information, ABI compatibility, and position-independent code settings. Also establishes the dependencies between libraries.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(lib ${BROTLI_LIBRARIES_CORE})\n  target_link_libraries(${lib} ${LIBM_LIBRARY})\n  set_property(TARGET ${lib} APPEND PROPERTY INCLUDE_DIRECTORIES ${BROTLI_INCLUDE_DIRS})\n  set_target_properties(${lib} PROPERTIES\n    VERSION \"${BROTLI_ABI_COMPATIBILITY}.${BROTLI_ABI_AGE}.${BROTLI_ABI_REVISION}\"\n    SOVERSION \"${BROTLI_ABI_COMPATIBILITY}\")\n  if(NOT BROTLI_EMSCRIPTEN)\n    set_target_properties(${lib} PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\n  endif()\n  set_property(TARGET ${lib} APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES \"$<BUILD_INTERFACE:${BROTLI_INCLUDE_DIRS}>\")\nendforeach()\n\nif(NOT BROTLI_EMSCRIPTEN)\n  target_link_libraries(brotlidec brotlicommon)\n  target_link_libraries(brotlienc brotlicommon)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring kuzu_planner_simple Library in CMake\nDESCRIPTION: This snippet defines the kuzu_planner_simple library as an OBJECT library with logical_simple.cpp as its source file, and adds it to the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/simple/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_planner_simple\n        OBJECT\n        logical_simple.cpp)\n\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_planner_simple>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Runner Library in CMake\nDESCRIPTION: Creates a test runner library from multiple source files including CSV converter, insert operations, and test components. Links against GTest and kuzu libraries while setting up include directories.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/test_runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        test_runner\n        OBJECT\n        csv_converter.cpp\n        insert_by_row.cpp\n        multi_copy_split.cpp\n        test_parser.cpp\n        test_runner.cpp\n)\n\ntarget_include_directories(\n        test_runner\n        PUBLIC\n        ../include/\n)\n\ntarget_link_libraries(test_runner PUBLIC GTest::GTest kuzu)\n```\n\n----------------------------------------\n\nTITLE: Adding Common Copier Configuration Objects to Parent Scope in CMake\nDESCRIPTION: Appends the object files from the 'kuzu_common_copier_config' library to the ALL_OBJECT_FILES variable in the parent scope. This ensures these objects are included when building the complete KuzuDB application.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/copier_config/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_copier_config>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: ID Mapping Data Format\nDESCRIPTION: Data file containing numeric ID mappings with a consistent format of 'original_id|1:mapped_id|0'. Each line contains an ID mapped to itself with a trailing zero flag value.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_single_bwd_answer.txt#2025-04-17_snippet_1\n\nLANGUAGE: data\nCODE:\n```\n2307|1:2307|0\n2308|1:2308|0\n2309|1:2309|0\n230|1:230|0\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Basic Settings\nDESCRIPTION: Sets up basic CMake configuration including minimum version and policies for project versioning and visibility.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/zstd/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.11)\n\nif(POLICY CMP0048)\n    cmake_policy(SET CMP0048 NEW)\nendif()\n\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n\nproject(zstd CXX)\n```\n\n----------------------------------------\n\nTITLE: TPC-H Q06 Query Result\nDESCRIPTION: Output showing the revenue result from TPC-H Q06 query execution on the modified Iceberg table using PySpark.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/test/iceberg_tables/lineitem_iceberg/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n[Row(revenue=Decimal('1077536.9101'))]\n```\n\n----------------------------------------\n\nTITLE: Configuring KuzuDB Parser Transform Object Library in CMake\nDESCRIPTION: Creates an object library named 'kuzu_parser_transform' with all the transform-related source files for the KuzuDB parser. These files handle various transformations of parsed queries including DDL statements, expressions, graph patterns, and clauses.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/parser/transform/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_parser_transform\n        OBJECT\n        transform_copy.cpp\n        transform_ddl.cpp\n        transform_expression.cpp\n        transform_graph_pattern.cpp\n        transform_macro.cpp\n        transform_projection.cpp\n        transform_query.cpp\n        transform_reading_clause.cpp\n        transform_standalone_call.cpp\n        transform_transaction.cpp\n        transform_updating_clause.cpp\n        transform_extension.cpp\n        transform_port_db.cpp\n        transform_attach_database.cpp\n        transform_detach_database.cpp\n        transform_use_database.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditional 64-bit Only Extension Include Function in CMake\nDESCRIPTION: Defines a function similar to add_extension_if_enabled but with an additional check to skip 32-bit builds.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_extension_if_enabled_and_skip_32bit extension)\n    if (NOT __32BIT__ AND\n        (\"${extension}\" IN_LIST BUILD_EXTENSIONS OR\n            \"${extension}\" IN_LIST STATICALLY_LINKED_EXTENSIONS))\n        add_subdirectory(${extension})\n    endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Roaring Bitmap Library\nDESCRIPTION: This command specifies the include directories for the 'roaring_bitmap' target. It uses generator expressions to include the current source directory in the build interface.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/roaring_bitmap/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n        roaring_bitmap\n        PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation and Single-File Header Generation\nDESCRIPTION: Sets up installation rules for library targets and headers. Includes optional generation of a single-file header using Python script.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_SINGLE_FILE_HEADER})\n        find_package(Python3 3.9...4 REQUIRED)\n        add_custom_command(\n                OUTPUT kuzu.hpp\n                COMMAND\n                        ${Python3_EXECUTABLE} ${PROJECT_SOURCE_DIR}/scripts/collect-single-file-header.py ${CMAKE_CURRENT_BINARY_DIR}/..\n                DEPENDS\n                        ${PROJECT_SOURCE_DIR}/scripts/collect-single-file-header.py kuzu_shared)\n        add_custom_target(single_file_header ALL DEPENDS kuzu.hpp)\nendif()\n\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/c_api/kuzu.h TYPE INCLUDE)\n\nif(${BUILD_SINGLE_FILE_HEADER})\n        install(FILES ${CMAKE_CURRENT_BINARY_DIR}/kuzu.hpp  TYPE INCLUDE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating Neo4j Migration Extension Object Files in Parent Scope\nDESCRIPTION: This CMake snippet updates the 'NEO4J_MIGRATION_EXTENSION_OBJECT_FILES' variable in the parent scope by appending the objects from the 'kuzu_neo4j_migration_extension_function' library. This allows the parent CMakeLists.txt to include these object files in the final build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/neo4j_migration/src/function/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(NEO4J_MIGRATION_EXTENSION_OBJECT_FILES\n        ${NEO4J_MIGRATION_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_neo4j_migration_extension_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Starting Web Server for Kuzu WebAssembly Example\nDESCRIPTION: This command starts the web server to host the Kuzu WebAssembly example, making it accessible via a web browser.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/wasm/examples/browser_persistent/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope\nDESCRIPTION: Adds the compiled object files from kuzu_common_enums library to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build process.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/enums/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_enums>\\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake for KuzuDB\nDESCRIPTION: Adds subdirectories 'copy', 'ddl', and 'read' to the CMake build process. These directories likely contain additional source files or subcomponents of the KuzuDB project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(copy)\nadd_subdirectory(ddl)\nadd_subdirectory(read)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Static Library Settings\nDESCRIPTION: Sets DuckDB library linking preference based on platform (Windows) or build type (static extension).\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/postgres/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32 OR BUILD_STATIC_EXTENSION)\n    set(DuckDB_USE_STATIC_LIBS ON)\nelse ()\n    set(DuckDB_USE_STATIC_LIBS OFF)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: INT64 Column Definitions in KuzuDB Schema\nDESCRIPTION: Sequential column definitions in pipe-delimited format specifying column ID, name, data type, null setting and constraint flag. Each line follows the pattern: ID|colNNNN|INT64|NULL|False where NNNN is an incremental number.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/function_table_info_answer.txt#2025-04-17_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n2071|col2072|INT64|NULL|False\n2072|col2073|INT64|NULL|False\n2073|col2074|INT64|NULL|False\n[...]\n2398|col2399|INT64|NULL|False\n2399|col2400|INT64|NULL|False\n```\n\n----------------------------------------\n\nTITLE: Creating API Test Helper Library for KuzuDB in CMake\nDESCRIPTION: Defines a static library called 'api_test_helper' using test_helper.cpp source file, sets include directories, and links it with the shared 'kuzu_shared' library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/test_helper/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n        api_test_helper\n        OBJECT\n        test_helper.cpp\n)\n\ntarget_include_directories(\n        api_test_helper\n        PUBLIC\n        ../include/\n)\n\ntarget_link_libraries(api_test_helper PUBLIC kuzu_shared)\n```\n\n----------------------------------------\n\nTITLE: Parsing ID Mapping Data\nDESCRIPTION: A pipe-delimited data format where each line contains an ID mapping in the format '0|1:ID|ID'. The first field is always 0, second is 1, and the remaining fields are matching IDs.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_fwd_answer.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0|1:295|295\n0|1:2960|2960\n0|1:2961|2961\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Parser Transform Objects to Parent Scope\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the object files generated from the kuzu_parser_transform library. This makes the transform objects available for linking with the main project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/parser/transform/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_parser_transform>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding KuzuDB Data Type Tests in CMake\nDESCRIPTION: CMake configuration that registers multiple test files for KuzuDB's data type implementations. The test files cover various data types including int128, date, interval, null mask, string, time, and timestamp.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/common/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_kuzu_test(types_test\n        int128_test.cpp\n        date_test.cpp\n        interval_test.cpp\n        null_mask_test.cpp\n        string_test.cpp\n        time_test.cpp\n        timestamp_test.cpp)\n```\n\n----------------------------------------\n\nTITLE: Enabling Extension Tests in CMake\nDESCRIPTION: Conditionally enables testing for extensions if BUILD_EXTENSION_TESTS is set.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_EXTENSION_TESTS)\n    enable_testing()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding kuzu_processor_operator_order_by to Project Object Files in CMake\nDESCRIPTION: Adds the objects from the kuzu_processor_operator_order_by library to the ALL_OBJECT_FILES variable in the parent scope. This ensures the library is included in the overall project build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/order_by/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_order_by>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Unity Catalog Extension Object Files in CMake\nDESCRIPTION: Appends the object files generated from the Unity Catalog Extension library to a parent-scope variable. This allows the object files to be used in other parts of the build system, likely for linking into the main KuzuDB executable or library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/src/main/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(UNITY_CATALOG_EXTENSION_OBJECT_FILES\n        ${UNITY_CATALOG_EXTENSION_OBJECT_FILES} $<TARGET_OBJECTS:unity_catalog_extension_main>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining vPerson Dataset Size\nDESCRIPTION: Comment indicating the dataset contains 10,000 person nodes with a maximum offset index of 9999.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/dataset/hash-index-test/int64-pk-test/readme.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Contains 10K nodes (so maxOffset is 9999)\n```\n\n----------------------------------------\n\nTITLE: Numerical Mapping Data in Plaintext Format\nDESCRIPTION: This snippet shows a sample of the numerical mappings present in the file. Each line contains three numbers separated by pipe characters, possibly representing ID conversions or relationships between different numbering systems.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_single_fwd_answer.txt#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n3663|1:8663|5000\n3664|1:8664|5000\n3665|1:8665|5000\n3666|1:8666|5000\n3667|1:8667|5000\n3668|1:8668|5000\n3669|1:8669|5000\n366|1:5366|5000\n3670|1:8670|5000\n3671|1:8671|5000\n```\n\n----------------------------------------\n\nTITLE: Defining INT64 Columns in SQL Database Schema\nDESCRIPTION: This snippet defines multiple INT64 columns in a database schema. Each line represents a column with its ID, name, data type (INT64), NULL status, and a boolean flag set to False. The columns are numbered sequentially from col1406 to col1738.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/function_table_info_answer.txt#2025-04-17_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n1405|col1406|INT64|NULL|False\n1406|col1407|INT64|NULL|False\n1407|col1408|INT64|NULL|False\n...\n1736|col1737|INT64|NULL|False\n1737|col1738|INT64|NULL|False\n```\n\n----------------------------------------\n\nTITLE: ID Mapping Records\nDESCRIPTION: Pipe-delimited data records mapping IDs in format 'original_id|1:mapped_id|constant'. Each record contains three fields: an original ID, a mapped ID prefixed with '1:', and a constant value of 5000.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_single_fwd_answer.txt#2025-04-17_snippet_2\n\nLANGUAGE: data\nCODE:\n```\n2066|1:7066|5000\n2067|1:7067|5000\n2068|1:7068|5000\n[...additional records...]\n```\n\n----------------------------------------\n\nTITLE: Adding Parser Visitor Objects to Project in CMake\nDESCRIPTION: Appends the object files from the 'kuzu_parser_visitor' library to the 'ALL_OBJECT_FILES' variable in the parent scope. This ensures that these objects are included in the overall project compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/parser/visitor/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_parser_visitor>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: ID Mapping Data Format\nDESCRIPTION: Structured data format using pipe-delimited fields to map IDs to references with a flag value. Each line contains three fields: original ID, reference ID (prefixed with '1:'), and a flag value (0).\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_single_bwd_answer.txt#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n3613|1:3613|0\n3614|1:3614|0\n3615|1:3615|0\n```\n\n----------------------------------------\n\nTITLE: Database Column Definitions for INT64 Fields in KuzuDB\nDESCRIPTION: This snippet defines a set of database columns with sequential IDs from 721 to 1072. Each column is named with a 'col' prefix followed by its number, has INT64 data type, NULL default value, and is defined as NOT NULL (False).\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/function_table_info_answer.txt#2025-04-17_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\n721|col722|INT64|NULL|False\n722|col723|INT64|NULL|False\n723|col724|INT64|NULL|False\n724|col725|INT64|NULL|False\n725|col726|INT64|NULL|False\n726|col727|INT64|NULL|False\n727|col728|INT64|NULL|False\n728|col729|INT64|NULL|False\n729|col730|INT64|NULL|False\n730|col731|INT64|NULL|False\n731|col732|INT64|NULL|False\n732|col733|INT64|NULL|False\n733|col734|INT64|NULL|False\n734|col735|INT64|NULL|False\n735|col736|INT64|NULL|False\n736|col737|INT64|NULL|False\n737|col738|INT64|NULL|False\n738|col739|INT64|NULL|False\n739|col740|INT64|NULL|False\n740|col741|INT64|NULL|False\n741|col742|INT64|NULL|False\n742|col743|INT64|NULL|False\n743|col744|INT64|NULL|False\n744|col745|INT64|NULL|False\n745|col746|INT64|NULL|False\n746|col747|INT64|NULL|False\n747|col748|INT64|NULL|False\n748|col749|INT64|NULL|False\n749|col750|INT64|NULL|False\n750|col751|INT64|NULL|False\n751|col752|INT64|NULL|False\n752|col753|INT64|NULL|False\n753|col754|INT64|NULL|False\n754|col755|INT64|NULL|False\n755|col756|INT64|NULL|False\n756|col757|INT64|NULL|False\n757|col758|INT64|NULL|False\n758|col759|INT64|NULL|False\n759|col760|INT64|NULL|False\n760|col761|INT64|NULL|False\n761|col762|INT64|NULL|False\n762|col763|INT64|NULL|False\n763|col764|INT64|NULL|False\n764|col765|INT64|NULL|False\n765|col766|INT64|NULL|False\n766|col767|INT64|NULL|False\n767|col768|INT64|NULL|False\n768|col769|INT64|NULL|False\n769|col770|INT64|NULL|False\n770|col771|INT64|NULL|False\n771|col772|INT64|NULL|False\n772|col773|INT64|NULL|False\n773|col774|INT64|NULL|False\n774|col775|INT64|NULL|False\n775|col776|INT64|NULL|False\n776|col777|INT64|NULL|False\n777|col778|INT64|NULL|False\n778|col779|INT64|NULL|False\n779|col780|INT64|NULL|False\n780|col781|INT64|NULL|False\n781|col782|INT64|NULL|False\n782|col783|INT64|NULL|False\n783|col784|INT64|NULL|False\n784|col785|INT64|NULL|False\n785|col786|INT64|NULL|False\n786|col787|INT64|NULL|False\n787|col788|INT64|NULL|False\n788|col789|INT64|NULL|False\n789|col790|INT64|NULL|False\n790|col791|INT64|NULL|False\n791|col792|INT64|NULL|False\n792|col793|INT64|NULL|False\n793|col794|INT64|NULL|False\n794|col795|INT64|NULL|False\n795|col796|INT64|NULL|False\n796|col797|INT64|NULL|False\n797|col798|INT64|NULL|False\n798|col799|INT64|NULL|False\n799|col800|INT64|NULL|False\n800|col801|INT64|NULL|False\n801|col802|INT64|NULL|False\n802|col803|INT64|NULL|False\n803|col804|INT64|NULL|False\n804|col805|INT64|NULL|False\n805|col806|INT64|NULL|False\n806|col807|INT64|NULL|False\n807|col808|INT64|NULL|False\n808|col809|INT64|NULL|False\n809|col810|INT64|NULL|False\n810|col811|INT64|NULL|False\n811|col812|INT64|NULL|False\n812|col813|INT64|NULL|False\n813|col814|INT64|NULL|False\n814|col815|INT64|NULL|False\n815|col816|INT64|NULL|False\n816|col817|INT64|NULL|False\n817|col818|INT64|NULL|False\n818|col819|INT64|NULL|False\n819|col820|INT64|NULL|False\n820|col821|INT64|NULL|False\n821|col822|INT64|NULL|False\n822|col823|INT64|NULL|False\n823|col824|INT64|NULL|False\n824|col825|INT64|NULL|False\n825|col826|INT64|NULL|False\n826|col827|INT64|NULL|False\n827|col828|INT64|NULL|False\n828|col829|INT64|NULL|False\n829|col830|INT64|NULL|False\n830|col831|INT64|NULL|False\n831|col832|INT64|NULL|False\n832|col833|INT64|NULL|False\n833|col834|INT64|NULL|False\n834|col835|INT64|NULL|False\n835|col836|INT64|NULL|False\n836|col837|INT64|NULL|False\n837|col838|INT64|NULL|False\n838|col839|INT64|NULL|False\n839|col840|INT64|NULL|False\n840|col841|INT64|NULL|False\n841|col842|INT64|NULL|False\n842|col843|INT64|NULL|False\n843|col844|INT64|NULL|False\n844|col845|INT64|NULL|False\n845|col846|INT64|NULL|False\n846|col847|INT64|NULL|False\n847|col848|INT64|NULL|False\n848|col849|INT64|NULL|False\n849|col850|INT64|NULL|False\n850|col851|INT64|NULL|False\n851|col852|INT64|NULL|False\n852|col853|INT64|NULL|False\n853|col854|INT64|NULL|False\n854|col855|INT64|NULL|False\n855|col856|INT64|NULL|False\n856|col857|INT64|NULL|False\n857|col858|INT64|NULL|False\n858|col859|INT64|NULL|False\n859|col860|INT64|NULL|False\n860|col861|INT64|NULL|False\n861|col862|INT64|NULL|False\n862|col863|INT64|NULL|False\n863|col864|INT64|NULL|False\n864|col865|INT64|NULL|False\n865|col866|INT64|NULL|False\n866|col867|INT64|NULL|False\n867|col868|INT64|NULL|False\n868|col869|INT64|NULL|False\n869|col870|INT64|NULL|False\n870|col871|INT64|NULL|False\n871|col872|INT64|NULL|False\n872|col873|INT64|NULL|False\n873|col874|INT64|NULL|False\n874|col875|INT64|NULL|False\n875|col876|INT64|NULL|False\n876|col877|INT64|NULL|False\n877|col878|INT64|NULL|False\n878|col879|INT64|NULL|False\n879|col880|INT64|NULL|False\n880|col881|INT64|NULL|False\n881|col882|INT64|NULL|False\n882|col883|INT64|NULL|False\n883|col884|INT64|NULL|False\n884|col885|INT64|NULL|False\n885|col886|INT64|NULL|False\n886|col887|INT64|NULL|False\n887|col888|INT64|NULL|False\n888|col889|INT64|NULL|False\n889|col890|INT64|NULL|False\n890|col891|INT64|NULL|False\n891|col892|INT64|NULL|False\n892|col893|INT64|NULL|False\n893|col894|INT64|NULL|False\n894|col895|INT64|NULL|False\n895|col896|INT64|NULL|False\n896|col897|INT64|NULL|False\n897|col898|INT64|NULL|False\n898|col899|INT64|NULL|False\n899|col900|INT64|NULL|False\n900|col901|INT64|NULL|False\n901|col902|INT64|NULL|False\n902|col903|INT64|NULL|False\n903|col904|INT64|NULL|False\n904|col905|INT64|NULL|False\n905|col906|INT64|NULL|False\n906|col907|INT64|NULL|False\n907|col908|INT64|NULL|False\n908|col909|INT64|NULL|False\n909|col910|INT64|NULL|False\n910|col911|INT64|NULL|False\n911|col912|INT64|NULL|False\n912|col913|INT64|NULL|False\n913|col914|INT64|NULL|False\n914|col915|INT64|NULL|False\n915|col916|INT64|NULL|False\n916|col917|INT64|NULL|False\n917|col918|INT64|NULL|False\n918|col919|INT64|NULL|False\n919|col920|INT64|NULL|False\n920|col921|INT64|NULL|False\n921|col922|INT64|NULL|False\n922|col923|INT64|NULL|False\n923|col924|INT64|NULL|False\n924|col925|INT64|NULL|False\n925|col926|INT64|NULL|False\n926|col927|INT64|NULL|False\n927|col928|INT64|NULL|False\n928|col929|INT64|NULL|False\n929|col930|INT64|NULL|False\n930|col931|INT64|NULL|False\n931|col932|INT64|NULL|False\n932|col933|INT64|NULL|False\n933|col934|INT64|NULL|False\n934|col935|INT64|NULL|False\n935|col936|INT64|NULL|False\n936|col937|INT64|NULL|False\n937|col938|INT64|NULL|False\n938|col939|INT64|NULL|False\n939|col940|INT64|NULL|False\n940|col941|INT64|NULL|False\n941|col942|INT64|NULL|False\n942|col943|INT64|NULL|False\n943|col944|INT64|NULL|False\n944|col945|INT64|NULL|False\n945|col946|INT64|NULL|False\n946|col947|INT64|NULL|False\n947|col948|INT64|NULL|False\n948|col949|INT64|NULL|False\n949|col950|INT64|NULL|False\n950|col951|INT64|NULL|False\n951|col952|INT64|NULL|False\n952|col953|INT64|NULL|False\n953|col954|INT64|NULL|False\n954|col955|INT64|NULL|False\n955|col956|INT64|NULL|False\n956|col957|INT64|NULL|False\n957|col958|INT64|NULL|False\n958|col959|INT64|NULL|False\n959|col960|INT64|NULL|False\n960|col961|INT64|NULL|False\n961|col962|INT64|NULL|False\n962|col963|INT64|NULL|False\n963|col964|INT64|NULL|False\n964|col965|INT64|NULL|False\n965|col966|INT64|NULL|False\n966|col967|INT64|NULL|False\n967|col968|INT64|NULL|False\n968|col969|INT64|NULL|False\n969|col970|INT64|NULL|False\n970|col971|INT64|NULL|False\n971|col972|INT64|NULL|False\n972|col973|INT64|NULL|False\n973|col974|INT64|NULL|False\n974|col975|INT64|NULL|False\n975|col976|INT64|NULL|False\n976|col977|INT64|NULL|False\n977|col978|INT64|NULL|False\n978|col979|INT64|NULL|False\n979|col980|INT64|NULL|False\n980|col981|INT64|NULL|False\n981|col982|INT64|NULL|False\n982|col983|INT64|NULL|False\n983|col984|INT64|NULL|False\n984|col985|INT64|NULL|False\n985|col986|INT64|NULL|False\n986|col987|INT64|NULL|False\n987|col988|INT64|NULL|False\n988|col989|INT64|NULL|False\n989|col990|INT64|NULL|False\n990|col991|INT64|NULL|False\n991|col992|INT64|NULL|False\n992|col993|INT64|NULL|False\n993|col994|INT64|NULL|False\n994|col995|INT64|NULL|False\n995|col996|INT64|NULL|False\n996|col997|INT64|NULL|False\n997|col998|INT64|NULL|False\n998|col999|INT64|NULL|False\n999|col1000|INT64|NULL|False\n1000|col1001|INT64|NULL|False\n1001|col1002|INT64|NULL|False\n1002|col1003|INT64|NULL|False\n1003|col1004|INT64|NULL|False\n1004|col1005|INT64|NULL|False\n1005|col1006|INT64|NULL|False\n1006|col1007|INT64|NULL|False\n1007|col1008|INT64|NULL|False\n1008|col1009|INT64|NULL|False\n1009|col1010|INT64|NULL|False\n1010|col1011|INT64|NULL|False\n1011|col1012|INT64|NULL|False\n1012|col1013|INT64|NULL|False\n1013|col1014|INT64|NULL|False\n1014|col1015|INT64|NULL|False\n1015|col1016|INT64|NULL|False\n1016|col1017|INT64|NULL|False\n1017|col1018|INT64|NULL|False\n1018|col1019|INT64|NULL|False\n1019|col1020|INT64|NULL|False\n1020|col1021|INT64|NULL|False\n1021|col1022|INT64|NULL|False\n1022|col1023|INT64|NULL|False\n1023|col1024|INT64|NULL|False\n1024|col1025|INT64|NULL|False\n1025|col1026|INT64|NULL|False\n1026|col1027|INT64|NULL|False\n1027|col1028|INT64|NULL|False\n1028|col1029|INT64|NULL|False\n1029|col1030|INT64|NULL|False\n1030|col1031|INT64|NULL|False\n1031|col1032|INT64|NULL|False\n1032|col1033|INT64|NULL|False\n1033|col1034|INT64|NULL|False\n1034|col1035|INT64|NULL|False\n1035|col1036|INT64|NULL|False\n1036|col1037|INT64|NULL|False\n1037|col1038|INT64|NULL|False\n1038|col1039|INT64|NULL|False\n1039|col1040|INT64|NULL|False\n1040|col1041|INT64|NULL|False\n1041|col1042|INT64|NULL|False\n1042|col1043|INT64|NULL|False\n1043|col1044|INT64|NULL|False\n1044|col1045|INT64|NULL|False\n1045|col1046|INT64|NULL|False\n1046|col1047|INT64|NULL|False\n1047|col1048|INT64|NULL|False\n1048|col1049|INT64|NULL|False\n1049|col1050|INT64|NULL|False\n1050|col1051|INT64|NULL|False\n1051|col1052|INT64|NULL|False\n1052|col1053|INT64|NULL|False\n1053|col1054|INT64|NULL|False\n1054|col1055|INT64|NULL|False\n1055|col1056|INT64|NULL|False\n1056|col1057|INT64|NULL|False\n1057|col1058|INT64|NULL|False\n1058|col1059|INT64|NULL|False\n1059|col1060|INT64|NULL|False\n1060|col1061|INT64|NULL|False\n1061|col1062|INT64|NULL|False\n1062|col1063|INT64|NULL|False\n1063|col1064|INT64|NULL|False\n1064|col1065|INT64|NULL|False\n1065|col1066|INT64|NULL|False\n1066|col1067|INT64|NULL|False\n1067|col1068|INT64|NULL|False\n1068|col1069|INT64|NULL|False\n1069|col1070|INT64|NULL|False\n1070|col1071|INT64|NULL|False\n1071|col1072|INT64|NULL|False\n```\n\n----------------------------------------\n\nTITLE: ID Mapping Data Format\nDESCRIPTION: A structured text format showing ID mappings with each line containing three pipe-separated values: a zero, '1:' followed by an ID, and the same ID repeated.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_fwd_answer.txt#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0|1:3612|3612\n0|1:3613|3613\n0|1:3614|3614\n```\n\n----------------------------------------\n\nTITLE: Numerical Sequence in Plaintext\nDESCRIPTION: A plain text list of sequential numbers that could represent line numbers, IDs, or other numerical identifiers.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_npy_large_id_answer.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n17638\n17639\n1764\n17640\n...\n19163\n19164\n19165\n```\n\n----------------------------------------\n\nTITLE: Creating Unity Catalog Loader for Non-Windows Platforms\nDESCRIPTION: For non-Windows platforms that aren't building a static extension, creates a shared library loader for the Unity Catalog extension using DuckDB's loader mechanism.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/unity_catalog/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT WIN32 AND NOT BUILD_STATIC_EXTENSION)\n    add_library(unity_catalog_loader\n            SHARED\n            ${PROJECT_SOURCE_DIR}/extension/duckdb/src/loader/duckdb_loader.cpp)\n    set_extension_properties(unity_catalog_loader unity_catalog_loader unity_catalog)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Aggregate Functions to Parent Scope in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the object files generated from the kuzu_function_aggregate library. This ensures that these aggregate function implementations are included in the final build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/aggregate/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_function_aggregate>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining kuzu_common_vector Library in CMake\nDESCRIPTION: Creates an OBJECT library named kuzu_common_vector that includes the vector-related source files. Object libraries in CMake compile sources but don't link them into a library directly.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/vector/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(kuzu_common_vector\n        OBJECT\n        auxiliary_buffer.cpp\n        value_vector.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Scope Object Files\nDESCRIPTION: Adds the kuzu_planner object files to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_planner>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in CMake\nDESCRIPTION: Adds the compiled objects from kuzu_common_vector to the ALL_OBJECT_FILES variable in the parent scope. This allows the objects to be included in a higher-level target.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/common/vector/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_common_vector>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Mapping Numeric Identifiers in KuzuDB\nDESCRIPTION: This snippet shows a sample of the data mapping format used in the file. Each line represents a mapping entry with three fields: an identifier, a prefixed value, and a constant value.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_single_fwd_answer.txt#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1533|1:6533|5000\n1534|1:6534|5000\n1535|1:6535|5000\n1536|1:6536|5000\n1537|1:6537|5000\n```\n\n----------------------------------------\n\nTITLE: ID Mapping Data Structure in KuzuDB\nDESCRIPTION: A data structure showing ID mappings in the format id|1:id|0 where each line represents a unique identifier mapping. The pattern suggests a one-to-one relationship between identifiers with a trailing zero flag.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/copy_large_list_single_bwd_answer.txt#2025-04-17_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n1654|1:1654|0\n1655|1:1655|0\n1656|1:1656|0\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Global Object Files Variable\nDESCRIPTION: Appends the kuzu_processor object files to the parent scope's ALL_OBJECT_FILES variable for inclusion in the final build\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating Parent Scope with Object Files in CMake\nDESCRIPTION: Sets the ALL_OBJECT_FILES variable in the parent scope to include the objects from the kuzu_table_function library. This allows the parent CMake configuration to incorporate these objects into the final build targets.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/function/table/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_table_function>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating ALL_OBJECT_FILES in Parent Scope\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the objects from the kuzu_planner_plan_operator library. This allows the parent CMake file to include these objects in the final build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/plan/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_planner_plan_operator>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS-Specific Dynamic Lookup for Delta Loader\nDESCRIPTION: On macOS systems with dynamic extensions, configures the delta_loader with dynamic symbol lookup behavior, which is necessary for proper operation on macOS platforms.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE AND NOT BUILD_STATIC_EXTENSION)\n    set_apple_dynamic_lookup(delta_loader)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in KuzuDB CMake\nDESCRIPTION: Adds the compiled object files from the 'kuzu_planner_operator' target to the ALL_OBJECT_FILES variable in the parent scope. This allows these object files to be included in a larger library or executable target defined in a parent CMake file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/planner/operator/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_planner_operator>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files List in CMake for KuzuDB\nDESCRIPTION: This snippet updates the ALL_OBJECT_FILES variable to include the objects from the kuzu_processor_operator library. It uses the PARENT_SCOPE keyword to modify the variable in the parent scope.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for LZ4 Library in CMake\nDESCRIPTION: This snippet sets up the include directories for the LZ4 library. It uses generator expressions to set the include path for the build interface to the current source directory.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/lz4/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  lz4\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Objects to Parent Scope in CMake\nDESCRIPTION: Sets the ALL_OBJECT_FILES variable in the parent scope to include the objects from the kuzu_binder_query library. This allows the objects to be included in a larger build target defined in a parent CMakeLists.txt file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/query/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_query>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding LZ4 as Static Library in CMake\nDESCRIPTION: This snippet adds LZ4 as a static library to the project. It specifies lz4.cpp as the source file for the library.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/lz4/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(lz4 STATIC lz4.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting All Object Files for KuzuDB in CMake\nDESCRIPTION: Appends the objects from the 'kuzu_binder_bind' library to the ALL_OBJECT_FILES variable and sets it in the parent scope. This is likely used to collect all object files for linking in a higher-level CMakeLists.txt file.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/bind/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder_bind>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating ALL_OBJECT_FILES with KuzuDB Binder Objects\nDESCRIPTION: Appends the objects from the 'kuzu_binder' library to the ALL_OBJECT_FILES variable. This ensures the binder objects are included in the parent scope for further processing or linking.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/binder/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_binder>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Loader for macOS\nDESCRIPTION: Applies macOS-specific settings for the DuckDB loader extension, enabling dynamic symbol lookup.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/duckdb/src/loader/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (APPLE)\n    set_apple_dynamic_lookup(duckdb_loader)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for KuzuDB Shell\nDESCRIPTION: Sets up include directories for yyjson and JSON extension dependencies.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/printer/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n    ${PROJECT_SOURCE_DIR}/third_party/yyjson/src\n    ${PROJECT_SOURCE_DIR}/extension/json/src/include\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Files for KuzuDB Parquet Writer\nDESCRIPTION: Adds the objects from the kuzu_processor_operator_parquet_writer library to the ALL_OBJECT_FILES variable, which is likely used for compilation in a parent scope. This ensures the Parquet writer objects are included in the main project build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/writer/parquet/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_processor_operator_parquet_writer>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Shell Object Files\nDESCRIPTION: Adds the shell printer object files to the parent scope variable for compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/tools/shell/printer/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(KUZU_SHELL_OBJECT_FILES\n        ${KUZU_SHELL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_shell_printer>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Subdirectories for Reader and Parquet Writer in KuzuDB\nDESCRIPTION: Adds subdirectories for the reader module and parquet writer module to the build process, including them in the compilation.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/processor/operator/persistent/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(reader)\nadd_subdirectory(writer/parquet)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in CMake\nDESCRIPTION: Adds the object files from the kuzu_expression_evaluator library to the ALL_OBJECT_FILES variable in the parent scope. This allows these objects to be included in the main build process of the KuzuDB project.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/src/expression_evaluator/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:kuzu_expression_evaluator>\n        PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building Delta Extension Library and Configuring Dependencies\nDESCRIPTION: Builds the Delta extension library using a custom function and links it with the DuckDB libraries. This establishes the main extension functionality.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/delta/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nbuild_extension_lib(${BUILD_STATIC_EXTENSION} \"delta\")\n\ntarget_link_libraries(kuzu_${EXTENSION_LIB_NAME}_extension\n        PRIVATE\n        ${DuckDB_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Defining Delta Connector Library\nDESCRIPTION: Creates a library for Delta connector functionality, including necessary source files for DuckDB integration, Delta connector, and HTTP/S3 filesystem support.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/extension/iceberg/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(delta_connector\n    ${PROJECT_SOURCE_DIR}/extension/delta/src/connector/delta_connector.cpp\n    ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_secret_manager.cpp\n    ${PROJECT_SOURCE_DIR}/extension/duckdb/src/connector/duckdb_connector.cpp\n    ${PROJECT_SOURCE_DIR}/extension/duckdb/src/function/duckdb_scan.cpp\n    ${PROJECT_SOURCE_DIR}/extension/httpfs/src/s3fs_config.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Building the Brotli Command-Line Tool\nDESCRIPTION: Creates the brotli command-line executable if tools building is enabled. This tool provides compression and decompression functionality via the command line.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Build the brotli executable\nif(BROTLI_BUILD_TOOLS)\n  add_executable(brotli c/tools/brotli.c)\n  target_link_libraries(brotli ${BROTLI_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Extract Version Information from Header Files\nDESCRIPTION: Creates a function to read version macros from header files, which is then used to extract version information from the Brotli headers. This provides version metadata for the build.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Reads macro from .h file; it is expected to be a single-line define.\nfunction(read_macro PATH MACRO OUTPUT)\n  file(STRINGS ${PATH} _line REGEX \"^#define +${MACRO} +(.+)$\")\n  string(REGEX REPLACE \"^#define +${MACRO} +(.+)$\" \"\\\\1\" _val \"${_line}\")\n  set(${OUTPUT} ${_val} PARENT_SCOPE)\nendfunction(read_macro)\n\n# Version information\nread_macro(\"c/common/version.h\" \"BROTLI_VERSION_MAJOR\" BROTLI_VERSION_MAJOR)\nread_macro(\"c/common/version.h\" \"BROTLI_VERSION_MINOR\" BROTLI_VERSION_MINOR)\nread_macro(\"c/common/version.h\" \"BROTLI_VERSION_PATCH\" BROTLI_VERSION_PATCH)\nset(BROTLI_VERSION \"${BROTLI_VERSION_MAJOR}.${BROTLI_VERSION_MINOR}.${BROTLI_VERSION_PATCH}\")\nmark_as_advanced(BROTLI_VERSION BROTLI_VERSION_MAJOR BROTLI_VERSION_MINOR BROTLI_VERSION_PATCH)\n\n# ABI Version information\nread_macro(\"c/common/version.h\" \"BROTLI_ABI_CURRENT\" BROTLI_ABI_CURRENT)\nread_macro(\"c/common/version.h\" \"BROTLI_ABI_REVISION\" BROTLI_ABI_REVISION)\nread_macro(\"c/common/version.h\" \"BROTLI_ABI_AGE\" BROTLI_ABI_AGE)\nmath(EXPR BROTLI_ABI_COMPATIBILITY \"${BROTLI_ABI_CURRENT} - ${BROTLI_ABI_AGE}\")\nmark_as_advanced(BROTLI_ABI_CURRENT BROTLI_ABI_REVISION BROTLI_ABI_AGE BROTLI_ABI_COMPATIBILITY)\n```\n\n----------------------------------------\n\nTITLE: Determining Bundled Mode for Integration with Parent Projects\nDESCRIPTION: Sets the BROTLI_BUNDLED_MODE variable which determines whether Brotli is being built as a standalone project or bundled within another project. This affects installation behavior.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/brotli/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# If Brotli is being bundled in another project, we don't want to\n# install anything.  However, we want to let people override this, so\n# we'll use the BROTLI_BUNDLED_MODE variable to let them do that; just\n# set it to OFF in your project before you add_subdirectory(brotli).\nget_directory_property(BROTLI_PARENT_DIRECTORY PARENT_DIRECTORY)\nif(NOT DEFINED BROTLI_BUNDLED_MODE)\n  # Bundled mode hasn't been set one way or the other, set the default\n  # depending on whether or not we are the top-level project.\n  if(BROTLI_PARENT_DIRECTORY)\n    set(BROTLI_BUNDLED_MODE ON)\n  else()\n    set(BROTLI_BUNDLED_MODE OFF)\n  endif()\nendif()\nmark_as_advanced(BROTLI_BUNDLED_MODE)\n\ninclude(GNUInstallDirs)\n```\n\n----------------------------------------\n\nTITLE: Configuring pybind11 Installation in CMake\nDESCRIPTION: This snippet handles the installation of pybind11 headers, CMake configuration files, and sets up pkg-config support. It also configures version file generation based on CMake version.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/pybind11/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(PYBIND11_INSTALL)\n  install(DIRECTORY ${pybind11_INCLUDE_DIR}/pybind11 DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n  set(PYBIND11_CMAKECONFIG_INSTALL_DIR\n      \"${CMAKE_INSTALL_DATAROOTDIR}/cmake/${PROJECT_NAME}\"\n      CACHE STRING \"install path for pybind11Config.cmake\")\n\n  if(IS_ABSOLUTE \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    set(pybind11_INCLUDEDIR \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\")\n  else()\n    set(pybind11_INCLUDEDIR \"\\$\\{PACKAGE_PREFIX_DIR\\}/${CMAKE_INSTALL_INCLUDEDIR}\")\n  endif()\n\n  configure_package_config_file(\n    tools/${PROJECT_NAME}Config.cmake.in \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n    INSTALL_DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  if(CMAKE_VERSION VERSION_LESS 3.14)\n    set(_PYBIND11_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})\n    unset(CMAKE_SIZEOF_VOID_P)\n\n    write_basic_package_version_file(\n      ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n      VERSION ${PROJECT_VERSION}\n      COMPATIBILITY AnyNewerVersion)\n\n    set(CMAKE_SIZEOF_VOID_P ${_PYBIND11_CMAKE_SIZEOF_VOID_P})\n  else()\n    write_basic_package_version_file(\n      ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n      VERSION ${PROJECT_VERSION}\n      COMPATIBILITY AnyNewerVersion ARCH_INDEPENDENT)\n  endif()\n\n  install(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n          ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n          tools/FindPythonLibsNew.cmake\n          tools/pybind11Common.cmake\n          tools/pybind11Tools.cmake\n          tools/pybind11NewTools.cmake\n    DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  if(NOT PYBIND11_EXPORT_NAME)\n    set(PYBIND11_EXPORT_NAME \"${PROJECT_NAME}Targets\")\n  endif()\n\n  install(TARGETS pybind11_headers EXPORT \"${PYBIND11_EXPORT_NAME}\")\n\n  install(\n    EXPORT \"${PYBIND11_EXPORT_NAME}\"\n    NAMESPACE \"pybind11::\"\n    DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  if(NOT prefix_for_pc_file)\n    set(prefix_for_pc_file \"${CMAKE_INSTALL_PREFIX}\")\n  endif()\n  join_paths(includedir_for_pc_file \"\\${prefix}\" \"${CMAKE_INSTALL_INCLUDEDIR}\")\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11.pc.in\"\n                 \"${CMAKE_CURRENT_BINARY_DIR}/pybind11.pc\" @ONLY)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/pybind11.pc\"\n          DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig/\")\n\n  if(PYBIND11_MASTER_PROJECT)\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/cmake_uninstall.cmake.in\"\n                   \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\" IMMEDIATE @ONLY)\n\n    add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P\n                                        ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy for Visibility\nDESCRIPTION: Configures the CMP0063 policy for visibility settings if available\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/mbedtls/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0063 in CMake\nDESCRIPTION: Checks if the CMP0063 policy is available and sets it to NEW if it exists. This policy affects how CMake handles visibility properties for shared libraries and executables.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/third_party/miniz/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: JSON Object Array with Sequential Numeric Values\nDESCRIPTION: A large collection of JSON objects with sequential numeric values assigned to property 'a'. This appears to be test data or sample data for the KuzuDB database system, containing objects numbered sequentially from 1111 to approximately 2110.\nSOURCE: https://github.com/kuzudb/kuzu/blob/master/test/answers/large_list_of_struct_answer.txt#2025-04-17_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n11},{a: 1112},{a: 1113},{a: 1114},{a: 1115},{a: 1116},{a: 1117},{a: 1118},{a: 1119},{a: 1120},{a: 1121},{a: 1122},{a: 1123},{a: 1124},{a: 1125},{a: 1126},{a: 1127},{a: 1128},{a: 1129},{a: 1130}...\n```"
  }
]