[
  {
    "owner": "litesvm",
    "repo": "litesvm",
    "content": "TITLE: Transfer Lamports with LiteSVM in NodeJS\nDESCRIPTION: This code snippet demonstrates a minimal example of transferring lamports from one account to another using LiteSVM. It sets up a LiteSVM instance, airdrops lamports to a payer account, creates a receiver account, constructs a transfer instruction, creates and signs a transaction, sends it using LiteSVM, and asserts the receiver's balance.  Requires `@solana/web3.js` and `litesvm` packages.\nSOURCE: https://github.com/litesvm/litesvm/blob/master/crates/node-litesvm/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LiteSVM } from \"litesvm\";\nimport {\n\tPublicKey,\n\tTransaction,\n\tSystemProgram,\n\tKeypair,\n\tLAMPORTS_PER_SOL,\n} from \"@solana/web3.js\";\n\ntest(\"one transfer\", () => {\n\tconst svm = new LiteSVM();\n\tconst payer = new Keypair();\n\tsvm.airdrop(payer.publicKey, BigInt(LAMPORTS_PER_SOL));\n\tconst receiver = PublicKey.unique();\n\tconst blockhash = svm.latestBlockhash();\n\tconst transferLamports = 1_000_000n;\n\tconst ixs = [\n\t\tSystemProgram.transfer({\n\t\t\tfromPubkey: payer.publicKey,\n\t\t\ttoPubkey: receiver,\n\t\t\tlamports: transferLamports,\n\t\t}),\n\t];\n\tconst tx = new Transaction();\n\ttx.recentBlockhash = blockhash;\n\ttx.add(...ixs);\n\ttx.sign(payer);\n\tsvm.sendTransaction(tx);\n\tconst balanceAfter = svm.getBalance(receiver);\n\texpect(balanceAfter).toBe(transferLamports);\n});\n```\n\n----------------------------------------\n\nTITLE: Minimal Example of Using LiteSVM for Solana Program Testing (Rust)\nDESCRIPTION: This Rust code snippet demonstrates a basic usage of LiteSVM to simulate a Solana transaction. It initializes a LiteSVM instance, airdrops tokens to a sender, creates a transfer instruction, builds and sends a transaction, and then asserts the balance of the sender and receiver accounts. It shows how to create a mock Solana environment for testing.\nSOURCE: https://github.com/litesvm/litesvm/blob/master/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse litesvm::LiteSVM;\nuse solana_keypair::Keypair;\nuse solana_message::Message;\nuse solana_pubkey::Pubkey;\nuse solana_signer::Signer;\nuse solana_system_interface::instruction::transfer;\nuse solana_transaction::Transaction;\n\nlet from_keypair = Keypair::new();\nlet from = from_keypair.pubkey();\nlet to = Pubkey::new_unique();\n\nlet mut svm = LiteSVM::new();\nsvm.airdrop(&from, 10_000).unwrap();\n\nlet instruction = transfer(&from, &to, 64);\nlet tx = Transaction::new(\n    &[&from_keypair],\n    Message::new(&[instruction], Some(&from)),\n    svm.latest_blockhash(),\n);\nlet tx_res = svm.send_transaction(tx).unwrap();\n\nlet from_account = svm.get_account(&from);\nlet to_account = svm.get_account(&to);\nassert_eq!(from_account.unwrap().lamports, 4936);\nassert_eq!(to_account.unwrap().lamports, 64);\n```\n\n----------------------------------------\n\nTITLE: Writing Arbitrary Account Data in LiteSVM (TypeScript)\nDESCRIPTION: This snippet demonstrates how to write arbitrary account data in LiteSVM, regardless of whether the account state would be possible in a real environment. It shows how to give an account a bunch of USDC without needing the USDC mint keypair. This is useful for testing scenarios without relying on real or fake tokens.\nSOURCE: https://github.com/litesvm/litesvm/blob/master/crates/node-litesvm/docs/tutorial/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tests/usdcMint.test.ts\n```\n\n----------------------------------------\n\nTITLE: Copying Accounts from Devnet to LiteSVM (TypeScript)\nDESCRIPTION: This snippet demonstrates how to copy account data from the Solana devnet and pass it to LiteSVM. This can be used to pull live data for testing purposes, allowing tests to run with realistic account states.\nSOURCE: https://github.com/litesvm/litesvm/blob/master/crates/node-litesvm/docs/tutorial/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tests/copyAccounts.test.ts\n```\n\n----------------------------------------\n\nTITLE: Overwriting Clock Sysvar in LiteSVM (TypeScript)\nDESCRIPTION: This snippet demonstrates how to dynamically overwrite the `Clock` sysvar in LiteSVM using `svm.setClock()`. It uses a program that panics if `clock.unix_timestamp` is greater than 100. This allows simulating different time states for testing time-dependent program logic.\nSOURCE: https://github.com/litesvm/litesvm/blob/master/crates/node-litesvm/docs/tutorial/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tests/clock.test.ts\n```\n\n----------------------------------------\n\nTITLE: Deploy Program from File in LiteSVM (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add a compiled Solana program to LiteSVM tests using the `addProgramFromFile` method. It uses a simple logging program from the Solana Program Library as an example. This enables testing of program logic in a simulated environment.\nSOURCE: https://github.com/litesvm/litesvm/blob/master/crates/node-litesvm/docs/tutorial/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tests/splLogging.test.ts\n```\n\n----------------------------------------\n\nTITLE: Install LiteSVM NodeJS Package\nDESCRIPTION: This command installs the LiteSVM package using yarn. It adds litesvm as a dependency to your project, allowing you to use its functionalities for Solana program testing.\nSOURCE: https://github.com/litesvm/litesvm/blob/master/crates/node-litesvm/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add litesvm\n```\n\n----------------------------------------\n\nTITLE: Building Solana Test Programs (Shell)\nDESCRIPTION: This command builds the Solana test programs required to run the tests for LiteSVM using Cargo. It is necessary to build the test programs before running `cargo test`.\nSOURCE: https://github.com/litesvm/litesvm/blob/master/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd crates/litesvm/test_programs && cargo build-sbf\n```\n\n----------------------------------------\n\nTITLE: Installing LiteSVM with Cargo\nDESCRIPTION: This command adds LiteSVM as a development dependency to your Rust project using Cargo. This allows you to use LiteSVM within your Solana program tests.\nSOURCE: https://github.com/litesvm/litesvm/blob/master/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add --dev litesvm\n```"
  }
]