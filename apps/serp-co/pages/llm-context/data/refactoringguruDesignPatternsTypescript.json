[
  {
    "owner": "refactoringguru",
    "repo": "design-patterns-typescript",
    "content": "TITLE: Implementing State Transitions in TypeScript\nDESCRIPTION: This code snippet shows the flow of state transitions between ConcreteStateA and ConcreteStateB within a Context object. It demonstrates how each state handles specific requests and initiates transitions to other states.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/State/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nContext: Transition to ConcreteStateA.\nConcreteStateA handles request1.\nConcreteStateA wants to change the state of the context.\nContext: Transition to ConcreteStateB.\nConcreteStateB handles request2.\nConcreteStateB wants to change the state of the context.\nContext: Transition to ConcreteStateA.\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Prerequisites\nDESCRIPTION: Commands for installing the TypeScript compiler and ts-node extension globally, which are required to run the pattern examples in this repository.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g typescript\nnpm install -g ts-node\n```\n\n----------------------------------------\n\nTITLE: Structuring Example Files in Design Patterns TypeScript Project\nDESCRIPTION: Demonstrates the correct file structure and naming convention for example files in the project. Each example should be placed in a specific directory structure under the 'src' folder.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/{PatternName}/{ExampleName}/index.ts\n```\n\n----------------------------------------\n\nTITLE: Displaying Flyweight Factory State in TypeScript\nDESCRIPTION: This snippet shows the output of a FlyweightFactory, listing the available flyweights representing different car models. It demonstrates how the Flyweight pattern manages shared state for multiple car objects.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Flyweight/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nFlyweightFactory: I have 5 flyweights:\nChevrolet_Camaro2018_pink\nMercedes Benz_C300_black\nMercedes Benz_C500_red\nBMW_M5_red\nBMW_X6_white\n```\n\n----------------------------------------\n\nTITLE: Chain of Responsibility Pattern Output - Full Chain\nDESCRIPTION: Shows the output of request handling through a complete chain (Monkey > Squirrel > Dog) where different food items are offered and handled by appropriate handlers.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/ChainOfResponsibility/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nChain: Monkey > Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n  Monkey: I'll eat the Banana.\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n```\n\n----------------------------------------\n\nTITLE: Decorated Component Output in TypeScript\nDESCRIPTION: Shows the output of a component wrapped with multiple decorators (ConcreteDecoratorA and ConcreteDecoratorB) in a nested structure.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Decorator/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nConcreteDecoratorB(ConcreteDecoratorA(ConcreteComponent))\n```\n\n----------------------------------------\n\nTITLE: Adding Car to Database Using Flyweight Pattern in TypeScript\nDESCRIPTION: This snippet demonstrates the process of adding a car to the database using the Flyweight pattern. It shows how existing flyweights are reused and how shared and unique states are displayed.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Flyweight/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nClient: Adding a car to database.\nFlyweightFactory: Reusing existing flyweight.\nFlyweight: Displaying shared ([\"BMW\",\"M5\",\"red\"]) and unique ([\"CL234IR\",\"James Doe\"]) state.\n```\n\n----------------------------------------\n\nTITLE: Running Pattern Examples in TypeScript\nDESCRIPTION: Command for executing TypeScript examples from the repository using ts-node. This allows running the examples directly without manual compilation.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nts-node src/Path-to-example/Example.ts\n```\n\n----------------------------------------\n\nTITLE: Normal Sort Strategy Output\nDESCRIPTION: Demonstrates the result of applying a normal (ascending) sort strategy to a sequence of letters.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Strategy/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\na,b,c,d,e\n```\n\n----------------------------------------\n\nTITLE: Formatting Invoice in HTML\nDESCRIPTION: This snippet demonstrates how to structure an invoice using HTML elements. It includes a header, customer information, line items, taxes, total, and footer.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/TemplateMethod/RealWorld/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>ACME S.L. Invoice</h1>\n</hr>\n<div id='customer'>Customer: Amazon Spain, id: amazon-spain</div>\n<ul>\n  <li>Nuts, units=3, amount=15€</li>\n  <li>Still water, units=10, amount=20€</li>\n  <li>Sandwich, units=1, amount=10€</li></ul>\n<div>Taxes: 9.45€</div>\nTotal: 54.45€\n<footer>Center Avenue, 42, Rockland  -  2023</footer>\n```\n\n----------------------------------------\n\nTITLE: Formatting Multilingual Comments in TypeScript Code\nDESCRIPTION: Shows how to structure comments that include multiple language versions (English and Russian in this case) within TypeScript code. This approach allows for generating language-specific versions of examples.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * EN: All products families have the same varieties (MacOS/Windows).\n *\n * This is a MacOS variant of a button.\n *\n * RU: Все семейства продуктов имеют одни и те же вариации (MacOS/Windows).\n *\n * Это вариант кнопки под MacOS.\n */\n```\n\n----------------------------------------\n\nTITLE: Displaying Vending Machine Product Inventory\nDESCRIPTION: Shows the inventory data structure used by the vending machine to track available products. The inventory is an array of objects containing product information (name, value) and the quantity of items available.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/State/RealWorld/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  { product: { name: 'Nuts', value: 25 }, items: 0 },\n  { product: { name: 'Soda', value: 15 }, items: 1 }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating New Flyweight in TypeScript\nDESCRIPTION: This snippet shows the creation of a new flyweight when an existing one cannot be found. It demonstrates how the Flyweight pattern handles new unique combinations of shared states.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Flyweight/Conceptual/Output.txt#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nClient: Adding a car to database.\nFlyweightFactory: Can't find a flyweight, creating new one.\nFlyweight: Displaying shared ([\"BMW\",\"X1\",\"red\"]) and unique ([\"CL234IR\",\"James Doe\"]) state.\n```\n\n----------------------------------------\n\nTITLE: Reverse Sort Strategy Output\nDESCRIPTION: Shows the result of applying a reverse (descending) sort strategy to the same sequence of letters.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Strategy/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ne,d,c,b,a\n```\n\n----------------------------------------\n\nTITLE: Basic Component Output in TypeScript\nDESCRIPTION: Shows the output of instantiating a basic concrete component without any decorators.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Decorator/Conceptual/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nConcreteComponent\n```\n\n----------------------------------------\n\nTITLE: Updated Flyweight Factory State in TypeScript\nDESCRIPTION: This snippet displays the updated state of the FlyweightFactory after adding a new flyweight. It shows how the factory manages and keeps track of all flyweights, including newly created ones.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Flyweight/Conceptual/Output.txt#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nFlyweightFactory: I have 6 flyweights:\nChevrolet_Camaro2018_pink\nMercedes Benz_C300_black\nMercedes Benz_C500_red\nBMW_M5_red\nBMW_X6_white\nBMW_X1_red\n```\n\n----------------------------------------\n\nTITLE: Chain of Responsibility Pattern Output - Subchain\nDESCRIPTION: Shows the output of request handling through a partial chain (Squirrel > Dog) demonstrating how fewer handlers results in more unhandled requests.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/ChainOfResponsibility/Conceptual/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSubchain: Squirrel > Dog\n\nClient: Who wants a Nut?\n  Squirrel: I'll eat the Nut.\nClient: Who wants a Banana?\n  Banana was left untouched.\nClient: Who wants a Cup of coffee?\n  Cup of coffee was left untouched.\n```\n\n----------------------------------------\n\nTITLE: Formatting Invoice in Markdown\nDESCRIPTION: This snippet shows how to format the same invoice using Markdown syntax. It includes headers, bold text for emphasis, bullet points for line items, and horizontal rules for separation.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/TemplateMethod/RealWorld/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n#ACME S.L. Invoice\n---\nCustomer: **Amazon Spain**, id: amazon-spain\n*Nuts, units=3, amount=15€\n*Still water, units=10, amount=20€\n*Sandwich, units=1, amount=10€\nTaxes: 9.45€\n**Total**: 54.45€\nCenter Avenue, 42, Rockland  -  2023\n---\n```\n\n----------------------------------------\n\nTITLE: Empty Vending Machine Inventory State\nDESCRIPTION: Shows the final inventory state when the machine runs out of stock, triggering a transition to the OutOfStock state. Both product types (Nuts and Soda) have zero items remaining.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/State/RealWorld/Output.txt#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  { product: { name: 'Nuts', value: 25 }, items: 0 },\n  { product: { name: 'Soda', value: 15 }, items: 0 }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Order Summary Totals in Plain Text\nDESCRIPTION: This code snippet displays the calculated totals for shipping costs and taxes in a simple text format. It provides a clear summary of these two important components of an order's total cost.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Visitor/RealWorld/Output.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTotal shipping costs are 2395\nTotal taxes are 340\n```\n\n----------------------------------------\n\nTITLE: CSV Data Structure with Dates and Email Addresses\nDESCRIPTION: A CSV-formatted dataset containing dates in DD/MM/YYYY format paired with email addresses. Each line represents a record with two fields separated by a comma: the date and the email address. The data spans from July 11 to July 16, 2022.\nSOURCE: https://github.com/refactoringguru/design-patterns-typescript/blob/main/src/Facade/RealWorld/input.txt#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n11/07/2022,john@example.com\n11/07/2022,mark@example.com\n11/07/2022,eric@example.com\n12/07/2022,irine@example.com\n12/07/2022,frank@example.com\n13/07/2022,francis@example.com\n15/07/2022,nathan@example.com\n15/07/2022,bob@example.com\n15/07/2022,christine@example.com\n16/07/2022,bobby@example.com\n16/07/2022,ethan@example.com\n```"
  }
]