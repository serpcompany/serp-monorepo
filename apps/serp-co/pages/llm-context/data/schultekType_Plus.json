[
  {
    "owner": "schultek",
    "repo": "type_plus",
    "content": "TITLE: Registering Basic Types in TypePlus\nDESCRIPTION: Demonstrates how to register non-generic custom types with TypePlus. This should be done early in the main() method of your Dart program.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTypePlus.add<MyClass>();\n```\n\n----------------------------------------\n\nTITLE: Working with Generic Type Arguments in Classes and Functions\nDESCRIPTION: Shows how to access type properties from generic type arguments in classes and functions.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass<T> {\n  String get name => T.name;\n}\n// or\nvoid myFunction<T>() {\n  String name = T.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Type Variables\nDESCRIPTION: Demonstrates how to work with types as variables, including accessing their properties and using helper functions for generic types.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Type a = int;\n  Type b = List<int>; // for dart < 2.15 instead do typeOf<List<int>>()\n  \n  String aName = a.name;\n  String bName = b.name;\n \n  // or use in expressions wrapped in ()\n  print((MyClass<String>).name);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Generic Types with Type Factory\nDESCRIPTION: Shows how to register generic types using a type factory function. The factory function takes as many type arguments as the target class defines and calls f with the generic type.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass<A, B> {}\n\nvoid main() {\n  TypePlus.addFactory(<A, B>(f) => f<MyClass<A, B>>());\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Generic Methods with Type Variables\nDESCRIPTION: Demonstrates how to call generic methods by providing type variables for generic arguments using the callWith method.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvoid printType<T>() {\n  print(T.name);\n}\n\nvoid main() {\n  var type = typeOf<Map<String, int>>();\n  \n  // prints: \"Map<String, int>\"\n  printType.callWith(typeArguments: [type]);\n  \n  // prints: \"String\"\n  printType.callWith(typeArguments: [type.args.first]);\n}\n```\n\n----------------------------------------\n\nTITLE: Decomposing Generic Types\nDESCRIPTION: Shows how to decompose a generic type into its base type and type arguments, using a Map<String, int> example.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var type = Map<String, int>;\n  \n  String name = T.name; // = \"Map<String, int>\"\n  \n  Type base = T.base; // = Map\n  List<Type> args = T.args; // = [String, int]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Type Properties in Generic Functions\nDESCRIPTION: Demonstrates how to access type properties like name, id, base type, and type arguments within a generic function.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid myGenericFunction<T>() {\n  String name = T.name; // the full name of the type\n  String id = T.id; // a unique id of the type\n    \n  Type base = T.base; // the base type of a generic type\n  List<Type> args = T.args; // the type arguments of a generic type\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Type Inheritance\nDESCRIPTION: Shows how to check inheritance relationships between types using implements and implementedBy methods, after registering supertypes.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass extends List<int> {}\n\nvoid main() {\n  var listType = List<int>;\n  \n  TypePlus.add<MyClass>(superTypes: [listType]);\n  \n  var myType = MyClass;\n  \n  assert(myType.implements(listType));\n  assert(listType.implementedBy(myType));\n  \n  assert(!myType.implements(List)); // needs to be the full specified type\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Type IDs and Constructing Generic Types\nDESCRIPTION: Shows how to use unique type IDs to identify and construct generic types from strings.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Type a = List;\n  Type b = int;\n  \n  Type newType = TypePlus.fromId('${a.id}<${b.id}>');\n  assert(newType.base == a);\n  assert(newType.args.first == b);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Types with Custom IDs\nDESCRIPTION: Demonstrates how to provide custom IDs when registering types for later reference.\nSOURCE: https://github.com/schultek/type_plus/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  TypePlus.add<MyClass>(id: 'CoolId');\n  \n  Type myType = TypePlus.fromId('CoolId');\n  assert(myType == MyClass);\n}\n```"
  }
]