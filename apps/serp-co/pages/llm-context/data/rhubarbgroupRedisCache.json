[
  {
    "owner": "rhubarbgroup",
    "repo": "redis-cache",
    "content": "TITLE: Configuring Redis Object Cache Parameters in wp-config.php (PHP)\nDESCRIPTION: Defines essential constants in the wp-config.php file to specify Redis connection settings for the WordPress Redis Object Cache plugin. The code adjusts the Redis host, port, prefix, database, and timeouts, with comments guiding where and how to customize for site-specific needs. Required: WordPress with the Redis Object Cache plugin installed, Redis server running and network-accessible. All constants must be declared before the loading of wp-settings.php. The parameters provide flexibility for multi-site setups and help prevent cache collisions.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/INSTALL.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// adjust Redis host and port if necessary \ndefine( 'WP_REDIS_HOST', '127.0.0.1' );\ndefine( 'WP_REDIS_PORT', 6379 );\n\n// change the prefix and database for each site to avoid cache data collisions\ndefine( 'WP_REDIS_PREFIX', 'my-moms-site' );\ndefine( 'WP_REDIS_DATABASE', 0 ); // 0-15\n\n// reasonable connection and read+write timeouts\ndefine( 'WP_REDIS_TIMEOUT', 1 );\ndefine( 'WP_REDIS_READ_TIMEOUT', 1 );\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Socket Connection for Redis Object Cache - PHP\nDESCRIPTION: This PHP code snippet demonstrates configuring the Redis Object Cache plugin to connect to a Redis server via a Unix socket by setting 'WP_REDIS_SCHEME' to 'unix' and providing the path to the Unix socket using 'WP_REDIS_PATH'. This setup improves connection performance when Redis is on the same host as WordPress. Required: Redis server must support Unix sockets and PHP must have appropriate file system access.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/README.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_REDIS_SCHEME', 'unix' );\\ndefine( 'WP_REDIS_PATH', '/var/run/redis.sock' );\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS-encrypted TCP Connection for Redis Object Cache - PHP\nDESCRIPTION: This snippet shows how to connect the Redis Object Cache plugin to a Redis server over a TLS-encrypted TCP connection. It sets 'WP_REDIS_SCHEME' to 'tls', provides hostname and port, and demonstrates how to pass custom stream context options via 'WP_REDIS_SSL_CONTEXT' for SSL verification control. TLS/SSL requires that Redis is configured for encrypted connections and that the PHP environment supports TLS streams.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_REDIS_SCHEME', 'tls' );\\ndefine( 'WP_REDIS_HOST', 'master.ncit.ameaqx.use1.cache.amazonaws.com' );\\ndefine( 'WP_REDIS_PORT', 6379 );\n```\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_REDIS_SSL_CONTEXT', [\\n    'verify_peer' => false,\\n    'verify_peer_name' => false,\\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Client and Memory Optimization for Redis Object Cache - PHP\nDESCRIPTION: This PHP configuration illustrates enabling the Relay client for Redis Object Cache, setting connection parameters (host, port, database, prefix), and enabling igbinary serialization to optimize memory usage. Notably, each WordPress install must use a dedicated database and unique key prefix when using Relay. Requires Relay PHP extension and Redis server compatibility.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_REDIS_CLIENT', 'relay' );\\n\\ndefine( 'WP_REDIS_HOST', '127.0.0.1' );\\ndefine( 'WP_REDIS_PORT', 6379 );\\n\\n// when using Relay, each WordPress installation\\n// MUST a dedicated Redis database and unique prefix\\ndefine( 'WP_REDIS_DATABASE', 0 );\\ndefine( 'WP_REDIS_PREFIX', 'db3:' );\\n\\n// consume less memory\\ndefine( 'WP_REDIS_IGBINARY', true );\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Server Status with redis-cli - Bash\nDESCRIPTION: These commands use the redis-cli utility to verify that the Redis server is up and accepting commands on a specified host and port. Ensure redis-cli is installed and that you have network access to the designated host and port. The command returns a PONG response if the server is running and reachable.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/FAQ.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli PING\n\n# or specify a custom host/port\nredis-cli -h 127.0.0.1 -p 6379 PING\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Redis Object Cache Plugin via Composer (Bash)\nDESCRIPTION: Provides a sequence of shell commands for managing the Redis Object Cache plugin using Composer and WP-CLI. Steps include installing the plugin package, enabling the WordPress object cache drop-in, checking the plugin's status, and setting key connection constants via CLI. Requires Composer, WP-CLI, and adequate privileges to run configuration commands; assumes an existing WordPress installation. Inputs include host, port, and database values; outputs are operational status and configuration changes.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/INSTALL.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install the plugin:\ncomposer require wpackagist-plugin/redis-cache\n\n# Next, enable the drop-in:\nwp redis enable\n\n# Check the connection:\nwp redis status\n\n# Configure the plugin\nwp config set WP_REDIS_HOST \"127.0.0.1\"\nwp config set WP_REDIS_PORT \"6379\"\nwp config set WP_REDIS_DATABASE \"15\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel with Predis for Automatic Failover - PHP\nDESCRIPTION: This snippet configures the Redis Object Cache plugin to use Predis in a Sentinel-managed Redis environment. It declares the Sentinel name and a list of Sentinel endpoints. This enables automatic master discovery and failover. Requires at least one running Sentinel and a compatible Redis and Predis setup.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_REDIS_CLIENT', 'predis' );\\n\\ndefine( 'WP_REDIS_SENTINEL', 'my-sentinel' );\\ndefine( 'WP_REDIS_SERVERS', [\\n    'tcp://127.0.0.1:5380',\\n    'tcp://127.0.0.2:5381',\\n    'tcp://127.0.0.3:5382',\\n] );\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Replication with Predis for WordPress - PHP\nDESCRIPTION: This snippet sets the Redis Object Cache client to 'predis' and configures server endpoints for Redis replication, enabling master and replica nodes. 'WP_REDIS_SERVERS' must list each Redis instance, specifying roles and optionally database and alias. Useful for high availability deployments; ensure all endpoints are accessible and network secure.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_REDIS_CLIENT', 'predis' );\\n\\ndefine( 'WP_REDIS_SERVERS', [\\n    'tcp://127.0.0.1:6379?database=5&role=master',\\n    'tcp://127.0.0.2:6379?database=5&alias=replica-01',\\n] );\n```\n\n----------------------------------------\n\nTITLE: Correct Placement of WP_REDIS_PASSWORD in wp-config.php - PHP\nDESCRIPTION: Shows placement of WP_REDIS_PASSWORD and other Redis-related constants in wp-config.php, above the lines that finalize configuration. Ensures authentication and connection parameters are properly loaded by WordPress before plugins initialize.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/FAQ.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/* That's all, stop editing! Happy publishing. */\nrequire_once(ABSPATH . 'wp-settings.php');\n```\n\n----------------------------------------\n\nTITLE: Correct Placement of Redis Constants in wp-config.php - PHP\nDESCRIPTION: This PHP code block shows where to place WP_REDIS_* constants in wp-config.php, immediately above the end of configuration and before loading WordPress settings. Required when configuring redis cache settings to ensure they're recognized. Must appear prior to requiring wp-settings.php to be effective.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/FAQ.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/* That's all, stop editing! Happy publishing. */\nrequire_once(ABSPATH . 'wp-settings.php');\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Authentication for Redis Object Cache - PHP\nDESCRIPTION: This snippet demonstrates setting the 'WP_REDIS_PASSWORD' constant as an array to enable Redis ACL (Access Control List) authentication for the Redis Object Cache plugin. It passes both the username and password, required when Redis is configured with multiple users. Ensure Redis version supports ACL and the provided credentials match a valid ACL user.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_REDIS_PASSWORD', [ 'username', 'password' ] );\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sharding with PhpRedis for WordPress - PHP\nDESCRIPTION: This PHP configuration sets the Redis Object Cache client to 'phpredis' and defines multiple shards using 'WP_REDIS_SHARDS'. Each shard specifies its own connection endpoint and alias, allowing distributed caching across multiple Redis servers for horizontal scalability. Requires the phpredis PHP extension and compatible Redis server topology.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_REDIS_CLIENT', 'phpredis' );\\n\\ndefine( 'WP_REDIS_SHARDS', [\\n    'tcp://127.0.0.1:6379?database=10&alias=shard-01',\\n    'tcp://127.0.0.2:6379?database=10&alias=shard-02',\\n    'tcp://127.0.0.3:6379?database=10&alias=shard-03',\\n] );\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with PhpRedis for WordPress - PHP\nDESCRIPTION: This code demonstrates setting up the Redis Object Cache plugin to work with a Redis Cluster topology using the PhpRedis client. 'WP_REDIS_CLUSTER' provides the list of cluster nodes and optionally an alias for each node. Intended for highly scalable, distributed environments. Ensure consistent cluster configuration and PHP extension compatibility.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_REDIS_CLIENT', 'phpredis' );\\n\\ndefine( 'WP_REDIS_CLUSTER', [\\n    'tcp://127.0.0.1:6379?alias=node-01',\\n    'tcp://127.0.0.2:6379?alias=node-02',\\n    'tcp://127.0.0.3:6379?alias=node-03',\\n] );\n```\n\n----------------------------------------\n\nTITLE: Setting Location for Redis Configuration in wp-config.php (PHP)\nDESCRIPTION: Shows the critical placement point within wp-config.php for defining WP_REDIS_* constants before WordPress loads its settings. It ensures that the configuration is set before the caching layer is initialized, which is essential for plugin correctness. No actual operational code, but provides a safeguard to prevent misconfiguration.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/INSTALL.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/* That's all, stop editing! Happy publishing. */\nrequire_once(ABSPATH . 'wp-settings.php');\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with Default Settings in PHP\nDESCRIPTION: Example of creating a Predis client instance with default connection parameters and performing basic operations.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$client = new Predis\\Client();\n$client->set('foo', 'bar');\n$value = $client->get('foo');\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication with Predis Client in PHP\nDESCRIPTION: Demonstrates configuring the Predis client for Redis in replication mode with a static server list where one server is the master and two are slaves. This setup provides high availability and basic load balancing. The dependencies are the Predis PHP library, and key input parameters include server URLs and their role designations. The resulting $client instance routes read and write operations across nodes according to the described strategy.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$parameters = ['tcp://10.0.0.1?role=master', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['replication' => 'predis'];\n\n$client = new Predis\\Client($parameters, $options);\n```\n\n----------------------------------------\n\nTITLE: Configuring High-Availability with Redis Sentinel and Predis in PHP\nDESCRIPTION: Shows how to configure the Predis client to use Redis Sentinel for high availability. This approach has the client discover master and slave nodes through Sentinel, using connection parameters pointing to sentinel instances, 'replication'=>'sentinel', and a required 'service' name. The result is a resilient Predis client that automatically handles failover using the listed Sentinels.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$sentinels = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options   = ['replication' => 'sentinel', 'service' => 'mymaster'];\n\n$client = new Predis\\Client($sentinels, $options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster with Predis in PHP\nDESCRIPTION: Shows how to configure Predis to work with a Redis cluster using client-side sharding and redis-cluster.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Client-side sharding\n$parameters = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['cluster' => 'predis'];\n\n$client = new Predis\\Client($parameters);\n\n// Redis-cluster\n$parameters = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['cluster' => 'redis'];\n\n$client = new Predis\\Client($parameters, $options);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with Custom Parameters in PHP\nDESCRIPTION: Demonstrates how to connect to Redis using custom connection parameters, both as a named array and a URI string.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Parameters passed using a named array:\n$client = new Predis\\Client([\n    'scheme' => 'tcp',\n    'host'   => '10.0.0.1',\n    'port'   => 6379,\n]);\n\n// Same set of parameters, passed using an URI string:\n$client = new Predis\\Client('tcp://10.0.0.1:6379');\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Operations with Credis_Client in PHP\nDESCRIPTION: Demonstrates how to use Credis_Client for basic Redis operations such as setting and getting values, and pushing/retrieving list items.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/colinmollenhour/credis/README.markdown#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire 'Credis/Client.php';\n$redis = new Credis_Client('localhost');\n$redis->set('awesome', 'absolutely');\necho sprintf('Is Credis awesome? %s.\\n', $redis->get('awesome'));\n\n// When arrays are given as arguments they are flattened automatically\n$redis->rpush('particles', array('proton','electron','neutron'));\n$particles = $redis->lrange('particles', 0, -1);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with TLS/SSL Encryption in PHP\nDESCRIPTION: Demonstrates how to connect to a secured Redis instance using TLS/SSL encryption with Predis.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Named array of connection parameters:\n$client = new Predis\\Client([\n  'scheme' => 'tls',\n  'ssl'    => ['cafile' => 'private.pem', 'verify_peer' => true],\n]);\n\n// Same set of parameters, but using an URI string:\n$client = new Predis\\Client('tls://127.0.0.1?ssl[cafile]=private.pem&ssl[verify_peer]=1');\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis via UNIX Socket in PHP\nDESCRIPTION: Shows how to connect to a local Redis instance using a UNIX domain socket with Predis.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$client = new Predis\\Client(['scheme' => 'unix', 'path' => '/path/to/redis.sock']);\n$client = new Predis\\Client('unix:/path/to/redis.sock');\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication and Database Selection in Predis Sentinel Setup (PHP)\nDESCRIPTION: Illustrates providing authentication and database selection parameters when using Predis with Sentinel replication. Set the 'parameters' option to include 'password' and 'database' configuration for connecting to Redis nodes that require authentication or need to use a non-default database. This options array is merged with other replication options when instantiating the client.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$options = [\n    'replication' => 'sentinel',\n    'service' => 'mymaster',\n    'parameters' => [\n        'password' => $secretpassword,\n        'database' => 10,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: TLS-Enabled Redis Connection with Credis_Client in PHP\nDESCRIPTION: Shows how to establish a TLS-secured connection to Redis using Credis_Client and perform basic operations.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/colinmollenhour/credis/README.markdown#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire 'Credis/Client.php';\n$redis = new Credis_Client('tls://127.0.0.1:6379');\n$redis->set('awesome', 'absolutely');\necho sprintf('Is Credis awesome? %s.\\n', $redis->get('awesome'));\n\n// When arrays are given as arguments they are flattened automatically\n$redis->rpush('particles', array('proton','electron','neutron'));\n$particles = $redis->lrange('particles', 0, -1);\n```\n\n----------------------------------------\n\nTITLE: Redis Sentinel Integration with Credis_Sentinel in PHP\nDESCRIPTION: Demonstrates how to use Credis_Sentinel to interact with Redis Sentinel for automatic failover and cluster management.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/colinmollenhour/credis/README.markdown#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'Credis/Client.php';\nrequire 'Credis/Cluster.php';\nrequire 'Credis/Sentinel.php';\n\n$sentinel = new Credis_Sentinel(new Credis_Client('127.0.0.1',26379));\n$masterAddress = $sentinel->getMasterAddressByName('mymaster');\n$cluster = $sentinel->getCluster('mymaster');\n\necho 'Writing to master: '.$masterAddress[0].' on port '.$masterAddress[1].PHP_EOL;\n$cluster->set('key','value');\necho $cluster->get('key').PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Clustering with Credis_Cluster in PHP\nDESCRIPTION: Demonstrates how to set up a basic Redis cluster using Credis_Cluster with two Redis instances and perform operations across the cluster.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/colinmollenhour/credis/README.markdown#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'Credis/Client.php';\nrequire 'Credis/Cluster.php';\n\n$cluster = new Credis_Cluster(array(\n    array('host' => '127.0.0.1', 'port' => 6379, 'alias'=>'alpha'),\n    array('host' => '127.0.0.1', 'port' => 6380, 'alias'=>'beta')\n));\n$cluster->set('key','value');\necho \"Alpha: \".$cluster->client('alpha')->get('key').PHP_EOL;\necho \"Beta: \".$cluster->client('beta')->get('key').PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Redis Commands with Predis Client in PHP\nDESCRIPTION: Demonstrates sending arbitrary (possibly unsupported) commands to Redis using Predis's executeRaw method. Useful for leveraging new or rarely used commands not explicitly defined in Predis. The executeRaw method expects an array of command arguments, directly mapped to Redis command signature.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->executeRaw(['SET', 'foo', 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions with Predis Client in PHP\nDESCRIPTION: Showcases transaction handling using Predis via callable blocks or chaining. Both approaches wrap commands in a MULTI/EXEC context. Dependencies are the Predis PHP library and a configured client. Inputs are Redis commands; outputs are transactional results. The abstraction also supports WATCH/UNWATCH and CAS patterns.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// Executes a transaction inside the given callable block:\n$responses = $client->transaction(function ($tx) {\n    $tx->set('foo', 'bar');\n    $tx->get('foo');\n});\n\n// Returns a transaction that can be chained thanks to its fluent interface:\n$responses = $client->transaction()->set('foo', 'bar')->get('foo')->execute();\n```\n\n----------------------------------------\n\nTITLE: Executing Command Pipelines with Predis Client in PHP\nDESCRIPTION: Demonstrates two ways to execute Redis command pipelines in Predis to reduce network latency: a callable block and fluent interface. Both methods return a set of responses for all commands executed. These techniques depend on the Predis PHP library and a properly configured client instance. Inputs include Redis command sequences; outputs are batched responses.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Executes a pipeline inside the given callable block:\n$responses = $client->pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", str_pad($i, 4, '0', 0));\n        $pipe->get(\"key:$i\");\n    }\n});\n\n// Returns a pipeline that can be chained thanks to its fluent interface:\n$responses = $client->pipeline()->set('foo', 'bar')->get('foo')->execute();\n```\n\n----------------------------------------\n\nTITLE: Advanced Redis Sentinel Configuration with Credis_Sentinel in PHP\nDESCRIPTION: Shows advanced configuration options for Credis_Sentinel, including database selection, replica count, and slave selection strategy.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/colinmollenhour/credis/README.markdown#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'Credis/Client.php';\nrequire 'Credis/Cluster.php';\nrequire 'Credis/Sentinel.php';\n\n$sentinel = new Credis_Sentinel(new Credis_Client('127.0.0.1',26379));\n$cluster = $sentinel->getCluster('mymaster',2,10,false,true);\n$cluster->set('key','value');\necho $cluster->get('key').PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Redis Master/Slave Replication with Credis_Cluster in PHP\nDESCRIPTION: Demonstrates how to set up master/slave replication using Credis_Cluster, with automatic read/write splitting between master and slave servers.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/colinmollenhour/credis/README.markdown#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'Credis/Client.php';\nrequire 'Credis/Cluster.php';\n\n$cluster = new Credis_Cluster(array(\n    array('host' => '127.0.0.1', 'port' => 6379, 'alias'=>'master', 'master'=>true),\n    array('host' => '127.0.0.1', 'port' => 6380, 'alias'=>'slave')\n));\n$cluster->set('key','value');\necho $cluster->get('key').PHP_EOL;\necho $cluster->client('slave')->get('key').PHP_EOL;\n\n$cluster->client('master')->set('key2','value');\necho $cluster->client('slave')->get('key2').PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Lua Scripts for Replication in Predis (PHP)\nDESCRIPTION: Demonstrates providing hints to Predis for Lua scripts which are read-only, so their execution can be routed to slave nodes. Defines a custom replication strategy, registers a script as read-only, and uses this strategy for replication. Useful in scenarios where custom Lua logic does not modify Redis data and can safely be load-balanced across slaves.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$parameters = ['tcp://10.0.0.1?role=master', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['replication' => function () {\n    // Set scripts that won't trigger a switch from a slave to the master node.\n    $strategy = new Predis\\Replication\\ReplicationStrategy();\n    $strategy->setScriptReadOnly($LUA_SCRIPT);\n\n    return new Predis\\Connection\\Replication\\MasterSlaveReplication($strategy);\n}];\n\n$client = new Predis\\Client($parameters, $options);\n$client->eval($LUA_SCRIPT, 0);             // Sticks to slave using `eval`...\n$client->evalsha(sha1($LUA_SCRIPT), 0);    // ... and `evalsha`, too.\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Commands to Predis Client in PHP\nDESCRIPTION: Explains how to define and inject new custom command classes into Predis by extending Predis\\Command\\Command. You implement the new command's getId method, provide it to the client via the 'commands' option, and call it as a native method. The example includes command instantiation and result fetching.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// Define a new command by extending Predis\\Command\\Command:\nclass BrandNewRedisCommand extends Predis\\Command\\Command\n{\n    public function getId()\n    {\n        return 'NEWCMD';\n    }\n}\n\n// Inject your command in the current command factory:\n$client = new Predis\\Client($parameters, [\n    'commands' => [\n        'newcmd' => 'BrandNewRedisCommand',\n    ],\n]);\n\n$response = $client->newcmd();\n```\n\n----------------------------------------\n\nTITLE: Redis Clustering with Explicit Replicas using Credis_Cluster in PHP\nDESCRIPTION: Shows how to create a Redis cluster with Credis_Cluster, explicitly setting the number of replicas for more even key distribution.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/colinmollenhour/credis/README.markdown#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'Credis/Client.php';\nrequire 'Credis/Cluster.php';\n\n$cluster = new Credis_Cluster(\n    array(\n        array('host' => '127.0.0.1', 'port' => 6379, 'alias'=>'alpha'),\n        array('host' => '127.0.0.1', 'port' => 6380, 'alias'=>'beta')\n    ), 5\n);\n$cluster->set('key','value');\necho \"Alpha: \".$cluster->client('alpha')->get('key').PHP_EOL;\necho \"Beta: \".$cluster->client('beta')->get('key').PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Redis Master/Slave Replication with Write-Only Master using Credis_Cluster in PHP\nDESCRIPTION: Shows how to configure a Redis cluster with a write-only master server, useful for high-load scenarios where read operations are directed only to slave servers.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/colinmollenhour/credis/README.markdown#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'Credis/Client.php';\nrequire 'Credis/Cluster.php';\n\n$cluster = new Credis_Cluster(array(\n    array('host' => '127.0.0.1', 'port' => 6379, 'alias'=>'master', 'master'=>true, 'write_only'=>true),\n    array('host' => '127.0.0.1', 'port' => 6380, 'alias'=>'slave')\n));\n$cluster->set('key','value');\necho $cluster->get('key').PHP_EOL;\n```\n\n----------------------------------------\n\nTITLE: Registering Script Commands in Predis Client (PHP)\nDESCRIPTION: Demonstrates registering a high-level Redis script command using a class extending Predis\\Command\\ScriptCommand. The example defines a class which pushes a random value to a list via Lua, injects it into the client factory, and invokes it as a native method. Inputs include the target key and random seed; output is the pushed random value. This depends on the Predis PHP library and a Redis server with scripting enabled.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// Define a new script command by extending Predis\\Command\\ScriptCommand:\nclass ListPushRandomValue extends Predis\\Command\\ScriptCommand\n{\n    public function getKeysCount()\n    {\n        return 1;\n    }\n\n    public function getScript()\n    {\n        return <<<LUA\nmath.randomseed(ARGV[1])\nlocal rnd = tostring(math.random())\nredis.call('lpush', KEYS[1], rnd)\nreturn rnd\nLUA;\n    }\n}\n\n// Inject the script command in the current command factory:\n$client = new Predis\\Client($parameters, [\n    'commands' => [\n        'lpushrand' => 'ListPushRandomValue',\n    ],\n]);\n\n$response = $client->lpushrand('random_values', $seed = mt_rand());\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Connection Backends with Predis (PHP)\nDESCRIPTION: Illustrates the implementation and usage of a custom Redis network backend by implementing the NodeConnectionInterface or extending AbstractConnection in Predis. After definition, the new connection class is tied to the connection scheme (e.g., 'tcp') in the client constructor, enabling support for specialized network setups. Requires knowledge of Predis internals and the intended network protocol.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass MyConnectionClass implements Predis\\Connection\\NodeConnectionInterface\n{\n    // Implementation goes here...\n}\n\n// Use MyConnectionClass to handle connections for the `tcp` scheme:\n$client = new Predis\\Client('tcp://127.0.0.1', [\n    'connections' => ['tcp' => 'MyConnectionClass'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Flushing All Redis Databases via redis-cli - Bash\nDESCRIPTION: Executes FLUSHALL against a Redis server at a specific IP and port to remove all keys from all databases. Requires redis-cli and sufficient permissions. Use with caution as it irreversibly deletes all cached data for all clients on the server.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/FAQ.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli -h 127.0.01 -p 6379 FLUSHALL\n```\n\n----------------------------------------\n\nTITLE: Deleting All WordPress Transients with WP-CLI - Bash\nDESCRIPTION: Leverages the wp-cli command line utility to delete all WordPress transients from the database. Requires WP-CLI to be installed and correctly configured. Helps clear leftover transients after enabling Redis Object Cache.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/FAQ.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwp transient delete-all\n```\n\n----------------------------------------\n\nTITLE: Logging Cache Flush Callers for Debugging - PHP\nDESCRIPTION: Attaches to the redis_object_cache_flush action to log detailed diagnostic data about cache flush events, including a timestamp, the $results variable, and a PHP backtrace, to a file named redis-cache-flush.log. Useful for tracking down plugins or code responsible for unexpectedly frequent cache flushes. Requires file write permission to the WordPress root and is intended for debugging purposes only.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/FAQ.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'redis_object_cache_flush', function( $results ) {\n    ob_start();\n    echo date( 'c' ) . PHP_EOL;\n    var_dump( $results );\n    debug_print_backtrace();\n    error_log( ob_get_clean(), 3, ABSPATH . '/redis-cache-flush.log' );\n}, 10, 5 );\n```\n\n----------------------------------------\n\nTITLE: Scheduling Regular Cache Flushes with WP Cron - PHP\nDESCRIPTION: This snippet schedules a recurring WordPress cron job to flush the Redis object cache hourly. It checks for an existing scheduled event, creates one if absent, and defines a callback using wp_cache_flush. Intended as a workaround for plugins or themes incompatible with persistent object caching. Requires WP Cron to be active.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/FAQ.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nif ( ! wp_next_scheduled( 'flush_redis_cache' ) ) {\n    wp_schedule_event( time(), 'hourly', 'flush_redis_cache' );\n}\n\nadd_action( 'flush_redis_cache', 'wp_cache_flush' );\n```\n\n----------------------------------------\n\nTITLE: Deleting All Transients from wp_options Table - SQL\nDESCRIPTION: This SQL statement removes all options from the wp_options table having a name starting with _transient_ or _site_transient_. Requires database access and correct table prefix. Use with care, as it can impact transient data across the site.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/FAQ.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM `wp_options`\nWHERE `option_name` LIKE '_transient_%'\nOR `option_name` LIKE '_site_transient_%';\n```\n\n----------------------------------------\n\nTITLE: Loading Predis Library in PHP\nDESCRIPTION: Code snippet demonstrating how to load the Predis library using its autoloader when Composer is not available.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Prepend a base path if Predis is not available in your \"include_path\".\nrequire 'Predis/Autoloader.php';\n\nPredis\\Autoloader::register();\n```\n\n----------------------------------------\n\nTITLE: Installing Predis via Composer in PHP\nDESCRIPTION: Command to install Predis using Composer, a dependency management tool for PHP.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/dependencies/predis/predis/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require predis/predis\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Caching on Each Request - PHP\nDESCRIPTION: This PHP snippet hooks into the parse_query action to disable WP_Query result caching by setting cache_results to false. Requires deployment as a Must Use Plugin and ensures queries do not use Redis-based cache, which may be necessary during troubleshooting with WordPress 6.1 or later.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/FAQ.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'parse_query', function ( $wp_query ) {\n    $wp_query->query_vars[ 'cache_results' ] = false;\n} );\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Notice for GNU GPL Licensed Program\nDESCRIPTION: This snippet demonstrates how to include a copyright notice and GNU GPL license information at the beginning of a source file. It includes placeholders for program name, copyright year, and author name.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/LICENSE.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{one line to give the program's name and a brief idea of what it does.}\nCopyright (C) {year}  {name of author}\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Terminal Interaction Notice for GNU GPL Licensed Program\nDESCRIPTION: This snippet shows a sample output for terminal-based programs to display a brief copyright and warranty notice when starting in interactive mode. It includes placeholders for project name, year, and author's full name.\nSOURCE: https://github.com/rhubarbgroup/redis-cache/blob/develop/LICENSE.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{project}  Copyright (C) {year}  {fullname}\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```"
  }
]