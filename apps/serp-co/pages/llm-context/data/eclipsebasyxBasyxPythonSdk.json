[
  {
    "owner": "eclipse-basyx",
    "repo": "basyx-python-sdk",
    "content": "TITLE: Creating an Example Asset Administration Shell in Python\nDESCRIPTION: This function creates and returns an example AssetAdministrationShell object with various submodels, properties, and relationships. It demonstrates the structure and creation process of an AAS using the BaSyx Python SDK.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/examples/example_aas.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef create_example_aas() -> model.AssetAdministrationShell:\n    \"\"\"Create an example AssetAdministrationShell object.\"\"\"\n    aas = model.AssetAdministrationShell(\n        \"ExampleMotor\",\n        model.Identifier(\"http://acplt.org/Test_AssetAdministrationShell\", id_type=model.IdentifierType.IRI),\n        asset=model.Asset(\n            \"TestAsset\",\n            model.Identifier(\"http://acplt.org/TestAsset\", id_type=model.IdentifierType.IRI)\n        )\n    )\n    aas.description = model.LangStringSet({\"en\": \"Example AAS for motor\"})\n    aas.administration = model.AdministrativeInformation(version=\"1.0\", revision=\"001\")\n\n    return aas\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing AAS Objects with Eclipse BaSyx Python SDK\nDESCRIPTION: This code snippet demonstrates the creation of Asset Administration Shell (AAS) objects, their serialization to JSON, and subsequent deserialization back into Python objects. It uses the BaSyx Python SDK to create an AssetAdministrationShell, an Asset, and a Submodel, then serializes them to JSON and deserializes them back, showcasing the full cycle of object manipulation and data interchange.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/tutorials/tutorial_serialization_deserialization.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom basyx.aas import model\nfrom basyx.aas.adapter.json import json_serialization, json_deserialization\n\n# Create AAS objects\nasset = model.Asset(\"http://acplt.org/TestAsset\")\nshell = model.AssetAdministrationShell(\n    \"http://acplt.org/TestAAS\", asset_ref=asset.reference\n)\nsubmodel = model.Submodel(\"http://acplt.org/TestSubmodel\")\nshell.submodel.append(submodel.reference)\n\n# Serialize to JSON\njson_data = json_serialization.serialize_asset_administration_shell(shell)\n\n# Deserialize from JSON\ndeserialized_shell = json_deserialization.deserialize_asset_administration_shell(json_data)\n\n# Print the deserialized object\nprint(deserialized_shell)\n```\n\n----------------------------------------\n\nTITLE: Installing BaSyx Python SDK using pip\nDESCRIPTION: Commands to install the Eclipse BaSyx Python SDK package either from PyPI or directly from GitHub.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install basyx-python-sdk\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install --no-cache-dir git+https://github.com/eclipse-basyx/basyx-python-sdk@main#subdirectory=sdk\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for AAS Creation in Python\nDESCRIPTION: This snippet imports necessary modules from the basyx.aas library to create an Asset Administration Shell and its components.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/examples/example_aas.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom basyx.aas import model\n```\n\n----------------------------------------\n\nTITLE: Creating a Submodel with BaSyx Python SDK\nDESCRIPTION: Creates a Submodel object with an identifier. This is the first step in building an Asset Administration Shell model.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom basyx.aas import model  # Import all BaSyx Python SDK classes from the model package\n\nidentifier = 'https://acplt.org/Simple_Submodel'\nsubmodel = model.Submodel(identifier)\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding a Property to a Submodel\nDESCRIPTION: Creates a Property with semantic reference and adds it to a Submodel. The property includes an ID, value type, value, and semantic reference.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create an external reference to a semantic description of the property\nsemantic_reference = model.ExternalReference(\n    (model.Key(\n        type_=model.KeyTypes.GLOBAL_REFERENCE,\n        value='http://acplt.org/Properties/SimpleProperty'\n    ),)\n)\nproperty = model.Property(\n    id_short='ExampleProperty',  # Identifying string of the element within the submodel namespace\n    value_type=model.datatypes.String,  # Data type of the value\n    value='exampleValue',  # Value of the property\n    semantic_id=semantic_reference  # set the semantic reference\n)\nsubmodel.submodel_element.add(property)\n```\n\n----------------------------------------\n\nTITLE: Serializing a Submodel to XML\nDESCRIPTION: Demonstrates how to serialize a Submodel object to an XML file using the XML adapter provided by BaSyx Python SDK.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/README.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom basyx.aas.adapter.xml import write_aas_xml_file\n\ndata: model.DictObjectStore[model.Identifiable] = model.DictObjectStore()\ndata.add(submodel)\nwrite_aas_xml_file(file='Simple_Submodel.xml', data=data)\n```\n\n----------------------------------------\n\nTITLE: Executing the AAS Compliance Tool from Command Line\nDESCRIPTION: Shows two methods to invoke the AAS Compliance Tool. It can be run as a Python module or directly as a command-line tool when properly installed. The tool provides help documentation that can be accessed with the --help flag.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/compliance_tool/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m aas_compliance_tool.cli\n```\n\nLANGUAGE: bash\nCODE:\n```\naas-compliance-check\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m aas_compliance_tool.cli --help\n```\n\nLANGUAGE: bash\nCODE:\n```\naas-compliance-check --help\n```\n\n----------------------------------------\n\nTITLE: Importing AAS Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the Asset Administration Shell (AAS) module from the BaSyx Python SDK. The automodule directive is used to automatically generate documentation for the entire module.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/model/aas.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: basyx.aas.model.aas\n```\n\n----------------------------------------\n\nTITLE: Importing CouchDB Backend Module in Python\nDESCRIPTION: This snippet shows how to import the CouchDB backend module in a Python script. It demonstrates the use of the automodule directive for generating documentation from the module's docstrings.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/backend/couchdb.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: basyx.aas.backend.couchdb\n```\n\n----------------------------------------\n\nTITLE: Importing identification module in Python for BaSyx SDK\nDESCRIPTION: This snippet shows how to import the identification module from the BaSyx Python SDK. The module is part of the basyx.aas.util package and provides functionalities for generating and handling identifiers in the Asset Administration Shell context.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/util/identification.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: basyx.aas.util.identification\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for BaSyx Python SDK HTTP Server\nDESCRIPTION: Command to build the Docker image for the BaSyx Python SDK HTTP server using buildx.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/server/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build -t basyx-python-sdk-http-server .\n```\n\n----------------------------------------\n\nTITLE: Running BaSyx Python SDK HTTP Server with Docker\nDESCRIPTION: Command to run the Docker container with port mapping and volume mounting for the storage directory.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/server/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -p 8080:80 -v ./storage:/storage basyx-python-sdk-http-server\n```\n\n----------------------------------------\n\nTITLE: Building and Running with Docker Compose\nDESCRIPTION: Command to build and run the Docker container using docker-compose.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/server/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for BaSyx Python SDK HTTP Server\nDESCRIPTION: YAML configuration for docker-compose that defines the service, port mapping, and volume mounting.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/server/README.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    build: .\n    ports:\n    - \"8080:80\"\n    volumes:\n      - ./storage:/storage\n\n```\n\n----------------------------------------\n\nTITLE: Running BaSyx Python SDK HTTP Server on Windows\nDESCRIPTION: Command to run the Docker container on Windows, adjusting the path syntax for the volume mount.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/server/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> docker run -p 8080:80 -v .\\storage:/storage basyx-python-sdk-http-server\n```\n\n----------------------------------------\n\nTITLE: Running BaSyx Python SDK HTTP Server with Custom Configuration\nDESCRIPTION: Command to run the Docker container with custom environment variables for API path, storage type, and storage path.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/server/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -p 8080:80 -v ./storage2:/storage2 -e API_BASE_PATH=/api/v3.1 -e STORAGE_TYPE=LOCAL_FILE_BACKEND -e STORAGE_PATH=/storage2 basyx-python-sdk-http-server\n```\n\n----------------------------------------\n\nTITLE: Constraint Violation Handling in Python\nDESCRIPTION: When a constraint violation is detected, an AASConstraintViolation exception is raised from the basyx.aas.model.base module.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/constraints.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom basyx.aas.model.base import AASConstraintViolation\n\n# Example of raising the exception\nraise AASConstraintViolation(\"Constraint violation message\")\n```\n\n----------------------------------------\n\nTITLE: Running Code Quality Checks for Eclipse BaSyx Python SDK\nDESCRIPTION: Commands to run type checking with mypy, style checking with pycodestyle, and unit tests. These checks should be run before submitting any changes to ensure code quality standards are met.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmypy basyx test\npycodestyle --max-line-length 120 basyx test\npython -m unittest\n```\n\n----------------------------------------\n\nTITLE: Running Test Coverage Analysis for Eclipse BaSyx Python SDK\nDESCRIPTION: Commands to install coverage tool and run test coverage analysis on the codebase. This helps ensure that the code is adequately tested, with a target of at least a 80% coverage.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install coverage\ncoverage run --source basyx --branch -m unittest\ncoverage report -m\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Eclipse BaSyx Python SDK\nDESCRIPTION: Command to install all development dependencies for the Eclipse BaSyx Python SDK. This includes tools for linting, type checking, and running tests, which are required before submitting changes.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install .[dev]\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: Lists required Python package dependencies with minimum version constraints. Includes pyecma376-2, jsonschema, and basyx-python-sdk packages.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/compliance_tool/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npyecma376-2>=0.2.4\njsonschema>=4.21.1\nbasyx-python-sdk>=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints\nDESCRIPTION: Specifies minimum version requirements for Python packages needed by the BaSyx Python SDK. Requires requests library version 2.23 or higher and packaging library version 24.2 or higher.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/etc/scripts/check_python_versions_requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests>=2.23\npackaging>=24.2\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx Documentation Dependencies\nDESCRIPTION: Lists required Python packages and version constraints for building project documentation. Includes Sphinx core, Read the Docs theme, and sphinx-argparse extension.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/add-requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nsphinx~=7.2\nsphinx-rtd-theme~=2.0\nsphinx-argparse~=0.4.0\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for BaSyx AAS Examples\nDESCRIPTION: ReStructuredText documentation defining the table of contents and structure for BaSyx AAS example classes. Lists various example modules including AAS implementations, mandatory attributes, missing attributes, and submodel templates.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/examples/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   example_aas\n   example_aas_mandatory_attributes\n   example_aas_missing_attributes\n   example_submodel_template\n   _helper\n```\n\n----------------------------------------\n\nTITLE: Including AASX Tutorial Code Reference in Python\nDESCRIPTION: This snippet shows how to include a reference to the AASX tutorial Python file in documentation. It demonstrates the use of the literalinclude directive to reference an external Python file containing the actual tutorial code.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/tutorials/tutorial_aasx.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../../../basyx/aas/examples/tutorial_aasx.py\n  :language: python\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directives for BaSyx Submodel Module\nDESCRIPTION: ReStructuredText directives for auto-generating documentation from Python docstrings in the basyx.aas.model.submodel module and the _SE class.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/model/submodel.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: basyx.aas.model.submodel\n\n.. autoclass:: _SE\n```\n\n----------------------------------------\n\nTITLE: String Constraint Module\nDESCRIPTION: Module definition for basyx.aas.model._string_constraints containing constraint function implementations and type _T\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/model/_string_constraints.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbasyx.aas.model._string_constraints\n```\n\n----------------------------------------\n\nTITLE: Generic Type Definition\nDESCRIPTION: Generic type _T used for type hinting in string constraint implementations\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/sdk/docs/source/model/_string_constraints.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n_T\n```\n\n----------------------------------------\n\nTITLE: Writing Commit and PR Titles for Eclipse BaSyx Python SDK\nDESCRIPTION: Examples of well-formatted commit and pull request titles that include the affected module and use imperative language. These demonstrate the preferred convention for commit messages in the project.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmodel.datatypes: Add type `xs:someThingMadeUp`\ncompliance_tool: Fix fail to check aasx package without thumbnail\nadapter.aasx: Fix `Property.value` `0` converted into `NoneType`\n```\n\n----------------------------------------\n\nTITLE: Creating Issue Titles with Proper Formatting in Eclipse BaSyx Python SDK\nDESCRIPTION: Examples of well-formatted issue titles that include the affected module name and use backticks to highlight class names or types. These demonstrate the preferred naming convention for issues in the project.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmodel.datatypes: Missing type `xs:someThingMadeUp`\ncompliance_tool: Fail to check aasx package without thumbnail\nadapter.aasx: `Property.value` `0` are converted into `NoneType`\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote to Eclipse BaSyx Python SDK Fork\nDESCRIPTION: Command to add the original Eclipse BaSyx repository as an upstream remote after forking and cloning the repository to your local machine. This enables pulling changes from the main repository.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/eclipse-basyx/basyx-python-sdk\n```\n\n----------------------------------------\n\nTITLE: Pulling a Branch from Eclipse BaSyx Python SDK Repository\nDESCRIPTION: Command to pull a specific branch from the upstream Eclipse BaSyx repository to your local machine. This is typically done before creating a new branch for your changes.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit pull upstream <branch_name>\n```\n\n----------------------------------------\n\nTITLE: Pushing a New Branch to Your Eclipse BaSyx Python SDK Fork\nDESCRIPTION: Command to push your newly created branch with changes to your fork of the Eclipse BaSyx repository. This is required before creating a pull request.\nSOURCE: https://github.com/eclipse-basyx/basyx-python-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <your_new_branch>\n```"
  }
]