[
  {
    "owner": "yamafaktory",
    "repo": "jql",
    "content": "TITLE: JQL Lens Selector Query Example\nDESCRIPTION: A JQL query that uses the lens selector to filter an array based on specific property values and paths, supporting complex conditions.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n'|={\"b\"\"d\"=2, \"c\"}'\n```\n\n----------------------------------------\n\nTITLE: JQL Flatten Operator Query Example\nDESCRIPTION: A JQL query that uses the flatten operator to recursively flatten arrays or objects, simplifying deeply nested structures.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\n'..'\n```\n\n----------------------------------------\n\nTITLE: JQL Pipe In Operator Query Example\nDESCRIPTION: A JQL query that uses the pipe in operator to apply the subsequent selectors to each element of an array in parallel.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\n'\"a\"|>\"b\"\"c\"'\n```\n\n----------------------------------------\n\nTITLE: JQL Keys Operator Query Example\nDESCRIPTION: A JQL query that uses the keys operator to extract all keys from an object or indices from an array.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\n'@'\n```\n\n----------------------------------------\n\nTITLE: JQL Multi Key Selector Query Example\nDESCRIPTION: A JQL query that selects multiple keys from a JSON object in arbitrary order, creating a new object with the selected properties.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n'{\"c\",\"a\"}'\n```\n\n----------------------------------------\n\nTITLE: Comparing Large JSON Processing in JQ and JQL\nDESCRIPTION: Benchmark comparing the performance of processing a large JSON file (github-repositories.json) to extract specific fields using JQ and JQL. JQL demonstrates significantly better performance in this complex operation.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/PERFORMANCE.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat /home/runner/work/jql/jql/assets/github-repositories.json | jq -r '[.[] | {name: .name, url: .url, language: .language, stargazers_count: .stargazers_count, watchers_count: .watchers_count}]' > /dev/null\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat /home/runner/work/jql/jql/assets/github-repositories.json | jql '|>{\"name\", \"url\", \"language\", \"stargazers_count\", \"watchers_count\"}' > /dev/null\n```\n\n----------------------------------------\n\nTITLE: JQL Group Separator Query Example\nDESCRIPTION: A JQL query that uses the group separator to select multiple keys from an object and create an array from their values.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n'\"a\",\"b\",\"c\"'\n```\n\n----------------------------------------\n\nTITLE: JQL Truncate Operator Query Example\nDESCRIPTION: A JQL query that uses the truncate operator to map complex JSON structures into simple JSON primitives.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\n'\"a\"!'\n```\n\n----------------------------------------\n\nTITLE: JQL Pipe Out Operator Query Example\nDESCRIPTION: A JQL query that uses the pipe out operator to end parallel processing initiated by pipe in, and continue sequential processing.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\n'\"a\"|>\"b\"\"c\"<|[1]'\n```\n\n----------------------------------------\n\nTITLE: JQL Key Selector Query Example\nDESCRIPTION: A JQL query that selects a single key from a JSON object, showing the basic key selection functionality.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n'\"c\"'\n```\n\n----------------------------------------\n\nTITLE: JQL Array Index Selector Query Example\nDESCRIPTION: A JQL query that uses the array index selector to select specific indices from an array in arbitrary order.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n'[2,1]'\n```\n\n----------------------------------------\n\nTITLE: JQL Array Range Selector Query Example\nDESCRIPTION: A JQL query that uses the array range selector to select a range of elements from an array, supporting reversed ranges.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n'[2:1]'\n```\n\n----------------------------------------\n\nTITLE: JQL Object Range Selector Query Example\nDESCRIPTION: A JQL query that selects a range of keys from a JSON object by their position/index, supporting reversed ranges.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n'{2:1}'\n```\n\n----------------------------------------\n\nTITLE: JQL Object Index Selector Query Example\nDESCRIPTION: A JQL query that selects keys from a JSON object by their position/index rather than by name, supporting arbitrary order.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n'{2,0}'\n```\n\n----------------------------------------\n\nTITLE: Comparing Object Property Access in JQ and JQL\nDESCRIPTION: Benchmark comparing the performance of accessing an object property using JQ's '.foo' syntax and JQL's '\"foo\"' syntax. JQL shows slightly better performance in this operation.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/PERFORMANCE.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho '{ \"foo\": \"bar\" }' | jq '.foo'\n```\n\nLANGUAGE: bash\nCODE:\n```\necho '{ \"foo\": \"bar\" }' | jql '\"foo\"'\n```\n\n----------------------------------------\n\nTITLE: Comparing Array Element Access in JQ and JQL\nDESCRIPTION: Benchmark comparing the performance of accessing the first element of an array using JQ's '.[0]' syntax and JQL's '[0]' syntax. JQL demonstrates slightly better performance.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/PERFORMANCE.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho '[1, 2, 3]' | jq '.[0]'\n```\n\nLANGUAGE: bash\nCODE:\n```\necho '[1, 2, 3]' | jql '[0]'\n```\n\n----------------------------------------\n\nTITLE: Comparing Array Flattening in JQ and JQL\nDESCRIPTION: Benchmark comparing the performance of flattening a nested array using JQ's 'flatten' function and JQL's '..' operator. JQL shows slightly better performance.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/PERFORMANCE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho '[1, [2], [[3]]]' | jq 'flatten'\n```\n\nLANGUAGE: bash\nCODE:\n```\necho '[1, [2], [[3]]]' | jql '..'\n```\n\n----------------------------------------\n\nTITLE: Reading JSON from stdin with JQL\nDESCRIPTION: Command to pipe JSON content from a file to JQL for processing using standard input.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_43\n\nLANGUAGE: sh\nCODE:\n```\ncat test.json | jql '\"a\"'\n```\n\n----------------------------------------\n\nTITLE: Saving JQL Output to a File\nDESCRIPTION: Command to run JQL with a query and save the JSON output to a file using shell redirection.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\njql '\"a\"' input.json > output.json\n```\n\n----------------------------------------\n\nTITLE: JQL Keys Operator Result Example\nDESCRIPTION: The JSON output from applying the keys operator to an object, showing an array of all keys in the object.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n[\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: JQL Flatten Operator Result for Objects Example\nDESCRIPTION: The JSON output from applying the flatten operator to a nested object structure, showing the flattened result with dot-notation keys.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a.c\": false,\n  \"b.d.e.f\": 1,\n  \"b.d.e.g.h\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: JQL Flatten Operator Result for Arrays Example\nDESCRIPTION: The JSON output from applying the flatten operator to a nested array structure, showing the flattened result.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n[{ \"a\": 1 }, { \"b\": 2 }, { \"c\": 3 }, null]\n```\n\n----------------------------------------\n\nTITLE: JQL Pipe In Operator Result Example\nDESCRIPTION: The JSON output from applying the pipe in operator query, showing the result of parallel processing of array elements.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n[1, 2]\n```\n\n----------------------------------------\n\nTITLE: JQL Pipe Out Operator Result Example\nDESCRIPTION: The JSON output from applying the pipe out operator query, showing the result after ending parallel processing.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n2\n```\n\n----------------------------------------\n\nTITLE: JQL Truncate Operator Result Example\nDESCRIPTION: The JSON output from applying the truncate operator, showing the array converted to an empty array primitive.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: JQL Lens Selector Result JSON\nDESCRIPTION: The JSON output from applying the lens selector query, showing only the array elements that match the specified conditions.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"a\": 1, \"b\": { \"d\": 2 } },\n  { \"c\": 3, \"b\": 4 }\n]\n```\n\n----------------------------------------\n\nTITLE: JQL Key Selector Result Example\nDESCRIPTION: The JSON output from applying the key selector query, showing the value associated with the selected key.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n3\n```\n\n----------------------------------------\n\nTITLE: JQL Multi Key Selector Result JSON\nDESCRIPTION: The JSON output from applying the multi key selector query, showing a new object with only the selected keys in the specified order.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{ \"c\": 3, \"a\": 1 }\n```\n\n----------------------------------------\n\nTITLE: JQL Object Range Selector Result JSON\nDESCRIPTION: The JSON output from applying the object range selector query, showing a new object with only the keys in the specified range.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{ \"c\": 3, \"b\": 2 }\n```\n\n----------------------------------------\n\nTITLE: JQL Group Separator Result JSON\nDESCRIPTION: The JSON output from applying the group separator query, showing an array of values from the selected keys.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: JQL Array Index Selector Result JSON\nDESCRIPTION: The JSON output from applying the array index selector query, showing the selected elements in the specified order.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[3, 2]\n```\n\n----------------------------------------\n\nTITLE: JQL Flatten Operator Input for Arrays Example\nDESCRIPTION: Complex JSON input for demonstrating the array flattening capability of JQL's flatten operator, containing deeply nested arrays.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n[[[[[[[[[[[[[[{ \"a\": 1 }]]]]]]]]]]]]], [[[[[{ \"b\": 2 }]]]], { \"c\": 3 }], null]\n```\n\n----------------------------------------\n\nTITLE: JQL Flatten Operator Input for Objects Example\nDESCRIPTION: Complex JSON input for demonstrating the object flattening capability of JQL's flatten operator, containing deeply nested objects.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{ \"a\": { \"c\": false }, \"b\": { \"d\": { \"e\": { \"f\": 1, \"g\": { \"h\": 2 } } } } }\n```\n\n----------------------------------------\n\nTITLE: JQL Pipe In Operator Input Example\nDESCRIPTION: Complex JSON input for demonstrating the pipe in operator of JQL, containing an array of objects with nested properties.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{ \"a\": [{ \"b\": { \"c\": 1 } }, { \"b\": { \"c\": 2 } }] }\n```\n\n----------------------------------------\n\nTITLE: JQL Truncate Operator Input Example\nDESCRIPTION: Example JSON input for demonstrating the truncate operator feature of JQL, showing an object with an array property.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{ \"a\": [1, 2, 3] }\n```\n\n----------------------------------------\n\nTITLE: JQL Lens Selector Input Example\nDESCRIPTION: Complex JSON input for demonstrating the lens selector feature of JQL, containing an array of objects with nested properties.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"a\": 1, \"b\": { \"d\": 2 } },\n  { \"a\": 2, \"b\": \"some\" },\n  { \"a\": 2, \"b\": { \"d\": null } },\n  { \"a\": 2, \"b\": true },\n  { \"c\": 3, \"b\": 4 }\n]\n```\n\n----------------------------------------\n\nTITLE: JQL Array Index Selector Input Example\nDESCRIPTION: Example JSON input for demonstrating the array index selector feature of JQL, showing a simple array of three numbers.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: JQL Group Separator Example with Input JSON\nDESCRIPTION: Example JSON input for demonstrating the group separator feature of JQL, containing a simple object with three properties.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{ \"a\": 1, \"b\": 2, \"c\": 3 }\n```\n\n----------------------------------------\n\nTITLE: JSON Example with Various Key Formats\nDESCRIPTION: Example JSON showing valid key formats in JSON, including dot-prefixed keys, empty strings, and escaped quotes.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \".valid\": 1337,\n  \"\": \"yeah!\",\n  \"\\\"\": \"yup, valid too!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JQL via Cargo\nDESCRIPTION: Command to install JQL using Rust's package manager Cargo, which builds the package from source.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo install jql\n```\n\n----------------------------------------\n\nTITLE: Installing JQL via Homebrew\nDESCRIPTION: Command to install JQL on macOS or Linux systems using the Homebrew package manager.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbrew install jql\n```\n\n----------------------------------------\n\nTITLE: Installing JQL via Cargo Binstall\nDESCRIPTION: Command to install JQL using Cargo Binstall, which provides binary installation for Rust packages.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo binstall jql\n```\n\n----------------------------------------\n\nTITLE: Installing JQL via Alpine Linux package manager\nDESCRIPTION: Command to install JQL on Alpine Linux systems using the apk package manager. The package is maintained by @jirutka.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\napk add jql\n```\n\n----------------------------------------\n\nTITLE: Installing JQL via Arch Linux AUR\nDESCRIPTION: Command to install JQL on Arch Linux systems using yay package manager with AUR. The package is maintained by @barklan.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyay -S jql\n```\n\n----------------------------------------\n\nTITLE: Installing JQL via Nix package manager\nDESCRIPTION: Command to install JQL using the Nix package manager, which works on various Linux distributions and macOS.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnix-env -i jql\n```\n\n----------------------------------------\n\nTITLE: Installing JQL via FreeBSD package manager\nDESCRIPTION: Command to install JQL on FreeBSD systems using the pkg package manager.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npkg install jql\n```\n\n----------------------------------------\n\nTITLE: Installing JQL via Fedora package manager\nDESCRIPTION: Command to install JQL on Fedora Linux systems using the dnf package manager.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndnf install jql\n```\n\n----------------------------------------\n\nTITLE: Installing JQL via openSUSE package manager\nDESCRIPTION: Command to install JQL on openSUSE Linux systems using the zypper package manager.\nSOURCE: https://github.com/yamafaktory/jql/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nzypper install jql\n```"
  }
]