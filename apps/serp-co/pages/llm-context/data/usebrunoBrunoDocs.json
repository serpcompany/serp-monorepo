[
  {
    "owner": "usebruno",
    "repo": "bruno-docs",
    "content": "TITLE: Complete Example of Request Object Usage in Bruno\nDESCRIPTION: A comprehensive example showing the structure of a request object and how to access its various properties including authentication credentials, headers, method, URL, and more.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/request/request-object.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Example request object\nconst req = {\n  assertions: [],\n  auth: { username: 'myUsername', password: 'mySuperPassword' },\n  headers: {\n    authorization: 'Bearer <token>',\n    'content-type': 'application/json',\n    accept: 'application/json',\n    // Add more headers as needed...\n  },\n  method: 'GET',\n  mode: 'none',\n  responseType: 'arraybuffer',\n  script: {\n    req: \"// Create an array of objects\\nconst data = [\\n  { i…q);\\nconst myVariable = bru.getEnvVar('password');\"\n  },\n  signal: {},\n  url: '{{base.url}}/users/2?queryTest=queryResult',\n  vars: {}\n};\n\n\n// Accessing request properties\nconsole.log(req.method); // Output: \"GET\"\nconsole.log(req.url); // Output: \"{{base.url}}/users/2?queryTest=queryResult\"\nconsole.log(req.headers.authorization); // Output: \"Bearer <token>\"\nconsole.log(req.auth.username); // Output: \"myUsername\"\n```\n\n----------------------------------------\n\nTITLE: Running Bruno Collection with JSON Data File\nDESCRIPTION: Executes a Bruno API collection using data from a specified JSON file. This feature requires Bruno CLI version 1.35.0 or higher and enables complex data structures for API testing or operations.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/runCollection.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder --json-file-path /path/to/json/file.json\n```\n\n----------------------------------------\n\nTITLE: Writing API Tests with Chai Assertions in Bruno\nDESCRIPTION: Example of automated test scripts for API requests in Bruno using Chai assertion library. The script demonstrates how to check for successful login by validating HTTP status code and how to verify the expected JSON response body structure.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/tests/introduction.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest(\"should be able to login\", function () {\n  const data = res.getBody();\n  expect(res.getStatus()).to.equal(200);\n});\n\ntest(\"should return json\", function () {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    hello: \"Bruno\",\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Runtime Variables in Pre-request Scripts\nDESCRIPTION: Demonstrates how to retrieve runtime variable values using bru.getVar() within pre-request scripts and use them to set request headers programmatically.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/runtime-variables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst token = bru.getVar(\"token\");\nreq.setHeader(\"Authorization\", `Bearer ${token}`);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using JavaScript Functions in Bruno\nDESCRIPTION: This snippet demonstrates how to import a JavaScript function from a file and use it in a Bruno script. It includes finding a user by ID, setting a variable, and using it in a URL.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/js-file.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getUserById } from './users.js';\n\nconst user = getUserById(2);\nbru.setVar('val', user.id);\n\n// URL: https://reqres.in/api/users/{{val}}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Variables in Bruno\nDESCRIPTION: Sets a runtime variable from response data\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nlet data = res.getBody();\nbru.setVar(\"petId\", data.id);\n```\n\n----------------------------------------\n\nTITLE: Writing JavaScript Tests for API Responses in Bruno\nDESCRIPTION: This example demonstrates how to write JavaScript test scripts in Bruno for API testing. The code validates a successful login with a 200 status code check and verifies the response body matches the expected JSON structure. These tests use Chai's expect syntax.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/create-a-test.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest(\"should be able to login\", function () {\n  const data = res.getBody();\n  expect(res.getStatus()).to.equal(200);\n});\n\ntest(\"should return json\", function () {\n  const data = res.getBody();\n  expect(res.getBody()).to.eql({\n    hello: \"Bruno\",\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: POST Request with JSON Body and Headers in Bruno\nDESCRIPTION: Illustrates a POST request with a JSON body and custom headers using Bruno syntax. It sends a text message via an API, including API key, recipient number, and message content.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/samples.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npost {\n  url: https://api.textlocal.in/send\n}\n\nbody {\n  {\n    \"apiKey\": \"secret\",\n    \"numbers\": \"9988776655\",\n    \"message\": \"Woof! lets play with some apis\"\n  }\n}\n\nheaders {\n  content-type: application/json\n  Authorization: Bearer topsecret\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request with Automated Testing in Bruno\nDESCRIPTION: Shows a POST request for login with automated testing using Bruno syntax. It includes two tests: one to check the response status code and another to verify the presence of a token in the response body.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/samples.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npost {\n  url: https://api.textlocal.in/login\n}\n\nbody {\n  {\n    \"username\": \"johnnash\",\n    \"password\": \"governingdynamics\"\n  }\n}\n\ntests {\n  test(\"should be able to login\", function() {\n    expect(res.status).to.equal(201);\n  });\n\n  test(\"should receive the token\", function() {\n    expect(res.body.token).to.be.a('string');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Response Body in Bruno\nDESCRIPTION: Retrieves the response body data\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet data = res.getBody();\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Variables in Request Headers\nDESCRIPTION: Shows how to reference a runtime variable in request headers using the {{variableName}} syntax. This technique allows dynamically injecting stored values like tokens into request headers.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/runtime-variables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAuthorization: Bearer {{token}}\n```\n\n----------------------------------------\n\nTITLE: Debugging Variables in Bruno Console\nDESCRIPTION: Demonstrates how to access and debug different types of variables using the Bruno console API. Shows the basic pattern for accessing runtime variables using bru.getVar().\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Basic syntax: console.log(bru.get[Type]Var(key))\nconsole.log(bru.getVar('myVar'))           // Runtime variables\n```\n\n----------------------------------------\n\nTITLE: Getting Response Header in Bruno\nDESCRIPTION: Retrieves a specific header from the response\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet transactionId = res.getHeader(\"transaction-id\");\n```\n\n----------------------------------------\n\nTITLE: Using Chai Assertion Library in Bruno\nDESCRIPTION: Example demonstrating how to use the Chai assertion library in Bruno with CommonJS syntax. The code imports Chai, defines a simple add function, tests it with an assertion, and logs a success message.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/inbuilt-libraries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chai = require('chai');\n\nconst { expect } = chai;\n\nfunction add(a, b) {\n  return a + b;\n}\n\nconst result = add(2, 3);\n\nexpect(result).to.equal(5);\n\nconsole.log('Test passed!');\n```\n\n----------------------------------------\n\nTITLE: Creating Text Blocks in Bru Files\nDESCRIPTION: This example shows how to define text blocks in a Bru file. It includes a 'body' block with JSON content and a 'tests' block with a JavaScript assertion.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/language.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbody {\n  {\n    \"hello\": \"world\"\n  }\n}\n\ntests {\n  expect(res.status).to.equal(200);\n}\n```\n\n----------------------------------------\n\nTITLE: Storing OAuth2 Access Token in Collection-Level Script\nDESCRIPTION: This script captures the access token from an OAuth2 response and stores it in a runtime variable at the collection level. It checks if the authentication mode is OAuth2 and if the response contains an access token before saving it to a variable named 'access_token_set_by_collection_script'.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/auth/oauth2/password-credentials.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif(req.getAuthMode() == 'oauth2' && res.body.access_token) {\n    bru.setVar('access_token_set_by_collection_script', res.body.access_token);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameters in Bruno Requests\nDESCRIPTION: The 'params:path' tag is used to define path parameters for a request, replacing placeholders in the URL.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nget {\n  url: https://api.textlocal.in/user/:userId\n}\n\nparams:path {\n  userId: 13\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Pre-Request and Post-Response Sections in Bruno\nDESCRIPTION: This snippet demonstrates how to set variables before a request and after receiving a response in Bruno. Pre-request variables can be any valid JavaScript literal, while post-response variables can use the 'res' object to parse the response.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/vars.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Pre Request Variables\nname = \"John Doe\"\nage = 30\nisActive = true\n\n// Post Response Variables\ntoken = res.body.token\nuserId = res.body.user.id\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request in Bruno\nDESCRIPTION: Demonstrates a simple GET request to the GitHub API using Bruno syntax. It fetches user information for the 'usebruno' account.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/samples.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nget {\n  url: https://api.github.com/users/usebruno\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Variables in JavaScript Scripts\nDESCRIPTION: Demonstrates how to get request variable values inside scripts using the bru.getRequestVar() function. This allows you to retrieve and use request variables programmatically within Bruno's scripting environment.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/request-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet source = bru.getRequestVar(\"source\");\nlet destination = bru.getRequestVar(\"destination\");\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Reports Simultaneously with Bruno CLI\nDESCRIPTION: This command demonstrates how to generate JSON, JUnit, and HTML reports simultaneously using Bruno CLI. It creates three separate output files for different analysis needs.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/builtInReporters.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbru run request.bru --reporter-json results.json --reporter-junit results.xml --reporter-html results.html\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers in Bruno Requests\nDESCRIPTION: The 'headers' tag is used to define HTTP headers for a request.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nget {\n  url: https://api.textlocal.in/send?apiKey=secret&numbers=9988776655&message=hello\n}\n\nheaders {\n  content-type: application/json\n  Authorization: Bearer topsecret\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bruno CLI Tests with HTML Reporter\nDESCRIPTION: This command runs API tests using Bruno CLI and generates an HTML report. The command should be executed from the root folder of your Bruno collection and will create a results.html file containing the test results.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/automate-test/automate-test.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbru run --reporter-html results.html\n```\n\n----------------------------------------\n\nTITLE: Array Mapping Query Example in JavaScript\nDESCRIPTION: Shows how to transform array elements using a mapper function when querying the response.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/response/response-query.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nres('..items..amount[?]', amt => amt + 10)\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Multiple Modules in Bruno\nDESCRIPTION: This snippet demonstrates how to whitelist multiple Node.js modules (crypto, jwt, child_process) in the bruno.json file for use in Bruno scripts. This configuration allows scripts to access these specific modules while maintaining security restrictions.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/whitelisting-modules.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"scripts\": {\n      \"moduleWhitelist\": [\"crypto\", \"jwt\", \"child_process\"],\n      \"filesystemAccess\": {\n        \"allow\": true\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Request Headers in Bruno\nDESCRIPTION: Sets multiple headers at once using an object\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreq.setHeaders({\n  \"content-type\": \"application/json\",\n  \"transaction-id\": \"foobar\"\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Properties in Bruno\nDESCRIPTION: This example demonstrates how to access properties of a response object in Bruno. It shows the structure of a typical response object with body, headers, and status properties and how to retrieve values from each component.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/response/response-object.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example response object\nconst res = {\n  body: '{\"message\": \"Hello, world!\"}',\n  headers: {\n    'Content-Type': 'application/json',\n    'Cache-Control': 'no-cache',\n  },\n  status: 200,\n};\n\n// Accessing response properties\nconsole.log(res.body); // Output: '{\"message\": \"Hello, world!\"}'\nconsole.log(res.headers['Content-Type']); // Output: 'application/json'\nconsole.log(res.status); // Output: 200\n```\n\n----------------------------------------\n\nTITLE: Deep Navigation Query Example in JavaScript\nDESCRIPTION: Shows how to use double dots (..) for deep navigation through nested objects in the response.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/response/response-query.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nres('..items.amount')\n```\n\n----------------------------------------\n\nTITLE: GET Request with Custom Headers in Bruno\nDESCRIPTION: Shows how to send a GET request with custom headers using Bruno syntax. It includes content-type and Authorization headers for a text messaging API call.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/samples.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nget {\n  url: https://api.textlocal.in/send?apiKey=secret&numbers=9988776655&message=hello\n}\n\nheaders {\n  content-type: application/json\n  Authorization: Bearer topsecret\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Method in Bruno\nDESCRIPTION: Sets the HTTP method for the request\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreq.setMethod(\"POST\");\n```\n\n----------------------------------------\n\nTITLE: POST Request with Post-Response Scripting in Bruno\nDESCRIPTION: Demonstrates a POST request for login with post-response scripting in Bruno syntax. It sets a variable 'token' with the response body's token value after the request is completed.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/samples.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npost {\n  url: https://api.textlocal.in/login\n}\n\nbody {\n  {\n    \"username\": \"johnnash\",\n    \"password\": \"governingdynamics\"\n  }\n}\n\nscript:post-response {\n  bru.setVar(\"token\", res.body.token);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tests in Bruno\nDESCRIPTION: The 'body:test' tag is used to define tests that run against the response.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nbody:test {\n  expect(res.status).to.equal(200);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Request Steps\nDESCRIPTION: Steps for creating a new GraphQL request in Bruno, including selecting request type, providing URL and name, and creating the request. The default HTTP method is POST but can be adjusted as needed.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/send-requests/graphql/graphql-api.mdx#2025-04-17_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Running Bruno CLI with Vault Cloud Authentication\nDESCRIPTION: CLI command for executing Bruno with Vault Cloud authentication. This command runs a folder of requests while passing all required client credentials and project information as environment variables.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/using-with-cli.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder --env Prod --env-var tokenEndpoint=your-token-endpoint --env-var secretsEndpoint=your-secrets-endpoint --env-var clientId=your-client-id --env-var clientSecret=your-client-secret --env-var projectName=your-project-name --env-var projectId=your-project-id --env-var organizationId=your-organization-id\n```\n\n----------------------------------------\n\nTITLE: Making PUT HTTP Requests in Bruno\nDESCRIPTION: The 'put' tag is used to make a PUT HTTP call, specifying the URL to be requested.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nput {\n  url: https://api.github.com/users/usebruno\n}\n```\n\n----------------------------------------\n\nTITLE: Making GET HTTP Requests in Bruno\nDESCRIPTION: The 'get' tag is used to make a GET HTTP call, specifying the URL to be requested.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nget {\n  url: https://api.github.com/users/usebruno\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Collection Execution with stopExecution in Bruno\nDESCRIPTION: Use this function to terminate the collection run completely. It can be called from pre-request scripts, post-request scripts, or test scripts, but is only effective within the context of a collection run.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nbru.runner.stopExecution();\n```\n\n----------------------------------------\n\nTITLE: Running Request by Path in Bruno\nDESCRIPTION: Executes a request by its path and retrieves response\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst requestResponse = await bru.runRequest(\"echo/echo json\");\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data with Dynamic Variables in JSON\nDESCRIPTION: This snippet demonstrates how to use dynamic variables to generate random user data including ID, name, email, phone, and address information.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/dynamic-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": {\n    \"id\": \"{{$randomUUID}}\",\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"phone\": \"{{$randomPhoneNumber}}\",\n    \"address\": {\n      \"street\": \"{{$randomStreetAddress}}\",\n      \"city\": \"{{$randomCity}}\",\n      \"country\": \"{{$randomCountry}}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Synchronous HTTP Request with Axios in Bruno Scripts\nDESCRIPTION: Demonstrates how to make a synchronous GET request to GitHub API using axios library and store the response data in Bruno variables. The example fetches a user's avatar URL from GitHub and sets it as a Bruno variable.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/request/sync-requests.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require(\"axios\");\n\nconst response = await axios.get(\"https://api.github.com/users/usebruno\");\n\nbru.setVar(\"avatarUrl\", response.data.avatar_url);\n```\n\n----------------------------------------\n\nTITLE: Creating a Runtime Variable in Bruno\nDESCRIPTION: Demonstrates how to set a runtime variable using the bru.setVar() function to store a token from a response body. This allows capturing dynamic values from responses for use in subsequent requests.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/runtime-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbru.setVar(\"token\", res.body.token);\n```\n\n----------------------------------------\n\nTITLE: Skipping Requests with skipRequest in Bruno\nDESCRIPTION: This function allows skipping the execution of the current request during a collection run. It can only be used within pre-request scripts and is only effective within the context of a collection run.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nbru.runner.skipRequest();\n```\n\n----------------------------------------\n\nTITLE: Controlling Request Flow with setNextRequest in Bruno\nDESCRIPTION: Use this function to change the default sequential execution order by specifying the next request to execute. This function can only be used within post-request scripts or test scripts during a collection run.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nbru.runner.setNextRequest(\"Get process status\");\n```\n\n----------------------------------------\n\nTITLE: Defining XML Request Body in Bruno\nDESCRIPTION: The 'body:xml' tag is used to define an XML request body.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nbody:xml {\n  <xml>\n    <name>John</name>\n    <age>30</age>\n  </xml>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bruno Collection with CSV Data File\nDESCRIPTION: Executes a Bruno API collection using data from a specified CSV file. This command allows for data-driven testing or bulk API operations using CSV-formatted input.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/runCollection.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder --csv-file-path /path/to/csv/file.csv\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Request Body in Bruno\nDESCRIPTION: The 'body' tag is used to define a JSON request body.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbody {\n  {\n    username: 'john',\n    password: 'governingdynamics'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing OAuth2 Access Token in Request-Level Script\nDESCRIPTION: This script captures the access token from an OAuth2 response and stores it in a runtime variable at the request level. It saves the access token from the response body to a variable named 'access_token_set_by_request_script' for use in subsequent requests.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/auth/oauth2/password-credentials.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbru.setVar('access_token_set_by_request_script', res.body.access_token);\n```\n\n----------------------------------------\n\nTITLE: Defining Form URL-Encoded Request Body in Bruno\nDESCRIPTION: The 'body:form-urlencoded' tag is used to define a form URL-encoded request body.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbody:form-urlencoded {\n  apikey: secret\n  numbers: +91998877665\n  ~message: hello\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Data File for Bruno Collection Runner\nDESCRIPTION: Sample JSON file structure containing an array of objects with name and job fields for data-driven testing in Bruno.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/tests/data-driven-testing.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[\n  { \"name\": \"John Doe\", \"job\": \"Software Engineer\" },\n  { \"name\": \"Jane Smith\", \"job\": \"Product Manager\" },\n  { \"name\": \"Mark Lee\", \"job\": \"Data Scientist\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication Data with Dynamic Variables in JSON\nDESCRIPTION: This snippet shows how to use dynamic variables to create random authentication credentials including username, password, and last login timestamp.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/dynamic-variables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credentials\": {\n    \"username\": \"{{$randomUserName}}\",\n    \"password\": \"{{$randomPassword}}\",\n    \"lastLogin\": \"{{$isoTimestamp}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters in Bruno Requests\nDESCRIPTION: The 'params:query' tag is used to define query parameters for a request, separate from the URL.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nget {\n  url: https://api.textlocal.in/send?apiKey=secret&numbers=9988776655&message=hello\n}\n\nparams:query {\n  apiKey: secret\n  numbers: 9988776655\n  message: hello\n}\n```\n\n----------------------------------------\n\nTITLE: Defining bru.visualize Function Signature in JavaScript\nDESCRIPTION: This snippet shows the basic function signature for bru.visualize, which takes a type parameter and a configuration object.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/advanced-guides/visualize.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbru.visualize(type, config)\n```\n\n----------------------------------------\n\nTITLE: Deleting Runtime Variables in Bruno\nDESCRIPTION: Deletes a runtime variable\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nbru.deleteVar(\"petId\");\n```\n\n----------------------------------------\n\nTITLE: Defining Secrets in .env File for Bruno\nDESCRIPTION: Example of how to define secrets in a .env file for use in Bruno collections. This file should be created manually at the root of the collection folder and contains key-value pairs for sensitive data like JWT tokens and API keys.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/dotenv-file.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nJWT_TOKEN=your_jwt_token_value\nAPI_KEY=your_api_key_value\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit Report with Bruno CLI\nDESCRIPTION: This command generates a test results report in JUnit format using Bruno CLI. The output is saved to a file named results.xml, compatible with JUnit for CI/CD integration.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/builtInReporters.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbru run request.bru --reporter-junit results.xml\n```\n\n----------------------------------------\n\nTITLE: Collection Level OAuth2 Token Management Script\nDESCRIPTION: Script that runs post-response at collection level to store the OAuth2 access token in a runtime variable named 'access_token_set_by_collection_script' when authentication mode is OAuth2.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/auth/oauth2/authorization-code.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif(req.getAuthMode() == 'oauth2' && res.body.access_token) {\n    bru.setVar('access_token_set_by_collection_script', res.body.access_token);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request URL in Bruno\nDESCRIPTION: Example demonstrating how to access the URL property of a request. The URL may contain variables enclosed in double curly braces that are replaced with actual values at runtime.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/request/request-object.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage\nconsole.log(req.url); // Output: \"{{base.url}}/users/2?queryTest=queryResult\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Bruno Scripts\nDESCRIPTION: Demonstration of how to access variables from data files in pre-request or post-response scripts using bru.getVar().\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/tests/data-driven-testing.mdx#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(bru.getVar(\"name\")); // Outputs: John Doe\nconsole.log(bru.getVar(\"email\")); // Outputs: john.doe@example.com\n```\n\n----------------------------------------\n\nTITLE: Accessing Collection Variables in JavaScript Scripts\nDESCRIPTION: This snippet shows how to retrieve a collection variable value in a pre-request script using the bru.getCollectionVar() function. This allows you to access collection variables programmatically in your scripts.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/collection-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet namespace = bru.getCollectionVar(\"namespace\");\n```\n\n----------------------------------------\n\nTITLE: Setting Collection-Level OAuth2 Access Token with Post-Response Script\nDESCRIPTION: This script runs after receiving a response from an OAuth2 token request at the collection level. It checks if the authentication mode is OAuth2 and if the response contains an access token, then stores it in a runtime variable for use across the collection.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/auth/oauth2/client-credentials.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif(req.getAuthMode() == 'oauth2' && res.body.access_token) {\n    bru.setVar('access_token_set_by_collection_script', res.body.access_token);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Bruno\nDESCRIPTION: Example demonstrating how to access the headers sub-object of the request. The headers object contains key-value pairs representing HTTP headers such as authorization, content-type, and accept.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/request/request-object.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage\nconsole.log(req.headers);\n/* Output: {\n  authorization: 'Bearer <token>',\n  'content-type': 'application/json',\n  accept: 'application/json',\n  // Add more headers as needed...\n} */\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query in Bruno Requests\nDESCRIPTION: The 'body:graphql' tag is used to define a GraphQL query in the request body.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nbody:graphql {\n  {\n    launchesPast {\n      launch_site {\n        site_name\n      }\n      launch_success\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Runtime Variables in Bruno\nDESCRIPTION: Retrieves a runtime variable\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nlet petId = bru.getVar(\"petId\");\n```\n\n----------------------------------------\n\nTITLE: Using Client Certificates for API Authentication in Bruno CLI\nDESCRIPTION: Command to specify client certificates for API authentication by providing a configuration file. This is useful for APIs that require certificate-based authentication.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder --client-cert-config /path/to/client-cert-config.json\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Bruno Request Body\nDESCRIPTION: Example of how to use variables from CSV/JSON files in a Bruno request body using the {{var}} syntax.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/tests/data-driven-testing.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"{{name}}\",\n  \"email\": \"{{email}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bruno CLI with AppRole Authentication\nDESCRIPTION: CLI command for executing Bruno with appRole authentication. This command runs a folder of requests while passing the roleId and secretId as environment variables.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/using-with-cli.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder --env Prod --env-var roleId=your-role-id --env-var secretId=your-secret-id\n```\n\n----------------------------------------\n\nTITLE: Basic Response Query Example in JavaScript\nDESCRIPTION: Shows the basic syntax for querying data from the response object in Bruno.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/response/response-query.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nres('order.total')\n```\n\n----------------------------------------\n\nTITLE: Setting Request Body in Bruno\nDESCRIPTION: Sets the request body/payload with an object\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nreq.setBody({\n  username: \"john nash\",\n  password: \"governingdynamics\"\n});\n```\n\n----------------------------------------\n\nTITLE: Running a Single Request with Bruno CLI\nDESCRIPTION: Command to execute a specific API request by providing its filename. This targets just one request file rather than running the entire collection.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbru run request.bru\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Request Body in Bruno\nDESCRIPTION: Example of a JSON request body structure for a POST request to create a user.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/tests/data-driven-testing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Bruno\nDESCRIPTION: Sets an environment variable in response handler\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onResponse(res) {\n  let data = res.getBody();\n  let token = bru.setEnvVar(\"access_token\", data.token);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables in Bruno CLI\nDESCRIPTION: Command to override or set specific environment variables during execution. Useful for providing secret tokens or configuration values that shouldn't be stored in environment files.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder --env Local --env-var JWT_TOKEN=1234\n```\n\n----------------------------------------\n\nTITLE: Getting Request Body in Bruno\nDESCRIPTION: Retrieves the current request body/payload\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst body = req.getBody();\n```\n\n----------------------------------------\n\nTITLE: Request Level OAuth2 Token Management Script\nDESCRIPTION: Script that runs post-response at request level to store the OAuth2 access token in a runtime variable named 'access_token_set_by_post_response_script'.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/auth/oauth2/authorization-code.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbru.setVar('access_token_set_by_post_response_script', res.body.access_token);\n```\n\n----------------------------------------\n\nTITLE: Setting Request URL in Bruno\nDESCRIPTION: Shows how to set a new request URL using req.setUrl() method\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreq.setUrl(\"https://api.github.com/search/repositories?q=vue\");\n```\n\n----------------------------------------\n\nTITLE: Getting Response Status in Bruno\nDESCRIPTION: Retrieves the HTTP status code from the response\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet status = res.getStatus();\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Visualization using ag-grid in JavaScript\nDESCRIPTION: This example demonstrates how to use the ag-grid provider to render a table visualization with row data and column definitions, including filters on all columns.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/advanced-guides/visualize.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst rowData = [\n  { name: 'John Doe', age: 28, email: 'john@example.com', city: 'New York' },\n  { name: 'Jane Smith', age: 32, email: 'jane@example.com', city: 'London' }\n];\n\nconst columnDefinitions = [\n  { field: \"name\", filter: true, floatingFilter: true },\n  { field: \"age\", filter: true, floatingFilter: true },\n  { field: \"email\", filter: true, floatingFilter: true },\n  { field: \"city\", filter: true, floatingFilter: true }\n];\n\nbru.visualize('table', {\n  name: 'table1',\n  provider: 'ag-grid',\n  props: { rowData, columnDefinitions }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Request Header in Bruno\nDESCRIPTION: Retrieves a specific header value from the request\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreq.getHeader(\"transaction-id\");\n```\n\n----------------------------------------\n\nTITLE: Running Spectral Validation on OpenAPI Spec\nDESCRIPTION: JavaScript command to validate an OpenAPI specification file (openspec.yaml) using Spectral with the defined ruleset.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/external-libraries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nspectral lint openspec.yaml --r .spectral.yaml\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Platform in Bruno\nDESCRIPTION: Retrieves the platform (app or cli) where the request is being executed\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst platform = req.getExecutionPlatform();\nconsole.log(`Request is running on ${platform} platform`);\n```\n\n----------------------------------------\n\nTITLE: Getting All Response Headers in Bruno\nDESCRIPTION: Retrieves all headers from the response\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nlet headers = res.getHeaders();\n```\n\n----------------------------------------\n\nTITLE: Accessing OAuth2 Tokens in Bruno Scripts using getOauth2CredentialVar\nDESCRIPTION: Demonstrates how to access OAuth2 tokens in Bruno scripts using the bru.getOauth2CredentialVar() function. This allows retrieving token data such as access tokens using a specific variable syntax pattern.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/auth/oauth2-2.0/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbru.getOauth2CredentialVar('$oauth2.<Token ID>.access_token')\n```\n\n----------------------------------------\n\nTITLE: Defining Post-Response Scripts in Bruno\nDESCRIPTION: The 'script:post-response' tag is used to define scripts that run after the response is received.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nscript:post-response {\n  bru.setVar(\"token\", res.body.token);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables in .env File\nDESCRIPTION: Example of how to define environment variables in a .env file for a Bruno collection. This file stores key-value pairs that can be accessed throughout the collection to manage sensitive information securely.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/process-env.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkey = bruno\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-Request Scripts in Bruno\nDESCRIPTION: The 'script:pre-request' tag is used to define scripts that run before the request is sent.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nscript:pre-request {\n  req.setHeader(\"Authorization\", \"{{token}}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dictionary Blocks in Bru Files\nDESCRIPTION: This snippet demonstrates how to create dictionary blocks in a Bru file. It shows examples of 'get' and 'headers' blocks with key-value pairs. The '~' prefix is used to disable specific entries.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/language.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nget {\n  url: https://api.textlocal.in/send\n}\n\nheaders {\n  content-type: application/json\n  Authorization: Bearer 123\n  ~transaction-id: {{transactionId}}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Bruno Requests\nDESCRIPTION: The 'meta' tag is used to store metadata about a request, including name, type (http or graphql), and sequence number for sorting in the UI.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeta {\n  name: Get users,\n  type: http\n  seq: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Path Parameter URL Structure Example\nDESCRIPTION: Demonstrates the structure of a URL with a path parameter where :id is a placeholder that gets replaced with an actual value when making the request.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/send-requests/REST/parameters.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.example.com/users/:id\n```\n\n----------------------------------------\n\nTITLE: Getting Environment Variables in Bruno\nDESCRIPTION: Retrieves an environment variable\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nlet token = bru.getEnvVar(\"access_token\");\n```\n\n----------------------------------------\n\nTITLE: Setting Next Request in Bruno\nDESCRIPTION: Controls request execution order in collection runner\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nbru.setNextRequest(\"Get process status\");\n```\n\n----------------------------------------\n\nTITLE: Getting Folder Variables in Bruno\nDESCRIPTION: Retrieves a folder-level variable\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nlet company = bru.getFolderVar(\"company\");\n```\n\n----------------------------------------\n\nTITLE: Sample Data Structure for Response Query Examples in JavaScript\nDESCRIPTION: Provides a complex nested data structure used to demonstrate various response query capabilities.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/response/response-query.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  customer: {\n    address: {\n      city: \"bangalore\"\n    },\n    orders: [\n      {\n        id: \"order-1\",\n        items: [\n          { id: 1, amount: 10 },\n          { id: 2, amount: 20 }\n        ]\n      },\n      {\n        id: \"order-2\",\n        items: [\n          { id: 3, amount: 30 },\n          { id: 4, amount: 40 }\n        ]\n      }\n    ]\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Request Timeout in Bruno\nDESCRIPTION: Retrieves the current timeout value for the request\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeout = req.getTimeout();\nconsole.log(timeout); // Logs the current timeout value\n```\n\n----------------------------------------\n\nTITLE: Secret Reference Example in Bruno\nDESCRIPTION: Example showing how to reference a specific secret key (username) from a secret named dbCredentials.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/azure-key-vault/using-secrets.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n$secrets.dbCredentials.username\n```\n\n----------------------------------------\n\nTITLE: Simple Example of Setting a Runtime Variable\nDESCRIPTION: A basic example showing how to create a runtime variable with the key 'hey' and value 'Bruno'. After execution, this variable will be available for viewing through the UI.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/runtime-variables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nbru.setVar(\"hey\", \"Bruno\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Cloud with Client Credentials Authentication in Bruno CLI\nDESCRIPTION: Configuration for secrets.json to connect to Vault Cloud using client credentials authentication. This setup enables Bruno CLI to access hosted Vault instances with OAuth-style authentication.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/using-with-cli.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"vault\",\n  \"cli\": {\n    \"type\": \"vault-cloud\",\n    \"vaultCloudConfig\": {\n      \"auth\": {\n        \"method\": \"client-credentials\",\n        \"clientCredentials\": {\n          \"tokenEndpoint\": \"{{tokenEndpoint}}\",\n          \"secretsEndPoint\": \"{{secretsEndpoint}}\",\n          \"clientId\": \"{{clientId}}\",\n          \"clientSecret\": \"{{clientSecret}}\"\n        }\n      },\n      \"project\": {\n        \"name\": \"{{projectName}}\",\n        \"projectId\": \"{{projectId}}\",\n        \"organizationId\": \"{{organizationId}}\"\n      }\n    }\n  },\n  \"data\": [\n    {\n      \"environment\": \"Prod\",\n      \"secrets\": [\n        {\n          \"name\": \"db\",\n          \"path\": \"secret/db\",\n          \"enabled\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Postman to Bruno Conversion Example\nDESCRIPTION: Comprehensive example showing how to read a Postman collection file, convert it to Bruno format, and save it to a new file using async/await and file system operations\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/converters/overview.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { postmanToBruno } = require('@usebruno/converters');\nconst fs = require('fs/promises');\n\nfunction convertPostmanToBruno(inputFile, outputFile) {\n  // Read Postman collection file\n  fs.readFile(inputFile, 'utf8')\n    .then(inputData => {\n      // Convert to Bruno collection\n      return postmanToBruno(JSON.parse(inputData));\n    })\n    .then(brunoCollection => {\n      // Save Bruno collection\n      return fs.writeFile(outputFile, JSON.stringify(brunoCollection, null, 2));\n    })\n    .then(() => {\n      console.log('Conversion successful!');\n    })\n    .catch(error => {\n      console.error('Error during conversion:', error);\n    });\n}\n\n// Usage\nconvertPostmanToBruno('postman-collection.json', 'bruno-collection.json');\n```\n\n----------------------------------------\n\nTITLE: Sleep Function in Bruno\nDESCRIPTION: Pauses execution for specified milliseconds\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nawait bru.sleep(3000);\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout in Bruno\nDESCRIPTION: Sets a timeout value in milliseconds for the request\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nreq.setTimeout(5000); // Sets the timeout to 5000 milliseconds (5 seconds)\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Whitelisting in Bruno\nDESCRIPTION: This snippet shows how to edit the bruno.json file to whitelist specific Node.js modules (like child_process) and enable filesystem access for Bruno scripts. This configuration is necessary for security reasons to explicitly allow only required modules.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/whitelisting-modules.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1\",\n  \"name\": \"collection_name\",\n  \"type\": \"collection\",\n  \"ignore\": [\"node_modules\", \".git\"],\n  \"scripts\": {\n    \"moduleWhitelist\": [\"child_process\"],\n    \"filesystemAccess\": {\n      \"allow\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Flow in Bruno Configuration File\nDESCRIPTION: A JSON configuration example showing how to set the script flow type in bruno.json. The flow property can be set to either \"sequential\" or \"sandwich\" (default if not specified). The configuration also includes other script-related settings like module whitelist and filesystem access.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/script-flow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"moduleWhitelist\": [\"crypto\", \"buffer\", \"form-data\"],\n    \"filesystemAccess\": {\n      \"allow\": true\n    },\n    \"flow\": \"sequential\" // Or \"sandwich\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Assertion Results with getAssertionResults in Bruno\nDESCRIPTION: This async function returns the assertion results of a request. It can only be used within test scripts to examine the detailed outcomes of assertions that were performed.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst assertionResults = await bru.getAssertionResults();\n```\n\n----------------------------------------\n\nTITLE: Disabling JSON Response Parsing in Bruno\nDESCRIPTION: Code to disable automatic JSON parsing of response data when working with BigInt values to prevent data corruption and maintain numeric precision.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/advanced-guides/working-with-bigint.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreq.disableParsingResponseJson();\n```\n\n----------------------------------------\n\nTITLE: Array Filtering Query Example in JavaScript\nDESCRIPTION: Demonstrates how to filter array elements using a callback function when querying the response.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/response/response-query.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nres('..items[?].amount', i => i.amount > 20)\n```\n\n----------------------------------------\n\nTITLE: Defining Array Blocks in Bru Files\nDESCRIPTION: This snippet illustrates how to create an array block in a Bru file. It shows a 'vars:secret' block with a list of strings. The '~' prefix is used to disable specific entries in the array.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/language.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvars:secret [\n  access_key,\n  access_secret,\n  ~transactionId\n]\n```\n\n----------------------------------------\n\nTITLE: Example OpenAPI Specification Export Structure\nDESCRIPTION: Sample YAML structure showing how a Bruno collection is exported to OpenAPI Specification V3 format. Includes basic API information, endpoint definitions, parameters, and component schemas.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/open-api/exportOAS.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.0\ninfo:\n  title: Example API\n  version: 1.0.0\n  description: API documentation exported from Bruno\npaths:\n  /users:\n    get:\n      summary: Get all users\n      parameters:\n        - name: limit\n          in: query\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Getting Request URL in Bruno\nDESCRIPTION: Demonstrates how to get the current request URL using the req.getUrl() method\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet url = req.getUrl();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Test Results with getTestResults in Bruno\nDESCRIPTION: This async function returns the test results of a request. It can only be used within test scripts to analyze the outcome of tests that were run.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst testResults = await bru.getTestResults();\n```\n\n----------------------------------------\n\nTITLE: Viewing Spectral Validation Results\nDESCRIPTION: Example output from Spectral CLI showing validation warnings for an OpenAPI specification file, including issues with missing contact information and empty tags.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/external-libraries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenspec.yaml:\n 2:6  warning  info-contact    Info object must have \"contact\" object.      info\n 10:9 warning  operation-tags  Operation must have non-empty \"tags\" array.  paths./pets.get\n 36:9 warning  operation-tags  Operation must have non-empty \"tags\" array.  paths./pets/{petId}.get\n```\n\n----------------------------------------\n\nTITLE: Array Indexing Query Example in JavaScript\nDESCRIPTION: Illustrates how to access specific array elements when querying the response object.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/response/response-query.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nres('..items[0].amount')\n```\n\n----------------------------------------\n\nTITLE: Skipping Specific Headers in Bruno CLI Report\nDESCRIPTION: This command generates an HTML report while excluding specific headers (Authorization, Content-Type, and Date) from the output using the --reporter-skip-headers option.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/builtInReporters.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbru run --reporter-html results.html --reporter-skip-headers \"Authorization\" \"Content-Type\" \"Date\"\n```\n\n----------------------------------------\n\nTITLE: Getting All Request Headers in Bruno\nDESCRIPTION: Retrieves all headers from the current request\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst headers = req.getHeaders();\n```\n\n----------------------------------------\n\nTITLE: Generating Business Data with Dynamic Variables in JSON\nDESCRIPTION: This snippet illustrates the use of dynamic variables to generate random business-related data including company name, catch phrase, department, and account information.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/dynamic-variables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"company\": {\n    \"name\": \"{{$randomCompanyName}}\",\n    \"catchPhrase\": \"{{$randomCatchPhrase}}\",\n    \"department\": \"{{$randomDepartment}}\",\n    \"account\": {\n      \"number\": \"{{$randomBankAccount}}\",\n      \"type\": \"{{$randomTransactionType}}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report with Bruno CLI\nDESCRIPTION: This command generates a human-readable HTML report of test results using Bruno CLI. The output is saved to a file named results.html for easy visual review.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/builtInReporters.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbru run request.bru --reporter-html results.html\n```\n\n----------------------------------------\n\nTITLE: Converting Postman Environment to Bruno\nDESCRIPTION: Code example showing how to convert a Postman environment to Bruno format using the postmanToBrunoEnvironment converter function\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/converters/overview.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { postmanToBrunoEnvironment } = require('@usebruno/converters');\n\nconst brunoEnvironment = postmanToBrunoEnvironment(postmanEnvironment);\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Method in Bruno\nDESCRIPTION: Example showing how to access the HTTP method of a request. The method property indicates the type of action the request wishes to perform on the resource, such as GET, POST, PUT, DELETE, etc.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/request/request-object.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage\nconsole.log(req.method); // Output: \"GET\"\n```\n\n----------------------------------------\n\nTITLE: Setting Single Request Header in Bruno\nDESCRIPTION: Sets a single header in the request\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreq.setHeader(\"content-type\", \"application/json\");\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Variables in Bruno Requests\nDESCRIPTION: The 'body:graphql:vars' tag is used to define variables for a GraphQL query.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nbody:graphql:vars {\n  {\n    \"limit\": 5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Request Method in Bruno\nDESCRIPTION: Retrieves the current HTTP method of the request\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst method = req.getMethod();\n```\n\n----------------------------------------\n\nTITLE: Adding Delay Between API Requests in Bruno CLI\nDESCRIPTION: Command to introduce a delay between API requests during execution. The delay is specified in milliseconds and helps simulate realistic network conditions or avoid rate limiting.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbru run  --delay 1000\n```\n\n----------------------------------------\n\nTITLE: Making POST HTTP Requests in Bruno\nDESCRIPTION: The 'post' tag is used to make a POST HTTP call, specifying the URL to be requested.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npost {\n  url: https://api.github.com/users/usebruno\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Text Request Body in Bruno\nDESCRIPTION: The 'body:text' tag is used to define a plain text request body.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbody:text {\n  This is a text body\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Bruno Local Environment File\nDESCRIPTION: Demonstrates how to access secrets defined in the .env file within a Bruno local environment file. This example shows how to reference JWT_TOKEN and API_KEY from the .env file using the process.env object.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/dotenv-file.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvars {\n  baseURL: https://echo.usebruno.com\n  JWT_TOKEN: {{process.env.JWT_TOKEN}}\n  API_KEY: {{process.env.API_KEY}}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno CLI with pnpm\nDESCRIPTION: Command to install Bruno CLI globally using pnpm package manager. Requires Node.js (preferably LTS version 18 or higher) to be installed.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/installation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -g @usebruno/cli\n```\n\n----------------------------------------\n\nTITLE: Running All Requests in a Folder with Bruno CLI\nDESCRIPTION: Command to execute all API requests within a specific folder. This allows targeting a subset of requests organized in a directory structure.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder\n```\n\n----------------------------------------\n\nTITLE: Making DELETE HTTP Requests in Bruno\nDESCRIPTION: The 'delete' tag is used to make a DELETE HTTP call, specifying the URL to be requested.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndelete {\n  url: https://api.github.com/users/usebruno\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Form Request Body in Bruno\nDESCRIPTION: The 'body:multipart-form' tag is used to define a multipart form request body.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nbody:multipart-form {\n  apikey: secret\n  numbers: +91998877665\n  ~message: hello\n}\n```\n\n----------------------------------------\n\nTITLE: Secret Reference Pattern in Bruno\nDESCRIPTION: Pattern for referencing secrets in Bruno, showing the required syntax structure.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/azure-key-vault/using-secrets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n$secrets.<name>.<key-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Server with Token Authentication in Bruno CLI\nDESCRIPTION: Configuration for secrets.json to connect to a Vault server using token authentication. This setup enables secure access to Vault secrets when running Bruno CLI commands.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/using-with-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"vault\",\n  \"cli\": {\n    \"type\": \"vault-server\",\n    \"vaultServerConfig\": {\n      \"url\": \"http://localhost:8200\",\n      \"namespace\": \"bruno\",\n      \"auth\": {\n        \"method\": \"token\",\n        \"token\": \"{{authToken}}\"\n      }\n    }\n  },\n  \"data\": [\n    {\n      \"environment\": \"Prod\",\n      \"secrets\": [\n        {\n          \"name\": \"db\",\n          \"path\": \"secret/db\",\n          \"enabled\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Insomnia Collection to Bruno\nDESCRIPTION: Code example showing how to convert an Insomnia collection to Bruno format using the insomniaToBruno converter function\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/converters/overview.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { insomniaToBruno } from '@usebruno/converters';\n\nconst brunoCollection = insomniaToBruno(insomniaCollection);\n```\n\n----------------------------------------\n\nTITLE: Making OPTIONS HTTP Requests in Bruno\nDESCRIPTION: The 'options' tag is used to make an OPTIONS HTTP call, specifying the URL to be requested.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\noptions {\n  url: https://api.github.com/users/usebruno\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Response Time in Bruno\nDESCRIPTION: Retrieves the time taken for the response\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlet responseTime = res.getResponseTime();\n```\n\n----------------------------------------\n\nTITLE: Secret Reference Pattern Example\nDESCRIPTION: Shows the pattern for referencing secrets in Bruno using dot notation with $secrets prefix\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/aws-secrets-manager/using-secrets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n$secrets.dbCredentials.username\n```\n\n----------------------------------------\n\nTITLE: Saving API Test Results to File with Bruno CLI\nDESCRIPTION: Command to save the results of API tests to a JSON file. This enables storing test outcomes for later analysis or integration with other tools.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder --output results.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Folder Variables in JavaScript Scripts\nDESCRIPTION: This snippet demonstrates how to retrieve a folder variable value using the bru.getFolderVar() function in a JavaScript script within Bruno.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/folder-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet bearerToken = bru.getFolderVar(\"bearerToken\");\n```\n\n----------------------------------------\n\nTITLE: Getting Process Environment Variables in Bruno\nDESCRIPTION: Retrieves Node process environment variables\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nlet secret_token = bru.getProcessEnv(\"secret_access_token\");\n```\n\n----------------------------------------\n\nTITLE: Setting Global Environment Variables in Bruno\nDESCRIPTION: Sets a global environment variable\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nbru.setGlobalEnvVar(\"val\", \"bruno\");\n```\n\n----------------------------------------\n\nTITLE: Getting Collection Variables in Bruno\nDESCRIPTION: Retrieves a collection-level variable\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nlet namespace = bru.getCollectionVar(\"namespace\");\n```\n\n----------------------------------------\n\nTITLE: Converting OpenAPI Specification to Bruno\nDESCRIPTION: Code example showing how to convert an OpenAPI specification to Bruno format using the openApiToBruno converter function\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/converters/overview.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { openApiToBruno } from '@usebruno/converters';\n\nconst brunoCollection = openApiToBruno(openApiSpecification);\n```\n\n----------------------------------------\n\nTITLE: Alternative Bruno CLI Command for Collection Runner\nDESCRIPTION: Another CLI command option to run a Bruno collection with a CSV file and generate an HTML report.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/tests/data-driven-testing.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbru run --output results.html --format html --csv-file-path /path/to/csv/file.csv\n```\n\n----------------------------------------\n\nTITLE: Getting Global Environment Variables in Bruno\nDESCRIPTION: Retrieves a global environment variable\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nbru.getGlobalEnvVar(\"val\");\n```\n\n----------------------------------------\n\nTITLE: Using Environment Configuration with Bruno CLI\nDESCRIPTION: Command to run requests with a specific environment configuration. This allows switching between different environments (like Local, Development, Production) for testing.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder --env Local\n```\n\n----------------------------------------\n\nTITLE: Creating CSV Data File for Bruno Collection Runner\nDESCRIPTION: Sample CSV file structure containing name and job fields for data-driven testing in Bruno.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/tests/data-driven-testing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nname, job\nJohn Doe, Software Engineer\nJane Smith, Product Manager\nMark Lee, Data Scientist\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Visualization in JavaScript and HTML\nDESCRIPTION: This example demonstrates how to render custom HTML content as a visualization, including a styled table with predefined data.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/advanced-guides/visualize.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst htmlString = `\n<html>\n  <head>\n    <style>\n      table { width: 100%; border-collapse: collapse; }\n      th, td { border: 1px solid black; padding: 8px; }\n      th { background-color: #f2f2f2; }\n    </style>\n  </head>\n  <body>\n    <table>\n      <tr><th>Name</th><th>Age</th><th>Email</th><th>City</th></tr>\n      <tr><td>John Doe</td><td>28</td><td>john@example.com</td><td>New York</td></tr>\n      <tr><td>Jane Smith</td><td>32</td><td>jane@example.com</td><td>London</td></tr>\n    </table>\n  </body>\n</html>\n`;\n\nbru.visualize('html', {\n  name: 'htmlReport',\n  content: htmlString\n});\n```\n\n----------------------------------------\n\nTITLE: Aborting Request Run in Bruno\nDESCRIPTION: Gracefully aborts the collection run\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nbru.setNextRequest(null); // aborts the run gracefully\n```\n\n----------------------------------------\n\nTITLE: Pushing Bruno Collection Changes to Remote Repository\nDESCRIPTION: Command to push committed changes to a remote Git repository. The -u flag sets up tracking between local and remote branches for future pushes.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-cli.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Running Bruno CLI with Token Authentication\nDESCRIPTION: CLI command for executing Bruno with token authentication. This command runs a folder of requests while passing the Vault token as an environment variable.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/using-with-cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbru run folder --env Prod --env-var authToken=your-vault-token\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Report with Bruno CLI\nDESCRIPTION: This command generates a test results report in JSON format using Bruno CLI. The output is saved to a file named results.json.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/builtInReporters.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbru run request.bru --reporter-json results.json\n```\n\n----------------------------------------\n\nTITLE: Checking Bruno CLI Version in Bash\nDESCRIPTION: Command to verify the installed version of Bruno CLI. Useful for ensuring you're working with the latest version or troubleshooting version-specific issues.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbru --version\n```\n\n----------------------------------------\n\nTITLE: Making CONNECT HTTP Requests in Bruno\nDESCRIPTION: The 'connect' tag is used to make a CONNECT HTTP call, specifying the URL to be requested.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nconnect {\n  url: https://api.github.com/users/usebruno\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Bruno Collection in Terminal\nDESCRIPTION: Command to change directory to the location of your Bruno collection files. This is the first step before initializing Git in your Bruno collection.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/your/bruno/collection\n```\n\n----------------------------------------\n\nTITLE: Staging Changes in Bruno Collection\nDESCRIPTION: Command to stage all changes made to your Bruno collection files. This prepares the modified files to be included in the next commit.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-cli.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno CLI with npm\nDESCRIPTION: Command to install Bruno CLI globally using npm package manager. Requires Node.js (preferably LTS version 18 or higher) to be installed.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/installation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @usebruno/cli\n```\n\n----------------------------------------\n\nTITLE: Customizing Fetch in Bruno Button in Markdown\nDESCRIPTION: This bash snippet demonstrates how to customize the Fetch in Bruno button in Markdown. It shows the syntax for replacing the default image and alt text with custom values.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/embed-bruno-collection.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[<img src=\"your-custom-image.svg\" alt=\"your-custom-name\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Visualization using react-table in JavaScript\nDESCRIPTION: This example shows how to use the react-table provider to render a large table visualization with custom column definitions, including custom headers and filter variants.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/advanced-guides/visualize.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rowData1 = Array.from({ length: 2500 })\n  .map((_) => [\n    { firstName: 'Tanner', lastName: 'Linsley', age: 24, visits: 100 },\n    { firstName: 'Tandy', lastName: 'Miller', age: 40, visits: 40 },\n    { firstName: 'Joe', lastName: 'Dirte', age: 45, visits: 20 },\n  ]).flat();\n\n\nconst columnDefinitions1 = [\n  {\n    id: \"firstName\",\n    cell: (info) => info.getValue(),\n    header: () => `<span className=\"flex flex-start\">First Name</span>`,\n    meta: { filterVariant: \"text\" },\n  },\n  {\n    id: \"lastName\",\n    cell: (info) => info.getValue(),\n    header: () => `<span className=\"flex flex-start\">Last Name</span>`,\n    meta: { filterVariant: \"text\" },\n  },\n  // Additional column definitions here...\n];\n\nbru.visualize('table', {\n  name: 'table2',\n  provider: 'react-table',\n  props: { rowData: rowData1, columnDefinitions: columnDefinitions1 }\n});\n```\n\n----------------------------------------\n\nTITLE: Pulling Bruno Collection Changes from Remote Repository\nDESCRIPTION: Command to fetch and integrate changes from a remote Git repository. This updates your local Bruno collection with changes made by collaborators.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-cli.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit pull origin main\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in Bruno Configuration File\nDESCRIPTION: This snippet shows how to define environment variables in a Bruno configuration file named 'local.bru'. It demonstrates setting a 'host' variable for a local development environment.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/environment-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvars {\n  host: http://localhost:8787\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno CLI with yarn\nDESCRIPTION: Command to install Bruno CLI globally using yarn package manager. Requires Node.js (preferably LTS version 18 or higher) to be installed.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/installation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add @usebruno/cli\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno Converters with pnpm\nDESCRIPTION: Command to install Bruno CLI globally using pnpm package manager\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/converters/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install -g @usebruno/cli\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository in Bruno Collection\nDESCRIPTION: Command to initialize a new Git repository in your Bruno collection directory. This creates the necessary Git infrastructure to track changes to your collection files.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Skipping All Headers in Bruno CLI Report\nDESCRIPTION: This command generates an HTML report while excluding all headers from the output using the --reporter-skip-all-headers option, resulting in a cleaner report.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/builtInReporters.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbru run --reporter-html results.html --reporter-skip-all-headers\n```\n\n----------------------------------------\n\nTITLE: Disable JSON Response Parsing in Bruno\nDESCRIPTION: Prevents automatic parsing of JSON response body\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nbru.disableParsingResponseJson();\n```\n\n----------------------------------------\n\nTITLE: Running Bruno Collection with CSV File via CLI\nDESCRIPTION: Command to run a Bruno collection using a CSV file and generate an HTML report using the Bruno CLI.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/tests/data-driven-testing.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbru run --reporter-html results.html --csv-file-path /path/to/csv/file.csv\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Server with AppRole Authentication in Bruno CLI\nDESCRIPTION: Configuration for secrets.json to connect to a Vault server using appRole authentication. This setup provides more granular access control when connecting Bruno CLI to Vault.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/using-with-cli.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"vault\",\n  \"cli\": {\n    \"type\": \"vault-server\",\n    \"vaultServerConfig\": {\n      \"url\": \"http://localhost:8200\",\n      \"namespace\": \"bruno\",\n      \"auth\": {\n        \"method\": \"app_role\",\n        \"appRole\": {\n          \"role\": \"bruno\",\n          \"roleId\": \"{{roleId}}\",\n          \"secretId\": \"{{secretId}}\"\n        }\n      }\n    }\n  }\n  \"data\": [\n    {\n      \"environment\": \"Prod\",\n      \"secrets\": [\n        {\n          \"name\": \"db\",\n          \"path\": \"secret/db\",\n          \"enabled\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Requests in a Collection with Bruno CLI\nDESCRIPTION: Basic command to execute all API requests in a collection. This should be run from the directory where your API collection is located.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbru run\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Variables in Bruno Environment File\nDESCRIPTION: Example of a Bruno environment configuration file showing how to define regular variables and mark certain variables as secrets. The secret variables are stored securely and not written directly to the environment file.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/secret-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvars {\n  host: http://localhost:5005\n}\nvars:secret [\n  jwtToken\n]\n\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno Converters with npm\nDESCRIPTION: Command to install Bruno CLI globally using npm package manager\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/converters/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @usebruno/cli\n```\n\n----------------------------------------\n\nTITLE: Converting Postman Collection to Bruno\nDESCRIPTION: Code example showing how to convert a Postman collection to Bruno format using the postmanToBruno converter function\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/converters/overview.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { postmanToBruno } = require('@usebruno/converters');\n\n// Convert Postman collection to Bruno collection\nconst brunoCollection = postmanToBruno(postmanCollection);\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required npm dependencies for the documentation project\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Standard Dot Notation Query Example in JavaScript\nDESCRIPTION: Demonstrates using standard dot notation to navigate through the response object properties.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/response/response-query.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nres('customer.orders.items.amount')\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Bruno Collection\nDESCRIPTION: Command to commit staged changes with a descriptive message. This creates a permanent record of the changes in the Git history.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-cli.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Created my first Bruno request 🐶\"\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno via Homebrew on MacOS\nDESCRIPTION: Command to install Bruno using the Homebrew package manager on MacOS systems.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/download.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install bruno\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno Converters with yarn\nDESCRIPTION: Command to install Bruno CLI globally using yarn package manager\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/converters/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add @usebruno/cli\n```\n\n----------------------------------------\n\nTITLE: Making TRACE HTTP Requests in Bruno\nDESCRIPTION: The 'trace' tag is used to make a TRACE HTTP call, specifying the URL to be requested.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntrace {\n  url: https://api.github.com/users/usebruno\n}\n```\n\n----------------------------------------\n\nTITLE: Client Certificate Configuration JSON Structure\nDESCRIPTION: JSON structure for configuring client certificates with Bruno CLI. The configuration includes certificate details for different domains, supporting both .crt/.key pairs and .pfx files with optional passphrases.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-cli/commandOptions.mdx#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": true,\n  \"certs\": [\n    {\n      \"domain\": \"usebruno.com\",\n      \"type\": \"cert\",\n      \"certFilePath\": \"certs/server_1.crt\",\n      \"keyFilePath\": \"private/server_1.key\",\n      \"passphrase\": \"Iu$eBrun0_#Secure!\"\n    },\n    {\n      \"domain\": \"the-example.com\",\n      \"type\": \"pfx\",\n      \"pfxFilePath\": \"pfx/server_3.pfx\",\n      \"passphrase\": \"L!ghT_Y@g@mi_2024!\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno via Scoop on Windows\nDESCRIPTION: Command to install Bruno using the Scoop package manager on Windows systems.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/download.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nscoop install bruno\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the local development server for previewing documentation changes\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Making HEAD HTTP Requests in Bruno\nDESCRIPTION: The 'head' tag is used to make a HEAD HTTP call, specifying the URL to be requested.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/bru-lang/tag-reference.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhead {\n  url: https://api.github.com/users/usebruno\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno via Flatpak on Linux\nDESCRIPTION: Command to install Bruno using Flatpak on Linux systems.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/download.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflatpak install flathub com.usebruno.Bruno\n```\n\n----------------------------------------\n\nTITLE: Importing Video Component in JSX for Bruno Documentation\nDESCRIPTION: Imports the Video component from the local components directory to enable embedding video content in the documentation pages. This component is used throughout the page to demonstrate Git operations visually.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-gui/provider.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Video from \"@/components/Video\";\n```\n\n----------------------------------------\n\nTITLE: Setting Max Redirects in Bruno\nDESCRIPTION: Sets the maximum number of redirects the request will follow\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nreq.setMaxRedirects(5);\n```\n\n----------------------------------------\n\nTITLE: Importing PremiumBadge Component in JSX\nDESCRIPTION: This code snippet imports the PremiumBadge component from a local file. It's likely used to indicate premium features in the documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/using-secrets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Navigating to Bruno Collection Directory in Bash\nDESCRIPTION: Command to navigate to your Bruno collection directory in the terminal before initializing package.json.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/external-libraries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd path/to/your/bruno-collection\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Mode in Bruno\nDESCRIPTION: Retrieves the current execution mode (runner or standalone) of the request\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/javascript-reference.mdx#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst executionMode = req.getExecutionMode();\nconsole.log(`Request is running in ${executionMode} mode`);\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in JSX for Azure Key Vault Configuration Demo\nDESCRIPTION: This JSX code embeds a video demonstrating the process of configuring secrets in Azure Key Vault. It includes fallback text for browsers that don't support the video tag.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/azure-key-vault/configuring-and-fetching-secrets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video controls className=\"mt-10\" muted>\n  <source\n    src=\"/screenrecordings/azure_key_vault/azure_configuring_secrets.mp4\"\n    type=\"video/mp4\"\n  />\n  Your browser does not support the video tag.\n</video>\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JSX\nDESCRIPTION: Import statement for the Callout component from the nextra/components library, used for displaying important information in the documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/create-a-folder.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Component from Nextra\nDESCRIPTION: Imports the Callout component from Nextra components library for use in documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/open-api/importOAS.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Nextra in JSX\nDESCRIPTION: This code snippet imports the Callout component from the Nextra library, which is likely used for creating callout sections in the documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/variables/global-environment-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for OpenAPI Documentation Page\nDESCRIPTION: React imports for building the OpenAPI documentation page, including Next.js Image component, a custom Premium Badge component, and Nextra's Callout component.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/open-api/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from \"next/image\";\nimport PremiumBadge from \"@/components/premium-badge\";\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React for OAS Documentation\nDESCRIPTION: Import statements for the Callout component from Nextra and a custom PremiumBadge component used in the OpenAPI documentation interface.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/open-api/createOAS.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Importing PremiumBadge Component in JSX\nDESCRIPTION: This code snippet imports the PremiumBadge component from a local file. It's likely used to display a premium feature indicator in the Bruno documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/aws-secrets-manager/configuring-and-fetching-secrets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JSX\nDESCRIPTION: Imports the Callout component from the nextra/components library for use in documentation rendering.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/auth/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Importing PremiumBadge Component in JSX\nDESCRIPTION: This code snippet imports the PremiumBadge component from a local file. It's likely used to display a premium feature badge next to the HashiCorp Vault title.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Component with AWS Secret Manager Demo in JSX\nDESCRIPTION: This JSX code renders a video element displaying a screen recording of the AWS Secret Manager configuration process in Bruno. It includes fallback text for browsers that don't support the video tag.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/aws-secrets-manager/configuring-and-fetching-secrets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video controls className=\"mt-10\" muted>\n  <source\n    src=\"/screenrecordings/aws_secret_manager/aws_configuring_secrets.mp4\"\n    type=\"video/mp4\"\n  />\n  Your browser does not support the video tag.\n</video>\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JSX\nDESCRIPTION: Import statement for the Callout component from nextra/components library used for displaying notification boxes in the documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/send-requests/REST/req-header.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno via Winget on Windows\nDESCRIPTION: Command to install Bruno using the Winget package manager on Windows systems.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/download.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwinget install Bruno.Bruno\n```\n\n----------------------------------------\n\nTITLE: Rendering HashiCorp Vault Title with PremiumBadge in JSX\nDESCRIPTION: This code snippet renders the HashiCorp Vault title with a PremiumBadge component. It indicates that HashiCorp Vault integration is likely a premium feature in Bruno.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# HashiCorp Vault<PremiumBadge />\n```\n\n----------------------------------------\n\nTITLE: Importing PremiumBadge Component in JSX\nDESCRIPTION: This code snippet imports the PremiumBadge component from a local file. It's likely used to indicate premium features in the Bruno documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/aws-secrets-manager/adding-a-secret-provider.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Postman to Bruno Translator Page in React\nDESCRIPTION: This React component renders a page for the Postman to Bruno scripts translator. It imports the Translator component and available themes, then renders a title, description, and the Translator component with the provided themes.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/import-export-data/script-translator.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Translator } from '../../../components/translator/translator'\nimport { AVAILABLE_THEMES } from '../../../components/translator/themes'\n\nexport default function Page() {\n  return (\n    <>\n      <h1>Scripts Translator</h1>\n      <p>Welcome to the <strong>Postman</strong> to <strong>Bruno</strong> scripts translator. \\\n      This is the same function that runs behind the <strong>Import Postman Collection</strong> feature in Bruno</p>\n      <Translator themes={AVAILABLE_THEMES} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno via Apt on Debian-based Linux\nDESCRIPTION: Command to install Bruno using the Apt package manager on Debian-based Linux distributions such as Ubuntu.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/download.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install bruno\n```\n\n----------------------------------------\n\nTITLE: Importing PremiumBadge Component in JSX\nDESCRIPTION: This code snippet imports a PremiumBadge component from a local file. The component is likely used to indicate premium features in the Bruno documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/azure-key-vault/configuring-and-fetching-secrets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Bruno Docs\nDESCRIPTION: React import statements that bring in custom components used in the documentation page. It imports a PremiumBadge component and the Callout component from Nextra.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-gui/intro.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Importing PremiumBadge Component in JSX\nDESCRIPTION: This code snippet imports the PremiumBadge component from a local file. It's used to display a premium badge next to the feature title, indicating that this functionality is part of Bruno's premium offerings.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/adding-a-secret-provider.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno via Chocolatey on Windows\nDESCRIPTION: Command to install Bruno using the Chocolatey package manager on Windows systems.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/download.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchoco install bruno\n```\n\n----------------------------------------\n\nTITLE: Importing Premium Badge Component in React/JSX\nDESCRIPTION: Import statement for the PremiumBadge component from the components directory.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/azure-key-vault/using-secrets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Importing Premium Badge Component in React/JSX\nDESCRIPTION: Imports the PremiumBadge component from the components directory to indicate premium features.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/azure-key-vault/adding-a-secret-provider.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Element with Source in JSX\nDESCRIPTION: This JSX code renders a video element with controls and a source pointing to a local MP4 file. It demonstrates how to embed a video in the documentation, likely showing the process of adding an AWS Secret Manager provider.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/aws-secrets-manager/adding-a-secret-provider.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video controls className=\"mt-10\" muted>\n  <source\n    src=\"/screenrecordings/aws_secret_manager/aws_add_provider.mp4\"\n    type=\"video/mp4\"\n  />\n  Your browser does not support the video tag.\n</video>\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JSX\nDESCRIPTION: Imports the Callout component from the nextra/components library for displaying warning messages in the documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/auth/oauth2/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Installing Bruno via Snap on Linux\nDESCRIPTION: Command to install Bruno using Snap package manager on Linux systems.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/download.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install bruno\n```\n\n----------------------------------------\n\nTITLE: Using PremiumBadge Component in JSX\nDESCRIPTION: This snippet demonstrates the usage of the PremiumBadge component within a JSX header element. It's used to mark the 'Using secrets' section as a premium feature.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/using-secrets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# Using secrets<PremiumBadge />\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for AWS Secrets Documentation\nDESCRIPTION: Import statements for React components used in the AWS Secrets Manager documentation page, including a custom PremiumBadge component and Nextra's Callout component.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/aws-secrets-manager/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JSX\nDESCRIPTION: Import statement for the Callout component from nextra/components, used for displaying important notifications in the documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/send-requests/res-data-cookies/cookies.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Creating Spectral Configuration File\nDESCRIPTION: JavaScript command that creates a .spectral.yaml file with predefined rulesets for OpenAPI, AsyncAPI, and Arazzo validation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/external-libraries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\necho 'extends: [\"spectral:oas\", \"spectral:asyncapi\", \"spectral:arazzo\"]' > .spectral.yaml\n```\n\n----------------------------------------\n\nTITLE: Importing Premium Badge Component in React\nDESCRIPTION: Import statement for the PremiumBadge component used to indicate premium features in the documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/automate-test/manual-test.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Rendering PremiumBadge Component in JSX\nDESCRIPTION: This code snippet demonstrates how to use the PremiumBadge component within a Markdown header. It's placed next to the main title to visually indicate that the feature is premium.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/adding-a-secret-provider.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# How to Add a Secret Provider<PremiumBadge />\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Azure Key Vault Documentation in React\nDESCRIPTION: This code snippet imports necessary components for the Azure Key Vault documentation page, including a PremiumBadge component and a Callout component from Nextra.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/azure-key-vault/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Importing NextJS Components for Migration Guide\nDESCRIPTION: React/NextJS import statements for required components including Image component, PremiumBadge custom component, and Nextra Callout component.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/import-export-data/postman-migration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from \"next/image\";\nimport PremiumBadge from \"@/components/premium-badge\";\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Using PremiumBadge Component in Markdown Heading\nDESCRIPTION: This code demonstrates how to use the PremiumBadge component within a Markdown heading to indicate that the Request History feature is premium.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/history.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# Request History <PremiumBadge />\n```\n\n----------------------------------------\n\nTITLE: Rendering Fetch in Bruno Button in React\nDESCRIPTION: This React component creates a centered Fetch in Bruno button that links to a specific GitHub repository. It uses inline styles for positioning and sets the button image dimensions.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/embed-bruno-collection.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const BrunoButton = () => (\n  <div style={{ display: 'flex', justifyContent: 'center', width: '100%', margin: '2rem 0' }}>\n    <a href=\"https://fetch.usebruno.com?url=https%3A%2F%2Fgithub.com%2Fusebruno%2Fgithub-rest-api-collection\" \n       target=\"_blank\" \n       rel=\"noopener noreferrer\">\n      <img \n        src=\"https://fetch.usebruno.com/button.svg\" \n        alt=\"Fetch in Bruno\" \n        style={{ width: '160px', height: '40px' }} \n        width=\"160\" \n        height=\"40\"\n      />\n    </a>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Warning Callout Component for Git Requirements\nDESCRIPTION: Nextra Callout component that displays a warning message informing users that Git must be installed on their machine to use the collaboration feature.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-gui/intro.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"warning\" emoji=\"⚠️\">\n  Git must be\n  [installed](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) on\n  your machine to use this feature.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Setting Request-Level OAuth2 Access Token with Post-Response Script\nDESCRIPTION: This script runs after receiving a response from an OAuth2, Client Credentials request at the request level. It extracts the access token from the response body and stores it in a runtime variable that can be used across the collection.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/auth/oauth2/client-credentials.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbru.setVar('access_token_set_by_request_script', res.body.access_token);\n```\n\n----------------------------------------\n\nTITLE: Rendering Premium Badge in Heading\nDESCRIPTION: JSX code that displays the title 'Collaboration via GUI' with a Premium badge component to indicate this is a premium feature.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/git-integration/using-gui/intro.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n# **Collaboration via GUI** <PremiumBadge />\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in React/Next.js Documentation\nDESCRIPTION: Imports the Callout component from the nextra/components library, which is used to display highlighted information boxes in the documentation page.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/bruno-basics/create-a-request.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JSX\nDESCRIPTION: This code snippet imports the Callout component from the nextra/components package. It's used to display informational callouts in the documentation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/import-export-data/import-collections.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Initializing package.json for Bruno Collection\nDESCRIPTION: Command to create a new package.json file with default values in your Bruno collection, enabling npm package installation.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/external-libraries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Installing Spectral CLI Package\nDESCRIPTION: Command to install the Spectral CLI npm package, which is used for validating OpenAPI specification files.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/testing/script/external-libraries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @stoplight/spectral-cli\n```\n\n----------------------------------------\n\nTITLE: Cloning Bruno Documentation Repository\nDESCRIPTION: Commands to clone the Bruno documentation repository and navigate to its directory\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/usebruno/bruno-docs.git\ncd bruno-docs\n```\n\n----------------------------------------\n\nTITLE: Importing PremiumBadge Component in React\nDESCRIPTION: This code imports the PremiumBadge component from the components directory, which is used to mark the Request History feature as a premium feature.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/get-started/history.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Importing PremiumBadge Component in React\nDESCRIPTION: Imports the PremiumBadge component from the components directory, which is used to mark the Vault secrets feature as premium functionality.\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/hashicorp-vault/configuring-and-fetching-secrets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```\n\n----------------------------------------\n\nTITLE: Importing Premium Badge Component in JSX\nDESCRIPTION: Imports a PremiumBadge component from the components directory to indicate premium feature status\nSOURCE: https://github.com/usebruno/bruno-docs/blob/main/src/pages/secrets-management/aws-secrets-manager/using-secrets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PremiumBadge from \"@/components/premium-badge\";\n```"
  }
]