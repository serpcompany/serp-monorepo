[
  {
    "owner": "qdrant",
    "repo": "qdrant-client",
    "content": "TITLE: Inserting Vectors into a Collection\nDESCRIPTION: This code snippet inserts vectors into a Qdrant collection named \"my_collection\". It generates random vectors using NumPy, creates PointStruct objects with IDs, vectors, and payload, and then uses the `upsert` method to insert the points.  It's important to split large datasets into chunks to avoid payload size limits.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\n\nfrom qdrant_client.models import PointStruct\n\nvectors = np.random.rand(100, 100)\n# NOTE: consider splitting the data into chunks to avoid hitting the server's payload size limit\n# or use `upload_collection` or `upload_points` methods which handle this for you\n# WARNING: uploading points one-by-one is not recommended due to requests overhead\nclient.upsert(\n    collection_name=\"my_collection\",\n    points=[\n        PointStruct(\n            id=idx,\n            vector=vector.tolist(),\n            payload={\"color\": \"red\", \"rand_number\": idx % 10}\n        )\n        for idx, vector in enumerate(vectors)\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using FastEmbed with Qdrant Client\nDESCRIPTION: This example demonstrates how to use FastEmbed with the Qdrant client to create embeddings and upload them to Qdrant. It initializes the client, prepares documents, metadata, and IDs, and then uses the `add` method to add the data to a collection. Finally, it performs a query and prints the results. Requires qdrant-client and fastembed to be installed.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\n# Initialize the client\nclient = QdrantClient(\":memory:\")  # or QdrantClient(path=\"path/to/db\")\n\n# Prepare your documents, metadata, and IDs\ndocs = [\"Qdrant has Langchain integrations\", \"Qdrant also has Llama Index integrations\"]\nmetadata = [\n    {\"source\": \"Langchain-docs\"},\n    {\"source\": \"Linkedin-docs\"},\n]\nids = [42, 2]\n\n# Use the new add method\nclient.add(\n    collection_name=\"demo_collection\",\n    documents=docs,\n    metadata=metadata,\n    ids=ids\n)\n\nsearch_result = client.query(\n    collection_name=\"demo_collection\",\n    query_text=\"This is a query document\"\n)\nprint(search_result)\n```\n\n----------------------------------------\n\nTITLE: Adding documents using FastEmbed\nDESCRIPTION: Adds documents to a Qdrant collection using the `add` method. The `add` method leverages FastEmbed for text embedding.  It automatically creates the vector embeddings from the provided text documents.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/quickstart.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Prepare your documents, metadata, and IDs\ndocs = [\"Qdrant has Langchain integrations\", \"Qdrant also has Llama Index integrations\"]\n\nclient.add(\n    collection_name=\"demo_collection\",\n    documents=docs,\n)\n```\n\n----------------------------------------\n\nTITLE: Searching with a Filter and Vector\nDESCRIPTION: Searches a Qdrant collection using a query vector and a filter.  This combines vector similarity search with filtering based on metadata.  The example demonstrates filtering by a specific city.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/quickstart.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.http.models import Filter, FieldCondition, MatchValue\n\nsearch_result = client.search(\n    collection_name=\"test_collection\",\n    query_vector=[0.2, 0.1, 0.9, 0.7], \n    query_filter=Filter(\n        must=[\n            FieldCondition(\n                key=\"city\",\n                match=MatchValue(value=\"London\")\n            )\n        ]\n    ),\n    limit=1\n)\nprint(search_result)\n```\n\n----------------------------------------\n\nTITLE: Searching for Similar Vectors\nDESCRIPTION: This code snippet searches for similar vectors in the \"my_collection\" collection. It generates a random query vector using NumPy and then uses the `query_points` method to search for the 5 closest points. The result is stored in the `hits` variable.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nquery_vector = np.random.rand(100)\nhits = client.query_points(\n    collection_name=\"my_collection\",\n    query=query_vector,\n    limit=5  # Return 5 closest points\n)\n```\n\n----------------------------------------\n\nTITLE: Querying with text using FastEmbed\nDESCRIPTION: Queries a Qdrant collection using the `query` method with text input.  The `query` method leverages FastEmbed for text embedding, converting the query text into a vector for searching.  It returns the nearest neighbors based on the embedded query.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/quickstart.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsearch_result = client.query(\n    collection_name=\"demo_collection\",\n    query_text=\"This is a query document\",\n    limit=1\n)\nprint(search_result)\n```\n\n----------------------------------------\n\nTITLE: Inserting Vectors into Qdrant\nDESCRIPTION: This code shows how to insert vectors into a Qdrant collection using the `upsert` method. It creates a list of PointStruct objects, each containing an ID, a vector, and optional payload data. Requires the numpy library.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/index.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom qdrant_client.models import PointStruct\n\nvectors = np.random.rand(100, 100)\nclient.upsert(\n   collection_name=\"my_collection\",\n   points=[\n      PointStruct(\n            id=idx,\n            vector=vector.tolist(),\n            payload={\"color\": \"red\", \"rand_number\": idx % 10}\n      )\n      for idx, vector in enumerate(vectors)\n   ]\n)\n```\n\n----------------------------------------\n\nTITLE: Searching Similar Vectors in Qdrant\nDESCRIPTION: This code snippet demonstrates how to search for similar vectors in a Qdrant collection using a query vector and a limit on the number of results. It uses the `search` method to find the closest points to the query vector.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/index.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nquery_vector = np.random.rand(100)\nhits = client.search(\n   collection_name=\"my_collection\",\n   query_vector=query_vector,\n   limit=5  # Return 5 closest points\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection\nDESCRIPTION: This code creates a new collection named \"my_collection\" in Qdrant with vectors of size 100 and cosine distance. Requires qdrant_client and models to be imported. The VectorParams specify the vector size and distance metric.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client.models import Distance, VectorParams\n\nclient.create_collection(\n    collection_name=\"my_collection\",\n    vectors_config=VectorParams(size=100, distance=Distance.COSINE),\n)\n```\n\n----------------------------------------\n\nTITLE: Upserting Points into a Collection\nDESCRIPTION: Upserts points into a Qdrant collection.  This inserts new points or updates existing ones based on their IDs.  The example demonstrates creating `PointStruct` instances with vector data and associated payloads.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/quickstart.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.http.models import PointStruct\n\noperation_info = client.upsert(\n    collection_name=\"test_collection\",\n    wait=True,\n    points=[\n        PointStruct(id=1, vector=[0.05, 0.61, 0.76, 0.74], payload={\"city\": \"Berlin\"}),\n        PointStruct(id=2, vector=[0.19, 0.81, 0.75, 0.11], payload={\"city\": \"London\"}),\n        PointStruct(id=3, vector=[0.36, 0.55, 0.47, 0.94], payload={\"city\": \"Moscow\"}),\n        PointStruct(id=4, vector=[0.18, 0.01, 0.85, 0.80], payload={\"city\": \"New York\"}),\n        PointStruct(id=5, vector=[0.24, 0.18, 0.22, 0.44], payload={\"city\": \"Beijing\"}),\n        PointStruct(id=6, vector=[0.35, 0.08, 0.11, 0.44], payload={\"city\": \"Mumbai\"}),\n    ]\n)\nprint(operation_info)\n```\n\n----------------------------------------\n\nTITLE: Searching for Similar Vectors with Filtering\nDESCRIPTION: This code snippet searches for similar vectors in the \"my_collection\" collection with a filtering condition. It generates a random query vector using NumPy and then uses the `query_points` method to search for the 5 closest points that satisfy the filter. The filter requires the `rand_number` field to be greater than or equal to 3. Requires qdrant_client.models to be imported.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client.models import Filter, FieldCondition, Range\n\nhits = client.query_points(\n    collection_name=\"my_collection\",\n    query=query_vector,\n    query_filter=Filter(\n        must=[  # These conditions are required for search results\n            FieldCondition(\n                key='rand_number',  # Condition based on values of `rand_number` field.\n                range=Range(\n                    gte=3  # Select only those results where `rand_number` >= 3\n                )\n            )\n        ]\n    ),\n    limit=5  # Return 5 closest points\n)\n```\n\n----------------------------------------\n\nTITLE: Searching with Filtering Conditions\nDESCRIPTION: This code shows how to search for similar vectors with filtering conditions. It creates a Filter object with a FieldCondition to only return vectors where the `rand_number` field is greater than or equal to 3.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/index.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import Filter, FieldCondition, Range\n\nhits = client.search(\n   collection_name=\"my_collection\",\n   query_vector=query_vector,\n   query_filter=Filter(\n      must=[  # These conditions are required for search results\n            FieldCondition(\n               key='rand_number',  # Condition based on values of `rand_number` field.\n               range=Range(\n                  gte=3  # Select only those results where `rand_number` >= 3\n               )\n            )\n      ]\n   ),\n   limit=5  # Return 5 closest points\n)\n```\n\n----------------------------------------\n\nTITLE: Searching with a Vector\nDESCRIPTION: Searches a Qdrant collection using a query vector.  This finds the nearest neighbors to the query vector within the collection.  The example demonstrates a simple vector search with a specified limit.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/quickstart.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsearch_result = client.search(\n    collection_name=\"test_collection\",\n    query_vector=[0.18, 0.81, 0.75, 0.12], \n    limit=1\n)\nprint(search_result)\n```\n\n----------------------------------------\n\nTITLE: Adding documents with metadata and IDs using FastEmbed\nDESCRIPTION: Adds documents, metadata, and IDs to a Qdrant collection using the `add` method with metadata. It allows associating metadata with each document, providing context for querying and filtering.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/quickstart.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Prepare your documents, metadata, and IDs\ndocs = [\"Qdrant has Langchain integrations\", \"Qdrant also has Llama Index integrations\"]\nmetadata = [\n    {\"source\": \"Langchain-docs\"},\n    {\"source\": \"Linkedin-docs\"},\n]\nids = [42, 2]\n\n# Use the new add method\nclient.add(\n    collection_name=\"demo_collection\",\n    documents=docs,\n    metadata=metadata,\n    ids=ids\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Local Mode (Memory)\nDESCRIPTION: This code snippet initializes a QdrantClient in local mode, using an in-memory database.  This is useful for development, prototyping, and testing without needing a running Qdrant server.  No persistent storage is used.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(\":memory:\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection\nDESCRIPTION: Creates a Qdrant collection with a specified vector size and distance metric.  This defines the structure for storing and searching vectors within the collection.  The code checks if the collection exists before attempting to create it.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/quickstart.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.http.models import Distance, VectorParams\n\nif not client.collection_exists(\"test_collection\"):\n\tclient.create_collection(\n\t\tcollection_name=\"test_collection\",\n\t\tvectors_config=VectorParams(size=4, distance=Distance.DOT),\n\t)\n```\n\n----------------------------------------\n\nTITLE: Creating a Qdrant Collection\nDESCRIPTION: This example demonstrates how to create a new collection in Qdrant with a specified vector configuration. It checks if the collection already exists before creating it, and defines the vector size and distance metric.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/index.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client.models import VectorParams, Distance\n\nif not client.collection_exists(\"my_collection\"):\n   client.create_collection(\n      collection_name=\"my_collection\",\n      vectors_config=VectorParams(size=100, distance=Distance.COSINE),\n   )\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant Server with Host and Port\nDESCRIPTION: This code snippet shows how to connect to a Qdrant server by specifying the host and port.  Replace \"localhost\" and 6333 with the actual host and port of your Qdrant server.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(host=\"localhost\", port=6333)\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client in Local Mode (Disk)\nDESCRIPTION: This code snippet initializes a QdrantClient in local mode, persisting data to disk.  This is useful for development, prototyping, and testing, allowing data to be preserved across sessions.  Specify the path where the database should be stored.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(path=\"path/to/db\")  # Persists changes to disk\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant Server with URL\nDESCRIPTION: This code snippet demonstrates how to connect to a Qdrant server using a URL.  Replace \"http://localhost:6333\" with the actual URL of your Qdrant server.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(url=\"http://localhost:6333\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client\nDESCRIPTION: Initializes the Qdrant client.  This example showcases creating a client instance that operates in in-memory mode. It also comments out an example of how to connect to a persistent database on disk.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/quickstart.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\n# client = QdrantClient(path=\"path/to/db\")  # Persists changes to disk\n# or\nclient = QdrantClient(\":memory:\")\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client with FastEmbed\nDESCRIPTION: Installs the Qdrant client with the FastEmbed dependency. FastEmbed provides text embedding functionality. This allows for simpler text vectorization.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/quickstart.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install 'qdrant-client[fastembed]' --quiet\n```\n\n----------------------------------------\n\nTITLE: Setting Embedding Model with CUDA Provider\nDESCRIPTION: This example shows how to set the embedding model for the Qdrant client to use CUDAExecutionProvider for GPU acceleration and CPUExecutionProvider as fallback.  Requires qdrant-client and fastembed-gpu to be installed.  The `DEFAULT_EMBEDDING_MODEL` constant represents the default embedding model.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\n# Initialize the client\nclient = QdrantClient(\":memory:\")  # or QdrantClient(path=\"path/to/db\")\nclient.set_model(client.DEFAULT_EMBEDDING_MODEL, providers=[\"CUDAExecutionProvider\", \"CPUExecutionProvider\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing Async Qdrant Client\nDESCRIPTION: This code snippet shows how to instantiate an AsyncQdrantClient to connect to a Qdrant instance asynchronously. It requires the `asyncio` package to run an async event loop.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/index.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import AsyncQdrantClient, models\nimport numpy as np\nimport asyncio\n\nasync def main():\n   # Your async code using QdrantClient might be put here\n   client = AsyncQdrantClient(url=\"http://localhost:6333\")\n\n   if not await client.collection_exists(\"my_collection\"):\n      await client.create_collection(\n         collection_name=\"my_collection\",\n         vectors_config=models.VectorParams(size=10, distance=models.Distance.COSINE),\n      )\n\n   await client.upsert(\n      collection_name=\"my_collection\",\n      points=[\n            models.PointStruct(\n               id=i,\n               vector=np.random.rand(10).tolist(),\n            )\n            for i in range(100)\n      ],\n   )\n\n   res = await client.search(\n      collection_name=\"my_collection\",\n      query_vector=np.random.rand(10).tolist(),  # type: ignore\n      limit=10,\n   )\n\n   print(res)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using Async Qdrant Client\nDESCRIPTION: This code snippet demonstrates how to use the AsyncQdrantClient for asynchronous operations with Qdrant. It creates a collection, inserts points, and queries points using asynchronous methods. Requires asyncio and numpy to be installed.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\n\nimport numpy as np\n\nfrom qdrant_client import AsyncQdrantClient, models\n\n\nasync def main():\n    # Your async code using QdrantClient might be put here\n    client = AsyncQdrantClient(url=\"http://localhost:6333\")\n\n    await client.create_collection(\n        collection_name=\"my_collection\",\n        vectors_config=models.VectorParams(size=10, distance=models.Distance.COSINE),\n    )\n\n    await client.upsert(\n        collection_name=\"my_collection\",\n        points=[\n            models.PointStruct(\n                id=i,\n                vector=np.random.rand(10).tolist(),\n            )\n            for i in range(100)\n        ],\n    )\n\n    res = await client.query_points(\n        collection_name=\"my_collection\",\n        query=np.random.rand(10).tolist(),  # type: ignore\n        limit=10,\n    )\n\n    print(res)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Connecting to Qdrant Cloud\nDESCRIPTION: This code snippet demonstrates how to connect to a Qdrant Cloud cluster using the cluster URL and API key. Replace the placeholder URL and API key with your actual cluster URL and API key obtained from Qdrant Cloud.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nqdrant_client = QdrantClient(\n    url=\"https://xxxxxx-xxxxx-xxxxx-xxxx-xxxxxxxxx.us-east.aws.cloud.qdrant.io:6333\",\n    api_key=\"<your-api-key>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client with FastEmbed GPU\nDESCRIPTION: This command installs the qdrant-client package with the fastembed-gpu extra dependency using pip.  Enables GPU support for faster embeddings with FastEmbed.  Ensure you have Python, pip, and the necessary GPU drivers installed before running this command.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\npip install 'qdrant-client[fastembed-gpu]'\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client with FastEmbed\nDESCRIPTION: This command installs the qdrant-client package with the fastembed extra dependency using pip. FastEmbed provides fast vector embeddings on CPU. Ensure you have Python and pip installed before running this command.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\npip install qdrant-client[fastembed]\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client with gRPC\nDESCRIPTION: This code initializes a QdrantClient with gRPC enabled for potentially faster collection uploads. It specifies the host, gRPC port, and sets `prefer_grpc` to True.  Replace \"localhost\" and 6334 with the appropriate host and port.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(host=\"localhost\", grpc_port=6334, prefer_grpc=True)\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Server with Docker\nDESCRIPTION: This command runs a Qdrant server using Docker. It maps port 6333 on the host machine to port 6333 on the container. This allows you to access the Qdrant server from your host machine. Requires Docker to be installed.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -p 6333:6333 qdrant/qdrant:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client with pip\nDESCRIPTION: This command installs the qdrant-client package using pip, allowing you to use the Qdrant Python client library in your projects. It fetches the package from PyPI and installs it along with its dependencies. Ensure you have Python and pip installed before running this command.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Installing Qdrant Client\nDESCRIPTION: This command installs the `qdrant-client` package using pip. This is the first step to use the Qdrant client library.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/index.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install qdrant-client\n```\n\n----------------------------------------\n\nTITLE: Initializing Qdrant Client\nDESCRIPTION: This code snippet shows how to instantiate a QdrantClient to connect to a Qdrant instance. It sets the host and port for the connection.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/docs/source/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qdrant_client import QdrantClient\n\nclient = QdrantClient(host=\"localhost\", port=6333)\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks\nDESCRIPTION: This command installs pre-commit hooks for code formatting. Pre-commit is a tool for managing and running pre-commit hooks. These hooks automatically format code before commits. Requires pre-commit to be installed.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\npip3 install pre-commit\n```\n\n----------------------------------------\n\nTITLE: Setting up Pre-commit Hooks\nDESCRIPTION: This command sets up pre-commit hooks in the current Git repository. After running this command, pre-commit hooks will be automatically run before each commit. Requires pre-commit to be installed and set up.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/README.md#_snippet_18\n\nLANGUAGE: Bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment with pyenv\nDESCRIPTION: This snippet provides commands to set up a Python virtual environment using pyenv. It includes installing pyenv, its dependencies, a specific Python version (3.10.10), setting the local Python version, and installing essential packages like grpcio, grpcio-tools, virtualenv, and poetry.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/tools/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyenv install 3.10.10\npyenv local 3.10.10\npip install grpcio==1.59.3\npip install grpcio-tools==1.59.3\npip install virtualenv\nvirtualenv venv\nsource venv/bin/activate\npip install poetry\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch for breaking changes\nDESCRIPTION: This snippet outlines the steps to create a new branch for introducing breaking changes to the Qdrant client. It involves checking out the branch of the upcoming release, pulling the latest changes, and then creating a new branch for development.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/tools/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout v0.7.0 && git pull && git checkout -b v0.7.0-my-changees\n```\n\n----------------------------------------\n\nTITLE: Generating REST Client Code\nDESCRIPTION: This snippet executes a bash script to generate the REST client code for Qdrant. The script automatically fetches the OpenAPI specification from a Qdrant instance running in a development environment (`qdrant:dev`).\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/tools/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash -x tools/generate_rest_client.sh\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Client Code\nDESCRIPTION: This snippet executes a bash script to generate the gRPC client code for Qdrant.  The script automatically fetches the protobuf definition from a Qdrant instance running in a development environment (`qdrant:dev`).\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/tools/DEVELOPMENT.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash -x tools/generate_grpc_client.sh\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: This snippet indicates that integration tests are run using a specific bash script. This command is essential for verifying the correctness and stability of changes made to the Qdrant client.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/tools/DEVELOPMENT.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntests/integration-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Populating Inspection Cache\nDESCRIPTION: This snippet executes a bash script to populate the inspection cache.  The exact purpose and content of this cache are not specified in the text.\nSOURCE: https://github.com/qdrant/qdrant-client/blob/master/tools/DEVELOPMENT.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbash -x tools/populate_inspection_cache.sh\n```"
  }
]