[
  {
    "owner": "shopify",
    "repo": "flash-list",
    "content": "TITLE: Defining Key Extractor for FlashList Items in TypeScript\nDESCRIPTION: The keyExtractor prop is a function used to extract unique keys for list items. It's crucial for optimizing performance and enabling layout animations.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nkeyExtractor?: (item: object, index: number) => string;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic FlashList Component in React Native\nDESCRIPTION: A simple example of how to implement FlashList in a React Native application. The code demonstrates importing FlashList, creating sample data, and rendering a basic list with the required estimatedItemSize prop.\nSOURCE: https://github.com/shopify/flash-list/blob/main/README.md#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { View, Text } from \"react-native\";\nimport { FlashList } from \"@shopify/flash-list\";\n\nconst DATA = [\n  {\n    title: \"First Item\",\n  },\n  {\n    title: \"Second Item\",\n  },\n];\n\nconst MyList = () => {\n  return (\n    <FlashList\n      data={DATA}\n      renderItem={({ item }) => <Text>{item.title}</Text>}\n      estimatedItemSize={200}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a FlashList with Layout Animation in React Native\nDESCRIPTION: This example demonstrates a complete implementation of a FlashList component with layout animation support. It shows how to manage state, apply animations when removing items, and properly configure the necessary props like keyExtractor and ref.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/layout-animation.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useRef, useState } from \"react\";\nimport { View, Text, Pressable, LayoutAnimation } from \"react-native\";\nimport { FlashList } from \"@shopify/flash-list\";\n\nconst List = () => {\n  const [data, setData] = useState([1, 2, 3, 4, 5]);\n\n  const list = useRef<FlashList<number> | null>(null);\n\n  const removeItem = (item: number) => {\n    setData(\n      data.filter((dataItem) => {\n        return dataItem !== item;\n      })\n    );\n    // This must be called before `LayoutAnimation.configureNext` in order for the animation to run properly.\n    list.current?.prepareForLayoutAnimationRender();\n    // After removing the item, we can start the animation.\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n  };\n\n  const renderItem = ({ item }: { item: number }) => {\n    return (\n      <Pressable\n        onPress={() => {\n          removeItem(item);\n        }}\n      >\n        <View>\n          <Text>Cell Id: {item}</Text>\n        </View>\n      </Pressable>\n    );\n  };\n\n  return (\n    <FlashList\n      // Saving reference to the `FlashList` instance to later trigger `prepareForLayoutAnimationRender` method.\n      ref={list}\n      // This prop is necessary to uniquely identify the elements in the list.\n      keyExtractor={(item: number) => {\n        return item.toString();\n      }}\n      renderItem={renderItem}\n      estimatedItemSize={100}\n      data={data}\n    />\n  );\n};\n\nexport default List;\n```\n\n----------------------------------------\n\nTITLE: Basic FlashList Implementation in React Native\nDESCRIPTION: Shows the basic setup of a FlashList component with minimal configuration. Demonstrates rendering a simple list with title items and estimated item size.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, Text, StatusBar } from \"react-native\";\nimport { FlashList } from \"@shopify/flash-list\";\n\nconst DATA = [\n  {\n    title: \"First Item\",\n  },\n  {\n    title: \"Second Item\",\n  },\n];\n\nconst MyList = () => {\n  return (\n    <FlashList\n      data={DATA}\n      renderItem={({ item }) => <Text>{item.title}</Text>}\n      estimatedItemSize={200}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Complete FlashList Implementation for Sectioned Contact List\nDESCRIPTION: A full example of a FlashList implementation that replaces SectionList functionality, including type-based rendering, sticky headers, and performance optimizations via getItemType.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/section-list.md#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { StyleSheet, Text } from \"react-native\";\nimport { FlashList } from \"@shopify/flash-list\";\n\ninterface Contact {\n  firstName: string;\n  lastName: string;\n}\n\nconst contacts: (string | Contact)[] = [\n  \"A\",\n  { firstName: \"John\", lastName: \"Aaron\" },\n  \"D\",\n  { firstName: \"John\", lastName: \"Doe\" },\n  { firstName: \"Mary\", lastName: \"Dianne\" },\n];\n\nconst stickyHeaderIndices = contacts\n  .map((item, index) => {\n    if (typeof item === \"string\") {\n      return index;\n    } else {\n      return null;\n    }\n  })\n  .filter((item) => item !== null) as number[];\n\nconst ContactsFlashList = () => {\n  return (\n    <FlashList\n      data={contacts}\n      renderItem={({ item }) => {\n        if (typeof item === \"string\") {\n          // Rendering header\n          return <Text style={styles.header}>{item}</Text>;\n        } else {\n          // Render item\n          return <Text>{item.firstName}</Text>;\n        }\n      }}\n      stickyHeaderIndices={stickyHeaderIndices}\n      getItemType={(item) => {\n        // To achieve better performance, specify the type based on the item\n        return typeof item === \"string\" ? \"sectionHeader\" : \"row\";\n      }}\n      estimatedItemSize={100}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 32,\n    backgroundColor: \"#fff\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing FlashList with Yarn in React Native\nDESCRIPTION: Command to install the FlashList package using Yarn package manager for React Native projects. Requires running pod install for iOS after installation.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @shopify/flash-list\n```\n\n----------------------------------------\n\nTITLE: RenderItem Implementation Example\nDESCRIPTION: Example showing how to implement the renderItem prop with a basic text rendering setup.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nrenderItem = ({item}) => (\n  <Text>{item.title}</Text>\n);\n...\n<FlashList data={[{title: 'Title Text', key: 'item1'}]} renderItem={renderItem} />\n```\n\n----------------------------------------\n\nTITLE: Installing FlashList in Expo Environment\nDESCRIPTION: Command to install FlashList and expo-dev-client packages using Expo CLI. Compatible with Expo Go from SDK 46 upwards and development clients.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @shopify/flash-list expo-dev-client\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic MasonryFlashList Component in React Native\nDESCRIPTION: This snippet demonstrates the basic usage of MasonryFlashList to create a masonry layout with two columns. It requires importing MasonryFlashList from @shopify/flash-list and setting up with data, numColumns, renderItem, and estimatedItemSize props.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/masonry-layout.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { View, Text, StatusBar } from \"react-native\";\nimport { MasonryFlashList } from \"@shopify/flash-list\";\nimport { DATA } from \"./data\";\n\nconst MyMasonryList = () => {\n  return (\n    <MasonryFlashList\n      data={DATA}\n      numColumns={2}\n      renderItem={({ item }) => <Text>{item.title}</Text>}\n      estimatedItemSize={200}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Tracking Blank Area in FlashList with useBlankAreaTracker Hook\nDESCRIPTION: This code shows how to track blank area metrics in a FlashList component using the useBlankAreaTracker hook. It captures cumulative and maximum blank areas that users see while scrolling, enabling developers to measure list rendering performance in production.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/metrics.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n  // `any` is the type of data. You can mention the type of data that you're using with your FlashList implementation.\n  const ref = useRef<FlashList<any>>(null);\n\n  // The tracking will happen for the entire lifecycle of the list and the result object will always have the latest values.\n  // You can make a call when to ingest this data. We recommend that you ingest when the list unmounts.\n  const [blankAreaTrackerResult, onBlankArea] = useBlankAreaTracker(ref);\n  useEffect(() => {\n    return () => {\n      // When component is being cleaned up, you can ingest the result into your analytics system.\n      // blankAreaTrackerResult has two fields - `cumulativeBlankArea` and `maxBlankArea`. `cumulativeBlankArea` is the total blank area that the user has seen while scrolling the list.\n      // maxBlankArea is the maximum blank area that the user has seen while scrolling the list.\n      ingestData(blankAreaTrackerResult);\n    };\n  }, []);\n\n  // pass the listener returned by the hook to FlashList\n  return <FlashList {...props} ref={ref} onBlankArea={onBlankArea} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using estimatedItemSize Property in FlashList\nDESCRIPTION: Example showing how to use the estimatedItemSize prop in FlashList component. This numeric value helps FlashList determine how many items to render initially and during scrolling.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/estimated-item-size.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nestimatedItemSize\n```\n\n----------------------------------------\n\nTITLE: Implementing getItemType for Optimized FlashList Rendering in React Native\nDESCRIPTION: This snippet demonstrates how to use the getItemType prop in FlashList to optimize rendering for different item types. It creates separate recycling pools based on item type, improving re-render performance for complex lists.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/performant-components.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MessageList = () => {\n  return (\n    <FlashList\n      renderItem={MessageItem}\n      estimatedItemSize={200}\n      getItemType={(item) => {\n        return item.type;\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining extraData Prop for FlashList in TypeScript\nDESCRIPTION: The extraData prop is used to trigger re-renders of the list when data outside the main data prop changes. It's useful for dependencies not captured in the data prop.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nextraData?: any;\n```\n\n----------------------------------------\n\nTITLE: Implementing State Management in Recycled FlashList Items\nDESCRIPTION: Example component showing how to properly handle state in a FlashList item that gets recycled. Uses useRef and useState hooks to track and reset state when items change. Demonstrates the recommended pattern for managing derived state in recycled components.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/recycling.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyItem = ({ item }) => {\n  const lastItemId = useRef(item.someId);\n  const [liked, setLiked] = useState(item.liked);\n  if (item.someId !== lastItemId.current) {\n    lastItemId.current = item.someId;\n    setLiked(item.liked);\n  }\n\n  return (\n    <Pressable onPress={() => setLiked(true)}>\n      <Text>{liked}</Text>\n    </Pressable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: MasonryFlashList Additional Props Definition\nDESCRIPTION: These snippets define the additional props available for MasonryFlashList compared to FlashList, including optimizeItemArrangement and getColumnFlex, which allow for customizing the layout behavior.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/masonry-layout.md#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\noptimizeItemArrangement?: boolean;\n```\n\nLANGUAGE: tsx\nCODE:\n```\ngetColumnFlex?: (\n  items: T[],\n  columnIndex: number,\n  maxColumns: number,\n  extraData?: any\n) => number;\n```\n\n----------------------------------------\n\nTITLE: Measuring FlashList Load Time with onLoad Event\nDESCRIPTION: This snippet demonstrates how to track the time taken for a FlashList component to load using the built-in onLoad event. It measures the elapsed time from when the list was created until its children become visible to the user.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/metrics.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n    const onLoadListener = useCallback(({ elapsedTimeInMs } ) => {\n        ingestData(\"Sample List load time\", elapsedTimeInMs);\n    }, []);\n    return <FlashList {...props} onLoad={onLoadListener} />;\n```\n\n----------------------------------------\n\nTITLE: Setting End Reached Threshold for FlashList in TypeScript\nDESCRIPTION: The onEndReachedThreshold prop determines how close to the end of the list the scroll position must be to trigger the onEndReached callback.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nonEndReachedThreshold?: number;\n```\n\n----------------------------------------\n\nTITLE: Removing Key Prop from FlashList Item Components in React Native\nDESCRIPTION: This snippet demonstrates how to remove the key prop from both the main item component and nested components when using FlashList. Removing the key prop allows FlashList to properly recycle views and maintain performance benefits.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/performant-components.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyNestedComponent = ({ item }) => {\n  return <Text>I am nested!</Text>;\n};\n\nconst MyItem = ({ item }) => {\n  return (\n    <View>\n      <MyNestedComponent item={item} />\n      <Text>{item.title}</Text>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Orientation for FlashList in TypeScript\nDESCRIPTION: The horizontal prop determines the orientation of the list. When true, items are rendered horizontally instead of vertically.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nhorizontal?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing Reanimated Hooks with FlashList in React Native\nDESCRIPTION: Example showing how to properly use Reanimated's useSharedValue hook within a FlashList component. Demonstrates value reset pattern for recycled views using useEffect and unique item IDs.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/reanimated.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport Animated, { useSharedValue } from \"react-native-reanimated\";\nimport { FlashList } from \"@shopify/flash-list\";\n\nconst MyList = () => {\n  const Item = ({ item }: { item: { id: string } }) => {\n    const myValue = useSharedValue(0);\n    useEffect(() => {\n      // Reset value when id changes (view was recycled for another item)\n      myValue.value = 0;\n    }, [item.id, myValue]);\n    return <Animated.View />;\n  };\n\n  return <FlashList renderItem={Item} estimatedItemSize={100} />;\n};\n```\n\n----------------------------------------\n\nTITLE: MasonryFlashList Interface and Method Definitions\nDESCRIPTION: This snippet shows the TypeScript interface for MasonryListRenderItemInfo, which extends ListRenderItemInfo with additional properties specific to masonry layouts. It also includes method signatures for scrollToEnd and scrollToOffset.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/masonry-layout.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface MasonryListRenderItemInfo<TItem>\n  extends ListRenderItemInfo<TItem> {\n  columnSpan: number;\n  columnIndex: number;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nscrollToEnd?: (params?: { animated?: boolean | null | undefined });\n```\n\nLANGUAGE: tsx\nCODE:\n```\nscrollToOffset(params: {\n  animated?: boolean | null | undefined;\n  offset: number;\n});\n```\n\n----------------------------------------\n\nTITLE: Optimizing Leaf Components in FlashList Items with React.memo\nDESCRIPTION: This example shows how to use React.memo to optimize leaf components within FlashList item components. By memoizing components that don't depend on the item prop, unnecessary re-renders are avoided during item recycling.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/performant-components.md#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyHeavyComponent = () => {\n  return ...;\n};\n\nconst MyItem = ({ item }: { item: any }) => {\n  const MemoizedMyHeavyComponent = memo(MyHeavyComponent);\n  return (\n    <>\n      <MemoizedMyHeavyComponent />\n      <Text>{item.title}</Text>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: SectionList Implementation for Contact List in React Native\nDESCRIPTION: A basic implementation of SectionList for displaying contacts grouped by alphabetical sections. The component renders a list of contacts with section headers and custom styling.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/section-list.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { SectionList, StyleSheet, Text } from \"react-native\";\n\ninterface Contact {\n  firstName: string;\n  lastName: string;\n}\n\ninterface Section {\n  title: string;\n  data: Contact[];\n}\n\nconst contacts: Section[] = [\n  { title: \"A\", data: [{ firstName: \"John\", lastName: \"Aaron\" }] },\n  {\n    title: \"D\",\n    data: [\n      { firstName: \"John\", lastName: \"Doe\" },\n      { firstName: \"Mary\", lastName: \"Dianne\" },\n    ],\n  },\n];\n\nconst ContactsSectionList = () => {\n  return (\n    <SectionList\n      sections={contacts}\n      renderItem={({ item }) => {\n        return <Text>{item.firstName}</Text>;\n      }}\n      renderSectionHeader={({ section: { title } }) => (\n        <Text style={styles.header}>{title}</Text>\n      )}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 32,\n    backgroundColor: \"#fff\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic FlashList Implementation with Type-based Rendering\nDESCRIPTION: Shows how to handle the flattened data structure in FlashList by using type checking to differentiate between section headers and regular items in the renderItem function.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/section-list.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst ContactsFlashList = () => {\n  return (\n    <FlashList\n      data={contacts}\n      renderItem={({ item }) => {\n        if (typeof item === \"string\") {\n          // Rendering header\n          return <Text style={styles.header}>{item}</Text>;\n        } else {\n          // Render item\n          return <Text>{item.firstName}</Text>;\n        }\n      }}\n      getItemType={(item) => {\n        // To achieve better performance, specify the type based on the item\n        return typeof item === \"string\" ? \"sectionHeader\" : \"row\";\n      }}\n      estimatedItemSize={100}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests\nDESCRIPTION: Commands to run end-to-end tests using Detox for iOS and Android platforms.\nSOURCE: https://github.com/shopify/flash-list/blob/main/CONTRIBUTING.md#2025-04-13_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nrun-e2e-ios\n# or on android with\nrun-e2e-android\n```\n\n----------------------------------------\n\nTITLE: Animated CellContainer Implementation\nDESCRIPTION: Example of using CellRendererComponent with react-native-reanimated for animated cells.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst AnimatedCellContainer = Animated.createAnimatedComponent(CellContainer);\nreturn (\n  <FlashList\n    CellRendererComponent={(props) => {\n      return (\n          <AnimatedCellContainer {...props} style={...}>\n      );\n    }}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute the project's unit test suite.\nSOURCE: https://github.com/shopify/flash-list/blob/main/CONTRIBUTING.md#2025-04-13_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Preparing FlashList for Layout Animation in React Native\nDESCRIPTION: This code snippet shows how to properly prepare a FlashList instance for layout animation by calling prepareForLayoutAnimationRender before configuring the animation.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/layout-animation.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// This must be called before `LayoutAnimation.configureNext` in order for the animation to run properly.\nlistRef.current?.prepareForLayoutAnimationRender();\n// After removing the item, we can start the animation.\nLayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Yarn\nDESCRIPTION: Command to install required dependencies for flash-list and fixture app using yarn package manager.\nSOURCE: https://github.com/shopify/flash-list/blob/main/CONTRIBUTING.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn up\n```\n\n----------------------------------------\n\nTITLE: Converting SectionList Data Structure for FlashList\nDESCRIPTION: Demonstrates how to restructure sectioned data to a flat array format compatible with FlashList. Section headers are interspersed with data items in a single array.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/section-list.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst contacts: (string | Contact)[] = [\n  \"A\",\n  { firstName: \"John\", lastName: \"Aaron\" },\n  \"D\",\n  { firstName: \"John\", lastName: \"Doe\" },\n  { firstName: \"Mary\", lastName: \"Dianne\" },\n];\n```\n\n----------------------------------------\n\nTITLE: Including RNFlashList Project in Android Settings\nDESCRIPTION: This code adds the RNFlashList project to the Android project's settings.gradle file. It specifies the project name and its directory path.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/manual-linking.md#2025-04-13_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ninclude ':@shopify-flash-list'\nproject(':@shopify-flash-list').projectDir = new File(rootProject.projectDir, '../node_modules/@shopify/flash-list/android')\n```\n\n----------------------------------------\n\nTITLE: Testing FlashList Component with React Testing Library in TypeScript\nDESCRIPTION: This example shows how to write a test for a FlashList component using @testing-library/react-native. It demonstrates rendering the component and asserting the presence of expected text content.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/testing.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport { render } from \"@testing-library/react-native\";\n\ndescribe(\"MyFlashListComponent\", () => {\n  it(\"renders items\", () => {\n    const { getByText } = render(<MyFlashListComponent />);\n    const element = getByText(\"Title of one of the items\");\n    // Do something with element ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running yarn version command for FlashList\nDESCRIPTION: Execute the yarn version command to bump the package version and follow the prompts to choose a new version number.\nSOURCE: https://github.com/shopify/flash-list/blob/main/RELEASE.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn version\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Widths with getColumnFlex in MasonryFlashList\nDESCRIPTION: This example shows how to use the getColumnFlex prop to modify column widths in a MasonryFlashList. The function returns different flex values based on column index to create a layout with uneven column widths.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/masonry-layout.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// if `numColumns` is `3`, you can return `2` for `index 1` and `1` for the rest to achieve a `1:2:1` split by width.\ngetColumnFlex={(items, index, maxColumns, extraData) => {\n    return index === 1 ? 2 : 1;\n}}\n```\n\n----------------------------------------\n\nTITLE: Pushing changes and tags to GitHub for FlashList\nDESCRIPTION: Push the new version changes and tags to the main branch on GitHub using git push with the --follow-tags option.\nSOURCE: https://github.com/shopify/flash-list/blob/main/RELEASE.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin main --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Specifying Item Types for FlashList in TypeScript\nDESCRIPTION: The getItemType prop is a function used to specify different item types, improving recycling efficiency for heterogeneous lists.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ngetItemType?: (\n    item: T,\n    index: number,\n    extraData?: any\n) => string | number | undefined;\n```\n\n----------------------------------------\n\nTITLE: Overriding Item Layout in FlashList with TypeScript\nDESCRIPTION: The overrideItemLayout prop is a function used to provide explicit size estimates or change column span of list items, improving scrolling precision and layout flexibility.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\noverrideItemLayout?: (\n    layout: { span?: number; size?: number },\n    item: T,\n    index: number,\n    maxColumns: number,\n    extraData?: any\n) => void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull-to-Refresh in FlashList with TypeScript\nDESCRIPTION: The onRefresh prop is a callback function used to implement pull-to-refresh functionality in the list.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nonRefresh?: () => void;\n```\n\n----------------------------------------\n\nTITLE: Using scrollToItem Method in FlashList with TSX\nDESCRIPTION: Method to scroll to a specific item in FlashList. Accepts parameters for the item to scroll to, animation control, and view positioning.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nscrollToItem(params: {\n  animated?: boolean | null | undefined;\n  item: any;\n  viewPosition?: number | undefined;\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Blank Area Events in FlashList with TypeScript\nDESCRIPTION: The onBlankArea prop is a callback function that reports visible blank space during scrolling or initial loading of the list.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nonBlankArea?: (blankAreaEvent: {\n    offsetStart: number;\n    offsetEnd: number;\n    blankArea: number;\n}) => void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewability for FlashList in TypeScript\nDESCRIPTION: The viewabilityConfig prop is used to configure how item viewability is determined, affecting when viewability callbacks are triggered.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ViewabilityConfig: {\n  minimumViewTime: number;\n  viewAreaCoveragePercentThreshold: number;\n  itemVisiblePercentThreshold: number;\n  waitForInteraction: boolean;\n}\n\nviewabilityConfig?: ViewabilityConfig;\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Viewability Configurations for FlashList in TypeScript\nDESCRIPTION: The viewabilityConfigCallbackPairs prop allows specifying multiple viewability configurations and corresponding callbacks for more granular control over viewability tracking.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ntype ViewabilityConfigCallbackPairs = ViewabilityConfigCallbackPair[];\n\ninterface ViewabilityConfigCallbackPair {\n  viewabilityConfig: ViewabilityConfig;\n  onViewableItemsChanged:\n    | ((info: { viewableItems: ViewToken[]; changed: ViewToken[] }) => void)\n    | null;\n}\n\nviewabilityConfigCallbackPairs: ViewabilityConfigCallbackPairs | undefined;\n```\n\n----------------------------------------\n\nTITLE: Computing Sticky Header Indices for FlashList\nDESCRIPTION: Logic to calculate the sticky header indices array by identifying the positions of section headers in the flattened data array, required for implementing sticky headers in FlashList.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/section-list.md#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst stickyHeaderIndices = contacts\n  .map((item, index) => {\n    if (typeof item === \"string\") {\n      return index;\n    } else {\n      return null;\n    }\n  })\n  .filter((item) => item !== null) as number[];\n```\n\n----------------------------------------\n\nTITLE: Using scrollToIndex Method in FlashList with TSX\nDESCRIPTION: Method to scroll to a specific index in FlashList. Accepts parameters for animation control, index position, and view positioning.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nscrollToIndex(params: {\n  animated?: boolean | null | undefined;\n  index: number;\n  viewOffset?: number | undefined;\n  viewPosition?: number | undefined;\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Viewable Items in FlashList with TypeScript\nDESCRIPTION: The onViewableItemsChanged prop is a callback function that reports changes in the viewability of list items based on the viewabilityConfig.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ViewToken {\n  index: number;\n  isViewable: boolean;\n  item: string;\n  key: string;\n  timestamp: number;\n}\n\nonViewableItemsChanged?: ((info: {\n    viewableItems: ViewToken[];\n    changed: ViewToken[];\n}) => void) | null | undefined\n```\n\n----------------------------------------\n\nTITLE: Using Index as Key in FlashList Item Components for React Native\nDESCRIPTION: This example shows how to use the index as a key when mapping over items in a FlashList component. While generally not recommended, this approach is acceptable for data derived from the list's data, ensuring correct item updates.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/performant-components.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyItem = ({ item }) => {\n  return (\n    <>\n      {item.users.map((user, index) => {\n        /* eslint-disable-next-line react/no-array-index-key */\n        <Text key={index}>{user.name}</Text>;\n      })}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing End Reached Callback for FlashList in TypeScript\nDESCRIPTION: The onEndReached prop is a callback function called when the scroll position approaches the end of the list content.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nonEndReached?: () => void;\n```\n\n----------------------------------------\n\nTITLE: Inverting Scroll Direction for FlashList in TypeScript\nDESCRIPTION: The inverted prop reverses the scroll direction of the list using scale transforms.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ninverted?: boolean;\n```\n\n----------------------------------------\n\nTITLE: FlashList WindowSize Comparison\nDESCRIPTION: Code reference showing the difference between FlatList's default windowSize of 21 and FlashList's more optimized rendering approach.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/estimated-item-size.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindowSize\n```\n\n----------------------------------------\n\nTITLE: Specifying Initial Scroll Index for FlashList in TypeScript\nDESCRIPTION: The initialScrollIndex prop allows starting the list at a specific item index instead of the first item.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninitialScrollIndex?: number;\n```\n\n----------------------------------------\n\nTITLE: Handling Load Event for FlashList in TypeScript\nDESCRIPTION: The onLoad prop is a callback function called when the list has drawn items on the screen, reporting the elapsed time for rendering.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nonLoad: (info: { elapsedTimeInMs: number }) => void;\n```\n\n----------------------------------------\n\nTITLE: Using recordInteraction Method in FlashList with TSX\nDESCRIPTION: Method to tell the list an interaction has occurred, which triggers viewability calculations. Useful when waitForInteractions is true and the user hasn't scrolled yet.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nrecordInteraction();\n```\n\n----------------------------------------\n\nTITLE: Using scrollToEnd Method in FlashList with TSX\nDESCRIPTION: Method to scroll to the end of the content in FlashList. Accepts an optional animated parameter to control animation.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nscrollToEnd?: (params?: { animated?: boolean | null | undefined });\n```\n\n----------------------------------------\n\nTITLE: Using scrollToOffset Method in FlashList with TSX\nDESCRIPTION: Method to scroll to a specific pixel offset in FlashList. The offset parameter is the x-value in horizontal mode or y-value otherwise. Animation can be toggled with the animated parameter.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nscrollToOffset(params: {\n  animated?: boolean | null | undefined;\n  offset: number;\n});\n```\n\n----------------------------------------\n\nTITLE: Preparing for Layout Animation in FlashList with TypeScript\nDESCRIPTION: The prepareForLayoutAnimationRender method is used to disable recycling temporarily for smooth layout animations, particularly useful when animating item deletions.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nprepareForLayoutAnimationRender(): void;\n```\n\n----------------------------------------\n\nTITLE: Using recomputeViewableItems Method in FlashList with TSX\nDESCRIPTION: Method to retrigger viewability calculations in FlashList. Useful for imperatively triggering viewability calculations.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nrecomputeViewableItems();\n```\n\n----------------------------------------\n\nTITLE: Customizing Scroll Component for FlashList in TypeScript\nDESCRIPTION: The renderScrollComponent prop allows specifying a custom component to be used as the main scrollview for the list.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/fundamentals/usage.md#2025-04-13_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ScrollViewProps } from \"react-native\";\n\nrenderScrollComponent?:\n    | React.ComponentType<ScrollViewProps>\n    | React.FC<ScrollViewProps>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Setup for FlashList Testing in JavaScript\nDESCRIPTION: This snippet shows how to configure the jest-setup.js file to include the necessary setup for FlashList testing. It requires the @shopify/flash-list/jestSetup module to mock the onLayout event triggering.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/testing.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@shopify/flash-list/jestSetup\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Config for React Native Testing\nDESCRIPTION: This snippet demonstrates how to configure the jest.config.js file for React Native testing. It sets the preset to 'react-native' and specifies the setupFiles to include the jest-setup.js file.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/testing.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\npreset: 'react-native',\nsetupFiles: ['./jest-setup.js'],\n...\n```\n\n----------------------------------------\n\nTITLE: Adding RNFlashList Pod to iOS Podfile\nDESCRIPTION: This snippet shows how to add the RNFlashList pod to the iOS project's Podfile. It specifies the path to the package in the node_modules directory.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/manual-linking.md#2025-04-13_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'RNFlashList', :path => '../node_modules/@shopify/flash-list'\n```\n\n----------------------------------------\n\nTITLE: Importing and Adding RNFlashList Package in Android MainApplication\nDESCRIPTION: This Kotlin code snippet demonstrates how to import the ReactNativeFlashListPackage and add it to the list of packages in the Android app's MainApplication file.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/manual-linking.md#2025-04-13_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.myapp;\n\n+ import com.shopify.reactnative.flash_list.ReactNativeFlashListPackage\n\n...\n\noverride fun getPackages(): List<ReactPackage> {\n    val packages = PackageList(this).packages\n    packages.add(ReactNativeFlashListPackage());\n    return packages\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RNFlashList Dependency to Android App\nDESCRIPTION: This diff snippet shows how to add the RNFlashList project as a dependency in the Android app's build.gradle file.\nSOURCE: https://github.com/shopify/flash-list/blob/main/documentation/docs/guides/manual-linking.md#2025-04-13_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n...\ndependencies {\n    ...\n+   implementation project(':@shopify-flash-list')\n}\n```\n\n----------------------------------------\n\nTITLE: Building Flash-List in Watch Mode\nDESCRIPTION: Command to build flash-list with watch mode enabled for automatic rebuilding on code changes.\nSOURCE: https://github.com/shopify/flash-list/blob/main/CONTRIBUTING.md#2025-04-13_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn build --watch\n```\n\n----------------------------------------\n\nTITLE: Starting the Packager\nDESCRIPTION: Command to start the React Native packager for development.\nSOURCE: https://github.com/shopify/flash-list/blob/main/CONTRIBUTING.md#2025-04-13_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Running Android Fixture App\nDESCRIPTION: Command to run the fixture app on Android platform.\nSOURCE: https://github.com/shopify/flash-list/blob/main/CONTRIBUTING.md#2025-04-13_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn run-android\n```\n\n----------------------------------------\n\nTITLE: Running iOS Fixture App\nDESCRIPTION: Command to run the fixture app on iOS platform.\nSOURCE: https://github.com/shopify/flash-list/blob/main/CONTRIBUTING.md#2025-04-13_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn run-ios\n```\n\n----------------------------------------\n\nTITLE: Running Web Sample\nDESCRIPTION: Command to run the web sample version of the app.\nSOURCE: https://github.com/shopify/flash-list/blob/main/CONTRIBUTING.md#2025-04-13_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn run-web\n```\n\n----------------------------------------\n\nTITLE: Fixing Lint Issues\nDESCRIPTION: Command to automatically fix formatting errors using the project's linting rules.\nSOURCE: https://github.com/shopify/flash-list/blob/main/CONTRIBUTING.md#2025-04-13_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint --fix\n```"
  }
]