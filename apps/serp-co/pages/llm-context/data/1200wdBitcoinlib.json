[
  {
    "owner": "1200wd",
    "repo": "bitcoinlib",
    "content": "TITLE: Creating a Basic Bitcoin Wallet and Generating an Address in Python\nDESCRIPTION: Demonstrates how to create a wallet and generate a new Bitcoin address using the BitcoinLib wallet module. This creates a hierarchical deterministic wallet and returns a new key with its corresponding address.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from bitcoinlib.wallets import Wallet\n>>> w = Wallet.create('Wallet1')\n>>> key1 = w.get_key()\n>>> key1.address\n'1Fo7STj6LdRhUuD1AiEsHpH65pXzraGJ9j'\n```\n\n----------------------------------------\n\nTITLE: Sending Bitcoin from a Wallet\nDESCRIPTION: Demonstrates how to send bitcoins to a specific address. The wallet automatically selects appropriate UTXOs, calculates fees, and creates a valid transaction which is returned as an object with the transaction ID.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> t = w.send_to('1PWXhWvUH3bcDWn6Fdq3xhMRPfxRXTjAi1', '0.001 BTC')\n'b7feea5e7c79d4f6f343b5ca28fa2a1fcacfe9a2b7f44f3d2fd8d6c2d82c4078'\n>>> t.info()  # Shows transaction information and send results\n```\n\n----------------------------------------\n\nTITLE: Creating a Bitcoin Wallet\nDESCRIPTION: Creates a new Bitcoin wallet which can manage keys, track UTXOs, and create transactions. This is the high-level interface that combines the functionality of many BitcoinLib components.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.wallets import Wallet\nw = Wallet.create('jupyter-test-wallet')\nw.info()\n```\n\n----------------------------------------\n\nTITLE: Sending Bitcoin from a Wallet\nDESCRIPTION: Creates and broadcasts a transaction to send Bitcoin from a wallet to a specified address. This demonstrates the full transaction creation, signing, and broadcasting process.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.wallets import wallet_create_or_open\n\nw = wallet_create_or_open('bitcoinlib-testnet1', network='testnet', witness_type='segwit')\nt = w.send_to('tb1qprqnf4dqwuphxs9xqpzkjdgled6eeptn389nec', 4000, fee=1000)\nt.info()\n```\n\n----------------------------------------\n\nTITLE: Creating a New Bitcoin Wallet\nDESCRIPTION: This snippet demonstrates how to create a new Bitcoin wallet using the Command Line Wallet script. It generates a new wallet with a specified name and displays the wallet information, including the passphrase.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.command-line-wallet.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ clw new -w mywallet\nCREATE wallet 'newwallet' (bitcoin network)\nPassphrase: sibling undo gift cat garage survey taxi index admit odor surface waste\nPlease write it down on paper and backup. With this key you can restore your wallet and all keys\n\nType 'yes' if you understood and wrote down your key: yes\nWallet info for newwallet\n=== WALLET ===\n ID                             21\n Name                           newwallet\n Owner\n Scheme                         bip32\n Multisig                       False\n Witness type                   segwit\n Main network                   bitcoin\n Latest update                  None\n\n= Wallet Master Key =\n ID                             177\n Private                        True\n Depth                          0\n\n- NETWORK: bitcoin -\n- - Keys\n  182 m/84'/0'/0'/0/0              bc1qza24j7snqlmx7603z8qplm4rzfkr0p0mneraqv    address index 0                        0.00000000 â‚¿\n\n- - Transactions Account 0 (0)\n\n= Balance Totals (includes unconfirmed) =\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Currency Wallet from Mnemonic Passphrase\nDESCRIPTION: Shows how to create a hierarchical deterministic wallet with multiple accounts and different cryptocurrencies (Bitcoin and Litecoin) from a single mnemonic passphrase, enabling full wallet recovery from one seed.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.wallets import Wallet, wallet_delete\nfrom bitcoinlib.mnemonic import Mnemonic\n\npassphrase = Mnemonic().generate()\nprint(passphrase)\nw = Wallet.create(\"Wallet2\", keys=passphrase, network='bitcoin')\naccount_btc2 = w.new_account('Account BTC 2')\naccount_ltc1 = w.new_account('Account LTC', network='litecoin')\nw.get_key()\nw.get_key(account_btc2.account_id)\nw.get_key(account_ltc1.account_id)\nw.info()\n```\n\n----------------------------------------\n\nTITLE: Sending Bitcoin Transaction\nDESCRIPTION: Example showing how to send Bitcoin to an address using the wallet's send_to method and display transaction information.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/README.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> t = w.send_to('bc1qemtr8ywkzg483g8m34ukz2l4pl3730776vzq54', '0.001 BTC', offline=False)\n'b7feea5e7c79d4f6f343b5ca28fa2a1fcacfe9a2b7f44f3d2fd8d6c2d82c4078'\n>>> t.info  # Shows transaction information and send results\n```\n\n----------------------------------------\n\nTITLE: Creating a 2-of-2 Multi-Signature Wallet\nDESCRIPTION: Demonstrates how to create a multi-signature wallet requiring 2 signatures to authorize transactions. This example creates two cosigner wallets with the necessary private and public keys for secure multi-party transactions.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.wallets import Wallet\nfrom bitcoinlib.keys import HDKey\n\nNETWORK = 'testnet'\nk1 = HDKey('tprv8ZgxMBicQKsPd1Q44tfDiZC98iYouKRC2CzjT3HGt1yYw2zuX2awTotzGAZQEAU9bi2M5MCj8iedP9MREPjUgpDEBwBgGi2C8eK5zNYeiX8', network=NETWORK)\nk2 = HDKey('tprv8ZgxMBicQKsPeUbMS6kswJc11zgVEXUnUZuGo3bF6bBrAg1ieFfUdPc9UHqbD5HcXizThrcKike1c4z6xHrz6MWGwy8L6YKVbgJMeQHdWDp', network=NETWORK)\nw1 = Wallet.create('multisig_2of2_cosigner1', sigs_required=2,\n                     keys=[k1, k2.public_master(multisig=True)], network=NETWORK)\nw2 = Wallet.create('multisig_2of2_cosigner2',  sigs_required=2,\n                     keys=[k1.public_master(multisig=True), k2], network=NETWORK)\nprint(\"Deposit testnet bitcoin to this address to create transaction: \", w1.get_key().address)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Bitcoin Transaction\nDESCRIPTION: Creates a basic transaction with one input and one output, sending funds to a newly generated address. Demonstrates the core structure of a Bitcoin transaction.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.transactions import Transaction\nfrom bitcoinlib.keys import HDKey\n\nt = Transaction()\nprev_hash = '9c81f44c29ff0226f835cd0a8a2f2a7eca6db52a711f8211b566fd15d3e0e8d4'\nt.add_input(prev_hash, output_n=0)\nk = HDKey()\nt.add_output(100000, k.address())\nt.info()\n```\n\n----------------------------------------\n\nTITLE: Completing and Broadcasting a Multi-Signature Transaction\nDESCRIPTION: Demonstrates how to import a partially signed transaction into the second cosigner wallet, apply the second signature, and broadcast the completed transaction to the network.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nw2.get_key()\nt2 = w2.transaction_import(t)\nt2.sign()\nt2.send()\nt2.info()\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-signature Bitcoin Wallet\nDESCRIPTION: This snippet demonstrates the process of creating a 2-of-2 multi-signature wallet using the Command Line Wallet. It shows how to generate private keys, create the wallet, and view wallet information.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.command-line-wallet.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ clw -g -n bitcoinlib_test -y\nCommand Line Wallet - BitcoinLib 0.6.14\n\nPassphrase: marine kiwi great try know scan rigid indicate place gossip fault liquid\nPlease write down on paper and backup. With this key you can restore your wallet and all keys\n\nType 'yes' if you understood and wrote down your key: yes\nPrivate Master key, to create multisig wallet on this machine:\nBC19UtECk2r9PVQYhY4yboRf92XKEnKZf9hQEd1qBqCgQ98HkBeysLPqYewcWDUuaBRSSVXCShDfmhpbtgZ33sWeGPqfwoLwamzPEcnfwLoeqfQM\nPublic Master key, to share with other cosigner multisig wallets:\nBC18rEEZrakM87qWbSSUv19vnRkEFL7ZtNtGx3exB886VbeFZp6aq9JLZucYAj1EtsHKUB2mkjvafCCGaeYeUVtdFcz5xTxTTgEPCE8fDC8LcahM\nNetwork: bitcoinlib_test\n\n$ clw -g -n bitcoinlib_test -y\nCommand Line Wallet - BitcoinLib 0.6.14\n\nPassphrase: trumpet utility cotton couch hard shadow ivory alpha glance pear snow emerge\nPlease write down on paper and backup. With this key you can restore your wallet and all keys\nPrivate Master key, to create multisig wallet on this machine:\nBC19UtECk2r9PVQYhaAa8kEgBMPWHC4fJVJD48zBMMb9gSpY9LQVvQ1HhzB3Xmkm2BpiH5SyWoboiewpbeexPLsw8QBfAqMbDfet6kLhedtfQF8r\nPublic Master key, to share with other cosigner multisig wallets:\nBC18rEEvE8begagfJs7kdxx1yW9tFsz7879c9vQQ2mnGbF6WSeKuBEGtmxJYLEy8rpVV9wXffbBtnL1LPKZqujPtEKzHqQeERiRybKB3DRBBoSFH\nNetwork: bitcoinlib_test\n\n$ clw new -w multisig-2-2 -n bitcoinlib_test -m 2 2 BC19UtECk2r9PVQYhY4yboRf92XKEnKZf9hQEd1qBqCgQ98HkBeysLPqYewcWDUuaBRSSVXCShDfmhpbtgZ33sWeGPqfwoLwamzPEcnfwLoeqfQM BC18rEEvE8begagfJs7kdxx1yW9tFsz7879c9vQQ2mnGbF6WSeKuBEGtmxJYLEy8rpVV9wXffbBtnL1LPKZqujPtEKzHqQeERiRybKB3DRBBoSFH\n\nCommand Line Wallet - BitcoinLib 0.6.14\n\nCREATE wallet 'ms22' (bitcoinlib_test network)\nWallet info for ms22\n=== WALLET ===\n ID                             22\n Name                           ms22\n Owner\n Scheme                         bip32\n Multisig                       True\n Multisig Wallet IDs            23, 24\n Cosigner ID                    1\n Witness type                   segwit\n Main network                   bitcoinlib_test\n Latest update                  None\n\n= Multisig Public Master Keys =\n    0 183 BC18rEEvE8begagfJs7kdxx1yW9tFsz7879c9vQQ2mnGbF6WSeKuBEGtmxJYLEy8rpVV9wXffbBtnL1LPKZqujPtEKzHqQeERiRybKB3DRBBoSFH bip32  cosigner\n    1 186 BC18rEEZrakM87qWbSSUv19vnRkEFL7ZtNtGx3exB886VbeFZp6aq9JLZucYAj1EtsHKUB2mkjvafCCGaeYeUVtdFcz5xTxTTgEPCE8fDC8LcahM bip32  main     *\nFor main keys a private master key is available in this wallet to sign transactions. * cosigner key for this wallet\n\n- NETWORK: bitcoinlib_test -\n- - Keys\n\n- - Transactions Account 0 (0)\n\n= Balance Totals (includes unconfirmed) =\n```\n\n----------------------------------------\n\nTITLE: Scanning for Transactions and Displaying Wallet Information\nDESCRIPTION: Shows how to use the scan method to update a wallet with new transactions and unspent outputs (UTXOs), then display wallet information including keys, transactions and balances.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> w.scan()\n>>> w.info()  # Shows wallet information, keys, transactions and UTXO's\n```\n\n----------------------------------------\n\nTITLE: Creating a Testnet Segwit Wallet\nDESCRIPTION: Creates a Bitcoin testnet wallet with segwit address support and generates a new receiving address. This demonstrates creating specialized wallets for testing.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.wallets import wallet_create_or_open\n\nw = wallet_create_or_open('bitcoinlib-testnet1', network='testnet', witness_type='segwit')\nwk = w.new_key()\nprint(\"Deposit to address %s to get started\" % wk.address)\n```\n\n----------------------------------------\n\nTITLE: Creating a Native Segregated Witness (P2WPKH) Wallet\nDESCRIPTION: Shows how to create a native SegWit wallet with bech32 addresses (bc1 prefix). This wallet type provides lower transaction fees and improved scalability.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from bitcoinlib.wallets import Wallet\n>>> w = Wallet.create('segwit_p2wpkh', witness_type='segwit')\n>>> w.get_key().address\nbc1q84y2quplejutvu0h4gw9hy59fppu3thg0u2xz3\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction with BitcoinLib Command Line Wallet\nDESCRIPTION: This command creates a transaction of 0.1 TST from a multisignature wallet, displaying the transaction details including inputs, outputs, fees, and status. The transaction requires another signature before it can be verified.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.command-line-wallet.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ clw -w ms22 -s blt1qxu6z7evkrmz5s7sk63dr0u3h9xsf2j2vys88reg75cjvjuz4vf2srkxp7p 0.1\n```\n\n----------------------------------------\n\nTITLE: Creating Bitcoin Wallet and Generating Address\nDESCRIPTION: Example showing how to create a new Bitcoin wallet and generate a receiving address using BitcoinLib's Wallet class.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from bitcoinlib.wallets import Wallet\n>>> w = Wallet.create('Wallet1')\n>>> w.get_key().address\n'bc1qk25wwkvz3am9smmm3372xct5s7cwf0hmnq8szj'\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction in a Multi-Signature Wallet\nDESCRIPTION: Shows how to create a transaction in the first cosigner wallet of a multi-signature setup. This initiates the transaction that will require signatures from all required parties.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nw1.utxos_update()\nt = w1.sweep('mwCwTceJvYV27KXBc3NJZys6CjsgsoeHmf', min_confirms=0)\nt.info()\n```\n\n----------------------------------------\n\nTITLE: Scanning Wallet for Transactions\nDESCRIPTION: Example demonstrating how to scan a wallet for new transactions and display wallet information.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> w.scan()\n>>> w.info()  # Shows wallet information, keys, transactions and UTXO's\n```\n\n----------------------------------------\n\nTITLE: Sending Funds and Creating a Transaction\nDESCRIPTION: This snippet demonstrates how to send funds using the Command Line Wallet. It shows the usage of the -t option to specify the recipient address and amount, and mentions additional options for setting fees and pushing transactions to the network.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.command-line-wallet.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ clw -w mywallet -d dbtest -t bc1qza24j7snqlmx7603z8qplm4rzfkr0p0mneraqv 10000\n```\n\n----------------------------------------\n\nTITLE: Updating a Wallet's UTXOs\nDESCRIPTION: Updates a wallet by checking for new unspent transaction outputs (UTXOs) from blockchain service providers. This keeps the wallet's balance and available funds current.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.wallets import wallet_create_or_open\n\nw = wallet_create_or_open('bitcoinlib-testnet1', network='testnet', witness_type='segwit')\nn_utxos = w.utxos_update()\nif n_utxos:\n    print(\"Found new unspent outputs (UTXO's), we are ready to create a transaction\")\nw.info()\n```\n\n----------------------------------------\n\nTITLE: Creating an Encrypted Wallet Database in Bitcoinlib using SQLCipher\nDESCRIPTION: Python code to create and open an encrypted wallet database in Bitcoinlib using SQLCipher. It demonstrates how to provide a password and database URI when initializing a wallet.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.sqlcipher.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npassword = 'secret'\ndb_uri = '/home/user/.bitcoinlib/database/bcl_encrypted.db'\nwlt = wallet_create_or_open('bcltestwlt4', network='bitcoinlib_test', db_uri=db_uri, db_password=password)\n```\n\n----------------------------------------\n\nTITLE: Creating a P2SH-Nested Segregated Witness Wallet\nDESCRIPTION: Demonstrates creating a P2SH-nested SegWit wallet that has traditional Bitcoin addresses starting with '3' but still provides SegWit benefits. This type offers better compatibility with older wallets.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from bitcoinlib.wallets import Wallet\n>>> w = Wallet.create('segwit_p2sh_p2wpkh', witness_type='p2sh-segwit')\n>>> w.get_key().address\n36ESSWgR4WxXJSc4ysDSJvecyY6FJkhUbp\n```\n\n----------------------------------------\n\nTITLE: Importing a Private Key Using WIF Format\nDESCRIPTION: Imports an existing private key using its Wallet Import Format (WIF) and displays the corresponding Bitcoin address. This shows how to work with existing keys in BitcoinLib.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.keys import Key\nwif = 'KyAoQkmmoAgdC8YXamgpqFb2R8j6g5jiBnGdJo62aDJCxstboTqS'\nk = Key(wif)\nprint(k.address())\n```\n\n----------------------------------------\n\nTITLE: Generating and Using a Mnemonic Phrase for Keys\nDESCRIPTION: Creates a BIP39 mnemonic phrase and demonstrates how to derive an HD key from it. Mnemonic phrases provide a human-readable way to backup and recover private keys.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.mnemonic import Mnemonic\nfrom bitcoinlib.keys import HDKey\n\nphrase = Mnemonic().generate()\nprint(phrase)\nk = HDKey.from_passphrase(phrase)\nprint(k.private_hex)\n\n```\n\n----------------------------------------\n\nTITLE: Generating a Receive Address for a Bitcoin Wallet\nDESCRIPTION: This snippet shows how to generate and display an unused receive address for a specific wallet. It uses the -r or --receive option to show the address, and mentions the option to display QR codes if the pyqrcode module is installed.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.command-line-wallet.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ clw -w mywallet -r\nCommand Line Wallet for BitcoinLib\n\nReceive address is bc1qza24j7snqlmx7603z8qplm4rzfkr0p0mneraqv\n```\n\n----------------------------------------\n\nTITLE: Creating HD Key Paths for Wallets\nDESCRIPTION: Demonstrates two methods for creating and sharing public master keys, which is useful for creating watch-only wallets or sharing public keys without revealing private keys.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.keys import HDKey\n\nprv_masterkey = HDKey()\npub_masterkey = prv_masterkey.public_master()\nprint(\"Public masterkey to exchange (method 1): %s\" % pub_masterkey.wif())\npub_masterkey = prv_masterkey.subkey_for_path(\"m/44'/0'/0'\")\nprint(\"Public masterkey to exchange (method 2): %s\" % pub_masterkey.wif())\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Hierarchical Deterministic Key (HDKey)\nDESCRIPTION: Creates a segwit-compatible HD key and displays its information. HDKeys extend the Key class by adding chain code and hierarchical structure capabilities.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.keys import HDKey\nk = HDKey(witness_type='segwit')\nk.info()\n```\n\n----------------------------------------\n\nTITLE: Creating and Examining a Key in BitcoinLib\nDESCRIPTION: Creates a random Bitcoin key using the Key class and displays its information including private key, public key, address and WIF. This demonstrates the basic functionality of the Key class.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.keys import Key\nk = Key()\nk.info()\n```\n\n----------------------------------------\n\nTITLE: Managing a Multi-signature Bitcoin Wallet\nDESCRIPTION: This snippet shows how to manage a multi-signature wallet, including generating a receive address, updating unspent transaction outputs (UTXOs), and viewing wallet information.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.command-line-wallet.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ clw -w ms22 -r\nCommand Line Wallet - BitcoinLib 0.6.14\n\nReceive address: blt1qxu6z7evkrmz5s7sk63dr0u3h9xsf2j2vys88reg75cjvjuz4vf2srkxp7p\nInstall qr code module to show QR codes: pip install pyqrcode\n\n$ clw -w ms22 -x\nCommand Line Wallet - BitcoinLib 0.6.14\n\nUpdating wallet utxo's\n$ clw -w ms22 -i\nCommand Line Wallet - BitcoinLib 0.6.14\n\nWallet info for ms22\n=== WALLET ===\n ID                             22\n Name                           ms22\n Owner\n Scheme                         bip32\n Multisig                       True\n Multisig Wallet IDs            23, 24\n Cosigner ID                    1\n Witness type                   segwit\n Main network                   bitcoinlib_test\n Latest update                  None\n\n= Multisig Public Master Keys =\n    0 183 BC18rEEvE8begagfJs7kdxx1yW9tFsz7879c9vQQ2mnGbF6WSeKuBEGtmxJYLEy8rpVV9wXffbBtnL1LPKZqujPtEKzHqQeERiRybKB3DRBBoSFH bip32  cosigner\n    1 186 BC18rEEZrakM87qWbSSUv19vnRkEFL7ZtNtGx3exB886VbeFZp6aq9JLZucYAj1EtsHKUB2mkjvafCCGaeYeUVtdFcz5xTxTTgEPCE8fDC8LcahM bip32  main     *\nFor main keys a private master key is available in this wallet to sign transactions. * cosigner key for this wallet\n\n- NETWORK: bitcoinlib_test -\n- - Keys\n  193 m/48`/9999999`/0`/2`/0/0     blt1qxu6z7evkrmz5s7sk63dr0u3h9xsf2j2vys88reg75cjvjuz4vf2srkxp7p Multisig Key 185/192                   2.00000000 T\n\n- - Transactions Account 0 (2)\n7b020ae9c7f8ba84a5a5136ae32e6195af5a4f25316f790a1278e04f479ca77d blt1qxu6z7evkrmz5s7sk63dr0u3h9xsf2j2vys88reg75cjvjuz4vf2srkxp7p       10          1.00000000 T U\n5d0f176259ab4bc596363aa3653c44858ebeb2fd8361311966776192968e545d blt1qxu6z7evkrmz5s7sk63dr0u3h9xsf2j2vys88reg75cjvjuz4vf2srkxp7p       10          1.00000000 T U\n\n= Balance Totals (includes unconfirmed) =\nbitcoinlib_test      (Account 0)                  2.00000000 T\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Decrypting a Bitcoin Key\nDESCRIPTION: Creates a key, encrypts it with a password, and then demonstrates how to import the encrypted key. This shows BitcoinLib's key security features.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.keys import Key\nk = Key()\nprint(k.private_hex)\nencrypted_wif = k.encrypt('secret')\nprint(encrypted_wif)\n\nk_import = Key(encrypted_wif, password='secret')\nprint(k_import.private_hex)\n```\n\n----------------------------------------\n\nTITLE: Creating Child Keys from an HD Master Key\nDESCRIPTION: Imports an HD key from an extended WIF and demonstrates creating private and public child keys, showing the hierarchical key derivation process.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.keys import HDKey\n\nextended_wif = 'zprvAWgYBBk7JR8Gk4CexKBHgzfYiYXgV71Ybi2tJFU2yDn8RgiqsviqT4eYPE9LofWMdrSkYmWciMtiD7jqA5dccDLnJj' \\\n               'DSMghhGRv41vHo9yx'\nk = HDKey(extended_wif)\nck = k.child_private(10)\nprint(\"ck.private_hex: %s\" % ck.private_hex)\nprint(\"ck.depth: %s\" % ck.depth)\nck_pub = ck.child_public(0)\nprint(\"ck_pub.private_hex: %s\" % ck_pub.private_hex)\nprint(\"ck_pub.public_hex: %s\" % ck_pub.public_hex)\nprint(\"ck_pub.depth: %s\" % ck_pub.depth)\n```\n\n----------------------------------------\n\nTITLE: Getting Estimated Transaction Fees from Service Providers\nDESCRIPTION: Demonstrates how to retrieve the estimated transaction fee in Satoshis per kilobyte for confirmation within a specific number of blocks using the Service module, which communicates with Bitcoin service providers.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from bitcoinlib.services.services import Service\n>>> Service().estimatefee(5)\n138964\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Second Multisignature Wallet for Transaction Signing\nDESCRIPTION: This sequence of commands creates a second multisignature wallet with the other required private key, generates a receive address, updates the UTXOs, and imports the transaction file to be signed, resulting in a fully verified transaction.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.command-line-wallet.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ clw new -w multisig-2-2-signer2 -n bitcoinlib_test -m 2 2 BC18rEEZrakM87qWbSSUv19vnRkEFL7ZtNtGx3exB886VbeFZp6aq9JLZucYAj1EtsHKUB2mkjvafCCGaeYeUVtdFcz5xTxTTgEPCE8fDC8LcahM BC19UtECk2r9PVQYhaAa8kEgBMPWHC4fJVJD48zBMMb9gSpY9LQVvQ1HhzB3Xmkm2BpiH5SyWoboiewpbeexPLsw8QBfAqMbDfet6kLhedtfQF8r\n$ clw -w multisig-2-2-signer2 -r\n$ clw -w multisig-2-2-signer2 -x\n$ clw -w multisig-2-2-signer2 -a tx.tx\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database in Python with Bitcoinlib\nDESCRIPTION: Python code snippet showing how to create a wallet using a PostgreSQL database connection in Bitcoinlib.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.databases.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndb_uri = 'postgresql+psycopg://bitcoinlib:secret@localhost:5432/'\nw = wallet_create_or_open('wallet_mysql', db_uri=db_uri)\nw.info()\n```\n\n----------------------------------------\n\nTITLE: Restoring a Bitcoin Wallet with Passphrase\nDESCRIPTION: This snippet shows how to restore or create a wallet using a passphrase. It demonstrates the use of the --passphrase option and the -u / --update-transactions option for recreating and scanning old wallets.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.command-line-wallet.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ clw new -w mywallet --passphrase \"mutual run dynamic armed brown meadow height elbow citizen put industry work\"\n$ clw mywallet -ui\n```\n\n----------------------------------------\n\nTITLE: Creating Keys for Different Networks and Encodings\nDESCRIPTION: Demonstrates creating a key for the Litecoin network and displaying its address in both standard and bech32 encoding formats. Shows BitcoinLib's multi-network support.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.keys import Key\nk = Key(network='litecoin')\nprint(k.address())\nprint(k.address(encoding='bech32'))\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet Using Command Line Tool\nDESCRIPTION: Shows how to create a new Bitcoin wallet using the BitcoinLib command line wallet tool. This generates a new wallet with a mnemonic passphrase for backup and recovery.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/index.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ python bitcoinlib/tools/clw.py new -w newwallet\nCommand Line Wallet - BitcoinLib 0.6.14\n\nCREATE wallet 'newwallet' (bitcoin network)\nPassphrase: sibling undo gift cat garage survey taxi index admit odor surface waste\nPlease write down on paper and backup. With this key you can restore your wallet and all keys\n\nType 'yes' if you understood and wrote down your key: yes\nWallet info for newwallet\n=== WALLET ===\n ID                             21\n Name                           newwallet\n Owner\n Scheme                         bip32\n Multisig                       False\n Witness type                   segwit\n Main network                   bitcoin\n Latest update                  None\n\n= Wallet Master Key =\n ID                             177\n Private                        True\n Depth                          0\n\n- NETWORK: bitcoin -\n- - Keys\n  182 m/84`/0`/0`/0/0              bc1qza24j7snqlmx7603z8qplm4rzfkr0p0mneraqv    address index 0                        0.00000000 â‚¿\n\n- - Transactions Account 0 (0)\n\n= Balance Totals (includes unconfirmed) =\n```\n\n----------------------------------------\n\nTITLE: Accessing Bitcoin Node RPC Methods in Python\nDESCRIPTION: Python code showing how to use various RPC methods of a Bitcoin node through bitcoinlib. Demonstrates retrieving blockchain information, chain transaction statistics, mempool information, and adding a node.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.setup-bitcoind-connection.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.services.bitcoind import BitcoindClient\n\n# Retrieve some blockchain information and statistics\nbdc.proxy.getblockchaininfo()\nbdc.proxy.getchaintxstats()\nbdc.proxy.getmempoolinfo()\n\n# Add a node to the node list\nbdc.proxy.addnode('blocksmurfer.io', 'add')\n```\n\n----------------------------------------\n\nTITLE: Installing BitcoinLib with pip\nDESCRIPTION: Simple command to install the BitcoinLib package using pip, Python's package manager.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.install.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n$ pip install bitcoinlib\n```\n\n----------------------------------------\n\nTITLE: Using Service Providers for Blockchain Information\nDESCRIPTION: Connects to blockchain service providers to retrieve current network information like transaction fees and blockchain height. This enables interaction with the live blockchain.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.services.services import Service\n\nsrv = Service()\nprint(\"Estimated transaction fee: %s\" % srv.estimatefee())\nprint(\"Latest block: %s\" % srv.blockcount())\n```\n\n----------------------------------------\n\nTITLE: Encrypting Private Key Fields in Bitcoin Wallet\nDESCRIPTION: This snippet demonstrates how to encrypt private key fields in the database using environment variables. It shows the process of creating a new wallet with encrypted fields and the inability to access the wallet without the correct password.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.command-line-wallet.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export DB_FIELD_ENCRYPTION_PASSWORD=iforgot\n$ clw new -w cryptwallet\nCommand Line Wallet - BitcoinLib 0.6.14\n\nCREATE wallet 'cryptwallet' (bitcoin network)\nPassphrase: job giant vendor side oil embrace true cushion have matrix glimpse rack\nPlease write it down on paper and backup. With this key you can restore your wallet and all keys\n\nType 'yes' if you understood and wrote down your key: yes\n... wallet info ...\n\n$ clw -w cryptwallet -r\nCommand Line Wallet - BitcoinLib 0.6.14\n\nReceive address: bc1q2cr0chgs6530mdpag2rfn7v9nt232nlpqcc4kc\nInstall qr code module to show QR codes: pip install pyqrcode\n\n$ export DB_FIELD_ENCRYPTION_PASSWORD=\n$ clw -w cryptwallet -i\nCommand Line Wallet - BitcoinLib 0.6.14\n\nValueError: Data is encrypted please provide key in environment\n```\n\n----------------------------------------\n\nTITLE: Configuring Bcoin Provider in Bitcoinlib\nDESCRIPTION: JSON configuration to add to the providers.json file in the .bitcoinlib directory to enable connection to a Bcoin node. Includes connection URL, priority settings, and other required parameters.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.setup-bcoin.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"bcoin\": {\n    \"provider\": \"bcoin\",\n    \"network\": \"bitcoin\",\n    \"client_class\": \"BcoinClient\",\n    \"provider_coin_id\": \"\",\n    \"url\": \"https://user:pass@localhost:8332/\",\n    \"api_key\": \"\",\n    \"priority\": 20,\n    \"denominator\": 100000000,\n    \"network_overrides\": null,\n    \"timeout\": 0\n},\n```\n\n----------------------------------------\n\nTITLE: Analyzing a Bitcoin Address\nDESCRIPTION: Imports and analyzes a Bitcoin address using the Address class, which can parse and provide information about different address formats and types.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.keys import Address\naddress = 'bc1q96zj7hv097x9u9f86azlk49ffxak7zltyfghld'\na = Address.import_address(address)\nprint(a.as_json())\n\n\n```\n\n----------------------------------------\n\nTITLE: Parsing a Raw Bitcoin Transaction\nDESCRIPTION: Demonstrates how to parse a raw transaction hex string into a Transaction object, allowing for analysis of existing transactions on the blockchain.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.transactions import Transaction\n\nrawtx = \"010000000001015f171218b2e273be55af4f1cf0a56c0499b48b098d16ebdc68c62db78c55765a0100000000ffffff000200e1f505\" \\\n        \"0000000017a9140db01b8486f63ef80f02fe78bada7680c46c11ef8730f10801000000001600141dfba959940495c3a92cbb80b0b5\" \\\n        \"0246cfe0f11702473044022004eb67e91dc04179a367d99c0d65617cda385c313e79d717f8ade695a5731b8c02207a273d8592d815\" \\\n        \"9d6f587a0db993ab4b4a030fbfa390229b490d789a77b8c8540121029422dbe194e42bac01e94925cf8b619f0fd4aa5d0181633659\" \\\n        \"e7deed79eb5b7a00000000\"\nt = Transaction.parse_hex(rawtx)\nt.info()\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Settings in JSON\nDESCRIPTION: Example JSON configuration for adding a Bitcoin node connection to the bitcoinlib providers.json file. Includes network settings, URL, and priority configuration.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.setup-bitcoind-connection.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bitcoind.testnet\": {\n    \"provider\": \"bitcoind\",\n    \"network\": \"testnet\",\n    \"client_class\": \"BitcoindClient\",\n    \"url\": \"http://user:password@server_url:18332\",\n    \"api_key\": \"\",\n    \"priority\": 11,\n    \"denominator\": 100000000,\n    \"network_overrides\": null\n    \"timeout\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SQLCipher Database URI for Encrypted Wallet in Bitcoinlib\nDESCRIPTION: Python code demonstrating how to use a SQLCipher database URI to create and query an encrypted wallet database in Bitcoinlib. It shows how to construct the URI with encryption parameters.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.sqlcipher.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npassword = 'secret'\nfilename = '/home/user/.bitcoinlib/database/bcl_encrypted.db'\ndb_uri = 'sqlite+pysqlcipher://:%s@/%s?cipher=aes-256-cfb&kdf_iter=64000' % (password, filename)\nwlt = Wallet.create('bcltestwlt4', network='bitcoinlib_test', db_uri=db_uri)\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Settings in JSON\nDESCRIPTION: JSON configuration example for adding a new provider (BitGo) to the providers.json file. Specifies provider details like URL, network, priority and other settings.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.add-provider.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"bitgo\": {\n        \"provider\": \"bitgo\",\n        \"network\": \"bitcoin\",\n        \"client_class\": \"BitGo\",\n        \"provider_coin_id\": \"\",\n        \"url\": \"https://www.bitgo.com/api/v1/\",\n        \"api_key\": \"\",\n        \"priority\": 10,\n        \"denominator\": 1,\n        \"network_overrides\": null\n        \"timeout\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Database in Python with Bitcoinlib\nDESCRIPTION: Python code snippet demonstrating how to create a wallet using a MySQL database connection in Bitcoinlib.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.databases.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndb_uri = 'mysql://bitcoinlib:secret@localhost:3306/bitcoinlib'\nw = wallet_create_or_open('wallet_mysql', db_uri=db_uri)\nw.info()\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL for Caching in Bitcoinlib Service\nDESCRIPTION: Python code demonstrating how to use a PostgreSQL database for caching service requests in Bitcoinlib.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.databases.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsrv = Service(cache_uri='postgresql+psycopg://postgres:postgres@localhost:5432/)\nres = srv.gettransactions('12spqcvLTFhL38oNJDDLfW1GpFGxLdaLCL')\n```\n\n----------------------------------------\n\nTITLE: Generating Encryption Key for AES Private Key Encryption in Bitcoinlib\nDESCRIPTION: Python code to generate a secure 32-byte encryption key using Bitcoinlib's Key class for AES encryption of private keys.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.sqlcipher.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from bitcoinlib.keys import Key\n>>> Key().private_hex()\n'2414966ea9f2de189a61953c333f61013505dfbf8e383b5ed6cb1981d5ec2620'\n```\n\n----------------------------------------\n\nTITLE: Handling Service Provider Errors\nDESCRIPTION: Demonstrates how to handle errors when making requests to blockchain service providers, showing how to check for error responses when querying for unknown transactions.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/bitcoinlib-10-minutes.ipynb#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.services.services import Service\n\nsrv = Service()\nunknown_txid = '9c81f44c29ff0226f835cd0a8a2f2a7eca6db52a711f8211b566fd15d3e0e8d4'\nsrv.gettransaction(unknown_txid)\nprint(srv.results)\nprint(srv.errors)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Bitcoin Node Using base_url Argument in Python\nDESCRIPTION: Python code demonstrating how to connect to a Bitcoin node directly using the base_url argument with BitcoindClient. Shows how to retrieve and display a raw transaction.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.setup-bitcoind-connection.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.services.bitcoind import BitcoindClient\n\nbase_url = 'http://user:password@server_url:18332'\nbdc = BitcoindClient(base_url=base_url)\ntxid = 'e0cee8955f516d5ed333d081a4e2f55b999debfff91a49e8123d20f7ed647ac5'\nrt = bdc.getrawtransaction(txid)\nprint(\"Raw: %s\" % rt)\n```\n\n----------------------------------------\n\nTITLE: Configuring TOR Settings for Bitcoin Node\nDESCRIPTION: Configuration settings to add to bitcoin.conf for using TOR with a Bitcoin node. These settings enhance privacy and security by routing Bitcoin traffic through the TOR network.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.setup-bitcoind-connection.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nproxy=127.0.0.1:9050\nbind=127.0.0.1\nonlynet=onion\n```\n\n----------------------------------------\n\nTITLE: Implementing BitGo Service Class\nDESCRIPTION: Python class implementation for the BitGo service provider, extending BaseClient with methods for API interaction and fee estimation.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.add-provider.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib.services.baseclient import BaseClient\n\nPROVIDERNAME = 'bitgo'\n\n\nclass BitGoClient(BaseClient):\n\n    def __init__(self, network, base_url, denominator, api_key=''):\n        super(self.__class__, self).\\\n            __init__(network, PROVIDERNAME, base_url, denominator, api_key)\n\n    def compose_request(self, category, data, cmd='', variables=None, method='get'):\n        if data:\n            data = '/' + data\n        url_path = category + data\n        if cmd:\n            url_path += '/' + cmd\n        return self.request(url_path, variables, method=method)\n\n    def estimatefee(self, blocks):\n        res = self.compose_request('tx', 'fee', variables={'numBlocks': blocks})\n        return res['feePerKb']\n```\n\n----------------------------------------\n\nTITLE: Testing New Service Provider\nDESCRIPTION: Python code example showing how to test the newly added service provider by creating a service instance and calling the fee estimation method.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.add-provider.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom bitcoinlib import services\n\nsrv = Service(providers=['blockchair'])\nprint(srv.estimatefee(5))\n```\n\n----------------------------------------\n\nTITLE: Configuring AES Encryption for Private Keys in Bitcoinlib\nDESCRIPTION: Configuration settings in the Bitcoinlib config.ini file to enable AES encryption for private key fields in the database.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.sqlcipher.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Encrypt private key field in database using symmetrically EAS encryption.\n# You need to set the password in the DB_FIELD_ENCRYPTION_KEY environment variable.\ndatabase_encryption_enabled=True\n```\n\n----------------------------------------\n\nTITLE: Installing SQLCipher Dependencies for Bitcoinlib Database Encryption\nDESCRIPTION: Bash commands to install SQLCipher and its dependencies on Ubuntu, required for full database encryption in Bitcoinlib.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.sqlcipher.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install sqlcipher libsqlcipher0 libsqlcipher-dev\n$ pip install sqlcipher3-binary\n# Previous, but now unmaintained: $ pip install pysqlcipher3\n```\n\n----------------------------------------\n\nTITLE: Configuring Blockbook Provider in Bitcoinlib\nDESCRIPTION: JSON configuration snippet for adding Blockbook credentials to the providers.json file in the .bitcoinlib directory. This configuration enables Bitcoinlib to connect to a Blockbook server for blockchain queries.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.setup-blockbook.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"blockbook\": {\n  \"provider\": \"blockbook\",\n  \"network\": \"bitcoin\",\n  \"client_class\": \"BlockbookClient\",\n  \"provider_coin_id\": \"\",\n  \"url\": \"https://<servername>:9130/\",\n  \"api_key\": \"\",\n  \"priority\": 20,\n  \"denominator\": 100000000,\n  \"network_overrides\": null,\n  \"timeout\", 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ElectrumX Provider in Bitcoinlib's providers.json\nDESCRIPTION: JSON configuration snippet that defines an ElectrumX service provider for Bitcoinlib. This configuration should be added to the providers.json file in the .bitcoinlib directory to enable connection to a local ElectrumX server running on port 50001.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.setup-electrumx.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"localhost.electrumx\": {\n    \"provider\": \"electrumx\",\n    \"network\": \"bitcoin\",\n    \"client_class\": \"ElectrumxClient\",\n    \"provider_coin_id\": \"\",\n    \"url\": \"localhost:50001\",\n    \"api_key\": \"\",\n    \"priority\": 100,\n    \"denominator\": 1,\n    \"network_overrides\": null\n},\n```\n\n----------------------------------------\n\nTITLE: Installing BitcoinLib via pip\nDESCRIPTION: Command to install the BitcoinLib package using Python's pip package manager.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install bitcoinlib\n```\n\n----------------------------------------\n\nTITLE: Building and Running BitcoinLib Docker Container\nDESCRIPTION: These commands demonstrate how to build a Docker image for BitcoinLib and run a container that executes all unit tests. The process involves changing to the directory containing the desired Dockerfile, building the image, and then running the container interactively.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docker/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <move to directory with the Dockerfile you want to use>\n$ docker build -t bitcoinlib .\n$ docker run -it bitcoinlib\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for AES Encryption in Bitcoinlib (Linux)\nDESCRIPTION: Bash commands to set environment variables for AES encryption in Bitcoinlib on Linux systems, demonstrating both key and password methods.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.sqlcipher.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ export DB_FIELD_ENCRYPTION_KEY='2414966ea9f2de189a61953c333f61013505dfbf8e383b5ed6cb1981d5ec2620'\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ export DB_FIELD_ENCRYPTION_PASSWORD=ineedtorememberthispassword\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for AES Encryption in Bitcoinlib (Windows)\nDESCRIPTION: Windows command to set environment variables for AES encryption in Bitcoinlib, using the setx command.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.sqlcipher.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ setx DB_FIELD_ENCRYPTION_KEY '2414966ea9f2de189a61953c333f61013505dfbf8e383b5ed6cb1981d5ec2620'\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database and User for Bitcoinlib\nDESCRIPTION: Bash commands to create a PostgreSQL user and database for use with Bitcoinlib.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.databases.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ su - postgres\npostgres@localhost:~$ createuser --interactive --pwprompt\nEnter name of role to add: bitcoinlib\nEnter password for new role:\nEnter it again:\nShall the new role be a superuser? (y/n) n\nShall the new role be allowed to create databases? (y/n) n\nShall the new role be allowed to create more new roles? (y/n) n\n$ createdb bitcoinlib\n```\n\n----------------------------------------\n\nTITLE: Changing BitcoinLib Data Directory Location\nDESCRIPTION: Python code to change the default location for BitcoinLib settings and data by setting the BCL_DATA_DIR environment variable.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.install.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nos.environ['BCL_DATA_DIR'] = '/var/www/blocksmurfer/.bitcoinlib'\n# or a second directory in user home\nos.environ['BCL_DATA_DIR'] = '~/.bitcoinlib2'\n```\n\n----------------------------------------\n\nTITLE: Running BitcoinLib Unit Tests\nDESCRIPTION: Command to run all unit tests to verify a successful BitcoinLib installation.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.install.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m unittest\n```\n\n----------------------------------------\n\nTITLE: Verifying SQLCipher Database Encryption in Bitcoinlib\nDESCRIPTION: Bash command to verify that the SQLCipher-encrypted database is unreadable, demonstrating successful encryption of the wallet data.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.sqlcipher.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cat ~/.bitcoinlib/database/bcl_encrypted.db\n<outputs unreadable random garbage>\n```\n\n----------------------------------------\n\nTITLE: Installing BitcoinLib from Source\nDESCRIPTION: Commands to clone the BitcoinLib repository from GitHub and install it in the current environment.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.install.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/1200wd/bitcoinlib.git\n$ cd bitcoinlib\n$ python -m pip install .\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitcoin Node for Testnet\nDESCRIPTION: Example bitcoin.conf file configuration for setting up a Bitcoin node on testnet with RPC access. Includes server settings, port configuration, and authentication details.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.setup-bitcoind-connection.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nserver=1\nport=18332\ntxindex=1\ntestnet=1\nrpcauth=bitcoinlib:01cf8eb434e3c9434e244daf3fc1cc71$9cdfb346b76935569683c12858e13147eb5322399580ba51d2d878148a880d1d\nrpcbind=0.0.0.0\nrpcallowip=192.168.0.0/24\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database for Bitcoinlib\nDESCRIPTION: SQL commands to create a MySQL database named 'bitcoinlib' and set up a user with appropriate permissions.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.databases.rst#2025-04-23_snippet_0\n\nLANGUAGE: mysql\nCODE:\n```\nmysql> create database bitcoinlib;\n```\n\nLANGUAGE: mysql\nCODE:\n```\nmysql> create user bitcoinlib@localhost identified by 'secret';\nmysql> grant all on bitcoinlib.* to bitcoinlib@localhost with grant option;\n```\n\n----------------------------------------\n\nTITLE: Resetting Configuration Files after Update\nDESCRIPTION: Command to remove the installation log file, which triggers regeneration of config files after an update.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.install.rst#2025-04-23_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n$ rm .bitcoinlib/install.log\n```\n\n----------------------------------------\n\nTITLE: Installing BitcoinLib Dependencies on Ubuntu\nDESCRIPTION: Commands to install required system packages for BitcoinLib on Ubuntu-based Linux systems.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install build-essential python3-dev libgmp3-dev\n```\n\n----------------------------------------\n\nTITLE: Setting up a Virtual Environment for BitcoinLib\nDESCRIPTION: Commands to create and activate a virtual environment for BitcoinLib installation, which helps isolate dependencies.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.install.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ virtualenv -p ~/.virtualenvs/bitcoinlib\n$ source ~/.virtualenvs/bitcoinlib/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Upgrading BitcoinLib with pip\nDESCRIPTION: Command to upgrade an existing BitcoinLib installation to the latest version using pip.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.install.rst#2025-04-23_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n$ pip install bitcoinlib --upgrade\n```\n\n----------------------------------------\n\nTITLE: Adding Service to Library Init\nDESCRIPTION: Python import statement to include the new BitGo service in the library's initialization file.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.add-provider.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport bitcoinlib.services.bitgo\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Bitcoinlib\nDESCRIPTION: Specifies the minimum required versions of Python packages needed by the Bitcoinlib project. Includes HTTP requests library, database ORM, cryptographic functions, documentation tools, and mathematical computation packages.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests>=2.25.0\nSQLAlchemy>=2.0.20\nfastecdsa>=2.3.0\nsphinx>=7.2.0\nsphinx_rtd_theme>=2.0.0\nnumpy>=1.22.0\npycryptodome>=3.19.0\n```\n\n----------------------------------------\n\nTITLE: Installing Bcoin Node using Docker\nDESCRIPTION: Command to pull a pre-configured Docker image for Bcoin that has optimal settings for use with Bitcoinlib.\nSOURCE: https://github.com/1200wd/bitcoinlib/blob/master/docs/_static/manuals.setup-bcoin.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull blocksmurfer/bcoin\n```"
  }
]