[
  {
    "owner": "sboudrias",
    "repo": "inquirer.js",
    "content": "TITLE: Creating a Self-Contained Inquirer.js Module\nDESCRIPTION: This code snippet demonstrates how to create a self-contained Inquirer.js module using `inquirer.createPromptModule()`. This is useful to avoid affecting other libraries that might also rely on Inquirer.js when adding or modifying prompt types.  It returns a prompt function that can be used to launch the prompt interface.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst prompt = inquirer.createPromptModule();\n\nprompt(questions).then(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Importing Password Prompt (JavaScript)\nDESCRIPTION: This code imports the `password` prompt from the `@inquirer/prompts` package. This is used to securely collect password input from the user, masking the input as it's typed.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { password } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Using Inquirer.js with `npx` in Bash scripts\nDESCRIPTION: This example demonstrates how to use Inquirer prompts directly within bash scripts using `npx`, which is useful for creating quick scripts or commands in `package.json`. It uses the `@inquirer-cli` package to expose each prompt as a standalone CLI.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nname=$(npx -y @inquirer-cli/input -r \"What is your name?\")\necho \"Hello, $name!\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm version $(npx -y @inquirer-cli/select -c patch -c minor -c major 'Select Version')\n```\n\n----------------------------------------\n\nTITLE: Reactive Interface with Rx.Subject in Inquirer.js\nDESCRIPTION: This code demonstrates how to use the reactive interface in Inquirer.js with Rx.Subject to dynamically add questions to be asked. It creates a new Rx.Subject, pushes new question objects to it, and then calls complete() when done.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst prompts = new Rx.Subject();\ninquirer.prompt(prompts);\n\n// At some point in the future, push new questions\nprompts.next({\n  /* question... */\n});\nprompts.next({\n  /* question... */\n});\n\n// When you're done\nprompts.complete();\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Prompt (JavaScript)\nDESCRIPTION: This code imports the `checkbox` prompt from the `@inquirer/prompts` package. This enables the use of a checkbox list, allowing the user to select multiple options.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { checkbox } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Basic Search Prompt Usage in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the basic usage of the `search` prompt from the `@inquirer/prompts` package (or `@inquirer/search`). It imports the `search` function and the `Separator` component. It then calls the `search` function with a message and a source function. The source function fetches data from the npm registry based on user input.  The source function also includes an AbortSignal which allows for cancelling network calls when the user's search term changes.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/search/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { search, Separator } from '@inquirer/prompts';\n// Or\n// import search, { Separator } from '@inquirer/search';\n\nconst answer = await search({\n  message: 'Select an npm package',\n  source: async (input, { signal }) => {\n    if (!input) {\n      return [];\n    }\n\n    const response = await fetch(\n      `https://registry.npmjs.org/-/v1/search?text=${encodeURIComponent(input)}&size=20`,\n      { signal },\n    );\n    const data = await response.json();\n\n    return data.objects.map((pkg) => ({\n      name: pkg.package.name,\n      value: pkg.package.name,\n      description: pkg.package.description,\n    }));\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using usePagination Hook (JavaScript)\nDESCRIPTION: This demonstrates how to use the `usePagination` hook to paginate a long list of options within a prompt. It takes a list of options, a page size, and a rendering function to display a subset of the items.  It handles cycling through the list and rendering the active item.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default createPrompt((config, done) => {\n  const [active, setActive] = useState(0);\n\n  const allChoices = config.choices.map((choice) => choice.name);\n\n  const page = usePagination({\n    items: allChoices,\n    active: active,\n    renderItem: ({ item, index, isActive }) => `${isActive ? \">\" : \" \"}${index}. ${item.toString()}`\n    pageSize: config.pageSize,\n    loop: config.loop,\n  });\n\n  return `... ${page}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Asking a question conditionally - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to ask a question based on the answer to a previous question. It first asks the user if they allow email communication. If the user confirms, it then prompts for their email address. This conditional logic allows for a more dynamic and personalized user experience.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input, confirm } from '@inquirer/prompts';\n\nconst allowEmail = await confirm({ message: 'Do you allow us to send you email?' });\n\nlet email;\nif (allowEmail) {\n  email = await input({ message: 'What is your email address' });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useState Hook (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `useState` hook within a custom prompt to manage state. In this example, it's used to track an index.  The hook allows a component to remember information, which can be updated directly.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrompt, useState } from '@inquirer/core';\n\nconst input = createPrompt((config, done) => {\n  const [index, setIndex] = useState(0);\n\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Standard Theme Customization (TypeScript)\nDESCRIPTION: This code snippet illustrates how to allow standard customization by using the makeTheme utility and the Theme type from @inquirer/core. It demonstrates how to define a prompt config, merge custom themes, and use theme styles within the rendering function.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrompt, usePrefix, makeTheme, type Theme } from '@inquirer/core';\nimport type { PartialDeep } from '@inquirer/type';\n\ntype PromptConfig = {\n  theme?: PartialDeep<Theme>;\n};\n\nexport default createPrompt<string, PromptConfig>((config, done) => {\n  const theme = makeTheme(config.theme);\n\n  const prefix = usePrefix({ status, theme });\n\n  return `${prefix} ${theme.style.highlight('hello')}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Prompt Creation with createPrompt (TypeScript)\nDESCRIPTION: This code demonstrates how to create a basic prompt using the `createPrompt` function from the `@inquirer/core` package. It shows how to define a rendering function that returns a string to be displayed in the terminal and how to call the created prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrompt } from '@inquirer/core';\n\nconst input = createPrompt((config, done) => {\n  // Implement logic\n\n  return '? My question';\n});\n\n// And it is then called as\nconst answer = await input({\n  /* config */\n});\n```\n\n----------------------------------------\n\nTITLE: Gathering Inquirer.js Answers into an Object (JavaScript)\nDESCRIPTION: This code snippet shows how to collect the answers from multiple Inquirer prompts into a single JavaScript object. It uses `async/await` syntax with the `input` and `confirm` prompts from the `@inquirer/prompts` library to gather user input and store it in the `answers` object. This approach simplifies access to multiple answers by grouping them together.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input, confirm } from '@inquirer/prompts';\n\nconst answers = {\n  firstName: await input({ message: \"What's your first name?\" }),\n  allowEmail: await confirm({ message: 'Do you allow us to send you email?' }),\n};\n\nconsole.log(answers.firstName);\n```\n\n----------------------------------------\n\nTITLE: Using the @inquirer/checkbox Prompt\nDESCRIPTION: Example demonstrating how to import and use the @inquirer/checkbox prompt to create an interactive checkbox selection in the command line. It showcases defining choices, including separators, and handling disabled options.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/checkbox/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { checkbox, Separator } from '@inquirer/prompts';\n// Or\n// import checkbox, { Separator } from '@inquirer/checkbox';\n\nconst answer = await checkbox({\n  message: 'Select a package manager',\n  choices: [\n    { name: 'npm', value: 'npm' },\n    { name: 'yarn', value: 'yarn' },\n    new Separator(),\n    { name: 'pnpm', value: 'pnpm', disabled: true },\n    {\n      name: 'pnpm',\n      value: 'pnpm',\n      disabled: '(pnpm is not available)',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Get Default Value After Timeout with Inquirer.js (JavaScript)\nDESCRIPTION: This snippet shows how to set a default value if the user doesn't respond to the prompt within a certain time. It uses AbortSignal.timeout to create a signal that aborts the prompt after 5 seconds. If the prompt is aborted due to timeout, the catch block returns 'Default value'.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input } from '@inquirer/prompts';\n\nconst answer = await input(\n  { message: 'Enter a value (timing out in 5 seconds)' },\n  { signal: AbortSignal.timeout(5000) },\n).catch((error) => {\n  if (error.name === 'AbortPromptError') {\n    return 'Default value';\n  }\n\n  throw error;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Number Prompt Usage\nDESCRIPTION: This code snippet demonstrates how to use the `number` prompt from the `@inquirer/prompts` package to ask the user for their age. It imports the `number` function and awaits the result of the prompt, storing it in the `answer` variable.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/number/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { number } from '@inquirer/prompts';\n// Or\n// import number from '@inquirer/number';\n\nconst answer = await number({ message: 'Enter your age' });\n```\n\n----------------------------------------\n\nTITLE: Using useEffect Hook (TypeScript)\nDESCRIPTION: This example shows how to use the `useEffect` hook to connect to an external system, such as a chat service, within a prompt.  The hook synchronizes the component with external systems, handling connections and disconnections based on dependencies.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst chat = createPrompt((config, done) => {\n  useEffect(() => {\n    const connection = createConnection(roomId);\n    connection.connect();\n    return () => connection.disconnect();\n  }, [roomId]);\n\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Multi Select Prompt Example\nDESCRIPTION: An example of a multi-select prompt supporting multiple selections and filtering/searching.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_31\n\nLANGUAGE: null\nCODE:\n```\n? Choose your OS, IDE, PL, etc. (Press <tab> to select/deselect, <backspace> to remove selected\noption, <enter> to select option)\n>>  vue\n>[ ] vue\n [ ] vuejs\n [ ] fuelphp\n [ ] venv\n [ ] vercel\n (Use arrow keys to reveal more options)\n```\n\n----------------------------------------\n\nTITLE: Using the expand prompt in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the expand prompt from the @inquirer/prompts package. It imports the expand function, defines choices with keys, names, and values, and configures the prompt with a message and a default value.  The prompt displays a compact list of options with single-key shortcuts, expanding to show descriptions when 'h' is pressed. The answer is awaited using `await expand({...})`.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/expand/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { expand } from '@inquirer/prompts';\n// Or\n// import expand from '@inquirer/expand';\n\nconst answer = await expand({\n  message: 'Conflict on file.js',\n  default: 'y',\n  choices: [\n    {\n      key: 'y',\n      name: 'Overwrite',\n      value: 'overwrite',\n    },\n    {\n      key: 'a',\n      name: 'Overwrite this one and all next',\n      value: 'overwrite_all',\n    },\n    {\n      key: 'd',\n      name: 'Show diff',\n      value: 'diff',\n    },\n    {\n      key: 'x',\n      name: 'Abort',\n      value: 'abort',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Theming Setup (TypeScript)\nDESCRIPTION: This code snippet demonstrates setting up a custom theme for Inquirer prompts. It shows how to define a custom theme interface, create a prompt with the custom theme, and use the theme properties within the prompt's rendering function.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrompt, makeTheme, type Theme } from '@inquirer/core';\nimport type { PartialDeep } from '@inquirer/type';\n\ntype PromptTheme = {};\n\nconst promptTheme: PromptTheme = {\n  icon: '!',\n};\n\ntype PromptConfig = {\n  theme?: PartialDeep<Theme<PromptTheme>>;\n};\n\nexport default createPrompt<string, PromptConfig>((config, done) => {\n  const theme = makeTheme(promptTheme, config.theme);\n\n  const prefix = usePrefix({ status, theme });\n\n  return `${prefix} ${theme.icon}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Using useMemo Hook (TypeScript)\nDESCRIPTION: This demonstrates the `useMemo` hook, allowing caching of an expensive calculation. It helps optimize re-rendering performance by skipping unnecessary work when the data has not changed.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst todoSelect = createPrompt((config, done) => {\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\n\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Using Inquirer.js with pre-commit hooks - Shell\nDESCRIPTION: This shell script demonstrates how to integrate Inquirer.js prompts within a shell script used as a pre-commit hook. It redirects the input stream to `/dev/tty` to ensure the script runs in an interactive shell, allowing Inquirer.js to function correctly. The `exec < /dev/tty` command is crucial for providing a tty stream in non-interactive environments.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nexec < /dev/tty\n\nnode my-script.js\n```\n\n----------------------------------------\n\nTITLE: Using rawlist prompt in JavaScript\nDESCRIPTION: Example of using the rawlist prompt in a JavaScript environment. Requires importing the rawlist function from the @inquirer/prompts or @inquirer/rawlist package. The `message` parameter is the question to ask, and `choices` is an array of options to select from. Returns the selected value.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/rawlist/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { rawlist } from '@inquirer/prompts';\n// Or\n// import rawlist from '@inquirer/rawlist';\n\nconst answer = await rawlist({\n  message: 'Select a package manager',\n  choices: [\n    { name: 'npm', value: 'npm' },\n    { name: 'yarn', value: 'yarn' },\n    { name: 'pnpm', value: 'pnpm' },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Function with Tuple Return (TypeScript)\nDESCRIPTION: This demonstrates the usage of the rendering function to return a tuple of two strings. The first string represents the prompt itself, and the second string is content to render under the prompt, such as an error message. The input cursor appears after the first string.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst number = createPrompt((config, done) => {\n  // Add some logic here\n\n  return [`? My question ${input}`, `! The input must be a number`];\n});\n```\n\n----------------------------------------\n\nTITLE: Debouncing search input using setTimeout\nDESCRIPTION: This JavaScript snippet demonstrates how to debounce the search input in the `@inquirer/prompts` `search` prompt using `setTimeout` from `node:timers/promises`. It waits for 300ms before executing the search. If the `signal` is aborted during the timeout, the search is cancelled.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/search/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { setTimeout } from 'node:timers/promises';\nimport { search } from '@inquirer/prompts';\n\nconst answer = await search({\n  message: 'Select an npm package',\n  source: async (input, { signal }) => {\n    await setTimeout(300);\n    if (signal.aborted) return [];\n\n    // Do the search\n    fetch(...)\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Asking Conditional Questions with Inquirer.js (JavaScript)\nDESCRIPTION: This code demonstrates how to ask questions conditionally based on the answers to previous questions using Inquirer.js. It first asks the user if they allow email communication, and then only prompts for their email address if they answer positively. This allows for more dynamic and relevant question flows.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input, confirm } from '@inquirer/prompts';\n\nconst allowEmail = await confirm({ message: 'Do you allow us to send you email?' });\n\nlet email;\nif (allowEmail) {\n  email = await input({ message: 'What is your email address' });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Inquirer.js Prompt Example\nDESCRIPTION: This code demonstrates a basic usage of Inquirer.js to prompt the user for input. It imports the Inquirer.js library, defines a set of questions, and then uses the `prompt` method to display the questions and collect the user's answers. The `then` callback processes the answers, and the `catch` callback handles errors.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport inquirer from 'inquirer';\n\ninquirer\n  .prompt([\n    /* Pass your questions in here */\n  ])\n  .then((answers) => {\n    // Use user feedback for... whatever!!\n  })\n  .catch((error) => {\n    if (error.isTtyError) {\n      // Prompt couldn't be rendered in the current environment\n    } else {\n      // Something else went wrong\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Using usePrefix Hook (TypeScript)\nDESCRIPTION: This snippet shows how to use the `usePrefix` hook to display a prefix at the beginning of the prompt line. This can be used to visually delineate different questions or render a loading spinner.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst input = createPrompt((config, done) => {\n  const prefix = usePrefix({ status });\n\n  return `${prefix} My question`;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Expand Prompt (JavaScript)\nDESCRIPTION: This code imports the `expand` prompt from the `@inquirer/prompts` package. The expand prompt allows the user to choose an option from an initially collapsed list.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expand } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Using @inquirer/input for text input\nDESCRIPTION: This snippet demonstrates how to use the `@inquirer/prompts` or `@inquirer/input` package to prompt the user for text input. It imports the `input` function and uses it to display a message and capture the user's response.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/input/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input } from '@inquirer/prompts';\n// Or\n// import input from '@inquirer/input';\n\nconst answer = await input({ message: 'Enter your name' });\n```\n\n----------------------------------------\n\nTITLE: Getting default value after timeout - JavaScript\nDESCRIPTION: This JavaScript code shows how to provide a default value if the user doesn't respond to a prompt within a specified timeout. It uses `AbortSignal.timeout()` to set a 5-second timeout. If the prompt times out, an `AbortPromptError` is caught, and a default value is returned. This ensures that the application doesn't get stuck waiting indefinitely for user input.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input } from '@inquirer/prompts';\n\nconst answer = await input(\n  { message: 'Enter a value (timing out in 5 seconds)' },\n  { signal: AbortSignal.timeout(5000) },\n).catch((error) => {\n  if (error.name === 'AbortPromptError') {\n    return 'Default value';\n  }\n\n  throw error;\n});\n```\n\n----------------------------------------\n\nTITLE: Using @inquirer/select for Single Selection in JavaScript\nDESCRIPTION: This code demonstrates how to use the @inquirer/select package to present a list of choices to the user and retrieve their selection. It imports the 'select' function and 'Separator' class from the package, defines an array of choices, and uses the 'select' function to prompt the user. The selected value is then stored in the 'answer' variable.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/select/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { select, Separator } from '@inquirer/prompts';\n// Or\n// import select, { Separator } from '@inquirer/select';\n\nconst answer = await select({\n  message: 'Select a package manager',\n  choices: [\n    {\n      name: 'npm',\n      value: 'npm',\n      description: 'npm is the most popular package manager',\n    },\n    {\n      name: 'yarn',\n      value: 'yarn',\n      description: 'yarn is an awesome package manager',\n    },\n    new Separator(),\n    {\n      name: 'jspm',\n      value: 'jspm',\n      disabled: true,\n    },\n    {\n      name: 'pnpm',\n      value: 'pnpm',\n      disabled: '(pnpm is not available)',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Prompts in Inquirer.js\nDESCRIPTION: This code demonstrates how to register a custom prompt with Inquirer.js, allowing it to be used like the built-in prompts. It showcases the deprecated interface for old plugins and the preferred solution with new plugins.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport customPrompt from '$$$/custom-prompt';\n\n// 1. Preferred solution with new plugins\nconst answer = await customPrompt({ ...config });\n\n// 2. Depreciated interface (or for old plugins)\ninquirer.registerPrompt('custom', customPrompt);\nconst answers = await inquirer.prompt([\n  {\n    type: 'custom',\n    ...config,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Handling `ctrl+c` with try/catch\nDESCRIPTION: This TypeScript code snippet demonstrates how to handle `ctrl+c` gracefully in Inquirer.js by wrapping the prompt execution within a `try/catch` block. This allows the program to catch the `ExitPromptError` and prevent unhandled promise rejections, thus improving the user experience. It is crucial for cleaning up the environment when a user exits a prompt prematurely.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Interactive List Prompt Example\nDESCRIPTION: An example of an interactive list prompt where a user can select an option by pressing arrow keys and Enter or pressing a key associated with a choice.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_26\n\nLANGUAGE: null\nCODE:\n```\n? Choose an option:\n>   Run command (D)\n    Quit (Q)\n```\n\n----------------------------------------\n\nTITLE: Importing Raw List Prompt (JavaScript)\nDESCRIPTION: This code imports the `rawlist` prompt from the `@inquirer/prompts` package. The raw list prompt presents the user with a numbered list of options to choose from.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rawlist } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Canceling Prompt with AbortController (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to cancel a prompt using `AbortController`. It imports the `confirm` prompt and creates a new `AbortController`.  A timeout is set for 5 seconds, after which the controller aborts the prompt.  The signal from the controller is passed to the confirm prompt's context.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Example 2: implementing custom cancellation with an AbortController\nimport { confirm } from '@inquirer/prompts';\n\nconst controller = new AbortController();\nsetTimeout(() => {\n  controller.abort(); // This will reject the promise\n}, 5000);\n\nconst answer = await confirm({ ... }, { signal: controller.signal });\n```\n\n----------------------------------------\n\nTITLE: Handling `ctrl+c` with uncaughtException in TypeScript\nDESCRIPTION: This code snippet demonstrates how to handle the `ExitPromptError` that occurs when a user presses `ctrl+c` to exit an Inquirer prompt. It uses a global `uncaughtException` event listener to catch the error and prevent the stack trace from being printed to the user's terminal, providing a more graceful exit message.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.on('uncaughtException', (error) => {\n  if (error instanceof Error && error.name === 'ExitPromptError') {\n    console.log('👋 until next time!');\n  } else {\n    // Rethrow unknown errors\n    throw error;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Validation with Promises\nDESCRIPTION: This code demonstrates asynchronous validation within an Inquirer.js question. It uses a Promise to handle the asynchronous operation.  The `filter` function returns a Promise that resolves with the filtered value.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  /* Preferred way: with promise */\n  filter() {\n    return new Promise(/* etc... */);\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Awaiting Configuration for Inquirer.js Questions (JavaScript)\nDESCRIPTION: This example illustrates how to dynamically generate the message for an Inquirer.js prompt by awaiting a function call. This is useful when the prompt configuration requires fetching or calculating a value asynchronously before the question is presented to the user.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { confirm } from '@inquirer/prompts';\n\nconst answer = await confirm({ message: await getMessage() });\n```\n\n----------------------------------------\n\nTITLE: Usage with `npx` within bash scripts - Bash\nDESCRIPTION: This bash script shows how to use Inquirer prompts directly in the shell via `npx`, leveraging the `@inquirer-cli` package. It first prompts the user for their name using `@inquirer-cli/input` and then echoes a greeting. The second example demonstrates how to use `@inquirer-cli/select` for an interactive version bump.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nname=$(npx -y @inquirer-cli/input -r \"What is your name?\")\necho \"Hello, $name!\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm version $(npx -y @inquirer-cli/select -c patch -c minor -c major 'Select Version')\n```\n\n----------------------------------------\n\nTITLE: Basic Input Prompt in Inquirer.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `input` prompt from the `@inquirer/prompts` package to ask the user for their name. It imports the `input` function and uses it to display a prompt with the message 'Enter your name'. The `await` keyword ensures the code waits for the user's input before proceeding.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input } from '@inquirer/prompts';\n\nconst answer = await input({ message: 'Enter your name' });\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Confirm Prompt with Inquirer.js in Typescript\nDESCRIPTION: This code snippet demonstrates how to create a custom confirm prompt using the `createPrompt` function from `@inquirer/core`. It uses `useState`, `useKeypress`, `isEnterKey`, and `usePrefix` hooks to manage the prompt's state, handle user input, and display the prompt prefix. The prompt returns a boolean value based on the user's input or the default value if no input is provided. The snippet also shows how to use the created prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport colors from 'yoctocolors';\nimport {\n  createPrompt,\n  useState,\n  useKeypress,\n  isEnterKey,\n  usePrefix,\n  type Status,\n} from '@inquirer/core';\n\nconst confirm = createPrompt<boolean, { message: string; default?: boolean }>\n  ((config, done) => {\n    const [status, setStatus] = useState<Status>('idle');\n    const [value, setValue] = useState('');\n    const prefix = usePrefix({});\n\n    useKeypress((key, rl) => {\n      if (isEnterKey(key)) {\n        const answer = value ? /^y(es)?/i.test(value) : config.default !== false;\n        setValue(answer ? 'yes' : 'no');\n        setStatus('done');\n        done(answer);\n      } else {\n        setValue(rl.line);\n      }\n    });\n\n    let formattedValue = value;\n    let defaultValue = '';\n    if (status === 'done') {\n      formattedValue = colors.cyan(value);\n    } else {\n      defaultValue = colors.dim(config.default === false ? ' (y/N)' : ' (Y/n)');\n    }\n\n    const message = colors.bold(config.message);\n    return `${prefix} ${message}${defaultValue} ${formattedValue}`;\n  },\n);\n\n/**\n *  Which then can be used like this:\n */\nconst answer = await confirm({ message: 'Do you want to continue?' });\n```\n\n----------------------------------------\n\nTITLE: Getting answers in an object - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to collect answers from multiple Inquirer.js prompts and store them within a single object. It imports the `input` and `confirm` functions from `@inquirer/prompts`, uses `async/await` to gather the responses, and then stores the answers in an object named `answers`. This approach simplifies managing multiple question responses.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input, confirm } from '@inquirer/prompts';\n\nconst answers = {\n  firstName: await input({ message: \"What's your first name?\" }),\n  allowEmail: await confirm({ message: 'Do you allow us to send you email?' }),\n};\n\nconsole.log(answers.firstName);\n```\n\n----------------------------------------\n\nTITLE: Using Inquirer.js with nodemon - Shell\nDESCRIPTION: This shell command demonstrates how to use Inquirer.js prompts with nodemon. The `--no-stdin` flag is essential to prevent issues that can arise when running interactive prompts within nodemon. Alternatively, the built-in Node watch mode can be used which works out of the box with Inquirer.js.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nnpx nodemon ./packages/demo/demos/password.mjs --no-stdin\n```\n\n----------------------------------------\n\nTITLE: Using the editor prompt in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `editor` prompt from the `@inquirer/prompts` package. It imports the function, calls it with a message, and awaits the user's input from their default editor. The result is stored in the `answer` variable.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/editor/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { editor } from '@inquirer/prompts';\n// Or\n// import editor from '@inquirer/editor';\n\nconst answer = await editor({\n  message: 'Enter a description',\n});\n```\n\n----------------------------------------\n\nTITLE: Using useKeypress Hook (TypeScript)\nDESCRIPTION: This code illustrates how to use the `useKeypress` hook to react to user keypress events. It shows how to detect the 'enter' key and call the `done` callback to complete the prompt. It also shows how to access the prompt line value.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst input = createPrompt((config, done) => {\n  useKeypress((key) => {\n    if (key.name === 'enter') {\n      done(answer);\n    }\n  });\n\n  // ...\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst input = createPrompt((config, done) => {\n  useKeypress((key, readline) => {\n    setValue(readline.line);\n  });\n\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Action Select Prompt Example\nDESCRIPTION: An example of an action select prompt, where the user chooses an item from a list and takes an action by pressing a key.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_27\n\nLANGUAGE: null\nCODE:\n```\n? Choose a file Open <O> Edit <E> Delete <X>\n❯ image.png\n  audio.mp3\n  code.py\n```\n\n----------------------------------------\n\nTITLE: Canceling Prompt with AbortSignal (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to cancel a prompt using `AbortSignal.timeout`. It imports the `confirm` prompt and passes an `AbortSignal` with a timeout of 5000 milliseconds. If the prompt is not answered within 5 seconds, the `AbortSignal` will cancel the prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Example 1: using built-in AbortSignal utilities\nimport { confirm } from '@inquirer/prompts';\n\nconst answer = await confirm({ ... }, { signal: AbortSignal.timeout(5000) });\n```\n\n----------------------------------------\n\nTITLE: Choice Object Definition in TypeScript\nDESCRIPTION: This TypeScript code defines the structure of the `Choice` object used with the @inquirer/select package. The object includes properties for the value to be returned, the name displayed in the list, a description, a short name, and a disabled flag with optional string reason.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/select/README.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype Choice<Value> = {\n  value: Value;\n  name?: string;\n  description?: string;\n  short?: string;\n  disabled?: boolean | string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Shortcuts for Checkbox Prompt (TypeScript)\nDESCRIPTION: Illustrates the TypeScript type definition for customizing keyboard shortcuts within the checkbox prompt, allowing you to modify or disable the 'all' and 'invert' functionalities.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/checkbox/README.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype Shortcuts = {\n  all?: string | null; // default: 'a'\n  invert?: string | null; // default: 'i'\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Input Prompt (JavaScript)\nDESCRIPTION: This code imports the `input` prompt from the `@inquirer/prompts` package. This is the necessary first step to use the input prompt functionality.  It allows the developer to present an input field to the user via the command line.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Accessing Fine-Grained Callbacks in Inquirer.js\nDESCRIPTION: This code snippet shows how to access more fine-grained callbacks using the process property of the return value from inquirer.prompt.  It subscribes to the process object to handle each answer, errors, and completion events.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ninquirer.prompt(prompts).ui.process.subscribe(onEachAnswer, onError, onComplete);\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Options for Checkbox Prompt (TypeScript)\nDESCRIPTION: Presents the TypeScript type definition for theming the checkbox prompt. It allows customization of various visual aspects, including prefixes, spinners, styles, icons, and help mode.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/checkbox/README.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    defaultAnswer: (text: string) => string;\n    help: (text: string) => string;\n    highlight: (text: string) => string;\n    key: (text: string) => string;\n    disabledChoice: (text: string) => string;\n    description: (text: string) => string;\n    renderSelectedChoices: <T>(\n      selectedChoices: ReadonlyArray<Choice<T>>,\n      allChoices: ReadonlyArray<Choice<T> | Separator>,\n    ) => string;\n  };\n  icon: {\n    checked: string;\n    unchecked: string;\n    cursor: string;\n  };\n  helpMode: 'always' | 'never' | 'auto';\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Input Prompt with Inquirer.js\nDESCRIPTION: This code snippet demonstrates a basic usage of the input prompt from the @inquirer/prompts package. It imports the `input` function and uses it to ask the user for their name.  The `message` property specifies the prompt text, and the `await` keyword waits for the user's input.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input } from '@inquirer/prompts';\n\nconst answer = await input({ message: 'Enter your name' });\n```\n\n----------------------------------------\n\nTITLE: Sortable Checkbox Prompt Example\nDESCRIPTION: An example of a sortable checkbox prompt, allowing the user to reorder choices using ctrl+up/down.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_30\n\nLANGUAGE: null\nCODE:\n```\n? Which PRs and in what order would you like to merge? (Press <space> to select, <a> to toggle all, <i> to invert selection, <ctrl+up> to move item up, <ctrl+down> to move item down, and <enter> to proceed)\n❯ ◯ PR 1\n  ◯ PR 2\n  ◯ PR 3\n```\n\n----------------------------------------\n\nTITLE: TypeScript definition of the Choice object\nDESCRIPTION: This TypeScript code defines the structure of the `Choice` object used in the `search` prompt. It includes properties for `value`, `name`, `description`, `short`, and `disabled`. The `value` is returned by the prompt, `name` is displayed in the list, `description` is a longer description, `short` is used after the prompt is done, and `disabled` can prevent selection of the choice.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/search/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Choice<Value> = {\n  value: Value;\n  name?: string;\n  description?: string;\n  short?: string;\n  disabled?: boolean | string;\n};\n```\n\n----------------------------------------\n\nTITLE: Cancelling Inquirer.js prompt using AbortController\nDESCRIPTION: This example demonstrates cancelling an Inquirer.js prompt using an `AbortController`.  It creates a controller, sets a timeout, and calls `controller.abort()` to reject the prompt's promise after 5 seconds.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Example 2: implementing custom cancellation with an AbortController\nimport { confirm } from '@inquirer/prompts';\n\nconst controller = new AbortController();\nsetTimeout(() => {\n  controller.abort(); // This will reject the promise\n}, 5000);\n\nconst answer = await confirm({ ... }, { signal: controller.signal });\n```\n\n----------------------------------------\n\nTITLE: Using the password prompt in JavaScript\nDESCRIPTION: Imports and uses the password prompt from the @inquirer/prompts package to collect a password from the user. The message option configures the prompt text.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/password/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { password } from '@inquirer/prompts';\n// Or\n// import password from '@inquirer/password';\n\nconst answer = await password({ message: 'Enter your name' });\n```\n\n----------------------------------------\n\nTITLE: Theming the confirm prompt in Typescript\nDESCRIPTION: Defines a `Theme` type for customizing the appearance of the confirm prompt. This includes options for prefix, spinner, and styling different prompt states such as answer, message (idle, done, loading), and default answer.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/confirm/README.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    defaultAnswer: (text: string) => string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Prompt Signature in TypeScript for Inquirer.js\nDESCRIPTION: This code demonstrates how to define the prompt signature in TypeScript when using registerPrompt with a custom prompt. It shows two options: the easiest option using Parameters<typeof customPrompt>[0] and manually defining the prompt config.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport customPrompt from '$$$/custom-prompt';\n\ndeclare module 'inquirer' {\n  interface QuestionMap {\n    // 1. Easiest option\n    custom: Parameters<typeof customPrompt>[0];\n\n    // 2. Or manually define the prompt config\n    custom_alt: { message: string; option: number[] };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Prompt Example\nDESCRIPTION: An example of a toggle prompt, where the user confirms with a toggle by selecting a choice with the arrow keys and Enter.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_29\n\nLANGUAGE: null\nCODE:\n```\n? Do you want to continue? no / yes\n```\n\n----------------------------------------\n\nTITLE: Choice object TypeScript definition\nDESCRIPTION: TypeScript definition for the Choice object used within the choices array of the rawlist prompt. Includes properties for value, name, short, and key.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/rawlist/README.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype Choice<Value> = {\n  value: Value;\n  name?: string;\n  short?: string;\n  key?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript definition of the Theme object\nDESCRIPTION: This TypeScript code defines the structure of the `Theme` object used to customize the appearance of the search prompt. It includes properties for prefix, spinner, style, icon and helpMode, allowing modification of different aspects of the prompts visual representation. The `style` property is a nested object containing functions that format different text elements.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/search/README.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    help: (text: string) => string;\n    highlight: (text: string) => string;\n    description: (text: string) => string;\n    disabled: (text: string) => string;\n    searchTerm: (text: string) => string;\n  };\n  icon: {\n    cursor: string;\n  };\n  helpMode: 'always' | 'never' | 'auto';\n};\n```\n\n----------------------------------------\n\nTITLE: Using Inquirer.js with pre-commit hooks - JSON\nDESCRIPTION: This JSON code snippet demonstrates how to integrate Inquirer.js prompts within a `package.json` script for pre-commit hooks. It redirects the input stream to `/dev/tty` to ensure that the script runs in an interactive shell, allowing Inquirer.js to function correctly in non-interactive environments like those created by tools like Husky or lint-staged.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n  \"precommit\": \"my-script < /dev/tty\"\n```\n\n----------------------------------------\n\nTITLE: Importing Editor Prompt (JavaScript)\nDESCRIPTION: This code imports the `editor` prompt from the `@inquirer/prompts` package. This enables launching a text editor for the user to provide input.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { editor } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Using useRef Hook (TypeScript)\nDESCRIPTION: This snippet demonstrates the usage of the `useRef` hook within a custom prompt.  It's used to hold a value that isn’t used for rendering, like a timeout ID. Updating a ref does not trigger a re-render of the prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst input = createPrompt((config, done) => {\n  const timeout = useRef(null);\n\n  // ...\n\n```\n\n----------------------------------------\n\nTITLE: Default Theme Keys (TypeScript)\nDESCRIPTION: This section outlines the default theme keys available for customization within Inquirer prompts. It lists the properties of the DefaultTheme type, including options for prefixes, spinner animations, and styles for different text elements.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype DefaultTheme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    defaultAnswer: (text: string) => string;\n    help: (text: string) => string;\n    highlight: (text: string) => string;\n    key: (text: string) => string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Confirm Prompt (JavaScript)\nDESCRIPTION: This code imports the `confirm` prompt from the `@inquirer/prompts` package. This enables prompting the user with a yes/no question.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { confirm } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Theme Definition for @inquirer/editor\nDESCRIPTION: This TypeScript code defines the `Theme` type for customizing the appearance and behavior of the `@inquirer/editor` prompt.  It allows for styling the message, error, help text, and key prompts, as well as customizing the loading spinner and validation failure mode.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/editor/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    help: (text: string) => string;\n    key: (text: string) => string;\n  };\n  validationFailureMode: 'keep' | 'clear';\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript definition for Theming the expand prompt\nDESCRIPTION: This TypeScript code defines the `Theme` type used for customizing the appearance of the expand prompt. It allows customization of prefixes, spinner animations, and various text styles.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/expand/README.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    defaultAnswer: (text: string) => string;\n    highlight: (text: string) => string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Search Prompt (JavaScript)\nDESCRIPTION: This code imports the `search` prompt from the `@inquirer/prompts` package. The search prompt provides a way to search through a large dataset and select an item.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Creating a Separator in Inquirer.js\nDESCRIPTION: This code shows how to create a separator in an Inquirer.js choices array to visually separate options in a list.  A new `inquirer.Separator()` instance is created and included in the choices array.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In the question object\nchoices: [ \"Choice A\", new inquirer.Separator(), \"choice B\" ]\n```\n\n----------------------------------------\n\nTITLE: Importing Number Prompt (JavaScript)\nDESCRIPTION: This code imports the `number` prompt from the `@inquirer/prompts` package. The number prompt is used to get numerical input from the user, with built-in validation.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { number } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Using the confirm prompt in Javascript\nDESCRIPTION: Imports the `confirm` function from the `@inquirer/prompts` package and uses it to prompt the user for confirmation. The message option specifies the question to be asked.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/confirm/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { confirm } from '@inquirer/prompts';\n// Or\n// import confirm from '@inquirer/confirm';\n\nconst answer = await confirm({ message: 'Continue?' });\n```\n\n----------------------------------------\n\nTITLE: File Selector Prompt Example\nDESCRIPTION: An example of a file selector prompt, where the user can navigate directories and choose file types.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\n? Select a file:\n/main/path/\n├── folder1/\n├── folder2/\n├── folder3/\n├── file1.txt\n├── file2.pdf\n└── file3.jpg (not allowed)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nUse ↑↓ to navigate through the list\nPress <esc> to navigate to the parent directory\nPress <enter> to select a file or navigate to a directory\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with yarn\nDESCRIPTION: This command installs the `@inquirer/prompts` package using yarn. It's an alternative to npm. Make sure yarn is installed and configured.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/editor/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Cancelling Inquirer.js prompt using AbortSignal\nDESCRIPTION: This snippet shows how to cancel an Inquirer.js prompt using the built-in `AbortSignal.timeout()` utility. It sets a timeout of 5000 milliseconds (5 seconds) after which the prompt will be automatically cancelled.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Example 1: using built-in AbortSignal utilities\nimport { confirm } from '@inquirer/prompts';\n\nconst answer = await confirm({ ... }, { signal: AbortSignal.timeout(5000) });\n```\n\n----------------------------------------\n\nTITLE: Publishing New Versions\nDESCRIPTION: This command publishes new versions of the Inquirer.js packages using Lerna. This requires permissions to the npm organization and 2FA setup.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn lerna publish\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with npm\nDESCRIPTION: This command installs the `@inquirer/prompts` package using npm. It's a prerequisite for using the editor prompt. Make sure npm is installed and configured.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/editor/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: createPrompt with Typescript Generics (TypeScript)\nDESCRIPTION: This snippet illustrates how to use TypeScript generics with `createPrompt` to define the types of the resolved value and the prompt configuration.  It enhances type safety by specifying the expected types for the prompt's input and output.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// createPrompt<Value, Config>\nconst input = createPrompt<string, { message: string }>(// ...\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst answer: string = await input();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst answer = await input({\n  message: 'My question',\n});\n```\n\n----------------------------------------\n\nTITLE: Theming Type Definition\nDESCRIPTION: This TypeScript type definition outlines the structure for theming the prompt.  It allows customization of prefixes, spinner animations, and styling functions for various prompt states, enabling developers to create a visually cohesive CLI experience.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/number/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    defaultAnswer: (text: string) => string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with npm\nDESCRIPTION: This command installs the @inquirer/prompts package using npm, which is necessary to use the expand prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/expand/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Theme Object Definition in TypeScript\nDESCRIPTION: This TypeScript code defines the structure of the `Theme` object used for styling the @inquirer/select prompt. It allows customization of prefix, spinner, style functions for different parts of the prompt, icon, helpMode, and indexMode.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/select/README.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    help: (text: string) => string;\n    highlight: (text: string) => string;\n    description: (text: string) => string;\n    disabled: (text: string) => string;\n  };\n  icon: {\n    cursor: string;\n  };\n  helpMode: 'always' | 'never' | 'auto';\n  indexMode: 'hidden' | 'number';\n};\n```\n\n----------------------------------------\n\nTITLE: Using Inquirer.js with nodemon (Bash)\nDESCRIPTION: This code snippet demonstrates how to use Inquirer.js prompts with nodemon. It suggests passing the `--no-stdin` flag to nodemon to ensure everything works as expected. It also mentions that newer versions of Node.js have a built-in watch mode that works out of the box with Inquirer.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx nodemon ./packages/demo/demos/password.mjs --no-stdin\n```\n\nLANGUAGE: bash\nCODE:\n```\n# One of depending on your need\nnode --watch script.js\nnode --watch-path=packages/ packages/demo/\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with npm\nDESCRIPTION: Installs the @inquirer/prompts package using npm. This package provides interactive prompt components.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/password/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Theme Definition for @inquirer/input in TypeScript\nDESCRIPTION: This TypeScript code defines the structure for a theme object used to customize the appearance of the `@inquirer/input` prompt. It specifies types for prefix, spinner, styles, and validationFailureMode.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/input/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    defaultAnswer: (text: string) => string;\n  };\n  validationFailureMode: 'keep' | 'clear';\n};\n```\n\n----------------------------------------\n\nTITLE: Handling `ctrl+c` with global event listener - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to handle the `ExitPromptError` globally using an event listener on `process.on('uncaughtException')`. This approach allows silencing the error and providing a user-friendly message instead of the stack trace. This is especially useful for handling scenarios where the user force closes the prompt with `ctrl+c`.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.on('uncaughtException', (error) => {\n  if (error instanceof Error && error.name === 'ExitPromptError') {\n    console.log('👋 until next time!');\n  } else {\n    // Rethrow unknown errors\n    throw error;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with npm\nDESCRIPTION: Install the @inquirer/prompts package using npm. This provides the base prompts functionalities.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/checkbox/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Theme object TypeScript definition\nDESCRIPTION: TypeScript definition for the Theme object used to customize the look of the rawlist prompt. Allows customizing prefix, spinner, and styles for different prompt states.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/rawlist/README.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    highlight: (text: string) => string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Inquirer prompt with Jest\nDESCRIPTION: This test suite demonstrates how to use `@inquirer/testing` with Jest to test an input prompt. It imports the `render` function and the prompt, then uses `events.type` to simulate user input and `answer` to assert the final value.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/testing/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render } from '@inquirer/testing';\nimport input from './src/index.mjs';\n\ndescribe('input prompt', () => {\n  it('handle simple use case', async () => {\n    const { answer, events, getScreen } = await render(input, {\n      message: 'What is your name',\n    });\n\n    expect(getScreen()).toMatchInlineSnapshot(`\"? What is your name\"`);\n\n    events.type('J');\n    expect(getScreen()).toMatchInlineSnapshot(`\"? What is your name J\"`);\n\n    events.type('ohn');\n    events.keypress('enter');\n    // or events.keypress({ name: 'enter' })\n\n    await expect(answer).resolves.toEqual('John');\n    expect(getScreen()).toMatchInlineSnapshot(`\"? What is your name John\"`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Inquirer.js Prompts with NPM (Shell)\nDESCRIPTION: This command installs the Inquirer.js prompts package using the Node Package Manager (NPM). This package provides a set of interactive command-line prompts for gathering user input. It adds the `@inquirer/prompts` package as a dependency to your project.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Theme type definition\nDESCRIPTION: Defines the TypeScript type for theming the password prompt. Includes options for customizing the prefix, spinner, and styles for different states.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/password/README.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype Theme = {\n  prefix: string | { idle: string; done: string };\n  spinner: {\n    interval: number;\n    frames: string[];\n  };\n  style: {\n    answer: (text: string) => string;\n    message: (text: string, status: 'idle' | 'done' | 'loading') => string;\n    error: (text: string) => string;\n    help: (text: string) => string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Node watch mode examples - Shell\nDESCRIPTION: These shell commands demonstrate how to use the built-in Node.js watch mode, which is compatible with Inquirer.js without needing extra configuration. The watch mode automatically restarts the script when changes are detected. The second command allows for watching specific paths.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n# One of depending on your need\nnode --watch script.js\nnode --watch-path=packages/ packages/demo/\n```\n\n----------------------------------------\n\nTITLE: Waiting for config - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use an asynchronous function to generate the message for an Inquirer.js prompt. The `getMessage()` function presumably fetches or computes the message asynchronously before it's passed to the `confirm` prompt. This allows for dynamic prompt messages that depend on external data or computations.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { confirm } from '@inquirer/prompts';\n\nconst answer = await confirm({ message: await getMessage() });\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Validation with this.async()\nDESCRIPTION: This code snippet shows how to perform asynchronous validation in Inquirer.js using the legacy `this.async()` method. The `validate` function declares itself as asynchronous, obtains a `done` callback using `this.async()`, performs an asynchronous operation (simulated with `setTimeout`), and then calls `done` with either an error message or `true` to indicate validation success. It's the older approach compared to using Promises.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  /* Legacy way: with this.async */\n  validate: function (input) {\n    // Declare function as asynchronous, and save the done callback\n    const done = this.async();\n\n    // Do async stuff\n    setTimeout(function() {\n      if (typeof input !== 'number') {\n        // Pass the return value in the done callback\n        done('You need to provide a number');\n      } else {\n        // Pass the return value in the done callback\n        done(null, true);\n      }\n    }, 3000);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Inquirer.js via npm\nDESCRIPTION: This command installs the Inquirer.js package using npm, the Node.js package manager. It adds Inquirer.js to your project's dependencies, allowing you to use it in your Node.js applications for creating interactive command-line interfaces.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install inquirer\n```\n\n----------------------------------------\n\nTITLE: TypeScript signature for the source function\nDESCRIPTION: This TypeScript code defines the type signature for the `source` function used in the `search` prompt. It takes a `term` (string or void) and an options object containing an `AbortSignal`. It returns a promise that resolves to an array of `Choice` or `Separator` objects. This signal can be used to cancel ongoing network calls.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/search/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction(\n  term: string | void,\n  opt: { signal: AbortSignal },\n): Promise<ReadonlyArray<Choice<Value> | Separator>>;\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts package with yarn\nDESCRIPTION: This command installs the @inquirer/prompts package using yarn. This is likely a prerequisite for using the @inquirer/search package.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/search/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Rendering Function with done Callback (TypeScript)\nDESCRIPTION: This example illustrates the basic structure of a rendering function within `createPrompt`.  It shows how to return a string to be displayed as the prompt and how to use the `done` callback to complete the prompt and return the answer.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst input = createPrompt((config, done) => {\n  const [value, setValue] = useState();\n\n  useKeypress((key, readline) => {\n    if (key.name === 'enter') {\n      done(answer);\n    } else {\n      setValue(readline.line);\n    }\n  });\n\n  return `? ${config.message} ${value}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Inquirer.js Prompts with Yarn (Shell)\nDESCRIPTION: This command installs the Inquirer.js prompts package using Yarn, another popular JavaScript package manager.  This provides an alternative way to add Inquirer.js prompts to your project. Yarn manages dependencies and provides consistent installation across different environments.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Table Multiple Prompt Example\nDESCRIPTION: An example of a table multiple prompt, where a user selects multiple answers from a table display using the spacebar.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nChoose between choices? (Press <space> to select, <Up and Down> to move rows,\n<Left and Right> to move columns)\n\n┌──────────┬───────┬───────┐\n│ 1-2 of 2 │ Yes?  │ No?   |\n├──────────┼───────┼───────┤\n│ Choice 1 │ [ ◯ ] │   ◯   |\n├──────────┼───────┼───────┤\n│ Choice 2 │   ◯   │   ◯   |\n└──────────┴───────┴───────┘\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with Yarn\nDESCRIPTION: Installs the @inquirer/prompts package using Yarn, which contains the confirm prompt and other related prompts. This offers an alternative package manager installation method.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/confirm/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Installing Inquirer.js Prompts with yarn\nDESCRIPTION: This command installs the @inquirer/prompts package using yarn, adding it as a dependency to your project. It provides interactive command-line prompts for Node.js applications.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Advanced Inquirer.js usage with custom streams\nDESCRIPTION: This code snippet demonstrates advanced usage of Inquirer.js by customizing the input and output streams and clearing the prompt after completion. It shows how to use the `confirm` prompt with custom `output` stream and `clearPromptOnDone` option.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { confirm } from '@inquirer/prompts';\n\nconst allowEmail = await confirm(\n  { message: 'Do you allow us to send you email?' },\n  {\n    output: new Stream.Writable({\n      write(chunk, _encoding, next) {\n        // Do something\n        next();\n      },\n    }),\n    clearPromptOnDone: true,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with yarn\nDESCRIPTION: This command installs the @inquirer/prompts package using yarn. This package contains common prompt functionalities used by @inquirer/select and other inquirer prompts.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/select/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Importing Raw List Prompt from Inquirer.js\nDESCRIPTION: This line imports the `rawlist` function from the `@inquirer/prompts` package.  It's used to create a raw list prompt, presenting options with numbered choices for the user to select from.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { rawlist } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/core with Yarn\nDESCRIPTION: This command installs the @inquirer/core package using Yarn. This is an alternative to npm for installing JavaScript packages.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/core\n```\n\n----------------------------------------\n\nTITLE: Using Inquirer.js with pre-commit/git hooks (JSON)\nDESCRIPTION: This code snippet shows how to run Inquirer.js prompts in a pre-commit hook environment using husky or lint-staged.  It ensures that the script is run with a tty (interactive input stream) by redirecting the input from `/dev/tty` within the `package.json` file. This is required because scripts run from tools like husky/lint-staged might not run inside an interactive shell.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n  \"precommit\": \"my-script < /dev/tty\"\n```\n\n----------------------------------------\n\nTITLE: Importing Number Prompt from Inquirer.js\nDESCRIPTION: This line imports the `number` function from the `@inquirer/prompts` package. This creates a numeric input prompt, validating that the user enters a valid number.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { number } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/confirm with npm\nDESCRIPTION: Installs only the @inquirer/confirm package using npm. This is a more specific installation method if you only need the confirm prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/confirm/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/confirm\n```\n\n----------------------------------------\n\nTITLE: Using Inquirer.js with pre-commit/git hooks (Bash)\nDESCRIPTION: This code snippet shows how to run Inquirer.js prompts in a pre-commit hook environment using husky or lint-staged.  It ensures that the script is run with a tty (interactive input stream) by redirecting the input from `/dev/tty` within a shell script file. This is required because scripts run from tools like husky/lint-staged might not run inside an interactive shell.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nexec < /dev/tty\n\nnode my-script.js\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with yarn\nDESCRIPTION: Installs the @inquirer/prompts package using yarn. This package provides interactive prompt components.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/password/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Installing Inquirer.js Prompts with npm\nDESCRIPTION: This command installs the @inquirer/prompts package using npm, adding it as a dependency to your project.  It allows you to use interactive command-line prompts in your Node.js applications.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Prompt from Inquirer.js\nDESCRIPTION: This line imports the `checkbox` function from the `@inquirer/prompts` package. The checkbox prompt allows users to select multiple options from a list in the command line.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { checkbox } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/confirm with Yarn\nDESCRIPTION: Installs only the @inquirer/confirm package using Yarn. This is a more specific installation method if you only need the confirm prompt and prefer using Yarn.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/confirm/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/confirm\n```\n\n----------------------------------------\n\nTITLE: Type Checking\nDESCRIPTION: This command runs the TypeScript compiler to perform type checking on the Inquirer.js project.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn tsc\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with npm\nDESCRIPTION: This command installs the @inquirer/prompts package using npm. This package likely contains common prompt functionalities used by @inquirer/select and other inquirer prompts.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/select/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with npm\nDESCRIPTION: This command installs the `@inquirer/prompts` package using npm, a package manager for JavaScript. This provides a collection of common interactive prompts for command-line interfaces.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/input/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Run Test Suite\nDESCRIPTION: These commands execute the test suite for Inquirer.js using Vitest. The first command runs all tests, while the second runs Vitest in watch mode with UI and coverage reporting.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn vitest\n\n# or\nyarn vitest --ui --coverage\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/password with yarn\nDESCRIPTION: Installs the @inquirer/password package using yarn. This package provides the password prompt component.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/password/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/password\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/core with npm\nDESCRIPTION: This command installs the @inquirer/core package using npm. This is the first step in using the library to create custom Inquirer prompts.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/core/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/core\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with yarn\nDESCRIPTION: This command installs the `@inquirer/prompts` package using yarn, another package manager for JavaScript. It installs a set of interactive prompts used in command-line tools.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/input/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Linting\nDESCRIPTION: These commands run ESLint and Prettier to lint and format the code in the Inquirer.js project.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn eslint . --fix\nyarn prettier --write .\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/search package with yarn\nDESCRIPTION: This command installs the @inquirer/search package using yarn. This package provides an interactive search prompt for command line interfaces.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/search/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @inquirer/search\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/input with npm\nDESCRIPTION: This command installs the `@inquirer/input` package using npm. This provides a specific input prompt for command-line interfaces.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/input/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/input\n```\n\n----------------------------------------\n\nTITLE: Running Demos\nDESCRIPTION: These commands start the TypeScript compiler in watch mode and then run the Inquirer.js demos.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# This command will launch tsc in watch mode\nyarn dev\n\n# Then run the demos\nyarn demo\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/checkbox with yarn\nDESCRIPTION: Install the @inquirer/checkbox package using yarn. This provides checkbox prompt functionalities.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/checkbox/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/checkbox\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/password with npm\nDESCRIPTION: Installs the @inquirer/password package using npm. This package provides the password prompt component.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/password/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/password\n```\n\n----------------------------------------\n\nTITLE: Running Inquirer.js Demo (Shell)\nDESCRIPTION: This command executes the latest version of the Inquirer.js demo directly in your terminal. It's a quick way to see Inquirer.js prompts in action without needing to install anything locally. It utilizes `npx` to download and run the demo package.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @inquirer/demo@latest\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/rawlist with yarn\nDESCRIPTION: Install the @inquirer/rawlist package using yarn. This package provides the rawlist prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/rawlist/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/rawlist\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts package with npm\nDESCRIPTION: This command installs the @inquirer/prompts package using npm. This is likely a prerequisite for using the @inquirer/search package.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/search/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with npm\nDESCRIPTION: Install the @inquirer/prompts package using npm. This is the base package that contains the rawlist prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/rawlist/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/testing with yarn\nDESCRIPTION: This command installs the `@inquirer/testing` package as a development dependency using yarn. It provides the necessary functions and utilities for testing Inquirer prompts in your project.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/testing/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/testing --dev\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/editor with yarn\nDESCRIPTION: This command installs the `@inquirer/editor` package using yarn. It provides the functionality to use external editors from the command line. Make sure yarn is installed and configured.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/editor/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @inquirer/editor\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with npm\nDESCRIPTION: Installs the @inquirer/prompts package using npm, which contains the confirm prompt and other related prompts. This is one way to install the package, offering a broader set of prompts.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/confirm/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/expand with npm\nDESCRIPTION: This command installs the @inquirer/expand package directly using npm, providing the expand prompt functionality.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/expand/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/expand\n```\n\n----------------------------------------\n\nTITLE: Enable Corepack and Install Yarn\nDESCRIPTION: This snippet enables Corepack and installs Yarn, which are required for managing dependencies in Inquirer.js.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncorepack enable\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing with npm\nDESCRIPTION: This command installs the @inquirer/prompts package using npm.  It adds the package and its dependencies to your project's node_modules directory and updates your package.json file.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/number/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Importing Input Prompt from Inquirer.js\nDESCRIPTION: This line imports the `input` function from the `@inquirer/prompts` package. This function is used to create an input prompt, allowing users to enter text-based responses in the command line.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { input } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing Inquirer.js via yarn\nDESCRIPTION: This command installs the Inquirer.js package using yarn, another Node.js package manager.  It adds Inquirer.js to your project's dependencies.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add inquirer\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with Yarn\nDESCRIPTION: This command installs the @inquirer/prompts package using Yarn, which is necessary to use the expand prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/expand/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Importing Select Prompt from Inquirer.js\nDESCRIPTION: This line imports the `select` function from the `@inquirer/prompts` package. This function is used to create a select prompt, allowing users to choose an option from a list in the command line.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { select } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with yarn\nDESCRIPTION: Install the @inquirer/prompts package using yarn. This provides the base prompts functionalities.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/checkbox/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Confirm Prompt with Context Options (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `confirm` prompt with context options to customize the input and output streams, and clear the prompt after completion.  It shows how to provide a custom `output` stream and set `clearPromptOnDone` to true.  It uses Stream.Writable to define a writeable stream.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { confirm } from '@inquirer/prompts';\n\nconst allowEmail = await confirm(\n  { message: 'Do you allow us to send you email?' },\n  {\n    output: new Stream.Writable({\n      write(chunk, _encoding, next) {\n        // Do something\n        next();\n      },\n    }),\n    clearPromptOnDone: true,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/search package with npm\nDESCRIPTION: This command installs the @inquirer/search package using npm. This package provides an interactive search prompt for command line interfaces.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/search/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @inquirer/search\n```\n\n----------------------------------------\n\nTITLE: Importing Confirm Prompt from Inquirer.js\nDESCRIPTION: This line imports the `confirm` function from the `@inquirer/prompts` package. The confirm prompt presents a yes/no question to the user.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { confirm } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/expand with Yarn\nDESCRIPTION: This command installs the @inquirer/expand package directly using Yarn, providing the expand prompt functionality.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/expand/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/expand\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/testing with npm\nDESCRIPTION: This command installs the `@inquirer/testing` package as a development dependency using npm. It allows you to use the testing utilities in your project.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/testing/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/testing --save-dev\n```\n\n----------------------------------------\n\nTITLE: Importing Search Prompt from Inquirer.js\nDESCRIPTION: This line imports the `search` function from the `@inquirer/prompts` package. This function provides a search-based prompt where users can type to filter a list of options.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/rawlist with npm\nDESCRIPTION: Install the @inquirer/rawlist package using npm. This package provides the rawlist prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/rawlist/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/rawlist\n```\n\n----------------------------------------\n\nTITLE: Importing Select Prompt (JavaScript)\nDESCRIPTION: This code imports the `select` prompt from the `@inquirer/prompts` package. This allows the developer to create a selection list for the user to choose from in the command line.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/prompts/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { select } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Importing Password Prompt from Inquirer.js\nDESCRIPTION: This line imports the `password` function from the `@inquirer/prompts` package. This function is used to create a password prompt, which hides the user's input as they type.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { password } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/checkbox with npm\nDESCRIPTION: Install the @inquirer/checkbox package using npm. This provides checkbox prompt functionalities.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/checkbox/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/checkbox\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/editor with npm\nDESCRIPTION: This command installs the `@inquirer/editor` package using npm.  This prompt is specifically designed for launching external editors from the command line.  Make sure npm is installed and configured.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/editor/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @inquirer/editor\n```\n\n----------------------------------------\n\nTITLE: Importing Expand Prompt from Inquirer.js\nDESCRIPTION: This line imports the `expand` function from the `@inquirer/prompts` package. This function creates an expand prompt, presenting a list of options with a default option and an 'help' option to expand the list.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expand } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/input with yarn\nDESCRIPTION: This command installs the `@inquirer/input` package using yarn. Yarn is used as a package manager alternative to npm for JavaScript projects. It installs the free-text input prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/input/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/input\n```\n\n----------------------------------------\n\nTITLE: TypeScript definition of Choice object for expand prompt\nDESCRIPTION: This TypeScript snippet shows the type definition of the Choice object used in the expand prompt.  It specifies that a Choice object must have a `value` of type Value, an optional `name` of type string and a `key` of type string.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/expand/README.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype Choice<Value> = {\n  value: Value;\n  name?: string;\n  key: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Editor Prompt from Inquirer.js\nDESCRIPTION: This line imports the `editor` function from the `@inquirer/prompts` package. This function launches the user's preferred editor on a temporary file, and the content of the file after editing is used as the answer.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { editor } from '@inquirer/prompts';\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/select with npm\nDESCRIPTION: This command installs the @inquirer/select package using npm. @inquirer/select provides an interactive command-line prompt for displaying a list of choices (single select.)\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/select/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/select\n```\n\n----------------------------------------\n\nTITLE: Running Inquirer.js Examples\nDESCRIPTION: These commands execute example scripts located in the `packages/inquirer/examples/` directory of the Inquirer.js repository. They use `yarn node` to run the JavaScript files, demonstrating different interactive command-line interfaces.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/inquirer/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nyarn node packages/inquirer/examples/pizza.js\nyarn node packages/inquirer/examples/checkbox.js\n# etc...\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/select with yarn\nDESCRIPTION: This command installs the @inquirer/select package using yarn. @inquirer/select provides an interactive command-line prompt for displaying a list of choices (single select.)\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/select/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/select\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/number with npm\nDESCRIPTION: This command installs the @inquirer/number package using npm.  It adds the package and its dependencies to your project's node_modules directory and updates your package.json file.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/number/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inquirer/number\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/number with yarn\nDESCRIPTION: This command installs the @inquirer/number package using yarn. It adds the package and its dependencies to your project's node_modules directory and updates your yarn.lock file.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/number/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/number\n```\n\n----------------------------------------\n\nTITLE: Installing with yarn\nDESCRIPTION: This command installs the @inquirer/prompts package using yarn. It adds the package and its dependencies to your project's node_modules directory and updates your yarn.lock file.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/number/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```\n\n----------------------------------------\n\nTITLE: Installing @inquirer/prompts with yarn\nDESCRIPTION: Install the @inquirer/prompts package using yarn. This is the base package that contains the rawlist prompt.\nSOURCE: https://github.com/sboudrias/inquirer.js/blob/main/packages/rawlist/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @inquirer/prompts\n```"
  }
]