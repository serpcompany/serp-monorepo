[
  {
    "owner": "rckprtr",
    "repo": "pumpdotfun-sdk",
    "content": "TITLE: Complete PumpFunSDK Usage Example\nDESCRIPTION: Comprehensive example showing token creation, buying, and selling using PumpFunSDK. Includes environment setup, account management, and transaction handling.\nSOURCE: https://github.com/rckprtr/pumpdotfun-sdk/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport dotenv from \"dotenv\";\nimport { Connection, Keypair, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { DEFAULT_DECIMALS, PumpFunSDK } from \"pumpdotfun-sdk\";\nimport NodeWallet from \"@coral-xyz/anchor/dist/cjs/nodewallet\";\nimport { AnchorProvider } from \"@coral-xyz/anchor\";\nimport {\n  getOrCreateKeypair,\n  getSPLBalance,\n  printSOLBalance,\n  printSPLBalance,\n} from \"./util\";\n\ndotenv.config();\n\nconst KEYS_FOLDER = __dirname + \"/.keys\";\nconst SLIPPAGE_BASIS_POINTS = 100n;\n\nconst getProvider = () => {\n  if (!process.env.HELIUS_RPC_URL) {\n    throw new Error(\"Please set HELIUS_RPC_URL in .env file\");\n  }\n\n  const connection = new Connection(process.env.HELIUS_RPC_URL || \"\");\n  const wallet = new NodeWallet(new Keypair());\n  return new AnchorProvider(connection, wallet, { commitment: \"finalized\" });\n};\n\nconst createAndBuyToken = async (sdk, testAccount, mint) => {\n  const tokenMetadata = {\n    name: \"TST-7\",\n    symbol: \"TST-7\",\n    description: \"TST-7: This is a test token\",\n    filePath: \"example/basic/random.png\",\n  };\n\n  const createResults = await sdk.createAndBuy(\n    testAccount,\n    mint,\n    tokenMetadata,\n    BigInt(0.0001 * LAMPORTS_PER_SOL),\n    SLIPPAGE_BASIS_POINTS,\n    {\n      unitLimit: 250000,\n      unitPrice: 250000,\n    }\n  );\n\n  if (createResults.success) {\n    console.log(\"Success:\", `https://pump.fun/${mint.publicKey.toBase58()}`);\n    printSPLBalance(sdk.connection, mint.publicKey, testAccount.publicKey);\n  } else {\n    console.log(\"Create and Buy failed\");\n  }\n};\n\nconst buyTokens = async (sdk, testAccount, mint) => {\n  const buyResults = await sdk.buy(\n    testAccount,\n    mint.publicKey,\n    BigInt(0.0001 * LAMPORTS_PER_SOL),\n    SLIPPAGE_BASIS_POINTS,\n    {\n      unitLimit: 250000,\n      unitPrice: 250000,\n    }\n  );\n\n  if (buyResults.success) {\n    printSPLBalance(sdk.connection, mint.publicKey, testAccount.publicKey);\n    console.log(\"Bonding curve after buy\", await sdk.getBondingCurveAccount(mint.publicKey));\n  } else {\n    console.log(\"Buy failed\");\n  }\n};\n\nconst sellTokens = async (sdk, testAccount, mint) => {\n  const currentSPLBalance = await getSPLBalance(\n    sdk.connection,\n    mint.publicKey,\n    testAccount.publicKey\n  );\n  console.log(\"currentSPLBalance\", currentSPLBalance);\n\n  if (currentSPLBalance) {\n    const sellResults = await sdk.sell(\n      testAccount,\n      mint.publicKey,\n      BigInt(currentSPLBalance * Math.pow(10, DEFAULT_DECIMALS)),\n      SLIPPAGE_BASIS_POINTS,\n      {\n        unitLimit: 250000,\n        unitPrice: 250000,\n      }\n    );\n\n    if (sellResults.success) {\n      await printSOLBalance(sdk.connection, testAccount.publicKey, \"Test Account keypair\");\n      printSPLBalance(sdk.connection, mint.publicKey, testAccount.publicKey, \"After SPL sell all\");\n      console.log(\"Bonding curve after sell\", await sdk.getBondingCurveAccount(mint.publicKey));\n    } else {\n      console.log(\"Sell failed\");\n    }\n  }\n};\n\nconst main = async () => {\n  try {\n    const provider = getProvider();\n    const sdk = new PumpFunSDK(provider);\n    const connection = provider.connection;\n\n    const testAccount = getOrCreateKeypair(KEYS_FOLDER, \"test-account\");\n    const mint = getOrCreateKeypair(KEYS_FOLDER, \"mint\");\n\n    await printSOLBalance(connection, testAccount.publicKey, \"Test Account keypair\");\n\n    const globalAccount = await sdk.getGlobalAccount();\n    console.log(globalAccount);\n\n    const currentSolBalance = await connection.getBalance(testAccount.publicKey);\n    if (currentSolBalance === 0) {\n      console.log(\"Please send some SOL to the test-account:\", testAccount.publicKey.toBase58());\n      return;\n    }\n\n    console.log(await sdk.getGlobalAccount());\n\n    let bondingCurveAccount = await sdk.getBondingCurveAccount(mint.publicKey);\n    if (!bondingCurveAccount) {\n      await createAndBuyToken(sdk, testAccount, mint);\n      bondingCurveAccount = await sdk.getBondingCurveAccount(mint.publicKey);\n    }\n\n    if (bondingCurveAccount) {\n      await buyTokens(sdk, testAccount, mint);\n      await sellTokens(sdk, testAccount, mint);\n    }\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n  }\n};\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Initializing PumpDotFun SDK with Event Listeners in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the PumpDotFun SDK with a Solana connection, set up a provider, and subscribe to multiple events (createEvent, tradeEvent, and completeEvent). It requires environment variables for the Helius RPC URL.\nSOURCE: https://github.com/rckprtr/pumpdotfun-sdk/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport dotenv from \"dotenv\";\nimport { Connection, Keypair } from \"@solana/web3.js\";\nimport { PumpFunSDK } from \"pumpdotfun-sdk\";\nimport NodeWallet from \"@coral-xyz/anchor/dist/cjs/nodewallet\";\nimport { AnchorProvider } from \"@coral-xyz/anchor\";\n\ndotenv.config();\n\nconst getProvider = () => {\n  if (!process.env.HELIUS_RPC_URL) {\n    throw new Error(\"Please set HELIUS_RPC_URL in .env file\");\n  }\n\n  const connection = new Connection(process.env.HELIUS_RPC_URL || \"\");\n  const wallet = new NodeWallet(new Keypair());\n  return new AnchorProvider(connection, wallet, { commitment: \"finalized\" });\n};\n\nconst setupEventListeners = async (sdk) => {\n  const createEventId = sdk.addEventListener(\"createEvent\", (event, slot, signature) => {\n    console.log(\"createEvent\", event, slot, signature);\n  });\n  console.log(\"Subscribed to createEvent with ID:\", createEventId);\n\n  const tradeEventId = sdk.addEventListener(\"tradeEvent\", (event, slot, signature) => {\n    console.log(\"tradeEvent\", event, slot, signature);\n  });\n  console.log(\"Subscribed to tradeEvent with ID:\", tradeEventId);\n\n  const completeEventId = sdk.addEventListener(\"completeEvent\", (event, slot, signature) => {\n    console.log(\"completeEvent\", event, slot, signature);\n  });\n  console.log(\"Subscribed to completeEvent with ID:\", completeEventId);\n};\n\nconst main = async () => {\n  try {\n    const provider = getProvider();\n    const sdk = new PumpFunSDK(provider);\n\n    // Set up event listeners\n    await setupEventListeners(sdk);\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n  }\n};\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: PumpFunSDK CreateAndBuy Method Definition\nDESCRIPTION: Method signature and parameters for creating and buying tokens in a single transaction.\nSOURCE: https://github.com/rckprtr/pumpdotfun-sdk/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync createAndBuy(\n  creator: Keypair,\n  mint: Keypair,\n  createTokenMetadata: CreateTokenMetadata,\n  buyAmountSol: bigint,\n  slippageBasisPoints: bigint = 500n,\n  priorityFees?: PriorityFee,\n  commitment: Commitment = DEFAULT_COMMITMENT,\n  finality: Finality = DEFAULT_FINALITY\n): Promise<TransactionResult>\n```\n\n----------------------------------------\n\nTITLE: PumpFunSDK Event Listener Methods\nDESCRIPTION: Methods for adding and removing event listeners for the SDK.\nSOURCE: https://github.com/rckprtr/pumpdotfun-sdk/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\naddEventListener<T extends PumpFunEventType>(\n  eventType: T,\n  callback: (event: PumpFunEventHandlers[T], slot: number, signature: string) => void\n): number\n\nremoveEventListener(eventId: number): void\n```\n\n----------------------------------------\n\nTITLE: PumpFunSDK Buy Method Definition\nDESCRIPTION: Method signature and parameters for buying existing tokens.\nSOURCE: https://github.com/rckprtr/pumpdotfun-sdk/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync buy(\n  buyer: Keypair,\n  mint: PublicKey,\n  buyAmountSol: bigint,\n  slippageBasisPoints: bigint = 500n,\n  priorityFees?: PriorityFee,\n  commitment: Commitment = DEFAULT_COMMITMENT,\n  finality: Finality = DEFAULT_FINALITY\n): Promise<TransactionResult>\n```\n\n----------------------------------------\n\nTITLE: PumpFunSDK Sell Method Definition\nDESCRIPTION: Method signature and parameters for selling tokens.\nSOURCE: https://github.com/rckprtr/pumpdotfun-sdk/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync sell(\n  seller: Keypair,\n  mint: PublicKey,\n  sellTokenAmount: bigint,\n  slippageBasisPoints: bigint = 500n,\n  priorityFees?: PriorityFee,\n  commitment: Commitment = DEFAULT_COMMITMENT,\n  finality: Finality = DEFAULT_FINALITY\n): Promise<TransactionResult>\n```\n\n----------------------------------------\n\nTITLE: Running the PumpDotFun SDK Event Listener Example with ts-node\nDESCRIPTION: Command to execute the TypeScript event listener example using ts-node. This command runs the event subscription example that listens for create, trade, and complete events from the PumpDotFun SDK.\nSOURCE: https://github.com/rckprtr/pumpdotfun-sdk/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node example/events/events.ts\n```\n\n----------------------------------------\n\nTITLE: Running Examples with ts-node\nDESCRIPTION: Command to execute the basic example script that demonstrates token creation, buying, and selling.\nSOURCE: https://github.com/rckprtr/pumpdotfun-sdk/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node example/basic/index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing PumpDotFunSDK via NPM\nDESCRIPTION: Simple npm installation command for the PumpDotFunSDK package.\nSOURCE: https://github.com/rckprtr/pumpdotfun-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i pumpdotfun-sdk\n```"
  }
]