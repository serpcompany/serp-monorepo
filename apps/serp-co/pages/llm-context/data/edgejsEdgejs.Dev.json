[
  {
    "owner": "edge-js",
    "repo": "edgejs.dev",
    "content": "TITLE: Basic Variable Output in Edge.js\nDESCRIPTION: Demonstrates the basic syntax for outputting a variable in Edge templates. This example shows how to display a user's username using double curly braces for variable interpolation.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/introduction.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\nHello {{ user.username }}!\n```\n\n----------------------------------------\n\nTITLE: Basic Edge.js Server Setup\nDESCRIPTION: Example of setting up Edge.js with Node.js HTTP server, including template mounting and rendering\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/getting_started.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Edge } from 'edge.js'\nimport { createServer } from 'node:http'\n\nconst edge = Edge.create()\nedge.mount(new URL('./views', import.meta.url))\n\nconst server = createServer(async (req, res) => {\n  const data = { username: 'virk' }\n  const html = await edge.render('home', data)\n\n  res.setHeader('content-type', 'text/html')\n  res.end(html)\n})\n\nserver.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Defining Global State in Edge.js\nDESCRIPTION: Example of setting global state using edge.global() method to share config data across all templates and components.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/templates_state.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nedge.global('config', {\n  colorScheme: 'dark',\n  menu: [],\n  socialLinks: [],\n})\n```\n\nLANGUAGE: edge\nCODE:\n```\n<html class=\"{{ config.colorScheme }}\">\n  <head>\n  <head>\n\n  <body>\n    <header>\n      @each(item in config.menu)\n      @end\n    </header>\n\n    <footer>\n      @each(link in config.socialLinks)\n      @end\n    </footer>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Edge.js\nDESCRIPTION: Shows how to implement conditional logic in Edge templates. This example checks if a user has a subscription and displays different messages based on the condition.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/introduction.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n@if(user.hasSubscription)\n  Hurray! You have access to over 280 videos.\n@else\n  Videos are available only to subscribers.\n@end\n```\n\n----------------------------------------\n\nTITLE: If-ElseIf-Else Condition in Edge\nDESCRIPTION: Demonstrates a complete if-elseif-else conditional block for handling different user name display scenarios.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/conditionals.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@if(user.fullName)\n  <p> Hello {{ user.fullName }}! </p>\n@elseif(user.firstName)\n  <p> Hello {{ user.firstName }}! </p>\n@else\n  <p> Hello Guest! </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Button Component in Edge.js\nDESCRIPTION: Demonstrates creating a simple button component with customizable type and text properties.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/introduction.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n<button type=\"{{ type || 'submit' }}\"> {{ text }} </button>\n```\n\n----------------------------------------\n\nTITLE: Async/Await Support in Edge.js\nDESCRIPTION: Demonstrates Edge's support for asynchronous operations using async/await. This example fetches user payments asynchronously and displays the count of payments made.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/introduction.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@let(payments = await user.getPayments())\nYou have made {{ payments.length }} payments so far.\n```\n\n----------------------------------------\n\nTITLE: Edge.js Disk Mounting\nDESCRIPTION: Examples of mounting single and multiple template directories\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/getting_started.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst BASE_URL = new URL('./', import.meta.url)\n\nedge.mount(new URL('views', BASE_URL))\n\nawait edge.render('home')\nawait edge.render('pages/posts/index')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst BASE_URL = new URL('./', import.meta.url)\n\nedge.mount(\n  'elegant',\n  new URL('themes/elegant', BASE_URL)\n)\n\nedge.mount(\n  'classic',\n  new URL('themes/classic', BASE_URL)\n)\n\nedge.mount(\n  'mono',\n  new URL('themes/mono', BASE_URL)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Local State in Edge.js\nDESCRIPTION: Shows how to create isolated renderer instances with separate local state using edge.createRenderer() and share() method.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/templates_state.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst templ1 = edge.createRenderer()\nconst templ2 = edge.createRenderer()\n\ntempl1.share({\n  url: '/posts',\n})\n\ntempl2.share({\n  url: '/posts/1',\n})\n\nawait templ1.renderRaw('{{ url }}') // /posts\nawait templ2.renderRaw('{{ url }}') // /posts/1\n```\n\n----------------------------------------\n\nTITLE: Using Edge.js Components in Templates\nDESCRIPTION: Shows how to use components within templates using the @component tag with props.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/introduction.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n<form>\n  @!component('components/button', { text: 'Login' })\n  @!component('components/button', { text: 'Cancel', type: 'reset' })\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic Edge Template\nDESCRIPTION: Example of a basic Edge.js template file with variable interpolation\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/getting_started.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n</head>\n<body>\n  <h1>\n    Hello {{ username }}\n  </h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Merge Props with Button Component\nDESCRIPTION: Example of merging props with default values in a button component and its rendered output.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/props.md#2025-04-19_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n<button {{ $props.merge({ type: 'text' }).toAttrs() }}>\n</button>\n```\n\nLANGUAGE: edge\nCODE:\n```\n@!component('components/button', { type: 'reset' })\n```\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"reset\">\n</button>\n```\n\n----------------------------------------\n\nTITLE: Serializing Props to HTML Attributes\nDESCRIPTION: Using the $props.toAttrs() method to automatically serialize all props to HTML attributes.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/props.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<input {{ $props.toAttrs() }} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Props in Edge.js\nDESCRIPTION: Demonstrates different ways to access component properties within templates.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/introduction.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n{{ type }}\n{{ class }}\n{{ text }}\n```\n\nLANGUAGE: edge\nCODE:\n```\n{{ $props.get('type') }}\n{{ $props.get('class') }}\n{{ $props.get('text') }}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Variables in Edge.js Templates\nDESCRIPTION: Demonstrates the usage of inline variables with @let and @assign tags within Edge templates.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/templates_state.md#2025-04-19_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@let(config = await loadConfig())\n\n{{ config.someKey }}\n```\n\nLANGUAGE: edge\nCODE:\n```\n{{-- Define variable --}}\n@let(total = 0)\n\n<ul>\n  @each(item in items)\n    {{-- Re-assign it a new value --}}\n    @assign(total = total + item.price)\n    <li> {{ item.name }} = {{ item.price }} </li>\n  @end\n\n  <li> Gross total = {{ total }} </li>\n<ul>\n```\n\n----------------------------------------\n\nTITLE: Using Global Functions in Edge.js\nDESCRIPTION: Demonstrates how to define and use global functions in Edge templates for async operations.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/templates_state.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nedge.global('findUser', async function (id) {\n  return User.findById(id)\n})\n```\n\nLANGUAGE: edge\nCODE:\n```\n@let(user = await findUser(1))\n{{ user.username }}\n```\n\n----------------------------------------\n\nTITLE: Basic Interpolation in EdgeJS\nDESCRIPTION: Shows basic usage of interpolation with double curly braces for embedding JavaScript expressions in Edge templates.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\nHello {{ username }}!\n```\n\n----------------------------------------\n\nTITLE: Examples of Invalid and Valid @if Tag Syntax\nDESCRIPTION: Compares invalid and valid syntax for the @if tag in Edge templates. Shows the importance of proper formatting and syntax requirements for Edge tags.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_18\n\nLANGUAGE: edge\nCODE:\n```\n@if\n(\nusername\n)\n```\n\nLANGUAGE: edge\nCODE:\n```\n@if(username)\n```\n\nLANGUAGE: edge\nCODE:\n```\n@if(username) Hello @endif\n```\n\nLANGUAGE: edge\nCODE:\n```\n@if(username)\n  Hello\n@end\n```\n\nLANGUAGE: edge\nCODE:\n```\n@if(\n  username\n) <p> Hello </p>\n@endif\n```\n\nLANGUAGE: edge\nCODE:\n```\n@if(\n  username\n)\n  <p> Hello </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Basic Array Iteration with @each Tag in Edge.js\nDESCRIPTION: Demonstrates how to loop through an array of users to render a list of usernames. This uses the basic form of the @each tag which provides access to each element in the array.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/loops.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@each(user in users)\n  <li> {{ user.username }} </li>\n@end\n```\n\n----------------------------------------\n\nTITLE: Loops with Fallback Content using @else in Edge.js\nDESCRIPTION: Shows how to provide fallback content when looping over empty arrays or undefined values. The @else tag defines content that displays only when the collection has no items to iterate over.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/loops.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@each(comment in post.comments)\n  @include('partials/comment')\n@else\n  <p> This post has not received any comments </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: JavaScript Expression Examples in EdgeJS\nDESCRIPTION: Demonstrates various JavaScript expressions that can be used within interpolation blocks, including property access, method calls, arithmetic, and async expressions.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n{{ user.username }}\n{{ user.username.toUpperCase() }}\n{{ (2 + 2) * 3 }}\n{{ (await getUser()).username }}\n```\n\n----------------------------------------\n\nTITLE: Using a Component with Main Slot in Edge\nDESCRIPTION: This example demonstrates how to use the card component with a main slot. The component title is passed as a prop, while the content is defined between the opening and closing tags.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/slots.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n@card({ title: 'Quick start' })\n  <p> Start building your next project in minutes </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Template with Slots in Edge.js\nDESCRIPTION: This snippet demonstrates how to create a layout file that uses slots to receive content from other templates. It defines a basic HTML structure with slots for meta content and main content, and uses a title variable with a default value.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/layouts.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n// title: views/components/layout/app.edge\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>{{ title || \"Your default title\" }}</title>\n  @if ($slots.meta)\n    {{{ await $slots.meta() }}}\n  @endif\n</head>\n<body>\n  {{{ await $slots.main() }}}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic If Condition in Edge\nDESCRIPTION: Shows how to implement a basic if condition to conditionally render user information.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/conditionals.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@if(user)\n  <p> {{ user.username }} </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: If Not Condition Example in Edge\nDESCRIPTION: Shows how to use the if tag with a negation operator to check for inactive accounts.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/conditionals.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@if(!account.isActive)\n  <p>Please verify your email address to activate the account </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Using a Component with Named Slots in Edge\nDESCRIPTION: This example shows how to use the card component and define its contents using named slots. It passes classes to the component and defines content for both header and content slots.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/slots.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@card({ class: ['card-lg', 'card-shadow'] })\n  @slot('header')\n    <strong> Quick start </strong>\n  @end\n  \n  @slot('content')\n    <p> Start building your next project in minutes </p>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Using Slots in Edge.js Components\nDESCRIPTION: Shows how to implement and use slots for more complex component markup.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/introduction.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<button {{ $props.toAttrs() }}>\n  {{{ await $slots.main() }}}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Input Component with Props in Edge\nDESCRIPTION: Basic input component template that accepts various props for customization. Shows default value handling and prop binding to HTML attributes.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/props.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n<input \n  type=\"{{ type || 'text' }}\"\n  placeholder=\"{{ placeholder || '' }}\"\n  name=\"{{ name }}\"\n  id=\"{{ name }}\"\n  value=\"{{ value: '' }}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Unless Condition in Edge\nDESCRIPTION: Demonstrates the use of unless tag as an alternative to if not condition.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/conditionals.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n@unless(account.isActive)\n  <p>Please verify your email address to activate the account </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Component with Markers in Edge.js\nDESCRIPTION: Example showing the desired API implementation for a map component with multiple markers using Edge.js templating syntax\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/provide_inject.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@map({ center: [-84, 35], zoom: 3 })\n  @!map.marker({ lat: 37.8225, lon: -122.0024, label: 'Edge Body Shaping' })\n  @!map.marker({ lat: 33.8981, lon: -118.4169, label: 'Edge Barbershop & Essentials' })\n  @!map.marker({ lat: 29.723, lon: -95.4189, label: 'Edge Waxing Studio' })\n  @!map.marker({ lat: 28.3378, lon: -81.3966, label: 'Edge 30 Nutritional Consultants' })\n  @!map.marker({ lat: 40.6483, lon: -74.0237, label: 'Edge Brands LLC' })\n@end\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in Edge.js Components\nDESCRIPTION: Example showing how to access shared context within child components\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/provide_inject.md#2025-04-19_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n@map()\n  {{ inspect($context) }}\n@end\n```\n\n----------------------------------------\n\nTITLE: Array Iteration with Index Access in Edge.js\nDESCRIPTION: Shows how to access both the element and its index when looping through arrays with the @each tag. The index can be used for numbering or conditional logic based on position.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/loops.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@each((user, index) in users)\n  <li> {{ index + 1 }} {{ user.username }} </li>\n@end\n```\n\n----------------------------------------\n\nTITLE: Ternary Operator in Edge\nDESCRIPTION: Shows how to use inline conditional ternary operator for dynamic class assignment.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/conditionals.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<input\n  class=\"input {{ hasError ? 'error' : '' }}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Main Map Component Implementation in Edge.js\nDESCRIPTION: Core map component implementation that shares state with child components and renders the map container using Alpine.js\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/provide_inject.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@let(map = {\n  center,\n  zoom,\n  markers: [],\n})\n\n@inject({ map })\n\n@eval(await $slots.main())\n\n<div x-data=\"map({{ js.stringify(map) }})\" id=\"map\"></div>\n```\n\n----------------------------------------\n\nTITLE: Modal Component Definition in Edge.js\nDESCRIPTION: Example of a modal component implementation with multiple named slots.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/introduction.md#2025-04-19_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n<div class=\"modal\">\n  <header>\n    {{{ await $slots.header() }}}\n  </header>\n\n  <main>\n    {{{ await $slots.content() }}}\n  </main>\n\n  <footer>\n    {{{ await $slots.footer() }}}\n  </footer>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Object Iteration with Key-Value Access in Edge.js\nDESCRIPTION: Demonstrates how to iterate over a JavaScript object's key-value pairs. This syntax destructures each entry into its value and key, making both accessible within the loop.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/loops.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n@each((amount, ingredient) in food)\n  <li> Use {{ amount }} of {{ ingredient }} </li>\n@end\n```\n\n----------------------------------------\n\nTITLE: Edge.js Cache Configuration\nDESCRIPTION: Example of enabling template caching in production environment\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/getting_started.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst edge = Edge.create({\n  cache: process.env.NODE_ENV === 'production'\n})\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining and Default Values in Edge.js\nDESCRIPTION: Shows how Edge supports JavaScript expressions including optional chaining and logical OR for default values. This example displays the user's subscription plan or falls back to 'Not subscribed' if no plan exists.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/introduction.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n{{ user.subscription?.plan || 'Not subscribed' }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Card Component with Named Slots in Edge\nDESCRIPTION: This snippet demonstrates how to create a card component with named slots for header and content. It uses the $slots object to access and render the slot content.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/slots.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@let(attributes = $props\n  .merge({\n    class: ['card']\n  })\n  .toAttrs()\n)\n\n<div {{ attributes }}>\n  <div class=\"card_header\">\n    {{{ await $slots.header() }}}\n  </div>\n\n  <div class=\"card_contents\">\n    {{{ await $slots.content() }}}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Edge.js In-Memory Template Registration\nDESCRIPTION: Example of registering and using in-memory templates\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/getting_started.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nedge.registerTemplate('uikit.button', {\n  template: `<button {{\n    $props.except(['text']).toAttrs()\n  }}>\n    {{ text }}\n  </button>`\n})\n```\n\nLANGUAGE: edge\nCODE:\n```\n@!component('uikit.button', {\n  text: 'Submit',\n  type: 'submit',\n  class: ['btn', 'btn-primary'],\n  disabled: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Component State in Slots in Edge\nDESCRIPTION: This example shows how to access component state that was passed to a slot. It captures the passed state in a variable named componentState and uses it within the slot content.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/slots.md#2025-04-19_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n@card()\n  @slot('header')\n    <strong> Quick start </strong>\n  @end\n  \n  @slot('content', componentState)\n    <p> I am a {{ componentState.cardSize }} card </p>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Creating a Stack in Edge.js Layout Template\nDESCRIPTION: This snippet shows how to create a named stack using the @stack tag in an Edge.js layout template. The stack is placed in the head section for JavaScript content.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/stacks.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    // highlight-start\n    @stack('js')\n    // highlight-end\n  </head>\n  <body>\n    <main>\n      @!dialog()\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Including Basic Partials in Edge.js Templates\nDESCRIPTION: Demonstrates how to include header and footer partials within a main template using the @include directive. The code shows the basic structure of including reusable template fragments.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/partials.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n@include('partials/header')\n\n<main>\n  The main content goes here\n</main>\n\n@include('partials/footer')\n```\n\n----------------------------------------\n\nTITLE: Debugging Edge.js Templates with Inspect Helper\nDESCRIPTION: This snippet demonstrates how to use the 'inspect' helper in Edge.js to prettyprint a complex object structure. It includes various data types such as arrays, objects, BigInt, Symbol, Set, Map, WeakSet, WeakMap, and Date.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/debugging.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  inspect({\n    a: 1,\n    b: [3, 4, undefined, null],\n    c: undefined,\n    d: null,\n    e: {\n      regex: /^x/i,\n      buf: Buffer.from('abc'),\n    },\n    balance: BigInt(100),\n    id: Symbol('1234'),\n    scores: new Set([1, 2, 3]),\n    classes: new Map([['english', '1st'], ['maths', '2nd']]),\n    currentScores: new WeakSet([[1, 2, 3]]),\n    currentClasses: new WeakMap([[['english', '1st'], ['maths', '2nd']]]),\n    now: new Date()\n  })\n}}\n```\n\n----------------------------------------\n\nTITLE: Basic Template Rendering in Edge.js\nDESCRIPTION: Example of basic template rendering with shared data and direct render method.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/templates_state.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst view = edge.createRenderer().share({\n  url: req.url\n})\n\nawait view.render('template-path')\n```\n\n----------------------------------------\n\nTITLE: Using truncate Helper in Edge Templates\nDESCRIPTION: Shows various ways to use the truncate helper for shortening strings, including options for complete words and custom suffixes.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n{{\\n  truncate(\\n    'This is a very long sentence that i would like to be shortened',\\n    18\\n  )\\n}}\n```\n\nLANGUAGE: edge\nCODE:\n```\n{{\\n  truncate(\\n    'This is a very long sentence that i would like to be shortened',\\n    18,\\n    { completeWords: false }\\n  )\\n}}\n```\n\nLANGUAGE: edge\nCODE:\n```\n{{\\n  truncate(\\n    'This is a very long sentence that i would like to be shortened',\\n    18,\\n    { suffix: ' [Read more]' }\\n  )\\n}}\n```\n\n----------------------------------------\n\nTITLE: Using a Layout with Slots in an Edge.js Template\nDESCRIPTION: This snippet shows how to use a layout with slots in a welcome page template. It passes a title to the layout and fills both the meta and main slots with specific content, demonstrating how slots can be used to replace sections of a layout.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/layouts.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n// title: views/welcome.edge\n@layout.app({ title: \"Welcome page title\" })\n  @slot('meta')\n    <meta name=\"description\" content=\"A welcome page made with EdgeJS\">\n  @endslot\n\n  @slot('main')\n    <h1>Hello world</h1>\n  @endslot\n@end\n```\n\n----------------------------------------\n\nTITLE: Using inspect Helper in Edge Templates\nDESCRIPTION: Shows how to use the inspect helper for debugging by pretty-printing complex JavaScript objects, including various data types and structures.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_9\n\nLANGUAGE: edge\nCODE:\n```\n{{\\n  inspect({\\n    a: 1,\\n    b: [3, 4, undefined, null],\\n    c: undefined,\\n    d: null,\\n    e: {\\n      regex: /^x/i,\\n      buf: Buffer.from('abc'),\\n    },\\n    balance: BigInt(100),\\n    id: Symbol('1234'),\\n    scores: new Set([1, 2, 3]),\\n    classes: new Map([['english', '1st'], ['maths', '2nd']]),\\n    currentScores: new WeakSet([[1, 2, 3]]),\\n    currentClasses: new WeakMap([[['english', '1st'], ['maths', '2nd']]]),\\n    now: new Date()\\n  })\\n}}\n```\n\n----------------------------------------\n\nTITLE: Using Case Transformation Helpers in Edge Templates\nDESCRIPTION: Demonstrates various case transformation helpers available in Edge templates for converting string cases.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_10\n\nLANGUAGE: edge\nCODE:\n```\n{{ camelCase('hello-world') }}     // Output: helloWorld\\n{{ snakeCase('hello-world') }}     // Output: hello_world\\n{{ dashCase('HelloWorld') }}       // Output: hello-world\\n{{ pascalCase('hello-world') }}    // Output: HelloWorld\\n{{ capitalCase('hello-world') }}   // Output: Hello-World\\n{{ sentenceCase('hello-world') }}  // Output: Hello world\\n{{ dotCase('hello-world') }}       // Output: hello.world\\n{{ noCase('hello-world') }}        // Output: hello world\\n{{ titleCase('hello-world') }}     // Output: Hello-World\n```\n\n----------------------------------------\n\nTITLE: Using html.attrs with Class Attribute in Edge Templates\nDESCRIPTION: Demonstrates how to use the html.attrs helper with the class attribute, which can accept a string, array of strings, or an object for conditional classes.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<input {{\\n  html.attrs({\\n    class: [\\n      'input',\\n      'input-large',\\n      {\\n        'input-error': hasError,\\n      },\\n    ]\\n  })\\n}} />\n```\n\n----------------------------------------\n\nTITLE: Using Modal Component with Slots\nDESCRIPTION: Demonstrates how to use the modal component with multiple named slots.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/introduction.md#2025-04-19_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@modal()\n  @slot('header')\n    <h2> Delete post </h2>\n  @end\n\n  @slot('content')\n    <p> You are about to delete the post permanently </p>\n  @end\n\n  @slot('footer')\n    <button> Yes, delete it </button>\n    <button> Cancel </button>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Map Marker Component Implementation in Edge.js\nDESCRIPTION: Marker component that validates context and adds marker data to the parent map component's state\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/provide_inject.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@if(!$context.map)\n  @newError(\n    'The map.marker component should be nested within the map component',\n    $caller.filename,\n    $caller.line,\n    $caller.col\n  )\n@end\n\n@eval($context.map.markers.push({ lat, lon, label }))\n```\n\n----------------------------------------\n\nTITLE: Block-level Tag Example in Edge\nDESCRIPTION: Demonstrates a block-level tag (@if) which has an opening and closing statement with content inside. Block-level tags require proper opening and closing syntax.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_9\n\nLANGUAGE: edge\nCODE:\n```\n@if(someCondition)\n  If block content\n@end\n```\n\n----------------------------------------\n\nTITLE: HTML Escaping in Edge Template\nDESCRIPTION: Demonstrates how Edge automatically escapes HTML content in expressions, converting HTML tags to their escaped equivalents to prevent XSS attacks.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n{{\n '<span style=\"color: red\">This should be red.</span>'\n}}\n```\n\n----------------------------------------\n\nTITLE: Component Passing Data to Slots in Edge\nDESCRIPTION: This snippet demonstrates how to pass data from a component to its slots. The component passes sizes and cardSize objects to both header and content slots when rendering them.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/slots.md#2025-04-19_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@let(cardSize = 'medium')\n\n@let(sizes = {\n  medium: '350px',\n  small: '200px',\n  large: '450px'\n})\n\n<div class=\"{{ sizes[cardSize] }}\">\n  <div class=\"card_header\">\n    {{{ await $slots.header({ sizes, cardSize }) }}}\n  </div>\n\n  <div class=\"card_contents\">\n    {{{ await $slots.content({ sizes, cardSize }) }}}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Inline Tag Example in Edge\nDESCRIPTION: Shows an inline tag (@include) which doesn't accept a body and doesn't need to be explicitly closed. These are used for simpler operations without wrapped content.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_12\n\nLANGUAGE: edge\nCODE:\n```\n@include('partials/some-file')\n```\n\n----------------------------------------\n\nTITLE: Unescaped HTML with html.safe in EdgeJS\nDESCRIPTION: Shows how to render HTML content without escaping using the html.safe helper method.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_13\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  html.safe(\n    '<span style=\"color: red\">This should be red.</span>'\n  )\n}}\n```\n\n----------------------------------------\n\nTITLE: Triple Curly Braces for Unescaped HTML Output\nDESCRIPTION: Shows how to render HTML content without escaping using triple curly braces, which allows HTML to be rendered as-is in the browser.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n{{{\n '<span style=\"color: red\">This should be red.</span>'\n}}}\n```\n\n----------------------------------------\n\nTITLE: Component with Main Slot in Edge\nDESCRIPTION: This snippet shows a modified card component that uses a title prop and a main slot for content. The main slot is a simpler approach when only one content area is needed.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/slots.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<div {{ attributes }}>\n  <div class=\"card_header\">\n    {{ title }}\n  </div>\n\n  <div class=\"card_contents\">\n    {{{ await $slots.main() }}}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using html.safe() Method for Unescaped HTML\nDESCRIPTION: Demonstrates an alternative approach to rendering unescaped HTML content using the html.safe() global method in Edge templates.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  html.safe(\n    '<span style=\"color: red\">This should be red.</span>'\n  )\n}}\n```\n\n----------------------------------------\n\nTITLE: Unescaped HTML with Triple Braces in EdgeJS\nDESCRIPTION: Shows how to render HTML content without escaping by using triple curly braces.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_12\n\nLANGUAGE: edge\nCODE:\n```\n{{{\n '<span style=\"color: red\">This should be red.</span>'\n}}}\n```\n\n----------------------------------------\n\nTITLE: Component with Local State Variables in Edge\nDESCRIPTION: This snippet shows a card component with local state variables that define card sizes. These variables are only accessible within the component, not in the parent template slots.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/slots.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@let(cardSize = 'medium')\n\n@let(sizes = {\n  medium: '350px',\n  small: '200px',\n  large: '450px'\n})\n\n<div class=\"{{ sizes[cardSize] }}\">\n  <div class=\"card_header\">\n    {{{ await $slots.header() }}}\n  </div>\n\n  <div class=\"card_contents\">\n    {{{ await $slots.content() }}}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using html.escape Helper in Edge Templates\nDESCRIPTION: Demonstrates how to use the html.escape helper to escape HTML content when using triple curly braces for unescaped output.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n{{{ html.escape(post.content) }}}\n```\n\n----------------------------------------\n\nTITLE: Basic Expression in Edge Template\nDESCRIPTION: Demonstrates the basic syntax for outputting a JavaScript expression using double curly braces. The expression's result is converted to a string and inserted into the template output.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\nHello {{ username }}!\n```\n\n----------------------------------------\n\nTITLE: Props API Usage Examples\nDESCRIPTION: Collection of Props API method examples including has, get, only, except, and merge operations.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/props.md#2025-04-19_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n{{ $props.has('text') }}\n{{ $props.get('text') }}\n{{ $props.only(['text', 'class']).get('text') }}\n{{ $props.except(['text', 'size']) }}\n```\n\n----------------------------------------\n\nTITLE: Using nl2br Helper in Edge Templates\nDESCRIPTION: Shows how to use the nl2br helper to convert newlines to HTML <br /> tags, and how to combine it with html.escape for safe HTML rendering.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n{{{ nl2br(post.content) }}}\n```\n\nLANGUAGE: edge\nCODE:\n```\n{{{\\n  nl2br(\\n    html.escape(post.content)\\n  )\\n}}}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Expression in Edge Template\nDESCRIPTION: Shows how expressions can span multiple lines. The JavaScript code within the braces will be evaluated, and the result will be converted to a string and included in the output.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\nHello {{\n  users.map((user) => {\n    return user.username\n  })\n}}\n```\n\n----------------------------------------\n\nTITLE: Multiline Expression in EdgeJS\nDESCRIPTION: Shows how to write interpolated expressions that span multiple lines, such as array mapping operations.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\nHello {{\n  users.map((user) => {\n    return user.username\n  })\n}}\n```\n\n----------------------------------------\n\nTITLE: Loops and Partial Templates in Edge.js\nDESCRIPTION: Demonstrates how to iterate over collections and include partial templates. This example loops through post comments and includes a comment partial template for each iteration.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/introduction.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@each(comment in post.comments)\n  @include('partials/comment')\n@end\n```\n\n----------------------------------------\n\nTITLE: Using excerpt Helper in Edge Templates\nDESCRIPTION: Demonstrates the use of the excerpt helper for generating plain text excerpts from HTML content, with options for word completion and custom suffixes.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n{{\\n  excerpt(\\n    '<p> Hello, this is a dummy <strong> post </strong> </p>',\\n    20\\n  )\\n}}\n```\n\nLANGUAGE: edge\nCODE:\n```\n{{\\n  excerpt(\\n    '<p> Hello, this is a dummy <strong> post </strong> </p>',\\n    20,\\n    { completeWords: false }\\n  )\\n}}\n```\n\nLANGUAGE: edge\nCODE:\n```\n{{\\n  excerpt(\\n    '<p> Hello, this is a dummy <strong> post </strong> </p>',\\n    20,\\n    { suffix: ' [Read more]' }\\n  )\\n}}\n```\n\n----------------------------------------\n\nTITLE: Escaped HTML Output\nDESCRIPTION: Shows how HTML content is automatically escaped in the output to prevent XSS attacks.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n&lt;span style=\"color: red\"&gt;This should be red.&lt;/span&gt;\n```\n\n----------------------------------------\n\nTITLE: Using a Component with Undefined Component Variables in Edge\nDESCRIPTION: This example shows an attempt to access component-local variables from a slot, which will result in undefined values. The cardSize variable is not accessible in the slot scope.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/slots.md#2025-04-19_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n@card()\n  @slot('header')\n    <strong> Quick start </strong>\n  @end\n  \n  @slot('content')\n    {{-- The value of cardSize will be undefined --}}\n    <p> I am a {{ cardSize }} card </p>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Component System with Nested Items in Edge.js\nDESCRIPTION: Shows Edge's component system with nested items and property passing. This example creates an accordion component with multiple accordion items, each with a title and content.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/introduction.md#2025-04-19_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n@accordion()\n  @accordion.item({ title: 'What is Edge?' })\n    Edge is a template engine for Node.js\n  @end\n\n  @accordion.item({ title: 'Why should I use Edge?' })\n    Because you need a template engine 🤷🏻‍♂️\n  @end\n\n  @accordion.item({ title: 'How can I support Edge?' })\n    By becoming a sponsor on Github\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Using html.attrs Helper in Edge Templates\nDESCRIPTION: Demonstrates how to use the html.attrs helper to convert an object to HTML attributes, including handling of null values.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<input {{\\n  html.attrs({\\n    id: 'name',\\n    placeholder: 'Enter your name',\\n    value: user.name\\n  })\\n}} />\n```\n\n----------------------------------------\n\nTITLE: Inline Rendering of SVG Icon in Edge.js\nDESCRIPTION: This Edge.js template code shows how to use the svg global helper to render an SVG icon inline within markup.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/iconify.md#2025-04-19_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n<button> {{ svg('heroicons:archive-box') }} Delete post <button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Input Components with Props\nDESCRIPTION: Examples of rendering input components with different prop configurations for title and slug fields.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/props.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@!input({\n  name: 'title',\n  placeholder: 'Enter post title'\n})\n\n@!input({\n  name: 'slug',\n  placeholder: 'Enter post slug'\n})\n```\n\n----------------------------------------\n\nTITLE: Express.js Middleware with Edge.js\nDESCRIPTION: Implementation of Edge.js with Express.js middleware for request-isolated template rendering.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/templates_state.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(function (req, res) {\n  res.view = edge.createRenderer()\n})\n\napp.use(function (req, res) {\n  res.view.share({\n    url: req.url\n  })\n})\n\napp.use(function (req, res) {\n  res.view.share({\n    user: req.auth.user\n  })\n})\n\n// Finally render a template\napp.get('/posts', async (req, res) => {\n  const html = await res.view.render('posts')\n  res.send(html)\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing SVG Icon Attributes in Edge.js\nDESCRIPTION: This Edge.js template code demonstrates how to customize the width, height, and color of an SVG icon.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/iconify.md#2025-04-19_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@svg('heroicons:arrow-left-solid', {\n  width: 40,\n  height: 40,\n  color: 'purple'\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Inject Usage in Edge.js\nDESCRIPTION: Simple example showing how to inject shared state in Edge.js components\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/provide_inject.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@let(sharedState = {})\n@inject(sharedState)\n```\n\n----------------------------------------\n\nTITLE: Registering UIKit Plugin with Edge.js\nDESCRIPTION: TypeScript code for importing and registering the UIKit plugin with the Edge.js template engine. This enables the use of UIKit components in Edge templates.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/introduction.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport edge from 'edge.js'\nimport uiKit from 'edge-uikit'\n\nedge.use(uiKit)\n```\n\n----------------------------------------\n\nTITLE: Alpine.js Map Component Implementation\nDESCRIPTION: Client-side JavaScript implementation using Alpine.js to initialize Mapbox and handle map rendering with markers\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/provide_inject.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.addEventListener('alpine:init', () => {\n  window.Alpine.data('map', function (data) {\n    return {\n      createMap() {\n        mapboxgl.accessToken = '<!-- YOUR ACCESS TOKEN -->'\n        return new mapboxgl.Map({\n          container: this.$root,\n          style: 'mapbox://styles/mapbox/streets-v9',\n          center: data.center,\n          zoom: data.zoom\n        })\n      },\n\n      addMarker(map, markerData) {\n        const popup = new mapboxgl.Popup({ offset: 25 }).setText(markerData.label);\n        new mapboxgl.Marker().setLngLat([markerData.lon, markerData.lat]).setPopup(popup).addTo(map);\n      },\n\n      init() {\n        const map = this.createMap()\n\n        if (data.markers && Array.isArray(data.markers)) {\n          data.markers.forEach((marker) => {\n            this.addMarker(map, marker)\n          })\n        }\n      }\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Debugger Tag in Edge.js Templates\nDESCRIPTION: This snippet shows how to use the 'debugger' tag in an Edge.js template. It inserts a JavaScript debugger statement in the compiled output, allowing for debugging with Node.js inspector.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/debugging.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@debugger\n<p> Hello {{ user.username }} </p>\n```\n\n----------------------------------------\n\nTITLE: Escaping Curly Braces in Edge Templates\nDESCRIPTION: Shows how to escape curly braces with the @ symbol to prevent Edge from processing expressions, useful when working with other frameworks that also use curly braces.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n// title: Input\nEdge should not parse @{{ username }}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Array to String Conversion Example\nDESCRIPTION: Demonstrates how JavaScript expressions are automatically converted to strings in Edge. This is equivalent to applying String() to the array returned by the map function.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nString(users.map((user) => {\n  return user.username\n}))\n```\n\n----------------------------------------\n\nTITLE: Pushing Content to a Stack in Edge.js Component\nDESCRIPTION: This snippet demonstrates how to push content to a previously created stack using the @pushOnceTo tag in an Edge.js component. It pushes a script tag with Alpine.js code to the 'js' stack.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/stacks.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n<dialog x-data=\"alpineModal\">\n</dialog>\n\n// highlight-start\n@pushOnceTo('js')\n  <script>\n    Alpine.data('alpineModal', function () {\n      return {\n        show() {},\n        hide() {},\n      }\n    })\n  </script>\n@end\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Conditional Partial Inclusion in Edge.js\nDESCRIPTION: Demonstrates how to conditionally include a partial using @includeIf directive, which only includes the partial when the specified condition evaluates to true.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/partials.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@includeIf(post.comments.length, 'partials/comments')\n```\n\n----------------------------------------\n\nTITLE: Converting Array with join() Method in Edge\nDESCRIPTION: Shows how to explicitly format an array as a string using the JavaScript join() method within an Edge expression, giving more control over the output format.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\nHello {{\n  users.map((user) => {\n    return user.username\n  }).join(', ')\n}}\n```\n\n----------------------------------------\n\nTITLE: Merging Default Classes with Props\nDESCRIPTION: Demonstrates merging default styling classes with additional classes passed through props.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/props.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<input {{\n  $props.merge({ class: ['input'] }).toAttrs()\n}} />\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering an Edge.js Template\nDESCRIPTION: This JavaScript code demonstrates how to create an Edge.js instance, define a simple template, and render it with dynamic data. It shows the basic usage of Edge.js for template rendering.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/alerts.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Edge } from 'edge.js'\n\nconst edge = new Edge()\n\nconst template = `Hello {{ username }}!`\nconst html = await edge.renderRaw(template, { username: 'virk' })\n\nconsole.log(html)\n```\n\n----------------------------------------\n\nTITLE: Examples of Invalid and Valid Component Tag Syntax\nDESCRIPTION: Compares invalid and valid syntax for component tags in Edge templates, focusing on the auto-closing syntax and proper formatting of multi-line arguments.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_19\n\nLANGUAGE: edge\nCODE:\n```\n@! component('button')\n```\n\nLANGUAGE: edge\nCODE:\n```\n@!component('button')\n```\n\nLANGUAGE: edge\nCODE:\n```\n@!component\n('button', {\n  type: 'primary'\n})\n```\n\nLANGUAGE: edge\nCODE:\n```\n@!component(\n  'button',\n  {\n    type: 'primary'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using html.classNames Helper in Edge Templates\nDESCRIPTION: Demonstrates how to use the html.classNames helper to serialize an array of classes to a string, including conditional classes based on object properties.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n<input class=\"{{\\n  html.classNames([\\n    'input',\\n    {\\n      'input-error': false,\\n      'input-disabled': true,\\n      'input-large': size === 'large',\\n      'input-medium': size === 'medium',\\n      'input-rounded': true\\n    },\\n  ])\\n}}\" />\n```\n\n----------------------------------------\n\nTITLE: Explicitly Closing a Block-level Tag in Edge\nDESCRIPTION: Demonstrates the explicit way to close a block-level tag by using the @end statement, which is an alternative to auto-closing.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_11\n\nLANGUAGE: edge\nCODE:\n```\n// title: Explicitly close\n@component('button', { size: 'large' })\n@end\n```\n\n----------------------------------------\n\nTITLE: Escaping Interpolation Braces in EdgeJS\nDESCRIPTION: Demonstrates how to prevent EdgeJS from evaluating curly braces by prefixing them with @ symbol, useful when integrating with frontend frameworks.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_14\n\nLANGUAGE: edge\nCODE:\n```\n{{-- Input -- }}\nEdge should not parse @{{ username }}\n\n{{-- Output -- }}\nEdge should not parse {{ username }}\n```\n\n----------------------------------------\n\nTITLE: Including Partials from Different Disks in Edge.js\nDESCRIPTION: Shows how to include partials from other disks by prefixing the disk name before the template path using the shared:: prefix syntax.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/partials.md#2025-04-19_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n@include('shared::partials/header')\n@include('shared::partials/footer')\n```\n\n----------------------------------------\n\nTITLE: Registering and Using a Custom Edge Tag in TypeScript\nDESCRIPTION: Demonstrates how to define, register, and use a custom 'reverse' tag in Edge.js. The tag outputs a fixed string.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/creating-custom-tags.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport edge from 'edge.js'\nimport { TagContract } from 'edge.js/types'\n\n/**\n * Defining a tag\n */\nconst reverse: TagContract = {\n  block: false,\n  seekable: true,\n  tagName: 'reverse',\n  compile(parser, buffer, token) {\n    buffer.outputRaw('Hello from reverse tag')\n  }\n}\n\n/**\n * Registering it with Edge\n */\nedge.registerTag(reverse)\n\n/**\n * Using the tag\n */\nconst output = await edge.renderRaw('@reverse()')\n\nconsole.log(output) // I am the reverse tag\n```\n\n----------------------------------------\n\nTITLE: Comments in Edge Templates\nDESCRIPTION: Shows how to add comments in Edge templates using the {{-- --}} syntax. Comments are ignored during template rendering and can be inline or multi-line.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_16\n\nLANGUAGE: edge\nCODE:\n```\n{{-- Inline before --}} Hello {{-- Inline after --}}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Comments in Edge Templates\nDESCRIPTION: Demonstrates the syntax for multi-line comments in Edge templates, which can span multiple lines and are ignored during template rendering.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_17\n\nLANGUAGE: edge\nCODE:\n```\n{{--\n  This is a multi-line comment.\n--}}\n```\n\n----------------------------------------\n\nTITLE: Handling Existing Classes Removal\nDESCRIPTION: Implementation of conditional class merging with the ability to remove existing styles.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/props.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<input {{\n  $props\n    .mergeUnless(removeExistingStyles, { class: ['input'] })\n    .except(['removeExistingStyles'])\n    .toAttrs()\n}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reverse String Tag in Edge.js\nDESCRIPTION: Demonstrates the complete implementation of a custom 'reverse' tag in Edge.js that reverses the input string.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/creating-custom-tags.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst reverse: TagContract = {\n  block: false,\n  seekable: true,\n  tagName: 'reverse',\n  compile(parser, buffer, token) {\n    const expression = parser.utils.transformAst(\n      parser.utils.generateAST(token.properties.jsArg, token.loc, token.filename),\n      token.filename,\n      parser\n    )\n\n    const outputExpression = `${parser.utils.stringify(expression)}.split(\"\").reverse().join(\"\")`\n    buffer.outputExpression(outputExpression, token.filename, token.loc.start.line, false)\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// With a raw string\nassert.equal(await edge.renderRaw(`@reverse('virk')`), 'kriv')\n\n// With variable reference\nassert.equal(await edge.renderRaw(`@reverse(username)`, {\n  username: 'virk'\n}), 'kriv')\n\n// With function call\nassert.equal(await edge.renderRaw(`@reverse(getUserName())`, {\n  getUserName() { return 'virk' }\n}), 'kriv')\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Button Components\nDESCRIPTION: Shows the rendered HTML output of the button components.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/components/introduction.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <button type=\"submit\"> Login </button>\n  <button type=\"reset\"> Cancel </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Auto-closing Block-level Tag in Edge\nDESCRIPTION: Shows how to auto-close a block-level tag using the ! operator before the tag name, useful for tags that don't need to wrap content.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_10\n\nLANGUAGE: edge\nCODE:\n```\n// title: Auto close\n@!component('button', { size: 'large' })\n```\n\n----------------------------------------\n\nTITLE: Invalid Multiline Expression Examples in EdgeJS\nDESCRIPTION: Shows incorrect ways to write multiline expressions where the opening or closing braces are on separate lines.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n{\n{\n  users.map((user) => {\n    return user.username\n  })\n}}\n```\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  users.map((user) => {\n    return user.username\n  })\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Expression Example in EdgeJS\nDESCRIPTION: Example of an array mapping operation within interpolation braces that returns usernames.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  users.map((user) => {\n    return user.username\n  })\n}}\n```\n\n----------------------------------------\n\nTITLE: Edge Template Without Tilde Swallow Operator\nDESCRIPTION: Shows how tags create newlines in the output by default. Without the tilde operator, the newline after the @let tag is preserved in the output.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_14\n\nLANGUAGE: edge\nCODE:\n```\nHello\n@let(username = 'virk')\n {{ username }}\n```\n\n----------------------------------------\n\nTITLE: Installing Edge UIKit Package\nDESCRIPTION: Command to install the Edge UIKit package using npm. Uses the @next tag to get the latest pre-release version.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/introduction.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i edge-uikit@next\n```\n\n----------------------------------------\n\nTITLE: Implementing a Conditional Notification Tag in Edge.js\nDESCRIPTION: Shows the implementation of a custom conditional 'notification' tag in Edge.js that renders content based on the presence of a notification.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/creating-custom-tags.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport edge from 'edge.js'\nimport { TagContract } from 'edge.js/types'\n\nconst notification: TagContract = {\n  block: true,\n  seekable: true,\n  tagName: 'notification',\n  compile(parser, buffer, token) {\n    const expression = parser.utils.transformAst(\n      parser.utils.generateAST(token.properties.jsArg, token.loc, token.filename),\n      token.filename,\n      parser\n    )\n\n    const key = parser.utils.stringify(expression)\n\n    buffer.writeStatement(\n      `if (state.notifications && state.notifications[${key}]) {`,\n      token.filename,\n      token.loc.start.line\n    )\n\n    buffer.writeExpression(`let notification = {\n      type: ${key},\n      message: state.notifications[${key}],\n    }`, token.filename, token.loc.start.line)\n\n    parser.stack.defineScope()\n    parser.stack.defineVariable('notification')\n\n    token.children.forEach((child) => {\n      parser.processToken(child, buffer)\n    })\n\n    parser.stack.clearScope()\n\n    buffer.writeStatement(\n      `}`,\n      token.filename,\n      token.loc.start.line\n    )\n  }\n}\n\nedge.registerTag(notification)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst notifications = {\n  success: 'Settings saved successfully'\n}\n\nconst output = await edge.renderRaw(`\n  @notification('success')\n    <div class=\"alert alert-{{ notification.type }}\">\n      <p> {{ notification.message }} </p>\n    </div>\n  @end\n`, { notifications })\n```\n\n----------------------------------------\n\nTITLE: Updating Global Helper Usage in Edge.js Templates\nDESCRIPTION: Examples of how to update usage of deprecated global helpers to their new equivalents in Edge.js v6. This includes changes to escaping HTML, stringifying JSON, and marking content as safe.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/changelog/upgrading-to-v6.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n{{ html.escape(post.content) }}\n\n{{ js.stringify(someJSONObject) }}\n\n{{ html.safe(post.content) }}\n```\n\n----------------------------------------\n\nTITLE: Installing edge-iconify Plugin\nDESCRIPTION: This snippet shows how to install the edge-iconify plugin using npm.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/iconify.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i edge-iconify\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML Output with Edge.js Stacks\nDESCRIPTION: This snippet shows the final HTML output after the Edge.js template is rendered with the stack content pushed from the component. It includes the layout structure and the injected JavaScript from the stack.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/stacks.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <script>\n      Alpine.data('alpineModal', function () {\n        return {\n          show() {},\n          hide() {},\n        }\n      })\n    </script>\n  </head>\n  <body>\n    <main>\n      <dialog x-data=\"alpineModal\">\n      </dialog>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpine.js with UIKit Plugins\nDESCRIPTION: JavaScript code for importing and initializing Alpine.js with the tabs plugin from Edge UIKit. Shows how to cherry-pick specific UI components rather than importing the entire library.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/introduction.md#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport { tabs } from 'edge-uikit/tabs'\n\n/**\n * Using the tabs plugin. It is required by the\n * tabs component.\n */\nAlpine.plugin(tabs)\n\nAlpine.start()\n```\n\n----------------------------------------\n\nTITLE: Installing Edge.js via npm\nDESCRIPTION: This command installs Edge.js using npm, the Node.js package manager. It adds Edge.js as a dependency to your project.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/alerts.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i edge.js\n```\n\n----------------------------------------\n\nTITLE: Migrating from @set to @let and @assign in Edge.js Templates\nDESCRIPTION: Examples of how to replace the deprecated @set tag with the new @let and @assign tags in Edge.js v6 templates. This includes defining new variables, updating existing variables, and mutating object properties.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/changelog/upgrading-to-v6.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n/**\n * Define new variable\n */\n@let(username = 'virk')\n\n/**\n * Update existing variable\n */\n@assign(username = 'romain')\n\n/**\n * Mutate object properties\n */\n@assign(user.username = 'romain')\n```\n\n----------------------------------------\n\nTITLE: Alternative Template Rendering in Edge.js\nDESCRIPTION: Shows an alternative approach to passing data during template rendering.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/templates_state.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait edge.render('template-path', {\n  url: req.url\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Edge.js Props API Usage\nDESCRIPTION: Examples of how to update code using the old Props API to the new API in Edge.js v6. This includes serializing attributes, excluding specific attributes, and merging custom attributes.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/changelog/upgrading-to-v6.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * Serialize all attributes\n */\n$props.toAttrs()\n\n/**\n * Serialize all except the mentioned attributes\n */\n$props.except(['text']).toAttrs()\n\n/**\n * Serialize only the mentioned attributes\n */\n$props.only(['class']).toAttrs()\n\n/**\n * Merge custom attributes\n */\n$props.only(['class']).merge({ type: 'text' }).toAttrs()\n```\n\n----------------------------------------\n\nTITLE: Output of html.classNames Helper in HTML\nDESCRIPTION: Shows the resulting HTML output when using the html.classNames helper, assuming the value of 'size' is 'medium'.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input class=\"input input-disabled input-medium input-rounded\" />\n```\n\n----------------------------------------\n\nTITLE: Preparing Object Data for Edge.js Templates\nDESCRIPTION: TypeScript example showing how to pass an object to an Edge.js template. This demonstrates setting up a nested object structure that will be used for iteration in the template.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/loops.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nawait edge.render('recipes', {\n  food: {\n    ketchup: '5 tbsp',\n    mustard: '1 tbsp',\n    pickle: '0 tbsp'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Output of html.attrs Helper in HTML\nDESCRIPTION: Shows the resulting HTML output when using the html.attrs helper, assuming the value of 'user.name' is null.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/helpers.md#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"name\" placeholder=\"Enter your name\" />\n```\n\n----------------------------------------\n\nTITLE: HTML String Interpolation in EdgeJS\nDESCRIPTION: Example of interpolating a string containing HTML markup, which will be automatically escaped.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_10\n\nLANGUAGE: edge\nCODE:\n```\n{{\n '<span style=\"color: red\">This should be red.</span>'\n}}\n```\n\n----------------------------------------\n\nTITLE: Modified Edge Template with String Manipulation\nDESCRIPTION: Example showing template modification with string transformation\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/getting_started.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n</head>\n<body>\n  <h1>\n    Hello {{ username.toUpperCase() }}\n  </h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Valid Multiline Expression in EdgeJS\nDESCRIPTION: Shows the correct way to write multiline expressions with both opening and closing braces properly aligned.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n{{\n  users.map((user) => {\n    return user.username\n  })\n}}\n```\n\n----------------------------------------\n\nTITLE: Tag Without Arguments in Edge\nDESCRIPTION: Demonstrates a tag (@debugger) that can be used without passing any arguments. This is used for simple operations that don't require parameters.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_13\n\nLANGUAGE: edge\nCODE:\n```\n@debugger\n```\n\n----------------------------------------\n\nTITLE: Custom Array Join in EdgeJS\nDESCRIPTION: Demonstrates how to manually control array-to-string conversion using the join method instead of relying on default behavior.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_9\n\nLANGUAGE: edge\nCODE:\n```\nHello {{\n  users.map((user) => {\n    return user.username\n  }).join(', ')\n}}\n```\n\n----------------------------------------\n\nTITLE: Output of Escaped Curly Braces\nDESCRIPTION: Shows the resulting output when using the @ symbol to escape curly braces in an Edge template.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n// title: Output\nEdge should not parse {{ username }}\n```\n\n----------------------------------------\n\nTITLE: Edge Template With Tilde Swallow Operator\nDESCRIPTION: Demonstrates using the tilde (~) operator to swallow newlines after a tag, which is useful when newlines would affect the output's meaning or validity.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/syntax_specification.md#2025-04-19_snippet_15\n\nLANGUAGE: edge\nCODE:\n```\nHello\n@let(username = 'virk')~\n {{ username }}\n```\n\n----------------------------------------\n\nTITLE: Registering edge-iconify Plugin with Edge.js\nDESCRIPTION: This code demonstrates how to import and register the edge-iconify plugin with an Edge.js instance.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/iconify.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Edge } from 'edge.js'\nimport { edgeIconify } from 'edge-iconify'\n\nconst edge = Edge.create()\n\n/**\n * Register the plugin\n */\nedge.use(edgeIconify)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output Code for Array Mapping\nDESCRIPTION: Shows how EdgeJS internally converts the expression output to a string using JavaScript's String constructor.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nString(users.map((user) => {\n  return user.username\n}))\n```\n\n----------------------------------------\n\nTITLE: Adding Iconify Collection to Edge.js\nDESCRIPTION: This TypeScript code imports the HeroIcons collection and adds it to the edge-iconify plugin.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/iconify.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Edge } from 'edge.js'\n// highlight-start\nimport { edgeIconify, addCollection } from 'edge-iconify'\nimport { icons as heroIcons } from '@iconify-json/heroicons'\n\n/**\n * Add heroIcons collection\n */\naddCollection(heroIcons)\n// highlight-end\n\nconst edge = Edge.create()\n\n/**\n * Register the plugin\n */\nedge.use(edgeIconify)\n```\n\n----------------------------------------\n\nTITLE: String Output of Array Mapping\nDESCRIPTION: Shows the final string output after array mapping and automatic string conversion.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nvirk,romain,julien,michael\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Icon in Edge.js Template\nDESCRIPTION: This Edge.js template code shows how to use the @svg tag to render an icon.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/iconify.md#2025-04-19_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@svg('heroicons:arrow-left-solid')\n```\n\n----------------------------------------\n\nTITLE: Interpolation Output Example\nDESCRIPTION: Demonstrates the result of basic interpolation when a variable is provided.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/interpolation.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHello Virk!\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with Inspect Flag for Debugging\nDESCRIPTION: This command demonstrates how to run a Node.js server with the '--inspect' flag, enabling debugging capabilities for Edge.js templates using Chrome DevTools.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/debugging.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode --inspect index.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge.js v6 Compatibility Plugin\nDESCRIPTION: TypeScript code for configuring the migrate plugin to provide compatibility between Edge.js version 5 and 6. This is useful for projects not ready for all breaking changes.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/changelog/upgrading-to-v6.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport edge from 'edge.js'\nimport { migrate } from 'edge.js/plugins/migrate'\n\nedge.use(migrate)\n```\n\n----------------------------------------\n\nTITLE: Generating AST for Custom Edge Tag in TypeScript\nDESCRIPTION: Shows how to generate and log the Abstract Syntax Tree (AST) for arguments passed to a custom 'reverse' tag in Edge.js.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/creating-custom-tags.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst reverse: TagContract = {\n  block: false,\n  seekable: true,\n  tagName: 'reverse',\n  compile(parser, buffer, token) {\n    const expression = parser.utils.transformAst(\n      parser.utils.generateAST(token.properties.jsArg, token.loc, token.filename),\n      token.filename,\n      parser\n    )\n\n    console.log(JSON.stringify(expression, null, 2))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Theme Switcher in Edge.js Header Component\nDESCRIPTION: This code shows how to create a custom theme switcher button in the Edge.js header component. It uses Alpine.js directives to conditionally display text based on the current theme.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('themeSwitcher')\n    <span x-if=\"store.darkMode.enabled\"> Dark </span>\n    <span x-if=\"!store.darkMode.enabled\"> Light </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: AST Output for Different Input Types in Edge.js\nDESCRIPTION: Demonstrates the AST output for various input types (raw string, variable reference, function call) passed to a custom Edge.js tag.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/creating-custom-tags.md#2025-04-19_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@reverse('hello world')\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Literal\",\n  \"start\": 0,\n  \"end\": 13,\n  \"loc\": {\n    \"start\": {\n      \"line\": 1,\n      \"column\": 9\n    },\n    \"end\": {\n      \"line\": 1,\n      \"column\": 13\n    }\n  },\n  \"value\": \"hello world\",\n  \"raw\": \"'hello world'\"\n}\n```\n\nLANGUAGE: edge\nCODE:\n```\n@reverse(username)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"MemberExpression\",\n  \"object\": {\n    \"type\": \"Identifier\",\n    \"name\": \"state\"\n  },\n  \"computed\": false,\n  \"property\": {\n    \"type\": \"Identifier\",\n    \"start\": 0,\n    \"end\": 8,\n    \"loc\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 9\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 8\n      }\n    },\n    \"name\": \"username\"\n  }\n}\n```\n\nLANGUAGE: edge\nCODE:\n```\n@reverse(getUserName())\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"CallExpression\",\n  \"start\": 0,\n  \"end\": 13,\n  \"loc\": {\n    \"start\": {\n      \"line\": 1,\n      \"column\": 9\n    },\n    \"end\": {\n      \"line\": 1,\n      \"column\": 13\n    }\n  },\n  \"callee\": {\n    \"type\": \"MemberExpression\",\n    \"object\": {\n      \"type\": \"Identifier\",\n      \"name\": \"state\"\n    },\n    \"computed\": false,\n    \"property\": {\n      \"type\": \"Identifier\",\n      \"start\": 0,\n      \"end\": 11,\n      \"loc\": {\n        \"start\": {\n          \"line\": 1,\n          \"column\": 9\n        },\n        \"end\": {\n          \"line\": 1,\n          \"column\": 11\n        }\n      },\n      \"name\": \"getUserName\"\n    }\n  },\n  \"arguments\": [],\n  \"optional\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Configuration TypeScript\nDESCRIPTION: TypeScript code showing how to configure multiple documentation collections with custom URL prefixes and renderers.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Docs\nconst docs = new Collection()\n  .db(new URL('../content/docs/db.json', import.meta.url))\n  .useRenderer(renderer)\n  .urlPrefix('/docs')\n\nawait docs.boot()\n\n// API reference\nconst apiReference = new Collection()\n  .db(new URL('../content/api_reference/db.json', import.meta.url))\n  .useRenderer(renderer)\n  .urlPrefix('/api')\n\nawait apiReference.boot()\n\nexport const collections = [docs, apiReference]\n```\n\n----------------------------------------\n\nTITLE: Converting AST to String in Edge.js Custom Tag\nDESCRIPTION: Shows how to convert an AST (Abstract Syntax Tree) back to a JavaScript string expression in a custom Edge.js tag.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/digging_deeper/creating-custom-tags.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst reverse: TagContract = {\n  block: false,\n  seekable: true,\n  tagName: 'reverse',\n  compile(parser, buffer, token) {\n    const expression = parser.utils.transformAst(\n      parser.utils.generateAST(token.properties.jsArg, token.loc, token.filename),\n      token.filename,\n      parser\n    )\n\n    console.log(parser.utils.stringify(expression)))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Website Configuration JSON\nDESCRIPTION: Main configuration file structure for the documentation website including navigation links, GitHub integration, and copyright information.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"home\": {\n      \"title\": \"Your project name\",\n      \"href\": \"/\"\n    },\n    \"github\": {\n      \"title\": \"Your project on Github\",\n      \"href\": \"https://github.com/dimerapp\"\n    }\n  },\n  \"fileEditBaseUrl\": \"https://github.com/dimerapp/docs-boilerplate/blob/develop\",\n  \"copyright\": \"Your project legal name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Edge.js via NPM\nDESCRIPTION: Command to install Edge.js package from npm registry\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/getting_started.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i edge.js\n```\n\n----------------------------------------\n\nTITLE: Output HTML for Customized SVG Icon\nDESCRIPTION: This is the HTML output generated when rendering a customized SVG icon in an Edge.js template.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/iconify.md#2025-04-19_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<svg width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" color=\"purple\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M11.03 3.97a.75.75 0 0 1 0 1.06l-6.22 6.22H21a.75.75 0 0 1 0 1.5H4.81l6.22 6.22a.75.75 0 1 1-1.06 1.06l-7.5-7.5a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 0 1 1.06 0Z\" clip-rule=\"evenodd\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Project Installation Commands\nDESCRIPTION: Shell commands for installing and setting up the documentation boilerplate using degit and npm.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit dimerapp/docs-boilerplate <my-website>\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd <my-website>\nnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Alpine.js Dependency\nDESCRIPTION: Command to install Alpine.js as a development dependency, which is required for the interactive components in Edge UIKit.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/introduction.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D alpinejs\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Example\nDESCRIPTION: Shows the folder structure layout of the documentation boilerplate project with key directories for assets, content, templates and configuration.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── assets\n│  ├── app.css\n│  └── app.js\n├── bin\n│  ├── build.ts\n│  └── serve.ts\n├── content\n│  ├── docs\n│  └── config.json\n├── src\n│  ├── bootstrap.ts\n│  └── collections.ts\n├── templates\n│  ├── elements\n│  ├── layouts\n│  ├── partials\n│  └── docs.edge\n├── vscode_grammars\n│  ├── dotenv.tmLanguage.json\n│  └── main.ts\n├── package-lock.json\n├── package.json\n├── README.md\n├── tsconfig.json\n└── vite.config.js\n```\n\n----------------------------------------\n\nTITLE: Installing Iconify Icon Bundle\nDESCRIPTION: This command installs the HeroIcons icon set from Iconify.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/iconify.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @iconify-json/heroicons\n```\n\n----------------------------------------\n\nTITLE: Database Entry Configuration JSON\nDESCRIPTION: Example of a database entry configuration showing the structure for documentation pages with permalink, title, content path and category.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permalink\": \"introduction\",\n  \"title\": \"Introduction\",\n  \"contentPath\": \"./introduction.md\",\n  \"category\": \"Guides\"\n}\n```\n\n----------------------------------------\n\nTITLE: Output HTML for Rendered SVG Icon\nDESCRIPTION: This is the HTML output generated when rendering the SVG icon in an Edge.js template.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/uikit/iconify.md#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" fill-rule=\"evenodd\" d=\"M11.03 3.97a.75.75 0 0 1 0 1.06l-6.22 6.22H21a.75.75 0 0 1 0 1.5H4.81l6.22 6.22a.75.75 0 1 1-1.06 1.06l-7.5-7.5a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 0 1 1.06 0Z\" clip-rule=\"evenodd\"></path></svg>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom GitHub Link in Edge.js Header Component\nDESCRIPTION: This snippet illustrates how to define custom markup for the GitHub link in the Edge.js header component. It allows for adding additional information like star count.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('github')\n    <span> Github (11K+ Stars) </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Customizing Popup Menu Trigger in Edge.js Header Component\nDESCRIPTION: This snippet demonstrates how to define custom markup for the popup menu trigger in the Edge.js header component. The trigger is only displayed in mobile view.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('popMenu')\n    <span> Open popup menu </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Installing Edge.js v6 and Related Packages\nDESCRIPTION: Commands for installing Edge.js v6 and updating related packages. It also includes uninstalling edge-supercharged as its functionality is now built into Edge.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/content/docs/changelog/upgrading-to-v6.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i edge.js@next\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm uninstall edge-supercharged\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm i edge-stacks@next\nnpm i edge-iconify@next\n```\n\n----------------------------------------\n\nTITLE: Renderer Theme Configuration TypeScript\nDESCRIPTION: TypeScript code showing how to configure the code blocks theme for the Markdown renderer.\nSOURCE: https://github.com/edge-js/edgejs.dev/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const renderer = new Renderer(view, pipeline)\n  .codeBlocksTheme('material-theme-palenight')\n```"
  }
]