[
  {
    "owner": "adird",
    "repo": "nestjs-context-logger",
    "content": "TITLE: Spying on Mocked ContextLogger (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to spy on the mocked ContextLogger's methods within a test. It imports the ContextLogger and a UserService, then uses `jest.spyOn` to create spies for the 'error' and 'info' methods of the ContextLogger. The tests then assert that these methods are called with the expected arguments when the UserService performs certain actions.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContextLogger } from 'nestjs-context-logger';\nimport { UserService } from './user.service';\n\ndescribe('UserService', () => {\n  let service: UserService;\n  let logErrorSpy: jest.SpyInstance;\n  let logInfoSpy: jest.SpyInstance;\n\n  beforeEach(async () => {\n    logErrorSpy = jest.spyOn(ContextLogger.prototype, 'error');\n    logInfoSpy = jest.spyOn(ContextLogger.prototype, 'info');\n    service = new UserService();\n  });\n\n  it('should log user creation', async () => {\n    await service.createUser({ email: 'test@example.com' });\n\n    expect(logInfoSpy).toHaveBeenCalledWith(\n      'User created',\n      expect.objectContaining({ email: 'test@example.com' })\n    );\n  });\n\n  it('should log errors', async () => {\n    const error = new Error('Database error');\n    await service.handleError(error);\n\n    expect(logErrorSpy).toHaveBeenCalledWith(\n      'Operation failed',\n      error\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: ContextLoggerModule Configuration with Hooks (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the ContextLoggerModule with hooks. It shows how to define hooks that run for all log levels and hooks that run only for specific log levels like 'error'. These hooks can be used for metrics, error reporting, or custom side effects. Note that hooks are executed synchronously and sequentially, which can introduce latency to the logging process.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nContextLoggerModule.forRoot({\n  hooks: {\n    // Run for all log levels\n    all: [\n      (message, bindings) => {\n        metrics.increment('log.count');\n      }\n    ],\n    // Run only for errors\n    error: [\n      (message, bindings) => {\n        errorReporting.notify(message, bindings);\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Mocking ContextLogger for Testing (TypeScript)\nDESCRIPTION: This code defines a MockContextLogger class that mimics the interface of the real ContextLogger. It uses Jest's mocking capabilities to replace the actual ContextLogger with this mock during testing.  This allows developers to test components that use the ContextLogger without actually writing to logs. All methods return jest.fn() to enable spying.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// jest/setupFile.ts\nimport 'jest-expect-message';\n\nclass MockContextLogger {\n  public log() {\n    return jest.fn();\n  }\n  public debug() {\n    return jest.fn();\n  }\n  public warn() {\n    return jest.fn();\n  }\n  public error() {\n    return jest.fn();\n  }\n  public static getContext() {\n    return {};\n  }\n  public static updateContext() {\n    return jest.fn();\n  }\n}\n\njest.mock('nestjs-context-logger', () => {\n  return { ContextLogger: MockContextLogger };\n});\n```\n\n----------------------------------------\n\nTITLE: Independent ALS Usage Example (TypeScript)\nDESCRIPTION: This example shows how multiple packages can use AsyncLocalStorage independently without conflict. Each `store.run` call creates a new context that is isolated from the others.  This is a key feature of ALS that allows different parts of the application to use it without interfering with each other.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// All of these work independently\nyourAppStore.run({ tenant: 'abc' }, () => {\n  pinoStore.run({ pid: 123 }, () => {\n    contextLoggerStore.run({ userId: '456' }, () => {\n      // Each store only sees its own context\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: ContextLoggerModule Integration with Pino (TypeScript)\nDESCRIPTION: This snippet shows how nestjs-context-logger integrates with Pino using nestjs-pino under the hood. It demonstrates how to configure the ContextLoggerModule with regular Pino options such as log level and transport. This integration preserves all Pino formatting and transport options while adding context management through AsyncLocalStorage.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ContextLoggerModule.forRoot({\n      // Regular Pino options\n      pinoHttp: {\n        level: 'info',\n        transport: {\n          target: 'pino-pretty'\n        }\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Setup File (JSON)\nDESCRIPTION: This JSON snippet configures Jest to use the setup file created in the previous step.  The `setupFilesAfterEnv` option specifies an array of modules that Jest should execute after the test environment has been set up. This ensures that the ContextLogger is mocked before any tests are run.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest\": {\n    \"setupFilesAfterEnv\": [\n      \"jest-expect-message\",\n      \"<rootDir>/../jest/setupFile.ts\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Lifecycle Diagram (Mermaid)\nDESCRIPTION: Mermaid diagram illustrating the request lifecycle and context propagation within the application, showing how AsyncLocalStorage manages context.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_14\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    req(HTTP Request) --> mid[Init Middleware]\n    \n    %% ALS as external service\n    mid --\"Initialize request context\"--> als[Async Local Storage]\n    als --\"Store\"--> mem[Memory]\n    \n    %% Request flow inside ALS context\n    subgraph als_context[Request Execution in ALS Context]\n        flow1 --\"Your Guards, Pipes, etc\"--> int[Request Interceptor]\n        int --\"Enrich context\"--> mem\n        int --> app[Route Handler Code]\n        \n        subgraph logging[Request Execution]\n            app --\"Log message\"--> logger[Context Logger]\n            logger --\"Fetch context\"--> mem\n            logger --> pino[Pino]\n        end\n    end\n    \n    %% Connect middleware to flow inside ALS\n    als --> flow1[Continue request within dedicated memory context for execution]\n\n    style als_context fill:#e6ffe6,stroke:#666\n    style logging fill:#f5f5f5,stroke:#666\n    style als fill:#e6ffe6\n    style mem fill:#e6ffe6\n```\n\n----------------------------------------\n\nTITLE: Async Configuration (TypeScript)\nDESCRIPTION: Demonstrates asynchronous configuration of the ContextLoggerModule using `forRootAsync`.  This allows injecting dependencies like ConfigService to configure the logger, including setting the log level and enriching the context.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    ContextLoggerModule.forRootAsync({\n        imports: [ConfigModule],\n        inject: [ConfigService],\n        useFactory: (configService: ConfigService) => ({\n          pinoHttp: {\n            level: configService.get('LOG_LEVEL'),\n          },\n            // enrichContext intercepts requests and allows you to enrich the context\n            enrichContext: async (context: ExecutionContext) => ({\n                userId: context.switchToHttp().getRequest().user?.id,\n                tenantId: context.switchToHttp().getRequest().headers['x-tenant-id'],\n                environment: configService.get('NODE_ENV'),\n            }),\n        }),\n    });\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Context Logger Example (TypeScript)\nDESCRIPTION: Demonstrates logging with context enrichment using nestjs-context-logger in TypeScript. This example shows an error message logged with additional context information like correlationId, userId, subscriptionTier, etc.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// With nestjs-context-logger üéâ\nlogger.error('Failed to update user subscription');\n// Output: {\n//   \"level\":\"error\",\n//   \"message\":\"Failed to update user subscription\",\n//   \"correlationId\":\"d4c3f2b1-a5e6-4c3d-8b9a-1c2d3e4f5g6h\",\n//   \"userId\":\"user_456\",\n//   \"subscriptionTier\":\"premium\",\n//   \"service\":\"SubscriptionService\",\n//   \"requestPath\":\"/api/subscriptions/update\",\n//   \"duration\": 432,\n//   \"timestamp\":\"2024-01-01T12:00:00Z\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Context Loss Due to Early Module Initialization (TypeScript)\nDESCRIPTION: This demonstrates a scenario where context can be lost due to initializing a module that depends on the logger before `ContextLoggerModule` has been initialized. Logs generated in `OtherModule`'s `onModuleInit` will not have the request context.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n@Module({\n  imports: [\n    // ‚ùå Too early - logger not initialized yet\n    OtherModule.forRoot({ \n      onModuleInit() {\n        logger.info('Starting up');\n      }\n    }),\n    \n    // Logger module initialized after\n    ContextLoggerModule.forRoot()\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Piping Bootstrap Logs Through ContextLogger (TypeScript)\nDESCRIPTION: This code demonstrates how to pipe all NestJS bootstrap logs through the ContextLogger to ensure consistent logging format and integration. This is achieved by creating a `ContextLogger` instance and passing it to `NestFactory.create` during application setup.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  const bootstrapLogger = new ContextLogger('Bootstrap');\n  \n  const app = await NestFactory.create(AppModule, {\n    bufferLogs: true,\n    logger: bootstrapLogger\n  });\n\n  await app.listen(3000);\n}\n```\n\n----------------------------------------\n\nTITLE: Update Context in Service (TypeScript)\nDESCRIPTION: Demonstrates updating context in a service and logging with the updated context. The logger's context retains the userId from the guard and adds a 'tier' field in the PaymentService.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class PaymentService {\n  private readonly logger = new ContextLogger(PaymentService.name);\n\n  async processPayment(paymentData: PaymentDto) {\n    this.logger.updateContext({ tier: 'premium' });\n    this.logger.info('Processing payment');\n    // Output: {\n    //   \"message\": \"Processing payment\",\n    //   \"userId\": \"user_123\",  // From AuthGuard\n    //   \"tier\": \"premium\",     // Added here\n    //   ...other context\n    // }\n\n    await this.featureService.checkFeatures();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AsyncLocalStorage Context Cleanup (TypeScript)\nDESCRIPTION: This demonstrates how AsyncLocalStorage automatically cleans up context when the execution context exits.  The context is cleaned up at the end of each request, if an error occurs, when all async operations in the chain complete, or even if you forget to clean up manually.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// When this completes, context is eligible for garbage collection\nContextLogger.runWithCtx(async () => {\n  await handleRequest();\n  // After this, context is cleaned up\n});\n```\n\n----------------------------------------\n\nTITLE: AsyncLocalStorage Isolated Storage (TypeScript)\nDESCRIPTION: This example illustrates how AsyncLocalStorage creates isolated storage spaces. Each new AsyncLocalStorage instance gets its own isolated storage space at the Node.js runtime level. This is why multiple packages can use ALS without conflict.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Each new instance gets its own isolated storage space\nconst store1 = new AsyncLocalStorage<Record<string, any>>();\nconst store2 = new AsyncLocalStorage<Record<string, any>>();\n```\n\n----------------------------------------\n\nTITLE: Access Context in Service (TypeScript)\nDESCRIPTION: Example of accessing and using the logger's context in another service (FeatureService). The context, including userId and tier, persists from previous services.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class FeatureService {\n  private readonly logger = new ContextLogger(FeatureService.name);\n\n  async checkFeatures() {\n    this.logger.info('Checking features');\n    // Output: {\n    //   \"message\": \"Checking features\",\n    //   \"userId\": \"user_123\",  // Still here from AuthGuard\n    //   \"tier\": \"premium\",     // Still here from PaymentService\n    //   ...other context\n    // }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AsyncLocalStorage Context Isolation in nestjs-context-logger (TypeScript)\nDESCRIPTION: This code shows how nestjs-context-logger creates its own AsyncLocalStorage instance.  This instance is automatically isolated from other ALS instances in the application code, other libraries, and other parts of the system.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Inside nestjs-context-logger package\nconst globalStore = new AsyncLocalStorage<Record<string, any>>();\n```\n\n----------------------------------------\n\nTITLE: Async Configuration Output (TypeScript)\nDESCRIPTION: Example output demonstrating the enriched log with custom context from async configuration. Shows fields like userId, tenantId, and environment being added to the log output.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Output: {\n//   \"message\": \"Some log message\",\n//   \"userId\": \"user_123\",\n//   \"tenantId\": \"tenant_456\",\n//   \"environment\": \"production\",\n//   ...other default fields\n// }\n```\n\n----------------------------------------\n\nTITLE: Context Adaptation Configuration (TypeScript)\nDESCRIPTION: Configuration for adapting (transforming) the context before logging.  This example shows how to remove sensitive data, rename fields, and add new fields.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nContextLoggerModule.forRoot({\n  contextAdapter: (context) => ({\n    ...context,\n    sensitive: undefined,           // Remove sensitive data\n    requestId: context.reqId,      // Rename fields\n    timestamp: Date.now()          // Add new fields\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Context Loss in Background Operations (TypeScript)\nDESCRIPTION: This example shows how context can be lost in background operations or timers.  Since the `setTimeout` callback is executed in a new execution context, the logger will not have any context available.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// ‚ùå Context lost - new execution context\nsetTimeout(() => {\n  logger.info('Task done');  // No context available\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Log Field Grouping Configuration (TypeScript)\nDESCRIPTION: Configuration for grouping log fields under specific keys (bindingsKey, contextKey). This example shows how to organize log fields into 'metadata' and 'params' for better queryability.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nContextLoggerModule.forRoot({\n  groupFields: {\n    bindingsKey: 'params',    // Groups runtime bindings\n    contextKey: 'metadata'    // Groups context information\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Linking nestjs-context-logger\nDESCRIPTION: These commands create symbolic links to use the locally modified `nestjs-context-logger` package in the test application. This avoids publishing and installing the package for each change, speeding up the testing process.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# In nestjs-context-logger directory\nnpm link\n\n# In your test app directory\nnpm link nestjs-context-logger\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setup\nDESCRIPTION: These commands clone the repository, install dependencies, and run tests to verify the initial setup. It ensures the development environment is properly configured before making changes.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone your fork\ngit clone https://github.com/YOUR_USERNAME/nestjs-context-logger.git\n\n# Install dependencies\nnpm install\n\n# Run tests to verify setup\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: These commands execute the test suite, either fully or in watch mode. Running tests is crucial for verifying that changes do not introduce regressions and that new features function as expected.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run full test suite\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n```\n\n----------------------------------------\n\nTITLE: Log Output After Grouping (JSON)\nDESCRIPTION: Example JSON log output *after* applying field grouping.  Context fields are grouped under 'metadata' and binding fields under 'params'.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {              // grouped context\n    \"userId\": \"123\",\n    \"requestId\": \"abc\"\n  },\n  \"params\": {               // grouped bindings\n    \"correlationId\": \"xyz\",\n    \"timestamp\": \"...\"\n  },\n  \"level\": \"info\",\n  \"msg\": \"User logged in\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Context in Guard (TypeScript)\nDESCRIPTION: Example of updating the logger's context within a NestJS Guard. The updated context (userId) will be available throughout the request lifecycle.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class ConnectAuthGuard implements CanActivate {\n  private readonly logger = new ContextLogger(ConnectAuthGuard.name);\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const connectedUser = await this.authenticate(request);\n    // üëá Magic here üëá\n    ContextLogger.updateContext({ userId: connectedUser.userId });\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Log Output Before Grouping (JSON)\nDESCRIPTION: Example JSON log output *before* applying field grouping. Shows individual context and binding fields at the root level.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"userId\": \"123\",           // context field\n  \"requestId\": \"abc\",        // context field\n  \"correlationId\": \"xyz\",    // binding\n  \"timestamp\": \"...\",        // binding\n  \"level\": \"info\",\n  \"msg\": \"User logged in\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import ContextLoggerModule (TypeScript)\nDESCRIPTION: Importing and using ContextLoggerModule in AppModule for automatic context logging. This code demonstrates how to integrate the ContextLoggerModule into the main module of a NestJS application.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// app.module.ts\nimport { ContextLoggerModule } from 'nestjs-context-logger';\n\n@Module({\n  imports: [\n    ContextLoggerModule.forRoot()\n  ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Importing ContextLoggerModule in AppModule\nDESCRIPTION: This TypeScript code snippet imports and includes the `ContextLoggerModule` in the `AppModule` of a NestJS application. This makes the context-aware logger available for use within the application.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ContextLoggerModule } from 'nestjs-context-logger';\n\n@Module({\n  imports: [ContextLoggerModule],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Traditional Logging Example (TypeScript)\nDESCRIPTION: Demonstrates traditional logging in TypeScript without context enrichment using a standard logger. This example shows a simple error message logged without any additional context information.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Traditional logging üò¢\nlogger.error('Failed to update user subscription');\n// Output: {\"level\":\"error\",\"message\":\"Failed to update user subscription\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a NestJS Test App\nDESCRIPTION: This command generates a new NestJS application for testing purposes. It provides a clean environment for integrating and testing the `nestjs-context-logger` package.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnest new test-app\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Logs Control (TypeScript)\nDESCRIPTION: Configuration to ignore NestJS framework bootstrap logs during startup. This suppresses the framework's internal logging during application initialization.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nContextLoggerModule.forRoot({\n  ignoreBootstrapLogs: true  // Suppress framework bootstrap logs\n})\n```\n\n----------------------------------------\n\nTITLE: Install nestjs-context-logger (Bash)\nDESCRIPTION: Installation command for nestjs-context-logger using npm. This command adds the nestjs-context-logger package as a dependency to your project.\nSOURCE: https://github.com/adird/nestjs-context-logger/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nestjs-context-logger\n```"
  }
]