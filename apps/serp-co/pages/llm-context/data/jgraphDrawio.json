[
  {
    "owner": "jgraph",
    "repo": "drawio",
    "content": "TITLE: Loading MathJax from CDN in HTML\nDESCRIPTION: This snippet shows how to load MathJax from a CDN into a web page using a script tag. It loads the `tex-mml-chtml.js` component, which supports LaTeX, MathML, and CommonHTML output. The `async` attribute ensures that the script is loaded asynchronously.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/math/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Requiring MathJax in a Node Application\nDESCRIPTION: This snippet demonstrates how to require the MathJax package in a Node.js application. It initializes MathJax with a configuration object and then executes a callback function after MathJax is loaded.  Error handling is implemented via `catch`.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/math/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire('mathjax').init({ ... }).then((MathJax) => { ... });\n```\n\n----------------------------------------\n\nTITLE: Using MathJax to Convert TeX to SVG in Node\nDESCRIPTION: This code snippet shows how to use MathJax in a Node.js application to convert a TeX expression to SVG format. It initializes MathJax with the necessary input and output formats, then uses the `tex2svg` method to perform the conversion. The resulting SVG is then printed to the console. Error handling is implemented via `catch`.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/math/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire('mathjax').init({\n  loader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) => {\n  const svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\n  console.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) => console.log(err.message));\n```\n\n----------------------------------------\n\nTITLE: Installing MathJax via NPM\nDESCRIPTION: This snippet demonstrates how to install the MathJax package using npm.  This command installs version 3 of MathJax. The installed files can then be moved to a server location to host MathJax locally.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/math/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install mathjax@3\n```\n\n----------------------------------------\n\nTITLE: Moving MathJax Files to Server Location\nDESCRIPTION: This snippet demonstrates how to move the MathJax files to a location accessible by your web server after installing it using NPM. `<path-to-server-location>` should be replaced with the absolute path of the target directory.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/math/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmv node_modules/mathjax/es5 <path-to-server-location>/mathjax\n```\n\n----------------------------------------\n\nTITLE: draw.io Image Resizing: Resize to Fixed Width\nDESCRIPTION: This command executes the draw.io image resizing script, setting the width of all embedded images to 200 pixels.  It takes the path to the draw.io file as input and uses the --width parameter to specify the desired width.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/etc/imageResize/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnode drawImageResize.js --file=path/to/your/file.drawio --width=200\n```\n\n----------------------------------------\n\nTITLE: draw.io Image Resizing: Resize to Percentage\nDESCRIPTION: This command executes the draw.io image resizing script, scaling all embedded images to 40% of their original width. It uses the --percentage parameter to define the scaling factor. The path to the input draw.io file must be provided.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/etc/imageResize/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnode drawImageResize.js --file=path/to/your/file.drawio --percentage=40\n```\n\n----------------------------------------\n\nTITLE: Loading Hosted MathJax in HTML\nDESCRIPTION: This snippet shows how to load MathJax from a locally hosted server using a script tag.  `<url-to-your-site>` should be replaced with the correct URL to the directory containing the mathjax assets.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/math/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<script id=\"MathJax-script\" async src=\"<url-to-your-site>/mathjax/tex-chtml.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: draw.io Image Resizing: Install Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the draw.io image resizing script using npm. It is a prerequisite to running the script.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/etc/imageResize/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing MathJax via Git\nDESCRIPTION: This snippet demonstrates how to clone the MathJax repository from GitHub and move the `es5` directory to a server location. It uses `git clone` to download the repository, `mv` to move the `es5` directory, and `rm -rf` to remove the temporary directory. `<path-to-server-location>` should be replaced with the absolute path of the target directory.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/math/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 <path-to-server-location>/mathjax\nrm -rf mj-tmp\n```\n\n----------------------------------------\n\nTITLE: Building MathJax Components\nDESCRIPTION: This command rebuilds the components within the `es5` directory using npm. It's used to regenerate the component files from the MathJax source repository. Use `--silent` to suppress output during the build process.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/math/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run make-es5 --silent\n```\n\n----------------------------------------\n\nTITLE: Bug Report Template Example\nDESCRIPTION: This is a template for reporting bugs in MathJax. It provides a structured format to describe the issue, steps to reproduce, and relevant technical details to help developers understand and fix the problem.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/math/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nShort and descriptive example bug report title\n\n### Issue Summary\n\nA summary of the issue and the browser/OS environment in which it occurs. If\nsuitable, include the steps required to reproduce the bug.\n\n### Steps to Reproduce\n\n1. This is the first step\n2. This is the second step\n3. Further steps, etc.\n\nAny other information you want to share that is relevant to the issue\nbeing reported. Especially, why do you consider this to be a bug? What\ndo you expect to happen instead?\n\n### Technical details:\n\n* MathJax Version: 2.3 (latest commit: f3aaf3a2a3e964df2770dc4aaaa9c87ce5f47e2c)\n* Client OS: Mac OS X 10.8.4\n* Browser: Chrome 29.0.1547.57\n```\n\n----------------------------------------\n\nTITLE: Localization String: Language Setting (Malayalam)\nDESCRIPTION: This snippet shows the localization for the term 'language' in Malayalam.  It is used to display the language setting option in the draw.io user interface. The 'languageCode' is also provided indicating the language's ISO code.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/resources/dia_ml.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"language\": \"ഭാഷ\",\n  \"languageCode\": \"ഭാഷാ കോഡ്\"\n}\n```\n\n----------------------------------------\n\nTITLE: Localization String: adaptiveColors\nDESCRIPTION: This snippet defines the Telugu translation for \"adaptiveColors\".  It's used to display the 'Adaptive Colors' option in the draw.io interface, allowing the application to adjust colors dynamically.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/resources/dia_te.txt#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nadaptiveColors=అనుకూల రంగులు\n```\n\n----------------------------------------\n\nTITLE: Localization String: animations\nDESCRIPTION: This snippet defines the Telugu translation for \"animations\". It's used to display the 'Animations' option in the draw.io interface, referring to visual effects applied to diagrams.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/resources/dia_te.txt#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nanimations=యానిమేషన్లు\n```\n\n----------------------------------------\n\nTITLE: Localization String: diagramLanguage\nDESCRIPTION: This snippet defines the Telugu translation for \"diagramLanguage\". It's used to display the 'Diagram Language' option in the draw.io interface, allowing the user to select the language of the diagram's content.\nSOURCE: https://github.com/jgraph/drawio/blob/dev/src/main/webapp/resources/dia_te.txt#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndiagramLanguage=చిత్రంలోని భాష\n```"
  }
]