[
  {
    "owner": "3dem",
    "repo": "relion",
    "content": "TITLE: Configuring Precision, Accelerators, and Build Flags - CMake\nDESCRIPTION: This snippet manages compiler flags, library linking, and build configuration for RELION using CMake. It sets double or single precision modes for CPU and various accelerator backends (CUDA, HIP, SYCL), configures custom memory allocators, and toggles GPU/accelerator support based on environment variables and CMake options. The code handles finding and including necessary toolchain/cmake modules, adjusting source and include paths, setting up optional GUI and TBB library support, enforcing OpenMP, and integrating MPI (setting compiler paths). Dependencies include CUDA, HIP, SYCL toolkits/libraries, MPI, OpenMP, and optionally FLTK/X11 for GUI and Intel's MKL for FFT support. Key input parameters are the CMake variables DoublePrec_CPU, DoublePrec_ACC, CUDA, HIP, SYCL, GUI, FORCE_OWN_TBB, MKLFFT, and several others, which determine the resulting build environment. The output is a configured build directory with appropriate compiler/linker flags set, conditional source inclusions, and error/warning messages for misconfiguration or missing dependencies. Limitations include reliance on correct environment/CMake variable setup and the availability of toolchain components at build time.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------DOUBLE PRECISION (GPU-CODE) OR NOT--\nif(DoublePrec_CPU)\n    message(STATUS \"Setting cpu precision to double\")\nelse(DoublePrec_CPU)\n    message(STATUS \"Setting cpu precision to single\")\n    add_definitions(-DRELION_SINGLE_PRECISION)\nendif(DoublePrec_CPU)\n\nif(DoublePrec_ACC)\n    message(STATUS \"Setting accelerated code precision to double\")\n    add_definitions(-DACC_DOUBLE_PRECISION)\n\t  set(DeviceTexture FALSE)\nelse(DoublePrec_ACC)\n    message(STATUS \"Setting accelerated code precision to single\")\nendif(DoublePrec_ACC)\n\nif(MDT_TYPE_CHECK)\n    message(\"-- MetaDataTable type check is enabled.\")\n    add_definitions(-DMETADATA_TABLE_TYPE_CHECK)\nendif()\n\nif(CUDA)\n    # -----------------------------------------------------------------------------CUDA--\n    # DOC: http://www.cmake.org/cmake/help/v3.0/module/FindCUDA.html\n    include(${CMAKE_SOURCE_DIR}/cmake/BuildTypes.cmake)\n    FIND_PACKAGE(CUDA)\n\n    if(CUDA_FOUND)\n      message(STATUS \"Using cuda wrapper to compile....\")\n      if( (NOT ${CUDA_VERSION} VERSION_LESS \"7.5\") AND (NOT DoublePrec_ACC) )\n          message(STATUS \"Cuda version is >= 7.5 and single-precision build, enable double usage warning.\")\n\t      set(WARN_DBL \"--ptxas-options=-warn-double-usage\") # cuda>=7.5\n\telseif( ${CUDA_VERSION} VERSION_LESS \"7.0\")\n\t      message(WARNING \"Cuda version is less than 7.0, so relion will be compiled without GPU support.\")\n          message(STATUS \"Using non-cuda compilation....\")\n\t      set(CUDA OFF)\n      endif()\n      if(CUDA)\n          add_definitions(-D_CUDA_ENABLED)\n      endif()\n    else(CUDA_FOUND)\n        message(FATAL_ERROR \"CUDA enabled but unlable to locate packages...\")\n    endif(CUDA_FOUND)\nelif(HIP)\n    # ------------------------------------------------------------------------------HIP--\n    if (DEFINED ENV{ROCM_PATH})\n        include($ENV{ROCM_PATH}/lib/cmake/hip/FindHIP.cmake)\n    elif(DEFINED ENV{HIP_PATH})\n        include($ENV{HIP_PATH}/cmake/FindHIP.cmake)\n    elif(EXISTS \"${CMAKE_SOURCE_DIR}/cmake/FindHIP.cmake\")\n        include(${CMAKE_SOURCE_DIR}/cmake/FindHIP.cmake)\n    else()\n        include(/opt/rocm/hip/cmake/FindHIP.cmake)\n    endif()\n\n    find_package(HIP REQUIRED)\n\n    if(HIP_FOUND)\n      message(STATUS \"Using hip wrapper to compile....\")\n      if( ${HIP_VERSION} VERSION_LESS \"5.0\")\n\t      message(WARNING \"ROCm version is less than 5.0, so relion will be compiled without GPU support.\")\n          set(HIP OFF)\n      endif()\n      if(HIP)\n          add_definitions(-D_HIP_ENABLED)\n          foreach(hiplib hipfft hipcub rocfft rocprim hiprand rocrand)\n            find_package(${hiplib} REQUIRED)\n            if(${hiplib}_FOUND)\n                message(STATUS \"Found ${${hiplib}_LIBRARIES} in ${${hiplib}_INCLUDE_DIR}\")\n            endif()\n          endforeach()\n      endif()\n    else(HIP_FOUND)\n        message(FATAL_ERROR \"HIP enabled but unlable to locate packages. ROCm >= 5.0 is required to configure RELION with HIP using CMake.\")\n    endif(HIP_FOUND)\nelif(SYCL)\n\tadd_definitions(-D_SYCL_ENABLED=1 -DUSE_MPI_COLLECTIVE)\n\tif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"IntelLLVM\" OR \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\" OR \"${CMAKE_CXX_COMPILER}\" MATCHES \"mpiicpx\")\n\t\tadd_definitions(-D_DPCPP_ENABLED=1)\n\t\tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fhonor-infinities -fhonor-nans -fsigned-zeros\")\n\tendif()\nelif(ALTCPU)\n\tadd_definitions(-DALTCPU=1 -DUSE_MPI_COLLECTIVE)\n\tif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"IntelLLVM\" OR \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n\t\tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fhonor-infinities -fhonor-nans -fsigned-zeros\")\n\tendif()\nendif()\n \n# ----------------------------------------------------------INCLUDE ALL BUILD TYPES---\n# This has to be AFTER project() and find_package(HIP) but BEFORE find_package(CUDA).\n# This is ugly but otherwise causes the GitHub issue #1032.\nif (NOT CUDA)\n    include(${CMAKE_SOURCE_DIR}/cmake/BuildTypes.cmake)\nendif()\n\n# ------------------------------------------------------------------ALLOCATOR CHOICE--\noption(CachedAlloc \"CachedAlloc\" ON)\nif(NOT CachedAlloc)\n    if (CUDA)\n        add_definitions(-DCUDA_NO_CUSTOM_ALLOCATION)\n    endif()\n    if (HIP)\n        add_definitions(-DHIP_NO_CUSTOM_ALLOCATION)\n    endif()\n\tmessage(STATUS \"Cached allocation is disabled.\")\nendif(NOT CachedAlloc)\noption(CustomAllocMemGuards \"CustomAllocMemGuards\" OFF)\nif(CustomAllocMemGuards)\n    add_definitions(-DCUSTOM_ALLOCATOR_MEMGUARD)\n    message(STATUS \"Abort on out of bound write.\")\nendif(CustomAllocMemGuards)\n# -------------------------------------------------------------FORCE USE OF STL-LIBS--\nif (CUDA)\n    option(CudaForceSTL \"CudaForceSTL\" OFF)\n    if(CudaForceSTL)\n        add_definitions(-DCUDA_FORCESTL)\n        message(STATUS \"Building cuda files using stl-libs for sort, min and max.\")\n    endif(CudaForceSTL)\nelif (HIP)\n    option(HipForceSTL \"HipForceSTL\" OFF)\n    if(HipForceSTL)\n        add_definitions(-DHIP_FORCESTL)\n        message(STATUS \"Building hip files using stl-libs for sort, min and max.\")\n    endif(HipForceSTL)\nelif (SYCL)\n\toption(SyclForceOneDPL \"SyclForceOneDPL\" OFF)\n\tif(SyclForceOneDPL)\n\t\tadd_definitions(-DUSE_ONEDPL)\n\t\tif(EXISTS \"$ENV{DPL_ROOT}/linux/include/oneapi/dpl/algorithm\")\n\t\t\tinclude_directories(\"$ENV{DPL_ROOT}/linux/include\")\n\t\t\tmessage(STATUS \"Building SYCL files using oneDPL: $ENV{DPL_ROOT}/linux/include\")\n\t\telse()\n\t\t\tmessage(WARNING \"oneDPL header is not found. Please set DPL_ROOT environment or include oneDPL header directory for CMAKE_CXX_FLAGS\")\n\t\tendif()\n\tendif(SyclForceOneDPL)\nendif()\n# ------------------------------------------------------------------------GUI OR NOT--\n# Skip FLTK/X11-dependent binaries or not\noption(GUI \"GUI\" ON)\nif(NOT GUI)\n    message(STATUS \"Omitting GUI targets as per your request\")\nendif()\n\n# ---------------------------------------------------------------------------TBB --\n\noption(FORCE_OWN_TBB \"FORCE_OWN_TBB\" OFF)\n\nif (ALTCPU)\n\tif (FORCE_OWN_TBB)\n\t\tmessage(STATUS \"Will ignore any potentially installed system TBB lib, as per your request.\")\n\t\tinclude(${CMAKE_SOURCE_DIR}/cmake/BuildTBB.cmake)\n\t\tset(INSTALL_OWN_TBB 1)\n\telse(FORCE_OWN_TBB)\n\t\tfind_package(TBB)\n\t\tif(TBB_FOUND)\n\t\t\tinclude_directories(\"${TBB_INCLUDE_DIRS}\")\n\t\t\tmessage(STATUS \"TBB_FOUND :        ${TBB_FOUND}\")\n\t\t\tmessage(STATUS \"TBB_INCLUDE_DIRS : ${TBB_INCLUDE_DIRS}\")\n\t\t\tmessage(STATUS \"TBB_VERSION :      ${TBB_VERSION}\")\n\t\t\tmessage(STATUS \"TBB_LIBRARIES :    ${TBB_LIBRARIES}\")\n\t\telse(TBB_FOUND)\n\t\t\tinclude(${CMAKE_SOURCE_DIR}/cmake/BuildTBB.cmake)\n\t\t\tset(INSTALL_OWN_TBB 1)\n\t\tendif(TBB_FOUND)\n\tendif(FORCE_OWN_TBB)\nendif(ALTCPU)\n\n# -------------------------------------------------------------------------------MPI--\nfind_package(MPI REQUIRED)\n\nif (\"${MPI_CXX_INCLUDE_DIRS}\" STREQUAL \"\")\n\tif (NOT \"${MPI_CXX_INCLUDE_PATH}\" STREQUAL \"\")\n\t\tinclude_directories(\"${MPI_CXX_INCLUDE_PATH}\")\n\tendif()\nelse()\n\tinclude_directories(\"${MPI_CXX_INCLUDE_DIRS}\")\nendif()\n\nmessage(STATUS \"MPI_INCLUDE_PATH : ${MPI_INCLUDE_PATH}\")\nmessage(STATUS \"MPI_LIBRARIES : ${MPI_LIBRARIES}\")\nmessage(STATUS \"MPI_CXX_INCLUDE_PATH : ${MPI_CXX_INCLUDE_PATH}\")\nmessage(STATUS \"MPI_CXX_LIBRARIES : ${MPI_CXX_LIBRARIES}\")\n\nmessage(STATUS \"CMAKE_C_COMPILER : ${CMAKE_C_COMPILER}\")\nmessage(STATUS \"CMAKE_CXX_COMPILER : ${CMAKE_CXX_COMPILER}\")\nmessage(STATUS \"MPI_C_COMPILER : ${MPI_C_COMPILER}\")\nmessage(STATUS \"MPI_CXX_COMPILER : ${MPI_CXX_COMPILER}\")\n\nSET(CMAKE_C_COMPILER ${MPI_C_COMPILER})\nSET(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})\nif(HIP)\n    set(CMAKE_CXX_COMPILER hipcc)\n    message(STATUS \"CMAKE_CXX_COMPILER : ${CMAKE_CXX_COMPILER}\")\nelif(SYCL)\n#\tset(CMAKE_C_COMPILER icx)\n#\tset(CMAKE_CXX_COMPILER icpx)\n\tmessage(STATUS \"CMAKE_C_COMPILER : ${CMAKE_C_COMPILER}\")\n\tmessage(STATUS \"CMAKE_CXX_COMPILER : ${CMAKE_CXX_COMPILER}\")\nendif()\n\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\n# ----------------------------------------------------------------- OpenMP ----------\n# This MUST be set before all cuda_add_executable/library calls.\n# Otherwise the -Xcompiler argument to NVCC does not contain -fopenmp\n# and #pragma omp critical is SILENTLY ignored, giving a wrong binary!!!\n# https://github.com/3dem/relion/issues/1016\n\nif(SYCL)    # Intel DPC++ specific\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fiopenmp\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fiopenmp\")\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fiopenmp\")\n\n\tset(CMAKE_C_FLAGS \"-std=c99 ${CMAKE_C_FLAGS}\")\n\tset(CMAKE_CXX_FLAGS \"-fPIC -std=c++17 ${CMAKE_CXX_FLAGS}\")\nelse()\n\tFIND_PACKAGE(OpenMP REQUIRED)\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\n\n\tset(CMAKE_C_FLAGS \"-std=c99 ${CMAKE_C_FLAGS}\")\n\tset(CMAKE_CXX_FLAGS \"-fPIC -std=c++14 ${CMAKE_CXX_FLAGS}\")\nendif()\n\n# ----------------------------------------------------------Intel Compiler support --\n# ----------------------------------  and build flags including MKL and IPP ---------\n\nmessage(STATUS \"CMAKE_CXX_COMPILER_ID : ${CMAKE_CXX_COMPILER_ID}\")\n\nif(MKLFFT)\n\tif (NOT \"$ENV{MKLROOT}\" STREQUAL \"\")\n\t\tinclude_directories(\"$ENV{MKLROOT}/include/fftw\")\n\t\tmessage(STATUS \"MKL FFTW wrapper header files: $ENV{MKLROOT}/include/fftw\")\n\telse()\n\t\tmessage(WARNING \"COMPILATION MAY FAIL since no MKL FFTW wrapper header files could be found. Please make sure the MKLROOT environmental variable is set.\")\n\tendif()\n\tadd_definitions(-DMKLFFT)\nendif(MKLFFT)\n\n# NVCC calls ICC several times. The first call is to check compiler compatibility\n# and -Xcompiler is not passed. Thus, even with -diag-disable=10441,10412,\n# the deprecation warning cannot be completely silenced.\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU/CPU Acceleration Options (CUDA, HIP, SYCL, ALTCPU)\nDESCRIPTION: Defines CMake options for enabling different acceleration backends: HIP, SYCL, ALTCPU, and CUDA (which is ON by default unless another option is explicitly enabled). It ensures that only one acceleration backend (CUDA, HIP, SYCL, or ALTCPU) can be enabled at a time, issuing a fatal error if conflicting options are selected. For HIP, it sets the AMD GPU target (`AMDGPU_TARGETS`), defaulting to 'gfx906' if `HIP_ARCH` is not specified. For SYCL, it handles optional CUDA and HIP compilation targets (`SYCL_CUDA_TARGET`, `SYCL_HIP_TARGET`), defaulting to 'sm_50' and 'gfx906' respectively if targets are not specified but compilation is enabled.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# -------------------------------------------------------------------FURTHER OPTIONS--\n\n# CUDA on by default, so check for other GPU/CPU-accelration request and possible conflicting dual-requests\noption(HIP \"Enable HIP GPU acceleration\" OFF)\noption(SYCL \"Enable SYCL acceleration\" OFF)\noption(ALTCPU \"Enable Accelerated CPU version\" OFF)\nif(HIP)\n\tset(HIP_ARCH \"\" CACHE STRING \"HIP architecture to use\")\n\tif (HIP_ARCH STREQUAL \"\")\n\t\tmessage(STATUS \"Setting fallback HIP_ARCH=gfx906\")\n\t\tset(AMDGPU_TARGETS \"gfx906\" CACHE STRING\n\t\t\t\t\"Semicolon delimited list of AMD GPU targets to compile for (e.g gf908;gfx90a)\")\n\telse ()\n\t\tmessage(STATUS \"Using provided HIP_ARCH=${HIP_ARCH}\")\n\t\tset(AMDGPU_TARGETS \"${HIP_ARCH}\" CACHE STRING\n\t\t\t\t\"Semicolon delimited list of AMD GPU targets to compile for (e.g gf908;gfx90a)\")\n\tendif ()\n\toption(CUDA \"Enable CUDA GPU acceleration\" OFF)\n\tif(HIP AND CUDA)\n\t\tmessage(FATAL_ERROR \"You cannot build with both CUDA=ON and HIP=ON.  Please choose one and rerun CMAKE\")\n\tendif()\nelsif(SYCL)\n  option(CUDA \"Enable CUDA GPU acceleration\" OFF)\n  if(SYCL AND CUDA)\n    message(FATAL_ERROR \"You cannot build with both CUDA=ON and SYCL=ON. Please choose one and rerun CMAKE\")\n  endif()\n\n  if(DEFINED SYCL_CUDA_COMPILE)\n\tif(DEFINED SYCL_CUDA_TARGET)\n\t  message(STATUS \"Using provided SYCL_CUDA_TARGET: sm_${SYCL_CUDA_TARGET}\")\n\telse(DEFINED SYCL_CUDA_TARGET)\n\t  message(STATUS \"Setting fallback SYCL_CUDA_TARGET: sm_50\")\n\t  set(SYCL_CUDA_TARGET \"50\")\n\tendif(DEFINED SYCL_CUDA_TARGET)\n  endif(DEFINED SYCL_CUDA_COMPILE)\n  if(DEFINED SYCL_HIP_COMPILE)\n\tif(DEFINED SYCL_HIP_TARGET)\n\t  message(STATUS \"Using provided SYCL_HIP_TARGET: ${SYCL_HIP_TARGET}\")\n\telse(DEFINED SYCL_HIP_TARGET)\n\t  message(STATUS \"Setting fallback SYCL_HIP_TARGET: gfx906\")\n\t  set(SYCL_HIP_TARGET \"gfx906\")\n\tendif(DEFINED SYCL_HIP_TARGET)\n  endif(DEFINED SYCL_HIP_COMPILE)\nelsif(ALTCPU)\n  option(CUDA \"Enable CUDA GPU acceleration\" OFF)\n  if(ALTCPU AND CUDA)\n    message(FATAL_ERROR \"You cannot build with both CUDA=ON and ALTCPU=ON.  Please choose one and rerun CMAKE\")\n  endif()\nelse()\n\toption(CUDA \"Enable CUDA GPU acceleration\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating and Configuring RELION Target Executables - CMake\nDESCRIPTION: This code snippet iterates over the target lists for RELION, constructing executable targets, assigning meaningful prefixes, setting properties, and linking all required libraries using CMake. For each main, SPA, TOMO, and EXPERIMENTAL target, it sets up dependencies (such as relion_lib, FFTW, MPI, SYCL, TBB, and image libraries) and defines specific compiler and linker flags based on environment and configuration flags (e.g., SYCL, CUDA, ALTCPU, TIFF_FOUND). Installation paths are also specified for produced executables. This systematic target generation allows for flexible and modular build management in a complex scientific software codebase.\nSOURCE: https://github.com/3dem/relion/blob/master/src/apps/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nforeach (_target ${RELION_TARGETS})\\n\\tGET_FILENAME_COMPONENT(_target \"relion_${_target}\" NAME_WE)  #specify target name WE=WithoutExtension\\n\\n\\tif(${_target} STREQUAL \"maingui\") # We no longer want \"relion_maingui\"\\n\\t\\tset(_target \"relion\")\\n\\t\\tadd_executable(${_target} maingui.cpp)\\n\\telse()\\n\\t\\tadd_executable(${_target} ${_target}.cpp )\\n\\t\\tset_target_properties(${_target} PROPERTIES PREFIX \"relion_\")\\n\\tendif()\\n\\n\\tset(LIB relion_lib)\\n\\n \\tadd_dependencies(${_target} relion_lib)\\n\\n\\tif(NOT MKLFFT)\\n\\t\\ttarget_link_libraries(${_target} ${LIB} ${EXTRA_LIBS} ${MPI_LIBRARIES} ${CMAKE_DL_LIBS})\\n\\telse()\\n\\t\\ttarget_link_libraries(${_target} ${LIB} ${FFTW_LIBRARIES} ${EXTRA_LIBS} ${MPI_LIBRARIES} ${CMAKE_DL_LIBS})\\n\\tendif(NOT MKLFFT)\\n\\n\\tif(CUDA_FOUND OR HIP_FOUND)\\n\\t\\ttarget_link_libraries(${_target} relion_gpu_util)\\n\\tendif()\\n\\n\\tif(SYCL)\\n\\t\\ttarget_link_libraries(${_target} relion_sycl_util sycl OpenCL relion_lib)\\n\\t\\tlist(FIND SYCL_TARGETS ${_target} IS_SYCL_TARGET)\\n\\t\\tif(NOT ${IS_SYCL_TARGET} LESS 0)\\n\\t\\t\\tif(DEFINED SYCL_CUDA_COMPILE OR DEFINED SYCL_HIP_COMPILE)\\n\\t\\t\\t\\tif(SYCL_CUDA_COMPILE)\\n\\t\\t\\t\\t\\tset(REL_SYCL_TARGET_LINK -Wno-unknown-cuda-version)\\n\\t\\t\\t\\tendif(SYCL_CUDA_COMPILE)\\n\\t\\t\\t\\tset(REL_SYCL_TARGET_LINK ${REL_SYCL_TARGET_LINK} -fsycl -fsycl-device-code-split=per_kernel -fsycl-targets=${REL_SYCL_TARGETS} ${REL_SYCL_BACKEND})\\n\\t\\t\\telse(DEFINED SYCL_CUDA_COMPILE OR DEFINED SYCL_HIP_COMPILE)\\n\\t\\t\\t\\tset(REL_SYCL_TARGET_LINK -fsycl -fsycl-device-code-split=per_kernel -fsycl-targets=spir64)\\n#\\t\\t\\t\\tset(REL_SYCL_TARGET_LINK -fsycl -fsycl-device-code-split=per_kernel -fsycl-targets=spir64 -Xsycl-target-backend=spir64 \"-options -cl-fast-relaxed-math\")\\n\\t\\t\\tendif(DEFINED SYCL_CUDA_COMPILE OR DEFINED SYCL_HIP_COMPILE)\\n\\t\\t\\tstring(REPLACE \";\" \" \" REL_SYCL_TARGET_LINK_FLAGS \"${REL_SYCL_TARGET_LINK}\")\\n\\t\\t\\tset_target_properties(${_target} PROPERTIES LINK_FLAGS \"-Wno-unused-command-line-argument ${REL_SYCL_TARGET_LINK_FLAGS}\")\\n\\t\\tendif()\\n\\tendif(SYCL)\\n\\n\\tif (ALTCPU)\\n\\t\\ttarget_link_libraries(${_target} ${TBB_LIBRARIES})\\n\\tendif(ALTCPU)\\n\\n\\tset_target_properties(${_target} PROPERTIES\\n\\t                      XX_EXTENSIONS OFF\\n\\t)\\n\\n\\tlist(FIND GUI_TARGETS ${_target} IS_GUI_TARGET)\\n\\tif((NOT ${IS_GUI_TARGET} LESS 0) OR (${_target} STREQUAL \"relion\"))\\n\\t\\tadd_dependencies(${_target} relion_gui_lib)\\n\\t\\ttarget_link_libraries(${_target} relion_gui_lib ${FLTK_LIBRARIES} ${X11})\\n\\tendif()\\n\\n\\tif(TIFF_FOUND)\\n\\t\\ttarget_link_libraries(${_target} ${TIFF_LIBRARIES})\\n\\tendif()\\n\\n\\tlist(FIND RELION_MPI_TARGETS ${_target}.cpp IS_MPI_TARGET)\\n\\tif(NOT ${IS_MPI_TARGET} LESS 0)\\n\\t\\ttarget_link_libraries(${_target} ${MPI_LIBRARIES})\\n\\tendif()\\n\\n\\tinstall (TARGETS ${_target} RUNTIME DESTINATION bin)\\n\\nendforeach()\\n\\nforeach (_target ${RELION_JAZ_SPA_TARGETS})\\n\\tGET_FILENAME_COMPONENT(_target \"relion_${_target}\" NAME_WE)\\n\\tadd_executable(${_target} ${CMAKE_SOURCE_DIR}/src/jaz/single_particle/apps/${_target}.cpp)\\n\\tset(LIB relion_lib)\\n \\tadd_dependencies(${_target} relion_lib)\\n\\tset_target_properties(${_target} PROPERTIES PREFIX \"relion_\")\\n\\ttarget_link_libraries(${_target} ${LIB} ${FFTW_LIBRARIES} ${EXTRA_LIBS} ${MPI_LIBRARIES} ${CMAKE_DL_LIBS})\\n\\tset_target_properties(${_target} PROPERTIES CXX_EXTENSIONS OFF\\t)\\n\\n\\tif(TIFF_FOUND)\\n\\t\\ttarget_link_libraries(${_target} ${TIFF_LIBRARIES})\\n\\tendif()\\n\\n    if(SYCL)\\n        target_link_libraries(${_target} sycl OpenCL relion_lib)\\n    endif(SYCL)\\n\\n\\tif (ALTCPU)\\n\\t\\ttarget_link_libraries(${_target} ${TBB_LIBRARIES})\\n\\tendif(ALTCPU)\\n\\n\\tinstall (TARGETS ${_target} RUNTIME DESTINATION bin)\\nendforeach()\\n\\n# former Dynamite programs:\\nforeach (_target ${RELION_JAZ_TOMO_TARGETS})\\n\\tGET_FILENAME_COMPONENT(_target \"relion_tomo_${_target}\" NAME_WE)\\n\\tadd_executable(${_target} ${CMAKE_SOURCE_DIR}/src/jaz/tomography/apps/${_target}.cpp)\\n\\tset(LIB relion_lib)\\n \\tadd_dependencies(${_target} relion_lib)\\n\\tset_target_properties(${_target} PROPERTIES PREFIX \"relion_tomo_\")\\n\\ttarget_link_libraries(${_target} ${LIB} ${FFTW_LIBRARIES} ${EXTRA_LIBS} ${MPI_LIBRARIES} ${CMAKE_DL_LIBS})\\n\\tset_target_properties(${_target} PROPERTIES CXX_EXTENSIONS OFF\\t)\\n\\n\\tif(TIFF_FOUND)\\n\\t\\ttarget_link_libraries(${_target} ${TIFF_LIBRARIES})\\n\\tendif()\\n\\n    if(SYCL)\\n        target_link_libraries(${_target} sycl OpenCL relion_lib)\\n    endif(SYCL)\\n\\n\\tinstall (TARGETS ${_target} RUNTIME DESTINATION bin)\\nendforeach()\\n\\nforeach (_target ${RELION_JAZ_EXPERIMENTAL_TARGETS})\\n\\tGET_FILENAME_COMPONENT(_target \"relion_exp_${_target}\" NAME_WE)\\n\\tadd_executable(${_target} ${CMAKE_SOURCE_DIR}/src/jaz/scripts/${_target}.cpp)\\n\\tset(LIB relion_lib)\\n \\tadd_dependencies(${_target} relion_lib)\\n\\tset_target_properties(${_target} PROPERTIES PREFIX \"relion_exp_\")\\n\\ttarget_link_libraries(${_target} ${LIB} ${FFTW_LIBRARIES} ${EXTRA_LIBS} ${MPI_LIBRARIES} ${CMAKE_DL_LIBS})\\n\\tset_target_properties(${_target} PROPERTIES CXX_EXTENSIONS OFF\\t)\\n\\n\\tif(TIFF_FOUND)\\n\\t\\ttarget_link_libraries(${_target} ${TIFF_LIBRARIES})\\n\\tendif()\\n\\n    if(SYCL)\\n        target_link_libraries(${_target} sycl OpenCL relion_lib)\\n    endif(SYCL)\\n\\n\\tif (ALTCPU)\\n\\t\\ttarget_link_libraries(${_target} ${TBB_LIBRARIES})\\n\\tendif(ALTCPU)\\n\\n\\tinstall (TARGETS ${_target} RUNTIME DESTINATION bin)\\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring SYCL, Image, and Threading Build Options - CMake\nDESCRIPTION: This snippet configures the build, compile, and link options for RELION modules using CMake, with support for SYCL (including CUDA/HIP backends), MPI, OpenMP, and image libraries (TIFF, PNG, JPEG). It dynamically sets flags and compiler behaviors, manages dependencies, enables per-target customization, and supports auto-detection or manual specification of external libraries. Key parameters include environment variables and detection outcomes (e.g., SYCL_CUDA_COMPILE), and the snippet ensures that build targets link against the appropriate libraries. Inputs are CMake variables and environment context; outputs are configured executables and libraries. All commands adhere to standard CMake syntax and require a pre-configured CMake environment.\nSOURCE: https://github.com/3dem/relion/blob/master/src/apps/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n#\\t\\t\\tset(REL_SYCL_FRONTEND ${REL_SYCL_FRONTEND} -Xsycl-target-frontend=amdgcn-amd-amdhsa \"  -fp-model=fast\")\\n\\t\\t\\tset(REL_SYCL_BACKEND ${REL_SYCL_BACKEND} -Xsycl-target-backend=amdgcn-amd-amdhsa --offload-arch=${SYCL_HIP_TARGET})\\n#\\t\\t\\tset(REL_SYCL_BACKEND ${REL_SYCL_BACKEND} -Xsycl-target-backend=amdgcn-amd-amdhsa \"--offload-arch=${SYCL_HIP_TARGET} -options -cl-fast-relaxed-math\")\\n\\t\\tendif()\\n\\t\\tset(REL_SYCL_TARGETS ${REL_SYCL_TARGETS},spir64)\\n#\\t\\tset(REL_SYCL_FRONTEND ${REL_SYCL_FRONTEND} -Xsycl-target-frontend=spir64 \"-fp-model=fast\")\\n\\t\\tset(REL_SYCL_COMPILE_TOOLCHAIN ${REL_SYCL_COMPILE_TOOLCHAIN} -Wno-unused-command-line-argument -DSYCL_USE_NATIVE_FP_ATOMICS -fsycl -fsycl-unnamed-lambda -fsycl-targets=${REL_SYCL_TARGETS} ${REL_SYCL_FRONTEND} ${REL_SYCL_BACKEND})\\n#\\t\\ttarget_compile_options(relion_sycl_util PRIVATE ${REL_SYCL_COMPILE_TOOLCHAIN})\\n\\t\\tstring(REPLACE \";\" \" \" REL_SYCL_COMPILE_TOOLCHAIN \"${REL_SYCL_COMPILE_TOOLCHAIN}\")\\n\\t\\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${REL_SYCL_COMPILE_TOOLCHAIN}\" CACHE STRING \"\" FORCE)\\n\\n\\telse(DEFINED SYCL_CUDA_COMPILE OR DEFINED SYCL_HIP_COMPILE)\\n\\t\\ttarget_compile_options(relion_sycl_util PRIVATE -Wno-unused-command-line-argument -DSYCL_USE_NATIVE_FP_ATOMICS -fsycl -fsycl-unnamed-lambda -fsycl-targets=spir64)\\n#\\t\\ttarget_compile_options(relion_sycl_util PRIVATE -Wno-unused-command-line-argument -DSYCL_USE_NATIVE_FP_ATOMICS -fsycl -fsycl-unnamed-lambda -fsycl-targets=spir64 -Xsycl-target-frontend=spir64 \"-fp-model=fast\")\\n#\\t\\ttarget_compile_options(relion_sycl_util PRIVATE -Wno-unused-command-line-argument -DSYCL_USE_NATIVE_FP_ATOMICS -fsycl -fsycl-unnamed-lambda -fsycl-targets=spir64 -Xsycl-target-backend=spir64 \"-options -cl-fast-relaxed-math\")\\n\\tendif(DEFINED SYCL_CUDA_COMPILE OR DEFINED SYCL_HIP_COMPILE)\\n\\n\\tforeach (_source ${REL_SYCL_SRC})\\n\\t\\tlist(FIND REL_SYCL_NO_OMP ${_source} IS_SYCL_NO_OMP)\\n\\t\\tif(NOT ${IS_SYCL_NO_OMP} LESS 0)\\n\\t\\t\\tset_source_files_properties(${_source} PROPERTIES COMPILE_FLAGS -qno-openmp)\\n\\t\\tendif()\\n\\tendforeach()\\n\\ttarget_link_libraries(relion_sycl_util sycl OpenCL relion_lib)\\n\\nendif()\\n\\nif(TIFF_FOUND)\\n\\tinclude_directories(${TIFF_INCLUDE_DIRS})\\n\\ttarget_link_libraries(relion_lib ${TIFF_LIBRARIES})\\nendif()\\n\\nif(PNG_FOUND)\\n\\tinclude_directories(${PNG_INCLUDE_DIRS})\\n\\ttarget_link_libraries(relion_lib ${PNG_LIBRARY})\\nelse()\\n\\tfind_library(PNG_LIBRARY NAMES png PATHS /share/modules/libpng/1.6.37/lib/ /usr/local/lib)\\n\\tif(PNG_LIBRARY)\\n\\t\\tmessage(\"Trying manual search for PNG\")\\n\\t\\tadd_definitions(-DHAVE_PNG)\\n\\t\\tmessage(STATUS \"PNG_LIBRARY: ${PNG_LIBRARY}\")\\n\\t\\ttarget_link_libraries(relion_lib ${PNG_LIBRARY})\\n\\tendif()\\nendif()\\n\\nif(JPEG_FOUND)\\n\\tinclude_directories(${JPEG_INCLUDE_DIRS})\\n\\ttarget_link_libraries(relion_lib ${JPEG_LIBRARY})\\nelse()\\n\\tfind_library(JPEG_LIBRARY NAMES jpeg PATHS /share/modules/libjpeg/62.2.0/lib64/ /usr/local/lib)\\n\\tif(JPEG_LIBRARY)\\n\\t\\tmessage(\"Trying manual search for JPEG\")\\n\\t\\tadd_definitions(-DHAVE_JPEG)\\n\\t\\tmessage(STATUS \"JPEG_LIBRARY: ${JPEG_LIBRARY}\")\\n\\t\\ttarget_link_libraries(relion_lib ${JPEG_LIBRARY})\\n\\tendif()\\nendif()\\n\\nif(BUILD_OWN_TBB)\\n\\tadd_dependencies(relion_lib OWN_TBB)\\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options for Precision, FFT, and Texture Memory\nDESCRIPTION: Defines several boolean CMake options to control build features: `DoublePrec_CPU` (enables double precision for CPU code, ON by default), `DoublePrec_ACC` (enables double precision for accelerated code, OFF by default), `MKLFFT` (uses Intel MKL for FFT instead of FFTW, OFF by default), and `DeviceTexture` (uses texture memory on the device for accelerated code, ON by default).\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\noption(DoublePrec_CPU \"DoublePrec_CPU\" ON)\noption(DoublePrec_ACC \"Accelerated Code use double-precision\" OFF)\noption(MKLFFT \"Use MKL rather than FFTW for FFT\" OFF)\noption(DeviceTexture \"Texture Memory on the Device\" ON)\n```\n\n----------------------------------------\n\nTITLE: Setting and Validating CMake Build Type\nDESCRIPTION: Checks if a `CMAKE_BUILD_TYPE` is provided. If it is, validates it against allowed types ('None', 'Release', 'Debug', 'RelWithDebInfo', 'Profiling', 'Benchmarking') and issues a fatal error if invalid. If no build type is provided, it defaults to 'Release'. It also sets a `MDT_TYPE_CHECK` variable if the build type is 'Debug'. The chosen build type is stored in the CMake cache.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# ---------------------------------------------------------SET SPECIFIC BUILD TYPE--\nif(NOT ${CMAKE_BUILD_TYPE} STREQUAL \"\")\n\tstring( TOLOWER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE_LOWER )\n\n\tif( ( NOT ${CMAKE_BUILD_TYPE_LOWER} STREQUAL \"none\" ) AND\n\t    ( NOT ${CMAKE_BUILD_TYPE_LOWER} STREQUAL \"release\" ) AND\n\t    ( NOT ${CMAKE_BUILD_TYPE_LOWER} STREQUAL \"debug\" ) AND\n\t    ( NOT ${CMAKE_BUILD_TYPE_LOWER} STREQUAL \"relwithdebinfo\" ) AND\n\t    ( NOT ${CMAKE_BUILD_TYPE_LOWER} STREQUAL \"profiling\" )  AND\n\t    ( NOT ${CMAKE_BUILD_TYPE_LOWER} STREQUAL \"benchmarking\" ) )\n\t     message( FATAL_ERROR \"CMAKE_BUILD_TYPE : '${CMAKE_BUILD_TYPE}' is not a valid build type. \"\n\t\t\"Valid options are: 'None', 'Release', 'Debug', 'RelWithDebInfo', and 'Profiling'.\" )\n\tendif()\n\n\tmessage(STATUS \"BUILD TYPE set to '${CMAKE_BUILD_TYPE}'\")\n\tSET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING \"Choose the type of\nbuild, options are: 'None', 'Release', 'Debug', 'RelWithDebInfo', and 'Profiling'.\")\n\n\tif (${CMAKE_BUILD_TYPE_LOWER} STREQUAL \"debug\")\n\t\tset(MDT_TYPE_CHECK ON)\n\tendif()\n\nelse()\n\tSET(CMAKE_BUILD_TYPE \"Release\")\n\tmessage(STATUS \"BUILD TYPE set to the default type:  '${CMAKE_BUILD_TYPE}'\")\n\tstring( TOLOWER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE_LOWER )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building and Running RELION with SYCL/DPC++ via Shell Commands (Bash)\nDESCRIPTION: This code snippet presents a comprehensive set of Bash shell commands for preparing, configuring, and building RELION with SYCL/DPC++ acceleration. It covers setting up the build directory, loading the Intel oneAPI environment, listing available SYCL devices, configuring CMake with appropriate compilers and SYCL/CUDA flags, and setting environment variables for device control. Users must have all relevant toolkits installed (Intel oneAPI Base Toolkit, HPC Toolkit, proper SYCL/Level Zero/OpenCL runtime) and may use optional export commands for Level Zero device affinity. The expected input is a working shell with required SDKs installed, and the outputs include a properly configured build directory and an executable RELION binary suitable for running with SYCL devices. Limitations involve dependency on platform availability, correct setup of device environment variables, and that some options (e.g., CUDA/HIP) may be untested.\nSOURCE: https://github.com/3dem/relion/blob/master/README_sycl.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir build_sycl; cd build_sycl\\n$ {Load Intel oneAPI toolkit and SYCL/Level Zero/OpenCL runtime environment}\\n$ sycl-ls                        # This will display available SYCL devices\\n$ cmake \\\\\\n-DCMAKE_C_COMPILER=mpiicx \\\\\\n-DCMAKE_CXX_COMPILER=mpiicpx \\\\\\n-DMPI_C_COMPILER=mpiicx \\\\\\n-DMPI_CXX_COMPILER=mpiicpx \\\\\\n-DMKLFFT=ON \\\\\\n-DSYCL=ON \\\\\\n-DCUDA=OFF \\\\\\n-DCMAKE_BUILD_TYPE=Release \\\\\\n-DCMAKE_C_FLAGS=\\\"-O3\\\" \\\\\\n-DCMAKE_CXX_FLAGS=\\\"-O3 -march=native\\\" \\\\\\n..\\n\\n$ #### This is Intel GPU Level Zero backend specific #####\\n$ export ZE_AFFINITY_MASK=0         # Use only the first available Level Zero device. This can be replaced by --gpu 0 syntax.\\n$ export ZEX_NUMBER_OF_CCS=0:4,1:4  # Set this only if you are putting more than one MPI ranks per GPU. 0:4 means 4 MPI ranks running on card 0\\n$ #### End of Intel GPU Level Zero backend specific  #####\\n$ # For finer control of SYCL devcices, please see the above descrpition on ONEAPI_DEVICE_SELECTOR\\n$ {Run 2D/3D/refinement application by replacing --gpu/--cpu with --gpu/--sycl/--sycl-opencl/--sycl-cpu/--sycl-cuda/--sycl-hip}\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard Version\nDESCRIPTION: Configures the required C++ standard for the project. It mandates the use of a specific standard (`CXX_STANDARD_REQUIRED ON`) and disables compiler-specific extensions (`CMAKE_CXX_EXTENSIONS OFF`). The standard is set to C++17 if the `SYCL` option is enabled, otherwise it defaults to C++14.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# ----------------------------------------------------------------SET CXX STANDARD--\nset(CXX_STANDARD_REQUIRED ON)\nif(SYCL)\n\tset(CMAKE_CXX_STANDARD 17)\nelse()\n\tset(CMAKE_CXX_STANDARD 14)\nendif()\nset(CMAKE_CXX_EXTENSIONS OFF)\n```\n\n----------------------------------------\n\nTITLE: Initializing Relion Project and Setting CMake Policies\nDESCRIPTION: Sets the minimum required CMake version, defines the project name as 'Relion', and updates CMake policies (CMP0048 for project version and CMP0042 for OS X RPATH). It also appends the project's 'cmake' directory to the module path for finding custom CMake modules and adds preprocessor definitions for install and source directories.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8 FATAL_ERROR)\n\n#if(POLICY CMP0048)\n#  cmake_policy(SET CMP0048 NEW)\n#endif()\nproject(Relion)\n\n# Use new policy for OS X @rpath\nif(POLICY CMP0042)\n    cmake_policy(SET CMP0042 NEW)\nendif()\n\n# Add the path to the additional Find<module>.cmake files\n# which are included with the distributed RLEION-code\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n\nadd_definitions(-DINSTALL_LIBRARY_DIR=${CMAKE_INSTALL_PREFIX}/lib/)\nadd_definitions(-DSOURCE_DIR=${CMAKE_SOURCE_DIR}/src/)\n\n# message(STATUS \"INSTALL_LIBRARY_DIR set to ${CMAKE_INSTALL_PREFIX}/lib/\")\n# message(STATUS \"SOURCE_DIR set to ${CMAKE_SOURCE_DIR}/src/\")\n```\n\n----------------------------------------\n\nTITLE: FFT Backend and Library Selection (MKL, FFTW, AMDFFTW) - CMake\nDESCRIPTION: Manages FFT library selection: exposes flags to force own FFTW or use AMD's version, sets requirements for Single/Double, and ensures the correct library (FFTW/MKL) is found or built. Adds fallback to include build script if not found. Relies on environment and CMake options.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# -------------------------------------------------------------------------------FFT--\n\nif(NOT MKLFFT)\n\toption(FORCE_OWN_FFTW \"FORCE_OWN_FFTW\" OFF)\n\toption(AMDFFTW \"Use AMD optimized version of FFTW. This needs a new version of GCC (>= 8.3 recommended).\" OFF)\n\n\tset(FFTW_DOUBLE_REQUIRED TRUE)\n\tset(FFTW_SINGLE_REQUIRED TRUE)\n\n\tif(AMDFFTW)\n\t\tset(FORCE_OWN_FFTW ON)\n\tendif()\n\n\tif(NOT FORCE_OWN_FFTW)\n\t\tFIND_PACKAGE(FFTW COMPONENTS SINGLE DOUBLE)\n\tendif(NOT FORCE_OWN_FFTW)\n\n\tif(NOT FFTW_FOUND)\n\t\tinclude(${CMAKE_SOURCE_DIR}/cmake/BuildFFTW.cmake)\n\tendif(NOT FFTW_FOUND)\nendif(NOT MKLFFT)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for Acceleration Type\nDESCRIPTION: Adds preprocessor definitions (`-DACC_HIP=3`, `-DACC_CUDA=2`, `-DACC_CPU=1`) to the compilation process if either the `CUDA` or `ALTCPU` option is enabled. These definitions allow the source code to conditionally compile sections based on the chosen acceleration strategy.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(CUDA OR ALTCPU)\n    add_definitions(-DACC_HIP=3 -DACC_CUDA=2 -DACC_CPU=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Detecting TIFF, ZLIB, PNG, and JPEG Dependencies - CMake\nDESCRIPTION: Finds packages for TIFF, ZLIB, PNG, and JPEG, and conditionally sets preprocessor macros if found. Ensures proper detection of image file support, allowing the software to handle various microscopy data formats. Relies on find_package and add_definitions.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# ------------------------------------------------------------------------------TIFF--\n\nfind_package(TIFF REQUIRED)\nif(TIFF_FOUND)\n\tadd_definitions(-DHAVE_TIFF)\nendif()\n\n# ------------------------------------------------------------------ZLIB, PNG & JPEG--\nfind_package(ZLIB)\nfind_package(PNG)\nif(PNG_FOUND)\n\tadd_definitions(-DHAVE_PNG)\nendif(PNG_FOUND)\n\nfind_package(JPEG)\nif(JPEG_FOUND)\n\tadd_definitions(-DHAVE_JPEG)\nendif(JPEG_FOUND)\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Shared or Static Libraries Build and Component Inclusion - CMake\nDESCRIPTION: Provides an option for building shared or static libraries, prints status messages, and adds the src/apps subdirectory which contains main application code. Also displays helpful debugging info about build/link flags and available options. Relies on ADD_SUBDIRECTORY and message().\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------------------------RELION COMPONENTS--\noption(BUILD_SHARED_LIBS \"BUILD_SHARED_LIBS\" OFF)\n#message(STATUS \"BUILD_SHARED_LIBS = ${BUILD_SHARED_LIBS}\")\nif(BUILD_SHARED_LIBS)\n    message(STATUS \"Building shared libs (smaller build size and binaries)\")\nelse()\n    message(STATUS \"Building static libs (larger build size and binaries)\")\nendif()\n\n\nADD_SUBDIRECTORY(src/apps)\n\n#message(STATUS \"CUDA option = ${CUDA}\")\n#message(STATUS \"ALTCPU option = ${ALTCPU}\")\n#message(STATUS \"HIP option = ${HIP}\")\n#message(STATUS \"SYCL option = ${SYCL}\")\n#message(STATUS \"DoublePrec_CPU option = ${DoublePrec_CPU}\")\n#message(STATUS \"DoublePrec_ACC option = ${DoublePrec_ACC}\")\n#message(STATUS \"MKLFFT option = ${MKLFFT}\")\n#message(STATUS \"DeviceTexture option = ${DeviceTexture}\")\n\n#get_directory_property( DirDefs COMPILE_DEFINITIONS )\n#message(STATUS \"COMPILE_DEFINITIONS = ${DirDefs}\" )\nmessage(STATUS \"CMAKE_C_FLAGS : ${CMAKE_C_FLAGS}\")\nmessage(STATUS \"CMAKE_CXX_FLAGS : ${CMAKE_CXX_FLAGS}\")\n#message(STATUS \"CMAKE_C_COMPILER : ${CMAKE_C_COMPILER}\")\n#message(STATUS \"CMAKE_CXX_COMPILER : ${CMAKE_CXX_COMPILER}\")\n#message(STATUS \"MPI_C_COMPILER : ${MPI_C_COMPILER}\")\n#message(STATUS \"MPI_CXX_COMPILER : ${MPI_CXX_COMPILER}\")\n#message(STATUS \"CMAKE_EXE_LINKER_FLAGS : ${CMAKE_EXE_LINKER_FLAGS}\")\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of CPU/GPU Sources and Headers - CMake - CMake\nDESCRIPTION: This snippet gathers different source and header files for building depending on the ALTCPU flag, which toggles between CPU-accelerated sources and general sources. If ALTCPU is on, the file globs include additional directories (src/acc/cpu and cpu_kernels) to support CPU acceleration. It requires a proper CMake source directory and pre-defined macros. This approach enables platform-dependent builds.\nSOURCE: https://github.com/3dem/relion/blob/master/src/apps/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (ALTCPU)\\n\\tfile(GLOB REL_SRC \"${CMAKE_SOURCE_DIR}/src/*.cpp\" \"${CMAKE_BINARY_DIR}/macros.cpp\" \"${CMAKE_SOURCE_DIR}/src/*.c\" \"${CMAKE_SOURCE_DIR}/src/acc/cpu/*.cpp\" \"${CMAKE_SOURCE_DIR}/src/acc/cpu/cpu_kernels/*.cpp\" )\\n\\tfile(GLOB REL_SRC_H \"${CMAKE_SOURCE_DIR}/src/*.h\" \"${CMAKE_SOURCE_DIR}/src/acc/*.h\" \"${CMAKE_SOURCE_DIR}/src/acc/cpu/*.h\" \"${CMAKE_SOURCE_DIR}/src/acc/cpu/cpu_kernels/*.h\" )\\nelse()\\n\\tfile(GLOB REL_SRC \"${CMAKE_SOURCE_DIR}/src/*.cpp\" \"${CMAKE_BINARY_DIR}/macros.cpp\" \"${CMAKE_SOURCE_DIR}/src/*.c\" \"${CMAKE_SOURCE_DIR}/src/acc/*.cpp\" )\\n\\tfile(GLOB REL_SRC_H \"${CMAKE_SOURCE_DIR}/src/*.h\" \"${CMAKE_SOURCE_DIR}/src/acc/*.h\" )\\nendif(ALTCPU)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Dependencies - CMake - CMake\nDESCRIPTION: This snippet sets up necessary include directories for building RELION, handling conditional dependencies such as FFTW if Intel MKL is not being used. It also finds system headers like X11 required for GUI support. Dependencies include properly defined CMake variables (MKLFFT, FFTW_INCLUDES, CMAKE_SOURCE_DIR) and system X11 headers.\nSOURCE: https://github.com/3dem/relion/blob/master/src/apps/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\"${CMAKE_SOURCE_DIR}\")\\n\\nmessage(\"Running apps/CMakeLists.txt...\")\\n\\nif(NOT MKLFFT)\\n\\tinclude_directories(\"${FFTW_INCLUDES}\")\\nendif(NOT MKLFFT)\\n#include_directories(${CMAKE_BINARY_DIR}/include)\\n\\nfind_path (X11_INCLUDES Xdbe.h)\\n\\nmessage(STATUS \"CMAKE_BINARY_DIR:\" ${CMAKE_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Relion Test Executable\nDESCRIPTION: This CMake script defines the 'tests' executable from 'tests.cpp', sets up its dependency on 'relion_lib', and links against 'relion_lib', FFTW, and TIFF libraries. It enforces the C++14 standard, adds required include directories (project source, tests, FFTW), and conditionally enables OpenMP support by finding the package and applying its flags if available. Dependencies include CMake, a C++14 compatible compiler, relion_lib, FFTW, and TIFF libraries.\nSOURCE: https://github.com/3dem/relion/blob/master/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(tests\n\t\ttests.cpp\n\t)\n\nadd_dependencies(tests relion_lib)\ntarget_link_libraries(tests relion_lib)\ntarget_link_libraries(tests ${FFTW_LIBRARIES})\ntarget_link_libraries(tests ${TIFF_LIBRARIES})\n\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++14\")\n\ninclude_directories(tests PRIVATE ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/tests)\ninclude_directories(tests PRIVATE ${FFTW_INCLUDES})\n\nfind_package(OpenMP)\nif (OPENMP_FOUND)\n\tset (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n\tset (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n\tset (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Intel Compilers and MKL/IPP Options - CMake\nDESCRIPTION: This snippet detects Intel compilers (classic or oneAPI) and conditionally adjusts compilation and linking flags for FAST_CENTERFFT, MKL FFT, and Intel IPP support. It ensures correct preprocessor definitions and library flags are set based on chosen CPU/GPU technologies, and checks the presence of required headers/libraries. Dependencies include various Intel toolkits and CMake environment variables.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# https://github.com/3dem/relion/issues/1038#issuecomment-1831312535\nif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Intel\" OR \"${CMAKE_CXX_COMPILER}\" MATCHES \"mpiicpx\")\n# \"Intel\" is for classic Intel compiler and \"IntelLLVM\" is for oneAPI compiler which is supported from CMake 3.20\n\tif(ALTCPU OR SYCL)\n\t\tadd_definitions(-DFAST_CENTERFFT)\n\tendif()\n\n\tif(MKLFFT)\n\t\tif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"IntelLLVM\")\n\t\t\tSET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -qopenmp -qmkl=parallel -limf\")\n\t\telse()\n\t\t\tSET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -diag-disable=10441,10412\")\n\t\t\tSET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -qopenmp -mkl=parallel -limf -diag-disable=10441,10412\")\n\t\tendif()\n\tendif(MKLFFT)\n\n\tif(INTEL_IPP OR DEFINED ENV{IPPROOT})\n\t\tif(EXISTS \"$ENV{IPPROOT}/include/ipp.h\" AND EXISTS \"$ENV{IPPROOT}/lib/intel64/libipps.a\")\n\t\t\tif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"IntelLLVM\")\n\t\t\t\tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -qipp\")\n\t\t\t\tSET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -qipp -qipp-link=static\")\n\t\t\telse()\n\t\t\t\tSET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -diag-disable=10441,10412\")\n\t\t\t\tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -ipp -diag-disable=10441,10412\")\n\t\t\t\tSET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -ipp -ipp-link=static\")\n\t\t\tendif()\n\t\t\tadd_definitions(-DUSE_IPP)\n\t\t\tmessage(STATUS \"Using Intel IPP library: $ENV{IPPROOT}\")\n\t\tendif()\n\tendif()\nelse()\n\tif(MKLFFT)\n\t\t# For the time being, let's use the sequential version (as with FFTW)\n\t\tlink_directories(\"$ENV{MKLROOT}/lib/intel64\")\n\t\tSET(FFTW_LIBRARIES mkl_intel_lp64 mkl_sequential mkl_core)\n\tendif(MKLFFT)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA Compute Capability\nDESCRIPTION: Sets the CUDA architecture flag based on the `CUDA_ARCH` CMake cache variable. If `CUDA_ARCH` is not provided by the user, it defaults to compute capability 5.0 (`-arch=sm_50`). Otherwise, it uses the user-provided value (e.g., if `CUDA_ARCH=75`, it sets `-arch=sm_75`). The resulting flag is stored in the `CUDARCH` variable.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# ------------------OPTIONS WHICH ARE NEEDED TO SET BUILD-TYPES (COMPILATION FLAGS)--\n# ----------------------------------------------------------CUDA-ARCH--\n\nset(CUDA_ARCH \"\" CACHE STRING \"CUDA architecture to use\")\nif (CUDA_ARCH STREQUAL \"\")\n\tmessage(STATUS \"Setting fallback CUDA_ARCH=50\")\n\tset(CUDARCH \"-arch=sm_50\")\nelse ()\n\tmessage(STATUS \"Using provided CUDA_ARCH=${CUDA_ARCH}\")\n\tset(CUDARCH \"-arch=sm_${CUDA_ARCH}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Test Suite - CMake\nDESCRIPTION: Exposes a flag for building tests (BUILD_TESTS), conditionally includes test targets using CTest and adds the tests subdirectory. All test inclusion logic is guarded behind the build option. Useful for CI or local validation.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------------------------------------TESTS--\n# Include testing flag(s) as precomiler\n# definitions and include test directives\n#enable_testing()\n#include(${CMAKE_SOURCE_DIR}/tests/RelionTests.cmake)\n\noption(BUILD_TESTS \"Build and configure tests\" OFF)\nif(BUILD_TESTS)\n    include(CTest)\n    add_subdirectory(tests)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMP Linkage for RELION Library - CMake\nDESCRIPTION: This snippet ensures that when SYCL is not enabled, the relion_lib target is linked against the OpenMP runtime using the ${OpenMP_omp_LIBRARY} variable. This guarantees multi-threading support for RELION in non-SYCL configurations. Inputs involve existing CMake build context, and the output is the relion_lib target with correct runtime linkage.\nSOURCE: https://github.com/3dem/relion/blob/master/src/apps/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT SYCL)\\n\\ttarget_link_libraries(relion_lib ${OpenMP_omp_LIBRARY})\\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Versioning via Git and CMake Modules - CMake - CMake\nDESCRIPTION: This snippet implements automatic versioning using git commit IDs, importing a CMake module that retrieves the current git SHA1 hash and appending it to the build version, unless it is run from outside a git repository. It requires the GetGitRevisionDescription.cmake module to be present, and a proper git repository setup. On success, the version suffix is set to include '-commit-<id>' and the macros.cpp file is configured.\nSOURCE: https://github.com/3dem/relion/blob/master/src/apps/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# AUTOMATIC VERSIONING\\n# Reference: https://stackoverflow.com/questions/1435953/how-can-i-pass-git-sha1-to-compiler-as-definition-using-cmake\\n\\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/\")\\ninclude(GetGitRevisionDescription)\\nget_git_head_revision(GIT_REFSPEC GIT_SHA1_FULL)\\nset(RELION_VERSION_SUFFIX \"\")\\nif (GIT_SHA1_FULL)\\n   string(SUBSTRING ${GIT_SHA1_FULL} 0 6 GIT_SHA1_PREFIX)\\n   if (NOT GIT_SHA1_PREFIX STREQUAL \"GITDIR\")\\n      message(STATUS \"Git commit ID: ${GIT_SHA1_FULL}\")\\n      set(RELION_VERSION_SUFFIX \"-commit-${GIT_SHA1_PREFIX}\")\\n   endif()\\nendif()\\nconfigure_file(\"${CMAKE_SOURCE_DIR}/src/macros.cpp.in\" \"${CMAKE_BINARY_DIR}/macros.cpp\" @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring RPATH Settings for Non-Apple Systems\nDESCRIPTION: Configures the runtime path (RPATH) settings specifically for non-Apple operating systems. It ensures that the build tree uses its own RPATH, prevents using the install RPATH during the build phase, sets the installation RPATH to the `${CMAKE_INSTALL_PREFIX}/lib` directory, and includes linked library paths in the install RPATH unless the install directory is already a system directory.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# ------------------------------------------------------------------RPATH SETTINGS--\nif(NOT APPLE)\n    # use, i.e. don't skip the full RPATH for the build tree\n    SET(CMAKE_SKIP_BUILD_RPATH  FALSE)\n\n    # when building, don't use the install RPATH already\n    # (but later on when installing)\n    SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\n\n    SET(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n\n    # add the automatically determined parts of the RPATH\n    # which point to directories outside the build tree to the install RPATH\n    SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\n    # the RPATH to be used when installing, but only if it's not a system directory\n    LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES \"${CMAKE_INSTALL_PREFIX}/lib\" isSystemDir)\n    IF(\"${isSystemDir}\" STREQUAL \"-1\")\n        SET(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n    ENDIF(\"${isSystemDir}\" STREQUAL \"-1\")\nendif(NOT APPLE)\n```\n\n----------------------------------------\n\nTITLE: Copying and Installing Helper Scripts/Shared Libraries - CMake\nDESCRIPTION: Handles the copying and installation of script helper files and external FFTW/FLTK libraries when needed. Defines a custom target and post-build commands to ensure all scripts are available in build/bin and installed on target. Uses install() and add_custom_command for robust deployment.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# ----------------------------------------------------------------------COPY SCRIPTS--\n\nif(FORCE_OWN_FFTW)\n    install(DIRECTORY external/fftw/lib/ DESTINATION lib FILES_MATCHING PATTERN \"*\")\nendif()\n\nlist(APPEND RELION_SCRIPT_FILES\n        star_printtable\n        star_plottable\n        star_loopheader\n        star_datablock_stack\n        star_datablock_singlefiles\n        star_datablock_ctfdat\n        qsub.csh\n        it.py\n        schemegui.py\n)\n\nadd_custom_target(copy_scripts ALL)\n\nforeach (SCRIPT_FILE ${RELION_SCRIPT_FILES})\n    add_custom_command(TARGET copy_scripts POST_BUILD\n                     COMMAND ${CMAKE_COMMAND} -E\n                     copy ${CMAKE_SOURCE_DIR}/scripts/${SCRIPT_FILE}\n                     ${CMAKE_BINARY_DIR}/bin/relion_${SCRIPT_FILE} )\nendforeach()\n\ninstall( DIRECTORY ${CMAKE_BINARY_DIR}/bin\n\t DESTINATION ${CMAKE_INSTALL_PREFIX}\n         USE_SOURCE_PERMISSIONS\n         FILES_MATCHING PATTERN \"*\")\n\n# install fltk if we built our own version\nif(INSTALL_OWN_FLTK)\n    install(DIRECTORY external/fltk/lib/ DESTINATION lib FILES_MATCHING PATTERN \"*\")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring GUI via X11 and FLTK Integration - CMake\nDESCRIPTION: Checks for X11, manages FLTK dependency, chooses to use system FLTK or build own version, and configures relevant CMake variables for GUI features. Emits informative build status or errors when libraries are not found. Relies on CMake's FIND_PACKAGE and custom include modules.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------------------------X11/FLTK--\noption(FORCE_OWN_FLTK \"FORCE_OWN_FLTK\" OFF)\nFIND_PACKAGE(X11)\nif(GUI)\n    if(X11_FOUND)\n        set(FLTK_SKIP_FLUID TRUE) #FLUID is not required for relion\n        set(FLTK_SKIP_OPENGL TRUE) #OpenGL is not required for relion\n        if(NOT FORCE_OWN_FLTK)\n            FIND_PACKAGE(FLTK)\n\t    if(FLTK_FOUND)\n\t\tmessage(STATUS \"X11 and FLTK were found\")\n\t\tmessage(STATUS \"FLTK_LIBRARIES: ${FLTK_LIBRARIES}\")\n\t    else()\n\t\tmessage(STATUS \"No FLTK installation was found\")\n\t    endif()\n        endif(NOT FORCE_OWN_FLTK)\n\n\tif(NOT FLTK_FOUND)\n\t\tinclude(${CMAKE_SOURCE_DIR}/cmake/BuildFLTK.cmake)\n\t\tset(INSTALL_OWN_FLTK 1)\n\tendif(NOT FLTK_FOUND)\n\n    else(X11_FOUND)\n        message( STATUS \"\\n-- ------------------ YOU HAVE NO X11-LIBS ------------------\")\n        message( STATUS \"CCmake found no X11-libs on your system, which are required for the GUI.\")\n        message( STATUS \" You CAN add the flag -DGUI=OFF to avoid using X11\" )\n        message(FATAL_ERROR \"X11 is required for GUI.\")\n    endif(X11_FOUND)\n\nendif(GUI)\n\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies and Script Configuration with Conda - CMake\nDESCRIPTION: Configures the Python environment for wrapper and analysis scripts, sets the Conda environment, and generates executable scripts for each pipeline component using configure_file. It can also execute a fetch weights script for model dependencies, handling both the download step and error messages in CMake output.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n# -----------------------------------------------------------------PYTHON DEPENDENCIES--\n\n\nset(CONDA_ENV_NAME \"relion-5.0\" CACHE STRING \"The Conda environment name\")\ninclude(${CMAKE_SOURCE_DIR}/cmake/FindCondaPython.cmake)\n\nlist(APPEND RELION_PYTHON_WRAPPERS\n        python_classranker\n        python_blush\n        python_dynamight\n        python_topaz\n        python_modelangelo\n        python_fetch_weights\n\tpython_tomo_import\n\tpython_tomo_exclude_tilt_images\n\tpython_tomo_align_tilt_series\n\tpython_tomo_view\n\tpython_tomo_pick\n\tpython_tomo_get_particle_poses\n\tpython_tomo_denoise\n\tfilament_selection\n)\n\nforeach (SCRIPT_FILE ${RELION_PYTHON_WRAPPERS})\n    configure_file(\n            ${CMAKE_SOURCE_DIR}/scripts/${SCRIPT_FILE}.in\n            ${CMAKE_BINARY_DIR}/bin/relion_${SCRIPT_FILE}\n            @ONLY\n    )\nendforeach()\n\noption(FETCH_WEIGHTS \"Download model weights for dependent packages\" ON)\nif (FETCH_WEIGHTS)\n\tmessage(STATUS\n\t\t\t\"Will attempts to download model weights for dependent packages...\"\n\t\t\t\"\\n\"\n\t\t\t\"NOTE: You can skip this step by setting -DFETCH_WEIGHTS=OFF\"\n\t)\n\n\texecute_process(\n\t\t\tCOMMAND bash ${CMAKE_BINARY_DIR}/bin/relion_python_fetch_weights\n\t\t\tWORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n\t\t\tRESULT_VARIABLE SCRIPT_RESULT\n\t)\n\n\t# Check the result of the script execution\n\tif(SCRIPT_RESULT EQUAL 0)\n\t\tmessage(STATUS \"Successfully downloaded model weights\")\n\telse()\n\t\tmessage(WARNING\n\t\t\t\t\"Failed to download model weights. YOU CAN IGNORE THIS. \"\n\t\t\t\t\"The downloads will be attempted again when the model weights are required later. \"\n\t\t\t\t\"\\n\"\n\t\t\t\t\"NOTE: You can skip this step by setting -DFETCH_WEIGHTS=OFF\"\n\t\t)\n\tendif()\nelse()\n\tmessage(STATUS \"Omitting download of model weights for dependent packages\")\nendif ()\n\n```\n\n----------------------------------------\n\nTITLE: Excluding GUI and Test-Only Sources from Build Targets - CMake - CMake\nDESCRIPTION: This snippet removes unwanted source files from the main build targets based on whether GUI or testing is enabled. It iterates over predefined lists of GUI and test targets, removing their corresponding source files when the GUI or RELION_TEST option is not set. This ensures the final build does not include unnecessary applications, optimizing build size and dependencies.\nSOURCE: https://github.com/3dem/relion/blob/master/src/apps/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(GUI_TARGETS maingui display manualpick)\\n\\n#--Remove apps using X11 if no GUI--\\nif(NOT GUI)\\n\\tforeach(TARGET ${GUI_TARGETS})\\n\\t\\tlist(REMOVE_ITEM RELION_TARGETS \"${CMAKE_SOURCE_DIR}/src/apps/${TARGET}.cpp\")\\n\\tendforeach()\\nendif(NOT GUI)\\n\\n#--Remove apps for testing--\\n\\nset(TEST_TARGETS double_reconstruct_openmp cs_fit ctf_nyquist_test free_aberration_plot split_stack defocus_stats double_bfac_fit interpolation_test motion_diff paper_data_synth Zernike_test vis_delocalisation vis_Ewald_weight mpi_tester)\\nif(NOT RELION_TEST)\\n\\tforeach(TARGET ${TEST_TARGETS})\\n\\t\\tlist(REMOVE_ITEM RELION_TARGETS \"${CMAKE_SOURCE_DIR}/src/apps/${TARGET}.cpp\")\\n\\tendforeach()\\nendif(NOT RELION_TEST)\n```\n\n----------------------------------------\n\nTITLE: Defining List of Header Files for Installation in CMake\nDESCRIPTION: Defines a CMake variable named `install_files` that holds a list of C++ header files (.h, .hpp, .hxx). This list specifies the files intended for installation, including core components like matrix operations, image handling, and utility headers.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset( install_files \n    Exception.h\n    lapack.h\n    matrix_blas_reference.h\n    Mesh.h\n    NMesh.h\n    NTuple.h\n    OBJReader.h\n    OBJWriter.h\n    program_options.h\n    StringFormat.h\n    t2Matrix.h\n    t2Vector.h\n    t3Matrix.h\n    t3Vector.h\n    t4Matrix.h\n    t4Vector.h\n    tArray.h\n    tBGR.h\n    tDefaultVector.h\n    tGray_A.h\n    tImageAlgorithm.h\n    tImage.h\n    Timer.hpp\n    tLab.h\n    tMatrix.h\n    tMesh.h\n    tMM.h\n    tQuaternion.h\n    tRGB_A.h\n    tRGBA.h\n    tRGB.h\n    Tuple.h\n    tVarMatrix_blas.h\n    tVarMatrix_blas.hxx\n    tVarMatrix.h\n    tYCbCr.h\n    PushPull.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining and Installing Header Files with CMake\nDESCRIPTION: This CMake code defines a list variable `install_files` containing header files related to array I/O (`ArrayStreamIO.h`, `raw.h`, etc.). It then uses the `INSTALL` command to copy these files into a specific subdirectory (`include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}/io/array`) relative to the installation prefix (`CMAKE_INSTALL_PREFIX`). This ensures the header files are placed correctly for development use after installation. Dependencies include the CMake build system and the definition of `CMAKE_INSTALL_PREFIX`, `LIBTITLE`, and `LIBVERSION` variables elsewhere in the build configuration.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/io/array/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset( install_files \n    a.h\n    ArrayStreamIO.h\n    le.h\n    matlab.h\n    networkByteOrder.h\n    raw.h\n  )\nINSTALL(FILES ${install_files} \n        DESTINATION\n        ${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}/io/array)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files using CMake INSTALL\nDESCRIPTION: Installs the files specified in the `install_files` variable (`mesh.h`, `array.h`) to a destination directory. The path is constructed using predefined CMake variables (`CMAKE_INSTALL_PREFIX`) and custom variables (`LIBTITLE`, `LIBVERSION`), typically placing headers in an include directory structured by library name and version.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/io/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(FILES ${install_files} \n        DESTINATION\n        ${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}/io)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files using CMake\nDESCRIPTION: Uses the `INSTALL(FILES ...)` command to copy the header files specified in the `${install_files}` variable to the installation destination directory. The destination path is constructed dynamically using predefined CMake variables: `${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}`. This command ensures that the library's public headers are placed in the correct location during the installation phase.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(FILES ${install_files} \n        DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE})\n```\n\n----------------------------------------\n\nTITLE: Configuring Installable Header Files and Paths with CMake - CMake - CMakeLists\nDESCRIPTION: This snippet defines and installs header files using CMake variables. It lists installable header files with the set() command and then uses the INSTALL(FILES ...) command to copy those files to a structured path relative to the install prefix, leveraging CMake variables for project title and version. Dependencies: CMake; requires that variables such as CMAKE_INSTALL_PREFIX, LIBTITLE, and LIBVERSION are set elsewhere. Input: List of files (here, 'f.h'); Output: Header files placed in the specified directory. Limitation: Only handles header installation—the file list and variables must be correctly defined.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/io/image/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset( install_files\n    f.h\n    )\nINSTALL(FILES ${install_files} \n        DESTINATION\n        ${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}/io/image)\n```\n\n----------------------------------------\n\nTITLE: Setting Up File Installation Path with CMake - CMake - Shell\nDESCRIPTION: Defines a variable called install_files containing a list of header files, then instructs the CMake install process to copy them to a structured include directory based on configurable variables (CMAKE_INSTALL_PREFIX, LIBTITLE, and LIBVERSION). Requires a working CMake installation and assumes the project defines LIBTITLE and LIBVERSION. Inputs are the defined header files; outputs are the files copied into the include path under a color-specific subdirectory. This setup helps maintain organization and versioning for C/C++ libraries.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/colour/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset( install_files\n    rgb_hsv.h\n    )\nINSTALL(FILES ${install_files} \n        DESTINATION\n        ${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}/colour)\n```\n\n----------------------------------------\n\nTITLE: Defining and Installing Header Files with CMake - CMake - CMakeLists\nDESCRIPTION: This CMake snippet collects a set of header files into the install_files variable and configures the CMake installation target to copy them to an include directory based on project and version variables. Dependencies include CMake and the relevant variables (CMAKE_INSTALL_PREFIX, LIBTITLE, LIBVERSION) being defined. This allows downstream projects to find and include these headers when using the installed library. The snippet expects the listed header files to exist in the current directory and outputs them to a versioned include path relative to the CMake install prefix. It is limited to header files and expects the consuming environment to use CMake for configuration and installation.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/tImage/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset( install_files\n    access.hxx\n    distance_transform.h\n    draw.h\n    interpolation.hxx\n    normalization.h\n    operators.h\n    traits.h\n    )\nINSTALL(FILES ${install_files} \n        DESTINATION\n        ${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}/tImage)\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files with CMake\nDESCRIPTION: This CMake snippet uses the `INSTALL` command with the `FILES` argument to install the header files listed in the `${install_files}` variable. The `DESTINATION` specifies the installation path relative to the installation prefix (`CMAKE_INSTALL_PREFIX`). The path includes variables `LIBTITLE` and `LIBVERSION`, creating a versioned include directory structure like `${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}/io/mesh`. This command depends on the prior definition of the `install_files`, `CMAKE_INSTALL_PREFIX`, `LIBTITLE`, and `LIBVERSION` variables.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/io/mesh/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(FILES ${install_files} \n        DESTINATION\n        ${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}/io/mesh)\n```\n\n----------------------------------------\n\nTITLE: Defining Header File List in CMake\nDESCRIPTION: This CMake snippet uses the `set` command to define a variable named `install_files`. This variable holds a list of header files (absolute_paths.h, msh.h, obj.h, OBJReader.h, OBJWriter.h) that are intended for installation. This variable will be used later in an `INSTALL` command.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/io/mesh/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset( install_files\n    absolute_paths.h\n    msh.h\n    obj.h\n    OBJReader.h\n    OBJWriter.h\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Files for Installation using CMake Set\nDESCRIPTION: Defines a CMake variable named `install_files` which holds a list of header files (`mesh.h`, `array.h`). This variable is subsequently used by the `INSTALL` command to specify which files to install.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/io/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset( install_files\n    mesh.h\n    array.h\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring File List and Install Destination in CMake - CMake\nDESCRIPTION: Defines a list of header files relevant to image reading, writing, and convolution, groups them into a variable, and instructs CMake to install these files to a target directory determined by project name and version variables. There are no external dependencies outside standard CMake; however, macros such as CMAKE_INSTALL_PREFIX, LIBTITLE, and LIBVERSION must already be defined in the context. Input is a hardcoded list of file names, and output is their placement in the desired install path. The snippet assumes use in a larger CMake-based C++ project, and correct environment configuration is required for successful installation.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/private/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset( install_files\n    OBJReader.hxx\n    OBJWriter.hxx\n    tDeterminants.h\n    tImageConverter.hxx\n    tImageConvolution.hxx\n    tImageIO.hxx\n    tImageIO_JPG.hxx\n    tImageIO_PNG.hxx\n    tImageIO_PNM.hxx\n    tRefCPtr.h\n    )\nINSTALL(FILES ${install_files} \n        DESTINATION\n        ${CMAKE_INSTALL_PREFIX}/include/${LIBTITLE}-${LIBVERSION}/${LIBTITLE}/private)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to CMake Build\nDESCRIPTION: Uses the `add_subdirectory` command in CMake to include the build processes defined in the `colour`, `private`, `tImage`, and `io` subdirectories. This command instructs CMake to look for and process the `CMakeLists.txt` files within each specified subdirectory as part of the main project build.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(colour)\nadd_subdirectory(private)\nadd_subdirectory(tImage)\nadd_subdirectory(io)\n```\n\n----------------------------------------\n\nTITLE: Configuring Projector Texture Usage - CMake\nDESCRIPTION: Determines whether to use hardware texture interpolation in reconstruction based on device and build configuration. Defines PROJECTOR_NO_TEXTURES if disabled/not supported and prints a status message. Depends on DeviceTexture, ALTCPU, and SYCL CMake options.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# ---------------------------------------------------------------USE TEXTURES OR NOT--\nif(NOT DeviceTexture OR ALTCPU OR SYCL)\n    add_definitions(-DPROJECTOR_NO_TEXTURES)\n    message(STATUS \"Texture interpolation is omitted.\")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to CMake Build\nDESCRIPTION: Includes the `array`, `image`, and `mesh` subdirectories into the current CMake build process. CMake will look for and process the `CMakeLists.txt` files within these specified directories.\nSOURCE: https://github.com/3dem/relion/blob/master/src/jaz/gravis/io/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(array)\nadd_subdirectory(image)\nadd_subdirectory(mesh)\n```\n\n----------------------------------------\n\nTITLE: Checking Sine/Cosine Math Function Symbol Availability - CMake\nDESCRIPTION: Uses check_cxx_symbol_exists to detect availability of sincos and __sincos in math.h, defines preprocessor macros accordingly for optimized math routines. This enables conditional compilation for platforms with/without specific math intrinsic functions.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# ---------------------------------------------------------------------------SIN/COS--\n\ninclude(CheckCXXSymbolExists)\ncheck_cxx_symbol_exists(sincos    math.h   HAVE_SINCOS)\ncheck_cxx_symbol_exists(__sincos  math.h   HAVE___SINCOS)\n\nif(HAVE_SINCOS)\n    add_definitions(-DHAVE_SINCOS)\nendif()\nif(HAVE___SINCOS)\n    add_definitions(-DHAVE___SINCOS)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Automatic Source File Collection for Build Targets - CMake - CMake\nDESCRIPTION: This snippet automatically collects various C++ and header source files grouped by functionality, such as GUI, mathematics, tomography, and single particle analyses, using file(GLOB ...) for each module. The lists are organized to allow follow-up processing and inclusion/exclusion, and they depend on proper directory structure and naming conventions. The lists created are later modified based on the compilation and user environment.\nSOURCE: https://github.com/3dem/relion/blob/master/src/apps/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB REL_GUI_SRC \"${CMAKE_SOURCE_DIR}/src/manualpicker.cpp\" \"${CMAKE_SOURCE_DIR}/src/gui_*.cpp\" \"${CMAKE_SOURCE_DIR}/src/displayer.cpp\")\\n\\n# ...\\nfile(GLOB REL_JAZ_MATH_SRC \"${CMAKE_SOURCE_DIR}/src/jaz/math/*.cpp\")\\nfile(GLOB REL_JAZ_MATH_H \"${CMAKE_SOURCE_DIR}/src/jaz/math/*.h\")\\nfile(GLOB REL_JAZ_IMG_PROC_SRC \"${CMAKE_SOURCE_DIR}/src/jaz/image/*.cpp\")\\nfile(GLOB REL_JAZ_IMG_PROC_H \"${CMAKE_SOURCE_DIR}/src/jaz/image/*.h\")\\n# ...(many more file(GLOB...))\n```\n\n----------------------------------------\n\nTITLE: Reporting Chosen Acceleration Backend\nDESCRIPTION: Prints status messages to the console indicating which acceleration backend (ALTCPU, SYCL, HIP, CUDA) has been enabled based on the evaluation of the corresponding CMake options. If none of these options are enabled, it reports that a CPU-only version is being built.\nSOURCE: https://github.com/3dem/relion/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(ALTCPU)\n    message(STATUS \"ALTCPU enabled - Building CPU-accelerated version of RELION\")\nelsif(SYCL)\n    message(STATUS \"SYCL enabled - Building SYCL-accelerated version of RELION\")\nelsif(HIP)\n    message(STATUS \"HIP enabled - Building HIP-accelerated version of RELION\")\nelsif(CUDA)\n    message(STATUS \"CUDA enabled - Building CUDA-accelerated version of RELION\")\nelse()\n    message(STATUS \"Acceleration not enabled - Building CPU-only version of RELION\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Activating STL Vector Bounds Checking via Compiler Flags - CMake\nDESCRIPTION: This commented snippet provides an optional flag setting for CMAKE_CXX_FLAGS to add -D_GLIBCXX_DEBUG, enabling runtime bounds checking in STL containers, which is helpful for debugging hard-to-detect bugs. It is intended as an optional diagnostic aid, not for production builds. Activate by uncommenting and running the CMake configuration.\nSOURCE: https://github.com/3dem/relion/blob/master/src/apps/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Set this flag to activate bounds checking in stl-vectors (incl. strings)\\n# It is useful to do this periodically, as it catches\\n# difficult-to-see and rare-to-manifest bugs\\n# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D_GLIBCXX_DEBUG\")\n```"
  }
]