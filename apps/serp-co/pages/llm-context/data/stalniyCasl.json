[
  {
    "owner": "stalniy",
    "repo": "casl",
    "content": "TITLE: Defining Basic Abilities with CASL in JavaScript\nDESCRIPTION: Demonstrates how to define basic abilities using CASL's defineAbility function, allowing all actions except deleting users.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default defineAbility((can, cannot) => {\n  can('manage', 'all');\n  cannot('delete', 'User');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Abilities with AbilityBuilder in JavaScript\nDESCRIPTION: This example shows how to use AbilityBuilder to define conditional abilities based on user roles, demonstrating its flexibility in more complex scenarios.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-rules/en.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability'\n\nexport default function defineAbilityFor(user) {\n  const { can, cannot, build } = new AbilityBuilder(createMongoAbility);\n\n  if (user.isAdmin) {\n    can('manage', 'all'); // read-write access to everything\n  } else {\n    can('read', 'all') // read-only access to everything\n  }\n\n  cannot('delete', 'Post', { published: true });\n\n  return build();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Abilities for Blog Permissions in JavaScript\nDESCRIPTION: Illustrates how to define more complex abilities with conditions, such as allowing users to update their own articles and comments.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default (user) => defineAbility((can) => {\n  can('read', 'Article');\n\n  if (user.isLoggedIn) {\n    can('update', 'Article', { authorId: user.id });\n    can('create', 'Comment');\n    can('update', 'Comment', { authorId: user.id });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Field-Specific Permissions in CASL.js\nDESCRIPTION: Demonstrates how to define abilities with field-specific permissions using CASL.js. It shows how to restrict field access based on user roles and ownership.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default (user) => defineAbility((can) => {\n  can('read', 'Article');\n  can('update', 'Article', ['title', 'description'], { authorId: user.id })\n\n  if (user.isModerator) {\n    can('update', 'Article', ['published'])\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with CASL.js\nDESCRIPTION: Shows how to use the 'can' method of a MongoAbility instance to check permissions on specific fields and entities.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport defineAbilityFor from './defineAbility';\nimport { Article } from './entities';\n\nconst moderator = { id: 2, isModerator: true };\nconst ownArticle = new Article({ authorId: moderator.id });\nconst foreignArticle = new Article({ authorId: 10 });\nconst ability = defineAbilityFor(moderator);\n\nability.can('read', 'Article') // true\nability.can('update', 'Article', 'published') // true\nability.can('update', ownArticle, 'published') // true\nability.can('update', foreignArticle, 'title') // false\n```\n\n----------------------------------------\n\nTITLE: Creating User Ability Factory Function with CASL\nDESCRIPTION: A function that builds CASL abilities for a given user based on their role. It uses the previously defined role permission functions and handles unknown roles by throwing an error.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-static-permissions/en.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility, ForcedSubject, AbilityBuilder } from '@casl/ability';\nimport { User } from '../models/User';\n\n// abilities definition from the example above\n// roles definition from the example above\n\nexport function defineAbilityFor(user: User): AppAbility {\n  const builder = new AbilityBuilder(createMongoAbility);\n\n  if (typeof rolePermissions[user.role] === 'function') {\n    rolePermissions[user.role](user, builder);\n  } else {\n    throw new Error(`Trying to use unknown role \"${user.role}\"`);\n  }\n\n  return builder.build();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Article Reading Permission in CASL\nDESCRIPTION: Demonstrates how to create a CASL permission rule that combines multiple conditions, allowing reading of articles only if they are in 'review' or 'published' status and their creation date is today or in the past.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defaultAbility } from '@casl/ability';\n\nexport default defaultAbility((can) => {\n  can('read', 'Article', {\n    createdAt: { $lte: new Date() },\n    status: { $in: ['review', 'published'] }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions with CASL in JavaScript\nDESCRIPTION: Shows how to use the defined ability instance to check various permissions on different subjects.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ability from './defineAbility.js';\n\nability.can('read', 'Post') // true\nability.can('read', 'User') // true\nability.can('update', 'User') // true\nability.can('delete', 'User') // false\nability.cannot('delete', 'User') // true\n```\n\n----------------------------------------\n\nTITLE: Filtering User Input Based on Permissions in CASL\nDESCRIPTION: Demonstrates how to combine permittedFieldsOf with lodash.pick to sanitize user input based on permissions. This prevents users from modifying fields they don't have access to by filtering the request body.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport pick from 'lodash/pick';\nimport { permittedFieldsOf } from '@casl/ability/extra';\n\n// the same code from app.js\n\nconst reqBody = {\n  title: 'CASL',\n  description: 'powerful',\n  published: true, // only moderators are allowed to change this field!\n};\nconst fields = permittedFieldsOf(ability, 'update', ownArticle, options);\nconst rawArticle = pick(reqBody, fields); // { title: 'CASL', description: 'powerful' }\n```\n\n----------------------------------------\n\nTITLE: Defining CASL Ability Types and Actions for TypeScript\nDESCRIPTION: This TypeScript code defines the possible actions and subjects for the application's authorization system. It also sets up types for the abilities and a function to create a CASL ability instance.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-persisted-permissions/en.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility, MongoAbility, RawRuleOf, ForcedSubject } from '@casl/ability';\n\nexport const actions = ['manage', 'create', 'read', 'update', 'delete'] as const;\nexport const subjects = ['Article', 'all'] as const;\n\nexport type Abilities = [\n  typeof actions[number],\n  typeof subjects[number] | ForcedSubject<Exclude<typeof subjects[number], 'all'>>\n];\nexport type AppAbility = MongoAbility<Abilities>;\nexport const createAbility = (rules: RawRuleOf<AppAbility>[]) => createMongoAbility<AppAbility>(rules);\n```\n\n----------------------------------------\n\nTITLE: Defining Strict Action and Subject Types for MongoDB Ability\nDESCRIPTION: Creates a more strictly typed MongoAbility by explicitly defining the allowed actions and subjects as union types. This enables IDE autocompletion and type checking for permission checks.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility } from '@casl/ability';\n\ntype Actions = 'create' | 'read' | 'update' | 'delete';\ntype Subjects = 'Article' | 'Comment' | 'User';\n\nconst ability = createMongoAbility<[Actions, Subjects]>();\n```\n\n----------------------------------------\n\nTITLE: Defining Abilities with CASL in TypeScript\nDESCRIPTION: This code demonstrates how to define permissions for a blog website using CASL's AbilityBuilder. It creates a function that returns an Ability instance with rules based on user permissions for blog posts.\nSOURCE: https://github.com/stalniy/casl/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability'\nimport { User } from '../models'; // application specific interfaces\n\n/**\n * @param user contains details about logged in user: its id, name, email, etc\n */\nfunction defineAbilitiesFor(user: User) {\n  const { can, cannot, build } = new AbilityBuilder(createMongoAbility);\n\n  // can read blog posts\n  can('read', 'BlogPost');\n  // can manage (i.e., do anything) own posts\n  can('manage', 'BlogPost', { author: user.id });\n  // cannot delete a post if it was created more than a day ago\n  cannot('delete', 'BlogPost', {\n    createdAt: { $lt: Date.now() - 24 * 60 * 60 * 1000 }\n  });\n\n  return build();\n});\n```\n\n----------------------------------------\n\nTITLE: Complex AbilityBuilder Usage\nDESCRIPTION: Demonstrates advanced usage of AbilityBuilder with different ability types and rule definitions\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, PureAbility, createMongoAbility, AbilityClass } from '@casl/ability';\n\n// action only Ability type\ntype ClaimAbility = PureAbility<'read' | 'update'>;\nconst ClaimAbility = PureAbility as AbilityClass<ClaimAbility>;\nconst { can, build } = new AbilityBuilder(ClaimAbility);\n\ncan('read');\ncan('update');\n\n// or action and subject Ability type\nconst { can, build } = new AbilityBuilder(createMongoAbility);\n\ncan('read', 'Article', { private: true });\ncan('read', 'User', ['firstName', 'lastName']);\n\nconst ability = build();\n```\n\n----------------------------------------\n\nTITLE: Defining Ability Rules with defineAbility in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the defineAbility function to create a MongoAbility instance with basic read and delete permissions for Posts.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-rules/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default defineAbility((can, cannot) => {\n  can('read', 'Post');\n  cannot('delete', 'Post', { published: true });\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating CASL with MongoDB and Mongoose\nDESCRIPTION: This code snippet shows how to integrate CASL with MongoDB using the @casl/mongoose package. It demonstrates how to apply permissions to database queries using the accessibleBy plugin.\nSOURCE: https://github.com/stalniy/casl/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accessibleRecordsPlugin } from '@casl/mongoose';\nimport mongoose from 'mongoose';\n\nmongoose.plugin(accessibleRecordsPlugin);\n\nconst user = getUserLoggedInUser(); // app specific function\n\nconst ability = defineAbilitiesFor(user);\nconst BlogPost = mongoose.model('BlogPost', mongoose.Schema({\n  title: String,\n  author: mongoose.Types.ObjectId,\n  content: String,\n  createdAt: Date,\n  hidden: { type: Boolean, default: false }\n}))\n\n// returns mongoose Query, so you can chain it with other conditions\nconst posts = await BlogPost.accessibleBy(ability).where({ hidden: false });\n\n// you can also call it on existing query to enforce permissions\nconst hiddenPosts = await BlogPost.find({ hidden: true }).accessibleBy(ability);\n\n// you can even pass the action as a 2nd parameter. By default action is \"read\"\nconst updatablePosts = await BlogPost.accessibleBy(ability, 'update');\n```\n\n----------------------------------------\n\nTITLE: Defining Abilities for a Blog Website with CASL\nDESCRIPTION: Example showing how to define permissions for a blog website using CASL's AbilityBuilder. The example implements rules for reading posts, managing own posts, and preventing deletion of old posts.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability';\nimport { User } from '../models'; // application specific interfaces\n\n/**\n * @param user contains details about logged in user: its id, name, email, etc\n */\nfunction defineAbilitiesFor(user) {\n  const { can, cannot, build } = new AbilityBuilder(createMongoAbility);\n\n  // can read blog posts\n  can('read', 'BlogPost');\n  // can manage (i.e., do anything) own posts\n  can('manage', 'BlogPost', { author: user.id });\n  // cannot delete a post if it was created more than a day ago\n  cannot('delete', 'BlogPost', {\n    createdAt: { $lt: Date.now() - 24 * 60 * 60 * 1000 }\n  });\n\n  return build();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Inverted Rules to Restrict Permissions in JavaScript\nDESCRIPTION: This snippet shows how to use inverted rules (cannot) to restrict the scope of a direct rule for the same action and subject.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-rules/en.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default defineAbility((can, cannot) => {\n  can('read', 'Article'); // direct rule\n  cannot('read', 'Article', { published: false }); // inverted rule\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Abilities with CASL in JavaScript\nDESCRIPTION: This code illustrates how to check user permissions using the Ability instance. It shows various examples of testing if a user can perform specific actions on blog posts based on conditions like ownership and creation date.\nSOURCE: https://github.com/stalniy/casl/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in the same file as above\nimport { ForbiddenError } from '@casl/ability';\n\nconst user = getLoggedInUser(); // app specific function\nconst ability = defineAbilitiesFor(user);\n\nclass BlogPost { // business entity\n  constructor(props) {\n    Object.assign(this, props);\n  }\n}\n\n// true if ability allows to read at least one Post\nability.can('read', 'BlogPost');\n// the same as\nability.can('read', BlogPost);\n\n// true, if user is the author of the blog post\nability.can('manage', new BlogPost({ author: user.id }));\n\n// true if there is no ability to read this particular blog post\nconst ONE_DAY = 24 * 60 * 60 * 1000;\nconst postCreatedNow = new BlogPost({ createdAt: new Date() });\nconst postCreatedAWeekAgo = new BlogPost({ createdAt: new Date(Date.now() - 7 * ONE_DAY) });\n\n// can delete if it's created less than a day ago\nability.can('delete', postCreatedNow); // true\nability.can('delete', postCreatedAWeekAgo); // false\n\n// you can even throw an error if there is a missed ability\nForbiddenError.from(ability).throwUnlessCan('delete', postCreatedAWeekAgo);\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Ability with Generic Type Parameters in TypeScript\nDESCRIPTION: Demonstrates how to create a MongoAbility instance with optional generic parameters to define possible abilities and conditions. This provides basic type safety for permission checks.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility, Subject, MongoQuery } from '@casl/ability';\n\ntype PossibleAbilities = [string, Subject];\ntype Conditions = MongoQuery;\n\nconst ability = createMongoAbility<PossibleAbilities, Conditions>();\n```\n\n----------------------------------------\n\nTITLE: Defining Abilities Using JSON Objects in JavaScript\nDESCRIPTION: This snippet demonstrates how to define abilities using JSON objects, which is useful for dynamic permissions or when receiving permissions via network layer.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-rules/en.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMongoAbility } from '@casl/ability';\n\nexport default createMongoAbility([\n  {\n    action: 'read',\n    subject: 'Post'\n  },\n  {\n    inverted: true,\n    action: 'delete',\n    subject: 'Post',\n    conditions: { published: true }\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: MongoDB Query Examples in CASL\nDESCRIPTION: Demonstrates various MongoDB query examples that can be used as conditions in CASL permission rules, including equality checks, existence checks, and advanced operators like $in, $gte, $all, $regex, and $elemMatch.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst queries = [\n  { private: true }, // (1)\n  { private: false, hidden: false }, // (2)\n  { private: { $exists: true } },\n  { status: { $in: ['review', 'inProgress'] } },\n  { price: { $gte: 10, $lte: 50 } }, // (3)\n  { tags: { $all: ['permission', 'casl'] } },\n  { email: { $regex: /@gmail.com$/i } },\n  { 'cities.address': { $elemMatch: { postalCode: { $regex: /^AB/ } } } } // (4)\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Field-Level Permissions with CASL\nDESCRIPTION: Creates an ability instance that restricts which fields users can update based on their role. Regular users can update title and description of their own articles, while moderators can also update the published status.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability';\n\nexport default function defineAbilityFor(user) {\n  const { can, rules } = new AbilityBuilder(createMongoAbility);\n\n  can('read', 'Article');\n  can('update', 'Article', ['title', 'description'], { authorId: user.id });\n\n  if (user.isModerator) {\n    can('update', 'Article', ['published']);\n  }\n\n  return createMongoAbility(rules);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LRU Cache for CASL Abilities in Express\nDESCRIPTION: Express middleware that provides ability instances from an LRU cache for active users. This approach caches the ability instances for the most active users to reduce database load and improve response times.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/cache-rules/en.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport LruCache from 'lru-cache';\nimport { defineAbilityFor } from './defineAbility';\n\n// store abilities of 1000 most active users\nexport const ABILITIES_CACHE = new LruCache(1000);\n\nexport async function provideAbility(req, res, next) {\n  if (ABILITIES_CACHE.has(req.user.id)) {\n    req.ability = ABILITIES_CACHE.get(req.user.id);\n  } else {\n    req.ability = await defineAbilityFor(req.user);\n    ABILITIES_CACHE.set(req.user.id, req.ability);\n  }\n\n  next();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Abilities with CASL\nDESCRIPTION: Example demonstrating how to check abilities using the CASL Ability instance. Shows how to verify if a user can perform specific actions on blog posts and how to throw errors for unauthorized actions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BlogPost, ForbiddenError } from '../models';\n\nconst user = getLoggedInUser(); // app specific function\nconst ability = defineAbilitiesFor(user)\n\n// true if ability allows to read at least one Post\nability.can('read', 'BlogPost');\n\n// true if there is no ability to read this particular blog post\nconst post = new BlogPost({ title: 'What is CASL?' });\nability.cannot('read', post);\n\n// you can even throw an error if there is a missed ability\nForbiddenError.from(ability).throwUnlessCan('read', post);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Rule Distribution Logic for CASL Testing\nDESCRIPTION: Demonstrates how to set up functions for defining rules based on user roles, creating a separation between rule distribution logic and ability instantiation for better testability.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMongoAbility, AbilityBuilder, subject } from '@casl/ability';\n\nexport const article = subject.bind(null, 'Article');\n\n/**\n * This function is responsible for rule distribution logic.\n * And we need to test it, not ability checks!\n */\nexport function defineRulesFor(user) {\n  const { can, cannot, rules } = new AbilityBuilder(createMongoAbility);\n\n  if (user.isAdmin) {\n    can('manage', 'all');\n  } else {\n    can('read', 'Article');\n    cannot('read', 'Article', { private: true });\n  }\n\n  return rules;\n}\n\nexport const defineAbilityFor = user => createMongoAbility(defineRulesFor(user));\n```\n\n----------------------------------------\n\nTITLE: Using Interfaces as Subject Types in CASL\nDESCRIPTION: Demonstrates how to use TypeScript interfaces to define subject types for CASL abilities. This provides type checking for both string-based and object-based subject references in permission checks.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility } from '@casl/ability';\n\ninterface Article {\n  id: number\n  title: string\n  content: string\n  authorId: number\n}\n\ninterface User {\n  id: number\n  name: string\n}\n\ninterface Comment {\n  id: number\n  content: string\n  authorId: number\n}\n\ntype Action = 'create' | 'read' | 'update' | 'delete';\ntype Subject = Article | Comment | User | 'Article' | 'User' | 'Comment';\n\nconst ability = createMongoAbility<[Action, Subject]>();\n\nability.can('read', 'Article');\nability.can('write', 'Article'); // error because non-existing action name\nability.can('update', 'Coment') // error because of typo\n```\n\n----------------------------------------\n\nTITLE: Embedding CASL Ability Rules in JWT Token Payload\nDESCRIPTION: Implementation of a login handler that embeds ability rules in JWT token payload. This approach is suitable for stateless applications using JWT authentication.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/cache-rules/en.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport jwt from 'jsonwebtoken';\nimport { defineRulesFor } from './defineAbility';\n\nexport async function login(req, res) {\n  const token = jwt.sign({\n    id: req.user.id,\n    rules: await defineRulesFor(req.user)\n  }, 'secret', { expiresIn: '1d' })\n\n  res.send({ token })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Can Method with Different Ability Types\nDESCRIPTION: Examples of using the can method with different Ability type configurations\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PureAbility } from '@casl/ability';\n\nconst claimAbility = new PureAbility<'read' | 'update'>();\n// the 1st generic is a string, so the method accepts only single parameter\nclaimAbility.can('read');\n\nconst ability = new PureAbility<['read' | 'update', 'Article']>();\n// the 1st argument is a tuple, so the method accepts 2-3 parameters\nability.can('read', 'Article');\n```\n\n----------------------------------------\n\nTITLE: Defining and Checking Permissions with Alternative Function Names in TypeScript\nDESCRIPTION: This snippet shows how to use alternative function names ('allow' and 'forbid') when defining permissions with CASL, making the API less confusing. It uses the defineAbility function with custom parameter names.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/less-confusing-can-api/en.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\n// define abilities\nconst ability = defineAbility((allow, forbid) => {\n  allow('read', 'Post');\n  forbid('read', 'Post', { private: true });\n});\n\n// check abilities\nability.can('read', 'Post');\n```\n\n----------------------------------------\n\nTITLE: Integrating accessibleFieldsPlugin with Mongoose and TypeScript\nDESCRIPTION: Shows how to extend a Mongoose model with the accessibleFieldsPlugin to add accessibleFieldsBy methods to both the model and document instances. This allows for field-level access control.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  accessibleFieldsPlugin,\n  AccessibleFieldsModel,\n  AccessibleFieldsDocument\n} from '@casl/mongoose';\nimport * as mongoose from 'mongoose';\n\nexport interface Post extends AccessibleFieldsDocument {\n  // the same Post definition from previous example\n}\n\nconst PostSchema = new mongoose.Schema<Post>({\n  // the same Post schema definition from previous example\n})\n\nPostSchema.plugin(accessibleFieldsPlugin);\n\nexport const Post = mongoose.model<Post, AccessibleFieldsModel<Post>>('Post', PostSchema);\n\n// Now we can safely use `Post.accessibleFieldsBy` method and `post.accessibleFieldsBy`\nPost.accessibleFieldsBy(/* parameters */);\nconst post = new Post();\npost.accessibleFieldsBy(/* parameters */);\n```\n\n----------------------------------------\n\nTITLE: Implementing Claim-based Authorization with CASL in TypeScript\nDESCRIPTION: Using CASL to implement claim-based authorization with type definitions for actions. This approach provides better maintainability and extensibility compared to manual implementations, while only adding 1.5KB to your bundle size.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/claim-authorization/en.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAbility, PureAbility } from '@casl/ability';\n\ntype AppAbility = PureAbility<Actions>;\ntype Actions = 'review' | 'publish' | 'read';\n\nconst ability = defineAbility<AppAbility>((can) => {\n  can('review');\n  can('publish');\n  can('read');\n});\n\nfunction publishArticle(article: object, ability: AppAbility) {\n  if (ability.cannot('publish')) {\n    throw new Error('You cannot publish articles');\n  }\n\n  // logic to publish article\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Actions and Subjects with defineAbility in JavaScript\nDESCRIPTION: This example shows how to define multiple actions and subjects in a single can function call using defineAbility.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-rules/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default defineAbility((can, cannot) => {\n  can(['read', 'update'], ['Post', 'Comment']);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Service with TypeScript and CASL\nDESCRIPTION: User service implementation that fetches users from database and prepares their permissions for CASL ability creation. Includes database querying and permission interpolation.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-persisted-permissions/en.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '../db';\nimport { User } from '../models/User';\nimport interpolate from '../helpers/interpolate';\n\nexport async function findBy(where: Partial<Record<keyof User, any>>) {\n  const { permissions, ...user } = await db<User>('users')\n    .innerJoin('roles', 'users.roleId', 'roles.id')\n    .select('users.id', 'users.email', 'roles.permissions', { role: 'roles.name' })\n    .where(where)\n    .first();\n\n  user.permissions = interpolate(permissions, { user });\n\n  return user;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CASL-Prisma Integration with Custom Client Path\nDESCRIPTION: Complete example of creating a custom integration file for CASL and Prisma when using a custom Prisma client output path. It manually defines the necessary types and factories for the integration.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-prisma/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/casl-prisma.ts\nimport {\n  createAbilityFactory,\n  createAccessibleByFactory,\n  prismaQuery,\n  ExtractModelName,\n  Model\n} from \"@casl/prisma/runtime\";\nimport { hkt } from \"@casl/ability\";\nimport type { Prisma, PrismaClient } from \"./generated/client\";\n\ntype ModelName = Prisma.ModelName;\ntype ModelWhereInput = {\n  [K in Prisma.ModelName]: Uncapitalize<K> extends keyof PrismaClient\n    ? Extract<Parameters<PrismaClient[Uncapitalize<K>]['findFirst']>[0], { where?: any }>\"where\"\n    : never\n};\n\ntype WhereInput<TModelName extends Prisma.ModelName> = Extract<ModelWhereInput[TModelName], Record<any, any>>;\n\ninterface PrismaQueryTypeFactory extends hkt.GenericFactory {\n  produce: WhereInput<ExtractModelName<this[0], ModelName>>\n}\n\ntype PrismaModel = Model<Record<string, any>, string>;\n// Higher Order type that allows to infer passed in Prisma Model name\nexport type PrismaQuery<T extends PrismaModel = PrismaModel> =\n  WhereInput<ExtractModelName<T, ModelName>> & hkt.Container<PrismaQueryTypeFactory>;\n\ntype WhereInputPerModel = {\n  [K in ModelName]: WhereInput<K>;\n};\n\nconst createPrismaAbility = createAbilityFactory<ModelName, PrismaQuery>();\nconst accessibleBy = createAccessibleByFactory<WhereInputPerModel, PrismaQuery>();\n\nexport {\n  createPrismaAbility,\n  accessibleBy,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Function-Based Condition Matcher in CASL\nDESCRIPTION: Demonstrates how to create a custom condition matcher that allows using functions for condition checking rather than MongoDB-style queries. This uses the PureAbility class instead of createMongoAbility.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/customize-ability/en.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  PureAbility,\n  AbilityBuilder,\n  AbilityTuple,\n  MatchConditions,\n} from '@casl/ability';\n\ntype AppAbility = PureAbility<AbilityTuple, MatchConditions>;\nconst lambdaMatcher = (matchConditions: MatchConditions) => matchConditions;\n\nexport default function defineAbilityFor(user: any): AppAbility {\n  const { can, build } = new AbilityBuilder<AppAbility>(PureAbility);\n\n  can('read', 'Article', ({ authorId }) => authorId === user.id);\n  can('read', 'Article', ({ status }) => ['draft', 'published'].includes(status));\n\n  return build({ conditionsMatcher: lambdaMatcher });\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections Based on User Abilities\nDESCRIPTION: Example demonstrating how to use accessibleBy to get a filtered Mongoose query based on user abilities.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/package/casl-mongoose/en.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { accessibleBy } from '@casl/mongoose';\n\n// returns array of records user can update\nPost.find(accessibleBy(ability, 'update').mongoQuery());\n```\n\n----------------------------------------\n\nTITLE: Using CASL with Vue Composition API and TypeScript\nDESCRIPTION: TypeScript code demonstrating how to use CASL's useAbility hook with proper typing in a Vue component using the Composition API.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAbility } from '@casl/vue';\nimport { AppAbility } from './AppAbility';\n\nexport default {\n  setup(props) {\n    const { can } = useAbility<AppAbility>();\n\n    return () => can('read', 'Post') ? 'Yes' : 'No';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Ability with Companion Object Pattern\nDESCRIPTION: Shows how to use the companion object pattern to create a centralized, type-safe ability definition that can be used throughout the application. This simplifies the use of strongly-typed abilities.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MongoAbility, createMongoAbility, CreateAbility } from '@casl/ability';\n\ntype CRUD = 'create' | 'read' | 'update' | 'delete';\ntype Abilities = ['read', 'User'] | [CRUD, 'Article'];\nexport type AppAbility = MongoAbility<Abilities>;\n\nexport const createAppAbility = createMongoAbility as CreateAbility<AppAbility>;\n// or you can just call whenever you need\nconst ability = createMongoAbility<AppAbility>();\n```\n\n----------------------------------------\n\nTITLE: Implementing CASL to Sequelize Query Converter\nDESCRIPTION: Helper functions to convert CASL ability rules into Sequelize compatible queries. Includes symbolize function for operator conversion and main query conversion logic.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/ability-to-database-query/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rulesToQuery } = require('@casl/ability/extra');\nconst { Op } = require('sequelize');\n\n/**\n * Tricky way to walk recursively over deeply nested object.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Parameters\n */\nfunction symbolize(query) {\n  return JSON.parse(JSON.stringify(query), function keyToSymbol(key, value) {\n    if (key[0] === '$') {\n      const symbol = Op[key.slice(1)];\n      this[symbol] = value;\n      return;\n    }\n\n    return value;\n  });\n}\n\nfunction ruleToSequelize(rule) {\n  return rule.inverted ? { $not: rule.conditions } : rule.conditions;\n}\n\nfunction toSequelizeQuery(ability, subject, action) {\n  const query = rulesToQuery(ability, action, subject, ruleToSequelize);\n  return query === null ? query : symbolize(query);\n}\n\nasync function accessibleBy(ability, action = 'read') {\n  const query = toSequelizeQuery(ability, action, this.name);\n\n  if (query === null) { // there is no accessible records, so no need to send query to db\n    return [];\n  }\n\n  return this.findAll({\n    where: query;\n  });\n}\n\nmodule.exports = {\n  toSequelizeQuery,\n  accessibleBy,\n};\n```\n\n----------------------------------------\n\nTITLE: Working with AbilityBuilder and Type Inference\nDESCRIPTION: Demonstrates how to use AbilityBuilder with proper type inference. The builder can infer types from the Ability class or factory function, providing type safety for building permission rules.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, PureAbility, createMongoAbility } from '@casl/ability';\n\n// we can pass custom Ability class\nconst builder = new AbilityBuilder(PureAbility);\n\n// or we can pass factory function\nconst builder = new AbilityBuilder(createMongoAbility);\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Abilities with Reasons in JavaScript\nDESCRIPTION: This example demonstrates how to define conditional abilities with reasons for forbidden actions using AbilityBuilder.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-rules/en.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability';\n\nasync function defineAbility(user) {\n  const hasPaidSubscription = await user.hasPaidSubscription();\n  const { can, cannot, build } = new AbilityBuilder(createMongoAbility);\n\n  if (hasPaidSubscription) {\n    can('create', 'BlogPost');\n  } else {\n    cannot('create', 'BlogPost').because('You have not paid for monthly subscription');\n  }\n\n  return build()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CASL with Prisma WhereInput\nDESCRIPTION: Example of using createPrismaAbility to define permissions on Prisma models using WhereInput conditions. Shows how to define read permissions on Post model with specific conditions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-prisma/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { User, Post, Prisma } from '@prisma/client';\nimport { PureAbility, AbilityBuilder, subject } from '@casl/ability';\nimport { createPrismaAbility, PrismaQuery, Subjects } from '@casl/prisma';\n\ntype AppAbility = PureAbility<[string, Subjects<{\n  User: User,\n  Post: Post\n}>], PrismaQuery>;\nconst { can, cannot, build } = new AbilityBuilder<AppAbility>(createPrismaAbility);\n\ncan('read', 'Post', { authorId: 1 });\ncannot('read', 'Post', { title: { startsWith: '[WIP]:' } });\n\nconst ability = build();\nability.can('read', 'Post');\nability.can('read', subject('Post', { title: '...', authorId: 1 })));\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Classes for CASL in JavaScript\nDESCRIPTION: Defines base Entity class and Article class for use with CASL ability checks.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Entity {\n  constructor(attrs) {\n    Object.assign(this, attrs);\n  }\n}\n\nexport class Article extends Entity {}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Field Permissions in CASL\nDESCRIPTION: Shows how to define permissions for nested fields using dot notation. This allows for fine-grained control over complex object structures.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default defineAbility((can) => {\n  can('read', 'User', ['address.city', 'address.street']);\n});\n```\n\n----------------------------------------\n\nTITLE: Using AbilityBuilder Class to Define Rules in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the AbilityBuilder class to create a MongoAbility instance with the same permissions as the defineAbility example.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-rules/en.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability'\n\nconst { can, cannot, build } = new AbilityBuilder(createMongoAbility);\n\ncan('read', 'Post');\ncannot('delete', 'Post', { published: true });\n\nexport default build();\n```\n\n----------------------------------------\n\nTITLE: Using RawRule Type Helpers in CASL\nDESCRIPTION: Demonstrates how to use RawRuleOf and RawRuleFrom type helpers to properly type raw rules when creating them manually or fetching from a database. These helpers ensure type safety for rule definitions.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MongoAbility, RawRuleOf, RawRuleFrom, MongoQuery } from '@casl/ability';\n\ntype AppAbilities = ['read' | 'update', 'Article'];\ntype AppAbility = MongoAbility<AppAbilities>;\n\nconst rawRules: RawRuleOf<AppAbility>[] = [\n  { action: 'read', subject: 'Article' }\n];\n\n// or\ntype AppRawRule = RawRuleFrom<AppAbilities, MongoQuery>;\nasync function getRulesFromDb(): Promise<AppRawRule[]> {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CASL Vue Plugin\nDESCRIPTION: JavaScript code demonstrating how to initialize the CASL Vue plugin in a Vue 3 application. It shows setting up the plugin with an Ability instance and optional global properties.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { abilitiesPlugin } from '@casl/vue';\nimport ability from './services/ability';\n\ncreateApp()\n  .use(abilitiesPlugin, ability, {\n    useGlobalProperties: true\n  })\n  .mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Using AbilityBuilder\nDESCRIPTION: Shows how to use AbilityBuilder to construct ability instances in a declarative way\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability';\n\nconst { can, build } = new AbilityBuilder(createMongoAbility);\n```\n\n----------------------------------------\n\nTITLE: Defining Application Abilities with TypeScript in CASL\nDESCRIPTION: Defines the application's abilities using TypeScript types for actions and subjects. It creates type definitions for the application's abilities and exports a factory function to create an AppAbility instance.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-static-permissions/en.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility, ForcedSubject, CreateAbility, MongoAbility } from '@casl/ability';\n\nconst actions = ['manage', 'invite'] as const;\nconst subjects = ['User', 'all'] as const;\ntype AppAbilities = [\n  typeof actions[number],\n  typeof subjects[number] | ForcedSubject<Exclude<typeof subjects[number], 'all'>>\n];\n\nexport type AppAbility = MongoAbility<AppAbilities>;\nexport const createAppAbility = createMongoAbility as CreateAbility<AppAbility>;\n```\n\n----------------------------------------\n\nTITLE: Matching Array Properties Using $in Operator in CASL\nDESCRIPTION: Demonstrates how to use the $in operator to check if an array property contains specific values. This example shows how to grant read access to Articles that have specific categories.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article', { categories: { $in: ['javascript', 'frontend'] } });\n});\n\nclass Article {\n  constructor(title, categories) {\n    this.title = title;\n    this.categories = categories;\n  }\n}\n\nconst article = new Article('CASL', ['javascript', 'acl']);\nconsole.log(ability.can('read', article)); // true\n```\n\n----------------------------------------\n\nTITLE: Using Double Asterisk Pattern for Nested Fields in CASL\nDESCRIPTION: Demonstrates how to use the '**' pattern to grant access to all fields of a nested field regardless of nesting level. This provides a way to handle deeply nested properties.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'User', ['address.**']);\n});\n\nability.can('read', 'User', 'address'); // true\nability.can('read', 'User', 'address.street'); // true\nability.can('read', 'User', 'address.city.name'); // true\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Application Ability Class in TypeScript\nDESCRIPTION: Defines a custom application-specific Ability class that extends CASL's Ability with strongly-typed actions and subjects, improving type safety throughout the application.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Ability } from '@casl/ability';\n\ntype Actions = 'create' | 'read' | 'update' | 'delete';\ntype Subjects = 'Article' | 'User'\n\nexport type AppAbilities = [Actions, Subjects];\n\nexport class AppAbility extends Ability<AppAbilities> {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic CASL Ability Rules\nDESCRIPTION: Shows how to define basic permission rules using CASL's defineAbility function.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default defineAbility((can) => {\n  can('read', 'Article');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Single Asterisk Pattern for First-Level Nested Fields in CASL\nDESCRIPTION: Shows how to use the '*' pattern to grant access to only first-level nested fields. This provides more restricted access compared to the double asterisk pattern.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'User', ['address.*']);\n});\n\nability.can('read', 'User', 'address'); // true\nability.can('read', 'User', 'address.street'); // true\nability.can('read', 'User', 'address.city.name'); // false\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Permissions with CASL\nDESCRIPTION: Defines permission functions for different user roles using CASL's AbilityBuilder. Each role (member and admin) has specific permissions defined based on the application's requirements.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-static-permissions/en.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ForcedSubject, AbilityBuilder } from '@casl/ability';\nimport { User } from '../models/User';\n\n// abilities definition from previous example\n\ntype DefinePermissions = (user: User, builder: AbilityBuilder<AppAbility>) => void;\ntype Roles = 'member' | 'admin';\n\nconst rolePermissions: Record<Roles, DefinePermissions> = {\n  member(user, { can }) {\n    can('invite', 'User');\n    can('update', 'User', { id: user.id });\n  },\n  admin(user, { can }) {\n    can('manage', 'all');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using permittedFieldsOf in Express Middleware\nDESCRIPTION: Shows how to filter request body fields based on user permissions in an Express.js API endpoint\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability-extra/en.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\nimport { permittedFieldsOf } from '@casl/ability/extra';\nimport { pick, isEmpty } from 'lodash';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article');\n  can('update', 'Article', ['title', 'description']);\n});\n\napp.patch('/api/articles/:id', async (req, res) => {\n  const updatableFields = permittedFieldsOf(ability, 'update', 'Article', {\n    fieldsFrom: rule => rule.fields || [/* list of all fields for Article */]\n  });\n  const changes = pick(req.body, updatableFields);\n\n  if (isEmpty(changes)) {\n    res.status(400).send({ message: 'Nothing to update' });\n    return;\n  }\n\n  await updateArticleById(id, changes);\n});\n```\n\n----------------------------------------\n\nTITLE: Restricting MongoDB Operators to $eq and $in for CASL Conditions\nDESCRIPTION: Shows how to restrict available MongoDB operators to only $eq and $in, which helps reduce bundle size and simplifies condition logic. This example creates a custom conditionsMatcher with limited functionality.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/customize-ability/en.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createMongoAbility,\n  MongoAbility,\n  AbilityBuilder,\n  Abilities,\n  MongoQueryFieldOperators,\n  ConditionsMatcher,\n} from '@casl/ability';\nimport { $in, within, $eq, eq, createFactory, BuildMongoQuery } from '@ucast/mongo2js';\n\ntype RestrictedMongoQuery<T> = BuildMongoQuery<T, Pick<MongoQueryFieldOperators, '$eq' | '$in'>>;\nconst conditionsMatcher: ConditionsMatcher<RestrictedMongoQuery> = createFactory({ $in, $eq }, { in: within, eq });\ntype AppAbility = MongoAbility<Abilities, RestrictedMongoQuery>;\n\nexport default function defineAbilityFor(user: any) {\n  const { can, build } = new AbilityBuilder(createMongoAbility);\n\n  can('read', 'Article', { authorId: user.id } });\n  can('read', 'Article', { status: { $in: ['draft', 'published'] } });\n\n  return build({ conditionsMatcher });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Classes as Subject Types in CASL\nDESCRIPTION: Shows how to use TypeScript classes to define subject types for CASL abilities, enabling type checking for both class constructor and instance references in permission checks.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility } from '@casl/ability';\n\nclass Article {\n  id: number\n  title: string\n  content: string\n  authorId: number\n}\n\ntype Action = 'create' | 'read' | 'update' | 'delete';\ntype Subject = typeof Article | Article;\n\nconst ability = createMongoAbility<[Action, Subject]>();\n\nability.can('read', Article);\nability.can('update', new Article());\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Read Permissions in CASL.js\nDESCRIPTION: Illustrates how to define basic read permissions for published articles and demonstrates different permission checking scenarios.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\nimport { Article } from './entities';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article', { published: true })\n});\nconst article = new Article({ published: true });\n\nability.can('read', article); // (1)\nability.can('do', 'SomethingUndeclared'); // (2)\nability.can('read', 'Article'); // (3)\n```\n\n----------------------------------------\n\nTITLE: Using permittedFieldsOf Helper in CASL\nDESCRIPTION: Shows how to use the permittedFieldsOf helper to extract all permitted fields from an ability instance. This is useful for filtering user input to only allow updates to fields they have permission to modify.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { permittedFieldsOf } from '@casl/ability/extra';\n\n// the same code from app.js, the example above\n\nconst ARTICLE_FIELDS = ['title', 'description', 'authorId', 'published'];\nconst options = { fieldsFrom: rule => rule.fields || ARTICLE_FIELDS };\n\nlet fields = permittedFieldsOf(ability, 'update', ownArticle, options); // ['title', 'description']\nfields = permittedFieldsOf(ability, 'update', anotherArticle, options); // []\nfields = permittedFieldsOf(ability, 'update', 'Article', options); // ['title', 'description'] !\n\nif (fields.includes('published')) {\n  // do something if can update published field\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Field Permissions in CASL\nDESCRIPTION: Demonstrates how to check permissions on specific fields using the defined ability. Shows the difference in permissions between regular users and moderators for the 'published' field.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport defineAbilityFor from './defineAbility';\n\nconst user = { id: 1 };\nconst moderator = { id: 2, isModerator: true };\n\ndefineAbilityFor(user).can('update', 'Article', 'published'); // false\ndefineAbilityFor(moderator).can('update', 'Article', 'published'); // true\n```\n\n----------------------------------------\n\nTITLE: Defining Article Reading Permission with Date Condition in CASL\nDESCRIPTION: Creates a permission rule that allows reading articles only if their creation date is today or in the past using the $lte MongoDB operator.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst today = new Date().setHours(0, 0, 0, 0);\n\nexport default defineAbility((can) => {\n  can('read', 'Article', { createdAt: { $lte: today } })\n});\n```\n\n----------------------------------------\n\nTITLE: Recursive Alias Definition in CASL\nDESCRIPTION: Illustrates how to define nested aliases that resolve recursively, combining multiple permission levels into a single alias.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-aliases/en.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility, createAliasResolver } from '@casl/ability'\n\nconst resolveAction = createAliasResolver({\n  modify: ['update', 'delete'],\n  access: ['read', 'modify']\n});\nconst ability = defineAbility((can) => {\n  can('access', 'Post');\n}, { resolveAction });\n\nability.can('access', 'Post'); // true\nability.can('modify', 'Post'); // true\nability.can('update', 'Post'); // true\nability.can('delete', 'Post'); // true\n```\n\n----------------------------------------\n\nTITLE: Defining Ability Rules and Instances in TypeScript with CASL\nDESCRIPTION: Implementation of functions that define rules and create ability instances for users. This example shows how to fetch device IDs from a database to build permissions for a user to manage their own devices.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/cache-rules/en.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility, MongoAbility } from '@casl/ability';\nimport { getDevicesOf } from '../services/device';\n\nexport type AppAbility = MongoAbility;\n\nexport async function defineRulesFor(user) {\n  const { can, rules } = new AbilityBuilder<AppAbility>(createMongoAbility);\n\n  const devices = await getDevicesOf(user);\n  const ids = devices.map(device => device.id);\n\n  can('read', 'Device', { id: { $in: ids } });\n  // other rules\n\n  return rules;\n}\n\nexport async function defineAbilityFor(user) {\n  const rules = await defineRulesFor(user);\n  return new AppAbility(rules);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Details Update with CASL Authorization\nDESCRIPTION: Implements the updateUserDetails function that handles user updates with permission checks using CASL ability definitions. Includes validation for both self-updates and updating other users.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-static-permissions/en.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ForbiddenError, subject } from '@casl/ability';\nimport { defineAbilityFor } from './services/appAbility';\nimport { findUserByEmail, updateUserById, UserChanges } from './services/users';\n\nexport async function updateUserDetails(\n  /** email of a user who initiates the request (i.e., logged in user) */\n  initiatorEmail: string,\n  /** an email of user to be updated */\n  userToBeUpdatedEmail: string,\n  /** an object of changes to be applied */\n  changes: UserChanges\n) {\n  const user = await findUserByEmail(initiatorEmail);\n  const ability = defineAbilityFor(user);\n  const userToBeUpdated = userToBeUpdatedEmail === initiatorEmail\n    ? user\n    : await findUserByEmail(userToBeUpdatedEmail)\n\n  ForbiddenError.from(ability).throwUnlessCan('update', subject('User', userToBeUpdated));\n  await updateUserById(userToBeUpdated.id, changes);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Instance vs Type Permissions in CASL\nDESCRIPTION: Illustrates the difference between checking permissions on a specific object instance versus a subject type. When checking on an object instance, conditions are evaluated, but when checking on a type, it returns true if any object of that type could be updated.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport defineAbilityFor from './defineAbility';\nimport { Article } from './entities';\n\nconst user = { id: 1 };\nconst ownArticle = new Article('CASL in Action', '', user.id);\nconst anotherArticle = new Article('CASL in Vue apps', '', 2);\nconst ability = defineAbilityFor(user);\n\nability.can('update', ownArticle, 'title'); // true\nability.can('update', anotherArticle, 'title'); // false\nability.can('update', 'Article', 'title'); // true!\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Service with CASL Ability Updates in TypeScript\nDESCRIPTION: Implements a Session service that updates the CASL ability rules upon user login/logout based on user roles. This service manages authentication state and corresponding permission updates.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { autoinject } from 'aurelia-framework';\nimport { Ability, AbilityBuilder } from '@casl/ability';\n\n@autoinject\nexport class Session {\n  private token: string\n\n  constructor(private ability: Ability) {}\n\n  login(details) {\n    const params = { method: 'POST', body: JSON.stringify(details) };\n    return fetch('path/to/api/login', params)\n      .then(response => response.json())\n      .then((session) => {\n        this.updateAbility(session.user);\n        this.token = session.token;\n      });\n  }\n\n  private updateAbility(user) {\n    const { can, rules } = new AbilityBuilder(Ability);\n\n    if (user.role === 'admin') {\n      can('manage', 'all');\n    } else {\n      can('read', 'all');\n    }\n\n    this.ability.update(rules);\n  }\n\n  logout() {\n    this.token = null;\n    this.ability.update([]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ability with Direct and Inverted Rules in CASL\nDESCRIPTION: Demonstrates how to define an ability with both direct (can) and inverted (cannot) rules with conditions, and using the subject helper for type binding.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility, subject } from '@casl/ability';\n\nexport const article = subject.bind(null, 'Article');\nexport const user = { id: 1 };\nexport const ability = defineAbility((can, cannot) => {\n  can('read', 'Article', { authorId: user.id });\n  cannot('read', 'Article', { private: true })\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Article Reading Permission with Status Condition in CASL\nDESCRIPTION: Creates a permission rule that allows reading articles only if their status is either 'review' or 'published' using the $in MongoDB operator.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default defineAbility((can) => {\n  can('read', 'Article', { status: { $in: ['review', 'published'] } })\n});\n```\n\n----------------------------------------\n\nTITLE: Using unpackRules with JWT Token\nDESCRIPTION: Demonstrates how to unpack CASL rules from a JWT token for use with PureAbility instance\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability-extra/en.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unpackRules } from '@casl/ability/extra'\nimport jwt from 'jsonwebtoken';\nimport ability from '../services/appAbility';\n\nexport default class LoginComponent {\n  login(params) {\n    return http.post('/session')\n      .then((response) => {\n        const token = jwt.decode(response.token);\n        ability.update(unpackRules(token.rules))\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Accessible Records with CASL and Prisma\nDESCRIPTION: Example of using the accessibleBy helper function to retrieve records from a database that a user has permission to access based on their ability instance.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-prisma/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ability is a PrismaAbility instance created in the example above\n\nconst accessiblePosts = await prisma.post.findMany({\n  where: accessibleBy(ability).Post\n});\n```\n\n----------------------------------------\n\nTITLE: Testing CASL Permissions Using Behavior-Based Approach\nDESCRIPTION: Demonstrates the recommended approach to testing CASL permissions by focusing on the behavior (what users can and cannot do) rather than the specific rule implementation, resulting in more maintainable tests.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbilityFor, article } from './defineAbility';\n\ndescribe('Permissions', () => {\n  let user;\n  let ability;\n\n  describe('when user is an admin', () => {\n    beforeEach(() => {\n      user = { isAdmin: true };\n      ability = defineAbilityFor(user);\n    });\n\n    it('can do anything', () => {\n      expect(ability.can('manage', 'all')).to.be.true;\n    });\n  });\n\n  describe('when user is a regular user', () => {\n    beforeEach(() => {\n      user = { isRegular: true };\n      ability = defineAbilityFor(user);\n    });\n\n    it('can read non private article', () => {\n      expect(ability.can('read', 'Article')).to.be.true;\n      expect(ability.can('read', article({ title: 'test' }))).to.be.false; // because no private field\n      expect(ability.can('read', article({ title: 'test', private: false }))).to.be.true;\n      expect(ability.can('read', article({ private: true }))).to.be.false;\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Fields for permittedFieldsOf\nDESCRIPTION: Shows the change in permittedFieldsOf usage where fieldsFrom option becomes mandatory to explicitly specify which fields should be permitted.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\nimport { permittedFieldsOf } from '@casl/ability/extra';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article');\n});\n\nconst fields = permittedFieldsOf(ability, 'read', 'Article'); // []\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\nimport { permittedFieldsOf } from '@casl/ability/extra';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article');\n});\n\nconst ARTICLE_FIELDS = ['id', 'title', 'description'];\nconst fields = permittedFieldsOf(ability, 'read', 'Article', {\n  fieldsFrom: rule => rule.fields || ARTICLE_FIELDS\n}); // ['id', 'title', 'description']\n```\n\n----------------------------------------\n\nTITLE: Article Service Implementation\nDESCRIPTION: Service implementation for article management with CASL authorization checks. Demonstrates create operation with permission validation.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-persisted-permissions/en.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ForbiddenError, subject } from '@casl/ability';\nimport { AppAbility } from './appAbility';\nimport db from '../db';\nimport { Article } from '../models/Article';\n\nconst articles = () => db<Article>('articles');\n\nexport async function create(ability: AppAbility, partialArticle: Omit<Article, 'id'>) {\n  ForbiddenError.from(ability).throwUnlessCan('create', subject('Article', partialArticle));\n  const [id] = await articles().insert(partialArticle);\n\n  return { id, ...partialArticle } as Article;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CASL with Vue Options API and TypeScript\nDESCRIPTION: TypeScript code demonstrating how to use CASL with Vue's Options API, including proper typing for the injected Ability instance.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectionKey } from 'vue';\nimport { ABILITY_TOKEN } from '@casl/vue';\n\n// previous content that defines `AppAbility`\n\nexport const TOKEN = ABILITY_TOKEN as InjectionKey<AppAbility>;\n```\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport { TOKEN } from './AppAbility';\n\nexport default defineComponent({\n  inject: {\n    ability: { from: TOKEN }\n  },\n  created() {\n    this.ability // AppAbility\n  }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Rules with Conditions in JavaScript\nDESCRIPTION: This example demonstrates how to define multiple rules with different conditions for the same action and subject using defineAbility.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-rules/en.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default defineAbility((can) => {\n  can('read', 'Article', { published: true });\n  can('read', 'Article', { published: false, status: 'review' });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Forbidden Reasons in CASL for Better Error Messages\nDESCRIPTION: Demonstrates how to define rules with human-friendly explanations using the because method, which can later be accessed for providing meaningful feedback to users.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility, subject } from '@casl/ability';\n\nexport const article = subject.bind(null, 'Article');\nexport const ability = defineAbility((can) => {\n  can('read', 'Article');\n  cannot('read', 'Article', { private: true }).because('Private content is protected by law');\n});\n\nconst rule = ability.relevantRuleFor('read', 'Article'); // instance of internal `Rule` class\n```\n\n----------------------------------------\n\nTITLE: Enhancing Type Safety for can and cannot Methods in TypeScript\nDESCRIPTION: Improvements to type safety for the can and cannot methods of AbilityBuilder. This change restricts what fields and operators can be used inside conditions and provides better intellisense for object fields.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, Ability, AbilityClass } from '@casl/ability';\n\ninterface Person {\n  kind: 'Person'\n  firstName: string\n  lastName: string\n  age: number\n  address: {\n    street: string\n    city: string\n  }\n}\n\ntype AppAbility = Ability<['read', Person | Person['kind']]>;\ncons AppAbility = Ability as AbilityClass<AppAbility>;\ncons { can } = new AbilityBuilder(AppAbility);\n\ninterface PersonQuery extends Person {\n  'address.street': Person['address']['street']\n  'address.city': Person['address']['city']\n}\n\ncan<PersonQuery>('read', 'Person', {\n  'address.street': 'Somewhere in the world',\n  fistName: 'John' // unintentional typo\n});\ncan<PersonQuery>('read', 'Person', ['firstName', 'lastName'], {\n  age: { $gt: 18 }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Inverted Rules in CASL.js\nDESCRIPTION: Demonstrates how to use inverted rules in CASL.js to define permissions that allow everything except specific actions.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can, cannot) => {\n  can('manage', 'all');\n  cannot('delete', 'all');\n});\n\nability.can('read', 'Post'); // true\nability.can('delete', 'Post'); // false\n```\n\n----------------------------------------\n\nTITLE: Testing Article Permissions with CASL\nDESCRIPTION: Demonstrates how to test whether specific article instances can be read based on defined permissions, showing both passing and failing permission checks.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ability from './defineAbility';\nimport { Article } from './entities';\n\nconst today = new Date().setHours(0, 0, 0, 0);\nconst tomorrow = /* logic to calculate date for tomorrow */ ;\n\nability.can('read', new Article('review', today)) // (1), true\nability.can('read', new Article('published', today)) // (2), true\nability.can('read', new Article('draft', today)) // (3), false\nability.can('read', new Article('review', tomorrow)) // (4), false\n```\n\n----------------------------------------\n\nTITLE: Updating Rules in CASL.js\nDESCRIPTION: Demonstrates how to update rules in a CASL.js Ability instance using the 'update' method and AbilityBuilder.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport ability from './defineAbility';\n\nability.update([]); // forbids everything\nability.update([ // switch to readonly mode\n  { action: 'read', subject: 'all' }\n]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMongoAbility, AbilityBuilder } from '@casl/ability';\n\nconst ability = createMongoAbility();\n\nconst { can, rules } = new AbilityBuilder(createMongoAbility);\ncan('read', 'all');\n\nability.update(rules);\n```\n\n----------------------------------------\n\nTITLE: Registering CASL Can Component Globally\nDESCRIPTION: JavaScript code showing how to register the CASL Can component globally in a Vue application.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Can, abilitiesPlugin } from '@casl/vue';\n\ncreateApp()\n  .use(abilitiesPlugin, ability)\n  .component(Can.name, Can) // component registration\n  .mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Creating Action-Subject Dependent Type Constraints in CASL\nDESCRIPTION: Demonstrates how to define dependencies between actions and subjects for stricter type checking. This ensures that certain actions can only be performed on specific subjects at compile time.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility } from '@casl/ability';\n\ntype CRUD = 'create' | 'read' | 'update' | 'delete';\ntype Abilities = ['read', 'User'] | [CRUD, 'Article'];\n\nconst ability = createMongoAbility<Abilities>();\n\nability.can('read', 'User');\nability.can('create', 'User'); // build time error! because it's not allowed to create users\n```\n\n----------------------------------------\n\nTITLE: Using Can Component in React\nDESCRIPTION: Examples of using the Can component to conditionally render UI elements based on user permissions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default ({ post }) => <Can I=\"read\" this={post} field=\"title\">\n  Yes, you can do this! ;)\n</Can>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Can not I=\"create\" a=\"Post\">\n  You are not allowed to create a post\n</Can>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <Can I=\"create\" a=\"Post\" passThrough>\n    {allowed => <button disabled={!allowed}>Save</button>}\n  </Can>\n)\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Can I=\"create\" a=\"Post\" ability={ability}>\n  {() => <button onClick={this.createPost}>Create Post</button>}\n</Can>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => <Can I=\"create\" a=\"Post\" ability={ability}>\n  <button onClick={this.createPost}>Create Post</button>\n</Can>\n```\n\n----------------------------------------\n\nTITLE: Adding Forbidden Reasons to Inverted Rules in CASL.js\nDESCRIPTION: Shows how to add explanations to inverted rules using the 'because' method, and how to retrieve these messages using ForbiddenError.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default defineAbility((can, cannot) => {\n  can('read', 'all');\n  cannot('read', 'all', { private: true })\n    .because('You are not allowed to read private information');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ForbiddenError } from '@casl/ability';\nimport ability from './defineAbility';\n\ntry {\n  ForbiddenError.from(ability).throwUnlessCan('read', { private: true })\n} catch (error) {\n  if (error instanceof ForbiddenError) {\n    console.log(error.message); // You are not allowed to read private information\n  }\n\n  throw error\n}\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Function Names with AbilityBuilder in TypeScript\nDESCRIPTION: This snippet demonstrates how to use alternative function names with CASL's AbilityBuilder class. It uses object destructuring to rename the 'can' and 'cannot' methods to 'allow' and 'forbid' respectively.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/less-confusing-can-api/en.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability';\n\n// define abilities\nconst { can: allow, cannot: forbid, build } = new AbilityBuilder(createMongoAbility);\n\nallow('read', 'Post');\nforbid('read', 'Post', { private: true });\n\nconst ability = build();\n\n// check abilities\nability.can('read', 'Post');\n```\n\n----------------------------------------\n\nTITLE: Checking Article Category Permission in CASL\nDESCRIPTION: Demonstrates how to define and test a permission that allows reading articles only if they belong to a specific category, showing how CASL handles array properties.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article', { categories: 'javascript' });\n});\n\nclass Article {\n  constructor(title, categories) {\n    this.title = title;\n    this.categories = categories;\n  }\n}\n\nconst article = new Article('CASL', ['javascript', 'acl']);\nconsole.log(ability.can('read', article)); // true\n```\n\n----------------------------------------\n\nTITLE: Injecting CASL Ability in Vue Component\nDESCRIPTION: Vue component code showing how to inject the CASL Ability instance using the provide/inject API and ABILITY_TOKEN.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"$ability.can('create', 'Post')\">\n      <a @click=\"createPost\">Add Post</a>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ABILITY_TOKEN } from '@casl/vue';\n\nexport default {\n  inject: {\n    $ability: { from: ABILITY_TOKEN }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Fields with Dot Notation in CASL\nDESCRIPTION: Shows how to define conditions on nested fields using dot notation in TypeScript. This requires creating a flattened type that includes the dot-notation properties for proper type checking.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MongoAbility, createMongoAbility } from '@casl/ability';\n\ninterface User {\n  kind: 'User'\n  id: number\n  name: string\n  address: {\n    street: string\n    building: string\n  }\n}\n\ntype AppAbility = MongoAbility<['read', User | 'User']>;\n\nconst { can } = new AbilityBuilder<AppAbility>(createMongoAbility);\n\ntype FlatUser = User & {\n  'address.street': User['address']['street']\n};\n\ncan<FlatUser>('read', 'Post', { 'address.street': 'test' });\n// It also works for fields\ncan<FlatUser>('read', 'Post', ['address.street'], { 'address.street': 'test' })\n```\n\n----------------------------------------\n\nTITLE: Using CASL Can Component in Vue Template\nDESCRIPTION: HTML template demonstrating various ways to use the CASL Can component for permission-based rendering in Vue applications.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <Can I=\"create\" a=\"Post\">\n    <a @click=\"createPost\">Add Post</a>\n  </Can>\n\n  <Can I=\"read\" :this=\"post\" field=\"title\">\n    Yes, you can do this! ;)\n  </Can>\n\n  <Can not I=\"create\" a=\"Post\">\n    You are not allowed to create a post\n  </Can>\n\n  <Can I=\"delete\" a=\"Post\" passThrough v-slot=\"{ allowed }\">\n    <button :disabled=\"!allowed\">Delete post</button>\n  </Can>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in Field Restrictions for TypeScript\nDESCRIPTION: Demonstration of how to use wildcards in field restrictions with the enhanced type safety for can and cannot methods.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncan<PersonQuery, 'address.*'>('read', 'Person', ['firstName', 'address.*'], {\n  age: { $gt: 18 }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Article Status Permission in CASL\nDESCRIPTION: Demonstrates how to define and test a permission that allows reading articles only if their status is either 'published' or 'inReview' using the $in operator.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article', { status: { $in: ['published', 'inReview'] } });\n});\n\nclass Article {\n  constructor(title, status) {\n    this.title = title;\n    this.status = status;\n  }\n}\n\nconst article = new Article('CASL', 'published');\nconsole.log(ability.can('read', article)); // true\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Object Properties in CASL Rules\nDESCRIPTION: Shows how to use dot notation to access nested object properties in CASL rules. The example demonstrates restricting access to Address objects based on a nested country.isoCode property.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Address', { 'country.isoCode': 'UA' });\n});\n\nclass Address {\n  constructor(isoCode, name) {\n    this.country = {\n      isoCode: isoCode,\n      name: name,\n    }\n  }\n}\n\nconst address = new Address('UA', 'Ukraine');\nconsole.log(ability.can('read', address)); // true\n```\n\n----------------------------------------\n\nTITLE: Integrating accessibleRecordsPlugin with Mongoose and TypeScript\nDESCRIPTION: Shows how to extend a Mongoose model with the accessibleRecordsPlugin to enable the accessibleBy method. This extension provides type-safe access to query filtering based on CASL abilities.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accessibleRecordsPlugin, AccessibleRecordModel } from '@casl/mongoose';\n\n// all previous code, except last line\n\nPostSchema.plugin(accessibleRecordsPlugin);\n\nexport const Post = mongoose.model<Post, AccessibleRecordModel<Post>>('Post', PostSchema);\n\n// Now we can safely use `Post.accessibleBy` method.\nPost.accessibleBy(/* parameters */)\nPost.where(/* parameters */).accessibleBy(/* parameters */);\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Service with CASL\nDESCRIPTION: Session service implementation showing how to update CASL abilities based on user authentication\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PureAbility, AbilityBuilder } from '@casl/ability';\nimport { Injectable } from '@angular/core';\n\n@Injectable({ provideIn: 'root' })\nexport class Session {\n  private token: string\n\n  constructor(@Inject(PureAbility) private ability: MongoAbility) {}\n\n  login(details) {\n    const params = { method: 'POST', body: JSON.stringify(details) };\n    return fetch('path/to/api/login', params)\n      .then(response => response.json())\n      .then((session) => {\n        this.updateAbility(session.user);\n        this.token = session.token;\n      });\n  }\n\n  private updateAbility(user) {\n    const { can, rules } = new AbilityBuilder(createMongoAbility);\n\n    if (user.role === 'admin') {\n      can('manage', 'all');\n    } else {\n      can('read', 'all');\n    }\n\n    this.ability.update(rules);\n  }\n\n  logout() {\n    this.token = null;\n    this.ability.update([]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Rule Updates in CASL.js\nDESCRIPTION: Shows how to subscribe to 'update' and 'updated' events on a PureAbility instance to track when rules are updated.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = ability.on('update', ({ rules, target }) => {\n  // `rules` is an array passed to `update` method\n  // `target` is a PureAbility instance that triggered event\n})\n\nunsubscribe() // removes subscription\n```\n\n----------------------------------------\n\nTITLE: Custom Subject Type Detection with AbilityBuilder\nDESCRIPTION: Demonstrates how to implement custom subject type detection using AbilityBuilder.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability';\n\nconst { can, build } = new AbilityBuilder(createMongoAbility);\n\ncan('read', 'Article');\n\nconst ability = build({\n  detectSubjectType: object => object.__typename\n});\n\nconst article = { __typename: 'Article' };\nability.can('read', article); // true\n```\n\n----------------------------------------\n\nTITLE: Using Classes for Type Detection\nDESCRIPTION: Shows how to use classes to properly define subject types in CASL.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ability from './defineAbility';\n\nclass Article {}\n\nconst article = new Article();\nability.can('read', article); // true\n```\n\n----------------------------------------\n\nTITLE: Using $elemMatch to Match Multiple Criteria in Array Items\nDESCRIPTION: Demonstrates using the $elemMatch operator to match multiple criteria within array items. This example shows how to grant update permission on WishlistItems based on shared permissions in an array of objects.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst user = { id: 1 };\nconst ability = defineAbility((can) => {\n  can('update', 'WishlistItem', {\n    sharedWith: {\n      $elemMatch: { permission: 'update', userId: user.id }\n    }\n  });\n});\n\nclass WishlistItem {\n  constructor(title, sharedWith) {\n    this.title = title;\n    this.sharedWith = sharedWith;\n  }\n}\n\nconst wishlistItem = new WishlistItem('CASL in Action', [\n  { permission: 'read', userId: 2 },\n  { permission: 'update', userId: 1 },\n]);\nability.can('update', wishlistItem); // true\n```\n\n----------------------------------------\n\nTITLE: Using AbilityOptionsOf with MongoAbility in TypeScript\nDESCRIPTION: Demonstrates how to use the AbilityOptionsOf utility type instead of explicitly declaring AbilityOptions with Abilities and Conditions. This example shows setting up custom subject type detection for a MongoAbility instance.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityOptionsOf, MongoAbility, createMongoAbility } from '@casl/ability';\n\ntype AppAbilities = ['read' | 'update', 'Article'];\ntype AppAbility = MongoAbility<AppAbilities>;\nconst options: AbilityOptionsOf<AppAbility> = {\n  detectSubjectType: (subject) => /* custom implementation */\n};\n\nconst ability = createMongoAbility<AppAbilities>([], options);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Ability Types\nDESCRIPTION: Examples of creating custom ability types using PureAbility with different generic parameters\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PureAbility, Abilities } from '@casl/ability';\n\ntype ClaimAbility = PureAbility<string>;\ntype AppAbility = PureAbility<[string, string]>;\n```\n\n----------------------------------------\n\nTITLE: Using CASL Ability within React Hooks\nDESCRIPTION: This snippet demonstrates the correct way to use the CASL Ability instance within React hooks to trigger rerenders when rules are updated. It shows how to properly specify the dependency array in useMemo.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst posts = React.useMemo(() => getPosts(ability), [ability.rules]);\n// ✅ calling ability.update will update the list of posts\n```\n\n----------------------------------------\n\nTITLE: Integrating CASL with MongoDB and Mongoose\nDESCRIPTION: Example showing how to integrate CASL with MongoDB using the @casl/mongoose package. Demonstrates filtering database records based on user permissions using the accessibleBy plugin.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { accessibleRecordsPlugin } from '@casl/mongoose';\nimport mongoose from 'mongoose';\n\nmongoose.plugin(accessibleRecordsPlugin);\n\nconst user = getUserLoggedInUser(); // app specific function\n\nconst ability = defineAbilitiesFor(user);\nconst BlogPost = mongoose.model('BlogPost', mongoose.Schema({\n  title: String,\n  author: mongoose.Types.ObjectId,\n  content: String,\n  createdAt: Date,\n  hidden: { type: Boolean, default: false }\n}))\n\n// returns mongoose Query, so you can chain it with other conditions\nconst posts = await Post.accessibleBy(ability).where({ hidden: false });\n\n// you can also call it on existing query to enforce permissions\nconst hiddenPosts = await Post.find({ hidden: true }).accessibleBy(ability);\n\n// you can even pass the action as a 2nd parameter. By default action is \"read\"\nconst updatablePosts = await Post.accessibleBy(ability, 'update');\n```\n\n----------------------------------------\n\nTITLE: Updating PureAbility Rules\nDESCRIPTION: Demonstrates how to update permissions using the update method\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PureAbility } from '@casl/ability';\n\nconst ability = new PureAbility([{ action: 'manage', subject: 'all' }]);\nability.update([]); // took back all permissions\n```\n\n----------------------------------------\n\nTITLE: Using CASL Subject Helper\nDESCRIPTION: Shows how to use the subject helper function to explicitly set subject types on plain objects.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { subject } from '@casl/ability';\nimport ability from './defineAbility';\n\nconst article = {};\nability.can('read', subject('Article', article)); // true\n```\n\n----------------------------------------\n\nTITLE: Using Subjects TypeScript Helper\nDESCRIPTION: Example of using the Subjects helper type to create a union of all possible subjects from a provided object, facilitating type-safe rule definitions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-prisma/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { User } from '@prisma/client';\nimport { Subjects } from '@casl/prisma';\n\ntype AppSubjects = Subjects<{\n  User: User\n}>; // 'User' | Model<User, 'User'>\n```\n\n----------------------------------------\n\nTITLE: PureAbility Constructor Usage\nDESCRIPTION: Shows how to instantiate PureAbility with specific action and subject type constraints\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ability = new PureAbility<['read' | 'update', 'Article']>([\n  { action: 'read', subject: 'Article' },\n  { action: 'update', subject: 'Article' },\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for Users and Roles in Knex.js\nDESCRIPTION: A Knex.js migration script that creates the 'users' and 'roles' tables with appropriate fields and foreign key relationships. The users table includes id, email, password, and roleId fields, while the roles table contains id and name.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-static-permissions/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.up = function(knex) {\n  return knex.schema\n    .createTable('users', (table) => {\n      table.increments('id');\n      table.string('email', 255).notNullable();\n      table.string('password', 50).notNullable();\n      table.integer('roleId').unsigned().notNullable();\n\n      table.foreign('roleId').references('id').inTable('roles');\n    })\n    .createTable('roles', (table) => {\n      table.increments('id');\n      table.string('name', 255).notNullable();\n    });\n};\n\nexports.down = function(knex) {\n  return knex.schema\n      .dropTable('users')\n      .dropTable('roles');\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CASL Ability Update in Vue.js Login Component\nDESCRIPTION: This snippet demonstrates a Vue.js component that handles user login and updates CASL Ability permissions based on the user's role. It includes a login form, API call, and Ability update logic.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <form @submit.prevent=\"login\">\n    <input type=\"email\" v-model=\"email\" />\n    <input type=\"password\" v-model=\"password\" />\n    <button type=\"submit\">Login</button>\n  </form>\n</template>\n\n<script>\nimport { AbilityBuilder, Ability } from '@casl/ability';\nimport { ABILITY_TOKEN } from '@casl/vue';\n\nexport default {\n  name: 'LoginForm',\n  inject: {\n    $ability: { from: ABILITY_TOKEN }\n  },\n  data: () => ({\n    email: '',\n    password: ''\n  }),\n  methods: {\n    login() {\n      const { email, password } = this;\n      const params = { method: 'POST', body: JSON.stringify({ email, password }) };\n\n      return fetch('path/to/api/login', params)\n        .then(response => response.json())\n        .then(({ user }) => this.updateAbility(user));\n    },\n    updateAbility(user) {\n      const { can, rules } = new AbilityBuilder(Ability);\n\n      if (user.role === 'admin') {\n        can('manage', 'all');\n      } else {\n        can('read', 'all');\n      }\n\n      this.$ability.update(rules);\n    }\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling API Responses with Subject Helper\nDESCRIPTION: Example of using subject helper with API responses to set types on DTOs.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { subject } from '@casl/ability';\n\nexport async function getArticles() {\n  const response = await fetch('/api/articles');\n  const body = await response.json();\n\n  return body.articles.map(article => subject('Article', article));\n}\n```\n\n----------------------------------------\n\nTITLE: Using relevantRuleFor Method for Debugging CASL Permissions in JavaScript\nDESCRIPTION: Demonstrates how to use the relevantRuleFor method to determine which rule allows or forbids an action on a subject, returning the matching rule or null if no rule is found.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article');\n});\n\nconst rule = ability.relevantRuleFor('read', 'Article'); // instance of internal `Rule` class\n```\n\n----------------------------------------\n\nTITLE: Defining CASL Ability Rules\nDESCRIPTION: Example demonstrating how to define CASL ability rules that work with Mongoose models.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/package/casl-mongoose/en.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can, cannot) => {\n  can('read', 'Post');\n  cannot('read', 'Post', { private: true });\n});\n```\n\n----------------------------------------\n\nTITLE: User Model Interface Definition\nDESCRIPTION: TypeScript interface defining the User model structure with CASL ability integration.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-persisted-permissions/en.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RawRuleOf } from '@casl/ability';\nimport { AppAbility } from '../services/appAbility';\n\nexport interface User {\n  id: number\n  email: string\n  role: string\n  permissions: RawRuleOf<AppAbility>[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Rule Shape in TypeScript\nDESCRIPTION: This TypeScript interface defines the shape of a raw rule object used in CASL, showing the structure and types of fields in a rule definition.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-rules/en.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RawRule {\n  action: string | string[]\n  subject?: string | string[]\n  /** an array of fields to which user has (or not) access */\n  fields?: string[]\n  /** an object of conditions which restricts the rule scope */\n  conditions?: any\n  /** indicates whether rule allows or forbids something */\n  inverted?: boolean\n  /** message which explains why rule is forbidden */\n  reason?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Can to Ability Instance\nDESCRIPTION: Methods to bind the Can component to a specific Ability instance for different React versions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createCanBoundTo } from '@casl/react';\nimport ability from './ability';\n\nexport const Can = createCanBoundTo(ability);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContext } from 'react';\nimport { createContextualCan } from '@casl/react';\n\nexport const AbilityContext = createContext();\nexport const Can = createContextualCan(AbilityContext.Consumer);\n```\n\n----------------------------------------\n\nTITLE: Installing CASL Vue Dependencies\nDESCRIPTION: Commands for installing CASL Vue dependencies using npm, yarn, or pnpm package managers. Separate commands are provided for Vue 2.x and Vue 3.x versions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @casl/vue@1.x @casl/ability\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @casl/vue@1.x @casl/ability\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @casl/vue@1.x @casl/ability\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @casl/vue @casl/ability\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @casl/vue @casl/ability\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @casl/vue @casl/ability\n```\n\n----------------------------------------\n\nTITLE: Debugging Complex Rules with relevantRuleFor in CASL\nDESCRIPTION: Shows how to use relevantRuleFor to inspect rule conditions that caused a permission check to succeed or fail, particularly useful with combinations of direct and inverted rules.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { user, ability, article } from './defineAbility';\n\nconst rule = ability.relevantRuleFor('read', article({ authorId: user.id }));\nconsole.log(rule.conditions); // { authorId: 1 }\n\nconst forbiddenRule = ability.relevantRuleFor('read', article({ private: true }));\nconsole.log(forbiddenRule.conditions); // { private: true }\n\nconst anotherRule = ability.relevantRuleFor('read', article({ authorId: 2 }));\nconsole.log(anotherRule); // null, no matching rule\n```\n\n----------------------------------------\n\nTITLE: Using PrismaQuery TypeScript Helper\nDESCRIPTION: Example of using the PrismaQuery generic type to provide type-safe Prisma.ModelWhereInput for a specific model, ensuring type safety when defining conditions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-prisma/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { User } from '@prisma/client';\nimport { Model, PrismaQuery } from '@casl/prisma';\n\n// almost the same as Prisma.UserWhereInput except that it's a higher order type\ntype UserWhereInput = PrismaQuery<Model<User, 'User'>>;\n```\n\n----------------------------------------\n\nTITLE: Using CASL with Vue Composition API\nDESCRIPTION: Vue component utilizing the Composition API to access CASL's ability checking functionality through the useAbility hook.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div v-if=\"can('create', 'Post')\">\n      <a @click=\"createPost\">Add Post</a>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useAbility } from '@casl/vue';\n\nexport default {\n  setup() {\n    // some code\n    const { can } = useAbility();\n\n    return {\n      // other props\n      can\n    };\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Service Functions with TypeScript and Knex\nDESCRIPTION: Defines core user service functions for finding users by email and updating user details. Uses Knex.js for database operations and includes TypeScript type definitions for user changes.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-static-permissions/en.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from './db';\nimport { User } from './models/User';\n\nexport async function findUserByEmail(email: string) {\n  const user = await db<User>('users')\n    .select('users.id', 'users.email', { role: 'roles.name' })\n    .innerJoin('roles', 'roles.id', 'users.roleId')\n    .where('email', email)\n    .first();\n\n  return user;\n}\n\nexport type UserChanges = Partial<Exclude<User, 'role' | 'id'>>;\nexport async function updateUserById(id: number, changes: UserChanges) {\n  await db<User>(users)\n    .update(changes)\n    .where('id', id);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Matching for Field Names in CASL\nDESCRIPTION: Demonstrates how to use wildcard patterns to match multiple field names with similar prefixes. This is useful when dealing with fields that follow a naming convention.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'User', ['street*']);\n});\n\nability.can('read', 'User', 'street'); // true\nability.can('read', 'User', 'street1'); // true\nability.can('read', 'User', 'street2'); // true\n```\n\n----------------------------------------\n\nTITLE: Using accessibleFieldsBy Helper in CASL and Mongoose\nDESCRIPTION: Demonstrates how to use the accessibleFieldsBy helper to get accessible fields for a specific subject type or subject instance. This helper allows you to retrieve only the fields a user has permission to access based on their ability.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accessibleFieldsBy } from '@casl/mongoose';\nimport { Post } from './models';\n\naccessibleFieldsBy(ability).ofType('Post') // returns accessible fields for Post model\naccessibleFieldsBy(ability).ofType(Post) // also possible to pass class if classes are used for rule definition\naccessibleFieldsBy(ability).of(new Post()) // returns accessible fields for Post model\n```\n\n----------------------------------------\n\nTITLE: Combining CASL Permissions with Business Logic\nDESCRIPTION: Example showing how to combine permissions from CASL with additional business logic conditions when querying a database using Prisma's AND operator.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-prisma/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst accessiblePosts = await prisma.post.findMany({\n  where: {\n    AND: [\n      accessibleBy(ability).Post,\n      { /* business related conditions */ }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation with Classes\nDESCRIPTION: Shows how to implement class-based subject type detection with TypeScript support.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility, MongoAbility, ExtractSubjectType } from '@casl/ability';\n\nclass Article {}\n\ntype Actions = 'read' | 'update';\ntype Subjects = Article | typeof Article;\ntype AppAbility = MongoAbility<[Actions, Subjects]>;\n\nconst { can, build } = new AbilityBuilder<AppAbility>(createMongoAbility);\n\ncan('read', Article);\n\nconst ability = build({\n  detectSubjectType: object => object.constructor as ExtractSubjectType<Subjects>\n});\n\nability.can('read', new Article()); // true\nability.can('read', Article); // true\n```\n\n----------------------------------------\n\nTITLE: Providing Custom CASL Ability Instance\nDESCRIPTION: Vue component demonstrating how to provide a custom Ability instance for a sub-tree of components using the provideAbility hook.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <!-- a template -->\n</template>\n\n<script>\nimport { provideAbility } from '@casl/vue';\nimport { defineAbility } from '@casl/ability';\n\nexport default {\n  setup() {\n    const myCustomAbility = defineAbility((can) => {\n      // ...\n    });\n\n    provideAbility(myCustomAbility)\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using AbilityBuilder in CASL v2\nDESCRIPTION: Example showing how to define abilities using the AbilityBuilder pattern after CASL was split into scoped packages. Demonstrates migration from the global 'casl' package to '@casl/ability'.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AbilityBuilder } from '@casl/ability'\n\nconst ability = AbilityBuilder.define((can, cannot) => {\n  can('read', 'all')\n  cannot('read', 'Post')\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Both CASL Mongoose Plugins with TypeScript\nDESCRIPTION: Demonstrates how to use both accessibleFieldsPlugin and accessibleRecordsPlugin together with TypeScript. This allows for comprehensive access control at both the query and field levels.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  accessibleFieldsPlugin,\n  accessibleRecordsPlugin,\n  AccessibleModel,\n  AccessibleFieldsDocument\n} from '@casl/mongoose';\nimport * as mongoose from 'mongoose';\n\nexport interface Post extends AccessibleFieldsDocument {\n  // the same Post definition from previous example\n}\n\nconst PostSchema = new mongoose.Schema<Post>({\n  // the same Post schema definition from previous example\n});\nPostSchema.plugin(accessibleFieldsPlugin);\nPostSchema.plugin(accessibleRecordsPlugin);\n\nexport const Post = mongoose.model<Post, AccessibleModel<Post>>('Post', PostSchema);\n```\n\n----------------------------------------\n\nTITLE: Creating CASL Abilities from JWT Token in Express Middleware\nDESCRIPTION: Express middleware that extracts ability rules from JWT tokens and creates ability instances. This complements the JWT embedding approach for stateless applications.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/cache-rules/en.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility } from '@casl/ability';\nimport jwt from 'jsonwebtoken';\nimport { defineRulesFor } from './defineAbility';\n\nexport async function provideAbility(req, res, next) {\n  try {\n    const token = req.headers.authorization;\n    const { rules } = jwt.verify(token, req.app.get('jwtSecret'));\n\n    req.ability = createMongoAbility(rules);\n    next();\n  } catch (error) {\n    next(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching CASL Ability Rules in Session Storage\nDESCRIPTION: Express middleware that stores ability rules in the user's session and reconstructs ability instances per request. This approach is useful when LRU cache doesn't meet requirements and session storage is already implemented.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/cache-rules/en.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility } from '@casl/ability';\nimport { defineRulesFor } from './defineAbility';\n\nexport async function provideAbility(req, res, next) {\n  let rules = req.session.abilityRules;\n\n  if (!req.session.abilityRules) {\n    rules = await defineRulesFor(req.user);\n    req.session.abilityRules = rules\n  }\n\n  req.ability = createMongoAbility(rules);\n  next();\n}\n```\n\n----------------------------------------\n\nTITLE: Production-Safe Class Type Detection\nDESCRIPTION: Demonstrates how to make type detection work in production with minification by using static modelName property.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ability from './defineAbility';\n\nclass Article {\n  static get modelName() {\n    return 'Article'\n  }\n}\n\nconst article = new Article();\nability.can('read', article); // true\n```\n\n----------------------------------------\n\nTITLE: Using AbilityServiceSignal with Signals\nDESCRIPTION: Implementation showing how to use CASL with Angular Signals for reactive permission checking\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityServiceSignal } from '@casl/angular';\nimport { AppAbility } from './AppAbility';\n\n@Component({\n  selector: 'my-home',\n  template: `\n      <h1>Home Page</h1>\n      <button *ngIf=\"can('create', 'Post')\">Create Post</button>\n  `\n})\nexport class HomeComponent {\n  private readonly abilityService = inject<AbilityServiceSignal<AppAbility>>(AbilityServiceSignal);\n  protected readonly can = this.abilityService.can;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating CRUD Alias Usage in CASL\nDESCRIPTION: Shows how to migrate from the built-in 'crud' alias that was previously included by default to explicitly defining it using the createAliasResolver function in CASL.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nimport { AbilityBuilder } from '@casl/ability';\n\nconst ability = AbilityBuilder.define((can) => {\n  can(\"crud\", \"Post\");\n});\n\nability.can(\"crud\", \"Post\"); // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After:\nimport { defineAbility, createAliasResolver } from '@casl/ability';\n\nconst resolveAction = createAliasResolver({\n  crud: ['create', 'read', 'update', 'delete']\n});\nconst ability = defineAbility({ resolveAction }, (can) => {\n  can(\"crud\", \"Post\");\n});\n\nability.can(\"crud\", \"Post\"); // true\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Action Alias in CASL\nDESCRIPTION: Demonstrates how to create a 'modify' alias that combines 'update' and 'delete' actions using createAliasResolver.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-aliases/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility, createAliasResolver } from '@casl/ability'\n\nconst resolveAction = createAliasResolver({\n  modify: ['update', 'delete']\n});\nconst ability = defineAbility((can) => {\n  can('modify', 'Post');\n}, { resolveAction });\n\nability.can('modify', 'Post'); // true\nability.can('update', 'Post'); // true\nability.can('delete', 'Post'); // true\n```\n\n----------------------------------------\n\nTITLE: Defining Mongoose Schema with TypeScript for CASL Integration\nDESCRIPTION: Demonstrates how to create a Mongoose schema and model with TypeScript interfaces for CASL integration. This example defines a Post entity with title, content, and published fields.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport mongoose from 'mongoose';\n\nexport interface Post extends mongoose.Document {\n  title: string\n  content: string\n  published: boolean\n}\n\nconst PostSchema = new mongoose.Schema<Post>({\n  title: String,\n  content: String,\n  published: Boolean\n});\n\nexport const Post = mongoose.model('Post', PostSchema);\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Session with Redis for CASL Ability Caching\nDESCRIPTION: Configuration of Express application with session management using Redis as the storage backend. This setup is required for the session-based ability caching strategy to work properly.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/cache-rules/en.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideAbility } from './provideAbility';\nimport express from 'express';\nimport session from 'express-session';\nimport redis from 'redis';\nimport createRedisStore from 'connect-redis';\n\nconst app = express();\nconst RedisStore = createRedisStore(session);\n\napp.use(session({\n  store: new RedisStore({ client: redis.createClient() }),\n  secret: 'my app session secret',\n}));\n\n// app configuration and other middlewares\n\napp.use(provideAbility);\n```\n\n----------------------------------------\n\nTITLE: Using Can Component in TodoApp\nDESCRIPTION: Example of using the Can component within a React component to conditionally render a button based on user permissions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react'\nimport { Can } from './Can'\n\nexport class TodoApp extends Component {\n  createTodo = () => {\n    // implement logic to show new todo form\n  };\n\n  render() {\n    return (\n      <Can I=\"create\" a=\"Todo\">\n        <button onClick={this.createTodo}>Create Todo</button>\n      </Can>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying defineAbility and AbilityBuilder Usage in TypeScript\nDESCRIPTION: Changes to the defineAbility function and AbilityBuilder constructor. The defineAbility function now accepts options as the second argument, and the AbilityBuilder constructor requires the first argument to be mandatory.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, defineAbility, Ability } from '@casl/ability';\n\nconst resolveAction = (action: string) => {/* custom implementation */ };\nconst ability = defineAbility((can) => can('read', 'Item'), { resolveAction });\nconst builder = new AbilityBuilder(Ability); // first argument is now mandatory!\n```\n\n----------------------------------------\n\nTITLE: Checking Conditional Abilities with CASL in JavaScript\nDESCRIPTION: Demonstrates how to check conditional abilities on specific article instances.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport defineAbilityFor from './defineAbility';\nimport { Article } from './entities';\n\nconst user = { id: 1, isLoggedIn: true };\nconst ownArticle = new Article({ authorId: user.id });\nconst anotherArticle = new Article({ authorId: 2 });\nconst ability = defineAbilityFor(user);\n\nability.can('read', 'Article') // true\nability.can('update', 'Article') // true\nability.can('update', ownArticle) // true\nability.can('update', anotherArticle) // false, we can't update articles which were not written by us\n```\n\n----------------------------------------\n\nTITLE: MongoDB Integration with CASL\nDESCRIPTION: Example of using accessibleBy helper with MongoDB native driver to fetch records based on CASL permissions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { accessibleBy } = require('@casl/mongoose');\nconst { MongoClient } = require('mongodb');\nconst ability = require('./ability');\n\nasync function main() {\n  const db = await MongoClient.connect('mongodb://localhost:27017/blog');\n  let posts;\n\n  try {\n    posts = await db.collection('posts').find(accessibleBy(ability, 'update').ofType('Post'));\n  } finally {\n    db.close();\n  }\n\n  console.log(posts);\n}\n```\n\n----------------------------------------\n\nTITLE: Mongoose Model Plugin Implementation\nDESCRIPTION: Example showing how to add the accessibleRecordsPlugin to a Mongoose model schema.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mongoose = require('mongoose')\nconst { accessibleRecordsPlugin } = require('@casl/mongoose')\n\nconst Post = new mongoose.Schema({\n  title: String,\n  author: String\n})\n\nPost.plugin(accessibleRecordsPlugin)\n\nmodule.exports = mongoose.model('Post', Post)\n```\n\n----------------------------------------\n\nTITLE: Registering Ability Middleware in Express Application\nDESCRIPTION: Sample Express application setup showing how to register the ability provider middleware. This ensures that each incoming request will have an ability instance attached to it for permission checks.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/cache-rules/en.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideAbility } from './provideAbility';\nimport express from 'express';\n\nconst app = express();\n\n// app configuration and other middlewares\n\napp.use(provideAbility);\n\napp.listen(3000, () => console.log('app is listening on http://localhost:3000'));\n```\n\n----------------------------------------\n\nTITLE: Providing Ability Context in React App\nDESCRIPTION: Example of providing the Ability context to the React application using AbilityContext.Provider.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AbilityContext } from './Can'\nimport ability from './ability'\n\nexport default function App({ props }) {\n  return (\n    <AbilityContext.Provider value={ability}>\n      <TodoApp />\n    </AbilityContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Classes as Subject Types\nDESCRIPTION: Example of using classes as subject types with custom type detection.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nclass Article {}\n\nconst ability = defineAbility((can) => {\n  can('read', Article);\n}, {\n  detectSubjectType: object => object.constructor\n});\n\nability.can('read', new Article()); // true\nability.can('read', Article); // true\n```\n\n----------------------------------------\n\nTITLE: CASL Query Integration Example\nDESCRIPTION: Demonstration of using accessibleBy with Mongoose queries and aggregation pipelines.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Post = require('./Post');\nconst ability = require('./ability');\n\nasync function main() {\n  const query = Post.accessibleBy(ability)\n    .where({ status: 'draft' })\n    .getQuery();\n  const result = await Post.aggregate([\n    {\n      $match: {\n        $and: [\n          query,\n          // other aggregate conditions\n        ]\n      }\n    },\n    // other pipelines here\n  ]);\n  console.log(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Field Extractor for CASL Mongoose Integration\nDESCRIPTION: Shows how to create a custom field extractor when the default configuration that gets fields from Model.schema.paths is not desired. This allows for restricting which fields your application works with.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AnyMongoAbility, Generics } from \"@casl/ability\";\nimport { AccessibleFields, GetSubjectTypeAllFieldsExtractor } from \"@casl/ability/extra\";\nimport mongoose from 'mongoose';\n\nconst getSubjectTypeAllFieldsExtractor: GetSubjectTypeAllFieldsExtractor = (type) => {\n  /** custom implementation of returning all fields */\n};\n\nexport function accessibleFieldsBy<T extends AnyMongoAbility>(\n  ability: T,\n  action: Parameters<T['rulesFor']>[0] = 'read'\n): AccessibleFields<Extract<Generics<T>['abilities'], unknown[]>[1]> {\n  return new AccessibleFields(ability, action, getSubjectTypeAllFieldsExtractor);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Checking Permissions with CASL's Default API in TypeScript\nDESCRIPTION: This snippet demonstrates the default way of defining and checking permissions using CASL's 'can' and 'cannot' functions. It highlights the potential confusion caused by using the same function names for different purposes.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/less-confusing-can-api/en.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\n// define abilities\nconst ability = defineAbility((can, cannot) => {\n  can('read', 'Post');\n  cannot('read', 'Post', { private: true });\n});\n\n// check abilities\nability.can('read', 'Post');\n```\n\n----------------------------------------\n\nTITLE: Using CASL in Vue Template\nDESCRIPTION: HTML template demonstrating the use of CASL's $can method to conditionally render UI elements based on user permissions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div v-if=\"$can('create', 'Post')\">\n    <a @click=\"createPost\">Add Post</a>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useAbility Hook\nDESCRIPTION: Example of using the useAbility hook to access the Ability instance and trigger re-renders on updates.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAbility } from '@casl/react';\nimport { AbilityContext } from './Can'\n\nexport default () => {\n  const createTodo = () => { /* logic to show new todo form */ };\n  const ability = useAbility(AbilityContext);\n\n  return (\n    <div>\n      {ability.can('create', 'Todo') &&\n        <button onClick={createTodo}>Create Todo</button>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Builder Methods in CASL\nDESCRIPTION: Shows how to migrate from the deprecated AbilityBuilder.define and AbilityBuilder.extract methods to the new defineAbility function and direct AbilityBuilder instantiation in CASL.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nimport { AbilityBuilder, Ability } from '@casl/ability';\n\nconst ability = AbilityBuilder.define((can, cannot) => {\n  can('read', 'Post');\n  cannot('delete', 'Post', { private: true });\n});\n\n// or\nconst { can, cannot, rules } = AbilityBuilder.extract();\n\ncan('read', 'Post');\ncannot('delete', 'Post', { private: true });\n\nconst ability = new Ability(rules);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After:\nimport { defineAbility, AbilityBuilder, Ability } from '@casl/ability';\n\nconst ability = defineAbility((can, cannot) => {\n  can('read', 'Post');\n  cannot('delete', 'Post', { private: true });\n});\n\n// or\nconst { can, cannot, rules } = new AbilityBuilder(Ability);\n\ncan('read', 'Post');\ncannot('delete', 'Post', { private: true });\n\nconst ability = new Ability(rules);\n```\n\n----------------------------------------\n\nTITLE: One-Way Alias Resolution Example\nDESCRIPTION: Shows how aliases work only in one direction and explains the limitation of explicit permission definition versus alias usage.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/define-aliases/en.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAbility, createAliasResolver } from '@casl/ability'\n\nconst resolveAction = createAliasResolver({\n  modify: ['update', 'delete']\n});\nconst ability = defineAbility((can) => {\n  can(['update', 'delete'], 'Post');\n}, { resolveAction });\n\nability.can('modify', 'Post'); // false <---\nability.can('update', 'Post'); // true\nability.can('delete', 'Post'); // true\n```\n\n----------------------------------------\n\nTITLE: Checking Non-Existent Rules with relevantRuleFor in CASL\nDESCRIPTION: Shows that relevantRuleFor returns null when checking permissions for actions or subjects that don't have any defined rules.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst rule = ability.relevantRuleFor('update', 'Article'); // null\n```\n\n----------------------------------------\n\nTITLE: Custom Subject Type Detection with defineAbility\nDESCRIPTION: Shows how to implement custom type detection using defineAbility function.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article');\n}, {\n  detectSubjectType: object => object.__typename\n});\n\nconst article = { __typename: 'Article' };\nability.can('read', article); // true\n```\n\n----------------------------------------\n\nTITLE: Using AbilityService in Components\nDESCRIPTION: Example of using AbilityService in Angular components for permission checking\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'my-home',\n  template: `\n    <ng-container *ngIf=\"ability$ | async as ability\">\n      <h1>Home Page</h1>\n      <button *ngIf=\"ability.can('create', 'Post')\">Create Post</button>\n    </ng-container>\n  `\n})\nexport class HomeComponent {\n  readonly ability$: Observable<AppAbility>;\n\n  constructor(abilityService: AbilityService<AppAbility>) {\n    this.ability$ = abilityService.ability$;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CASL Ability Hook for Vue\nDESCRIPTION: TypeScript code creating a custom hook for using CASL's AppAbility in Vue components, simplifying imports and type usage.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAbility } from '@casl/vue';\nimport { AppAbility } from '../AppAbility';\n\nexport const useAppAbility = () => useAbility<AppAbility>();\n```\n\n----------------------------------------\n\nTITLE: Extending MongoDB Query Matcher with $nor Operator in CASL\nDESCRIPTION: Demonstrates how to add the $nor operator to CASL's MongoDB query matcher using the buildMongoQueryMatcher helper function. This allows for more complex condition matching in ability definitions.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/customize-ability/en.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createMongoAbility,\n  AbilityBuilder,\n  Abilities,\n  buildMongoQueryMatcher,\n} from '@casl/ability';\nimport { $nor, nor } from '@ucast/mongo2js';\n\nconst conditionsMatcher = buildMongoQueryMatcher({ $nor }, { nor });\n\nexport default function defineAbilityFor(user: any) {\n  const { can, build } = new AbilityBuilder(createMongoAbility);\n\n  can('read', 'Article', {\n    $nor: [{ private: true }, { authorId: user.id }]\n  });\n\n  return build({ conditionsMatcher });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Field Matcher for CASL without Pattern Support\nDESCRIPTION: Shows how to implement a simplified field matcher that only supports exact field matching without patterns. This can help reduce bundle size and enforce simpler matching logic.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/customize-ability/en.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility, AbilityBuilder, FieldMatcher } from '@casl/ability';\n\nexport const fieldMatcher: FieldMatcher = fields => field => fields.includes(field);\n\nexport default function defineAbilityFor(user: any) {\n  const { can, build } = new AbilityBuilder(createMongoAbility);\n\n  can('read', 'Article', ['title', 'content']);\n\n  return build({ fieldMatcher });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Document Accessibility\nDESCRIPTION: Example showing how to check if a specific MongoDB document is accessible to a user based on their permissions.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/package/casl-mongoose/en.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { accessibleRecordsBy } from '@casl/mongoose';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Post', { private: false });\n});\n\nconst post = await Post.findOne();\n\nif (ability.can('read', post)) {\n  console.log('User can read post:', post);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Forbidden Reasons in CASL Rules\nDESCRIPTION: Shows how to access the reason field from a rule obtained with relevantRuleFor to get the user-friendly explanation for why an action is forbidden.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ability, article } from './defineAbilityWithReasons';\n\nconst rule = ability.relevantRuleFor('read', article({ private: true }));\nconsole.log(rule.reason); // Private content is protected by law\n```\n\n----------------------------------------\n\nTITLE: Importing CASL Core Module\nDESCRIPTION: Shows how to import the core module which provides PureAbility and other core classes\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as core from '@casl/ability';\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Ability Class in Aurelia Container\nDESCRIPTION: Shows how to register a custom application-specific Ability class in the Aurelia dependency injection container, making it available throughout the application.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AppAbility } from './services/AppAbility';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin('@casl/aurelia'); // <-- add plugin\n\n  const ability = new AppAbility();\n  aurelia.container.registerInstance(PureAbility, ability);\n  aurelia.container.registerInstance(AppAbility, ability);\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Ability with Default Type Parameters\nDESCRIPTION: Shows the simplified way to initialize a MongoAbility instance using default type parameters, which is equivalent to the explicitly typed version but with less code.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMongoAbility } from '@casl/ability';\n\nconst ability = new createMongoAbility();\n```\n\n----------------------------------------\n\nTITLE: Using 'Can' Component with PassThrough Prop in Vue\nDESCRIPTION: Shows how to use the 'Can' component in a Vue template with the new 'passThrough' prop added in version 0.5.0.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<can I=\"read\" a=\"Post\" field=\"title\" passThrough>...</can>\n```\n\n----------------------------------------\n\nTITLE: Accessing Document Fields Based on Permissions\nDESCRIPTION: Example showing how to use accessibleFieldsBy to get field names accessible by a user based on their abilities.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/package/casl-mongoose/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { accessibleFieldsBy } from '@casl/mongoose';\n\nconst fields = accessibleFieldsBy(ability, 'read', Post.modelName);\nconst post = Post.findById(req.params.id, fields);\n```\n\n----------------------------------------\n\nTITLE: Defining User Model Interface in TypeScript\nDESCRIPTION: A TypeScript interface defining the User data model with properties for id, email, password, and role, which is used in the permission definition functions for type safety.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-static-permissions/en.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface User {\n  id: number\n  email: string\n  password: string\n  role: string\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CASL Extra Module\nDESCRIPTION: Demonstrates importing the extra module containing additional helper functions\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as extra from '@casl/ability/extra';\n```\n\n----------------------------------------\n\nTITLE: Accessing Resources By Ability Example - TypeScript with Mongoose\nDESCRIPTION: Example of transitioning from the old model interface to the new one when using Mongoose with TypeScript. Shows how to extend a model interface with mongoose.Document.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\ninterface Post {\n  title: string;\n  content: string;\n}\n\nconst schema = new mongoose.Schema<Post>({\n  // model definition\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// After\nimport mongoose from \"mongoose\";\n\ninterface Post extends mongoose.Document {\n  title: string;\n  content: string;\n}\n\nconst schema = new mongoose.Schema<Post>({\n  // model definition\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Support\nDESCRIPTION: TypeScript configuration for CASL abilities using AbilityClass pattern\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ability, AbilityClass } from '@casl/ability';\n\ntype Actions = 'create' | 'read' | 'update' | 'delete';\ntype Subjects = 'Article' | 'User';\n\nexport type AppAbility = MongoAbility<[Actions, Subjects]>;\nexport const AppAbility = PureAbility as AbilityClass<AppAbility>;\n```\n\n----------------------------------------\n\nTITLE: Using CASL with Sequelize Query Example\nDESCRIPTION: Example usage of CASL ability rules with Sequelize queries to fetch accessible records based on permissions.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/ability-to-database-query/en.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Sequelize } = require('sequelize');\nconst { defineAbility } = require('@casl/ability');\nconst defineArticle = require('./Article');\n\nconst sequelize = new Sequelize('sqlite::memory');\nconst Article = defineArticle(sequelize);\n\nasync function main() {\n  const ability = defineAbility(can => can('read', Article, { published: true }));\n  const articles = await Article.accessibleBy(ability);\n\n  console.log(articles);\n}\n\nmain().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Main Application Setup\nDESCRIPTION: Main application setup demonstrating user fetching, ability creation, and article management integration.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-persisted-permissions/en.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { findBy } from './services/users';\nimport { createAbility } from './services/appAbility';\nimport * as articles from './services/articles';\n\nexport default async function main() {\n  const [admin, author] = await Promise.all([\n    findBy({ email: 'admin@casl.io' }),\n    findBy({ email: 'member@casl.io' }),\n  ]);\n\n  const adminAbility = createAbility(admin!.permissions);\n  const authorAbility = createAbility(author!.permissions);\n\n  const adminArticle = {\n    title: 'CASl and TypeScript',\n    description: 'Is very powerful',\n    authorId: admin!.id\n  };\n\n  const authorArticle = {\n    title: 'CASl and TypeScript',\n    description: 'Is very powerful',\n    authorId: author!.id\n  };\n\n  await articles.create(adminAbility, adminArticle);\n  console.log('[admin]: created article written by himself')\n\n  try {\n    await articles.create(authorAbility, adminArticle);\n  } catch (error) {\n    console.log('[member]: cannot create an article written by admin');\n  }\n\n  await articles.create(adminAbility, authorArticle);\n  console.log('[admin]: created article written by author');\n\n  await articles.create(authorAbility, authorArticle);\n  console.log('[author]: created article written by himself');\n\n  console.log('\\nAll articles ');\n  const rawArticles = await articles.find();\n\n  rawArticles.forEach((article) => {\n    const prefix = article.authorId === admin!.id ? '[admin]' : '[author]';\n    console.log(`${prefix}: ${article.title}`);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CASL Mongoose Package\nDESCRIPTION: Command to install the CASL Mongoose package using npm or yarn package managers.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/package/casl-mongoose/en.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @casl/mongoose\n# or\nyarn add @casl/mongoose\n```\n\n----------------------------------------\n\nTITLE: Accessing Ability Instance Imperatively\nDESCRIPTION: Examples of accessing the Ability instance imperatively using React's contextType and useContext hook.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Component } from 'react'\nimport { AbilityContext } from './Can'\n\nexport class TodoApp extends Component {\n  createTodo = () => {\n    // logic to show new todo form\n  };\n\n  render() {\n    return (\n      <div>\n        {this.context.can('create', 'Todo') &&\n          <button onClick={this.createTodo}>Create Todo</button>}\n      </div>\n    );\n  }\n}\n\nTodoApp.contextType = AbilityContext;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useContext } from 'react';\nimport { AbilityContext } from './Can'\n\nexport default () => {\n  const createTodo = () => { /* logic to show new todo form */ };\n  const ability = useContext(AbilityContext);\n\n  return (\n    <div>\n      {ability.can('create', 'Todo') &&\n        <button onClick={createTodo}>Create Todo</button>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using AblePipe in Angular Template\nDESCRIPTION: Example of using the new AblePipe in an Angular template to check permissions, replacing the deprecated CanPipe.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div *ngIf=\"'read' | able: 'Post'\">hidden content</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Model with CASL Integration\nDESCRIPTION: Implementation of a Sequelize model (Article) with CASL accessibility method integration. Includes model initialization and column definitions.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/ability-to-database-query/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Model, DataTypes } = require('sequelize');\nconst { accessibleBy } = require('./toSequelizeQuery');\n\nmodule.exports = (sequelize) => {\n  class Article extends Model {\n    static accessibleBy = accessibleBy;\n  }\n\n  Article.init({\n    title: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    published: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: false\n    }\n    // other columns' definitions\n  }, {\n    sequelize,\n    modelName: Article.name,\n  });\n\n  return Article;\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting 'all' Subject in TypeScript\nDESCRIPTION: Example showing how to explicitly add support for the 'all' special subject in TypeScript type definitions when defining CASL abilities.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-prisma/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype AppSubjects = 'all' | Subjects<{\n  User: User\n}>; // 'User' | Model<User, 'User'>\n\ntype AppAbility = PureAbility<[string, AppSubjects], PrismaQuery>;\n```\n\n----------------------------------------\n\nTITLE: Installing CASL Angular Package\nDESCRIPTION: Demonstrates how to install the CASL Angular package using npm or yarn package managers.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/package/casl-angular/en.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @casl/angular\n```\n\nLANGUAGE: bash\nCODE:\n```\n# or\nyarn add @casl/angular\n```\n\n----------------------------------------\n\nTITLE: Creating Access Control Rules with MongoDB Operators\nDESCRIPTION: Example showing how to use MongoDB operators like $in, $all, $gt, etc. in CASL permission rules when working with Mongoose.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/package/casl-mongoose/en.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Post', { status: { $in: ['published', 'review'] } });\n  can('update', 'Post', { authorId: { $eq: user._id } });\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Field and Operator Restrictions\nDESCRIPTION: Demonstrates new TypeScript restrictions for fields and operators in conditions, providing better type safety and intellisense support.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, Ability, AbilityClass } from '@casl/ability';\n\ninterface Person {\n  kind: 'Person'\n  firstName: string\n  lastName: string\n  age: number\n  address: {\n    street: string\n    city: string\n  }\n}\n\ntype AppAbility = Ability<['read', Person | Person['kind']]>;\ncons AppAbility = Ability as AbilityClass<AppAbility>;\ncons { can } = new AbilityBuilder(AppAbility);\n\ncan('read', 'Person', {\n  'address.street': 'Somewhere in the world',\n  fistName: 'John' // unintentional typo\n});\ncan('read', 'Person', ['fistName', 'lastName'], { // no intellisense for fields\n  age: { $gt: 18 }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, Ability, AbilityClass } from '@casl/ability';\n\ninterface Person {\n  kind: 'Person'\n  firstName: string\n  lastName: string\n  age: number\n  address: {\n    street: string\n    city: string\n  }\n}\n\ntype AppAbility = Ability<['read', Person | Person['kind']]>;\ncons AppAbility = Ability as AbilityClass<AppAbility>;\ncons { can } = new AbilityBuilder(AppAbility);\n\ninterface PersonQuery extends Person {\n  'address.street': Person['address']['street']\n  'address.city': Person['address']['city']\n}\n\ncan<PersonQuery>('read', 'Person', {\n  'address.street': 'Somewhere in the world',\n  fistName: 'John' // unintentional typo\n});\ncan<PersonQuery>('read', 'Person', ['firstName', 'lastName'], {\n  age: { $gt: 18 }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining AppAbility Type for CASL in TypeScript\nDESCRIPTION: TypeScript code defining the AppAbility type for use with CASL in a Vue application, specifying allowed actions and subjects.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ability, AbilityClass } from '@casl/ability';\n\ntype Actions = 'create' | 'read' | 'update' | 'delete';\ntype Subjects = 'Article' | 'User'\n\nexport type AppAbility = Ability<[Actions, Subjects]>;\nexport const AppAbility = Ability as AbilityClass<AppAbility>;\n```\n\n----------------------------------------\n\nTITLE: Augmenting Vue Types for CASL in TypeScript\nDESCRIPTION: TypeScript code augmenting Vue types to include CASL's $ability and $can properties for global use in Vue components.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppAbility } from './AppAbility'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $ability: AppAbility;\n    $can(this: this, ...args: Parameters<this['$ability']['can']>): boolean;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CASL React Dependencies\nDESCRIPTION: Command to install the necessary CASL packages for React integration using npm, yarn, or pnpm.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @casl/react @casl/ability\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @casl/react @casl/ability\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @casl/react @casl/ability\n```\n\n----------------------------------------\n\nTITLE: Using AnyAbility in Generic Type Constraints\nDESCRIPTION: Shows how AnyAbility type is used as a generic constraint in the CASL library. This example demonstrates its usage in the AbilityBuilder class definition, allowing for flexible type parameters while ensuring they extend from AnyAbility.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/typescript/en.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AbilityBuilder<T extends AnyAbility = AnyAbility> {\n  // implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Define Ability Options Parameter Changes\nDESCRIPTION: Shows changes in how defineAbility accepts options and the restructuring of its parameters.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, defineAbility, Ability } from '@casl/ability';\n\nconst resolveAction = (action: string) => {/* custom implementation */ };\nconst ability = defineAbility({ resolveAction }, (can) => can('read', 'Item'));\nconst builder = new AbilityBuilder<Ability>(Ability);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, defineAbility, Ability } from '@casl/ability';\n\nconst resolveAction = (action: string) => {/* custom implementation */ };\nconst ability = defineAbility((can) => can('read', 'Item'), { resolveAction });\nconst builder = new AbilityBuilder(Ability); // first argument is now mandatory!\n```\n\n----------------------------------------\n\nTITLE: Updating CASL Ability Rules on User Login in React\nDESCRIPTION: This code snippet shows a React component that handles user login and updates CASL Ability rules based on the user's role. It demonstrates how to use the AbilityContext and update the Ability instance after a successful login.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbilityBuilder, Ability } from '@casl/ability';\nimport React, { useState, useContext } from 'react';\nimport { AbilityContext } from './Can';\n\nfunction updateAbility(ability, user) {\n  const { can, rules } = new AbilityBuilder(Ability);\n\n  if (user.role === 'admin') {\n    can('manage', 'all');\n  } else {\n    can('read', 'all');\n  }\n\n  ability.update(rules);\n}\n\nexport default () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const ability = useContext(AbilityContext);\n  const login = () => {\n    const params = {\n      method: 'POST',\n      body: JSON.stringify({ username, password })\n    };\n    return fetch('path/to/api/login', params)\n      .then(response => response.json())\n      .then(({ user }) => updateAbility(ability, user));\n  };\n\n  return (\n    <form>\n      {/* input fields */}\n      <button onClick={login}>Login</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Login Form Component with Session Service in TypeScript\nDESCRIPTION: Implements a login form component that uses the Session service to handle user authentication. The component collects user credentials and passes them to the Session service.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { autoinject, bindable } from 'aurelia-framework';\nimport { Session } from '../services/Session';\n\n@autoinject\nexport class LoginFormCustomElement {\n  @bindable email: string;\n  @bindable password: string;\n\n  constructor(private session: Session) {}\n\n  login() {\n    const { email, password } = this;\n    return this.session.login({ email, password });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including CASL via CDN for Production\nDESCRIPTION: HTML script tag to include a specific version of CASL from a CDN for production use, avoiding unexpected breakage.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/install/en.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@casl/ability@5.1.0\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module with CASL\nDESCRIPTION: Setup of Angular module with CASL ability provider and pipe configuration\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { AblePipe } from '@casl/angular';\nimport { createMongoAbility, PureAbility } from '@casl/ability';\n\n@NgModule({\n  imports: [\n    // other modules\n    AblePipe\n  ],\n  providers: [\n    { provide: PureAbility, useValue: createMongoAbility() }\n  ]\n  // other properties\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Rule Class to Condition Matchers in CASL\nDESCRIPTION: Demonstrates how to replace the custom Rule class approach with the new conditionsMatcher and fieldMatcher options for customizing rule matching behavior in CASL.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nimport { Ability, Rule } from '@casl/ability';\nimport sift from 'sift';\n\nclass MyCustomRule extends Rule {\n  constructor(...args) {\n    super(...args);\n    this._matches = sift(/* custom sift options */)\n  }\n}\n\nconst ability = new Ability([], { RuleType: MySiftRule })\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After:\nimport {\n  Ability,\n  AbilityBuilder,\n  buildMongoQueryMatcher,\n} from '@casl/ability';\nimport { $nor } from 'sift';\n\nconst conditionsMatcher = buildMongoQueryMatcher({ $nor });\nexport default function defineAbilityFor(user) {\n  const { can, build } = new AbilityBuilder(Ability);\n\n  can('read', 'Article', {\n    $nor: [{ private: true }, { authorId: user.id }]\n  });\n\n  return build({ conditionsMatcher });\n}\n```\n\n----------------------------------------\n\nTITLE: Using mongoQueryMatcher in TypeScript with CASL\nDESCRIPTION: Demonstrates how to use the mongoQueryMatcher function to create a matcher based on MongoDB query language.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mongoQueryMatcher } from '@casl/ability';\n\nconst matchConditions = mongoQueryMatcher({ authorId: 1, private: true });\nconsole.log(matchConditions({ authorId: 2 })); // false\nconsole.log(matchConditions({ authorId: 1, private: true })); // true\n```\n\n----------------------------------------\n\nTITLE: Configuring CASL Aurelia Plugin in Aurelia Application\nDESCRIPTION: Demonstrates how to register the CASL Aurelia plugin in an Aurelia application by importing an ability instance and passing it to the plugin function.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ability from './services/ability';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin('@casl/aurelia', ability); // <-- add plugin\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```\n\n----------------------------------------\n\nTITLE: Including CASL and Dependencies via CDN\nDESCRIPTION: HTML script tags to include CASL and its dependencies from a CDN, ensuring all required libraries are loaded in the correct order.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/install/en.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@ucast/core\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@ucast/mongo\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@ucast/js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@ucast/mongo2js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@casl/ability\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Claim-based Authorization Manually in TypeScript\nDESCRIPTION: A basic manual implementation of claim-based authorization that checks if a user has a specific permission in their permissions array before allowing them to perform an action like publishing an article.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/claim-authorization/en.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ACTIONS = ['review', 'publish', 'read'];\n\nfunction publishArticle(article, user) {\n  if (!user.permissions.includes('publish')) {\n    throw new Error('You cannot publish articles');\n  }\n\n  // logic to publish article\n}\n```\n\n----------------------------------------\n\nTITLE: Using permittedFieldsOf with fieldsFrom option in CASL (Before Change)\nDESCRIPTION: Example showing how permittedFieldsOf was used before the breaking change, where the fieldsFrom option was not mandatory. This approach would return an empty array even when a user can manage entity fields.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\nimport { permittedFieldsOf } from '@casl/ability/extra';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article');\n});\n\nconst fields = permittedFieldsOf(ability, 'read', 'Article'); // []\n```\n\n----------------------------------------\n\nTITLE: Using ForbiddenError in TypeScript with CASL\nDESCRIPTION: Demonstrates how to use the ForbiddenError class to check permissions and throw errors if a user doesn't have the required ability.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ForbiddenError, defineAbility } from '@casl/ability';\n\nconst ability = defineAbility((can) => {\n  can('read', 'User')\n});\n\nForbiddenError.from(ability).throwUnlessCan('read', 'Article');\n// fetch article from database\n```\n\n----------------------------------------\n\nTITLE: Defining Article Entity Class for CASL Permissions\nDESCRIPTION: Creates an Article class that represents the entity to be checked against CASL permissions, with properties for status and creation date.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/conditions-in-depth/en.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport class Article {\n  constructor(status, createdAt) {\n    this.status = status;\n    this.createdAt = createdAt;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Error Messages in CASL v3.4.0\nDESCRIPTION: Shows how to specify custom error messages when using ForbiddenError in CASL, introduced in version 3.4.0.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of using custom error messages added in v3.4.0\nimport { ForbiddenError } from '@casl/ability';\n\n// Use custom error message\nForbiddenError.from(ability).setMessage(message => {\n  return `You are not allowed to ${message.action} ${message.subjectType}`;\n}).throwUnlessCan('delete', article);\n```\n\n----------------------------------------\n\nTITLE: Configuring CASL Angular Module in App Module\nDESCRIPTION: Example of how to configure the CASL Angular module in the main app module after breaking changes in version 4.0.0. It shows how to provide custom Ability instances.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { AbilityModule } from '@casl/angular';\nimport { Ability, PureAbility } from '@casl/ability';\n\n@NgModule({\n  imports: [\n    // other modules\n    AbilityModule\n  ],\n  providers: [\n    { provide: Ability, useValue: new Ability() },\n    { provide: PureAbility, useExisting: Ability }\n  ]\n  // other properties\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Using permittedFieldsOf with mandatory fieldsFrom option in CASL (After Change)\nDESCRIPTION: Example showing how permittedFieldsOf must be used after the breaking change, where the fieldsFrom option is now mandatory. This makes the logic explicit and clear.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\nimport { permittedFieldsOf } from '@casl/ability/extra';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article');\n});\n\nconst ARTICLE_FIELDS = ['id', 'title', 'description'];\nconst fields = permittedFieldsOf(ability, 'read', 'Article', {\n  fieldsFrom: rule => rule.fields || ARTICLE_FIELDS\n}); // ['id', 'title', 'description']\n```\n\n----------------------------------------\n\nTITLE: Using packRules for JWT Token Generation\nDESCRIPTION: Example of packing CASL rules into a compressed format for JWT token storage\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability-extra/en.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { packRules } from '@casl/ability/extra';\nimport jwt from 'jsonwebtoken';\nimport { defineRulesFor } from '../services/appAbility';\n\napp.post('/session', (req, res) => {\n  const token = jwt.sign({\n    id: req.user.id,\n    rules: packRules(defineRulesFor(req.user))\n  }, 'jwt secret', { expiresIn: '1d' });\n\n  res.send({ token });\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing ForbiddenError Message in TypeScript\nDESCRIPTION: Shows how to customize the default error message for ForbiddenError instances using the setDefaultMessage static method.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ForbiddenError } from '@casl/ability';\n\nForbiddenError.setDefaultMessage('Not authorized');\n// or more verbose\nForbiddenError.setDefaultMessage(error => `You are not allowed to ${error.action} on ${error.subjectType}`);\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Type-Safe Ability Injection\nDESCRIPTION: Demonstrates how to inject a typed CASL Ability instance into an Aurelia component, providing type safety for ability checks based on the application's defined abilities.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Ability } from '@casl/ability';\nimport { autoinject } from 'aurelia-framework';\nimport { AppAbilities } from '../services/AppAbility';\n\n@autoinject\nexport class TodoItemCustomElement {\n  constructor(private ability: Ability<AppAbilities>) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CASL Ability Instances Directly in Aurelia Container\nDESCRIPTION: Shows how to register CASL ability instances directly in the Aurelia dependency injection container, which allows for more flexibility in configuration and better tree shaking.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Ability, PureAbility } from '@casl/ability';\nimport ability from './services/ability';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin('@casl/aurelia'); // <-- add plugin\n\n  aurelia.container.registerInstance(PureAbility, ability);\n  aurelia.container.registerInstance(Ability, ability);\n  aurelia.start().then(() => aurelia.setRoot());\n}\n```\n\n----------------------------------------\n\nTITLE: Using fieldPatternMatcher in TypeScript with CASL\nDESCRIPTION: Shows how to use the fieldPatternMatcher function to create a field matcher that supports wildcard patterns.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fieldPatternMatcher } from '@casl/ability';\n\nconst matchField = fieldPatternMatcher(['name', 'email', 'address.**']);\nconsole.log(matchField('name')); // true\nconsole.log(matchField('address.street')); // true\n```\n\n----------------------------------------\n\nTITLE: Using rulesToFields with CASL Ability\nDESCRIPTION: Demonstrates how to extract field values from PureAbility conditions to set default values for a new object\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability-extra/en.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\nimport { rulesToFields } from '@casl/ability/extra';\n\nconst ability = defineAbility((can) => {\n  can('read', 'Article', { authorId: 1 });\n  can('read', 'Article', { public: true });\n  can('read', 'Article', { title: { $regex: /^\\[Draft\\]/i } });\n});\n\nconst defaultValues = rulesToFields(ability, 'read', 'Article');\nconsole.log(defaultValues); // { public: true, authorId: 1 }\n\nconst newArticle = {\n  ...defaultValues,\n  title: '...',\n  description: '...'\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Message for ForbiddenError Instance\nDESCRIPTION: Demonstrates how to set a custom message for a specific ForbiddenError instance using the setMessage method.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/api/casl-ability/en.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ForbiddenError } from '@casl/ability';\nimport ability from './appAbility';\n\nForbiddenError.from(ability)\n  .setMessage('You cannot update posts')\n  .throwUnlessCan('update', 'Post');\n```\n\n----------------------------------------\n\nTITLE: Class vs String Subject Type Handling\nDESCRIPTION: Shows changes in how CASL handles class and string subject types, which are no longer interchangeable.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nclass Post {}\nconst ability = defineAbility((can) => {\n  can('read', Post);\n  can('update', 'Post');\n});\n\nability.can('read', 'Post') // true\nability.can('read', Post) // true\nability.can('update', Post) // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nclass Post {}\nconst ability = defineAbility((can) => {\n  can('read', Post);\n  can('update', 'Post');\n}, {\n  detectSubjectType: object => object.constructor\n});\n\nability.can('read', 'Post') // false, 'Post' and Post are considered different now\nability.can('read', Post) // true\nability.can('update', Post) // false, because `update` is configured for 'Post' string\nability.can('read', new Post()) // true\nability.can('update', new Post()) // false, because `update` is configured for 'Post' string and subject type of this object is `Post` class\n```\n\n----------------------------------------\n\nTITLE: Migrating Rule Syntax from Actions to Action in CASL\nDESCRIPTION: Demonstrates the change from using the plural 'actions' property to the singular 'action' property in CASL rule objects.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nconst rules = [\n  { actions: 'read', subject: 'Post' }\n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After:\nconst rules = [\n  { action: 'read', subject: 'Post' }\n]\n```\n\n----------------------------------------\n\nTITLE: Using AccessibleBy Method with Error Handling - Before and After\nDESCRIPTION: Example showing the breaking change in version 4.0.0 where accessibleBy now throws ForbiddenError instead of returning an empty result when a user doesn't have permissions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Before:\n// ability doesn't allow to read Post\nconst ability = defineAbility(can => can('manage', 'Comment'));\n\ntry {\n  const items = await Post.accessibleBy(ability, 'read');\n  console.log(items); // []\n} catch (error) {\n  console.error(error); // no error thrown\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// After:\n// ability doesn't allow to read Post\nconst ability = defineAbility(can => can('manage', 'Comment'));\n\ntry {\n  const items = await Post.accessibleBy(ability, 'read');\n  console.log(items); // not reached, because query fails with error\n} catch (error) {\n  console.error(error); // ForbiddenError thrown\n}\n```\n\n----------------------------------------\n\nTITLE: Article Model Interface\nDESCRIPTION: TypeScript interface defining the structure of Article entities in the system.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-persisted-permissions/en.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Article {\n  id: number\n  title: string\n  description: string\n  authorId: number\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Alias Usage in CASL from Global to Instance Level\nDESCRIPTION: Shows the change in how action aliases are defined and used in CASL. Previously aliases were defined globally, but now they need to be configured per instance using the createAliasResolver function for better tree-shaking support.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nimport { Ability } from '@casl/ability';\n\nAbility.addAlias('modify', ['create', 'update']);\nconst ability = new Ability([]);\n\nability.can('modify', 'Post');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After:\nimport { Ability, createAliasResolver } from '@casl/ability';\n\nconst resolveAction = createAliasResolver({\n  modify: ['create', 'update']\n});\n\nconst ability = new Ability([], { resolveAction });\n\nability.can('modify', 'Post');\n```\n\n----------------------------------------\n\nTITLE: Using rulesToQuery in CASL v2\nDESCRIPTION: Example showing updated usage of the rulesToQuery helper function after it was moved to a submodule in CASL v2. Demonstrates the new function signature requiring ability instance and explicit action/subject parameters.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { rulesToQuery } from '@casl/ability/extra'\n\nrulesToQuery(ability, 'read', 'Post', rule => ...)\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Type Declaration\nDESCRIPTION: TypeScript declaration file showing how to augment Vue types with CASL ability properties for Vue 3\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppAbility } from './AppAbility'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $ability: AppAbility;\n    $can(this: this, ...args: Parameters<this['$ability']['can']>): boolean;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding Initial Data for Roles and Users\nDESCRIPTION: This seed script populates the database with initial data for roles (admin and member) and users. It defines the permissions for each role using JSON strings.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-persisted-permissions/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.seed = async (knex) => {\n  await Promise.all([\n    knex('users').del(),\n    knex('roles').del()\n  ]);\n\n  await knex('roles').insert([\n    {\n      id: 1,\n      name: 'admin',\n      permissions: JSON.stringify([\n        { action: 'manage', subject: 'all' }\n      ])\n    },\n    {\n      id: 2,\n      name: 'member',\n      permissions: JSON.stringify([\n        { action: 'read', subject: 'Article' },\n        { action: 'manage', subject: 'Article', conditions: { authorId: '${user.id}' } },\n      ])\n    }\n  ]);\n  await knex('users').insert([\n    { id: 1, email: 'admin@casl.io', password: '123456', roleId: 1 },\n    { id: 2, email: 'member@casl.io', password: '123456', roleId: 2 },\n  ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Subject Type Detection Changes\nDESCRIPTION: Demonstrates changes in subject type detection where detectSubjectType is now only responsible for detecting subject type from objects.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Ability } from '@casl/ability';\n\nconst ability = new Ability([], {\n  detectSubjectType(object) {\n    if (object && typeof object === 'object') {\n      return object.__typename;\n    }\n\n    return detectSubjectType(object);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Ability } from '@casl/ability';\n\nconst ability = new Ability([], {\n  detectSubjectType: object => object.__typename\n});\n```\n\n----------------------------------------\n\nTITLE: Member Role Permission Update Script\nDESCRIPTION: Script to update member role permissions in the database using Knex.js.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-persisted-permissions/en.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from './db';\n\ndb('roles')\n  .update({\n    permissions: JSON.stringify([\n      { action: ['read', 'create'], subject: 'Article' },\n      { action: ['update', 'delete'], subject: 'Article', conditions: { authorId: '${user.id}'} },\n    ])\n  })\n  .where('name', 'member')\n  .then(() => {\n    console.log('Permissions of \"member\" role has been updated');\n    return db.destroy();\n  })\n  .catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Updating Vue Component Template for CASL Integration\nDESCRIPTION: Demonstrates the change in syntax for using the 'Can' component in Vue templates. The 'of' alias is removed and 'field' is extracted to a separate prop.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<can I=\"read title\" of=\"Post\">...</can>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<can I=\"read\" a=\"Post\" field=\"title\">...</can>\n```\n\n----------------------------------------\n\nTITLE: React Can Component Features\nDESCRIPTION: New features added to the Can component including 'an' alias, passThrough option, and support for multiple children. Also includes TypeScript declaration updates and prop validation improvements.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* **react:can:** adds `an` alias to `on` prop ([748ea64])\n* **react:can:** adds `passThrough` option ([045318c])\n* **react:can:** adds support for multiple <Can> children ([c022b32])\n* **react:can:** updates typescript declarations ([70953ed])\n* **react:can:** updates typescript declarations ([213dcde])\n```\n\n----------------------------------------\n\nTITLE: Defining Article Entity Class for CASL Permissions\nDESCRIPTION: Creates an Article class to demonstrate how permissions work when checking against specific instances versus subject types. This class represents the entity that permissions will be checked against.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/restricting-fields/en.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport class Article {\n  constructor(title, description, authorId) {\n    this.title = title;\n    this.description = description;\n    this.authorId = authorId;\n    this.published = false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Methods Subject Type Changes\nDESCRIPTION: Illustrates changes in how rule-related methods now only accept subject type instead of supporting both subject type and instances.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Ability } from '@casl/ability';\n\nconst ability = new Ability([\n  { action: 'read', subject: 'Post' }\n]);\n\nclass Post {}\n\nconsole.log(ability.rulesFor('read', new Post())); // [Rule]\nconsole.log(ability.rulesFor('read', 'Post')); // [Rule]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Ability } from '@casl/ability';\n\nconst ability = new Ability([\n  { action: 'read', subject: 'Post' }\n]);\n\nclass Post {}\n\nconsole.log(ability.rulesFor('read', new Post())); // throws exception\nconsole.log(ability.rulesFor('read', 'Post')); // [Rule]\n```\n\n----------------------------------------\n\nTITLE: Installing @casl/angular Package\nDESCRIPTION: Example of installing the @casl/angular package using npm. This is inferred from the package name mentioned throughout the changelog.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @casl/angular\n```\n\n----------------------------------------\n\nTITLE: Installing CASL via NPM, Yarn, or PNPM\nDESCRIPTION: Commands to install the latest stable version of CASL's core package using different package managers.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/install/en.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @casl/ability\n# or\nyarn add @casl/ability\n# or\npnpm add @casl/ability\n```\n\n----------------------------------------\n\nTITLE: React Performance Optimization\nDESCRIPTION: Performance improvement that moves prop type checks under conditional logic to allow removal in production builds.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* **react:can:** moves prop type checks undef `if`, so they can be removed for production builds ([4bebf0b])\n```\n\n----------------------------------------\n\nTITLE: Aliasing Subject Helper for Readability\nDESCRIPTION: Shows how to alias the subject helper for more readable code.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { subject as an } from '@casl/ability';\n\nexport async function getArticles() {\n  const response = await fetch('/api/articles');\n  const body = await response.json();\n\n  return body.articles.map(object => an('Article', object));\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Plugin Registration with Ability\nDESCRIPTION: Example showing how to register the CASL plugin with Vue 3 application and inject the ability instance\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-vue/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { abilitiesPlugin, ABILITY_TOKEN } from '@casl/vue';\nimport { createApp } from 'vue';\nimport { ability } from './services/AppAbility';\n\nconst App = {\n  name: 'App',\n  inject: {\n    $ability: { from: ABILITY_TOKEN }\n  }\n};\n\nconst root = createApp(App)\n  .use(abilitiesPlugin, ability, {\n    useGlobalProperties: true\n  })\n  .mount('#app');\n\nconsole.log(root.$ability)\n```\n\n----------------------------------------\n\nTITLE: Including Context API Patch in tsconfig.json\nDESCRIPTION: Configuration to include the Context API patch file in the TypeScript compiler options.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  // other configuration options\n  \"include\": [\n    \"src/**/*\",\n    \"./contextAPIPatch.d.ts\" // <-- add this line\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Login Form Component\nDESCRIPTION: Angular component implementation for login functionality using the Session service\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { Session } from '../services/Session';\n\n@Component({\n  selector: 'login-form',\n  template: `\n    <form (ngSubmit)=\"login()\">\n      <input type=\"email\" [(ngModel)]=\"email\" />\n      <input type=\"password\" [(ngModel)]=\"password\" />\n      <button type=\"submit\">Login</button>\n    </form>\n  `\n})\nexport class LoginForm {\n  email: string;\n  password: string;\n\n  constructor(private session: Session) {}\n\n  login() {\n    const { email, password } = this;\n    return this.session.login({ email, password });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Integration with CASL v2\nDESCRIPTION: Example showing how to use CASL with MongoDB after integration was moved to separate @casl/mongoose package. Demonstrates importing the MongoDB specific helper functions.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { toMongoQuery, accessibleRecordsPlugin } from '@casl/mongoose'\n```\n\n----------------------------------------\n\nTITLE: Using CASL Able Value Converter in Aurelia Templates\nDESCRIPTION: Demonstrates how to use the AbleValueConverter in Aurelia templates to conditionally show UI elements based on user permissions, specifically checking if a user can create a Post.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div if.bind=\"'create' | able: 'Post'\">\n  <a click.trigger=\"createPost()\">Add Post</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema for Users, Roles, and Articles using Knex.js\nDESCRIPTION: This migration script creates tables for users, roles, and articles using Knex.js. It defines the structure for storing user information, role details including permissions, and article data.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-persisted-permissions/en.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.up = function(knex) {\n  return knex.schema\n    .createTable('users', (table) => {\n      table.increments('id');\n      table.string('email', 255).notNullable();\n      table.string('password', 50).notNullable();\n      table.integer('roleId').unsigned().notNullable();\n\n      table.foreign('roleId').references('id').inTable('roles');\n    })\n    .createTable('articles', (table) => {\n      table.increments('id');\n      table.string('title', 255).notNullable();\n      table.string('description').notNullable();\n      table.integer('authorId').unsigned().notNullable();\n\n      table.foreign('authorId').references('id').inTable('users');\n    })\n    .createTable('roles', (table) => {\n      table.increments('id');\n      table.string('name', 255).notNullable();\n      table.json('permissions').notNullable();\n    });\n};\n\nexports.down = function(knex) {\n  return knex.schema\n      .dropTable('users')\n      .dropTable('articles')\n      .dropTable('roles');\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Context API Patch\nDESCRIPTION: TypeScript declaration file to patch React's Context API for versions below 16.4.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'react' {\n  export type Consumer<T> = any;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CASL Value Converter with Button Disabled Attribute\nDESCRIPTION: Shows how to use the CASL value converter to dynamically enable or disable a button based on user permissions, demonstrating an advantage of using value converters over custom attributes.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<button disabled.bind=\"!('create' | able: 'Post')\">Add Post</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Prisma Client Output Path\nDESCRIPTION: Example Prisma schema configuration showing how to set a custom output path for the generated Prisma client, which requires additional setup for CASL integration.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-prisma/README.md#2025-04-17_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/client\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CASL Aurelia Package with Package Managers\nDESCRIPTION: Shows how to install the @casl/aurelia package and its dependency @casl/ability using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @casl/aurelia @casl/ability\n# or\nyarn add @casl/aurelia @casl/ability\n# or\npnpm add @casl/aurelia @casl/ability\n```\n\n----------------------------------------\n\nTITLE: Alternative Rule Definition Approach in CASL\nDESCRIPTION: Shows an alternative way of defining the same permissions using a different rule structure, highlighting why testing implementation details is problematic.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbilityBuilder, createMongoAbility } from '@casl/ability';\n\nexport function defineRulesFor(user) {\n  const { can, cannot, rules } = new AbilityBuilder(createMongoAbility);\n\n  if (user.isAdmin) {\n    can('manage', 'all');\n  } else {\n    can('read', 'Article', { private: false });\n  }\n\n  return rules;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CASL v5 Version Configuration in JSON\nDESCRIPTION: JSON configuration object specifying version 5 of the CASL library.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/public/versions.txt#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"number\": \"v5\" }\n```\n\n----------------------------------------\n\nTITLE: Updating React and Removing Old Support in TypeScript\nDESCRIPTION: Updates React to version 18 and removes support for older React versions and @casl/ability. This is a breaking change that affects the children prop of the <Can> component.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Before\nchildren: React.ReactNode;\n\n// After\nchildren: React.ReactElement;\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access for CASL Project in robots.txt\nDESCRIPTION: This robots.txt file specifies instructions for web crawlers accessing the CASL project website. It allows all user agents, sets the host, and provides sitemap locations for two different versions of the documentation.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/public/web-root/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nHost: casl.js.org\nSitemap: https://casl.js.org/v4/sitemap.xml\nSitemap: https://casl.js.org/v5/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Installing CASL Prisma Package\nDESCRIPTION: Commands to install the @casl/prisma package along with its dependency @casl/ability using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-prisma/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @casl/prisma @casl/ability\n# or\nyarn add @casl/prisma @casl/ability\n# or\npnpm add @casl/prisma @casl/ability\n```\n\n----------------------------------------\n\nTITLE: Setting up CASL project environment using pnpm\nDESCRIPTION: This bash script demonstrates how to clone the CASL repository, install pnpm, and set up the project for development. It includes steps for installing dependencies and building all packages.\nSOURCE: https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# replace ${YOUR_GITHUB_USER_NAME} with your github username\ngit clone git@github.com:${YOUR_GITHUB_USER_NAME}/casl.git\n# install pnpm, other ways at https://pnpm.js.org/en/installation\nnpx pnpm add -g pnpm\ncd casl\npnpm i -r\npnpm run -r build # build all packages so local deps can be linked\n```\n\n----------------------------------------\n\nTITLE: Defining CASL v6 Version Configuration in JSON\nDESCRIPTION: JSON configuration object specifying version 6 of the CASL library.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/public/versions.txt#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"number\": \"v6\" }\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Can Value Converter in Aurelia Templates\nDESCRIPTION: Shows how to use the deprecated CanValueConverter in Aurelia templates for permission checking. This approach is less readable and has weaker typings than AbleValueConverter.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-aurelia/README.md#2025-04-17_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div *ngIf=\"'Post' | can: 'create'\">\n  <a click.trigger=\"createPost()\">Add Post</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing CASL Authorization Implementation\nDESCRIPTION: Demonstrates testing the updateUserDetails function with different scenarios including self-update and attempting to update other users' details. Shows error handling for forbidden actions.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-static-permissions/en.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ForbiddenError } from '@casl/ability';\nimport { updateUserDetails } from './updateUserDetails';\n\nupdateUserDetails('member@casl.io', 'member@casl.io', { password: '654321' })\n  .then(() => console.log('[member]: own details were successfully updated'))\n  .catch((error) => {\n    if (error instanceof ForbiddenError) {\n      console.log('[member]: cannot update own details');\n    } else {\n      console.error(error);\n    }\n  });\n\nupdateUserDetails('member@casl.io', 'admin@casl.io', { password: '654321' })\n  .then(() => console.log('[member]: admin details were successfully updated'))\n  .catch((error) => {\n    if (error instanceof ForbiddenError) {\n      console.log('[member]: admin details are NOT ALLOWED to be updated');\n    } else {\n      console.error(error);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding Repository Directory to package.json\nDESCRIPTION: Adds the repository directory field to package.json for all @casl/* packages to improve source code discoverability.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/stalniy/casl.git\",\n    \"directory\": \"packages/casl-react\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing CASL changes to GitHub\nDESCRIPTION: This bash command demonstrates how to push a new branch with changes to the CASL project to GitHub.\nSOURCE: https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Removing Context API Patch File in TypeScript\nDESCRIPTION: Removes the contextApiPatch.d.ts file from @casl/react to prevent confusion in tools that might include this file in compilation targets. This affects apps using React versions earlier than 16.4.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Removed file\ncontextApiPatch.d.ts\n```\n\n----------------------------------------\n\nTITLE: Installing CASL Angular Dependencies\nDESCRIPTION: Commands for installing required CASL packages using different package managers\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @casl/angular @casl/ability\n# or\nyarn add @casl/angular @casl/ability\n# or\npnpm add @casl/angular @casl/ability\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Initial Users and Roles in Knex.js\nDESCRIPTION: A Knex.js seed script that populates the database with initial role and user data. It creates 'admin' and 'member' roles, and adds one user for each role with corresponding credentials.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/cookbook/roles-with-static-permissions/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexports.seed = async (knex) => {\n  await Promise.all([\n    knex('users').del(),\n    knex('roles').del()\n  ]);\n  await knex('roles').insert([\n    { id: 1, name: 'admin' },\n    { id: 2, name: 'member' }\n  ]);\n  await knex('users').insert([\n    { id: 1, email: 'admin@casl.io', password: '123456', roleId: 1 },\n    { id: 2, email: 'member@casl.io', password: '123456', roleId: 2 },\n  ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Testing CASL Rule Implementation Details (Anti-Pattern)\nDESCRIPTION: Shows the incorrect approach to testing CASL permissions by focusing on implementation details (exact rule structure) rather than the actual behavior, which makes tests brittle when rules are refactored.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/advanced/debugging-testing/en.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineRulesFor } from './defineAbility';\n\ndescribe('Permissions', () => {\n  let user;\n\n  describe('when user is an admin', () => {\n    beforeEach(() => {\n      user = { isAdmin: true };\n    });\n\n    it('can do anything', () => {\n      expect(defineRulesFor(user)).to.deep.equal([\n        { action: 'manage', subject: 'all' }\n      ]);\n    });\n  });\n\n  describe('when user is a regular user', () => {\n    beforeEach(() => {\n      user = { isRegular: true };\n    });\n\n    it('can read non private article', () => {\n      expect(defineRulesFor(user)).to.deep.contain([\n        { action: 'read', subject: 'Article' },\n        { action: 'read', subject: 'Article', conditions: { private: true }, inverted: true }\n      ]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CASL Angular Module\nDESCRIPTION: Example of importing the CASL Angular module in a TypeScript file. This is inferred from the context of the Angular integration mentioned in the changelog.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-angular/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { CaslModule } from '@casl/angular';\n```\n\n----------------------------------------\n\nTITLE: Exporting Types for TypeScript ES6 Modules\nDESCRIPTION: Exports types to support TypeScript ES6 modules, addressing an issue related to type exports.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type { SomeType } from './types';\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated React Type in TypeScript\nDESCRIPTION: Replaces the deprecated StatelessComponent<T> type with FunctionComponent<T> to align with current React typings.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-react/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Before\ntype Component = React.StatelessComponent<Props>;\n\n// After\ntype Component = React.FunctionComponent<Props>;\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch for CASL contributions\nDESCRIPTION: This bash snippet shows how to create a new git branch for making changes to the CASL project. It demonstrates forking from the master branch.\nSOURCE: https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-fix-branch master\n```\n\n----------------------------------------\n\nTITLE: Defining CASL v4 Version Configuration in JSON\nDESCRIPTION: JSON configuration object specifying version 4 of the CASL library.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/public/versions.txt#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"number\": \"v4\" }\n```\n\n----------------------------------------\n\nTITLE: Installing CASL Mongoose Dependencies\nDESCRIPTION: Commands for installing CASL Mongoose package using different package managers.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-mongoose/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @casl/mongoose @casl/ability\n# or\nyarn add @casl/mongoose @casl/ability\n# or\npnpm add @casl/mongoose @casl/ability\n```\n\n----------------------------------------\n\nTITLE: Building CASL from Source\nDESCRIPTION: Shell commands to clone the CASL repository, install dependencies, and build the project from source code.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/install/en.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:stalniy/casl.git\ncd casl\npnpm i -r\ncd packages/casl-ability\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Conditional Abilities for Article Sharing in JavaScript\nDESCRIPTION: Shows how to define abilities with multiple conditions, allowing users to read published articles or shared drafts.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/intro/en.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineAbility } from '@casl/ability';\n\nexport default function defineAbilityFor(user) {\n  return defineAbility((can) => {\n    can('read', 'Article', { published: true });\n    can('read', 'Article', { published: false, sharedWith: user.id });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Testing CASL Permissions\nDESCRIPTION: Demonstrates how to test permission rules on a plain object (which fails due to type detection).\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/subject-type-detection/en.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ability from './defineAbility';\n\nconst article = {};\nability.can('read', article);\n```\n\n----------------------------------------\n\nTITLE: Installing CASL Ability package with npm, pnpm, or yarn\nDESCRIPTION: Command line instructions for installing the @casl/ability package using various package managers.\nSOURCE: https://github.com/stalniy/casl/blob/master/packages/casl-ability/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @casl/ability\n# or\npnpm install @casl/ability\n# or\nyarn add @casl/ability\n```\n\n----------------------------------------\n\nTITLE: Including CASL via CDN for Prototyping\nDESCRIPTION: HTML script tag to include the latest version of CASL from a CDN for prototyping or learning purposes.\nSOURCE: https://github.com/stalniy/casl/blob/master/docs-src/src/content/pages/guide/install/en.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@casl/ability\"></script>\n```"
  }
]