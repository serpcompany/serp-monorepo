[
  {
    "owner": "vuejs",
    "repo": "router",
    "content": "TITLE: Creating a Vue Router Instance with Routes\nDESCRIPTION: Example of creating a Vue Router instance using createRouter(). It defines routes mapping URL paths to components and sets up a memory history mode for navigation handling.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createMemoryHistory, createRouter } from 'vue-router'\n\nimport HomeView from './HomeView.vue'\nimport AboutView from './AboutView.vue'\n\nconst routes = [\n  { path: '/', component: HomeView },\n  { path: '/about', component: AboutView },\n]\n\nconst router = createRouter({\n  history: createMemoryHistory(),\n  routes,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the Root Component with RouterLink and RouterView in Vue\nDESCRIPTION: A Vue component template showing how to structure the main application layout with Vue Router components. It displays the current route path, navigation links using RouterLink, and a RouterView to render the current route component.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <h1>Hello App!</h1>\n  <p>\n    <strong>Current route path:</strong> {{ $route.fullPath }}\n  </p>\n  <nav>\n    <RouterLink to=\"/\">Go to Home</RouterLink>\n    <RouterLink to=\"/about\">Go to About</RouterLink>\n  </nav>\n  <main>\n    <RouterView />\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Router and Route in Composition API\nDESCRIPTION: Demonstrates how to use useRouter and useRoute composables to access router functionality within the setup function. Shows how to create a navigation function that preserves existing query parameters.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/composition-api.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useRouter, useRoute } from 'vue-router'\n\nconst router = useRouter()\nconst route = useRoute()\n\nfunction pushWithQuery(query) {\n  router.push({\n    name: 'search',\n    query: {\n      ...route.query,\n      ...query,\n    },\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering Vue Router with the Application Instance\nDESCRIPTION: Demonstrates how to register the Vue Router instance as a plugin with the Vue application using the use() method, which must be called before mount().\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ncreateApp(App)\n  .use(router)\n  .mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Accessing Router in Composition API Component\nDESCRIPTION: Vue component using Composition API with script setup to access the router and current route. It demonstrates using useRouter() and useRoute() composables to implement a search feature with URL query parameters.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { computed } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\nconst router = useRouter()\nconst route = useRoute()\n\nconst search = computed({\n  get() {\n    return route.query.search ?? ''\n  },\n  set(search) {\n    router.replace({ query: { search } })\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Vue project with Vue Router using create-vue\nDESCRIPTION: Commands for creating a new Vue project with the create-vue scaffolding tool, which offers the option to include Vue Router during setup. This creates a Vite-based project with all necessary configurations.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vue@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create vue\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create vue\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun create vue\n```\n\n----------------------------------------\n\nTITLE: Registering Global Before Guards in Vue Router\nDESCRIPTION: Demonstrates how to register global before guards using router.beforeEach. These guards are called in creation order whenever navigation is triggered and can be used to cancel or redirect navigation.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({ ... })\n\nrouter.beforeEach((to, from) => {\n  // ...\n  // explicitly return false to cancel the navigation\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Guards with Composition API\nDESCRIPTION: Example of using the beforeRouteUpdate navigation guard with Composition API to react to route changes and perform data fetching when parameters change.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onBeforeRouteUpdate } from 'vue-router'\n// ...\n\nonBeforeRouteUpdate(async (to, from) => {\n  // react to route changes...\n  userData.value = await fetchUser(to.params.id)\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Project with Vue Router using npm\nDESCRIPTION: Command to scaffold a new Vue project with Vue Router using the create-vue tool with npm, which provides a complete starting point for exploring Vue Router features.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vue@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Catch-All and Custom Parameter Routes\nDESCRIPTION: Shows how to create catch-all (404) routes and routes with custom parameter patterns using Vue Router. Includes examples of using regular expressions for path matching.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  // will match everything and put it under `route.params.pathMatch`\n  { path: '/:pathMatch(.*)*', name: 'NotFound', component: NotFound },\n  // will match anything starting with `/user-` and put it under `route.params.afterUser`\n  { path: '/user-:afterUser(.*)', component: UserGeneric },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Resolve Guards in Vue Router\nDESCRIPTION: Shows how to use router.beforeResolve for global resolve guards. This example checks for camera permission on routes that require it, handling errors and canceling navigation if necessary.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeResolve(async to => {\n  if (to.meta.requiresCamera) {\n    try {\n      await askForCameraPermission()\n    } catch (error) {\n      if (error instanceof NotAllowedError) {\n        // ... handle the error and then cancel the navigation\n        return false\n      } else {\n        // unexpected error, cancel the navigation and pass the error to the global handler\n        throw error\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating with router.push in Vue Router\nDESCRIPTION: Demonstrates different ways to use router.push for programmatic navigation, including string paths, objects with paths, named routes with params, and options for query parameters and hash.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/navigation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// literal string path\nrouter.push('/users/eduardo')\n\n// object with path\nrouter.push({ path: '/users/eduardo' })\n\n// named route with params to let the router build the url\nrouter.push({ name: 'user', params: { username: 'eduardo' } })\n\n// with query, resulting in /register?plan=private\nrouter.push({ path: '/register', query: { plan: 'private' } })\n\n// with hash, resulting in /about#team\nrouter.push({ path: '/about', hash: '#team' })\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Route Imports in Vue Router\nDESCRIPTION: Demonstrates how to replace static route imports with dynamic imports using Vue Router. Shows both inline and variable-based approaches for component loading.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/lazy-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// replace\n// import UserDetails from './views/UserDetails'\n// with\nconst UserDetails = () => import('./views/UserDetails.vue')\n\nconst router = createRouter({\n  // ...\n  routes: [\n    { path: '/users/:id', component: UserDetails }\n    // or use it directly in the route definition\n    { path: '/users/:id', component: () => import('./views/UserDetails.vue') },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Router and Route in Vue Composition API\nDESCRIPTION: Demonstrates how to access router and route objects using useRouter and useRoute composables within the setup function. Shows how to implement navigation with query parameters.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/composition-api.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useRouter, useRoute } from 'vue-router'\n\nconst router = useRouter()\nconst route = useRoute()\n\nfunction pushWithQuery(query) {\n  router.push({\n    name: 'search',\n    query: {\n      ...route.query,\n      ...query,\n    },\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Route Meta Fields in Vue Router\nDESCRIPTION: Example of defining meta properties on route configurations to control authentication requirements for different routes. This demonstrates how to structure nested routes with different meta properties.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/meta.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/posts',\n    component: PostsLayout,\n    children: [\n      {\n        path: 'new',\n        component: PostsNew,\n        // only authenticated users can create posts\n        meta: { requiresAuth: true },\n      },\n      {\n        path: ':id',\n        component: PostsDetail,\n        // anybody can read a post\n        meta: { requiresAuth: false },\n      },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Route in Vue Router\nDESCRIPTION: Shows how to create a route with a name property in the routes configuration. This example defines a route for user profiles with a dynamic username parameter.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/named-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst routes = [\n  {\n    path: '/user/:username',\n    name: 'profile', // [!code highlight]\n    component: User\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Watching Route Parameters in Vue Router\nDESCRIPTION: Shows how to properly watch specific route parameters for changes and fetch updated data accordingly, using the Composition API's watch function.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/composition-api.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useRoute } from 'vue-router'\nimport { ref, watch } from 'vue'\n\nconst route = useRoute()\nconst userData = ref()\n\n// fetch the user information when params change\nwatch(\n  () => route.params.id,\n  async newId => {\n    userData.value = await fetchUser(newId)\n  }\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML5 Mode in Vue Router\nDESCRIPTION: Implementation of HTML5 history mode using createWebHistory(). This is the recommended mode for production applications that provides clean URLs.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    //...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading with Dynamic Imports in Vue Router\nDESCRIPTION: Demonstrates how to use dynamic imports to lazy load route components in Vue Router. This approach improves initial load time by loading components only when needed.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/lazy-loading.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 将\n// import UserDetails from './views/UserDetails.vue'\n// 替换成\nconst UserDetails = () => import('./views/UserDetails.vue')\n\nconst router = createRouter({\n  // ...\n  routes: [\n    { path: '/users/:id', component: UserDetails }\n    // 或在路由定义里直接使用它\n    { path: '/users/:id', component: () => import('./views/UserDetails.vue') },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using useLink Composable for Custom Router Links\nDESCRIPTION: Shows how to use the useLink composable to build custom link components that extend RouterLink functionality. Extracts properties like route, href, isActive flags, and navigate function for advanced link behavior.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/composition-api.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { RouterLink, useLink } from 'vue-router'\nimport { computed } from 'vue'\n\nconst props = defineProps({\n  // 如果使用 TypeScript，请添加 @ts-ignore\n  ...RouterLink.props,\n  inactiveClass: String,\n}）\n\nconst {\n  // 解析出来的路由对象\n  route,\n  // 用在链接里的 href\n  href,\n  // 布尔类型的 ref 标识链接是否匹配当前路由\n  isActive,\n  // 布尔类型的 ref 标识链接是否严格匹配当前路由\n  isExactActive,\n  // 导航至该链接的函数\n  navigate\n} = useLink(props)\n\nconst isExternalLink = computed(\n  () => typeof props.to === 'string' && props.to.startsWith('http')\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Redirecting Navigation in Global Before Guards\nDESCRIPTION: Shows how to use global before guards to redirect unauthenticated users to a login page. This example checks authentication status and redirects if necessary, avoiding infinite redirects.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach(async (to, from) => {\n  if (\n    // make sure the user is authenticated\n    !isAuthenticated &&\n    // ❗️ Avoid an infinite redirect\n    to.name !== 'Login'\n  ) {\n    // redirect the user to the login page\n    return { name: 'Login' }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Navigation Guards with Composition API\nDESCRIPTION: Demonstrates implementing beforeRouteLeave and beforeRouteUpdate navigation guards using Vue Router's composition API functions. Shows how to cancel navigation and conditionally fetch data when parameters change.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/composition-api.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onBeforeRouteLeave, onBeforeRouteUpdate } from 'vue-router'\nimport { ref } from 'vue'\n\n// 与 beforeRouteLeave 相同，无法访问 `this`\nonBeforeRouteLeave((to, from) => {\n  const answer = window.confirm(\n    'Do you really want to leave? you have unsaved changes!'\n  )\n  // 取消导航并停留在同一页面上\n  if (!answer) return false\n})\n\nconst userData = ref()\n\n// 与 beforeRouteUpdate 相同，无法访问 `this`\nonBeforeRouteUpdate(async (to, from) => {\n  //仅当 id 更改时才获取用户，例如仅 query 或 hash 值已更改\n  if (to.params.id !== from.params.id) {\n    userData.value = await fetchUser(to.params.id)\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Route Guards in Vue Router\nDESCRIPTION: Shows how to define beforeEnter guards directly on route configuration objects. This example includes using an array of functions for reusable guards across different routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/users/:id',\n    component: UserDetails,\n    beforeEnter: (to, from) => {\n      // reject the navigation\n      return false\n    },\n  },\n]\n\nfunction removeQueryParams(to) {\n  if (Object.keys(to.query).length)\n    return { path: to.path, query: {}, hash: to.hash }\n}\n\nfunction removeHash(to) {\n  if (to.hash) return { path: to.path, query: to.query, hash: '' }\n}\n\nconst routes = [\n  {\n    path: '/users/:id',\n    component: UserDetails,\n    beforeEnter: [removeQueryParams, removeHash],\n  },\n  {\n    path: '/about',\n    component: UserDetails,\n    beforeEnter: [removeQueryParams],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-Navigation Data Fetching with Route Guards\nDESCRIPTION: Vue component implementation that fetches data before navigation using route guards. Uses beforeRouteEnter and beforeRouteUpdate hooks to manage data fetching.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/data-fetching.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data() {\n    return {\n      post: null,\n      error: null,\n    }\n  },\n  async beforeRouteEnter(to, from, next) {\n    try {\n      const post = await getPost(to.params.id)\n      // `setPost` is a method defined below\n      next(vm => vm.setPost(post))\n    } catch (err) {\n      // `setError` is a method defined below\n      next(vm => vm.setError(err))\n    }\n  },\n  // when route changes and this component is already rendered,\n  // the logic will be slightly different.\n  beforeRouteUpdate(to, from) {\n    this.post = null\n    getPost(to.params.id).then(this.setPost).catch(this.setError)\n  },\n  methods: {\n    setPost(post) {\n      this.post = post\n    },\n    setError(err) {\n      this.error = err.toString()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Guards with Options API in Vue\nDESCRIPTION: This snippet demonstrates how to use beforeRouteEnter, beforeRouteUpdate, and beforeRouteLeave guards in a Vue component using the Options API. It shows the structure and context of each guard.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  beforeRouteEnter(to, from) {\n    // called before the route that renders this component is confirmed.\n    // does NOT have access to `this` component instance,\n    // because it has not been created yet when this guard is called!\n  },\n  beforeRouteUpdate(to, from) {\n    // called when the route that renders this component has changed, but this component is reused in the new route.\n    // For example, given a route with params `/users/:id`, when we navigate between `/users/1` and `/users/2`,\n    // the same `UserDetails` component instance will be reused, and this hook will be called when that happens.\n    // Because the component is mounted while this happens, the navigation guard has access to `this` component instance.\n  },\n  beforeRouteLeave(to, from) {\n    // called when the route that renders this component is about to be navigated away from.\n    // As with `beforeRouteUpdate`, it has access to `this` component instance.\n  },\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Default Child Route Configuration\nDESCRIPTION: Setting up a default child route when parent route is matched.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/user/:id',\n    component: User,\n    children: [\n      // UserHome will be rendered inside User's <router-view>\n      // when /user/:id is matched\n      { path: '', component: UserHome },\n\n      // ...other sub routes\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Instance in beforeRouteEnter Guard\nDESCRIPTION: This snippet shows how to access the component instance in the beforeRouteEnter guard by passing a callback to next(). This is the only guard that supports passing a callback to next.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeRouteEnter (to, from, next) {\n  next(vm => {\n    // access to component public instance via `vm`\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Routes Configuration\nDESCRIPTION: Configuration of nested child routes for the User component including profile and posts routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/user/:id',\n    component: User,\n    children: [\n      {\n        // UserProfile will be rendered inside User's <router-view>\n        // when /user/:id/profile is matched\n        path: 'profile',\n        component: UserProfile,\n      },\n      {\n        // UserPosts will be rendered inside User's <router-view>\n        // when /user/:id/posts is matched\n        path: 'posts',\n        component: UserPosts,\n      },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Adding a New Route Dynamically in Vue Router\nDESCRIPTION: Example of adding a new route at runtime using the addRoute() method. This adds a specific route for '/about' that renders the About component.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/dynamic-routing.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.addRoute({ path: '/about', component: About })\n```\n\n----------------------------------------\n\nTITLE: Watching Route Parameters in Options API\nDESCRIPTION: Implementation of watching route parameter changes in the Options API. This shows how to respond to route parameter changes without component remounting.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  created() {\n    this.$watch(\n      () => this.$route.params.id,\n      (newId, oldId) => {\n        // react to route changes...\n      }\n    )\n  },\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Parameters in Vue Router Routes\nDESCRIPTION: Shows how to define optional parameters in routes using the '?' modifier. This allows for flexible route matching with optional segments.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/route-matching-syntax.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  // will match /users and /users/posva\n  { path: '/users/:userId?' },\n  // will match /users and /users/42\n  { path: '/users/:userId(\\\\d+)?' },\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Router Link Implementation Using useLink Composable\nDESCRIPTION: Shows how to create a custom router link component using the useLink composable, which provides access to internal RouterLink behavior and properties.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/composition-api.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { RouterLink, useLink } from 'vue-router'\nimport { computed } from 'vue'\n\nconst props = defineProps({\n  // add @ts-ignore if using TypeScript\n  ...RouterLink.props,\n  inactiveClass: String,\n})\n\nconst {\n  // the resolved route object\n  route,\n  // the href to use in a link\n  href,\n  // boolean ref indicating if the link is active\n  isActive,\n  // boolean ref indicating if the link is exactly active\n  isExactActive,\n  // function to navigate to the link\n  navigate\n} = useLink(props)\n\nconst isExternalLink = computed(\n  () => typeof props.to === 'string' && props.to.startsWith('http')\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Route Segments with Vue Router\nDESCRIPTION: Example of creating routes with dynamic segments (params) using Vue Router. This shows how to define a route with a param named 'id' that will capture values from the URL path.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport User from './User.vue'\n\n// these are passed to `createRouter`\nconst routes = [\n  // dynamic segments start with a colon\n  { path: '/users/:id', component: User },\n]\n```\n\n----------------------------------------\n\nTITLE: Watching Route Parameters in Composition API\nDESCRIPTION: Implementation of watching route parameter changes in the Composition API. This allows components to react when the parameter changes without the component being destroyed and recreated.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nconst route = useRoute()\n\nwatch(\n  () => route.params.id,\n  (newId, oldId) => {\n    // react to route changes...\n  }\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Async Functions in Global Before Guards\nDESCRIPTION: Illustrates how to use async functions and Promises in global before guards. This example checks user access asynchronously and redirects to login if access is denied.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach(async (to, from) => {\n  // canUserAccess() returns `true` or `false`\n  const canAccess = await canUserAccess(to)\n  if (!canAccess) return '/login'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Routes in Vue Router\nDESCRIPTION: Defines a nested route configuration with dynamic parameters for user and role paths. Shows how to structure parent-child route relationships with path parameters.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/active-links.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/user/:username',\n    component: User,\n    children: [\n      {\n        path: 'role/:roleId',\n        component: Role,\n      },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Awaiting Router Push Navigation\nDESCRIPTION: This example demonstrates how to properly await the Promise returned by router.push() before executing subsequent code, ensuring the navigation completes first.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/navigation-failures.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait router.push('/my-profile')\nthis.isMenuOpen = false\n```\n\n----------------------------------------\n\nTITLE: 注册Vue Router插件\nDESCRIPTION: 展示了如何将创建好的路由器实例注册到Vue应用中。通过app.use(router)将路由器注册为插件，使应用能够使用Vue Router的功能。\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/index.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ncreateApp(App)\n  .use(router)\n  .mount('#app')\n```\n\nLANGUAGE: js\nCODE:\n```\nconst app = createApp(App)\napp.use(router)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation with Named Routes\nDESCRIPTION: Shows how to use a named route with the router.push() method for programmatic navigation. This navigates to the user profile page with a specific username parameter.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/named-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nrouter.push({ name: 'profile', params: { username: 'erina' } })\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Top on Route Navigation\nDESCRIPTION: Implementation of scrollBehavior that always scrolls to the top of the page when navigating to a new route. Returns a ScrollToOptions object specifying the top position as 0.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  scrollBehavior(to, from, savedPosition) {\n    // always scroll to top\n    return { top: 0 }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Router using package managers\nDESCRIPTION: Commands for installing Vue Router v4 using different package managers (npm, yarn, pnpm, and bun). These commands add vue-router@4 as a dependency to your existing JavaScript project.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-router@4\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vue-router@4\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add vue-router@4\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add vue-router@4\n```\n\n----------------------------------------\n\nTITLE: Global Router Active Class Configuration\nDESCRIPTION: Demonstrates how to configure default active and exact-active class names globally when creating the router instance.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/active-links.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  linkActiveClass: 'border-indigo-500',\n  linkExactActiveClass: 'border-indigo-700',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Handling params in Vue Router navigation\nDESCRIPTION: Shows how to properly use params with router.push, including manual URL building and using named routes. It also highlights the limitations of using params with path.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/navigation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst username = 'eduardo'\n// we can manually build the url but we will have to handle the encoding ourselves\nrouter.push(`/user/${username}`) // -> /user/eduardo\n// same as\nrouter.push({ path: `/user/${username}` }) // -> /user/eduardo\n// if possible use `name` and `params` to benefit from automatic URL encoding\nrouter.push({ name: 'user', params: { username } }) // -> /user/eduardo\n// `params` cannot be used alongside `path`\nrouter.push({ path: '/user', params: { username } }) // -> /user\n```\n\n----------------------------------------\n\nTITLE: Implementing Hash Anchor Scrolling in Vue Router\nDESCRIPTION: Enables scrolling to anchor elements specified in URL hashes, simulating the native browser behavior of jumping to anchors. Checks if the destination route has a hash value before scrolling.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  scrollBehavior(to, from, savedPosition) {\n    if (to.hash) {\n      return {\n        el: to.hash,\n      }\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Router Views with Named Views in Vue.js\nDESCRIPTION: This snippet demonstrates how to set up multiple router-view components in a Vue.js template, with each view having a unique name. Views without a name are given the 'default' name automatically.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/named-views.md#2025-04-21_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view class=\"view left-sidebar\" name=\"LeftSidebar\" />\n<router-view class=\"view main-content\" />\n<router-view class=\"view right-sidebar\" name=\"RightSidebar\" />\n```\n\n----------------------------------------\n\nTITLE: Extending RouterLink with Options API in Vue\nDESCRIPTION: Implementation of an AppLink component that extends RouterLink to handle external links and custom inactive classes using Options API. It defines computed properties to determine if a link is external and uses the custom slot feature of RouterLink.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/extending-router-link.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { RouterLink } from 'vue-router'\n\nexport default {\n  name: 'AppLink',\n  inheritAttrs: false,\n\n  props: {\n    // add @ts-ignore if using TypeScript\n    ...RouterLink.props,\n    inactiveClass: String,\n  },\n\n  computed: {\n    isExternalLink() {\n      return typeof this.to === 'string' && this.to.startsWith('http')\n    },\n  },\n}\n</script>\n\n<template>\n  <a v-if=\"isExternalLink\" v-bind=\"$attrs\" :href=\"to\" target=\"_blank\">\n    <slot />\n  </a>\n  <router-link\n    v-else\n    v-bind=\"$props\"\n    custom\n    v-slot=\"{ isActive, href, navigate }\"\n  >\n    <a\n      v-bind=\"$attrs\"\n      :href=\"href\"\n      @click=\"navigate\"\n      :class=\"isActive ? activeClass : inactiveClass\"\n    >\n      <slot />\n    </a>\n  </router-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Extending RouterLink with Composition API in Vue\nDESCRIPTION: Implementation of an AppLink component that extends RouterLink to handle external links and custom inactive classes using Composition API. It uses computed properties to determine external links and leverages the custom slot of RouterLink.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/extending-router-link.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { computed } from 'vue'\nimport { RouterLink } from 'vue-router'\n\ndefineOptions({\n  inheritAttrs: false,\n})\n\nconst props = defineProps({\n  // add @ts-ignore if using TypeScript\n  ...RouterLink.props,\n  inactiveClass: String,\n})\n\nconst isExternalLink = computed(() => {\n  return typeof props.to === 'string' && props.to.startsWith('http')\n})\n</script>\n\n<template>\n  <a v-if=\"isExternalLink\" v-bind=\"$attrs\" :href=\"to\" target=\"_blank\">\n    <slot />\n  </a>\n  <router-link\n    v-else\n    v-bind=\"$props\"\n    custom\n    v-slot=\"{ isActive, href, navigate }\"\n  >\n    <a\n      v-bind=\"$attrs\"\n      :href=\"href\"\n      @click=\"navigate\"\n      :class=\"isActive ? activeClass : inactiveClass\"\n    >\n      <slot />\n    </a>\n  </router-link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Redirecting with Function in Vue Router\nDESCRIPTION: Advanced redirect configuration using a function to dynamically redirect based on route parameters. In this example, search text is moved from a path parameter to a query parameter.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    // /search/screens -> /search?q=screens\n    path: '/search/:searchText',\n    redirect: to => {\n      // the function receives the target route as the argument\n      // we return a redirect path/location here.\n      return { path: '/search', query: { q: to.params.searchText } }\n    },\n  },\n  {\n    path: '/search',\n    // ...\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Views with Vue Router\nDESCRIPTION: This code shows how to configure Vue Router to use multiple components for a single route using the 'components' option. Each component corresponds to a named view in the template.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/named-views.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes: [\n    {\n      path: '/',\n      components: {\n        default: Home,\n        // short for LeftSidebar: LeftSidebar\n        LeftSidebar,\n        // they match the `name` attribute on `<router-view>`\n        RightSidebar,\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Regex for Route Parameters in Vue Router\nDESCRIPTION: Shows how to use custom regex to define specific patterns for route parameters. This allows for more precise matching of route segments without adding static sections to the path.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/route-matching-syntax.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  // /:orderId -> matches only numbers\n  { path: '/:orderId(\\\\d+)' },\n  // /:productName -> matches anything else\n  { path: '/:productName' },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Routes in Vue Router with TypeScript\nDESCRIPTION: This code demonstrates how to manually configure typed routes in Vue Router by defining a RouteNamedMap interface and augmenting Vue Router types. It includes examples of different route patterns including root routes, named parameters, array parameters, and catch-all routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/typed-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// import the `RouteRecordInfo` type from vue-router to type your routes\nimport type { RouteRecordInfo } from 'vue-router'\n\n// Define an interface of routes\nexport interface RouteNamedMap {\n  // each key is a name\n  home: RouteRecordInfo<\n    // here we have the same name\n    'home',\n    // this is the path, it will appear in autocompletion\n    '/',\n    // these are the raw params. In this case, there are no params allowed\n    Record<never, never>,\n    // these are the normalized params\n    Record<never, never>\n  >\n  // repeat for each route..\n  // Note you can name them whatever you want\n  'named-param': RouteRecordInfo<\n    'named-param',\n    '/:name',\n    { name: string | number }, // raw value\n    { name: string } // normalized value\n  >\n  'article-details': RouteRecordInfo<\n    'article-details',\n    '/articles/:id+',\n    { id: Array<number | string> },\n    { id: string[] }\n  >\n  'not-found': RouteRecordInfo<\n    'not-found',\n    '/:path(.*)',\n    { path: string },\n    { path: string }\n  >\n}\n\n// Last, you will need to augment the Vue Router types with this map of routes\ndeclare module 'vue-router' {\n  interface TypesConfig {\n    RouteNamedMap: RouteNamedMap\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Component with Data Fetching - Options API\nDESCRIPTION: Vue component implementation using Options API that fetches post data after navigation. Uses $watch to monitor route params and handles loading/error states.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/data-fetching.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"post\">\n    <div v-if=\"loading\" class=\"loading\">Loading...</div>\n\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n\n    <div v-if=\"post\" class=\"content\">\n      <h2>{{ post.title }}</h2>\n      <p>{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getPost } from './api.js'\n\nexport default {\n  data() {\n    return {\n      loading: false,\n      post: null,\n      error: null,\n    }\n  },\n  created() {\n    // watch the params of the route to fetch the data again\n    this.$watch(\n      () => this.$route.params.id,\n      this.fetchData,\n      // fetch the data when the view is created and the data is\n      // already being observed\n      { immediate: true }\n    )\n  },\n  methods: {\n    async fetchData(id) {\n      this.error = this.post = null\n      this.loading = true\n\n      try {\n        // replace `getPost` with your data fetching util / API wrapper\n        this.post = await getPost(id)\n      } catch (err) {\n        this.error = err.toString()\n      } finally {\n        this.loading = false\n      }\n    },\n  },\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Named Views in Vue Router\nDESCRIPTION: This configuration shows how to set up nested routes with named views. It defines a parent route with child routes, where one child route uses multiple components for different named views.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/named-views.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  path: '/settings',\n  // You could also have named views at the top\n  component: UserSettings,\n  children: [\n    {\n      path: 'emails',\n      component: UserEmailsSubscriptions\n    },\n    {\n      path: 'profile',\n      components: {\n        default: UserProfile,\n        helper: UserProfilePreview\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLink from Vue Router's Composition API\nDESCRIPTION: Example of extending RouterLink using the useLink composable from Vue Router. This approach provides access to navigation properties like navigate, href, route, isActive, and isExactActive for more control over link behavior.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/extending-router-link.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { RouterLink, useLink } from 'vue-router'\n\nexport default {\n  name: 'AppLink',\n\n  props: {\n    // add @ts-ignore if using TypeScript\n    ...RouterLink.props,\n    inactiveClass: String,\n  },\n\n  setup(props) {\n    // `props` contains `to` and any other prop that can be passed to <router-link>\n    const { navigate, href, route, isActive, isExactActive } = useLink(props)\n\n    // profit!\n\n    return { isExternalLink }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Component with Data Fetching - Composition API\nDESCRIPTION: Vue component implementation using Composition API that fetches post data after navigation. Uses watch to monitor route params and handles loading/error states.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/data-fetching.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"post\">\n    <div v-if=\"loading\" class=\"loading\">Loading...</div>\n\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n\n    <div v-if=\"post\" class=\"content\">\n      <h2>{{ post.title }}</h2>\n      <p>{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\nimport { getPost } from './api.js'\n\nconst route = useRoute()\n\nconst loading = ref(false)\nconst post = ref(null)\nconst error = ref(null)\n\n// watch the params of the route to fetch the data again\nwatch(() => route.params.id, fetchData, { immediate: true })\n\nasync function fetchData(id) {\n  error.value = post.value = null\n  loading.value = true\n  \n  try {\n    // replace `getPost` with your data fetching util / API wrapper\n    post.value = await getPost(id)  \n  } catch (err) {\n    error.value = err.toString()\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Combining KeepAlive and Transition with RouterView in Vue Router\nDESCRIPTION: Shows how to use both KeepAlive and Transition components together with RouterView to preserve component state while adding transition effects between route changes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/router-view-slot.md#2025-04-21_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <transition>\n    <keep-alive>\n      <component :is=\"Component\" />\n    </keep-alive>\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Static Sections in Vue Router\nDESCRIPTION: Demonstrates how to differentiate between two routes by adding static sections to the path. This approach is useful when you need to distinguish between similar dynamic routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/route-matching-syntax.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  // matches /o/3549\n  { path: '/o/:orderId' },\n  // matches /p/books\n  { path: '/p/:productName' },\n]\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation to Catch-All Route\nDESCRIPTION: Example of how to programmatically navigate to a catch-all route while preserving the current path, query parameters, and hash fragment.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.push({\n  name: 'NotFound',\n  // preserve current path and remove the first char to avoid the target URL starting with `//`\n  params: { pathMatch: route.path.substring(1).split('/') },\n  // preserve existing query and hash if any\n  query: route.query,\n  hash: route.hash,\n})\n```\n\n----------------------------------------\n\nTITLE: User Component with Props in Options API\nDESCRIPTION: Improved User component using the Options API to define props, making it decoupled from the route parameters.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/passing-props.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<!-- User.vue -->\n<script>\nexport default {\n  props: {\n    id: String\n  }\n}\n</script>\n\n<template>\n  <div>\n    User {{ id }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Function Mode for Dynamic Props\nDESCRIPTION: Using a function to dynamically generate props based on route information, allowing for type casting, combining values, or other transformations.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/passing-props.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst routes = [\n  {\n    path: '/search',\n    component: SearchUser,\n    props: route => ({ query: route.query.q })\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Routes Using Named Parent Route\nDESCRIPTION: Example of adding a nested route to an existing route by passing the parent route's name as the first parameter to addRoute(). This effectively adds the route as a child route.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/dynamic-routing.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.addRoute({ name: 'admin', path: '/admin', component: Admin })\nrouter.addRoute('admin', { path: 'settings', component: AdminSettings })\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Route Transitions with Meta Fields in Vue Router\nDESCRIPTION: Demonstrates how to define different transitions for specific routes by using meta fields in the route configuration.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/transitions.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst routes = [\n  {\n    path: '/custom-transition',\n    component: PanelLeft,\n    meta: { transition: 'slide-left' },\n  },\n  {\n    path: '/other-transition',\n    component: PanelRight,\n    meta: { transition: 'slide-right' },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Route Transition Implementation with RouterView in Vue\nDESCRIPTION: Shows how to implement a basic fade transition when navigating between routes using the RouterView slot and Vue's transition component.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/transitions.md#2025-04-21_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <transition name=\"fade\">\n    <component :is=\"Component\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Router with Single Route in Vue Router\nDESCRIPTION: Example of creating a basic Vue Router instance with a single dynamic route that matches any path with an articleName parameter and renders the Article component.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/dynamic-routing.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [{ path: '/:articleName', component: Article }],\n})\n```\n\n----------------------------------------\n\nTITLE: Watching Route Parameters in Composition API\nDESCRIPTION: Shows how to reactively respond to route parameter changes using Vue's watch function with useRoute. Instead of watching the entire route object, it watches a specific parameter for more efficient updates.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/composition-api.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useRoute } from 'vue-router'\nimport { ref, watch } from 'vue'\n\nconst route = useRoute()\nconst userData = ref()\n\n// 当参数更改时获取用户信息\nwatch(\n  () => route.params.id,\n  async newId => {\n    userData.value = await fetchUser(newId)\n  }\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Integrating KeepAlive with RouterView in Vue Router\nDESCRIPTION: Shows how to wrap the route component with KeepAlive to preserve component state when switching between routes. This keeps the route components alive rather than the RouterView itself.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/router-view-slot.md#2025-04-21_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <keep-alive>\n    <component :is=\"Component\" />\n  </keep-alive>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Accessing Meta Fields in Navigation Guards\nDESCRIPTION: Shows how to access meta fields in router navigation guards to implement authentication logic. The example uses the simplified route.meta property instead of iterating through matched routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/meta.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from) => {\n  // instead of having to check every route record with\n  // to.matched.some(record => record.meta.requiresAuth)\n  if (to.meta.requiresAuth && !auth.isLoggedIn()) {\n    // this route requires auth, check if logged in\n    // if not, redirect to login page.\n    return {\n      path: '/login',\n      // save the location we were at to come back later\n      query: { redirect: to.fullPath },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Navigation Guards in Vue Router Composition API\nDESCRIPTION: Implements navigation guards using Composition API functions onBeforeRouteLeave and onBeforeRouteUpdate for handling route transitions and data fetching.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/composition-api.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onBeforeRouteLeave, onBeforeRouteUpdate } from 'vue-router'\nimport { ref } from 'vue'\n\n// same as beforeRouteLeave option but with no access to `this`\nonBeforeRouteLeave((to, from) => {\n  const answer = window.confirm(\n    'Do you really want to leave? you have unsaved changes!'\n  )\n  // cancel the navigation and stay on the same page\n  if (!answer) return false\n})\n\nconst userData = ref()\n\n// same as beforeRouteUpdate option but with no access to `this`\nonBeforeRouteUpdate(async (to, from) => {\n  // only fetch the user if the id changed as maybe only the query or the hash changed\n  if (to.params.id !== from.params.id) {\n    userData.value = await fetchUser(to.params.id)\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Transitions with Route Meta in Vue Router\nDESCRIPTION: Shows how to apply custom transitions from route meta fields or fall back to a default transition when none is specified.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/transitions.md#2025-04-21_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component, route }\">\n  <!-- Use a custom transition or fallback to `fade` -->\n  <transition :name=\"route.meta.transition || 'fade'\">\n    <component :is=\"Component\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Initializing Scroll Behavior in Vue Router\nDESCRIPTION: Basic setup for creating a router with a scrollBehavior function that determines scrolling position after navigation. This function receives to and from route objects, plus a savedPosition parameter for browser back/forward navigation.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes: [...],\n  scrollBehavior (to, from, savedPosition) {\n    // return desired position\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Routes Using the Callback from addRoute\nDESCRIPTION: Example demonstrating how to remove a route using the callback function returned by router.addRoute(). This is useful for removing routes that don't have names.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/dynamic-routing.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst removeRoute = router.addRoute(routeRecord)\nremoveRoute() // removes the route if it exists\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Rendering Router in JavaScript\nDESCRIPTION: Shows how to set up the router for server-side rendering, using createMemoryHistory for the server and createWebHistory for the client.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// router.js\nlet history = isServer ? createMemoryHistory() : createWebHistory()\nlet router = createRouter({ routes, history })\n// somewhere in your server-entry.js\nrouter.push(req.url) // request url\nrouter.isReady().then(() => {\n  // resolve the request\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Router Readiness in Vue 3\nDESCRIPTION: Demonstrates how to wait for the router to be ready before mounting the app in Vue 3, which is necessary due to all navigations becoming asynchronous.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(router)\n// Note: on Server Side, you need to manually push the initial location\nrouter.isReady().then(() => app.mount('#app'))\n```\n\n----------------------------------------\n\nTITLE: 404 Route Configuration in Vue Router\nDESCRIPTION: Implementation of a catch-all route to handle 404 pages in Vue Router applications.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [{ path: '/:pathMatch(.*)', component: NotFoundComponent }],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Redirect in Vue Router\nDESCRIPTION: A simple redirect configuration that redirects users from '/home' to the root path ('/'). This is configured in the routes array using the redirect property.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [{ path: '/home', redirect: '/' }]\n```\n\n----------------------------------------\n\nTITLE: Basic RouterView Slot Usage in Vue Router\nDESCRIPTION: Demonstrates the basic usage of RouterView's slot API to manually render the route component. This approach is equivalent to using <router-view /> directly but provides additional flexibility for customization.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/router-view-slot.md#2025-04-21_snippet_0\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <component :is=\"Component\" />\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Defining Route Meta Fields in Vue Router Configuration\nDESCRIPTION: This snippet demonstrates how to define meta fields in Vue Router configuration. It shows a nested route structure with meta fields specifying authentication requirements for different routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/meta.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/posts',\n    component: PostsLayout,\n    children: [\n      {\n        path: 'new',\n        component: PostsNew,\n        // 只有经过身份验证的用户才能创建帖子\n        meta: { requiresAuth: true },\n      },\n      {\n        path: ':id',\n        component: PostsDetail\n        // 任何人都可以阅读文章\n        meta: { requiresAuth: false },\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Typing Route Meta Fields with TypeScript\nDESCRIPTION: Demonstrates how to extend the RouteMeta interface from vue-router to add type safety to custom meta fields. This ensures proper TypeScript support for both optional and required meta properties.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/meta.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// This can be directly added to any of your `.ts` files like `router.ts`\n// It can also be added to a `.d.ts` file. Make sure it's included in\n// project's tsconfig.json \"files\"\nimport 'vue-router'\n\n// To ensure it is treated as a module, add at least one `export` statement\nexport {}\n\ndeclare module 'vue-router' {\n  interface RouteMeta {\n    // is optional\n    isAdmin?: boolean\n    // must be declared by every route\n    requiresAuth: boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Router with createRouter in JavaScript\nDESCRIPTION: Shows how to create a router instance using the new createRouter function instead of the Vue Router class constructor.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter } from 'vue-router'\n\nconst router = createRouter({\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Navigation Guards with Redirection\nDESCRIPTION: Example of dynamically adding routes inside a navigation guard. Instead of using router.replace(), it returns the target location to trigger a redirection, which is the recommended approach in guards.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/dynamic-routing.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach(to => {\n  if (!hasNecessaryRoute(to)) {\n    router.addRoute(generateRoute(to))\n    // trigger a redirection\n    return to.fullPath\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Route and Refreshing the Current View in Vue Router\nDESCRIPTION: Example showing how to add a new route dynamically and then replace the current route to reflect the changes. This is necessary because adding routes doesn't automatically update the current view.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/dynamic-routing.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.addRoute({ path: '/about', component: About })\n// we could also use this.$route or useRoute()\nrouter.replace(router.currentRoute.value.fullPath)\n```\n\n----------------------------------------\n\nTITLE: User Component with Props in Composition API\nDESCRIPTION: Improved User component using the Composition API with defineProps to receive the id as a prop instead of accessing $route directly.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/passing-props.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<!-- User.vue -->\n<script setup>\ndefineProps({\n  id: String\n})\n</script>\n\n<template>\n  <div>\n    User {{ id }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Optional 'next' Argument in Navigation Guards\nDESCRIPTION: Demonstrates the correct way to use the optional 'next' argument in navigation guards. This example shows how to properly handle authentication redirection without calling 'next' multiple times.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// GOOD\nrouter.beforeEach((to, from, next) => {\n  if (to.name !== 'Login' && !isAuthenticated) next({ name: 'Login' })\n  else next()\n})\n```\n\n----------------------------------------\n\nTITLE: Nesting keep-alive and transition in router-view in Vue\nDESCRIPTION: Demonstrates the new way to use transition and keep-alive components with router-view, which must now be nested inside router-view using the v-slot API.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <transition>\n    <keep-alive>\n      <component :is=\"Component\" />\n    </keep-alive>\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Implementing 404 Route in Vue Router\nDESCRIPTION: Implementation of a catch-all route in Vue Router to handle 404 errors when using HTML5 mode. This is necessary because server configurations redirect all requests to index.html.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [{ path: '/:pathMatch(.*)', component: NotFoundComponent }],\n})\n```\n\n----------------------------------------\n\nTITLE: Using isNavigationFailure to Check Navigation Result Type\nDESCRIPTION: This example shows how to use the isNavigationFailure function to check for specific types of navigation failures, such as aborted navigations, and respond accordingly.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/navigation-failures.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationFailureType, isNavigationFailure } from 'vue-router'\n\n// 试图离开未保存的编辑文本界面\nconst failure = await router.push('/articles/2')\n\nif (isNavigationFailure(failure, NavigationFailureType.aborted)) {\n  // 给用户显示一个小通知\n  showToast('You have unsaved changes, discard and leave anyway?')\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Meta Fields in Navigation Guards\nDESCRIPTION: This snippet shows how to access and use route meta fields within a navigation guard. It checks the requiresAuth meta field to determine if a route requires authentication and redirects to the login page if necessary.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/meta.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.beforeEach((to, from) => {\n  // 而不是去检查每条路由记录\n  // to.matched.some(record => record.meta.requiresAuth)\n  if (to.meta.requiresAuth && !auth.isLoggedIn()) {\n    // 此路由需要授权，请检查是否已登录\n    // 如果没有，则重定向到登录页面\n    return {\n      path: '/login',\n      // 保存我们所在的位置，以便以后再来\n      query: { redirect: to.fullPath },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Named Routes with router-link Component\nDESCRIPTION: Demonstrates how to use a named route in the router-link component by passing an object to the to prop with the route name and params. This creates a link to the user profile page.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/named-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-link :to=\"{ name: 'profile', params: { username: 'erina' } }\">\n  User profile\n</router-link>\n```\n\n----------------------------------------\n\nTITLE: Global Navigation Failure Handling - TypeScript\nDESCRIPTION: Shows how to implement global navigation failure handling using router.afterEach guard.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-failures.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.afterEach((to, from, failure) => {\n  if (failure) {\n    sendToAnalytics(to, from, failure)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Router History in JavaScript\nDESCRIPTION: Demonstrates how to set up the router history using the new createWebHistory function, replacing the previous mode option.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\n// there is also createWebHashHistory and createMemoryHistory\n\ncreateRouter({\n  history: createWebHistory(),\n  routes: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Repeatable Parameters in Vue Router Routes\nDESCRIPTION: Illustrates how to define repeatable parameters in routes using '*' (0 or more) and '+' (1 or more) modifiers. This is useful for matching routes with multiple sections.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/route-matching-syntax.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  // /:chapters -> matches /one, /one/two, /one/two/three, etc\n  { path: '/:chapters+' },\n  // /:chapters -> matches /, /one, /one/two, /one/two/three, etc\n  { path: '/:chapters*' },\n]\n```\n\n----------------------------------------\n\nTITLE: 使用组合式API访问路由器和路由\nDESCRIPTION: 展示了在组合式API中如何使用useRouter和useRoute钩子函数访问路由器实例和当前路由信息，并基于URL查询参数创建计算属性。\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/index.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { computed } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\nconst router = useRouter()\nconst route = useRoute()\n\nconst search = computed({\n  get() {\n    return route.query.search ?? ''\n  },\n  set(search) {\n    router.replace({ query: { search } })\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Forcing Transitions Between Reused Views in Vue Router\nDESCRIPTION: Shows how to force transitions between views by using the key attribute, even when components would normally be reused by Vue.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/transitions.md#2025-04-21_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component, route }\">\n  <transition name=\"fade\">\n    <component :is=\"Component\" :key=\"route.path\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Handling Browser Back/Forward Navigation with savedPosition\nDESCRIPTION: Implementation that preserves scroll position when using browser back/forward buttons, mimicking native browser behavior. Falls back to scrolling to the top for new navigation.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  scrollBehavior(to, from, savedPosition) {\n    if (savedPosition) {\n      return savedPosition\n    } else {\n      return { top: 0 }\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Aliasing Routes with Parameters in Vue Router\nDESCRIPTION: Advanced alias configuration for routes with parameters. This example ensures that parameters are included in absolute aliases, providing three different URL patterns to access the same user details.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/users/:id',\n    component: UsersByIdLayout,\n    children: [\n      // this will render the UserDetails for these 3 URLs\n      // - /users/24\n      // - /users/24/profile\n      // - /24\n      { path: 'profile', component: UserDetails, alias: ['/:id', ''] },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Grouping Components with Webpack Chunk Names in Vue Router\nDESCRIPTION: Demonstrates how to group related components into the same async chunk using Webpack's special comment syntax for named chunks.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/lazy-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserDetails = () =>\n  import(/* webpackChunkName: \"group-user\" */ './UserDetails.vue')\nconst UserDashboard = () =>\n  import(/* webpackChunkName: \"group-user\" */ './UserDashboard.vue')\nconst UserProfileEdit = () =>\n  import(/* webpackChunkName: \"group-user\" */ './UserProfileEdit.vue')\n```\n\n----------------------------------------\n\nTITLE: Route Grouping Without Component Nesting\nDESCRIPTION: Configuration for grouping routes with common path prefix without component nesting.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/admin',\n    children: [\n      { path: '', component: AdminOverview },\n      { path: 'users', component: AdminUserList },\n      { path: 'users/:id', component: AdminUserDetails },\n    ], \n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using Global Injections within Navigation Guards\nDESCRIPTION: Illustrates how to use inject() within navigation guards in Vue 3.3+. This example shows accessing globally provided values and Pinia stores within beforeEach guards.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// main.ts\nconst app = createApp(App)\napp.provide('global', 'hello injections')\n\n// router.ts or main.ts\nrouter.beforeEach((to, from) => {\n  const global = inject('global') // 'hello injections'\n  // a pinia store\n  const userStore = useAuthStore()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Navigation Guards with Options API\nDESCRIPTION: Example of using the beforeRouteUpdate navigation guard with Options API to handle route parameter changes and reload data when necessary.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  async beforeRouteUpdate(to, from) {\n    // react to route changes...\n    this.userData = await fetchUser(to.params.id)\n  },\n  // ...\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Preventing Navigation in beforeRouteLeave Guard\nDESCRIPTION: This snippet shows how to use the beforeRouteLeave guard to prevent navigation when there are unsaved changes, by returning false after user confirmation.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeRouteLeave (to, from) {\n  const answer = window.confirm('Do you really want to leave? you have unsaved changes!')\n  if (!answer) return false\n}\n```\n\n----------------------------------------\n\nTITLE: 导航完成后获取数据的Post组件实现 (Vue Composition API)\nDESCRIPTION: 使用Vue Composition API实现的Post组件，展示了如何在导航完成后获取数据。组件通过watch监听路由参数变化，并使用async/await处理API请求，同时显示加载状态和错误信息。\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/data-fetching.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"post\">\n    <div v-if=\"loading\" class=\"loading\">Loading...</div>\n\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n\n    <div v-if=\"post\" class=\"content\">\n      <h2>{{ post.title }}</h2>\n      <p>{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\nimport { getPost } from './api.js'\n\nconst route = useRoute()\n\nconst loading = ref(false)\nconst post = ref(null)\nconst error = ref(null)\n\n// 侦听路由的参数，以便再次获取数据\nwatch(() => route.params.id, fetchData, { immediate: true })\n\nasync function fetchData(id) {\n  error.value = post.value = null\n  loading.value = true\n  \n  try {\n    // 用获取数据的工具函数 / API 包裹器替换 `getPost`\n    post.value = await getPost(id)  \n  } catch (err) {\n    error.value = err.toString()\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Views with Props\nDESCRIPTION: Setting the props option for each named view in a route configuration, enabling selective prop passing for different view components.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/passing-props.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst routes = [\n  {\n    path: '/user/:id',\n    components: { default: User, sidebar: Sidebar },\n    props: { default: true, sidebar: false }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Transitions Based on Route Depth in Vue Router\nDESCRIPTION: Demonstrates how to use afterEach navigation hook to dynamically set transition direction based on the route path depth.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/transitions.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nrouter.afterEach((to, from) => {\n  const toDepth = to.path.split('/').length\n  const fromDepth = from.path.split('/').length\n  to.meta.transition = toDepth < fromDepth ? 'slide-right' : 'slide-left'\n})\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Vue Router\nDESCRIPTION: Nginx server configuration to handle HTML5 history mode routing using try_files directive.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Vue Template\nDESCRIPTION: How to access the current route parameters in a Vue component template. The example shows how to display the user ID parameter captured from the URL.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/dynamic-matching.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- The current route is accessible as $route in the template -->\n    User {{ $route.params.id }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registering Global After Hooks in Vue Router\nDESCRIPTION: Demonstrates how to register global after hooks using router.afterEach. This example shows sending analytics data after each navigation, including handling of navigation failures.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.afterEach((to, from) => {\n  sendToAnalytics(to.fullPath)\n})\n\nrouter.afterEach((to, from, failure) => {\n  if (!failure) sendToAnalytics(to.fullPath)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation Failure Properties\nDESCRIPTION: This example shows how to access the to and from properties of a navigation failure object, which provide information about the current location and the target location of the failed navigation.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/navigation-failures.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// 正在尝试访问 admin 页面\nrouter.push('/admin').then(failure => {\n  if (isNavigationFailure(failure, NavigationFailureType.aborted)) {\n    failure.to.path // '/admin'\n    failure.from.path // '/'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Routes Using removeRoute Method\nDESCRIPTION: Example showing how to remove a route by its name using the router.removeRoute() method. This removes the route along with all its aliases and children.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/dynamic-routing.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.addRoute({ path: '/about', name: 'about', component: About })\n// remove the route\nrouter.removeRoute('about')\n```\n\n----------------------------------------\n\nTITLE: Using this in beforeRouteUpdate Guard\nDESCRIPTION: This snippet demonstrates how to use 'this' directly in the beforeRouteUpdate guard to access and modify component data.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeRouteUpdate (to, from) {\n  // just use `this`\n  this.name = to.params.name\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Smooth Scrolling to Hash Navigation\nDESCRIPTION: Enhances hash-based anchor scrolling with smooth animation by using the browser's native smooth scrolling behavior. This requires browser support for the scroll behavior CSS property.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  scrollBehavior(to, from, savedPosition) {\n    if (to.hash) {\n      return {\n        el: to.hash,\n        behavior: 'smooth',\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Per-Route Guards with Nested Routes\nDESCRIPTION: Demonstrates how to use beforeEnter guards with nested routes. This example shows that parent route guards are not triggered when moving between child routes of the same parent.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-guards.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/user',\n    beforeEnter() {\n      // ...\n    },\n    children: [\n      { path: 'list', component: UserList },\n      { path: 'details', component: UserDetails },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing RouterLink Active Classes\nDESCRIPTION: Shows how to customize active and exact-active class names using RouterLink component props.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/active-links.md#2025-04-21_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<RouterLink\n  activeClass=\"border-indigo-500\"\n  exactActiveClass=\"border-indigo-700\"\n  ...\n>\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Route as Ref in JavaScript\nDESCRIPTION: Demonstrates how to access the current route object, which is now a ref in Vue Router 4, requiring the use of .value to access its properties.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { page } = router.currentRoute.value.query\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled NavLink Component with Tailwind CSS\nDESCRIPTION: Implementation of a NavLink component that uses the extended AppLink with Tailwind CSS classes for styling. This example shows how to apply consistent styling to navigation links with active and inactive states.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/extending-router-link.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <AppLink\n    v-bind=\"$attrs\"\n    class=\"inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out\"\n    active-class=\"border-indigo-500 text-gray-900 focus:border-indigo-700\"\n    inactive-class=\"text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:text-gray-700 focus:border-gray-300\"\n  >\n    <slot />\n  </AppLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Passing Props via RouterView Slot\nDESCRIPTION: Using the RouterView slot to pass props to all route components, though this approach requires all components to define the passed props.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/passing-props.md#2025-04-21_snippet_8\n\nLANGUAGE: vue-html\nCODE:\n```\n<RouterView v-slot=\"{ Component }\">\n  <component\n    :is=\"Component\"\n    view-prop=\"value\"\n   />\n</RouterView>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Project with Vue Router using yarn\nDESCRIPTION: Command to scaffold a new Vue project with Vue Router using the create-vue tool with yarn, which provides a complete starting point for exploring Vue Router features.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn create vue\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Scrolling with Promises\nDESCRIPTION: Advanced implementation that delays scrolling using a Promise. This is useful when coordinating with transitions or animations, allowing the scroll to occur after a specific delay or event.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  scrollBehavior(to, from, savedPosition) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve({ left: 0, top: 0 })\n      }, 500)\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: RouterLink Component Examples in Vue Template\nDESCRIPTION: Demonstrates usage of RouterLink components for navigation with different paths, showing how active states apply to parent and child routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/active-links.md#2025-04-21_snippet_1\n\nLANGUAGE: vue-html\nCODE:\n```\n<RouterLink to=\"/user/erina\">\n  User\n</RouterLink>\n<RouterLink to=\"/user/erina/role/admin\">\n  Role\n</RouterLink>\n```\n\n----------------------------------------\n\nTITLE: Vercel Configuration for HTML5 Mode\nDESCRIPTION: Vercel configuration in vercel.json that redirects all path requests to index.html to support Vue Router's HTML5 mode in a Vercel-hosted application.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rewrites\": [{ \"source\": \"/:path*\", \"destination\": \"/index.html\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Props in Vue Component (Composition API)\nDESCRIPTION: This snippet shows how to use props in a Vue component using the Composition API, removing direct dependency on $route.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<!-- User.vue -->\n<script setup>\ndefineProps({\n  id: String\n})\n</script>\n\n<template>\n  <div>\n    User {{ id }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Passing Content to Route Components in Vue Router 4\nDESCRIPTION: Illustrates the new way of passing content to route components' slots using the v-slot API in Vue Router 4.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_11\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <component :is=\"Component\">\n    <p>In Vue Router 3, I render inside the route component</p>\n  </component>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Redirecting to a Named Route in Vue Router\nDESCRIPTION: Configuration that redirects '/home' to a named route 'homepage'. This approach is useful when you want to redirect to routes identified by names rather than paths.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [{ path: '/home', redirect: { name: 'homepage' } }]\n```\n\n----------------------------------------\n\nTITLE: Node.js Server Implementation for Vue Router\nDESCRIPTION: Basic Node.js server implementation that serves index.html for all routes to support Vue Router history mode.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http')\nconst fs = require('fs')\nconst httpPort = 80\n\nhttp\n  .createServer((req, res) => {\n    fs.readFile('index.html', 'utf-8', (err, content) => {\n      if (err) {\n        console.log('We cannot open \"index.html\" file.')\n      }\n\n      res.writeHead(200, {\n        'Content-Type': 'text/html; charset=utf-8',\n      })\n\n      res.end(content)\n    })\n  })\n  .listen(httpPort, () => {\n    console.log('Server listening on: http://localhost:%s', httpPort)\n  })\n```\n\n----------------------------------------\n\nTITLE: Nested Router View Implementation\nDESCRIPTION: Enhanced User component template with nested router-view.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<!-- User.vue -->\n<template>\n  <div class=\"user\">\n    <h2>User {{ $route.params.id }}</h2>\n    <router-view />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Object Mode for Static Props\nDESCRIPTION: Using the object mode to pass static props to a route component, useful for providing predefined values regardless of route parameters.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/passing-props.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst routes = [\n  {\n    path: '/promotion/from-newsletter',\n    component: Promotion,\n    props: { newsletterPopup: false }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Navigation Failure Type Checking - JavaScript\nDESCRIPTION: Demonstrates how to use isNavigationFailure to check specific types of navigation failures.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-failures.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationFailureType, isNavigationFailure } from 'vue-router'\n\n// trying to leave the editing page of an article without saving\nconst failure = await router.push('/articles/2')\n\nif (isNavigationFailure(failure, NavigationFailureType.aborted)) {\n  // show a small notification to the user\n  showToast('You have unsaved changes, discard and leave anyway?')\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Configuration for Vue Router\nDESCRIPTION: Firebase hosting configuration in firebase.json to handle HTML5 history mode routing.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"public\": \"dist\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Routes by Adding a Conflicting Named Route\nDESCRIPTION: Example showing how to remove a route by adding a new route with the same name. This replaces the existing route since route names must be unique across all routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/dynamic-routing.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.addRoute({ path: '/about', name: 'about', component: About })\n// this will remove the previously added route because they have\n// the same name and names are unique across all routes\nrouter.addRoute({ path: '/other', name: 'about', component: Other })\n```\n\n----------------------------------------\n\nTITLE: Accessing Router in Options API Component\nDESCRIPTION: Example of using the router instance in a Vue component with Options API to perform programmatic navigation. It shows how to access the router via this.$router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  methods: {\n    goToAbout() {\n      this.$router.push('/about')\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Router with Required Routes Option\nDESCRIPTION: Illustrates the new requirement of providing a 'routes' option when creating a router in Vue Router 4.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncreateRouter({ routes: [] })\n```\n\n----------------------------------------\n\nTITLE: Basic Route Configuration\nDESCRIPTION: Initial route setup for the User component.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport User from './User.vue'\n\n// these are passed to `createRouter`\nconst routes = [{ path: '/user/:id', component: User }]\n```\n\n----------------------------------------\n\nTITLE: Named Nested Routes Configuration\nDESCRIPTION: Implementation of named routes with nested children.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/user/:id',\n    component: User,\n    // notice how only the child route has a name\n    children: [{ path: '', name: 'user', component: UserHome }],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Vue Router via Global Objects\nDESCRIPTION: Example of accessing Vue and Vue Router when using global builds from CDN without build tools. This shows how to access the libraries via global objects rather than imports.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst { createApp } = Vue\nconst { createRouter, createWebHistory } = VueRouter\n```\n\n----------------------------------------\n\nTITLE: Applying Transition to All Routes in Vue Router\nDESCRIPTION: This snippet demonstrates how to apply a transition effect to all route changes using the <RouterView> component with a slot.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <transition name=\"fade\">\n    <component :is=\"Component\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Transition Based on Route Depth in Vue Router\nDESCRIPTION: This snippet shows how to use an after navigation hook to dynamically set the transition based on the depth of the route path.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nrouter.afterEach((to, from) => {\n  const toDepth = to.path.split('/').length\n  const fromDepth = from.path.split('/').length\n  to.meta.transition = toDepth < fromDepth ? 'slide-right' : 'slide-left'\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting History and Router Instances in JavaScript\nDESCRIPTION: Example of creating and exporting history and router instances in Vue Router 4.0. This demonstrates how to access the history object, which is no longer available as a property on the router instance.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const history = createWebHistory()\nexport const router = createRouter({ history, routes: [] })\n```\n\n----------------------------------------\n\nTITLE: Using Template Refs with Route Components in Vue Router\nDESCRIPTION: Shows how to place a template ref directly on the route component rather than on the RouterView itself, allowing direct access to the current route component instance.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/router-view-slot.md#2025-04-21_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <component :is=\"Component\" ref=\"mainContent\" />\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Template for Nested Named Views in Vue.js\nDESCRIPTION: This template shows how to implement nested named views in a parent component. It includes a regular NavBar component alongside two router-view components, one with a default name and another named 'helper'.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/named-views.md#2025-04-21_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- UserSettings.vue -->\n<div>\n  <h1>User Settings</h1>\n  <NavBar />\n  <router-view />\n  <router-view name=\"helper\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using router.go for history traversal in Vue Router\nDESCRIPTION: Demonstrates the usage of router.go method to navigate forward and backward in the browser history. It shows examples of moving by different step counts.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/navigation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// go forward by one record, the same as router.forward()\nrouter.go(1)\n\n// go back by one record, the same as router.back()\nrouter.go(-1)\n\n// go forward by 3 records\nrouter.go(3)\n\n// fails silently if there aren't that many records\nrouter.go(-100)\nrouter.go(100)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Empty Path Named Child Route in Vue Router\nDESCRIPTION: This snippet demonstrates how to define routes with an empty path named child route in Vue Router 4. It shows that navigating to the named 'dashboard' route now produces a URL without a trailing slash.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/migration/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/dashboard',\n    name: 'dashboard-parent',\n    component: DashboardParent,\n    children: [\n      { path: '', name: 'dashboard', component: DashboardDefault },\n      {\n        path: 'settings',\n        name: 'dashboard-settings',\n        component: DashboardSettings,\n      },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Router with Memory Mode\nDESCRIPTION: Implementing a Vue Router with memory mode using createMemoryHistory(). This mode doesn't interact with the URL, making it suitable for Node environments and SSR, but requires manual initial navigation.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createMemoryHistory } from 'vue-router'\nconst router = createRouter({\n  history: createMemoryHistory(),\n  routes: [\n    //...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Parameters in Vue Router\nDESCRIPTION: This snippet demonstrates how to define a route with parameters in Vue Router configuration.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport User from './User.vue'\n\n// 传入 `createRouter`\nconst routes = [\n  { path: '/users/:id', component: User },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transitions for Individual Routes in Vue Router\nDESCRIPTION: This code shows how to define custom transitions for specific routes using meta fields in the route configuration.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst routes = [\n  {\n    path: '/custom-transition',\n    component: PanelLeft,\n    meta: { transition: 'slide-left' },\n  },\n  {\n    path: '/other-transition',\n    component: PanelRight,\n    meta: { transition: 'slide-right' },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using isReady Instead of onReady in JavaScript\nDESCRIPTION: Shows how to use the new isReady method, which returns a Promise, replacing the previous onReady method for router initialization.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.isReady().then(onSuccess).catch(onError)\n// or use await:\ntry {\n  await router.isReady()\n  // onSuccess\n} catch (err) {\n  // onError\n}\n```\n\n----------------------------------------\n\nTITLE: 创建Vue Router实例\nDESCRIPTION: 展示了如何通过createRouter函数创建路由器实例，定义路由配置，将URL路径映射到对应的组件。这个示例使用createMemoryHistory作为历史记录模式。\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createMemoryHistory, createRouter } from 'vue-router'\n\nimport HomeView from './HomeView.vue'\nimport AboutView from './AboutView.vue'\n\nconst routes = [\n  { path: '/', component: HomeView },\n  { path: '/about', component: AboutView },\n]\n\nconst router = createRouter({\n  history: createMemoryHistory(),\n  routes,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Router with Hash Mode\nDESCRIPTION: Creating a Vue Router instance with hash mode using createWebHashHistory(). This mode adds a hash (#) to URLs which prevents them from being sent to the server, requiring no special server configuration but impacting SEO.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createWebHashHistory } from 'vue-router'\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes: [\n    //...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining RouteRecordRedirect Interface in TypeScript\nDESCRIPTION: This code snippet defines the RouteRecordRedirect interface, which extends _RouteRecordBase. It specifies properties for route records that implement redirects, including the required redirect property and constraints on component and components.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/api/interfaces/RouteRecordRedirect.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RouteRecordRedirect extends _RouteRecordBase {\n  component?: undefined;\n  components?: undefined;\n  props?: undefined;\n  redirect: RouteRecordRedirectOption;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Transition Effects to Route Components in Vue Router\nDESCRIPTION: Demonstrates how to add transition effects when switching between route components using Vue's Transition component with RouterView's slot.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/router-view-slot.md#2025-04-21_snippet_2\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <transition>\n    <component :is=\"Component\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Element with Offset in Vue Router\nDESCRIPTION: Demonstrates how to scroll to a specific element using either a CSS selector or DOM element reference. Includes an offset to position the viewport 10px above the target element.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/scroll-behavior.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  scrollBehavior(to, from, savedPosition) {\n    // always scroll 10px above the element #main\n    return {\n      // could also be\n      // el: document.getElementById('main'),\n      el: '#main',\n      // 10px above the element\n      top: 10,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Named Routes Configuration\nDESCRIPTION: Configuration for both parent and child named routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/user/:id',\n    name: 'user-parent',\n    component: User,\n    children: [{ path: '', name: 'user', component: UserHome }],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Extending RouteMeta Interface for TypeScript Support in Vue Router\nDESCRIPTION: This snippet demonstrates how to extend the RouteMeta interface from vue-router to add type definitions for custom meta fields. It ensures type safety when working with route meta fields in a TypeScript environment.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/meta.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'vue-router'\n\n// 为了确保这个文件被当作一个模块，添加至少一个 `export` 声明\nexport {}\n\ndeclare module 'vue-router' {\n  interface RouteMeta {\n    // 是可选的\n    isAdmin?: boolean\n    // 每个路由都必须声明\n    requiresAuth: boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Path Example in TypeScript\nDESCRIPTION: Example showing how to define a path parameter in a route that matches dynamic segments.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/api/interfaces/RouteRecordMultipleViews.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/users/:id\" matches \"/users/1\" as well as \"/users/posva\".\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Transitions Based on Route Meta in Vue Router\nDESCRIPTION: This snippet shows how to apply custom transitions defined in route meta, with a fallback to a default transition.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<router-view v-slot=\"{ Component, route }\">\n  <!-- 使用任何自定义过渡和回退到 `fade` -->\n  <transition :name=\"route.meta.transition || 'fade'\">\n    <component :is=\"Component\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Router in JavaScript\nDESCRIPTION: Example of how to import Vue Router in a JavaScript file using ES modules syntax.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter } from 'vue-router'\n```\n\n----------------------------------------\n\nTITLE: Using Route Aliases Example in Vue Router TypeScript\nDESCRIPTION: Example showing how to define aliases for route records, which allows having path shorthands that behave like copies of the record.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/api/interfaces/RouteRecordBase.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/users/:id` matches `/users/1` as well as `/users/posva`.\n```\n\n----------------------------------------\n\nTITLE: Defining RouteRecordNormalized Interface in TypeScript\nDESCRIPTION: This snippet shows the structure of the RouteRecordNormalized interface with its properties. It includes types for various route-related concepts such as navigation guards, route components, and route meta information.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/api/interfaces/RouteRecordNormalized.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RouteRecordNormalized {\n  aliasOf: undefined | RouteRecordNormalized;\n  beforeEnter: undefined | NavigationGuardWithThis<undefined> | NavigationGuardWithThis<undefined>[];\n  children: RouteRecordRaw[];\n  components: undefined | null | Record<string, RawRouteComponent>;\n  instances: Record<string, undefined | null | ComponentPublicInstance>;\n  meta: RouteMeta;\n  name: undefined | RouteRecordName;\n  path: string;\n  props: Record<string, _RouteRecordProps>;\n  redirect: undefined | RouteRecordRedirectOption;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route with Multiple Views Example in TypeScript\nDESCRIPTION: Example showing how to define a route with multiple views, using the path property that can match dynamic segments.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/api/interfaces/RouteRecordMultipleViewsWithChildren.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n`/users/:id` matches `/users/1` as well as `/users/posva`.\n```\n```\n\n----------------------------------------\n\nTITLE: Relative Redirecting in Vue Router\nDESCRIPTION: Configuration showing how to implement relative redirects by transforming the original path. This example redirects user posts to user profile by replacing the end of the path string.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    // will always redirect /users/123/posts to /users/123/profile\n    path: '/users/:id/posts',\n    redirect: to => {\n      // the function receives the target route as the argument\n      return to.path.replace(/posts$/, 'profile')\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Webpack Chunk Grouping for Vue Router Components\nDESCRIPTION: Example of grouping related components into the same async chunk using webpack's named chunks feature with special comment syntax.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/lazy-loading.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserDetails = () =>\n  import(/* webpackChunkName: \"group-user\" */ './UserDetails.vue')\nconst UserDashboard = () =>\n  import(/* webpackChunkName: \"group-user\" */ './UserDashboard.vue')\nconst UserProfileEdit = () =>\n  import(/* webpackChunkName: \"group-user\" */ './UserProfileEdit.vue')\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Route in Vue Router 4\nDESCRIPTION: Demonstrates how to access the parent route in Vue Router 4 after the removal of the 'parent' property from route locations.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst parent = this.$route.matched[this.$route.matched.length - 2]\n```\n\n----------------------------------------\n\nTITLE: Replacing History State in Vue Router 4\nDESCRIPTION: Shows how to properly replace history state in Vue Router 4, preserving the current state information used by the router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// replace\nhistory.pushState(myState, '', url)\n// with\nawait router.push(url)\nhistory.replaceState({ ...history.state, ...myState }, '')\n```\n\n----------------------------------------\n\nTITLE: 导航完成后获取数据的Post组件实现 (Vue Options API)\nDESCRIPTION: 使用Vue Options API实现的Post组件，展示了如何在导航完成后获取数据。组件在created钩子中通过$watch监听路由参数变化，并使用async/await处理API请求，同时管理加载状态和错误处理。\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/data-fetching.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"post\">\n    <div v-if=\"loading\" class=\"loading\">Loading...</div>\n\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\n\n    <div v-if=\"post\" class=\"content\">\n      <h2>{{ post.title }}</h2>\n      <p>{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getPost } from './api.js'\n\nexport default {\n  data() {\n    return {\n      loading: false,\n      post: null,\n      error: null,\n    }\n  },\n  created() {\n    // 侦听路由的参数，以便再次获取数据\n    this.$watch(\n      () => this.$route.params.id,\n      this.fetchData,\n      // 组件创建完后获取数据，\n      // 此时 data 已经被监听了\n      { immediate: true }\n    )\n  },\n  methods: {\n    async fetchData(id) {\n      this.error = this.post = null\n      this.loading = true\n\n      try {\n        // 用获取数据的工具函数 / API 包裹器替换 `getPost`\n        this.post = await getPost(id)\n      } catch (err) {\n        this.error = err.toString()\n      } finally {\n        this.loading = false\n      }\n    },\n  },\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Resolving Named Route in Vue Router 4\nDESCRIPTION: This code snippet shows how to resolve a named route in Vue Router 4. It demonstrates that resolving to the 'dashboard' named route now produces a URL without a trailing slash.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/migration/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.resolve({ name: 'dashboard' }).href // '/dashboard'\n```\n\n----------------------------------------\n\nTITLE: IIS Web.config Configuration for Vue Router\nDESCRIPTION: IIS URL Rewrite configuration to handle HTML5 history mode routing in web.config file.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <rewrite>\n      <rules>\n        <rule name=\"Handle History Mode and custom 404/500\" stopProcessing=\"true\">\n          <match url=\"(.*)\" />\n          <conditions logicalGrouping=\"MatchAll\">\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          </conditions>\n          <action type=\"Rewrite\" url=\"/\" />\n        </rule>\n      </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: 创建基本Vue Router模板布局\nDESCRIPTION: 展示了Vue Router的基本布局组件，包括RouterLink用于创建导航链接和RouterView用于渲染当前路由对应的组件。这个模板还展示了如何访问当前路由信息。\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <h1>Hello App!</h1>\n  <p>\n    <strong>Current route path:</strong> {{ $route.fullPath }}\n  </p>\n  <nav>\n    <RouterLink to=\"/\">Go to Home</RouterLink>\n    <RouterLink to=\"/about\">Go to About</RouterLink>\n  </nav>\n  <main>\n    <RouterView />\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: 在导航完成前获取数据的组件实现\nDESCRIPTION: 使用Vue Router导航守卫在路由切换前获取数据的实现。通过beforeRouteEnter和beforeRouteUpdate钩子函数来处理数据获取，只有当数据成功获取后才完成导航，显示新视图，同时处理错误情况。\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/data-fetching.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  data() {\n    return {\n      post: null,\n      error: null,\n    }\n  },\n  beforeRouteEnter(to, from, next) {\n    try {\n      const post = await getPost(to.params.id)\n      // `setPost` 方法定义在下面的代码中\n      next(vm => vm.setPost(post))\n    } catch (err) {\n      // `setError` 方法定义在下面的代码中\n      next(vm => vm.setError(err))\n    }\n  },\n  // 路由改变前，组件就已经渲染完了\n  // 逻辑稍稍不同\n  async beforeRouteUpdate(to, from) {\n    this.post = null\n    getPost(to.params.id).then(this.setPost).catch(this.setError)\n  },\n  methods: {\n    setPost(post) {\n      this.post = post\n    },\n    setError(err) {\n      this.error = err.toString()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Navigation Failure Detection with afterEach\nDESCRIPTION: This snippet demonstrates how to use the afterEach navigation guard to globally detect and handle navigation failures, which is useful for analytics or logging.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/navigation-failures.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.afterEach((to, from, failure) => {\n  if (failure) {\n    sendToAnalytics(to, from, failure)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Redirect in Vue Router 4\nDESCRIPTION: This snippet illustrates the effect of the empty path change on child redirects in Vue Router 4. It shows that a redirect from an empty path child route now redirects to '/home' instead of '/parent/home'.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/migration/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/parent',\n    component: Parent,\n    children: [\n      // 现在将重定向到 `/home` 而不是 `/parent/home`\n      { path: '', redirect: 'home' },\n      { path: 'home', component: Home },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Vue Router TypeScript Type Mappings\nDESCRIPTION: Mapping of renamed TypeScript types between Vue Router 3 and Vue Router 4 for improved type consistency and expressiveness. The changes affect route configuration, location, and normalized route types.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Vue Router 3 -> Vue Router 4 type mappings:\n// RouteConfig -> RouteRecordRaw\n// Location -> RouteLocation\n// Route -> RouteLocationNormalized\n```\n\n----------------------------------------\n\nTITLE: Combining Custom Regex with Repeatable Parameters in Vue Router\nDESCRIPTION: Shows how to combine custom regex with repeatable parameters in route definitions. This allows for more specific matching patterns with repeatable sections.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/route-matching-syntax.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  // only match numbers\n  // matches /1, /1/2, etc\n  { path: '/:chapters(\\\\d+)+' },\n  // matches /, /1, /1/2, etc\n  { path: '/:chapters(\\\\d+)*' },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Chunks in Vite for Vue Router Lazy Loading\nDESCRIPTION: Shows how to configure manual chunks in Vite's rollup options to group related components for lazy loading in Vue Router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/lazy-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      // https://rollupjs.org/guide/en/#outputmanualchunks\n      output: {\n        manualChunks: {\n          'group-user': [\n            './src/UserDetails',\n            './src/UserDashboard',\n            './src/UserProfileEdit',\n          ],\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Avoiding Slow Regex Patterns in Vue Router\nDESCRIPTION: Demonstrates a poor practice of using slow regex patterns in route definitions. This example shows a pattern that can lead to serious performance issues.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/route-matching-syntax.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst routes = [\n  // This creates a very slow regex because of the greedy `.*` followed by `*` and a static string\n  { path: '/:pathMatch(.*)*/something-at-the-end' },\n]\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration for HTML5 Mode\nDESCRIPTION: Nginx server configuration for Vue Router's HTML5 mode. This configuration uses try_files to serve index.html when the requested file or directory doesn't exist.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n  try_files $uri $uri/ /index.html;\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Nested Route Configuration in Vue Router\nDESCRIPTION: Example showing the equivalent static configuration for the nested routes that were added dynamically in the previous example. This demonstrates the structure that the dynamic operations create.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/dynamic-routing.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.addRoute({\n  name: 'admin',\n  path: '/admin',\n  component: Admin,\n  children: [{ path: 'settings', component: AdminSettings }],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Memory Mode in Vue Router\nDESCRIPTION: Implementation of memory history mode using createMemoryHistory(). Suitable for Node environments and SSR where URL manipulation isn't needed.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createMemoryHistory } from 'vue-router'\n\nconst router = createRouter({\n  history: createMemoryHistory(),\n  routes: [\n    //...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Forcing Transitions Between Reused Views in Vue Router\nDESCRIPTION: This code shows how to force transitions between reused views by adding a key attribute based on the route path.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_5\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component, route }\">\n  <transition name=\"fade\">\n    <component :is=\"Component\" :key=\"route.path\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Using Match-All Parameters Correctly in Vue Router\nDESCRIPTION: Shows the correct way to use match-all parameters in route definitions. This example places the match-all parameter at the end of the URL to avoid performance issues.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/route-matching-syntax.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst routes = [\n  // This is fine because the `.*` is at the end\n  { path: '/:pathMatch(.*)/something-at-the-end' },\n]\n```\n\n----------------------------------------\n\nTITLE: Apache Server Configuration for HTML5 Mode\nDESCRIPTION: Apache server configuration using mod_rewrite to handle Vue Router's HTML5 mode. This configuration redirects all requests to index.html when the requested file doesn't exist.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_negotiation.c>\n  Options -MultiViews\n</IfModule>\n\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Multiple Aliases in Nested Routes in Vue Router\nDESCRIPTION: Configuration showing how to use multiple aliases in a nested route structure. This example provides three different URLs that all render the same UserList component.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/users',\n    component: UsersLayout,\n    children: [\n      // this will render the UserList for these 3 URLs\n      // - /users\n      // - /users/list\n      // - /people\n      { path: '', component: UserList, alias: ['/people', 'list'] },\n    ],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Async Router Push Example - JavaScript\nDESCRIPTION: Shows proper asynchronous navigation handling using await to ensure menu closes after navigation completes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-failures.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait router.push('/my-profile')\nthis.isMenuOpen = false\n```\n\n----------------------------------------\n\nTITLE: Using Promise Resolution for Component Definition in Vue Router\nDESCRIPTION: Shows an alternative way to define lazy-loaded components using a function that returns a Promise resolving to the component definition.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/lazy-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserDetails = () =>\n  Promise.resolve({\n    /* 组件定义 */\n  })\n```\n\n----------------------------------------\n\nTITLE: IIS Web.config for HTML5 Mode\nDESCRIPTION: Internet Information Services (IIS) configuration using the URL Rewrite module to support Vue Router's HTML5 mode by redirecting all requests to the root when files don't exist.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <rewrite>\n      <rules>\n        <rule name=\"Handle History Mode and custom 404/500\" stopProcessing=\"true\">\n          <match url=\"(.*)\" />\n          <conditions logicalGrouping=\"MatchAll\">\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n            <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          </conditions>\n          <action type=\"Rewrite\" url=\"/\" />\n        </rule>\n      </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Router Top Level Component Setup\nDESCRIPTION: Basic setup of the top-level App.vue component with router-view.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- App.vue -->\n<template>\n  <router-view />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Navigation Failure Detection - JavaScript\nDESCRIPTION: Example showing how to detect if navigation was prevented using the Promise result from router.push.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-failures.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst navigationResult = await router.push('/my-profile')\n\nif (navigationResult) {\n  // navigation prevented\n} else {\n  // navigation succeeded (this includes the case of a redirection)\n  this.isMenuOpen = false\n}\n```\n\n----------------------------------------\n\nTITLE: Promise-Based Component Definition in Vue Router\nDESCRIPTION: Shows how to use Promise.resolve to define a component for lazy loading in Vue Router routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/lazy-loading.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst UserDetails = () =>\n  Promise.resolve({\n    /* component definition */\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive and Strict Route Options in Vue Router\nDESCRIPTION: Demonstrates how to configure sensitive and strict options for routes. These options allow for case-sensitive matching and exact path matching without trailing slashes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/route-matching-syntax.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    // will match /users/posva but not:\n    // - /users/posva/ because of strict: true\n    // - /Users/posva because of sensitive: true\n    { path: '/users/:id', sensitive: true },\n    // will match /users, /Users, and /users/42 but not /users/ or /users/42/\n    { path: '/users/:id?' },\n  ],\n  strict: true, // applies to all routes\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Components in Markdown using script setup\nDESCRIPTION: A Vue script tag that imports and sets up components needed for the home page, including the HomeSponsors component and a CSS file for home links styling.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport HomeSponsors from './.vitepress/theme/components/HomeSponsors.vue'\nimport './.vitepress/theme/styles/home-links.css'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Node.js Server Implementation for HTML5 Mode\nDESCRIPTION: Native Node.js server implementation to support Vue Router's HTML5 mode. This basic HTTP server always serves index.html regardless of the requested URL.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http')\nconst fs = require('fs')\nconst httpPort = 80\n\nhttp\n  .createServer((req, res) => {\n    fs.readFile('index.html', 'utf-8', (err, content) => {\n      if (err) {\n        console.log('We cannot open \"index.html\" file.')\n      }\n\n      res.writeHead(200, {\n        'Content-Type': 'text/html; charset=utf-8',\n      })\n\n      res.end(content)\n    })\n  })\n  .listen(httpPort, () => {\n    console.log('Server listening on: http://localhost:%s', httpPort)\n  })\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation Failure Properties - JavaScript\nDESCRIPTION: Example showing how to access to and from properties of a navigation failure object.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-failures.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.push('/admin').then(failure => {\n  if (isNavigationFailure(failure, NavigationFailureType.aborted)) {\n    failure.to.path // '/admin'\n    failure.from.path // '/'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hash Mode in Vue Router\nDESCRIPTION: Configuration for hash-based routing using createWebHashHistory(). This mode uses URL hash for routing and doesn't require server configuration but impacts SEO.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createWebHashHistory } from 'vue-router'\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes: [\n    //...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Resolving Named Routes with Repeatable Parameters in Vue Router\nDESCRIPTION: Demonstrates how to resolve named routes with repeatable parameters. This shows the difference in behavior between '*' and '+' modifiers when working with named routes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/route-matching-syntax.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// given { path: '/:chapters*', name: 'chapters' },\nrouter.resolve({ name: 'chapters', params: { chapters: [] } }).href\n// produces /\nrouter.resolve({ name: 'chapters', params: { chapters: ['a', 'b'] } }).href\n// produces /a/b\n\n// given { path: '/:chapters+', name: 'chapters' },\nrouter.resolve({ name: 'chapters', params: { chapters: [] } }).href\n// throws an Error because `chapters` is empty\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL for Router in JavaScript\nDESCRIPTION: Demonstrates how to set the base URL for the router using the new syntax, passing it as an argument to createWebHistory.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\ncreateRouter({\n  history: createWebHistory('/base-directory/'),\n  routes: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Catch-All Routes in JavaScript\nDESCRIPTION: Shows how to define catch-all routes using the new syntax with a parameter and custom regex, replacing the previous star (*) syntax.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  // pathMatch is the name of the param, e.g., going to /not/found yields\n  // { params: { pathMatch: ['not', 'found'] }}\n  // this is thanks to the last *, meaning repeated params and it is necessary if you\n  // plan on directly navigating to the not-found route using its name\n  { path: '/:pathMatch(.*)*', name: 'not-found', component: NotFound },\n  // if you omit the last `*`, the `/` character in params will be encoded when resolving or pushing\n  { path: '/:pathMatch(.*)', name: 'bad-not-found', component: NotFound },\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering HomeSponsors Component in Vue Template\nDESCRIPTION: A self-closing Vue component tag that renders the HomeSponsors component on the page.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<HomeSponsors />\n```\n\n----------------------------------------\n\nTITLE: Basic Alias Configuration in Vue Router\nDESCRIPTION: Simple alias configuration that allows '/home' to be an alias for the root path ('/'). Unlike redirects, with aliases the URL remains unchanged while the component rendered is from the aliased path.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/redirect-and-alias.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [{ path: '/', component: Homepage, alias: '/home' }]\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Router Components\nDESCRIPTION: Example of importing RouterLink component explicitly from vue-router package, though global registration makes this optional.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RouterLink } from 'vue-router'\n```\n\n----------------------------------------\n\nTITLE: Customizing router-link with v-slot API in Vue\nDESCRIPTION: Shows how to customize router-link behavior using the v-slot API, replacing the removed event and tag props.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<router-link to=\"/about\" custom v-slot=\"{ navigate }\">\n  <span @click=\"navigate\" @keypress.enter=\"navigate\" role=\"link\">About Us</span>\n</router-link>\n```\n\n----------------------------------------\n\nTITLE: Adding Router Instance to Vue 3 App\nDESCRIPTION: Shows how to add the router instance to a Vue 3 application, replacing the removed router.app property.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/migration/index.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(router)\nrouter.app = app\n```\n\n----------------------------------------\n\nTITLE: Dynamic Transition Implementation in Vue Router Template\nDESCRIPTION: Implementation of the router view template that uses dynamic transition names from route meta.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/transitions.md#2025-04-21_snippet_3\n\nLANGUAGE: vue-html\nCODE:\n```\n<!-- use a dynamic transition name -->\n<router-view v-slot=\"{ Component, route }\">\n  <transition :name=\"route.meta.transition\">\n    <component :is=\"Component\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Vue Router Component Usage - PascalCase\nDESCRIPTION: Example of using RouterView component in PascalCase format in Vue templates.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<RouterView>\n```\n\n----------------------------------------\n\nTITLE: Passing Props and Slots to Route Components in Vue Router\nDESCRIPTION: Demonstrates how to pass props and slots to route components using the RouterView slot. Note that this approach applies the same props and slots to all route components.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/router-view-slot.md#2025-04-21_snippet_4\n\nLANGUAGE: vue-html\nCODE:\n```\n<router-view v-slot=\"{ Component }\">\n  <component :is=\"Component\" some-prop=\"a value\">\n    <p>Some slotted content</p>\n  </component>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Configuring Route with props: true\nDESCRIPTION: Setting props: true in route configuration to pass route.params as component props, improving component reusability.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/passing-props.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst routes = [\n  { path: '/user/:id', component: User, props: true }\n]\n```\n\n----------------------------------------\n\nTITLE: Detecting Navigation Failures in Vue Router\nDESCRIPTION: This snippet shows how to check if a navigation was successful or blocked by examining the result returned from router.push(). A truthy value indicates the navigation was blocked.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/navigation-failures.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst navigationResult = await router.push('/my-profile')\n\nif (navigationResult) {\n  // 导航被阻止\n} else {\n  // 导航成功 (包括重新导航的情况)\n  this.isMenuOpen = false\n}\n```\n\n----------------------------------------\n\nTITLE: Basic User Component Implementation\nDESCRIPTION: Simple User component showing route parameter usage.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/nested-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<!-- User.vue -->\n<template>\n  <div>\n    User {{ $route.params.id }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using $route in Vue Component\nDESCRIPTION: Initial example showing a User component that's tightly coupled to the route by directly accessing $route.params.id.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/passing-props.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- User.vue -->\n<template>\n  <div>\n    User {{ $route.params.id }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Redirection Detection - JavaScript\nDESCRIPTION: Shows how to detect if a navigation resulted in a redirection by checking the redirectedFrom property.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-failures.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait router.push('/my-profile')\nif (router.currentRoute.value.redirectedFrom) {\n  // redirectedFrom is resolved route location like to and from in navigation guards\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Redirects in Vue Router\nDESCRIPTION: This snippet demonstrates how to check if the current route resulted from a redirect by examining the redirectedFrom property of the current route, which is useful for conditional logic after navigation.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/navigation-failures.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait router.push('/my-profile')\nif (router.currentRoute.value.redirectedFrom) {\n  // redirectedFrom 是解析出的路由地址，就像导航守卫中的 to和 from\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route with Component\nDESCRIPTION: JavaScript code for defining a route with a User component that accesses route params directly.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/passing-props.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport User from './User.vue'\n\n// these are passed to `createRouter`\nconst routes = [\n  { path: '/users/:id', component: User },\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Router with yarn\nDESCRIPTION: Command to add Vue Router version 4 to a project using yarn package manager.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vue-router@4\n```\n\n----------------------------------------\n\nTITLE: Using Function Mode for Dynamic Props in Vue Router\nDESCRIPTION: This snippet demonstrates how to use a function to dynamically generate props based on the route in Vue Router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/search',\n    component: SearchUser,\n    props: route => ({ query: route.query.q })\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Vue Router In-DOM Template Usage\nDESCRIPTION: Example of using router-view component in DOM templates where kebab-case and explicit closing tags are required.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<router-view></router-view>\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vue project with npm\nDESCRIPTION: Command to create a new Vue.js project using create-vue with npm, which includes an option to add Vue Router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vue@latest\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example of Route Path Definition\nDESCRIPTION: Demonstrates how to define a route path pattern that matches dynamic segments.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/api/interfaces/RouteRecordSingleViewWithChildren.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/users/:id\" matches \"/users/1\" as well as \"/users/posva\"\n```\n\n----------------------------------------\n\nTITLE: Using Object Mode for Static Props in Vue Router\nDESCRIPTION: This snippet shows how to use the object mode to pass static props to a component in Vue Router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/promotion/from-newsletter',\n    component: Promotion,\n    props: { newsletterPopup: false }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Vercel Configuration for Vue Router\nDESCRIPTION: Vercel deployment configuration in vercel.json to handle HTML5 history mode routing.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rewrites\": [{ \"source\": \"/:path*\", \"destination\": \"/index.html\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Configuration for HTML5 Mode\nDESCRIPTION: Firebase hosting configuration in firebase.json that redirects all requests to index.html to support Vue Router's HTML5 mode in a Firebase-hosted application.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"public\": \"dist\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing HomeSponsors Component in Vue\nDESCRIPTION: This snippet demonstrates how to import and use the HomeSponsors component in a Vue.js setup script. It's typically used in a Vue single-file component to include sponsor information on the home page.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport HomeSponsors from './.vitepress/theme/components/HomeSponsors.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with a Path in Vue Router\nDESCRIPTION: Example of defining a route with a path in Vue Router. This snippet shows a basic route configuration object.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  path: '/somewhere',\n  name: 'somewhere'\n}\n```\n\n----------------------------------------\n\nTITLE: Apache Server Configuration for Vue Router\nDESCRIPTION: Apache server configuration with mod_rewrite to handle HTML5 history mode routing.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/essentials/history-mode.md#2025-04-21_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\n<IfModule mod_negotiation.c>\n  Options -MultiViews\n</IfModule>\n\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule . /index.html [L]\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Defining Route Path Example in TypeScript\nDESCRIPTION: Example showing how to define a route path parameter that matches dynamic values.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/api/interfaces/RouteRecordSingleView.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/users/:id\" matches \"/users/1\" as well as \"/users/posva\".\n```\n\n----------------------------------------\n\nTITLE: Vue Router Component Usage - kebab-case\nDESCRIPTION: Example of using router-view component in kebab-case format in Vue templates.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<router-view>\n```\n\n----------------------------------------\n\nTITLE: Using Router Link with State in Vue Router\nDESCRIPTION: Example of using <router-link> component to navigate while passing state data. This shows how to pass data without using params.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<router-link :to=\"{ name: 'somewhere', state: { myData } }\">...</router-link>\n<button\n  @click=\"$router.push({ name: 'somewhere', state: { myData } })\"\n>...</button>\n```\n\n----------------------------------------\n\nTITLE: Vite Manual Chunk Configuration for Route Components\nDESCRIPTION: Configuration example for grouping route components into manual chunks using Vite's rollupOptions configuration.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/lazy-loading.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      // https://rollupjs.org/guide/en/#outputmanualchunks\n      output: {\n        manualChunks: {\n          'group-user': [\n            './src/UserDetails',\n            './src/UserDashboard',\n            './src/UserProfileEdit',\n          ],\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Supporting JSX and TSX in RouterLink and RouterView Components\nDESCRIPTION: Vue Router now supports JSX and TSX for RouterLink and RouterView components, allowing for more flexible component definitions.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JSX\n<RouterLink to=\"/home\">Home</RouterLink>\n\n// TSX\n<RouterView />\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Project with Vue Router using pnpm\nDESCRIPTION: Command to scaffold a new Vue project with Vue Router using the create-vue tool with pnpm, which provides a complete starting point for exploring Vue Router features.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm create vue\n```\n\n----------------------------------------\n\nTITLE: Alternative Vue Router Registration Syntax\nDESCRIPTION: An alternative way to register the Vue Router plugin with a Vue application by storing the app instance in a variable before calling use() and mount().\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/index.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst app = createApp(App)\napp.use(router)\napp.mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vue project with pnpm\nDESCRIPTION: Command to create a new Vue.js project using create-vue with pnpm, which includes an option to add Vue Router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm create vue\n```\n\n----------------------------------------\n\nTITLE: Allowing Null or Undefined for Router Params\nDESCRIPTION: Modifies the router to accept null or undefined values for route parameters.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nallow null | undefined for params\n```\n\n----------------------------------------\n\nTITLE: Basic Router Push Example - JavaScript\nDESCRIPTION: Demonstrates incorrect synchronous navigation handling that closes menu immediately without waiting for navigation completion.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/guide/advanced/navigation-failures.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.push('/my-profile')\nthis.isMenuOpen = false\n```\n\n----------------------------------------\n\nTITLE: Creating a new Vue project with yarn\nDESCRIPTION: Command to create a new Vue.js project using create-vue with yarn, which includes an option to add Vue Router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn create vue\n```\n\n----------------------------------------\n\nTITLE: Improving onBeforeRoute Warning Message\nDESCRIPTION: Enhances the warning message for onBeforeRoute hooks to provide more helpful information to developers.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimprove message for onBeforeRoute*()\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Router with pnpm\nDESCRIPTION: Command to add Vue Router version 4 to a project using pnpm package manager.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add vue-router@4\n```\n\n----------------------------------------\n\nTITLE: Accessing Vue Router globally\nDESCRIPTION: Example of how to access Vue Router when it's exposed as a global object, typically when using a CDN.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nVueRouter.createRouter(...)\n```\n\n----------------------------------------\n\nTITLE: Invalidating Ongoing Navigation on Unmount\nDESCRIPTION: Ensures that any ongoing navigation is invalidated when the router is unmounted to prevent unexpected behavior.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ninvalidate ongoing navigation when unmounting\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Router with npm\nDESCRIPTION: Command to install Vue Router version 4 using npm package manager.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-router@4\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Router 4 via npm\nDESCRIPTION: Command to install Vue Router 4 in an existing Vue project using npm package manager.\nSOURCE: https://github.com/vuejs/router/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vue-router@4\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up Vue Components for Vue Router Documentation\nDESCRIPTION: This script imports the HomeSponsors component and a CSS file for home links styling. It uses the Vue 3 composition API with the <script setup> syntax.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\nimport HomeSponsors from '../.vitepress/theme/components/HomeSponsors.vue'\nimport '../.vitepress/theme/styles/home-links.css'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router Documentation Homepage in Markdown\nDESCRIPTION: This code snippet defines the structure and content of the Vue Router documentation homepage using Markdown and YAML frontmatter. It includes metadata, hero section configuration, and a list of features.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: home\n\ntitle: Vue Router\ntitleTemplate: Vue.js 的官方路由\n\nhero: \n  name: Vue Router\n  text: Vue.js 的官方路由\n  tagline: 为 Vue.js 提供富有表现力、可配置的、方便的路由\n  image:\n    src: /logo.svg\n    alt: Vue Router\n  actions:\n    - theme: brand\n      text: 入门 →\n      link: /zh/introduction\n    - theme: cta vueschool\n      text: 免费视频课程\n      link: https://vueschool.io/courses/vue-router-4-for-everyone?friend=vuerouter&utm_source=vuerouter&utm_medium=link&utm_campaign=homepage\n    - theme: cta vue-mastery\n      text: Get the Vue Router Cheat Sheet\n      link: https://www.vuemastery.com/vue-router?coupon=ROUTER-DOCS&via=eduardo\n\nfeatures:\n  - title: 🛣 富有表现力的路由语法\n    details: 用直观且强大的语法来定义静态或动态路由。\n  - title: 🛑 细致的导航控制\n    details: 可拦截任何导航并更精确地控制其结果。\n  - title: 🧱 基于组件的配置方法\n    details: 将每条路由映射到应该显示的组件上。\n  - title: 🔌 支持历史模式\n    details: 有 HTML5、hash 或记忆历史模式可供选择。\n  - title: 🎚 支持滚动控制\n    details: 可精确控制每个页面的滚动位置。\n  - title: 🌐 支持自动编码\n    details: 可直接在代码中使用 unicode 字符（你好）。\n---\n```\n\n----------------------------------------\n\nTITLE: 使用选项式API访问路由器\nDESCRIPTION: 展示了在组件内使用选项式API访问路由器实例的方法。通过this.$router可以获取路由器实例并使用push方法进行编程式导航。\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/index.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  methods: {\n    goToAbout() {\n      this.$router.push('/about')\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Props in Vue Component (Options API)\nDESCRIPTION: This snippet demonstrates how to use props in a Vue component using the Options API, removing direct dependency on $route.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<!-- User.vue -->\n<script>\nexport default {\n  props: {\n    id: String\n  }\n}\n</script>\n\n<template>\n  <div>\n    User {{ id }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering HomeSponsors Component in Vue Router Documentation\nDESCRIPTION: This HTML snippet renders the HomeSponsors component, which likely displays sponsor information on the Vue Router documentation homepage.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<HomeSponsors />\n```\n\n----------------------------------------\n\nTITLE: Passing Props through RouterView Slot in Vue\nDESCRIPTION: This snippet shows how to pass arbitrary props to all view components using the RouterView slot in Vue.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<RouterView v-slot=\"{ Component }\">\n  <component\n    :is=\"Component\"\n    view-prop=\"value\"\n   />\n</RouterView>\n```\n\n----------------------------------------\n\nTITLE: Router Go Promise Implementation Example\nDESCRIPTION: Example code showing how to implement a Promise-based router.go() functionality that works in most scenarios using event listeners and router hooks. This code demonstrates proper cleanup of event listeners and navigation tracking.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport function go(delta) {\n  return new Promise((resolve, reject) => {\n    function popStateListener() {\n      clearTimeout(timeout)\n    }\n    window.addEventListener('popstate', popStateListener)\n\n    function clearHooks() {\n      removeAfterEach()\n      removeOnError()\n      window.removeEventListener('popstate', popStateListener)\n    }\n\n    // if the popstate event is not called, consider this a failure\n    const timeout = setTimeout(() => {\n      clearHooks()\n      reject(new Error('Failed to use router.go()'))\n      // It's unclear of what value would always work here\n    }, 10)\n\n    setImmediate\n\n    const removeAfterEach = router.afterEach((_to, _from, failure) => {\n      clearHooks()\n      resolve(failure)\n    })\n    const removeOnError = router.onError(err => {\n      clearHooks()\n      reject(err)\n    })\n\n    router.go(delta)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Hash History Base URL Handling in Vue Router\nDESCRIPTION: When providing a base for hash histories, a trailing slash is now necessary to create a URL starting with '/#/'. This allows routing in simple files without server configuration.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old behavior\nconst router = createRouter({\n  history: createWebHashHistory('folder'),\n  // ...\n})\n\n// New behavior\nconst router = createRouter({\n  history: createWebHashHistory('folder/'),\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Scroll Behavior Options in Vue Router\nDESCRIPTION: Changes to the scrollBehavior API, renaming 'selector' to 'el', allowing 'el' to accept an Element, and passing 'left' and 'top' directly instead of in an 'offset' object.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nscrollBehavior(to, from, savedPosition) {\n  // Old syntax\n  return { selector: '#app', offset: { x: 0, y: 0 } }\n\n  // New syntax\n  return { el: '#app', top: 0, left: 0 }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Router with HTML5 Mode\nDESCRIPTION: Creating a Vue Router instance with HTML5 mode using createWebHistory(). This mode creates clean URLs without hash fragments but requires server configuration to handle direct URL access.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/history-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRouter, createWebHistory } from 'vue-router'\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: [\n    //...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Router Push Without Waiting\nDESCRIPTION: This example shows a problematic implementation that doesn't wait for navigation to complete before executing subsequent code, which may lead to incorrect behavior.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/navigation-failures.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.push('/my-profile')\nthis.isMenuOpen = false\n```\n\n----------------------------------------\n\nTITLE: Adding Data in Navigation Guards in Vue Router\nDESCRIPTION: Example of using a navigation guard to add data to the route's meta object. This demonstrates how to pass transient state during navigation.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.beforeEach(async to => {\n  if (to.meta.shouldFetch) {\n    // name `data` whatever you want\n    to.meta.data = await fetchSomething()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating with Router Push in Vue Router\nDESCRIPTION: Example of using router.push() to navigate to a named route with params. This demonstrates a navigation that will be affected by changes in param handling.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.push({ name: 'somewhere', params: { oops: 'gets removed' } })\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Transitions Based on Route in Vue Router\nDESCRIPTION: This code demonstrates how to dynamically apply transitions based on the current route's meta information.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/advanced/transitions.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- 使用动态过渡名称 -->\n<router-view v-slot=\"{ Component, route }\">\n  <transition :name=\"route.meta.transition\">\n    <component :is=\"Component\" />\n  </transition>\n</router-view>\n```\n\n----------------------------------------\n\nTITLE: Configuring Props for Named Views in Vue Router\nDESCRIPTION: This snippet demonstrates how to configure props for routes with named views in Vue Router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  {\n    path: '/user/:id',\n    components: { default: User, sidebar: Sidebar },\n    props: { default: true, sidebar: false }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Allowing Functional Components for Routes in Vue Router\nDESCRIPTION: Vue Router now supports using functional components for route definitions, providing more flexibility in route component structure.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst router = createRouter({\n  routes: [\n    {\n      path: '/functional',\n      component: () => h('div', 'Functional Component')\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Params in Vue Component Template\nDESCRIPTION: This snippet shows how to access route parameters directly in a Vue component template using $route.params.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- User.vue -->\n<template>\n  <div>\n    User {{ $route.params.id }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Object with Custom Stringify in Query\nDESCRIPTION: Fixes an issue related to handling empty objects when using a custom stringify function for query parameters.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nempty object with custom stringify\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Router Instances in Vue Router\nDESCRIPTION: Vue Router now allows multiple router instances, with unique first navigation for multi-app setups.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst router1 = createRouter({\n  // ...\n})\n\nconst router2 = createRouter({\n  // ...\n})\n\n// Both routers can be used independently\n```\n\n----------------------------------------\n\nTITLE: Configuring Route to Pass Params as Props\nDESCRIPTION: This snippet shows how to configure a route to pass route parameters as props to the component.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/docs/zh/guide/essentials/passing-props.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst routes = [\n  { path: '/user/:id', component: User, props: true }\n]\n```\n\n----------------------------------------\n\nTITLE: Vue Router Route Setup Example\nDESCRIPTION: Example showing route setup in Vue Router v4, with route params pattern changes and catch-all routes\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/:catchAll(.*)\n```\n\n----------------------------------------\n\nTITLE: Vue Router Component Setup Example\nDESCRIPTION: Example showing route access in component setup() method using composition API\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nsetup () {\n  return { params: toRefs(useRoute()).params }\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing Base in Memory History\nDESCRIPTION: Ensures the base path is normalized when using memory history in Vue Router.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nensure base is normalized in memory history\n```\n\n----------------------------------------\n\nTITLE: Displaying Router View Path in DevTools\nDESCRIPTION: Adds functionality to display the router view path in Vue DevTools for debugging purposes.\nSOURCE: https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndisplay router view path\n```"
  }
]