[
  {
    "owner": "graphql",
    "repo": "graphql.github.io",
    "content": "TITLE: Meta Fields in GraphQL Queries\nDESCRIPTION: Shows how to use the __typename meta field to determine the concrete type returned by a union type field. This is useful when handling different possible return types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  search(text: \"an\") {\n    __typename\n    ... on Human {\n      name\n    }\n    ... on Droid {\n      name\n    }\n    ... on Starship {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Server Implementation with Object Types\nDESCRIPTION: A full Express.js server implementation that exposes a GraphQL API with custom object types. It combines schema definition, object implementation with ES6 classes, and server setup using express and graphql-http.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/object-types.mdx#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require(\"express\")\nvar { createHandler } = require(\"graphql-http/lib/use/express\")\nvar { buildSchema } = require(\"graphql\")\n\n// Construct a schema, using GraphQL schema language\nvar schema = buildSchema(/* GraphQL */`\n  type RandomDie {\n    numSides: Int!\n    rollOnce: Int!\n    roll(numRolls: Int!): [Int]\n  }\n\n  type Query {\n    getDie(numSides: Int): RandomDie\n  }\n`)\n\n// This class implements the RandomDie GraphQL type\nclass RandomDie {\n  constructor(numSides) {\n    this.numSides = numSides\n  }\n\n  rollOnce() {\n    return 1 + Math.floor(Math.random() * this.numSides)\n  }\n\n  roll({ numRolls }) {\n    var output = []\n    for (var i = 0; i < numRolls; i++) {\n      output.push(this.rollOnce())\n    }\n    return output\n  }\n}\n\n// The root provides the top-level API endpoints\nvar root = {\n  getDie({ numSides }) {\n    return new RandomDie(numSides || 6)\n  },\n}\n\nvar app = express()\napp.all(\n  \"/graphql\",\n  createHandler({\n    schema: schema,\n    rootValue: root,\n  })\n)\napp.listen(4000)\nconsole.log(\"Running a GraphQL API server at localhost:4000/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Types for Star Wars Data Model\nDESCRIPTION: Defines core GraphQL types including Query, Character, Planet and Species. The schema establishes relationships between characters and their friends, home worlds and species, with support for basic attributes like names, climate and lifespan.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/schema.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hero: Character\n}\n\ntype Character {\n  name: String\n  friends: [Character]\n  homeWorld: Planet\n  species: Species\n}\n\ntype Planet {\n  name: String\n  climate: String\n}\n\ntype Species {\n  name: String\n  lifespan: Int\n  origin: Planet\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Types\nDESCRIPTION: Example schema definition showing Query, Human, Episode enum, and Starship types that will be used to demonstrate query execution\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/execution.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  human(id: ID!): Human\n}\n\ntype Human {\n  name: String\n  appearsIn: [Episode]\n  starships: [Starship]\n}\n\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n\ntype Starship {\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal 'Hello world' GraphQL Server with Ariadne\nDESCRIPTION: This code snippet demonstrates how to create a basic GraphQL server using Ariadne. It defines a simple schema with a 'hello' query, implements a resolver function, and sets up the GraphQL application. The server will respond with 'Hello world!' when the 'hello' query is executed.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/ariadne.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ariadne import ObjectType, gql, make_executable_schema\nfrom ariadne.asgi import GraphQL\n\ntype_defs = gql(\n    \"\"\"\n    type Query {\n        hello: String!\n    }\n    \"\"\"\n)\n\nquery_type = ObjectType(\"Query\")\n\n@query_type.field(\"hello\")\ndef resolve_hello(*_):\n    return \"Hello world!\"\n\nschema = make_executable_schema(type_defs, query_type)\n\napp = GraphQL(schema, debug=True)\n```\n\n----------------------------------------\n\nTITLE: Documentation with Descriptions in GraphQL Schema\nDESCRIPTION: Example showing how to add descriptions to types, fields, enums, and arguments in a GraphQL schema. It demonstrates both multi-line descriptions (using triple quotes) and single-line descriptions.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nA character from the Star Wars universe\n\"\"\"\ntype Character {\n  \"The name of the character.\"\n  name: String!\n}\n\n\"\"\"\nThe episodes in the Star Wars trilogy\n\"\"\"\nenum Episode {\n  \"Star Wars Episode IV: A New Hope, released in 1977.\" \n  NEWHOPE\n  \"Star Wars Episode V: The Empire Strikes Back, released in 1980.\"\n  EMPIRE\n  \"Star Wars Episode VI: Return of the Jedi, released in 1983.\"\n  JEDI\n}\n\n\"\"\"\nThe query type, represents all of the entry points into our object graph\n\"\"\"\ntype Query {\n  \"\"\"\n  Fetches the hero of a specified Star Wars film.\n  \"\"\"\n  hero(\n    \"The name of the film that the hero appears in.\"\n    episode: Episode\n  ): Character\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up an Express GraphQL Server\nDESCRIPTION: This code sets up a basic Express server with a GraphQL endpoint using graphql-http. It defines a simple schema with a 'hello' query and its resolver.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/running-an-express-graphql-server.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require(\"express\")\nvar { createHandler } = require(\"graphql-http/lib/use/express\")\nvar { buildSchema } = require(\"graphql\")\n\n// Construct a schema, using GraphQL schema language\nvar schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`)\n\n// The root provides a resolver function for each API endpoint\nvar root = {\n  hello() {\n    return \"Hello world!\"\n  },\n}\n\nvar app = express()\n\n// Create and use the GraphQL handler.\napp.all(\n  \"/graphql\",\n  createHandler({\n    schema: schema,\n    rootValue: root,\n  })\n)\n\n// Start the server at port\napp.listen(4000)\nconsole.log(\"Running a GraphQL API server at http://localhost:4000/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Defining Character Type with Name, Home World, and Friends in GraphQL\nDESCRIPTION: This GraphQL type definition creates a Character type with three fields: name (a String), homeWorld (a Planet object), and friends (a list of Character objects). It demonstrates the use of scalar types, object types, and list fields in GraphQL schema definition.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/code1.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Character {\n  name: String\n  homeWorld: Planet\n  friends: [Character]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Server with Schema Language using buildSchema\nDESCRIPTION: This example shows how to create a GraphQL server using Express and the buildSchema function. It defines a User type and Query type using GraphQL schema language, sets up a fake database for users, and implements a resolver to fetch users by ID.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/constructing-types.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require(\"express\")\nvar { createHandler } = require(\"graphql-http/lib/use/express\")\nvar { buildSchema } = require(\"graphql\")\n\nvar schema = buildSchema(`\n  type User {\n    id: String\n    name: String\n  }\n\n  type Query {\n    user(id: String): User\n  }\n`)\n\n// Maps id to User object\nvar fakeDatabase = {\n  a: {\n    id: \"a\",\n    name: \"alice\",\n  },\n  b: {\n    id: \"b\",\n    name: \"bob\",\n  },\n}\n\nvar root = {\n  user({ id }) {\n    return fakeDatabase[id]\n  },\n}\n\nvar app = express()\napp.all(\n  \"/graphql\",\n  createHandler({\n    schema: schema,\n    rootValue: root,\n  })\n)\napp.listen(4000)\nconsole.log(\"Running a GraphQL API server at localhost:4000/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GraphQL Schema and Query in Node.js\nDESCRIPTION: A complete example showing how to define a GraphQL schema, create resolvers, and execute a query. It imports the necessary GraphQL.js functions, defines a simple schema with a 'hello' query that returns a String, and sets up a resolver that returns 'Hello world!'.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/index.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar { graphql, buildSchema } = require(\"graphql\")\n\n// Construct a schema, using GraphQL schema language\nvar schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`)\n\n// The rootValue provides a resolver function for each API endpoint\nvar rootValue = {\n  hello() {\n    return \"Hello world!\"\n  }\n}\n\n// Run the GraphQL query '{ hello }' and print out the response\ngraphql({\n  schema,\n  source: \"{ hello }\",\n  rootValue\n}).then(response => {\n  console.log(response)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining an Object Type with SDL in GraphQL\nDESCRIPTION: Example of defining a Character object type using Schema Definition Language (SDL), showing fields with different types including non-null and list type modifiers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Character {\n  name: String!\n  appearsIn: [Episode!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Server with Mercurius and Fastify\nDESCRIPTION: This example demonstrates how to set up a basic GraphQL server using Mercurius with Fastify. It defines a simple schema with a hello query that accepts an optional name parameter, implements the resolver, and registers the Mercurius plugin with Fastify.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/mercurius.md#2025-04-08_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst Fastify = require(\"fastify\")\nconst mercurius = require(\"mercurius\")\n\nconst schema = `\n  type Query {\n    hello(name: String): String!\n  }\n`\n\nconst resolvers = {\n  Query: {\n    hello: async (_, { name }) => `hello ${name || \"world\"}`,\n  },\n}\n\nconst app = Fastify()\napp.register(mercurius, {\n  schema,\n  resolvers,\n})\n\napp.listen(3000)\n\n// Call IT!\n// curl 'http://localhost:3000/graphql' \\\n//  -H 'content-type: application/json' \\\n//  --data-raw '{\"query\":\"{ hello(name:\\\"Marcurius\\\") }\" }'\n```\n\n----------------------------------------\n\nTITLE: GraphQL Interface Type Definition\nDESCRIPTION: Defines a Character interface that specifies required fields for implementing types, including ID, name, friends, and appearances.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Server Programmatically with GraphQLSchema\nDESCRIPTION: This example demonstrates how to construct the same GraphQL server without using schema language, instead using the GraphQLSchema constructor and GraphQLObjectType. It programmatically defines User and Query types, implements resolvers directly in the type definitions, and sets up an Express server.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/constructing-types.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require(\"express\")\nvar { createHandler } = require(\"graphql-http/lib/use/express\")\nvar graphql = require(\"graphql\")\n\n// Maps id to User object\nvar fakeDatabase = {\n  a: {\n    id: \"a\",\n    name: \"alice\",\n  },\n  b: {\n    id: \"b\",\n    name: \"bob\",\n  },\n}\n\n// Define the User type\nvar userType = new graphql.GraphQLObjectType({\n  name: \"User\",\n  fields: {\n    id: { type: graphql.GraphQLString },\n    name: { type: graphql.GraphQLString },\n  },\n})\n\n// Define the Query type\nvar queryType = new graphql.GraphQLObjectType({\n  name: \"Query\",\n  fields: {\n    user: {\n      type: userType,\n      // `args` describes the arguments that the `user` query accepts\n      args: {\n        id: { type: graphql.GraphQLString },\n      },\n      resolve: (_, { id }) => {\n        return fakeDatabase[id]\n      },\n    },\n  },\n})\n\nvar schema = new graphql.GraphQLSchema({ query: queryType })\n\nvar app = express()\napp.all(\n  \"/graphql\",\n  createHandler({\n    schema: schema,\n  })\n)\napp.listen(4000)\nconsole.log(\"Running a GraphQL API server at localhost:4000/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL API Server with Basic Types using Express and graphql-http\nDESCRIPTION: This code snippet demonstrates how to set up a GraphQL API server using Express and the graphql-http library. It defines a schema with basic types (String, Float, and [Int]) and implements resolver functions for each query. The server is configured to listen on port 4000.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/basic-types.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require(\"express\")\nvar { createHandler } = require(\"graphql-http/lib/use/express\")\nvar { buildSchema } = require(\"graphql\")\n\n// Construct a schema, using GraphQL schema language\nvar schema = buildSchema(`\n  type Query {\n    quoteOfTheDay: String\n    random: Float!\n    rollThreeDice: [Int]\n  }\n`)\n\n// The root provides a resolver function for each API endpoint\nvar root = {\n  quoteOfTheDay() {\n    return Math.random() < 0.5 ? \"Take it easy\" : \"Salvation lies within\"\n  },\n  random() {\n    return Math.random()\n  },\n  rollThreeDice() {\n    return [1, 2, 3].map(_ => 1 + Math.floor(Math.random() * 6))\n  },\n}\n\nvar app = express()\napp.all(\n  \"/graphql\",\n  createHandler({\n    schema: schema,\n    rootValue: root,\n  })\n)\napp.listen(4000)\nconsole.log(\"Running a GraphQL API server at localhost:4000/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Defining Project Type in GraphQL Schema\nDESCRIPTION: Defines a Project type in GraphQL with string fields for name and tagline, plus an array of User type for contributors. This schema enables querying project details and associated contributors.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/describe-your-data.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Project {\n  name: String\n  tagline: String\n  contributors: [User]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Input Object Type Definition\nDESCRIPTION: Demonstrates how to define an Input Object type for complex mutation arguments.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ninput ReviewInput {\n  stars: Int!\n  commentary: String\n}\n\ntype Mutation {\n  createReview(episode: Episode, review: ReviewInput!): Review\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Type in GraphQL\nDESCRIPTION: Example of defining a Query type in GraphQL schema, which serves as the entry point for query operations, showing a droid field that accepts an ID argument.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  droid(id: ID!): Droid\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World GraphQL API with Tartiflette\nDESCRIPTION: A complete example demonstrating how to create a simple GraphQL API using Tartiflette. The code defines a schema with a 'hello' query that accepts a name parameter, implements a resolver function, and executes a query against the engine.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/tartiflette.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom tartiflette import Engine, Resolver\n@Resolver(\"Query.hello\")\nasync def resolver_hello(parent, args, ctx, info):\n    return \"hello \" + args[\"name\"]\nasync def run():\n    tftt_engine = Engine(\"\"\"\n    type Query {\n        hello(name: String): String\n    }\n    \"\"\")\n    result = await tftt_engine.execute(\n        query='query { hello(name: \"Chuck\") }'\n    )\n    print(result)\n    # {'data': {'hello': 'hello Chuck'}}\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n```\n\n----------------------------------------\n\nTITLE: Using friendsConnection with Pagination Parameters in GraphQL\nDESCRIPTION: A practical GraphQL query that demonstrates using the friendsConnection field with first and after parameters to paginate through data, showing the complete connection pattern in action.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/pagination.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hero {\n    name\n    friendsConnection(first: 2, after: \"Y3Vyc29yMQ==\") {\n      totalCount\n      edges {\n        node {\n          name\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Resolver in JavaScript\nDESCRIPTION: A JavaScript resolver function for handling the createReview mutation. It receives arguments from the GraphQL operation, interacts with a database through the context object, and returns the created review data.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/mutations.mdx#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMutation: {\n  createReview(obj, args, context, info) {\n    return context.db\n      .createNewReview(args.episode, args.review)\n      .then((reviewData) => new Review(reviewData))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Schema with Input Types in GraphQL\nDESCRIPTION: This snippet showcases a more complex GraphQL schema using input types for creating and updating messages, along with corresponding query and mutation definitions.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/mutations-and-input-types.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ninput MessageInput {\n  content: String\n  author: String\n}\n\ntype Message {\n  id: ID!\n  content: String\n  author: String\n}\n\ntype Query {\n  getMessage(id: ID!): Message\n}\n\ntype Mutation {\n  createMessage(input: MessageInput): Message\n  updateMessage(id: ID!, input: MessageInput): Message\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Server with Express and GraphQL-HTTP\nDESCRIPTION: This code sets up a GraphQL server using Express and graphql-http, implementing the complex schema with mutations and queries for message management.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/mutations-and-input-types.mdx#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require(\"express\")\nvar { createHandler } = require(\"graphql-http/lib/use/express\")\nvar { buildSchema } = require(\"graphql\")\n\n// Construct a schema, using GraphQL schema language\nvar schema = buildSchema(/* GraphQL */`\n  input MessageInput {\n    content: String\n    author: String\n  }\n\n  type Message {\n    id: ID!\n    content: String\n    author: String\n  }\n\n  type Query {\n    getMessage(id: ID!): Message\n  }\n\n  type Mutation {\n    createMessage(input: MessageInput): Message\n    updateMessage(id: ID!, input: MessageInput): Message\n  }\n`)\n\n// If Message had any complex fields, we'd put them on this object.\nclass Message {\n  constructor(id, { content, author }) {\n    this.id = id\n    this.content = content\n    this.author = author\n  }\n}\n\n// Maps username to content\nvar fakeDatabase = {}\n\nvar root = {\n  getMessage({ id }) {\n    if (!fakeDatabase[id]) {\n      throw new Error(\"no message exists with id \" + id)\n    }\n    return new Message(id, fakeDatabase[id])\n  },\n  createMessage({ input }) {\n    // Create a random id for our \"database\".\n    var id = require(\"crypto\").randomBytes(10).toString(\"hex\")\n\n    fakeDatabase[id] = input\n    return new Message(id, input)\n  },\n  updateMessage({ id, input }) {\n    if (!fakeDatabase[id]) {\n      throw new Error(\"no message exists with id \" + id)\n    }\n    // This replaces all old data, but some apps might want partial update.\n    fakeDatabase[id] = input\n    return new Message(id, input)\n  },\n}\n\nvar app = express()\napp.all(\n  \"/graphql\",\n  createHandler({\n    schema: schema,\n    rootValue: root,\n  })\n)\napp.listen(4000, () => {\n  console.log(\"Running a GraphQL API server at localhost:4000/graphql\")\n})\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema\nDESCRIPTION: Schema definition for Product, Customer, and Review types with relationships and search directives.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/dgraph.md#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Product {\n  id: ID!\n  name: String! @id\n  reviews: [Review] @hasInverse(field: about)\n}\n\ntype Customer {\n  username: String! @id\n  reviews: [Review] @hasInverse(field: by)\n}\n\ntype Review {\n  id: ID!\n  about: Product!\n  by: Customer!\n  comment: String @search(by: [fulltext])\n  rating: Int @search\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query Selecting Fields on Objects\nDESCRIPTION: A simple GraphQL query that demonstrates how to select fields on objects, specifically retrieving the name and appearsIn fields from a hero object.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\n{\n  hero {\n    name\n    appearsIn\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Types in GraphQL Schema\nDESCRIPTION: Schema definition for a GraphQL mutation that allows creating reviews for episodes. It includes an enum for episodes, an input type for review data, and the mutation field definition.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/mutations.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n\ninput ReviewInput {\n  stars: Int!\n  commentary: String\n}\n\ntype Mutation {\n  createReview(episode: Episode, review: ReviewInput!): Review\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation example demonstrates how to create a new message using the createMessage mutation with input parameters.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/mutations-and-input-types.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  createMessage(input: {\n    author: \"andy\",\n    content: \"hope is a good thing\",\n  }) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unified Schema in GraphQL Federation\nDESCRIPTION: This snippet presents the unified GraphQL schema that clients see after federation. It combines types and fields from all subgraphs (Users, Orders, and Products).\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/federation.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  user(id: ID!): User\n}\n\ntype User {\n  id: ID!\n  name: String!\n  email: String\n  orders: [Order!]!\n}\n\ntype Order {\n  id: ID!\n  products: [Product!]!\n  total: Float!\n}\n\ntype Product {\n  id: ID!\n  title: String!\n  price: Float!\n  inStock: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Apollo GraphQL Server\nDESCRIPTION: Implementation of a simple Apollo GraphQL server with a hello world query. Includes schema definition, resolver setup, and server initialization using the standalone server configuration.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/apollo-server.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloServer } from \"@apollo/server\"\nimport { startStandaloneServer } from \"@apollo/server/standalone\"\n\n// The GraphQL schema\nconst typeDefs = `#graphql\n  type Query {\n    hello: String\n  }\n`\n\n// A map of functions which return data for the schema.\nconst resolvers = {\n  Query: {\n    hello: () => \"world\",\n  },\n}\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n})\n\nconst { url } = await startStandaloneServer(server)\nconsole.log(`🚀 Server ready at ${url}`)\n```\n\n----------------------------------------\n\nTITLE: Defining Film and Person Types in GraphQL Schema\nDESCRIPTION: This schema defines two GraphQL types with their fields and relationships. The Film type includes basic film information with a deprecated 'director' string field replaced by a 'directedBy' relationship to a Person. The Person type includes name and relationships to films they directed or acted in.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/v5.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n  director: String @deprecated\n  directedBy: Person\n}\n\ntype Person {\n  name: String\n  directed: [Film]\n  actedIn: [Film]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Client Code Using Variables in GraphQL\nDESCRIPTION: A JavaScript fetch implementation that calls the GraphQL API using query variables. This approach avoids string concatenation and helps prevent injection attacks.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/passing-arguments.mdx#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar dice = 3\nvar sides = 6\nvar query = /* GraphQL */`query RollDice($dice: Int!, $sides: Int) {\n  rollDice(numDice: $dice, numSides: $sides)\n}`\n\nfetch(\"/graphql\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n  body: JSON.stringify({\n    query,\n    variables: { dice, sides },\n  }),\n})\n  .then(r => r.json())\n  .then(data => console.log(\"data returned:\", data))\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Character Type as JavaScript Class\nDESCRIPTION: A JavaScript class implementation that maps GraphQL type fields to class methods. The class includes methods to fetch a character's name, home world planet, and list of friends. It demonstrates the pattern of resolving relationships through ID references and async data fetching.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/code2.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// type Character {\nclass Character {\n  // name: String\n  getName() {\n    return this._name\n  }\n  // homeWorld: Planet\n  getHomeWorld() {\n    return fetchHomeworld(this._homeworldID)\n  }\n  // friends: [Character]\n  getFriends() {\n    return this._friendIDs.map(fetchCharacter)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Node Interface in GraphQL\nDESCRIPTION: This snippet shows the definition of the Node interface, which includes a single non-null ID field for global object identification.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# An object with a Globally Unique ID\ninterface Node {\n  # The ID of the object.\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World GraphQL API with Graphene\nDESCRIPTION: A complete example showing how to define a GraphQL schema with Graphene, including a Query type with a hello field and resolver function. The example demonstrates query execution and data retrieval.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/graphene.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport graphene\n\nclass Query(graphene.ObjectType):\n  hello = graphene.String(name=graphene.String(default_value=\"World\"))\n\n  def resolve_hello(self, info, name):\n    return 'Hello ' + name\n\nschema = graphene.Schema(query=Query)\nresult = schema.execute('{ hello }')\nprint(result.data['hello']) # \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Human Name Update Mutation\nDESCRIPTION: Schema definition for a GraphQL mutation that allows updating a human's name. It takes an ID and the new name as required arguments and returns the updated Human object.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/mutations.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateHumanName(id: ID!, name: String!): Human\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Directives Usage\nDESCRIPTION: Illustrates the use of the @include directive to conditionally include fields based on variables. This enables dynamic query structure modification at runtime.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Schema with DataLoader\nDESCRIPTION: Complete GraphQL schema implementation using DataLoader to optimize data fetching and prevent duplicate requests.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport DataLoader from 'dataloader';\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\nimport {\n  fromGlobalId,\n  globalIdField,\n  nodeDefinitions,\n} from 'graphql-relay';\n\nconst BASE_URL = 'https://myapp.com/';\n\nfunction fetchResponseByURL(relativeURL) {\n  return fetch(`${BASE_URL}${relativeURL}`).then(res => res.json());\n}\n\nfunction fetchPeople() {\n  return fetchResponseByURL('/people/').then(json => json.people);\n}\n\nfunction fetchPersonByURL(relativeURL) {\n  return fetchResponseByURL(relativeURL).then(json => json.person);\n}\n\nconst personLoader = new DataLoader(\n  urls => Promise.all(urls.map(fetchPersonByURL))\n);\n\nconst { nodeInterface, nodeField } = nodeDefinitions(\n  globalId => {\n    const {type, id} = fromGlobalId(globalId);\n    if (type === 'Person') {\n      return personLoader.load(`/people/${id}/`);\n    }\n  },\n  object => {\n    if (object.hasOwnProperty('username')) {\n      return 'Person';\n    }\n  },\n);\n\nconst PersonType = new GraphQLObjectType({\n  name: 'Person',\n  description: 'Somebody that you used to know',\n  fields: () => ({\n    firstName: {\n      type: GraphQLString,\n      resolve: person => person.first_name\n    },\n    lastName: {\n      type: GraphQLString,\n      resolve: person => person.last_name\n    },\n    email: {type: GraphQLString},\n    id: globalIdField('Person'),\n    username: {type: GraphQLString},\n    friends: {\n      type: new GraphQLList(PersonType),\n      resolve: person => personLoader.loadMany(person.friends)\n    }\n  }),\n  interfaces: [nodeInterface]\n});\n\nconst QueryType = new GraphQLObjectType({\n  name: 'Query',\n  description: 'The root of all... queries',\n  fields: () => ({\n    allPeople: {\n      type: new GraphQLList(PersonType),\n      resolve: fetchPeople\n    },\n    node: nodeField,\n    person: {\n      type: PersonType,\n      args: {\n        id: { type: GraphQLString }\n      },\n      resolve: (root, args) => personLoader.load(`/people/${args.id}/`)\n    }\n  })\n});\n\nexport default new GraphQLSchema({\n  query: QueryType\n});\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Mutation with Variables in JavaScript\nDESCRIPTION: This JavaScript code shows how to execute a GraphQL mutation with variables using the fetch API, demonstrating client-side mutation execution.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/mutations-and-input-types.mdx#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar author = \"andy\"\nvar content = \"hope is a good thing\"\nvar query = /* GraphQL */`mutation CreateMessage($input: MessageInput) {\n  createMessage(input: $input) {\n    id\n  }\n}`\n\nfetch(\"/graphql\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n  body: JSON.stringify({\n    query,\n    variables: {\n      input: {\n        author,\n        content,\n      },\n    },\n  }),\n})\n  .then(r => r.json())\n  .then(data => console.log(\"data returned:\", data))\n```\n\n----------------------------------------\n\nTITLE: Basic Fragment Usage in GraphQL Query\nDESCRIPTION: Demonstrates how to use fragments to avoid repetition when querying the same fields for different heroes. The query compares two heroes using a shared fragment definition.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  leftComparison: hero(episode: EMPIRE) {\n    ...comparisonFields\n  }\n  rightComparison: hero(episode: JEDI) {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  appearsIn\n  friends {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Human's Name with GraphQL Mutation\nDESCRIPTION: Example of a mutation operation that updates a human's name. It uses variables for the human ID and new name, and requests the ID and name fields in the response.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/mutations.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true, \"variables\": { \"id\": \"1000\", \"name\": \"Luke Starkiller\" } }\nmutation UpdateHumanName($id: ID!, $name: String!) { \n  updateHumanName(id: $id, name: $name ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type with Arguments in GraphQL\nDESCRIPTION: Example showing how to define fields with arguments in a GraphQL schema, specifically a Starship type with a length field that accepts a unit argument with a default value.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Starship {\n  id: ID!\n  name: String!\n  length(unit: LengthUnit = METER): Float\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Arguments\nDESCRIPTION: Demonstrates how to pass arguments in a query to fetch specific human data.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  human(id: \"1000\") {\n    name\n    height\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Variables\nDESCRIPTION: Demonstrates how to use variables for dynamic values in queries.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery HeroNameAndFriends($episode: Episode) {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Query in Federated GraphQL\nDESCRIPTION: This snippet shows an example GraphQL query that spans multiple subgraphs in a federated architecture. It retrieves user information, orders, and product details.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/federation.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  user(id: \"123\") {\n    # Resolved by Users subgraph\n    name\n    orders {\n      # Resolved by Orders subgraph\n      id\n      products {\n        # Resolved by Products subgraph\n        title\n        price\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query Type Definition\nDESCRIPTION: Defines a simple Query type with a hero field returning a Character type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hero: Character\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Object Type in GraphQL Schema\nDESCRIPTION: A GraphQL schema definition that creates a custom RandomDie object type with a roll method, and a Query type that returns this custom object. This demonstrates how to organize related functionality into custom types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/object-types.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype RandomDie {\n  roll(numRolls: Int!): [Int]\n}\n\ntype Query {\n  getDie(numSides: Int): RandomDie\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Class for GraphQL Schema in C#\nDESCRIPTION: This C# class defines a Character with properties and methods corresponding to a GraphQL schema. It includes a Name property, an asynchronous method to fetch the character's home world, and another to fetch the character's friends. The class uses Task-based asynchronous programming for data fetching operations.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/code4.mdx#2025-04-08_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// type Character {\npublic class Character {\n  // name: String\n  public String Name { get; }\n\n  // homeWorld: Planet\n  public async Task<Planet> GetHomeWorldAsync() {\n    return await FetchHomeworldAsync(_HomeworldID);\n  }\n\n  // friends: [Character]\n  public async IEnumerable<Task<Character>> GetFriendsAsync() {\n    return _FriendIDs.Select(FetchCharacterAsync);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Directive in GraphQL Schema\nDESCRIPTION: This snippet demonstrates how to define an @auth directive in a GraphQL schema for applying authorization rules to specific fields or types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/authorization.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @auth(rule: Rule) on FIELD_DEFINITION\n\nenum Rule {\n  IS_AUTHOR\n}\n\ntype Post {\n  authorId: ID!\n  body: String @auth(rule: IS_AUTHOR)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing a Hello World GraphQL Query with Sangria in Scala\nDESCRIPTION: This snippet demonstrates how to define a simple GraphQL schema with a 'hello' query, create a query, and execute it using Sangria. It imports necessary Sangria modules, defines a QueryType with a 'hello' field, creates a schema, and executes a query that returns 'Hello world!'.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/scala/server/sangria.md#2025-04-08_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport sangria.schema._\nimport sangria.execution._\nimport sangria.macros._\n\nval QueryType = ObjectType(\"Query\", fields[Unit, Unit](\n  Field(\"hello\", StringType, resolve = _ ⇒ \"Hello world!\")\n))\n\nval schema = Schema(QueryType)\n\nval query = graphql\"{ hello }\"\n\nExecutor.execute(schema, query) map println\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hello World GraphQL Server in Node.js\nDESCRIPTION: This script sets up a basic GraphQL schema with a single 'hello' query, defines a resolver, and executes a GraphQL query. It demonstrates the core concepts of schema definition, query execution, and result handling in GraphQL.js.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/graphql-js.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar { graphql, buildSchema } = require(\"graphql\")\n\nvar schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`)\n\nvar rootValue = { hello: () => \"Hello world!\" }\n\nvar source = \"{ hello }\"\n\ngraphql({ schema, source, rootValue }).then(response => {\n  console.log(response)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining PersonType for GraphQL Schema\nDESCRIPTION: Creates a GraphQL object type for Person with fields that map to the REST API's person object properties, including resolvers for fields that need transformation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql';\n\nconst PersonType = new GraphQLObjectType({\n  name: 'Person',\n  description: 'Somebody that you used to know',\n  fields: () => ({\n    firstName: {\n      type: GraphQLString,\n      resolve: person => person.first_name,\n    },\n    lastName: {\n      type: GraphQLString,\n      resolve: person => person.last_name,\n    },\n    email: {type: GraphQLString},\n    id: {type: GraphQLString},\n    username: {type: GraphQLString},\n    friends: {\n      type: new GraphQLList(PersonType),\n      resolve: person => {} // Fetch the friends with the URLs `person.friends`,\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple GraphQL Schema with KGraphQL in Kotlin\nDESCRIPTION: This snippet demonstrates how to create a basic GraphQL schema using KGraphQL. It defines an Article data class, sets up a query resolver, and adds a custom property resolver for the Article type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/server/kgraphql.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Article(val id: Int, val text: String)\n\nfun main() {\n    val schema = KGraphQL.schema {\n        query(\"article\") {\n            resolver { id: Int?, text: String ->\n                Article(id ?: -1, text)\n            }\n        }\n        type<Article> {\n            property<String>(\"fullText\") {\n                resolver { article: Article ->\n                    \"${article.id}: ${article.text}\"\n                }\n            }\n        }\n    }\n\n    schema.execute(\"\"\"\n        {\n            article(id: 5, text: \"Hello World\") {\n                id\n                fullText\n            }\n        }\n    \"\"\").let(::println)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Server with Type-Level Schema in Haskell using Mu-GraphQL\nDESCRIPTION: This snippet demonstrates how to implement a GraphQL server using Mu-GraphQL in Haskell. It showcases the use of the 'graphql' macro for schema generation and defines resolvers for various GraphQL types including Book, Author, Query, Mutation, and Subscription.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/haskell/server/mu-haskell.md#2025-04-08_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE NamedFieldPuns #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE PartialTypeSignatures #-}\n{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE TypeOperators #-}\n\n-- imports omitted for brevity...\n\ngraphql \"Library\" \"library.graphql\" -- all the magic happens here! 🪄🎩\n\n-- ... a bit more code...\n\nlibraryServer :: SqlBackend -> ServerT ObjectMapping i Library ServerErrorIO _\nlibraryServer conn =\n  resolver\n    ( object @\"Book\"\n        ( field @\"id\" bookId,\n          field @\"title\" bookTitle,\n          field @\"author\" bookAuthor,\n          field @\"imageUrl\" bookImage\n        ),\n      object @\"Author\"\n        ( field @\"id\" authorId,\n          field @\"name\" authorName,\n          field @\"books\" authorBooks\n        ),\n      object @\"Query\"\n        ( method @\"authors\" allAuthors,\n          method @\"books\" allBooks\n        ),\n      object @\"Mutation\"\n        ( method @\"newAuthor\" newAuthor,\n          method @\"newBook\" newBook\n        ),\n      object @\"Subscription\"\n        (method @\"allBooks\" allBooksConduit)\n    )\n  where\n    bookId :: Entity Book -> ServerErrorIO Integer\n    bookId (Entity (BookKey k) _) = pure $ toInteger k\n    -- ... more resolvers...\n```\n\n----------------------------------------\n\nTITLE: Valid Multi-Operation Subscription Document in GraphQL\nDESCRIPTION: This example demonstrates a valid GraphQL document with multiple named subscription operations. Each operation has a single root field and can be executed independently.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/subscriptions.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription NewReviewCreated {\n  reviewCreated {\n    rating\n    commentary\n  }\n}\nsubscription FriendListUpdated($id: ID!) {\n  humanFriendsUpdated(id: $id) {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request URL Format for GraphQL\nDESCRIPTION: Example of how to format a GraphQL query as an HTTP GET request URL, with the query document encoded as a query parameter.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/serving-over-http.mdx#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttp://myapi/graphql?query={me{name}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Express Middleware with GraphQL Server\nDESCRIPTION: Example of setting up a GraphQL server with Express middleware that logs IP addresses and provides an IP address query endpoint. Shows integration of custom middleware with graphql-http and demonstrates context passing from request to resolvers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/authentication-and-express-middleware.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require(\"express\")\nvar { createHandler } = require(\"graphql-http/lib/use/express\")\nvar { buildSchema } = require(\"graphql\")\n\nvar schema = buildSchema(`\n  type Query {\n    ip: String\n  }\n`)\n\nfunction loggingMiddleware(req, res, next) {\n  console.log(\"ip:\", req.ip)\n  next()\n}\n\nvar root = {\n  ip(args, context) {\n    return context.ip\n  },\n}\n\nvar app = express()\napp.use(loggingMiddleware)\napp.all(\n  \"/graphql\",\n  createHandler({\n    schema: schema,\n    rootValue: root,\n    context: req => ({\n      ip: req.raw.ip,\n    }),\n  })\n)\napp.listen(4000)\nconsole.log(\"Running a GraphQL API server at localhost:4000/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic GraphQL Hello World Service in Ballerina\nDESCRIPTION: A simple GraphQL service implementation that creates a server on port 9090 with a single 'hello' resource function. This example demonstrates the basic structure of a Ballerina GraphQL service that returns a string greeting.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/ballerina/server/ballerina-graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: ballerina\nCODE:\n```\nimport ballerina/graphql;\n\nservice /graphql on new graphql:Listener(9090) {\n    resource function get hello() returns string {\n        return \"Hello, world!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Interface Type Definition\nDESCRIPTION: Example of defining a GraphQL interface type with common fields.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar EntityType = new GraphQLInterfaceType({\n  name: \"Entity\",\n  fields: {\n    name: { type: GraphQLString }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Interface and Type Definitions for Connection Pattern\nDESCRIPTION: GraphQL schema definitions that implement the connection pattern, including Character interface, FriendsConnection type, FriendsEdge type, and PageInfo type with cursor-based pagination support.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/pagination.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  friendsConnection(first: Int, after: ID): FriendsConnection!\n  appearsIn: [Episode]!\n}\n\ntype FriendsConnection {\n  totalCount: Int\n  edges: [FriendsEdge]\n  friends: [Character]\n  pageInfo: PageInfo!\n}\n\ntype FriendsEdge {\n  cursor: ID!\n  node: Character\n}\n\ntype PageInfo {\n  startCursor: ID\n  endCursor: ID\n  hasNextPage: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Ariadne GraphQL Server with uvicorn\nDESCRIPTION: This snippet shows how to run the Ariadne GraphQL server using uvicorn, an ASGI server. It first installs uvicorn using pip, then starts the server by specifying the module and app name.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/ariadne.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install uvicorn\n$ uvicorn example:app\n```\n\n----------------------------------------\n\nTITLE: Standard GraphQL POST Request Body Format in JSON\nDESCRIPTION: The expected JSON structure for a standard GraphQL POST request body, including the query document, optional operation name, variables, and extensions fields.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/serving-over-http.mdx#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"...\",\n  \"operationName\": \"...\",\n  \"variables\": { \"myVariable\": \"someValue\", ... },\n  \"extensions\": { \"myExtension\": \"someValue\", ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema Builder\nDESCRIPTION: Schema configuration using Graphbox SchemaBuilder to create GraphQL queries and mutations for the model.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/django-graphbox.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django_graphbox.builder import SchemaBuilder\nfrom myapp.models import MyModel\n\nbuilder = SchemaBuilder()\nbuilder.add_model(MyModel)\n\nquery_class = builder.build_schema_query()\nmutation_class = builder.build_schema_mutation()\n```\n\n----------------------------------------\n\nTITLE: Inline Fragments with Interface Types\nDESCRIPTION: Demonstrates the use of inline fragments to query fields on specific concrete types when dealing with interfaces. The query conditionally requests different fields based on the character type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n    ... on Human {\n      height\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Running a GraphQL Query with Caliban in Scala\nDESCRIPTION: This example demonstrates how to define a GraphQL query using Scala's type-safe approach and execute it against a server with Caliban. The code creates a selection builder that maps character data to a case class and uses sttp client to send the query to a server, with results automatically parsed into the defined structure.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/scala/client/caliban.md#2025-04-08_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\n// define your query using Scala\nval query: SelectionBuilder[RootQuery, List[CharacterView]] =\n  Query.characters {\n    (Character.name ~ Character.nicknames ~ Character.origin)\n      .mapN(CharacterView)\n  }\n\nimport sttp.client3._\n// run the query and get the result already parsed into a case class\nval result = query.toRequest(uri\"http://someUrl\").send(HttpClientSyncBackend()).body\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Yoga Server\nDESCRIPTION: This code demonstrates how to set up a basic GraphQL Yoga server. It creates a schema with a simple 'hello' query, initializes the Yoga server, and starts listening on port 4000.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/graphql-yoga.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from \"http\"\nimport { createSchema, createYoga } from \"graphql-yoga\"\n\ncreateServer(\n  createYoga({\n    schema: createSchema({\n      typeDefs: /* GraphQL */ `\n        type Query {\n          hello: String\n        }\n      `,\n      resolvers: {\n        Query: {\n          hello: () => \"Hello Hello Hello\",\n        },\n      },\n    }),\n  }),\n).listen(4000, () => {\n  console.info(\"GraphQL Yoga is listening on http://localhost:4000/graphql\")\n})\n```\n\n----------------------------------------\n\nTITLE: Using useQuery Hook for GraphQL Queries in React\nDESCRIPTION: Demonstrates how to use the useQuery hook from graphql-hooks to fetch data in a React component. It includes handling loading and error states, as well as rendering the fetched data.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/client/graphql-hooks.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useQuery } from \"graphql-hooks\"\n\nconst HOMEPAGE_QUERY = `query HomePage($limit: Int) {\n  users(limit: $limit) {\n    id\n    name\n  }\n}`\n\nfunction MyComponent() {\n  const { loading, error, data } = useQuery(HOMEPAGE_QUERY, {\n    variables: {\n      limit: 10,\n    },\n  })\n\n  if (loading) return \"Loading...\"\n  if (error) return \"Something Bad Happened\"\n\n  return (\n    <ul>\n      {data.users.map(({ id, name }) => (\n        <li key={id}>{name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GraphQL Server with GiraphQL and Apollo Server in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a simple GraphQL server using GiraphQL and Apollo Server. It creates a schema builder, defines a query type with a 'hello' field that accepts a name argument, and starts an Apollo server instance listening on port 3000.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/tools/giraphql.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApolloServer } from \"apollo-server\"\nimport SchemaBuilder from \"@giraphql/core\"\n\nconst builder = new SchemaBuilder({})\n\nbuilder.queryType({\n  fields: t => ({\n    hello: t.string({\n      args: {\n        name: t.arg.string({}),\n      },\n      resolve: (parent, { name }) => `hello, ${name || \"World\"}`,\n    }),\n  }),\n})\n\nnew ApolloServer({\n  schema: builder.toSchema({}),\n}).listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Complete Express GraphQL Server Implementation\nDESCRIPTION: A full Express.js server implementation that exposes a GraphQL API with the rollDice query. Includes schema definition, resolver implementation, and server setup with graphql-http.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/passing-arguments.mdx#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require(\"express\")\nvar { createHandler } = require(\"graphql-http/lib/use/express\")\nvar { buildSchema } = require(\"graphql\")\n\n// Construct a schema, using GraphQL schema language\nvar schema = buildSchema(/* GraphQL */`\n  type Query {\n    rollDice(numDice: Int!, numSides: Int): [Int]\n  }\n`)\n\n// The root provides a resolver function for each API endpoint\nvar root = {\n  rollDice({ numDice, numSides }) {\n    var output = []\n    for (var i = 0; i < numDice; i++) {\n      output.push(1 + Math.floor(Math.random() * (numSides || 6)))\n    }\n    return output\n  },\n}\n\nvar app = express()\napp.all(\n  \"/graphql\",\n  createHandler({\n    schema: schema,\n    rootValue: root,\n  })\n)\napp.listen(4000)\nconsole.log(\"Running a GraphQL API server at localhost:4000/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Review with GraphQL Mutation\nDESCRIPTION: Example of a mutation operation that creates a review for an episode. It uses variables to supply the episode and review details, and requests specific fields from the created review in the response.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/mutations.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true, \"variables\": { \"ep\": \"JEDI\", \"review\": { \"stars\": 5, \"commentary\": \"This is a great movie!\" } } }\nmutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {\n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Field Aliasing\nDESCRIPTION: This GraphQL query demonstrates the use of field aliasing, where the 'name' field is requested as 'productName'. This further illustrates why generating types from the schema is problematic.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2024-09-19-codegen.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetProduct {\n  products {\n    id\n    productName: name\n    description\n    price\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Interface Implementation\nDESCRIPTION: Shows how Human and Droid types implement the Character interface while adding their own specific fields.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ntype Human implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  starships: [Starship]\n  totalCredits: Int\n}\n\ntype Droid implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n  primaryFunction: String\n}\n```\n\n----------------------------------------\n\nTITLE: Type Fields Query\nDESCRIPTION: Shows how to query field information for a specific type including field names and their types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/introspection.mdx#2025-04-08_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  __type(name: \"Droid\") {\n    name\n    fields {\n      name\n      type {\n        name\n        kind\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Aliases\nDESCRIPTION: Shows how to use aliases to query the same field with different arguments.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using Multiple Methods on an Object Type\nDESCRIPTION: A sample GraphQL query that demonstrates how to call multiple methods on a custom object type in a single request. It retrieves both a single die roll and multiple rolls in one query.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/object-types.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getDie(numSides: 6) {\n    rollOnce\n    roll(numRolls: 3)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Business Layer for Authorization in GraphQL Resolver\nDESCRIPTION: This code shows how to use the authorization logic from the business layer (postRepository) in a GraphQL resolver function.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/authorization.mdx#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { postRepository } from 'postRepository'\n\nfunction Post_body(obj, args, context, info) {\n  // return the post body only if the user is the post's author\n  return postRepository.getBody({ user: context.user, post: obj })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a GraphQL Server with KGraphQL and Ktor in Kotlin\nDESCRIPTION: This snippet shows how to set up a GraphQL server using KGraphQL's Ktor plugin. It creates a simple 'hello' query and enables the GraphQL Playground for easy testing at localhost:8080/graphql.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/server/kgraphql.md#2025-04-08_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nfun Application.module() {\n  install(GraphQL) {\n    playground = true\n    schema {\n      query(\"hello\") {\n        resolver { -> \"World!\" }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Server Mocking with Apollo Tools\nDESCRIPTION: Demonstrates how to create a basic mocked GraphQL server using the mockServer function from graphql-tools. This snippet shows how to import the necessary modules, define a schema, and create a mock server that can handle any valid GraphQL query.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-04-19-mocking.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// > npm install graphql-tools\nimport { mockServer } from \"graphql-tools\"\nimport schema from \"./mySchema.graphql\"\n\nconst myMockServer = mockServer(schema)\nmyMockServer.query(`{\n  allUsers: {\n    id\n    name\n  }\n}`)\n\n// returns\n// {\n//   data: {\n//     allUsers:[\n//       { id: 'ee5ae76d-9b91-4270-a007-fad2054e2e75', name: 'lorem ipsum' },\n//       { id: 'ca5c182b-99a8-4391-b4b4-4a20bd7cb13a', name: 'quis ut' }\n//     ]\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Schema and Query with Caliban\nDESCRIPTION: Demonstrates setting up a minimal GraphQL server with Caliban, including schema definition, resolver implementation, and query execution. The example creates a simple Query type with a 'hello' field that returns a string message.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/scala/server/caliban.md#2025-04-08_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nimport caliban._\nimport caliban.schema.Schema.auto._\n\n// schema\ncase class Query(hello: String)\n\n// resolver\nval resolver = RootResolver(Query(\"Hello world!\"))\n\nval api = graphQL(resolver)\n\nfor {\n  interpreter <- api.interpreter\n  result      <- interpreter.execute(\"{ hello }\")\n} yield result\n```\n\n----------------------------------------\n\nTITLE: Named Query Operation\nDESCRIPTION: Demonstrates using an explicit operation name for better debugging and logging.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery HeroNameAndFriends {\n  hero {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Starship Deletion Mutation\nDESCRIPTION: Schema definition for a GraphQL mutation that allows deleting a starship. It takes an ID as a required argument and returns the deleted ID to confirm the operation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/mutations.mdx#2025-04-08_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteStarship(id: ID!): ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Usernames Query Example in GraphQL\nDESCRIPTION: This query demonstrates fetching multiple users by their usernames using a plural identifying root field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  usernames(usernames: [\"zuck\", \"moskov\"]) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Query with Kotlin Client\nDESCRIPTION: This snippet demonstrates how to execute a GraphQL query using the GraphQLWebClient. It creates a client instance, executes the HelloWorldQuery, and prints the result.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/client/graphql-kotlin.md#2025-04-08_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.client\n\nimport com.expediagroup.graphql.client.spring.GraphQLWebClient\nimport com.expediagroup.graphql.generated.HelloWorldQuery\nimport kotlinx.coroutines.runBlocking\n\nfun main() {\n    val client = GraphQLWebClient(url = \"http://localhost:8080/graphql\")\n    runBlocking {\n        val helloWorldQuery = HelloWorldQuery()\n        val result = client.execute(helloWorldQuery)\n        println(\"hello world query result: ${result.data?.helloWorld}\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Server Dependencies\nDESCRIPTION: Command to install the required npm packages for running Apollo Server with GraphQL\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/apollo-server.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @apollo/server graphql\n```\n\n----------------------------------------\n\nTITLE: Querying Objects with Globally Unique IDs in GraphQL\nDESCRIPTION: This example demonstrates how to query objects using globally unique IDs in a GraphQL API. The query retrieves a starship and a droid by their IDs, along with their names. For the droid, it also fetches its friends with their IDs and names, showing how globally unique identifiers work across related objects.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/caching.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\nquery {\n  starship(id: \"3003\") {\n    id\n    name\n  }\n  droid(id: \"2001\") {\n    id\n    name\n    friends {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World GraphQL Server in Go using EGGQL\nDESCRIPTION: A minimal example showing how to create a GraphQL server using EGGQL that serves a simple message field. The server runs on port 80 and exposes a /graphql endpoint.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/go/server/andrewwphillips-eggql.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/andrewwphillips/eggql\"\n\nfunc main() {\n\thttp.Handle(\"/graphql\", eggql.New(struct{ Message string }{Message: \"hello, world\"}))\n\thttp.ListenAndServe(\":80\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated GraphQL Client in Python\nDESCRIPTION: This Python code demonstrates how to use the generated GraphQL client to execute the createToken mutation and handle the response.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/ariadne-codegen.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom graphql_client import Client\n\nwith Client(\"http://example.com/graphql/\") as client:\n    result = client.create_token(username=\"Admin\", password=\"Example123)\n\n    if result.errors:\n        error = result.errors[0]\n        raise ValidationError({error.field: error.message})\n\n    auth_token = result.token\n```\n\n----------------------------------------\n\nTITLE: GraphQL Fragment for Story Like Data\nDESCRIPTION: A GraphQL fragment that defines the common data structure needed for both mutations and subscriptions related to story likes. It selects the likers count and like sentence text from a Story type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2015-10-16-subscriptions.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nfragment StoryLikeData on Story {\n  story {\n    likers { count }\n    likeSentence { text }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Mutations in a Single Request\nDESCRIPTION: Example of multiple mutation fields in a single request, demonstrating how mutation fields are executed in series. This example deletes two starships in sequence.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/mutations.mdx#2025-04-08_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\nmutation { \n  firstShip: deleteStarship(id: \"3001\")\n  secondShip: deleteStarship(id: \"3002\")\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Star Wars API with Qlient\nDESCRIPTION: Example showing how to create a GraphQL client, query film data from SWAPI, and handle the response. Demonstrates field selection and response handling.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/qlient.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom qlient.http import HTTPClient, GraphQLResponse\n\nclient = HTTPClient(\"https://swapi-graphql.netlify.app/.netlify/functions/index\")\n\nres: GraphQLResponse = client.query.film(\n    # swapi graphql input fields\n    id=\"ZmlsbXM6MQ==\",\n\n    # qlient specific\n    _fields=[\"id\", \"title\", \"episodeID\"]\n)\n\nprint(res.request.query)  # query film($id: ID) { film(id: $id) { id title episodeID } }\nprint(res.request.variables)  # {'id': 'ZmlsbXM6MQ=='}\nprint(res.data)  # {'film': {'id': 'ZmlsbXM6MQ==', 'title': 'A New Hope', 'episodeID': 4}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity GraphQL with ASP.NET Core Startup\nDESCRIPTION: Demonstrates how to configure Entity GraphQL in an ASP.NET Core application's Startup class by registering required services and setting up the GraphQL endpoint. Shows integration with Entity Framework Core's DbContext and endpoint routing.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/c-net/server/entity-graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// expose an existing data model with ASP.NET & EF Core\npublic class Startup {\n  public void ConfigureServices(IServiceCollection services)\n  {\n      services.AddDbContext<DemoContext>();\n      // Auto build a schema from DemoContext. Alternatively you can build one from scratch\n      services.AddGraphQLSchema<DemoContext>(options =>\n      {\n          // modify the schema (add/remove fields or types), add other services\n      });\n  }\n\n  public void Configure(IApplicationBuilder app, DemoContext db)\n  {\n      app.UseRouting();\n      app.UseEndpoints(endpoints =>\n      {\n          // defaults to /graphql endpoint\n          endpoints.MapGraphQL<DemoContext>();\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Field Arguments\nDESCRIPTION: Shows how to pass arguments to specific fields for data transformation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Subscription Field in GraphQL Schema\nDESCRIPTION: This snippet shows how to define a subscription field in a GraphQL schema. It demonstrates the use of the 'subscription' root operation type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/subscriptions.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Subscription {\n  reviewCreated: Review\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GQty CLI via Package Managers\nDESCRIPTION: Commands to install and run the GQty CLI using different package managers (npm, yarn, and pnpm). The CLI provides interactive codegen functionality for setting up GQty in your project.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/client/gqty.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpx @gqty/cli\n\n# yarn\nyarn dlx @gqty/cli\n\n# pnpm\npnpm dlx @gqty/cli\n```\n\n----------------------------------------\n\nTITLE: Querying User Data with ZeroQL in C#\nDESCRIPTION: This snippet demonstrates how to use ZeroQL to query user data from a GraphQL API. It showcases the Linq-like syntax for constructing queries and selecting specific fields. The query fetches a user's ID, first name, and last name based on a given user ID.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/c-net/client/zeroql.md#2025-04-08_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar userId = 10;\nvar response = await qlClient.Query(q => q\n    .User(userId, o => new\n    {\n        o.Id,\n        o.FirstName,\n        o.LastName\n    }));\n```\n\n----------------------------------------\n\nTITLE: Using ES6 Destructuring for Resolver Arguments\nDESCRIPTION: An improved version of the rollDice resolver that uses ES6 destructuring assignment to directly extract the numDice and numSides parameters from the args object.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/passing-arguments.mdx#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar root = {\n  rollDice({ numDice, numSides }) {\n    var output = []\n    for (var i = 0; i < numDice; i++) {\n      output.push(1 + Math.floor(Math.random() * (numSides || 6)))\n    }\n    return output\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Order Subgraph Schema in GraphQL Federation\nDESCRIPTION: This snippet demonstrates the GraphQL schema for an Order subgraph in a federated setup. It includes an Order type with a reference to the Product type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/federation.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Order @key(fields: \"id\") {\n  id: ID!\n  products: [Product!]!\n  total: Float!\n}\n\ntype Product {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Node by ID in GraphQL\nDESCRIPTION: This snippet demonstrates how to query an object by its ID using the node field. It shows how to extract type-specific information using interface fragments.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  node(id: \"4\") {\n    id\n    ... on User {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Query\nDESCRIPTION: This snippet shows a sample GraphQL query named 'HelloWorldQuery' that retrieves the 'helloWorld' field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/client/graphql-kotlin.md#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery HelloWorldQuery {\n  helloWorld\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Starship with GraphQL Mutation\nDESCRIPTION: Example of a mutation operation that deletes a starship. It uses a variable for the starship ID to be deleted.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/mutations.mdx#2025-04-08_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true, \"variables\": { \"id\": \"3003\" } }\nmutation DeleteStarship($id: ID!) { \n  deleteStarship(id: $id)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for a Deity Query\nDESCRIPTION: This snippet defines a GraphQL schema with a Deity type and a Query type. The Deity type represents a supernatural being with a name and power, with the power field marked as deprecated. The Query type provides a deity query operation that takes a name parameter with a default value of 'Morpheus'.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/haskell/server/morpheus-graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# schema.gql\n\"\"\"\nA supernatural being considered divine and sacred\n\"\"\"\ntype Deity {\n  name: String!\n  power: String @deprecated(reason: \"no more supported\")\n}\ntype Query {\n  deity(name: String! = \"Morpheus\"): Deity!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing graphql-hooks via npm\nDESCRIPTION: Command to install the graphql-hooks package using npm.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/client/graphql-hooks.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphql-hooks\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Service with Pylon\nDESCRIPTION: Example of a TypeScript service implementation using Pylon framework. Demonstrates user management with queries and mutations for fetching and adding users.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/pylon.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app } from \"@getcronit/pylon\"\n\nclass User {\n  name: string\n  email: string\n  constructor(name: string, email: string) {\n    this.name = name\n    this.email = email\n  }\n}\n\nconst users = [\n  new User(\"Alice\", \"alice@example.com\"),\n  new User(\"Bob\", \"bob@example.com\"),\n  new User(\"Charlie\", \"charlie@example.com\"),\n]\n\nexport const graphql = {\n  Query: {\n    users,\n    user: (name: string) => {\n      return users.find(user => user.name === name)\n    },\n  },\n  Mutation: {\n    addUser: (name: string, email: string) => {\n      const user = new User(name, email)\n      users.push(user)\n      return user\n    },\n  },\n}\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Query in Julia\nDESCRIPTION: This code executes a GraphQL query to fetch country names, deserializing the response into a vector of Country objects.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/julia/client/graphqlclient-jl.md#2025-04-08_snippet_3\n\nLANGUAGE: julia\nCODE:\n```\nresponse = query(client, \"countries\", Vector{Country}, output_fields=\"name\")\n```\n\n----------------------------------------\n\nTITLE: Defining Film and Person Types in GraphQL Schema\nDESCRIPTION: Defines two GraphQL types - Film and Person - with fields describing their properties and relationships. The Film type includes basic movie information and a reference to its director, while the Person type includes name and relationships to films they directed or acted in.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/v4.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n  director: String\n  directedBy: Person\n}\n\ntype Person {\n  name: String\n  directed: [Film]\n  actedIn: [Film]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Subgraph Schema in GraphQL Federation\nDESCRIPTION: This snippet shows the GraphQL schema for a User subgraph in a federated architecture. It includes a Query type and User type with a reference to the Order type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/federation.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  user(id: ID!): User\n}\n\ntype User {\n  id: ID!\n  name: String!\n  email: String\n  orders: [Order!]!\n}\n\ntype Order {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Browser-based GraphQL Request Using Fetch\nDESCRIPTION: Shows how to make a GraphQL request using the browser's fetch API with proper headers and request body formatting.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/graphql-clients.mdx#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(\"/graphql\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n  body: JSON.stringify({ query: \"{ hello }\" }),\n})\n  .then(r => r.json())\n  .then(data => console.log(\"data returned:\", data))\n```\n\n----------------------------------------\n\nTITLE: Querying Orders with Customer Data using Linq2GraphQL in C#\nDESCRIPTION: This snippet demonstrates how to use Linq2GraphQL to query the first 10 orders, including their primitive properties and the connected customer data. It showcases the use of Include and Select methods for shaping the query.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/c-net/client/linq2graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar orders = await sampleClient\n    .Query\n        .Orders(first: 10)\n        .Include(e => e.Orders.Select(e => e.Customer))\n        .Select(e => e.Orders)\n        .ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Human Data in GraphQL\nDESCRIPTION: This snippet demonstrates a GraphQL query to fetch data about a human, including their name, appearances, and starships. It showcases the structure of a typical GraphQL query.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/response.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  human(id: 1002) {\n    name\n    appearsIn\n    starships {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with Partial Success\nDESCRIPTION: This mutation attempts to delete two starships, demonstrating how GraphQL handles partial successes and errors in a single operation. It shows the structure of the response with both data and errors.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/response.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  firstShip: deleteStarship(id: \"3001\")\n  secondShip: deleteStarship(id: \"3010\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Customer using Linq2GraphQL Mutation in C#\nDESCRIPTION: This snippet shows how to perform a mutation operation with Linq2GraphQL to add a new customer. It creates a CustomerInput object with the necessary data and executes the mutation, returning the new Customer Id.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/c-net/client/linq2graphql.md#2025-04-08_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar customerId = await sampleClient\n     .Mutation\n     .AddCustomer(new CustomerInput\n     {\n         CustomerId = Guid.NewGuid(),\n         CustomerName = \"New Customer\",\n         Status = CustomerStatus.Active\n     })\n     .Select(e=> e.CustomerId)\n     .ExecuteAsync();\n```\n\n----------------------------------------\n\nTITLE: Querying Unread Email Count in GraphQL\nDESCRIPTION: This GraphQL query fetches the number of unread emails in the inbox for all user accounts. It demonstrates how to structure a query to traverse multiple levels of nested data.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/thinking-in-graphs.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  accounts {\n    inbox {\n      unreadEmailCount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Resolvers for Mutations and Queries in JavaScript\nDESCRIPTION: This code demonstrates the implementation of root resolvers for the setMessage mutation and getMessage query using a fake database object.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/mutations-and-input-types.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar fakeDatabase = {}\nvar root = {\n  setMessage({ message }) {\n    fakeDatabase.message = message\n    return message\n  },\n  getMessage() {\n    return fakeDatabase.message\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Root Operation Type Names in GraphQL\nDESCRIPTION: Example showing how to use custom names for root operation types in a GraphQL schema using the schema keyword to define query, mutation, and subscription types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: MyQueryType\n  mutation: MyMutationType\n  subscription: MySubscriptionType\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Different Visitor API Patterns in JavaScript\nDESCRIPTION: Shows four different patterns for using the visitor API, including named visitors, enter/leave visitors, and generic visitors.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvisit(ast, {\n  Kind(node) {\n    // enter the \"Kind\" node\n  },\n})\n\nvisit(ast, {\n  Kind: {\n    enter(node) {\n      // enter the \"Kind\" node\n    },\n    leave(node) {\n      // leave the \"Kind\" node\n    }\n  }\n})\n\nvisit(ast, {\n  enter(node) {\n    // enter any node\n  },\n  leave(node) {\n    // leave any node\n  },\n})\n\nvisit(ast, {\n  enter: {\n    Kind(node) {\n      // enter the \"Kind\" node\n    },\n  },\n  leave: {\n    Kind(node) {\n      // leave the \"Kind\" node\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Using PHP Attributes\nDESCRIPTION: This example demonstrates how to define a complete GraphQL schema using PHP attributes. It includes mutation, query, input type, object type, and enum definitions, showcasing how PHP class structure naturally maps to GraphQL schema components.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/php/server/graphql-attribute-schema.md#2025-04-08_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Jerowork\\GraphqlAttributeSchema\\Attribute\\Enum;\nuse Jerowork\\GraphqlAttributeSchema\\Attribute\\Field;\nuse Jerowork\\GraphqlAttributeSchema\\Attribute\\InputType;\nuse Jerowork\\GraphqlAttributeSchema\\Attribute\\Mutation;\nuse Jerowork\\GraphqlAttributeSchema\\Attribute\\Query;\nuse Jerowork\\GraphqlAttributeSchema\\Attribute\\Type;\n\nfinal readonly class CreateUserMutation\n{\n    #[Mutation]\n    public function createUser(CreateUserInputType $input): User\n    {\n        // Business logic to create a user\n    }\n}\n\nfinal readonly class UserQuery\n{\n    #[Query(description: 'Get a user')]\n    public function user(int $userid): User\n    {\n        // Fetch and return user data\n    }\n}\n\n#[InputType]\nfinal readonly class CreateUserInputType\n{\n    public function __construct(\n        #[Field]\n        public int $userId,\n        #[Field]\n        public string $name,\n        #[Field(name: 'phoneNumber')]\n        public ?string $phone,\n    ) {}\n}\n\n#[Type]\nfinal readonly class User\n{\n    // Define fields as class properties\n    public function __construct(\n        #[Field]\n        public int $userId,\n        #[Field]\n        public string $name,\n        public ?string $phone,\n        #[Field(description: 'The status of the user')]\n        public UserStatusType $status,\n    ) {}\n\n    // Define fields with methods for additional logic\n    #[Field]\n    public function getPhoneNumber(): string\n    {\n        return sprintf('+31%s', $this->phone);\n    }\n}\n\n#[Enum(description: 'The status of the user')]\nenum UserStatusType: string\n{\n    case Created = 'CREATED';\n    case Removed = 'REMOVED';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Character Type in Python\nDESCRIPTION: Implementation of a GraphQL Character type in Python with resolvers for name, homeWorld, and friends fields. The class methods act as resolver functions that map to the GraphQL schema defined in comments. It shows how to resolve scalar values, referenced objects, and lists of objects.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/code3.mdx#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# type Character {\nclass Character:\n  # name: String\n  def name(self):\n    return self._name\n\n  # homeWorld: Planet\n  def homeWorld(self):\n    return fetchHomeworld(self._homeworldID)\n\n  # friends: [Character]\n  def friends(self):\n    return map(fetchCharacter, self._friendIDs)\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query and Type with GraphQLite Annotations in PHP\nDESCRIPTION: This code snippet demonstrates how to use GraphQLite annotations to define a GraphQL schema. It shows a ProductController with a @Query annotation and a Product class with a @Type and @Field annotation. The query returns a Product object based on an ID parameter.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/php/server/graphqlite.md#2025-04-08_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ProductController\n{\n    /**\n     * @Query()\n     */\n    public function product(string $id): Product\n    {\n        // Some code that looks for a product and returns it.\n    }\n}\n\n/**\n * @Type()\n */\nclass Product\n{\n    /**\n     * @Field()\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema\nDESCRIPTION: The resulting GraphQL schema generated from the PHP attributes in the previous example. It shows how PHP classes, methods, and properties are transformed into GraphQL types, fields, and operations.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/php/server/graphql-attribute-schema.md#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createUser(input: CreateUserInput!): User!\n}\n\ntype Query {\n  user(userId: Int!): User!\n}\n\ninput CreateUserInput {\n  userId: Int!\n  name: String!\n  phoneNumber: String\n}\n\ntype User {\n  userId: Int!\n  name: String!\n  status: UserStatus!\n  phoneNumber: String\n}\n\nenum UserStatus {\n  CREATED\n  REMOVED\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query in C# using graphql-dotnet\nDESCRIPTION: Demonstrates how to set up a basic GraphQL schema, define a query type, and execute a query using the GraphQL.NET library. The example shows a simple hello world query with schema definition and execution.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/c-net/server/graphql-dotnet.md#2025-04-08_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Threading.Tasks;\nusing GraphQL;\nusing GraphQL.Types;\nusing GraphQL.SystemTextJson; // First add PackageReference to GraphQL.SystemTextJson\n\npublic class Program\n{\n  public static async Task Main(string[] args)\n  {\n    var schema = Schema.For(@\"\n      type Query {\n        hello: String\n      }\n    \");\n\n    var json = await schema.ExecuteAsync(_ =>\n    {\n      _.Query = \"{ hello }\";\n      _.Root = new { Hello = \"Hello World!\" };\n    });\n\n    Console.WriteLine(json);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Server with Alumbra in Clojure\nDESCRIPTION: Sets up a GraphQL server using Alumbra with a Person type and QueryRoot. Implements resolvers for person queries and demonstrates schema definition with basic type system.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/clojure/server/alumbra.md#2025-04-08_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(require '[alumbra.core :as alumbra]\n         '[claro.data :as data])\n\n(def schema\n  \"type Person { name: String!, friends: [Person!]! }\n   type QueryRoot { person(id: ID!): Person, me: Person! }\n   schema { query: QueryRoot }\")\n\n(defrecord Person [id]\n  data/Resolvable\n  (resolve! [_ _]\n    {:name    (str \"Person #\" id)\n     :friends (map ->Person  (range (inc id) (+ id 3)))}))\n\n(def QueryRoot\n  {:person (map->Person {})\n   :me     (map->Person {:id 0})})\n\n(def app\n  (alumbra/handler\n    {:schema schema\n     :query  QueryRoot}))\n\n(defonce my-graphql-server\n  (aleph.http/start-server #'app {:port 3000}))\n```\n\n----------------------------------------\n\nTITLE: Type Kind Query\nDESCRIPTION: Demonstrates how to query both name and kind of a specific type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/introspection.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  __type(name: \"Droid\") {\n    name\n    kind\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Edges and Cursors for Pagination in GraphQL\nDESCRIPTION: A GraphQL query that introduces the edge concept for pagination, where each edge contains both the node (friend) and a cursor that can be used for paginating through the list.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/pagination.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hero {\n    name\n    friends(first: 2) {\n      edges {\n        node {\n          name\n        }\n        cursor\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspection Query for Node Interface in GraphQL\nDESCRIPTION: This introspection query retrieves information about the Node interface, including its name, kind, and fields.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __type(name: \"Node\") {\n    name\n    kind\n    fields {\n      name\n      type {\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL/REST Entity with API Platform in PHP\nDESCRIPTION: Demonstrates creating a Greeting entity class that serves as both a GraphQL and REST API endpoint. Uses Doctrine ORM annotations for database mapping and API Platform annotations for API configuration. The entity contains an ID field and a message field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/php/server/api-platform.md#2025-04-08_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace AppEntity;\n\nuse ApiPlatformCoreAnnotationApiResource;\nuse DoctrineORMMapping as ORM;\n\n/**\n * Greet someone!\n *\n * @ApiResource\n * @ORMEntity\n */\nclass Greeting\n{\n    /**\n     * @ORMId\n     * @ORMColumn(type=\"guid\")\n     */\n    public $id;\n\n    /**\n     * @var string Your nice message\n     *\n     * @ORMColumn\n     */\n    public $hello;\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Python Query Generation\nDESCRIPTION: Python code showing how to generate a complex GraphQL query with variables, arguments, and directives using the graphql_query package.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/graphql-query.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom graphql_query import Argument, Directive, Field, Operation, Query, Variable\n\nepisode = Variable(name=\"episode\", type=\"Episode\")\nwithFriends = Variable(name=\"withFriends\", type=\"Boolean!\")\n\narg_episode = Argument(name=\"episode\", value=episode)\narg_if = Argument(name=\"if\", value=withFriends)\n\nhero = Query(\n    name=\"hero\",\n    arguments=[arg_episode],\n    fields=[\n        \"name\",\n        Field(\n            name=\"friends\",\n            fields=[\"name\"],\n            directives=[Directive(name=\"include\", arguments=[arg_if])]\n        )\n    ]\n)\noperation = Operation(\n    type=\"query\",\n    name=\"Hero\",\n    variables=[episode, withFriends],\n    queries=[hero]\n)\nprint(operation.render())\n\"\"\"\nquery Hero(\n  $episode: Episode\n  $withFriends: Boolean!\n) {\n  hero(\n    episode: $episode\n  ) {\n    name\n    friends @include(\n      if: $withFriends\n    ) {\n      name\n    }\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using @stream Directive in GraphQL Queries\nDESCRIPTION: This example shows how to use the @stream directive on list fields. It allows the server to send an initial set of list items in the first payload, followed by additional items in subsequent payloads.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2020-12-08-defer-stream.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"cGVvcGxlOjE=\") {\n    name\n    films @stream(initialCount: 2, label: \"filmsStream\") {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Hello World Query with GraphQL Java\nDESCRIPTION: Demonstrates how to create and execute a simple GraphQL query that returns 'world' for the field 'hello'. Shows schema definition, runtime wiring setup, and query execution using graphql-java core classes.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/server/graphql-java.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport graphql.ExecutionResult;\nimport graphql.GraphQL;\nimport graphql.schema.GraphQLSchema;\nimport graphql.schema.StaticDataFetcher;\nimport graphql.schema.idl.RuntimeWiring;\nimport graphql.schema.idl.SchemaGenerator;\nimport graphql.schema.idl.SchemaParser;\nimport graphql.schema.idl.TypeDefinitionRegistry;\n\nimport static graphql.schema.idl.RuntimeWiring.newRuntimeWiring;\n\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n        String schema = \"type Query{hello: String}\";\n\n        SchemaParser schemaParser = new SchemaParser();\n        TypeDefinitionRegistry typeDefinitionRegistry = schemaParser.parse(schema);\n\n        RuntimeWiring runtimeWiring = newRuntimeWiring()\n                .type(\"Query\", builder -> builder.dataFetcher(\"hello\", new StaticDataFetcher(\"world\")))\n                .build();\n\n        SchemaGenerator schemaGenerator = new SchemaGenerator();\n        GraphQLSchema graphQLSchema = schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);\n\n        GraphQL build = GraphQL.newGraphQL(graphQLSchema).build();\n        ExecutionResult executionResult = build.execute(\"{hello}\");\n\n        System.out.println(executionResult.getData().toString());\n        // Prints: {hello=world}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Union Type Definition\nDESCRIPTION: Shows how to define a Union type that can return multiple object types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nunion SearchResult = Human | Droid | Starship\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Component with Next.js\nDESCRIPTION: React component that creates a blog page with tag filtering and post listing. Uses Next.js routing and components to display blog posts with tags, dates, and author information. Includes sorting by date and filtering by tag category.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default function Blog() {\n  const { asPath } = useRouter()\n  const items = getPagesUnderRoute(\"/blog\").flatMap(item => item.children || item)\n  const blogs = items.sort(\n    (a, b) => b.frontMatter.date - a.frontMatter.date,\n  )\n  const currentTag = asPath.startsWith(\"/blog\")\n    ? \"\"\n    : asPath.replace(\"/tags/\", \"\").replace(/\\/$/, \"\")\n  //\n  const tags = blogs\n    .flatMap(blog => blog.frontMatter.tags)\n    .reduce((acc, tag) => {\n      acc[tag] ||= 0\n      acc[tag] += 1\n      return acc\n    }, {})\n  //\n  const tagList = (\n    <div className=\"flex gap-3 md:gap-5 mt-6 flex-wrap roboto-mono\">\n      {Object.entries(tags)\n        .sort((a, b) => b[1] - a[1])\n        .map(([tag, count]) => (\n          <NextLink\n            key={tag}\n            href={currentTag === tag ? \"/blog\" : `/tags/${tag}`}\n            data-active={currentTag === tag ? \"\" : undefined}\n            className={clsx(\"tag [&[data-active]]:bg-primary capitalize\")}\n          >\n            {tag.replaceAll(\"-\", \" \")} ({count})\n          </NextLink>\n        ))}\n    </div>\n  )\n  //\n  const blogList = blogs.map(\n    page =>\n      (!currentTag || page.frontMatter.tags.includes(currentTag)) && (\n        <Card\n          key={page.route}\n          as={Link}\n          href={page.route}\n          className=\"flex flex-col\"\n        >\n          <div className=\"gap-2 flex mb-7\">\n            {page.frontMatter.tags.map(tag => (\n              <Tag key={tag}>{tag.replaceAll(\"-\", \" \")}</Tag>\n            ))}\n          </div>\n          <div className=\"font-extrabold text-xl md:text-3xl text-balance\">\n            {page.frontMatter.title}\n          </div>\n          <div className=\"opacity-50 text-sm my-7 flex gap-2\">\n            <time dateTime={page.frontMatter.date.toISOString()}>\n              {page.frontMatter.date.toLocaleDateString(\"en\", {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\",\n              })}\n            </time>\n            <span className=\"border-r border-gray-500\" />\n            <span>by {page.frontMatter.byline}</span>\n          </div>\n          <span className=\"text-primary block font-bold mt-auto\">\n            Read more →\n          </span>\n        </Card>\n      ),\n  )\n  return (\n    <>\n      <div className=\"py-10 md:py-20 container\">\n        <h1 className=\"text-4xl md:text-7xl font-extrabold mb-10\">Blog</h1>\n        <h3 className=\"text-2xl font-bold\">Categories</h3>\n        {tagList}\n      </div>\n      <div className=\"container grid md:grid-cols-2 gap-7 pb-10\">\n        {blogList}\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating a Subscription Operation in GraphQL\nDESCRIPTION: This example demonstrates how to initiate a subscription operation in GraphQL. It uses the 'subscription' keyword and selects specific fields from the 'reviewCreated' subscription.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/subscriptions.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription NewReviewCreated {\n  reviewCreated {\n    rating\n    commentary\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema\nDESCRIPTION: The resulting GraphQL schema generated from the Kotlin query implementation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/server/graphql-kotlin.md#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  helloWorld: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive GraphQL Query Example\nDESCRIPTION: This GraphQL query demonstrates an interactive example for querying a hero's data. It includes a comment encouraging users to add more fields to explore the API.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/index.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\n{\n  hero {\n    name\n    # add additional fields here!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Mutation for Story Likes\nDESCRIPTION: A GraphQL mutation example that allows clients to like a post and refetch the updated like count and like sentence. This mutation takes a StoryLikeInput parameter and returns the updated story data.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2015-10-16-subscriptions.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation StoryLikeMutation($input: StoryLikeInput) {\n  storyLike(input: $input) {\n    story {\n      likers { count }\n      likeSentence { text }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rating a Film with GraphQL Mutation\nDESCRIPTION: Example of a purpose-built mutation operation for rating a film. It demonstrates how GraphQL can express relationships between data in a more semantic way than CRUD operations.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/mutations.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true, \"variables\": { \"episode\": \"EMPIRE\", \"rating\": \"THUMBS_UP\" } }\nmutation RateFilm($episode: Episode!, $rating: FilmRating!) { \n  rateFilm(episode: $episode, rating: $rating) {\n    episode\n    viewerRating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from GraphQL Operations\nDESCRIPTION: This TypeScript code demonstrates the correct approach to generating types based on GraphQL operations. It creates types that accurately reflect the structure of the data returned by specific queries, ensuring type safety.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2024-09-19-codegen.mdx#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n# Only the fields appearing in the `GetProduct` query appear in the generated types\n\ntype GetProductData = {\n    products: Array<GetProductData_products>\n}\n\ntype GetProductData_products = {\n    id: string;\n    description: string | null;\n    price: string | null\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Connection Model with PageInfo in GraphQL\nDESCRIPTION: A GraphQL query demonstrating the complete connection model with pagination metadata. It includes totalCount, edges with nodes and cursors, and pageInfo with endCursor and hasNextPage flags.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/pagination.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hero {\n    name\n    friends(first: 2) {\n      totalCount\n      edges {\n        node {\n          name\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended GraphQL Schema for RandomDie Object Type\nDESCRIPTION: An expanded GraphQL schema for the RandomDie type that includes additional fields numSides and rollOnce, showing how both properties and methods of a class can be used as GraphQL fields.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/object-types.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype RandomDie {\n  numSides: Int!\n  rollOnce: Int!\n  roll(numRolls: Int!): [Int]\n}\n\ntype Query {\n  getDie(numSides: Int): RandomDie\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Ruby Gem\nDESCRIPTION: Command to install the graphql-ruby gem using Ruby's package manager.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/ruby/server/graphql-ruby.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install graphql\n```\n\n----------------------------------------\n\nTITLE: Simple Hero Name Query\nDESCRIPTION: Demonstrates a basic GraphQL query fetching the name field of a hero.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  hero {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Function Signature in TypeScript\nDESCRIPTION: Defines the signature of the main 'graphql' function. This function is used to execute GraphQL queries against a schema. It takes parameters for the schema, query string, root value, context, variables, and operation name.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/graphql.mdx#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction graphql(\n  schema: GraphQLSchema,\n  requestString: string,\n  rootValue?: any,\n  contextValue?: any,\n  variableValues?: {[key: string]: any},\n  operationName?: string\n): Promise<GraphQLResult>\n```\n\n----------------------------------------\n\nTITLE: Making GraphQL Request Using Curl\nDESCRIPTION: Demonstrates how to send a basic GraphQL query using curl command line tool with a POST request to a GraphQL endpoint.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/graphql-clients.mdx#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\"query\": \"{ hello }\"}' \\\nhttp://localhost:4000/graphql\n```\n\n----------------------------------------\n\nTITLE: GraphQL List Type Definition\nDESCRIPTION: Shows how to define a field that returns an array of Episode types, combining Non-Null and List modifiers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Character {\n  name: String!\n  appearsIn: [Episode]!\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hero Data with Friends using GraphQL (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a GraphQL query response. It includes data for a hero named Luke Skywalker and an array of his friends, each with their name.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/response.hero-friends.mdx#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hero\": {\n    \"name\": \"Luke Skywalker\",\n    \"friends\": [\n      { \"name\": \"Obi-Wan Kenobi\" },\n      { \"name\": \"R2-D2\" },\n      { \"name\": \"Han Solo\" },\n      { \"name\": \"Leia Organa\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Fields Query\nDESCRIPTION: Shows how to query nested fields by requesting hero's name and their friends' names.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  hero {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Enum Type Definition\nDESCRIPTION: Example of defining an enum type with named values.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar RGBType = new GraphQLEnumType({\n  name: \"RGB\",\n  values: {\n    RED: { value: 0 },\n    GREEN: { value: 1 },\n    BLUE: { value: 2 },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Object Type in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition for GraphQLInputObjectType and related types. It includes the constructor and configuration options for creating input object types in GraphQL.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass GraphQLInputObjectType {\n  constructor(config: GraphQLInputObjectConfig)\n}\n\ntype GraphQLInputObjectConfig = {\n  name: string;\n  fields: GraphQLInputObjectConfigFieldMapThunk | GraphQLInputObjectConfigFieldMap;\n  description?: string;\n}\n\ntype GraphQLInputObjectConfigFieldMapThunk = () => GraphQLInputObjectConfigFieldMap;\n\ntype GraphQLInputObjectFieldConfig = {\n  type: GraphQLInputType;\n  defaultValue?: any;\n  description?: string;\n}\n\ntype GraphQLInputObjectConfigFieldMap = {\n  [fieldName: string]: GraphQLInputObjectFieldConfig;\n};\n\ntype GraphQLInputObjectField = {\n  name: string;\n  type: GraphQLInputType;\n  defaultValue?: any;\n  description?: string;\n}\n\ntype GraphQLInputObjectFieldMap = {\n  [fieldName: string]: GraphQLInputObjectField;\n};\n```\n\n----------------------------------------\n\nTITLE: Appears In Field Resolver\nDESCRIPTION: Resolver demonstrating scalar coercion for the appearsIn field\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/execution.mdx#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nHuman: {\n  appearsIn(obj) {\n    return obj.appearsIn // returns [ 4, 5, 6 ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Field with graphql-relay\nDESCRIPTION: Demonstrates how to set up node field definitions using graphql-relay helpers by implementing object resolution and type name resolution functions.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fromGlobalId, nodeDefinitions } from \"graphql-relay\"\n\nconst { nodeInterface, nodeField } = nodeDefinitions(\n  globalId => {\n    const { type, id } = fromGlobalId(globalId)\n    if (type === \"Person\") {\n      return fetchPersonByURL(`/people/${id}/`)\n    }\n  },\n  object => {\n    if (object.hasOwnProperty(\"username\")) {\n      return \"Person\"\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Valid Query: Using Inline Fragments for Type-specific Fields in GraphQL\nDESCRIPTION: Example of a valid GraphQL query that uses an inline fragment to conditionally request a field ('primaryFunction') only on objects of type Droid.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/validation.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\nquery {\n  hero {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Film Type in GraphQL Schema\nDESCRIPTION: This code defines a Film type in GraphQL schema with three fields: title (String), episode (Int), and releaseDate (String). This type could be used to represent movie data in a GraphQL API for a film database or catalog.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/v1.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Film {\n  title: String\n  episode: Int\n  releaseDate: String\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for User Data\nDESCRIPTION: This snippet shows a simple GraphQL query to retrieve a user's name. It demonstrates the structure of a GraphQL query and how it corresponds to the defined schema.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/index.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  me {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Query: Using Named Fragments for Type-specific Fields in GraphQL\nDESCRIPTION: Example of a valid GraphQL query that uses a named fragment to request a field ('primaryFunction') only if the object is of type Droid, avoiding validation errors.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/validation.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\nquery {\n  hero {\n    name\n    ...DroidFields\n  }\n}\n\nfragment DroidFields on Droid {\n  primaryFunction\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Example of creating a new GraphQL schema with query and mutation root types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar MyAppSchema = new GraphQLSchema({\n  query: MyAppQueryRootType,\n  mutation: MyAppMutationRootType\n});\n```\n\n----------------------------------------\n\nTITLE: Response Payloads for @stream Directive\nDESCRIPTION: The response for a query using @stream comes in multiple payloads. The initial payload contains the initialCount number of list items, and subsequent payloads deliver additional list items one by one.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2020-12-08-defer-stream.mdx#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"person\": {\n      \"name\": \"Luke Skywalker\",\n      \"films\": [\n        { \"title\": \"A New Hope\" },\n        { \"title\": \"The Empire Strikes Back\" }\n      ]\n    }\n  },\n  \"hasNext\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"filmsStream\",\n  \"path\": [\"person\", \"films\", 2],\n  \"data\": {\n    \"title\": \"Return of the Jedi\"\n  },\n  \"hasNext\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"filmsStream\",\n  \"path\": [\"person\", \"films\", 3],\n  \"data\": {\n    \"title\": \"Revenge of the Sith\"\n  },\n  \"hasNext\": false\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response Format\nDESCRIPTION: Shows the expected JSON response format from a GraphQL server for a hello world query.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/graphql-clients.mdx#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"data\":{\"hello\":\"Hello world!\"}}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query\nDESCRIPTION: Sample query requesting human data including name, appearances, and starship information\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/execution.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  human(id: 1002) {\n    name\n    appearsIn\n    starships {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query with SwiftGraphQL in Swift\nDESCRIPTION: Demonstrates how to create and execute a GraphQL query using SwiftGraphQL. Shows model definition, selection creation, query construction, and query execution with error handling.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/swift-objective-c-ios/client/swift-graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftGraphQL\n\n// Define a Swift model.\nstruct Human: Identifiable {\n    let id: String\n    let name: String\n    let homePlanet: String?\n}\n\n// Create a selection.\nlet human = Selection.Human {\n    Human(\n        id: try $0.id(),\n        name: try $0.name(),\n        homePlanet: try $0.homePlanet()\n    )\n}\n\n// Construct a query.\nlet query = Selection.Query {\n    try $0.humans(human.list)\n}\n\n// Perform the query.\nsend(query, to: \"http://swift-graphql.heroku.com\") { result in\n    if let data = try? result.get() {\n        print(data) // [Human]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple GraphQL Query Example\nDESCRIPTION: Example of a basic GraphQL query structure requesting the 'name' field from a 'hero' query.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/graphql-query.md#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  hero {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query with Arguments\nDESCRIPTION: A GraphQL query that calls the rollDice function with specific arguments. This query requests three six-sided dice rolls.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/passing-arguments.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  rollDice(numDice: 3, numSides: 6)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript definition of the execute function in GraphQL\nDESCRIPTION: The TypeScript type definition for the execute function, including its parameters and return type. It also defines the MaybePromise and ExecutionResult types used in the function signature.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/execution.mdx#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function execute(\n  schema: GraphQLSchema,\n  documentAST: Document,\n  rootValue?: mixed,\n  contextValue?: mixed,\n  variableValues?: {[key: string]: mixed},\n  operationName?: string\n): MaybePromise<ExecutionResult>\n\ntype MaybePromise<T> = Promise<T> | T;\n\ntype ExecutionResult = {\n  data: Object;\n  errors?: GraphQLError[];\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Python Query Generation\nDESCRIPTION: Python code demonstrating how to generate a simple GraphQL query using the graphql_query package.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/graphql-query.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom graphql_query import Operation, Query\n\nhero = Query(name=\"hero\", fields=[\"name\"])\noperation = Operation(type=\"query\", queries=[hero])\n\nprint(operation.render())\n\"\"\"\nquery {\n  hero {\n    name\n  }\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Resolver Functions for GraphQL Fields\nDESCRIPTION: This JavaScript code shows how to implement resolver functions for GraphQL fields. It includes examples for resolving the 'me' field on the Query type and the 'name' field on the User type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/index.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Provide data for the `me` field on the `Query` type\nfunction Query_me(query, args, context, info) {\n  return context.request.auth.user\n}\n\n// Provide data for the `name` field on the `User` type\nfunction User_name(user, args, context, info) {\n  return context.db.getUserFullName(user.id)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Django Migrations\nDESCRIPTION: Commands to create and apply database migrations for the defined models.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/django-graphbox.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py makemigrations\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Starships List Resolver\nDESCRIPTION: Complex resolver handling a list of Promises for the starships field\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/execution.mdx#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Human_starships (obj, args, context, info) {\n  return obj.starshipIDs.map(\n    id => context.db.loadStarshipByID(id).then(\n      shipData => new Starship(shipData)\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL List Type in JavaScript\nDESCRIPTION: This example demonstrates how to use GraphQLList to define recursive relationships in a PersonType object.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar PersonType = new GraphQLObjectType({\n  name: \"Person\",\n  fields: () => ({\n    parents: { type: new GraphQLList(PersonType) },\n    children: { type: new GraphQLList(PersonType) },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Query with cURL\nDESCRIPTION: Demonstrates how to query the GraphQL server using cURL to fetch a person's name and their friends' names.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/clojure/server/alumbra.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -XPOST \"http://0:3000\" -H'Content-Type: application/json' -d'{\n  \"query\": \"{ me { name, friends { name } } }\"\n}'\n{\"data\":{\"me\":{\"name\":\"Person #0\",\"friends\":[{\"name\":\"Person #1\"},{\"name\":\"Person #2\"}]}}}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutation in queries.graphql\nDESCRIPTION: This GraphQL mutation defines a createToken operation with username and password inputs, returning a token and potential errors.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/ariadne-codegen.md#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateToken($username: String!, $password: String!) {\n  createToken(username: $username, password: $password) {\n    token\n    errors {\n      field\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Hero Data with Strawberry Shake in C#\nDESCRIPTION: Example of using Strawberry Shake's reactive API to watch and subscribe to GraphQL query results. The code demonstrates the cache-first execution strategy and subscription to data updates.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/c-net/client/strawberry-shake.md#2025-04-08_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclient.GetHero\n    .Watch(ExecutionStrategy.CacheFirst)\n    .Subscribe(result =>\n    {\n        Console.WriteLine(result.Data.Name);\n    })\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with Input Type for Review Creation\nDESCRIPTION: This snippet defines a GraphQL schema with an input type for creating reviews, demonstrating the need for argument validation and sanitization in resolver functions.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/security.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ninput ReviewInput {\n  stars: Int!\n  commentary: String\n}\n\ntype Mutation {\n  createReview(episode: Episode, review: ReviewInput!): Review\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Table Layout in Brangr GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to use Brangr's custom _layout directive to format results as a table. The query retrieves hero data with first and last name fields, which Brangr will render as a formatted HTML table.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/tools/brangr.md#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  heroes(_layout: { type: table }) { # _layout arg not sent to service\n    first\n    last\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CRUDDALS Class for Question Model\nDESCRIPTION: Definition of a CruddalsQuestion class that inherits from DjangoModelCruddals to generate CRUD+DALS operations for the Question model.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/graphene-django-cruddals.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom graphene_django_cruddals import DjangoModelCruddals\n\nclass CruddalsQuestion(DjangoModelCruddals):\n    class Meta:\n        model = Question\n```\n\n----------------------------------------\n\nTITLE: Response Payloads for @defer Directive\nDESCRIPTION: The response for a query using @defer comes in multiple payloads. The initial payload contains the critical data (person name), and a subsequent payload delivers the deferred fragment data (homeworld information).\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2020-12-08-defer-stream.mdx#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"person\": {\n      \"name\": \"Luke Skywalker\"\n    }\n  },\n  \"hasNext\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"homeworldDefer\",\n  \"path\": [\"person\"],\n  \"data\": {\n    \"homeworld\": {\n      \"name\": \"Tatooine\"\n    }\n  },\n  \"hasNext\": false\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Object Type Definitions\nDESCRIPTION: Examples of defining GraphQL object types with fields and resolvers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar AddressType = new GraphQLObjectType({\n  name: \"Address\",\n  fields: {\n    street: { type: GraphQLString },\n    number: { type: GraphQLInt },\n    formatted: {\n      type: GraphQLString,\n      resolve(obj) {\n        return obj.number + \" \" + obj.street\n      }\n    }\n  }\n})\n\nvar PersonType = new GraphQLObjectType({\n  name: \"Person\",\n  fields: () => ({\n    name: { type: GraphQLString },\n    bestFriend: { type: PersonType }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Directive in GraphQL\nDESCRIPTION: Example showing the syntax for defining the built-in @deprecated directive. It demonstrates how to specify directive arguments, default values, and applicable locations using the ON keyword.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @deprecated(\n  reason: String = \"No longer supported\"\n) on FIELD_DEFINITION | ENUM_VALUE\n```\n\n----------------------------------------\n\nTITLE: Executing a Manual GraphQL Query in Julia\nDESCRIPTION: This snippet demonstrates how to execute a GraphQL query using a manually written query string to fetch country names.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/julia/client/graphqlclient-jl.md#2025-04-08_snippet_4\n\nLANGUAGE: julia\nCODE:\n```\nquery_string = \"\"\"\n    {\n    countries{\n        name\n    }\n}\"\"\"\n\nresponse = GraphQLClient.execute(client, query_string)\n```\n\n----------------------------------------\n\nTITLE: Fetching Draft Email Previews with GraphQL Fragment\nDESCRIPTION: This GraphQL query retrieves preview information for the first 20 drafts in the main account. It uses a fragment to define reusable fields for the email preview.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/thinking-in-graphs.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  mainAccount {\n    drafts(first: 20) {\n      ...previewInfo\n    }\n  }\n}\n\nfragment previewInfo on Email {\n  subject\n  bodyPreviewSentence\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Lists of Objects in GraphQL\nDESCRIPTION: A simple GraphQL query that requests a hero and a list of their friends, demonstrating the basic approach to retrieving multiple related objects.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/pagination.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hero {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing EGGQL GraphQL Server using cURL\nDESCRIPTION: Command to test the GraphQL server by sending a query using cURL to retrieve the message field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/go/server/andrewwphillips-eggql.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST -d '{\"query\": \"{ message }\"}' localhost:80/graphql\n```\n\n----------------------------------------\n\nTITLE: Invalid Query: Missing Selection Set for Non-scalar Field in GraphQL\nDESCRIPTION: Example of an invalid GraphQL query that attempts to query a non-scalar field ('hero') without specifying a selection set of fields to retrieve.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/validation.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\n# INVALID: hero is not a scalar, so fields are needed\nquery {\n  hero\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQLError Module in JavaScript\nDESCRIPTION: Shows how to import the GraphQLError class using both ES6 and CommonJS syntax.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/error.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GraphQLError } from \"graphql\" // ES6\nvar { GraphQLError } = require(\"graphql\") // CommonJS\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Input Object Type in JavaScript\nDESCRIPTION: This example demonstrates how to create a GraphQLInputObjectType for a GeoPoint, including non-null fields and a field with a default value.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar GeoPoint = new GraphQLInputObjectType({\n  name: \"GeoPoint\",\n  fields: {\n    lat: { type: new GraphQLNonNull(GraphQLFloat) },\n    lon: { type: new GraphQLNonNull(GraphQLFloat) },\n    alt: { type: GraphQLFloat, defaultValue: 0 },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver with Arguments in JavaScript\nDESCRIPTION: A JavaScript resolver function that accepts arguments through a single args parameter. It implements a dice rolling function that uses numDice and numSides arguments.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/passing-arguments.mdx#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar root = {\n  rollDice(args) {\n    var output = []\n    for (var i = 0; i < args.numDice; i++) {\n      output.push(1 + Math.floor(Math.random() * (args.numSides || 6)))\n    }\n    return output\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Client and Provider in React\nDESCRIPTION: Sets up a GraphQLClient instance and wraps the app with ClientContext.Provider. This is required to use graphql-hooks in your React components.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/client/graphql-hooks.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GraphQLClient, ClientContext } from \"graphql-hooks\"\n\nconst client = new GraphQLClient({\n  url: \"/graphql\",\n})\n\nfunction App() {\n  return (\n    <ClientContext.Provider value={client}>\n      {/* children */}\n    </ClientContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Syntax Error in GraphQL Query\nDESCRIPTION: This snippet shows a GraphQL query with a syntax error, specifically using an incorrect operation keyword. It illustrates how syntax errors are handled in GraphQL responses.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/response.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\noperation { \n  updateHumanName(id: \"1000\", name: \"Luke Starkiller\" ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Default Variables\nDESCRIPTION: Shows how to define variables with default values in queries.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery HeroNameAndFriends($episode: Episode = JEDI) {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic GraphQL Server with Agoo in Ruby\nDESCRIPTION: This code demonstrates how to set up a minimal GraphQL server using the Agoo library. It defines a simple Query type with a 'hello' resolver, creates a schema, initializes and starts the Agoo server, and loads the GraphQL type definitions. The example shows how to expose a '/graphql' endpoint that responds to queries.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/ruby/server/agoo.md#2025-04-08_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'agoo'\n\nclass Query\n  def hello\n    'hello'\n  end\nend\n\nclass Schema\n  attr_reader :query\n\n  def initialize\n    @query = Query.new()\n  end\nend\n\nAgoo::Server.init(6464, 'root', thread_count: 1, graphql: '/graphql')\nAgoo::Server.start()\nAgoo::GraphQL.schema(Schema.new) {\n  Agoo::GraphQL.load(%^type Query { hello: String }^)\n}\nsleep\n\n# To run this GraphQL example type the following then go to a browser and enter\n# a URL of localhost:6464/graphql?query={hello}\n#\n# ruby hello.rb\n```\n\n----------------------------------------\n\nTITLE: Variables in GraphQL Fragments\nDESCRIPTION: Shows how fragments can access variables declared in the main query operation. The example uses a variable to control the number of friends returned.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery HeroComparison($first: Int = 3) {\n  leftComparison: hero(episode: EMPIRE) {\n    ...comparisonFields\n  }\n  rightComparison: hero(episode: JEDI) {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  friendsConnection(first: $first) {\n    totalCount\n    edges {\n      node {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Kotlin Class for GraphQL Query\nDESCRIPTION: This snippet demonstrates the auto-generated Kotlin class for the 'HelloWorldQuery'. It implements the GraphQLClientRequest interface and includes the query string, operation name, and result type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/client/graphql-kotlin.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.generated\n\nimport com.expediagroup.graphql.client.types.GraphQLClientRequest\nimport kotlin.String\nimport kotlin.reflect.KClass\n\nconst val HELLO_WORLD_QUERY: String = \"query HelloWorldQuery {\\n    helloWorld\\n}\"\n\nclass HelloWorldQuery: GraphQLClientRequest<HelloWorldQuery.Result> {\n    override val query: String = HELLO_WORLD_QUERY\n\n    override val operationName: String = \"HelloWorldQuery\"\n\n    override fun responseType(): KClass<HelloWorldQuery.Result> = HelloWorldQuery.Result::class\n\n    data class Result(\n        val helloWorld: String\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @defer Directive in GraphQL Queries\nDESCRIPTION: This example demonstrates how to use the @defer directive on fragment spreads to mark parts of a query as non-essential for immediate return. The server can then return the critical data first, followed by deferred data in subsequent payloads.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2020-12-08-defer-stream.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"cGVvcGxlOjE=\") {\n    name\n    ...HomeworldFragment @defer(label: \"homeworldDefer\")\n  }\n}\n\nfragment HomeworldFragment on Person {\n  homeworld {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL specifiedRules type definition\nDESCRIPTION: Type definition for the specifiedRules variable which contains all validation rules defined by the GraphQL spec as an array of functions returning visitors.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/validation.mdx#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet specifiedRules: Array<(context: ValidationContext) => any>\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum Type in GraphQL\nDESCRIPTION: Example of defining an Enum type in GraphQL schema using SDL, specifically an Episode enum with three possible values: NEWHOPE, EMPIRE, and JEDI.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Types for User Query\nDESCRIPTION: This snippet demonstrates how to define GraphQL types for a simple user query. It shows the structure for a Query type that returns a User, and a User type with a name field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/index.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  me: User\n}\n\ntype User {\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Query: Field Not Present on Interface Type in GraphQL\nDESCRIPTION: Example of an invalid GraphQL query that attempts to request a field ('primaryFunction') that exists on a specific implementation (Droid) but not on the interface type (Character).\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/validation.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\n# INVALID: primaryFunction does not exist on Character\nquery {\n  hero {\n    name\n    primaryFunction\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Root Type Introspection\nDESCRIPTION: Demonstrates how to query for the schema's query root type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/introspection.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  __schema {\n    queryType {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Scalar Type in GraphQL\nDESCRIPTION: Example showing how to define a custom scalar type (Date) in a GraphQL schema using SDL, which requires implementation-specific serialization and validation logic.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Date\n```\n\n----------------------------------------\n\nTITLE: GraphQL Union Type Definition\nDESCRIPTION: Example of creating a union type that can resolve to multiple object types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar PetType = new GraphQLUnionType({\n  name: \"Pet\",\n  types: [DogType, CatType],\n  resolveType(value) {\n    if (value instanceof Dog) {\n      return DogType\n    }\n    if (value instanceof Cat) {\n      return CatType\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL validate function signature\nDESCRIPTION: Type definition for the validate function which validates a GraphQL document AST against a provided schema, returning an array of encountered errors or an empty array if the document is valid.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/validation.mdx#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction validate(\n  schema: GraphQLSchema,\n  ast: Document,\n  rules?: any[]\n): GraphQLError[]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Scalar Types in TypeScript\nDESCRIPTION: These are the built-in scalar types in GraphQL, including Int, Float, String, Boolean, and ID. Each is represented as a GraphQLScalarType.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet GraphQLInt: GraphQLScalarType\n\nlet GraphQLFloat: GraphQLScalarType\n\nlet GraphQLString: GraphQLScalarType\n\nlet GraphQLBoolean: GraphQLScalarType\n\nlet GraphQLID: GraphQLScalarType\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Logic in Business Layer\nDESCRIPTION: This snippet shows how to implement authorization logic in a separate business logic layer (postRepository) instead of directly in the GraphQL resolver.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/authorization.mdx#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// authorization logic lives inside `postRepository`\nexport const postRepository = {\n  getBody({ user, post }) {\n    if (user?.id && (user.id === post.authorId)) {\n      return post.body\n    }\n    return null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Results with the 'first' Parameter in GraphQL\nDESCRIPTION: A GraphQL query that demonstrates slicing results by using the 'first' parameter to limit the number of friends returned to just two.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/pagination.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hero {\n    name\n    friends(first: 2) {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspection Query for Node Root Field in GraphQL\nDESCRIPTION: This introspection query retrieves information about the node root field, including its name, type, and arguments.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __schema {\n    queryType {\n      fields {\n        name\n        type {\n          name\n          kind\n        }\n        args {\n          name\n          type {\n            kind\n            ofType {\n              name\n              kind\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Non-Null Type in JavaScript\nDESCRIPTION: This example demonstrates how to use GraphQLNonNull to ensure a field is always non-null in a GraphQL object type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar RowType = new GraphQLObjectType({\n  name: \"Row\",\n  fields: () => ({\n    id: { type: new GraphQLNonNull(String) },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Query Type with Arguments\nDESCRIPTION: Defines a Query type with a human field that accepts an ID argument.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/queries.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  human(id: ID!): Human\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Products and Customers\nDESCRIPTION: GraphQL mutation to create initial products and customer data.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/dgraph.md#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  addProduct(input: [{ name: \"Dgraph\" }, { name: \"Dgraph Cloud\" }]) {\n    product {\n      id\n      name\n    }\n  }\n  addCustomer(input: [{ username: \"TonyStark\" }]) {\n    customer {\n      username\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Main GraphQL Schema\nDESCRIPTION: Main schema configuration combining query and mutation classes with graphene Schema setup.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/django-graphbox.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport graphene\nfrom myapp.schema import query_class, mutation_class\n\nclass Query(query_class, graphene.ObjectType):\n    pass\n\nclass Mutation(mutation_class, graphene.ObjectType):\n    pass\n\nschema = graphene.Schema(query=Query, mutation=Mutation)\n```\n\n----------------------------------------\n\nTITLE: Importing the validate function from GraphQL validation module\nDESCRIPTION: Examples showing how to import the validate function from either the graphql/validation module or the root graphql module using ES6 and CommonJS syntax.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/validation.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { validate } from \"graphql/validation\" // ES6\nvar { validate } = require(\"graphql/validation\") // CommonJS\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL.js via npm\nDESCRIPTION: This command installs the GraphQL.js package using npm. It's a prerequisite for running GraphQL in a Node.js environment.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/graphql-js.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphql\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Response\nDESCRIPTION: The JSON response returned by the GraphQL server containing the message field value.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/go/server/andrewwphillips-eggql.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"message\": \"hello, world\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Deprecated Field with Directive in GraphQL\nDESCRIPTION: Example showing how to use the @deprecated directive to mark a field as deprecated in a GraphQL schema. This demonstrates field-level directives with an optional reason argument.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  name: String @deprecated(reason: \"Use `fullName` instead\")\n  fullName: String\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Schema with Deprecated Fields\nDESCRIPTION: This GraphQL schema snippet demonstrates how to evolve an API by adding new fields and deprecating old ones. It shows the use of the @deprecated directive to mark a field as deprecated.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/index.mdx#2025-04-08_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  fullName: String\n  nickname: String\n  name: String @deprecated(reason: \"Use `fullName`.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic usage of Microfiber with GraphQL Introspection Results\nDESCRIPTION: Example showing how to import the Microfiber class, initialize it with introspection query results, and retrieve the modified schema after manipulation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/tools/microfiber.md#2025-04-08_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Microfiber } from \"microfiber\"\n\nconst introspectionQueryResults = {\n  // ...\n}\n\nconst microfiber = new Microfiber(introspectionQueryResults)\n\n// ...do some things to your schema with `microfiber`\n\nconst cleanedIntrospectonQueryResults = microfiber.getResponse()\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Input Type for Story Like Subscriptions\nDESCRIPTION: An input type definition for the StoryLikeSubscribeInput used in the subscription operation. It includes fields for the story ID and a client subscription ID to track the subscription.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2015-10-16-subscriptions.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ninput StoryLikeSubscribeInput {\n  storyId: string\n  clientSubscriptionId: string\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Ruby Hello World Implementation\nDESCRIPTION: Basic GraphQL schema implementation with a single query field that returns 'Hello world!'. Demonstrates core concepts like schema definition, query type creation, and field resolution.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/ruby/server/graphql-ruby.md#2025-04-08_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'graphql'\n\nclass QueryType < GraphQL::Schema::Object\n  field :hello, String\n\n  def hello\n    \"Hello world!\"\n  end\nend\n\nclass Schema < GraphQL::Schema\n  query QueryType\nend\n\nputs Schema.execute('{ hello }').to_json\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Value to GraphQL AST in TypeScript\nDESCRIPTION: Function signature for astFromValue, which produces a GraphQL Input Value AST given a JavaScript value and optional GraphQL input type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction astFromValue(\n  value: any,\n  type: GraphQLInputType\n): Value\n```\n\n----------------------------------------\n\nTITLE: Creating DataLoader Instance\nDESCRIPTION: Shows how to create a DataLoader instance for batch loading person data by URLs.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst personLoader = new DataLoader(urls =>\n  Promise.all(urls.map(fetchPersonByURL))\n)\n```\n\n----------------------------------------\n\nTITLE: Introspection Response for Node Interface in JSON\nDESCRIPTION: This JSON response provides the introspection details for the Node interface, confirming its structure and the presence of the id field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"__type\": {\n    \"name\": \"Node\",\n    \"kind\": \"INTERFACE\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": {\n          \"kind\": \"NON_NULL\",\n          \"ofType\": {\n            \"name\": \"ID\",\n            \"kind\": \"SCALAR\"\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Client Schema from Introspection in TypeScript\nDESCRIPTION: Function signature for buildClientSchema, which creates a GraphQLSchema instance from introspection data for client-side use.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction buildClientSchema(\n  introspection: IntrospectionQuery\n): GraphQLSchema\n```\n\n----------------------------------------\n\nTITLE: Building GraphQL Schema from Schema Language in TypeScript\nDESCRIPTION: Function signature for buildSchema, which creates a GraphQLSchema object from GraphQL schema language string or Source object.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction buildSchema(source: string | Source): GraphQLSchema\n```\n\n----------------------------------------\n\nTITLE: Field Stability Example Query in GraphQL\nDESCRIPTION: This query demonstrates field stability by fetching two nodes with related IDs and comparing their fields.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  fourNode: node(id: \"4\") {\n    id\n    ... on User {\n      name\n      userWithIdOneGreater {\n        id\n        name\n      }\n    }\n  }\n  fiveNode: node(id: \"5\") {\n    id\n    ... on User {\n      name\n      userWithIdOneLess {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQLBox Server with Caching and Debugging\nDESCRIPTION: JavaScript code that sets up a GraphQLBox server with Redis-based persistent caching and debugging capabilities. It configures the server with necessary modules and demonstrates how to integrate it with an existing application.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/graphql-box.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Cachemap from \"@cachemap/core\"\nimport redis from \"@cachemap/redis\"\nimport reaper from \"@cachemap/reaper\"\nimport CacheManager from \"@graphql-box/cache-manager\"\nimport Client from \"@graphql-box/client\"\nimport DebugManager from \"@graphql-box/debug-manager\"\nimport Execute from \"@graphql-box/execute\"\nimport RequestParser from \"@graphql-box/request-parser\"\nimport Server from \"@graphql-box/server\"\nimport { makeExecutableSchema } from \"@graphql-tools/schema\"\nimport { performance } from \"perf_hooks\"\nimport { schemaResolvers, schemaTypeDefs } from \"./schema\"\nimport logger from \"./logger\"\n\nconst schema = makeExecutableSchema({\n  typeDefs: schemaTypeDefs,\n  resolvers: schemaResolvers,\n})\n\nconst server = new Server({\n  client: new Client({\n    cacheManager: new CacheManager({\n      cache: new Cachemap({\n        name: \"server-cache\",\n        reaper: reaper({ interval: 300000 }),\n        store: redis(/* configure */),\n      }),\n      cascadeCacheControl: true,\n      typeCacheDirectives: {\n        // Add any type specific cache control directives in the format:\n        // TypeName: \"public, max-age=3\",\n      },\n    }),\n    debugManager: new DebugManager({\n      environment: \"server\",\n      log: (...args) => {\n        logger.log(...args)\n      },\n      name: \"SERVER\",\n      performance,\n    }),\n    requestManager: new Execute({ schema }),\n    requestParser: new RequestParser({ schema }),\n  }),\n})\n\n// Meanwhile... somewhere else in your code\n\napp.use(\"api/graphql\", graphqlServer.request())\n```\n\n----------------------------------------\n\nTITLE: Validating Literal Value AST for GraphQL Type in TypeScript\nDESCRIPTION: Function signature for isValidLiteralValue, which determines if a value literal AST is valid for a given GraphQL input type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isValidLiteralValue(\n  type: GraphQLInputType,\n  valueAST: Value\n): string[]\n```\n\n----------------------------------------\n\nTITLE: Displaying GraphQL Foundation Membership Fee Structure\nDESCRIPTION: A markdown table showing the membership fees for the GraphQL Foundation based on organization size, ranging from $2,000 for small organizations up to $20,000 for large organizations with 5,000+ employees.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/foundation/join.mdx#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Organization size        | Cost    |\n| :----------------------- | :------ |\n| General (5,000+)         | $20,000 |\n| General (2,000 to 4,999) | $10,000 |\n| General (50 to 1,999)    | $5,000  |\n| General (Up to 49)       | $2,000  |\n```\n\n----------------------------------------\n\nTITLE: Getting GraphQL Type from AST in TypeScript\nDESCRIPTION: Function signature for typeFromAST, which looks up a GraphQLType in a schema based on its AST representation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction typeFromAST(\n  schema: GraphQLSchema,\n  inputTypeAST: Type\n): GraphQLType\n```\n\n----------------------------------------\n\nTITLE: Querying Non-existent Field in GraphQL\nDESCRIPTION: This example demonstrates a validation error by querying a field that doesn't exist on the Starship type. It shows how GraphQL handles and reports validation errors.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/response.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  starship(id: 3000) {\n    width\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Server Setup with Express\nDESCRIPTION: Demonstrates how to set up a basic GraphQL server using Express and graphql-http, including package installation and server configuration.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/notes/ContributingToCodePage.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install express graphql-http graphql\n```\n\nLANGUAGE: js\nCODE:\n```\nvar express = require(\"express\")\nvar { createHandler } = require(\"graphql-http/lib/use/express\")\nvar { buildSchema } = require(\"graphql\")\n\nvar schema = buildSchema(/* GraphQL */ `\n  type Query {\n    hello: String\n  }\n`)\n\nvar root = { hello: () => \"Hello world!\" }\n\nvar app = express()\napp.all(\n  \"/graphql\",\n  createHandler({\n    schema: schema,\n    rootValue: root,\n  }),\n)\napp.listen(4000, () => console.log(\"Now browse to localhost:4000/graphql\"))\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Non-Null Type in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition for GraphQLNonNull, used to create non-nullable types in GraphQL schemas.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass GraphQLNonNull {\n  constructor(type: GraphQLType)\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating CRUDDALS with Existing GraphQL Schema\nDESCRIPTION: Example of how to integrate the generated CRUDDALS queries and mutations into an existing GraphQL schema with custom Query and Mutation classes.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/graphene-django-cruddals.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Query(\n    # ... your others queries\n    CruddalsQuestion.Query,\n    graphene.ObjectType,\n):\n    pass\n\n\nclass Mutation(\n    # ... your others mutations\n    CruddalsQuestion.Mutation,\n    graphene.ObjectType,\n):\n    pass\n\n\nschema = graphene.Schema( query=Query, mutation=Mutation, )\n```\n\n----------------------------------------\n\nTITLE: Configuring Ariadne Codegen in pyproject.toml\nDESCRIPTION: This TOML configuration specifies the path to the GraphQL queries file and the remote schema URL for Ariadne Codegen.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/ariadne-codegen.md#2025-04-08_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[ariadne-codegen]\nqueries_path = \"queries.graphql\"\nremote_schema_url = \"http://example.com/graphql/\"\n```\n\n----------------------------------------\n\nTITLE: Defining Lexer Function and Types in TypeScript\nDESCRIPTION: Defines the lex function, Lexer type, and Token type for lexing a GraphQL Source according to the GraphQL Grammar.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lex(source: Source): Lexer;\n\ntype Lexer = (resetPosition?: number) => Token;\n\nexport type Token = {\n  kind: number;\n  start: number;\n  end: number;\n  value: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Batched GraphQL Queries Example\nDESCRIPTION: This snippet shows multiple batched queries in a single GraphQL document, demonstrating the need for batch limiting to prevent excessive server load from a single request.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/security.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery NewHopeHero {\n  hero(episode: NEWHOPE) {\n    name\n  }\n}\nquery EmpireHero {\n  hero(episode: EMPIRE) {\n    name\n  }\n}\n### ...\nquery JediHero {\n  hero(episode: JEDI) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing GraphQL Schema in TypeScript\nDESCRIPTION: Function signature for printSchema, which converts a GraphQLSchema object to a string in the Schema Language format.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printSchema(schema: GraphQLSchema): string\n```\n\n----------------------------------------\n\nTITLE: Adding Arguments to GraphQL Query Definition\nDESCRIPTION: Enhanced GraphQL schema that adds arguments to the rollDice query. The numDice parameter is required (non-null) while numSides is optional.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/passing-arguments.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  rollDice(numDice: Int!, numSides: Int): [Int]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Using Visit Function to Edit AST in JavaScript\nDESCRIPTION: Demonstrates how to use the visit function to edit an AST, showing different return values and their effects on traversal.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar editedAST = visit(ast, {\n  enter(node, key, parent, path, ancestors) {\n    // @return\n    //   undefined: no action\n    //   false: skip visiting this node\n    //   visitor.BREAK: stop visiting altogether\n    //   null: delete this node\n    //   any value: replace this node with the returned value\n  },\n  leave(node, key, parent, path, ancestors) {\n    // @return\n    //   undefined: no action\n    //   false: no action\n    //   visitor.BREAK: stop visiting altogether\n    //   null: delete this node\n    //   any value: replace this node with the returned value\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Django Model for Question\nDESCRIPTION: Example of a Django model definition for a Question entity with fields for text, publication date, and active status.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/graphene-django-cruddals.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n    is_active = models.BooleanField(default=True)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Predicates in TypeScript\nDESCRIPTION: These functions are used to check the category of a GraphQL type. They include predicates for input types, output types, leaf types, composite types, and abstract types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isInputType(type: GraphQLType): boolean\n\nfunction isOutputType(type: GraphQLType): boolean\n\nfunction isLeafType(type: GraphQLType): boolean\n\nfunction isCompositeType(type: GraphQLType): boolean\n\nfunction isAbstractType(type: GraphQLType): boolean\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Schema with QueryType\nDESCRIPTION: Basic structure for exporting a GraphQLSchema with a query root type that will be the entry point for all queries.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { GraphQLSchema } from \"graphql\"\n\nexport default new GraphQLSchema({\n  query: QueryType,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Visit Function for AST Traversal in JavaScript\nDESCRIPTION: Defines the visit function for walking through an AST using depth-first traversal, allowing for AST modification and traversal control.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction visit(root, visitor, keyMap)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Located Error Function Definition\nDESCRIPTION: TypeScript function definition for creating location-aware GraphQL errors from standard errors.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/error.mdx#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction locatedError(error: Error, nodes: any[]): GraphQLError\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response Format in JSON\nDESCRIPTION: The standard JSON structure for a GraphQL response, including data, errors, and extensions fields according to the specification.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/serving-over-http.mdx#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": { ... },\n  \"errors\": [ ... ],\n  \"extensions\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Utilities in JavaScript\nDESCRIPTION: Demonstrates how to import the introspectionQuery utility from the graphql module using both ES6 and CommonJS syntax.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { introspectionQuery } from \"graphql\" // ES6\nvar { introspectionQuery } = require(\"graphql\") // CommonJS\n```\n\n----------------------------------------\n\nTITLE: Custom Scalar Type Definition\nDESCRIPTION: Example of creating a custom scalar type that only accepts odd numbers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar OddType = new GraphQLScalarType({\n  name: \"Odd\",\n  serialize: oddValue,\n  parseValue: oddValue,\n  parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      return oddValue(parseInt(ast.value, 10))\n    }\n    return null\n  }\n})\n\nfunction oddValue(value) {\n  return value % 2 === 1 ? value : null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Print Function for AST to String Conversion in TypeScript\nDESCRIPTION: Defines the print function that converts an AST into a string using a set of reasonable formatting rules.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction print(ast): string\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Product and Query Types\nDESCRIPTION: This GraphQL schema defines a Product type with various fields and a Query type that returns an array of Products. It demonstrates the use of non-null fields and nullable fields in GraphQL.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2024-09-19-codegen.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Product {\n  id: String!\n  \"\"\"\n  The name of the product.\n  A product must always have a name.\n  \"\"\"\n  name: String!\n  \"\"\"\n  The description of the product.\n  May be null if the product doesn't have a description.\n  \"\"\"\n  description: String\n  \"\"\"\n  The price of the product.\n  May be null if the product doesn't have a description.\n  \"\"\"\n  price: Float\n}\n\n\ntype Query {\n  products: [Product!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Field Stability Example Response in JSON\nDESCRIPTION: This JSON response demonstrates field stability by showing consistent data for related nodes across different queries.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fourNode\": {\n    \"id\": \"4\",\n    \"name\": \"Mark Zuckerberg\",\n    \"userWithIdOneGreater\": {\n      \"id\": \"5\",\n      \"name\": \"Chris Hughes\"\n    }\n  },\n  \"fiveNode\": {\n    \"id\": \"5\",\n    \"name\": \"Chris Hughes\",\n    \"userWithIdOneLess\": {\n      \"id\": \"4\",\n      \"name\": \"Mark Zuckerberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting GraphQL Object in Julia\nDESCRIPTION: This snippet shows how to use introspection to build a Julia type from a GraphQL object named 'Country'.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/julia/client/graphqlclient-jl.md#2025-04-08_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nCountry = GraphQLClient.introspect_object(client, \"Country\")\n```\n\n----------------------------------------\n\nTITLE: Using Comments in GraphQL Schema\nDESCRIPTION: Example showing how to add single-line comments to a GraphQL schema definition. These comments are preceded by a # character and are ignored by the GraphQL parser.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\n# This line is treated like whitespace and ignored by GraphQL\ntype Character {\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: TypeInfo Class Definition in TypeScript\nDESCRIPTION: Class definition for TypeInfo, a utility class for tracking current field and type definitions during AST traversal.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass TypeInfo {\n  constructor(schema: GraphQLSchema)\n  getType(): GraphQLOutputType\n  getParentType(): GraphQLCompositeType\n  getInputType(): GraphQLInputType\n  getFieldDef(): GraphQLFieldDefinition\n  getDirective(): GraphQLDirective\n  getArgument(): GraphQLArgument\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Query Type in GraphQL Schema\nDESCRIPTION: A simple GraphQL schema definition that declares a Query type with a rollThreeDice field returning an array of integers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/passing-arguments.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  rollThreeDice: [Int]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Project Tagline in GraphQL\nDESCRIPTION: This GraphQL query retrieves the tagline for a project named 'GraphQL'. It demonstrates the basic structure of a GraphQL query, including field selection and argument passing.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/ask-for-what-you-want.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  project(name: \"GraphQL\") {\n    tagline\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ariadne Codegen via pip\nDESCRIPTION: This command installs Ariadne Codegen using pip, the Python package installer.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/ariadne-codegen.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install ariadne-codegen\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Un-modifiers in TypeScript\nDESCRIPTION: These utility functions are used to strip non-null and list wrappers from GraphQL types, returning the underlying named or nullable type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getNullableType(type: GraphQLType): GraphQLNullableType\n\nfunction getNamedType(type: GraphQLType): GraphQLNamedType\n```\n\n----------------------------------------\n\nTITLE: Installing Pydantic GraphQL Client via pip\nDESCRIPTION: Command to install the pydantic-graphql package using pip package manager.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/ql.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip3 install pydantic-graphql\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL List Type in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition for GraphQLList, which is used to create list types in GraphQL schemas.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass GraphQLList {\n  constructor(type: GraphQLType)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Kotlin Spring Server Dependency\nDESCRIPTION: Gradle dependency configuration for adding GraphQL Kotlin Spring Server to the project.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/server/graphql-kotlin.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nimplementation(\"com.expediagroup\", \"graphql-kotlin-spring-server\", latestVersion)\n```\n\n----------------------------------------\n\nTITLE: Using clientgen Command Line Arguments for C++20 GraphQL Client Generation\nDESCRIPTION: Command line usage and options for the clientgen utility that generates C++20 GraphQL client code. The utility takes a schema file, request file, output filename prefix, and output namespace as required parameters, along with several optional arguments for customizing the output location and behavior.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/content/code/language-support/c-c/client/cppgraphqlgen-clientgen.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage:  clientgen [options] <schema file> <request file> <output filename prefix> <output namespace>\nCommand line options:\n  --version              Print the version number\n  -? [ --help ]          Print the command line options\n  -v [ --verbose ]       Verbose output including generated header names as\n                         well as sources\n  -s [ --schema ] arg    Schema definition file path\n  -r [ --request ] arg   Request document file path\n  -o [ --operation ] arg Operation name if the request document contains more\n                         than one\n  -p [ --prefix ] arg    Prefix to use for the generated C++ filenames\n  -n [ --namespace ] arg C++ sub-namespace for the generated types\n  --source-dir arg       Target path for the <prefix>Client.cpp source file\n  --header-dir arg       Target path for the <prefix>Client.h header file\n  --no-introspection     Do not expect support for Introspection\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GraphQL Error Messages in Development Environment\nDESCRIPTION: This example shows how GraphQL provides detailed error information when querying for a non-existent field. It illustrates why such detailed errors should be hidden in production environments to prevent potential attackers from inferring schema details.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/security.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\nquery {\n  starship(id: 3000) {\n    width\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Object Type with JavaScript ES6 Class\nDESCRIPTION: JavaScript implementation of the RandomDie GraphQL type using an ES6 class with instance methods as resolvers. It includes the root resolver that creates instances of the RandomDie class.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/object-types.mdx#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass RandomDie {\n  constructor(numSides) {\n    this.numSides = numSides\n  }\n\n  rollOnce() {\n    return 1 + Math.floor(Math.random() * this.numSides)\n  }\n\n  roll({ numRolls }) {\n    var output = []\n    for (var i = 0; i < numRolls; i++) {\n      output.push(this.rollOnce())\n    }\n    return output\n  }\n}\n\nvar root = {\n  getDie({ numSides }) {\n    return new RandomDie(numSides || 6)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Multiple Aliased Fields\nDESCRIPTION: This snippet demonstrates a query with multiple aliased fields, which could potentially overload the underlying data source. It illustrates the need for breadth limiting in GraphQL APIs.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/security.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  viewer {\n    friends1: friends(limit: 1) { name }\n    friends2: friends(limit: 2) { name }\n    friends3: friends(limit: 3) { name }\n    # ...\n    friends100: friends(limit: 100) { name }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pylon Framework with NPM\nDESCRIPTION: Command to create a new Pylon project using npm create command.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/pylon.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create pylon@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Ariadne with pip\nDESCRIPTION: This snippet shows how to install Ariadne using pip, the Python package installer. It's a simple one-line command that fetches and installs the Ariadne library.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/ariadne.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install ariadne\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Schema Types\nDESCRIPTION: Examples of importing GraphQL schema types using ES6 and CommonJS syntax.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/type.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GraphQLSchema } from \"graphql\" // ES6\nvar { GraphQLSchema } = require(\"graphql\") // CommonJS\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Client with Ariadne Codegen\nDESCRIPTION: This command runs Ariadne Codegen to generate the Python GraphQL client based on the configuration and queries.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/ariadne-codegen.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ariadne-codegen\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Formatting Function and Types\nDESCRIPTION: TypeScript definitions for error formatting function and related types following the GraphQL specification.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/error.mdx#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction formatError(error: GraphQLError): GraphQLFormattedError\n\ntype GraphQLFormattedError = {\n  message: string,\n  locations: GraphQLErrorLocation[]\n};\n\ntype GraphQLErrorLocation = {\n  line: number,\n  column: number\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Source from GraphQL Module in JavaScript\nDESCRIPTION: Demonstrates how to import the Source class from the GraphQL module using both ES6 and CommonJS syntax.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Source } from \"graphql\" // ES6\nvar { Source } = require(\"graphql\") // CommonJS\n```\n\n----------------------------------------\n\nTITLE: Validating JavaScript Value for GraphQL Type in TypeScript\nDESCRIPTION: Function signature for isValidJSValue, which determines if a JavaScript value is valid for a given GraphQL input type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isValidJSValue(value: any, type: GraphQLInputType): string[]\n```\n\n----------------------------------------\n\nTITLE: GZIP Accept-Encoding Header Example\nDESCRIPTION: HTTP header example showing how to enable GZIP compression for GraphQL API responses to improve network performance.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/performance.mdx#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAccept-Encoding: gzip\n```\n\n----------------------------------------\n\nTITLE: Rendering Cards Component with GraphQL Best Practices\nDESCRIPTION: JSX code that renders a Cards component displaying various GraphQL best practice topics. Each card contains a title, link, and description for different aspects of GraphQL implementation like schema design, authorization, pagination, and security.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/best-practices.mdx#2025-04-08_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cards } from '../../components/cards'\n\n<Cards\n  items={[\n    {\n      title: \"Thinking in Graphs\",\n      link: \"/learn/thinking-in-graphs/\",\n      description: \"Model your business domain as a graph\",\n    },\n    {\n      title: \"Serving over HTTP\",\n      link: \"/learn/serving-over-http/\",\n      description: \"Handle GraphQL requests on HTTP servers\",\n    },\n    {\n      title: \"Authorization\",\n      link: \"/learn/authorization/\",\n      description: \"Delegate authorization logic to the business logic layer\",\n    },\n    {\n      title: \"Pagination\",\n      link: \"/learn/pagination/\",\n      description: \"Allow clients to traverse lists of objects with a consistent field pagination model\",\n    },\n    {\n      title: \"Schema Design\",\n      link: \"/learn/schema-design/\",\n      description: \"Design and evolve a type system over time without versions\",\n    },\n    {\n      title: \"Global Object Identification\",\n      link: \"/learn/global-object-identification/\",\n      description: \"Consistent object access enables simple caching and object lookups\",\n    },\n    {\n      title: \"Caching\",\n      link: \"/learn/caching/\",\n      description: \"Provide Object Identifiers so clients can build rich caches\",\n    },\n    {\n      title: \"Performance\",\n      link: \"/learn/performance/\",\n      description: \"Optimize the execution and delivery of GraphQL responses\",\n    },\n    {\n      title: \"Security\",\n      link: \"/learn/security/\",\n      description: \"Protect GraphQL APIs from malicious operations\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Partial Product Query\nDESCRIPTION: This JSON object represents the response from the GraphQL server for the partial product query. It shows how the response structure matches the query, not the full schema definition.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2024-09-19-codegen.mdx#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"42\",\n  \"description\": null,\n  \"price\": 15.5\n}\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Website Locally\nDESCRIPTION: Command to start the development server for local preview of the GraphQL website\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/README.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga Dependencies\nDESCRIPTION: This snippet shows how to install the required dependencies for GraphQL Yoga using npm. It installs both graphql-yoga and graphql packages.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/graphql-yoga.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphql-yoga graphql\n```\n\n----------------------------------------\n\nTITLE: Defining Post Type in GraphQL Schema\nDESCRIPTION: This snippet shows how to define a simple Post type in a GraphQL schema with authorId and body fields.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/authorization.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post {\n  authorId: ID!\n  body: String\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the GraphQL Module in JavaScript\nDESCRIPTION: Shows how to import the 'graphql' module using ES6 and CommonJS syntax. This is the entry point for using GraphQL functionality in a JavaScript project.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/graphql.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { graphql } from \"graphql\" // ES6\nvar { graphql } = require(\"graphql\") // CommonJS\n```\n\n----------------------------------------\n\nTITLE: Defining Parse Function in TypeScript\nDESCRIPTION: Defines the parse function that takes a GraphQL source and parses it into a Document, throwing a GraphQLError if a syntax error is encountered.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function parse(\n  source: Source | string,\n  options?: ParseOptions\n): Document\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GraphQL Website\nDESCRIPTION: Command to install the required npm dependencies for the GraphQL website\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/README.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for GraphQL Kotlin Spring WebClient\nDESCRIPTION: This snippet shows how to set up the Gradle build file to generate Jackson models for use with GraphQL Kotlin Spring WebClient. It includes plugin configuration and dependency declaration.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/client/graphql-kotlin.md#2025-04-08_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n// build.gradle.kts\nimport com.expediagroup.graphql.plugin.gradle.graphql\n\nplugins {\n    id(\"com.expediagroup.graphql\") version $latestGraphQLKotlinVersion\n}\n\ndependencies {\n  implementation(\"com.expediagroup:graphql-kotlin-spring-client:$latestGraphQLKotlinVersion\")\n}\n\ngraphql {\n    client {\n        // target GraphQL endpoint\n        endpoint = \"http://localhost:8080/graphql\"\n        // package for generated client code\n        packageName = \"com.example.generated\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building AST Schema in TypeScript\nDESCRIPTION: Function signature for buildASTSchema, which constructs a GraphQLSchema instance from a parsed AST of a schema document.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction buildASTSchema(\n  ast: SchemaDocument,\n  queryTypeName: string,\n  mutationTypeName: string\n): GraphQLSchema\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up GraphQL Website Repository\nDESCRIPTION: Commands for cloning the GraphQL website repository and installing its dependencies\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/graphql/graphql.github.io.git\\ncd graphql.github.io\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Package Scanning\nDESCRIPTION: YAML configuration for specifying which packages should be scanned for GraphQL schema objects.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/server/graphql-kotlin.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngraphql:\n  packages:\n    - \"com.your.package\"\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query with Cynic in Rust\nDESCRIPTION: Demonstrates how to create a GraphQL query for fetching film director information using cynic. Shows struct definitions with QueryFragment derivation, argument handling, and HTTP request execution using reqwest.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/rust/client/cynic.md#2025-04-08_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(cynic::QueryFragment, Debug)]\n#[cynic(\n    schema_path = \"../schemas/starwars.schema.graphql\",\n    query_module = \"query_dsl\",\n    graphql_type = \"Root\",\n    argument_struct = \"FilmArguments\"\n)]\nstruct FilmDirectorQuery {\n    #[arguments(id = &args.id)]\n    film: Option<Film>,\n}\n\n#[derive(cynic::QueryFragment, Debug)]\n#[cynic(\n    schema_path = \"../schemas/starwars.schema.graphql\",\n    query_module = \"query_dsl\",\n    graphql_type = \"Film\"\n)]\nstruct Film {\n    title: Option<String>,\n    director: Option<String>,\n}\n\n#[derive(cynic::FragmentArguments)]\nstruct FilmArguments {\n    id: Option<cynic::Id>,\n}\n\nfn main() {\n    use cynic::{QueryBuilder, http::ReqwestBlockingExt};\n\n    let query = FilmDirectorQuery::build(&FilmArguments {\n        id: Some(\"ZmlsbXM6MQ==\".into()),\n    })\n\n    reqwest::blocking::Client::new()\n        .post(\"https://swapi-graphql.netlify.com/.netlify/functions/index\")\n        .run_graphql(query)\n        .unwrap()\n}\n\nmod query_dsl {\n    cynic::query_dsl!(\"../schemas/starwars.schema.graphql\");\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the execute function from GraphQL in JavaScript\nDESCRIPTION: Examples of how to import the execute function from the GraphQL package using ES6 and CommonJS syntax.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/execution.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { execute } from \"graphql\" // ES6\nvar { execute } = require(\"graphql\") // CommonJS\n```\n\n----------------------------------------\n\nTITLE: Defining ParseValue Function in TypeScript\nDESCRIPTION: Defines the parseValue function that parses a string containing a GraphQL value into an AST, useful for tools operating on GraphQL Values directly.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function parseValue(\n  source: Source | string,\n  options?: ParseOptions\n): Value\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Schema File\nDESCRIPTION: Commands to create and edit the GraphQL schema file.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/dgraph.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntouch schema.graphql\nnano schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Package for Schema Building\nDESCRIPTION: Command to install the graphql package which provides schema building tools needed for creating a GraphQL wrapper.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mesh Project Metadata in YAML\nDESCRIPTION: YAML configuration block defining the core metadata for a GraphQL Mesh project, including project name, description, documentation URL, GitHub repository, and NPM package name.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/tools/graphql-mesh.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: GraphQL Mesh\ndescription: GraphQL Mesh allows you to use GraphQL query language to access data in remote APIs that don't run GraphQL (and also ones that do run GraphQL). It can be used as a gateway to other services, or run as a local GraphQL schema that aggregates data from remote APIs.\nurl: https://graphql-mesh.com\ngithub: Urigo/graphql-mesh\nnpm: \"@graphql-mesh/cli\"\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Strawberry GraphQL Package\nDESCRIPTION: Command to install the Strawberry GraphQL library using pip package manager.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/strawberry.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install strawberry-graphql\n```\n\n----------------------------------------\n\nTITLE: Rendering TOC Navigation Links in JSX\nDESCRIPTION: React/JSX code snippet that maps through table of contents items to create navigation links. Each link uses the item's ID as a key and href anchor, displaying the value as link text.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/app/conf/2023/faq/faq.mdx#2025-04-08_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"mt-6 grid grid-cols-2 gap-x-4\">{toc.map(({value, id}) => <a key={id} href={`#${id}`}>{value}</a>)}</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Dgraph Using Docker\nDESCRIPTION: Docker commands to pull and run Dgraph standalone instance with appropriate port mappings and volume mounting.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/dgraph.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull dgraph/standalone\nmkdir -p ~/dgraph\ndocker run -it -p 5080:5080 -p 6080:6080 -p 8080:8080 \\\n  -p 9080:9080 -p 8000:8000 -v ~/dgraph:/dgraph --name dgraph \\\n  dgraph/standalone:master\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Authorization in JavaScript Resolver\nDESCRIPTION: This code demonstrates how to implement authorization logic directly in a GraphQL resolver function for the body field of a Post type. It checks if the current user is the author of the post before returning the body content.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/authorization.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Post_body(obj, args, context, info) {\n  // return the post body only if the user is the post's author\n  if (context.user && (context.user.id === obj.authorId)) {\n    return obj.body\n  }\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQLError Class Definition\nDESCRIPTION: TypeScript class definition for GraphQLError that extends Error class. Includes constructor parameters for message, nodes, stack trace, source, positions, original error, and extensions.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/error.mdx#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass GraphQLError extends Error {\n constructor(\n   message: string,\n   nodes?: any[],\n   stack?: string,\n   source?: Source,\n   positions?: number[],\n   originalError?: Error,\n   extensions?: { [key: string]: mixed }\n )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Source Class in TypeScript\nDESCRIPTION: Shows the TypeScript definition of the Source class constructor, which represents the input string to the GraphQL server.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Source {\n  constructor(body: string, name?: string)\n}\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Grid Layout\nDESCRIPTION: JSX/HTML grid layout component that maps through table of contents items to create navigation links.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/app/conf/2024/speak/index.mdx#2025-04-08_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"mt-6 grid grid-cols-2 gap-x-4\">\n  {toc.map(({ value, id }) => (\n    <a key={id} href={`#${id}`}>\n      {value}\n    </a>\n  ))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Interactive Map Integration with Leaflet\nDESCRIPTION: Implementation of an interactive map using Leaflet library to display meetup locations. Includes custom marker setup and popup functionality.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/events.mdx#2025-04-08_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseEffect(() => {\n    import(\"leaflet\").then(L => {\n      L.Icon.Default.mergeOptions({\n        iconRetinaUrl: pinkCircle.src,\n        shadowUrl: \"\",\n      })\n      const map = L.map(\"map\").setView([45, -15], 2)\n      L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\").addTo(map)\n      for (const { node } of meetups) {\n        L.marker([node.latitude, node.longitude])\n          .addTo(map)\n          .bindPopup(\n            `<a href=\"${node.link}\" target=\"_blank\" rel=\"noreferrer\" class=\"!text-primary\">${node.name}</a>`,\n          )\n      }\n    })\n  }, [])\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested GraphQL Query Example\nDESCRIPTION: This snippet shows a cyclical query with deeply nested fields, demonstrating the potential for excessive server load. It illustrates why depth limiting is important in GraphQL APIs.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/security.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hero {\n    name\n    friends {\n      name\n      friends {\n        name\n        friends {\n          name\n          friends {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package Metadata in YAML\nDESCRIPTION: YAML frontmatter defining the package name, description and GitHub repository location for the go-graphql-client package.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/go/client/go-graphql-client.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: go-graphql-client\ndescription: A GraphQL Go client with Mutation, Query and Subscription support.\ngithub: hasura/go-graphql-client\n---\n```\n\n----------------------------------------\n\nTITLE: Creating New Django App\nDESCRIPTION: Commands to navigate to project directory and create a new Django application.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/django-graphbox.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd myproject\npython manage.py startapp myapp\n```\n\n----------------------------------------\n\nTITLE: Defining Film Type Schema in GraphQL\nDESCRIPTION: Defines a GraphQL type called Film with fields for title, episode number, release date, opening crawl text, and director. Each field is typed appropriately with String or Int data types to represent movie metadata.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/v3.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n  director: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Strawberry GraphQL Server\nDESCRIPTION: Example of a basic GraphQL server implementation using Strawberry, featuring a Query type with a hello field that accepts an optional name parameter. The schema is created using the Query type and can be served using the strawberry server command.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/strawberry.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, name: str = \"World\") -> str:\n        return f\"Hello {name}\"\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Single Username Query Response in JSON\nDESCRIPTION: This JSON response shows the result of fetching a user by username, returning the user's ID.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": {\n    \"id\": \"4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQUrl Package Metadata Definition\nDESCRIPTION: YAML frontmatter defining the package name, description, GitHub repository and NPM package name for the GraphQUrl project.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/client/graphqurl.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: graphqurl\ndescription: curl for GraphQL with autocomplete, subscriptions and GraphiQL. Also a dead-simple universal javascript GraphQL client.\ngithub: hasura/graphqurl\nnpm: \"graphqurl\"\n---\n```\n\n----------------------------------------\n\nTITLE: Defining urql Package Metadata in Markdown\nDESCRIPTION: This code snippet defines metadata for the urql GraphQL client package, including its name, description, URL, GitHub repository, and npm package name. It's written in YAML-like syntax within a Markdown file.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/client/urql.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: urql\ndescription: A highly customizable and versatile GraphQL client with which you add on features like normalized caching as you grow.\nurl: https://formidable.com/open-source/urql/docs/\ngithub: FormidableLabs/urql\nnpm: \"@urql/core\"\n---\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Introspection Query\nDESCRIPTION: Shows how to use GraphQL's introspection capabilities to query the schema itself, specifically requesting information about the User type and its fields.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2015-09-14-graphql.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __type(name: \"User\") {\n    name\n    fields {\n      name\n      type {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQLBundle Project Metadata in Markdown\nDESCRIPTION: YAML frontmatter metadata block defining the name, description and GitHub repository for the GraphQLBundle project.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/php/server/graphqlbundle.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: GraphQLBundle\ndescription: A GraphQL server for Symfony\ngithub: overblog/GraphQLBundle\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding GraphQL Foundation Members Display using IframeResizer in React\nDESCRIPTION: This code snippet embeds an iframe from graphql.landscape2.io that displays GraphQL Foundation members. It uses the iframe-resizer-react component to create a responsive display that adjusts to content height.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/foundation/members.mdx#2025-04-08_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport IframeResizer from \"iframe-resizer-react\"\n\n<IframeResizer\n  className=\"w-full mt-6\"\n  src=\"https://graphql.landscape2.io/embed/embed.html?base-path=&classify=category&key=graphql-foundation-member&headers=false&category-header=false&category-in-subcategory=false&title-uppercase=false&title-alignment=left&title-font-family=sans-serif&title-font-size=13&style=clean&bg-color=%2348264b&fg-color=%23ffffff&item-modal=false&item-name=false&size=xl&items-alignment=left&iframe-resizer=true\"\n  heightCalculationMethodeightCalculationMethod=\"max\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing DataLoader\nDESCRIPTION: Command to install the DataLoader package for optimizing data fetching.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm i dataloader\n```\n\n----------------------------------------\n\nTITLE: Installing Graphene via pip\nDESCRIPTION: Command to install the Graphene library using pip package manager.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/graphene.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install graphene\n```\n\n----------------------------------------\n\nTITLE: Defining introspectionQuery Variable in JavaScript\nDESCRIPTION: Declares the introspectionQuery variable as a string, which contains a GraphQL query for introspecting a server's type system.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar introspectionQuery: string\n```\n\n----------------------------------------\n\nTITLE: Defining Project Metadata for GQL GraphQL Client in Markdown\nDESCRIPTION: This snippet defines the metadata for the GQL project using YAML front matter in a Markdown file. It specifies the project name, provides a short description of the library's purpose, and includes a link to the GitHub repository.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/gql.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: GQL\ndescription: A GraphQL client in Python.\ngithub: graphql-python/gql\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Query Param Provider with CodePage Component\nDESCRIPTION: JSX component wrapper that provides query parameter functionality to the CodePage component using NextAdapter\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/tools-and-libraries.mdx#2025-04-08_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{<QueryParamProvider adapter={NextAdapter}><CodePage {...props} /></QueryParamProvider>}\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL HTTP Handler for Express\nDESCRIPTION: Shows how to import the createHandler function from graphql-http package for both ES6 and CommonJS module systems.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/graphql-http.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHandler } from \"graphql-http/lib/use/express\" // ES6\nconst { createHandler } = require(\"graphql-http/lib/use/express\") // CommonJS\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Morpheus GraphQL Client\nDESCRIPTION: YAML frontmatter block defining the project name, description and GitHub repository for the morpheus-graphql-client Haskell library.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/haskell/client/morpheus-graphql-client.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: morpheus-graphql-client\ndescription: A strongly-typed GraphQL client implementation in Haksell.\ngithub: morpheusgraphql/morpheus-graphql\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Hero and Friends Data with GraphQL\nDESCRIPTION: This GraphQL query fetches the name of a hero and the names of their friends. It demonstrates nested field selection in GraphQL, allowing for efficient retrieval of related data in a single request.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/query.hero-friends.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  hero {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL URL Endpoint\nDESCRIPTION: URL configuration to expose the GraphQL API endpoint with file upload support and GraphiQL interface.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/django-graphbox.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom graphene_file_upload.django import FileUploadGraphQLView\nfrom django.views.decorators.csrf import csrf_exempt\nfrom myproject.schema import schema\n\nurlpatterns = [\n    path('graphql/', csrf_exempt(FileUploadGraphQLView.as_view(graphiql=True, schema=schema))),\n]\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL.js with npm\nDESCRIPTION: Commands to initialize a new npm project and install the GraphQL.js package as a dependency. This is the first step to start working with GraphQL in a Node.js project.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/index.mdx#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\nnpm install graphql --save\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for GraphQL Relay PHP\nDESCRIPTION: YAML frontmatter metadata defining the name, description and GitHub repository for the graphql-relay-php library documentation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/php/server/graphql-relay-php.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: graphql-relay-php\ndescription: A library to help construct a graphql-php server supporting react-relay.\ngithub: ivome/graphql-relay-php\n---\n```\n\n----------------------------------------\n\nTITLE: Defining SAHB.GraphQLClient Project Metadata in YAML\nDESCRIPTION: This YAML block defines metadata for the SAHB.GraphQLClient project, including its name, description, and GitHub repository URL. It's likely used for documentation or project listing purposes.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/c-net/client/sahb-graphqlclient.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: SAHB.GraphQLClient\ndescription: GraphQL client which supports generating queries from C# classes\ngithub: sahb1239/SAHB.GraphQLClient\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model\nDESCRIPTION: Example model definition in models.py showing a basic Django model with a name field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/django-graphbox.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n```\n\n----------------------------------------\n\nTITLE: Displaying Linux Foundation Membership Fee Structure\nDESCRIPTION: A markdown table showing the membership fees for the Linux Foundation at different tiers, ranging from $5,000 for small Silver members up to $500,000 for Platinum members.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/foundation/join.mdx#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Organization size     | Cost     |\n| :-------------------- | :------- |\n| Platinum              | $500,000 |\n| Gold                  | $100,000 |\n| Silver (5,000+)       | $20,000  |\n| Silver (500 to 4,999) | $15,000  |\n| Silver (100 to 499)   | $10,000  |\n| Silver (Up to 99)     | $5,000   |\n```\n\n----------------------------------------\n\nTITLE: Initializing a WunderGraph project with Next.js integration\nDESCRIPTION: Command to bootstrap a new WunderGraph project using create-wundergraph-app with the Next.js SWR example template. This creates a starter project with WunderGraph configured for use with Next.js and SWR for data fetching.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/tools/wundergraph/gateways-supergraphs/wundergraph.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-wundergraph-app my-project -E nextjs-swr\n```\n\n----------------------------------------\n\nTITLE: Generating Schema from CruddalsQuestion\nDESCRIPTION: Code to generate a GraphQL schema from the CruddalsQuestion class.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/graphene-django-cruddals.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nschema = CruddalsQuestion.Schema\n```\n\n----------------------------------------\n\nTITLE: Installing Mercurius with Fastify\nDESCRIPTION: This snippet shows how to install Mercurius and Fastify using npm. These are the required dependencies to create a GraphQL server with the Mercurius adapter.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/mercurius.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install fastify mercurius\n```\n\n----------------------------------------\n\nTITLE: Defining React Component Styles - JavaScript/CSS\nDESCRIPTION: Export of CSS style objects for React components, defining text alignment, padding, width, and height constraints for layout purposes.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/foundation/annual-reports/2019.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const style = {\n  textAlign: \"center\",\n  padding: \"40px 0 20px\",\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const style2 = {\n  width: 200,\n  maxHeight: 150,\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering GraphQL Official Channels with Cards Component in JSX\nDESCRIPTION: Uses the Cards component to render a list of official GraphQL channels as interactive cards. Each card includes an icon, title, link, and sometimes a description.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/resources/official-channels.mdx#2025-04-08_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards\n  items={[\n    {\n      icon: GitHubIcon,\n      title: \"GitHub\",\n      link: \"https://github.com/graphql\",\n    },\n    {\n      icon: FileTextIcon,\n      title: \"Blog\",\n      link: \"/blog\",\n      description: \"graphql.org/blog\",\n    },\n    {\n      icon: GoogleCalendarIcon,\n      title: \"Google Calendar\",\n      link: \"https://calendar.graphql.org\",\n    },\n    {\n      icon: DiscordIcon,\n      title: \"Discord\",\n      link: \"https://discord.graphql.org\",\n    },\n    {\n      icon: CodeIcon,\n      title: \"Tools and libraries\",\n      link: \"/code\",\n      description: \"graphql.org/code\",\n    },\n    {\n      icon: FoundationTalksChannel,\n      title: \"Talks\",\n      link: \"https://www.youtube.com/@GraphQLFoundationTalks\",\n      description: \"GraphQL Foundation Talks\",\n    },\n    {\n      icon: GraphQLLogo,\n      title: \"Shop\",\n      link: \"https://store.graphql.org/\",\n      description: \"store.graphql.org\",\n    },\n    {\n      icon: LinkedInIcon,\n      title: \"LinkedIn\",\n      link: \"https://www.linkedin.com/company/graphql-foundation/\",\n      description: \"GraphQL Foundation\",\n    },\n    {\n      icon: TwitterIcon,\n      title: \"𝕏\",\n      link: \"https://x.com/graphql\",\n      description: \"@graphql\",\n    },\n    {\n      icon: BlueskyIcon,\n      title: \"Bluesky\",\n      link: \"https://bsky.app/profile/graphql.org\",\n      description: \"@graphql.org\",\n    },\n    {\n      icon: Facebook2Icon,\n      title: \"Facebook Group\",\n      link: \"https://fb.com/groups/graphql.community\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Query with Field Aliasing\nDESCRIPTION: This JSON object shows the response structure when field aliasing is used in the GraphQL query. The 'name' field appears as 'productName' in the response.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2024-09-19-codegen.mdx#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"42\",\n  \"productName\": \"My Product\",\n  \"description\": null,\n  \"price\": 15.5\n}\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Class Definition\nDESCRIPTION: A div element with Tailwind CSS classes for controlling image positioning and size constraints within the container.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/foundation/annual-reports/2019.mdx#2025-04-08_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"[&_img]:mx-auto [&_img]:max-h-28\">\n```\n\n----------------------------------------\n\nTITLE: Generating Static Paths for Tags\nDESCRIPTION: Function that generates static paths for all unique tags found in blog posts by extracting tags from frontmatter of pages under the blog route\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/tags/[slug].mdx#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getStaticPaths() {\n  const items = getPagesUnderRoute(\"/blog\").flatMap(item => item.children || item)\n  const tags = items.flatMap(item => item.frontMatter.tags)\n  return {\n    fallback: false,\n    paths: [...new Set(tags)].map(slug => ({ params: { slug } })),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Subscription for Story Likes\nDESCRIPTION: A GraphQL subscription that allows clients to receive pushed updates whenever someone likes or unlikes a story. This subscription takes a StoryLikeSubscribeInput parameter and returns the same data structure as the mutation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2015-10-16-subscriptions.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription StoryLikeSubscription($input: StoryLikeSubscribeInput) {\n  storyLikeSubscribe(input: $input) {\n    story {\n      likers { count }\n      likeSentence { text }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query with Variables\nDESCRIPTION: Example of a more complex GraphQL query using variables, directives, and nested fields.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/graphql-query.md#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Introspection Schema in TypeScript\nDESCRIPTION: Function signature for printIntrospectionSchema, which prints the built-in introspection schema in the Schema Language format.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/utilities.mdx#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printIntrospectionSchema(schema: GraphQLSchema): string\n```\n\n----------------------------------------\n\nTITLE: GraphQL Foundation Mailing Address in Text Format\nDESCRIPTION: The official mailing address for the GraphQL Foundation headquarters in San Francisco, California. This address can be used for physical mail correspondence with the foundation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/foundation/contact.mdx#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGraphQL Foundation\n548 Market St\nPMB 57274\nSan Francisco, California\n94104-5401 US\n```\n\n----------------------------------------\n\nTITLE: Importing Cards Component in JSX\nDESCRIPTION: Imports the Cards component which is used to display the official channels in a card-based layout.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/resources/official-channels.mdx#2025-04-08_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cards } from \"../../../components/cards\"\n```\n\n----------------------------------------\n\nTITLE: Importing Vendor Icons in React\nDESCRIPTION: Imports icon components for different GraphQL vendors from an icons directory.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/resources/vendor-channels.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  StellateIcon,\n  ChillicreamIcon,\n  ApolloIcon,\n  GraphileIcon,\n} from \"../../../icons\"\n```\n\n----------------------------------------\n\nTITLE: Creating New Django Project\nDESCRIPTION: Command to initialize a new Django project using django-admin utility.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/django-graphbox.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin startproject myproject\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Display using Tree Command\nDESCRIPTION: Shows the directory structure of the code documentation files organized by language and type (client/server/tools).\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/notes/ContributingToCodePage.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ tree src/code\nsrc/code\n├── language-support\n│   ├── c-c\n│   │   └── tools\n│   │       └── libgraphqlparser.md\n│   ├── clojure\n│   │   ├── client\n│   │   │   └── regraph.md\n│   │   └── server\n│   │       ├── alumbra.md\n│   │       ├── graphql-clj.md\n│   │       └── lacinia.md\n│   ├── c-net\n│   │   ├── client\n│   │   │   ├── graphql-client.md\n│   │   │   ├── graphql-net-client.md\n│   │   │   └── sahb-graphqlclient.md\n// etc\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic FAQ Cards with React and Nextra\nDESCRIPTION: Component that imports Nextra Cards and metaFile to generate a dynamic FAQ navigation interface. The code transforms kebab-case keys from metaFile into capitalized titles and creates clickable cards with links to individual FAQ pages.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/faq/index.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Cards } from 'nextra/components'\nimport metaFile from './_meta'\n\n# Frequently Asked Questions (FAQ)\n\n<Cards>\n  {Object.entries(metaFile).slice(1).map(([key]) => (\n    <Cards.Card\n      key={key}\n      title={key.split('-').map(word => word[0].toUpperCase() + word.slice(1)).join(' ')}\n      href={`/faq/${key}`} arrow\n    />\n  ))}\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL API using gql_client in Rust\nDESCRIPTION: This code demonstrates how to use the gql_client library to make a GraphQL query. It creates a client, defines a query to fetch post IDs, sends the query to a GraphQL endpoint, and prints the results.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/rust/client/gql_client.md#2025-04-08_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse gql_client::Client;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let endpoint = \"https://graphqlzero.almansi.me/api\";\n  let query = r#\"\n    query AllPostsQuery {\n      posts {\n        data {\n          id\n        }\n      }\n    }\n  \"#;\n\n  let client = Client::new(endpoint);\n  let data: AllPosts = client.query::<AllPosts>(query).await.unwrap();\n\n  println!(\"{:?}\" data);\n\n  Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Query Package\nDESCRIPTION: Installation command for the graphql_query package using pip package manager.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/graphql-query.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install graphql_query\n```\n\n----------------------------------------\n\nTITLE: Installing Qlient via pip\nDESCRIPTION: Command to install the Qlient library using pip package manager.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/qlient.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install qlient\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Defines a sample GraphQL schema with a query that takes arguments for rolling dice.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/graphql-clients.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  rollDice(numDice: Int!, numSides: Int): [Int]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Data with GraphQL\nDESCRIPTION: Demonstrates a typical GraphQL query that requests specific user data including profile information and friend connections. Shows the hierarchical nature of GraphQL queries and how they mirror the expected response structure.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2015-09-14-graphql.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  user(id: 4802170) {\n    id\n    name\n    isViewerFriend\n    profilePicture(size: 50) {\n      uri\n      width\n      height\n    }\n    friendConnection(first: 5) {\n      totalCount\n      friends {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Siler GraphQL Server in PHP\nDESCRIPTION: PHP implementation of a GraphQL server using Siler library, including schema loading, resolver definition, and HTTP server setup with error handling. The server runs on localhost:8080 and includes PSR-7 compatibility.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/php/server/siler.md#2025-04-08_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\nrequire_once '/path/to/vendor/autoload.php';\n\nuse SilerDiactoros;\nuse SilerGraphql;\nuse SilerHttp;\n\n$typeDefs = file_get_contents(__DIR__.'/schema.graphql');\n$resolvers = [\n    'Query' => [\n        'hello' => 'world',\n    ],\n];\n$schema = Graphqlschema($typeDefs, $resolvers);\n\necho \"Server running at http://127.0.0.1:8080\";\n\nHttpserver(Graphqlpsr7($schema), function (Throwable $err) {\n    var_dump($err);\n    return Diactorosjson([\n        'error'   => true,\n        'message' => $err->getMessage(),\n    ]);\n})()->run();\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query for HTTP GET Demonstration\nDESCRIPTION: A simple GraphQL query example that retrieves the 'name' field from the 'me' object, used to demonstrate HTTP GET request formatting.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/serving-over-http.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  me {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Component Import and Rendering\nDESCRIPTION: Imports and renders the Blog component from an MDX file\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/tags/[slug].mdx#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Blog from '../blog.mdx'\n\n<Blog/>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running SpectaQL for GraphQL Documentation Generation\nDESCRIPTION: This snippet demonstrates how to install SpectaQL using npm or yarn, and then how to generate documentation using a configuration file. It shows both npm and yarn commands for installation and execution.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/tools/spectaql.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --dev spectaql\n# OR\nyarn add -D spectaql\n\n# Then generate your docs\nnpm run spectaql my-config.yml\n# OR\nyarn spectaql my-config.yml\n```\n\n----------------------------------------\n\nTITLE: Adding Product Review\nDESCRIPTION: GraphQL mutation to create a review with relationship to product and customer.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/dgraph.md#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  addReview(\n    input: [\n      {\n        by: { username: \"TonyStark\" }\n        about: { name: \"Dgraph\" }\n        comment: \"Fantastic, easy to install, worked great. Best GraphQL server available\"\n        rating: 10\n      }\n    ]\n  ) {\n    review {\n      id\n      comment\n      rating\n      by {\n        username\n      }\n      about {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Query Type\nDESCRIPTION: Basic GraphQL schema definition that declares a Query type with a single field 'hello' returning a String type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/php/server/siler.md#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hello: String\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Warning Callout in JSX for GraphQL Meeting Attendance\nDESCRIPTION: This code snippet renders a warning callout using the Nextra components library. It emphasizes the importance of having a merged PR against the agenda and completing the GraphQL Specification Membership agreement before attending meetings.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/contribute/project-meetings.mdx#2025-04-08_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n\n<Callout type=\"warning\">\n  **IMPORTANT:** Your PR against the agenda **must** be merged before you can attend. If the EasyCLA bot says you are not covered, you need to follow the links in the bot's comment to sign the [GraphQL Specification Membership agreement](https://github.com/graphql/graphql-wg/tree/HEAD/membership) before you can attend.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Running the Qlient Example\nDESCRIPTION: Command to execute the Python script containing the Qlient example.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/client/qlient.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython swapi_client_example.py\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter metadata for the blog post including title, tags, date and author information.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2020-06-30-gsoc-2020-naman.mdx#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Google Summer of Code 2020 Participant: Naman\"\ntags: [\"announcements\"]\ndate: 2020-06-30\nbyline: Naman Kumar\n---\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Custom GraphQL Server Mocking\nDESCRIPTION: Provides a comprehensive example of creating a custom mocked GraphQL server. This includes defining a schema, setting up mock functions for different types, and demonstrating how to query the mocked server with complex nested queries.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-04-19-mocking.mdx#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mockServer, MockList } from \"graphql-tools\"\nimport casual from \"casual-browserify\"\n\n// The GraphQL schema. Described in more detail here:\n// https://medium.com/apollo-stack/the-apollo-server-bc68762e93b\nconst schema = `\n  type User {\n    id: ID!\n    name: String\n    lists: [List]\n  }\n  type List {\n    id: ID!\n    name: String\n    owner: User\n    incomplete_count: Int\n    tasks(completed: Boolean): [Task]\n  }\n  type Task {\n    id: ID!\n    text: String\n    completed: Boolean\n    list: List\n  }\n  type RootQuery {\n    user(id: ID): User\n  }\n  schema {\n    query: RootQuery\n  }\n`\n\n// Mock functions are defined per type and return an\n// object with some or all of the fields of that type.\n// If a field on the object is a function, that function\n// will be used to resolve the field if the query requests it.\nconst server = mockServer(schema, {\n  RootQuery: () => ({\n    user: (o, { id }) => ({ id }),\n  }),\n  List: () => ({\n    name: () => casual.word,\n    tasks: () => new MockList(4, (o, { completed }) => ({ completed })),\n  }),\n  Task: () => ({ text: casual.words(10) }),\n  User: () => ({ name: casual.name }),\n})\n\nmockServer.query(`\nquery tasksForUser{\n  user(id: 6) {\n    id\n    name\n    lists {\n      name\n      completeTasks: tasks(completed: true) {\n        completed\n        text\n      }\n      incompleteTasks: tasks(completed: false) {\n        completed\n        text\n      }\n      anyTasks: tasks {\n        completed\n        text\n      }\n    }\n  }\n}`)\n```\n\n----------------------------------------\n\nTITLE: Defining Railt PHP GraphQL Framework Metadata in YAML\nDESCRIPTION: This YAML snippet provides metadata for the Railt PHP GraphQL Framework. It includes the framework's name, a brief description, and a link to its GitHub repository.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/php/server/railt.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Railt\ndescription: A PHP GraphQL Framework.\ngithub: railt/railt\n---\n```\n\n----------------------------------------\n\nTITLE: Uploading Schema to Dgraph\nDESCRIPTION: cURL command to post the GraphQL schema to Dgraph's admin endpoint.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/dgraph.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST localhost:8080/admin/schema --data-binary '@schema.graphql'\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Icon Components in JSX\nDESCRIPTION: Imports various icon components from a relative path that represent different platforms and services used by the GraphQL community.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/resources/official-channels.mdx#2025-04-08_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  TwitterIcon,\n  GitHubIcon,\n  DiscordIcon,\n  GoogleCalendarIcon,\n  Facebook2Icon,\n  LinkedInIcon,\n  BlueskyIcon,\n  FileTextIcon,\n  CodeIcon,\n  GraphQLLogo,\n  FoundationTalksChannel\n} from \"../../../icons\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Graphaello Project Definition in YAML\nDESCRIPTION: YAML configuration block that defines the Graphaello project metadata, including its name, description, and GitHub repository location. This configuration helps identify and describe the tool's purpose for GraphQL integration with SwiftUI.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/swift-objective-c-ios/client/graphaello.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Graphaello\ndescription: A Tool for Writing Declarative, Type-Safe and Data-Driven Applications in SwiftUI using GraphQL and Apollo\ngithub: nerdsupremacist/Graphaello\n---\n```\n\n----------------------------------------\n\nTITLE: Using CPPGraphQLGen Schema Generator CLI\nDESCRIPTION: Command-line usage and options for the 'schemagen' tool. This tool generates C++20 GraphQL service code from a schema document, with various options for customizing output and functionality.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/content/code/language-support/c-c/server/cppgraphqlgen-schemagen.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage:  schemagen [options] <schema file> <output filename prefix> <output namespace>\nCommand line options:\n  --version              Print the version number\n  -? [ --help ]          Print the command line options\n  -v [ --verbose ]       Verbose output including generated header names as\n                         well as sources\n  -s [ --schema ] arg    Schema definition file path\n  -p [ --prefix ] arg    Prefix to use for the generated C++ filenames\n  -n [ --namespace ] arg C++ sub-namespace for the generated types\n  --source-dir arg       Target path for the <prefix>Schema.cpp source file\n  --header-dir arg       Target path for the <prefix>Schema.h header file\n  --stubs                Unimplemented fields throw runtime exceptions instead\n                         of compiler errors\n  --no-introspection     Do not generate support for Introspection\n```\n\n----------------------------------------\n\nTITLE: Connecting to a GraphQL Server in Julia\nDESCRIPTION: This code demonstrates how to create a GraphQL client instance by connecting to a specified GraphQL server URL.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/julia/client/graphqlclient-jl.md#2025-04-08_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nclient = Client(\"https://countries.trevorblades.com\")\n```\n\n----------------------------------------\n\nTITLE: Starting Django Development Server\nDESCRIPTION: Command to run the Django development server to test the GraphQL API.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/django-graphbox.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Project Metadata Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration block defining the name, description and GitHub repository for the Graphiti project.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/swift-objective-c-ios/server/graphiti.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Graphiti\ndescription: Swift library for building GraphQL schemas/types fast, safely and easily.\ngithub: GraphQLSwift/Graphiti\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Community Icons and Components in React JSX\nDESCRIPTION: Imports icon components for various community platforms and a Cards component that will be used to display community channels for GraphQL developers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/resources/community-channels.mdx#2025-04-08_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  RedditIcon,\n  ReactifluxIcon,\n  FreenodeIcon,\n  StackOverflowIcon,\n} from \"../../../icons\"\nimport { Cards } from \"../../../components/cards\"\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL iOS Client Project Metadata in Markdown\nDESCRIPTION: This snippet defines the metadata for a GraphQL iOS client project using YAML front matter in a Markdown file. It specifies the project name, provides a brief description, and includes a link to the GitHub repository.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/swift-objective-c-ios/client/graphql-ios.md#2025-04-08_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nname: GraphQL iOS\ndescription: An Objective-C GraphQL client for iOS.\ngithub: funcompany/graphql-ios\n---\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Schema with REST API Resolvers\nDESCRIPTION: Full implementation of the GraphQL schema including resolver functions that fetch data from the REST API endpoints and transform responses to match the GraphQL type structure.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\n\nconst BASE_URL = 'https://myapp.com/';\n\nfunction fetchResponseByURL(relativeURL) {\n  return fetch(`${BASE_URL}${relativeURL}`).then(res => res.json());\n}\n\nfunction fetchPeople() {\n  return fetchResponseByURL('/people/').then(json => json.people);\n}\n\nfunction fetchPersonByURL(relativeURL) {\n  return fetchResponseByURL(relativeURL).then(json => json.person);\n}\n\nconst PersonType = new GraphQLObjectType({\n  /* ... */\n  fields: () => ({\n    /* ... */\n    friends: {\n      type: new GraphQLList(PersonType),\n      resolve: person => person.friends.map(fetchPersonByURL),\n    },\n  }),\n});\n\nconst QueryType = new GraphQLObjectType({\n  /* ... */\n  fields: () => ({\n    allPeople: {\n      type: new GraphQLList(PersonType),\n      resolve: fetchPeople,\n    },\n    person: {\n      type: PersonType,\n      args: {\n        id: { type: GraphQLString },\n      },\n      resolve: (root, args) => fetchPersonByURL(`/people/${args.id}/`),\n    },\n  }),\n});\n\nexport default new GraphQLSchema({\n  query: QueryType,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQLClient.jl in Julia\nDESCRIPTION: This snippet shows how to install the GraphQLClient package using Julia's package manager and import it into the current scope.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/julia/client/graphqlclient-jl.md#2025-04-08_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nusing Pkg; Pkg.add(\"GraphQLClient\")\nusing GraphQLClient\n```\n\n----------------------------------------\n\nTITLE: Styling Rhodamine Color Sample with JSX and CSS\nDESCRIPTION: Defines global CSS styling for displaying the Rhodamine color sample section with proper font and layout properties.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/brand.mdx#2025-04-08_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<style global jsx>{`\n.rhodamine-sample {\n  font-family: ${font.style.fontFamily};\n  font-weight: ${font.style.fontWeight};\n  padding: 1em;\n}\n.rhodamine-sample a { color: inherit; }\n.rhodamine-sample dl dd { grid-column-start: 2; }\n.rhodamine-sample dl {\n  margin: 0.5em 0;\n  font-size: .9rem;\n  line-height: 1.5;\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n}\n.rhodamine-sample dl dt {\n  grid-column-start: 1;\n  padding-right: 2em;\n}\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Lokka GraphQL Client Package Metadata in YAML\nDESCRIPTION: YAML frontmatter defining the metadata for the Lokka GraphQL client. It specifies the name, description, GitHub repository location, and npm package name for the library.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/client/lokka.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Lokka\ndescription: A simple JavaScript GraphQL client that works in all JavaScript environments (the browser, Node.js, and React Native).\ngithub: kadirahq/lokka\nnpm: \"lokka\"\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Vendor Channel Cards\nDESCRIPTION: JSX component that renders a grid of vendor channel cards using the Cards component. Each card contains an icon, title, and link to the vendor's community platform.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/resources/vendor-channels.mdx#2025-04-08_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Cards\n  items={[\n    {\n      icon: ApolloIcon,\n      title: \"Apollo Discord\",\n      link: \"https://discord.gg/graphos\",\n    },\n    {\n      icon: ChillicreamIcon,\n      title: \"ChilliCream Slack\",\n      link: \"https://slack.chillicream.com\",\n    },\n    {\n      icon: GraphileIcon,\n      title: \"Graphile Discord\",\n      link: \"https://discord.gg/graphile\",\n    },\n    {\n      icon: StellateIcon,\n      title: \"Stellate Discord\",\n      link: \"https://go.stellate.co/community\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for graph-gophers/graphql-go in YAML\nDESCRIPTION: This YAML block defines metadata for the graph-gophers/graphql-go project, including its name, description, and GitHub repository link. It's likely used for documentation or project cataloging purposes.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/go/server/graph-gophers-graphql-go.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: graph-gophers/graphql-go\ndescription: GraphQL server with a focus on ease of use.\ngithub: graph-gophers/graphql-go\n---\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Schema Implementation\nDESCRIPTION: A full example showing the complete GraphQL schema implementation with node interface, person type, and query type definitions using graphql-relay.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\nimport {\n  fromGlobalId,\n  globalIdField,\n  nodeDefinitions,\n} from 'graphql-relay';\n\nconst BASE_URL = 'https://myapp.com/';\n\nfunction fetchResponseByURL(relativeURL) {\n  return fetch(`${BASE_URL}${relativeURL}`).then(res => res.json());\n}\n\nfunction fetchPeople() {\n  return fetchResponseByURL('/people/').then(json => json.people);\n}\n\nfunction fetchPersonByURL(relativeURL) {\n  return fetchResponseByURL(relativeURL).then(json => json.person);\n}\n\nconst { nodeInterface, nodeField } = nodeDefinitions(\n  globalId => {\n    const { type, id } = fromGlobalId(globalId);\n    if (type === 'Person') {\n      return fetchPersonByURL(`/people/${id}/`);\n    }\n  },\n  object => {\n    if (object.hasOwnProperty('username')) {\n      return 'Person';\n    }\n  },\n);\n\nconst PersonType = new GraphQLObjectType({\n  name: 'Person',\n  description: 'Somebody that you used to know',\n  fields: () => ({\n    firstName: {\n      type: GraphQLString,\n      resolve: person => person.first_name,\n    },\n    lastName: {\n      type: GraphQLString,\n      resolve: person => person.last_name,\n    },\n    email: {type: GraphQLString},\n    id: globalIdField('Person'),\n    username: {type: GraphQLString},\n    friends: {\n      type: new GraphQLList(PersonType),\n      resolve: person => person.friends.map(fetchPersonByURL),\n    },\n  }),\n  interfaces: [ nodeInterface ],\n});\n\nconst QueryType = new GraphQLObjectType({\n  name: 'Query',\n  description: 'The root of all... queries',\n  fields: () => ({\n    allPeople: {\n      type: new GraphQLList(PersonType),\n      resolve: fetchPeople,\n    },\n    node: nodeField,\n    person: {\n      type: PersonType,\n      args: {\n        id: { type: GraphQLString },\n      },\n      resolve: (root, args) => fetchPersonByURL(`/people/${args.id}/`),\n    }\n  })\n});\n\nexport default new GraphQLSchema({\n  query: QueryType\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SOFA Metadata in YAML\nDESCRIPTION: This YAML snippet provides metadata for the SOFA project, including its name, description, URL, GitHub repository, and npm package name. This information is likely used for documentation or project management purposes.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/tools/sofa.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: SOFA\ndescription: Generate REST API from your GraphQL API.\nurl: https://sofa-api.com/\ngithub: Urigo/SOFA\nnpm: \"sofa-api\"\n---\n```\n\n----------------------------------------\n\nTITLE: License Copyright Example\nDESCRIPTION: Example showing how the GraphQL copyright text is being updated in project licenses to reflect the transfer of ownership from Facebook to GraphQL Contributors.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/faq/general.mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"Copyright (c) {new Date().getFullYear()} GraphQL Contributors\"\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Metadata for graphql-relay-go Library\nDESCRIPTION: This YAML snippet defines metadata for the graphql-relay-go library, including its name, description, and GitHub repository link. It's likely used for documentation or package management purposes.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/go/server/graphql-relay-go.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: graphql-relay-go\ndescription: A Go/Golang library to help construct a graphql-go server supporting react-relay.\ngithub: graphql-go/relay\n---\n```\n\n----------------------------------------\n\nTITLE: Importing IframeResizer Component in JavaScript\nDESCRIPTION: This snippet imports the IframeResizer component from the 'iframe-resizer-react' package. This component is likely used to display responsive iframes in a React application.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/users.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IframeResizer from \"iframe-resizer-react\"\n```\n\n----------------------------------------\n\nTITLE: Defining Jaal Project Metadata in Markdown\nDESCRIPTION: This snippet defines metadata for the Jaal project using YAML frontmatter in a Markdown file. It specifies the project name, description, and GitHub repository link.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/go/server/appointy-jaal.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: appointy/jaal\ndescription: Develop spec compliant GraphQL servers in Go.\ngithub: appointy/jaal\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Reviews with Filters\nDESCRIPTION: Complex GraphQL query demonstrating filtering, sorting, and nested relationships.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/dgraph.md#2025-04-08_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  queryReview(\n    filter: { comment: { alloftext: \"server easy install\" }, rating: { gt: 5 } }\n  ) {\n    comment\n    by {\n      username\n      reviews(order: { desc: rating }, first: 10) {\n        about {\n          name\n          reviews(order: { asc: rating }, first: 5) {\n            by {\n              username\n            }\n            comment\n            rating\n          }\n        }\n        rating\n      }\n    }\n    about {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microfiber via npm or yarn\nDESCRIPTION: Command line instructions for installing the Microfiber package using either npm or yarn package managers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/tools/microfiber.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install microfiber\n# OR\nyarn add microfiber\n```\n\n----------------------------------------\n\nTITLE: Importing GraphQL Logo Assets in Next.js\nDESCRIPTION: Imports various GraphQL logo assets and the Rubik font from Google Fonts for use in the brand guidelines page.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/brand.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Rubik } from 'next/font/google'\nimport NextImage from 'next-image-export-optimizer'\nimport { useState } from 'react'\nimport graphqlLogo from '../../public/img/logo.svg'\nimport graphqlLogoWhite from '../../public/img/brand/logos/logo-white.svg'\nimport graphqlLogoBlack from '../../public/img/brand/logos/logo-black.svg'\nimport graphqlLogoDontColor from '../../public/img/brand/logo-dont/dont-color.svg'\nimport graphqlLogoDontGradient from '../../public/img/brand/logo-dont/dont-gradient.svg'\nimport graphqlLogoDontWordmark from '../../public/img/brand/logo-dont/dont-color-wordmark.svg'\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Elixir Project Metadata in Markdown\nDESCRIPTION: This snippet defines metadata for the GraphQL Elixir project using YAML-like syntax within a Markdown file. It specifies the project name, provides a brief description, and includes a link to the GitHub repository.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/elixir/server/graphql-elixir.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: graphql-elixir\ndescription: An Elixir implementation of Facebook's GraphQL.\ngithub: graphql-elixir/graphql\n---\n```\n\n----------------------------------------\n\nTITLE: Exporting Index Page Component in JavaScript\nDESCRIPTION: Exports the IndexPage component from the components directory as the default export for use as the main homepage component.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/index.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport { IndexPage as default } from '../components/index-page'\n```\n\n----------------------------------------\n\nTITLE: Defining Common GraphQL Client Package in Markdown\nDESCRIPTION: This markdown snippet defines the metadata for the common_graphql_client Elixir package. It specifies the name, description, and GitHub repository of the package.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/elixir/client/common-graphql-client.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: common_graphql_client\ndescription: Elixir GraphQL Client with HTTP and WebSocket support\ngithub: annkissam/common_graphql_client\n---\n```\n\n----------------------------------------\n\nTITLE: GraphQL Syntax Error Function Definition\nDESCRIPTION: TypeScript function definition for creating syntax errors with source location information.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/error.mdx#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction syntaxError(\n  source: Source,\n  position: number,\n  description: string\n): GraphQLError\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Rules with GraphQL Shield in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a permission layer using GraphQL Shield. It shows defining authentication and role-based rules, combining them with logical operators, and applying them as middleware to a GraphQL server. The code handles caching through the 'contextual' option to improve performance.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/tools/graphql-shield.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rule, shield, and, or, not } from \"graphql-shield\"\n\n// Rules\n\nconst isAuthenticated = rule({ cache: \"contextual\" })(async (\n  parent,\n  args,\n  ctx,\n  info,\n) => {\n  return ctx.user !== null\n})\n\nconst isAdmin = rule({ cache: \"contextual\" })(async (\n  parent,\n  args,\n  ctx,\n  info,\n) => {\n  return ctx.user.role === \"admin\"\n})\n\nconst isEditor = rule({ cache: \"contextual\" })(async (\n  parent,\n  args,\n  ctx,\n  info,\n) => {\n  return ctx.user.role === \"editor\"\n})\n\n// Permissions\n\nconst permissions = shield({\n  Query: {\n    frontPage: not(isAuthenticated),\n    fruits: and(isAuthenticated, or(isAdmin, isEditor)),\n    customers: and(isAuthenticated, isAdmin),\n  },\n  Mutation: {\n    addFruitToBasket: isAuthenticated,\n  },\n  Fruit: isAuthenticated,\n  Customer: isAdmin,\n})\n\n// Server\n\nconst server = new GraphQLServer({\n  typeDefs,\n  resolvers,\n  middlewares: [permissions],\n  context: req => ({\n    ...req,\n    user: getUser(req),\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rubik Font for GraphQL Branding\nDESCRIPTION: Exports a configured instance of the Rubik font with light weight for use in GraphQL branding elements.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/brand.mdx#2025-04-08_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const font = Rubik({\n  weight: ['300'],\n  subsets: ['latin']\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Project Metadata for Re-graph GraphQL Client\nDESCRIPTION: This YAML-like snippet defines metadata for the re-graph project, including its name, description, and GitHub repository link. It's likely used for generating documentation or listing the project in a catalog of GraphQL-related tools.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/clojure/client/regraph.md#2025-04-08_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nname: regraph\ndescription: A GraphQL client implemented in Clojurescript with support for websockets.\ngithub: oliyh/re-graph\n---\n```\n\n----------------------------------------\n\nTITLE: Media Contact Information Block\nDESCRIPTION: Contact details for Linux Foundation media inquiries, including name, organization, phone number and email\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2019-10-31-linux-foundation-training.mdx#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nClyde Seepersad\nThe Linux Foundation\n404-964-6973\ncseepersad@linuxfoundation.org\n```\n\n----------------------------------------\n\nTITLE: Defining Project Metadata in YAML for OCaml GraphQL Server\nDESCRIPTION: This YAML snippet defines metadata for the ocaml-graphql-server project, including its name, description, and GitHub repository link. It's likely used for documentation or project configuration purposes.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/ocaml-reason/server/ocaml-graphql-server.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: ocaml-graphql-server\ndescription: GraphQL server library for OCaml and Reason\ngithub: andreas/ocaml-graphql-server\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Cards Component with GraphQL Working Group Information in JSX\nDESCRIPTION: This JSX code renders a Cards component containing information about the GraphQL Working Group. It includes links to the GitHub repository, meeting schedule, agenda, and recordings. The component uses imported icon components to enhance visual representation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/contribute/how-graphql-is-developed.mdx#2025-04-08_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Cards\n    items={[\n      {\n        icon: GitHubIcon,\n        title: 'GitHub Working Group',\n        link: 'https://github.com/graphql/graphql-wg'\n      }, {\n        icon: GoogleCalendarIcon,\n        title: 'Meeting frequency',\n        link: 'https://calendar.graphql.org',\n        description: 'Monthly, generally the first Thursday'\n      }, {\n        icon: GitHubIcon,\n        title: 'Agenda',\n        link: 'https://github.com/graphql/graphql-wg/tree/main/agendas',\n        description: 'GitHub'\n      }, {\n        icon: YouTubeIcon,\n        title: 'Recordings',\n        link: 'https://www.youtube.com/playlist?list=PLP1igyLx8foH30_sDnEZnxV_8pYW3SDtb',\n        description: 'YouTube'\n      },\n    ]}\n  />\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Middleware with Apollo Server\nDESCRIPTION: Example showing how to set up GraphQL Middleware with Apollo Server, including custom logging middleware for inputs and results. The code demonstrates resolver wrapping, schema creation, and server initialization with middleware integration.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/tools/graphql-middleware.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ApolloServer } = require(\"apollo-server\")\nconst { makeExecutableSchema } = require(\"@graphql-tools/schema\")\n\nconst typeDefs = `\ntype Query {\n  hello(name: String): String\n  bye(name: String): String\n}\n`\nconst resolvers = {\n  Query: {\n    hello: (root, args, context, info) => {\n      console.log(`3. resolver: hello`)\n      return `Hello ${args.name ? args.name : \"world\"}!`\n    },\n    bye: (root, args, context, info) => {\n      console.log(`3. resolver: bye`)\n      return `Bye ${args.name ? args.name : \"world\"}!`\n    },\n  },\n}\n\nconst logInput = async (resolve, root, args, context, info) => {\n  console.log(`1. logInput: ${JSON.stringify(args)}`)\n  const result = await resolve(root, args, context, info)\n  console.log(`5. logInput`)\n  return result\n}\n\nconst logResult = async (resolve, root, args, context, info) => {\n  console.log(`2. logResult`)\n  const result = await resolve(root, args, context, info)\n  console.log(`4. logResult: ${JSON.stringify(result)}`)\n  return result\n}\n\nconst schema = makeExecutableSchema({ typeDefs, resolvers })\n\nconst schemaWithMiddleware = applyMiddleware(schema, logInput, logResult)\n\nconst server = new ApolloServer({\n  schema: schemaWithMiddleware,\n})\n\nawait server.listen({ port: 8008 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Secondary Call-to-Action Button in HTML/JSX\nDESCRIPTION: HTML/JSX code for rendering an 'Apply to be an SME' button with styling and external link functionality.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2025-04-02-seeking-graphql-subject-matter-experts/index.mdx#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"mt-8 flex justify-center\">\n  <a\n    href=\"https://forms.gle/2ELscDLhMS7kf3x8A\"\n    target=\"_blank\"\n    rel=\"noreferrer\"\n    className=\"primary bg-primary/85 px-20 py-4 text-center text-3xl font-semibold transition-colors hover:bg-primary/100 md:px-28\"\n  >\n    Apply to be an SME\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Card Component in React/JSX\nDESCRIPTION: React component for displaying event information in a card format. Handles event details including date, location, name and meta information with styled layouts.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/events.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nexport function EventCard({ href, date, city, name, meta }) {\n  return (\n    <a\n      href={href}\n      className={clsx(\n        \"text-current no-underline flex border border-neutral-300 dark:border-neutral-700 rounded-none\",\n        \"hover:!border-primary hover:shadow-2xl hover:shadow-primary/10 transition-colors *:transition-colors hover:relative group\",\n        \"relative after:content-['_↗'] after:font-sans after:absolute after:right-4 after:top-4\",\n      )}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      {date && (\n        <div className=\"shrink-0 flex flex-col justify-center items-center bg-zinc-100 dark:bg-zinc-800 group-hover:dark:bg-zinc-700 lg:w-48 w-28\">\n          <div className=\"text-5xl lg:text-7xl font-bold\">{date.getDate()}</div>\n          <div className=\"text-sm lg:text-lg\">\n            {date.toLocaleString(\"en\", {\n              month: \"short\",\n              year: \"numeric\",\n            })}\n          </div>\n        </div>\n      )}\n      <div className=\"bg-white dark:bg-neutral-900 group-hover:dark:bg-zinc-800 grow py-4 lg:py-7 px-5 lg:px-10 flex flex-col gap-4\">\n        <b className=\"text-primary max-lg:text-xs\">{meta}</b>\n        <div className=\"font-bold text-lg lg:text-2xl\">{name}</div>\n        <div className=\"text-xs lg:text-lg flex flex-wrap lg:gap-x-6 gap-2\">\n          <div className=\"flex items-center gap-2\">\n            <LocationIcon className=\"fill-primary size-5\" />\n            {city}\n          </div>\n          {date && (\n            <div className=\"flex items-center gap-2\">\n              <ClockIcon className=\"fill-primary size-5\" />\n              {date.toLocaleString(\"en\", {\n                hour: \"numeric\",\n                minute: \"numeric\",\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </a>\n  )\n```\n\n----------------------------------------\n\nTITLE: GraphQL Queries and Mutations Example\nDESCRIPTION: Sample GraphQL queries and mutations for interacting with the user service. Includes queries to fetch single user, all users, and mutation to add new user.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/pylon.md#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery User {\n  user(name: \"Alice\") {\n    name\n    email\n  }\n}\n\nquery Users {\n  users {\n    name\n    email\n  }\n}\n\nmutation AddUser {\n  addUser(name: \"Corina\", email: \"corina@example.com\") {\n    name\n    email\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Graphene Django CRUDDALS with pip\nDESCRIPTION: Command to install the Graphene Django CRUDDALS package using pip package manager.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/graphene-django-cruddals.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install graphene-django-cruddals\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQLBox Server Dependencies\nDESCRIPTION: Command to install GraphQLBox server and its required modules including core, client, request parser, cache manager, debug manager, execute, and related cachemap dependencies.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/server/graphql-box.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @graphql-box/core @graphql-box/server @graphql-box/client @graphql-box/request-parser @graphql-box/cache-manager @graphql-box/debug-manager @graphql-box/execute @graphql-box/helpers @cachemap/core @cachemap/reaper @cachemap/redis @cachemap/constants @cachemap/types\n```\n\n----------------------------------------\n\nTITLE: Defining Hasura Project Metadata in Markdown\nDESCRIPTION: YAML-style metadata block defining the core properties of Hasura GraphQL Engine including name, description, URLs and GitHub repository location.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/hasura.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: Hasura\ndescription: Hasura connects to your databases & microservices and instantly gives you a production-ready GraphQL API.\nurl: https://hasura.io\ngithub: hasura/graphql-engine\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQLBox Client with Persisted Cache and Debugging\nDESCRIPTION: This code snippet demonstrates how to import necessary modules, configure the FetchManager, and initialize the GraphQLBox client with CacheManager, DebugManager, and RequestParser. It also includes an example of how to use the client to make a GraphQL request.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/client/graphql-box.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Cachemap from \"@cachemap/core\"\nimport indexedDB from \"@cachemap/indexed-db\"\nimport reaper from \"@cachemap/reaper\"\nimport CacheManager from \"@graphql-box/cache-manager\"\nimport Client from \"@graphql-box/client\"\nimport DebugManager from \"@graphql-box/debug-manager\"\nimport FetchManager from \"@graphql-box/fetch-manager\"\nimport RequestParser from \"@graphql-box/request-parser\"\nimport introspection from \"./introspection-query\"\n\nconst requestManager = new FetchManager({\n  apiUrl: \"/api/graphql\",\n  batchRequests: true,\n  logUrl: \"/log/graphql\",\n})\n\nconst client = new Client({\n  cacheManager: new CacheManager({\n    cache: new Cachemap({\n      name: \"client-cache\",\n      reaper: reaper({ interval: 300000 }),\n      store: indexedDB(/* configure */),\n    }),\n    cascadeCacheControl: true,\n    typeCacheDirectives: {\n      // Add any type specific cache control directives in the format:\n      // TypeName: \"public, max-age=3\",\n    },\n  }),\n  debugManager: new DebugManager({\n    environment: \"client\",\n    log: (message, data, logLevel) => {\n      requestManager.log(message, data, logLevel)\n    },\n    name: \"CLIENT\",\n    performance: self.performance,\n  }),\n  requestManager,\n  requestParser: new RequestParser({ introspection }),\n})\n\n// Meanwhile... somewhere else in your code\n\nconst { data, errors } = await client.request(queryOrMutation)\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Query with Async-graphql in Rust\nDESCRIPTION: This code snippet demonstrates how to define a simple GraphQL query using the Async-graphql library in Rust. It creates a Query struct with an 'add' field that takes two integers and returns their sum.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/rust/server/async-graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse async_graphql::*;\nstruct Query;\n#[Object]\nimpl Query {\n   /// Returns the sum of a and b\n   async fn add(&self, a: i32, b: i32) -> i32 {\n       a + b\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQLBox Client and Dependencies\nDESCRIPTION: This command installs the GraphQLBox client and its required dependencies using npm.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/javascript/client/graphql-box.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @graphql-box/core @graphql-box/client @graphql-box/request-parser @graphql-box/cache-manager @graphql-box/debug-manager @graphql-box/fetch-manager @graphql-box/helpers @cachemap/core @cachemap/reaper @cachemap/indexed-db @cachemap/constants @cachemap/types\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for GraphQL Development Page in React\nDESCRIPTION: This code imports the Cards component and various icon components used in the GraphQL development process page. It sets up the necessary UI elements for displaying information about working groups and resources.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/contribute/how-graphql-is-developed.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Cards } from \"../../../components/cards\"\nimport {\n  GitHubIcon,\n  GoogleCalendarIcon,\n  YouTubeIcon,\n} from \"../../../icons\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple GraphQL Query with Spring for GraphQL\nDESCRIPTION: This code snippet demonstrates how to create a basic GraphQL query using Spring for GraphQL's annotation-based programming model. It defines a controller with a method that responds to the 'hello' query.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/server/spring-graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Controller\npublic class GreetingController {\n\n    @QueryMapping\n    public String hello() {\n        return \"Hello, world!\";\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Type Names Using __typename\nDESCRIPTION: Demonstrates how to use the __typename meta-field to get type information in a search query that returns Union types.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/introspection.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  search(text: \"an\") {\n    __typename\n    ... on Character {\n      name\n    }\n    ... on Starship {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World GraphQL Query\nDESCRIPTION: Example of implementing a simple GraphQL query using Kotlin by implementing the Query interface.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/server/graphql-kotlin.md#2025-04-08_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@Component\nclass HelloWorldQuery : Query {\n  fun helloWorld() = \"Hello World!!!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Schema Introspection Query\nDESCRIPTION: Shows how to query the __schema field to retrieve all available types in the schema.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/introspection.mdx#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  __schema {\n    types {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Examples with Calculator Directives\nDESCRIPTION: Collection of GraphQL queries showing different Calculator features including value mapping, result filtering, and argument transformation. Demonstrates @map, @filter, @fetchSource, and @argumentTransform directives.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/java-kotlin-android/server/graphql-calculator.md#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery basicMapValue($userIds: [Int]) {\n  userInfoList(userIds: $userIds) {\n    id\n    age\n    firstName\n    lastName\n    fullName: stringHolder @map(mapper: \"firstName + lastName\")\n  }\n}\n\nquery filterUserByAge($userId: [Int]) {\n  userInfoList(userIds: $userId) @filter(predicate: \"age>=18\") {\n    userId\n    age\n    firstName\n    lastName\n  }\n}\n\nquery parseFetchedValueToAnotherFieldArgumentMap($itemIds: [Int]) {\n  itemList(itemIds: $itemIds) {\n    # save sellerId as List<Long> with unique name \"sellerIdList\"\n    sellerId @fetchSource(name: \"sellerIdList\")\n    name\n    saleAmount\n    salePrice\n  }\n\n  userInfoList(userIds: 1)\n    # transform the argument of \"userInfoList\" named \"userIds\" according to expression \"sellerIdList\" and expression argument,\n    # which mean replace userIds value by source named \"sellerIdList\"\n    @argumentTransform(\n      argumentName: \"userIds\"\n      operateType: MAP\n      expression: \"sellerIdList\"\n      dependencySources: [\"sellerIdList\"]\n    ) {\n    userId\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tartiflette with pip\nDESCRIPTION: Command to install the Tartiflette GraphQL library using pip package manager.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/tartiflette.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install tartiflette\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL API with Morpheus in Haskell\nDESCRIPTION: This Haskell implementation uses morpheus-graphql to create a GraphQL API based on the imported schema. It defines a root resolver that handles the deity query, imports the schema from an external file, and provides an API function that interprets GraphQL requests using the defined resolver.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/haskell/server/morpheus-graphql.md#2025-04-08_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE DuplicateRecordFields #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE NamedFieldPuns #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE TypeFamilies #-}\nmodule API (api) where\nimport Data.ByteString.Lazy.Char8 (ByteString)\nimport Data.Morpheus (interpreter)\nimport Data.Morpheus.Document (importGQLDocument)\nimport Data.Morpheus.Types (RootResolver (..), Undefined (..))\nimport Data.Text (Text)\nimportGQLDocument \"schema.gql\"\nrootResolver :: RootResolver IO () Query Undefined Undefined\nrootResolver =\n  RootResolver\n    { queryResolver = Query {deity},\n      mutationResolver = Undefined,\n      subscriptionResolver = Undefined\n    }\n  where\n    deity DeityArgs {name} =\n      pure\n        Deity\n          { name = pure name,\n            power = pure (Just \"Shapeshifting\")\n          }\napi :: ByteString -> IO ByteString\napi = interpreter rootResolver\n```\n\n----------------------------------------\n\nTITLE: Defining getLocation Function in TypeScript\nDESCRIPTION: Defines the getLocation function and SourceLocation type, which converts a character offset to a row and column in the Source.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/language.mdx#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getLocation(source: Source, position: number): SourceLocation\n\ntype SourceLocation = {\n  line: number;\n  column: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Metadata in YAML\nDESCRIPTION: This YAML frontmatter defines metadata for the 99designs/gqlgen project, including its name, description, and GitHub repository URL. It's likely used for documentation or a project listing.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/go/server/99designs-gqlgen.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: 99designs/gqlgen\ndescription: Go generate based graphql server library.\ngithub: 99designs/gqlgen\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Mutation and Query Types in GraphQL\nDESCRIPTION: This snippet shows a simple GraphQL schema definition for a 'message of the day' server with mutation to set a message and query to get the message.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/mutations-and-input-types.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setMessage(message: String): String\n}\n\ntype Query {\n  getMessage: String\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter GraphQL Client Configuration in YAML Front Matter\nDESCRIPTION: YAML front matter block defining metadata for the graphql-flutter client library. It specifies the package name, provides a brief description of the library as a GraphQL client implementation for Flutter, and links to the GitHub repository.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/flutter/client/graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: graphql\ndescription: A GraphQL client implementation in Flutter.\ngithub: zino-app/graphql-flutter\n---\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Project Tagline in JSON\nDESCRIPTION: This JSON snippet defines the configuration for a GraphQL project, specifically setting the tagline. It uses a nested object structure to organize the project metadata.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/get-predictable-results.mdx#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project\": {\n    \"tagline\": \"A query language for APIs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Hello World GraphQL Query with graphql-clj in Clojure\nDESCRIPTION: This snippet demonstrates how to define a schema, create a resolver function, and execute a simple GraphQL query using the graphql-clj library. It sets up a 'hello' field that returns 'Hello world!' when queried.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/clojure/server/graphql-clj.md#2025-04-08_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(def schema \"type QueryRoot {\n    hello: String\n  }\")\n\n(defn resolver-fn [type-name field-name]\n  (get-in {\"QueryRoot\" {\"hello\" (fn [context parent & rest]\n                              \"Hello world!\")}}\n          [type-name field-name]))\n\n(require '[graphql-clj.executor :as executor])\n\n(executor/execute nil schema resolver-fn \"{ hello }\")\n```\n\n----------------------------------------\n\nTITLE: Installing Django Graphbox Package\nDESCRIPTION: Command to install the django-graphbox package using pip package manager.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/python/server/django-graphbox.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-graphbox\n```\n\n----------------------------------------\n\nTITLE: Initializing Hot Chocolate GraphQL Server in C#\nDESCRIPTION: Shows how to configure and initialize a Hot Chocolate GraphQL server using ASP.NET Core. The example includes setting up a basic query that returns a Hero object with a hardcoded name property.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/c-net/server/hot-chocolate.md#2025-04-08_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\n\nWebHost\n    .CreateDefaultBuilder(args)\n    .ConfigureServices(services =>\n        services\n            .AddGraphQLServer()\n            .AddQueryType<Query>())\n    .Configure(builder =>\n        builder\n            .UseRouting()\n            .UseEndpoints(e => e.MapGraphQL()))\n    .Build()\n    .Run();\n\npublic class Query\n{\n    public Hero GetHero() => new Hero();\n}\n\npublic class Hero\n{\n    public string Name => \"Luke Skywalker\";\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra Utilities\nDESCRIPTION: Imports required utilities from Nextra framework for page map and meta handling\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/tags/[slug].mdx#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getPagesUnderRoute } from \"nextra/context\"\nimport { buildDynamicMeta } from \"nextra/remote\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic GraphQL Client in Ballerina\nDESCRIPTION: This code snippet demonstrates how to create a simple GraphQL client in Ballerina that executes a query against a local GraphQL server. It defines a response type, initializes a GraphQL client, executes a simple query, and prints the response.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/ballerina/client/ballerina-graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: ballerina\nCODE:\n```\nimport ballerina/graphql;\nimport ballerina/io;\n\ntype Response record {\n    record { string hello; } data;\n};\n\npublic function main() returns error? {\n    graphql:Client helloClient = check new (\"localhost:9090/graphql\");\n    string document = \"{ hello }\";\n    Response response = check helloClient->execute(document);\n    io:println(response.data.hello);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL JSON Response Format\nDESCRIPTION: Example of the JSON response returned by a successful GraphQL query. The response includes a 'data' object containing the result of the 'hello' query, which is the string 'Hello world!'.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/index.mdx#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hello\": \"Hello world!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Film Type in GraphQL Schema\nDESCRIPTION: This GraphQL type definition creates a Film type with four fields: title (String), episode (Int), releaseDate (String), and openingCrawl (String). This type can be used in a Star Wars-themed GraphQL API.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/v2.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Film {\n  title: String\n  episode: Int\n  releaseDate: String\n  openingCrawl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Null Types in GraphQL Schema\nDESCRIPTION: Demonstrates how to define a non-null String field using the exclamation mark modifier. The server must return a non-null value for this field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Character {\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Hero Data with Nested Relationships in GraphQL\nDESCRIPTION: A GraphQL query that retrieves a hero's name along with nested data about their friends, including each friend's home world and species information. The query demonstrates GraphQL's ability to request multiple levels of nested fields in a single query.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/query.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  hero {\n    name\n    friends {\n      name\n      homeWorld {\n        name\n        climate\n      }\n      species {\n        name\n        lifespan\n        origin {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Type with Arguments in GraphQL Schema\nDESCRIPTION: A simple GraphQL schema definition for a Query type with a rollDice method that takes required numDice and optional numSides arguments, returning an array of integers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/object-types.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  rollDice(numDice: Int!, numSides: Int): [Int]\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring GraphQL Response in JSON\nDESCRIPTION: This code snippet shows how to structure a GraphQL response in JSON format. It includes data for a hero character with properties like name, height, and mass.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/components/code-blocks/predictable-result.mdx#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hero\": {\n    \"name\": \"Luke Skywalker\",\n    \"height\": 1.72,\n    \"mass\": 77\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-API join query in WunderGraph\nDESCRIPTION: A GraphQL query demonstrating WunderGraph's cross-API join capabilities. It retrieves countries filtered by continent from one API, then joins weather data for each country's capital from another API using the @export and @internal directives.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/tools/wundergraph/gateways-supergraphs/wundergraph.md#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery (\n  $continent: String!\n  # the @internal directive removes the $capital variable from the public API\n  # this means, the user can't set it manually\n  # this variable is our JOIN key\n  $capital: String! @internal\n) {\n  countries_countries(filter: { continent: { eq: $continent } }) {\n    code\n    name\n    # using the @export directive, we can export the value of the field `capital` into the JOIN key ($capital)\n    capital @export(as: \"capital\")\n    # the _join field returns the type Query!\n    # it exists on every object type so you can everywhere in your Query documents\n    _join {\n      # once we're inside the _join field, we can use the $capital variable to join the weather API\n      weather_getCityByName(name: $capital) {\n        weather {\n          temperature {\n            max\n          }\n          summary {\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for Tag Pages\nDESCRIPTION: Async function that builds dynamic meta data and returns page props including the page map and title configuration for tag pages\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/tags/[slug].mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function getStaticProps({ params }) {\n  const { __nextra_pageMap } = await buildDynamicMeta()\n  return {\n    props: {\n      __nextra_pageMap,\n      __nextra_dynamic_opts: {\n        title: `Posts Tagged with \"${params.slug}\"`,\n        frontMatter: {}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Call-to-Action Button in HTML/JSX\nDESCRIPTION: HTML/JSX code for rendering an 'Apply Now' button with styling and external link functionality.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2025-04-02-seeking-graphql-subject-matter-experts/index.mdx#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"mt-8 flex justify-center\">\n  <a\n    href=\"https://forms.gle/2ELscDLhMS7kf3x8A\"\n    target=\"_blank\"\n    rel=\"noreferrer\"\n    className=\"bg-primary/85 px-20 py-4 text-center text-3xl font-semibold transition-colors hover:bg-primary/100 md:px-28\"\n  >\n    Apply Now\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Valid Query: Using Named Fragments for Field Reuse in GraphQL\nDESCRIPTION: Example of a valid GraphQL query that uses a named fragment to avoid duplicating fields across multiple nested levels of the same type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/validation.mdx#2025-04-08_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\nquery {\n  hero {\n    ...NameAndAppearances\n    friends {\n      ...NameAndAppearances\n      friends {\n        ...NameAndAppearances\n      }\n    }\n  }\n}\n\nfragment NameAndAppearances on Character {\n  name\n  appearsIn\n}\n```\n\n----------------------------------------\n\nTITLE: Running the GraphQL Script in Node.js\nDESCRIPTION: Command to execute the GraphQL server script using Node.js. This runs the JavaScript file that contains the GraphQL schema and query execution.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/index.mdx#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Invalid Query: Selection Set on Scalar Field in GraphQL\nDESCRIPTION: Example of an invalid GraphQL query that attempts to request nested fields on a scalar value ('name'), which cannot have sub-selections.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/validation.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\n# INVALID: name is a scalar, so fields are not permitted\nquery {\n  hero {\n    name {\n      firstCharacterOfName\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Local Schema for Client-Side Implementation\nDESCRIPTION: Command to install relay-local-schema package which allows Relay to resolve GraphQL queries locally using the custom schema instead of sending them to a server.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm i relay-local-schema\n```\n\n----------------------------------------\n\nTITLE: Invalid Query: Requesting Non-existent Fields in GraphQL\nDESCRIPTION: Example of an invalid GraphQL query that attempts to request a field ('favoriteSpaceship') that doesn't exist on the Character type, which will fail validation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/validation.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\n# INVALID: favoriteSpaceship does not exist on Character\nquery {\n  hero {\n    favoriteSpaceship\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Name Query\nDESCRIPTION: Shows how to query information about a specific type by name.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/introspection.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  __type(name: \"Droid\") {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Multi-Root Subscription Operation in GraphQL\nDESCRIPTION: This snippet shows an invalid subscription operation with multiple root fields. In GraphQL, each subscription operation must have exactly one root field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/subscriptions.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  reviewCreated {\n    rating\n    commentary\n  }\n  humanFriendsUpdated {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QueryType with REST API Endpoints\nDESCRIPTION: Implementation of the QueryType that defines fields corresponding to REST API endpoints, including allPeople and person queries with placeholders for resolvers.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql';\n\nconst QueryType = new GraphQLObjectType({\n  name: 'Query',\n  description: 'The root of all... queries',\n  fields: () => ({\n    allPeople: {\n      type: new GraphQLList(PersonType),\n      resolve: root => {} // Fetch the index of people from the REST API,\n    },\n    person: {\n      type: PersonType,\n      args: {\n        id: { type: GraphQLString },\n      },\n      resolve: (root, args) => {} // Fetch the person with ID `args.id`,\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to GraphQL Queries\nDESCRIPTION: Example demonstrating how to add comments to a GraphQL query. Like schema comments, query comments are preceded by a # character and are ignored during execution.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\n{\n  hero {\n    name\n    # Queries can have comments!\n    friends {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Trivial Name Resolver\nDESCRIPTION: Simple resolver function for the name field on the Human type\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/execution.mdx#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Human_name(obj, args, context, info) {\n  return obj.name\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Interface Inheritance\nDESCRIPTION: Demonstrates how interfaces can implement other interfaces, showing Node and Character interface relationship.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n\ninterface Character implements Node {\n  id: ID!\n  name: String!\n  friends: [Character]\n  appearsIn: [Episode]!\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering GraphQL Essential Links with Cards Component\nDESCRIPTION: This JSX snippet renders a Cards component populated with an array of essential GraphQL links. Each card item includes an icon, title, and link URL pointing to important GraphQL resources like the specification, reference implementation, and community channels.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/contribute/essential-links.mdx#2025-04-08_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Cards\n  items={[\n    {\n      icon: TextIcon,\n      title: \"The GraphQL Specification\",\n      link: \"https://spec.graphql.org\",\n    },\n    {\n      icon: CodeIcon,\n      title: \"GraphQL Reference Implementation\",\n      link: \"https://graphql.org/code\",\n    },\n    {\n      icon: GitHubIcon,\n      title: \"The official GraphQL GitHub org\",\n      link: \"https://github.com/graphql\",\n    },\n    {\n      icon: DiscordIcon,\n      title: \"The official GraphQL Discord\",\n      link: \"https://discord.graphql.org\",\n    },\n    {\n      icon: GoogleCalendarIcon,\n      title: \"The GraphQL Project Calendar\",\n      link: \"https://calendar.graphql.org\",\n    },\n    {\n      icon: GitHubIcon,\n      title: \"GraphQL Specification Membership Agreement\",\n      link: \"https://github.com/graphql/graphql-wg/tree/HEAD/membership\",\n      description: \"\",\n    },\n    {\n      icon: YouTubeIcon,\n      title: \"GraphQL YouTube Channel\",\n      link: \"https://youtube.graphql.org\",\n    },\n    {\n      icon: <StarIcon className=\"fill-primary\" />,\n      title: \"The GraphQL Community Grant Program\",\n      link: \"https://graphql.org/foundation\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Comparing Unbounded and Paginated GraphQL Queries\nDESCRIPTION: This snippet demonstrates the difference between an unbounded 'friends' field and a paginated 'friendsConnection' field in a GraphQL query. It shows how pagination can limit the amount of data returned in a single request.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/security.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\nquery {\n  hero {\n    name\n    friends {\n      name\n    }\n    friendsConnection(first: 1) {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL-Relay for Relay Compliance\nDESCRIPTION: Command to install the graphql-relay package which provides helper functions for implementing Relay-specific GraphQL schema requirements like global IDs.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm i graphql-relay\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Incorrect Variable Type\nDESCRIPTION: This snippet shows a GraphQL query with an incorrect variable type, demonstrating how GraphQL handles and reports type mismatch errors during validation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/response.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery HeroForEpisode($ep: String!) {\n  hero(episode: $ep) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticated GraphQL mutation with validation in WunderGraph\nDESCRIPTION: A GraphQL mutation example showing WunderGraph's authentication and validation features. It extracts user data from JWT claims, validates message input against a JSON schema, and creates a post in the database with user association.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/tools/wundergraph/gateways-supergraphs/wundergraph.md#2025-04-08_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation (\n  $name: String! @fromClaim(name: NAME)\n  $email: String! @fromClaim(name: EMAIL)\n  $message: String! @jsonSchema(pattern: \"^[a-zA-Z 0-9]+$\")\n) {\n  createOnepost(\n    data: {\n      message: $message\n      user: {\n        connectOrCreate: {\n          where: { email: $email }\n          create: { email: $email, name: $name }\n        }\n      }\n    }\n  ) {\n    id\n    message\n    user {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating N+1 Problem in GraphQL Query\nDESCRIPTION: Example query showing how nested relationships can trigger multiple subsequent data fetches, demonstrating the N+1 problem in GraphQL. The query fetches a hero, their friends, and starships for human friends.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/performance.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\nquery HeroWithFriends {\n  # 1 request for the hero\n  hero {\n    name\n    # 1 request for the hero's N friends\n    friends {\n      name\n      # N starship requests - one for each of the hero's N human friends\n      ... on Human {\n        starships {\n          name\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay to Use a Local Schema\nDESCRIPTION: Code to inject a custom network layer into Relay that resolves queries using the local GraphQL schema instead of sending requests to a server.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport RelayLocalSchema from 'relay-local-schema';\n\nimport schema from './schema';\n\nRelay.injectNetworkLayer(\n  new RelayLocalSchema.NetworkLayer({ schema })\n);\n```\n\n----------------------------------------\n\nTITLE: Detailed Type Fields Query\nDESCRIPTION: Demonstrates querying field information including nested type information using ofType.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/introspection.mdx#2025-04-08_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  __type(name: \"Droid\") {\n    name\n    fields {\n      name\n      type {\n        name\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Arguments\nDESCRIPTION: A GraphQL query demonstrating how to pass an argument to a field, specifically querying the droid field with an ID argument.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\n{\n  droid(id: \"2000\") {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Character Type Query\nDESCRIPTION: Shows how to query type information for an Interface type.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/introspection.mdx#2025-04-08_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  __type(name: \"Character\") {\n    name\n    kind\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Scalar Fields in GraphQL\nDESCRIPTION: A GraphQL query showing how to retrieve scalar fields from an object, specifically the name and appearsIn fields from the hero object.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/schema.mdx#2025-04-08_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\n{\n  hero {\n    name\n    appearsIn\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Node Interface for User Type in GraphQL\nDESCRIPTION: This snippet demonstrates how to implement the Node interface for a User type, including the required id field and an additional name field.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype User implements Node {\n  id: ID!\n  # Full name\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Rails GraphQL Schema with Hello World Query\nDESCRIPTION: Demonstrates the implementation of a basic GraphQL schema using the rails-graphql gem. The code shows how to define a query field that resolves to 'Hello World!' and execute a simple query against the schema. The example highlights the library's focus on natural Ruby-like DSL.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/language-support/ruby/server/rails-graphql.md#2025-04-08_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rails-graphql'\n\nclass GraphQL::AppSchema < GraphQL::Schema\n  query_fields do\n    field(:hello).resolve { 'Hello World!' }\n  end\nend\n\nputs GraphQL::AppSchema.execute('{ hello }')\n```\n\n----------------------------------------\n\nTITLE: Defining Product Subgraph Schema in GraphQL Federation\nDESCRIPTION: This snippet shows the GraphQL schema for a Product subgraph in a federated architecture. It defines a Product type with an @key directive for federation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/federation.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Product @key(fields: \"id\") {\n  id: ID!\n  title: String!\n  price: Float!\n  inStock: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Type Description Query\nDESCRIPTION: Shows how to query the description of a type for documentation purposes.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/introspection.mdx#2025-04-08_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  __type(name: \"Droid\") {\n    name\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Root Resolver Implementation\nDESCRIPTION: JavaScript resolver function for the human field on the Query type, demonstrating database access and Promise handling\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/execution.mdx#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Query_human(obj, args, context, info) {\n  return context.db.loadHumanByID(args.id).then(\n    userData => new Human(userData)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding GraphQL Landscape Iframe using IframeResizer in JSX\nDESCRIPTION: This JSX code embeds an iframe displaying the GraphQL Foundation members from the GraphQL Landscape. It uses the IframeResizer component to ensure responsive behavior, with custom props for styling and height calculation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/users.mdx#2025-04-08_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<IframeResizer\n  className=\"w-full mt-6\"\n  src=\"https://landscape.graphql.org/card-mode?category=graph-ql-foundation-member&grouping=category&embed=yes&style=borderless\"\n  heightCalculationMethod=\"lowestElement\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from GraphQL Query\nDESCRIPTION: This JSON snippet illustrates the structure of a response from a GraphQL query. It shows how the response mirrors the structure of the query, returning the requested data.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/index.mdx#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"me\": {\n      \"name\": \"Luke Skywalker\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Usernames Query Response in JSON\nDESCRIPTION: This JSON response shows the result of fetching multiple users by their usernames, returning an array of user IDs.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"usernames\": [\n    {\n      \"id\": \"4\"\n    },\n    {\n      \"id\": \"6\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GraphiQL IDE to Express Server\nDESCRIPTION: This code snippet demonstrates how to add the GraphiQL IDE to the Express server using the 'ruru' package, enabling in-browser GraphQL query execution.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/running-an-express-graphql-server.mdx#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar { ruruHTML } = require(\"ruru/server\")\n\n// Serve the GraphiQL IDE.\napp.get(\"/\", (_req, res) => {\n  res.type(\"html\")\n  res.end(ruruHTML({ endpoint: \"/graphql\" }))\n})\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from GraphQL Schema (Problematic Approach)\nDESCRIPTION: This TypeScript code shows an attempt to generate types directly from the GraphQL schema. While it looks similar to the schema, it doesn't account for partial queries or field aliasing, leading to potential type safety issues.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2024-09-19-codegen.mdx#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// First attempt at generating code from the product type\ntype Product = {\n    id: string;\n    name: string;\n    description: string | null;\n    price: string | null\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variables\nDESCRIPTION: Demonstrates how to construct a GraphQL query using variables and send it using fetch, including proper variable passing in the request body.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/graphql-clients.mdx#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar dice = 3\nvar sides = 6\nvar query = /* GraphQL */`query RollDice($dice: Int!, $sides: Int) {\n  rollDice(numDice: $dice, numSides: $sides)\n}`\n\nfetch(\"/graphql\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  },\n  body: JSON.stringify({\n    query,\n    variables: { dice, sides },\n  }),\n})\n  .then(r => r.json())\n  .then(data => console.log(\"data returned:\", data))\n```\n\n----------------------------------------\n\nTITLE: Invalid Query: Cyclic Fragment Spreads in GraphQL\nDESCRIPTION: Example of an invalid GraphQL query that creates an infinite recursion through fragment spreads, which is not allowed in GraphQL as it could create unbounded results.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/validation.mdx#2025-04-08_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n# { \"graphiql\": true }\nquery {\n  hero {\n    ...NameAndAppearancesAndFriends\n  }\n}\n\nfragment NameAndAppearancesAndFriends on Character {\n  name\n  appearsIn\n  friends {\n    ...NameAndAppearancesAndFriends\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing GraphQL Training Courses in Markdown\nDESCRIPTION: A markdown list of GraphQL training courses with links to various resources. It includes tutorials for GraphQL-JS, Yoga GraphQL Server, Apollo Odyssey, and Hasura's GraphQL Tutorials.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/resources/training-courses.mdx#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Training Courses\n\nA number of GraphQL training courses are available:\n\n- [GraphQL-JS tutorial](/graphql-js)\n- [Yoga GraphQL Server Tutorial](https://the-guild.dev/graphql/yoga-server/tutorial): Open source tutorial for creating modern GraphQL Servers in Node, CF Workers, Deno and others\n- [Apollo Odyssey](https://apollographql.com/tutorials): Interactive courses for building GraphQL applications with Apollo's toolset\n- [GraphQL Tutorials](https://hasura.io/learn): Real World Fullstack GraphQL tutorials for developers by Hasura\n```\n\n----------------------------------------\n\nTITLE: GraphQL HTTP Handler Configuration Interface\nDESCRIPTION: TypeScript interface showing the configuration options for creating a GraphQL HTTP handler. Includes schema, rootValue, context, formatError, and validationRules parameters.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/graphql-js/graphql-http.mdx#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createHandler({\n  schema,\n  rootValue,\n  context,\n  formatError,\n  validationRules,\n}: {\n  rootValue?: any,\n  context?: any,\n  formatError?: Function,\n  validationRules?: any[],\n}): Handler\n```\n\n----------------------------------------\n\nTITLE: Importing Cards Component\nDESCRIPTION: Imports the Cards component used for displaying the vendor channel grid.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/resources/vendor-channels.mdx#2025-04-08_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Cards } from '../../../components/cards'\n```\n\n----------------------------------------\n\nTITLE: Introspection Response for Node Root Field in JSONC\nDESCRIPTION: This JSONC response provides the introspection details for the node root field, confirming its structure and the presence of the id argument.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/learn/global-object-identification.mdx#2025-04-08_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"__schema\": {\n    \"queryType\": {\n      \"fields\": [\n        // This array may have other entries\n        {\n          \"name\": \"node\",\n          \"type\": {\n            \"name\": \"Node\",\n            \"kind\": \"INTERFACE\"\n          },\n          \"args\": [\n            {\n              \"name\": \"id\",\n              \"type\": {\n                \"kind\": \"NON_NULL\",\n                \"ofType\": {\n                  \"name\": \"ID\",\n                  \"kind\": \"SCALAR\"\n                }\n              }\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Sorting Logic in JavaScript\nDESCRIPTION: Utility code that sorts events into past and upcoming categories based on current date. Uses array reduce method to process event dates.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/events.mdx#2025-04-08_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const { pastEvents, upcomingEvents } = events.reduce(\n  (acc, event) => {\n    const now = new Date()\n    const date = new Date(event.date)\n    if (date < now) {\n      acc.pastEvents.push(event)\n    } else {\n      acc.upcomingEvents.push(event)\n    }\n    return acc\n  },\n  { pastEvents: [], upcomingEvents: [] },\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Channel Cards with React JSX\nDESCRIPTION: Uses the Cards component to display a list of GraphQL community channels with their respective icons, titles, links, and descriptions. Each card represents a different platform where developers can get help with GraphQL.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/resources/community-channels.mdx#2025-04-08_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards\n  items={[\n    {\n      icon: RedditIcon,\n      title: \"GraphQL Reddit Community\",\n      link: \"https://reddit.com/r/graphql\",\n    },\n    {\n      icon: ReactifluxIcon,\n      title: \"Reactiflux Discord\",\n      link: \"https://join.reactiflux.com\",\n      description: \"#help-graphql\",\n    },\n    {\n      icon: FreenodeIcon,\n      title: \"Freenode IRC\",\n      link: \"https://freenode.net\",\n      description: \"#graphql\",\n    },\n    {\n      icon: StackOverflowIcon,\n      title: \"Stack Overflow\",\n      link: \"https://stackoverflow.com/questions/tagged/graphql\",\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for GraphQL Essential Links\nDESCRIPTION: This snippet imports the Cards component and various icon components that will be used to represent different types of resources in the GraphQL essential links page.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/contribute/essential-links.mdx#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Cards } from \"../../../components/cards\"\nimport {\n  GitHubIcon,\n  DiscordIcon,\n  StarIcon,\n  CodeIcon,\n  TextIcon,\n  GoogleCalendarIcon,\n  YouTubeIcon,\n} from \"../../../icons\"\n```\n\n----------------------------------------\n\nTITLE: Static Props Generator for GraphQL Tools Page\nDESCRIPTION: Async function that generates static props by processing markdown files, compiling MDX content, validating frontmatter, and organizing tools by GitHub stats and tags. Handles file reading, tag extraction, and data validation.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/community/tools-and-libraries.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const filePaths = await fg(\"./src/code/**/*.md\")\n  const results = []\n  const allTags = Object.create(null)\n  //\n  for (const filePath of filePaths) {\n    let segments = path.relative(\"./src/code\", filePath).split(\"/\").slice(0, -1)\n    // Do not add `language-support` as tag\n    if (segments[0] === \"language-support\") segments = segments.slice(1)\n    // Do not add all folders as tags under `tools` folder\n    if (segments[0] === \"tools\") segments.splice(1, 1)\n    const rawMdx = await readFile(filePath, \"utf8\")\n    let hasDescription = false\n    const { result: compiledSource, frontMatter } = await compileMdx(rawMdx, {\n      mdxOptions: {\n        format: \"md\",\n        remarkPlugins: [\n          () => tree => {\n            hasDescription =\n              tree.children.length > 1 &&\n              tree.children.some(node => node.type !== \"yaml\")\n          },\n        ],\n      },\n    })\n    //\n    for (const tag of segments) {\n      if (tag.includes(\"_\")) {\n        throw new Error(\n          `Tag ${tag} contains an underscore, which is not allowed.`,\n        )\n      }\n      allTags[tag] ??= 0\n      allTags[tag] += 1\n    }\n    if (\n      frontMatter.url &&\n      frontMatter.github &&\n      frontMatter.url\n        .toLowerCase()\n        .replace(/\\/$/, \"\")\n        .endsWith(frontMatter.github.toLowerCase())\n    ) {\n      throw new Error(\n        `Remove frontmatter.url since URL \"${frontMatter.url}\" ends with the same slug as the GitHub repo \"${frontMatter.github}\".`,\n      )\n    }\n    const stars = githubInfo[frontMatter.github]\n    results.push({\n      filePath,\n      tags: segments,\n      frontMatter,\n      ...(stars && {\n        stars: stars.stars,\n        formattedStars: stars.formattedStars,\n        lastRelease: stars.formattedLastRelease,\n        license: stars.license,\n      }),\n      ...(hasDescription && { compiledSource }),\n    })\n  }\n  //\n  const allTagsList = Object.entries(allTags)\n    .map(([tag, count]) => ({\n      tag,\n      count,\n      name: slugMap[tag] ?? tag,\n    }))\n    .sort((a, b) => b.count - a.count || a.tag.localeCompare(b.tag))\n  //\n  return {\n    props: {\n      data: results.sort((a, b) => (b.stars ?? 0) - (a.stars ?? 0)),\n      allTags: allTagsList,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Brand Guidelines Agreement Component with React\nDESCRIPTION: A React component that requires users to agree to the brand guidelines before accessing download links for GraphQL logo files or requesting permissions.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/brand.mdx#2025-04-08_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nexport function AgreeActions() {\n  const [agree, setAgree] = useState(false);\n  return (\n    <div className=\"flex items-center flex-col gap-5 bg-zinc-100 dark:bg-zinc-800 p-5 border rounded\">\n      <div className=\"flex gap-2\">\n        <input\n          id=\"agree\"\n          type=\"checkbox\"\n          checked={agree}\n          onChange={(event) => setAgree(event.target.checked)}\n        />\n        <label htmlFor=\"agree\" className=\"cursor-pointer\">\n          I have read and accept the brand and trademark guidelines.\n        </label>\n      </div>\n      <a\n        {...(agree\n          ? { href: \"/img/brand/graphql-brand-assets.zip\" }\n          : { className: \"cursor-not-allowed text-gray-500 dark:text-gray-400\" })}\n      >\n          Download Logo Files\n      </a>\n      <a\n        {...(agree\n          ? { href: \"mailto:info@graphql.org?subject=Trademark%20Request\" }\n          : { className: \"cursor-not-allowed text-gray-500 dark:text-gray-400\" })}\n      >\n          Request Permission\n      </a>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hygraph Platform Configuration in YAML\nDESCRIPTION: YAML configuration block that defines the core properties of Hygraph including its name, description and URL. The configuration specifies Hygraph as a federated content platform with GraphQL API capabilities.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/hygraph.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Hygraph\ndescription: Hygraph is the federated content platform that allows true composability of your stack. Integrate all your services with a unique content federation approach and distribute content from anywhere - to anywhere using a single, powerful GraphQL API.\nurl: https://hygraph.com/\n---\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Partial Product Data\nDESCRIPTION: This GraphQL query demonstrates requesting only a subset of fields from the Product type. It highlights why generating types directly from the schema can lead to issues, as not all fields are always requested.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2024-09-19-codegen.mdx#2025-04-08_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetProduct {\n  products {\n    id\n    # no name here\n    description\n    price\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTime Custom Scalar with SpecifiedBy Directive in GraphQL\nDESCRIPTION: Example showing how to define a DateTime custom scalar and link it to its specification using the @specifiedBy directive. The specification URL points to the official scalar documentation hosted at scalars.graphql.org.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2023-01-14-graphql-scalars.mdx#2025-04-08_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar DateTime\n  @specifiedBy(url: \"https://scalars.graphql.org/andimarek/date-time\")\n```\n\n----------------------------------------\n\nTITLE: Newsletter Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter defining metadata for the GraphQL Foundation newsletter post including title, tags, date and byline.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2020-10-15-newsletter-september-2020.mdx#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: GraphQL Foundation Monthly Newsletter September 2020\ntags: [\"newsletter\"]\ndate: 2020-10-15\nbyline: GraphQL Foundation\n---\n```\n\n----------------------------------------\n\nTITLE: Example Pathological GraphQL Query\nDESCRIPTION: Shows a nested friends-of-friends query that could cause performance issues with multiple round trips to the REST API.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(id: \"1\") {\n    firstName\n    friends {\n      firstName\n      friends {\n        firstName\n        friends {\n          firstName\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global IDs for Relay Compliance\nDESCRIPTION: Code snippet showing how to modify the schema to use global IDs as required by Relay's refetching subsystem, using the globalIdField helper from graphql-relay.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-05-02-rest-api-graphql-wrapper.mdx#2025-04-08_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { globalIdField } from \"graphql-relay\"\n\nconst PersonType = new GraphQLObjectType({\n  name: \"Person\",\n  description: \"Somebody that you used to know\",\n  fields: () => ({\n    id: globalIdField(\"Person\")\n    /* ... */\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Mock Data in GraphQL Servers\nDESCRIPTION: Shows various ways to customize mock data generation in a GraphQL server using Apollo's mocking tools. Examples include customizing data per type, per field, creating lists of specific lengths, and customizing based on query arguments.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/pages/blog/2016-04-19-mocking.mdx#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// customize mocking per type (i.e. Integer, Float, String)\nmockServer(schema, {\n  Int: () => 6,\n  Float: () => 22.1,\n  String: () => 'Hello'\n})\n\n// customize mocking per field in the schema (i.e. for Person.name and Person.age)\nmockServer(schema, {\n  Person: () => ({\n    name: casual.name,\n    age: () => casual.integer(0,120)\n  })\n})\n\n// mock lists of specific or random length( and lists of lists of lists …)\nmockServer(schema, {\n  Person: () => ({\n    // a list of length between 2 and 6\n    friends: () => new MockList([2,6]),\n    // a list of three lists of two items: [[1, 1], [2, 2], [3, 3]]\n    listOfLists: () => new MockList(3, () => new MockList(2))\n  })\n})\n\n// customize mocking of a field or type based on the query arguments\nmockServer(schema, {\n  Person: () => ({\n    // the number of friends in the list now depends on numPages\n    paginatedFriends: (o, { numPages }) => new MockList(numPages * PAGE_SIZE)\n  })\n})\n\n// You can also disable mocking for specific fields, pass through to the backend, etc.\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with gqt CLI\nDESCRIPTION: Command line example showing how to run gqt against a GraphQL endpoint. The tool opens an interactive TUI for query building and outputs the server response to stdout.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/tools/gqt/general/gqt.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngqt -e https://your.app.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Defining Grafbase Platform Information in Markdown\nDESCRIPTION: Markdown frontmatter block defining metadata for Grafbase platform, including name, description and URL properties.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/grafbase.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: Grafbase\ndescription: Grafbase provides secure self-hosted deployment options for GraphQL Federation, unmatched query speed, advanced governance, and unified data access for reliable, enterprise-grade API management. Learn more about scaling GraphQL Federation with [Grafbase](https://grafbase.com).\nurl: https://grafbase.com\n---\n```\n\n----------------------------------------\n\nTITLE: Project Metadata in YAML\nDESCRIPTION: YAML frontmatter defining core metadata for the Elide project, including name, description, URLs and repository information.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/src/code/services/elide.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Elide\ndescription: A Java library that can expose a JPA annotated data model as a GraphQL service over any relational database.\nurl: https://elide.io\ngithub: yahoo/elide\n---\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Documentation Format\nDESCRIPTION: Shows the recommended markdown format for documenting GraphQL projects, including YAML frontmatter with metadata and code examples.\nSOURCE: https://github.com/graphql/graphql.github.io/blob/source/notes/ContributingToCodePage.md#2025-04-08_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n---\nname: Express GraphQL\ndescription: The reference implementation of a GraphQL API server over an Express webserver. You can use this to run GraphQL in conjunction with a regular Express webserver, or as a standalone GraphQL server.\nurl: /graphql-js/running-an-express-graphql-server/\ngithub: graphql/graphql-http\nnpm: \"graphql-http\"\n---\n```"
  }
]