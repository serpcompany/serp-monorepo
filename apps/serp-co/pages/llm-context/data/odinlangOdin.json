[
  {
    "owner": "odin-lang",
    "repo": "odin",
    "content": "TITLE: Basic Odin Program with String Processing and Arithmetic Operations\nDESCRIPTION: A sample Odin program that processes a string of symbols (+, -, *, /, ðŸ˜ƒ) and performs corresponding arithmetic operations on an accumulator. Demonstrates basic syntax, control flow, string iteration, and emoji support in Odin.\nSOURCE: https://github.com/odin-lang/odin/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: odin\nCODE:\n```\npackage main\n\nimport \"core:fmt\"\n\nmain :: proc() {\n\tprogram := \"+ + * ðŸ˜ƒ - /\"\n\taccumulator := 0\n\n\tfor token in program {\n\t\tswitch token {\n\t\tcase '+': accumulator += 1\n\t\tcase '-': accumulator -= 1\n\t\tcase '*': accumulator *= 2\n\t\tcase '/': accumulator /= 2\n\t\tcase 'ðŸ˜ƒ': accumulator *= accumulator\n\t\tcase: // Ignore everything else\n\t\t}\n\t}\n\n\tfmt.printf(\"The program \\\"%s\\\" calculates the value %d\\n\",\n\t           program, accumulator)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Window with Text in Raylib using Odin\nDESCRIPTION: This example demonstrates how to create a window, draw text, and handle the main game loop using raylib in the Odin programming language. It initializes a window, draws text in the center, and closes the window when requested.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/raylib/README.md#2025-04-22_snippet_0\n\nLANGUAGE: odin\nCODE:\n```\npackage example\n\nimport rl \"vendor:raylib\"\n\nmain :: proc() {\n    rl.InitWindow(800, 450, \"raylib [core] example - basic window\")\n\n    for !rl.WindowShouldClose() {\n        rl.BeginDrawing()\n            rl.ClearBackground(rl.RAYWHITE)\n            rl.DrawText(\"Congrats! You created your first window!\", 190, 200, 20, rl.LIGHTGRAY)\n        rl.EndDrawing()\n    }\n\n    rl.CloseWindow()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Odin Program Example with Character Processing\nDESCRIPTION: Demonstrates a simple Odin program that processes a string of characters using a switch statement. The program calculates a value by performing arithmetic operations based on different symbols, including emoji support.\nSOURCE: https://github.com/odin-lang/odin/blob/master/tests/core/assets/Shoco/README.md#2025-04-22_snippet_0\n\nLANGUAGE: odin\nCODE:\n```\npackage main\n\nimport \"core:fmt\"\n\nmain :: proc() {\n\tprogram := \"+ + * ðŸ˜ƒ - /\"\n\taccumulator := 0\n\n\tfor token in program {\n\t\tswitch token {\n\t\tcase '+': accumulator += 1\n\t\tcase '-': accumulator -= 1\n\t\tcase '*': accumulator *= 2\n\t\tcase '/': accumulator /= 2\n\t\tcase 'ðŸ˜ƒ': accumulator *= accumulator\n\t\tcase: // Ignore everything else\n\t\t}\n\t}\n\n\tfmt.printf(\"The program \\\"%s\\\" calculates the value %d\\n\",\n\t           program, accumulator)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Lua Memory Allocator in Odin\nDESCRIPTION: Shows how to create a custom context-based memory allocator for Lua in Odin, initialize a Lua state, and execute Lua code. The implementation includes memory management functions for allocation, reallocation, and deallocation using Odin's runtime memory management.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/lua/README.md#2025-04-22_snippet_0\n\nLANGUAGE: odin\nCODE:\n```\npackage lua_example_with_context\n\nimport \"core:fmt\"\nimport lua \"vendor:lua/5.4\" // or whatever version you want\nimport \"core:c\"\nimport \"base:runtime\"\n\nstate: ^lua.State\n\nlua_allocator :: proc \"c\" (ud: rawptr, ptr: rawptr, osize, nsize: c.size_t) -> (buf: rawptr) {\n\told_size := int(osize)\n\tnew_size := int(nsize)\n\tcontext = (^runtime.Context)(ud)^\n\n\tif ptr == nil {\n\t\tdata, err := runtime.mem_alloc(new_size)\n\t\treturn raw_data(data) if err == .None else nil\n\t} else {\n\t\tif nsize > 0 {\n\t\t\tdata, err := runtime.mem_resize(ptr, old_size, new_size)\n\t\t\treturn raw_data(data) if err == .None else nil\n\t\t} else {\n\t\t\truntime.mem_free(ptr)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nmain :: proc() {\n\t_context := context\n\tstate = lua.newstate(lua_allocator, &_context)\n\tdefer lua.close(state)\n\n\tlua.L_dostring(state, \"return 'somestring'\")\n\tstr := lua.tostring(state, -1)\n\tfmt.println(str)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading glTF File in Odin using cgltf\nDESCRIPTION: Demonstrates how to load a glTF file using cgltf in Odin. It initializes options, parses the file, and handles the result. The loaded data should be freed after use.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/cgltf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: odin\nCODE:\n```\npackage main\n\nimport \"vendor:cgltf\"\n\nmain :: proc() {\n\toptions: cgltf.options\n\tdata, result := cgltf.parse_file(&options, \"scene.gltf\")\n\tif result != .success {\n\t\t/* TODO handle error */\n\t}\n\tdefer cgltf.free(data)\n\t/* TODO make awesome stuff */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAssembly with Odin in HTML\nDESCRIPTION: This snippet demonstrates how to set up an HTML file to run WebAssembly compiled from Odin. It includes the necessary JavaScript file and a script to execute the WASM.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/wasm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Copy `core:sys/wasm/js/odin.js` into your web server -->\n<script type=\"text/javascript\" src=\"odin.js\"></script>\n<script type=\"text/javascript\">\n\todin.runWasm(pathToWasm, consolePreElement);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading OpenGL Function Pointers with GLFW in Odin\nDESCRIPTION: Demonstrates how to load OpenGL function pointers up to version 4.5 using a custom GetProcAddress equivalent or GLFW's built-in helper.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/OpenGL/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngl.load_up_to(4, 5, proc(p: rawptr, name: cstring) do (cast(^rawptr)p)^ = glfw.GetProcAddress(name); );\n```\n\nLANGUAGE: go\nCODE:\n```\ngl.load_up_to(4, 5, glfw.gl_set_proc_address);\n```\n\n----------------------------------------\n\nTITLE: Loading glTF from Memory in Odin using cgltf\nDESCRIPTION: Shows how to load glTF data from memory using cgltf in Odin. It takes a byte slice containing glTF or GLB data, parses it, and handles the result. The loaded data should be freed after use.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/cgltf/README.md#2025-04-22_snippet_1\n\nLANGUAGE: odin\nCODE:\n```\npackage main\n\nimport \"vendor:cgltf\"\n\nmain :: proc() {\n\tbuf: []byte = ... // data to glb or gltf file data\n\n\toptions: cgltf.options\n\tdata, result := cgltf.parse(&options, raw_data(buf), len(buf))\n\tif result != .success {\n\t\t/* TODO handle error */\n\t}\n\tdefer cgltf.free(data)\n\t/* TODO make awesome stuff */\n}\n```\n\n----------------------------------------\n\nTITLE: Writing glTF to File in Odin using cgltf\nDESCRIPTION: Demonstrates how to write glTF data to a file using cgltf in Odin. It requires a valid cgltf.data structure, which can be constructed or loaded from an existing glTF document.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/cgltf/README.md#2025-04-22_snippet_2\n\nLANGUAGE: odin\nCODE:\n```\npackage main\n\nimport \"vendor:cgltf\"\n\nmain :: proc() {\n\toptions: cgltf.options\n\tdata: ^cgltf.data = /* TODO must be valid data */\n\tresult := cgltf.write_file(&options, \"out.gltf\", data)\n\tif result != .success {\n\t\t/* TODO handle error */\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Writing glTF to Memory in Odin using cgltf\nDESCRIPTION: Shows how to write glTF data to memory using cgltf in Odin. It first calculates the required size, allocates a buffer, and then writes the data. Requires a valid cgltf.data structure.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/cgltf/README.md#2025-04-22_snippet_3\n\nLANGUAGE: odin\nCODE:\n```\npackage main\n\nimport \"vendor:cgltf\"\n\nmain :: proc() {\n\toptions: cgltf.options\n\tdata: ^cgltf.data = /* TODO must be valid data */\n\n\tsize := cgltf.write(&options, nil, 0, data)\n\n\tbuf := make([]byte, size)\n\n\twritten := cgltf.write(&options, raw_data(buf), size, data)\n\tif written != size {\n\t\t/* TODO handle error */\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WASM in Browser with HTML and JavaScript\nDESCRIPTION: Example showing how to load and run a WASM module in a web browser using the odin.js helper script. Requires copying the core:sys/wasm/js/odin.js file to the web server first.\nSOURCE: https://github.com/odin-lang/odin/blob/master/core/sys/wasm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Copy `core:sys/wasm/js/odin.js` into your web server -->\n<script type=\"text/javascript\" src=\"odin.js\"></script>\n<script type=\"text/javascript\">\n\todin.runWasm(pathToWasm, consolePreElement);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building Odin on Windows\nDESCRIPTION: Command to build the Odin compiler on Windows systems using the build script, which requires Visual Studio and the x64 Native Tools Command Prompt.\nSOURCE: https://github.com/odin-lang/odin/blob/master/bin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild.bat\n```\n\n----------------------------------------\n\nTITLE: Building Odin on Unix Systems\nDESCRIPTION: Command to build the Odin compiler on Linux/MacOS systems using make. Requires LLVM, Clang, or XCode depending on the platform.\nSOURCE: https://github.com/odin-lang/odin/blob/master/bin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Setting Odin Root Path\nDESCRIPTION: Environment variable configuration for Unix systems to specify the Odin compiler root path when installing to system directories.\nSOURCE: https://github.com/odin-lang/odin/blob/master/bin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nset ODIN_ROOT=/path/to/odin_root\n```\n\n----------------------------------------\n\nTITLE: Importing Metal Library in Odin\nDESCRIPTION: Shows how to import the Metal library in an Odin project\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/darwin/Metal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: odin\nCODE:\n```\nimport MTL \"core:sys/darwin/Metal\"\n```\n\n----------------------------------------\n\nTITLE: Creating Metal Device - Odin Implementation\nDESCRIPTION: Demonstrates how to create a Metal device in Odin with manual memory management\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/darwin/Metal/README.md#2025-04-22_snippet_3\n\nLANGUAGE: odin\nCODE:\n```\ndevice := MTL.CreateSystemDefaultDevice()\n\n// ...\n\ndevice->release()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampler State - Odin Implementation\nDESCRIPTION: Shows how to configure a Metal sampler state in Odin with manual memory management\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/darwin/Metal/README.md#2025-04-22_snippet_6\n\nLANGUAGE: odin\nCODE:\n```\nsamplerDescriptor := MTL.SamplerDescriptor.alloc()->init()\n\nsamplerDescriptor->setSAddressMode(.Repeat)\nsamplerDescriptor->setTAddressMode(.Repeat)\nsamplerDescriptor->setRAddressMode(.Repeat)\nsamplerDescriptor->setMagFilter(.Linear)\nsamplerDescriptor->setMinFilter(.Linear)\nsamplerDescriptor->setMipFilter(.Linear)\nsamplerDescriptor->setSupportArgumentBuffers(true)\n\nsamplerState := device->newSamplerState(samplerDescriptor)\n\nsamplerDescriptor->release()\n\n// ...\n\nsamplerState->release()\n```\n\n----------------------------------------\n\nTITLE: Odin Package Import Example\nDESCRIPTION: Example showing how to import the libc vendor package in an Odin project for WASM compilation support.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/libc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: odin\nCODE:\n```\n@(require) import \"vendor:libc\"\n```\n\n----------------------------------------\n\nTITLE: Type Safety Table for Compile Time Execution in Odin\nDESCRIPTION: A markdown table showing which data types are safe for transferal from compile time execution to compiled code in Odin. It includes various data types and their safety status, with additional notes for certain types.\nSOURCE: https://github.com/odin-lang/odin/blob/master/misc/compile_time_execution_problems.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type      | Safe?                                                                  |\n|-----------|------------------------------------------------------------------------|\n| boolean   | Y                                                                      |\n| integer   | Y                                                                      |\n| float     | Y                                                                      |\n| pointer   | N - Maybe safe if never changed                                        |\n| string    | Y - Even though (ptr+int) interally, still safe to convert to constant |\n| any       | N - (ptr+ptr)                                                          |\n| array     | D                                                                      |\n| vector    | Y - Elements can only be boolean, integer, or float (thus safe)        |\n| slice     | N - Internally (ptr+int+int)                                           |\n| maybe     | D                                                                      |\n| struct    | D                                                                      |\n| enum      | Y                                                                      |\n| union     | N - (blob+int)                                                         |\n| raw_union | N - ^^^                                                                |\n| tuple     | D                                                                      |\n| proc      | ? - Need to solve the next problem                                     |\n```\n\n----------------------------------------\n\nTITLE: Example of Cyclic Type Definition in Odin\nDESCRIPTION: Demonstrates an example of illegal cyclic type definition that needs to be detected and prevented by the type checker.\nSOURCE: https://github.com/odin-lang/odin/blob/master/misc/todo.md#2025-04-22_snippet_0\n\nLANGUAGE: odin\nCODE:\n```\ntype A: struct { b: B; };\ntype B: struct { a: A; };\n```\n\n----------------------------------------\n\nTITLE: OpenGL Debug Output Example in Odin\nDESCRIPTION: Shows sample debug output when compiling with -debug flag, demonstrating how each OpenGL call is appended with a debug helper calling glGetError().\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/OpenGL/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nglGetError() returned NO_ERROR\n   call: glTexImage2D(GL_TEXTURE_2D=3553, 0, 34836, 1150, 1024, 0, GL_RGBA=6408, GL_FLOAT=5126, 0x0)\n   in:   C:/<snip>/texture.odin(156:23)\nglGetError() returned NO_ERROR\n   call: glEnable(GL_DEBUG_OUTPUT=37600)\n   in:   C:/<snip>/main.odin(185:6)\nglGetError() returned NO_ERROR\n   call: glGetError() -> 0 \n   in:   C:/<snip>/main.odin(193:5)\nglGetError() returned INVALID_ENUM\n   call: glEnable(INVALID_ENUM=123123123)\n   in:   C:/<snip>/main.odin(194:5)\nglGetError() returned INVALID_VALUE\n   call: glPointSize(-1.000)\n   in:   C:/<snip>/main.odin(195:5)\nglGetError() returned NO_ERROR\n   call: glDisable(GL_SCISSOR_TEST=3089)\n   in:   C:/<snip>/main.odin(270:6)\nglGetError() returned NO_ERROR\n   call: glViewport(0, 0, 1150, 1024)\n   in:   C:/<snip>/main.odin(271:6)\nglGetError() returned NO_ERROR\n   call: glClearColor(0.800, 0.800, 0.800, 1.000)\n   in:   C:/<snip>/main.odin(272:6)\n```\n\n----------------------------------------\n\nTITLE: Creating Metal Device - Objective-C with ARC\nDESCRIPTION: Demonstrates device creation in Objective-C with automatic reference counting\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/darwin/Metal/README.md#2025-04-22_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\nid< MTLDevice > device = MTLCreateSystemDefaultDevice();\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Metal Device - Objective-C Manual Memory\nDESCRIPTION: Shows device creation in Objective-C with manual memory management\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/darwin/Metal/README.md#2025-04-22_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\nid< MTLDevice > device = MTLCreateSystemDefaultDevice();\n\n// ...\n\n[device release];\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampler State - Objective-C with ARC\nDESCRIPTION: Shows how to configure a Metal sampler state in Objective-C with automatic reference counting\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/darwin/Metal/README.md#2025-04-22_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\nMTLSamplerDescriptor* samplerDescriptor = [[MTLSamplerDescriptor alloc] init];\n\n[samplerDescriptor setSAddressMode: MTLSamplerAddressModeRepeat];\n[samplerDescriptor setTAddressMode: MTLSamplerAddressModeRepeat];\n[samplerDescriptor setRAddressMode: MTLSamplerAddressModeRepeat];\n[samplerDescriptor setMagFilter: MTLSamplerMinMagFilterLinear];\n[samplerDescriptor setMinFilter: MTLSamplerMinMagFilterLinear];\n[samplerDescriptor setMipFilter: MTLSamplerMipFilterLinear];\n[samplerDescriptor setSupportArgumentBuffers: YES];\n\nid< MTLSamplerState > samplerState = [device newSamplerStateWithDescriptor:samplerDescriptor];\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampler State - Objective-C Manual Memory\nDESCRIPTION: Demonstrates sampler state configuration in Objective-C with manual memory management\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/darwin/Metal/README.md#2025-04-22_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\nMTLSamplerDescriptor* samplerDescriptor = [[MTLSamplerDescriptor alloc] init];\n\n[samplerDescriptor setSAddressMode: MTLSamplerAddressModeRepeat];\n[samplerDescriptor setTAddressMode: MTLSamplerAddressModeRepeat];\n[samplerDescriptor setRAddressMode: MTLSamplerAddressModeRepeat];\n[samplerDescriptor setMagFilter: MTLSamplerMinMagFilterLinear];\n[samplerDescriptor setMinFilter: MTLSamplerMinMagFilterLinear];\n[samplerDescriptor setMipFilter: MTLSamplerMipFilterLinear];\n[samplerDescriptor setSupportArgumentBuffers: YES];\n\nid< MTLSamplerState > samplerState = [device newSamplerStateWithDescriptor:samplerDescriptor];\n\n[samplerDescriptor release];\n\n// ...\n\n[samplerState release];\n```\n\n----------------------------------------\n\nTITLE: Clang WASM Compilation Command Example\nDESCRIPTION: Command line example showing how to compile C code to WebAssembly object files using clang with the custom libc implementation as sysroot.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/libc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclang -c --target=wasm32 --sysroot=$(odin root)/vendor/libc\n```\n\n----------------------------------------\n\nTITLE: Design Document Template in Markdown\nDESCRIPTION: Standard template for creating design documents for Odin project proposals. Includes sections for author information, abstract, background, proposal details, rationale, compatibility considerations, and implementation plans.\nSOURCE: https://github.com/odin-lang/odin/blob/master/PROPOSAL-PROCESS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Proposal: [Title]\n\nAuthor(s): [Author Name, Co-Author Name]\nLast updated: [Date ISO-8601]\nDiscussion at https://github.com/odin-lang/Odin/issues/######\n\n## Abstract\n\n## Background\n\n## Proposal\n\n## Rationale\n\n## Compatibility\n\n## Implementation\n\n```\n\n----------------------------------------\n\nTITLE: LLVM X86 Library Dependencies\nDESCRIPTION: Comprehensive list of LLVM library dependencies required for x86 architecture support. Includes components for disassembly, assembly parsing, code generation, selection DAG, and various core LLVM functionalities.\nSOURCE: https://github.com/odin-lang/odin/blob/master/misc/libs.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLLVMX86Disassembler.lib ^\nLLVMX86AsmParser.lib ^\nLLVMX86CodeGen.lib ^\nLLVMSelectionDAG.lib ^\nLLVMAsmPrinter.lib ^\nLLVMCodeGen.lib ^\nLLVMTarget.lib ^\nLLVMScalarOpts.lib ^\nLLVMInstCombine.lib ^\nLLVMInstrumentation.lib ^\nLLVMProfileData.lib ^\nLLVMTransformUtils.lib ^\nLLVMBitWriter.lib ^\nLLVMAnalysis.lib ^\nLLVMX86Desc.lib ^\nLLVMObject.lib ^\nLLVMMCParser.lib ^\nLLVMBitReader.lib ^\nLLVMMCDisassembler.lib ^\nLLVMX86Info.lib ^\nLLVMX86AsmPrinter.lib ^\nLLVMMC.lib ^\nLLVMX86Utils.lib ^\nLLVMCore.lib ^\nLLVMSupport.lib\n```\n\n----------------------------------------\n\nTITLE: Building and Testing LibTomMath with Make Commands\nDESCRIPTION: Common make commands for building and testing the LibTomMath library. Includes commands for standard build, testing, and test opponent creation.\nSOURCE: https://github.com/odin-lang/odin/blob/master/src/libtommath/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake\nmake clean\nmake install\nmake test\nmake mtest_opponent\nmake mtest\n./mtest/mtest | ./mtest_opponent\n```\n\n----------------------------------------\n\nTITLE: Copyright License Declaration\nDESCRIPTION: BSD-2 license copyright notice for the C standard library projection implementation\nSOURCE: https://github.com/odin-lang/odin/blob/master/core/c/libc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2021 Dale Weiler <weilercdale@gmail.com>.\n```\n\n----------------------------------------\n\nTITLE: SDL_ttf License Header Comment\nDESCRIPTION: Standard license header for SDL_ttf library defining copyright, warranty disclaimer, and usage terms under a zlib-style license.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/sdl2/ttf/COPYING.txt#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/*\n  SDL_ttf:  A companion library to SDL for working with TrueType (tm) fonts\n  Copyright (C) 1997-2021 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/\n```\n\n----------------------------------------\n\nTITLE: SDL_net License and Copyright Notice\nDESCRIPTION: This code block contains the license and copyright information for SDL_net, specifying its usage terms and restrictions.\nSOURCE: https://github.com/odin-lang/odin/blob/master/vendor/sdl2/net/COPYING.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n/*\n  SDL_net:  An example cross-platform network library for use with SDL\n  Copyright (C) 1997-2021 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/\n```"
  }
]