[
  {
    "owner": "pmndrs",
    "repo": "use-p2",
    "content": "TITLE: Complete Ball and Box Physics Example\nDESCRIPTION: A simple example demonstrating a ball falling onto a box using @react-three/p2 physics and React Three Fiber.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas } from '@react-three/fiber'\nimport { Physics, useBox, useCircle } from '@react-three/p2'\n\nfunction Box() {\n  const [ref] = useBox(() => ({ mass: 0, position: [0, -2] }))\n  return (\n    <mesh ref={ref}>\n      <boxGeometry />\n    </mesh>\n  )\n}\n\nfunction Ball() {\n  const [ref] = useCircle(() => ({ mass: 1, position: [0, 2] }))\n  return (\n    <mesh ref={ref}>\n      <sphereGeometry />\n    </mesh>\n  )\n}\n\nReactDOM.render(\n  <Canvas>\n    <Physics normalIndex={2}>\n      <Box />\n      <Ball />\n    </Physics>\n  </Canvas>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Physics World in React Three Fiber\nDESCRIPTION: Creating a physics world with the Physics component. The normalIndex parameter defines the rotation of the physics world, with 1 for top-down and 2 for side-scroller applications.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Physics normalIndex={2}>{/* Physics related objects in here please */}</Physics>\n```\n\n----------------------------------------\n\nTITLE: Using Physics Shapes with Hooks\nDESCRIPTION: Example of using the useBox hook to create a physics body with mass properties.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst [ref, api] = useBox(() => ({ mass: 1 }))\n```\n\n----------------------------------------\n\nTITLE: Connecting Physics Ref to Mesh\nDESCRIPTION: Connecting the physics reference to a Three.js mesh to enable physics simulation.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<mesh ref={ref} geometry={...} material={...} />\n```\n\n----------------------------------------\n\nTITLE: Manipulating Physics Bodies with the API\nDESCRIPTION: Using the physics API to modify a body's position based on time within the animation frame loop.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nuseFrame(({ clock }) => api.position.set(Math.sin(clock.getElapsedTime()) * 5, 0))\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Physics Properties\nDESCRIPTION: Using the subscribe method to get updates on physics body properties like velocity during each frame.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst velocity = useRef([0, 0])\nuseEffect(() => {\n  const unsubscribe = api.velocity.subscribe((v) => (velocity.current = v))\n  return unsubscribe\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Debugging Physics with Debug Component\nDESCRIPTION: Example of using the Debug component to visualize physics bodies and their interactions for debugging purposes.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Physics, Debug } from '@react-three/cannon'\n\nReactDOM.render(\n  <Canvas>\n    <Physics normalIndex={2}>\n      <Debug color=\"black\" scale={1.1} linewidth={0.01} normalIndex={2}>\n        {/* children */}\n      </Debug>\n    </Physics>\n  </Canvas>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Types for use-p2 Physics Library in TypeScript\nDESCRIPTION: Comprehensive type definitions for the use-p2 physics library, including initialization props, provider configuration, body types, event handling, and constraint options. These types define the structure for configuring a 2D physics simulation with various body shapes and constraints.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype InitProps = {\n  allowSleep?: boolean\n  axisIndex?: number\n  broadphase?: Broadphase\n  defaultContactMaterial?: {\n    friction?: number\n    restitution?: number\n    contactEquationStiffness?: number\n    contactEquationRelaxation?: number\n    frictionEquationStiffness?: number\n    frictionEquationRelaxation?: number\n  }\n  gravity?: Duplet\n  iterations?: number\n  normalIndex?: number\n  quatNormalizeFast?: boolean\n  quatNormalizeSkip?: number\n  solver?: Solver\n  tolerance?: number\n}\n\nexport type ProviderProps = InitProps & {\n  isPaused?: boolean\n  maxSubSteps?: number\n  shouldInvalidate?: boolean\n  size?: number\n  stepSize?: number\n}\n\ntype AtomicProps = {\n  allowSleep: boolean\n  angularDamping: number\n  collisionFilterGroup: number\n  collisionFilterMask: number\n  collisionResponse: number\n  fixedRotation: boolean\n  isTrigger: boolean\n  linearDamping: number\n  mass: number\n  material: MaterialOptions\n  sleepSpeedLimit: number\n  sleepTimeLimit: number\n  userData: {}\n}\n\ntype Broadphase = 'Naive' | 'SAP'\ntype Triplet = [x: number, y: number, z: number]\ntype Quad = [x: number, y: number, z: number, w: number]\n\ntype VectorProps = Record<VectorName, Triplet>\n\ntype BodyProps<T extends any[] = unknown[]> = Partial<AtomicProps> &\n  Partial<VectorProps> & {\n    args?: T\n    onCollide?: (e: CollideEvent) => void\n    onCollideBegin?: (e: CollideBeginEvent) => void\n    onCollideEnd?: (e: CollideEndEvent) => void\n    quaternion?: Quad\n    rotation?: Triplet\n    type?: 'Dynamic' | 'Static' | 'Kinematic'\n  }\n\ntype Event = RayhitEvent | CollideEvent | CollideBeginEvent | CollideEndEvent\ntype CollideEvent = {\n  op: string\n  type: 'collide'\n  body: THREE.Object3D\n  target: THREE.Object3D\n  contact: {\n    // the world position of the point of contact\n    contactPoint: number[]\n    // the normal of the collision on the surface of\n    // the colliding body\n    contactNormal: number[]\n    // velocity of impact along the contact normal\n    impactVelocity: number\n    // a unique ID for each contact event\n    id: string\n    // these are lower-level properties from cannon:\n    // bi: one of the bodies involved in contact\n    bi: THREE.Object3D\n    // bj: the other body involved in contact\n    bj: THREE.Object3D\n    // ni: normal of contact relative to bi\n    ni: number[]\n    // ri: the point of contact relative to bi\n    ri: number[]\n    // rj: the point of contact relative to bj\n    rj: number[]\n  }\n  collisionFilters: {\n    bodyFilterGroup: number\n    bodyFilterMask: number\n    targetFilterGroup: number\n    targetFilterMask: number\n  }\n}\ntype CollideBeginEvent = {\n  op: 'event'\n  type: 'collideBegin'\n  target: Object3D\n  body: Object3D\n}\ntype CollideEndEvent = {\n  op: 'event'\n  type: 'collideEnd'\n  target: Object3D\n  body: Object3D\n}\ntype RayhitEvent = {\n  op: string\n  type: 'rayhit'\n  body: THREE.Object3D\n  target: THREE.Object3D\n}\n\ntype CylinderArgs = [radiusTop?: number, radiusBottom?: number, height?: number, numSegments?: number]\ntype SphereArgs = [radius: number]\ntype TrimeshArgs = [vertices: ArrayLike<number>, indices: ArrayLike<number>]\ntype HeightfieldArgs = [\n  data: number[][],\n  options: { elementSize?: number; maxValue?: number; minValue?: number },\n]\ntype ConvexPolyhedronArgs<V extends VectorTypes = VectorTypes> = [\n  vertices?: V[],\n  faces?: number[][],\n  normals?: V[],\n  axes?: V[],\n  boundingSphereRadius?: number,\n]\n\ninterface PlaneProps extends BodyProps {}\ninterface BoxProps extends BodyProps<Triplet> {} // extents: [x, y, z]\ninterface CylinderProps extends BodyProps<CylinderArgs> {}\ninterface ParticleProps extends BodyProps {}\ninterface SphereProps extends BodyProps<SphereArgs> {}\ninterface TrimeshProps extends BodyPropsArgsRequired<TrimeshArgs> {}\ninterface HeightfieldProps extends BodyPropsArgsRequired<HeightfieldArgs> {}\ninterface ConvexPolyhedronProps extends BodyProps<ConvexPolyhedronArgs> {}\ninterface CompoundBodyProps extends BodyProps {\n  shapes: BodyProps & { type: ShapeType }[]\n}\n\ninterface ConstraintOptns {\n  maxForce?: number\n  collideConnected?: boolean\n  wakeUpBodies?: boolean\n}\n\ninterface PointToPointConstraintOpts extends ConstraintOptns {\n  pivotA: Triplet\n  pivotB: Triplet\n}\n\ninterface ConeTwistConstraintOpts extends ConstraintOptns {\n  pivotA?: Triplet\n  axisA?: Triplet\n  pivotB?: Triplet\n  axisB?: Triplet\n  angle?: number\n  twistAngle?: number\n}\ninterface DistanceConstraintOpts extends ConstraintOptns {\n  distance?: number\n}\n\ninterface HingeConstraintOpts extends ConstraintOptns {\n  pivotA?: Triplet\n  axisA?: Triplet\n  pivotB?: Triplet\n  axisB?: Triplet\n}\n\ninterface LockConstraintOpts extends ConstraintOptns {}\n\ninterface SpringOptns {\n  restLength?: number\n  stiffness?: number\n  damping?: number\n  worldAnchorA?: Triplet\n  worldAnchorB?: Triplet\n  localAnchorA?: Triplet\n  localAnchorB?: Triplet\n}\n\ninterface WheelInfoOptions {\n  radius?: number\n  directionLocal?: Triplet\n  suspensionStiffness?: number\n  suspensionRestLength?: number\n  maxSuspensionForce?: number\n  maxSuspensionTravel?: number\n  dampingRelaxation?: number\n  dampingCompression?: number\n  frictionSlip?: number\n  rollInfluence?: number\n  axleLocal?: Triplet\n  chassisConnectionPointLocal?: Triplet\n  isFrontWheel?: boolean\n  useCustomSlidingRotationalSpeed?: boolean\n  customSlidingRotationalSpeed?: number\n}\n\ninterface RaycastVehicleProps {\n  chassisBody: React.Ref<THREE.Object3D>\n  wheels: React.Ref<THREE.Object3D>[]\n  wheelInfos: WheelInfoOptions[]\n  indexForwardAxis?: number\n  indexRightAxis?: number\n  indexUpAxis?: number\n}\n```\n\n----------------------------------------\n\nTITLE: React-Three-P2 API TypeScript Definitions\nDESCRIPTION: TypeScript definitions for the main exported components, hooks, and functions provided by the @react-three/p2 library.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Physics({\n  allowSleep = false,\n  axisIndex = 0,\n  normalIndex = 0,\n  broadphase = 'Naive',\n  children,\n  defaultContactMaterial = { contactEquationStiffness: 1e6 },\n  gravity = [0, -9.81, 0],\n  isPaused = false,\n  iterations = 5,\n  maxSubSteps = 10,\n  quatNormalizeFast = false,\n  quatNormalizeSkip = 0,\n  shouldInvalidate = true,\n  // Maximum amount of physics objects inside your scene\n  // Lower this value to save memory, increase if 1000 isn't enough\n  size = 1000,\n  solver = 'GS',\n  stepSize = 1 / 60,\n  tolerance = 0.001,\n}: React.PropsWithChildren<ProviderProps>): JSX.Element\n\nfunction Debug({ color = 'black', scale = 1 }: DebugProps): JSX.Element\n\nfunction usePlane(\n  fn: GetByIndex<PlaneProps>,\n  fwdRef?: React.Ref<THREE.Object3D>,\n  deps?: React.DependencyList,\n): Api\n\nfunction useBox(\n  fn: GetByIndex<BoxProps>,\n  fwdRef?: React.Ref<THREE.Object3D>,\n  deps?: React.DependencyList,\n): Api\n\nfunction useCircle(\n  fn: GetByIndex<CylinderProps>,\n  fwdRef?: React.Ref<THREE.Object3D>,\n  deps?: React.DependencyList,\n): Api\n\nfunction useTopDownVehicle(\n  fn: () => RaycastVehicleProps,\n  fwdRef?: React.Ref<THREE.Object3D>,\n  deps: React.DependencyList[] = [],\n): [React.RefObject<THREE.Object3D>, RaycastVehiclePublicApi]\n\nfunction useRaycastClosest(\n  options: RayOptions,\n  callback: (e: RayhitEvent) => void,\n  deps: React.DependencyList = [],\n): void\n\nfunction useRaycastAny(\n  options: RayOptions,\n  callback: (e: RayhitEvent) => void,\n  deps: React.DependencyList = [],\n): void\n\nfunction useRaycastAll(\n  options: RayOptions,\n  callback: (e: RayhitEvent) => void,\n  deps: React.DependencyList = [],\n): void\n```\n\n----------------------------------------\n\nTITLE: Physics API TypeScript Interface Definitions\nDESCRIPTION: TypeScript definitions for the physics API types returned by the various hooks, including methods for manipulating and subscribing to physics bodies.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype WorkerApi = {\n  [K in AtomicName]: AtomicApi<K>\n} & {\n  [K in VectorName]: VectorApi\n} & {\n  applyForce: (force: Triplet, worldPoint: Triplet) => void\n  applyImpulse: (impulse: Triplet, worldPoint: Triplet) => void\n  applyLocalForce: (force: Triplet, localPoint: Triplet) => void\n  applyLocalImpulse: (impulse: Triplet, localPoint: Triplet) => void\n  applyTorque: (torque: Triplet) => void\n  quaternion: QuaternionApi\n  rotation: VectorApi\n  sleep: () => void\n  wakeUp: () => void\n}\n\ninterface PublicApi extends WorkerApi {\n  at: (index: number) => WorkerApi\n}\n\ntype Api = [React.RefObject<THREE.Object3D>, PublicApi]\n\ntype AtomicName =\n  | 'allowSleep'\n  | 'angularDamping'\n  | 'collisionGroup'\n  | 'collisionMask'\n  | 'collisionResponse'\n  | 'fixedRotation'\n  | 'isTrigger'\n  | 'linearDamping'\n  | 'mass'\n  | 'material'\n  | 'sleepSpeedLimit'\n  | 'sleepTimeLimit'\n  | 'userData'\n\ntype AtomicApi<K extends AtomicName> = {\n  set: (value: AtomicProps[K]) => void\n  subscribe: (callback: (value: AtomicProps[K]) => void) => () => void\n}\n\ntype QuaternionApi = {\n  set: (x: number, y: number, z: number, w: number) => void\n  copy: ({ w, x, y, z }: Quaternion) => void\n  subscribe: (callback: (value: Quad) => void) => () => void\n}\n\ntype VectorName = 'angularFactor' | 'angularVelocity' | 'linearFactor' | 'position' | 'velocity'\n\ntype VectorApi = {\n  set: (x: number, y: number, z: number) => void\n  copy: ({ x, y, z }: Vector3 | Euler) => void\n  subscribe: (callback: (value: Triplet) => void) => () => void\n}\n\ntype ConstraintApi = [\n  React.RefObject<THREE.Object3D>,\n  React.RefObject<THREE.Object3D>,\n  {\n    enable: () => void\n    disable: () => void\n  },\n]\n\ntype HingeConstraintApi = [\n  React.RefObject<THREE.Object3D>,\n  React.RefObject<THREE.Object3D>,\n  {\n    enable: () => void\n    disable: () => void\n    enableMotor: () => void\n    disableMotor: () => void\n    setMotorSpeed: (value: number) => void\n    setMotorMaxForce: (value: number) => void\n  },\n]\n\ntype SpringApi = [\n  React.RefObject<THREE.Object3D>,\n  React.RefObject<THREE.Object3D>,\n  {\n    setStiffness: (value: number) => void\n    setRestLength: (value: number) => void\n    setDamping: (value: number) => void\n  },\n]\n\ninterface RaycastVehiclePublicApi {\n  applyEngineForce: (value: number, wheelIndex: number) => void\n  setBrake: (brake: number, wheelIndex: number) => void\n  setSteeringValue: (value: number, wheelIndex: number) => void\n  sliding: {\n    subscribe: (callback: (sliding: boolean) => void) => void\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components from React-Three-P2\nDESCRIPTION: Example of importing necessary components from the @react-three/p2 library.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Physics, useBox, ... } from '@react-three/p2'\n```\n\n----------------------------------------\n\nTITLE: Installing React-Three-P2 Library\nDESCRIPTION: Command to install the @react-three/p2 package using yarn.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-three/p2\n```\n\n----------------------------------------\n\nTITLE: Building the Parent Project for React Three P2 Examples\nDESCRIPTION: Command sequence for navigating to the parent directory, installing dependencies, building the project, and then returning to the examples directory to install its dependencies.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/examples/readme.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nyarn\nnpm run build\ncd examples\nyarn\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for React Three P2 Examples\nDESCRIPTION: Command to start the development server to run the examples locally.\nSOURCE: https://github.com/pmndrs/use-p2/blob/main/examples/readme.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```"
  }
]