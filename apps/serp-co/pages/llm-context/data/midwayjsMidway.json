[
  {
    "owner": "midwayjs",
    "repo": "midway",
    "content": "TITLE: Injecting and Using a Queue via Decorator in MidwayJS (TypeScript)\nDESCRIPTION: This snippet shows how to inject a Bull queue into a class using the `@InjectQueue` decorator in MidwayJS.  It requires `@midwayjs/bull` and `@midwayjs/core`. The `BullQueue` type is used to type the injected queue, allowing for type-safe operations like pausing the queue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectQueue, BullQueue } from '@midwayjs/bull';\nimport { Provide } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n  @InjectQueue('test')\n  testQueue: BullQueue;\n\n  async invoke() {\n    await this.testQueue.pause();\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Dependencies\nDESCRIPTION: This bash snippet demonstrates how to install the necessary dependencies for gRPC integration in a Midway.js project.  It installs `@midwayjs/grpc` for gRPC functionality and `@midwayjs/grpc-helper` as a development dependency for generating TypeScript interfaces from proto files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/grpc@3 --save\n$ npm i @midwayjs/grpc-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Broadcasting and Emitting Messages (TypeScript)\nDESCRIPTION: Demonstrates various ways to send Socket.IO messages, including emitting to the current client, broadcasting to all clients except the sender, sending to specific rooms, and sending to a specific namespace. Requires imports from `@midwayjs/socketio` and `@midwayjs/core` to access Context, Application, WSController, OnWSMessage, WSEmit, App, and Inject.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context, Application } from '@midwayjs/socketio';\nimport { WSController, OnWSMessage, WSEmit, App, Inject } from '@midwayjs/core';\n\n@WSController('/')\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @App('socketIO')\n  app: Application;\n\n  @OnWSMessage('myEvent')\n  @WSEmit('myEventResult')\n  async gotMessage() {\n    // TODO\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.emit(\"hello\", \"can you hear me?\", 1, 2, \"abc\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.broadcast.emit(\"broadcast\", \"hello friends! \");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.to(\"game\").emit(\"nice game\", \"let's play a game\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.to(\"game1\").to(\"game2\").emit(\"nice game\", \"let's play a game (too)\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.in(\"game\").emit(\"big-announcement\", \"the game will start soon\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Send from app\nthis.app.of(\"myNamespace\").emit(\"bigger-announcement\", \"the tournament will start soon\");\n// Send from ctx\nthis.ctx.nsp.emit(\"bigger-announcement\", \"the tournament will start soon\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Send from app\nthis.app.of(\"myNamespace\").to(\"room\").emit(\"event\", \"message\");\n// Send from ctx\nthis.ctx.nsp.emit(\"bigger-announcement\", \"the tournament will start soon\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.local.emit(\"hi\", \"my lovely babies\");\n```\n\n----------------------------------------\n\nTITLE: Creating a User Service with Interface in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a user service in MidwayJS using TypeScript, including an interface import to define the structure of the returned user object. The `@Provide` decorator marks the class as a service that can be injected. The `getUser` method now specifies the return type as a Promise of type User.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/decorator';\nimport { User } from '../interface';\n\n@Provide()\nexport class UserService {\n\n  async getUser(id: number): Promise<User> {\n    return {\n      id,\n      name: 'Harry',\n      age: 18',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redis Service for Data Operations\nDESCRIPTION: This TypeScript code demonstrates how to inject and use the RedisService in a MidwayJS service. It shows examples of setting and getting data, including setting an expiration time.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Controller, Inject, Get } from '@midwayjs/core';\nimport { RedisService } from '@midwayjs/redis';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  redisService: RedisService;\n\n  async invoke() {\n\n    // Simple setup\n    await this.redisService.set('foo', 'bar');\n\n    // Set the expiration time in seconds.\n    await this.redisService.set('foo', 'bar', 'EX', 10);\n\n    // get data\n    const result = await this.redisService.get('foo');\n\n   // result => bar\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Service Provider\nDESCRIPTION: This TypeScript snippet demonstrates how to implement a gRPC service provider in a Midway.js application. It uses the `@Provider` decorator to expose the service, specifying the gRPC type and package name. The `@GrpcMethod` decorator marks the `sayHello` method as a gRPC endpoint, which receives a `HelloRequest` and returns a `HelloReply`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MSProviderType,\n  Provider,\n  GrpcMethod,\n} from '@midwayjs/core';\nimport { helloworld } from '../domain/helloworld';\n\n/**\n * 实现 helloworld.Greeter 接口的服务\n */\n@Provider(MSProviderType.GRPC, { package: 'helloworld' })\nexport class Greeter implements helloworld.Greeter {\n\n  @GrpcMethod()\n  async sayHello(request: helloworld.HelloRequest) {\n    return { message: 'Hello ' + request.name };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loading Relations using Find Options in TypeORM\nDESCRIPTION: This snippet demonstrates how to eagerly load related entities using the `find` method with the `relations` option. This allows fetching both the `Photo` and its associated `PhotoMetadata` in a single query. It relies on a properly defined relationship between the Photo and PhotoMetadata entities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhoto() {\n\t\t/*...*/\n    let photos = await this.photoModel.find({ relations: [ 'metadata' ] }); // typeorm@0.2.x\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Serialization and Deserialization in Local Strategy\nDESCRIPTION: This code snippet shows how to implement `serializeUser` and `deserializeUser` methods in a custom passport strategy, such as a local strategy.  The `serializeUser` method determines what data to store in the session (e.g., only the username). The `deserializeUser` method retrieves the complete user object based on the data stored in the session (e.g., by querying a database). This example uses `typeorm` and `bcrypt` for user management and authentication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/strategy/local.strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Repository } from 'typeorm';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { UserEntity } from './user';\nimport * as bcrypt from 'bcrypt';\n\n@CustomStrategy()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n\n  // ...\n  serializeUser(user, done) {\n    // You can save only the user name\n    done(null, user.username);\n  }\n\n  deserializeUser(id, done) {\n\n    // This is not an asynchronous method. You can check the user data from other places according to the user name.\n    const user = getUserFromDataBase(id);\n\n    done(null, user);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing a Service with Dependency Injection\nDESCRIPTION: This snippet demonstrates how to test a service in Midway.js by retrieving it from the dependency injection container. It shows three ways to get the service instance: by class, by injection ID string, and by class (omitting the generic type).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/web';\nimport * as assert from 'assert';\nimport { UserService } from '../../src/service/user';\n\ndescribe('test/controller/home.test.ts', () => {\n\n  it('should GET /', async () => {\n    // create app\n    const app = await createApp<Framework>();\n\n    // 根据依赖注入 class 获取实例（推荐）\n    const userService = await app.getApplicationContext().getAsync<UserService>(UserService);\n    // 根据依赖注入 Id 获取实例\n    const userService = await app.getApplicationContext().getAsync<UserService>('userService');\n    // 传入 class 忽略泛型也能正确推导\n    const userService = await app.getApplicationContext().getAsync(UserService);\n\n    // close app\n    await close(app);\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple DataSource Configuration\nDESCRIPTION: This code shows a configuration example in `config.default.ts` for defining multiple MySQL data sources.  Each data source has its own connection parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const mysql = {\n  dataSource: {\n    dataSource1: {\n      host: 'localhost',\n      user: 'root',\n      database: 'test'\n    },\n    dataSource2: {\n      host: 'localhost',\n      user: 'root',\n      database: 'test'\n    },\n    dataSource3: {\\n      host: 'localhost',\n      user: 'root',\n      database: 'test'\n    },\n  }\n  // 其他配置\n}\n\n```\n\n----------------------------------------\n\nTITLE: JWT Middleware Implementation\nDESCRIPTION: This code defines a custom JWT middleware for authenticating requests. It checks for an authorization header, extracts the token, and verifies it using the JwtService. If the token is invalid, it throws an UnauthorizedError. It skips authentication for the /api/admin/login route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/jwt.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/jwt.middleware\n\nimport { Inject, Middleware, httpError } from '@midwayjs/core';\nimport { Context, NextFunction } from '@midwayjs/koa';\nimport { JwtService } from '@midwayjs/jwt';\n\n@Middleware()\nexport class JwtMiddleware {\n  @Inject()\n  jwtService: JwtService;\n\n  public static getName(): string {\n    return 'jwt';\n  }\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // Judge whether there is verification information\n      if (! ctx.headers['authorization']) {\n        throw new httpError.UnauthorizedError();\n      }\n      // Get verification information from header\n      const parts = ctx.get('authorization').trim().split(' ');\n\n      if (parts.length !== 2) {\n        throw new httpError.UnauthorizedError();\n      }\n\n      const [scheme, token] = parts;\n\n      if (/^Bearer$/i.test(scheme)) {\n        try {\n          // jwt.verify that token is valid.\n          await this.jwtService.verify(token, {\n            complete: true\n          });\n        } catch (error) {\n          // The token expires and generates a new token.\n          const newToken = getToken(user);\n          // Put the new token into the Authorization and return it to the front end.\n          ctx.set('Authorization', newToken);\n        }\n        await next();\n      }\n    };\n  }\n\n  // Configure route addresses that ignore authentication\n  public match(ctx: Context): boolean {\n    const ignore = ctx.path.indexOf('/api/admin/login') !== -1;\n    return !ignore;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Queues to Bull Board Manager\nDESCRIPTION: This TypeScript code demonstrates how to add dynamically created queues to the Bull Board manager, allowing them to be monitored and managed through the Bull Board UI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as bullmq from '@midwayjs/bullmq';\nimport * as bullBoard from '@midwayjs/bull-board';\n\n@Configuration({\n  imports: [\n    // ...\n    bullmq,\n    bullBoard\n  ]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  bullmqFramework: bullmq.Framework;\n  \n  @Inject()\n  bullBoardManager: bullBoard.BullBoardManager;\n\n  async onReady() {\n    const testQueue = this.bullmqFramework.createQueue('test', {\n      // ...\n    });\n\n    this.bullBoardManager.addQueue(testQueue);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Name Based Injection (TypeScript)\nDESCRIPTION: This code shows how to use a fixed name string as the dependency injection identifier.  The `@Provide` and `@Inject` decorators both specify the same name, allowing injection based on the name instead of the class type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\n\n@Provide ('BBB') // <------ Expose a Class\nexport class B {\n  //...\n}\n\n@Provide()\nexport class A {\n\n  @Inject('bbbb')\n  B: B; // <------ The attribute here uses Class\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Acquiring Instances from Dependency Injection Container (TypeScript)\nDESCRIPTION: This snippet demonstrates how to dynamically retrieve instances from both the global and request-scoped dependency injection containers using the `getAsync` method.  It showcases retrieving instances from both the application context and request context, with the option to specify a generic type for type safety.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// The global container is obtained as a singleton.\nconst userSerivce = await applicationContext.getAsync(UserService);\n\n// Request scope container, get the request scope instance.\nconst userSerivce = await ctx.requestContext.getAsync(UserService);\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disabling Global Validation in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to temporarily disable global validation for a specific parameter by using `Partial<UserDTO>`. This allows bypassing validation for that particular parameter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n\n  @Post('/')\n  async updateUser(@Body() user: Partial<UserDTO> ) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: @Provide and @Inject Usage Example (TypeScript)\nDESCRIPTION: This snippet demonstrates the combined use of the @Provide and @Inject decorators for dependency injection. The UserService is marked with @Provide to make it available for injection, and the APIController uses @Inject to inject an instance of UserService into its userService property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// service\n@Provide()\nexport class UserService {\n  //...\n}\n\n// controller\n@Provide() // <------ Because there are Controller that include Provide capabilities, the display here is more complete\n@Controller('/api/user')\nexport class APIController {\n\n  @Inject()\n  userService: UserService; // <------ The type here is Class, that is, an instance of this type will be injected\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Query Parameters with Decorator - Example Usage\nDESCRIPTION: Illustrates how the `@Query` decorator works with and without a key. When a key is provided (e.g., `'id'`), it extracts the value of that specific query parameter. Without a key, it returns the entire query object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// URL = /?id=1\nasync getUser(@Query('id') id: string) // id = 1\nasync getUser(@Query() queryData) // {\"id\": \"1\"}\n```\n\n----------------------------------------\n\nTITLE: Manual Call Example for Basic Validation\nDESCRIPTION: This code demonstrates a manual call to the API using `fetcher.post`. It sends invalid parameters (`null`, `null`) to the `/hello` endpoint and catches the resulting validation error. It then logs the parsed error message and the HTTP status code (422).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfetcher\n  .post('/hello', {\n    args: [null, null],\n  })\n  .catch((error) => {\n    console.log(\n      JSON.parse(error.data.message)\n    );\n    console.log(error.status); // 422\n  });\n```\n\n----------------------------------------\n\nTITLE: DefaultValuePipe Example\nDESCRIPTION: Shows how to use DefaultValuePipe to provide a default value for parameters.  If the parameter is undefined, the default value is used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultValuePipe } from '@midwayjs/validate';\n\n// ...\nasync update(@Body('nickName', [new DefaultValuePipe('anonymous')]) nickName: string) {\n  return nickName;\n}\n\nupdate({ nickName: undefined} ); => 'anonymous'\n```\n\n----------------------------------------\n\nTITLE: Injecting context logger using @Inject()\nDESCRIPTION: This example demonstrates how to inject the context logger (`ctx.logger`) into a controller using the `@Inject()` decorator. This allows direct access to the logger as a class property. Requires `@midwayjs/core` and `@midwayjs/logger` dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Get, Inject, Controller, Provide } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Controller()\nexport class HelloController {\n\n   @Inject()\n   logger: ILogger;\n\n   @Inject()\n   ctx;\n\n   @Get(\"/\")\n   async hello(){\n     // ...\n\n     // this.logger === ctx.logger\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Validate Usage with Zod in Midway Hooks\nDESCRIPTION: This code demonstrates the basic usage of the `Validate` function in Midway Hooks with Zod for validating user input parameters. It defines an API endpoint `/hello` that expects a string and a number as input and validates them using `z.string()` and `z.number()` respectively.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post,\n  Validate,\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\n\nexport default Api(\n  Post('/hello'),\n  Validate(z.string(), z.number()),\n  async (name: string, age: number) => {\n    return `Hello ${name}, you are ${age} years old.`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP service test example\nDESCRIPTION: This snippet provides a complete example of testing an HTTP service in Midway.js. It includes creating and closing the app, making requests, and using both `expect` and `assert` for assertions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/koa';\nimport * as assert from 'assert';\n\ndescribe('test/controller/home.test.ts', () => {\n\n  let app: Application;\n\n  beforeAll(async () => {\n    // 只创建一次 app，可以复用\n    app = await createApp<Framework>();\n  });\n\n  afterAll(async () => {\n    // close app\n    await close(app);\n  });\n\n  it('should GET /', async () => {\n    // make request\n    const result = await createHttpRequest(app)\n      .get('/')\n      .set('x-timeout', '5000');\n\n    // use expect by jest\n    expect(result.status).toBe(200);\n    expect(result.text).toBe('Hello Midwayjs!');\n\n    // or use assert\n    assert.deepStrictEqual(result.status, 200);\n    assert.deepStrictEqual(result.text, 'Hello Midwayjs!');\n  });\n\n  it('should POST /', async () => {\n    // make request\n    const result = await createHttpRequest(app)\n      .post('/')\n      .send({id: '1'});\n\n    // use expect by jest\n    expect(result.status).toBe(200);\n  });\n\n});\n\n```\n\n----------------------------------------\n\nTITLE: Setting Response Header with Decorator in MidwayJS\nDESCRIPTION: This code snippet shows how to set a custom response header using the `@SetHeader` decorator in MidwayJS.  The first example sets a single header. The second sets multiple headers using an object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, SetHeader } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  @SetHeader('x-bbb', '123')\n  async home() {\n    return \"Hello Midwayjs!\";\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, SetHeader } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  @SetHeader({\n  \t'x-bbb ': '123',\n    'x-ccc ': '234'\n  })\n  async home() {\n    return \"Hello Midwayjs!\";\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetch API Call (JavaScript)\nDESCRIPTION: A basic `fetch` call to a URL. This snippet represents a client-side request, used to demonstrate CORS configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cross_domain.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(url);\n```\n\n----------------------------------------\n\nTITLE: Avoid Getting Injected Properties in Constructor\nDESCRIPTION: Illustrates a common error where injected properties are accessed within the constructor, resulting in `undefined` values. The `@Init` decorator should be used instead to access injected properties after the instance has been fully created and dependencies injected.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class UserService {\n\n  @Config('userManager')\n  userManager;\n\n  constructor() {\n    console.log(this.userManager); // undefined\n  }\n\n  @Init()\n  async initMethod() {\n    console.log(this.userManager); // has value\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding Queues to Bull Board - TypeScript\nDESCRIPTION: This snippet shows how to dynamically add queues to the BullBoard UI using the `BullBoardManager` class. It demonstrates how to create a new queue using the `bullmqFramework` and then add it to the BullBoard using `bullBoardManager.addQueue()`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as bullmq from '@midwayjs/bullmq';\nimport * as bullBoard from '@midwayjs/bull-board';\n\n@Configuration({\n  imports: [\n    // ...\n    bullmq,\n    bullBoard\n  ]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  bullmqFramework: bullmq.Framework;\n  \n  @Inject()\n  bullBoardManager: bullBoard.BullBoardManager;\n\n  async onReady() {\n    const testQueue = this.bullmqFramework.createQueue('test', {\n      // ...\n    });\n\n    this.bullBoardManager.addQueue(testQueue);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Routes in Middleware\nDESCRIPTION: This snippet demonstrates how to match specific routes in a middleware by implementing the match method in the middleware class. The match method receives the context object and returns a boolean value indicating whether the middleware should be executed for the current request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // ...\n    };\n  }\n\n  match(ctx: Context): boolean {\n    // 下面的匹配到的路由会执行此中间件\n    if (ctx.path === '/api/index') {\n      return true;\n    }\n  }\n\n  static getName(): string {\n    return 'report';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Object in Request Scope\nDESCRIPTION: Demonstrates how to access the context object in request scope objects, even without explicitly injecting it using `@Inject() ctx`. The `REQUEST_OBJ_CTX_KEY` allows accessing the context object mounted by the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { REQUEST_OBJ_CTX_KEY } from '@midwayjs/core';\n\n@Provide()\nexport class UserManager {\n   //...\n}\n\n@Provide()\nexport class UserService {\n   //...\n\n   @Inject()\n   userManager: UserManager;\n\n   async invoke() {\n     const ctx = this. userManager[REQUEST_OBJ_CTX_KEY];\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjust Specific Logger Levels in MidwayJS\nDESCRIPTION: This snippet shows how to adjust the log level of specific loggers, such as `coreLogger` and `appLogger`, in MidwayJS.  The `clients` section allows you to configure individual loggers with their own settings.  In this example, both `coreLogger` and `appLogger` are set to `warn` level, meaning that only `warn` and `error` messages will be logged by these specific loggers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     clients: {\n       coreLogger: {\n         level: 'warn',\n         // ...\n       },\n       appLogger: {\n         level: 'warn',\n         // ...\n       }\n     }\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Registering Global Guards (TypeScript)\nDESCRIPTION: This code shows how to register a guard globally within the MidwayJS application using the `useGuard` method in the `onReady` lifecycle hook.  This applies the `AuthGuard` to all routes in the application. It depends on `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { AuthGuard } from './guard/auth.guard';\n\n@Configuration({\n  imports: [koa]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    this.app.useGuard(AuthGuard);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Text with i18n in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to customize error text in MidwayJS by replacing the built-in language translation text using the `i18n` configuration. It involves modifying the `localeTable` within the `i18n` configuration to point to a custom JSON file containing the desired translations. This allows for full control over the displayed error messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    localeTable: {\n      // Replace Chinese translation\n      zh_CN: {\n        validate: require('../../locales/custom.json'),\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Streaming with ctx.write (TypeScript)\nDESCRIPTION: This code demonstrates how to implement a server-side streaming gRPC method in Midway.js. The service uses `ctx.write` to send multiple responses to the client and `ctx.end()` to close the stream. It utilizes the `@GrpcMethod` decorator with `GrpcStreamTypeEnum.WRITEABLE` to specify the stream type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, GrpcStreamTypeEnum, Inject, MSProviderType, Provider } from '@midwayjs/core';\nimport { Context, Metadata } from '@midwayjs/grpc';\nimport { math } from '../interface';\n\n/**\n */\n@Provider(MSProviderType.GRPC, { package: 'math' })\nexport class Math implements math.Math {\n\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod({type: GrpcStreamTypeEnum.WRITEABLE })\n  async sumMany(args: math.AddArgs) {\n    this.ctx.write({\n      num: 1 + args.num\n    });\n    this.ctx.write({\n      num: 2 + args.num\n    });\n    this.ctx.write({\n      num: 3 + args.num\n    });\n\n    this.ctx.end();\n  }\n\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Query Parameters with Decorator\nDESCRIPTION: Demonstrates how to extract a query parameter ('id') from the URL using the `@Query` decorator.  The parameter is automatically passed to the `getUser` method. Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n\nimport { Controller, Get, Query } from \"@midwayjs/core\";\n\n@Controller('/api/user')\nexport class UserController {\n  @Get('/')\n  async getUser(@Query('id') id: string): Promise<User> {\n    // xxxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Consumer Configuration\nDESCRIPTION: Illustrates a detailed Kafka consumer configuration example within the `config.default` file.  It shows how to define `connectionOptions` (Kafka connection parameters), `consumerOptions` (consumer group ID), and `subscribeOptions` (topics to subscribe to). These parameters are essential for connecting to and consuming messages from Kafka topics.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          // ...\n        },\n        consumerOptions: {\n          // ...\n        },\n        subscribeOptions: {\n          // ...\n        },\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Bidirectional Stream (DUPLEX) with Midwayjs\nDESCRIPTION: This code demonstrates a gRPC bidirectional stream implementation in Midwayjs.  The `@GrpcMethod` decorator is used with `GrpcStreamTypeEnum.DUPLEX` to define the method. The server can send data back to the client at any time using `ctx.write`.  It also defines an `onEnd` method that executes when the client ends the stream.  It depends on `@midwayjs/core` and `@midwayjs/grpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, GrpcStreamTypeEnum, Inject, MSProviderType, Provider } from '@midwayjs/core';\nimport { Context, Metadata } from '@midwayjs/grpc';\nimport { math } from '../interface';\n\n/**\n */\n@Provider(MSProviderType.GRPC, { package: 'math' })\nexport class Math implements math.Math {\n\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod({type: GrpcStreamTypeEnum.DUPLEX, onEnd: 'duplexEnd' })\n  async addMore(message: math.AddArgs) {\n    this.ctx.write({\n      id: message.id\n      num: message.num +10\n    });\n  }\n\n  async duplexEnd() {\n    console.log('got client end message');\n  }\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing GET API endpoint with query parameters\nDESCRIPTION: This code demonstrates how to test the GET API endpoint that accepts query parameters. It uses `createHttpRequest` from `@midwayjs/mock` to send a GET request to the endpoint, including the `name` parameter in the query string. The response is asserted to ensure it returns the expected status code and body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Hello World', async () => {\n  const trigger = getApiTrigger<HttpTriger>(hello);\n  const response = await createHttpRequest(app)\n    .get(trigger.path)\n    .query({ name: 'Midway' })\n    .expect(200);\n  expect(response.text).toBe('Hello Midway!');\n});\n```\n\n----------------------------------------\n\nTITLE: File Streaming Response with HttpServerResponse (TypeScript)\nDESCRIPTION: This code shows how to use the `file` method of `HttpServerResponse` to send a file as a response. It takes the file path as input and defaults to `application/octet-stream` as the content type. Requires `path` module for `join` function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, sleep, HttpServerResponse } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n  \n  @Get('/')\n  async home() {\n    const filePath = join(__dirname, '../../package.json');\n    return new HttpServerResponse(this.ctx).file(filePath);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-One Relationship in Photo Entity\nDESCRIPTION: This code adds a many-to-one relationship to the `Photo` entity, linking it to the `Author` entity. The `@ManyToOne` decorator defines the relationship, specifying the target entity (`Author`) and the reverse relation property in the `Author` entity (`author => author.photos`). This configuration enables associating a photo with an author.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from 'typeorm';\nimport { Column, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport { PhotoMetadata } from './photoMetadata.entity';\nimport { Author } from './author.entity';\n\n@Entity()\nexport class Photo {\n\n  /* ... other columns */\n\n  @ManyToOne(type => Author, author => author.photos)\n  author: Author;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Checks with onHealthCheck in TypeScript\nDESCRIPTION: Demonstrates how to implement a health check using the `onHealthCheck` lifecycle hook. This example checks the database connection and returns a `HealthResult` object indicating the status. Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, HealthResult } from '@midwayjs/core';\n\n@Configuration({\n  namespace: 'db'\n})\nexport class MainConfiguration implements ILifeCycle {\n  @Inject()\n  db: any;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    await this.db.connect();\n  }\n\n  async onHealthCheck(): Promise<HealthResult> {\n    try {\n      const result = await this.db.isConnect();\n      if (result) {\n        return {\n          status: true,\n        };\n      } else {\n        return {\n          status: false,\n          reason: 'db is disconnect',\n        };\n      }\n    } catch (err) {\n      return {\n        status: false,\n        reason: err.message,\n      };\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Midway Cache Component with useInject\nDESCRIPTION: This code snippet shows how to use the `@midwayjs/cache` component within a Midway Hooks API handler. It utilizes `useInject` from `@midwayjs/hooks` to obtain an instance of the `CacheManager` class at runtime, similar to using `@Inject()`. The example demonstrates setting and retrieving a value from the cache.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/component.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useInject\n} from '@midwayjs/hooks';\nimport { CacheManager } from '@midwayjs/cache';\n\nexport default Api(Get(), async () => {\n  const cache = await useInject (\n    CacheManager\n  );\n\n  await cache.set('name', 'Midway');\n  const result = await cache.get (\n    'name'\n  );\n\n  return 'Hello ${result}!';\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Object Properties with MidwayMockService (TypeScript)\nDESCRIPTION: This snippet illustrates how to mock properties and methods of plain JavaScript objects using the `mockProperty` method. It demonstrates mocking with the default group and custom groups for testing and development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayMockService, Provide, Inject } from '@midwayjs/core';\n\n@Provide()\nclass TestMockService {\n  @Inject()\n  mockService: MidwayMockService;\n\n  mock() {\n    const a = {};\n    // Default group\n    this.mockService.mockProperty(a, 'name', 'hello');\n    // Simulate property, custom group\n    this.mockService.mockProperty(a, 'name', 'hello', 'group1');\n    // a['name'] => 'hello'\n\n    // Simulate method\n    this.mockService.mockProperty(a, 'getUser', async () => {\n      return 'midway';\n    }, 'group2');\n    // await a.getUser() => 'midway'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Strategy Example - Typescript\nDESCRIPTION: This snippet shows an example of implementing a JWT authentication strategy using @midwayjs/passport. It defines a JwtStrategy class that extends PassportStrategy and overrides the validate method to authenticate users based on the JWT payload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/strategy/jwt.strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Config } from '@midwayjs/core';\n\n@CustomStrategy()\nexport class JwtStrategy extends PassportStrategy (\n  Strategy,\n  'jwt'\n) {\n  @Config('jwt')\n  jwtConfig;\n\n  async validate(payload) {\n    return payload;\n  }\n\n  getStrategyOptions(): any {\n    return {\n      secretOrKey: this.jwtConfig.secret\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken()\n    };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type with Decorator in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to set the content type of the response using the `@ContentType` decorator in MidwayJS. It sets the content type to `html` for the `/` route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, ContentType } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  @ContentType('html')\n  async login() {\n    return '<body>hello world</body>';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement JWT Controller\nDESCRIPTION: This TypeScript code demonstrates how to implement a controller that uses the `JwtPassportMiddleware` to protect an endpoint. It also provides a method to generate a JWT token using the `JwtService`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Post, Inject, Controller } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { JwtService } from '@midwayjs/jwt';\nimport { JwtPassportMiddleware } from '../middleware/jwt.middleware';\n\n@Controller('/')\nexport class JwtController {\n  @Inject()\n  jwt: JwtService;\n\n  @Inject()\n  ctx: Context;\n\n  @Post('/passport/jwt', { middleware: [JwtPassportMiddleware] })\n  async jwtPassport() {\n    console.log('jwt user: ', this.ctx.state.user);\n    return this.ctx.state.user;\n  }\n\n  @Post('/jwt')\n  async genJwt() {\n    return {\n      t: await this.jwt.sign({ msg: 'Hello Midway' }),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JWT Configuration\nDESCRIPTION: This snippet shows how to configure the JWT component with a secret, sign options (like expiration time), and verify and decode options.  The secret is used for signing and verifying tokens. The expiresIn option defines the token's lifespan.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/jwt.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  jwt: {\n    secret: 'xxxxxxxxxxxxxx', // fs.readFileSync('xxxxx.key')\n    sign: {\n      // signOptions\n      expiresIn: '2d', // https://github.com/vercel/ms\n    },\n    verify: {\n      // verifyOptions\n    },\n    decode: {\n      // decodeOptions\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Query/Body/Param/Header Decorator Changes (typescript)\nDESCRIPTION: This snippet illustrates the changes in the default behavior of `@Query`, `@Body`, `@Param`, and `@Header` decorators. In Midway v3, using these decorators without parameters accesses the entire context object instead of a specific property. To access a specific property, the parameter name must be explicitly provided to the decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync invoke(@Query() name) {\n  // ctx.query\n}\n\nasync invoke(@Query('name') name) {\n  // ctx.query.name\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Global Middleware (TypeScript)\nDESCRIPTION: Demonstrates registering multiple global middleware at once using an array. This approach allows for the simultaneous addition of several middleware functions, each fulfilling a distinct aspect of request processing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync onReady() {\n  this.app.useMiddleware([ReportMiddleware1, ReportMiddleware2]);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending gRPC Metadata from Client (TypeScript)\nDESCRIPTION: This code demonstrates how to send gRPC metadata from a client using the `metadata` option.  A `Metadata` object is created and key-value pairs are added before being passed in as an option when calling the service method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Metadata } from '@midwayjs/grpc';\n\nconst meta = new Metadata();\nmeta.add('key', 'value');\n\nconst result = await service.sayHello({\n  metadata: meta,\n}).sendMessage({\n  name: 'harry'\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple ETCD Instances - config.default.ts\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure multiple ETCD instances in `config.default.ts`. Each instance is defined with its own configuration, including host addresses. The configuration is nested under the `clients` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/etcd.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  etcd: {\n    clients: {\n      instance1: {\n        {\n          host: [\n            '127.0.0.1:2379'\n          ]\n        },\n      },\n  \t\tinstance2: {\n        {\n          host: [\n            '127.0.0.1:2379'\n          ]\n        },\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Singleton Scope (TypeScript)\nDESCRIPTION: This code demonstrates how to configure a class to have a Singleton scope using the `@Scope` decorator in MidwayJS. This ensures that only one instance of the class is created throughout the application's lifecycle.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// service\nimport { Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class UserService {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Get Route Parameter via Decorator in MidwayJS\nDESCRIPTION: This code snippet demonstrates retrieving a route parameter using the `@Param` decorator in a MidwayJS controller. The `uid` parameter is extracted from the URL path.  For example, a request to `/user/1` would set `uid` to '1'. Dependencies: `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// GET /user/1\nimport { Controller, Get, Param } from '@midwayjs/core';\n\n@Controller('/user')\nexport class UserController {\n  @Get('/:uid')\n  async getUser(@Param('uid') uid: string): Promise<User> {\n    // xxxx\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: ValidateHttp Example with Query Parameter Validation\nDESCRIPTION: This code demonstrates how to use `ValidateHttp` to validate query parameters. It defines a Zod schema `QuerySchema` for the `searchString` query parameter and uses it to validate the query. It imports APIs, Get, Query, useContext, ValidateHttp from '@midwayjs/hooks' and z from 'zod'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  APIs,\n  Get,\n  Query,\n  useContext,\n  ValidateHttp,\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\n\nconst QuerySchema = z. object({\n  searchString: z.string().min(5),\n});\n\nexport const filterPosts = Api(\n  Get('/api/filterPosts'),\n  Query<z.infer<typeof QuerySchema>>(),\n  ValidateHttp({ query: QuerySchema }),\n  async() => {\n    const ctx = useContext();\n    return ctx.query.searchString;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Create a basic controller in TypeScript\nDESCRIPTION: This TypeScript code defines a simple MidwayJS controller with a single route (`/weather`) that returns a string. It utilizes decorators from `@midwayjs/core` to define the controller and route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class WeatherController {\n  // Here is the decorator, defining a route\n  @Get('/weather')\n  async getWeatherInfo(): Promise<string> {\n    // This is the return of http, which can directly return strings, numbers, JSON,Buffer, etc.\n    return 'Hello Weather!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Middleware Example\nDESCRIPTION: This snippet illustrates a custom JWT middleware implementation in MidwayJS.  It extracts the token from the `Authorization` header, verifies it using `jwtService.verify`, and handles potential errors such as invalid or expired tokens. It includes logic to refresh the token if it's expired.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/jwt.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/jwt.middleware\n\nimport { Inject, Middleware, httpError } from '@midwayjs/core';\nimport { Context, NextFunction } from '@midwayjs/koa';\nimport { JwtService } from '@midwayjs/jwt';\n\n@Middleware()\nexport class JwtMiddleware {\n  @Inject()\n  jwtService: JwtService;\n\n  public static getName(): string {\n    return 'jwt';\n  }\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // 判断下有没有校验信息\n      if (!ctx.headers['authorization']) {\n        throw new httpError.UnauthorizedError();\n      }\n      // 从 header 上获取校验信息\n      const parts = ctx.get('authorization').trim().split(' ');\n\n      if (parts.length !== 2) {\n        throw new httpError.UnauthorizedError();\n      }\n\n      const [scheme, token] = parts;\n\n      if (/^Bearer$/i.test(scheme)) {\n        try {\n          //jwt.verify方法验证token是否有效\n          await this.jwtService.verify(token, {\n            complete: true,\n          });\n        } catch (error) {\n          //token过期 生成新的token\n          const newToken = getToken(user);\n          //将新token放入Authorization中返回给前端\n          ctx.set('Authorization', newToken);\n        }\n        await next();\n      }\n    };\n  }\n\n  // 配置忽略鉴权的路由地址\n  public match(ctx: Context): boolean {\n    const ignore = ctx.path.indexOf('/api/admin/login') !== -1;\n    return !ignore;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile\nDESCRIPTION: This Dockerfile uses multi-stage builds to optimize the final image size. It uses a build stage to compile the application and then copies only the necessary files to a smaller base image. Dependencies include node:12 and node:12-alpine.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/deployment.md#_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:12 AS build\n\nWORKDIR /app\n\nCOPY . .\n\nRUN npm install\n\nRUN npm run build\n\nFROM node:12-alpine\n\nWORKDIR /app\n\nCOPY --from=build /app/dist ./dist\nCOPY --from=build /app/bootstrap.js ./\nCOPY --from=build /app/package.json ./\n\nRUN apk add --no-cache tzdata\n\nENV TZ=\"Asia/Shanghai\"\n\nRUN npm install --production\n\n# 如果端口更换，这边可以更新一下\nEXPOSE 7001\n\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Using context logger in MidwayJS\nDESCRIPTION: This code shows how to use the context logger (`ctx.logger`) to print logs.  `ctx.logger` is available within the request context. The example demonstrates how to log different levels of information (info, debug, warn, error).  It requires access to the `ctx` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.logger.info(\"hello world\");\nctx.logger.debug('debug info');\nctx.logger.warn('WARNNING!!!!');\n\n// Error logging will directly record the complete stack information of the error log and output it to errorLog.\n// In order to ensure that exceptions are traceable, it must be ensured that all thrown exceptions are of type Error, because only type Error will bring stack information and locate the problem.\nctx.logger.error(new Error('custom error'));\n```\n\n----------------------------------------\n\nTITLE: UserController and UserService Example (TypeScript)\nDESCRIPTION: This example demonstrates the basic usage of `@Provide`, `@Inject`, `@Controller`, and `@Get` decorators in MidwayJS for dependency injection. It shows how to inject a UserService instance into a UserController and how to handle a GET request. The UserService returns a simple string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Get, Controller } from '@midwayjs/core';\n\n// user.controller.ts\n@Provide() // Actually can be omitted\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  userService: UserService;\n\n  @Get('/')\n  async get() {\n    const user = await this.userService.getUser();\n    console.log(user);      // world\n  }\n}\n\n// user.service.ts\n@Provide()\nexport class UserService {\n  async getUser() {\n    return 'world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrate Upload API with React Form\nDESCRIPTION: This React component demonstrates how to integrate the upload API with a form. It uses `useState` to manage the selected files, `handleSubmit` to send the files to the API, and `handleOnChange` to update the file state when the user selects files. The files are sent as an object under the \"files\" key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/upload.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport upload from './api/upload';\n\nfunction Form() {\n  const [file, setFile] =\n    React.useState<FileList>(null);\n\n  const handleSubmit = async (\n    e: React.FormEvent<HTMLFormElement>\n  ) => {\n    e.preventDefault();\n    const files = { images: file };\n    const response = await upload({\n      files,\n    });\n    console.log(response);\n  };\n\n  const handleOnChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    console.log(e.target.files);\n    setFile(e.target.files);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Hooks File Upload</h1>\n      <input\n        multiple\n        type=\"file\"\n        onChange={handleOnChange}\n      />\n      <button type=\"submit\">\n        Upload\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configure TypeScript compiler options for ESM\nDESCRIPTION: This snippet configures the TypeScript compiler options in `tsconfig.json` to support ESM. `moduleResolution` should be set to `Node16` or `NodeNext`, and `target` to `ESNext`. `esModuleInterop` ensures compatibility between ES modules and CommonJS modules. These settings are necessary for TypeScript to correctly compile ESM code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/esm.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Node16\",\n    \"esModuleInterop\": true,\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Kafka Component as Main Framework\nDESCRIPTION: This TypeScript code demonstrates how to enable the `@midwayjs/kafka` component as an independent main framework within a MidwayJS application. It imports the `kafka` module and includes it in the `imports` array of the `Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as kafka from '@midwayjs/kafka';\n\n@Configuration({\n  imports: [\n    kafka\n  ],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSRF Cookie Access with JavaScript\nDESCRIPTION: Illustrates how to retrieve a CSRF token from a cookie using JavaScript and include it in a fetch request's header. The token is typically named `csrfToken`.  This is used when CSRF is configured with cookies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/security.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst csrftoken = Cookies.get('csrfToken');\nfetch('/api/post', {\n  method: 'POST',\n  headers: {\n    'x-csrf-token': csrftoken\n  },\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Waterfall Pipeline Execution Example\nDESCRIPTION: Demonstrates the use of the `waterfall` method for sequential pipeline execution, where the result of the previous valve is passed as input to the next. It showcases the use of `ctx` to store and access intermediate results, and to check execution order.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nclass StageOne implements IValveHandler {\n  async invoke(ctx: IPipelineContext): Promise<any> {\n    if (ctx.args.aa !== 123) {\n      throw new Error('args aa is undefined');\n    }\n    ctx.set('stageone', 'this is stage one');\n    ctx.set('stageone_date', Date.now());\n    if (ctx.info.current !== 'stageOne') {\n      throw new Error('current stage is not stageOne');\n    }\n    if (ctx.info.next !== 'stageTwo') {\n      throw new Error('next stage is not stageTwo');\n    }\n    if (ctx.info.prev) {\n      throw new Error('stageOne prev stage is not undefined');\n    }\n\n    return 'stageone';\n  }\n}\n\n@Provide()\nclass StageTwo implements IValveHandler {\n  async invoke(ctx: IPipelineContext): Promise<any> {\n    const keys = ctx.keys();\n    if (keys.length !== 2) {\n      throw new Error('keys is not equal');\n    }\n    ctx.set('stagetwo', ctx.get('stageone') + 1);\n    ctx.set('stagetwo_date', Date.now());\n    // 验证是否是执行 stageOne 返回的结果\n    if (ctx.info.prevValue !== 'stageone') {\n      throw new Error('stageone result empty');\n    }\n    if (ctx.info.current !== 'stageTwo') {\n      throw new Error('current stage is not stageTwo');\n    }\n    if (ctx.info.next) {\n      throw new Error('stageTwo next stage is not undefined');\n    }\n    if (ctx.info.prev !== 'stageOne') {\n      throw new Error('prev stage is not stageOne');\n    }\n\n    return 'stagetwo';\n  }\n}\n\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline([StageOne, StageTwo])\n  stages: IPipelineHandler;\n  \n  async runStagesWaterfall(): Promise<any> {\n    // 这里通过串行方式执行，可以看到 stageTwo 中做了校验，prevValue 即 stageOne 执行的结果\n    return this.stages.waterfall<any>({\n      args: {aa: 123}\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context in API handler\nDESCRIPTION: This code demonstrates how to access the request context (Koa Context in this case) using `useContext` from `@midwayjs/hooks`. It retrieves the request method and path from the context object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext,\n} from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/koa';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  return {\n    method: ctx.method,\n    path: ctx.path,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Queue Instance by Name in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to retrieve a Bull queue instance by its name within a MidwayJS application using the `getQueue` method of the `bullFramework` object. This allows you to interact with and manage the specified queue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n const testQueue = bullFramework.getQueue('test');\n```\n\n----------------------------------------\n\nTITLE: Register Default Pipe for RegValid\nDESCRIPTION: This code demonstrates how to register a default pipe for the `RegValid` decorator using `decoratorService.registerParameterPipes`.  This makes it so that even if the `@RegValid` decorator doesn't explicitly include a pipe parameter, the `CutPipe` will still be applied.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipe.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n   //...\n})\nexport class MainConfiguration {\n   @Inject()\n   decoratorService: MidwayDecoratorService;\n\n   async onReady(container: IMidwayContainer) {\n     // register default pipe\n     this.decoratorService.registerParameterPipes('reg-valid', [\n       CutPipe,\n     ]);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Header Parameters with Decorator\nDESCRIPTION: Shows how to retrieve header values (e.g., 'cache-control') using the `@Headers` decorator. The `getUser` method extracts the 'cache-control' header value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// GET /user/1\nimport { Controller, Get, Headers } from '@midwayjs/core';\n\n@Controller('/user')\nexport class UserController {\n  @Get('/:uid')\n  async getUser(@Headers('cache-control') cacheSetting: string): Promise<User> {\n    // no-cache\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ValidatePipe with @Body decorator in MidwayJS\nDESCRIPTION: This code demonstrates how to use the `@Body` decorator with automatic `ValidatePipe` registration for DTO validation in MidwayJS. The `UserDTO` must be decorated with `@Rule` for validation to occur.  The validation logic is handled by the `@midwayjs/validate` component when enabled.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipe.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n\n  @Post('/')\n  async updateUser(@Body() user: UserDTO ) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Responses in Koa Controllers (TypeScript)\nDESCRIPTION: This code demonstrates a basic Koa controller in MidwayJS that handles success and failure scenarios using methods added to the `ctx` object. It showcases a common pattern for returning data in web applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n  \n  @Get('/')\n  async home() {\n    try {\n      // ...\n      return this.ctx.ok(/*...*/);\n    } catch (err) {\n      return this.ctx.fail(/*...*/);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom HTTP Error in Typescript\nDESCRIPTION: This code defines a custom HTTP error class `CustomHttpError` that extends `MidwayHttpError`. It sets a default error message and HTTP status code (BAD_REQUEST - 400). This allows for consistent and reusable error handling within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/error/custom.error.ts\nimport { HttpStatus } from '@midwayjs/core';\n\nexport class CustomHttpError extends MidwayHttpError {\n  constructor() {\n    super('my custom error', HttpStatus.BAD_REQUEST);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Body from API Operation in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to access the request body using the `ctx.request.body` property within a MidwayJS controller. It requires injecting the `Context` object. The `body` variable will contain the parsed JSON body. Dependencies: `@midwayjs/core`, `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// POST /user/ HTTP/1.1\n// Host: localhost:3000\n// Content-Type: application/json; charset=UTF-8\n//\n// {\"uid\": \"1\", \"name\": \"harry\"}\nimport { Controller, Post, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n\n  @Post('/')\n  async getUser(): Promise<User> {\n    const body = this.ctx.request.body;\n    // {\n    // uid: '1',\n    // name: 'harry',\n    //}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Mongoose Connection\nDESCRIPTION: This TypeScript code configures the Mongoose connection in the `config.default.ts` file.  It specifies the MongoDB URI, options (including useNewUrlParser and useUnifiedTopology), and associates the User entity with the connection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { User } from '../entity/user';\n\nexport default {\n  // ...\n  mongoose: {\n    dataSource: {\n      default: {\n        uri: 'mongodb://localhost:27017/test',\n        options: {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n          user: '***********',\n          pass: '***********'\n        },\n        // Associated Entities\n        entities: [ User]\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure VSCode launch.json for Midway debugging\nDESCRIPTION: This snippet shows a `launch.json` configuration for debugging a Midway.js application in VSCode. It defines a debug configuration named \"Midway Local\" that launches the application using `npm run dev`. It sets the environment variable `NODE_ENV` to `local`, uses the integrated terminal for console output, and enables auto-attaching to child processes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/debugger.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    // Use IntelliSense to understand related attributes.  \n    // Hover to view a description of an existing attribute.\n    // For more information, please visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0 \",\n    \"configurations\": [{\n        \"name\": \"Midway Local \",\n        \"type\": \"node \",\n        \"request\": \"launch \",\n        \"cwd\": \"${workspaceRoot} \",\n        \"runtimeExecutable\": \"npm \",\n        \"windows\": {\n            \"runtimeExecutable\": \"npm.cmd\"\n        },\n        \"runtimeArgs\": [\n            \"run \",\n            \"dev\"\n        ],\n        \"env\": {\n            \"NODE_ENV\": \"local\"\n        },\n        \"console\": \"integratedTerminal \",\n        \"protocol\": \"auto \",\n        \"restart\": true\n        \"port\": 7001\n        \"autoAttachChildProcesses\": true\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Undefined Fields on a Decorator in MidwayJS (TypeScript)\nDESCRIPTION: This snippet shows how to allow undefined fields during parameter validation on a specific controller method using the `@Validate` decorator. It sets `allowUnknown: true` within the `validationOptions` passed to the decorator. This configuration only applies to the decorated method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n\n  @Post('/')\n  @Validate({\n    validationOptions: {\n      allowUnknown: true\n    }\n  })\n  async updateUser(@Body() user: UserDTO ) {\n    // user.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring oauth2 authentication in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure oauth2 authentication in the swagger configuration, including the authorizationUrl, tokenUrl, and scopes, and associate the controller with `@ApiOAuth2` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'oauth2',\n      flows: {\n        implicit: {\n          authorizationUrl: 'http://example.org/api/oauth/dialog',\n          scopes: {\n            'write:pets': 'modify pets in your account',\n            'read:pets': 'read your pets'\n          }\n        },\n        authorizationCode: {\n          authorizationUrl: 'https://example.com/api/oauth/dialog',\n          tokenUrl: 'https://example.com/api/oauth/token',\n          scopes: {\n            'write:pets': 'modify pets in your account',\n            'read:pets': 'read your pets'\n          }\n        },\n      },\n    },\n  },\n}\n\n@ApiOAuth2()\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Multiple Route Methods in Controller\nDESCRIPTION: Defines a controller with both GET and POST routes.  The `@Get` decorator maps the `home` method to the '/' route, and `@Post` maps `updateData` to the '/update' route. Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Post } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    return 'Hello Midwayjs!';\n  }\n\n  @Post('/update')\n  async updateData() {\n    return 'This is a post method'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get User With Validation\nDESCRIPTION: Demonstrates parameter validation using @Valid decorator and RuleType.  Validates the 'id' query parameter is a required number.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\nimport { Controller, Get, Query } from '@midwayjs/core';\nimport { Valid, RuleType } from '@midwayjs/validate';\nimport { UserDTO } from './dto/user';\n\n@Controller('/api/user')\nexport class HomeController {\n  @Get('/')\n  async getUser(@Valid(RuleType.number().required()) @Query('id') id: number) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User DTO with School DTO\nDESCRIPTION: Defines a UserDTO class with nested SchoolDTO and an array of SchoolDTOs.  Uses getSchema to reference the validation schema of SchoolDTO.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType, getSchema } from '@midwayjs/validate';\n\nexport class SchoolDTO {\n  @Rule(RuleType.string().required())\n  name: string;\n  @Rule(RuleType.string())\n  address: string;\n}\n\nexport class UserDTO {\n  @Rule(RuleType.number().required())\n  id: number;\n\n  @Rule(RuleType.string().required())\n  firstName: string;\n\n  @Rule(RuleType.string().max(10))\n  lastName: string;\n\n  // 复杂对象\n  @Rule(getSchema(SchoolDTO).required())\n  school: SchoolDTO;\n\n  // 对象数组\n  @Rule(RuleType.array().items(getSchema(SchoolDTO)).required())\n  schoolList: SchoolDTO[];\n}\n```\n\n----------------------------------------\n\nTITLE: Define Custom Transport using Dependency Injection\nDESCRIPTION: This example defines a custom transport using dependency injection. It utilizes the `@Provide` and `@Scope` decorators to register the transport as a provider in the MidwayJS container. The transport is then injected into a configuration class and added to a specific logger instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmptyTransport, IMidwayLogger } from '@midwayjs/logger';\nimport { MidwayLoggerService, Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum)\nexport class CustomTransport extends EmptyTransport {\n  log(info, callback) {\n    // ...\n    callback();\n  }\n}\n\n// src/configuration.ts\n@Configuration(/*...*/)\nexport class MainConfiguration {\n\n  @Inject()\n  loggerService: MidwayLoggerService;\n\n  @Inject()\n  customTransport: CustomTransport;\n\n  async onReady() {\n    const appLogger = this.loggerService.getLogger('customLogger') as IMidwayLogger;\n    appLogger.add(this.customTransport);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions Structure in TypeScript\nDESCRIPTION: This TypeScript code defines the structure for functions within a serverless application. `FunctionsStructure` is an object where each key is a function name, and the value is a `FunctionStructure` object containing function-specific configurations.  The `FunctionStructure` interface details the configurable attributes for each function, like handler, memory, timeout, and events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionsStructure {\n  [functionName: string]: FunctionStructure;\n}\n\nexport interface FunctionStructure {\n  handler: string;\n  name?: string;\n  description?: string;\n  memorySize?: number;\n  timeout?: number;\n  runtime?: string;\n  initTimeout?: number;\n  environment?: {\n    [key: string]: string;\n  };\n  events?: EventStructureType[];\n  concurrency?: number;\n  stage?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Association\nDESCRIPTION: This TypeScript code demonstrates how to define a many-to-many association between two Sequelize models (Book and Author) using sequelize-typescript decorators and an intermediate model (BookAuthor).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, Column, ForeignKey, BelongsToMany } from 'sequelize-typescript';\n\n@Table\nexport class Book extends Model {\n  @BelongsToMany(() => Author, () => BookAuthor)\n  authors: Author[];\n}\n\n@Table\nexport class Author extends Model {\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Author[];\n}\n\n@Table\nexport class BookAuthor extends Model {\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: ValidateHttp Option Type Definition\nDESCRIPTION: This code defines the `ValidateHttpOption` type, which is used as the options parameter for the `ValidateHttp` function.  It imports APIs, Get, Query, useContext, ValidateHttp from '@midwayjs/hooks' and z from 'zod'. It allows you to specify Zod schemas for validating `query`, `params`, `headers`, and `data` properties of the HTTP request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ValidateHttpOption = {\n  query?: z.Schema<any>;\n  params?: z.Schema<any>;\n  headers?: z.Schema<any>;\n  data?: z.Schema<any>[];\n};\n```\n\n----------------------------------------\n\nTITLE: Using TypeORM Entity Model in Service\nDESCRIPTION: This code snippet demonstrates how to use a TypeORM entity model within a Midway service. It uses the `@InjectEntityModel` decorator to inject the `User` entity's repository into the service. It also includes an example usage of saving and querying the entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typeorm/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { User } from './model/user';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class UserService {\n\n  @InjectEntityModel(User)\n  userModel: Repository<User>;\n\n  async testUser() {\n    const u = new User();\n    u.name = 'oneuser1';\n    const uu = await this.userModel.save(u);\n    console.log('user one id = ', uu.id);\n\n    const user = new User();\n    user.id = 1;\n    const users = await this.userModel.findAndCount({\n      where: user\n    });\n    return 'hello world' + JSON.stringify(users);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ParseIntPipe for Data Conversion in MidwayJS\nDESCRIPTION: This code showcases the use of `ParseIntPipe` to convert string or number data to a number type in MidwayJS. The pipe validates and transforms the `age` field from the request parameters. The `@midwayjs/validate` component is required.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipe.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ParseIntPipe } from '@midwayjs/validate';\n\n@Controller('/api/user')\nexport class HomeController {\n\n  @Post('/update_age')\n  async updateAge(@Body('age', [ParseIntPipe]) age: number ) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Controller Route\nDESCRIPTION: This snippet shows how to apply a middleware (ReportMiddleware) to a specific controller route using the @Controller decorator. The middleware is added to the middleware array in the second argument of the @Controller decorator, which configures the route group.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from '@midwayjs/core';\nimport { ReportMiddleware } from '../middleware/report.middlweare';\n\n@Controller('/', { middleware: [ ReportMiddleware ] })\nexport class HomeController {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sequelize Time Column Definitions - Typescript\nDESCRIPTION: This code demonstrates how to define timestamp columns for a Sequelize model, such as creation, update, and deletion timestamps. It uses the `@CreatedAt`, `@UpdatedAt`, and `@DeletedAt` decorators provided by `sequelize-typescript`. These decorators automatically manage the timestamp values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, CreatedAt, UpdatedAt, DeletedAt } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n\n  @DeletedAt\n  deletionDate: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MidwayError class\nDESCRIPTION: This snippet shows the basic structure of the MidwayError class, which extends the standard JavaScript Error class and provides additional properties like code and cause.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_error.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MidwayError extends Error {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a POST API Endpoint with Validation using Zod and Prisma (TypeScript)\nDESCRIPTION: This code defines a POST API endpoint using @midwayjs/hooks. It uses Zod for schema validation of the request body. The validated data is then used to create a new post in the database using Prisma.  Dependencies: @midwayjs/hooks, Prisma, Zod. The function takes a `post` object that conforms to the `PostSchema` and returns the created post from the database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/safe.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post,\n  Validate\n} from '@midwayjs/hooks';\nimport { prisma } from './prisma';\nimport { z } from 'zod';\n\nconst PostSchema = z.object({\n  title: z.string().min(1),\n  content: z.string().min(1),\n  authorEmail: z.string().email()\n});\n\nexport const createPost = Api(\n  Post('/api/post'),\n  Validate(PostSchema),\n  async (\n    post: z.infer<typeof PostSchema>\n  ) => {\n    const result =\n      await prisma.post.create({\n        data: {\n          title: post.title,\n          content: post.content,\n          author: {\n            connect: {\n              email: post.authorEmail\n            },\n          },\n        },\n      });\n    return result;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Fanout Exchange Consumer\nDESCRIPTION: This TypeScript example shows a RabbitMQ consumer configured to use a Fanout Exchange. Two methods, `gotData` and `gotData2`, are bound to different queues (`abc` and `bcd`) but share the same Fanout Exchange ('logs'). Both methods will receive the same messages published to the 'logs' exchange.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Consumer, MSListenerType, RabbitMQListener, Inject, App } from '@midwayjs/core';\nimport { Context, Application } from '@midwayjs/rabbitmq';\nimport { ConsumeMessage } from 'amqplib';\n\n@Consumer(MSListenerType.RABBITMQ)\nexport class UserConsumer {\n\n  @App()\n  app: Application;\n\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  logger;\n\n  @RabbitMQListener('abc', {\n    exchange: 'logs',\n    exchangeOptions: {\n      type: 'fanout',\n      durable: false\n    },\n    exclusive: true,\n    consumeOptions: {\n      noAck: true,\n    }\n  })\n  async gotData(msg: ConsumeMessage) {\n    this.logger.info('test output1 =>', msg.content.toString('utf8'));\n    // TODO\n  }\n\n  @RabbitMQListener('bcd', {\n    exchange: 'logs',\n    exchangeOptions: {\n      type: 'fanout',\n      durable: false\n    },\n    exclusive: true\n    consumeOptions: {\n      noAck: true\n    }\n  })\n  async gotData2(msg: ConsumeMessage) {\n    this.logger.info('test output2 =>', msg.content.toString('utf8'));\n    // TODO\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Delay Job Execution\nDESCRIPTION: This TypeScript snippet shows how to delay the execution of a job by a specified amount of time (in milliseconds) using the `delay` option when adding the job to the queue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullFramework.getQueue('test');\n// 立即添加这个任务\nawait testQueue?.addJobToQueue({}, { delay: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Messages with @OnWSMessage\nDESCRIPTION: Defines a method to be executed when a specific message is received from a WebSocket client using the @OnWSMessage decorator. The decorator takes an event name ('message' in this case) as an argument, and the decorated method is called with the message data as input. It returns a structured response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, OnWSMessage, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/ws';\n\n@WSController()\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('message')\n  async gotMessage(data) {\n    return { name: 'harry', result: parseInt(data) +5 };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Authentication Guard in TypeScript\nDESCRIPTION: This code snippet demonstrates implementing a guard for role-based authentication.  It retrieves role information from the method's metadata using `getPropertyMetadata` and checks if the user's role (assumed to be stored in `context.user.role`) is included in the allowed roles. Requires the custom `@Role` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IMiddleware, Guard, IGuard, getPropertyMetadata } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { ROLE_META_KEY } from '../decorator/role.decorator.ts';\n\n@Guard()\nexport class AuthGuard implements IGuard<Context> {\n  async canActivate(context: Context, supplierClz, methodName: string): Promise<boolean> {\n    // Get role information from class metadata\n    const roleNameList = getPropertyMetadata<string[]>(ROLE_META_KEY, supplierClz, methodName);\n    if (roleNameList && roleNameList.length && context.user.role) {\n      // Assume that the middleware has already obtained the user role information and saved it to context.user.role\n\t\t\t// Directly determine whether to change the role\n      return roleNameList.includes(context.user.role);\n    }\n\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Middleware with createMiddleware in Configuration - TypeScript\nDESCRIPTION: Demonstrates reusing a middleware class with different configurations using the `createMiddleware` method in the `configuration.ts` file.  It shows how to add the same middleware multiple times with different parameters.  This approach allows passing custom data to middleware for different behaviors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration, createMiddleare } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { ReportMiddleware } from './middleware/user.middleware';\n\n@Configuration({\nimports: [koa]\n// ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // Add ReportMiddleware middleware\n    this.app.useMiddleware(ReportMiddleware);\n    // Add a ReportMiddleware with different parameters\n    this.app.useMiddleware(createMiddleare(ReportMiddleware, {\n      text: 'abc'\n    }, 'anotherReportMiddleare'));\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implement JWT Strategy\nDESCRIPTION: This TypeScript code defines the JWT strategy for Passport authentication. It extends `PassportStrategy` and extracts the JWT from the Authorization header. The `validate` method is used to verify the payload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/strategy/jwt.strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Config } from '@midwayjs/core';\n\n@CustomStrategy()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  @Config('jwt')\n  jwtConfig;\n\n  async validate(payload) {\n    return payload;\n  }\n\n  getStrategyOptions(): any {\n    return {\n      secretOrKey: this.jwtConfig.secret,\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Data Source Using Decorators in TypeORM with TypeScript\nDESCRIPTION: This code shows how to inject TypeORM data sources using the `@InjectDataSource` decorator in MidwayJS. It demonstrates injecting both the default data source and a custom-named data source (`default1`). It requires importing `DataSource` from `typeorm`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { InjectDataSource } from '@midwayjs/typeorm';\nimport { DataSource } from 'typeorm';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n\n  // 注入默认数据源\n  @InjectDataSource()\n  defaultDataSource: DataSource;\n\n  // 注入自定义数据源\n  @InjectDataSource('default1')\n  customDataSource: DataSource;\n\n  async onReady(container: IMidwayContainer) {\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering an Existing Object in MidwayJS Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register an existing object, such as a third-party library like lodash, with the MidwayJS dependency injection container. The `registerObject` method is used within the `onReady` lifecycle hook of a configuration class. This makes the object available for injection in other classes using a specified identifier.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport * as lodash from 'lodash';\nimport { Configuration, IMidwayContainer } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration {\n\n  async onReady(applicationContext: IMidwayContainer) {\n\t\t// Add some global objects to the dependency injection container\n  \tapplicationContext.registerObject('lodash', lodash);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers Using Decorator (Typescript)\nDESCRIPTION: This snippet demonstrates how to set response headers using the `@SetHeader` decorator in a MidwayJS controller method. It first shows setting a single header, then multiple headers using an object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, SetHeader } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  @SetHeader('x-bbb', '123')\n  async home() {\n    return \"Hello Midwayjs!\";\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, SetHeader } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  @SetHeader({\n  \t'x-bbb': '123',\n    'x-ccc': '234'\n  })\n  async home() {\n    return \"Hello Midwayjs!\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Objects with onReady in TypeScript\nDESCRIPTION: Demonstrates how to register an external library (sequelize) as a global object within the dependency injection container. This allows other classes to inject and use the library directly. Dependencies: @midwayjs/core, sequelize.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\nimport * as sequelize from 'sequelize';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    // 三方包对象\n    container.registerObject('sequelize', sequelize);\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport class IndexHandler {\n\n  @Inject()\n  sequelize;\n\n  async handler() {\n  \tconsole.log(this.sequelize);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Error in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a custom error class in MidwayJS, extending the base `MidwayError` class.  The constructor takes an optional error as a parameter, allowing you to capture the original error's stack trace. This provides a way to standardize error messages and add context for business logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/error/weather.error.ts\nimport { MidwayError } from '@midwayjs/core';\n\nexport class WeatherEmptyDataError extends MidwayError {\n  constructor(err?: Error) {\n    super('weather data is empty', {\n      cause: err\n    });\n    if (err?.stack) {\n      this.stack = err.stack;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Body Parameters with Decorator\nDESCRIPTION: Shows how to access a specific body parameter ('uid') using the `@Body` decorator.  The `updateUser` method extracts the `uid` from the request body. Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// POST /user/ HTTP/1.1\n// Host: localhost:3000\n// Content-Type: application/json; charset=UTF-8\n//\n// {\"uid\": \"1\", \"name\": \"harry\"}\nimport { Controller, Post, Body } from '@midwayjs/core';\n\n@Controller('/user')\nexport class UserController {\n  @Post('/')\n  async updateUser(@Body('uid') uid: string): Promise<User> {\n    // id 等价于 ctx.request.body.uid\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Data Source Instance\nDESCRIPTION: This code snippet shows how to inject the `MySqlDataSourceManager` and retrieve a specific data source instance using the `getDataSource` method. It also lists other methods available for data source management. It depends on `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MySqlDataSourceManager } from './manager/mysqlDataSourceManager';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  mysqlDataSourceManager: MySqlDataSourceManager;\n\n  async invoke() {\n\n    const dataSource = this.mysqlDataSourceManager.getDataSource('dataSource1');\n    // TODO\n\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Whether the data source exists\nthis.mysqlDataSourceManager.hasDataSource('dataSource1');\n// Get all data source names\nthis.mysqlDataSourceManager.getDataSourceNames();\n// Whether the data source is connected\nthis.mysqlDataSourceManager.isConnected('dataSource1')\n\n```\n\n----------------------------------------\n\nTITLE: Cascade Check Example with DTOs\nDESCRIPTION: This snippet demonstrates cascade validation using DTOs (Data Transfer Objects) in MidwayJS. It shows how to define nested DTOs and apply validation rules to their properties using the `@Rule` decorator and `getSchema` method. This allows for complex object validation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType } from '@midwayjs/validate';\n\nexport class SchoolDTO {\n  @Rule(RuleType.string().required())\n  name: string;\n  @Rule(RuleType.string())\n  address: string;\n}\n\nexport class UserDTO {\n  @Rule(RuleType.number().required())\n  id: number;\n\n  @Rule(RuleType.string().required())\n  firstName: string;\n\n  @Rule(RuleType.string().max(10))\n  lastName: string;\n\n  // Complex object\n  @Rule(getSchema(SchoolDTO).required())\n  school: SchoolDTO;\n\n  // Object array.\n  @Rule(RuleType.array().items(getSchema(SchoolDTO)).required())\n  schoolList: SchoolDTO[];\n}\n```\n\n----------------------------------------\n\nTITLE: Define User DTO with Validation\nDESCRIPTION: Defines a UserDTO class with validation rules using the @Rule decorator from @midwayjs/validate. It specifies rules for id, firstName, lastName, and age properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/dto/user.ts\nimport { Rule, RuleType } from '@midwayjs/validate';\n\nexport class UserDTO {\n  @Rule(RuleType.number().required())\n  id: number;\n\n  @Rule(RuleType.string().required())\n  firstName: string;\n\n  @Rule(RuleType.string().max(10))\n  lastName: string;\n\n  @Rule(RuleType.number().max(60))\n  age: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Workaround for Node.js Version Check in @typegoose/typegoose (TypeScript)\nDESCRIPTION: This code snippet provides a workaround for Node.js version checks performed by `@typegoose/typegoose` when running on versions older than v12.22.0, especially in environments like Serverless where upgrading the Node.js version is not feasible. By temporarily modifying the `process.version` property, the version check can be bypassed. The code needs to be placed in the `src/configuration.ts` file or any other configuration file that runs early in the application's lifecycle.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nObject.defineProperty(process, 'version', {\n  value: 'v12.22.0',\n  writable: true,\n});\n\n// other code\n\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Getting Logger Instance\nDESCRIPTION: This code snippet illustrates how to obtain a logger instance using `this.app.getLogger()`. By default, it returns the application logger (appLogger). You can also specify a custom logger name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getLogger();\n// => app logger\nthis.app.getLogger('custom');\n// => custom logger\n```\n\n----------------------------------------\n\nTITLE: Implement Github OAuth Strategy\nDESCRIPTION: This TypeScript code demonstrates how to implement a Github OAuth strategy. It extends `PassportStrategy` and configures the strategy options with the Github client ID, secret, and callback URL. The `validate` method is used to process the payload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// github-strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, StrategyOptions } from 'passport-github';\n\nconst GITHUB_CLIENT_ID = 'xxxxxx',\n  GITHUB_CLIENT_SECRET = 'xxxxxxxx';\n\n@CustomStrategy()\nexport class GithubStrategy extends PassportStrategy(Strategy, 'github') {\n  async validate(...payload) {\n    return payload;\n  }\n\n  getStrategyOptions(): StrategyOptions {\n    return {\n      clientID: GITHUB_CLIENT_ID,\n      clientSecret: GITHUB_CLIENT_SECRET,\n      callbackURL: 'https://127.0.0.1:7001/auth/github/cb',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Redis Clients with Decorators\nDESCRIPTION: This TypeScript example demonstrates how to inject specific Redis clients using decorators (`@InjectClient`).  This is an alternative to injecting `RedisServiceFactory` and allows direct access to configured client instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RedisServiceFactory, RedisService } from '@midwayjs/redis';\nimport { InjectClient } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n  @InjectClient(RedisServiceFactory, 'instance1')\n  redis1: RedisService;\n\n  @InjectClient(RedisServiceFactory, 'instance3')\n  redis2: RedisService;\n\n  async save() {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install OpenTelemetry ARMS\nDESCRIPTION: This command installs the `opentelemetry-arms` package as a dependency to enable application performance monitoring with ARMS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save opentelemetry-arms\n```\n\n----------------------------------------\n\nTITLE: Configuring Tasks with Log Deletion in Midway.js (TypeScript)\nDESCRIPTION: This code snippet showcases how to configure a scheduled task in Midway.js using the `@Task` decorator. The `removeOnComplete: true` option ensures that historical logs associated with the task are automatically deleted after the task has completed. This helps in managing and reducing storage space usage by removing unnecessary log data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Task } from '@midwayjs/decorator';\nimport { IUserOptions } from '../interface';\n\n@Provide()\nexport class UserService {\n  async getUser(options: IUserOptions) {\n    return {\n      uid: options.uid,\n      username: 'mockedName',\n      phone: '12345678901',\n      email: 'xxx.xxx@xxx.com',\n    };\n  }\n\n  @Task({\n    repeat: { cron: '* * * * * *' },\n    removeOnComplete: true, // 加了一行这个\n  })\n  async test() {\n    console.log(`====`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update User Age Service with Validation\nDESCRIPTION: Illustrates using the @Valid decorator with specific Joi validation rules for a simple parameter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Valid, RuleType } from '@midwayjs/validate';\nimport { Provide } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n  async updateUser(@Valid(RuleType.number().required()) userAge: number) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring basic authentication in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure basic authentication in the swagger configuration and associate the controller with `@ApiBasicAuth` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'basic',\n    },\n  },\n}\n\n@ApiBasicAuth()\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Attach RabbitMQ to Koa\nDESCRIPTION: This TypeScript snippet illustrates how to attach the `@midwayjs/rabbitmq` component to an existing MidwayJS application using `@midwayjs/koa`. This allows integration of RabbitMQ message queue functionality into a Koa-based web application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as rabbitmq from '@midwayjs/rabbitmq';\n\n@Configuration({\n  imports: [\n    koa,\n    rabbitmq\n  ],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Undefined Attributes Globally in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to remove undefined attributes from parameters globally by setting `stripUnknown: true` in the `validationOptions` of the `validate` configuration. This affects all validation operations within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  validate: {\n    validationOptions: {\n      stripUnknown: true, // global takes effect\n  \t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get deep-level config values in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to retrieve a configuration value from a nested object structure in a MidwayJS application. The `@Config` decorator is used with a string representing the path to the desired value within the configuration object (e.g., 'userService.appname.test.data').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from '@midwayjs/core';\n\nexport class IndexHandler {\n\n   @Config('userService.appname.test.data')\n   data;\n\n   async handler() {\n   console.log(this.data); // xxx\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Listener Options Interface\nDESCRIPTION: This snippet defines the `RabbitMQListenerOptions` interface, which outlines the available options for configuring a RabbitMQ listener in MidwayJS. It includes settings for the queue, exchange, and consumer behavior, such as durability, auto-deletion, message TTL, prefetch count, routing key, and exchange type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RabbitMQListenerOptions {\n  exchange?: string;\n  /**\n   * queue options\n   */\n  exclusive?: boolean;\n  durable?: boolean;\n  autoDelete?: boolean;\n  messageTtl?: number;\n  expires?: number;\n  deadLetterExchange?: string;\n  deadLetterRoutingKey?: string;\n  maxLength?: number;\n  maxPriority?: number;\n  pattern?: string;\n  /**\n   * prefetch\n   */\n  prefetch?: number;\n  /**\n   * router\n   */\n  routingKey?: string;\n  /**\n   * exchange options\n   */\n  exchangeOptions?: {\n    type?: 'direct' | 'topic' | 'headers' | 'fanout' | 'match' | string;\n    durable?: boolean;\n    internal?: boolean;\n    autoDelete?: boolean;\n    alternateExchange?: string;\n    arguments?: any;\n  };\n  /**\n   * consumeOptions\n   */\n  consumeOptions?: {\n    consumerTag?: string;\n    noLocal?: boolean;\n    noAck?: boolean;\n    exclusive?: boolean;\n    priority?: number;\n    arguments?: any;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default MQTT Publisher\nDESCRIPTION: This TypeScript code shows how to use the default MQTT publisher (named 'default') in a service. The `DefaultMqttProducer` class is injected into the service, and its `publish` and `publishAsync` methods are used to send messages to a specified topic.  The example demonstrates both synchronous and asynchronous publishing, with options to configure the message's Quality of Service (QoS).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/user.service.ts\nimport { Provide, Inject } from '@midwayjs/core';\nimport { DefaultMqttProducer } from '@midwayjs/mqtt';\n\n@Provide()\nexport class UserService {\n  \n  @Inject()\n  producer: DefaultMqttProducer;\n  \n  async invoke() {\n    // 同步发布消息\n    this.producer.publish('test', 'hello world');\n    \n    // 异步发布\n    await this.producer.publishAsync('test', 'hello world');\n    \n    // 增加配置\n    await this.producer.publishAsync('test', 'hello world', {\n      qos: 2\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request using HttpClient Instance in Typescript\nDESCRIPTION: This snippet demonstrates making a POST request using an `HttpClient` instance, specifying data, dataType and contentType.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from '@midwayjs/core';\n\nconst httpclient = new HttpClient();\nconst result = await httpclient.request('http://127.1:7001/', {\n  method: 'POST',\n  data: {\n    a: 1\n    B: 2\n  },\n  dataType: 'json',\n  contentType:'json', // the post sent is json\n});\n\n// result.data...\n```\n\n----------------------------------------\n\nTITLE: Accessing Original JWT Object\nDESCRIPTION: This demonstrates how to import and access the original JWT object, allowing access to its properties and methods.  This allows developers to use the underlying `jsonwebtoken` library's functionalities directly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/jwt.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Jwt } from '@midwayjs/jwt';\n\n// Jwt.TokenExpiredError\n```\n\n----------------------------------------\n\nTITLE: Creating a RabbitMQ Service with Midway.js\nDESCRIPTION: This snippet demonstrates creating a RabbitMQ service in Midway.js. It establishes a connection to RabbitMQ, sets up a channel, and defines methods for sending messages to a queue.  It uses `@midwayjs/core` for dependency injection and lifecycle management and `amqp-connection-manager` for RabbitMQ connection handling. The service is configured as a Singleton.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum, Init, Autoload, Destroy } from '@midwayjs/core';\nimport * as amqp from 'amqp-connection-manager'\n\n@Autoload()\n@Provide()\n@Scope(ScopeEnum.Singleton) // Singleton 单例，全局唯一（进程级别）\nexport class RabbitmqService {\n\n  private connection: amqp.AmqpConnectionManager;\n\n  private channelWrapper;\n\n  @Init()\n  async connect() {\n    // 创建连接，你可以把配置放在 Config 中，然后注入进来\n    this.connection = await amqp.connect('amqp://localhost');\n\n    // 创建 channel\n    this.channelWrapper = this.connection.createChannel({\n      json: true,\n      setup: function(channel) {\n        return Promise.all([\n          // 绑定队列\n        \tchannel.assertQueue(\"tasks\", { durable: true }),\n        ]);\n      }\n    });\n  }\n\n  // 发送消息\n  public async sendToQueue(queueName: string, data: any) {\n  \treturn this.channelWrapper.sendToQueue(queueName, data);\n  }\n\n  @Destroy()\n  async close() {\n  \tawait this.channelWrapper.close();\n    await this.connection.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Session Store Configuration with connect-redis\nDESCRIPTION: This example demonstrates configuring `connect-redis` as a custom session store. It initializes a Redis client and sets the session store to `RedisStore`, passing the client and a prefix for the keys. This requires the `@midwayjs/core`, `@midwayjs/express`, `@midwayjs/express-session`, `connect-redis`, and `redis` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as session from '@midwayjs/express-session';\nimport RedisStore from \"connect-redis\"\nimport {createClient} from \"redis\"\n\n// Initialize client.\nlet redisClient = createClient()\nredisClient.connect().catch(console.error)\n\n@Configuration({\n  imports: [\n    express,\n    session,\n  ],\n  //...\n})\nexport class AutoConfiguration {\n  @Inject()\n  sessionStoreManager: session.SessionStoreManager;\n\n  async onReady() {\n    // Initialize store.\n    this.sessionStoreManager.setSessionStore(RedisStore, {\n      client: redisClient,\n      prefix: \"myapp:\",\n      // ...\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message for Single Rule\nDESCRIPTION: This snippet demonstrates how to define a custom error message for a single validation rule using the `error()` method. This allows for highly specific error messages for individual fields.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDTO {\n  @Rule(RuleType.number().required().error(new Error('my custom message')))\n  id: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Header from API Operation in MidwayJS\nDESCRIPTION: This code snippet shows how to access request headers using the `ctx.get(name)` method within a MidwayJS controller. It requires injecting the `Context` object. The `cacheSetting` variable will contain the value of the `cache-control` header. Dependencies: `@midwayjs/core`, `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// GET /user/1\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/:uid')\n  async getUser(): Promise<User> {\n    const cacheSetting = this.ctx.get('cache-control');\n    // no-cache\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware (TypeScript)\nDESCRIPTION: Shows how to register global middleware in a MidwayJS application. Global middleware is executed for every route. The `useMiddleware` method of the application instance is used to add the `ReportMiddleware` to the middleware list. The application instance is obtained through dependency injection using the `@App` decorator within the `Configuration` class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { ReportMiddleware } from './middleware/user.middleware';\n\n@Configuration({\n  imports: [koa]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    this.app.useMiddleware(ReportMiddleware);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing the Class Decorator Logic in Configuration\nDESCRIPTION: This code demonstrates how to implement the logic associated with the `@Model` class decorator within the `configuration.ts` file. It uses `listModule` to retrieve all classes decorated with `@Model`, and then iterates over them to perform custom actions, such as accessing metadata or initializing the class instance within the application context. It injects the Koa app and imports `MODEL_KEY` from the decorator file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { listModule, Configuration, App, Inject } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { MODEL_KEY } from './decorator/model.decorator';\n\n@Configuration({\n  imports: [koa],\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // ...\n\n    // 可以获取到所有装饰了 @Model() 装饰器的 class\n    const modules = listModule(MODEL_KEY);\n    for (let mod of modules) {\n      // 实现自定义能力\n      // 比如，拿元数据 getClassMetadata(mod)\n      // 比如，提前初始化 app.applicationContext.getAsync(mod);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding tags to Controller in TypeScript\nDESCRIPTION: This snippet show how to add tags to controllers, which helps group related endpoints together in the Swagger UI. The first example automatically generates the tag based on the controller path. The second example customize tags using `@ApiTags` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/hello')\nexport class HelloController {}\n\n@ApiTags(['hello'])\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Adjusting column data types\nDESCRIPTION: Adjusts the data types of columns using the `@Column` decorator with type options. This allows specifying the precise data type for each column.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// entity/photo.ts\nimport { EntityModel } from '@midwayjs/orm';\nimport { Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@EntityModel()\nexport class Photo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    length: 100,\n  })\n  name: string;\n\n  @Column('text')\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column('double')\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Handle File Upload in Controller\nDESCRIPTION: This code shows how to handle file uploads in a MidwayJS controller using the @Files and @Fields decorators. The upload function receives an array of UploadFileInfo objects representing the uploaded files and an object containing the other form fields. Dependencies: @midwayjs/core, @midwayjs/decorator, @midwayjs/upload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/upload/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx;\n\n  @Post('/upload')\n  async upload(@Files() files: upload.UploadFileInfo[], @Fields() fields) {\n    /*\n    files = [\n      {\n        filename: 'test.pdf',        // 文件原名\n        data: '/var/tmp/xxx.pdf',    // mode 为 file 时为服务器临时文件地址\n        fieldName: 'test1',          // 表单 field 名\n        mimeType: 'application/pdf', // mime\n      },\n      {\n        filename: 'test.pdf',        // 文件原名\n        data: ReadStream,    // mode 为 stream 时为服务器临时文件地址\n        fieldName: 'test2',          // 表单 field 名\n        mimeType: 'application/pdf', // mime\n      },\n      // ...file 下支持同时上传多个文件\n    ]\n\n    */\n    return {\n      files,\n      fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Interceptor to Multiple Classes\nDESCRIPTION: This example shows how to apply an interceptor to multiple classes by providing an array of classes to the `@Aspect` decorator. This will intercept all methods of every provided class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Aspect([HomeController, APIController])\nexport class ReportInfo implements IMethodAspect {\n\n  async before(point: JoinPoint) {\n\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Cookies in @midwayjs/web (Egg)\nDESCRIPTION: This code demonstrates how to get and set cookies in a Midway.js web application using the Egg.js framework. It retrieves a cookie named 'count', increments its value, and then sets the updated value back as a cookie. The Context object provides the `cookies` property for managing cookies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cookies.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide, Inject } from '@midwayjs/decorator';\nimport { Context } from 'egg';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // 获取 cookie\n    let count = this.ctx.cookies.get('count');\n    count = count ? Number(count) : 0;\n\n    // 设置 cookie\n    this.ctx.cookies.set('count', ++count);\n\n    return count;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session in @midwayjs/express\nDESCRIPTION: This code demonstrates how to access and modify session data within a Midway.js Express controller. It uses `this.req.session` to increment a 'visits' counter on each request. Dependencies: @midwayjs/decorator, @midwayjs/express, express.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/express';\nimport { Request } from 'express';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  req: Request;\n\n  @Get('/')\n  async home() {\n    this.req.session.visits = this.req.session.visits ? this.req.session.visits + 1 : 1;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Role Decorator (TypeScript)\nDESCRIPTION: This code defines a custom decorator `@Role` that saves role metadata to a method.  This metadata can then be used by a guard to implement role-based authorization. The decorator uses `savePropertyMetadata` from `@midwayjs/core` to store the metadata.  It stores the role name(s) associated with a particular method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/role.decorator.ts\nimport { savePropertyMetadata } from '@midwayjs/core';\n\nexport const ROLE_META_KEY = 'role:name'\n\nexport function Role(roleName: string | string[]): MethodDecorator {\n  return (target, propertyKey, descriptor) => {\n    roleName = [].concat(roleName);\n    // 只保存元数据\n    savePropertyMetadata(ROLE_META_KEY, roleName, target, propertyKey);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding execution parameters to tasks\nDESCRIPTION: This TypeScript code demonstrates how to pass parameters to the execute method of a processor. The parameters are passed as an object to the `addJobToQueue` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute(params) {\n    // params.aaa => 1\n  }\n}\n\n\n// invoke\nconst testQueue = this.bullFramework.getQueue('test');\n// Execute this task immediately\nawait testQueue?.addJobToQueue({\n  aaa: 1,\n  bbb: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Logger output methods in MidwayJS\nDESCRIPTION: This example demonstrates the different output methods available for the MidwayJS logger: `debug()`, `info()`, `warn()`, `error()`, and `write()`. The `write()` method outputs the raw log without any formatting. Requires access to a logger instance (e.g., `ctx.logger`, `appLogger`, `coreLogger`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.debug('debug info');\nlogger.info('Startup takes %d ms', Date.now() - start);\nlogger.warn('warning!');\nlogger.error(new Error('my error'));\nlogger.write('abcdef');\n```\n\n----------------------------------------\n\nTITLE: Configuring cookie authentication in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure cookie authentication in the swagger configuration, including the securityName and cookieName, and associate the controller with `@ApiCookieAuth` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'cookie',\n      securityName: 'testforcookie',\n      cookieName: 'connect.sid',\n    },\n  },\n}\n\n@ApiCookieAuth('testforcookie')\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Timer Trigger in Alibaba Cloud Function Compute with Midway\nDESCRIPTION: This code snippet demonstrates how to bind a timer trigger in Alibaba Cloud Function Compute using the `@ServerlessTrigger` decorator in Midway. It handles scheduled events and logs the event information. Dependencies include `@midwayjs/core`, `@midwayjs/faas`, and `@midwayjs/fc-starter`. The input is a `TimerEvent` object, and the output is the string \"hello world\".\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\nimport type { TimerEvent } from '@midwayjs/fc-starter';\n\n@Provide()\nexport class HelloAliyunService {\n   @Inject()\n   ctx: Context;\n\n   @ServerlessTrigger(ServerlessTriggerType.TIMER)\n   async handleTimerEvent(event: TimerEvent) {\n     this.ctx.logger.info(event);\n     return 'hello world';\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Port Configuration (TypeScript)\nDESCRIPTION: Configures the port for the Socket.IO server when running in standalone mode or as a sub-framework in MidwayJS.  The `socketIO.port` property in `config.default.ts` sets the port when Socket.IO is the main application. In `config.unittest.ts`,  `koa.port` is set to `null` to prevent starting HTTP service during testing, while explicitly setting `socketIO.port` is important to allow testing of socket connections, because supertest doesn't generate a port when testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  socketIO: {\n    port: 3000\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.unittest\nexport default {\n  // ...\n  koa: {\n    port: null,\n  },\n  socketIO\n    port: 3000\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation by Size (config.default.ts)\nDESCRIPTION: This code shows how to configure log rotation based on file size using the `maxSize` property for the `file` and `error` transports in the `transports` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        file: {\n          maxSize: '100m',\n        },\n        error: {\n          maxSize: '100m',\n        },\n      }\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Run Grafana with Docker\nDESCRIPTION: Deploys Grafana using Docker. This allows for visualizing the metrics collected by Prometheus.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name=grafana -p 3000:3000 grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Define a Typegoose Entity (User)\nDESCRIPTION: This TypeScript code defines a Typegoose entity, User, with properties 'name' and 'jobs' using the @prop decorator.  The jobs property is defined as an array of strings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { prop } from '@typegoose/typegoose';\n\nexport class User {\n  @prop()\n  public name?: string;\n\n  @prop({ type: () => [String] })\n  public jobs?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Redis Store\nDESCRIPTION: Configures a Redis store for caching using the `createRedisStore` function. This example shows how to connect to a Redis instance defined in the `redis` configuration and use it as a cache store.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRedisStore } from '@midwayjs/cache-manager';\n\n// src/config/config.default.ts\nexport default {\n  cacheManager: {\n    clients: {\n      default: {\n        store: createRedisStore('default'),\n        options: {\n          ttl: 10,\n        }\n      },\n    },\n  },\n  redis: {\n    clients: {\n      default: {\n        port: 6379,\n        host: '127.0.0.1',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Controller Example - Typescript\nDESCRIPTION: This snippet shows an example of using the JWT authentication middleware in a controller. It defines a route that is protected by the JwtPassportMiddleware, which authenticates the user based on the JWT token in the request header.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Post, Inject, Controller } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { JwtService } from '@midwayjs/jwt';\nimport { JwtPassportMiddleware } from '../middleware/jwt.middleware';\n\n@Controller('/')\nexport class JwtController {\n\n  @Inject()\n  jwt: JwtService;\n\n  @Inject()\n  ctx: Context;\n\n  @Post('/passport/jwt', { middleware: [JwtPassportMiddleware] })\n  async jwtPassport() {\n    console.log('jwt user:', this.ctx.state.user);\n    return this.ctx.state.user;\n  }\n\n  @Post('/jwt')\n  async genJwt() {\n    return {\n      t: await this.jwt.sign({ msg: 'Hello Midway' })\n    };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: ValidateHttp Usage with Query Parameter Validation\nDESCRIPTION: This code snippet illustrates how to use `ValidateHttp` with Zod to validate query parameters. It defines an API endpoint `/api/filterPosts` that expects a `searchString` query parameter and validates it using a Zod schema.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Query,\n  useContext,\n  ValidateHttp,\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\n\nconst QuerySchema = z.object({\n  searchString: z.string().min(5),\n});\n\nexport const filterPosts = Api(\n  Get('/api/filterPosts'),\n  Query<z.infer<typeof QuerySchema>>(),\n  ValidateHttp({ query: QuerySchema }),\n  async () => {\n    const ctx = useContext();\n    return ctx.query.searchString;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Fully Custom Transport\nDESCRIPTION: This code snippet demonstrates how to create a fully custom transport. The CustomTransport class extends the base Transport class and implements the ITransport interface. It overrides the log method to send log messages to a remote service using remoteSdk.send. This transport handles errors that may occur during the asynchronous write to the remote log store. Requires `@midwayjs/logger`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Transport, ITransport, LoggerLevel, LogMeta } from '@midwayjs/logger';\n\n\n// Transport 的配置\ninterface CustomOptions {\n  // ...\n}\n\nclass CustomTransport extends Transport<CustomOptions> implements ITransport {\n  log(level: LoggerLevel | false, meta: LogMeta, ...args) {\n    // 使用内置的格式化方法格式化消息\n    let msg = this.format(level, meta, args) as string;\n  \n    // 异步写入日志库\n    remoteSdk.send(msg).catch(err => {\n      // 记录下错误或者忽略\n      console.error(err);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Prisma in Midway Hooks (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to query data from the database using Prisma within a Midway Hooks API. It imports necessary modules from '@midwayjs/hooks' and the 'prisma' client. It retrieves all published posts with their authors using 'prisma.post.findMany', applying a filter for 'published: true' and including related 'author' data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/prisma.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n} from '@midwayjs/hooks';\nimport { prisma } from './prisma';\n\nexport default Api(Get(), async () => {\n  const posts =\n    await prisma.post.findMany({\n      where: { published: true },\n      include: { author: true },\n    });\n  return posts;\n});\n```\n\n----------------------------------------\n\nTITLE: Default Security Configuration (TypeScript)\nDESCRIPTION: Shows the default security configuration options for the @midwayjs/security component.  This includes settings for CSRF protection, X-Frame-Options, Content Security Policy (CSP), HTTP Strict Transport Security (HSTS), X-Download-Options, X-Content-Type-Options, and X-XSS-Protection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/security.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n\n  // default configuration\n  security: {\n    csrf: {\n      enable: true\n      type: 'ctoken',\n      useSession: false\n      cookieName: 'csrfToken',\n      sessionName: 'csrfToken',\n      headerName: 'x-csrf-token',\n      bodyName: '_csrf',\n      queryName: '_csrf',\n      refererWhiteList: []\n    },\n    xframe: {\n      enable: true\n      value: 'SAMEORIGIN',\n    },\n    csp: {\n      enable: false\n    },\n    hsts: {\n      enable: false\n      maxAge: 365*24*3600\n      includeSubdomains: false\n    },\n    noopen: {\n      enable: false\n    },\n    nosniff: {\n      enable: false\n    },\n    xssProtection: {\n      enable: true\n      value: '1; mode=block',\n    },\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing All Body Parameters with @Body(ALL)\nDESCRIPTION: This example retrieves the entire request body as an object using the `@Body(ALL)` decorator. The `updateUser` method receives the complete request body mapped to a `User` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('/')\nasync updateUser(@Body(ALL) user: User): Promise<User> {\n  // user 等价于 ctx.request.body 整个 body 对象\n}\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Logger Transports\nDESCRIPTION: This code illustrates how to enable or disable different logger transports, such as file, console, error, and JSON transports, for a specific logger client. The example shows how to disable the file and error transports for the 'abcLogger'.  Another example shows disabling console output. A third example enables text and JSON output while disabling error output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      abcLogger: {\n        enableFile: false,\n        enableError: false,\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      abcLogger: {\n        enableConsole: false,\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      abcLogger: {\n        enableConsole: false,\n        enableFile: true,\n        enableError: false,\n        enableJSON: true,\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Using the RabbitMQ Service\nDESCRIPTION: This code snippet demonstrates how to use the RabbitMQ producer service within another service in MidwayJS. It injects the `RabbitmqService` and calls its `sendToQueue` method to send a message to a specified queue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class UserService {\n\n  @Inject()\n  rabbitmqService: RabbitmqService;\n\n\tasync invoke() {\n    // TODO\n\n    // Send a message\n  \tawait this.rabbitmqService.sendToQueue('tasks', {hello: 'world'});\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Translate Text with MidwayI18nService\nDESCRIPTION: Demonstrates how to use the `MidwayI18nService` to translate text based on a key and optional arguments. It injects the service, calls the `translate` method, and passes in the message key (`HELLO_MESSAGE`) along with the username for dynamic replacement. Requires `@midwayjs/i18n`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class UserController {\n\n  @Inject()\n  i18nService: MidwayI18nService;\n\n  @Get('/')\n  async index(@Query('username') username: string) {\n    return this.i18nService.translate('HELLO_MESSAGE', {\n      args: {\n        username\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for TypeORM in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure logging for TypeORM in a MidwayJS application. It shows how to adjust the default logging settings, including disabling logging for all data sources or for specific data sources.  The first snippet shows how to configure the default `typeormLogger` client. The second shows how to disable logging.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      typeormLogger: {\n        fileLogName: 'midway-typeorm.log',\n        enableError: false,\n        level: 'info',\n      },\n    },\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  typeorm: {\n    default: {\n      // 所有数据源关闭\n      logging: false,\n    },\n    dataSource: {\n      default: {\n        // 单个数据源关闭\n        logging: false,\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Dynamically Add Attributes in MidwayJS (onObjectCreated)\nDESCRIPTION: This example shows how to dynamically add attributes to a created object using the `onObjectCreated` lifecycle hook in MidwayJS. This allows modifications of object properties after they have been constructed by the container, before they are fully initialized.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/lifecycle.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectInitOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectCreated(ins: any, options: ObjectInitOptions): Promise<void> {\n    // Each created object will add a_name attribute\n    ins._name = 'xxxx';\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Prometheus Targets Configuration\nDESCRIPTION: This JSON configuration defines the targets for Prometheus to scrape metrics from. The `${ip}` placeholder should be replaced with the actual IP address of the Node.js application server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"targets\": [\"${ip}:7001\"],\n    \"labels\": {\n      \"env\": \"prod\",\n      \"job\": \"api\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Updated controller with dependency injection\nDESCRIPTION: This TypeScript code shows the updated WeatherController that injects the WeatherService using `@Inject`. It calls the service to fetch weather data and returns it as the HTTP response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Query } from '@midwayjs/core';\nimport { WeatherInfo } from '../interface';\nimport { WeatherService } from '../service/weather.service';\n\n@Controller('/')\nexport class WeatherController {\n\n  @Inject()\n  weatherService: WeatherService;\n\n  @Get('/weather')\n  async getWeatherInfo(@Query('cityId') cityId: string): Promise<WeatherInfo> {\n    return this.weatherService.getWeather(cityId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing multiple Applications with @App() and namespace\nDESCRIPTION: This example demonstrates how to access different application instances (koa and WebSocket) using the `@App()` decorator with a specified namespace.  This allows for injecting specific application instances when multiple protocols are exposed. Access to a specific Application is achieved by using the framework type or component namespace as the parameter for the @App() decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { Configuration, ILifeCycle } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as ws from '@midwayjs/ws';\n\n@Configuration({\n  imports: [koa, ws]\n})\nexport class MainConfiguration implements ILifeCycle {\n  @App()\n  koaApp: koa.Application;\n\n  @App('webSocket')\n  wsApp: ws.Application;\n\n  async onReady() {\n    this.koaApp.useMiddleweare(...);\n    this.wsApp.useMiddleweare(...);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delaying BullMQ Task Execution\nDESCRIPTION: This TypeScript code demonstrates how to delay the execution of a BullMQ task by specifying a `delay` option in milliseconds when adding the job to the queue.  Here, the task is delayed by 1 second.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullmqFramework.getQueue('test');\nawait testQueue?.addJobToQueue({}, { delay: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Single Route\nDESCRIPTION: This snippet shows how to apply a middleware (ReportMiddleware) to a specific route using the @Get decorator. The middleware is added to the middleware array in the second argument of the @Get decorator, which configures the route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\nimport { ReportMiddleware } from '../middleware/report.middlweare';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/', { middleware: [ ReportMiddleware ]})\n  async home() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Filter for Internal Server Error in Typescript\nDESCRIPTION: This code defines an exception filter `InternalServerErrorFilter` that catches `InternalServerErrorError` exceptions (HTTP 500).  It uses the `@Catch` decorator from `@midwayjs/core`.  The `catch` method handles the error and returns a custom response. Requires `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/internal.filter.ts\nimport { Catch, httpError, MidwayHttpError } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch(httpError.InternalServerErrorError)\nexport class InternalServerErrorFilter {\n  async catch(err: MidwayHttpError, ctx: Context) {\n\n    // ...\n    return 'got 500 error, '+ err.message;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript interface from Proto file\nDESCRIPTION: This TypeScript code shows the interface generated from the proto file. It includes the `Greeter` interface, `GreeterClient` interface, and the definitions of `HelloRequest` and `HelloReply` for type safety.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* This file is auto-generated by grpc-helper\n*/\n\nimport * as grpc from '@midwayjs/grpc';\n\n// Generated namespace\nexport namespace helloworld {\n\n  // Definition used by the server\n  export interface Greeter {\n    // Sends a greeting\n    sayHello(data: HelloRequest): Promise<HelloReply>;\n  }\n\n  // Definition used by the client\n  export interface GreeterClient {\n    // Sends a greeting\n    sayHello(options?: grpc.IClientOptions): grpc.IClientUnaryService<HelloRequest, HelloReply>;\n  }\n\n  // Request body structure\n  export interface HelloRequest {\n    name?: string;\n  }\n\n  // Response body structure\n  export interface HelloReply {\n    message?: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MidwayInformationService to access project data - TypeScript\nDESCRIPTION: This snippet showcases how to use the MidwayInformationService to access basic project data, like application directory. The `@Controller` decorator defines a controller, `@Inject` injects the `MidwayInformationService` instance, and `@Get` defines a route handler. The code comments indicates where the service API can be used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, MidwayInformationService } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  informationService: MidwayInformationService;\n\n  @Get('/')\n  async home() {\n    // this.informationService.getAppDir();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Config Values in Constructor (Incorrect)\nDESCRIPTION: Illustrates the incorrect way to access configuration values injected with `@Config` inside a constructor.  The `redisConfig` will be undefined because the property is not yet initialized at the time the constructor is executed.  Using `@Init` is the recommended approach.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/env_config.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class UserService {\n\n  @Config('redisConfig')\n  redisConfig;\n\n  constructor() {\n  \tconsole.log(this.redisConfig); // undefined\n  }\n\n  @Init()\n  async initMethod() {\n  \tconsole.log(this.redisConfig); // has value\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Context Logger Format\nDESCRIPTION: This TypeScript code shows how to configure the output format of the BullMQ context logger. It defines a custom function that formats the log message using information from the context and log event.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  bullmq: {\n    contextLoggerFormat: info => {\n      const { jobId, from } = info.ctx;\n      return `${info.timestamp} ${info.LEVEL} ${info.pid} [${jobId} ${from.name}] ${info.message}`;\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translate with Object Arguments (Typescript)\nDESCRIPTION: Demonstrates passing arguments as an object to the `translate` method. Placeholders in the translation text (e.g., `{username}`) are replaced by the values in the `args` object, matched by key. Requires `@midwayjs/i18n`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync index(@Query('username') username: string) {\n  return this.i18nService.translate('hello', {\n    args: {\n      username\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Get Single Body Parameter in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to retrieve a single parameter from the request body using the `@Body` decorator in a MidwayJS controller.  The `uid` parameter is extracted from the JSON body. It assumes that the bodyParser middleware is enabled to parse the request body. Dependencies: `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// POST /user/ HTTP/1.1\n// Host: localhost:3000\n// Content-Type: application/json; charset=UTF-8\n//\n// {\"uid\": \"1\", \"name\": \"harry\"}\nimport { Controller, Post, Body } from '@midwayjs/core';\n\n@Controller('/user')\nexport class UserController {\n  @Post('/')\n  async updateUser(@Body('uid') uid: string): Promise<User> {\n    // id is equivalent to ctx.request.body.uid\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Cron Tasks\nDESCRIPTION: This TypeScript snippet shows how to start and stop a cron job using the `start()` and `stop()` methods on the `CronJob` object. This allows you to control the execution of your scheduled tasks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as cron from '@midwayjs/cron';\nimport { InjectJob, CronJob } from '@midwayjs/cron';\nimport { DataSyncCheckerJob } from './job/sync.job';\n\n@Configuration({\n   imports: [\n     cron\n   ],\n})\nexport class ContainerConfiguration {\n   @InjectJob(DataSyncCheckerJob)\n   syncJob: CronJob;\n\n   async onServerReady() {\n     this.syncJob.start();\n    \n     //...\n     this.syncJob.stop();\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Registered Error Codes\nDESCRIPTION: This demonstrates how to use the registered error codes in a custom error class.  The `MidwayParameterError` is created with a specific error message and a registered error code for parameter type mismatches.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_error.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MidwayParameterError extends MidwayError {\n  constructor(message?: string) {\n    super(message ?? 'Parameter type not match', FrameworkErrorEnum.PARAM_TYPE);\n  }\n}\n\n// user code\nasync findAll(data) {\n  if (!data.user) {\n    throw new MidwayParameterError();\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to a Controller (TypeScript)\nDESCRIPTION: Demonstrates how to apply the `ReportMiddleware` to a controller using the `middleware` option in the `@Controller` decorator. This makes the specified middleware execute for all routes defined within that controller. The `ReportMiddleware` is imported and included in the middleware array within the `@Controller` decorator options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from '@midwayjs/core';\nimport { ReportMiddleware } from '../middleware/report.middlweare';\n\n@Controller('/', { middleware: [ ReportMiddleware ] })\nexport class HomeController {\n\n}\n```\n\n----------------------------------------\n\nTITLE: React Form for File Upload (TSX)\nDESCRIPTION: This React component creates a form that allows users to select and upload files. It uses a state variable to store the selected files and an `onSubmit` handler to send the files to the backend using the `upload` function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/upload.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport upload from './api/upload';\n\nfunction Form() {\n  const [file, setFile] =\n    React.useState<FileList>(null);\n\n  const handleSubmit = async (\n    e: React.FormEvent<HTMLFormElement>\n  ) => {\n    e.preventDefault();\n    const files = { images: file };\n    const response = await upload({\n      files\n    });\n    console.log(response);\n  };\n\n  const handleOnChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    console.log(e.target.files);\n    setFile(e.target.files);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Hooks File Upload</h1>\n      <input\n        multiple\n        type=\"file\"\n        onChange={handleOnChange}\n      />\n      <button type=\"submit\">\n        Upload\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Custom Framework (TypeScript)\nDESCRIPTION: This code snippet shows how to bootstrap a custom framework using the `@midwayjs/bootstrap` library. It requires the custom `Framework`, creates an instance, configures it with a port, and then loads and runs the framework. This is the standard procedure for starting any custom framework within a Midway application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_development.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst Framework = require('xxxxx').Framework;\nconst framework = new Framework().configure({\n  port: 7001,\n});\n\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap.load(framework).run();\n```\n\n----------------------------------------\n\nTITLE: Allowing Undefined Fields Globally in MidwayJS Validation (TypeScript)\nDESCRIPTION: This snippet demonstrates how to allow undefined fields during parameter validation globally by setting `allowUnknown: true` in the `validationOptions` of the `validate` configuration. This affects all validation operations within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  validate: {\n    validationOptions: {\n      allowUnknown: true, // global takes effect\n  \t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Build Script - Bash\nDESCRIPTION: This bash script outlines the steps for building a MidwayJS application on a server environment. It installs dependencies, builds the project, and removes development dependencies, ensuring a production-ready build. It is intended to be run after the code has been downloaded to the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n## 服务器构建（已经下载好代码）\n$ npm install             # 安装开发期依赖\n$ npm run build           # 构建项目\n$ npm prune --production  # 移除开发依赖\n\n## 本地构建（已经安装好 dev 依赖）\n$ npm run build\n$ npm prune --production  # 移除开发依赖\n```\n\n----------------------------------------\n\nTITLE: Post Request Handler in Midway Hooks (Simple Mode)\nDESCRIPTION: Defines a POST request handler in Midway Hooks that takes a `name` parameter and returns a message including the name and the request method. This demonstrates the simple mode, which is configured using the `routes` setting in `midway.config.js`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/file-route.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from '@midwayjs/hooks';\n\nexport async function post (\n  name: string\n) {\n  const ctx = useContext();\n\n  return {\n    message: 'Hello ${name}!',\n    method: ctx.method\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Casbin Model and Policy Paths\nDESCRIPTION: This code shows how to configure the paths to your Casbin model and policy files within the MidwayJS configuration file.  This allows Casbin to load the necessary definitions and rules for access control.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    casbin: {\n      modelPath: join(appInfo.appDir, 'basic_model.conf')\n      policyAdapter: join(appInfo.appDir, 'basic_policy.csv')\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Uploaded Files with MidwayJS\nDESCRIPTION: Demonstrates how to retrieve uploaded files and fields in a MidwayJS controller using the `@Files` and `@Fields` decorators.  The `files` parameter contains information about the uploaded files (filename, data, fieldname, mimeType), while `fields` contains other form data. The example returns the files and fields in the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Inject, Post, Files, Fields } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n   @Inject()\n   ctx;\n\n   @Post('/upload')\n   async upload(@Files() files, @Fields() fields) {\n     /*\n     files = [\n       {\n         filename: 'test.pdf', // original name of the file\n         data: '/var/tmp/xxx.pdf', // when the mode is file, it is the server temporary file address\n         fieldname: 'test1', // form field name\n         mimeType: 'application/pdf', // mime\n       },\n       {\n         filename: 'test.pdf', // original name of the file\n         data: ReadStream, // when the mode is stream, it is the server temporary file address\n         fieldname: 'test2', // form field name\n         mimeType: 'application/pdf', // mime\n       },\n       // ...file supports uploading multiple files at the same time\n     ]\n\n     */\n     return {\n       files,\n       fields\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MidwayMiddlewareService to compose middleware - TypeScript\nDESCRIPTION: This snippet showcases how to use the MidwayMiddlewareService to compose multiple middleware functions into a single middleware.  It defines a controller, injects the middleware service, and has a commented example usage within the route handler.  `@Controller`, `@Inject`, and `@Get` decorators are used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, MidwayMiddlewareService } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  middlewareService: MidwayMiddlewareService;\n\n  @Get('/')\n  async home() {\n    // this.middlewareService.compose(/** 省略 **/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a route with OOP in Midway.js\nDESCRIPTION: This code snippet demonstrates how to define a route using the Object-Oriented Programming (OOP) paradigm in Midway.js. It imports necessary modules, defines a controller class decorated with `@Controller`, and creates a method decorated with `@Get` to handle HTTP GET requests. The method returns a JSON response containing a message and the client's IP address obtained from the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/intro.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/controller/home.ts\nimport { Controller, Get } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context\n\n  @Get('/')\n  async home() {\n    return {\n      message: 'Hello Midwayjs!',\n      query: this.ctx.ip\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure entryFile in package.json (JSON)\nDESCRIPTION: Configures the `entryFile` in `package.json` for development and debugging with `midway-bin`.  The `--entryFile` parameter specifies the entry point for the application, which is typically `bootstrap.js`.  This allows `midway-bin` to correctly start the application with OpenTelemetry enabled.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"cross-env NODE_ENV=local midway-bin dev --ts --entryFile=bootstrap.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side gRPC Metadata Handling with Midwayjs\nDESCRIPTION: This code snippet demonstrates how to handle gRPC metadata on the server-side using Midwayjs. It retrieves client-provided metadata through `this.ctx.metadata` and sends metadata back to the client using `this.ctx.sendMetadata`.  It uses the `@GrpcMethod` decorator to define the gRPC method. The provider is registered using `MSProviderType.GRPC`. It depends on `@midwayjs/core` and `@midwayjs/grpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MSProviderType,\n  Provider,\n  GrpcMethod\n} from '@midwayjs/core';\nimport { helloworld } from '../domain/helloworld';\nimport { Context, Metadata } from '@midwayjs/grpc';\n\n/**\n * Implementation of helloworld.Greeter Interface Services\n */\n@Provider(MSProviderType.GRPC, { package: 'helloworld' })\nexport class Greeter implements helloworld.Greeter {\n\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod()\n  async sayHello(request: helloworld.HelloRequest) {\n\n    // Metadata passed by the client\n    console.log(this.ctx.metadata);\n\n    // Create metadata\n    const meta = new Metadata();\n    this.ctx.metadata.add('xxx', 'bbb');\n    this.ctx.sendMetadata(meta);\n\n    return { message: 'Hello '+ request.name };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Transactions with TypeORM in TypeScript\nDESCRIPTION: This code illustrates how to implement transactions in TypeORM with MidwayJS. It retrieves a data source, initiates a transaction using `dataSource.transaction()`, and then performs database operations within the transactional entity manager.  It assumes UserDTO is defined elsewhere.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { TypeORMDataSourceManager } from '@midwayjs/typeorm';\nimport { UserDTO } from '../entity/user';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  dataSourceManager: TypeORMDataSourceManager;\n\n  async updateUser(user: UserDTO) {\n\n    // get dataSource\n    const dataSource = this.dataSourceManager.getDataSource('default');\n\n    // start transaction\n    await dataSource.transaction(async (transactionalEntityManager) => {\n      // run code\n      await transactionalEntityManager.save(UserDTO, user);\n    });\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Uploaded Files - AsyncIterator Mode\nDESCRIPTION: Retrieves uploaded files and fields as AsyncGenerators using the @Files and @Fields decorators in 'asyncIterator' mode. The fileIterator allows processing each uploaded file as a stream.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post, Files, Fields } from '@midwayjs/core';\nimport { UploadStreamFileInfo, UploadStreamFieldInfo } from '@midwayjs/busboy';\n\n@Controller('/')\nexport class HomeController {\n\n  @Post('/upload', /*...*/) {\n  async upload(\n  \t@Files() fileIterator: AsyncGenerator<UploadStreamFileInfo>,\n    @Fields() fieldIterator: AsyncGenerator<UploadStreamFieldInfo>\n  ) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using `createBootstrap` with Timeout (TypeScript)\nDESCRIPTION: This snippet shows how to pass options into the `createBootstrap` to configure its timeout.  This is useful when the app takes more time to start. If the app does not start in the timeout duration, the test will fail.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBootstrap } from '@midwayjs/mock';\nimport { MidwayFrameworkType } from '@midwayjs/decorator';\n\ndescribe('/test/new.test.ts', () => {\n  it('should GET /', async () => {\n    // create app\n    const bootstrap = await createBootstrap(join(process.cwd(), 'bootstrap.js'), {\n      bootstrapTimeout: 10 * 1000, // 10s\n    });\n    const app = bootstrap.getApp(MidwayFrameworkType.WEB_KOA);\n\n    // expect and test\n\n    // close bootstrap\n    await bootstrap.close();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Entity Model with Connection Name - TypeScript\nDESCRIPTION: This snippet demonstrates how to inject an entity model, specifying a connection name to use a specific database connection configured in the `dataSource`. The `InjectEntityModel` decorator takes the entity and the connection name as arguments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { User } from './entity/user.entity';\n\nexport class XXX {\n\n  @InjectEntityModel(User, 'test')\n  testUserModel: Repository<User>;\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Pipe in MidwayJS\nDESCRIPTION: This code defines a custom pipe called `ValidatePipe` in MidwayJS that implements the `PipeTransform` interface. The `transform` method is where the data transformation or validation logic resides. The code requires the `@midwayjs/core` package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipe.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/pipe/validate.pipe.ts\nimport { Pipe, PipeTransform, TransformOptions } from '@midwayjs/core';\n\n@Pipe()\nexport class ValidatePipe implements PipeTransform<T, R> {\n  transform(value: T, options: TransformOptions): R {\n    return value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Execution Parameters to Task\nDESCRIPTION: This snippet shows how to pass parameters to a task during execution. The parameters are passed as an object to the `addJobToQueue` method, and they are accessible within the `execute` method of the processor.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute(params) {\n    // params.name => 'harry'\n  }\n}\n\n// invoke\nconst testQueue = this.bullmqFramework.getQueue('test');\nawait testQueue?.addJobToQueue({\n  aaa: 1,\n  bbb: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Broadcasting WebSocket Messages - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to broadcast WebSocket messages to all connected clients using the `@WSBroadCast()` decorator. The `gotMyMessage` function is executed when a client sends a 'message' event. The `@WSBroadCast()` decorator ensures that the returned value is sent to all connected clients.  `@OnWSDisConnection` handles disconnection events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, OnWSConnection, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/ws';\n\n@WSController()\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('message')\n  @WSBroadCast()\n  async gotMyMessage(data) {\n    return { name: 'harry', result: parseInt(data) + 5 };\n  }\n\n  @OnWSDisConnection()\n  async disconnect(id: number) {\n    console.log('disconnect ' + id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JWT Service API\nDESCRIPTION: This code demonstrates how to use the JwtService for signing, verifying, and decoding JWT tokens, both synchronously and asynchronously.  It injects the JwtService and then calls the sign, verify and decode methods.  These methods are wrappers around the node-jsonwebtoken library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/jwt.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { JwtService } from '@midwayjs/jwt';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  jwtService: JwtService;\n\n  async invoke() {\n    // Synchronization API\n    this.jwtService.signSync(payload, secretOrPrivateKey, options);\n    this.jwtService.verifySync(token, secretOrPublicKey, options);\n    this.jwtService.decodeSync(token, options);\n\n    // Asynchronous API\n    await this.jwtService.sign(payload, secretOrPrivateKey, options);\n    await this.jwtService.verify(token, secretOrPublicKey, options);\n    await this.jwtService.decode(token, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Guard implementation example in TypeScript\nDESCRIPTION: This code snippet shows how to implement a Guard in TypeScript using the `@Guard` decorator from `@midwayjs/core`.  It defines an `AuthGuard` class that implements the `IGuard` interface. The `canActivate` method determines whether a request can proceed based on the context, supplier class, and method name. It returns a boolean indicating whether to proceed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IMiddleware, Guard, IGuard } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Guard()\nexport class AuthGuard implements IGuard<Context> {\n  async canActivate(context: Context, suppilerClz, methodName: string): Promise<boolean> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement gRPC Service Provider in TypeScript\nDESCRIPTION: This TypeScript code implements the `helloworld.Greeter` service. The `@Provider` decorator exposes the class as a gRPC service, and the `@GrpcMethod` decorator exposes the `sayHello` method as a gRPC endpoint. The package name is specified as metadata.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MSProviderType,\n  Provider,\n  GrpcMethod\n} from '@midwayjs/core';\nimport { helloworld } from '../domain/helloworld';\n\n/**\n * Implementation of helloworld.Greeter Interface Services\n */\n@Provider(MSProviderType.GRPC, { package: 'helloworld' })\nexport class Greeter implements helloworld.Greeter {\n\n  @GrpcMethod()\n  async sayHello(request: helloworld.HelloRequest) {\n    return { message: 'Hello '+ request.name };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Configuration (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure MidwayJS Bull to connect to a Redis cluster using `ioredis`. It defines cluster options and creates a `Redis.Cluster` instance with the specified nodes and options. The `createClient` function is then overridden to return this instance, allowing Bull to connect to the Redis cluster.  The prefix option is used to distinguish between keys. Dependencies: ioredis.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport Redis from 'ioredis';\n\nconst clusterOptions = {\n  enableReadyCheck: false, // must be false\n  retryDelayOnClusterDown: 300,\n  retryDelayOnFailover: 1000,\n  retryDelayOnTryAgain: 3000,\n  slotsRefreshTimeout: 10000,\n  maxRetriesPerRequest: null // must be null\n}\n\nconst redisClientInstance = new Redis.\n  Cluster([\n    port: 7000,\n    host: '127.0.0.1'\n  },\n  {\n    port: 7002,\n    host: '127.0.0.1'\n  },\n], clusterOptions);\n\nexport default {\n  bull: {\n    defaultQueueOptions: {\n      createClient: (type, opts) => {\n        return redisClientInstance;\n      },\n      // The keys stored for these tasks all start with the same key to distinguish the user's original redis configuration\n      prefix: '{midway-bull}',\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize MidwayJS project with ESM\nDESCRIPTION: This command initializes a new MidwayJS project with an ESM-based scaffolding. It simplifies the project setup by pre-configuring the project to use ESM modules. Execute this command in your terminal to scaffold a new ESM project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/esm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Build Script - CLI - JSON\nDESCRIPTION: This code snippet demonstrates the `build` script configuration using `@midwayjs/cli`. The `midway-bin build -c` command compiles the TypeScript code into JavaScript. This prepares the application for deployment by creating a `dist` directory with the compiled code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"midway-bin build -c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with TypeORM in MidwayJS\nDESCRIPTION: This snippet demonstrates how to query data from a database using TypeORM within a MidwayJS service. It shows different ways to retrieve records, including finding all records, the first record, records based on specific criteria, and counting the total number of records.  It depends on the Photo entity and the TypeORM Repository.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from '../entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhotos() {\n\n    // find All\n    let allPhotos = await this.photoModel.find({});\n    console.log(\"All photos from the db: \", allPhotos);\n\n    // find first\n    let firstPhoto = await this.photoModel.findOne({\n      where: {\n        id: 1\n      }\n    });\n    console.log(\"First photo from the db: \", firstPhoto);\n\n    // find one by name\n    let meAndBearsPhoto = await this.photoModel.findOne({\n      where: { name: \"Me and Bears\" }\n    });\n    console.log(\"Me and Bears photo from the db: \", meAndBearsPhoto);\n\n    // find by views\n    let allViewedPhotos = await this.photoModel.find({\n      where: { views: 1 }\n    });\n    console.log(\"All viewed photos: \", allViewedPhotos);\n\n    let allPublishedPhotos = await this.photoModel.find({\n      where: { isPublished: true }\n    });\n    console.log(\"All published photos: \", allPublishedPhotos);\n\n  \t// find and get count\n    let [allPhotos, photosCount] = await this.photoModel.findAndCount({});\n    console.log(\"All photos: \", allPhotos);\n    console.log(\"Photos count: \", photosCount);\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining single file upload with Swagger in TypeScript\nDESCRIPTION: This snippet illustrates how to define a DTO for single file uploads using the Swagger module in MidwayJS. The `@ApiProperty` decorator is used to specify that the 'file' property should be treated as a binary string. This definition allows Swagger UI to correctly display a file upload input field.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CreateCatDto {\n  // ...\n  @ApiProperty({\n    type: 'string',\n    format: 'binary',\n  })\n  file: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a MongoDB Entity with Typegoose\nDESCRIPTION: This TypeScript code defines a MongoDB entity (model) called `User` using Typegoose. It uses decorators from `@typegoose/typegoose` to define the schema properties, such as `name` (string) and `jobs` (array of strings).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prop } from '@typegoose/typegoose';\n\nexport class User {\n  @prop()\n  public name?: string;\n\n  @prop({ type: () => [String] })\n  public jobs?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Install JWT Dependencies - Bash\nDESCRIPTION: This snippet shows how to install the necessary dependencies for using JWT authentication, including @midwayjs/jwt and passport-jwt.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/jwt passport-jwt --save\n```\n\n----------------------------------------\n\nTITLE: Modifying Express Context Log\nDESCRIPTION: This code snippet shows how to modify the context log format for the Express module. It defines a function that formats the log message, including timestamp, log level, process ID, user ID, request duration, and request method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/express.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  express: {\n    contextLoggerFormat: info => {\n      // equivalent req\n      const req = info.ctx;\n      const userId = req?.['session']?.['userId'] || '-';\n      return '${info.timestamp} ${info.LEVEL} ${info.pid} [${userId} - ${Date.now() - req.startTime}ms ${req.method}] ${info.message}';\n    }\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Guard in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a Guard class in TypeScript using the `@Guard` decorator from `@midwayjs/core`. The `canActivate` method determines whether a route can be accessed, returning `true` to allow access or `false` to deny it. It depends on `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IMiddleware, Guard, IGuard } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Guard()\nexport class AuthGuard implements IGuard<Context> {\n  async canActivate(context: Context, supplierClz, methodName: string): Promise<boolean> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Decorator Logic\nDESCRIPTION: This code snippet implements the logic for the `@MemoryCache` decorator.  It uses `registerPropertyHandler` from `MidwayDecoratorService` to associate the `MEMORY_CACHE_KEY` with a callback function. This callback retrieves the cache value from the `MemoryStore` using the key provided when the decorator was used. The configuration imports modules from `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject, Init } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { MEMORY_CACHE_KEY, MemoryStore } from 'decorator/memoryCache.decorator';\nimport { MidwayDecoratorService } from '@midwayjs/core';\n\n@Configuration({\n  imports: [koa]\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  store: MemoryStore;\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Init()\n  async init() {\n    // ...\n\n    // Realize decorator\n    this.decoratorService.registerPropertyHandler(MEMORY_CACHE_KEY, (propertyName, meta) => {\n      return this.store.get(meta.key);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Route Prefix for Egg.js in Midway\nDESCRIPTION: This code snippet shows how to configure a global route prefix for Egg.js applications in the `src/config/config.default.ts` file. The `globalPrefix` property under the `egg` key sets the prefix for all routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  egg: {\n    globalPrefix: '/v1'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Guards (TypeScript)\nDESCRIPTION: Demonstrates applying multiple guards to a route by passing an array of guard classes to the `@UseGuard` decorator. Both `AuthGuard` and `Auth2Guard` will be executed before the route handler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@UseGuard([AuthGuard, Auth2Guard])\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller with a Route Prefix\nDESCRIPTION: This code demonstrates creating a controller with a route prefix. The `@Controller('/api/user')` decorator ensures that all routes within the `UserController` class will be prefixed with `/api/user`.  This helps in organizing routes and grouping related API endpoints.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n\nimport { Controller, Provide } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/api/user')\nexport class UserController {\n  // xxxx\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Dockerfile for MidwayJS with Multi-stage Build\nDESCRIPTION: This Dockerfile optimizes the image size by using a multi-stage build.  The first stage builds the application, and the second stage copies only the necessary artifacts (source code, built files, bootstrap.js, and package.json) to a smaller base image (node:18-alpine).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_15\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:18 AS build\n\nWORKDIR /app\n\nCOPY . .\n\nRUN npm install\n\nRUN npm run build\n\nFROM node:18-alpine\n\nWORKDIR /app\n\n# Copy the source code and the error can be reported to the right line\nCOPY --from=build /app/src ./src\nCOPY --from=build /app/dist ./dist\nCOPY --from=build /app/bootstrap.js ./\nCOPY --from=build /app/package.json ./\n\nRUN apk add --no-cache tzdata\n\nENV TZ=\"Asia/Shanghai\"\n\nRUN npm install --production\n\n# If the port is changed, this side can be updated\nEXPOSE 7001\n\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Local API with SAM - Bash\nDESCRIPTION: These commands use the AWS SAM CLI to build the serverless application and start a local API endpoint for testing.  The `sam build` command compiles the application code and creates the necessary deployment package. The `sam local start-api` command starts a local API gateway that can be used to test the Lambda function before deployment to AWS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aws_lambda.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd sam\n$ sam build # builds sam \n$ sam local start-api # start local api\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Data Source - TypeScript\nDESCRIPTION: This snippet shows how to specify a default data source when using multiple data sources in a MidwayJS application with TypeORM. The `defaultDataSourceName` property in the `typeorm` configuration is used to define the default data source to use.  It assumes that `default1` and `default2` are defined data sources in the dataSource configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default1: {\n        // ...\n      },\n      default2: {\n        // ...\n      },\n    },\n    // 多个数据源时可以用这个指定默认的数据源\n    defaultDataSourceName: 'default1',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a basic API endpoint with GET method\nDESCRIPTION: This snippet demonstrates the creation of a simple API endpoint using the `Api` and `Get` functions from `@midwayjs/hooks`. It defines a GET route that returns \"Hello World!\".\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get(), // Http Path: /api/hello,\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Returning data using return keyword (Typescript)\nDESCRIPTION: Demonstrates returning different types of data from a MidwayJS controller method, including strings, JSON objects, HTML, and streams.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, HttpCode } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // 返回字符串\n    return \"Hello Midwayjs!\";\n\n    // 返回 json\n    return {\n      a: 1,\n      b: 2,\n    };\n\n    // 返回 html\n    return '<html><h1>Hello</h1></html>';\n\n    // 返回 stream\n    return fs.createReadStream('./good.png');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Request Middleware\nDESCRIPTION: This TypeScript code defines a basic middleware function that logs request information (method, URL) and measures the request processing time using `useContext` to access the Koa context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/middleware.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/koa';\nimport { useContext } from '@midwayjs/hooks';\n\nconst logger = async (next: any) => {\n  const ctx = useContext<Context>();\n\n  console.log(\n    `<-- [${ctx.method}] ${ctx.url}`\n  );\n\n  const start = Date.now();\n  await next();\n  const cost = Date.now() - start;\n\n  console.log(\n    `--> [${ctx.method}] ${ctx.url} ${cost}ms`\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Column with Options\nDESCRIPTION: This TypeScript code demonstrates how to define a column with additional options, such as `type` and `comment`, within a Sequelize model using the `@Column` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, Column, DataType } from 'sequelize-typescript'\n\n@Table\nexport class Person extends Model {\n  @Column({\n    type: DataType.FLOAT,\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Web Middleware in MidwayJS (TypeScript)\nDESCRIPTION: This code demonstrates how to apply a middleware to a MidwayJS application. It imports the `ReportMiddleware` and uses the `app.useMiddleware()` method in the `onReady` lifecycle hook to register the middleware. The middleware will then be executed for every request that reaches the application. Requires `@midwayjs/core` and `@midwayjs/web`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration } from '@midwayjs/core';\nimport * as egg from '@midwayjs/web';\nimport { ReportMiddleware } from './middleware/user.middleware';\n\n@Configuration({\n  imports: [egg]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: egg.Application;\n\n  async onReady() {\n    this.app.useMiddleware(ReportMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Subscription with DataListener in TypeScript\nDESCRIPTION: This code demonstrates how to create a data subscription in MidwayJS by extending the `DataListener` class. It initializes data in the `initData` method and updates it every 1 second in the `onData` method using `setData`. The class is decorated with `@Provide` and `@Scope` to be a singleton managed by the dependency injection container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_listener.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/listener/memory.listner.ts\nimport { Provide, Scope, ScopeEnum } from '@midwayjs/core';\nimport { DataListener } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MemoryDataListener extends DataListener<string> {\n  // 初始化数据\n  initData() {\n    return 'hello' + Date.now();\n  }\n\n  // 更新数据\n  onData(setData) {\n    setInterval(() => {\n      setData('hello' + Date.now());\n    }, 1000);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bi-Directional Streaming (TypeScript)\nDESCRIPTION: This code demonstrates how to implement a bidirectional streaming gRPC method. The service uses `@GrpcMethod({type: GrpcStreamTypeEnum.DUPLEX, onEnd: 'duplexEnd' })` to define the method.  The `addMore` method processes incoming messages, and the `duplexEnd` method is called when the client closes the stream. `ctx.write` returns data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, GrpcStreamTypeEnum, Inject, MSProviderType, Provider } from '@midwayjs/core';\nimport { Context, Metadata } from '@midwayjs/grpc';\nimport { math } from '../interface';\n\n/**\n */\n@Provider(MSProviderType.GRPC, { package: 'math' })\nexport class Math implements math.Math {\n\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod({type: GrpcStreamTypeEnum.DUPLEX, onEnd: 'duplexEnd' })\n  async addMore(message: math.AddArgs)  {\n    this.ctx.write({\n      id: message.id,\n      num: message.num + 10,\n    });\n  }\n\n  async duplexEnd() {\n    console.log('got client end message');\n  }\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect UserService Injection in Middleware (TypeScript)\nDESCRIPTION: This code demonstrates a common mistake where a request-scoped `UserService` is injected into a singleton middleware. This leads to the `ctx` object within `UserService` being empty because the middleware is initialized outside the request context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// The following paragraph is an example of error\n\n@Provide()\nexport class UserService {\n  @Inject()\n  ctx: Context;\n\n  async getUser() {\n    const id = this.ctx.xxxx;\n    // ctx not found, will throw error\n  }\n}\n\n// Middleware is a singleton\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n  @Inject()\n  userService: UserService; // The user service here is the request scope\n\n  resolve() {\n  \treturn async(ctx, next) => {\n      await this.userService.getUser();\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Strings for XSS Prevention (TypeScript)\nDESCRIPTION: Demonstrates how to use `ctx.security.escape()` to filter strings and prevent XSS attacks in a MidwayJS controller.  This method escapes HTML entities in the string. It helps mitigate reflective XSS attacks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/security.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx;\n\n  @Get('/home')\n  async home() {\n    const str = '<script>alert('xss')</script>';\n    const escapedStr = this.ctx.security.escape(str);\n    // <script>alert(&quot;xss&quot;) </script>\n    return escapedStr;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration with Host Example\nDESCRIPTION: This TypeScript code demonstrates a proxy configuration using the `host` option.  It matches requests to `/tfs /` and proxies them to a specific host.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/http-proxy.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  httpProxy: {\n    match: /\\/tfs \\//,\n    host: 'https://gw.alicdn.com',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Cache Data in Configuration\nDESCRIPTION: This code snippet initializes the `MemoryStore` with some sample data (`aaa` and `bbb`) in the `onReady` lifecycle hook of the `MainConfiguration` class.  It uses `@App` and `@Inject` decorators to access the application and store instances, respectively. The configuration imports modules from `@midwayjs/core`, `path`, and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n// The entry is instantiated and some data is saved.\nimport { Configuration, App, Inject } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n  imports: [koa]\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  store: MemoryStore;\n\n  async onReady() {\n    // ...\n\n    // Initialize some data\n    store.save('aaa', 1);\n    store.save('bbb', 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Streaming Response with Custom Content Type (TypeScript)\nDESCRIPTION: This code shows how to use the `file` method of `HttpServerResponse` to send a file with a custom content type. It takes the file path and the content type as input.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, sleep, HttpServerResponse } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n  \n  @Get('/')\n  async home() {\n    const filePath = join(__dirname, '../../package.json');\n    return new HttpServerResponse(this.ctx).file(filePath, 'application/json');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing I18n Configuration with Locale Table - Typescript\nDESCRIPTION: This code snippet demonstrates the default configuration for the i18n module in MidwayJS. It shows how to set the default locale, define a locale table with translations for different languages (en_US and zh_CN), configure language fallbacks, and enable writing the language to a cookie. The cookie configuration includes setting the domain and max age.  The `localsField` determines where the i18n object is stored in the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    // Default language \"en_US\"\n    defaultLocale: 'en_US',\n\n    // Put your translated text here\n    localeTable: {\n      en_US: {\n        // group name\n        default: {\n          // hello: 'hello'\n        }\n      },\n      zh_CN: {\n        // group name\n        default: {\n          // hello: '你好'\n        }\n      },\n    },\n\n    // Language mapping, you can use * to match\n    fallbacks: {\n      // 'en_* ': ' en_US',\n      // pt: 'pt-BR',\n    },\n    // Whether to write the request parameter to the cookie\n    writeCookie: true\n    resolver: {\n      // url query parameter, default is \"locale\"\n      queryField: 'locale',\n      cookieField: {\n        // The key in Cookie is \"locale\" by default\"\n        fieldName: 'locale',\n        // Cookie domain name, which is empty by default, indicates that the current domain name is valid.\n        cookieDomain: '',\n        // The default expiration time of the cookie. Default is one year.\n        cookieMaxAge: FORMAT.MS.ONE_YEAR\n      },\n    },\n    localsField: 'i18n',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Session Data in Controller (Koa)\nDESCRIPTION: This code snippet demonstrates how to access and modify session data within a MidwayJS controller using the `ctx.session` object. It retrieves a `userId` from the session, uses it to fetch posts, and increments a `visited` counter in the session. Dependencies: `@midwayjs/core`, `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // Get the content on the Session\n    const userId = this.ctx.session.userId;\n    const posts = await this.ctx.service.post.fetch(userId);\n    // Modify the value of the Session\n    this.ctx.session.visited = ctx.session.visited? (ctx.session.visited + 1) : 1;\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using UserService in APIController (TypeScript)\nDESCRIPTION: This code shows how to inject and use the UserService in an APIController. The @Inject decorator is used to inject an instance of UserService into the userService property. The getUser method retrieves user data using the injected service and returns it in a structured response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide, Query } from '@midwayjs/core';\nimport { UserService } from '../service/user';\n\n@Controller('/api/user')\nexport class APIController {\n\n  @Inject()\n  userService: UserService;\n\n  @Get('/')\n  async getUser(@Query('id') uid) {\n    const user = await this.userService.getUser(uid);\n    return {success: true, message: 'OK', data: user};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Service Consumption\nDESCRIPTION: This TypeScript snippet shows how to configure the consumption of gRPC services within a Midway.js application's `config.default.ts` file. It defines the `grpc.services` array, specifying the `url` (address of the gRPC server), `protoPath` (path to the proto file), and `package` (package name defined in the proto file) for each service to be consumed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { MidwayAppInfo, MidwayConfig } from '@midwayjs/core';\n\nexport default (appInfo: MidwayAppInfo): MidwayConfig => {\n  return {\n    // ...\n    grpc: {\n      services: [\n        {\n          url: 'localhost:6565',\n          protoPath: join(appInfo.appDir, 'proto/helloworld.proto'),\n          package: 'helloworld',\n        },\n      ],\n    },\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Serverless Function Dynamically in Midway.js\nDESCRIPTION: This snippet demonstrates how to dynamically add an HTTP-triggered Serverless function using the `MidwayServerlessFunctionService`. It injects the service and uses the `addServerlessFunction` method. The first parameter is an async function representing the handler, and the second parameter is an object configuring the trigger (type, metadata, functionName, and handlerName). Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, Inject, MidwayServerlessFunctionService } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  serverlessFunctionService: MidwayServerlessFunctionService;\n\n  async onReady() {\n    this.serverlessFunctionService.addServerlessFunction(async (ctx, event) => {\n      return 'hello world';\n    }, {\n      type: ServerlessTriggerType.HTTP,\n      metadata: {\n        method: 'get',\n        path: '/api/hello'\n      },\n      functionName: 'hello',\n      handlerName: 'index.hello',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Context Logger in Koa with MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to customize the context logger format in a Koa application within MidwayJS. This enables modifying the format of log messages generated by the Koa context, including timestamp, log level, process ID, user ID, request duration, and HTTP method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  koa: {\n    contextLoggerFormat: info => {\n      const ctx = info.ctx;\n      return `${info.timestamp} ${info.LEVEL} ${info.pid} [${ctx.userId} - ${Date.now() - ctx.startTime}ms ${ctx.method}] ${info.message}`;\n    }\n    // ...\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Common Validation Rule Examples\nDESCRIPTION: This snippet provides examples of common validation rules using `RuleType` from the `@midwayjs/validate` package. It showcases how to define rules for numbers, strings, objects, and arrays, including requirements, length constraints, and regular expression matching.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nRuleType.number().required(); // Number, required\nRuleType.string().empty('') // string is not required\nRuleType.number().max(10).min(1); //Number, Maximum and Minimum\nRuleType.number().greater(10).less(50); // Number, greater than 10, less than 50\n\nRuleType.string().max(10).min(5); //String, maximum length 10, minimum 5\nRuleType.string().length(20); //String, length 20\nRuleType.string().pattern(/^[abc]+$/); // String, matching regular format\n\nRuleType.object().length(5); // Object, key number equals 5\n\n\nRuleType.array().items(RuleType.string()); //Array, each element is a string\nRuleType.array().max(10); // Array, maximum length is 10\nRuleType.array().min(10); //Array, minimum length is 10\nRuleType.array().length(10); // Array, length 10\n\nRuleType.string().allow('') // non-required fields pass in an empty string\n\nexport enum DeviceType {\n  iOS = 'ios',\n  Android = 'android',\n}\nRuleType.string().valid(...Object.values(DeviceType)) // validate by enum\n```\n\n----------------------------------------\n\nTITLE: Modify package.json for egg-scripts\nDESCRIPTION: Modifies the `package.json` file to include the `tel.js` file (created for OpenTelemetry initialization when using egg-scripts). The `--require` flag ensures that the OpenTelemetry initialization code runs before the application starts. This is essential to begin tracing from the application's entry point.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    \"start\": \"egg-scripts start --daemon --title=**** --framework=@midwayjs/web --require=./otel.js \",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie with Options - TypeScript\nDESCRIPTION: This snippet shows how to set a cookie with various options such as domain, path, maxAge, expires, httpOnly, and overwrite in a MidwayJS Koa application. The example sets a cookie named 'cid' with the value 'hello world' and configures its properties for specific domain access, path, expiration, and HTTP-only flag. This configuration controls how the cookie is stored and transmitted by the browser.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.cookies.set('cid', 'hello world', {\n      Domain: 'localhost', // write the domain name where the cookie is located\n      Path: '/index', // the path where the cookie is written\n      MaxAge: 10*60*1000, // cookie valid duration\n      expires: new Date('2017-02-15'), // cookie expiration time\n      httpOnly: false, // is it only used for http requests\n      overwrite: false, // whether rewrite is allowed\n    });\n    ctx.body = 'cookie is OK';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fanout Exchange Consumer\nDESCRIPTION: This TypeScript snippet demonstrates how to implement a RabbitMQ consumer that listens to a fanout exchange in a MidwayJS application. It uses the `@RabbitMQListener` decorator with specific options to configure the exchange and queue.  Messages are broadcast to all bound queues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Consumer, MSListenerType, RabbitMQListener, Inject, App } from '@midwayjs/core';\nimport { Context, Application } from '@midwayjs/rabbitmq';\nimport { ConsumeMessage } from 'amqplib';\n\n@Consumer(MSListenerType.RABBITMQ)\nexport class UserConsumer {\n\n  @App()\n  app: Application;\n\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  logger;\n\n  @RabbitMQListener('abc', {\n    exchange: 'logs',\n    exchangeOptions: {\n      type: 'fanout',\n      durable: false,\n    },\n    exclusive: true,\n    consumeOptions: {\n      noAck: true,\n    }\n  })\n  async gotData(msg: ConsumeMessage) {\n    this.logger.info('test output1 =>', msg.content.toString('utf8'));\n    // TODO\n  }\n\n  @RabbitMQListener('bcd', {\n    exchange: 'logs',\n    exchangeOptions: {\n      type: 'fanout',\n      durable: false,\n    },\n    exclusive: true,\n    consumeOptions: {\n      noAck: true,\n    }\n  })\n  async gotData2(msg: ConsumeMessage) {\n    this.logger.info('test output2 =>', msg.content.toString('utf8'));\n    // TODO\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Client Instances (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure multiple HTTP client instances using the `clients` property in the `httpClient` configuration. Each key in the `clients` object represents a named instance with its own specific configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  default: {\n    timeout: 3000\n  },\n  clients: {\n  \taaa: {\n    \tbaseUrl: ''\n    },\n    bbb: {\n    \tbaseUrl: ''\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SameSite Option of Session Cookie\nDESCRIPTION: This code configures the `sameSite` and `secure` options for the session cookie. Setting `sameSite` to `'none'` and `secure` to `true` is necessary when supporting cross-origin requests.  Ensure proper SSL setup to prevent security vulnerabilities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  session: {\n    sameSite: 'none',\n    // SameSite=None cookies must be Secure\n    secure: true,\n    // ...\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Object Form Configuration - TypeScript\nDESCRIPTION: Demonstrates the object form of a configuration file in TypeScript.  It exports a default object containing configuration properties such as `keys` and `koa.port`.  The type `MidwayConfig` from `@midwayjs/core` is used for type safety.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   keys: '1639994056460_8009',\n   koa: {\n     port: 7001,\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Basic Controller and Route Definition\nDESCRIPTION: Defines a simple controller with a GET route at the root ('/').  The `@Controller` decorator marks the class as a controller, and `@Get` maps the `home` method to the '/' route, responding with \"Hello Midwayjs!\".  Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    return \"Hello Midwayjs!\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Type Validation Example\nDESCRIPTION: This snippet demonstrates how to define a property that can accept multiple data types using `RuleType.alternatives` and `getSchema`. This allows for flexible validation where a field can be either a primitive type or a complex DTO.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType, getSchema } from '@midwayjs/validate';\n\nexport class SchoolDTO {\n  @Rule(RuleType.string().required())\n  name: string;\n  @Rule(RuleType.string())\n  address: string;\n}\n\nexport class UserDTO {\n\n  @Rule(RuleType.string().required())\n  name: string;\n\n  @Rule(RuleType.alternatives([RuleType.string(), getSchema(SchoolDTO)]).required())\n  school: string | SchoolDTO;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Route with GET Method\nDESCRIPTION: This code snippet defines a basic route using the `@Controller` and `@Get` decorators in MidwayJS. The `@Controller` decorator specifies the route prefix, and the `@Get` decorator maps the `home` method to the `/` route, responding with \"Hello Midwayjs!\" when accessed via a GET request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    return \"Hello Midwayjs!\";\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Use Default ETCD Client\nDESCRIPTION: This TypeScript example shows how to use the default ETCD client in a MidwayJS service. It injects the `ETCDService` and uses its methods (e.g., `put`, `get`, `getAll`, `delete`) to interact with the ETCD server.  It demonstrates basic CRUD operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/etcd.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { ETCDService } from '@midwayjs/etcd';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  etcdService: etcdService;\n\n  async invoke() {\n\n    await this.etcdService.put('foo').value('bar');\n\n    const fooValue = await this.etcdService.get('foo').string();\n    console.log('foo was:', fooValue);\n\n    const allFValues = await this.etcdService.getAll().prefix('f').keys();\n    console.log('all our keys starting with \"f\":', allFValues);\n\n    await this.etcdService.delete().all();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status Code Using Decorator (Typescript)\nDESCRIPTION: This snippet demonstrates how to set the HTTP status code of a response using the `@HttpCode` decorator in a MidwayJS controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, HttpCode } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  @HttpCode(201)\n  async home() {\n    return \"Hello Midwayjs!\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure with Interface\nDESCRIPTION: Shows the project directory structure, including the user controller and interface files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   ├── controller\n│   │   ├── user.ts\n│   │   └── home.ts\n│   └── interface.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Using Kafka Producer with Injection\nDESCRIPTION: This TypeScript code demonstrates how to use the `@InjectClient` decorator to inject a Kafka producer instance into a service. It shows how to send messages to a specified topic using the injected producer.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/user.service.ts\nimport { Provide, InjectClient } from '@midwayjs/core';\nimport { KafkaProducerFactory, Producer } from '@midwayjs/kafka';\n\n@Provide()\nexport class UserService {\n  \n  @InjectClient(KafkaProducerFactory, 'pub1')\n  producer: Producer;\n  \n  async invoke() {\n    await this.producer.send({\n      topic: 'topic-test-1',\n      messages: [{ key: 'message-key1', value: 'hello consumer 11 !' }],\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding JSON for XSS Prevention in JavaScript (TypeScript)\nDESCRIPTION: Illustrates how to encode JSON data using `ctx.security.json()` to prevent XSS vulnerabilities when outputting JSON within JavaScript in a MidwayJS controller.  This ensures that the JSON is properly escaped.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/security.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx;\n\n  @Get('/home')\n  async home() {\n    return '<script>windows.config = ${this.ctx.security.json( ...variable )};</script>';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Data Source using SequelizeDataSourceManager\nDESCRIPTION: This example shows how to retrieve a Sequelize data source using the `SequelizeDataSourceManager` in a MidwayJS application. The data source manager provides access to the configured Sequelize instances. It can also be accessed via decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { SequelizeDataSourceManager } from '@midwayjs/sequelize';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n    const dataSourceManager = await container.getAsync(SequelizeDataSourceManager);\n    const conn = dataSourceManager.getDataSource('default');\n    await conn.authenticate();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Sequelize Options\nDESCRIPTION: Configures the Sequelize connection options within the config.default.ts file. This includes database name, username, password, host, port, dialect, timezone and other related settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sequelize = {\n  options: {\n    database: 'test4',\n    username: 'root',\n    password: '123456',\n    host: '127.0.0.1', // 此处支持idb上面vipserver key的那种方式，也支持aliyun的地址。\n    port: 3306,\n    encrypt: false,\n    dialect: 'mysql',\n    define: { charset: 'utf8' },\n    timezone: '+08:00',\n    logging: console.log,\n  },\n  sync: false, // 本地的时候，可以通过sync: true直接createTable\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Upload Middleware (Route)\nDESCRIPTION: This TypeScript code snippet illustrates how to configure the UploadMiddleware from @midwayjs/busboy for a specific route in a MidwayJS controller.  This restricts upload handling to only that route, improving performance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post } from '@midwayjs/core';\nimport { UploadMiddleware } from '@midwayjs/busboy';\n\n@Controller('/')\nexport class HomeController {\n\n  @Post('/upload', { middleware: [UploadMiddleware] })\n  async upload(/*...*/) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Routes with GET and POST Methods\nDESCRIPTION: This code snippet defines multiple routes using the `@Controller`, `@Get`, and `@Post` decorators in MidwayJS.  The HomeController handles both GET requests to the root path ('/') and POST requests to '/update'.  The snippet demonstrates how to map different HTTP methods to different controller methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Post } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    return 'Hello Midwayjs!';\n  }\n\n  @Post('/update')\n  async updateData() {\n    return 'This is a post method'\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Component Service Usage with Namespace\nDESCRIPTION: Demonstrates how to inject a component's service, `BookService`, into an application controller using the component's namespace. This example shows how to use the injected service to retrieve book data. It uses the @Inject decorator to get a component service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// in project\n// 这里直接引入组件包导出的类型\nimport { BookService } from 'midway-component-book';\n\n@Provide()\n@Controller('/user')\nexport class HomeControlelr {\n  @Inject()\n  bookService: BookService; // 这里直接注入了 book 这个作用域下的 bookService\n}\n```\n\n----------------------------------------\n\nTITLE: JoinPoint Interface Definition\nDESCRIPTION: This is the definition of the `JoinPoint` interface, which provides access to information about the intercepted method, including its name, target instance, arguments, and the `proceed` function to execute the original method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface JoinPoint {\n  methodName: string;\n  target: any;\n  args: any[];\n  proceed(...args: any[]): any;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple Cache Instances\nDESCRIPTION: Configures multiple named cache instances, each with its own settings. This allows for different caching strategies within the same application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  cacheManager: {\n    clients: {\n      default: {\n        store: 'memory',\n      },\n      otherCaching: {\n        store: 'memory',\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Parameters with Decorators (Typescript)\nDESCRIPTION: This code illustrates how to access request parameters using decorators like `@Body`, `@RequestPath`, and `@RequestIP` in a MidwayJS controller method. The example retrieves an 'id' from the request body, the request path, and the request IP address.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('/')\nasync updateUser(\n  @Body('id') id: string,\n  @RequestPath() p: string,\n  @RequestIP() ip: string): Promise<User> {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Multistage Optimized Dockerfile\nDESCRIPTION: This Dockerfile uses a multi-stage build to optimize the size of the final Docker image for a Node.js application. The first stage builds the application, and the second stage copies only the necessary build artifacts, like dist folder and static assets, into a smaller base image.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:18 AS build\n\nWORKDIR /app\n\nCOPY . .\n\nRUN npm install\n\nRUN npm run build\n\nFROM node:18-alpine\n\nWORKDIR /app\n\nCOPY --from=build /app/dist ./dist\n# 把源代码复制过去， 以便报错能报对行\nCOPY --from=build /app/src ./src\nCOPY --from=build /app/bootstrap.js ./\nCOPY --from=build /app/package.json ./\n\nRUN apk add --no-cache tzdata\n\nENV TZ=\"Asia/Shanghai\"\n\nRUN npm install --production\n\n# 如果端口更换，这边可以更新一下\nEXPOSE 7001\n\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Registering a Global Guard in TypeScript\nDESCRIPTION: This code shows how to register a guard globally, ensuring that it applies to all routes in the application. This is done within the `onReady` lifecycle hook in the `configuration.ts` file, using the `app.useGuard` method. Requires access to the Koa application instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { AuthGuard } from './guard/auth.guard';\n\n@Configuration({\n  imports: [koa]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    this.app.useGuard(AuthGuard);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling API Key Authentication in Swagger (MidwayJS, TypeScript)\nDESCRIPTION: This snippet demonstrates how to enable API key authentication for Swagger documentation in a MidwayJS application.  It configures the `swagger` property in the `config.default.ts` file to use `apikey` authentication and sets the key's name. It requires the `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'apikey',\n    \tname: 'api_key'\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Initialization with @Init\nDESCRIPTION: Demonstrates how to use the `@Init` decorator to define an asynchronous initialization method for a service. The method decorated with `@Init` is automatically called after the service instance is created, allowing for asynchronous setup tasks such as fetching data or connecting to services. It's recommended to use `@Scope(ScopeEnum.Singleton)` for services with async init.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class BaseService {\n\n  @Config('hello')\n  config;\n\n  @Init()\n  async init() {\n    await new Promise(resolve => {\n      setTimeout(() => {\n        this.config.c = 10;\n        resolve();\n      }, 100);\n    });\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection in onConfigLoad Lifecycle\nDESCRIPTION: This snippet illustrates how to establish a MySQL connection within the `onConfigLoad` lifecycle hook in a MidwayJS configuration. This approach allows for managing the database connection lifecycle (creation and closure) within the component's configuration.  It also demonstrates the use of `ITagMysqlDialectOption` for type safety.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Config, Configuration } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as tags from '@midwayjs/tags';\nimport { ITagMysqlDialectOption } from '@midwayjs/tags';\nconst mysql = require('mysql2');\n\n@Configuration({\n   imports: [\n     tags\n   ],\n})\nexport class MainConfiguration {\n   connection;\n\n   @Config()\n   tags;\n\n   async onConfigLoad(container) {\n     // create mysql connection\n     this.connection = mysql.createConnection({\n       host: 'db4free.net',\n       user: 'tag***',\n       password: 'tag***',\n       database: 'tag***',\n       charset: 'utf8',\n     });\n     let dialect: ITagMysqlDialectOption = {\n       dialectType: 'mysql',\n       sync: true,\n       instance: {\n         query: (...args) => {\n           return this.connection.promise().query(...args);\n         }\n       }\n     };\n\n     return {\n       tags: dialect\n     }\n   }\n\n   async onStop() {\n     // close mysql connection\n     this.connection.close();\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Find and Update an Entity using Sequelize Static Methods\nDESCRIPTION: This snippet demonstrates how to find an existing entity (Person) using `findOne` and update its properties using `save`, as well as using the `update` method directly.  It assumes the `Person` entity is defined elsewhere. This operation is only available when repository mode is disabled.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Person } from '../entity/person.entity';\n\n@Provide()\nexport class PersonService {\n  async updatePerson() {\n    const person = await Person.findOne();\n    // Update\n    person.age = 100;\n    await person.save();\n\n    await Person.update (\n      {\n        name: 'bobby',\n      },\n      {\n        where: { id: 1}\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Access Multiple Entities with Data Sources\nDESCRIPTION: This TypeScript code demonstrates how to inject and use multiple entities (User and User2) associated with different data sources. It showcases how to perform create and find operations on each entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Provide()\nexport class TestService {\n\n  @InjectEntityModel(User)\n  userModel: ReturnModelType<typeof User>;\n\n  @InjectEntityModel(User2)\n  user2Model: ReturnModelType<typeof User2>;\n\n  async getTest() {\n    const { _id: id } = await this.userModel.create({ name: 'JohnDoe', jobs: ['Cleaner'] } as User); // an \"as\" assertion, to have types for all properties\n    const user = await this.userModel.findById(id).exec();\n    console.log(user)\n\n    const { _id: id2 } = await this.user2Model.create({ name: 'JohnDoe', jobs: ['Cleaner'] } as User2); // an \"as\" assertion, to have types for all properties\n    const user2 = await this.user2Model.findById(id2).exec();\n    console.log(user2)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Weather Data with MidwayMockService (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a mock data file (`src/mock/data.mock.ts`) and use the `MidwayMockService` to simulate weather data for the WeatherService. It intercepts requests for a specific city ID ('101010100') and returns a predefined response in local and test environments, while other requests are passed to the original method. The `enableCondition` method determines when the mock is active.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/mock/data.mock.ts\nimport {\n  Mock,\n  ISimulation,\n  App,\n  Inject,\n  IMidwayApplication,\n  MidwayMockService,\n} from '@midwayjs/core';\nimport { WeatherService } from '../service/weather.service';\n\n@Mock()\nexport class WeatherDataMock implements ISimulation {\n  @App()\n  app: IMidwayApplication;\n\n  @Inject()\n  mockService: MidwayMockService;\n\n  async setup(): Promise<void> {\n    const originMethod = WeatherService.prototype.getWeather;\n    this.mockService.mockClassProperty(\n      WeatherService,\n      'getWeather',\n      async cityId => {\n        if (cityId === '101010100') {\n          return {\n            weatherinfo: {\n              city: '北京',\n              cityid: '101010100',\n              temp: '27.9',\n              WD: '南风',\n              WS: '小于3级',\n              SD: '28%',\n              AP: '1002hPa',\n              njd: '暂无实况',\n              WSE: '<3',\n              time: '17:55',\n              sm: '2.1',\n              isRadar: '1',\n              Radar: 'JC_RADAR_AZ9010_JB',\n            },\n          };\n        } else {\n          return originMethod.apply(this, [cityId]);\n        }\n      }\n    );\n  }\n\n  enableCondition(): boolean | Promise<boolean> {\n    // 模拟类启用的条件\n    return ['local', 'test', 'unittest'].includes(this.app.getEnv());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Custom Transport with Context\nDESCRIPTION: This snippet extends the custom transport example by demonstrating how to access the context (`ctx`) object within the transport's `log` method. The code checks if the `info` object contains a `ctx` property and performs different actions accordingly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomTransport extends EmptyTransport {\n  log(info, callback) {\n    if (info.ctx) {\n      // ...\n    } else {\n      // ...\n    }\n    callback();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components with createConfiguration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and configure Midway components, such as `@midwayjs/cache` and `@midwayjs/koa`, within a Midway Hooks project using `createConfiguration`. It utilizes the `imports` array to register components and `importConfigs` to load configuration files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/component.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createConfiguration,\n  hooks,\n} from '@midwayjs/hooks';\nimport * as Koa from '@midwayjs/koa';\nimport { join } from 'path';\nimport * as cache from '@midwayjs/cache';\n\nexport default createConfiguration({\n  imports: [cache, Koa, Hooks()],\n  importConfigs: [\n    join(__dirname, 'config'),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Store\nDESCRIPTION: Configures Redis as the cache store using the `createRedisStore` method.  This assumes that the Redis component is already configured in the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRedisStore } from '@midwayjs/cache-manager';\n\n// src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: createRedisStore('default'),\n         options: {\n           ttl: 10,\n         }\n       },\n     },\n   },\n   redis: {\n     clients: {\n       default: {\n         port: 6379,\n         host: '127.0.0.1',\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK in otel.js\nDESCRIPTION: This snippet demonstrates how to initialize the OpenTelemetry SDK within an `otel.js` file, which is required by egg-scripts.  It configures the service name, trace exporter, and auto-instrumentations. It also shows how to handle process termination to gracefully shut down the SDK. The traceExporter is configured with consoleSpanExporter() for initial debugging.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst process = require('process');\nconst { NodeSDK, node, resources } = require('@opentelemetry/sdk-node');\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\n\n// 初始化一个 open-telemetry 的 SDK\nconst sdk = new NodeSDK({\n  // 配置当前的导出方式，比如这里配置了一个输出到控制台的，也可以配置其他的 Exporter，比如 Jaeger\n  traceExporter: new node.ConsoleSpanExporter(),\n  // 这里配置了默认自带的一些监控模块，比如 http 模块等\n  instrumentations: [getNodeAutoInstrumentations()]\n});\n\n// 初始化 SDK\nsdk.start()\n\n// 在进程关闭时，同时关闭数据采集\nprocess.on('SIGTERM', () => {\n  sdk.shutdown()\n    .then(() => console.log('Tracing terminated'))\n    .catch((error) => console.log('Error terminating tracing', error))\n    .finally(() => process.exit(0));\n});\n```\n\n----------------------------------------\n\nTITLE: Enable JWT Middleware\nDESCRIPTION: This code shows how to enable the custom JWT middleware in the `configuration.ts` file.  The middleware is added to the `app.useMiddleware` array, making it active for incoming requests.  This step registers the middleware within the application request pipeline.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/jwt.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { Configuration, App, IMidwayContainer, IMidwayApplication} from '@midwayjs/core';\nimport * as jwt from '@midwayjs/jwt';\n\n@Configuration({\n  imports: [\n    // ...\n    jwt,\n  ],\n})\nexport class MainConfiguration {\n\n  @App()\n  app: IMidwayApplication;\n\n  async onReady(applicationContext: IMidwayContainer): Promise<void> {\n    // 添加中间件\n    this.app.useMiddleware([\n      // ...\n      JwtMiddleware,\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Schema Types with @ApiExtraModel in Typescript\nDESCRIPTION: This snippet demonstrates how to add extra schema types to the Swagger documentation using the `@ApiExtraModel` decorator in MidwayJS. This can be used when the type cannot be automatically inferred from the code.  It shows usage on both the Controller and Model class.  It utilizes `getSchemaPath` to reference the extra model.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiExtraModel(TestExtraModel)\n@Controller()\nclass HelloController {\n  @Post('/:id', { summary: 'test'})\n  @ApiResponse({\n    status: 200,\n    content: {\n      'application/json': {\n        schema: {\n          properties: {\n            data: { '$ref': getSchemaPath(TestExtraModel)}\n          }\n        }\n      }\n    }\n  })\n  async create(@Body() createCatDto: CreateCatDto, @Param('id') id: number): Promise<Cat> {\n    return this.catsService.create(createCatDto);\n  }\n}\n\n// or\n@ApiExtraModel(TestExtraModel)\nclass TestModel {\n  @ApiProperty({\n    item: {\n      $ref: getSchemaPath(TestExtraModel)\n    },\n    description: 'The name of the Catage'\n  })\n  one: TestExtraModel;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Upload Whitelist in MidwayJS\nDESCRIPTION: Demonstrates how to configure a dynamic upload whitelist based on the request context (ctx) in a MidwayJS application. This allows for different file extension restrictions based on the request path or other contextual factors.  The whitelist is defined as a function that receives the context and returns an array of allowed file extensions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/upload';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n   // ...\n   upload: {\n     whitelist: (ctx) => {\n       if (ctx.path === '/') {\n         return [\n           '.jpg',\n           '.jpeg',\n         ];\n       } else {\n         return [\n           '.jpg',\n         ]\n       };\n     },\n     // ...\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Define a Custom Http Error\nDESCRIPTION: This code snippet demonstrates how to define a custom HTTP error in MidwayJS by extending the MidwayHttpError class. It sets a default error message and HTTP status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/error/custom.error.ts\nimport { HttpStatus } from '@midwayjs/core';\n\nexport class CustomHttpError extends MidwayHttpError {\n  constructor() {\n    super('my custom error', HttpStatus.BAD_REQUEST);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Endpoint - TypeScript\nDESCRIPTION: This code defines a GET endpoint in Midway Hooks. A function without parameters exported from a TypeScript file under the `lambda` folder automatically becomes a GET endpoint. The function returns a simple string value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function foo() {\n  return 'foo';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Decorator with MidwayDecoratorService (TypeScript)\nDESCRIPTION: Registers a method handler for the `LOGGING_KEY` using `MidwayDecoratorService`. The handler intercepts the method execution using the `around` advice. It measures the execution time, logs it, and returns the original method's result. It depends on `koa`, `MidwayDecoratorService`, and a logger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n//...\n\nfunction formatDuring(value, formatUnit: string) {\n  // Return time formatting here\n  if (formatUnit === 'ms') {\n    return `${value} ms`;\n  } else if (formatUnit === 'min') {\n    // return xxx\n  }\n}\n\n@Configuration({\n  imports: [koa]\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Logger()\n  logger;\n\n  async onReady() {\n    // ...\n\n    // Implementation method decorator\n    this.decoratorService.registerMethodHandler(LOGGING_KEY, (options) => {\n      return {\n        around: async (joinPoint: JoinPoint) => {\n          // Get the formatting parameters\n          const format = options.metadata.formatUnit || 'ms';\n\n          // Record start time\n          const startTime = Date.now();\n\n          // Execute the original method\n          const result = await joinPoint.proceed(...joinPoint.args);\n\n          const during = formatDuring(Date.now() - startTime, format);\n\n          // Print execution time\n          this.logger.info('Method ${joinPoint.methodName} invoke during ${during}');\n\n          // Return execution result\n          return result;\n        },\n      };\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing a custom error in TypeScript\nDESCRIPTION: This snippet demonstrates how to throw a custom error that has been defined in the application. It requires importing the custom error class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_error.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomError } from './error/custom.error';\n\n// ...\n\nasync findAll() {\n  throw new CustomError();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Middleware\nDESCRIPTION: This code snippet demonstrates how to configure different routes with different middleware instances for file uploads. The `createMiddleware` function is used to create an instance of the `UploadMiddleware` with specific options (e.g., `mode`). This enables setting different configurations for different upload endpoints.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post, Files, Fields } from '@midwayjs/core';\nimport { UploadFileInfo, UploadMiddleware } from '@midwayjs/busboy';\n\n@Controller('/')\nexport class HomeController {\n  @Post('/upload1', { middleware: [ createMiddleware(UploadMiddleware, {mode: 'file'}) ]})\n  async upload1(@Files() files Array<UploadFileInfo>) {\n    // ...\n  }\n  \n  @Post('/upload2', { middleware: [ createMiddleware(UploadMiddleware, {mode: 'stream'}) ]})\n  async upload2(@Files() files Array<UploadFileInfo>) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Middleware in MidwayJS (TypeScript)\nDESCRIPTION: Registers message-level middleware for Socket.IO messages in MidwayJS. This middleware (SocketMiddleware) will be triggered when the server receives a 'my' message. Requires the @OnWSMessage decorator, @WSEmit decorator, a defined SocketMiddleware, and an emitted 'ok' event. Message middleware can be used for validating message content, transforming data, or implementing rate limiting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\n@WSController('/api')\nexport class APIController {\n\n  // Middleware when Message is triggered\n  @OnWSMessage('my', {\n    middleware: [SocketMiddleware]\n  })\n  @WSEmit('ok')\n  async gotMyMessage() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Source Using TypeORMDataSourceManager in TypeScript\nDESCRIPTION: This snippet demonstrates how to obtain a data source instance in MidwayJS using the `TypeORMDataSourceManager`. It injects the data source manager, retrieves a specific data source using its name ('default'), and then checks its connection status. The example also shows how to inject using the `@InjectDataSource` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { TypeORMDataSourceManager } from '@midwayjs/typeorm';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n    const dataSourceManager = await container.getAsync(TypeORMDataSourceManager);\n  \tconst conn = dataSourceManager.getDataSource('default');\n    console.log(dataSourceManager.isConnected(conn));\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Controller with Routes in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a controller in MidwayJS using decorators such as `@provide`, `@controller`, `@inject`, and `@get`. It showcases the structure of a controller class with an asynchronous method (`getUser`) that handles a GET request. It shows how to inject services and access request parameters from the context (`ctx`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/controller.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provide, controller, inject, get } from 'midway';\n\n@provide()\n@controller('/user')\nexport class UserController {\n  @inject('userService')\n  service: IUserService;\n\n  @inject()\n  ctx;\n\n  @get('/:id')\n  async getUser(): Promise<void> {\n    const id: number = this.ctx.params.id;\n    const user: IUserResult = await this.service.getUser({ id });\n    this.ctx.body = { success: true, message: 'OK', data: user };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring bearer authentication in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure bearer authentication in the swagger configuration and associate the controller with `@ApiBearerAuth` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'bearer',\n    },\n  },\n}\n\n@ApiBearerAuth()\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Configure Data Source Synchronization Options\nDESCRIPTION: This configuration snippet demonstrates how to configure the data source synchronization options within a MidwayJS application's Sequelize configuration. The `sync` option enables automatic schema creation and updates, while `syncOptions` allows fine-grained control over the synchronization process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  sequelize: {\n    dataSource: {\n      default: {\n        sync: true,\n        syncOptions: {\n          force: false,\n          alter: true,\n        },\n      },\n    },\n    // You can use this to specify the default data source when there are multiple data sources\n    defaultDataSourceName: 'default',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Resolving Circular Dependencies in Models\nDESCRIPTION: This TypeScript code shows how to resolve circular dependencies in Sequelize models by using the `ReturnType` utility type to wrap the type of the associated model in `@BelongsTo` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Column, Model, BelongsTo, ForeignKey } from 'sequelize-typescript';\nimport { User } from './user.entity';\n\n@Table\nexport class Photo extends Model {\n  // ...\n  @BelongsTo(() => User)\n  user: ReturnType<() => User>;\n}\n```\n\n----------------------------------------\n\nTITLE: ParseFloatPipe Example\nDESCRIPTION: Demonstrates how to use ParseFloatPipe to convert parameters into floating point numbers and error cases when the value is not a valid number.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ParseFloatPipe } from '@midwayjs/validate';\n\n// ...\nasync update(@Body('size', [ParseFloatPipe]) size: number) {\n  return size;\n}\n\nupdate({ size: '12.2'} ); => 12.2\nupdate({ size: '12'} ); => 12\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI with renderSwaggerUIDist in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to configure Swagger UI using `renderSwaggerUIDist` from `@midwayjs/swagger`. It shows how to set the `swaggerUIRender` option and optionally pass `swaggerUIRenderOptions` for customizing the UI. It assumes that the `swagger-ui-dist` package is installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { renderSwaggerUIDist } from '@midwayjs/swagger';\n\nexport default {\n  // ...\n  swagger: {\n    swaggerUIRender: renderSwaggerUIDist,\n    swaggerUIRenderOptions: {\n      // ...\n    }\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: ParseIntPipe example\nDESCRIPTION: Illustrates the functionality and error cases of the ParseIntPipe.  Shows conversion of string to integer, and failure on non-numeric strings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ParseIntPipe } from '@midwayjs/validate';\n\n// ...\nasync update(@Body('age', [ParseIntPipe]) age: number) {\n  return age;\n}\n\nupdate({ age: '12'} ); => 12\nupdate({ age: '12.2'} ); => Error\nupdate({ age: 'abc'} ); => Error\n```\n\n----------------------------------------\n\nTITLE: Configure Single COS Client\nDESCRIPTION: This code demonstrates how to configure a single COS client within the `config.default.ts` file. It defines the `cos` property with a `client` object containing the necessary `SecretId` and `SecretKey` for authenticating with Tencent Cloud COS.  These placeholders should be replaced with actual credentials.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cos.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  cos: {\n    client: {\n      SecretId: '***********',\n      SecretKey: '***********',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Routes in Middleware (TypeScript)\nDESCRIPTION: Demonstrates how to execute middleware only for specific routes using the `match` method. This method allows the middleware to conditionally execute based on the request context. The example checks the `ctx.path` property to determine whether to execute the middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // ...\n    };\n  }\n\n  match(ctx: Context): boolean {\n    // The following matching route will execute this middleware\n    if (ctx.path === '/api/index') {\n      return true;\n    }\n  }\n\n  static getName(): string {\n    return 'report';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Format Configuration Loading - TypeScript\nDESCRIPTION: Demonstrates how to load configuration files in object format using `importConfigs` in the `Configuration` decorator.  Each environment's configuration is explicitly specified. This is the preferred method for loading configurations in Midway v3 and later, and is required for single-file and ESM deployments.  Requires importing `Configuration` from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\n\nimport * as DefaultConfig from './config/config.default';\nimport * as LocalConfig from './config/config.local';\n\n@Configuration({\n   importConfigs: [\n     {\n       default: DefaultConfig,\n       local: LocalConfig\n     }\n   ]\n})\nexport class MainConfiguration {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Entire Request Body in MidwayJS\nDESCRIPTION: This code snippet shows how to retrieve the entire request body as an object using the `@Body` decorator in a MidwayJS controller. The `user` parameter will contain the entire JSON body. Dependencies: `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// POST /user/ HTTP/1.1\n// Host: localhost:3000\n// Content-Type: application/json; charset=UTF-8\n//\n// {\"uid\": \"1\", \"name\": \"harry\"}\nimport { Controller, Post, Body } from '@midwayjs/core';\n\n@Controller('/user')\nexport class UserController {\n  @Post('/')\n  async updateUser(@Body() user: User): Promise<User> {\n    // user is equivalent to the entire body object of ctx.request.body\n    // => output user\n    // {\n    //   uid: '1',\n    //   name: 'harry',\n    // }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Local Controller Example - Typescript\nDESCRIPTION: This snippet shows an example of using the local authentication middleware in a controller. It defines a route that is protected by the LocalPassportMiddleware, which authenticates the user before allowing access to the route handler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller.ts\nimport { Post, Inject, Controller } from '@midwayjs/core';\nimport { LocalPassportMiddleware } from '../middleware/local.middleware';\n\n@Controller('/')\nexport class LocalController {\n   @Post('/passport/local', { middleware: [LocalPassportMiddleware] })\n   async localPassport() {\n     console.log('local user: ', this.ctx.state.user);\n     return this.ctx.state.user;\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Model (Entity)\nDESCRIPTION: This TypeScript code defines a Sequelize model using sequelize-typescript decorators. It defines a `Hobby` model with a `name` column and a `Person` model with `name`, `birthday` columns, and a `hobbies` association to the `Hobby` model.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/entity/person.entity.ts\nimport { Table, Model, Column, HasMany } from 'sequelize-typescript';\n\n@Table\nexport class Hobby extends Model {\n  @Column\n  name: string;\n}\n\n@Table\nexport class Person extends Model {\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\n\n----------------------------------------\n\nTITLE: Create Github Passport Middleware\nDESCRIPTION: This TypeScript code creates a middleware for handling Github Passport authentication. It extends `PassportMiddleware` and specifies the `GithubStrategy`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/github.middleware.ts\n\nimport { AuthenticateOptions, PassportMiddleware } from '@midwayjs/passport';\nimport { Middleware } from '@midwayjs/core';\nimport { GithubStrategy } from './githubStrategy';\n\n@Middleware()\nexport class GithubPassportMiddleware extends PassportMiddleware(GithubStrategy) {\n  getAuthenticateOptions(): AuthenticateOptions | Promise<AuthenticateOptions> {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequelize Data Source Configuration - Typescript\nDESCRIPTION: This code snippet shows how to configure a Sequelize data source within a MidwayJS application using `src/config/config.default.ts`. It defines connection parameters, including database name, username, password, host, port, dialect, and entities. The `entities` property specifies the models associated with the data source, which can be defined directly or by using file path patterns.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nimport { Person } from '../entity/person.entity';\n\nexport default {\n   // ...\n   sequelize: {\n     dataSource: {\n       // The first data source, the name of the data source can be completely customized\n       default: {\n         database: 'test4',\n         username: 'root',\n         password: '123456',\n         host: '127.0.0.1',\n         port: 3306,\n         encrypt: false,\n         dialect: 'mysql',\n         define: { charset: 'utf8' },\n         timezone: '+08:00',\n         // Locally, you can createTable directly through sync: true\n         sync: false,\n\n         // Object format\n         entities: [Person],\n\n         // The following scanning form is supported. For compatibility, we can match both .js and .ts files at the same time\n         entities: [\n           'entity',                        // Specify the directory\n           '**/entity/*.entity.{j,t}s',     // Wildcard with suffix matching\n         ],\n       },\n\n       // second data source\n       default2: {\n         // ...\n       },\n     },\n   },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Filter for 404 Errors in Typescript\nDESCRIPTION: This code defines an exception filter `NotFoundFilter` that catches `NotFoundError` exceptions (HTTP 404). It redirects the user to a '/404.html' page or returns a JSON response with a 404 message. Requires `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/notfound.filter.ts\nimport { Catch, httpError, MidwayHttpError } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch(httpError.NotFoundError)\nexport class NotFoundFilter {\n  async catch(err: MidwayHttpError, ctx: Context) {\n    // 404 error will come here\n    ctx.redirect('/404.html');\n\n    // or directly return a content\n    return {\n      message: '404, '+ ctx.path\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute Name Based Injection (TypeScript)\nDESCRIPTION: This code shows how to inject based on the attribute name.  Because TypeScript removes interface types after compilation, Midway falls back to using the attribute name specified in `@Inject` to match the injected object. This is similar to \"Autowire by name\" in Java Spring.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IPay {\n  payMoney()\n}\n\n@Provide('APay')\nexport class A implements IPay {\n  async payMoney() {\n    // ...\n  }\n}\n\n@Provide('BPay')\nexport class B implements IPay {\n  async payMoney() {\n    // ...\n  }\n}\n\n@Provide()\nexport class PaymentService {\n\n  @Inject('APay')\n  payService: IPay; // Note that the type here is an interface, and the type information will be removed after compilation.\n\n  async orderGood() {\n    await this.payService.payMoney();\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: File-Level Koa Middleware Configuration in Midway Hooks\nDESCRIPTION: This snippet illustrates how to enable Koa middleware at the file level in Midway Hooks. It configures `config.middleware` within `ApiConfig` to include both a custom middleware (`logger`) and the Koa middleware (`cors`). All APIs in this file will use these middlewares.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/middleware.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ApiConfig,\n  Api,\n  Get\n} from '@midwayjs/hooks';\nimport logger from './logger';\nimport cors from '@koa/cors';\n\n// File Level Middleware\n// highlight-start\nexport const config: ApiConfig = {\n  middleware: [logger, cors]\n};\n// highlight-end\n\nexport default Api(Get(), async () => {\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel\nDESCRIPTION: This TypeScript code shows the configuration for Redis Sentinel in the `config.default.ts` file. It specifies the sentinels (host and port), master name, password, and database settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  redis: {\n    client: {\n      sentinels: [{ // Sentinel instances\n        port: 26379, // Sentinel port\n        host: '127.0.0.1', // Sentinel host\n      }],\n      name: 'mymaster', // Master name\n      password: 'auth',\n      db: 0\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Info Route\nDESCRIPTION: This TypeScript code snippet shows how to customize the default route for accessing the info component's information. The infoPath property in the config.default.ts file is modified to change the route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/info.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  info: {\n    infoPath: '/_my_info',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing path parameters\nDESCRIPTION: This code demonstrates how to pass path parameters to a Midway Hooks API. It uses `Get('/article/:id')` to define a route with a dynamic `id` parameter and `Params<{ id: string }>()` to declare the type. The handler function retrieves the value of `id` from the context's `params` property and returns it in an object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Params,\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get('/article/:id'),\n  Params<{ id: string }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      article: ctx.params.id\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Redis Client\nDESCRIPTION: This TypeScript snippet demonstrates the configuration for a single Redis client in the `config.default.ts` file. It includes the port, host, password, and database settings for the Redis connection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  redis: {\n    client: {\n      port: 6379, // Redis port\n      host: \"127.0.0.1\", // Redis host\n      password: \"auth \",\n      db: 0\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Method Decorator Logic (Logging Time)\nDESCRIPTION: This code demonstrates how to implement the logic associated with the `@LoggingTime` method decorator. It registers a method handler using `MidwayDecoratorService.registerMethodHandler`. This handler intercepts the method execution using the `around` advice, measures the execution time, logs the duration, and returns the method's result. It injects `MidwayDecoratorService` and `Logger`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n//...\n\nfunction formatDuring(value, formatUnit: string) {\n  // 这里返回时间格式化\n  if (formatUnit === 'ms') {\n    return `${value} ms`;\n  } else if (formatUnit === 'min') {\n    // return xxx\n  }\n}\n\n@Configuration({\n  imports: [koa],\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Logger()\n  logger;\n\n  async onReady() {\n    // ...\n\n    // 实现方法装饰器\n    this.decoratorService.registerMethodHandler(LOGGING_KEY, (options) => {\n      return {\n        around: async (joinPoint: JoinPoint) => {\n          // 拿到格式化参数\n          const format = options.metadata.formatUnit || 'ms';\n\n          // 记录开始时间\n          const startTime = Date.now();\n\n          // 执行原方法\n          const result = await joinPoint.proceed(...joinPoint.args);\n\n          const during = formatDuring(Date.now() - startTime, format);\n\n          // 打印执行时间\n          this.logger.info(`Method ${joinPoint.methodName} invoke during ${during}`);\n\n          // 返回执行结果\n          return result;\n        },\n      };\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Method Result with Decorator\nDESCRIPTION: Caches the result of a method using the `@Caching` decorator. The result is cached the first time the method is called, and subsequent calls return the cached result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n  @Caching('default')\n  async getUser(name: string) {\n    return name;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Cache Manager Module\nDESCRIPTION: Installs the @midwayjs/cache-manager module using npm. This command adds the cache management capabilities to the MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/cache-manager@3 --save\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Response using Swagger in TypeScript\nDESCRIPTION: This snippet demonstrates how to customize the request response using the `@ApiResponse` decorator in MidwayJS with Swagger. The decorator allows specifying the HTTP status code, description, and data type of the response, offering detailed API documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/:id')\n@ApiResponse({\n  status: 200,\n  description: 'The found record',\n  type: Cat\n})\nfindOne(@Param('id') id: string, @Query('test') test: any): Cat {\n  return this.catsService.findOne(+id);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting gRPC Clients in Midway.js (TypeScript)\nDESCRIPTION: This code snippet shows how to inject gRPC clients into a Midway.js service using the `@Inject` decorator and the `Clients` type from `@midwayjs/grpc`. It enables access to configured gRPC services within the class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Provide,\n  Inject,\n} from '@midwayjs/core';\nimport { helloworld, hero } from '../interface';\nimport { Clients } from '@midwayjs/grpc';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  grpcClients: Clients;\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retry Asynchronous Method with 'this' Binding in TypeScript\nDESCRIPTION: This snippet illustrates how to use `retryWithAsync` within a class method, specifically addressing the 'this' context. The `getUserData` method wraps the `getUserDataFromRemote` method with retry logic. The `receiver` option in `retryWithAsync` ensures that 'this' is correctly bound to the class instance during retries. The function will retry 2 times in addition to the original call.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/retry.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { retryWithAsync } from '@midwayjs/core';\n\nexport class UserService {\n\n  async getUserData(userId: string) {\n    // wrap\n    const getUserDataOrigin = retryWithAsync(\n      this.getUserDataFromRemote,\n      2,\n      {\n        receiver: this\n      }\n    );\n\n    // invoke\n    return getUserDataOrigin(userId);\n  }\n\n  async getUserDataFromRemote(userId: string) {\n    // get data from remote\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stripping Undefined Properties Globally\nDESCRIPTION: This snippet shows how to globally configure the validator to remove undefined properties from the validated object using the `stripUnknown` option in `validationOptions`. This configuration is applied to the `validate` property in `src/config/config.default.ts`.  This setting ensures that only properties defined in the DTO are present in the validated object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  validate: {\n    validationOptions: {\n      stripUnknown: true, // 全局生效\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Request-Scoped Instance in Middleware - TypeScript\nDESCRIPTION: Explains how to obtain a request-scoped instance within a middleware using `ctx.requestContext.getAsync`.  This is necessary because middleware instances are singletons and cannot directly inject request-scoped dependencies. The example demonstrates retrieving a `UserService` instance within the middleware's `resolve` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      const userService = await ctx.requestContext.getAsync<UserService>(UserService);\n      // TODO userService.xxxx\n      await next();\n    };\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring onerror Plugin (TypeScript)\nDESCRIPTION: This code snippet configures the `onerror` plugin to redirect to a specific error page (`/50x.html`) when an exception occurs on an online page. This ensures that users are redirected to a user-friendly error page instead of seeing technical error details.  The configuration must be placed in the `src/config/config.default.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nmodule.exports = {\n  onerror: {\n    // When an exception occurs on the online page, redirect to this page\n    errorPageUrl: '/50x.html',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Parameter Decorator with a Pipe in MidwayJS\nDESCRIPTION: This code creates a custom parameter decorator `RegValid` that accepts a regular expression and a pipe as arguments. It utilizes `createCustomParamDecorator` to bind the pipe to the decorator. The `@midwayjs/core` package is required for this implementation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipe.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipeUnionTransform, createCustomParamDecorator } from '@midwayjs/core';\n\nfunction RegValid(reg: RegExp, pipe: PipeUnionTransform) {\n  return createCustomParamDecorator('reg-valid', {\n    reg,\n  }, {\n    // ...\n    pipes: [pipe]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Modify config during lifecycle in MidwayJS\nDESCRIPTION: This TypeScript code shows how to modify the global configuration in MidwayJS using the `onConfigLoad` lifecycle hook.  It retrieves remote configuration data using a custom service (`RemoteConfigService`) and merges it with the existing configuration. This allows for dynamic configuration updates after the initial configuration loading.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, IMidwayContainer } from '@midwayjs/core';\nimport { join } from 'path';\nimport { RemoteConfigService } from '../service/remote'; // Customized access to remote configuration service\n\n@Configuration({\n   importConfigs: [\n     join(__dirname, './config/'),\n   ]\n})\nexport class MainConfiguration {\n  \n  async onConfigLoad(container: IMidwayContainer) {\n    // Here you can modify the global configuration\n    const remoteConfigService = await container. getAsync(RemoteConfigService);\n    const remoteConfig = await remoteConfigService.getData();\n\n    // The return value here will be merged with the global config\n    // const remoteConfig = {\n    //   typeorm: {\n    //     dataSource: {\n    //       default: {\n    //         type: \"mysql\",\n    //         host: \"localhost\",\n    //         port: 3306,\n    //         username: \"root\",\n    //         password: \"123456\",\n    //         database: \"admin\",\n    //         synchronize: false,\n    //         logging: false,\n    //         entities: \"/**/**.entity.ts\",\n    //         dateStrings: true\n    //       }\n    //     }\n    //   }\n    // }\n    \n    return remoteConfig;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: CSRF Secret Rotation on User Login (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates rotating the CSRF secret upon user login to enhance security.  It calls `ctx.rotateCsrfSecret()` to generate a new token upon successful authentication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/security.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx;\n\n  @Inject()\n  userService;\n\n  @Get('/login')\n  async login(@Body('username') username: string, @Body('password') password: string) {\n    const user = await userService.login({ username, password });\n    this.ctx.session = { user };\n    this.ctx.rotateCsrfSecret();\n    return { success: true };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Output Format\nDESCRIPTION: This code snippet shows how to configure the log output format for a specific logger client.  The format property is a function that receives a LoggerInfo object and returns a string representing the formatted log message. This example configures the format for appLogger and customOtherLogger clients.  A custom format function transforms the LoggerInfo object into a string containing the timestamp, level, pid, label, and message. This configuration is part of the midwayLogger configuration in a MidwayConfig object. Requires `@midwayjs/logger`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoggerInfo } from '@midwayjs/logger';\n\nexport default {\n  midwayLogger: {\n    clients: {\n      appLogger: {\n        format: (info: LoggerInfo) => {\n          return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.labelText}${info.message}`;\n        }\n        // ...\n      },\n      customOtherLogger: {\n        format: (info: LoggerInfo) => {\n          return 'xxxx';\n        }\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: GET Request with Data Type Specification - TypeScript\nDESCRIPTION: This snippet demonstrates specifying the request method and data type in the options object passed to `makeHttpRequest`. It explicitly sets the method to 'GET' and the `dataType` to 'json'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  method: 'GET',\n  dataType: 'json',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Service - TypeScript\nDESCRIPTION: This TypeScript code defines a WebSocket service using the `@WSController` decorator. The `HelloSocketController` class will handle WebSocket connections and messages. No parameters or specific dependencies beyond `@midwayjs/core` are needed for this basic definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController } from '@midwayjs/core';\n\n@WSController()\nexport class HelloSocketController {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Database Configuration - TypeScript\nDESCRIPTION: This snippet shows how to configure multiple database connections in MidwayJS using TypeORM. It defines two connections, `default` and `test`, each with its own database type and connection parameters. The `dataSource` object is used to define these configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from 'path';\n\nexport default {\n  typeorm: {\n    dataSource: {\n      default: {\n        type: 'sqlite',\n        database: join(__dirname, '../../default.sqlite'),\n        // ...\n      },\n      test: {\n        type: 'mysql',\n        host: '127.0.0.1',\n        port: 3306,\n        // ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving a New Model Instance\nDESCRIPTION: This TypeScript code demonstrates how to save a new instance of a Sequelize model (Person) using the `save()` method. It creates a new Person object and then persists it to the database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Person } from '../entity/person.entity';\n\n@Provide()\nexport class PersonService {\n  async createPerson() {\n    const person = new Person({ name: 'bob', age: 99 });\n    await person.save();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Options (max, ttl)\nDESCRIPTION: Configures cache options such as `max` (maximum number of caches) and `ttl` (time to live in milliseconds) in the `config.default.ts` file. These options control the size and expiration of the cache.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n  // src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: 'memory',\n         options: {\n           max: 100,\n           ttl: 10,\n         },\n       },\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Fanout Exchange Consumer Implementation\nDESCRIPTION: This snippet shows how to implement a RabbitMQ consumer that subscribes to a fanout exchange.  It defines two consumers that listen to the same exchange, demonstrating that all messages sent to the exchange are received by both consumers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Consumer, MSListenerType, RabbitMQListener, Inject, App } from '@midwayjs/decorator';\nimport { Context, Application } from '@midwayjs/rabbitmq';\nimport { ConsumeMessage } from 'amqplib';\n\n@Provide()\n@Consumer(MSListenerType.RABBITMQ)\nexport class UserConsumer {\n  @App()\n  app: Application;\n\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  logger;\n\n  @RabbitMQListener('abc', {\n    exchange: 'logs',\n    exchangeOptions: {\n      type: 'fanout',\n      durable: false,\n    },\n    exclusive: true,\n    consumeOptions: {\n      noAck: true,\n    },\n  })\n  async gotData(msg: ConsumeMessage) {\n    this.logger.info('test output1 =>', msg.content.toString('utf8'));\n    // TODO\n  }\n\n  @RabbitMQListener('bcd', {\n    exchange: 'logs',\n    exchangeOptions: {\n      type: 'fanout',\n      durable: false,\n    },\n    exclusive: true,\n    consumeOptions: {\n      noAck: true,\n    },\n  })\n  async gotData2(msg: ConsumeMessage) {\n    this.logger.info('test output2 =>', msg.content.toString('utf8'));\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RabbitMQ Consumer in MidwayJS\nDESCRIPTION: This snippet demonstrates how to create a RabbitMQ consumer using the `@Consumer` and `@RabbitMQListener` decorators in MidwayJS. It includes dependency injection for the context and defines a method to handle incoming messages from a specified queue, acknowledging the message upon receipt.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Consumer, MSListenerType, RabbitMQListener, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/rabbitmq';\nimport { ConsumeMessage } from 'amqplib';\n\n@Provide()\n@Consumer(MSListenerType.RABBITMQ)\nexport class UserConsumer {\n  @Inject()\n  ctx: Context;\n\n  @RabbitMQListener('tasks')\n  async gotData(msg: ConsumeMessage) {\n    this.ctx.channel.ack(msg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database with onReady/onStop in TypeScript\nDESCRIPTION: Shows how to establish a database connection within the `onReady` lifecycle hook and close the connection within the `onStop` hook. This approach avoids creating connections on each request. Requires a database connection utility class (e.g., `db`) injected via `@Inject`. Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n  @Inject()\n  db: any;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    // 建立数据库连接\n    await this.db.connect();\n  }\n\n  async onStop(): Promise<void> {\n\t// 关闭数据库连接\n    await this.db.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Key with @PrimaryKey Decorator\nDESCRIPTION: This TypeScript code shows how to define a primary key column in a Sequelize model using the `@PrimaryKey` decorator from sequelize-typescript.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, PrimaryKey } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @PrimaryKey\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Whitelist Function\nDESCRIPTION: Configures a dynamic whitelist function to allow specific file extensions based on the request context. This example shows how to allow different file types depending on the route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/busboy';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  busboy: {\n    whitelist: (ctx) => {\n      if (ctx.path === '/') {\n        return [\n          '.jpg',\n          '.jpeg',\n        ];\n      } else {\n        return [\n          '.jpg',\n        ]\n      };\n    },\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Session (TypeScript)\nDESCRIPTION: This snippet demonstrates how to access and modify session data in a Midway.js Koa application using `ctx.session`.  It gets the user ID from the session, fetches posts, and increments a visited counter.  It highlights basic session usage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // 获取 Session 上的内容\n    const userId =  this.ctx.session.userId;\n    const posts = await  this.ctx.service.post.fetch(userId);\n    // 修改 Session 的值\n    this.ctx.session.visited = ctx.session.visited ? (ctx.session.visited + 1) : 1;\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie for JS Access - TypeScript\nDESCRIPTION: This snippet configures a cookie to be accessible and modifiable by JavaScript on the browser side. By setting `httpOnly` to `false` and `signed` to `false`, the cookie can be accessed via `document.cookie` and its value can be modified by client-side scripts. This is useful for scenarios where JavaScript needs to interact with cookie data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.cookies.set(key, value, {\n  httpOnly: false,\n  signed: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Interceptor (Aspect) Example\nDESCRIPTION: This code defines a basic interceptor (aspect) in MidwayJS that intercepts the `HomeController`. It implements the `IMethodAspect` interface and logs a message to the console before the intercepted method is executed. Dependencies: `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Aspect, IMethodAspect, JoinPoint } from '@midwayjs/core';\nimport { HomeController } from '../controller/home';\n\n@Aspect(HomeController)\nexport class ReportInfo implements IMethodAspect {\n  async before(point: JoinPoint) {\n    console.log('before home router run');\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Single-Function Middleware Definition\nDESCRIPTION: This TypeScript code demonstrates how to apply middleware to a single API function using the `Middleware` function from `@midwayjs/hooks`. The `logger` middleware is applied only to this specific route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/middleware.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Middleware,\n} from '@midwayjs/hooks';\nimport logger from './logger';\n\nexport default Api(\n  Get(),\n  // highlight-start\n  Middleware(logger),\n  // highlight-end\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Acquisition of UserService in Middleware (TypeScript)\nDESCRIPTION: This code demonstrates how to dynamically retrieve a request-scoped `UserService` instance within a singleton middleware using `ctx.requestContext.getAsync`. This ensures that the correct request-scoped instance is used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      const userService = await ctx.requestContext.getAsync(UserService);\n        // TODO userService.xxxx\n      await next();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Query and Body Parameters with Decorators\nDESCRIPTION: Demonstrates how to access both query and body parameters using the `@Body` and `@Query` decorators in a single method.  Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('/')\nasync updateUser(@Body() user: User, @Query('pageIdx') pageIdx: number): Promise<User> {\n  // user 从 body 获取\n  // pageIdx 从 query 获取\n}\n```\n\n----------------------------------------\n\nTITLE: Single-Function Koa CORS Middleware Definition\nDESCRIPTION: This TypeScript code demonstrates how to apply Koa middleware (e.g., `@koa/cors`) to a single API function using the `Middleware` function from `@midwayjs/hooks`. The `logger` and `cors` middleware are applied only to this specific route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/middleware.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Middleware,\n} from '@midwayjs/hooks';\nimport logger from './logger';\nimport cors from '@koa/cors';\n\nexport default Api(\n  Get(),\n  // highlight-start\n  Middleware(logger, cors),\n  // highlight-end\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying Session Expiration Time (Koa)\nDESCRIPTION: This code demonstrates how to modify the session expiration time for a specific user session using `ctx.session.maxAge`.  It is commonly used to implement a \"Remember Me\" feature. It sets a 30-day expiration time if the user has selected to be remembered. Requires `FORMAT` from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Post, Body, Provide, FORMAT } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { UserService } from './service/user.service';\n\n@Controller('/')\nexport class UserController {\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  userService: UserService;\n\n  @Post('/')\n  async login(@Body() data) {\n   \tconst { username, password, rememberMe } = data;\n    const user = await this.userService.loginAndGetUser(username, password);\n\n    // Set Session\n    this.ctx.session.user = user;\n    // If the user checked \"Remember Me\", set a 30-day expiration time.\n    if (rememberMe) {\n      this.ctx.session.maxAge = FORMAT.MS.ONE_DAY * 30;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure JWT Secret - Typescript\nDESCRIPTION: This snippet shows how to configure the JWT secret and expiration time in the config.default.ts file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  jwt: {\n    secret: 'xxxxxxxxxxxxxx', // fs.readFileSync('xxxxx.key')\n    expiresIn: '2d' // https://github.com/vercel/ms\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Finding and Updating a Model\nDESCRIPTION: This TypeScript code demonstrates how to find an existing Sequelize model instance (Person) using `findOne()` and then update its attributes using the `save()` method and the `update()` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Person } from '../entity/person.entity';\n\n@Provide()\nexport class PersonService {\n  async updatePerson() {\n    const person = await Person.findOne();\n    // 更新\n    person.age = 100;\n    await person.save();\n\n    await Person.update(\n      {\n        name: 'bobby',\n      },\n      {\n        where: { id: 1 },\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Logs in MidwayJS\nDESCRIPTION: This snippet shows how to configure custom loggers in MidwayJS.  The `clients` section allows you to define custom loggers with specific settings, such as the `fileLogName`.  In this example, a custom logger named `abcLogger` is configured to write logs to a file named `abc.log`.  This custom logger can be injected using `@Logger('abcLogger')`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     clients: {\n       abcLogger: {\n         fileLogName: 'abc.log'\n         // ...\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Setting baseURL for @midwayjs/rpc Client - TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the baseURL for the @midwayjs/rpc HTTP client. The baseURL can be dynamically set based on the environment (development or production). It imports the `setupHttpClient` function from `@midwayjs/rpc` and configures the base URL using the `baseURL` option.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/client.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupHttpClient } from '@midwayjs/rpc';\n\nsetupHttpClient({\n  baseURL:\n    process.env.NODE_ENV ===\n    'development'\n      ? 'http://localhost:7001'\n      : 'https://api.example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cache with InjectClient\nDESCRIPTION: Injects a cache instance using the `@InjectClient` decorator and uses the `get` and `set` methods to retrieve and store data in the cache.  Dependencies: `@midwayjs/core`, `@midwayjs/cache-manager`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayCache } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n\n   @InjectClient(CachingFactory, 'default')\n   cache: MidwayCache;\n\n   async invoke(name: string, value: string) {\n     // Set up cache\n     await this.cache.set(name, value);\n     // Get cache\n     const data = await this.cache.get(name);\n     // ...\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Transactions - TypeScript\nDESCRIPTION: This snippet demonstrates how to implement TypeORM transactions in a MidwayJS application. It uses the `dataSource.transaction` method to execute a function within a transaction, ensuring atomicity.  Requires injecting `TypeORMDataSourceManager` to get access to the datasource.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { TypeORMDataSourceManager } from '@midwayjs/typeorm';\nimport { UserDTO } from '../entity/user';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  dataSourceManager: TypeORMDataSourceManager;\n\n  async updateUser(user: UserDTO) {\n\n    // get dataSource\n    const dataSource = this.dataSourceManager.getDataSource('default');\n\n    // start transaction\n    await dataSource.transaction(async (transactionalEntityManager) => {\n      // run code\n      await transactionalEntityManager.save(UserDTO, user);\n    });\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GET API endpoint with query parameters\nDESCRIPTION: This example shows how to define a GET API endpoint using Midway Hooks that accepts query parameters. It uses the `Api`, `Get`, `Query`, and `useContext` decorators to define the endpoint. The function retrieves the `name` parameter from the query string using `useContext` and returns a greeting message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Query,\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get('/hello'),\n  Query<{ name: string }>(),\n  async () => {\n    const ctx = useContext();\n    return 'Hello ${ctx.query.name}!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Initialization in DataListener with TypeScript\nDESCRIPTION: This code snippet shows how to define an asynchronous `initData` method within a `DataListener`. This allows for retrieving initial data from asynchronous sources such as databases or external APIs.  The class is decorated with `@Provide` and `@Scope` to be a singleton managed by the dependency injection container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_listener.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport class MemoryDataListener extends DataListener<string> {\n  async initData() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Guard to a Controller in TypeScript\nDESCRIPTION: This code snippet demonstrates how to apply a guard to a controller using the `@UseGuard` decorator from `@midwayjs/core`.  The `AuthGuard` is applied to the `HomeController`, meaning all routes within this controller will be protected by this guard.  The controller also utilizes the `@Controller` decorator to define the base route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from '@midwayjs/core';\nimport { AuthGuard } from '../guard/auth.guard';\n\n@UseGuard(AuthGuard)\n@Controller('/')\nexport class HomeController {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Consumer Configuration\nDESCRIPTION: Demonstrates the basic configuration structure for Kafka consumers within the `config.default` file. It shows how to define multiple consumers (`sub1`, `sub2`) and configure connection, consumer, and subscription options. These options control how the consumer connects to Kafka, identifies itself within a consumer group, and subscribes to specific topics.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        // ...\n      },\n      sub2: {\n        // ...\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure gRPC Component with Koa in Midway.js\nDESCRIPTION: This TypeScript code shows how to integrate the `@midwayjs/grpc` component alongside `@midwayjs/koa` within a Midway.js application. Both `koa` and `grpc` modules are included in the `imports` array within the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as grpc from '@midwayjs/grpc';\n\n@Configuration({\n  imports: [koa, grpc]\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSocket with Koa - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to integrate `@midwayjs/ws` with `@midwayjs/koa` in a MidwayJS application. By including both `koa` and `ws` in the `imports` array within the `@Configuration` decorator, the application gains both HTTP and WebSocket capabilities.  The `onReady` function is an async lifecycle hook that can be used for initialization tasks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as ws from '@midwayjs/ws';\n\n@Configuration({\n  imports: [koa, ws],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Community Middleware (koa-static)\nDESCRIPTION: This snippet illustrates how to integrate community middleware, specifically `koa-static`, into a Midway.js application.  It demonstrates how to require the middleware and use `useMiddleware` to add it to the application's middleware stack.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync onReady() {\n  // add middleware\n  this.app.useMiddleware(require('koa-static')(root, opts));\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst staticMiddleware = require('koa-static')(root, opts);\n\n// ...\nclass HomeController {\n  @Get('/controller', {middleware: [staticMiddleware]})\n  async getMethod() {\n    // ...\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst staticMiddleware = require('koa-static')(root, opts);\n\n// ...\nclass HomeController {\n  @Get('/controller')\n  async getMethod(ctx, next) {\n    // ...\n    return staticMiddleware(ctx, next);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Encrypted Cookie - TypeScript\nDESCRIPTION: This code sets a cookie with encryption enabled to prevent client-side tampering and plaintext viewing. By setting `httpOnly` to `true` and `encrypt` to `true`, the cookie's value is encrypted before transmission. This ensures that the client cannot see the plaintext value of the cookie and protects sensitive information from being easily accessed or modified.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nctx.cookies.set(key, value, {\n  httpOnly: true, // the default is true\n  encrypt: true, // encrypted transmission\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Data with TypeORM in MidwayJS\nDESCRIPTION: This snippet shows how to update an existing record in a database using TypeORM within a MidwayJS service. It retrieves a Photo entity by ID, modifies a property (name), and then saves the updated entity back to the database. It requires the Photo entity and the TypeORM Repository.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from '../entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n\n    let photoToUpdate = await this.photoModel.findOne({\n      where: {\n        id: 1,\n      },\n    });\n    photoToUpdate.name = \"Me, my friends and polar bears\";\n\n    await this.photoModel.save(photoToUpdate);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dependency Injection Container in Configuration (TypeScript)\nDESCRIPTION: This code snippet illustrates how to access the dependency injection container directly within the `onReady` lifecycle hook of a configuration file. The container is passed as a parameter to the `onReady` function, allowing direct interaction with the container during the application's startup phase.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, IMidwayContainer } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration {\n  async onReady(applicationContext: IMidwayContainer) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Local Strategy with MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to implement a local authentication strategy in MidwayJS using the `@CustomStrategy` decorator and extending `PassportStrategy`. It defines the `validate` method for user authentication and retrieves strategy options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/strategy/local.strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, IStrategyOptions } from 'passport-local';\nimport { Repository } from 'typeorm';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { UserEntity } from './user';\nimport * as bcrypt from 'bcrypt';\n\n@CustomStrategy()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  @InjectEntityModel(UserEntity)\n  userModel: Repository<UserEntity>;\n\n  // 策略的验证\n  async validate(username, password) {\n    const user = await this.userModel.findOneBy({ username });\n    if (!user) {\n      throw new Error('用户不存在 ' + username);\n    }\n    if (!await bcrypt.compare(password, user.password)) {\n      throw new Error('密码错误 ' + username);\n    }\n\n    return user;\n  }\n\n  // 当前策略的构造器参数\n  getStrategyOptions(): IStrategyOptions {\n    return {\n      usernameField: 'username',\n      passwordField: 'password',\n      passReqToCallback: true,\n      session: false\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Sequelize Data Source in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to get the Sequelize data source (the Sequelize instance) from the `SequelizeDataSourceManager` in MidwayJS. It also shows how to authenticate the connection.  This provides access to the underlying Sequelize instance for more advanced operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { SequelizeDataSourceManager } from '@midwayjs/sequelize';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n    const dataSourceManager = await container.getAsync(SequelizeDataSourceManager);\n    const conn = dataSourceManager.getDataSource('default');\n    await conn.authenticate();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Role-Based Authentication Guard in TypeScript\nDESCRIPTION: This code shows how to use the `@Role` decorator and `AuthGuard` to protect a route based on user roles. The `@Role(['admin'])` decorator specifies that only users with the 'admin' role can access the `/getUserRoles` route. The `AuthGuard` ensures that the role check is performed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\nimport { ReportMiddleware } from '../middleware/report.middlweare';\nimport { AuthGuard } from '../guard/auth.guard';\n\n@UseGuard(AuthGuard)\n@Controller('/user')\nexport class HomeController {\n\n  // Only admin access is allowed\n  @Role(['admin'])\n  @Get('/getUserRoles')\n  async getUserRoles() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Local Authentication Controller\nDESCRIPTION: This TypeScript code demonstrates how to implement a controller that uses the `LocalPassportMiddleware` to protect an endpoint. Upon successful authentication, the authenticated user information is available in `ctx.state.user`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller.ts\nimport { Post, Inject, Controller } from '@midwayjs/core';\nimport { LocalPassportMiddleware } from '../middleware/local.middleware';\n\n@Controller('/')\nexport class LocalController {\n  @Post('/passport/local', { middleware: [LocalPassportMiddleware] })\n  async localPassport() {\n    console.log('local user: ', this.ctx.state.user);\n    return this.ctx.state.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch FormData for file upload\nDESCRIPTION: This JavaScript code demonstrates how to upload a file using the Fetch API and FormData. It selects the file input element, creates a FormData object, appends the selected file to it, and then sends a POST request to the /api/upload endpoint with the FormData as the body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileInput = document.querySelector('#your-file-input') ;\nconst formData = new FormData();\nformData.append('file', fileInput.files[0]);\n\nfetch('/api/upload', {\n  method: 'POST',\n  body: formData,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Validate Pipeline Implementation in MidwayJS\nDESCRIPTION: This snippet demonstrates how to create a custom validation pipeline in MidwayJS by extending the `ParsePipe` class. The `getSchema` method is overridden to define the validation rules using the Joi format.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pipe } from '@midwayjs/core';\nimport { ParsePipe, RuleType } from '@midwayjs/validate';\n\n@Pipe()\nexport class ParseCustomDataPipe extends ParsePipe {\n   getSchema(): RuleType. AnySchema<any> {\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller with Redis Integration (TypeScript)\nDESCRIPTION: This TypeScript code defines a Midway.js controller that integrates with the Redis service. It includes two endpoints: '/' to retrieve a value from Redis and '/update' to set a value in Redis. Requires the RedisService to be available.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/deployment.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/decorator';\nimport { RedisService } from '../service/redis.service';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  redisService: RedisService;\n\n  @Get('/')\n  async home() {\n    let res = await this.redisService.getValue('foo');\n    return 'Hello Midwayjs!' + res;\n  }\n\n  @Get('/update')\n  async update() {\n    let res = await this.redisService.setValue('foo', 'hello world');\n    return res;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Encryption Keys - TypeScript\nDESCRIPTION: This configuration shows how to set up encryption keys for cookies in the `src/config/config.default.ts` file. The `keys` array contains a list of keys used for encrypting and decrypting cookies. The first key in the array is used for encryption, while all keys are used for decryption, allowing for key rotation without invalidating existing cookies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  keys: ['key1','key2'],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Clients\nDESCRIPTION: This TypeScript example shows how to configure multiple Redis clients in the `config.default.ts` file. Each client has its own host, port, password, and database settings, allowing you to connect to different Redis instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  redis: {\n\t\t// Multi Redis\n    clients: {\n      instance1: {\n        host: 'host',\n        port: 'port',\n        password: 'password',\n        db: 'db',\n      },\n      instance2: {\n        host: 'host',\n        port: 'port',\n        password: 'password',\n        db: 'db',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting TTL\nDESCRIPTION: Sets the time-to-live (TTL) dynamically when setting a value in the cache. The TTL value is provided in milliseconds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.cache.set('key', 'value', 1000);\n```\n\n----------------------------------------\n\nTITLE: Class Injection with Component (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use a component by injecting its classes into other parts of the application.  It injects the `BookService` from `midway-component-book` into the `Library` class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { BookService } from 'midway-component-book';\n\n@Provide()\nexport class Library {\n\n  @Inject();\n  bookService: BookService;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Exception Filter in Typescript\nDESCRIPTION: This code defines a global exception filter `AllErrorFilter` that catches all exceptions. It uses the `@Catch()` decorator from `@midwayjs/core` without any specific error type, indicating that it should catch all errors. The `catch` method handles the error and can perform actions like logging or returning a unified error format. Requires `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/all.filter.ts\nimport { Catch } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch()\nexport class AllErrorFilter {\n  async catch(err: Error, ctx: Context) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data with Prisma\nDESCRIPTION: Shows how to add data using the Prisma Client. This example demonstrates user registration with name and email, using the create method with the data option. It also uses @midwayjs/hooks for API definition and parameter validation via Zod.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/prisma.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post,\n  Validate\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\nimport { prisma } from './prisma';\n\nexport const signUp = Api (\n  Post(),\n  Validate (\n    z.string(),\n    z.string().email()\n  ),\n  async (\n    name: string,\n    email: string\n  ) => {\n    const result =\n      await prisma.user.create({\n        data: {\n          name,\n          email\n        },\n      });\n    return result;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Add Busboy Dependency in package.json\nDESCRIPTION: Adds @midwayjs/busboy as a dependency in the package.json file.  This ensures that the project can resolve and use the busboy package. After adding this entry, run npm install.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/busboy\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning data using ctx.body (Typescript)\nDESCRIPTION: Demonstrates returning different types of data from a MidwayJS controller method using `ctx.body`, including strings, JSON objects, HTML, and streams.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, HttpCode } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    // 返回字符串\n    this.ctx.body = \"Hello Midwayjs!\";\n\n    // 返回 json\n    this.ctx.body = {\n      a: 1,\n      b: 2,\n    };\n\n    // 返回 html\n    this.ctx.body = '<html><h1>Hello</h1></html>';\n\n    // 返回 stream\n    this.ctx.body = fs.createReadStream('./good.png');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Body Parameters with ApiBody and Body Decorator\nDESCRIPTION: This TypeScript code shows how to define body parameters using the `@Body` decorator. The `@ApiProperty` needs to be used to provide the swagger definitions. \nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDTO {\n  @ApiProperty()\n  name: string;\n}\n\n@Post('/update_user')\nasync upateUser(@Body() dto: UserDTO) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Data Sources for Multiple Databases\nDESCRIPTION: This TypeScript code shows how to configure multiple MongoDB data sources in the `src/config/config.default.ts` file. Each data source represents a separate MongoDB database, with its own connection URI, options, and associated entities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { User, User2 } from '../entity/user';\n\nexport default {\n  // ...\n  mongoose: {\n    dataSource: {\n      default: {\n        uri: 'mongodb://localhost:27017/test',\n        options: {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n          user: '***********',\n          pass: '***********'\n        },\n        entities: [ User ]\n      },\n      db1: {\n        uri: 'mongodb://localhost:27017/test1',\n        options: {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n          user: '***********',\n          pass: '***********'\n        },\n        entities: [ User2 ]\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer Implementation (eachBatch)\nDESCRIPTION: This TypeScript code demonstrates a Kafka consumer implementation using the `@KafkaConsumer` decorator and the `IKafkaConsumer` interface. The `eachBatch` method is used to process messages in batches.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/consumer/sub1.consumer.ts\nimport { KafkaConsumer, IKafkaConsumer, EachBatchPayload } from '@midwayjs/kafka';\n\n@KafkaConsumer('sub1')\nclass Sub1Consumer implements IKafkaConsumer {\n  async eachBatch(payload: EachBatchPayload) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Security Certificate for gRPC Server (config.default.ts)\nDESCRIPTION: This code snippet shows how to provide security certificates for the gRPC server in the `config.default.ts` file. It reads the certificate, private key, and certificate chain from files and uses them to create SSL credentials using `ServerCredentials.createSsl`. These credentials are then passed to the `grpcServer` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { MidwayAppInfo, MidwayConfig } from '@midwayjs/core';\nimport { ServerCredentials } from '@midwayjs/grpc';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst cert = readFileSync(join(__dirname, './cert/server.crt'));\nconst pem = readFileSync(join(__dirname, './cert/server.pem'));\nconst key = readFileSync(join(__dirname, './cert/server.key'));\n\nexport default (appInfo: MidwayAppInfo): MidwayConfig => {\n  return {\n    // ...\n    grpcServer: {\n      // ...\n      credentials: ServerCredentials.createSsl(cert, [{ private_key: key, cert_chain: pem }]);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Error Codes\nDESCRIPTION: This snippet shows how to register error codes using the `registerErrorCode` function from `@midwayjs/core`. This ensures error code uniqueness and formatting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_error.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerErrorCode } from '@midwayjs/core';\n\nexport const FrameworkErrorEnum = registerErrorCode('midway', {\n  UNKNOWN: 10000,\n  COMMON: 10001,\n  PARAM_TYPE: 10002,\n\t// ...\n} as const);\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Association\nDESCRIPTION: This TypeScript code demonstrates how to define a one-to-one association between two Sequelize models (Photo and User) using sequelize-typescript decorators. It uses `@HasOne(...)` and `@BelongsTo(...)` to establish the relationship, with the foreign key on the Photo model.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Column, Model, BelongsTo, ForeignKey } from 'sequelize-typescript';\nimport { User } from './user.entity';\n\n@Table\nexport class Photo extends Model {\n  @ForeignKey(() => User)\n  @Column({\n    comment: '用户Id',\n  })\n  userId: number;\n\n  @BelongsTo(() => User)\n  user: User;\n\n  @Column({\n    comment: '名字',\n  })\n  name: string;\n}\n\n@Table\nexport class User extends Model {\n  @Column\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Status and Headers with HttpServerResponse (TypeScript)\nDESCRIPTION: This code demonstrates how to set HTTP status codes and headers using `HttpServerResponse`. It includes examples for setting a single header and multiple headers at once. The `headers` method expects an object where keys are header names and values are header values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// status\nserverResponse.status(200).text('abcde');\n// header\nserverResponse.header('Content-Type', 'text/html').text('<div>hello</div>');\n// headers\nserverResponse.headers({\n  'Content-Type': 'text/plain',\n  'Content-Length': '100'\n}).text('a'.repeat(100));\n```\n\n----------------------------------------\n\nTITLE: Creating a route using OOP in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a route using the object-oriented programming paradigm in Midway.js. It uses decorators from `@midwayjs/decorator` to define a controller and a GET route. The `HomeController` class is decorated with `@Provide()` and `@Controller('/')`, indicating that it's a controller and handles requests to the root path. The `home` method is decorated with `@Get('/')`, indicating that it handles GET requests to the root path. The method retrieves the client's IP address from the context and returns a JSON response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/intro.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\nimport { Controller, Get, Provide, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    return {\n      message: 'Hello Midwayjs!',\n      query: this.ctx.ip,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending FileTransport\nDESCRIPTION: This code snippet shows how to extend the FileTransport class to create a custom transport. The CustomTransport class inherits from FileTransport and overrides the log method to add custom logic for writing log messages to a file. This example demonstrates checking the log level, formatting the message, and writing it to the log stream. Requires `@midwayjs/logger`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileTransport, isEnableLevel, LoggerLevel, LogMeta } from '@midwayjs/logger';\n\n// Transport 的配置\ninterface CustomOptions {\n  // ...\n}\n\nclass CustomTransport extends FileTransport {\n  log(level: LoggerLevel | false, meta: LogMeta, ...args) {\n    // 判断 level 是否满足当前 Transport\n  \tif (!isEnableLevel(level, this.options.level)) {\n      return;\n    }\n    \n    // 使用内置的格式化方法格式化消息\n    let buf = this.format(level, meta, args) as string;\n    // 加上换行符\n    buf += this.options.eol;\n\n    // 写入自己想写的日志\n    if (this.options.bufferWrite) {\n      this.bufSize += buf.length;\n      this.buf.push(buf);\n      if (this.buf.length > this.options.bufferMaxLength) {\n        this.flush();\n      }\n    } else {\n      // 没启用缓存，则直接写入\n      this.logStream.write(buf);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Context Logger Output Format\nDESCRIPTION: This snippet demonstrates how to configure a custom format specifically for context loggers. The `contextFormat` option allows modification of the log output based on the context object (`ctx`). The provided example adds the request processing time and HTTP method to the log message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      customLogger: {\n        contextFormat: info => {\n          const ctx = info.ctx;\n          return `${info.timestamp} ${info.LEVEL} ${info.pid} [${Date.now() - ctx.startTime}ms ${ctx.method}] ${info.message}`;\n        }\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Get Body, Path, IP with Decorators in MidwayJS\nDESCRIPTION: This code snippet shows the use of multiple decorators, including `@Body`, `@RequestPath`, and `@RequestIP`, to retrieve data from different sources in a MidwayJS controller. It retrieves the 'id' from request body, path and ip address of the client. Dependencies: `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('/')\nasync updateUser (\n  @Body('id') id: string,\n  @RequestPath() p: string\n  @RequestIP() ip: string): Promise<User> {\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Redis Cache Configuration\nDESCRIPTION: This snippet illustrates how to configure the Midway Cache component to use Redis as the storage backend. It includes settings for the Redis host, port, password, database, key prefix, and TTL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as redisStore from 'cache-manager-ioredis';\n\nexport const cache = {\n  store: redisStore,\n  options: {\n    host: 'localhost', // default value\n    port: 6379, // default value\n    password: '',\n    db: 0,\n    keyPrefix: 'cache:',\n    ttl: 100,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple MySQL Data Sources\nDESCRIPTION: This code snippet demonstrates how to configure multiple MySQL data sources in the `src/config/config.default.ts` file. It defines a `mysql` object with a `dataSource` property containing configurations for multiple databases. This allows the MidwayJS application to connect to and manage multiple MySQL databases. No additional dependencies are explicitly listed, but mysql2 is required.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const mysql = {\n  dataSource: {\n    dataSource1: {\n      host: 'localhost',\n      user: 'root',\n      database: 'test'\n    },\n    dataSource2: {\n      host: 'localhost',\n      user: 'root',\n      database: 'test'\n    },\n    dataSource3: {\n      host: 'localhost',\n      user: 'root',\n      database: 'test'\n    },\n  }\n  // Other configurations\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handle NotFound Error\nDESCRIPTION: This code snippet demonstrates how to handle `NotFoundError` exceptions in MidwayJS using an exception filter. It redirects the user to a 404 page or returns a custom message when a route is not found. It catches `httpError.NotFoundError`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/notfound.filter.ts\nimport { Catch, httpError, MidwayHttpError } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch(httpError.NotFoundError)\nexport class NotFoundFilter {\n  async catch(err: MidwayHttpError, ctx: Context) {\n    // 404 错误会到这里\n    ctx.redirect('/404.html');\n\n    // 或者直接返回一个内容\n    return {\n      message: '404, ' + ctx.path\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Strategy Example - Typescript\nDESCRIPTION: This snippet shows an example of implementing a local authentication strategy using @midwayjs/passport. It defines a LocalStrategy class that extends PassportStrategy and overrides the validate method to authenticate users based on username and password.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/strategy/local.strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, IStrategyOptions } from 'passport-local';\nimport { Repository } from 'typeorm';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { UserEntity } from './user';\nimport * as bcrypt from 'bcrypt';\n\n@CustomStrategy()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n   @InjectEntityModel(UserEntity)\n   userModel: Repository<UserEntity>;\n\n   //Verification of strategy\n   async validate(username, password) {\n     const user = await this.userModel.findOneBy({ username });\n     if (!user) {\n       throw new Error('User does not exist ' + username);\n     }\n     if (!(await bcrypt.compare(password, user.password))) {\n       throw new Error('Password is incorrect ' + username);\n     }\n\n     return user;\n   }\n\n   // Constructor parameters of the current strategy\n   getStrategyOptions(): IStrategyOptions {\n     return {\n      usernameField: 'username',\n      passwordField: 'password',\n      passReqToCallback: true,\n      session: false\n    };\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Upload API\nDESCRIPTION: Creates an API endpoint for handling file uploads using `@midwayjs/hooks-upload`. The `Upload` decorator specifies the path for the upload endpoint, and `useFiles` retrieves the uploaded files from the request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/upload.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Api } from '@midwayjs/hooks';\nimport {\n  Upload,\n  useFiles,\n} from '@midwayjs/hooks-upload';\n\nexport default Api(\n  Upload('/api/upload'),\n  async () => {\n    const files = useFiles();\n    return files;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Aspect with Custom Priority in TypeScript\nDESCRIPTION: This code defines an aspect named `MyAspect2` that intercepts methods of `HomeController`. It implements the `IMethodAspect` interface and logs '222' to the console before the intercepted method is executed.  The `@Aspect` decorator takes a third parameter to set the priority to 1. A higher number indicates higher priority during registration, but later execution due to the onion model.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Aspect([HomeController], '*', 1) // Priority can be set here\nexport class MyAspect2 implements IMethodAspect {\n  before(point: JoinPoint) {\n    console.log('222');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Calling API Endpoint in Midway Hooks\nDESCRIPTION: This code snippet shows how to manually call an API endpoint by specifying the path directly, without using `getApiTrigger`. It uses `@midwayjs/mock` and `createHttpRequest` to send a GET request and assert the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Hello World', async () => {\n  const response = await createHttpRequest(app)\n    .get('/hello')\n    .expect(200);\n  expect(response.text).toBe('Hello World!');\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Call Example for ValidateHttp\nDESCRIPTION: This code demonstrates a manual call to the `/api/filterPosts` endpoint using `fetcher.get` with an invalid `searchString` (string with length 1). It catches the validation error and logs the parsed error message and the HTTP status code (422).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfetcher\n  .get(\n    '/api/filterPosts?searchString=1'\n  )\n  .catch((error) => {\n    console.log(\n      JSON.parse(error.data.message)\n    );\n    console.log(error.status); // 422\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Repository Pattern for CRUD Operations in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the Repository pattern in MidwayJS with Sequelize for performing basic CRUD operations. It uses the `InjectRepository` decorator to inject the `Repository` for `User` and `Photo` entities. It shows examples of querying, creating, deleting, and performing combined queries with `Op.or` and table joins.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\nimport { InjectRepository } from '@midwayjs/sequelize';\nimport { Photo } from '../entity/photo.entity';\nimport { User } from '../entity/user.entity';\nimport { Op } from 'sequelize';\nimport { Repository } from 'sequelize-typescript';\n\n@Controller('/')\nexport class HomeController {\n  @InjectRepository(User)\n  userRepository: Repository<User>;\n\n  @InjectRepository(Photo)\n  photoRepository: Repository<Photo>;\n\n  @Get('/')\n  async home() {\n    // 查询\n    let result = await this.photoRepository.findAll();\n    console.log(result);\n\n    // 新增\n    await this.photoRepository.create({\n      name: '123',\n    });\n\n    // 删除\n    await this.photoRepository.destroy({\n      where: {\n        name: '123',\n      },\n    });\n\n    // 联合查询\n    // SELECT * FROM photo WHERE name = \"23\" OR name = \"34\";\n    let result = await this.photoRepository.findAll({\n      where: {\n        [Op.or]: [{ name: '23' }, { name: '34' }],\n      },\n    });\n    // => result\n\n    // 连表查询\n    let result = await this.userRepository.findAll({ include: [Photo] });\n    // => result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration\nDESCRIPTION: This TypeScript code defines the structure for CORS configuration options. The `cors` object contains properties like `allowMethods`, `origin`, `exposeHeaders`, `allowHeaders`, `credentials`, `keepHeadersOnError`, and `maxAge`, which control various aspects of CORS behavior. These settings determine which origins and methods are allowed, which headers are exposed, and how credentials are handled.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cross-domain/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const cors = {\n  allowMethods: string |string[];\n  origin: string|Function;\n  exposeHeaders: string |string[];\n  allowHeaders: string |string[];\n  credentials: boolean|Function;\n  keepHeadersOnError: boolean;\n  maxAge: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Define a Task Processor with @Processor Decorator\nDESCRIPTION: This TypeScript snippet shows how to define a task processor using the `@Processor` decorator from `@midwayjs/bull`. The decorator takes the queue name (`test` in this case) as an argument. The `execute` method will contain the logic to be executed for each job in the queue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/queue/test.queue.ts\nimport { Processor, IProcessor } from '@midwayjs/bull';\n\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request-Scoped Instances in Middleware\nDESCRIPTION: This code demonstrates how to access request-scoped instances within a Midway.js middleware.  Since middleware are Singleton-scoped, direct injection using `@Inject()` will not work. Instead, the `ctx.requestContext.getAsync` method is used to retrieve the request-scoped instance from the context. This ensures that the middleware operates with the correct request context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/web_middleware.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/decorator';\nimport { IWebMiddleware, IMidwayWebNext } from '@midwayjs/web';\nimport { Context } from 'egg';\n\n@Provide()\nexport class ReportMiddleware implements IWebMiddleware {\n  resolve() {\n    return async (ctx: Context, next: IMidwayWebNext) => {\n      const userService = await ctx.requestContext.getAsync<UserService>('userService');\n      // TODO userService.xxxx\n      await next();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Third-Party Store\nDESCRIPTION: Configures a third-party cache store, specifically `redisStore` from `cache-manager-ioredis-yet`.  It demonstrates how to integrate external cache stores into the MidwayJS cache manager.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { redisStore } from 'cache-manager-ioredis-yet';\n\nexport default {\n  cacheManager: {\n    clients: {\n      default: {\n        store: redisStore,\n        options: {\n          port: 6379,\n          host: 'localhost',\n          ttl: 10,\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting IoC Instance with ctx.requestContext\nDESCRIPTION: This snippet illustrates how to retrieve an object instance from the IoC container within the current request scope using `ctx.requestContext.getAsync`.  It retrieves an instance of `UserService` which should be a class decorated with `@Provide()`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_context.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst userService = await ctx.requestContext.getAsync(UserService);\n```\n\n----------------------------------------\n\nTITLE: Configuring BodyParser in Koa with Midway\nDESCRIPTION: This TypeScript code shows how to configure the `bodyParser` middleware in a MidwayJS application using Koa. It allows specifying the enabled types (json, form, text, xml) and setting limits for each type. It also shows how to disable bodyParser.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  bodyParser: {\n    enableTypes: ['json', 'form', 'text', 'xml'],\n    formLimit: '1mb',\n    jsonLimit: '1mb',\n    textLimit: '1mb',\n    xmlLimit: '1mb',\n  },\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  bodyParser: {\n    enable: false,\n    // ...\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Repeated Task Configuration with @Processor Decorator (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure a repeated task using the `@Processor` decorator in MidwayJS with the Bull module. It defines a processor named 'test' that executes every 5 seconds based on the provided cron expression. The `FORMAT.CRONTAB.EVERY_PER_5_SECOND` constant comes from `@midwayjs/core`. It includes a placeholder for the `execute` method, where the actual task logic would be implemented.  Dependencies: `@midwayjs/bull`, `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, IProcessor } from '@midwayjs/bull';\nimport { FORMAT } from '@midwayjs/core';\n\n@Processor('test', {\n  repeat: {\n    cron: FORMAT.CRONTAB.EVERY_PER_5_SECOND\n  }\n})\nexport class TestProcessor implements IProcessor {\n  @Inject()\n  logger;\n\n  async execute() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Guards in TypeScript\nDESCRIPTION: This demonstrates applying multiple guards to a class or method by passing an array of guard classes to the `@UseGuard` decorator.  Both `AuthGuard` and `Auth2Guard` must pass for the request to proceed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@UseGuard([AuthGuard, Auth2Guard])\n```\n\n----------------------------------------\n\nTITLE: Injecting JWT Service in MidwayJS\nDESCRIPTION: This snippet shows how to inject the `JWTService` into a MidwayJS class using the `@Inject` decorator. This allows the class to utilize the JWT service for signing and verifying tokens. The `@Provide` decorator marks the class as a provider for dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/jwt/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JWTService } from '@midwayjs/jwt';\n\n@Provide()\nclass Demo {\n  @Inject()\n  jwt: JwtService;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Security Certificates for gRPC\nDESCRIPTION: This TypeScript snippet demonstrates how to configure security certificates for a gRPC server in a Midway.js application. It reads the certificate, private key, and certificate chain from files and uses them to create SSL server credentials, which are then passed to the `grpcServer` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { MidwayAppInfo, MidwayConfig } from '@midwayjs/core';\nimport { ServerCredentials } from '@midwayjs/grpc';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst cert = readFileSync(join(__dirname, './cert/server.crt'));\nconst pem = readFileSync(join(__dirname, './cert/server.pem'));\nconst key = readFileSync(join(__dirname, './cert/server.key'));\n\nexport default (appInfo: MidwayAppInfo): MidwayConfig => {\n  return {\n    // ...\n    grpcServer: {\n      // ...\n      credentials: ServerCredentials.createSsl(cert, [{ private_key: key, cert_chain: pem }]);\n    }\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logging within a Serverless Function\nDESCRIPTION: This code shows how to use the `ctx.logger` object within a Midway Serverless function to log information, warnings, and errors. The `ctx.logger` provides a standard logging interface for serverless functions.  The runtime passes the log object for each request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_context.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.logger.info('hello');\nctx.logger.warn('hello');\nctx.logger.error('hello');\n```\n\n----------------------------------------\n\nTITLE: Basic bull configuration\nDESCRIPTION: This TypeScript code shows a basic configuration for the bull component, setting the Redis connection string.  All queues will reuse this configuration. Replace the redis URL with your actual Redis instance URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  bull: {\n    // default queue configuration\n    defaultQueueOptions: {\n    \tredis: 'redis://127.0.0.1:32768',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pipeline in Series Mode in TypeScript\nDESCRIPTION: This example demonstrates how to execute the pipeline in series mode using the `series` method of the `IPipelineHandler`. The valve handlers are executed sequentially, one after the other, in the order they are defined in the `@Pipeline` decorator.  The `series` method returns a Promise that resolves with an object, similar to the `parallel` mode, where each key corresponds to the alias of a valve handler, and the value is the result of that handler's execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // Declare a pipeline here\n  @Pipeline([VideoFeeds, AccountMap, CrowFeeds])\n  stages: IPipelineHandler;\n\n  async runSeries(): Promise<any> {\n    // Here the serial execution videoFeeds, accountMap, crowFeeds\n    return this.stages.series<any>({\n      args: {aa: 123}\n    });\n\n    // The result returned here is an object, and the result is the same as the object assembly rule returned by the parallel.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Provider UUID (TypeScript)\nDESCRIPTION: This code shows how to retrieve the automatically generated UUID for a class that is exposed as a provider using `@Provide`.  This UUID can be used for dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getProviderUUId } from '@midwayjs/core';\n\nconst uuid = getProviderUUId(B);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Define an Internal Server Error Filter\nDESCRIPTION: This code defines an exception filter in MidwayJS to catch InternalServerErrorError exceptions. It uses the `@Catch` decorator to specify the error type to catch and provides a `catch` method to handle the error and return a response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/internal.filter.ts\nimport { Catch, httpError, MidwayHttpError } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch(httpError.InternalServerErrorError)\nexport class InternalServerErrorFilter {\n  async catch(err: MidwayHttpError, ctx: Context) {\n\n    // ...\n    return 'got 500 error, ' + err.message;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a RabbitMQ Producer Service\nDESCRIPTION: This code snippet demonstrates creating a RabbitMQ producer service in MidwayJS using `amqp-connection-manager`. The service connects to RabbitMQ, creates a channel, asserts a queue, and provides a method to send messages to the queue. It uses the `@midwayjs/core` decorators for dependency injection and lifecycle management (Init, Destroy).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum, Init, Autoload, Destroy } from '@midwayjs/core';\nimport * as amqp from 'amqp-connection-manager'\n\n@Autoload()\n@Provide()\n@Scope(ScopeEnum.Singleton) // Singleton singleton, globally unique (process level)\nexport class RabbitmqService {\n\n  private connection: amqp.AmqpConnectionManager;\n\n  private channelWrapper;\n\n  @Init()\n  async connect() {\n    // To create a connection, you can put the configuration in Config and inject it into it.\n    this.connection = await amqp.connect('amqp://localhost');\n\n    // Create channel\n    this.channelWrapper = this.connection.createChannel({\n      json: true,\n      setup: function(channel) {\n        return Promise.all ([\n          // Binding queue\n        \tchannel.assertQueue(\"tasks\", { durable: true })\n        ]);\n      }\n    });\n  }\n\n  // Send a message\n  public async sendToQueue(queueName: string, data: any) {\n  \treturn this.channelWrapper.sendToQueue(queueName, data);\n  }\n\n  @Destroy()\n  async close() {\n  \tawait this.channelWrapper.close();\n    await this.connection.close();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Options for JS Access and Encryption (TypeScript)\nDESCRIPTION: This code demonstrates how to set cookie options to allow JavaScript access or to encrypt the cookie in a Midway.js Koa application.  It showcases setting the `httpOnly` and `signed` options to allow JS access, and the `httpOnly` and `encrypt` options to prevent modification and ensure privacy.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.cookies.set(key, value, {\n  httpOnly: false,\n  signed: false,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nctx.cookies.set(key, value, {\n  httpOnly: true, // 默认就是 true\n  encrypt: true, // 加密传输\n});\n```\n\n----------------------------------------\n\nTITLE: UserService with RegValid and CutPipe\nDESCRIPTION: This code demonstrates the usage of the custom `RegValid` decorator with the `CutPipe`. The `invoke` method uses the `RegValid` decorator to validate the `phoneNumber` parameter against the provided regular expression and apply the `CutPipe` to it.  This means the phone number will be validated, and then the last 6 digits will be returned.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipe.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserService {\n   async invoke(@RegValid(/\\d{11}/, CutPipe) phoneNumber: string) {\n     return phoneNumber;\n   }\n}\n\ninvoke(13712345678) => '345678'\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path in MidwayJS\nDESCRIPTION: This commit fixes an issue where the Swagger UI was not correctly resolving the JSON path. This resolves issues with documentation generation and display within Swagger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Hook for IP Address Access in Midway Hooks\nDESCRIPTION: This code demonstrates how to create a reusable hook, `useIp`, which encapsulates the logic for accessing the IP address from the Koa context.  This hook can then be used in multiple API interfaces to simplify context access. It requires `@midwayjs/hooks` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/builtin-hooks.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api\n  Get\n  useContext\n} from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/koa';\n\nfunction useIp() {\n  const ctx = useContext<Context>();\n  return ctx.ip;\n}\n\nexport default Api(Get(), async () => {\n  const ip = useIp();\n  return {\n    ip\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Calling gRPC Service from Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to obtain a gRPC service client instance from the injected `Clients` object and invoke its methods. It shows how to call a `sayHello` method and process the returned result. The dependencies are `@midwayjs/core` and `@midwayjs/grpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Provide,\n  Inject,\n} from '@midwayjs/core';\nimport { helloworld, hero } from '../interface';\nimport { Clients } from '@midwayjs/grpc';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  grpcClients: Clients;\n\n  async invoke() {\n    // 获取服务\n  \tconst greeterService = this.grpcClients.getService<helloworld.GreeterClient>(\n      'helloworld.Greeter'\n    );\n\n    // 调用服务\n    const result = await greeterService.sayHello()\n    \t.sendMessage({\n        name: 'harry'\n      });\n\n    // 返回结果\n    return result;\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Throwing Built-in Http Exception in Typescript\nDESCRIPTION: This snippet showcases how to throw a built-in HTTP exception from `@midwayjs/core`. Specifically, it throws an `InternalServerErrorError`, which results in an HTTP 500 status code. Useful for signaling server-side errors during request processing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { httpError } from '@midwayjs/core';\n\n// ...\n\nasync findAll() {\n  // something wrong\n  throw new httpError.InternalServerErrorError();\n}\n\n// got status: 500\n\n```\n\n----------------------------------------\n\nTITLE: Configuring BodyParser in MidwayJS (TypeScript)\nDESCRIPTION: This snippet shows how to configure the `bodyParser` middleware in MidwayJS to customize the size limits for different content types. It sets `formLimit`, `jsonLimit`, `textLimit`, and `xmlLimit` to '1mb'. This allows the application to handle larger payloads for these content types. The configuration needs to be placed in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  bodyParser: {\n    formLimit: '1mb',\n    jsonLimit: '1mb',\n    textLimit: '1mb',\n    xmlLimit: '1mb',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PhotoMetadata Entity with One-to-One Relationship\nDESCRIPTION: This code defines the `PhotoMetadata` entity with a one-to-one relationship to the `Photo` entity using TypeORM. The `@OneToOne` decorator specifies the relationship, and `@JoinColumn` indicates that this side of the relationship owns the foreign key. The `type => Photo` syntax is used to specify the related entity class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { Photo } from './photo';\n\n@Entity()\nexport class PhotoMetadata {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column(\"int\")\n  height: number;\n\n  @Column(\"int\")\n  width: number;\n\n  @Column()\n  orientation: string;\n\n  @Column()\n  compressed: boolean;\n\n  @Column()\n  comment: string;\n\n  @OneToOne(type => Photo)\n  @JoinColumn()\n  photo: Photo;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Guard in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to implement a guard in MidwayJS using TypeScript. Guards are similar to middleware and filters, providing a reusable mechanism for authorization and access control across the framework. It shows the structure of a guard class with the `canActivate` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-10-12-release-3-6.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IMiddleware, Guard, IGuard } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Guard()\nexport class AuthGuard implements IGuard<Context> {\n  async canActivate(context: Context, suppilerClz, methodName: string): Promise<boolean> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a POST Request with Form Body Parameters\nDESCRIPTION: This TypeScript code demonstrates creating a POST request with form-encoded body parameters using `createHttpRequest`. It is frequently used for testing form submissions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app)\n  .post('/param/body')\n  .type('form')\n  .send({id: '1'})\n```\n\n----------------------------------------\n\nTITLE: ParseBoolPipe Example\nDESCRIPTION: Demonstrates how to use ParseBoolPipe to convert parameters to booleans. Only 'true' will convert to boolean true, any other value will throw error.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ParseBoolPipe } from '@midwayjs/validate';\n\n// ...\nasync update(@Body('isMale', [ParseBoolPipe]) isMale: boolean) {\n  return isMale;\n}\n\nupdate({ isMale: 'true'} ); => true\nupdate({ isMale: '0'} ); => Error\n```\n\n----------------------------------------\n\nTITLE: Configure Upload Component\nDESCRIPTION: This code demonstrates how to configure the @midwayjs/upload component. It shows the available configuration options, including upload mode (file or stream), maximum file size, file extension whitelist, temporary directory path, cleanup timeout, and base64 format setting.  Dependencies: path, os.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/upload/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const upload = {\n  // mode: UploadMode, 默认为file，即上传到服务器临时目录，可以配置为 stream\n  mode: 'file',\n  // fileSize: string, 最大上传文件大小，默认为 10mb\n  fileSize: '10mb',\n  // whitelist: string[]，文件扩展名白名单，默认为 null\n  whitelist: null,\n  // tmpdir: string，上传的文件临时存储路径\n  tmpdir: join(tmpdir(), 'midway-upload-files'),\n  // cleanTimeout: number，上传的文件在临时目录中多久之后自动删除，默认为 5 分钟\n  cleanTimeout: 5 * 60 * 1000,\n  // base64: boolean，设置原始body是否是base64格式，默认为false，一般用于腾讯云的兼容\n  base64: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ManyToOne Relationship - TypeScript\nDESCRIPTION: This snippet defines a ManyToOne relationship between `Photo` and `Author` entities. The `Photo` entity has an `author` property decorated with `@ManyToOne`, indicating that each photo has one author. The author property is part of reverse relation with photos property in Author entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from 'typeorm';\nimport { Column, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport { PhotoMetadata } from './photoMetadata.entity';\nimport { Author } from './author.entity';\n\n@Entity()\nexport class Photo {\n\n  /* ... other columns */\n\n  @ManyToOne(type => Author, author => author.photos)\n  author: Author;\n}\n```\n\n----------------------------------------\n\nTITLE: Install @koa/cors dependency\nDESCRIPTION: This command installs the @koa/cors package as a dependency for your project.  @koa/cors is a Koa middleware that provides Cross-Origin Resource Sharing (CORS) functionality.  It's a prerequisite for configuring CORS in your Midway Hooks application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/cors.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @koa/cors\n```\n\n----------------------------------------\n\nTITLE: Singleton Service Example (TypeScript)\nDESCRIPTION: This example showcases the usage of the `@Scope` decorator to define a UserService as a singleton. Any injection of this service will result in the same instance being used throughout the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// service\nimport { Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class UserService {\n  //...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retry Asynchronous Function with retryWithAsync in TypeScript\nDESCRIPTION: This code demonstrates how to use `retryWithAsync` from `@midwayjs/core` to retry an asynchronous function. It defines an `invoke` function and uses `retryWithAsync` to create a new function `invokeNew` that retries the original function up to three times (default call + 2 retries).  If all retries fail, a `MidwayRetryExceededMaxTimesError` is thrown.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/retry.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { retryWithAsync } from '@midwayjs/core';\n\nasync function invoke(id) {\n  // ...\n}\n\nasync function someServiceMethod() {\n  // The default call, plus two retries, can be executed up to three times.\n  const invokeNew = retryWithAsync(invoke, 2);\n\n  try {\n    return await invokeNew(1);\n  } catch(err) {\n\n    // err\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using Model\nDESCRIPTION: Demonstrates how to insert data into the database using the entity model. It uses the `@InjectEntityModel` decorator to inject the model and then saves a new entity instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from '../entity/photo';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // save\n  async savePhoto() {\n    // create a entity object\n    let photo = new Photo();\n    photo.name = 'Me and Bears';\n    photo.description = 'I am near polar bears';\n    photo.filename = 'photo-with-bears.jpg';\n    photo.views = 1;\n    photo.isPublished = true;\n\n    // save entity\n    const photoResult = await this.photoModel.save(photo);\n\n    // save success\n    console.log('photo id = ', photoResult.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add static-file as a Dependency in package.json\nDESCRIPTION: This JSON snippet adds @midwayjs/static-file as a dependency in the package.json file, which is required for the component to be installed and used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/static_file.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/static-file\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Flows\nDESCRIPTION: This TypeScript code demonstrates how to create a task flow using the `FlowProducer`. This allows you to define dependencies between tasks, so that one task will start only after the other has been completed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst flowProducer = bullmqFramework.createFlowProducer({}, 'test-flow');\n\n// 创建任务流\nawait flowProducer.add({\n  name: 'flow-test',\n  queueName: 'flow-queue-1',\n  data: { value: 1 },\n  children: [\n    {\n      name: 'child-job',\n      queueName: 'flow-queue-2',\n      data: { value: 2 }\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Full stack application params call\nDESCRIPTION: This example shows how to call a Midway Hooks API (defined elsewhere) from a full-stack application, passing path parameters. It imports the API function `getArticle` and calls it with a params object containing `id`. The response is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport getArticle from './api/article';\nconst response = await getArticle({\n  params: { id: '100'}\n});\nconsole.log(response); // { article: '100'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation with maxFiles (number)\nDESCRIPTION: This code snippet demonstrates configuring log rotation by specifying the maximum number of log files to retain. The maxFiles property is set to '3', indicating that only the 3 most recent log files should be kept. This configuration is part of the midwayLogger configuration in a MidwayConfig object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        file: {\n          maxFiles: '3',\n        },\n        error: {\n          maxFiles: '3d',\n        },\n      }\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Namespace Middleware Registration in MidwayJS (TypeScript)\nDESCRIPTION: Registers namespace-level middleware for Socket.IO connections and messages in MidwayJS.  This middleware (SocketMiddleware) will apply to all connections and messages under the '/api' namespace. Requires the @WSController decorator and a defined SocketMiddleware.  Namespace-level middleware is helpful for applying authentication, authorization, or logging to all connections within a specific route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\n// Namespace-level middleware\n@WSController('/api', { middleware: [SocketMiddleware]})\nexport class APIController {\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Specific Logger Levels in TypeScript\nDESCRIPTION: This snippet shows how to configure the log levels for specific logger instances like `coreLogger` and `appLogger`.  The `level` property determines the minimum log level to be written to the file, while `consoleLevel` controls the minimum level output to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    clients: {\n      coreLogger: {\n        level: 'warn',\n        consoleLevel: 'warn'\n        // ...\n      },\n      appLogger: {\n        level: 'warn',\n        consoleLevel: 'warn'\n        // ...\n      }\n    }\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for MidwayJS\nDESCRIPTION: This Dockerfile sets up a Node.js environment for a MidwayJS application, installs dependencies, builds the application, and exposes port 7001. It's using Node 18 as base image.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:18\n\nWORKDIR /app\n\nENV TZ=\"Asia/Shanghai\"\n\nCOPY . .\n\n# If each company has its own private source, it can replace the registry address\nRUN npm install --registry=https://registry.npm.taobao.org\n\nRUN npm run build\n\n# If the port is changed, this side can be updated\nEXPOSE 7001\n\nCMD [\"npm\", \"run\", \"online\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring TableStore Clients (Multiple)\nDESCRIPTION: This TypeScript code shows how to configure multiple TableStore clients in the `config.default` file.  Each client is defined with its own set of connection parameters like `accessKeyId`, `secretAccessKey`, `stsToken`, `endpoint`, and `instancename`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tablestore.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  tableStore: {\n    clients: {\n      db1: {\n        accessKeyId: '<your access key id>',\n        secretAccessKey: '<your access key secret>',\n        stsToken: '<your stsToken>', /*When you use the STS authorization, you need to fill in. ref:https://help.aliyun.com/document_detail/27364.html */\n        endpoint: '<your endpoint>',\n        instancename: '<your instance name>'\n      },\n      db2: {\n        accessKeyId: '<your access key id>',\n        secretAccessKey: '<your access key secret>',\n        stsToken: '<your stsToken>', /*When you use the STS authorization, you need to fill in. ref:https://help.aliyun.com/document_detail/27364.html */\n        endpoint: '<your endpoint>',\n        instancename: '<your instance name>'\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Response Template (TypeScript)\nDESCRIPTION: This code shows how to customize the default JSON response template of `HttpServerResponse` by overriding the `JSON_TPL` static property. This allows developers to control the structure of JSON responses for successful and failed requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nHttpServerResponse.JSON_TPL = (data, isSuccess) => {\n  if (isSuccess) {\n    // ...\n  } else {\n    // ...\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Assertions with Jest Expect\nDESCRIPTION: This snippet demonstrates common assertion methods using Jest's built-in `expect` library.  It covers equality checks, strict equality, array containment, and negated assertions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(result.status).toBe(200);              // 值是否等于某个值，引用相等\nexpect(result.status).not.toBe(200);\nexpect(result).toEqual('hello');              // 简单匹配，对象属性相同也为 true\nexpect(result).toStrictEqual('hello');        // 严格匹配\nexpect(['lime', 'apple']).toContain('lime');  // 判断是否在数组中\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Consumer Implementation\nDESCRIPTION: This TypeScript snippet demonstrates the implementation of a RabbitMQ consumer in a MidwayJS application. It uses decorators to define the consumer and bind it to a specific queue. The `gotData` method is executed when a message is received from the queue, and it acknowledges the message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Consumer, MSListenerType, RabbitMQListener, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/rabbitmq';\nimport { ConsumeMessage } from 'amqplib';\n\n@Consumer(MSListenerType.RABBITMQ)\nexport class UserConsumer {\n\n  @Inject()\n  ctx: Context;\n\n  @RabbitMQListener('tasks')\n  async gotData(msg: ConsumeMessage) {\n    this.ctx.channel.ack(msg);\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Parameter Decorator in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a custom parameter decorator named `User` using `createCustomParamDecorator` from `@midwayjs/core`.  It exports a unique key `USER_KEY` and a function `User` that returns a `ParameterDecorator`. This decorator is intended to be used to inject user information into method parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/logging.decorator.ts\nimport { createCustomParamDecorator } from '@midwayjs/core';\n\n// 装饰器内部的唯一 id\nexport const USER_KEY = 'decorator:user_key';\n\nexport function User(): ParameterDecorator {\n  return createCustomParamDecorator(USER_KEY, {});\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a POST API endpoint with Prisma and @midwayjs/hooks (TypeScript)\nDESCRIPTION: This code defines a POST API endpoint using @midwayjs/hooks, Prisma, and Zod for validation. It imports necessary modules, defines a Zod schema for the post data, and creates an API endpoint that validates the input data using the PostSchema. The endpoint then uses Prisma to create a new post in the database. It requires the @midwayjs/hooks, Prisma, and Zod dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/safe.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post,\n  Validate,\n} from '@midwayjs/hooks';\nimport { prisma } from './prisma';\nimport { z } from 'zod';\n\nconst PostSchema = z.object({\n  title: z.string().min(1),\n  content: z.string().min(1),\n  authorEmail: z.string().email(),\n});\n\nexport const createPost = Api(\n  Post('/api/post'),\n  Validate(PostSchema),\n  async (\n    post: z.infer<typeof PostSchema>\n  ) => {\n    const result =\n      await prisma.post.create({\n        data: {\n          title: post.title,\n          content: post.content,\n          author: {\n            connect: {\n              email: post.authorEmail,\n            },\n          },\n        },\n      });\n    return result;\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Mongoose Connection and Defining Schema (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access the default Mongoose connection using `MongooseDataSourceManager` in a Midway application. It defines a user schema, creates a Mongoose model, and saves a new document to the database. Dependencies include `@midwayjs/core`, `@midwayjs/mongoose`, and `mongoose`. The code retrieves the default connection and utilizes it to define and interact with a Mongoose model.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Init } from '@midwayjs/core';\nimport { MongooseDataSourceManager } from '@midwayjs/mongoose';\nimport { Schema, Document } from 'mongoose';\n\ninterface User extends Document {\n  name: string;\n  email: string;\n  avatar: string;\n}\n\n@Provide()\nexport class TestService {\n\n  @Inject()\n  dataSourceManager: MongooseDataSourceManager;\n\n  @Init()\n  async init() {\n    // get default connection\n    this.conn = this.dataSourceManager.getDataSource('default');\n  }\n\n  async invoke(){\n    const schema = new Schema<User>({\n      name: { type: String, required: true },\n      email: { type: String, required: true },\n      avatar: String\n    });\n    const UserModel = this.conn.model<User>('User', schema);\n    const doc = new UserModel({\n      name: 'Bill',\n      email: 'bill@initech.com',\n      avatar: 'https://i.imgur.com/dM7Thhn.png'\n    });\n    await doc.save();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the User Service in a Controller (TypeScript)\nDESCRIPTION: This code demonstrates how to use the `UserService` in a controller using dependency injection in MidwayJS. The `@Inject` decorator injects an instance of `UserService` into the `APIController`. The `getUser` method calls the injected service to retrieve user data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide, Query } from '@midwayjs/decorator';\nimport { UserService } from '../service/user';\n\n@Provide()\n@Controller('/api/user')\nexport class APIController {\n  @Inject()\n  userService: UserService;\n\n  @Get('/')\n  async getUser(@Query('id') uid) {\n    const user = await this.userService.getUser(uid);\n    return { success: true, message: 'OK', data: user };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Backend API from Frontend\nDESCRIPTION: This code snippet shows how to call a backend API defined with Midway Hooks from the frontend.  It imports the API function `say` from a local file (`./api`). The function is then called with a parameter, and the response is logged to the console. Requires that the `say` api function be defined in `./api`\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/intro.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport say from './api';\n\nconst response = await say('Midway');\nconsole.log(response); // Hello Midway!\n```\n\n----------------------------------------\n\nTITLE: Registering Global Socket.IO Middleware - TypeScript\nDESCRIPTION: Registers global Socket.IO middleware in a MidwayJS application.  This involves obtaining the `socketIO` app instance and using its `useConnectionMiddleware` and `useMiddleware` methods to register the middleware for all namespaces. `useConnectionMiddleware` applies to connection events, while `useMiddleware` applies to message events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as socketio from '@midwayjs/socketio';\n\n@Configuration({\n  imports: [\n    socketio\n  ],\n  // ...\n})\nexport class MainConfiguration {\n\n  @App('socketIO')\n  app: Application;\n\n  async onReady() {\n    // Can register global connection middleware\n    this.app.useConnectionMiddleware(SocketMiddleware);\n    // You can also register global Message middleware\n    this.app.useMiddleware(SocketMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in @midwayjs/koa\nDESCRIPTION: This code shows how to set a cookie in a Midway.js Koa application.  It uses `ctx.cookies.set` to set a cookie named 'cid' with the value 'hello world'.  The options parameter allows configuration of the cookie's domain, path, maxAge, expires, httpOnly flag, and overwrite behavior. Relies on the `@midwayjs/koa` package for the `Context` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cookies.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.cookies.set('cid', 'hello world', {\n      domain: 'localhost', // 写cookie所在的域名\n      path: '/index', // 写cookie所在的路径\n      maxAge: 10 * 60 * 1000, // cookie有效时长\n      expires: new Date('2017-02-15'), // cookie失效时间\n      httpOnly: false, // 是否只用于http请求中获取\n      overwrite: false, // 是否允许重写\n    });\n    ctx.body = 'cookie is ok';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone - Text\nDESCRIPTION: This snippet shows how to display the time based on the specified timezone. This configuration should be consistent with the mysql configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nmysql> show global variables like '%time_zone%';\n+------------------+--------+\n| Variable_name    | Value  |\n+------------------+--------+\n| system_time_zone | UTC    |\n| time_zone        | SYSTEM |\n+------------------+--------+\n2 rows in set (0.05 sec)\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber - TypeScript\nDESCRIPTION: This snippet shows how to implement an event subscriber using TypeORM with MidwayJS. The subscriber logs database operations like insert, update, and remove. The `EventSubscriberModel` decorator marks the class as an event subscriber.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSubscriberModel } from '@midwayjs/typeorm';\nimport { EntitySubscriberInterface, InsertEvent, UpdateEvent, RemoveEvent } from 'typeorm';\n\n@EventSubscriberModel()\nexport class EverythingSubscriber implements EntitySubscriberInterface {\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeInsert(event: InsertEvent<any>) {\n    console.log(`BEFORE ENTITY INSERTED: `, event.entity);\n  }\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeUpdate(event: UpdateEvent<any>) {\n    console.log(`BEFORE ENTITY UPDATED: `, event.entity);\n  }\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeRemove(event: RemoveEvent<any>) {\n    console.log(`BEFORE ENTITY WITH ID ${event.entityId} REMOVED: `, event.entity);\n  }\n\n  /**\n   * Called after entity insertion.\n   */\n  afterInsert(event: InsertEvent<any>) {\n    console.log(`AFTER ENTITY INSERTED: `, event.entity);\n  }\n\n  /**\n\t * Called after entity insertion.\n\t */\n  afterUpdate(event: UpdateEvent<any>) {\n    console.log(`AFTER ENTITY UPDATED: `, event.entity);\n  }\n\n  /**\n   * Called after entity insertion.\n   */\n  afterRemove(event: RemoveEvent<any>) {\n    console.log(`AFTER ENTITY WITH ID ${event.entityId} REMOVED: `, event.entity);\n  }\n\n  /**\n   * Called after entity is loaded.\n   */\n  afterLoad(entity: any) {\n    console.log(`AFTER ENTITY LOADED: `, entity);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Cascaded Validation with SchoolDTO and UserDTO (TypeScript)\nDESCRIPTION: This snippet demonstrates cascaded validation by embedding `SchoolDTO` within `UserDTO` and applying validation rules to both. The `@Rule` decorator on the `school` property in `UserDTO` triggers validation of the `SchoolDTO` instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType } from '@midwayjs/decorator';\n\nexport class SchoolDTO {\n  @Rule(RuleType.string().required())\n  name: string;\n  @Rule(RuleType.string())\n  address: string;\n}\n\nexport class UserDTO {\n  @Rule(RuleType.number().required())\n  id: number;\n\n  @Rule(RuleType.string().required())\n  firstName: string;\n\n  @Rule(RuleType.string().max(10))\n  lastName: string;\n\n  // 这里传入 SchoolDTO 作为校验参数，此时会默认是required字段，\n  // 如果用户不想要required，则@Rule(SchoolDTO, {required: false})\n  @Rule(SchoolDTO)\n  school: SchoolDTO;\n\n  // 如果是数组，则也只要下面这样写，这边装饰器会判断类型是否是数组，只能适用这种class类型\n  @Rule(SchoolDTO)\n  xxxx: SchoolDTO[];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling in Guards in TypeScript\nDESCRIPTION: This snippet shows how to throw custom errors within a guard's `canActivate` method. By throwing an `httpError` (e.g., `ForbiddenError`), developers can customize the error response when a guard fails. The global error handler will intercept these errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IMiddleware, Guard, IGuard, httpError } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Guard()\nexport class AuthGuard implements IGuard<Context> {\n  async canActivate(context: Context, suppilerClz, methodName: string): Promise<boolean> {\n    // ...\n    if (methodName ==='xxx') {\n      throw new httpError.ForbiddenError();\n    }\n    \n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New DTOs Using PickDto and OmitDto (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create new DTOs based on existing ones using `PickDto` and `OmitDto` from `@midwayjs/decorator`. `PickDto` creates a new DTO with selected properties, while `OmitDto` creates a new DTO excluding specified properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/dto/user.ts\nimport { Rule, RuleType, PickDto } from '@midwayjs/decorator';\n\nexport class UserDTO {\n  @Rule(RuleType.number().required())\n  id: number;\n\n  @Rule(RuleType.string().required())\n  firstName: string;\n\n  @Rule(RuleType.string().max(10))\n  lastName: string;\n\n  @Rule(RuleType.number().max(60))\n  age: number;\n}\n\n// 继承出一个新的 DTO\nexport class SimpleUserDTO extends PickDto(UserDTO, ['firstName', 'lastName']) {}\n\n// const simpleUser = new SimpleUserDTO();\n// 只包含了 firstName 和 lastName 属性\n// simpleUser.firstName = xxx\n\nexport class NewUserDTO extends OmitDto(UserDTO, ['age']) {}\n\n// const newUser = new NewUserDTO();\n// newUser.age 定义和属性都不存在\n\n// 使用\nasync login(@Body() user: NewUserDTO) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Global Log Level Temporarily in MidwayJS\nDESCRIPTION: This snippet demonstrates how to temporarily adjust the global log level for specific transports, such as the console, in MidwayJS. In this example the default log level is 'info', but the console transport is set to 'warn'. This means that logs written to the console will only display warn and error level messages, while other transports would adhere to the 'info' level if not otherwise specified.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       level: 'info',\n       transports: {\n         console: {\n           level: 'warn'\n         }\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Saving Tenant Info in Middleware\nDESCRIPTION: This middleware sets the current tenant information using the `TenantManager`. It retrieves or constructs the tenant information and sets it in the request context. The `setCurrentTenant` method stores the tenant information for subsequent use within the request lifecycle.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tenant.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TenantManager } from '@midwayjs/tenant';\nimport { Middleware, Inject } from '@midwayjs/core';\n\n@Middleware()\nclass TenantMiddleware {\n  @Inject()\n  tenantManager: TenantManager;\n\n  resolve() {\n    return async(ctx, next) => {\n      // 请求链路中设置租户信息\n      await this.tenantManager.setCurrentTenant({\n        id: '123',\n        name: '我的租户'\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Whitelist Configuration\nDESCRIPTION: This example demonstrates how to dynamically define the whitelist for file uploads based on the request context using a function. This provides flexibility in allowing specific file types based on conditions such as the request path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/upload';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  upload: {\n    whitelist: (ctx) => {\n      if (ctx.path === '/') {\n        return [\n          '.jpg',\n          '.jpeg',\n        ];\n      } else {\n        return [\n          '.jpg',\n        ]\n      };\n    },\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataSourceManager\nDESCRIPTION: This code snippet shows how to extend the built-in `DataSourceManager` class to create a custom data source manager for MySQL2. It includes implementing methods for creating, checking, and destroying data sources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum, DataSourceManager } from '@midwayjs/core';\nimport * as mysql from 'mysql2';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MySqlDataSourceManager extends DataSourceManager<mysql.Connection> {\n\t// 创建单个实例\n  protected async createDataSource(config: any, dataSourceName: string): Promise<mysql.Connection> {\n    return mysql.createConnection(config);\n  }\n\n  getName(): string {\n    return 'mysql';\n  }\n\n  async checkConnected(dataSource: mysql.Connection): Promise<boolean> {\n    // 伪代码\n    return dataSource.status === 'connected';\n  }\n\n  async destroyDataSource(dataSource: mysql.Connection): Promise<void> {\n    if (await this.checkConnected(dataSource)) {\n      await dataSource.destroy();\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Main Framework Instance (Static API)\nDESCRIPTION: Shows how to get the main framework instance using `getCurrentMainFramework()` after the application has started. This allows accessing the core framework features in parts of the application where dependency injection might not be practical.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCurrentMainFramework } from '@midwayjs/core';\n\nexport const framework = () => {\n  return getCurrentMainFramework();\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware for Global Error Handling in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a middleware for handling errors globally in `@midwayjs/rpc`. The middleware catches exceptions thrown during request processing and handles them based on their status codes (e.g., redirecting to login for 401, showing an alert for 500). Dependencies: `@midwayjs/rpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/client.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupHttpClient } from '@midwayjs/rpc';\nimport type { Middleware } from '@midwayjs/rpc';\n\nconst ErrorHandler: Middleware = async (\n  ctx,\n  next\n) => {\n  try {\n    await next();\n  } catch (err) {\n    switch (err.status) {\n      case 401:\n        location.href = '/login';\n        break;\n      case 500:\n        alert('Internal Server Error');\n        break;\n      default:\n        alert (\n          'Unknown Error, status: ${err.status}'\n        );\n        break;\n    }\n  }\n};\n\nsetupHttpClient({\n  middleware: [ErrorHandler]\n});\n```\n\n----------------------------------------\n\nTITLE: Resuming a Bull Queue (TypeScript)\nDESCRIPTION: This snippet demonstrates how to resume a Bull queue using the `resume()` method. This allows the queue to start processing jobs again after it has been paused.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nawait testQueue.resume();\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Connection\nDESCRIPTION: This TypeScript snippet shows how to configure the RabbitMQ connection URL in the `config.default.ts` file of a MidwayJS application. The `rabbitmq.url` property specifies the connection string to the RabbitMQ server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  // ...\n  rabbitmq: {\n    url: 'amqp://localhost'\n  }\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Creating a simple API endpoint with Hooks (TypeScript)\nDESCRIPTION: This code defines a simple API endpoint function using Hooks. It returns the string 'Hello Midway Hooks!'. This function will be exposed as an API endpoint based on the configuration in midway.config.ts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_bff.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default () => {\n  return 'Hello Midway Hooks!';\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring midway-bin entry file\nDESCRIPTION: This snippet shows how to configure the `--entryFile` parameter in `package.json` to specify the entry point when using `midway-bin`. This is used to specify the `bootstrap.js` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"cross-env NODE_ENV=local midway-bin dev --ts --entryFile=bootstrap.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with SSL Certificates - Typescript\nDESCRIPTION: This code snippet demonstrates how to configure HTTPS for the Express application by specifying SSL certificate paths.  It requires `ssl.key` (private key) and `ssl.pem` (certificate). The `readFileSync` from 'fs' and `join` from 'path' are used to read and join paths. This example reads the key and cert files synchronously.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/express.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  express: {\n    key: join(__dirname, '../ssl/ssl.key'),\n    cert: join(__dirname, '../ssl/ssl.pem'),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StageOne Valve in MidwayJS\nDESCRIPTION: This code defines a pipeline valve named `StageOne` using the `@Provide()` decorator, making it available for dependency injection. The `invoke` method represents the core logic of this stage. It validates the input arguments (`ctx.args.aa`), sets stage-specific data in the pipeline context (`ctx.set`), and performs assertions based on the current and next stages. It returns a string 'stageone' as the result of this stage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nclass StageOne implements IValveHandler {\n  async invoke(ctx: IPipelineContext): Promise<any> {\n    if (ctx.args.aa! = = 123) {\n      throw new Error('args aa is undefined');\n    }\n    ctx.set('stageone', 'this is stage one');\n    ctx.set('stageone_date', Date.now());\n    if (ctx.info.current! = = 'stageOne') {\n      throw new Error('current stage is not stageOne');\n    }\n    if (ctx.info.next! = = 'stageTwo') {\n      throw new Error('next stage is not stageTwo');\n    }\n    if (ctx.info.prev) {\n      throw new Error('stageOne prev stage is not undefined');\n    }\n\n    return 'stageone';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project-Level Context Extension in Midway.js (TypeScript)\nDESCRIPTION: This code snippet shows how to extend the Midway.js Context interface at the project level. It uses the `declare module` syntax to add a custom property `abc` to the `@midwayjs/core`'s Context interface. This allows you to access `ctx.abc` throughout your project.  Dependency: `@midwayjs/core`. Input: None, modifies the global Context interface, Output: Extended Context interface with property abc.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/context_definition.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\n\nimport '@midwayjs/core';\n\n// ...\n\ndeclare module '@midwayjs/core' {\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Cache Manager\nDESCRIPTION: Imports the cache manager module in the `configuration.ts` file and adds it to the imports array within the `@Configuration` decorator. This enables the cache manager component within your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as cacheManager from '@midwayjs/cache-manager';\nimport { join } from 'path'\n\n@Configuration({\n   imports: [\n     // ...\n     cacheManager,\n   ],\n   importConfigs: [\n     join(__dirname, 'config')\n   ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Returning MIME Rules\nDESCRIPTION: This code demonstrates how to use a function to dynamically determine MIME type rules based on the context (ctx) of the request. This allows for more flexible and conditional MIME type validation, where rules can vary depending on factors like the request path.  The function receives the context object as an argument, allowing access to request properties like path, headers, or query parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  busboy: {\n    mimeTypeWhiteList: (ctx) => {\n      if (ctx.path === '/') {\n        return {\n          '.jpg': 'image/jpeg',\n        };\n      } else {\n        return {\n          '.jpeg': ['image/jpeg', 'image/png'],\n        }\n      };\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Testing RabbitMQ Subscription\nDESCRIPTION: This code snippet demonstrates how to test a RabbitMQ subscription in MidwayJS using `@midwayjs/mock`. It creates a queue, sends a message to it, starts an application to listen for data on that queue, and then closes the application. It depends on the `@midwayjs/mock` library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRabbitMQProducer, close, creatApp } from '@midwayjs/mock';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create message and get from app', async () => {\n    // create a queue and channel\n    const channel = await createRabbitMQProducer('tasks', {\n      isConfirmChannel: true\n      mock: false\n      url: 'amqp://localhost',\n    });\n\n    // send data to queue\n    channel.sendToQueue('tasks', Buffer.from('something to do'))\n\n    // create app and got data\n    const app = await creatApp();\n\n    // wait a moment\n\n    await close(app);\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Enabling withCredentials for @midwayjs/rpc Client - TypeScript\nDESCRIPTION: This snippet shows how to enable the `withCredentials` option for the @midwayjs/rpc HTTP client. Setting `withCredentials` to `true` allows the client to include credentials (e.g., cookies) in cross-origin requests. It imports `setupHttpClient` and sets the `withCredentials` option.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/client.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupHttpClient } from '@midwayjs/rpc';\n\nsetupHttpClient({\n  withCredentials: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Role Decorator in TypeScript\nDESCRIPTION: This code defines a custom `@Role` decorator used for role-based access control.  The decorator saves the role name(s) as metadata associated with the method, using the `savePropertyMetadata` function from `@midwayjs/core`.  The `ROLE_META_KEY` constant is used to identify the metadata.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/role.decorator.ts\nimport { savePropertyMetadata } from '@midwayjs/core';\n\nexport const ROLE_META_KEY = 'role:name'\n\nexport function Role(roleName: string | string[]): MethodDecorator {\n  return (target, propertyKey, descriptor) => {\n    roleName = [].concat(roleName);\n    // Save only metadata\n    savePropertyMetadata(ROLE_META_KEY, roleName, target, propertyKey);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Application and Context types (non-Web)\nDESCRIPTION: This code snippet demonstrates how to import Application and Context types from non-Web Midway framework modules (SocketIO, gRPC, RabbitMQ), maintaining consistency across frameworks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/req_res_app.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context } from '@midwayjs/socketio';\nimport { Application, Context } from '@midwayjs/grpc';\nimport { Application, Context } from '@midwayjs/rabbitmq';\n```\n\n----------------------------------------\n\nTITLE: Accessing body from application/x-www-form-urlencoded POST request\nDESCRIPTION: This TypeScript code illustrates accessing the request body when the content type is `application/x-www-form-urlencoded`. The framework automatically parses the URL-encoded string to an object.  `ctx.request.body` will hold the parsed object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\" B \"} => object\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Parameters via ctx.params\nDESCRIPTION: This example shows how to access path parameters using `ctx.params` in Midway Serverless when using HTTP or API Gateway triggers. It assumes a route like `/api/user/[id]` and retrieves the value of the `id` parameter from the request URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_context.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// /api/user/[id]   /api/user/faas\nctx.params.id; // faas\n```\n\n----------------------------------------\n\nTITLE: Accessing Socket.IO Application Instance\nDESCRIPTION: This TypeScript snippet demonstrates how to access the Socket.IO application instance (io object) within a MidwayJS controller using the `@App` decorator and the `MidwayFrameworkType.WS_IO` enum. This allows the controller to interact with the Socket.IO server, such as emitting events to clients.  It requires `@midwayjs/socketio` and `@midwayjs/decorator` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application as SocketApplication } from '@midwayjs/socketio';\nimport { Provide, Controller, App, MidwayFrameworkType } from '@midwayjs/decorator';\n\n@Provide()\n@Controller()\nexport class UserController {\n  @App(MidwayFrameworkType.WS_IO)\n  socketApp: SocketApplication;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Execution Parameters to a BullMQ Task\nDESCRIPTION: This TypeScript snippet illustrates how to pass parameters to a BullMQ task when adding it to the queue. The processor can access these parameters within the `execute` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute(params) {\n    // params.name => 'harry'\n  }\n}\n\n// invoke\nconst testQueue = this.bullmqFramework.getQueue('test');\nawait testQueue?.addJobToQueue({\n  aaa: 1,\n  bbb: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Queue Events\nDESCRIPTION: This snippet demonstrates how to listen for queue events, such as task completion and failure, using the `QueueEvents` class. It creates a `QueueEvents` instance and attaches listeners to the 'completed' and 'failed' events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst eventQueue = bullmqFramework.createQueue('event-queue');\nconst queueEvents = eventQueue.createQueueEvents();\n\n// Listen for task completion\nqueueEvents.on('completed', ({ jobId }) => {\n  console.log(`Job ${jobId} completed!`)\n});\n\n// Listen for task failure\nqueueEvents.on('failed', ({ jobId, failedReason }) => {\n  console.log(`Job ${jobId} failed: ${failedReason}`)\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in Task Processor\nDESCRIPTION: This snippet shows how to access the Context object within a task processor, which provides access to the current job ID and job object. The `Context` object is injected using the `@Inject()` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, IProcessor, Context } from '@midwayjs/bullmq';\n\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  @Inject()\n  ctx: Context;\n\n  async execute(data: any) {\n    // ctx.jobId => current task ID\n    // ctx.job => current job object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Application from MidwayJS Koa Module\nDESCRIPTION: This code snippet demonstrates how to import the Application object specifically from the @midwayjs/koa module. This is used when working with KOA-based applications in MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application } from '@midwayjs/koa';\n```\n\n----------------------------------------\n\nTITLE: Update User Service with Validation\nDESCRIPTION: Illustrates using the @Valid decorator in a service method to validate a UserDTO.  If no parameters are passed to @Valid, the DTO rules are reused.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Valid } from '@midwayjs/validate';\nimport { Provide } from '@midwayjs/core';\nimport { UserDTO } from './dto/user';\n\n@Provide()\nexport class UserService {\n  async updateUser(@Valid() user: UserDTO) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ManyToMany Relationship (Album) - TypeScript\nDESCRIPTION: This snippet shows how to define a ManyToMany relationship using TypeORM. The `Album` entity contains a `photos` property annotated with `@ManyToMany` which defines the relationship to the `Photo` entity. The `@JoinTable` decorator specifies this side is the owning side of the relationship.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from 'typeorm';\n\n@Entity()\nexport class Album {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @ManyToMany(type => Photo, photo => photo.albums)\n  @JoinTable()\n  photos: Photo[];\n}\n```\n\n----------------------------------------\n\nTITLE: Handling MidwayRetryExceededMaxTimesError in TypeScript\nDESCRIPTION: This code demonstrates how to catch the `MidwayRetryExceededMaxTimesError` exception that is thrown when the maximum number of retries is exceeded. The `try...catch` block catches the exception and allows for custom error handling.  It also shows how to access the original error using `err.cause`.  The function will retry 2 times in addition to the original call.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/retry.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { retryWithAsync, MidwayRetryExceededMaxTimesError } from '@midwayjs/core';\n\nasync function invoke(id) {\n  // ...\n}\n\nasync function someServiceMethod() {\n  // The default call, plus two retries, can be executed up to three times.\n  const invokeNew = retryWithAsync(invoke, 2);\n\n  try {\n    return await invokeNew(1);\n  } catch(err) {\n    // err.name === 'MidwayRetryExceededMaxTimesError'\n    // err.cause instanceof CustomError => true\n  }\n\n}\n\nasync invokeNew() {\n  throw new CustomError('customError');\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating CSRF Secret on Login (TypeScript)\nDESCRIPTION: Shows how to rotate the CSRF secret upon user login in a MidwayJS controller.  This is crucial when storing the CSRF token in cookies to prevent security risks when user switching occurs in the same browser. `ctx.rotateCsrfSecret()` invalidates the old token.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/security.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx;\n\n  @Inject()\n  userService;\n\n  @Get('/login')\n  async login(@Body('username') username: string, @Body('password') password: string) {\n    const user = await userService.login({ username, password });\n    this.ctx.session = { user };\n    this.ctx.rotateCsrfSecret();\n    return { success: true };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client\nDESCRIPTION: Initializes the Prisma Client for interacting with the database. This code snippet imports the PrismaClient from the @prisma/client package and creates a new instance, which can then be used to perform database operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/prisma.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\n\nexport const prisma =\n  new PrismaClient();\n```\n\n----------------------------------------\n\nTITLE: Getting Router Parameters with Decorator\nDESCRIPTION: Shows how to retrieve route parameters (e.g., '/user/:uid') using the `@Param` decorator. The `getUser` method extracts the 'uid' parameter from the route.  Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// GET /user/1\nimport { Controller, Get, Param } from '@midwayjs/core';\n\n@Controller('/user')\nexport class UserController {\n  @Get('/:uid')\n  async getUser(@Param('uid') uid: string): Promise<User> {\n    // xxxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending HttpServerResponse for Custom Templates (TypeScript)\nDESCRIPTION: This example demonstrates how to extend `HttpServerResponse` to create a custom response class with its own JSON template.  This allows for different response structures without affecting the global default template.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomServerResponse extends HttpServerResponse {}\nCustomServerResponse.JSON_TPL = (data, isSuccess) => {\n  if (isSuccess) {\n    // ...\n  } else {\n    // ...\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Stripping Undefined Properties via Decorator\nDESCRIPTION: This snippet demonstrates how to configure the validator to remove undefined properties for a specific route using the `stripUnknown` option within the `@Validate` decorator. This configuration overrides the global setting and only applies to the decorated handler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n  @Post('/')\n  @Validate({\n    validationOptions: {\n      stripUnknown: true,\n    },\n  })\n  async updateUser(@Body() user: UserDTO) {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Soft Deleting data in database\nDESCRIPTION: Demonstrates a soft delete, which marks a record as deleted without physically removing it. It uses the `softDelete` method to set a deletion timestamp.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.photoModel.softDelete(1);\n```\n\n----------------------------------------\n\nTITLE: Handling uploaded files in a Midway.js controller\nDESCRIPTION: This TypeScript code illustrates how to access uploaded files and form fields within a Midway.js controller using the @Files and @Fields decorators.  The `upload` method receives the uploaded files and form fields, which can then be processed as needed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Inject, Post, Files, Fields } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx;\n\n  @Post('/upload')\n  async upload(@Files() files, @Fields() fields) {\n    /*\n    files = [\n      {\n        filename: 'test.pdf',        // 文件原名\n        data: '/var/tmp/xxx.pdf',    // mode 为 file 时为服务器临时文件地址\n        fieldname: 'test1',          // 表单 field 名\n        mimeType: 'application/pdf', // mime\n      },\n      {\n        filename: 'test.pdf',        // 文件原名\n        data: ReadStream,    // mode 为 stream 时为服务器临时文件地址\n        fieldname: 'test2',          // 表单 field 名\n        mimeType: 'application/pdf', // mime\n      },\n      // ...file 下支持同时上传多个文件\n    ]\n\n    */\n    return {\n      files,\n      fields\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Cache Instances\nDESCRIPTION: Configures multiple cache instances within the `clients` object in the `config.default.ts` file.  This allows for different cache configurations to be used in different parts of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: 'memory',\n       },\n       otherCaching: {\n         store: 'memory',\n       }\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Generic data with SuccessWrapper in TypeScript\nDESCRIPTION: This snippet demonstrates a technique for handling generic data returns with Swagger in MidwayJS. Since Swagger doesn't natively support generics, this code provides a `SuccessWrapper` function that wraps a given resource class with a standard response structure including code, message, and data properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Type } from '@midwayjs/swagger';\n\ntype Res<T> = {\n  code: number;\n  message: string;\n  data: T;\n}\n\nexport function SuccessWrapper<T>(ResourceCls: Type<T>): Type<Res<T>> {\n  class Successed {\n    @ApiProperty({ description: 'Status Code'})\n    code: number;\n\n    @ApiProperty({ description: 'message'})\n    message: string;\n\n    @ApiProperty({\n      type: ResourceCls\n    })\n    data: T;\n  }\n\n  return Successed;\n}\n```\n\n----------------------------------------\n\nTITLE: Update Age with ParseIntPipe\nDESCRIPTION: Shows how to use the ParseIntPipe to convert and validate the 'age' parameter from the request body. The age will be coerced to a number.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ParseIntPipe } from '@midwayjs/validate';\nimport { Controller, Post, Body } from '@midwayjs/core';\n\n@Controller('/api/user')\nexport class HomeController {\n  @Post('/update_age')\n  async updateAge(@Body('age', [ParseIntPipe]) age: number) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Resources in DataListener in TypeScript\nDESCRIPTION: This code extends the previous example by adding a `destroyListener` method to clean up resources, specifically clearing the interval timer. This ensures that the timer is stopped when the listener is no longer needed, preventing memory leaks.  The class is decorated with `@Provide` and `@Scope` to be a singleton managed by the dependency injection container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_listener.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/listener/memory.listner.ts\nimport { Provide, Scope, ScopeEnum, DataListener } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MemoryDataListener extends DataListener<string> {\n  private intervalHandler;\n\n  // 初始化数据\n  initData() {\n    return 'hello' + Date.now();\n  }\n\n  // 更新数据\n  onData(setData) {\n    this.intervalHandler = setInterval(() => {\n      setData('hello' + Date.now());\n    }, 1000);\n  }\n\n  // 清理资源\n  async destroyListener() {\n    // 关闭定时器\n    clearInterval(this.intervalHandler);\n    // 其他清理, close sdk 等等\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a custom error class in TypeScript\nDESCRIPTION: This code snippet shows how to define a custom error class that extends `MidwayError`, providing a specific error message and code. It requires importing `HttpStatus` and `MidwayError` from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_error.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/error/custom.error.ts\nimport { HttpStatus } from '@midwayjs/core';\n\nexport class CustomError extends MidwayError {\n  constructor() {\n    super('my custom error', 'CUSTOM_ERROR_CODE_10000');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Controller in TypeScript\nDESCRIPTION: Implement a controller with routes for both generating and authenticating JWTs. The `/passport/jwt` route uses the `JwtPassportMiddleware`, and the `/jwt` route generates a JWT using the `@midwayjs/jwt` service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Provide, Post, Inject } from '@midwayjs/core';\nimport { Controller, Post } from '@midwayjs/core';\nimport { Jwt } from '@midwayjs/jwt';\n\n@Provide()\n@Controller('/')\nexport class JwtController {\n\n  @Inject()\n  jwt: Jwt;\n\n  @Inject()\n  ctx: any;\n\n  @Post('/passport/jwt', { middleware: [JwtPassportMiddleware] })\n  async jwtPassport() {\n    console.log('jwt user: ', this.ctx.req.user);\n    return this.ctx.req.user;\n  }\n\n  @Post('/jwt')\n  async genJwt() {\n    return {\n      t: await this.jwt.sign({ msg: 'Hello Midway' }),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EJS template mapping in Midway.js\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure the EJS template engine within a Midway.js application's configuration file. It defines a `mapping` that associates the `.ejs` file extension with the 'ejs' engine.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  view: {\n    mapping: {\n      '.ejs': 'ejs',\n    },\n  },\n  // ejs config\n  ejs: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Entities with Multiple Data Sources\nDESCRIPTION: This TypeScript code demonstrates how to inject and use multiple Typegoose entities (models), each associated with a different MongoDB data source. It uses `@InjectEntityModel` to inject both `User` and `User2` models and then uses them to perform database operations in their respective databases.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class TestService{\n\n  @InjectEntityModel(User)\n  userModel: ReturnModelType<typeof User>;\n\n  @InjectEntityModel(User2)\n  user2Model: ReturnModelType<typeof User2>;\n\n  async getTest(){\n    const { _id: id } = await this.userModel.create({ name: 'JohnDoe', jobs: ['Cleaner'] } as User); // an \"as\" assertion, to have types for all properties\n    const user = await this.userModel.findById(id).exec();\n    console.log(user)\n\n    const { _id: id2 } = await this.user2Model.create({ name: 'JohnDoe', jobs: ['Cleaner'] } as User2); // an \"as\" assertion, to have types for all properties\n    const user2 = await this.user2Model.findById(id2).exec();\n    console.log(user2)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing object body in Alibaba Cloud HTTP Trigger\nDESCRIPTION: This TypeScript code shows how to access the request body when using Alibaba Cloud HTTP trigger and a JSON object is sent in the body. The `ctx.request.body` will contain the body as a parsed Javascript object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\" B\":\"c\"} => object\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeatable Tasks with @Processor Decorator\nDESCRIPTION: This snippet demonstrates how to configure a task to be executed repeatedly using the `repeat` option in the `@Processor` decorator. It uses a cron expression to define the schedule for task execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, IProcessor } from '@midwayjs/bullmq';\nimport { FORMAT } from '@midwayjs/core';\n\n@Processor('test', {\n  repeat: {\n    pattern: FORMAT.CRONTAB.EVERY_PER_5_SECOND\n  }\n})\nexport class TestProcessor implements IProcessor {\n  async execute() {\n    // Executes every 5 seconds\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MidwayConfigService to access configuration - TypeScript\nDESCRIPTION: This example illustrates how to inject and use the MidwayConfigService to retrieve the application configuration. The `@Controller`, `@Inject`, and `@Get` decorators structure the controller, inject the service, and map a route. The `getConfiguration()` method of the service is used to get the configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, MidwayConfigService } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  configService: MidwayConfigService;\n\n  @Get('/')\n  async home() {\n    // this.configService.getConfiguration();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Files Example\nDESCRIPTION: Example showing how to use `useFiles()` on the backend to retrieve uploaded file metadata. It shows the format of the returned object, including filename, data, fieldname, and mimeType.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/upload.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// frontend\nawait upload({ pdf });\n\n// backend\nconst files = useFiles();\n{\n  pdf: {\n    filename: 'test.pdf',        // 文件原名\n    data: '/var/tmp/xxx.pdf',    // mode 为 file 时为服务器临时文件地址\n    fieldname: 'test1',          // 表单 field 名\n    mimeType: 'application/pdf', // mime\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ValidateService for Independent Validation in MidwayJS (TypeScript)\nDESCRIPTION: This snippet shows how to use the `ValidateService` class to independently validate DTOs in MidwayJS. It injects the `ValidateService` and calls its `validate` method, passing the DTO class and the data to be validated. The result contains either an error or a formatted DTO object. Dependencies: `@midwayjs/validate`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ValidateService } from '@midwayjs/validate';\n\nexport class UserService {\n\n  @Inject()\n  validateService: ValidateService;\n\n  async inovke() {\n\n    // ...\n    const result = this.validateService.validate(UserDTO, {\n      name: 'harry',\n      nickName: 'harry'\n    });\n\n    // Failed to return to re. Error\n    // Successfully returned result.value\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Github OAuth Controller\nDESCRIPTION: This TypeScript code demonstrates how to implement a controller for Github OAuth authentication. It uses the `GithubPassportMiddleware` to protect the `/github` and `/github/cb` endpoints. The callback route handles the OAuth callback and stores the user information in `ctx.state.user`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/auth.controller.ts\n\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport { GithubPassportMiddleware } from '../../middleware/github';\n\n@Controller('/oauth')\nexport class AuthController {\n  @Inject()\n  ctx;\n\n  @Get('/github', { middleware: [GithubPassportMiddleware] })\n  async githubOAuth() {}\n\n  @Get('/github/cb', { middleware: [GithubPassportMiddleware] })\n  async githubOAuthCallback() {\n    return this.ctx.state.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service with type definitions and error handling (TypeScript)\nDESCRIPTION: This code demonstrates the `WeatherService` with type definitions for the response and error handling using try-catch.  It uses the `WeatherInfo` interface to strongly type the API response and throws a custom `WeatherEmptyDataError` if the request fails.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, makeHttpRequest } from '@midwayjs/core';\nimport { WeatherInfo } from '../interface';\n\n@Provide()\nexport class WeatherService {\n  async getWeather(cityId: string): Promise<WeatherInfo> {\n    const result = await makeHttpRequest<WeatherInfo>(`https://midwayjs.org/resource/${cityId}.json`, {\n      dataType: 'json',\n    });\n\n    if (result.status === 200) {\n      return result.data as WeatherInfo;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GET API endpoint with request headers\nDESCRIPTION: This example defines a GET API endpoint using Midway Hooks that utilizes request headers. It imports `Api`, `Get`, `Headers`, and `useContext` from `@midwayjs/hooks`. The `Headers` decorator is used to specify the expected headers (`token` in this case), and the function extracts the `token` header using `useContext` and returns it in the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Headers,\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get('/auth'),\n  Headers<{ token: string }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      token: ctx.headers.token\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Component in MidwayJS\nDESCRIPTION: This TypeScript snippet shows how to import and configure the `cron` component within your MidwayJS application's main configuration file. This makes the cron functionality available throughout your application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as cron from '@midwayjs/cron';\n\n@Configuration({\n   imports: [\n     //...\n     cron\n   ]\n})\nexport class MainConfiguration {\n   //...\n}\n```\n\n----------------------------------------\n\nTITLE: Using JWT Service API\nDESCRIPTION: This code demonstrates how to inject and use the `JwtService` in a MidwayJS service. It shows the usage of both synchronous (`signSync`, `verifySync`, `decodeSync`) and asynchronous (`sign`, `verify`, `decode`) API calls for JWT operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/jwt.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { JwtService } from '@midwayjs/jwt';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  jwtService: JwtService;\n\n  async invoke() {\n    // 同步 API\n    this.jwtService.signSync(payload, secretOrPrivateKey, options);\n    this.jwtService.verifySync(token, secretOrPublicKey, options);\n    this.jwtService.decodeSync(token, options);\n\n    // 异步 API\n    await this.jwtService.sign(payload, secretOrPrivateKey, options);\n    await this.jwtService.verify(token, secretOrPublicKey, options);\n    await this.jwtService.decode(token, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Controller in TypeScript\nDESCRIPTION: Implement a controller with routes for initiating and handling the GitHub OAuth flow. The `/github` route uses the `GithubPassportMiddleware` to redirect the user to GitHub for authentication, and the `/github/cb` route handles the callback from GitHub and returns the user information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// controller.ts\n\nimport { Provide, Get, Inject } from '@midwayjs/core';\n\n@Provide()\n@Controller('/oauth')\nexport class AuthController {\n  @Inject()\n  ctx: any;\n\n  @Get('/github', { middleware: [GithubPassportMiddleware] })\n  async githubOAuth() {}\n\n  @Get('/github/cb', { middleware: [GithubPassportMiddleware] })\n  async githubOAuthCallback() {\n    return this.ctx.req.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local RabbitMQ Testing\nDESCRIPTION: This TypeScript snippet shows how to perform local testing of a RabbitMQ consumer in a MidwayJS application using `@midwayjs/mock`. It creates a producer, sends a message to a queue, starts the application, and verifies that the message is consumed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRabbitMQProducer, close, creatApp } from '@midwayjs/mock';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create message and get from app', async () => {\n    // create a queue and channel\n    const channel = await createRabbitMQProducer('tasks', {\n      isConfirmChannel: true,\n      mock: false,\n      url: 'amqp://localhost',\n    });\n\n    // send data to queue\n    channel.sendToQueue('tasks', Buffer.from('something to do'))\n\n    // create app and got data\n    const app = await creatApp();\n\n    // wait a moment\n\n    await close(app);\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring File Routing in midway.config.ts (Midway Hooks 2.0)\nDESCRIPTION: This configuration defines the source directory for API files and the routing rules. The `source` specifies the directory containing API handlers, and `routes` is an array of routing configurations, where `baseDir` specifies the subdirectory containing function files, and `basePath` sets the URL prefix for the generated API endpoints.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_route.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@midwayjs/hooks';\n\nexport default defineConfig({\n  source: './src/apis',\n  routes: [\n    {\n      baseDir: 'lambda',\n      basePath: '/api',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer Implementation (eachMessage)\nDESCRIPTION: This TypeScript code demonstrates a standard Kafka consumer implementation using the `@KafkaConsumer` decorator and the `IKafkaConsumer` interface. The `eachMessage` method is used to process individual messages received from Kafka.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/consumer/sub1.consumer.ts\nimport { KafkaConsumer, IKafkaConsumer, EachMessagePayload } from '@midwayjs/kafka';\n\n@KafkaConsumer('sub1')\nclass Sub1Consumer implements IKafkaConsumer {\n  async eachMessage(payload: EachMessagePayload) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Mirror Address\nDESCRIPTION: This snippet shows how to configure the Node.js mirror address to use npmmirror in China. This is useful for users in China to speed up downloads due to network restrictions. It uses the `nvs remote` command to change the remote URL for the node distribution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/how_to_install_nodejs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nvs remote node https://npmmirror.com/mirrors/node/\n$ nvs remote\ndefault             node\nchakracore          https://github.com/nodejs/node-chakracore/releases/\nchakracore-nightly  https://nodejs.org/download/chakracore-nightly/\nnightly             https://nodejs.org/download/nightly/\nnode                https://nodejs.org/dist/\n```\n\n----------------------------------------\n\nTITLE: Configuring domain whitelist for CORS\nDESCRIPTION: This code snippet configures the `security` plugin to define a domain whitelist for CORS in the `src/config/config.default.ts` file. Only domains in the `domainWhiteList` array will be allowed to make cross-origin requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport const security = {\n  domainWhiteList: ['http://localhost:4200'], //  允许跨域的域名\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Property Decorator (@MemoryCache) in TypeScript\nDESCRIPTION: This code defines a custom property decorator named `@MemoryCache`.  It uses `createCustomPropertyDecorator` to create the decorator, which associates it with a unique key (`MEMORY_CACHE_KEY`). The decorator accepts an optional `key` parameter, which is stored as metadata.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/memoryCache.decorator.ts\nimport { createCustomPropertyDecorator } from '@midwayjs/core';\n\n// 装饰器内部的唯一 id\nexport const MEMORY_CACHE_KEY = 'decorator:memory_cache_key';\n\nexport function MemoryCache(key?: string): PropertyDecorator {\n  return createCustomPropertyDecorator(MEMORY_CACHE_KEY, {\n    key,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Testing OSS Triggered Function\nDESCRIPTION: This snippet shows how to test an OSS-triggered function. An instance of the function class is obtained via `getServerlessInstance`, and the `handleOSSEvent` method is called with a mocked OSS event, generated with `mockOSSEvent` from `@midwayjs/fc-starter`. The result is then asserted.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\nimport { mockOSSEvent } from '@midwayjs/fc-starter';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n   it('should get result from oss trigger', async () => {\n     // ...\n     const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n     expect(await instance.handleOSSEvent(mockOSSEvent())).toEqual('hello world');\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout in Koa with MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to configure both serverTimeout and requestTimeout in a Koa application within MidwayJS. It shows how to set the `serverTimeout` and `requestTimeout` options to control the timeout durations for different aspects of the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    serverTimeout: 100_000\n  },\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    serverOptions: {\n      requestTimeout: 600_000\n    }\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Upload Middleware Globally (@midwayjs/web)\nDESCRIPTION: This TypeScript code demonstrates how to configure the UploadMiddleware from @midwayjs/busboy globally for a MidwayJS application using Egg. All routes will have the upload middleware applied.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\nimport { Application } from '@midwayjs/web';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App('egg')\n  app: Application;\n  \n  async onReady() {\n    this.app.useMiddleware(busboy.UploadMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Typegoose Entity in a Service\nDESCRIPTION: This TypeScript code demonstrates how to inject and use a Typegoose entity (model) within a MidwayJS service. It uses `@InjectEntityModel` to inject the `User` model and then utilizes it to perform database operations, such as creating and finding a user.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typegoose';\nimport { ReturnModelType } from '@typegoose/typegoose';\nimport { User } from '../entity/user';\n\n@Provide()\nexport class TestService {\n\n  @InjectEntityModel(User)\n  userModel: ReturnModelType<typeof User>;\n\n  async getTest(){\n    // create data\n    const { _id: id } = await this.userModel.create({ name: 'JohnDoe', jobs: ['Cleaner'] } as User); // an \"as\" assertion, to have types for all properties\n\n    // find data\n    const user = await this.userModel.findById(id).exec();\n    console.log(user)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Input Parameters in `before`\nDESCRIPTION: This example demonstrates how to modify the input parameters of an intercepted method using the `before` lifecycle method. It shows how to access the original arguments through `point.args` and reassign them to new values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home(data1, data2) {\n    return data1 + data2; //Because the method is intercepted, the return value here is 3\n  }\n}\n\n// src/aspect/\n@Aspect(HomeController, 'home') // Only the home method is intercepted here.\nexport class ReportInfo implements IMethodAspect {\n  async before(point: JoinPoint) {\n    console.log(point.args); // Because the Controller method is cut, the original parameter is [ctx, next]\n    Point. args = [1, 2]; // Modify parameters\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: User Service with Interface\nDESCRIPTION: This code snippet demonstrates how to create a service class in MidwayJS using an interface. The `@Provide()` decorator registers the class with the dependency injection container, making it available for injection into other components. The `getUser` method simulates fetching user data based on an ID, returning a Promise of type User.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { User } from '../interface';\n\n@Provide()\nexport class UserService {\n\n  async getUser(id: number): Promise<User> {\n    return {\n      id,\n      name: 'Harry',\n      age: 18',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Instances (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve specific HTTP client instances from the `HTTPClientServiceFactory` using the `get` method with the name of the desired instance (e.g., 'aaa', 'bbb').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPClientServiceFactory } from './service/httpClientServiceFactory';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  serviceFactory: HTTPClientServiceFactory;\n\n  async invoke() {\n\n    const aaaInstance = this.serviceFactory.get('aaa');\n    // ...\n\n    const bbbInstance = this.serviceFactory.get('bbb');\n    // ...\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Extended Koa Component (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use a custom Koa component (e.g., `@midwayjs/my-koa`) in a MidwayJS application. It imports the component and adds it to the `imports` array in the `@Configuration` decorator, simplifying the process for business users.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\n// Your own components\nimport * as myKoa from '@midwayjs/my-koa';\n\n@Configuration({\n  imports: [myKoa],\n})\nexport class MyConfiguration {\n  async onReady() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple Data Sources\nDESCRIPTION: This TypeScript code shows how to configure multiple data sources in the `config.default.ts` file, each with its own URI, options, and associated entities (User and User2).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { User, User2 } from '../entity/user';\n\nexport default {\n  // ...\n  mongoose: {\n    dataSource: {\n      default: {\n        uri: 'mongodb://localhost:27017/test',\n        options: {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n          user: '***********',\n          pass: '***********'\n        },\n        entities: [ User]\n      },\n      db1: {\n        uri: 'mongodb://localhost:27017/test1',\n        options: {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n          user: '***********',\n          pass: '***********'\n        },\n        entities: [ User2]\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Describe multiple possible responses\nDESCRIPTION: This code snippet demonstrates how to use the `respond` method to describe different possible responses for an API endpoint. It shows how to specify the status code, description, response type, headers, and example data for each response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@CreateApiDoc()\n.summary('get user')\n.description('This is a open api for get user')\n.respond(200)\n.respond(302, 'redirect to another URL')\n.respond(201, 'response a text data', 'text', {\n  headers: {\n    'x-schema': {\n      description: 'set a schema header',\n      type: 'string'\n    }\n  },\n  example: 'this is a reponse data'\n})\n.respond(500, 'error in response', 'json', {\n  example: {\n    a: 1\n  }\n})\n.build()\n```\n\n----------------------------------------\n\nTITLE: Report Middleware Implementation in TypeScript\nDESCRIPTION: This snippet demonstrates the implementation of a report middleware in TypeScript using the @midwayjs/core library. It measures the execution time of a controller and logs the time taken. It implements the IMiddleware interface and uses the resolve method to define the middleware logic. The static getName method provides a unique name for the middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // 控制器前执行的逻辑\n      const startTime = Date.now();\n      // 执行下一个 Web 中间件，最后执行到控制器\n      // 这里可以拿到下一个中间件或者控制器的返回值\n      const result = await next();\n      // 控制器之后执行的逻辑\n      console.log(Date.now() - startTime);\n      // 返回给上一个中间件的结果\n      return result;\n    };\n  }\n\n  static getName(): string {\n    return 'report';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling index.html Hosting in Full-Stack Suite (TypeScript)\nDESCRIPTION: This snippet shows how to disable the default `index.html` hosting capability in a Midway Hooks full-stack suite project. By setting the `static` option to `false` in the `midway.config.ts` file, the build process will not generate the hosting function for `index.html`, and the application will only provide API services. This is useful when `index.html` and other static resources are deployed to a separate managed service like Nginx or a CDN, allowing the backend to focus solely on API handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/deploy.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from '@midwayjs/hooks-kit';\n\nexport default defineConfig({\n  static: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Environment in Code - Typescript\nDESCRIPTION: This TypeScript code shows how to access the current environment within a Midway.js application using the `app.getEnv()` method. It requires the `@midwayjs/koa` package and demonstrates dependency injection using `@App()` to get the application instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/environment.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application } from '@midwayjs/koa';\n\n// process.env.MIDWAY_SERVER_ENV=prod\n\n@Provide()\nexport class UserService {\n  \n  @App()\n  app: Application;\n\n  async invoke() {\n    console.log(this.app.getEnv()); // prod\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and configuring staticFile module in Midway\nDESCRIPTION: This TypeScript snippet demonstrates how to import and configure the @midwayjs/static-file module in a Midway application's `configuration.ts` file. It imports necessary modules from @midwayjs/core, @midwayjs/koa, and @midwayjs/static-file. It then defines the MainConfiguration class, which imports koa and staticFile modules, and configures the importConfigs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/static_file.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as staticFile from '@midwayjs/static-file';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    koa\n    staticFile\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Scope Downgrade for UserService (TypeScript)\nDESCRIPTION: This code shows how to explicitly allow scope degradation by setting `allowDowngrade: true` in the `Scope` decorator.  It also demonstrates checking for the existence of `ctx` before using it to prevent errors when running in a singleton context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Request, { allowDowngrade: true })\nexport class UserService {\n  @Inject()\n  ctx: Context;\n\n  async getUser() {\n    if (ctx && ctx.xxxx) {\n      // ...\n    }\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Configuration with Existing Web Framework - TypeScript\nDESCRIPTION: This TypeScript code shows how to configure `@midwayjs/ws` to reuse the port of an existing web framework (e.g., `@midwayjs/koa`). By omitting the `port` property in the `webSocket` configuration, the WebSocket server will share the port defined in the `koa` configuration. This allows both HTTP and WebSocket traffic to be handled on the same port. This assumes that `@midwayjs/koa` is also installed and configured.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    port: 7001,\n  }\n  webSocket: {\n  \t// 这里不配置即可\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Inject and Use COS Service\nDESCRIPTION: This snippet shows how to inject the `COSService` into a MidwayJS class and use it to interact with Tencent Cloud COS. The `@Inject` decorator injects an instance of `COSService`, which is then used to call `sliceUploadFile` method. The `sliceUploadFile` method requires `Bucket`, `Region`, `Key`, and `FilePath` parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cos.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Controller, Inject, Get } from '@midwayjs/core';\nimport { COSService } from '@midwayjs/cos';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  cosService: COSService;\n\n  async invoke() {\n    await this.cosService.sliceUploadFile({\n      Bucket: 'test-1250000000',\n      Region: 'ap-guangzhou',\n      Key: '1.zip',\n      FilePath: './1.zip'\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using TableStoreService\nDESCRIPTION: This TypeScript code demonstrates how to inject the `TableStoreService` into a Midway.js component and use it to interact with TableStore. It injects the service using `@Inject` and calls the `putRow` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tablestore.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Controller, Inject, Get } from '@midwayjs/core';\nimport { TableStoreService } from '@midwayjs/tablestore';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  tableStoreService: TableStoreService;\n\n  async invoke() {\n    await this.tableStoreService.putRow(params);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Core Logger in TypeScript\nDESCRIPTION: This code demonstrates how to use the core logger in a MidwayJS configuration class to log framework or component-level information. The `@Logger('coreLogger')` decorator is used to inject the core logger instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  @Logger('coreLogger')\n  logger: ILogger;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    this.logger.debug('debug info');\n    this.logger.info('启动耗时 %d ms', Date.now() - start);\n    this.logger.warn('warning!');\n\n    this.logger.error(someErrorObj);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeated Tasks\nDESCRIPTION: This TypeScript code configures a task to be executed repeatedly using a cron expression. The `@Processor` decorator is used with the `repeat` option to specify the schedule.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, IProcessor } from '@midwayjs/bullmq';\nimport { FORMAT } from '@midwayjs/core';\n\n@Processor('test', {\n  repeat: {\n    pattern: FORMAT.CRONTAB.EVERY_PER_5_SECOND\n  }\n})\nexport class TestProcessor implements IProcessor {\n  async execute() {\n    // 每 5 秒执行一次\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Express static middleware in @midwayjs/express\nDESCRIPTION: This snippet shows how to use the built-in `express.static` middleware to serve static files in a @midwayjs/express application. It configures the middleware to serve files from the 'public' directory. It imports express and uses the `app.use` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/static_file.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/express';\nimport * as express from 'express';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(express.static('public'));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Passport Component - Typescript\nDESCRIPTION: This snippet demonstrates how to enable the Passport component in a MidwayJS application. It imports the necessary modules and adds the passport module to the imports array in the configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { join } from 'path';\nimport { ILifeCycle,} from '@midwayjs/core';\nimport { Configuration } from '@midwayjs/core';\nimport * as passport from '@midwayjs/passport';\n\n@Configuration({\n  imports: [\n    // ...\n    passport\n  ],\n  importConfigs: [join(__dirname, './config')]\n})\nexport class MainConfiguration implements ILifeCycle {}\n\n```\n\n----------------------------------------\n\nTITLE: Specifying TTL for Cached Methods in Midway\nDESCRIPTION: This snippet demonstrates how to set a specific TTL (time-to-live) value for cached method results using the `@Caching` decorator.  The TTL value is specified in seconds, determining how long the cache remains valid before expiring.  Here, it's set to 100 seconds for the `getUser` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n   @Caching('default', 100)\n   async getUser(name: string) {\n     return name;\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC Component in existing Midway App - TS\nDESCRIPTION: This TypeScript snippet shows how to enable the `@midwayjs/grpc` component within an existing Midway.js application, specifically alongside `@midwayjs/koa`. This allows gRPC services to be added to an existing application that uses Koa as its web framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as grpc from '@midwayjs/grpc';\n\n@Configuration({\n  imports: [koa, grpc],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get single config value in MidwayJS\nDESCRIPTION: This code snippet shows how to retrieve a single configuration value in a MidwayJS application using the `@Config` decorator. It injects the configuration value associated with the `userService` key into the `userConfig` property of the `IndexHandler` class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from '@midwayjs/core';\n\nexport class IndexHandler {\n\n   @Config('userService')\n   userConfig;\n\n   async handler() {\n   console.log(this.userConfig); // { appname: 'test'}\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration in MidwayJS with EggJS\nDESCRIPTION: This TypeScript code shows how to define configuration settings within a MidwayJS application using EggJS. It exports a default function that returns a configuration object, allowing for customization of application-specific settings such as cookie keys and EggJS port.  The function receives appInfo, which provides metadata about the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig, MidwayAppInfo } from '@midwayjs/core';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // use for cookie sign key, should change to your own and keep security\n    keys: appInfo.name + '_xxxx',\n    egg: {\n      port: 7001\n    },\n    // security: {\n    //   csrf: false\n    // },\n  } as MidwayConfig;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Testing Non-HTTP Triggered Function with Direct Invocation\nDESCRIPTION: This snippet demonstrates how to test a non-HTTP triggered function (e.g., timer, object storage) in Midway.js FaaS. It uses `createFunctionApp` to create a function app and `getServerlessInstance` to get the class instance, which is then directly called with parameters for testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_testing.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/faas';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from event trigger', async () => {\n    // 创建函数 app\n    let app: Application = await createFunctionApp<Framework>();\n    \n    // 拿到服务类\n    const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n    \n    // 调用函数方法，传入参数\n    expect(await instance.handleEvent('hello world')).toEqual('hello world');\n    \n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using App Logger in MidwayJS\nDESCRIPTION: This code illustrates how to use the application-level logger (App Logger) to log information during the application's lifecycle, such as during the startup phase. It utilizes the `@Logger()` decorator and requires `@midwayjs/core` and `@midwayjs/logger` dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Logger } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n   @Logger()\n   logger: ILogger;\n\n   async onReady(container: IMidwayContainer): Promise<void> {\n     this.logger.debug('debug info');\n     this.logger.info('Startup took %d ms', Date.now() - start);\n     this.logger.warn('warning!');\n\n     this.logger.error(someErrorObj);\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Service with Request Context\nDESCRIPTION: This snippet demonstrates how to test a service that relies on the request context (ctx) by retrieving it within a request scope. It uses `createAnonymousContext` and retrieves the service by injection ID and by class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/web';\nimport * as assert from 'assert';\nimport { UserService } from '../../src/service/user';\n\ndescribe('test/controller/home.test.ts', () => {\n\n  it('should GET /', async () => {\n    // create app\n    const app = await createApp<Framework>();\n\n    // 根据依赖注入 Id 获取实例\n    const userService = await app.createAnonymousContext()\n    \t\t\t\t\t.requestContext.getAsync<UserService>('userService');\n\n    // 也能传入 class 获取实例\n    const userService = await app.createAnonymousContext()\n    \t\t\t\t\t.requestContext.getAsync(UserService);\n\n    // close app\n    await close(app);\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Dockerfile\nDESCRIPTION: This Dockerfile provides a basic setup for containerizing a Node.js application. It starts with a Node.js base image, sets the working directory, copies application files, installs dependencies, builds the application, exposes a port, and specifies the command to start the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:18\n\nWORKDIR /app\n\nENV TZ=\"Asia/Shanghai\"\n\nCOPY . .\n\n# 如果各公司有自己的私有源，可以替换registry地址\nRUN npm install --registry=https://registry.npm.taobao.org\n\nRUN npm run build\n\n# 如果端口更换，这边可以更新一下\nEXPOSE 7001\n\nCMD [\"npm\", \"run\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Passing parameter data via POST\nDESCRIPTION: This code demonstrates how to pass data as a parameter to a POST request using Midway Hooks.  The function parameter `name: string` becomes the input. The handler function returns a greeting string with the provided name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Post(), // Http Path: /api/say\n  async (name: string) => {\n    return 'Hello ${name}!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Entire Body with Decorator\nDESCRIPTION: Demonstrates how to retrieve the entire request body as an object using the `@Body` decorator. The `updateUser` method receives the entire body as a `User` object. Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// POST /user/ HTTP/1.1\n// Host: localhost:3000\n// Content-Type: application/json; charset=UTF-8\n//\n// {\"uid\": \"1\", \"name\": \"harry\"}\nimport { Controller, Post, Body } from '@midwayjs/core';\n\n@Controller('/user')\nexport class UserController {\n  @Post('/')\n  async updateUser(@Body() user: User): Promise<User> {\n    // user 等价于 ctx.request.body 整个 body 对象\n    // => output user\n    // {\n    //   uid: '1',\n    //   name: 'harry',\n    // }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Logger Transport (config.default.ts)\nDESCRIPTION: This code shows how to disable a specific transport, such as the `console` transport, by setting it to `false` in the `transports` configuration within the `midwayLogger` section.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        console: false,\n      }\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Accessing Socket.IO Application Instance (TypeScript)\nDESCRIPTION: Illustrates how to access the Socket.IO Application instance in MidwayJS using the `@App` decorator. The `socketApp` instance provides access to the Socket.IO server functionalities, allowing global operations like fetching sockets or broadcasting to namespaces. Requires importing `Application` from `@midwayjs/socketio` and `Controller`, `App`, and `Get` from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application as SocketApplication } from '@midwayjs/socketio';\nimport { Controller, App } from '@midwayjs/core';\n\n@Controller()\nexport class UserController {\n\n  @App('socketIO')\n  socketApp: SocketApplication;\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application as SocketApplication } from '@midwayjs/socketio';\nimport { Provide, Controller, App, Get } from '@midwayjs/core';\n\n@Controller()\nexport class UserController {\n\n  @App('socketIO')\n  socketApp: SocketApplication;\n\n  @Get()\n  async invoke() {\n  \t// Broadcast the connection under/\n  \tthis.socketApp.of('/').emit('hi', 'everyone');\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns all socket instances\nconst sockets = await app.fetchSockets();\n\n// Returns all socket instances in room1.\nconst sockets = await app.in(\"room1\").fetchSockets();\n\n// Returns an instance of a specific socketId\nconst sockets = await app.in(theSocketId).fetchSockets();\n```\n\n----------------------------------------\n\nTITLE: Manipulating Loggers Directly - TypeScript\nDESCRIPTION: This snippet demonstrates how to directly manipulate loggers using the `loggers` object, including creating, adding, getting, and removing loggers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loggers, ILogger } from '@midwayjs/logger';\n\nconst customLogger = loggers.createLogger('customLogger', {\n  // ...\n});\n\ncustomLogger.info('hello world');\n\nloggers.getLogger('customLogger'); // 从容器获取一个日志\nloggers.addLogger('anotherLogger', customLogger); // 添加一个新的日志\nloggers.removeLogger('customLogger'); // 移除一个日志\nloggers.close(); // 关闭并移除所有日志\n```\n\n----------------------------------------\n\nTITLE: Modifying Middleware Properties in the Init Phase (TypeScript)\nDESCRIPTION: Explains how to dynamically modify middleware properties during the initialization phase using the `@Init` decorator. This allows for merging or modifying rules based on configuration or other dynamic factors. The example demonstrates conditionally concatenating match or ignore rules based on the `reportConfig` property injected using the `@Config` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n   // Configuration of a middleware\n   @Config('report')\n   reportConfig;\n\n   @Init()\n   async init() {\n     // merge some rules dynamically\n     if (this. reportConfig. match) {\n       this.match = ['/api/index', '/api/user'].concat(this.reportConfig.match);\n     } else if (this. reportConfig. ignore) {\n       this.match = [].concat(this.reportConfig.ignore);\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Example using Target Configuration\nDESCRIPTION: This config utilizes the `target` property to dynamically construct the proxy URL using a regular expression capture group.  URLs matching the pattern \"/httpbin/(.*)$\" will have their `$1` replaced with the captured group, forwarding requests to \"https://httpbin.org/$1\".\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/http-proxy.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  httpProxy: {\n    match: /\\/httpbin\\/(.*)$/,\n    target: 'https://httpbin.org/$1',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configure NPM Scripts for Midway Hooks\nDESCRIPTION: This JSON snippet configures npm scripts for developing, building, and starting a Midway Hooks application using the `hooks` command-line interface. The `dev` script starts the development server, `start` script starts the production server (after building), and `build` script builds the application for production.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/fullstack.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"hooks dev\", // 启动开发服务器\n    \"start\": \"hooks start\", // 启动生产服务器，使用前请确保已运行 `npm run build`\n    \"build\": \"hooks build\" // 为生产环境构建产物\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling egg-cors plugin\nDESCRIPTION: This code snippet enables the `egg-cors` plugin within the `src/config/plugin.ts` file of a Midway.js web application. It sets the `enable` property to `true` and specifies the package name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/plugin.ts\nexports.cors = {\n  enable: true,\n  package: 'egg-cors',\n};\n```\n\n----------------------------------------\n\nTITLE: Define Controller with Route Priority in TypeScript\nDESCRIPTION: This code snippet defines a MidwayJS controller with two routes: one with an absolute path (`/invoke/abc`) and another with a wildcard (`/invoke/*`). The absolute path route will be registered first, ensuring it has higher priority.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api')\nexport class APIController {\n  @Get('/invoke/*')\n  async invokeAll() {\n  }\n\n  @Get('/invoke/abc')\n  async invokeABC() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually calling API endpoint with request headers\nDESCRIPTION: This snippet demonstrates manually calling an API endpoint with request headers using the `fetch` API. It sets the desired headers in the `fetch` options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('/auth', {\n  headers: {\n    token: '123456',\n  },\n})\n  .then((res) => res.json())\n  .then((res) => console.log(res)); // { token: '123456' }\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example for Validation Failures\nDESCRIPTION: This code shows how to catch validation failure errors using a `try...catch` block. It demonstrates how to access the error code (`VALIDATION_FAILED`) and the parsed error message from `error.data`. The error message needs to be parsed using `JSON.parse` because it's a JSON string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  // call the interface\n} catch (error) {\n  console.log(error.data.code); // VALIDATION_FAILED\n  console.log(\n    JSON.parse(error.data.message)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages from Controller - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to broadcast messages from a Controller to all connected WebSocket clients. It retrieves the WebSocket `Application` instance using `@App('webSocket')` and iterates through its `clients` to send messages.  This approach allows for server-initiated communication with connected clients.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, App } from '@midwayjs/core';\nimport { Application } from '@midwayjs/ws';\n\n@Controller()\nexport class HomeController {\n\n  @App('webSocket')\n  wsApp: Application;\n\n  async invoke() {\n    this.wsApp.clients.forEach(ws => {\n      // ws.send('something');\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Consumer Implementation\nDESCRIPTION: This TypeScript code defines a RabbitMQ consumer using MidwayJS decorators. It utilizes `@Consumer` to specify the consumer type as `MSListenerType.RABBITMQ` and `@RabbitMQListener` to bind the `gotData` method to the 'tasks' queue. It injects context and acknowledges messages using `ctx.channel.ack(msg)`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Consumer, MSListenerType, RabbitMQListener, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/rabbitmq';\nimport { ConsumeMessage } from 'amqplib';\n\n@Consumer(MSListenerType.RABBITMQ)\nexport class UserConsumer {\n\n  @Inject()\n  ctx: Context;\n\n  @RabbitMQListener('tasks')\n  async gotData(msg: ConsumeMessage) {\n    this.ctx.channel.ack(msg);\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Deploy Script to Package.json (MidwayJS, JSON)\nDESCRIPTION: This JSON snippet demonstrates adding the deploy script to the `package.json` file, simplifying the deployment process. The `deploy` script executes the `deploy.sh` Bash script, which handles building, packaging, and deploying the application using Serverless Devs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"sh deploy.sh\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster Connection for BullMQ - TypeScript\nDESCRIPTION: This snippet shows how to configure a Redis cluster connection for BullMQ. It creates a `Redis.Cluster` instance with connection details and options, and then assigns it to the `defaultConnection` property in the BullMQ configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport Redis from 'ioredis';\n\nconst clusterOptions = {\n  enableReadyCheck: false,\n  retryDelayOnClusterDown: 300,\n  retryDelayOnFailover: 1000,\n  retryDelayOnTryAgain: 3000,\n  slotsRefreshTimeout: 10000,\n  maxRetriesPerRequest: null\n}\n\nconst redisClientInstance = new Redis.Cluster([\n  {\n    port: 7000,\n    host: '127.0.0.1'\n  },\n  {\n    port: 7002,\n    host: '127.0.0.1'\n  },\n], clusterOptions);\n\nexport default {\n  bullmq: {\n    defaultConnection: redisClientInstance,\n    defaultPrefix: '{midway-bullmq}',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with TypeORM in MidwayJS\nDESCRIPTION: This snippet demonstrates how to delete data from a database using TypeORM in a MidwayJS service. It shows how to remove entities by instance or ID, and also how to use soft deletes. It requires the Photo entity and the TypeORM Repository.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from '../entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n    /*...*/\n    const photo = await this.photoModel.findOne({\n      where: {\n        id: 1,\n      },\n    });\n\n    // 删除单个\n    await this.photoModel.remove(photo)\n    // 删除多个\n    await this.photoModel.remove([photo1, photo2, photo3]);\n\n    // 按 id 删除\n    await this.photoModel.delete(1);\n    await this.photoModel.delete([1, 2, 3]);\n    await this.photoModel.delete({ name: \"Timber\" });\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.photoModel.softDelete(1);\n// 使用 restore 方法恢复;\nawait this.photoModel.restore(1);\n```\n\n----------------------------------------\n\nTITLE: Defining a Class Decorator (@Model) in TypeScript\nDESCRIPTION: This code defines a custom class decorator named `@Model`. It uses `saveModule` to associate the decorated class with the decorator's key (`MODEL_KEY`), `saveClassMetadata` to store metadata on the class, `Scope` to set the instance scope to request scope, and `Provide` to automatically register the class as a provider in the IoC container. It imports APIs from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scope, ScopeEnum, saveClassMetadata, saveModule, Provide } from '@midwayjs/core';\n\n// 提供一个唯一 key\nexport const MODEL_KEY = 'decorator:model';\n\nexport function Model(): ClassDecorator {\n  return (target: any) => {\n    // 将装饰的类，绑定到该装饰器，用于后续能获取到 class\n    saveModule(MODEL_KEY, target);\n    // 保存一些元数据信息，任意你希望存的东西\n    saveClassMetadata(\n      MODEL_KEY,\n      {\n        test: 'abc',\n      },\n      target\n    );\n    // 指定 IoC 容器创建实例的作用域，这里注册为请求作用域，这样能取到 ctx\n    Scope(ScopeEnum.Request)(target);\n\n    // 调用一下 Provide 装饰器，这样用户的 class 可以省略写 @Provide() 装饰器了\n    Provide()(target);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Delayed task execution\nDESCRIPTION: This TypeScript code shows how to delay the execution of a task by a specified amount of time (in milliseconds). The `delay` option is passed to the `addJobToQueue` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullFramework.getQueue('test');\n// Execute this task immediately\nawait testQueue?.addJobToQueue({}, { delay: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Responses with HttpServerResponse (TypeScript)\nDESCRIPTION: This code snippet shows how to use `HttpServerResponse` to standardize response formatting in MidwayJS. It uses the `success()` and `fail()` methods to wrap JSON data in a consistent structure for both successful and failed requests. It depends on `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, HttpServerResponse } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n  \n  @Get('/success')\n  async home() {\n    return new HttpServerResponse(this.ctx).success().json({\n      // ...\n    });\n  }\n  \n  @Get('/fail')\n  async home2() {\n    return new HttpServerResponse(this.ctx).fail().json({\n      // ...\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using QueryBuilder in TypeORM\nDESCRIPTION: This code snippet shows how to construct a complex SQL query using TypeORM's QueryBuilder. It demonstrates selecting published photos with names either 'My' or 'Mishka', joining metadata and albums, ordering by ID, skipping and taking a limited number of results, and setting parameters to prevent SQL injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nlet photos = await this.photoModel\n  .createQueryBuilder('photo') // first argument is an alias. Alias is what you are selecting - photos. You must specify it.\n  .innerJoinAndSelect('photo.metadata', 'metadata')\n  .leftJoinAndSelect('photo.albums', 'album')\n  .where('photo.isPublished = true')\n  .andWhere('(photo.name = :photoName OR photo.name = :bearName)')\n  .orderBy('photo.id', 'DESC')\n  .skip(5)\n  .take(10)\n  .setParameters({ photoName: 'My', bearName: 'Mishka' })\n  .getMany();\n```\n\n----------------------------------------\n\nTITLE: Adding Bull Board UI Component to dependencies - JSON\nDESCRIPTION: This snippet demonstrates how to add the @midwayjs/bull-board package to your project's dependencies in package.json. This declares the dependency so npm can install it.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/bull-board\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Client-Side Stream using sendMessage and end (TypeScript)\nDESCRIPTION: This code demonstrates how to call a client-side streaming gRPC method. The client sends multiple messages using `sendMessage` and terminates the stream using `end`.  The server's response is then awaited.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// 客户端推送\nconst data = await service.addMany()\n.sendMessage({num: 1})\n.sendMessage({num: 2})\n.sendMessage({num: 3})\n.end();\n\n// data.num = 6\n\n```\n\n----------------------------------------\n\nTITLE: Calling the Reusable Hook from Another File\nDESCRIPTION: This code shows how to import and use the reusable `useIp` hook (exposed via `getIp` function using `Api`) from another file. The `getIp` function is assumed to be exported from the file where the hook is defined, and it returns an object containing the IP address.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/builtin-hooks.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport getIp from './api';\nconst { ip } = await getIp();\nconsole.log(ip); // 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters with ApiQuery for Objects\nDESCRIPTION: This TypeScript code demonstrates how to define query parameters as an object using `@ApiQuery`. The object type needs to be used with `@ApiProperty`. A name parameter needs to be specified in the `@ApiQuery` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDTO {\n  @ApiProperty()\n  name: string;\n}\n\n@Get('/get_user')\n@ApiQuery({\n  name: 'query'\n})\nasync getUser(@Query() dto: UserDTO) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Locale through Decorator\nDESCRIPTION: This snippet shows how to specify the locale for validation messages using the `@Validate` decorator.  This allows overriding the default locale for specific controller methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/user')\nexport class UserController {\n  @Post('/')\n  @Validate({\n    locale: 'en_US',\n  })\n  async getUser(@Body() bodyData: UserDTO) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming gRPC Server Stream with Events in Typescript\nDESCRIPTION: This code demonstrates how to consume a gRPC server stream on the client-side using events in TypeScript. It retrieves the call object using `service.sumMany().getCall()` and attaches a 'data' event listener to process data as it arrives in real-time.  `sendMessage` is used to initiate the call. It requires the gRPC service client (service).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Server push\nlet call = service.sumMany().getCall();\n\ncall.on('data', data => {\n\t// do something\n});\n\ncall.sendMessage({\n  num: 1\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Authentication Strategy in TypeScript\nDESCRIPTION: Define a local authentication strategy using `@CustomStrategy` and extending `PassportStrategy`. The `validate` method handles user authentication logic, including password comparison using bcrypt. The `getStrategyOptions` method defines any specific options for the strategy.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// local-strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Repository } from 'typeorm';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { UserEntity } from './user';\nimport * as bcrypt from 'bcrypt';\n\n@CustomStrategy()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  @InjectEntityModel(UserEntity)\n  userModel: Repository<UserEntity>;\n\n  // 策略的验证\n  async validate(username, password) {\n    const user = await this.userModel.findOne({ username });\n    if (await bcrypt.compare(password, user.password)) {\n      throw new Error('error password ' + username);\n    }\n\n    return {\n      username,\n      password,\n    };\n  }\n\n  // 当前策略的参数\n  getStrategyOptions(): any {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Authentication using CasbinEnforcerService\nDESCRIPTION: This code shows how to use the `CasbinEnforcerService` directly in a guard to enforce permissions. It checks if the user has the necessary permissions to access the `findAllUsers` method based on the Casbin policies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CasbinEnforcerService } from '@midwayjs/casbin';\nimport { Guard, IGuard } from '@midwayjs/core';\n\n@Guard()\nexport class UserGuard extends IGuard {\n\n  @Inject()\n  casbinEnforcerService: CasbinEnforcerService;\n\n  async canActivate(ctx, clz, methodName) {\n    // If the user is logged in and is a specific method, check the permissions\n    if (ctx.user && methodName === 'findAllUsers') {\n      return await this.casbinEnforcerService.enforce(ctx.user, 'USER_ROLES', 'read');\n    }\n    // Unlogged users are not allowed to access\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bull Configuration with Redis URL\nDESCRIPTION: This TypeScript snippet shows how to configure the Bull queue with a default Redis connection URL in the `config.default.ts` file. All queues will reuse this configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  bull: {\n    // 默认的队列配置\n    defaultQueueOptions: {\n      redis: `redis://127.0.0.1:32768`,\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags with MySQL Storage\nDESCRIPTION: This snippet demonstrates configuring the `@midwayjs/tags` component to use MySQL for data storage. It defines a client named `tagGroup2`, sets `dialectType` to `mysql`, enables `sync` for automatic schema synchronization, and provides a MySQL connection instance. It relies on an existing `mysqlConnection` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nexport default {\n   tags: {\n     clients: {\n       'tagGroup1': {\n         // Use local memory as data storage\n         dialectType: 'memory',\n       },\n       'tagGroup2': {\n         // use mysql as data store\n         dialectType: 'mysql',\n         // Automatically synchronize the table structure\n         sync: true,\n         // mysql connection instance\n         instance: mysqlConnection. promise(),\n       },\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Reuse Kafka Instance (Producer)\nDESCRIPTION: Demonstrates how a Kafka producer can reuse a Kafka instance created for a consumer. This is achieved using the `kafkaInstanceRef` field, which references the consumer's configuration name (e.g., 'sub1'). This avoids creating duplicate Kafka connections and reduces resource consumption.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          clientId: 'my-app',\n          brokers: ['localhost:9092'],\n        },\n      }\n    },\n    producer: {\n      clients: {\n        pub1: {\n          kafkaInstanceRef: 'sub1',\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Express Port to Null in Unit Test Configuration - Typescript\nDESCRIPTION: This code snippet shows how the Express port is configured to `null` within the `config.unittest` file for the unit test environment. This is necessary because supertest starts a port for testing purposes.  Setting to null prevents conflicts. Dependencies: supertest.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/express.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.unittest\nexport default {\n  // ...\n  express: {\n    port: null,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: HttpClient with Default Headers and Timeout - TypeScript\nDESCRIPTION: This snippet demonstrates how to create an `HttpClient` instance with default headers, method, and timeout.  These parameters will be used for all requests made with this instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from '@midwayjs/core';\n\nconst httpclient = new HttpClient({\n  headers: {\n    'x-timeout': '5'\n  },\n  method: 'POST',\n  timeout: 2000\n});\n\n// 每次都会带上 headers\nconst result = await httpclient.request('http://127.1:7001/');\n\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependencies for Swagger\nDESCRIPTION: This JSON snippet shows the necessary dependencies in `package.json` for using Swagger with MidwayJS. It includes `@midwayjs/swagger` and `swagger-ui-dist` either as a dependency or devDependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/swagger\": \"^3.0.0\",\n    // If you want to use it on the server\n    \"swagger-ui-dist\": \"4.2.1\",\n    // ...\n  },\n  \"devDependencies\": {\n    // If you don't want to use it on the server\n    \"swagger-ui-dist\": \"4.2.1\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serverless Function with HTTP/API Gateway Trigger\nDESCRIPTION: This code snippet illustrates a serverless function triggered by HTTP or API Gateway events. It uses the `Context` object and the `ServerlessTrigger` decorator. The function directly returns a string, which is equivalent to setting `this.ctx.body` in the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_context.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\nimport { Provide } from '@midwayjs/decorator';\n\n@Provide()\nexport class Index {\n\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(...)\n\tasync handler() {\n    // 下面两种写法相同\n\t\t// this.ctx.body = 'hello world';\n    return 'hello world';\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Callback Method Injection\nDESCRIPTION: Shows how to inject a function that returns a cache service based on a parameter. The `cacheServiceHandler` returns an async function that takes a `mode` parameter and returns either the local or remote cache service. `providerWrapper` registers this function, and it's injected using `@Inject('cacheServiceHandler')` into the controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providerWrapper, IMidwayContainer } from '@midwayjs/core';\n\nexport function cacheServiceHandler(container: IMidwayContainer) {\n  return async (mode: string) => {\n    if (mode === 'local') {\n      return await container.getAsync('localCacheService');\n    } else {\n      return await container.getAsync('remoteCacheService');\n    }\n  };\n}\n\nproviderWrapper ([\n  {\n    id: 'cacheServiceHandler',\n    provider: cacheServiceHandler\n    scope: ScopeEnum.Singleton\n  }\n]);\n\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Inject('cacheServiceHandler')\n  getCacheService;\n\n  @Get('/')\n  async home() {\n    const data = await this.getCacheService('local');\n    // ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Definition (TypeScript)\nDESCRIPTION: This code defines a custom error class, `WeatherEmptyDataError`, which extends `MidwayError`.  This allows for more specific error handling and provides a consistent way to represent errors in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/error/weather.error.ts\nimport { MidwayError } from '@midwayjs/core';\n\nexport class WeatherEmptyDataError extends MidwayError {\n  constructor(err?: Error) {\n    super('weather data is empty', {\n      cause: err,\n    });\n    if (err?.stack) {\n      this.stack = err.stack;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Reverse One-to-One Relationship in PhotoMetadata\nDESCRIPTION: This code snippet modifies the `PhotoMetadata` entity to define a reverse one-to-one relationship with the `Photo` entity using TypeORM. It adds the `photo => photo.metadata` parameter to the `@OneToOne` decorator, indicating that the `metadata` property of the `Photo` entity should be used for the reverse mapping.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from 'typeorm';\nimport { Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { Photo } from './photo.entity';\n\n@Entity()\nexport class PhotoMetadata {\n\n  /* ... other columns */\n\n  @OneToOne(type => Photo, photo => photo.metadata)\n  @JoinColumn()\n  photo: Photo;\n}\n```\n\n----------------------------------------\n\nTITLE: Midway.js HTTP Controller Example\nDESCRIPTION: This TypeScript code defines a Midway.js controller with three routes (`/`, `/get`, and `/post`). It demonstrates how to create HTTP endpoints using decorators like `@Controller`, `@Get`, `@Post`, and `@Inject`. In aggregated deployment mode, these routes will be deployed as a single HTTP function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_aggr.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Provide, Controller, Get, Post } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\n@Controller('/')\nexport class APIService {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async hello() {\n    return 'Hello Midwayjs';\n  }\n\n  @Get('/get')\n  async get() {\n    return this.ctx.query;\n  }\n\n  @Post('/post')\n  async post() {\n    return this.ctx.method;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Policies with CasbinEnforcerService\nDESCRIPTION: This TypeScript code snippet demonstrates how to reload the policy using `CasbinEnforcerService`. This can be useful when the policies have been changed externally and the Casbin enforcer needs to be updated.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.casbinEnforcerService.loadPolicy();\n```\n\n----------------------------------------\n\nTITLE: Configure Upload Middleware Globally (@midwayjs/koa)\nDESCRIPTION: This TypeScript code demonstrates how to configure the UploadMiddleware from @midwayjs/busboy globally for a MidwayJS application using Koa. All routes will have the upload middleware applied.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\nimport { Application } from '@midwayjs/koa';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App('koa')\n  app: Application;\n  \n  async onReady() {\n    this.app.useMiddleware(busboy.UploadMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring defaultViewEngine\nDESCRIPTION: This snippet sets the defaultViewEngine. Setting this configuration avoids having to specify the engine each time `renderString` is used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// config/config.default.js\nexport const view = {\n  defaultViewEngine: 'ejs',\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Instance with onServerReady in TypeScript\nDESCRIPTION: Shows how to access the framework's server instance within the `onServerReady` lifecycle hook. This allows you to retrieve server information like port numbers, etc. Requires importing the desired framework (e.g., `@midwayjs/koa`). Dependencies: @midwayjs/core, @midwayjs/koa.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n  imports: [koa]\n})\nexport class MainConfiguration implements ILifeCycle {\n\n  async onServerReady(container: IMidwayContainer): Promise<void> {\n    // 获取到 koa 中暴露的 Framework\n    const framework = await container.getAsync(koa.Framework);\n    const server = framework.getServer();\n    // ...\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequelize Many-to-Many Association - Typescript\nDESCRIPTION: This code demonstrates a many-to-many association between `Book` and `Author` models using `sequelize-typescript`. The `@BelongsToMany` decorator and a through table `BookAuthor` are used to define the relationship. Books can have many authors and Authors can write many books.  The snippet also shows how to explicitly define the `books` type with BookAuthor information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, Column, ForeignKey, BelongsToMany } from 'sequelize-typescript';\n\n@Table\nexport class Book extends Model {\n  @BelongsToMany(() => Author, () => BookAuthor)\n  }\n}\n\n@Table\nexport class Author extends Model {\n  @BelongsToMany(() => Book, () => BookAuthor)\n  books: Book[];\n}\n\n@Table\nexport class BookAuthor extends Model {\n  @ForeignKey(() => Book)\n  @Column\n  bookId: number;\n\n  @ForeignKey(() => Author)\n  @Column\n  authorId: number;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@BelongsToMany(() => Book, () => BookAuthor)\nbooks: Array<Book & {BookAuthor: BookAuthor}>;\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration and Initialization (TypeScript)\nDESCRIPTION: This snippet demonstrates how to inject a configuration object (e.g., `httpClientConfig`) into the service factory and initialize clients during the initialization phase using the `initClients` method. It relies on the `@Config` and `@Init` decorators from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServiceFactory, Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class HTTPClientServiceFactory extends ServiceFactory<HTTPClient> {\n\n  @Config('httpClient')\n  httpClientConfig;\n\n  @Init()\n  async init() {\n    await this.initClients(this.httpClientConfig);\n  }\n\n  protected createClient(config: any): any {\n    // 创建实例\n    return new HTTPClient(config);\n  }\n\n  getName() {\n    return 'httpClient';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Provider and Service in MidwayJS\nDESCRIPTION: This code configures the Consul provider and service settings within a MidwayJS application. It specifies options like service registration, deregistration, Consul server host and port, service address, port, tags, and name. The `provider` section handles Consul server connection details and deregistration settings, while the `service` section defines the current Midway application's service details, which will be registered to Consul.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/consul.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconfig.consul = {\n  provider: {\n    // 注册本服务\n    register: true,\n    // 应用正常下线反注册\n    deregister: true,\n    // consul server 主机\n    host: '192.168.0.10', // 此处修改 consul server 的地址\n    // consul server 端口\n    port: 8500, // 端口也需要进行修改\n    // 调用服务的策略(默认选取 random 具有随机性)\n    strategy: 'random',\n  },\n  service: {\n    address: '127.0.0.1', // 此处是当前这个 midway 应用的地址\n    port: 7001, // midway应用的端口\n    tags: ['tag1', 'tag2'], // 做泳道隔离等使用\n    name: 'my-midway-project',\n    // others consul service definition\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Controller with Dependency Injection\nDESCRIPTION: This code snippet demonstrates how to inject a service into a controller in MidwayJS. The `@Inject()` decorator injects an instance of the `UserService` into the `userService` property. The `@Controller` decorator defines the base route for the controller, and the `@Get` decorator maps the `getUser` method to the root path. The method calls the injected service to retrieve user data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide, Query } from '@midwayjs/core';\nimport { UserService } from '../service/user';\n\n@Controller('/api/user')\nexport class APIController {\n\n  @Inject()\n  userService: UserService;\n\n  @Get('/')\n  async getUser(@Query('id') uid) {\n    const user = await this.userService.getUser(uid);\n    return {success: true, message: 'OK', data: user};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing query parameters\nDESCRIPTION: This snippet shows how to pass query parameters to a Midway Hooks API. It uses `Query<{ page: string; limit: string; }>()` to define the expected query parameters. The handler function retrieves the values of `page` and `limit` from the context's `query` property and returns them in an object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Query,\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get(),\n  Query< {\n    page: string;\n    limit: string;\n  }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      page: ctx.query.page,\n      limit: ctx.query.limit\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Scope with Scope Decorator Typescript\nDESCRIPTION: This code demonstrates how to use the `@scope` decorator to define the scope of a class. It shows how to define `PetrolEngine` as a Prototype scope and `DieselEngine` as a Singleton scope, resulting in different instance behaviors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@scope(ScopeEnum.Prototype)\n@provide('petrol')\nexport class PetrolEngine implements Engine {\n  capacity = 10;\n}\n\n@scope(ScopeEnum.Singleton)\n@provide('diesel')\nexport class DieselEngine implements Engine {\n  capacity = 20;\n}\n\n// in IoC Container\nassert(container.getAsync('petrol') === container.getAsync('petrol')); // false\nassert(container.getAsync('diesel') === container.getAsync('diesel')); // true\n```\n\n----------------------------------------\n\nTITLE: Reusing Validation Rules\nDESCRIPTION: This snippet shows how to define and reuse validation rules, like required string rules, using `@midwayjs/validate`. It defines a `requiredString` constant to avoid repeating `RuleType.string().required()`.  It also demonstrates how to create a function `maxString` to generate rules with dynamic max lengths, enhancing code reusability and maintainability.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// 自己在一个文件中定义一下你们部门的规范或常用的\nconst requiredString = RuleType.string().required();\n\nexport class UserDTO {\n  @Rule(requiredString) // 这样就不用写上面这么长的了\n  name: string;\n\n  @Rule(requiredString) // 同上\n  nickName: string;\n\n  @Rule(requiredString) // 同上\n  description: string;\n}\n\n// 自己在一个文件中定义一下你们部门的规范或常用的\nconst maxString = (length) => RuleType.string().max(length);\n\nexport class UserDTO {\n  @Rule(requiredString) // 同上\n  name: string;\n\n  @Rule(requiredString) // 同上\n  nickName: string;\n\n  @Rule(requiredString) // 同上\n  description: string;\n\n  @Rule(maxString(50)) // 这样通过换个参数即可\n  info: string;\n\n  @Rule(maxString(50).required()) // 这样也行\n  info2: string;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mongoose Connection (Single Database)\nDESCRIPTION: This TypeScript code shows how to configure a Mongoose connection for a single MongoDB database in the `src/config/config.default.ts` file. It defines the data source configuration, including the connection URI and options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  mongoose: {\n    dataSource: {\n      default: {\n        uri: 'mongodb://localhost:27017/test',\n        options: {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n          user: '***********',\n          pass: '**********'\n        }\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API endpoint using @midwayjs/mock and getApiTrigger\nDESCRIPTION: This code demonstrates how to test a Midway Hooks API endpoint using `@midwayjs/mock`. It creates a test case that starts the application, retrieves the API trigger information using `getApiTrigger`, and then uses `createHttpRequest` to send a GET request to the endpoint. The response is asserted to ensure it returns the expected status code and body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hello.test.ts\nimport {\n  close,\n  createApp,\n  createHttpRequest\n} from '@midwayjs/mock';\nimport {\n  Framework,\n  IMidwayKoaApplication\n} from '@midwayjs/koa';\nimport { getApiTrigger, HttpTriger } from '@midwayjs/hooks';\nimport hello from './hello';\n\ndescribe('test koa with api router', () => {\n  let app: IMidwayKoaApplication;\n\n  beforeAll(async () => {\n    app = await createApp();\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  test('Hello World', async () => {\n    const trigger = getApiTrigger<HttpTriger>(hello);\n    const response = await createHttpRequest(app)\n      .get(trigger.path)\n      .expect(200);\n    expect(response.text).toBe('Hello World!');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Http Server in Koa with MidwayJS\nDESCRIPTION: This TypeScript code shows how to access the underlying HTTP server instance in a MidwayJS application using Koa. It injects the `koa.Framework` and retrieves the server instance using `this.framework.getServer()`. This allows for advanced server-level configurations or operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n\t// ...\n})\nexport class MainConfiguration {\n  @Inject()\n  framework: koa.Framework;\n\n  async onServerReady(container) {\n    const server = this.framework.getServer();\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling a Component in src/configuration.ts (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable a component within the `src/configuration.ts` file of a MidwayJS application. It imports the component (`@midwayjs/orm`) and adds it to the `imports` array within the `@Configuration` decorator.  This allows MidwayJS to load and utilize the component's functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/midway_component.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 应用或者函数的 src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport * as orm from '@midwayjs/orm';\n\n@Configuration({\n  imports: [orm],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Using Function Middleware\nDESCRIPTION: This snippet demonstrates how to use function middleware within a Midway.js application. It shows how to define a function middleware and register it alongside class-based middleware using `useMiddleware`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/another.middleware.ts\nexport async function fnMiddleware(ctx, next) {\n  // ...\n  await next();\n  // ...\n}\n\n\n// src/configuration.ts\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { ReportMiddleware } from './middleware/user.middleware';\nimport { fnMiddleware } from './middleware/another.middleware';\n\n@Configuration({\n  imports: [koa]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // add middleware\n    this.app.useMiddleware([ReportMiddleware, fnMiddleware]);\n  }\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Middleware Sequence - TypeScript\nDESCRIPTION: Illustrates how to modify the order of middleware using the `insertFirst`, `insertLast`, `insertAfter`, and `insertBefore` methods provided by the `getMiddleware()` API.  These methods allow inserting middleware at the beginning, end, or relative to other named middleware in the list.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { ReportMiddleware } from './middleware/user.middleware';\n\n@Configuration({\n  imports: [koa]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // Add middleware to the front\n    this.app.getMiddleware().insertFirst(ReportMiddleware);\n    // Adding middleware to the back is equivalent to useMiddleware\n    this.app.getMiddleware().insertLast(ReportMiddleware);\n\n    // After adding middleware to middleware named session\n    this.app.getMiddleware().insertAfter(ReportMiddleware, 'session');\n    // Before adding middleware to middleware named session\n    this.app.getMiddleware().insertBefore(ReportMiddleware, 'session');\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: All-in-one Call Example for Basic Validation\nDESCRIPTION: This code demonstrates an all-in-one call to the API defined in the previous snippet. It attempts to call the `/hello` endpoint with invalid parameters (`null`, `null`) and catches the resulting validation error. It then logs the parsed error message and the HTTP status code (422).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport hello from './api';\n\ntry {\n  await hello(null, null);\n} catch (error) {\n  console.log(\n    JSON.parse(error.data.message)\n  );\n  console.log(error.status); // 422\n}\n```\n\n----------------------------------------\n\nTITLE: Render EJS Template in Controller\nDESCRIPTION: Demonstrates how to render an EJS template from a MidwayJS controller. It injects the `Context` object, defines a route, and uses the `ctx.render` method to render the 'hello.ejs' template with data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Provide } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render() {\n    await this.ctx.render('hello.ejs', {\n      data: 'world',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Service to fetch weather data\nDESCRIPTION: This TypeScript code demonstrates a MidwayJS service that fetches weather data from a remote API using `makeHttpRequest`.  It returns a Promise that resolves with the weather data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/weather.service.ts\nimport { Provide, makeHttpRequest } from '@midwayjs/core';\n\n@Provide()\nexport class WeatherService {\n  async getWeather(cityId: string) {\n    return makeHttpRequest(`https://midwayjs.org/resource/${cityId}.json`, {\n      dataType: 'json',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration\nDESCRIPTION: This snippet shows an Nginx configuration for reverse proxying Socket.IO traffic. It includes settings for forwarding headers and upgrading the connection for WebSocket support. It assumes the Node.js service is running on localhost:7001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_23\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n  server {\n    listen 80;\n    server_name example.com;\n\n    location / {\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header Host $host;\n\n      proxy_pass http://localhost:7001;\n\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request-Scoped Dependency Injection Container in Middleware (TypeScript)\nDESCRIPTION: This snippet demonstrates how to access the request-scoped dependency injection container within a middleware. The container is available on the request context (`ctx` in Koa, `req` in Express) and is used to retrieve request-specific instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n@Middleware()\nexport class ReportMiddleware {\n\n  resolve() {\n  \treturn (req, res, next) => {\n      // req. Dependency Injection Container for requestContext Request Link\n      next();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying JSON Log Output Format\nDESCRIPTION: This code snippet demonstrates modifying the format of JSON log output by adding a custom field.  The format function receives a LoggerInfo object and adds a 'data' field with a custom value.  This modifies the JSON structure of the log messages written by the logger. The custom formatting applies to logs output via the JSON transport. This configuration is part of the midwayLogger configuration in a MidwayConfig object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        json: {\n          format: (info: LoggerInfo & {data: string}) => {\n            info.data = 'custom data';\n            return info;\n          }\n        }\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining a Memory Store Class\nDESCRIPTION: This code defines a simple `MemoryStore` class that extends the `Map` object. It's decorated with `@Provide` to register it as a provider in the IoC container and `@Scope` to set its scope to Singleton. It includes `save` and `get` methods for storing and retrieving data from the cache.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 简单的缓存类\nimport { Configuration, Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MemoryStore extends Map {\n  save(key, value) {\n    this.set(key, value);\n  }\n\n  get(key) {\n    return this.get(key);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware in Configuration\nDESCRIPTION: This snippet demonstrates how to register a global middleware (ReportMiddleware) in the application's configuration file (src/configuration.ts). The useMiddleware method of the application object is used to add the middleware to the application's middleware stack.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { ReportMiddleware } from './middleware/user.middleware';\n\n@Configuration({\n  imports: [koa]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    this.app.useMiddleware(ReportMiddleware);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cache with no Expiry\nDESCRIPTION: This example demonstrates how to set a cache entry that does not expire by setting TTL to null. The cache entry persists indefinitely unless explicitly removed or the cache is cleared.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.cache.set(key, value, { ttl: null });\n```\n\n----------------------------------------\n\nTITLE: Defining Swagger Options Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the `SwaggerOptions` interface, which represents the configuration options for the Swagger UI. It includes properties for title, description, version, contact, license, terms of service, external docs, servers, tags, authentication, swagger path, tag sorting, display options, and document options. These options align with the OpenAPI specification and allow customization of the Swagger UI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * see https://swagger.io/specification/\n */\nexport interface SwaggerOptions {\n  /**\n   * 默认值: My Project\n   * https://swagger.io/specification/#info-object title 字段\n   */\n  title?: string;\n  /**\n   * 默认值: This is a swagger-ui for midwayjs project\n   * https://swagger.io/specification/#info-object description 字段\n   */\n  description?: string;\n  /**\n   * 默认值: 1.0.0\n   * https://swagger.io/specification/#info-object version 字段\n   */\n  version?: string;\n  /**\n   * https://swagger.io/specification/#info-object contact 字段\n   */\n  contact?: ContactObject;\n  /**\n   * https://swagger.io/specification/#info-object license 字段\n   */\n  license?: LicenseObject;\n  /**\n   * https://swagger.io/specification/#info-object termsOfService 字段\n   */\n  termsOfService?: string;\n  /**\n   * https://swagger.io/specification/#openapi-object externalDocs 字段\n   */\n  externalDocs?: ExternalDocumentationObject;\n  /**\n   * https://swagger.io/specification/#openapi-object servers 字段\n   */\n  servers?: Array<ServerObject>;\n  /**\n   * https://swagger.io/specification/#openapi-object tags 字段\n   */\n  tags?: Array<TagObject>;\n  /**\n   * 可以参考 https://swagger.io/specification/#security-scheme-object\n   */\n  auth?: AuthOptions | AuthOptions[];\n  /**\n   * 默认值: /swagger-ui\n   * 访问 swagger ui 的路径\n   */\n  swaggerPath?: string;\n  /**\n   * 对路由 tag 进行 ascii 排序\n   * 可以使用 1-xxx、2-xxx、3-xxx 来定义 tag\n   */\n  tagSortable?: boolean;\n  /**\n   * UI 展示中需要用到的配置\n   * 可以参考 https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md#display\n   */\n  displayOptions?: {\n    deepLinking?: boolean;\n    displayOperationId?: boolean;\n    defaultModelsExpandDepth?: number;\n    defaultModelExpandDepth?: number;\n    defaultModelRendering?: 'example' | 'model';\n    displayRequestDuration?: boolean;\n    docExpansion?: 'list' | 'full' | 'none';\n    filter?: boolean | string;\n    maxDisplayedTags?: number;\n    showExtensions?: boolean;\n    showCommonExtensions?: boolean;\n    useUnsafeMarkdown?: boolean;\n    tryItOutEnabled?: boolean;\n  };\n  \n  documentOptions?: {\n    /**\n     * 自定义 operationIdFactory，用于生成 operationId\n     * @default () => controllerKey_webRouter.methodKey\n     */\n    operationIdFactory?: (\n      controllerKey: string,\n      webRouter: RouterOption\n    ) => string;\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating DTOs using ValidateService\nDESCRIPTION: This snippet demonstrates how to use the `ValidateService` to validate a DTO programmatically. The `validate` method of the `ValidateService` is called with the DTO class and the data to be validated. The result contains either an `error` property with validation errors or a `value` property with the validated DTO object. Requires injection of the ValidateService.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ValidateService } from '@midwayjs/validate';\n\nexport class UserService {\n  @Inject()\n  validateService: ValidateService;\n\n  async inovke() {\n    // ...\n    const result = this.validateService.validate(UserDTO, {\n      name: 'harry',\n      nickName: 'harry',\n    });\n\n    // 失败返回 result.error\n    // 成功返回 result.value\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple GET Routes for a Single Method\nDESCRIPTION: This snippet shows how to bind multiple routes to the same method in MidwayJS using multiple `@Get` decorators. Both `/` and `/main` routes will execute the `home` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/')\n@Get('/main')\nasync home() {\n  return 'Hello Midwayjs!';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Interface for Request Parameters in MidwayJS\nDESCRIPTION: This TypeScript snippet shows how to use an interface for query parameters in MidwayJS, which prevents automatic conversion to a class instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  name: string;\n}\n\n@Get('/')\nasync getUser(@Query() query: User): Promise<User> {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling URL parameters with @Query (TypeScript)\nDESCRIPTION: This code demonstrates how to extract URL query parameters using the `@Query` decorator.  The `cityId` parameter is extracted from the URL and returned as a string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Query } from '@midwayjs/core';\n\n@Controller('/')\nexport class WeatherController {\n  @Get('/weather')\n  async getWeatherInfo(@Query('cityId') cityId: string): Promise<string> {\n    return cityId;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Timeout - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the health check timeout using the `core.healthCheckTimeout` property in the `config.default` file.  This overrides the default timeout for health checks. Dependencies: None\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default\nexport default {\n  core: {\n    healthCheckTimeout: 2000,\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Error Filter in Typescript\nDESCRIPTION: This code shows how to implement a default error filter `DefaultErrorFilter` using the `@Catch()` decorator without any parameters.  It captures all unhandled errors. The filter sets the status and message in response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/default.filter.ts\n\nimport { Catch } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch()\nexport class DefaultErrorFilter {\n  async catch(err: Error, ctx: Context) {\n\n    // ...\n    return {\n      status: err.status ?? 500,\n      message: err.message;\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Controller with Route Prefix\nDESCRIPTION: Creates a controller with a route prefix of '/api/user'.  All routes defined within this controller will be prefixed with '/api/user'. Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n\nimport { Controller } from \"@midwayjs/core\";\n\n@Controller('/api/user')\nexport class UserController {\n  // xxxx\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data (Koa)\nDESCRIPTION: This snippet shows how to delete the entire session by assigning `null` to `ctx.session`. This effectively clears all session data for the current user. Dependencies: `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nctx.session = null;\n```\n\n----------------------------------------\n\nTITLE: Run the MidwayJS development server\nDESCRIPTION: These commands start the MidwayJS application in development mode and then open the application in a web browser.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n$ open http://localhost:7001\n```\n\n----------------------------------------\n\nTITLE: Disabling ts-node type checking\nDESCRIPTION: This command disables type checking and enables transpilation-only mode for ts-node, which significantly speeds up startup times, especially when dealing with a large number of TypeScript files. The tradeoff is that type checking is not performed at startup, relying on the editor for feedback.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/midway_slow_problem.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTS_NODE_TYPE_CHECK=false TS_NODE_TRANSPILE_ONLY=true\n```\n\n----------------------------------------\n\nTITLE: Matching Routes using String, RegExp, Array (TypeScript)\nDESCRIPTION: Shows how the `match` property can be assigned a string, regular expression, or an array of strings, regular expressions, or functions to specify routes the middleware should apply to. This provides flexibility in defining route matching criteria.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n   // string\n   match = '/api/index';\n\n   // regular\n   match = /^\\/api/;\n\n   // array\n   match = ['/api/index', '/api/user', /^\\/openapi/, ctx => {\n     if (ctx.path === '/api/index') {\n       return true;\n     }\n   }];\n}\n```\n\n----------------------------------------\n\nTITLE: Use Cache with InjectClient Decorator\nDESCRIPTION: Demonstrates how to inject a cache instance using the `@InjectClient` decorator from `@midwayjs/core`.  It retrieves and saves data in the cache using the `get` and `set` methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayCache } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n\n  @InjectClient(CachingFactory, 'default')\n  cache: MidwayCache;\n\n  async invoke(name: string, value: string) {\n    // 设置缓存\n    await this.cache.set(name, value);\n    // 获取缓存\n    const data = await this.cache.get(name);\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Session Module in Configuration\nDESCRIPTION: This code shows how to import the `session` module in the application's configuration file (`src/configuration.ts`). This integrates the session middleware into the MidwayJS application, making `ctx.session` available in controllers and services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as faas from '@midwayjs/faas';\nimport * as session from '@midwayjs/session';\n\n@Configuration({\n   imports: [\n     faas,\n     session,\n     // ...\n   ]\n})\nexport class MainConfiguration {\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Class Decorator (@Model) in TypeScript\nDESCRIPTION: This code snippet defines a class decorator `@Model` that saves module information, class metadata, sets the scope to request, and applies the `@Provide` decorator.  It uses `saveModule`, `saveClassMetadata`, `Scope`, `ScopeEnum`, and `Provide` from `@midwayjs/core`. The `MODEL_KEY` constant serves as a unique identifier for the decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scope, ScopeEnum, saveClassMetadata, saveModule, Provide } from '@midwayjs/core';\n\n// Provide a unique key\nconst MODEL_KEY = 'decorator:model';\n\nexport function Model(): ClassDecorator {\n  return (target: any) => {\n    // Bind the decorated class to the decorator to obtain the class later.\n    saveModule(MODEL_KEY, target);\n    // Save some metadata information, whatever you want to save.\n    saveClassMetadata (\n      MODEL_KEY,\n      {\n        test: 'abc',\n      },\n      target\n    );\n    // Specify the scope of the IoC container to create the instance, which is registered here as the request scope, so that ctx can be retrieved.\n    Scope(ScopeEnum.Request)(target);\n\n    // Call the Provide decorator so that the user's class can omit the @Provide() decorator.\n    Provide()(target);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Github Strategy with Passport in Typescript\nDESCRIPTION: This code defines a Github strategy using `@midwayjs/passport`. It extends `PassportStrategy` and implements the `validate` and `getStrategyOptions` methods.  It requires the `passport-github` package and defines the Github client ID, secret, and callback URL.  The `validate` method currently just returns the payload. The `getStrategyOptions` configures the Github OAuth settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// github-strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, StrategyOptions } from 'passport-github';\n\nconst GITHUB_CLIENT_ID = 'xxxxxx', GITHUB_CLIENT_SECRET = 'xxxxxxxx';\n\n@CustomStrategy()\nexport class GithubStrategy extends PassportStrategy(Strategy, 'github') {\n  async validate(...payload) {\n    return payload;\n  }\n  getStrategyOptions() {\n    return {\n      clientID: GITHUB_CLIENT_ID,\n      clientSecret: GITHUB_CLIENT_SECRET,\n      callbackURL: 'https://127.0.0.1:7001/auth/github/cb'\n    };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the LoggingTime Method Decorator (TypeScript)\nDESCRIPTION: Applies the `LoggingTime` decorator to the `getUser` method in the `UserService` class. This will automatically log the execution time of the `getUser` method. The method must be async.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport class UserService {\n  @LoggingTime()\n  async getUser() {\n    // ...\n  }\n}\n\n// When executing\n// output => Method \"getUser\" invoke during 4ms\n```\n\n----------------------------------------\n\nTITLE: Developing Web App using Decorators in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a simple web application using decorators in Midway.js. It defines a controller with a route that returns a welcome message.  It requires the `@midwayjs/decorator` package. The `@Provide()` decorator marks the class as injectable, and the `@Controller('/')` decorator maps the class to the root route. The `@Get('/')` decorator maps the `home` method to the root GET request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Provide } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    return `Welcome to midwayjs!`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Type Whitelist in Midway.js\nDESCRIPTION: This snippet demonstrates how to configure the `mimeTypeWhiteList` option in the `@midwayjs/upload` component to restrict allowed file types based on MIME types. It uses an object where keys are file extensions and values are MIME type strings or arrays of MIME type strings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/upload';\nexport default {\n   //...\n   upload: {\n     //...\n     // extension whitelist\n     whitelist: uploadWhiteList,\n     // Only the following file types are allowed to be uploaded\n     mimeTypeWhiteList: {\n       '.jpg': 'image/jpeg',\n       // Multiple MIME types can also be set, for example, the following files that allow the .jpeg suffix are jpg or png\n       '.jpeg': ['image/jpeg', 'image/png'],\n       // other types\n       '.gif': 'image/gif',\n       '.bmp': 'image/bmp',\n       '.wbmp': 'image/vnd.wap.wbmp',\n       '.webp': 'image/webp',\n     }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger UI Initialization with a JavaScript File\nDESCRIPTION: This TypeScript code illustrates how to customize the Swagger UI initialization by providing a custom JavaScript file using the `customInitializer` option. This allows overriding the default `swagger-initializer.js` to configure the UI further.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { AppInfo } from '@midwayjs/core';\nimport { renderSwaggerUIDist } from '@midwayjs/swagger';\nimport { join } from 'path';\n\nexport default (appInfo: AppInfo) {\n  return {\n    // ...\n    swagger: {\n      swaggerUIRender: renderSwaggerUIDist,\n      swaggerUIRenderOptions: {\n        customInitializer: join(appInfo.appDir, 'resource/swagger-initializer.js'),\n      }\n    },\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Framework Implementation - TypeScript\nDESCRIPTION: This code snippet demonstrates the implementation of a custom HTTP framework in TypeScript using MidwayJS. It defines interfaces for Context, Application, and custom configuration options. It also includes the MidwayCustomHTTPFramework class that extends the BaseFramework, implementing the configure, applicationInitialize, and run methods. The applicationInitialize method creates an HTTP server and handles requests, while the run method starts the server on a specified port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseFramework, IConfigurationOptions, IMidwayApplication, IMidwayContext } from '@midwayjs/core';\nimport * as http from 'http';\n\n// Define the definitions to be used by some upper-level businesses.\nexport interface Context extends IMidwayContext {}\n\nexport interface Application extends IMidwayApplication<Context> {}\n\nexport interface IMidwayCustomConfigurationOptions extends IConfigurationOptions {\n  port: number;\n}\n\n// Implement a custom framework that inherits the base framework\nexport class MidwayCustomHTTPFramework extends BaseFramework<Application, Context, IMidwayCustomConfigurationOptions> {\n\n  configure(): IMidwayCustomConfigurationOptions {\n    return this.configService.getConfiguration('customKey');\n  }\n\n  async applicationInitialize(options: Partial<IMidwayBootstrapOptions>) {\n    // Create an app instance\n    this.app = http.createServer((req, res) => {\n      // Create a request context with logger, request scope, etc.\n      const ctx = this.app.createAnonymousContext();\n      // Get the injected service from the request context\n      ctx.requestContext\n        .getAsync('xxxx')\n        .then((ins) => {\n          // Call service\n          return ins.xxx();\n        })\n        .then(() => {\n          // End of request\n          res.end();\n        });\n    });\n\n    // Some methods needed to bind midway framework to app, such as getConfig, getLogger, etc.\n    this.defineApplicationProperties();\n  }\n\n  async run() {\n    // Startup parameters, only the HTTP port that is started is defined here.\n    if (this.configurationOptions.port) {\n      new Promise<void>((resolve) => {\n        this.app.listen(this.configurationOptions.port, () => {\n          resolve();\n        });\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Passport Middleware in TypeScript\nDESCRIPTION: Create middleware that extends `PassportMiddleware` using the `JwtStrategy`. The `getAuthenticateOptions` method allows setting authentication options, but in this example, it returns an empty object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// jwt-middleware.ts\n\nimport { Provide } from '@midwayjs/core';\nimport { PassportMiddleware } from '@midwayjs/passport';\nimport { JwtStrategy } from './strategy/jwt-strategy';\n\n@Provide()\nexport class JwtPassportMiddleware extends PassportMiddleware(JwtStrategy) {\n  getAuthenticateOptions(): Promise<passport.AuthenticateOptions> | passport.AuthenticateOptions {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MIME Type Check Configuration\nDESCRIPTION: This example shows how to configure the `mimeTypeWhiteList` option to specify allowed MIME types for different file extensions. This enhances security by preventing malicious users from bypassing extension-based whitelists by spoofing file extensions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList, DefaultUploadFileMimeType } from '@midwayjs/upload';\nexport default {\n  // ...\n  upload: {\n    // ...\n    // 扩展名白名单\n    whitelist: uploadWhiteList,\n    // 仅允许下面这些文件类型可以上传\n    mimeTypeWhiteList: DefaultUploadFileMimeType,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context with useContext in TypeScript\nDESCRIPTION: This snippet demonstrates how to use `useContext` to access the current request context within a Midway application. The context type can be specified using generics.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_builtin.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ctx = useContext();\n```\n\n----------------------------------------\n\nTITLE: Using Default ETCD Client - UserService\nDESCRIPTION: This TypeScript code demonstrates how to use the default ETCD client within a MidwayJS service.  It shows examples of putting, getting, and deleting data from ETCD, as well as retrieving keys with a specific prefix.  The `ETCDService` is injected into the service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/etcd.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { ETCDService } from '@midwayjs/etcd';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  etcdService: ETCDService;\n\n  async invoke() {\n\n    await this.etcdService.put('foo').value('bar');\n\n    const fooValue = await this.etcdService.get('foo').string();\n    console.log('foo was:', fooValue);\n\n    const allFValues = await this.etcdService.getAll().prefix('f').keys();\n    console.log('all our keys starting with \"f\":', allFValues);\n\n    await this.etcdService.delete().all();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Middleware and Filters\nDESCRIPTION: This TypeScript code shows how to configure middleware and error filters for the BullMQ application. It uses the `useMiddleware` and `useFilter` methods on the `bullmqApp` instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  imports: [\n    bullmq\n  ]\n})\nexport class MainConfiguration {\n\n  @App('bullmq')\n  bullmqApp: bullmq.Application;\n\n  async onReady() {\n    this.bullmqApp.useMiddleware(/*中间件*/);\n    this.bullmqApp.useFilter(/*过滤器*/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Related Entities with Cascade - TypeScript\nDESCRIPTION: This snippet demonstrates how to save associated entities using the cascade option in TypeORM with MidwayJS. The `updatePhoto` function creates a `Photo` object and a `PhotoMetadata` object, links them, and saves the `Photo`. Due to the cascade option, the `PhotoMetadata` object is automatically saved as well.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { PhotoMetadata } from './entity/photoMetadata.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n\n   // create photo object\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.isPublished = true;\n\n    // create photo metadata object\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = \"cybershoot\";\n    metadata.orientation = \"portrait\";\n\n    photo.metadata = metadata;  // this way we connect them\n\n    // save a photo also save the metadata\n    await this.photoModel.save(photo);\n\n    // done\n    console.log(\"Photo is saved, photo metadata is saved too\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware with Custom Options - TypeScript\nDESCRIPTION: Illustrates implementing a middleware class that accepts custom options.  The `resolve` method receives these options, allowing the middleware to execute different logic based on the provided configuration.  The `IMiddleware` interface is used for type safety, and the middleware interacts with the Koa context and next function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n  initData = 'text1';\n\n  resolve(_, options?: {\n    text: string;\n  }) {\n    return async (ctx: Context, next: NextFunction) => {\n    \tthis.ctx.setAttr('data', options?.text || this.initData);\n    \treturn await next();\n    };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Redis Watcher\nDESCRIPTION: This code snippet configures the Redis watcher for Casbin in a MidwayJS application. It defines two Redis client connections (one for publishing and one for subscribing to policy updates) and then uses the `createWatcher` function from `@midwayjs/casbin-redis-adapter` to establish the watcher.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\nimport { createAdapter, createWatcher } from '@midwayjs/casbin-redis-adapter';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    redis: {\n      clients: {\n        'node-casbin-official': {\\n          host: '127.0.0.1',\n          port: 6379,\n          db: '0',\n        },\n        'node-casbin-sub': {\n          host: '127.0.0.1',\n          port: 6379,\n          db: '0',\n        }\n      }\n    },\n    casbin: {\n      // ...\n      policyAdapter: createAdapter({\n        clientName: 'node-casbin-official'\n      }),\n      policyWatcher: createWatcher({\n        pubClientName: 'node-casbin-official',\n        subClientName: 'node-casbin-sub',\n      })\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Backend API Validation with Midway Hooks\nDESCRIPTION: This code snippet demonstrates how to use the `Validate` decorator from `@midwayjs/hooks` to perform type validation on backend API parameters. It uses the `zod` library to define a schema and validates that the `name` parameter is a string and the `age` parameter is a number.  Requires dependencies on `@midwayjs/hooks` and `zod`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/intro.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  APIs,\n  Post,\n  Validate,\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\n\nexport default Api(\n  Post('/hello'),\n  Validate(z.string(), z.number()),\n  async (name: string, age: number) => {\n    return `Hello ${name}, you are ${age} years old.`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Report Middleware Class Definition (TypeScript)\nDESCRIPTION: Defines a middleware class `ReportMiddleware` in TypeScript using the `@Middleware` decorator from `@midwayjs/core`. This middleware measures the execution time of the controller. It implements the `IMiddleware` interface and its `resolve` method contains the core logic, utilizing `await next()` to execute the subsequent middleware and controller, allowing actions before and after execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // Logic executed before the controller\n      const startTime = Date.now();\n      // Execute the next Web middleware and finally execute to the controller.\n      // Here you can get the return value of the next middleware or controller.\n      const result = await next();\n      // Logic executed after the controller\n      console.log(Date.now() - startTime);\n      // Returns the result to the previous middleware\n      return result;\n    };\n  }\n\n  static getName(): string {\n    return 'report';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Albums and Photos with Relations\nDESCRIPTION: This code demonstrates how to insert albums and photos into the database and associate them using the defined many-to-many relationship. It uses the `InjectEntityModel` decorator to inject the repositories for `Photo` and `Album` entities. It creates instances of `Album` and `Photo`, sets their properties, and then saves them using the respective repositories. Finally, it loads a photo with its associated albums using `findOne` with the `relations` option.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Func } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from './entity/photo';\nimport { PhotoMetadata } from './entity/photoMetadata';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  @InjectEntityModel(Album)\n  albumModel: Repository<Album>;\n\n  async updatePhoto() {\n    // create a few albums\n    let album1 = new Album();\n    album1.name = 'Bears';\n    await this.albumModel.save(album1);\n\n    let album2 = new Album();\n    album2.name = 'Me';\n    await this.albumModel.save(album2);\n\n    // create a few photos\n    let photo = new Photo();\n    photo.name = 'Me and Bears';\n    photo.description = 'I am near polar bears';\n    photo.filename = 'photo-with-bears.jpg';\n    photo.albums = [album1, album2];\n    await this.photoModel.save(photo);\n\n    // now our photo is saved and albums are attached to it\n    // now lets load them:\n    const loadedPhoto = await this.photoModel.findOne(1, { relations: ['albums'] });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple API Endpoint in Midway Hooks (GET)\nDESCRIPTION: This code snippet defines a simple GET endpoint in Midway Hooks using the `Api` and `Get` decorators. The endpoint returns a 'Hello World!' string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Api, Get } from '@midwayjs/hooks';\n\nexport default Api(Get('/hello'), async () => {\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Combine Body and Query Parameters in MidwayJS\nDESCRIPTION: This code snippet showcases how to combine the `@Body` and `@Query` decorators to retrieve parameters from both the request body and the query string in a MidwayJS controller.  The `user` object will contain the parsed JSON body, and the `pageIdx` variable will hold the value of the `pageIdx` query parameter. Dependencies: `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('/')\nasync updateUser(@Body() user: User, @Query('pageIdx') pageIdx: number): Promise<User> {\n  // user gets it from body\n  // pageIdx obtained from query\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using MidwayLoggerService\nDESCRIPTION: This code snippet demonstrates how to use the MidwayLoggerService to obtain loggers. It injects the MidwayLoggerService and uses its getLogger and createContextLogger methods to retrieve custom loggers and context loggers. Requires `@midwayjs/core`, and `@midwayjs/koa` or another framework with a Context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayLoggerService } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\nexport class MainConfiguration {\n  \n  @Inject()\n  loggerService: MidwayLoggerService;\n  \n  @Inject()\n  ctx: Context;\n  \n  async getUser() {\n    // get custom logger\n    const customLogger = this.loggerService.getLogger('customLogger');\n    \n    // 创建 context logger\n    const customContextLogger = this.loggerService.createContextLogger(this.ctx, customLogger);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Guard to a Method in TypeScript\nDESCRIPTION: This snippet shows how to apply a guard to a specific method within a controller. The `@UseGuard` decorator is used on the `home` method, along with `@Get` to define the route and `@ReportMiddleware` for middleware. This ensures only requests that pass the `AuthGuard` will execute the `home` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\nimport { ReportMiddleware } from '../middleware/report.middlweare';\nimport { AuthGuard } from '../guard/auth.guard';\n\n@Controller('/')\nexport class HomeController {\n\n  @UseGuard(AuthGuard)\n  @Get('/', { middleware: [ ReportMiddleware ]})\n  async home() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Disconnections with @OnWSDisConnection\nDESCRIPTION: Defines a method to be executed when a client disconnects from the WebSocket service using the @OnWSDisConnection decorator. This allows for performing cleanup tasks or logging events related to client disconnections.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, OnWSConnection, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/ws';\n\n@WSController()\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('message')\n  @WSBroadCast()\n  async gotMyMessage(data) {\n    return { name: 'harry', result: parseInt(data) +5 };\n  }\n\n  @OnWSDisConnection()\n  async disconnect(id: number) {\n    console.log('disconnect '+ id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default configuration for @midwayjs/upload\nDESCRIPTION: This TypeScript code shows the default configuration options for the @midwayjs/upload component.  It includes settings for upload mode, file size limits, file extension whitelist, temporary directory, cleanup timeout, base64 encoding, and route matching.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/upload';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  upload: {\n    // mode: UploadMode, 默认为file，即上传到服务器临时目录，可以配置为 stream\n    mode: 'file',\n    // fileSize: string, 最大上传文件大小，默认为 10mb\n    fileSize: '10mb',\n    // whitelist: string[]，文件扩展名白名单\n    whitelist: uploadWhiteList.filter(ext => ext !== '.pdf'),\n    // tmpdir: string，上传的文件临时存储路径\n    tmpdir: join(tmpdir(), 'midway-upload-files'),\n    // cleanTimeout: number，上传的文件在临时目录中多久之后自动删除，默认为 5 分钟\n    cleanTimeout: 5 * 60 * 1000,\n    // base64: boolean，设置原始body是否是base64格式，默认为false，一般用于腾讯云的兼容\n    base64: false,\n    // 仅在匹配路径到 /api/upload 的时候去解析 body 中的文件信息\n    match: /\\/api\\/upload/,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration - Credentials Enabled (TypeScript)\nDESCRIPTION: Enables credentials for CORS requests. When credentials are used, the `origin` cannot be set to `*` and must be a specific origin or a function that returns an origin.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cross_domain.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  cors: {\n    credentials: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DataSourceManager with Config\nDESCRIPTION: This snippet demonstrates how to initialize the `DataSourceManager` using the `@Init` decorator and configure it with the `@Config` decorator. It also uses the `@Inject` decorator to access the base directory for entity scanning.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum, Init, Config, DataSourceManager } from '@midwayjs/core';\nimport * as mysql from 'mysql2';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MySqlDataSourceManager extends DataSourceManager<mysql.Connection> {\n\n  @Config('mysql')\n  mysqlConfig;\n\n  @Inject()\n  baseDir: string;\n\n  @Init()\n  async init() {\n    // 需要注意的是，这里第二个参数需要传入一个实体类扫描地址\n    await this.initDataSource(this.mysqlConfig, this.baseDir);\n  }\n\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Request Parameter Decorator in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to create a custom request parameter decorator in MidwayJS using `createRequestParamDecorator`. It defines a `Token` decorator that extracts the token from the request headers and can be used in controllers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRequestParamDecorator } from '@midwayjs/core';\n\n// Implement decorator\nexport const Token = () => {\n  return createRequestParamDecorator(ctx => {\n    return ctx.headers.token;\n  });\n};\n\n// Use decorator\nexport class UserController {\n  async invoke(@Token() token: string) {\n    console.log(token);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket App (Client)\nDESCRIPTION: This code snippet demonstrates how to test a WebSocket application using createWebSocketClient from @midwayjs/mock.  It creates a client, sends a message, listens for a response, and asserts that the response matches the expected value. The client and server are then closed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, closeApp, createWebSocketClient } from '@midwayjs/mock';\n\n/ ... 省略 describe\n\nit('should test create websocket app', async () => {\n\n  // 创建一个服务\n  const app = await createApp<Framework>(process.cwd(), { port: 3000});\n\n  // 创建一个客户端\n  const client = await createWebSocketClient(`ws://localhost:3000`);\n\n  const result = await new Promise(resolve => {\n\n    client.on('message', (data) => {\n      // xxxx\n      resolve(data);\n    });\n\n    // 发送事件\n    client.send(1);\n\n  });\n\n  // 判断结果\n  expect(JSON.parse(result)).toEqual({\n    name: 'harry',\n    result: 6,\n  });\n\n  await sleep(1000);\n\n  // 关闭客户端\n  await client.close();\n\n  // 关闭服务端\n  await closeApp(app);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using TableStoreServiceFactory for multiple instances (TypeScript)\nDESCRIPTION: This code shows how to use the TableStoreServiceFactory to obtain different TableStore service instances based on their configuration names. It injects the TableStoreServiceFactory and then uses the get method to retrieve instances corresponding to 'db1' and 'db2' configurations, allowing interaction with multiple TableStore instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/tablestore.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TableStoreServiceFactory } from '@midwayjs/tablestore';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  tableStoreServiceFactory: TableStoreServiceFactory;\n\n  async save() {\n    const db1 = await this.tableStoreServiceFactory.get('db1');\n    const db2 = await this.tableStoreServiceFactory.get('db2');\n\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with Query Parameters\nDESCRIPTION: This snippet demonstrates how to test an API endpoint with query parameters. It uses `createHttpRequest` to send a GET request with the `name` query parameter and verifies the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Hello World', async () => {\n  const trigger = getApiTrigger<HttpTriger>(hello);\n  const response = await createHttpRequest(app)\n    .get(trigger.path)\n    .query({ name: 'Midway' })\n    .expect(200);\n  expect(response.text).toBe('Hello Midway!');\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling TypeScript Type Checking in Midway\nDESCRIPTION: This command disables TypeScript type checking during MidwayJS development. It sets TS_NODE_TYPE_CHECK to 'false' and TS_NODE_TRANSPILE_ONLY to 'true', improving startup time at the expense of runtime type checking.  The NODE_DEBUG environment variable is set to include 'midway*' and the NODE_ENV is set to 'local'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/midway_slow_problem.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTS_NODE_TYPE_CHECK=false TS_NODE_TRANSPILE_ONLY=true\n```\n\n----------------------------------------\n\nTITLE: Sequelize One-to-Many Association - Typescript\nDESCRIPTION: This code demonstrates a one-to-many association between `Team` and `Player` models using `sequelize-typescript`. The `@ForeignKey`, `@BelongsTo`, and `@HasMany` decorators are used to define the relationship.  A Team can have many Players and a Player belongs to one Team.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, Column, ForeignKey, BelongsTo, HasMany } from 'sequelize-typescript';\n\n@Table\nexport class Player extends Model {\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n\n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n\n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nexport class Team extends Model {\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\n\n----------------------------------------\n\nTITLE: Define Koa Context and State Types\nDESCRIPTION: This TypeScript code snippet shows how to extend the `Context` and `State` interfaces in the `@midwayjs/koa` package to add custom properties. This allows you to define custom data that will be available within request handlers and middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\n\ndeclare module '@midwayjs/koa/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n\n  interface State{\n    bbb: string;\n    ccc: number;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure Bull Module in MidwayJS\nDESCRIPTION: This TypeScript snippet demonstrates how to import and configure the Bull module within a MidwayJS application. The `bull` module is added to the `imports` array within the `@Configuration` decorator, making it available for use in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as bull from '@midwayjs/bull';\n\n@Configuration({\n  imports: [\n    // ...\n    bull\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize OpenTelemetry SDK in bootstrap.js (TypeScript)\nDESCRIPTION: Initializes the OpenTelemetry SDK within a Midway.js application using bootstrap.js. This configuration includes setting up a Jaeger exporter, configuring resource attributes (service name), and registering auto-instrumentations for common Node.js modules. It shuts down gracefully when the process receives a SIGTERM signal.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst process = require('process');\nconst { NodeSDK, node, resources } = require('@opentelemetry/sdk-node');\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions')\nconst { JaegerExporter } = require('@opentelemetry/exporter-jaeger')\n\n// Midway startup file\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// https://www.npmjs.com/package/@opentelemetry/exporter-jaeger\nconst tracerAgentHost = process.env['TRACER_AGENT_HOST'] || '127.0.0.1'\nconst jaegerExporter = new JaegerExporter({\n  host: tracerAgentHost\n});\n\n// Initialize an open-telemetry SDK\nconst sdk = new NodeSDK({\n  // Set the tracking service name\n  resource: new resources.Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: 'my-app',\n  }),\n  // Configure the current export method. For example, one output to the console is configured here, or other Exporter can be configured, such as Jaeger.\n  traceExporter: new node.ConsoleSpanExporter(),\n  // configure the current export as jaeger\n  // traceExporter: jaegerExporter\n\n  // Some monitoring modules provided by default are configured here, such as http module, etc.\n  // If the initialization time is very long, you can log off this line and configure the required instrumentation entries separately.\n  instrumentations: [getNodeAutoInstrumentations()]\n});\n\n// Initialize the SDK and start the Midway framework after successful startup.\nsdk.start()\n\n// When the process is closed, data collection is closed at the same time\nprocess.on('SIGTERM', () => {\n  sdk.shutdown()\n    .then(() => console.log('Tracing terminated'))\n    .catch((error) => console.log('Error terminating tracing', error))\n    .finally(() => process.exit(0));\n});\n\nBootstrap\n  .configure(/**/)\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Defining multiple file upload with Swagger in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a DTO (Data Transfer Object) with an array of file properties for handling multiple file uploads using the Swagger module in MidwayJS. The `@ApiProperty` decorator is used to specify the type and format of the 'files' property as an array of binary strings. The `@ApiBody` decorator configures the request body content type as multipart form data, referencing the DTO schema. This configuration will generate the UI to upload multiple files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty, BodyContentType } from \"@midwayjs/swagger\";\n\nexport class CreateCatDto {\n  // ...\n  @ApiProperty({\n    type: 'array',\n    items: {\n      type: 'string',\n      format: 'binary',\n    }\n  })\n  files: any;\n}\n\n// ...\n\n@Post('/test1')\n@ApiBody({\n  contentType: BodyContentType.Multipart,\n  schema: {\n    type: CreateCatDto,\n  }\n})\nasync upload1(@Files() files, @Fields() fields) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint with Request Headers (GET)\nDESCRIPTION: This snippet shows how to define a GET API endpoint that reads a `token` from the request headers. It uses `Api`, `Get`, `Headers`, and `useContext` to access the headers and return the `token` value in the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Headers,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get('/auth'),\n  Headers<{ token: string }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      token: ctx.headers.token,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic MidwayJS Logger Configuration\nDESCRIPTION: This code shows the basic structure of the MidwayJS logger configuration file.  It includes the `default` section for global configuration and the `clients` section for individual logger configurations (e.g., `coreLogger`, `appLogger`). Requires `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       // ...\n     },\n     clients: {\n       coreLogger: {\n         // ...\n       },\n       appLogger: {\n         // ...\n       }\n     }\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Mongoose Connection (Multiple Databases)\nDESCRIPTION: This TypeScript code shows how to configure Mongoose connections for multiple MongoDB databases in the `src/config/config.default.ts` file. Each data source has its own connection URI and options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  mongoose: {\n    dataSource: {\n      default: {\n        uri: 'mongodb://localhost:27017/test',\n        options: {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n          user: '***********',\n          pass: '***********'\n        }\n      },\n      db1: {\n        uri: 'mongodb://localhost:27017/test1',\n        options: {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n          user: '***********',\n          pass: '***********'\n        }\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating with Existing HTTP Service\nDESCRIPTION: This code demonstrates how to integrate a WebSocket service with an existing HTTP service (Koa). It loads both the Web and Socket frameworks, configures the Web framework with a port, and loads both frameworks using Bootstrap.load. The socket framework adapts to main web framework without configuring the port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst WebFramework = require('@midwayjs/koa').Framework;\nconst SocketFramework = require('@midwayjs/ws').Framework;\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// 加载主 web 框架\nconst webFramework = new WebFramework().configure({\n  port: 7001,\n});\n\n// 加载副 ws 框架，自动适配主框架，这里不需要配置 port\nconst socketFramework = new SocketFramework().configure({});\n\nBootstrap.load(webFramework).load(socketFramework).run();\n```\n\n----------------------------------------\n\nTITLE: Modify bootstrap.js for Build Directory (MidwayJS)\nDESCRIPTION: Modifies the `bootstrap.js` file to specify the correct base directory for the application.  This is necessary when the compiled code is located in a directory other than the default `dist` directory.  The `baseDir` option in the `Bootstrap.configure()` method is set to the new build directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/change_start_dir.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst { join } = require('path');\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n//...\n\n// 需要用 configure 方法配置 baseDir\nBootstrap\n  .configure({\n    baseDir: join(__dirname, 'build'),\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Logging with Context Logger\nDESCRIPTION: This code demonstrates how to use the context logger to log information. The context logger includes context-specific data in the log messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.logger.info('xxxx');\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Static File Module\nDESCRIPTION: This code snippet demonstrates how to import the @midwayjs/static-file module and integrate it into a Midway.js application's configuration. It showcases importing the necessary modules, including @midwayjs/koa and path, and configuring the ContainerConfiguration class to include the static file module. This setup enables the application to serve static files from specified directories.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as koa from '@midwayjs/koa';\nimport * as staticFile from '@midwayjs/static-file';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    koa,\n    staticFile,\n  ],\n  importConfigs: [\n    join(__dirname, './config')\n  ]\n})\nexport class ContainerConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Type Conversion for Class Request Parameters in MidwayJS\nDESCRIPTION: This TypeScript snippet shows how MidwayJS automatically converts a query parameter to an instance of a class when the type is specified as a class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// class\nclass UserDTO {\n  name: string;\n\n  getName() {\n    return this.name;\n  }\n}\n\n@Get('/')\nasync getUser(@Query() query: UserDTO): Promise<User> {\n  // query.getName()\n}\n```\n\n----------------------------------------\n\nTITLE: Install Validate dependency\nDESCRIPTION: Installs the @midwayjs/validate package using npm. Version 3 is specified.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/validate@3 --save\n```\n\n----------------------------------------\n\nTITLE: Casbin Model Configuration\nDESCRIPTION: This code defines the structure and logic for Casbin's access control decisions. It includes request, policy, and role definitions, policy effects, and matching rules.  It defines how subjects, objects, and actions are evaluated against policies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _,_\ng2 = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && g2(r.obj, p.obj) && r.act == p.act || r.sub == \"root\"\n```\n\n----------------------------------------\n\nTITLE: Removing Undefined Attributes on a Decorator in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to remove undefined attributes from parameters on a specific controller method using the `@Validate` decorator. It sets `stripUnknown: true` within the `validationOptions` passed to the decorator. This configuration only applies to the decorated method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n\n  @Post('/')\n  @Validate({\n    validationOptions: {\n      stripUnknown: true\n    }\n  })\n  async updateUser(@Body() user: UserDTO ) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration\nDESCRIPTION: This code demonstrates different ways to access configuration values using `this.app.getConfig()`. It shows how to retrieve all configurations, specific key configurations, and multi-level configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Get all configurations\nthis.app.getConfig();\n// Get specific key configuration\nthis.app.getConfig('koa');\n// Obtain multi-level configuration\nthis.app.getConfig('midwayLoggers.default.dir');\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration - Using Credentials - TypeScript\nDESCRIPTION: This TypeScript code configures CORS on the server to allow credentials (`credentials: true`).  This must be paired with a client-side request that includes credentials, as shown in the previous snippet. It needs to be placed in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cross_domain.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n   // ...\n   cors: {\n     credentials: true,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Enable @koa/cors middleware in configuration.ts\nDESCRIPTION: This code snippet demonstrates how to enable the @koa/cors middleware in the `configuration.ts` file of a Midway Hooks application.  It imports necessary modules and configures the middleware within the `createConfiguration` function. The `origin: '*'` setting allows requests from any origin.  Dependencies include `@midwayjs/hooks`, `@midwayjs/koa`, and `@koa/cors`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/cors.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createConfiguration,\n  hooks,\n} from '@midwayjs/hooks';\nimport * as Koa from '@midwayjs/koa';\nimport cors from '@koa/cors';\n\nexport default createConfiguration({\n  imports: [\n    Koa,\n    hooks({\n      // highlight-start\n      middleware: [\n        cors({ origin: '*' }),\n      ],\n      // highlight-end\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Object Initialization Hook in MidwayJS (onObjectInit)\nDESCRIPTION: This code snippet demonstrates the `onObjectInit` lifecycle hook in MidwayJS. It allows developers to execute code after the asynchronous initialization method is executed after the object instance is created. The function receives the created object (`ins`) and options, including the container context and object definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/lifecycle.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectInitOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectInit(ins: any, options: ObjectInitOptions): Promise<void> {\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Set Request Locale Manually (Typescript)\nDESCRIPTION: Shows how to manually set the request locale using the `saveRequestLocale` method. If `writeCookie` is enabled in the configuration, the settings are saved to the user's Cookie for subsequent requests. Requires `@midwayjs/i18n`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync index() {\n  // ...\n  this.i18nService.saveRequestLocale('zh_CN');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Local Passport Middleware in TypeScript\nDESCRIPTION: Create a middleware class extending `PassportMiddleware` with the previously defined `LocalStrategy`. The `getAuthenticateOptions` method configures authentication options such as failure redirect and preset property for user data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// local-middleware.ts\n\nimport { Inject, Provide } from '@midwayjs/core';\nimport { PassportMiddleware } from '@midwayjs/passport';\nimport { Context } from '@midwayjs/express';\n\n@Provide()\nexport class LocalPassportMiddleware extends PassportMiddleware(LocalStrategy) {\n  // 设置 AuthenticateOptions\n  getAuthenticateOptions(): Promise<passport.AuthenticateOptions> | passport.AuthenticateOptions {\n    return {\n      failureRedirect: '/login',\n      presetProperty: 'user'\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Destruction with @Destroy\nDESCRIPTION: Shows how to use the `@Destroy` decorator to define an asynchronous method that will be executed before the service instance is destroyed.  This allows performing cleanup tasks such as closing connections or releasing resources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class BaseService {\n\n  @Config('hello')\n  config;\n\n  @Destroy()\n  async stop() {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing request context\nDESCRIPTION: This code demonstrates how to access the request context object (Koa Context in this case) within a Midway Hooks API. It uses `useContext<Context>()` to retrieve the context and then accesses the `method` and `path` properties. The handler function returns an object containing the method and path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext\n} from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/koa';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  return {\n    method: ctx.method,\n    path: ctx.path\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables (TypeScript)\nDESCRIPTION: This snippet demonstrates how to export variables in TypeScript using the `export` keyword.  This is the preferred method for exporting variables and functions in TypeScript.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ts 写法\nexport function alert() {}\n\nexport const config = { a: 1 };\n```\n\n----------------------------------------\n\nTITLE: Configure Redis Adapter\nDESCRIPTION: This snippet demonstrates how to configure the Redis adapter for `@midwayjs/socketio`. It initializes Redis clients and passes them to the `createAdapter` function.  Requires `ioredis` and `@socket.io/redis-adapter` dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport Redis from 'ioredis';\n\n// github document creates a redis instance\n\nconst pubClient = new Redis (/* redis configuration */);\nconst subClient = pubClient.duplicate();\n\nexport default {\n  // ...\n  socketIO: {\n    adapter: createAdapter(pubClient, subClient)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Queue Reuse with @Processor (TypeScript)\nDESCRIPTION: This snippet shows how the `@Processor` decorator automatically reuses a queue created manually using `createQueue`. If a queue with the same name ('test' in this case) has already been created, the decorator will utilize that existing queue instead of creating a new one. This allows for a combination of programmatic and declarative queue management. Dependencies: `@midwayjs/bull`\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// will automatically use the queue with the same name created manually above\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute(params) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Log Output Format for BullMQ - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a custom log output format for BullMQ using the `contextLoggerFormat` option. This allows customizing the log message structure to include relevant information like jobId and queue name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  bullmq: {\n    contextLoggerFormat: info => {\n      const { jobId, from } = info.ctx;\n      return `${info.timestamp} ${info.LEVEL} ${info.pid} [${jobId} ${from.name}] ${info.message}`;\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Passport Dependencies - Bash\nDESCRIPTION: This snippet shows how to install the @midwayjs/passport package and related policy dependencies using npm. It includes examples for local, Github, and JWT policies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n## Required\n$ npm i @midwayjs/passport@3 --save\n\n## Optional\n## Install the local policy below\n$ npm i passport-local --save\n$ npm i @types/passport-local --save-dev\n## Install Github policy below\n$ npm i passport-github --save\n## Install Jwt policy below\n$ npm i passport-jwt --save\n```\n\n----------------------------------------\n\nTITLE: Setting Global Route Prefix for Express in Midway\nDESCRIPTION: This code snippet shows how to configure a global route prefix for Express applications in the `src/config/config.default.ts` file. The `globalPrefix` property under the `express` key sets the prefix for all routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  express: {\n    globalPrefix: '/v1'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Component Logger\nDESCRIPTION: This TypeScript code shows how to configure the logger for the MQTT component.  You can specify a separate log file for the component's logs using the `mqttLogger` configuration in the `midwayLogger` section. This allows for isolating and managing the component's log messages separately from the main application logs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    // ...\n    mqttLogger: {\n      fileLogName: 'midway-mqtt.log',\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Client Config and Instance (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a configuration object and instantiate an HTTP client using that configuration. It serves as a basic example of how an HTTP client can be initialized.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 创建客户端的配置\nconst config = {\n  baseUrl: '',\n  timeout: 1000,\n};\n\n// 创建客户端实例的方法\nconst httpClient = new HTTPClient(config);\n```\n\n----------------------------------------\n\nTITLE: Using Axios Directly for Streaming in Typescript\nDESCRIPTION: This snippet shows how to use the original Axios instance directly to download a stream.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Axios } from '@midwayjs/axios';\nimport { ReadStream, createWriteStream } from 'fs';\nimport { finished } from 'stream/promises';\n\nasync function download(url: string, filename: string) {\n  const writer = await createWriteStream(filename);\n  const res = Axios.get<ReadStream>(url, {\n    responseType: 'stream',\n  });\n  res.data.pipe(writer);\n  await finished(writer);\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interceptors for Custom Axios Instance - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure request interceptors for a custom Axios instance. It retrieves the `HttpServiceFactory` and uses it to get the custom instance, then configures its interceptors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, IMidwayContainer } from '@midwayjs/core';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    axios\t\t// 导入 axios 组件\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n  \tconst httpServiceFactory = await container.getAsync(axios.HttpServiceFactory);\n    const customAxios = httpServiceFactory.get('customAxios');\n    customAxios.interceptors.request.use(\n      config => {\n        //...\n      },\n      error => {\n        //...\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Context Extension in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a middleware in Midway.js that extends the context object with a custom property `abc`. It shows the basic structure of a middleware and how to add properties to the context within the `resolve` method.  Dependencies: `@midwayjs/core`, `@midwayjs/koa`. Input: Koa Context, Output: Koa Context with extended property abc.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/context_definition.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IWebMiddleware {\n\n  resolve() {\n    return async (ctx: Context, next) => {\n\n      ctx.abc = '123';\n      await next();\n\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Messages - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to handle WebSocket messages using the `@OnWSMessage()` decorator. The `gotMessage` function is executed when a client sends a message with the event name 'message'. It receives the message data as an argument and returns a response object with modified data. The `@Inject()` decorator injects the WebSocket context (`ctx`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, OnWSMessage, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/ws';\n\n@WSController()\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('message')\n  async gotMessage(data) {\n    return { name: 'harry', result: parseInt(data) + 5 };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Koa Context in a Controller\nDESCRIPTION: This code snippet shows how to inject the Koa Context object into a controller using the `@Inject` decorator. It allows access to request and response properties in the controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/req_res_app.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // this.ctx.query\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware and Error Handling for BullMQ App\nDESCRIPTION: This snippet demonstrates how to configure middleware and error filters for the independent BullMQ application, allowing you to apply custom logic before and after task processing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  imports: [\n    bullmq\n  ]\n})\nexport class MainConfiguration {\n\n  @App('bullmq')\n  bullmqApp: bullmq.Application;\n\n  async onReady() {\n    this.bullmqApp.useMiddleware(/*middleware*/);\n    this.bullmqApp.useFilter(/*filter*/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Processor with @Processor Decorator\nDESCRIPTION: This snippet defines a task processor using the `@Processor` decorator, specifying the queue name ('test'). The `execute` method contains the logic to be executed when a task is processed.  If a queue with the specified name doesn't exist when the framework starts, it will be automatically created.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, IProcessor } from '@midwayjs/bullmq';\n\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute(data: any) {\n    // Process task logic\n    console.log('processing job:', data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Filter Implementation (TypeScript)\nDESCRIPTION: This code implements an error filter (`WeatherErrorFilter`) that catches `WeatherEmptyDataError` exceptions and returns a custom error response to the client. The `@Catch` decorator specifies the type of error to catch.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n//src/filter/weather.filter.ts\nimport { Catch } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { WeatherEmptyDataError } from '../error/weather.error';\n\n@Catch(WeatherEmptyDataError)\nexport class WeatherErrorFilter {\n  async catch(err: WeatherEmptyDataError, ctx: Context) {\n    ctx.logger.error(err);\n    return '<html><body><h1>weather data is empty</h1></body></html>';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Cascade Operations for One-to-One Relationship\nDESCRIPTION: This code enables cascade operations for the one-to-one relationship between `Photo` and `PhotoMetadata` in TypeORM. Setting `cascade: true` in the `@OneToOne` decorator of the `Photo` entity allows the associated `PhotoMetadata` entity to be automatically saved when the `Photo` entity is saved.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n  /// ... other columns\n\n  @OneToOne(type => PhotoMetadata, metadata => metadata.photo, {\n    cascade: true\n  })\n  metadata: PhotoMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Error Message Structure\nDESCRIPTION: This code illustrates the structure of a validation error message returned by Zod. It includes the `code`, `expected`, `received`, `path`, and `message` properties. The `path` property indicates the location of the error, and `message` provides a description of the error.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    code: 'invalid_type',\n    expected: 'string',\n    received: 'number',\n    path: [0, 'name'],\n    message:\n      'Expected string, received number',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Event Trigger Testing (TypeScript)\nDESCRIPTION: This snippet demonstrates how to test event-triggered functions (e.g., timer or object storage triggers). It creates a function app, gets an instance of the service class, and calls the handler method directly with test data, then asserts the result. It utilizes `createInitializeContext` for platform-specific initialization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_v1_upgrade_serverless_v2.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { createInitializeContext } from '@midwayjs/serverless-fc-trigger';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n  let instance: HelloAliyunService;\n\n  beforeAll(async () => {\n    // 创建函数 app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(), // 这里传入了 aliyun 特有的初始化上下文数据\n    });\n\n    // 拿到服务类\n    instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from event trigger', async () => {\n    // 调用函数方法，传入参数\n    expect(await instance.handleEvent('hello world')).toEqual('hello world');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type with API in MidwayJS\nDESCRIPTION: This code shows how to set the content type of the response using the `ctx.type` API in MidwayJS.  It sets the content type to `html`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.type = 'html';\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Retry Configuration\nDESCRIPTION: This snippet demonstrates how to configure a task to be retried a certain number of times if it fails. It sets the `attempts` option to the maximum number of retry attempts and defines a backoff strategy with an exponential delay.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullmqFramework.getQueue('test');\nawait testQueue?.addJobToQueue({}, {\n  attempts: 3,  // Maximum 3 retry attempts\n  backoff: {    // Retry strategy\n    type: 'exponential',  // Exponential backoff\n    delay: 1000          // Initial delay of 1 second\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using @koa/cors middleware\nDESCRIPTION: This code snippet demonstrates how to integrate the `@koa/cors` middleware into a Midway.js Koa application within the `configuration.ts` file.  It imports necessary modules, and registers the `cors` middleware with a default configuration to allow all origins.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/koa';\nimport * as cors from '@koa/cors';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(\n      cors({\n        origin: '*',\n      })\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full stack application query call\nDESCRIPTION: This example shows how to call a Midway Hooks API (defined elsewhere) from a full-stack application, passing query parameters. It imports the API function `getArticles` and calls it with a query object containing `page` and `limit`. The response is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport getArticles from './api';\nconst response = await getArticles({\n  query: { page: '0', limit: '10'}\n});\nconsole.log(response); // { page: '0', limit: '10'}\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Property in MidwayJS with @midwayjs/mock\nDESCRIPTION: This code snippet shows how to use `mockClassProperty` from `@midwayjs/mock` to simulate a property of a class in a MidwayJS application.  It mocks the `data` property of the `UserService` class, setting it to `{ bbb: 1 }` for testing purposes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockClassProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  mockClassProperty(UserService, 'data', {\n    bbb: 1\n  });\n  // userService.data => {bbb: 1}\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context with useContext in Midway Hooks (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access the request context in Midway Hooks using the `useContext` hook. It retrieves the HTTP method from the request object and returns it. This allows functions to access request-specific information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_syntax.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from '@midwayjs/hooks';\n\nexport function getHttpMethod() {\n  const { request } = useContext();\n  return request.method;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Connection - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to handle WebSocket connections using the `@OnWSConnection()` decorator. The `onConnectionMethod` function is executed when a new client connects to the WebSocket server. It receives the WebSocket context (`socket`) and the HTTP request (`request`) as arguments. `this.ctx.readyState` indicates the state of the connection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, OnWSConnection, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/ws';\nimport * as http from 'http';\n\n@WSController()\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSConnection()\n  async onConnectionMethod(socket: Context, request: http.IncomingMessage) {\n    console.log(`namespace / got a connection ${this.ctx.readyState}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prisma Client in TypeScript\nDESCRIPTION: This TypeScript snippet initializes the Prisma Client for database interaction. It imports the 'PrismaClient' class from the '@prisma/client' package and creates a new instance named 'prisma'. This 'prisma' instance is then exported, making it available for use in other modules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/prisma.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\n\nexport const prisma =\n  new PrismaClient();\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Path and IP with @RequestPath and @RequestIP\nDESCRIPTION: This example demonstrates how to access the request path and IP address using the `@RequestPath` and `@RequestIP` decorators. The `updateUser` method retrieves the path, IP address, and a body parameter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('/')\nasync updateUser(\n  @Body() id: string,\n  @RequestPath() p: string,\n  @RequestIP() ip: string): Promise<User> {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Kafka Admin Configuration in MidwayJS\nDESCRIPTION: This code snippet shows the basic configuration for Kafka Admin within a MidwayJS application. It defines an admin client with connection options, enabling the use of Kafka Admin functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    admin: {\n      clients: {\n        admin1: {\n          // ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Add Job to Queue\nDESCRIPTION: This TypeScript snippet shows how to manually add a job to the queue after the application is ready. It injects the `bullFramework`, retrieves the queue by name, and then adds a job to the queue using `addJobToQueue()`. The task is executed immediately.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as bull from '@midwayjs/bull';\n\n@Configuration({\n  imports: [\n    // ...\n    bull\n  ]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  bullFramework: bull.Framework;\n\n  //...\n\n  async onServerReady() {\n    // 获取 Processor 相关的队列\n    const testQueue = this.bullFramework.getQueue('test');\n    // 立即添加这个任务\n    await testQueue?.addJobToQueue();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Record with Sequelize\nDESCRIPTION: Demonstrates how to create a new record in the Photo table using the create method. It imports required decorators and the Photo entity, injects the entity and creates a record.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Photo } from '../entity/Photo';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Post('/add')\n  async home() {\n    let result = await Photo.create({\n      name: '123',\n    });\n    console.log(result);\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Max Age Based on 'Remember Me' (TypeScript)\nDESCRIPTION: This code shows how to adjust the session `maxAge` based on a 'remember me' option during login in a Midway.js Koa application. If the user selects 'remember me', a longer session duration is set.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Post, Body, Provide, FORMAT } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { UserService } from './service/user.service';\n\n@Controller('/')\nexport class UserController {\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  userService: UserService;\n\n  @Post('/')\n  async login(@Body() data) {\n   \tconst { username, password, rememberMe } = data;\n    const user = await this.userService.loginAndGetUser(username, password);\n\n    // 设置 Session\n    this.ctx.session.user = user;\n    // 如果用户勾选了 `记住我`，设置 30 天的过期时间\n    if (rememberMe) {\n      this.ctx.session.maxAge = FORMAT.MS.ONE_DAY * 30;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom ValidatePipe Implementation\nDESCRIPTION: This snippet demonstrates the creation of a custom pipe named `ValidatePipe` that implements the `PipeTransform` interface from `@midwayjs/core`. The `transform` method, required by the interface, currently returns the input `value` without any modification.  The `Pipe` decorator registers the class as a pipe component within the MidwayJS container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipe.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/pipe/validate.pipe.ts\nimport { Pipe, PipeTransform, TransformOptions } from '@midwayjs/core';\n\n@Pipe()\nexport class ValidatePipe implements PipeTransform<T, R> {\n   transform(value: T, options: TransformOptions): R {\n     return value;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Number Type with ApiProperty\nDESCRIPTION: This TypeScript code shows how to explicitly define the type of a property as a number using the `type` attribute in the `@ApiProperty` decorator. The 'format' field provides additional type precision.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({\n  type: 'number',\n  example: '1',\n  description: 'The name of the Catage'\n})\nage: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({\n  type: 'integer',\n  format: 'int32',\n  example: '1',\n  description: 'The name of the Catage'\n})\nage: number;\n```\n\n----------------------------------------\n\nTITLE: Getting Project Environment\nDESCRIPTION: This code demonstrates how to retrieve the current project environment (e.g., production, development) using `this.app.getEnv()`. This allows you to configure the application based on the environment it's running in.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getEnv();\n// => production\n```\n\n----------------------------------------\n\nTITLE: Install gRPC dependencies using npm\nDESCRIPTION: This command installs the `@midwayjs/grpc` and `@midwayjs/grpc-helper` packages as dependencies. `@midwayjs/grpc` is the core gRPC module for Midway.js, while `@midwayjs/grpc-helper` provides utilities to simplify gRPC development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/grpc@3 --save\n$ npm i @midwayjs/grpc-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Fetch API Call with Credentials (JavaScript)\nDESCRIPTION: A `fetch` call including credentials.  The `credentials: \"include\"` option is added to the fetch options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cross_domain.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(url, {\n  credentials: \"include\",\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Guard to a Method (TypeScript)\nDESCRIPTION: This code snippet shows how to apply a guard to a specific method within a controller using the `@UseGuard` decorator. Only the `home` method in `HomeController` is protected by the `AuthGuard`. It also shows the usage of middleware on the same route. Dependencies include `@midwayjs/core` and a defined `AuthGuard`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\nimport { ReportMiddleware } from '../middleware/report.middlweare';\nimport { AuthGuard } from '../guard/auth.guard';\n\n@Controller('/')\nexport class HomeController {\n\n  @UseGuard(AuthGuard)\n  @Get('/', { middleware: [ ReportMiddleware ]})\n  async home() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Koa Static Middleware\nDESCRIPTION: This code demonstrates how to integrate a third-party Koa middleware (`koa-static`) into a Midway.js application. The `resolve` method returns the result of calling the Koa middleware function, which is the actual middleware function that will be executed.  It leverages the `join` function from the `path` module to construct the path to the static directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/web_middleware.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as koaStatic from 'koa-static';\nimport { join } from 'path';\n\n@Provide()\nexport class ReportMiddleware implements IWebMiddleware {\n  resolve() {\n    return koaStatic(join(__dirname, '../public'));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Specific DataSource with @InjectDataSource\nDESCRIPTION: This code demonstrates how to inject a specific data source by name using the @InjectDataSource decorator in MidwayJS.  This allows you to target a particular data source when multiple are configured. Requires '@midwayjs/typeorm' and TypeORM.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-11-18-release-3-8.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectDataSource } from '@midwayjs/typeorm';\nimport { DataSource, Repository } from 'typeorm';\n\n@Provide()\nexport class UserService {\n  \n  @InjectDataSource('default')\n  defaultDataSource: DataSource;\n\n  async invoke() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Data Sources in Midway (Typescript)\nDESCRIPTION: This snippet illustrates how to configure multiple data sources in a Midway application for MikroORM. It demonstrates how to define multiple data source configurations under the `dataSource` property within the `mikro` configuration, enabling the application to connect to and manage multiple databases.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mikro.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { Author, BaseEntity, Book, BookTag, Publisher } from '../entity';\nimport { SqlHighlighter } from '@mikro-orm/sql-highlighter';\nimport { join } from 'path';\n\nexport default (appInfo) => {\n  return {\n    mikro: {\n      dataSource: {\n        custom1: {\n          // ...\n        },\n        custom2: {\n          // ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Header via Decorator in MidwayJS\nDESCRIPTION: This code snippet demonstrates retrieving a request header value using the `@Headers` decorator in a MidwayJS controller. The `cache-control` header is extracted and assigned to the `cacheSetting` variable. Dependencies: `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// GET /user/1\nimport { Controller, Get, Headers } from '@midwayjs/core';\n\n@Controller('/user')\nexport class UserController {\n  @Get('/:uid')\n  async getUser(@Headers('cache-control') cacheSetting: string): Promise<User> {\n    // no-cache\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Replacing Service with IoC (Mock)\nDESCRIPTION: This snippet shows how to replace a service with a mock implementation using MidwayJS's IoC container. It binds a mock service implementation to the same ID as the original service, effectively overriding it during the test. A mock UserService extending the original one is provided for context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test_more.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 假的服务，我们放在 test/service/user.ts 中\n// 继承可以方便的只做特定逻辑的覆盖\n// 保持 @provide 出原本的 id\n@provide('userService')\nexport class MockUserService extends UserService {\n  async getUser() {\n    return 'chen';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration - Limiting Origin - TypeScript\nDESCRIPTION: This TypeScript code configures CORS on the server to allow credentials (`credentials: true`) and limits the allowed origin to `http://127.0.0.1:7001`.  This is necessary when credentials are enabled. It needs to be placed in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cross_domain.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n   // ...\n   cors: {\n     origin: 'http://127.0.0.1:7001',\n     credentials: true,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: SSE Response with HttpServerResponse (TypeScript)\nDESCRIPTION: This code shows how to use `HttpServerResponse` to create a Server-Sent Events (SSE) endpoint.  It initializes the SSE stream using the `sse()` method. Requires `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, sleep, HttpServerResponse } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n  \n  @Get('/')\n  async home() {\n    const res = new HttpServerResponse(this.ctx).sse();\n    // ...\n    return res;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use environment variables with dotenv in MidwayJS\nDESCRIPTION: This TypeScript code shows how to load environment variables from a `.env` file using the `dotenv` library and make them available to your MidwayJS application.  It initializes `dotenv` in the application's entry point (e.g., `bootstrap.js` or `configuration.ts`) and then accesses the variables using `process.env` in the configuration files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as dotenv from 'dotenv';\n\n// load .env file in process.cwd\ndotenv.config();\n\n@Configuration({\n   //...\n})\nexport class MainConfiguration {\n   async onReady(container) {\n\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Image\nDESCRIPTION: This command runs a Docker image named `helloworld` in detached mode (`-d`) with interactive terminal access (`-it`) and publishes all exposed ports to random ports on the host (`-P`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -itd -P helloworld\n```\n\n----------------------------------------\n\nTITLE: Installing MidwayJS OpenTelemetry Component\nDESCRIPTION: Installs the @midwayjs/otel component, which provides decorator support for OpenTelemetry tracing within a MidwayJS application. This allows for easy integration of tracing into methods using the @Trace decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/otel/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/otel@3 --save\n```\n\n----------------------------------------\n\nTITLE: Defining Request Header using Swagger in TypeScript\nDESCRIPTION: This snippet shows how to define a request header using the `@ApiHeader` decorator in MidwayJS with Swagger.  The decorator specifies the header's name and description, providing documentation for API consumers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiHeader({\n  name: 'x-test-one',\n  description: 'this is test one'\n})\n@ApiTags(['hello'])\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using the Dynamic Cache Service\nDESCRIPTION: Demonstrates how to inject and use the dynamically created cache service in a controller.  The `@Inject('dynamicCacheServiceHandler')` decorator injects the factory function output as `cacheService`, which can then be used like any other service to retrieve data. The `@Provide()` and `@Controller()` decorators are used to register the controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Inject('dynamicCacheServiceHandler')\n  cacheService: ICacheService;\n\n  @Get('/')\n  async home() {\n    const data = await this.cacheService.getData();\n    // ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events to Clients\nDESCRIPTION: This TypeScript snippet demonstrates how to broadcast an event to all connected clients in a specific namespace using the Socket.IO application instance obtained through the `@App` decorator in a MidwayJS controller.  The example emits a 'hi' event with a message to all clients in the root namespace ('/'). It depends on `@midwayjs/socketio` and `@midwayjs/decorator` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application as SocketApplication } from '@midwayjs/socketio';\nimport { Provide, Controller, App, Get, MidwayFrameworkType } from '@midwayjs/decorator';\n\n@Provide()\n@Controller()\nexport class UserController {\n  @App(MidwayFrameworkType.WS_IO)\n  socketApp: SocketApplication;\n\n  @Get()\n  async invoke() {\n    // 对 / 下的连接做广播\n    this.socketApp.of('/').emit('hi', 'everyone');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Relations using Query Builder in TypeORM\nDESCRIPTION: This snippet demonstrates how to use TypeORM's `QueryBuilder` to load related entities. The `innerJoinAndSelect` method is used to join the `Photo` entity with its associated `PhotoMetadata` and select the data in a single query. This approach offers more flexibility for complex queries compared to using find options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhoto() {\n\t\t/*...*/\n    let photos = await this.photoModel\n      .createQueryBuilder('photo')\n      .innerJoinAndSelect('photo.metadata', 'metadata')\n      .getMany();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Route with MidwayWebRouterService - TypeScript\nDESCRIPTION: This code demonstrates how to add a route using the `MidwayWebRouterService`. It shows how to define a route handler and associate it with a URL and request method. Dependencies: @midwayjs/core\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayWebRouterService, Configuration, Inject } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  async onReady() {\n    this.webRouterService.addRouter(async (ctx) => {\n      return 'hello world';\n    }, {\n      url: '/',\n      requestMethod: 'GET',\n    });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in Typescript\nDESCRIPTION: This snippet configures basic authentication for Swagger in the `config.default.ts` file and associates it with a controller using `@ApiBasicAuth`. This requires a username and password.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'basic',\n    },\n  },\n}\n\n@ApiBasicAuth()\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Function Form Configuration - TypeScript\nDESCRIPTION: Shows the function form of a configuration file in TypeScript. The exported default is a function that accepts `MidwayAppInfo` and returns a configuration object of type `MidwayConfig`. This allows access to application metadata when defining configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayAppInfo, MidwayConfig } from '@midwayjs/core';\n\nexport default (appInfo: MidwayAppInfo): MidwayConfig => {\n   return {\n     keys: '1639994056460_8009',\n     koa: {\n       port: 7001,\n     },\n     view: {\n       root: path.join(appInfo.appDir, 'view'),\n     },\n   };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Custom Context Logger\nDESCRIPTION: This code shows how to obtain a context-specific logger instance using `ctx.getLogger`. It injects the Context and retrieves the 'customLogger' using the `getLogger` method. This allows for context-aware logging, where the logger is associated with the current request or context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { IMidwayLogger } from '@midwayjs/logger';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  ctx: Context;\n\n  async getUser() {\n    // 这里获取的是 customLogger 对应的上下文日志对象\n    const customLogger = this.ctx.getLogger('customLogger');\n  \tcustomLogger.info('hello world');\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Header Parameters from API Context\nDESCRIPTION: Demonstrates accessing header values using `ctx.get(name)`.  The `getUser` method retrieves the 'cache-control' header value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// GET /user/1\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/:uid')\n  async getUser(): Promise<User> {\n    const cacheSetting = this.ctx.get('cache-control');\n    // no-cache\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Midway Hooks Filesystem Routing Configuration\nDESCRIPTION: Configures filesystem routing in `midway.config.js` using the `defineConfig` function. It specifies the source directory for API files and the routing configuration, including the base directory and base path for generated API endpoints. This enables both simple mode and file routing within Midway Hooks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/file-route.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@midwayjs/hooks';\n\nexport default defineConfig({\n  source: './src/apis',\n  routes: [\n    {\n      baseDir: 'lambda',\n      basePath: '/api',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a POST Request with Body Parameters\nDESCRIPTION: This TypeScript code demonstrates how to create a POST request with body parameters. This is useful for testing endpoints that receive data in the request body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app)\n  .post('/user/catchThrowWithValidate')\n  .send({id: '1'});\n```\n\n----------------------------------------\n\nTITLE: Reload Prometheus configuration\nDESCRIPTION: Reloads the Prometheus configuration after modifying the targets.json file. This allows Prometheus to dynamically update the list of targets to monitor.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ curl-X POST http://${prometheus ip}:9090/-/reload\n```\n\n----------------------------------------\n\nTITLE: Consumer Implementation (eachMessage)\nDESCRIPTION: Shows the basic implementation of a Kafka consumer using the `@KafkaConsumer` decorator and the `IKafkaConsumer` interface. The `eachMessage` method is used to process individual messages received from the Kafka topic.  The consumer name ('sub1') should match the configuration in `config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/consumer/sub1.consumer.ts\nimport { KafkaConsumer, IKafkaConsumer, EachMessagePayload } from '@midwayjs/kafka';\n\n@KafkaConsumer('sub1')\nclass Sub1Consumer implements IKafkaConsumer {\n  async eachMessage(payload: EachMessagePayload) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: mwtsc with custom tsconfig\nDESCRIPTION: This snippet shows how to specify a custom `tsconfig.json` file for compilation using the `--project` option.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 使用不同的 tsconfig 文件\n$ npx mwtsc --project tsconfig.production.json\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Client Stream (READABLE) with Midwayjs\nDESCRIPTION: This code snippet demonstrates a gRPC client stream implementation in Midwayjs. The `@GrpcMethod` decorator is used with `GrpcStreamTypeEnum.READABLE` to define a client-side streaming method. The `onEnd` parameter specifies the method to be called after the client completes sending data. This implementation accumulates data in `sumDataList` and calculates the total in the `sumEnd` method. The provider is registered using `MSProviderType.GRPC`.  It depends on `@midwayjs/core` and `@midwayjs/grpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, GrpcStreamTypeEnum, Inject, MSProviderType, Provider } from '@midwayjs/core';\nimport { Context, Metadata } from '@midwayjs/grpc';\nimport { math } from '../interface';\n\n/**\n */\n@Provider(MSProviderType.GRPC, { package: 'math' })\nexport class Math implements math.Math {\n\n  sumDataList: number[] = [];\n\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod({type: GrpcStreamTypeEnum.READABLE, onEnd: 'sumEnd' })\n  async addMany(data: math.Num) {\n    this.sumDataList.push(data);\n  }\n\n  async sumEnd(): Promise<math.Num> {\n    const total = this.sumDataList.reduce((pre, cur) => {\n      return {\n        num: pre.num + cur.num\n      }\n    });\n    return total;\n  }\n\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Cache Key\nDESCRIPTION: Deletes a single cache entry using the `del` method.  This removes the specified key and its associated value from the cache.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.cache.del('key');\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Requests - Bash\nDESCRIPTION: This snippet demonstrates how to generate a JWT token and then use it to access a protected route. It uses curl to simulate the requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://127.0.0.1:7001/jwt\n\nResult {\"t\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}\n\ncurl http://127.0.0.1:7001/passport/jwt -H \"Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\nResults {\"msg\": \"Hello Midway\",\"iat\": 1635468727,\"exp\": 1635468827}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers Using API (Typescript)\nDESCRIPTION: This snippet demonstrates how to set response headers using `ctx.set` API in a MidwayJS controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.set('x-bbb', '123');\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reuse Kafka Instance (Consumer)\nDESCRIPTION: Demonstrates how to reuse a Kafka instance between multiple consumers using the `kafkaInstanceRef` field. This configuration allows multiple consumers to share the same Kafka connection, reducing resource consumption. Ensure that each consumer using the same instance has a unique `groupId` to avoid conflicts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          clientId: 'my-app',\n          brokers: ['localhost:9092'],\n        },\n        consumerOptions: {\n          groupId: 'groupId-test-1',\n        },\n        subscribeOptions: {\n          topics: ['topic-test-1'],\n        }\n      },\n      sub2: {\n        kafkaInstanceRef: 'sub1',\n        consumerOptions: {\n          groupId: 'groupId-test-2',\n        },\n        subscribeOptions: {\n          topics: ['topic-test-2'],\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Task History\nDESCRIPTION: This TypeScript configuration code shows how to configure the automatic removal of completed and failed jobs from the queue. This helps to prevent the Redis database from growing too large.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  bullmq: {\n    defaultQueueOptions: {\n      defaultJobOptions: {\n        removeOnComplete: 3,  // 成功后只保留最近 3 条记录\n        removeOnFail: 10,     // 失败后只保留最近 10 条记录\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Routes in Middleware (TypeScript)\nDESCRIPTION: Illustrates how to prevent middleware execution for specific routes using the `ignore` method. This method allows the middleware to conditionally skip execution based on the request context. The example checks the `ctx.path` property to determine whether to ignore the middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // ...\n    };\n  }\n\n  ignore(ctx: Context): boolean {\n    // The following route will ignore this middleware\n    return ctx.path === '/'\n      || ctx.path === '/api/auth'\n      || ctx.path === '/api/login';\n  }\n\n  static getName(): string {\n    return 'report';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kafka Producer with MidwayJS\nDESCRIPTION: This code snippet demonstrates how to use the Kafka Producer within a MidwayJS service. It injects a Producer instance using `@InjectClient` and sends a message to a Kafka topic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/user.service.ts\nimport { Provide, InjectClient } from '@midwayjs/core';\nimport { KafkaProducerFactory, Producer } from '@midwayjs/kafka';\n\n@Provide()\nexport class UserService {\n  \n  @InjectClient(KafkaProducerFactory, 'pub1')\n  producer: Producer;\n  \n  async invoke() {\n    await this.producer.send({\n      topic: 'topic-test-1',\n      messages: [{ key: 'message-key1', value: 'hello consumer 11 !' }],\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GET Request with Query Parameters\nDESCRIPTION: This TypeScript code shows how to create a GET request with query parameters using `createHttpRequest` from `@midwayjs/mock`. This is commonly used for testing endpoints that accept query parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app)\n  .get('/set_header')\n  .query({ name: 'harry' });\n```\n\n----------------------------------------\n\nTITLE: Full stack application headers call\nDESCRIPTION: This example shows how to call a Midway Hooks API (defined elsewhere) from a full-stack application, passing headers. It imports the API function `getAuth` and calls it with a headers object containing `token`. The response is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport getAuth from './api/auth';\nconst response = await getAuth({\n  headers: { token: '123456'}\n});\nconsole.log(response); // { token: '123456'}\n```\n\n----------------------------------------\n\nTITLE: Service throwing custom error (TypeScript)\nDESCRIPTION: This code updates the `WeatherService` to throw the custom `WeatherEmptyDataError` when it fails to fetch weather data. This allows for centralized error handling and provides more context about the error.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/weather.service.ts\nimport { Provide, makeHttpRequest } from '@midwayjs/core';\nimport { WeatherInfo } from '../interface';\nimport { WeatherEmptyDataError } from '../error/weather.error';\n\n@Provide()\nexport class WeatherService {\n  async getWeather(cityId: string): Promise<WeatherInfo> {\n    if (!cityId) {\n      throw new WeatherEmptyDataError();\n    }\n\n    try {\n      const result = await makeHttpRequest<WeatherInfo>(`https://midwayjs.org/resource/${cityId}.json`, {\n        dataType: 'json',\n      });\n      if (result.status === 200) {\n        return result.data as WeatherInfo;\n      }\n    } catch (error) {\n      throw new WeatherEmptyDataError(error);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update package.json with RabbitMQ dependencies\nDESCRIPTION: This JSON snippet shows the updated `package.json` file with the required dependencies for RabbitMQ integration.  It includes `@midwayjs/rabbitmq` and `amqplib` in `dependencies` and `@types/amqplib` in `devDependencies`.  This allows the application to interact with a RabbitMQ server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/rabbitmq\": \"^3.0.0\",\n    \"amqplib\": \"^0.10.1 \",\n    // ...\n  },\n  \"devDependencies\": {\n    \"@types/amqplib\": \"^0.8.2 \",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Kafka Instance for Admin in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to reuse an existing Kafka consumer instance for the Kafka Admin client in MidwayJS.  It references the consumer's connection options for the admin client's configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          clientId: 'my-app',\n          brokers: ['localhost:9092'],\n        },\n      }\n    },\n    admin: {\n      clients: {\n        admin1: {\n          kafkaInstanceRef: 'sub1',\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Cache Service Factory Method Injection\nDESCRIPTION: Defines a dynamic service factory function `dynamicCacheServiceHandler` that returns either `LocalCacheService` or `RemoteCacheService` based on the `redis.mode` configuration.  It uses `providerWrapper` to register the function as an injectable provider with a specified scope (request or singleton). The container parameter allows access to other services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/dynamicCacheService.ts\n\nimport { providerWrapper, IMidwayContainer, MidwayConfigService } from '@midwayjs/core';\n\nexport async function dynamicCacheServiceHandler(container: IMidwayContainer) {\n\t// Get global configuration from container API\n  const config = container.get(MidwayConfigService).getConfiguration();\n  if (config['redis']['mode'] === 'local') {\n    return await container.getAsync('localCacheService');\n  } else {\n    return await container.getAsync('remoteCacheService');\n  }\n}\n\nproviderWrapper ([\n  {\n    id: 'dynamicCacheService',\n    provider: dynamicCacheServiceHandler\n    Scope: ScopeEnum.Request, // is set to the request scope, then the container passed in above is the request scope container.\n    // scope: ScopeEnum.Singleton, // can also be set to global scope, then the logic of the call will be cached\n  }\n]);\n```\n\n----------------------------------------\n\nTITLE: Testing GET API endpoint with request headers\nDESCRIPTION: This code demonstrates testing a GET API endpoint with request headers. It uses `@midwayjs/mock` and `createHttpRequest` to send a GET request to the '/auth' endpoint and sets the 'token' header to '123456'. It then asserts that the response body contains the same token value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Auth', async () => {\n  const response = await createHttpRequest(app)\n    .get('/auth')\n    .set('token', '123456')\n    .expect(200);\n\n  expect(response.body).toEqual({ token: '123456' });\n});\n```\n\n----------------------------------------\n\nTITLE: Extending AxiosRequestConfig Type - TypeScript\nDESCRIPTION: This snippet demonstrates how to extend the `AxiosRequestConfig` interface to add custom properties. It adds `retryDelay` and `retry` properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// interface.ts\nimport '@midwayjs/axios';\n\ndeclare module '@midwayjs/axios/dist/interface' {\n  interface AxiosRequestConfig {\n    retryDelay?: number;\n    retry?: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Parameter Decorator in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the custom `User` parameter decorator within a service class. It shows the `getUser` method of `UserService` being decorated with `@User()`, injecting the user information.  Dependencies include the `User` decorator defined earlier.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport class UserController {\n\n  @Inject()\n  userService: UserService;\n\n  @Inject()\n  ctx: Context;\n\n  async getUser() {\n    return await this.getUser(ctx);\n  }\n}\n\nexport class UserService {\n  async getUser(@User() user: string) {\n    console.log(user);\n    // => xxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Task Retry\nDESCRIPTION: This TypeScript code demonstrates how to configure the retry mechanism for a BullMQ task, including the maximum number of attempts and the backoff strategy (exponential backoff with an initial delay).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullmqFramework.getQueue('test');\nawait testQueue?.addJobToQueue({}, {\n  attempts: 3,  // 最多重试 3 次\n  backoff: {    // 重试策略\n    type: 'exponential',  // 指数退避\n    delay: 1000          // 初始延迟 1 秒\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Fetcher Implementation with Axios in TypeScript\nDESCRIPTION: This example demonstrates how to replace the default request client (`redaxios`) with `axios` by providing a custom `fetcher` function to `setupHttpClient` from `@midwayjs/rpc`. The `fetcher` function adapts the `HttpRequestOptions` to Axios's configuration and returns the response data. Dependencies: `axios`, `@midwayjs/rpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/client.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\nimport { setupHttpClient } from '@midwayjs/rpc';\nimport type { Fetcher } from '@midwayjs/rpc';\n\nconst fetcher: Fetcher = async (\n  req,\n  options\n) => {\n  const response = await axios({\n    method: req.method,\n    url: req.url,\n    data: req.data,\n    params: req.query,\n    headers: req.headers,\n    baseURL: options.baseURL,\n    withCredentials:\n      options.withCredentials\n  });\n  return response.data;\n};\n\nsetupHttpClient({ fetcher });\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in MidwayJS (TypeScript)\nDESCRIPTION: This snippet shows how to handle `MidwayValidationError` exceptions in MidwayJS using an exception filter.  It catches the `MidwayValidationError` and returns a custom error response with a 422 status code.  Dependencies: `@midwayjs/core`, `@midwayjs/validate`, `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/validate.filter\nimport { Catch } from '@midwayjs/core';\nimport { MidwayValidationError } from '@midwayjs/validate';\nimport { Context } from '@midwayjs/koa';\n\n@Catch(MidwayValidationError)\nexport class ValidateErrorFilter {\n  async catch(err: MidwayValidationError, ctx: Context) {\n    // ...\n    return {\n      status: 422\n      message: 'Check parameter error,' + err.message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Controller with Github Middleware in Typescript\nDESCRIPTION: This code implements an authentication controller using `@midwayjs/core`. It defines two routes: `/github` and `/github/cb`, both protected by the `GithubPassportMiddleware`. The `githubOAuth` method is empty. The `githubOAuthCallback` method returns the user information from the `ctx.state.user` object, which is populated by the passport middleware after successful authentication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controoer/auth.controller.ts\n\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport { GithubPassportMiddleware } from './github.middleware';\n\n@Controller('/oauth')\nexport class AuthController {\n  @Inject()\n  ctx;\n\n  @Get('/github', { middleware: [GithubPassportMiddleware] })\n  async githubOAuth() {}\n\n  @Get('/github/cb', { middleware: [GithubPassportMiddleware] })\n  async githubOAuthCallback() {\n    return this.ctx.state.user;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Midway Test Client Configuration\nDESCRIPTION: This TypeScript snippet shows how to configure the socket.io client used in midway tests. The path and namespace need to match the server's configuration. This uses the `createSocketIOClient` function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// midway 的测试客户端\nconst client = await createSocketIOClient({\n  port: 7001,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// midway 的测试客户端\nconst client = await createSocketIOClient({\n  path: '/testPath',\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// midway 的测试客户端\nconst client = await createSocketIOClient({\n  namespace: '/test',\n});\n```\n\n----------------------------------------\n\nTITLE: Specific method matching using wildcards\nDESCRIPTION: This example shows how to intercept only specific methods based on a wildcard pattern using the second parameter of the `@Aspect` decorator. The wildcard pattern is based on [picomatch](https://github.com/micromatch/picomatch).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/1')\n  async hello1() {\n    return \"Hello Midwayjs!\";\n  }\n\n  @Get('/2')\n  async hello2() {\n    return \"Hello Midwayjs, too!\";\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Aspect([HomeController], '*2')\nexport class ReportInfo implements IMethodAspect {\n\n  async before(point: JoinPoint) {\n    console.log('hello method with suffix 2');\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Interface Definitions\nDESCRIPTION: This TypeScript snippet shows the generated interface definitions from a .proto file using `grpc-helper`.  It defines the `helloworld` namespace, `Greeter` service interface for server-side implementation, `GreeterClient` for client-side implementation, `HelloRequest`, and `HelloReply` interfaces for request and response messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* This file is auto-generated by grpc-helper\n*/\n\nimport * as grpc from '@midwayjs/grpc';\n\n// 生成的命名空间\nexport namespace helloworld {\n\n  // 服务端使用的定义\n  export interface Greeter {\n    // Sends a greeting\n    sayHello(data: HelloRequest): Promise<HelloReply>;\n  }\n\n  // 客户端使用的定义\n  export interface GreeterClient {\n    // Sends a greeting\n    sayHello(options?: grpc.IClientOptions): grpc.IClientUnaryService<HelloRequest, HelloReply>;\n  }\n\n  // 请求体结构\n  export interface HelloRequest {\n    name?: string;\n  }\n\n  // 响应体结构\n  export interface HelloReply {\n    message?: string;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a task processor\nDESCRIPTION: This TypeScript code defines a task processor using the `@Processor` decorator from `@midwayjs/bull`. It specifies the queue name ('test') and implements the `IProcessor` interface with an `execute` method for processing tasks.  This queue will be created automatically when the framework starts if there is no queue named `test`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/queue/test.queue.ts\nimport { Processor, IProcessor } from '@midwayjs/bull';\n\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Injections Typescript\nDESCRIPTION: Demonstrates that `@inject()` decorators on parent class properties are inherited by child classes.  Instances of `Grandson` will have `katana1`, `katana2`, and `katana3` injected.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Parent {\n  @inject()\n  katana1;\n}\n\nclass Child extends Parent {\n  @inject()\n  katana2;\n}\n\nclass Grandson extends Child {\n  @inject()\n  katana3;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Swagger Component with Environment Check\nDESCRIPTION: This TypeScript code demonstrates how to enable the Swagger component only in specific environments (e.g., 'local'). It imports the Swagger module and configures the `enabledEnvironment` property within the `imports` array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as swagger from '@midwayjs/swagger';\n\n@Configuration({\n  imports: [\n    // ...\n    {\n      component: swagger\n      enabledEnvironment: ['local']\n    }\n  ]\n})\nexport class MainConfiguration {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Log Output Format\nDESCRIPTION: This code snippet shows how to configure a custom format for context logs. It defines a contextFormat function within the configuration for customLogger. The function receives a LoggerInfo object containing the context (ctx) and allows customizing the log message based on context properties like request start time and HTTP method. This configuration is part of the midwayLogger configuration in a MidwayConfig object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      customLogger: {\n        contextFormat: info => {\n          const ctx = info.ctx;\n          return `${info.timestamp} ${info.LEVEL} ${info.pid} [${Date.now() - ctx.startTime}ms ${ctx.method}] ${info.message}`;\n        }\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP service with createHttpRequest\nDESCRIPTION: This snippet demonstrates how to test an HTTP service using `createHttpRequest` from `@midwayjs/mock`. It creates a client, sends a request, and asserts the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 创建一个客户端请求\nconst result = await createHttpRequest(app).get('/');\n// 测试返回结果\nexpect(result.text).toBe('Hello Midwayjs!');\n```\n\n----------------------------------------\n\nTITLE: Testing Timer Triggers (MidwayJS, TypeScript)\nDESCRIPTION: This snippet demonstrates testing timer triggers.  It uses `getServerlessInstance` to get a class instance and calls the handler function directly with mock timer event data, created using `mockTimerEvent` from `@midwayjs/fc-starter`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\nimport { mockTimerEvent } from '@midwayjs/fc-starter';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from timer trigger', async () => {\n    // ...\n    const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n    expect(await instance.handleTimerEvent(mockTimerEvent())).toEqual('hello world');\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Internal Redirection in MidwayJS\nDESCRIPTION: This code demonstrates how to perform an internal redirect using the `ctx.forward()` API in MidwayJS. It redirects the `/` route to the `/api` route, without modifying the browser URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n   @Inject()\n   ctx: Context;\n\n   @Get('/')\n   async home() {\n     return this.ctx.forward('/api');\n   }\n  \n   @Get('/api')\n   async api() {\n     return 'abc';\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirection with Decorator in MidwayJS\nDESCRIPTION: This code snippet shows how to use the `@Redirect` decorator in MidwayJS to redirect a route to another route.  It demonstrates both a default redirect (302) and a redirect with a specified status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Redirect } from '@midwayjs/core';\n\n@Controller('/')\nexport class LoginController {\n\n  @Get('/login_check')\n  async check() {\n    // TODO\n  }\n\n  @Get('/login')\n  @Redirect('/login_check')\n  async login() {\n    // TODO\n  }\n\n  @Get('/login_another')\n  @Redirect('/login_check', 302)\n  async loginAnother() {\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic MIME Type Rules in MidwayJS (TypeScript)\nDESCRIPTION: This code demonstrates how to use a function to dynamically return MIME type validation rules based on the request context.  The `mimeTypeWhiteList` property is assigned a function that receives the context (`ctx`) as an argument.  This allows for different MIME type rules to be applied based on the request path or other contextual information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  busboy: {\n    mimeTypeWhiteList: (ctx) => {\n      if (ctx.path === '/') {\n        return {\n          '.jpg': 'image/jpeg',\n        };\n      } else {\n        return {\n          '.jpeg': ['image/jpeg', 'image/png'],\n        }\n      };\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Component-Level Context Extension (Global) in Midway.js (TypeScript)\nDESCRIPTION: This code snippet illustrates how to extend the global Midway.js Context interface within a component. It uses the `declare module` syntax to add a custom property `abc` to the `@midwayjs/core/dist/interface`'s Context interface. This extension affects all Context objects throughout the application. Dependency: `@midwayjs/core`. Input: None, modifies the global Context interface. Output: Extended Context interface with property abc.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/context_definition.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// index.d.ts\n\n// 下面这段可以对所有的 Context 做扩展\ndeclare module '@midwayjs/core/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware in config.default.ts\nDESCRIPTION: This code demonstrates how to configure global middleware in Midway.js using the `config.default.ts` file.  The `middleware` property within the configuration object is an array of middleware keys, which are the `@Provide` values of the middleware classes. This configuration ensures that the specified middleware is executed for every route in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/web_middleware.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nexport default (appInfo: EggAppInfo) => {\n  const config = {} as DefaultConfig;\n\n  // ...\n\n  config.middleware = ['reportMiddleware'];\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Faster Startup Method (ts-node)\nDESCRIPTION: Enables the faster startup mode for the development server using ts-node with swc for faster compilation. Requires `--fast` flag.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n// Use ts-node fast dev mode\n$ midway-bin dev --ts --fast\n```\n\n----------------------------------------\n\nTITLE: Accessing body from application/json POST request\nDESCRIPTION: This TypeScript code demonstrates accessing the request body when the content type is `application/json`. The framework automatically parses the JSON string to an object. The `ctx.request.body` will be a JavaScript object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\" B \"} => object\n```\n\n----------------------------------------\n\nTITLE: Installing Static File Component\nDESCRIPTION: This command installs the @midwayjs/static-file component as a dependency to your Midway.js project.  This allows you to serve static files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/static-file --save\n```\n\n----------------------------------------\n\nTITLE: Configuration Injection in MidwayJS (TypeScript)\nDESCRIPTION: Shows how to inject configuration values into MidwayJS components using the `@config` decorator. This example injects the `hello` configuration value from `config.default.ts` into the `BaseService` class.  This avoids direct dependency on the `app` object for configuration access.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/framework.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provide, config } from 'midway';\n\n@provide()\nexport class BaseService {\n  @config('hello')\n  config; // 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Proxy Dependency\nDESCRIPTION: This command installs the @midwayjs/http-proxy package as a dependency for your MidwayJS project. It uses npm to download and install the package from the npm registry.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/http-proxy/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/http-proxy --save\n```\n\n----------------------------------------\n\nTITLE: Find Single Record with Sequelize\nDESCRIPTION: Demonstrates how to find a single record from the UserModel table using the findOne method. It imports required decorators and the Photo entity, injects the entity and retrieves a record if matches the specified criteria.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Photo } from '../entity/Photo';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Post('/delete')\n  async home() {\n    let result = await UserModel.findOne({\n      where: {\n        name: '123',\n      },\n    });\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Header with API in MidwayJS\nDESCRIPTION: This code demonstrates how to set a custom response header using the `ctx.set()` API in MidwayJS. The header `x-bbb` is set to the value `123`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.set('x-bbb', '123');\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Routes in Middleware\nDESCRIPTION: This snippet demonstrates how to ignore specific routes in a middleware by implementing the ignore method in the middleware class. The ignore method receives the context object and returns a boolean value indicating whether the middleware should be skipped for the current request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // ...\n    };\n  }\n\n  ignore(ctx: Context): boolean {\n    // 下面的路由将忽略此中间件\n    return ctx.path === '/'\n      || ctx.path === '/api/auth'\n      || ctx.path === '/api/login';\n  }\n\n  static getName(): string {\n    return 'report';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Function App for Local Testing (Event Trigger)\nDESCRIPTION: This snippet demonstrates how to initialize a function app for local testing using `@midwayjs/mock` and `@midwayjs/fc-starter`. It uses `createFunctionApp` to create the app and `mockContext` to simulate the FC context. The app is closed using `close` after testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context, Framework } from '@midwayjs/faas';\nimport { mockContext } from '@midwayjs/fc-starter';\nimport { createFunctionApp } from '@midwayjs/mock';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n   it('should get result from event trigger', async () => {\n    \n     // create app\n     const app: Application = await createFunctionApp<Framework>(join(__dirname, '../'), {\n       initContext: mockContext(),\n     });\n    \n     // ...\n    \n     await close(app);\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Using createRedisStore for CacheManager (TypeScript)\nDESCRIPTION: This snippet shows how to configure the CacheManager to use a Redis store by reusing existing Redis client configurations.  The `createRedisStore` function, provided by `@midwayjs/cache-manager`, takes the name of a Redis client (e.g., 'default') defined in the application's configuration. This eliminates the need to redundantly configure Redis connections specifically for caching.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-01-13-release-3.14.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRedisStore } from '@midwayjs/cache-manager';\n\n// src/config/config.default.ts\nexport default {\n  cacheManager: {\n    clients: {\n      default: {\n        store: createRedisStore('default'),\n        // ...\n      },\n    },\n  },\n  redis: {\n    clients: {\n      default: {\n        port: 6379,\n        host: '127.0.0.1',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Passport Middleware - Typescript\nDESCRIPTION: This snippet demonstrates how to create a middleware for the JWT authentication strategy. It extends PassportMiddleware and overrides the getAuthenticateOptions method to customize the authentication behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/jwt.middleware.ts\n\nimport { Middleware } from '@midwayjs/core';\nimport { PassportMiddleware, AuthenticateOptions } from '@midwayjs/passport';\nimport { JwtStrategy } from '../strategy/jwt.strategy';\n\n@Middleware()\nexport class JwtPassportMiddleware extends PassportMiddleware(JwtStrategy) {\n  getAuthenticateOptions(): Promise<AuthenticateOptions> | AuthenticateOptions {\n    return {};\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint with Query Parameters (GET)\nDESCRIPTION: This snippet defines a GET API endpoint that accepts a `name` query parameter. It uses `Api`, `Get`, `Query`, and `useContext` to extract the query parameter and return a personalized greeting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Query,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get('/hello'),\n  Query<{ name: string }>(),\n  async () => {\n    const ctx = useContext();\n    return `Hello ${ctx.query.name}!`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Cache Method with Custom Key\nDESCRIPTION: Caches the result of a method with a manually specified key using the `@Caching` decorator. This allows for more control over cache key generation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n  @Caching('default', 'customKey', 100)\n  async getUser(name: string) {\n    return name;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest in jest.config.js (JavaScript)\nDESCRIPTION: This code configures Jest with ts-jest preset, sets the test environment to node, and defines patterns to ignore specific paths. It defines the basic configuration for Jest within a MidwayJS project using JavaScript.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures'],\n  coveragePathIgnorePatterns: ['<rootDir>/test/'],\n};\n```\n\n----------------------------------------\n\nTITLE: Logging with the request-scoped logger\nDESCRIPTION: This snippet demonstrates how to use the request-scoped logger (`ctx.logger`) to log messages. The logger includes contextual information about the request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.logger.info('xxxx');\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT in MidwayJS\nDESCRIPTION: This snippet demonstrates how to configure the JWT settings within a MidwayJS configuration file (config.{env}.ts). It sets the secret key and expiration time for JWT tokens. The `secret` is used to sign and verify the JWT, and `expiresIn` specifies the duration for which the token remains valid.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/jwt/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconfig.jwt = {\n  secret: 'dev123456',\n  expiresIn: '10d', // https://github.com/vercel/ms\n};\n```\n\n----------------------------------------\n\nTITLE: Proxy Example using Host Configuration\nDESCRIPTION: Illustrates a proxy setup where the host of matching URLs is replaced with a specified host. The provided config matches URLs containing \"/tfs/\" and replaces the original host with \"https://gw.alicdn.com\".\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/http-proxy.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  httpProxy: {\n    match: /\\/tfs\\//,\n    host: 'https://gw.alicdn.com',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DTO with ApiProperty\nDESCRIPTION: This TypeScript code defines a DTO (Data Transfer Object) using `ApiProperty` decorators to provide metadata for Swagger documentation. Each property is annotated with an example and description.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from \"@midwayjs/swagger\";\n\nexport class CreateCatDto {\n  @ApiProperty({ example: 'Kitty', description: 'The name of the Catname'}){\n  @ApiProperty({ example: 'Kitty', description: 'The name of the Cat'}) name: string;\n\n  @ApiProperty({ example: '1', description: 'The name of the Catage'}) age: number;\n\n  @ApiProperty({ example: 'bbbb', description: 'The name of the Catbreed'}) breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Functionality in Midway (TypeScript)\nDESCRIPTION: This feature introduces the concept of guards in Midway, enabling developers to implement authorization and authentication logic before a route handler is executed. Guards act as middleware that can prevent access to certain routes based on predefined conditions, such as user roles or permissions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configure Multi-Level Caching\nDESCRIPTION: Configures a multi-level caching setup with memory and Redis stores. It sets up a caching hierarchy where memory is the first level cache and Redis is the second level cache.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { createRedisStore } from '@midwayjs/cache-manager';\nexport default {\n  cacheManager: {\n    clients: {\n      memoryCaching: {\n        store: 'memory',\n      },\n      redisCaching: {\n        store: createRedisStore('default'),\n        options: {\n          ttl: 10,\n        },\n      },\n      multiCaching: {\n        store: ['memoryCaching', 'redisCaching'],\n        options: {\n          ttl: 100,\n        },\n      },\n    },\n  },\n  redis: {\n    clients: {\n      default: {\n        port: 6379,\n        host: '127.0.0.1',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Timer Trigger Function in Alibaba Cloud with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a function triggered by a timer event in Alibaba Cloud Function Compute using Midway.js. It uses the `@ServerlessTrigger` decorator to bind the function to the `TIMER` trigger type. The function receives a `TimerEvent` object as input, logs it, and returns 'hello world'. It depends on the `@midwayjs/core`, `@midwayjs/faas`, and `@midwayjs/fc-starter` packages for dependency injection, serverless function context, and timer event definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\nimport type { TimerEvent } from '@midwayjs/fc-starter';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.TIMER)\n  async handleTimerEvent(event: TimerEvent) {\n    this.ctx.logger.info(event);\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Environment Variable Setup\nDESCRIPTION: This snippet demonstrates how to set a global environment variable in a `jest.setup.js` file. Setting environment variables allows configuring different behaviors during testing.  This is particularly useful for controlling feature flags or database connections.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.setup.js\nprocess.env.MIDWAY_TS_MODE = 'true';\n\n```\n\n----------------------------------------\n\nTITLE: Modify Koa Context Log Format\nDESCRIPTION: This TypeScript code demonstrates how to customize the log format for Koa context logs in a MidwayJS application. The `contextLoggerFormat` function allows you to define a custom format string that includes request-specific information such as user ID, request duration, and HTTP method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  koa: {\n    contextLoggerFormat: info => {\n      const ctx = info.ctx;\n      return '${info.timestamp} ${info.LEVEL} ${info.pid} [${ctx.userId} - ${Date.now() - ctx.startTime}ms ${ctx.method}] ${info.message}';\n    }\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Middleware in Configuration Lifecycle\nDESCRIPTION: This code shows how to load middleware within the application's lifecycle in `src/configuration.ts`. This provides an early point for custom processing.  The `generateMiddleware` method is called on the application instance to create a middleware from the class, and the `use` method is then used to register the middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/web_middleware.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { ILifeCycle } from '@midwayjs/core';\nimport { Application } from 'egg';\n\n@Configuration()\nexport class ContainerLifeCycle implements ILifeCycle {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(await this.app.generateMiddleware('reportMiddleware'));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrated Call with Path Parameter (Midway Hooks)\nDESCRIPTION: Illustrates an integrated call to the function defined with path parameters, passing the `name` parameter as part of the options. This shows how to call the endpoint and pass dynamic data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/file-route.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport getProject from './api/[name]/project';\nconst response = await getProject({\n  params: { name: 'midwayjs'}\n});\nconsole.log(response); // { name: 'midwayjs'}\n```\n\n----------------------------------------\n\nTITLE: Fixing Error Hiding in User Code\nDESCRIPTION: This code snippet addresses a bug where real errors thrown by user code were being hidden or masked. This fix ensures that developers receive accurate and detailed error messages when their code encounters issues, facilitating more effective debugging. The commit hash e728b0b provides a direct reference to the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_10\n\nLANGUAGE: N/A\nCODE:\n```\ne728b0b\n```\n\n----------------------------------------\n\nTITLE: Configure UploadMiddleware for Route\nDESCRIPTION: Configures the UploadMiddleware for a specific route using the @Post decorator. This middleware handles the parsing of multipart/form-data requests for file uploads.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post } from '@midwayjs/core';\nimport { UploadMiddleware } from '@midwayjs/busboy';\n\n@Controller('/')\nexport class HomeController {\n\n  @Post('/upload', { middleware: [UploadMiddleware] })\n  async upload(/*...*/) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing with MidwayJS Hooks Testing Library\nDESCRIPTION: This code demonstrates unit testing a MidwayJS API using the `@midwayjs/hooks-testing-library`. It creates a test application, defines setup and teardown logic, and uses `runFunction` to execute the API function and assert the output against a snapshot. Dependencies include `@midwayjs/hooks-testing-library` and the API module itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/application_integration.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, HooksApplication } from '@midwayjs/hooks-testing-library';\nimport api from '.';\n\ndescribe('test new features', () => {\n  let app: HooksApplication;\n  beforeAll(async () => {\n    app = await createApp();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  it('runFunction', async () => {\n    expect(await app.runFunction(api)).toMatchInlineSnapshot(`\n      Object {\n        \"message\": \"Hello World\",\n        \"method\": \"GET\",\n      }\n    `);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Kafka Context Logger Format in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to customize the output format of the Kafka context logger in MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  kafka: {\n    // ...\n    contextLoggerFormat: info => {\n      const { jobId, from } = info.ctx;\n      return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.message}`;\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Concat Pipeline Execution Example\nDESCRIPTION: Demonstrates the usage of the concat method of the Pipeline handler. It defines a Pipeline with 'videoFeeds', 'accountMap', and 'crowFeeds' and executes them in parallel. The returned result is an array where each element is the result of a valve.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline(['videoFeeds', 'accountMap', 'crowFeeds'])\n  stages: IPipelineHandler;\n\n  async runConcat(): Promise<any> {\n    // 这里并发执行 videoFeeds、accountMap、crowFeeds\n    return this.stages.concat<any>({\n      args: { aa: 123 },\n    });\n\n    // 这里返回的 result 是一个数组\n    /*\n    [\n    \t// 以 videoFeeds 作为第一个返回对象\n      [\n        {\n          videoId: '123',\n          videoUrl: 'https://www.taobao.com/xxx.mp4',\n          videoTitle: 'test 1 video'\n        }, {\n          videoId: '234',\n          videoUrl: 'https://www.taobao.com/xxx234.mp4',\n          videoTitle: 'test 2 video'\n        }, {\n          videoId: '456',\n          videoUrl: 'https://www.taobao.com/xxx456.mp4',\n          videoTitle: 'test 3 video'\n        }\n      ],\n      // 以 accountMap 作为第二个返回对象\n      {\n        id: 'test_account_id',\n        nick: 'test hello',\n        isFollow: true,\n      },\n      // 以 crowFeeds 作为第三个返回对象\n      {\n        title: 'test tab',\n        tabId: 'firstTab',\n        index: 0\n      }\n    ]\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update and Get Job Progress\nDESCRIPTION: This TypeScript snippet demonstrates how to update and retrieve the progress of a job using the `progress()` and `process()` methods of the `Job` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// 更新进度\nawait job.progress(60);\n// 获取进度\nconst progress = await job.process();\n// => 60\n```\n\n----------------------------------------\n\nTITLE: Dynamically Acquiring Instances in Middleware (TypeScript)\nDESCRIPTION: This code shows how to dynamically obtain instances within a middleware using the dependency injection container. It illustrates accessing instances from both the application context and the request context to retrieve services and associate them with requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserService, Middleware } from './service/user';\nimport { NextFunction, Context, Response } from '@midwayjs/express';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, Response, NextFunction> {\n\n  resolve() {\n  \treturn async (req, res, next) => {\n      const userService = await req.requestContext.getAsync<UserService>(UserService);\n      // ...\n      next();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Request with @midwayjs/mock\nDESCRIPTION: This TypeScript snippet demonstrates how to create an HTTP client using `createHttpRequest` from `@midwayjs/mock` for testing HTTP endpoints. It's used to simulate HTTP requests to the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a client request\nconst result = await createHttpRequest(app).get('/');\n// Test returns results\nexpect(result.text).toBe('Hello Midwayjs!');\n```\n\n----------------------------------------\n\nTITLE: WebSocket Default Configuration - TypeScript\nDESCRIPTION: This TypeScript code shows the default configuration for the `@midwayjs/ws` component. It sets the `port` property to `7001`, which specifies the port the WebSocket server will listen on.  This configuration resides in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  webSocket: {\n    port: 7001,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Property Decorator (@MemoryCache) in TypeScript\nDESCRIPTION: This code snippet defines a property decorator `@MemoryCache` using `createCustomPropertyDecorator`.  This decorator associates a unique key (`MEMORY_CACHE_KEY`) with the decorated property and stores the specified `key` value as metadata. The decorator logic itself is defined elsewhere.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/memoryCache.decorator.ts\nimport { createCustomPropertyDecorator } from '@midwayjs/core';\n\n// Unique id inside the decorator\nexport const MEMORY_CACHE_KEY = 'decorator:memory_cache_key';\n\nexport function MemoryCache(key?: string): PropertyDecorator {\n  return createCustomPropertyDecorator(MEMORY_CACHE_KEY, {\n    key\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache Expiration\nDESCRIPTION: Disables cache expiration by setting the TTL configuration property to 0. This means the cached value will never expire automatically.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.cache.set('key', 'value', 0);\n```\n\n----------------------------------------\n\nTITLE: Getting Cookie with Signed Option (TypeScript)\nDESCRIPTION: This example shows how to get a cookie with the `signed` option set to `false` in a Midway.js Koa application.  This is necessary when retrieving cookies set by the frontend or other systems to avoid verification errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nctx.cookies.get('frontend-cookie', {\n  signed: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Express Context Logging - Typescript\nDESCRIPTION: This code snippet shows how to customize the logging format for the Express framework's context.  The `contextLoggerFormat` function receives an `info` object and must return a formatted string.  The `info.ctx` provides access to the request (`req`) object. It extracts the userId from the session and calculates the request duration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/express.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  express: {\n    contextLoggerFormat: info => {\n      // 等价 req\n      const req = info.ctx;\n      const userId = req?.['session']?.['userId'] || '-';\n      return `${info.timestamp} ${info.LEVEL} ${info.pid} [${userId} - ${Date.now() - req.startTime}ms ${req.method}] ${info.message}`;\n    }\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model with @ApiProperty in Typescript\nDESCRIPTION: This snippet shows how to define a data model (`Cat`) for API responses using the `@ApiProperty` decorator in MidwayJS. Each field is annotated with `@ApiProperty` to provide metadata like examples and descriptions for Swagger documentation.  It requires the `@midwayjs/swagger` package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@midwayjs/swagger';\n\nexport class Cat {\n  @ApiProperty({ example: 'Kitty', description: 'The name of the Cat'}) \n  name: string;\n\n  @ApiProperty({ example: 1, description: 'The age of the Cat' })\n  age: number;\n\n  @ApiProperty({\n    example: 'Maine Coon',\n    description: 'The breed of the Cat',\n  })\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: UseFiles Hook Example (TypeScript)\nDESCRIPTION: This example illustrates how the `useFiles` hook retrieves uploaded files on the backend. The frontend sends a file with the field name 'pdf', and the backend receives an object containing information about the uploaded file, such as filename, path, fieldname, and mimeType.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/upload.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// frontend\nawait upload({ pdf });\n\n// backend\nconst files = useFiles();\n{\n  pdf: {\n    filename: 'test.pdf', // file original name\n    Data: '/var/tmp/xxx.pdf', // temporary file address of the server when mode is file\n    fieldname: 'test1', // form field name\n    mimeType: 'application/pdf', // mime\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering error codes using registerErrorCode in TypeScript\nDESCRIPTION: This snippet showcases how to register error codes with the MidwayJS framework using the `registerErrorCode` function. It ensures non-duplicate error codes within a specific group and formats them for easier debugging and counting. Requires importing `registerErrorCode` from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_error.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerErrorCode } from '@midwayjs/core';\n\nexport const FrameworkErrorEnum = registerErrorCode('midway', {\n  UNKNOWN: 10000,\n  COMMON: 10001,\n  PARAM_TYPE: 10002,\n\t// ...\n} as const);\n```\n\n----------------------------------------\n\nTITLE: Testing MNS Triggers (MidwayJS, TypeScript)\nDESCRIPTION: This snippet shows how to test MNS (Message Notification Service) triggers. It uses `getServerlessInstance` to obtain an instance and invokes the handler function directly with mocked MNS event data using `mockMNSEvent` from `@midwayjs/fc-starter`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\nimport { mockMNSEvent } from '@midwayjs/fc-starter';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from oss trigger', async () => {\n    // ...\n    const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n    expect(await instance.handleMNSEvent(mockMNSEvent())).toEqual('hello world');\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Object Array Type with ApiProperty\nDESCRIPTION: This TypeScript code shows how to define a property as an array of complex objects using `getSchemaPath` within the `@ApiProperty` decorator. The `@ApiExtraModel` decorator is used to declare additional external types.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty, getSchemaPath, ApiExtraModel } from '@midwayjs/swagger';\n\nclass Cat {\n  // ...\n}\n\n@ApiExtraModel(Cat)\nexport class CreateCatDto {\n  // ...\n\n  @ApiProperty({\n    type: 'array',\n    items: {\n      $ref: getSchemaPath(Cat)\n    }\n  })\n  relatedList: Cat[];\n}\n```\n\n----------------------------------------\n\nTITLE: Role-Based Auth Guard (TypeScript)\nDESCRIPTION: This code implements a role-based authentication guard. It retrieves role information from the method's metadata (using `getPropertyMetadata` from `@midwayjs/core`) and checks if the user's role (assumed to be stored in `context.user.role`) is included in the allowed roles. It relies on a custom `ROLE_META_KEY` and assumes the context contains user role information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IMiddleware, Guard, IGuard, getPropertyMetadata } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { ROLE_META_KEY } from '../decorator/role.decorator.ts';\n\n@Guard()\nexport class AuthGuard implements IGuard<Context> {\n  async canActivate(context: Context, supplierClz, methodName: string): Promise<boolean> {\n    // 从类元数据上获取角色信息\n    const roleNameList = getPropertyMetadata<string[]>(ROLE_META_KEY, supplierClz, methodName);\n    if (roleNameList && roleNameList.length && context.user.role) {\n      // 假设中间件已经拿到了用户角色信息，保存到了 context.user.role 中\n      // 直接判断是否包含该角色\n      return roleNameList.includes(context.user.role);\n    }\n\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Store\nDESCRIPTION: Configures a third-party cache store (node-cache-manager-ioredis-yet) in the `config.default.ts` file.  This requires installing the specific store engine.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { redisStore } from 'cache-manager-ioredis-yet';\n\nexport default {\n  cacheManager: {\n    clients: {\n      default: {\n        store: redisStore,\n        options: {\n          port: 6379,\n          host: 'localhost',\n          ttl: 10,\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BullMQ Configuration\nDESCRIPTION: This TypeScript code snippet shows the basic configuration for BullMQ, including the Redis connection details like host and port. This configuration is typically placed in `config.default.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  bullmq: {\n    defaultConnection: {\n      host: '127.0.0.1',\n      port: 6379,\n    },\n    // 可选，队列前缀\n    defaultPrefix: '{midway-bullmq}',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Throw Built-in Http Error\nDESCRIPTION: This snippet shows how to throw a built-in HTTP error in MidwayJS using the `httpError` object from `@midwayjs/core`. It demonstrates throwing an `InternalServerErrorError`, which results in a 500 status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { httpError } from '@midwayjs/core';\n\n// ...\n\nasync findAll() {\n  // something wrong\n  throw new httpError.InternalServerErrorError();\n}\n\n// got status: 500\n\n```\n\n----------------------------------------\n\nTITLE: Creating a User Service in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a simple user service in MidwayJS using TypeScript. The `@Provide` decorator marks the class as a service that can be injected into other components. The `getUser` method returns a user object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/user.ts\nimport { Provide } from '@midwayjs/decorator';\n\n@Provide()\nexport class UserService {\n  async getUser(id: number) {\n    return {\n      id,\n      name: 'Harry',\n      age: 18,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding properties to Context in a Middleware (Web)\nDESCRIPTION: This TypeScript code shows how to create a middleware that adds a custom property 'abc' to the context (ctx) object. This middleware can then be used to access this property in subsequent handlers or middlewares.  It assumes the existence of a `Context` type definition from `egg` or a similar framework. The middleware is defined using `@Provide()` and implements `IWebMiddleware`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/context_definition.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from 'egg';   // 或者其他上层框架导出的 Context\n\n@Provide()\nexport class ReportMiddleware implements IWebMiddleware {\n\n  resolve() {\n    return async (ctx: Context, next) => {\n\n      ctx.abc = '123';\n      await next();\n\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Packages with `midway-version -u` (npm)\nDESCRIPTION: This command initiates the update process for Midway packages, prompting the user to update to the latest versions. This assists in resolving version conflicts and ensures the project benefits from the latest features and bug fixes in the Midway framework. The `-u` flag triggers the update prompt, and `npx` allows running the `midway-version` package without global installation, catering to community users.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_update_midway.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Community user\n$ npx midway-version -u\n# Internal user\n$ tnpx @ali/midway-version -u\n```\n\n----------------------------------------\n\nTITLE: Disable Clearing Repeat Jobs on Startup\nDESCRIPTION: This TypeScript snippet shows how to disable the automatic clearing of previous unscheduled repeat jobs on startup. Setting `clearRepeatJobWhenStart` to `false` in the configuration prevents the framework from clearing the repeat job queue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.prod.ts\nexport default {\n  // ...\n  bull: {\n    clearRepeatJobWhenStart: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Calling API with request headers (fullstack)\nDESCRIPTION: This code shows how to call an API endpoint with request headers in a full-stack Midway Hooks application. It passes the headers as an object during the function call.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport getAuth from './api/auth';\nconst response = await getAuth({\n  headers: { token: '123456' },\n});\nconsole.log(response); // { token: '123456' }\n```\n\n----------------------------------------\n\nTITLE: Setting timezone in TypeORM Configuration in TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to configure the timezone in TypeORM to match the MySQL database timezone. This ensures that dates are correctly interpreted and displayed in the application, aligning with the database's timezone settings. The `timezone` property is set to '+08:00', which is the timezone for China Standard Time (CST).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  typeorm: {\n    dataSource: {\n      default: {\n        type: 'mysql',\n        // ...\n        timezone: '+08:00',\n      },\n    },\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mocking Data in MidwayJS (TypeScript)\nDESCRIPTION: This code defines a MidwayJS mock class that simulates weather data for a specific city ID. It uses the `MidwayMockService` to override the `getWeather` method of the `WeatherService`. The `enableCondition` method specifies the environments (local, test, unittest) in which the mock is active.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/mock/data.mock.ts\nimport {\n   Mock,\n   ISimulation,\n   apps,\n   Inject,\n   IMidwayApplication,\n   MidwayMockService,\n} from '@midwayjs/core';\nimport { WeatherService } from '../service/weather.service';\n\n@Mock()\nexport class WeatherDataMock implements ISimulation {\n   @App()\n   app: IMidwayApplication;\n\n   @Inject()\n   mockService: MidwayMockService;\n\n   async setup(): Promise<void> {\n     const originMethod = WeatherService.prototype.getWeather;\n     this.mockService.mockClassProperty(\n       WeatherService,\n       'getWeather',\n       async cityId => {\n         if (cityId === '101010100') {\n           return {\n             weatherinfo: {\n               city: 'Beijing',\n               cityid: '101010100',\n               temp: '27.9',\n               WD: 'South Wind',\n               WS: 'Less than level 3',\n               SD: '28%',\n               AP: '1002hPa',\n               njd: 'No live broadcast yet',\n               WSE: '<3',\n               time: '17:55',\n               sm: '2.1',\n               isRadar: '1',\n               Radar: 'JC_RADAR_AZ9010_JB',\n             },\n           };\n         } else {\n           return originMethod.apply(this, [cityId]);\n         }\n       }\n     );\n   }\n\n   enableCondition(): boolean | Promise<boolean> {\n     // Conditions for the mock class to be enabled\n     return ['local', 'test', 'unittest']. includes(this. app. getEnv());\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Board Base Path\nDESCRIPTION: This TypeScript configuration code demonstrates how to change the base path that serves the Bull Board UI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.prod.ts\nexport default {\n  // ...\n  bullBoard: {\n    basePath: '/ui',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Object in ESM (TypeScript)\nDESCRIPTION: This code shows an example of how to configure the module. Since you can no longer use `require` in ESM mode, you must use object mode for the configuration. The configuration part must use the object mode.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/esm.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport DefulatConfig from './config/config.default.js';\nimport UnittestConfig from './config/config.unittest.js';\n\n@Configuration({\n   importConfigs: [\n     {\n       default: DefulatConfig,\n       unittest: UnittestConfig,\n     },\n   ],\n})\nexport class MainConfiguration {\n   //...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Casbin Component\nDESCRIPTION: This code snippet demonstrates how to enable the Casbin component in your MidwayJS application by importing it in the `configuration.ts` file.  This registers the Casbin module and makes it available for use in your application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as casbin from '@midwayjs/casbin';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    // ...\n    casbin\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Validate Error Status\nDESCRIPTION: Configures the error status for validation failures using the @Validate decorator. Sets the errorStatus to 422.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\nimport { Controller, Get, Provide } from '@midwayjs/core';\nimport { Validate } from '@midwayjs/validate';\nimport { UserDTO } from './dto/user';\n\n@Controller('/api/user')\nexport class HomeController {\n  @Post('/')\n  @Validate({\n    errorStatus: 422,\n  })\n  async updateUser(@Body() user: UserDTO) {\n    // user.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing processAgent in configuration.ts (Midway)\nDESCRIPTION: Imports and integrates the @midwayjs/process-agent module into the Midway application's configuration. This step is essential for enabling the agent's functionalities, such as ensuring certain methods run only in the primary process and handling inter-process communication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/process_agent.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as processAgent from '@midwayjs/process-agent';\n\n@Configuration({\n  imports: [\n    // ...\n    processAgent\n  ],\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Dependency Injection Container Using @ApplicationContext (TypeScript)\nDESCRIPTION: This snippet illustrates how to obtain the MidwayJS dependency injection container using the `@ApplicationContext` decorator.  The decorator injects the container instance into a class property, allowing access to the container's API for dynamic service retrieval.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationContext, IMidwayContainer } from '@midwayjs/core';\n\n@Provide()\nexport class BootApp {\n\n  @ApplicationContext()\n  applicationContext: IMidwayContainer; // You can also replace it with the app definition of the actual framework here.\n\n  async invoke() {\n\n    // this.applicationContext\n\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session in @midwayjs/web\nDESCRIPTION: This code demonstrates how to access and modify session data within a Midway.js web controller. It uses `ctx.session` to read and update session values.  It increments a 'visited' counter on each request. Dependencies: @midwayjs/decorator, egg.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide, Inject } from '@midwayjs/decorator';\nimport { Context } from 'egg';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // 获取 Session 上的内容\n    const userId = this.ctx.session.userId;\n    // ...\n\n    // 修改 Session 的值\n    this.ctx.session.visited = this.ctx.session.visited ? this.ctx.session.visited + 1 : 1;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Access env vars in config in MidwayJS\nDESCRIPTION: This TypeScript code shows how to access environment variables in MidwayJS configuration files using `process.env`. It demonstrates how environment variables loaded by libraries like `dotenv` can be used to configure application settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\n\nexport const oss = {\n   accessKey: process.env.OSS_ACCESSKEY, // 54321\n   secret: process.env.OSS_SECRET // 12345\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding forceExit in Jest Configuration (JavaScript)\nDESCRIPTION: This JavaScript code modifies the Jest configuration to include the `forceExit` property set to `true`. This ensures that the Jest process exits after the tests are completed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures'],\n  coveragePathIgnorePatterns: ['<rootDir>/test/'],\n  forceExit: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Transport in Configuration\nDESCRIPTION: This code snippet shows how to use a custom transport in the Midway.js logger configuration. It defines a custom transport named 'custom' within the transports section of the midwayLogger configuration.  The configuration includes specific options for the custom transport, such as the directory and file log name. This configuration is part of the midwayLogger configuration in a MidwayConfig object. Requires `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        custom: {\n          dir: 'xxxx',\n          fileLogName: 'xxx',\n          // ...\n        }\n      }\n    }\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Importing Application from @midwayjs/koa\nDESCRIPTION: This code shows how to import the Application object from the `@midwayjs/koa` package. This specific import is used when working with Koa-based applications in Midway.js.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application } from '@midwayjs/koa';\n```\n\n----------------------------------------\n\nTITLE: Using DTO in Request Body\nDESCRIPTION: This TypeScript code snippet demonstrates how to use a DTO (CreateCatDto) as the body of a POST request. Swagger automatically identifies the DTO and generates the corresponding schema.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('/:id', { summary: 'test'})\nasync create(@Body() createCatDto: CreateCatDto, @Param('id') id: number) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using QueryBuilder - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the QueryBuilder in TypeORM with MidwayJS. It constructs a complex SQL query to select published photos with specific names, order them by ID, and implement pagination. It joins the `metadata` and `albums` relations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlet photos = await this.photoModel\n    .createQueryBuilder(\"photo\") // first argument is an alias. Alias is what you are selecting - photos. You must specify it.\n    .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n    .leftJoinAndSelect(\"photo.albums\", \"album\")\n    .where(\"photo.isPublished = true\")\n    .andWhere(\"(photo.name = :photoName OR photo.name = :bearName)\")\n    .orderBy(\"photo.id\", \"DESC\")\n    .skip(5)\n    .take(10)\n    .setParameters({ photoName: \"My\", bearName: \"Mishka\" })\n    .getMany();\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors with Error Filter\nDESCRIPTION: This snippet demonstrates how to handle `MidwayValidationError` exceptions using an error filter. The filter catches the validation error, extracts the error message, and returns a custom error response with a 422 status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/validate.filter\nimport { Catch } from '@midwayjs/core';\nimport { MidwayValidationError } from '@midwayjs/validate';\nimport { Context } from '@midwayjs/koa';\n\n@Catch(MidwayValidationError)\nexport class ValidateErrorFilter {\n  async catch(err: MidwayValidationError, ctx: Context) {\n    // ...\n    return {\n      status: 422,\n      message: '校验参数错误,' + err.message,\n    };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Default Pipes for Decorators in MidwayJS\nDESCRIPTION: This code shows how to register default pipes for a parameter decorator using `decoratorService` in a MidwayJS configuration. The `registerParameterPipes` method implicitly registers pipes that execute before any explicitly passed pipes. Requires `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipe.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  async onReady(container: IMidwayContainer) {\n    // register default pipe\n    this.decoratorService.registerParameterPipes('reg-valid', [\n      CutPipe,\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CasbinEnforcerService for API Authentication\nDESCRIPTION: This TypeScript code snippet illustrates how to use the `CasbinEnforcerService` directly within a Guard to perform API authentication. It checks if the user has the necessary permissions to access a specific resource and action.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CasbinEnforcerService } from '@midwayjs/casbin';\nimport { Guard, IGuard } from '@midwayjs/core';\n\n@Guard()\nexport class UserGuard extends IGuard {\n\n  @Inject()\n  casbinEnforcerService: CasbinEnforcerService;\n\n  async canActivate(ctx, clz, methodName) {\n    // 用户登录了，并且是特定的方法，则检查权限\n    if (ctx.user && methodName === 'findAllUsers') {\n      return await this.casbinEnforcerService.enforce(ctx.user, 'USER_ROLES', 'read');\n    }\n    // 未登录用户不允许访问\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Handling - Client-Side - TypeScript\nDESCRIPTION: This example demonstrates how to send metadata from the client to the server using the `metadata` option in the service method call.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Metadata } from '@grpc/grpc-js';\n\nconst meta = new Metadata();\nmeta.add('key', 'value');\n\nconst result = await service\n  .sayHello({\n    metadata: meta,\n  })\n  .sendMessage({\n    name: 'harry',\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Data Source\nDESCRIPTION: This code snippet demonstrates how to configure the TypeORM data source within a Midway application's configuration file.  It shows an example configuration for a MySQL database, including connection details such as host, port, username, password, and database name. It defines a default datasource.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typeorm/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  typeorm: {\n    dataSource: {\n      default: {\n        type: 'mysql',\n        host: '',\n        port: 3306,\n        username: '',\n        password: '',\n        database: undefined,\n        synchronize: true,\n        logging: false,\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Object Type with ApiProperty\nDESCRIPTION: This TypeScript code demonstrates how to define a property as a complex object type using the `Type` attribute in the `@ApiProperty` decorator. This allows Swagger to generate a schema for the nested object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Cat {\n  /**\n   * The name of the Catcomment\n   * @example Kitty\n   */\n  @ApiProperty({ example: 'Kitty', description: 'The name of the Cat'}){\n  @ApiProperty({ example: 'Kitty', description: 'The name of the Cat'}) name: string;\n\n  @ApiProperty({ example: 1, description: 'The age of the Cat' }) age: number;\n\n  @ApiProperty({ example: '2022-12-12 11:11:11', description: 'The age of the CatDSate' }) agedata?: Date;\n\n  @ApiProperty({\n    example: 'Maine Coon',\n    description: 'The breed of the Cat',\n  })\n  breed: string;\n}\n\nexport class CreateCatDto {\n\n  // ...\n\n  @ApiProperty({\n    Type: Cat, // There is no need to specify example here.\n  })\n  related: Cat;\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL2 Connection Example\nDESCRIPTION: This example demonstrates a basic MySQL2 connection and query using the official MySQL2 library. It shows how to create a connection, execute a query, and handle results.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// get the client\nconst mysql = require('mysql2');\n\n// create the connection to database\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  database: 'test'\n});\n\n// simple query\nconnection.query(\n  'SELECT * FROM `table` WHERE `name` = \"Page\" AND `age` > 45',  function(err, results, fields) {\n    console.log(results); // results contains rows returned by server\n    console.log(fields); // fields contains extra meta data about results, if available\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple ETCD Instances\nDESCRIPTION: This TypeScript code shows how to configure multiple ETCD client instances in the `config.default.ts` file.  It defines multiple clients within the `etcd.clients` object, each with its own configuration (e.g., `host`). Note that the code contains syntax errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/etcd.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  //...\n  etcd: {\n    clients: {\n      instance1: {\n        {\n          host: [\n            '127.0.0.1:2379'\n          ]\n        },\n      },\n  instance2: {\n        {\n          host: [\n            '127.0.0.1:2379'\n          ]\n        },\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Instance Priority (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the priority of different client instances using the `clientPriority` property in the `httpClient` configuration. Instance priorities determine precedence in various scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nimport { DEFAULT_PRIORITY } from '@midwayjs/core';\n\nexport default {\n  httpClient: {\n    clients: {\n      default: {\n        baseUrl: ''\n      },\n      default2: {\n        baseUrl: ''\n      }\n    },\n    clientPriority: {\n      default: DEFAULT_PRIORITY.L1,\n      default2: DEFAULT_PRIORITY.L2,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Call Captcha Service - Controller Example\nDESCRIPTION: Demonstrates how to use the CaptchaService within a MidwayJS controller to generate and verify captcha codes. It includes examples for image, formula, and text-based captchas, as well as SMS and email verification code implementations (using placeholder sendSMS and sendEmail functions).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/captcha.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Inject } from '@midwayjs/core';\nimport { CaptchaService } from '@midwayjs/captcha';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx;\n\n  @Inject()\n  captchaService: CaptchaService;\n\n  // Example: Get Image Captcha\n  @Get('/get-image-captcha')\n  async getImageCaptcha() {\n    const { id, imageBase64 } = await this.captchaService.image({ width: 120, height: 40 });\n    return {\n      id,          // verification code id\n      imageBase64, // The base64 data of the captcha SVG image can be directly put into the img tag of the front end\n    }\n  }\n\n  // Example: Get Calculation Expression Verification Code\n  @Get('/get-formula-captcha')\n  async getFormulaCaptcha() {\n    const { id, imageBase64 } = await this.captchaService.formula({ noise: 1 });\n    return {\n      id,          // verification code id\n      imageBase64, // The base64 data of the captcha SVG image can be directly put into the img tag of the front end\n    }\n  }\n\n  // Verify that the verification code is correct\n  @Post('/check-captcha')\n  async getCaptcha() {\n    const { id, answer } = this.ctx.request.body;\n    const passed: boolean = await this.captchaService.check(id, answer);\n    if (passed) {\n      return 'passed';\n    }\n    return 'error';\n  }\n\n  // Example: SMS verification code\n  @Post('/sms-code')\n  async sendSMSCode() {\n    // Verify that the verification code is correct\n    const { id, text: code } = await this.captchaService.text({ size: 4 });\n    await sendSMS(18888888888, code);\n    return { id }\n  }\n\n  // Example: Email verification code\n  @Post('/email-code')\n  async sendEmailCode() {\n    // Verify that the verification code is correct\n    const { id, text: code } = await this.captchaService.text({ type: 'number'});\n    await sendEmail('admin@example.com', code);\n    return { id }\n  }\n\n   // Example: Stuffing arbitrary text content into a captcha\n  @Get('/test-text')\n  async testText() {\n    // Save the content and get the verification code id\n    const id: string = await this.captchaService.set('123abc');\n    // According to the verification code id, verify whether the content is correct\n    const passed: boolean = await this.captchaService.check(id, '123abc');\n    return {\n      passed: passed === true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Access Prometheus Targets\nDESCRIPTION: Accesses the Prometheus targets page to verify that the application's metrics are being collected.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nhttp://${prometheus ip}:9090/classic/targets\n```\n\n----------------------------------------\n\nTITLE: Configure Lazy Logger Initialization\nDESCRIPTION: This code snippet demonstrates how to configure lazy initialization for a logger. By setting `lazyLoad` to `true`, the logger will only be initialized when it's first used, either through `getLogger` or `@Logger` injection. This is useful for dynamically created loggers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      customLoggerA: {\n        level: 'DEBUG',\n      },\n      customLoggerB: {\n        lazyLoad: true,\n      },\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Associating API Security with a Controller (MidwayJS, TypeScript)\nDESCRIPTION: This snippet shows how to associate the previously configured API key authentication with a specific controller. It uses the `@ApiSecurity` decorator, passing the authentication name defined in the configuration. This requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiSecurity('api_key')\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Providing gRPC consumer configuration\nDESCRIPTION: This code shows how to configure the gRPC consumer in the `src/config/config.default.ts` file. It specifies the URL, proto path, and package name of the gRPC service to be consumed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nimport { DefaultConfig } from '@midwayjs/grpc';\nimport { join } from 'path';\n\nexport const grpc = {\n  services: [\n    {\n      url: 'localhost:6565',\n      protoPath: join(__dirname, '../../proto/helloworld.proto'),\n      package: 'helloworld',\n    },\n  ],\n} as DefaultConfig;\n```\n\n----------------------------------------\n\nTITLE: Mocking Context Properties with MidwayMockService (TypeScript)\nDESCRIPTION: This example demonstrates how to use `mockContext` to simulate properties on the Midway Context object. It illustrates both direct value assignment and using a callback function for more complex mocking scenarios, including the usage of default and custom groups.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayMockService, Configuration, App } from '@midwayjs/core';\n\n@Configuration(/**/)\nexport class MainConfiguration {\n  @Inject()\n  mockService: MidwayMockService;\n\n  @App()\n  app;\n\n  async onReady() {\n    // Simulate context, default group\n    this.mockService.mockContext(app, 'user', 'midway');\n    // Custom group\n    this.mockService.mockContext(app, 'user', 'midway', 'group1');\n  }\n}\n\n// ctx.user => midway\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayMockService, Configuration, App } from '@midwayjs/core';\n\n@Configuration(/**/)\nexport class MainConfiguration {\n  @Inject()\n  mockService: MidwayMockService;\n\n  @App()\n  app;\n\n  async onReady() {\n    // Simulate context\n    this.mockService.mockContext(app, (ctx) => {\n      ctx.user = 'midway';\n    }, 'group2');\n  }\n}\n\n// ctx.user => midway\n```\n\n----------------------------------------\n\nTITLE: Configuring the bull component\nDESCRIPTION: This TypeScript code demonstrates how to import and configure the bull component within a MidwayJS application. It imports the necessary modules and adds bull to the imports array in the @Configuration decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as bull from '@midwayjs/bull';\n\n@Configuration({\n  imports: [\n    // ...\n    bull\n  ]\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Use COS Service\nDESCRIPTION: This code demonstrates how to inject and use the `COSService` to upload a file to Tencent Cloud COS. It uses `sliceUploadFile` method which requires `Bucket`, `Region`, `Key`, and `FilePath` parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cos.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Controller, Inject, Get } from '@midwayjs/decorator';\nimport { CosService } from '@midwayjs/cos';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  cosService: COSService;\n\n  async invoke() {\n    await this.cosService.sliceUploadFile({\n      Bucket: 'test-1250000000',\n      Region: 'ap-guangzhou',\n      Key: '1.zip',\n      FilePath: './1.zip'\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling MidwayJS Upload Component\nDESCRIPTION: Enables the `@midwayjs/upload` component in a MidwayJS application by importing it into the `Configuration` and adding it to the `imports` array. This registers the component and makes its functionalities available throughout the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as upload from '@midwayjs/upload';\n\n@Configuration({\n   imports: [\n     // ...other components\n     upload\n   ],\n   //...\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: NPM Script Configuration for Development and Production\nDESCRIPTION: This JSON snippet shows the npm scripts used for starting the MidwayJS application in both development and production environments. It uses `midway-bin dev` for development with TypeScript support and `node` for production, specifying the bootstrap file.  The `cross-env` package is used to set environment variables consistently across platforms.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"start\": \"NODE_ENV=production node ./bootstrap.js\",\n  \"dev\": \"cross-env NODE_ENV=local midway-bin dev --ts --entryFile=bootstrap.js\",\n  \"test\": \"midway-bin test --ts\",\n  \"cov\": \"midway-bin cov --ts\",\n  ...\n},\n```\n\n----------------------------------------\n\nTITLE: Setting redirect using Redirect\nDESCRIPTION: This snippet demonstrates how to set a redirect using the `Redirect` function from `@midwayjs/hooks`.  It redirects from `/demo` to `/hello`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Redirect,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get('/demo'),\n  Redirect('/hello'),\n  async () => {}\n);\n```\n\n----------------------------------------\n\nTITLE: Clearing container cache when testing - Bug fix\nDESCRIPTION: This snippet represents a bug fix to clear the container cache when running tests. This ensures that each test starts with a clean state and avoids interference from previous test runs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: BullMQ Configuration with Authentication\nDESCRIPTION: This TypeScript configuration shows how to configure BullMQ with Redis authentication using a password.  Place this in `config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  bullmq: {\n    defaultConnection: {\n      port: 6379,\n      host: '127.0.0.1',\n      password: 'foobared',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying configuration.ts to import Hooks module (TypeScript)\nDESCRIPTION: This code snippet shows how to import the `hooks` function from `@midwayjs/hooks` and include it in the `imports` array within the `@Configuration` decorator. This integrates the Hooks module into the Midway.js application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_bff.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n import { Configuration } from '@midwayjs/decorator';\n import { ILifeCycle } from '@midwayjs/core';\n import { join } from 'path';\n+import { hooks } from '@midwayjs/hooks'\n\n @Configuration({\n   importConfigs: [join(__dirname, './config/')],\n   conflictCheck: true,\n+  imports: [\n+    hooks()\n+  ]\n })\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration Outside Project - TypeScript\nDESCRIPTION: Demonstrates loading a configuration file located outside of the project's `src` directory using an absolute path. Requires importing `Configuration` from `@midwayjs/core` and `join` from `path`.  Use `*.js` suffix.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport { join } from 'path';\n\n@Configuration({\n   importConfigs: [\n     join(__dirname, './config/'),\n     join(__dirname, '../customConfig.default'),\n   ]\n})\nexport class MainConfiguration {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Session in @midwayjs/koa\nDESCRIPTION: This code demonstrates how to access and modify session data within a Midway.js Koa controller. It uses `ctx.session` to increment a 'visits' counter on each request. Dependencies: @midwayjs/decorator, @midwayjs/koa.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.session.visits = this.ctx.session.visits ? this.ctx.session.visits + 1 : 1;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Global Koa Middleware Configuration in Midway Hooks\nDESCRIPTION: This example demonstrates how to integrate Koa middleware (e.g., `@koa/cors`) as a global middleware in Midway Hooks. It configures the `hooks` function with an array including both a custom middleware (`logger`) and a Koa middleware instance (`cors()`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/middleware.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  hooks,\n  createConfiguration\n} from '@midwayjs/hooks';\nimport logger from './logger';\nimport cors from '@koa/cors';\n\n// Global Middleware\nexport default createConfiguration({\n  imports: [\n    hooks({\n      // highlight-start\n      middleware: [logger, cors()]\n      // highlight-end\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing View Component in Configuration\nDESCRIPTION: This code snippet shows how to import the view component (@midwayjs/view-ejs in this case) into the application's configuration file (src/configuration.ts). It also includes the configuration directory. This integration enables the view functionality within the Midway.js application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as view from '@midwayjs/view-ejs';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    // ...\n    view\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class ContainerLifeCycle {\n}\n```\n\n----------------------------------------\n\nTITLE: bull configuration with account password\nDESCRIPTION: This TypeScript code shows bull configuration with Redis account and password setup.  All queues will reuse this configuration. Replace the credentials and server details with your actual Redis instance details.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  bull: {\n    defaultQueueOptions: {\n      redis: {\n        port: 6379,\n        host: '127.0.0.1',\n        password: 'foobared',\n      },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Method Decorator (@LoggingTime) in TypeScript\nDESCRIPTION: This code defines a custom method decorator named `@LoggingTime`. It uses `createCustomMethodDecorator` to create the decorator, associating it with a unique key (`LOGGING_KEY`). The decorator takes an optional `formatUnit` parameter to customize the time display format.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/logging.decorator.ts\nimport { createCustomMethodDecorator } from '@midwayjs/core';\n\n// 装饰器内部的唯一 id\nexport const LOGGING_KEY = 'decorator:logging_key';\n\nexport function LoggingTime(formatUnit = 'ms'): MethodDecorator {\n  // 我们传递了一个可以修改展示格式的参数\n  return createCustomMethodDecorator(LOGGING_KEY, { formatUnit });\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration Example\nDESCRIPTION: This code snippet shows a basic `jest.config.js` file. It sets the preset to 'ts-jest', the test environment to 'node', and ignores specific paths for testing and coverage.  This configuration is standard for TypeScript-based Jest projects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures'],\n  coveragePathIgnorePatterns: ['<rootDir>/test/'],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Task History Retention (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the default number of task records to keep after completion for all queues in the application. The `defaultJobOptions.removeOnComplete` setting within the `bull` configuration in `config.default.ts` specifies the maximum number of records to retain by default.  Configuration file: `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  bull: {\n    defaultQueueOptions: {\n      // default job configuration\n      defaultJobOptions: {\n        // Keep 10 records\n        removeOnComplete: 10,\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Add Locale Message (Typescript)\nDESCRIPTION: Demonstrates dynamically adding a locale message using the `addLocale` method of the `MidwayI18nService`. This is useful for loading translations from external sources like databases.  Requires `@midwayjs/i18n`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\n// ...\n@Configuration({\n  imports: [\n    koa\n    i18n\n  ]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  i18nService: MidwayI18nService;\n\n  async onReady() {\n    this.i18nService.addLocale('zh_TW', {\n      hello: '你好，{username} 美麗的世界'\n    });\n  }\n\n\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nasync index(@Query('username') username: string) {\n  return this.i18nService.translate('hello', {\n    args: [username]\n    locale: 'zh_TW'\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating `relationship` Table in SQL\nDESCRIPTION: This SQL script defines the structure of the `relationship` table. It includes fields for `id`, `tid`, `oid`, `created_at`, and `update_at`. The `id` is an auto-incrementing primary key. The `tid` and `oid` likely represent foreign keys to other tables.  The `created_at` and `update_at` fields are timestamps with default values and automatic updates.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `relationship` (\n    `id` BIGINT unsigned NOT NULL AUTO_INCREMENT,\n    `tid` BIGINT unsigned NOT NULL,\n    `oid` BIGINT unsigned NOT NULL,\n    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    `update_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP  ON UPDATE CURRENT_TIMESTAMP NOT NULL,\n    PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Testing GET API endpoint with path parameters\nDESCRIPTION: This code demonstrates how to test a GET API endpoint with path parameters using `@midwayjs/mock`. It sends a GET request to the '/article/1' endpoint and asserts that the response body matches the expected output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Get Article', async () => {\n  const response = await createHttpRequest(app)\n    .get('/article/1')\n    .expect(200);\n\n  expect(response.body).toEqual({ article: '1' });\n});\n```\n\n----------------------------------------\n\nTITLE: Calling API with query parameters (fullstack)\nDESCRIPTION: This code shows how to call an API endpoint with query parameters in a full-stack Midway Hooks application.  It passes the query parameters as an object in the function call.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport getArticles from './api';\nconst response = await getArticles({\n  query: { page: '0', limit: '10' },\n});\nconsole.log(response); // { page: '0', limit: '10' }\n```\n\n----------------------------------------\n\nTITLE: Selecting a Service from Consul\nDESCRIPTION: This TypeScript snippet shows how to use the BalancerService to select a healthy service instance from Consul. It injects the BalancerService, calls the `select` method with the service name, and logs the service details.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/core';\nimport { BalancerService } from '@midwayjs/consul'\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  balancerService: BalancerService;\n\n  @Get('/')\n  async home() {\n    const service = await this.balancerService.getServiceBalancer().select('my-midway-project');\n\n    // output\n    console.log(service)\n\n    // ...\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ID: 'c434e36b-1b62-c4e1-c4ec-76c5d3742ff8',\n  Node: '1b2d5b8771cb',\n  Address: '127.0.0.1',\n  Datacenter: 'dc1',\n  TaggedAddresses: {\n    lan: '127.0.0.1',\n    lan_ipv4: '127.0.0.1',\n    wan: '127.0.0.1',\n    wan_ipv4: '127.0.0.1'\n  },\n  NodeMeta: { 'consul-network-segment': '' },\n  ServiceKind: '',\n  ServiceID: 'my-midway-project:xxx:7001',\n  ServiceName: 'my-midway-project',\n  ServiceTags: [ 'tag1', 'tag2' ],\n  ServiceAddress: 'xxxxx',\n  ServiceTaggedAddresses: {\n    lan_ipv4: { Address: 'xxxxx', Port: 7001 },\n    wan_ipv4: { Address: 'xxxxxx', Port: 7001 }\n  },\n  ServiceWeights: { Passing: 1, Warning: 1 },\n  ServiceMeta: {},\n  ServicePort: 7001,\n  ServiceEnableTagOverride: false,\n  ServiceProxy: { MeshGateway: {}, Expose: {} },\n  ServiceConnect: {},\n  CreateIndex: 14,\n  ModifyIndex: 14\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Services in config.default.ts\nDESCRIPTION: This TypeScript snippet shows how to configure gRPC services in the `config.default.ts` file of a Midway.js application. It defines the `grpcServer.services` array, which specifies the `protoPath` (absolute path to the proto file) and `package` (the package name defined in the proto file) for each gRPC service to be exposed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { MidwayAppInfo, MidwayConfig } from '@midwayjs/core';\n\nexport default (appInfo: MidwayAppInfo): MidwayConfig => {\n  return {\n    // ...\n    grpcServer: {\n      services: [\n        {\n          protoPath: join(appInfo.appDir, 'proto/hero.proto'),\n          package: 'hero',\n        },\n        {\n          protoPath: join(appInfo.appDir, 'proto/helloworld.proto'),\n          package: 'helloworld',\n        }\n      ],\n    }\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Add Jaeger Exporter (TypeScript)\nDESCRIPTION: Configures the OpenTelemetry SDK to use the Jaeger exporter. This involves installing the necessary dependencies, creating a `JaegerExporter` instance with optional configuration parameters (host, port, endpoint), and setting `traceExporter` and `textMapPropagator` during SDK initialization. Make sure Jaeger is set up before exporting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { JaegerExporter } = require('@opentelemetry/exporter-jaeger');\nconst { JaegerPropagator } = require('@opentelemetry/propagator-jaeger');\n// ...\n\nconst exporter = new JaegerExporter({\n  tags: [], // optional\n  // You can use the default UDPSender\n  host: 'localhost', // optional\n  port: 6832, // optional\n  // OR you can use the HTTPSender as follows\n  // endpoint: 'http://localhost:14268/api/traces',\n  maxPacketSize: 65000 // optional\n});\n\n// Initialize an open-telemetry SDK\nconst sdk = new NodeSDK({\n  traceExporter: exporter\n  textMapPropagator: new JaegerPropagator()\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Serverless Function with MidwayServerlessFunctionService - TypeScript\nDESCRIPTION: This code demonstrates how to add a serverless function using the `MidwayServerlessFunctionService`. It shows how to define a function handler and associate it with a trigger and function options. Dependencies: @midwayjs/core\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayServerlessFunctionService, Configuration, Inject } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  serverlessFunctionService: MidwayServerlessFunctionService;\n\n  async onReady() {\n    this.serverlessFunctionService.addServerlessFunction(async (ctx, event) => {\n      return 'hello world';\n    }, {\n      type: ServerlessTriggerType.HTTP,\n      metadata: {\n        method: 'get',\n        path: '/api/hello'\n      },\n      functionName: 'hello',\n      handlerName: 'index.hello',\n    });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting HTTP Request Context with useContext - TypeScript\nDESCRIPTION: This code snippet shows how to access the HTTP request context within a Midway Hooks function using the `useContext` hook. The context object (ctx) provides information about the current request, such as the path and method. It is commonly used in backend API implementations to access request details.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from '@midwayjs/hooks';\n\nexport async function getPath() {\n  // Get HTTP request context by Hooks\n  const ctx = useContext();\n  return ctx.path;\n}\n\nexport async function post(name: string) {\n  const ctx = useContext();\n\n  return {\n    message: `Hello ${name}!`, \n    method: ctx.method,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP Service Test Example\nDESCRIPTION: This comprehensive TypeScript example demonstrates a complete test case for an HTTP service in Midway.js. It shows how to create an application instance, make HTTP requests using `createHttpRequest`, and use Jest's `expect` or Node.js's `assert` for assertions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/koa';\nimport * as assert from 'assert';\n\ndescribe('test/controller/home.test.ts', () => {\n\n  let app: Application;\n\n  beforeAll(async () => {\n    // Create app only once and can be reused.\n    app = await createApp<Framework>();\n  });\n\n  afterAll(async () => {\n    // close app\n    await close(app);\n  });\n\n  it('should GET /', async () => {\n    // make request\n    const result = await createHttpRequest(app)\n      .get('/')\n      .set('x-timeout', '5000');\n\n    // use expect by jest\n    expect(result.status).toBe(200);\n    expect(result.text).toBe('Hello Midwayjs!');\n\n    // or use assert\n    assert.deepStrictEqual(result.status, 200);\n    assert.deepStrictEqual(result.text, 'Hello Midwayjs!');\n  });\n\n  it('should POST /', async () => {\n    // make request\n    const result = await createHttpRequest(app)\n      .post('/')\n      .send({id: '1'});\n\n    // use expect by jest\n    expect(result.status).toBe(200);\n  });\n\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating POST Request with Body Parameters (TypeScript)\nDESCRIPTION: This snippet shows how to create a POST request with body parameters using `createHttpRequest`. The `send` method is used to attach the body to the request. This example uses JSON as body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app).post('/user/catchThrowWithValidate').send({ id: '1' });\n```\n\n----------------------------------------\n\nTITLE: Create Koa Project with Midway CLI\nDESCRIPTION: These bash commands initialize a new MidwayJS project with the Koa framework using the Midway CLI. The `--type=koa-v3` option specifies that the project should be set up with Koa v3 as the underlying web framework.  The project will be created in a directory named `my_project`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm v6\n$ npm init midway --type=koa-v3 my_project\n\n# npm v7\n$ npm init midway -- --type=koa-v3 my_project\n```\n\n----------------------------------------\n\nTITLE: Importing and configuring the Nunjucks view component in Midway.js\nDESCRIPTION: This TypeScript code snippet shows how to import the @midwayjs/view-nunjucks component and configure it within a Midway.js application using the `@Configuration` decorator.  It imports the `view` module and adds it to the `imports` array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as view from '@midwayjs/view-nunjucks';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    view // import nunjucks components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional One-to-One Relationship\nDESCRIPTION: This code demonstrates how to define a bidirectional one-to-one relationship between PhotoMetadata and Photo entities using TypeORM. The `photo => photo.metadata` function in PhotoMetadata and `photoMetadata => photoMetadata.photo` in Photo specifies the inverse relationship, enabling navigation from both sides. Only one side should use @JoinColumn, marking it as the owner.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityModel } from '@midwayjs/orm';\nimport { Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { Photo } from './photo';\n\n@EntityModel()\nexport class PhotoMetadata {\n  /* ... other columns */\n\n  @OneToOne((type) => Photo, (photo) => photo.metadata)\n  @JoinColumn()\n  photo: Photo;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityModel } from '@midwayjs/orm';\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne } from 'typeorm';\nimport { PhotoMetadata } from './photoMetadata';\n\n@EntityModel()\nexport class Photo {\n\n  /* ... other columns */\n\n  @OneToOne(type => PhotoMetadata, photoMetadata => photoMetadata.photo)\n  metadata: PhotoMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration of importConfigs in TypeScript\nDESCRIPTION: This code enables the importConfigs feature in a MidwayJS configuration file, allowing the application to load configuration settings from specified directories. This is required for the entry file callback to work correctly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/multi_framework_start.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport { join } from 'path';\n\n@Configuration({\n  importConfigs: [\n    join(__dirname, './config/'), // 该功能依靠这段代码查找配置\n  ],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Model with mdl-gen-midway\nDESCRIPTION: This command generates a MySQL TypeORM model for a Midway.js project. It requires specifying the database host, port, name, username, and password. The `--noConfig` flag prevents the creation of tsconfig.json and ormconfig.json files, while `--case-property none` disables property name conversion.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/typeorm_generator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 推荐\n# 请替换配置信息\n$ npx mdl-gen-midway -h localhost -p 3306 -d yourdbname -u root -x yourpassword -e mysql --noConfig --case-property none\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with React plugin in Midway.js\nDESCRIPTION: This code snippet demonstrates how to configure Vite with the React plugin within a Midway.js full-stack application. It imports `defineConfig` from `@midwayjs/hooks-kit` and the `react` plugin from `@vitejs/plugin-react`. The `vite` configuration object is then used to specify the plugins, including the React plugin, for Vite. This setup allows Vite to handle React components during development and build processes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/config.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport react from '@vitejs/plugin-react';\nimport { defineConfig } from '@midwayjs/hooks-kit';\n\nexport default defineConfig({\n  vite: {\n    plugins: [react()],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Serverless Apollo Handler Setup (TypeScript)\nDESCRIPTION: This code demonstrates how to set up an Apollo Server handler in a Midway Serverless application using `apollo-server-midway`. It defines a Serverless function that acts as a GraphQL endpoint, specifying HTTP triggers for both GET and POST methods. It uses `createApolloServerHandler` to configure the Apollo Server with a path, application context, and schema resolvers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/graphql.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Provide,\n  Inject,\n  ServerlessTrigger,\n  ServerlessFunction,\n  ServerlessTriggerType,\n  App,\n} from '@midwayjs/decorator';\nimport { Context, IMidwayFaaSApplication } from '@midwayjs/faas';\nimport { createApolloServerHandler } from 'apollo-server-midway';\nimport { SampleResolver } from '../resolvers/sample.resolver';\nimport { DogResolver } from '../resolvers/dog.resolver';\nimport path from 'path';\n\nconst apolloHandlerFuncName = 'apollo-handler';\n\nconst APOLLO_SERVER_MIDWAY_PATH = '/apollo';\n\n@Provide()\nexport class HelloHTTPService {\n  @Inject()\n  ctx: Context;\n\n  @App()\n  app: IMidwayFaaSApplication;\n\n  @ServerlessFunction({\n    functionName: apolloHandlerFuncName,\n  })\n  @ServerlessTrigger(ServerlessTriggerType.HTTP, {\n    path: APOLLO_SERVER_MIDWAY_PATH,\n    method: 'get',\n  })\n  @ServerlessTrigger(ServerlessTriggerType.HTTP, {\n    path: APOLLO_SERVER_MIDWAY_PATH,\n    method: 'post',\n  })\n  async apolloHandler() {\n    return await createApolloServerHandler({\n      path: '/',\n      app: this.app,\n      context: this.ctx,\n      schema: {\n        resolvers: [SampleResolver, DogResolver],\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching with Custom Logic using @Caching in Midway\nDESCRIPTION: This example illustrates how to implement custom caching logic based on specific conditions, such as method parameters. The `cacheBy` function defines the caching behavior, returning a cache key (`'cache1'`) for certain inputs (`'harry'` or `'mike'`) and skipping caching for others. If the cache key is not returned, caching will be skipped for the method call.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\nfunction cacheBy({methodArgs, ctx, target}) {\n   if (methodArgs[0] === 'harry' || methodArgs[0] === 'mike') {\n     return 'cache1';\n   }\n}\n\n@Provide()\nexport class UserService {\n   @Caching('default', cacheBy, 100)\n   async getUser(name: string) {\n     return 'hello ' + name;\n   }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait userService.getUser('harry')); // hello harry\nawait userService.getUser('mike')); // hello harry\nawait userService.getUser('lucy')); // hello lucy\n```\n\n----------------------------------------\n\nTITLE: Disabling I18n Request Resolution - Typescript\nDESCRIPTION: This code disables the entire request resolution process for the i18n module. This means the application will no longer attempt to determine the language from the URL query parameters, cookies, or the `Accept-Language` header. Setting `resolver` to `false` also stops the write-back to cookies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  I18n: {\n    resolver: false,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware for Error Handling in @midwayjs/rpc - TypeScript\nDESCRIPTION: This code demonstrates how to implement middleware for handling errors in @midwayjs/rpc. The middleware catches exceptions thrown during the request and handles them based on the error status code. It imports `setupHttpClient` and the `Middleware` type from `@midwayjs/rpc`. It includes example error handling for 401 (Unauthorized) and 500 (Internal Server Error) status codes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/client.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupHttpClient } from '@midwayjs/rpc';\nimport type { Middleware } from '@midwayjs/rpc';\n\nconst ErrorHandler: Middleware = async (\n  ctx,\n  next\n) => {\n  try {\n    await next();\n  } catch (err) {\n    switch (err.status) {\n      case 401:\n        location.href = '/login';\n        break;\n      case 500:\n        alert('Internal Server Error');\n        break;\n      default:\n        alert(\n          `Unknown Error, status: ${err.status}`\n        );\n        break;\n    }\n  }\n};\n\nsetupHttpClient({\n  middleware: [ErrorHandler],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Swagger UI from Swagger-UI-Dist (MidwayJS, TypeScript)\nDESCRIPTION: This snippet configures MidwayJS to render the Swagger UI using the `swagger-ui-dist` package.  It imports the `renderSwaggerUIDist` function and assigns it to the `swaggerUIRender` option.  Additional options can be passed through `swaggerUIRenderOptions`. Requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { renderSwaggerUIDist } from '@midwayjs/swagger';\n\nexport default {\n   // ...\n   swagger: {\n     swaggerUIRender: renderSwaggerUIDist,\n     swaggerUIRenderOptions: {\n       // ...\n     }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Albums and Photos - TypeScript\nDESCRIPTION: This snippet demonstrates how to insert albums and photos into the database using TypeORM with MidwayJS. It creates album and photo objects, links them using the albums property, and saves everything.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { Album } from './entity/album.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  @InjectEntityModel(Album)\n  albumModel: Repository<Album>\n\n  async updatePhoto() {\n\n    // create a few albums\n    let album1 = new Album();\n    album1.name = \"Bears\";\n    await this.albumModel.save(album1);\n\n    let album2 = new Album();\n    album2.name = \"Me\";\n    await this.albumModel.save(album2);\n\n    // create a few photos\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.albums = [album1, album2];\n    await this.photoModel.save(photo);\n\n\n    // now our photo is saved and albums are attached to it\n    // now lets load them:\n    const loadedPhoto = await this.photoModel.findOne(1, { relations: [\"albums\"] });  // typeorm@0.2.x\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the generic wrapper class for response in TypeScript\nDESCRIPTION: This code snippet illustrates how to use the `SuccessWrapper` to define a return class for Swagger documentation in MidwayJS.  It extends `SuccessWrapper` with the specific `Cat` model and uses the resulting `ViewCat` class as the return type in the `@ApiResponse` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nclass ViewCat extends SuccessWrapper<Cat>(Cat) {}\n\n@Get('/:id')\n@ApiResponse({\n  status: 200,\n  description: 'The found record',\n  type: ViewCat\n})\nasync findOne(@Param('id') id: string, @Query('test') test: any): ViewCat {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Single Proxy Configuration (host)\nDESCRIPTION: This TypeScript code demonstrates a single HTTP proxy configuration using the host option in a MidwayJS application (src/config/config.default.ts). It matches URLs containing \"/tfs /\" and proxies them to 'https://gw.alicdn.com'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/http-proxy.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nexport default {\n  httpProxy: {\n    match: /\\/tfs \\//,\n    host: 'https://gw.alicdn.com',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Socket.IO Connection Event - TypeScript\nDESCRIPTION: Handles the 'connection' event in a Socket.IO controller using the `@OnWSConnection` decorator in MidwayJS. This decorator marks a method to be executed when a client connects to the specified Namespace. The `ctx` object represents the socket instance and can be injected via `@Inject()` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, OnWSConnection, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/socketio';\n\n@WSController('/')\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSConnection()\n  async onConnectionMethod() {\n    console.log('on client connect', this.ctx.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request with HttpClient - TypeScript\nDESCRIPTION: This snippet demonstrates a POST request with JSON data using the `HttpClient` class. It sets the `method` to 'POST', provides the data in the `data` property, sets `dataType` to 'json', and sets `contentType` to 'json'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from '@midwayjs/core';\n\nconst httpclient = new HttpClient();\nconst result = await httpclient.request('http://127.1:7001/', {\n  method: 'POST',\n  data: {\n    a: 1,\n    b: 2\n  },\n  dataType: 'json',\n  contentType:'json', \t// 发送的 post 为 json\n});\n\n// result.data ...\n```\n\n----------------------------------------\n\nTITLE: Multiple Proxy Configurations (strategy)\nDESCRIPTION: This TypeScript code demonstrates multiple HTTP proxy configurations using the strategy option in a MidwayJS application (src/config/config.default.ts). Each key in the strategy object defines a proxy with its own match, host, or target configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/http-proxy.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\n// Proxy configuration type\nexport default {\n  httpProxy: {\n    default: {\n      // Some multiplexed values for each policy will be merged with the following policies.\n    },\n    strategy: {\n      gw: {\n        // https://gw.alicdn.com/tfs/TB1.1EzoBBh1e4jSZFhXXcC9VXa-48-48.png\n        match: /\\/tfs \\//,\n        host: 'https://gw.alicdn.com',\n      },\n      g: {\n        // https://g.alicdn.com/mtb/lib-mtop/2.6.1/mtop.js\n        match: /\\/bdimg\\/(.*)$ /,\n        target: 'https://sm.bdimg.com/$1',\n      },\n      httpBin: {\n        // https://httpbin.org/\n        match: /\\/httpbin\\/(.*)$ /,\n        target: 'https://httpbin.org/$1',\n      },\n    },\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Injecting a Registered Object in MidwayJS (TypeScript)\nDESCRIPTION: This snippet shows how to inject a registered object into a class using the `@Inject` decorator. The injected object is accessed as a property of the class. The identifier used in `@Inject` must match the identifier used when registering the object with `registerObject`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class BaseService {\n\n  @Inject('lodash')\n  lodashTool;\n\n  async getUser() {\n    // this.lodashTool.defaults({ 'a': 1 }, { 'a': 3, 'B ': 2 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORM Event Subscriber Implementation\nDESCRIPTION: This code defines an event subscriber that logs database operations before and after they occur. The `EventSubscriberModel` decorator marks the class as an event subscriber. The class implements the `EntitySubscriberInterface` and provides methods for `beforeInsert`, `beforeUpdate`, `beforeRemove`, `afterInsert`, `afterUpdate`, `afterRemove`, and `afterLoad` events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSubscriberModel } from '@midwayjs/typeorm';\nimport { EntitySubscriberInterface, InsertEvent, UpdateEvent, RemoveEvent } from 'typeorm';\n\n@EventSubscriberModel()\nexport class EverythingSubscriber implements EntitySubscriberInterface {\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeInsert(event: InsertEvent<any>) {\n    console.log('BEFORE ENTITY INSERTED:', event.entity);\n  }\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeUpdate(event: UpdateEvent<any>) {\n    console.log('BEFORE ENTITY UPDATED:', event.entity);\n  }\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeRemove(event: RemoveEvent<any>) {\n    console.log('BEFORE ENTITY WITH ID ${event.entityId} REMOVED:', event.entity);\n  }\n\n  /**\n   * Called after entity insertion.\n   */\n  afterInsert(event: InsertEvent<any>) {\n    console.log('AFTER ENTITY INSERTED:', event.entity);\n  }\n\n  /**\n\t * Called after entity insertion.\n\t */\n  afterUpdate(event: UpdateEvent<any>) {\n    console.log('AFTER ENTITY UPDATED:', event.entity);\n  }\n\n  /**\n   * Called after entity insertion.\n   */\n  afterRemove(event: RemoveEvent<any>) {\n    console.log('AFTER ENTITY WITH ID ${event.entityId} REMOVED:', event.entity);\n  }\n\n  /**\n   * Called after entity is loaded.\n   */\n  afterLoad(entity: any) {\n    console.log('AFTER ENTITY LOADED:', entity);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request Returning Text - TypeScript\nDESCRIPTION: This snippet shows how to retrieve the response as plain text by setting the `dataType` option to 'text'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  method: 'GET',\n  dataType: 'text',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a gRPC service provider\nDESCRIPTION: This code implements the `Greeter` service defined in the `helloworld.proto` file. It uses the `@Provider` and `@GrpcMethod` decorators from `@midwayjs/decorator` to expose the service as a gRPC endpoint. The `sayHello` method takes a `HelloRequest` and returns a `HelloReply`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MSProviderType, Provider, Provide, GrpcMethod } from '@midwayjs/decorator';\nimport { helloworld } from '../domain/helloworld';\n\n/**\n * 实现 helloworld.Greeter 接口的服务\n */\n@Provide()\n@Provider(MSProviderType.GRPC, { package: 'helloworld' })\nexport class Greeter implements helloworld.Greeter {\n  @GrpcMethod()\n  async sayHello(request: helloworld.HelloRequest) {\n    return { message: 'Hello ' + request.name };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the Method Decorator in a Class\nDESCRIPTION: This code shows how to use the `@LoggingTime` method decorator on the `getUser` method of the `UserService` class. When the `getUser` method is called, the logging logic defined in the method handler will be executed, measuring and logging the method's execution time.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport class UserService {\n  @LoggingTime()\n  async getUser() {\n    // ...\n  }\n}\n\n// 执行时\n// output => Method \"getUser\" invoke during 4ms\n```\n\n----------------------------------------\n\nTITLE: Using Custom Decorator and Pipe Together in MidwayJS\nDESCRIPTION: This code demonstrates how to use the custom decorator `RegValid` with the `CutPipe` to validate a phone number using a regex and then slice the result. This shows how pipes modify input to controllers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipe.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserService {\n  async invoke(@RegValid(/\\d{11}/, CutPipe) phoneNumber: string) {\n    return phoneNumber;\n  }\n}\n\ninvoke(13712345678) => '345678'\n```\n\n----------------------------------------\n\nTITLE: Passing Cookies in an HTTP Request\nDESCRIPTION: This TypeScript code demonstrates how to pass cookies in an HTTP request using `createHttpRequest` and the `set` method. This is important for testing authentication and session management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst cookie = [\n  \"koa.sess=eyJuYW1lIjoiaGFycnkiLCJfZXhwaXJlIjoxNjE0MTQ5OTQ5NDcyLCJfbWF4QWdlIjo4NjQwMDAwMH0=; path=/; expires=Wed, 24 Feb 2021 06:59:09 GMT; httponly \",\n  \"koa.sess.sig=mMRQWascH-If2-BC7v8xfRbmiNo; path=/; expires=Wed, 24 Feb 2021 06:59:09 GMT; httponly\"\n]\n\nconst result = await createHttpRequest(app)\n  .get('/set_header')\n  .set('Cookie', cookie)\n  .query({ name: 'harry' });\n```\n\n----------------------------------------\n\nTITLE: Configure Automatic Refresh\nDESCRIPTION: Configures automatic refresh for a cache entry using the `refreshThreshold` option. When the remaining TTL of a cache entry is less than the `refreshThreshold`, the cache is refreshed asynchronously.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  cacheManager: {\n    clients: {\n      default: {\n        store: 'memory',\n        options: {\n          refreshThreshold: 3 * 1000,\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Process Uploaded Files with AsyncIterator\nDESCRIPTION: Processes uploaded files in 'asyncIterator' mode, reading file streams and writing them to a temporary directory. This example demonstrates how to handle each file stream individually.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post, Files, Fields } from '@midwayjs/core';\nimport { UploadStreamFileInfo, UploadStreamFieldInfo } from '@midwayjs/busboy';\nimport { tmpdir } from 'os';\nimport { createWriteStream } from 'fs';\n\n@Controller('/')\nexport class HomeController {\n\n  @Post('/upload', /*...*/) {\n  async upload(\n  \t@Files() fileIterator: AsyncGenerator<UploadStreamFileInfo>,\n    @Fields() fieldIterator: AsyncGenerator<UploadStreamFieldInfo>\n  ) {\n    for await (const file of fileIterator) {\n      const { filename, data } = file;\n      const p = join(tmpdir, filename);\n      const stream = createWriteStream(p);\n      data.pipe(stream);\n    }\n\n    for await (const { name, value } of fieldIterator) {\n      // ...\n    }\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OSS Buckets in MidwayJS\nDESCRIPTION: This TypeScript snippet demonstrates how to configure multiple OSS buckets using the clients property. Each bucket configuration specifies its own bucket name and other relevant settings. A default configuration can be provided for shared settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  oss: {\n    clients: {\n      bucket1: {\n        bucket: 'bucket1',\n        // ...\n      },\n      bucket2: {\n        bucket: 'bucket2',\n        // ...\n      },\n    },\n    // client, clients, configuration shared by createInstance methods\n    default: {\n      endpoint: '',\n      accessKeyId: '',\n      accessKeySecret: '',\n    },\n  },\n  // other custom config\n  bucket3: {\n    bucket: 'bucket3',\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Data Source for Repository Injection\nDESCRIPTION: This snippet demonstrates how to specify a particular data source when using `InjectRepository`. This is useful when working with multiple data sources in a MidwayJS application. The second argument to `InjectRepository` is the data source name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from '@midwayjs/core';\nimport { InjectRepository } from '@midwayjs/sequelize';\nimport { Photo } from '../entity/photo.entity';\nimport { User } from '../entity/user.entity';\nimport { Repository } from 'sequelize-typescript';\n\n@Controller('/')\nexport class HomeController {\n  // Specify a data source\n  @InjectRepository(User, 'default')\n  userRepository: Repository<User>;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: MQTT Subscriber Connect and Subscribe Options\nDESCRIPTION: This TypeScript code demonstrates how to specify connection and subscription options for MQTT subscribers in the application's configuration. `connectOptions` defines the MQTT broker's host and port, while `subscribeOptions` specifies the topic to subscribe to.  These options are essential for establishing a connection and receiving messages from the MQTT broker.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\n\nexport default {\n  mqtt: {\n    sub: {\n      sub1: {\n        connectOptions: {\n          host: 'test.mosquitto.org',\n          port: 1883,\n        },\n        subscribeOptions: {\n          topicObject: 'test',\n        },\n      },\n      sub2: {\n        // ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting response header manually\nDESCRIPTION: This snippet demonstrates how to manually set a response header using the Koa context in Midway Hooks. It sets the 'X-Powered-By' header to 'Midway' using `ctx.set('X-Powered-By', 'Midway')`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  ctx.set('X-Powered-By', 'Midway');\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Array Parsing in Koa with MidwayJS\nDESCRIPTION: This TypeScript code shows how to configure query array parsing in a Koa application within MidwayJS. The `queryParseMode` option can be set to `extended`, `strict`, or `first` to control how query parameters containing arrays are parsed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    queryParseMode: 'extended',\n    // ...\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: VSCode Launch Configuration for MidwayJS Debugging\nDESCRIPTION: This configuration file (`.vscode/launch.json`) sets up a debugging environment for a MidwayJS application in VSCode. It uses the `node` debugger, launches the application using `npm run dev`, and sets the environment variable `NODE_ENV` to `local`. It configures the debugger to use the integrated terminal and automatically attach to child processes on port 7001. It also allows for automatic restarts when code changes are detected. The `runtimeExecutable` property is set to `npm` or `npm.cmd` depending on the operating system.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/debugger.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // 使用 IntelliSense 了解相关属性。 \n    // 悬停以查看现有属性的描述。\n    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [{\n        \"name\": \"Midway Local\",\n        \"type\": \"node\",\n        \"request\": \"launch\",\n        \"cwd\": \"${workspaceRoot}\",\n        \"runtimeExecutable\": \"npm\",\n        \"windows\": {\n            \"runtimeExecutable\": \"npm.cmd\"\n        },\n        \"runtimeArgs\": [\n            \"run\",\n            \"dev\"\n        ],\n        \"env\": {\n            \"NODE_ENV\": \"local\"\n        },\n        \"console\": \"integratedTerminal\",\n        \"protocol\": \"auto\",\n        \"restart\": true,\n        \"port\": 7001,\n        \"autoAttachChildProcesses\": true\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Add Job with Parameters\nDESCRIPTION: This TypeScript snippet shows how to add parameters to a job when adding it to the queue. The parameters are passed as an object to the `addJobToQueue` method and can be accessed within the `execute` method of the processor.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute(params) {\n    // params.aaa => 1\n  }\n}\n\n\n// invoke\nconst testQueue = this.bullFramework.getQueue('test');\n// 立即添加这个任务\nawait testQueue?.addJobToQueue({\n  aaa: 1,\n  bbb: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Trigger Function in Alibaba Cloud with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a function triggered by an HTTP request in Alibaba Cloud Function Compute using Midway.js. It uses the `@ServerlessTrigger` decorator to bind the function to the `HTTP` trigger type, specifying the path and method for the trigger. The function receives a query parameter `name` (defaulting to 'midway') and returns a greeting message. It depends on the `@midwayjs/core` and `@midwayjs/faas` packages for dependency injection and serverless function context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.HTTP, {\n    path: '/',\n    method: 'get',\n  })\n  async handleHTTPEvent(@Query() name = 'midway') {\n    return `hello ${name}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cache API\nDESCRIPTION: This snippet demonstrates how to use the `CacheManager` API to set and retrieve cache data. It showcases the `set` method for storing data and the `get` method for retrieving it. It also shows `reset` method for clearing all data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Provide } from '@midwayjs/decorator';\nimport { IUserOptions } from '../interface';\nimport { CacheManager } from '@midwayjs/cache';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  cache: CacheManager;\n\n  async getUser(options: IUserOptions) {\n    // 设置缓存内容\n    await this.cache.set(`name`, 'stone-jin');\n\n    // 获取缓存内容\n    let result = await this.cache.get(`name`);\n\n    return result;\n  }\n\n  async getUser2() {\n    //获取缓存内容\n    let result = await this.cache.get(`name`);\n    return result;\n  }\n\n  async reset() {\n    await this.cache.reset(); // 清空对应 store 的内容\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing IoC Container in Serverless\nDESCRIPTION: This code snippet shows how to access the IoC request scope container in Midway Serverless using `ctx.requestContext`.  This allows obtaining instances of other IoC components, such as `UserService` within the request scope.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_context.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst userService = await ctx.requestContext.getAsync(UserService);\n```\n\n----------------------------------------\n\nTITLE: Configuring Common OSS Bucket in MidwayJS\nDESCRIPTION: This TypeScript snippet shows the configuration for a standard OSS bucket. It includes the accessKeyId, accessKeySecret, bucket name, endpoint, and timeout settings. Replace placeholders with actual values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  oss: {\n    // normal oss bucket\n    client: {\n      accessKeyId: 'your access key',\n      accessKeySecret: 'your access secret',\n      bucket: 'your bucket name',\n      endpoint: 'oss-cn-hongkong.aliyuncs.com',\n      timeout: '60s',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using MidwayFrameworkService to get a framework instance - TypeScript\nDESCRIPTION: This snippet shows how to inject and use the MidwayFrameworkService to get a framework instance. It defines a controller with an injected `MidwayFrameworkService` and a route to showcase framework service retrieval. `@Controller`, `@Inject`, and `@Get` decorators are used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, MidwayFrameworkService } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  frameworkService: MidwayFrameworkService;\n\n  @Get('/')\n  async home() {\n    // this.frameworkService.getMainFramework();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Threshold in Midway\nDESCRIPTION: This code snippet demonstrates how to configure the `refreshThreshold` option within the `cacheManager` configuration in a Midway application. The `refreshThreshold` determines how often the cache is asynchronously refreshed in milliseconds. This is set in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: 'memory',\n         options: {\n           refreshThreshold: 3 * 1000,\n         },\n       },\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Jest Debug Configuration (launch.json)\nDESCRIPTION: Configures VSCode launch settings for debugging Jest tests. It specifies the runtime arguments required to run Jest with the inspector, TypeScript support, and the `--runInBand` parameter to prevent parallel execution issues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.0.1 \",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests \",\n      \"type\": \"node \",\n      \"request\": \"launch \",\n      \"runtimeArgs\": [\n        \"--inspect-brk \",\n        \"--require=ts-node/register \",\n        \"${workspaceRoot}/node_modules/.bin/jest \",\n        \"--runInBand \",\n        \"--detectOpenHandles\"\n      ],\n      \"console\": \"integratedTerminal \",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection for Entity Model Injection\nDESCRIPTION: This code shows how to specify which database connection an entity model should use when injecting it with `InjectEntityModel`. This ensures that the entity interacts with the correct database in a multi-database environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// entity/photo.ts\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { User } from './model/user';\n\nexport class XXX {\n  @InjectEntityModel(User, 'test')\n  testUserModel: Repository<User>;\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Test Script in package.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the 'test' script in the `package.json` file to use Jest directly. This allows developers to run tests using the standard `npm test` command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"scripts\": {\n     \"test\": \"jest\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Custom Security with Controller (MidwayJS, TypeScript)\nDESCRIPTION: This snippet associates the custom authentication configuration with a controller. It uses the `@ApiSecurity` decorator with the custom security name ('mycustom'). Requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiSecurity('mycustom')\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Closing an App After Testing (TypeScript)\nDESCRIPTION: This snippet shows how to properly close the application instance after the tests are complete using `@midwayjs/mock`'s `close` function. This is essential for releasing resources and preventing potential issues in subsequent tests. Closing the app ensures a clean environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\n\nawait close(app);\n```\n\n----------------------------------------\n\nTITLE: Defining a BullMQ Processor\nDESCRIPTION: This TypeScript code defines a BullMQ processor using the `@Processor` decorator, which handles the execution of tasks within a specified queue (in this case, 'test'). It implements the `IProcessor` interface and includes an `execute` method that contains the task processing logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, IProcessor } from '@midwayjs/bullmq';\n\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute(data: any) {\n    // 处理任务逻辑\n    console.log('processing job:', data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection with Typegoose\nDESCRIPTION: This TypeScript code snippet shows how to configure the MongoDB connection in the `src/config/config.default.ts` file. It defines the data source configuration for Mongoose, including the connection URI, options (like `useNewUrlParser` and `useUnifiedTopology`), and the entities to be associated with the connection. It also allows for user and password configuration for authentication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { User } from '../entity/user';\n\nexport default {\n  // ...\n  mongoose: {\n    dataSource: {\n      default: {\n        uri: 'mongodb://localhost:27017/test',\n        options: {\n          useNewUrlParser: true,\n          useUnifiedTopology: true,\n          user: '***********',\n          pass: '***********'\n        },\n        // 关联实体\n        entities: [ User ]\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an API Gateway Trigger Function in Alibaba Cloud with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a function triggered by an API Gateway request in Alibaba Cloud Function Compute using Midway.js. It uses the `@ServerlessTrigger` decorator to bind the function to the `API_GATEWAY` trigger type, specifying the path and method for the trigger. The function receives a request body parameter `name` and returns a greeting message. It depends on the `@midwayjs/core` and `@midwayjs/faas` packages for dependency injection and serverless function context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.API_GATEWAY, {\n    path: '/api_gateway_aliyun',\n    method: 'post',\n  })\n  async handleAPIGatewayEvent(@Body() name) {\n    return `hello ${name}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Executing a BullMQ Task\nDESCRIPTION: This TypeScript code demonstrates how to manually execute a BullMQ task by obtaining a queue instance and adding a job to it. It injects the `bullmqFramework` to access the queue and add a job. This usually runs in the onServerReady hook.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as bullmq from '@midwayjs/bullmq';\n\n@Configuration({\n  imports: [\n    bullmq\n  ]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  bullmqFramework: bullmq.Framework;\n\n  async onServerReady() {\n    // 获取 Processor 相关的队列\n    const testQueue = this.bullmqFramework.getQueue('test');\n    // 立即添加这个任务\n    await testQueue?.addJobToQueue();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the User Parameter Decorator (TypeScript)\nDESCRIPTION: Applies the `User` decorator to the `user` parameter of the `invoke` method in the `UserController` class. This will automatically inject the `user` property from the context into the parameter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport class UserController {\n  async invoke(@User() user: string) {\n    console.log(user);\n    // => xxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Proxy Header\nDESCRIPTION: This TypeScript code demonstrates how to configure a custom proxy IP header, such as `X-Forwarded-Host`, in the Koa settings of a MidwayJS application. This allows you to specify which header should be used to determine the client's IP address when behind a reverse proxy.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n   // ...\n   koa: {\n     proxy: true,\n     proxyIpHeader: 'X-Forwarded-Host'\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend API Call using Midway Hooks\nDESCRIPTION: This code snippet demonstrates how to call backend APIs from the frontend using Midway Hooks and TypeScript. It imports the `getPath` and `post` functions from a hypothetical `./apis/lambda` module. The code then calls these functions, passing arguments as needed, and asserts the expected return values. The example showcases both GET and POST requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/intro.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getPath, post } from './apis/lambda';\n\n// send GET request to /api/getPath\nconst path = await getPath();\nconsole.assert(path === '/api/getPath');\n\nconst { message, method } = await post('Jake');\n\nconsole.assert(message === 'Hello Jake!');\nconsole.assert(method === 'POST');\n```\n\n----------------------------------------\n\nTITLE: Using MidwayDecoratorService to register decorators - TypeScript\nDESCRIPTION: This snippet presents how to use the MidwayDecoratorService to register custom decorators in a Midway application. It defines a controller and injects the decorator service. The comments indicates where the service API can be used. `@Controller`, `@Inject`, and `@Get` decorators are used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, MidwayDecoratorService } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Get('/')\n  async home() {\n    // this.decoratorService.registerPropertyHandler(/** 省略 **/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example English Locale File (en_US.json)\nDESCRIPTION: Defines key-value pairs for English translations within the `en_US.json` file.  The keys represent message identifiers, and the values are the corresponding translated text. Placeholders like `{username}` can be used for dynamic content.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"Hello {username} \",\n  \"email\": \"email id \",\n  \"login\": \"login account \",\n  \"createdAt\": \"register date\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Axios Instance - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the default Axios instance using the `axios` configuration in `src/config.default.ts`. It shows how to set the `baseURL`, `headers`, `timeout`, and `withCredentials` options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  axios: {\n    default: {\n      // 所有实例复用的配置\n    },\n    clients: {\n      // 默认实例的配置\n      default: {\n        baseURL: 'https://api.example.com',\n        // `headers` are custom headers to be sent\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        timeout: 1000, // default is `0` (no timeout)\n\n        // `withCredentials` indicates whether or not cross-site Access-Control requests\n        // should be made using credentials\n        withCredentials: false, // default\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Typegoose in MidwayJS\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure the Typegoose component within a MidwayJS application by importing it into the `src/configuration.ts` file. It is essential for loading and initializing the Typegoose module, making it available for dependency injection and use in other parts of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as typegoose from '@midwayjs/typegoose';\n\n@Configuration({\n  imports: [\n    typegoose  \t\t\t\t\t\t\t\t\t// 加载 typegoose 组件\n  ],\n  importConfigs: [\n  \tjoin(__dirname, './config')\n  ]\n})\nexport class MainConfiguration {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Method with TTL\nDESCRIPTION: Caches the result of a method with a specified time-to-live (TTL) using the `@Caching` decorator.  The TTL determines how long the result is cached.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n  @Caching('default', 100)\n  async getUser(name: string) {\n    return name;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Entity Model with DataSource\nDESCRIPTION: This example illustrates how to inject an entity model with a specified data source name using a pseudo-decorator `@InjectEntityModel`. This is necessary when an entity is associated with multiple data sources, allowing you to select the correct data source.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// 下面为伪代码\nimport { SimpleUser } from '../entity/user.entity';\n\nclass UserService {\n  @InjectEntityModel(SimpleUser, 'dataSource2')\n  userModel;\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Socket.IO Module in MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to import and configure the `prometheusSocketIo` module within a MidwayJS application. It integrates the Socket.IO metrics into Prometheus monitoring.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as prometheus from '@midwayjs/prometheus';\nimport * as prometheusSocketIo from '@midwayjs/prometheus-socket-io';\n\n@Configuration({\n  imports: [prometheus, prometheusSocketIo],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Connections\nDESCRIPTION: This configuration defines multiple database connections for TypeORM.  It uses an object format to specify the settings for both a `default` SQLite database and a `test` MySQL database, including connection type, host, port, username, password, and database name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from 'path';\n\nexport default {\n  orm: {\n    default: {\n      type: 'sqlite',\n      database: join(__dirname, '../../default.sqlite'),\n      logging: true,\n    },\n    test: {\n      type: 'mysql',\n      host: '127.0.0.1',\n      port: 3306,\n      username: '*********',\n      password: '*********',\n      database: undefined,\n      synchronize: true,\n      logging: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Task status and management\nDESCRIPTION: This code block showcases how to get a job object, update job progress and get job status.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullmqFramework.getQueue('test');\nconst job = await testQueue?.addJobToQueue();\n\n// 更新进度\nawait job.updateProgress(60);\n// 获取进度\nconst progress = await job.progress;\n// => 60\n\n// 获取任务状态\nconst state = await job.getState();\n// state => 'delayed' 延迟状态\n// state => 'completed' 完成状态\n// state => 'failed' 失败状态\n```\n\n----------------------------------------\n\nTITLE: Accessing KafkaJS Module in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to access the underlying KafkaJS module through the `KafkaJS` field of `@midwayjs/kafka` in MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KafkaJS } from '@midwayjs/kafka';\n\nconst { ConfigResourceTypes } = KafkaJS;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Manually calling API endpoint using fetch\nDESCRIPTION: This snippet shows how to manually call an API endpoint using the `fetch` API. It sets the 'Content-Type' header and passes the arguments in the request body as a JSON string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('/api/say', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    args: ['Midway'],\n  }),\n})\n  .then((res) => res.text())\n  .then((res) => console.log(res)); // Hello Midway!\n```\n\n----------------------------------------\n\nTITLE: Common User DTO\nDESCRIPTION: Defines CommonUserDTO with properties token and workId for demonstrating validation inheritance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType } from '@midwayjs/validate';\n\nexport class CommonUserDTO {\n  @Rule(RuleType.string().required())\n  token: string;\n  @Rule(RuleType.string())\n  workId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting EggJS Context in a Controller\nDESCRIPTION: This code snippet shows how to inject the EggJS Context object into a controller using the `@Inject` decorator. It allows access to request and response properties in the controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/req_res_app.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Context } from 'egg';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // this.ctx.query\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Migration using mwtypeorm - Bash\nDESCRIPTION: This snippet shows how to generate a migration file using the `mwtypeorm` CLI. The migration file will be created based on the existing data source configuration and entity definitions. It generates a `src/migration/******-photo.entity.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtypeorm migration:generate -d ./src/config/config.default.ts src/migration/photo\n```\n\n----------------------------------------\n\nTITLE: Local Passport Middleware - Typescript\nDESCRIPTION: This snippet demonstrates how to create a middleware for the local authentication strategy. It extends PassportMiddleware and overrides the getAuthenticateOptions method to customize the authentication behavior, such as setting the failureRedirect URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/local.middleware.ts\n\nimport { Middleware } from '@midwayjs/core';\nimport { PassportMiddleware, AuthenticateOptions } from '@midwayjs/passport';\nimport { LocalStrategy } from '../strategy/local.strategy';\n\n@Middleware()\nexport class LocalPassportMiddleware extends PassportMiddleware(LocalStrategy) {\n   //Set AuthenticateOptions\n   getAuthenticateOptions(): Promise<AuthenticateOptions> | AuthenticateOptions {\n     return {\n       failureRedirect: '/login',\n     };\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Pipe for Data Transformation in MidwayJS\nDESCRIPTION: This code defines a custom pipe `CutPipe` that implements the `PipeTransform` interface to slice a string. The `transform` method takes a number, converts it to a string, and slices it from the 5th index. No external dependencies required besides the basic MidwayJS core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipe.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Pipe()\nexport class CutPipe implements PipeTransform {\n  transform(value: number, options: TransformOptions): string {\n    return String(value).slice(5);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing WebSocket Server Instance - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to access the WebSocket server instance using the `@App()` decorator. The `wsApp` property of the `HomeController` class is injected with the `Application` instance, allowing you to interact with the WebSocket server directly. The 'webSocket' parameter specifies which application instance to inject.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, App } from '@midwayjs/core';\nimport { Application } from '@midwayjs/ws';\n\n@Controller()\nexport class HomeController {\n\n  @App('webSocket')\n  wsApp: Application;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Memory Cache with Max and TTL\nDESCRIPTION: Configures a memory cache with options for maximum number of keys (`max`) and time-to-live (`ttl`). `ttl` is in milliseconds and `max` is the maximum number of keys that can be stored.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n // src/config/config.default.ts\nexport default {\n  cacheManager: {\n    clients: {\n      default: {\n        store: 'memory',\n        options: {\n          max: 100,\n          ttl: 10,\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Koa Context (TypeScript)\nDESCRIPTION: This code demonstrates how to extend the Koa Context in a MidwayJS application. This allows you to add custom properties or methods to the context object, making them available to all controllers and middleware. The extension is defined in `src/app/extend/context.ts` and is exported as a default object. The return statement needs to be set inside the get method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/extend/context.ts\nexport default {\n  get hello() {\n    return 'hello world';\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Pausing a Bull Queue (TypeScript)\nDESCRIPTION: This snippet demonstrates how to pause a Bull queue using the `pause()` method. This prevents new jobs from being processed until the queue is resumed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nawait testQueue.pause();\n```\n\n----------------------------------------\n\nTITLE: Midway CLI Test Script with Timeout\nDESCRIPTION: This JSON snippet shows a package.json script that runs Midway's CLI test command with a specified timeout. The `midway-bin test` command executes Jest tests, and the `--testTimeout` parameter sets the maximum time (in milliseconds) a test can run before Jest considers it timed out. The `--ts` flag enables TypeScript support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"midway-bin test --ts --testTimeout=30000\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Module in MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to import and configure the `@midwayjs/bullmq` module within a MidwayJS application's configuration. This makes the BullMQ functionality available for use in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as bullmq from '@midwayjs/bullmq';\n\n@Configuration({\n  imports: [\n    // ...\n    bullmq\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: onObjectInit Lifecycle Hook in TypeScript\nDESCRIPTION: Demonstrates the usage of the `onObjectInit` lifecycle hook, which executes after an object instance is created and after its asynchronous initialization methods have completed. Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectInitOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectInit(ins: any, options: ObjectInitOptions): Promise<void> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Using API (Typescript)\nDESCRIPTION: This snippet demonstrates how to redirect a request to another URL using `ctx.redirect` API in a MidwayJS controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.redirect('/login_check');\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT in TypeScript\nDESCRIPTION: Configure the JWT settings, including the secret key and expiration time, within the application's configuration. Ensure that the secret is securely stored and that sensitive information is not placed directly into the payload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const jwt = {\n\tsecret: 'xxxxxxxxxxxxxx', // fs.readFileSync('xxxxx.key')\n  expiresIn: '2d'   // https://github.com/vercel/ms\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Component with Koa\nDESCRIPTION: This TypeScript snippet shows how to enable the RabbitMQ component alongside the Koa framework in a MidwayJS application. It imports both `koa` and `rabbitmq` modules and includes them in the `imports` array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as rabbitmq from '@midwayjs/rabbitmq';\n\n@Configuration({\n  imports: [\n    koa,\n    rabbitmq\n  ],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and configuring processAgent in MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to import and configure the @midwayjs/process-agent module within a MidwayJS application's `configuration.ts` file. Importing it into the `imports` array makes the functionality available for use. This setup is crucial for enabling the process agent's features, such as the RunInPrimary decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/process_agent.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as processAgent from '@midwayjs/process-agent';\n\n@Configuration({\n  imports: [\n    // ...\n    processAgent\n  ],\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jest in Band\nDESCRIPTION: Demonstrates how to run Jest tests serially using the `--runInBand` parameter, resolving potential port conflicts during parallel test execution. It includes example commands for both standard Jest execution and Jest with coverage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ jest --runInBand\n$ jest --coverage --runInBand\n```\n\n----------------------------------------\n\nTITLE: Adding MidwayJS Upload Dependency to package.json\nDESCRIPTION: Adds the `@midwayjs/upload` package as a dependency in the `package.json` file. This ensures that the package is installed when the project is set up on a new environment or when dependencies are updated.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"dependencies\": {\n     \"@midwayjs/upload\": \"^3.0.0\",\n     //...\n   },\n   \"devDependencies\": {\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Configuration\nDESCRIPTION: This TypeScript code demonstrates how to configure the RabbitMQ connection URL in a MidwayJS application.  It defines a `rabbitmq` property within the default configuration, setting the `url` to the RabbitMQ server address.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  // ...\n  rabbitmq: {\n    url: 'amqp://localhost'\n  }\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Middleware for Logging Request Details in TypeScript\nDESCRIPTION: This code snippet shows how to create a middleware function for logging request URLs and responses using `@midwayjs/rpc`. The middleware intercepts the request and response, logging the URL before the request and the URL and response after the request. Dependencies: `@midwayjs/rpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/client.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupHttpClient } from '@midwayjs/rpc';\nimport type { Middleware } from '@midwayjs/rpc';\n\nconst logger: Middleware = async (\n  ctx,\n  next\n) => {\n  console.log('<-- ${ctx.req.url}');\n  await next();\n  console.log (\n    '--> ${ctx.req.url} ${ctx.res}'\n  );\n};\n\nsetupHttpClient({\n  middleware: [logger]\n});\n```\n\n----------------------------------------\n\nTITLE: Backend Interface Definition with Midway Hooks\nDESCRIPTION: This code snippet demonstrates how to create backend interfaces using Midway Hooks and TypeScript. It leverages the `useContext` hook from `@midwayjs/hooks` to access the HTTP request context. The `getPath` function retrieves the request path, while the `post` function handles POST requests and returns a message with the provided name and the request method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/intro.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from '@midwayjs/hooks';\n\nexport async function getPath() {\n  // Get HTTP request context by Hooks\n  const ctx = useContext();\n  return ctx.path;\n}\n\nexport async function post(name: string) {\n  const ctx = useContext();\n\n  return {\n    message: `Hello ${name}!`,\n    method: ctx.method,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Publisher Configuration\nDESCRIPTION: This TypeScript snippet shows the basic configuration structure for MQTT publishers in `src/config/config.default.ts`. It defines connection options for multiple publisher instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\n\nexport default {\n   mqtt: {\n     pub: {\n       clients: {\n         default: {\n           host: 'test.mosquitto.org',\n           port: 1883,\n         },\n         pub2: {\n           // ...\n         }\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookie Writeback in I18n - Typescript\nDESCRIPTION: This snippet shows how to disable the automatic writing of the user's language to a cookie. By setting `writeCookie` to `false`, the i18n module will not update the cookie on each request, potentially improving performance in certain scenarios. This assumes the i18n configuration object exists within the `config.default.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    writeCookie: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic API Usage - TypeScript\nDESCRIPTION: This snippet shows how to dynamically obtain logger instances using the `getLogger` method in MidwayJS. It demonstrates retrieving the core logger, the default context logger, and a context logger created from a specific logger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// Get coreLogger\nconst coreLogger = app.getLogger('coreLogger');\n// Get the default contextLogger\nconst contextLogger = ctx.getLogger();\n// Get the contextLogger created by a specific logger, equivalent to customALogger.createContextLogger(ctx)\nconst customAContextLogger = ctx.getLogger('customA');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayLoggerService } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\nexport class MainConfiguration {\n  \n   @Inject()\n   loggerService: MidwayLoggerService;\n  \n   @Inject()\n   ctx: Context;\n  \n   async getUser() {\n     // get custom logger\n     const customLogger = this.loggerService.getLogger('customLogger');\n    \n     //Create context logger\n     const customContextLogger = this.loggerService.createContextLogger(this.ctx, customLogger);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Repeat Job Cleanup on Startup (TypeScript)\nDESCRIPTION: This snippet shows how to disable the automatic cleanup of previously unscheduled repeating tasks in the `config.prod.ts` file. By setting `bull.clearRepeatJobWhenStart` to `false`, you prevent the framework from removing existing repeating tasks from the Redis queue at startup. This is useful in scenarios where you want to preserve existing scheduled tasks across deployments.  Configuration in `src/config/config.prod.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.prod.ts\nexport default {\n  // ...\n  bull: {\n    clearRepeatJobWhenStart: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Undefined Fields Globally\nDESCRIPTION: This snippet shows how to globally configure the validator to allow undefined fields using the `allowUnknown` option in `validationOptions`. This configuration is applied to the `validate` property in `src/config/config.default.ts` and allows requests to have extra, undefined parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  validate: {\n    validationOptions: {\n      allowUnknown: true, // 全局生效\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service Interface using ProtoBuf\nDESCRIPTION: This Protocol Buffers (protobuf) snippet defines a simple gRPC service named `Greeter` with a single RPC method `SayHello`. The method takes a `HelloRequest` message as input and returns a `HelloReply` message as output. The messages define the structure of the request and response, including the `name` and `message` fields.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloworld;\n\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n\nmessage HelloReply {\n  string message = 1;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Security Component in Configuration\nDESCRIPTION: Imports the `@midwayjs/security` component into the MidwayJS application's configuration. This enables the security features within the application. The component is imported as `security`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/security.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as security from '@midwayjs/security';\n@Configuration({\n  imports: [\n    // ...other components\n    security\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Global Guards (TypeScript)\nDESCRIPTION: Demonstrates registering multiple global guards using an array in the `useGuard` method. Both `AuthGuard` and `Auth2Guard` will be applied to all routes in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync onReady() {\n  this.app.useGuard([AuthGuard, Auth2Guard]);\n}\n```\n\n----------------------------------------\n\nTITLE: Translate with Locale and Arguments (Typescript)\nDESCRIPTION: Demonstrates translating text with a specific locale and arguments. The `translate` method is called with the message key (`hello`), arguments for placeholder replacement, and the desired locale (`en_US` or `zh_CN`). The output varies depending on the specified locale.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.i18nService.translate('hello', {\n  args: {\n    username: 'harry',\n  },\n  locale: 'en_US',\n});\n\n// output: Hello harry.\n\nthis.i18nService.translate('hello', {\n  args: {\n    username: 'harry',\n  },\n  locale: 'zh_CN',\n});\n\n// output: 你好 harry.\n\n```\n\n----------------------------------------\n\nTITLE: mwtsc with project, watch, and run\nDESCRIPTION: This command combines a custom tsconfig file, watch mode, and the 'run' parameter. This allows for watching files with a specified tsconfig and running the file after compilation. The run command should be placed at the end.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc --watch --project tsconfig.production.json --run ./bootstrap.js\n```\n\n----------------------------------------\n\nTITLE: Testing Socket.IO Message with Acknowledgement (TypeScript)\nDESCRIPTION: Tests Socket.IO message handling using the `sendWithAck` method for direct message acknowledgements in MidwayJS. This approach simplifies testing by awaiting the response directly from the send operation, making the code more concise. The test verifies the response from the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock'\nimport { Framework } from '@midwayjs/koa';\nimport { createSocketIOClient } from '@midwayjs/mock';\nimport { once } from 'events';\n\ndescribe('/test/index.test.ts', () => {\n\n  it('should test create socket app', async () => {\n\n    // Create a service\n    const app = await createApp<Framework>();\n\n    // Create a corresponding client\n    const client = await createSocketIOClient({\n      port: 3000\n    });\n\n    // Send event, which is written in await\n    const data = await client.sendWithAck('myEvent', 1, 2, 3);\n\n    // Judgment result\n    expect(data).toEqual({\n      name: 'harry',\n      result: 6\n    });\n\n    // Close the client\n    await client.close();\n \t\t// Close the server\n    await close(app);\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Define Build Script Using mwtsc\nDESCRIPTION: This TypeScript snippet shows the `build` script defined in the scripts section of `package.json`. It uses the `mwtsc` tool to build the TypeScript project, with the `--cleanOutDir` flag ensuring the output directory is cleaned before each build.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"mwtsc --cleanOutDir\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Casbin Model and Policy Paths\nDESCRIPTION: This TypeScript code demonstrates configuring the paths to the Casbin model and policy files within the `config.default.ts` file.  It uses the `appInfo.appDir` property to construct absolute paths to the configuration files.  This configuration is used by the Casbin component to load the model and policy.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    casbin: {\n      modelPath: join(appInfo.appDir, 'basic_model.conf'),\n      policyAdapter: join(appInfo.appDir, 'basic_policy.csv'),\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using ServiceFactory Priority Methods - Typescript\nDESCRIPTION: This code shows how to utilize the `ServiceFactory`'s priority-related methods within the `HTTPClientService`. It demonstrates using `getClientPriority` to get the priority of a client (e.g., 'default', which would return `DEFAULT_PRIORITY.L2` if not explicitly configured) and `isHighPriority`, `isMediumPriority`, and `isLowPriority` to check the priority level of a specific client instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service_factory.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class HTTPClientService implements HTTPClient {\n   @Inject()\n   private serviceFactory: HTTPClientServiceFactory;\n\n   @Init()\n   async init() {\n     // Get priority\n     this.serviceFactory.getClientPriority('default'); // DEFAULT_PRIORITY.L2\n\n     // Determine priority\n     this.serviceFactory.isHighPriority('default');\n     this.serviceFactory.isMediumPriority('default');\n     this.serviceFactory.isLowPriority('default');\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status Code with Decorator in MidwayJS\nDESCRIPTION: This code snippet shows how to set the HTTP status code using the `@HttpCode` decorator in MidwayJS. The status code is set to 201 for the `/` route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, HttpCode } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  @HttpCode(201)\n  async home() {\n    return \"Hello Midwayjs!\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode launch.json configuration for debugging Jest tests (JavaScript)\nDESCRIPTION: This JavaScript code represents a launch configuration for VSCode's launch.json, designed for debugging Jest tests.  It sets up the debugger with specific runtime arguments, including `--inspect-brk`, `--require=ts-node/register`, `--runInBand`, and `--detectOpenHandles`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"version\": \"0.0.1\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"--require=ts-node/register\",\n        \"${workspaceRoot}/node_modules/.bin/jest\",\n        \"--runInBand\",\n        \"--detectOpenHandles\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Socket App using Events.once\nDESCRIPTION: Alternative way to test the socket app using Node.js events module.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/socketio';\nimport { createSocketIOClient } from '@midwayjs/mock';\nimport { once } from 'events';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create socket app', async () => {\n    // 创建一个服务\n    const app = await createApp<Framework>(process.cwd(), { port: 3000 });\n\n    // 创建一个对应的客户端\n    const client = await createSocketIOClient({\n      port: 3000,\n    });\n\n    // 用事件的 promise 写法监听\n    const gotEvent = once(client, 'myEventResult');\n    // 发送事件\n    client.send('myEvent', 1, 2, 3);\n    // 等待返回\n    const [data] = await gotEvent;\n    // 判断结果\n    expect(data).toEqual({\n      name: 'harry',\n      result: 6,\n    });\n\n    // 关闭客户端\n    await client.close();\n    // 关闭服务端\n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating @midwayjs/logger dependency in package.json\nDESCRIPTION: This code snippet shows how to update the @midwayjs/logger dependency from version 2.0.0 to version 3.0.0 in the package.json file. This is a required step when upgrading to MidwayJS 3.0 to use the latest logger features.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"dependencies\": {\n-    \"@midwayjs/logger\": \"2.0.0\",\n+    \"@midwayjs/logger\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context Logger in TypeScript\nDESCRIPTION: This code demonstrates how to use the context logger (`ctx.logger`) within a MidwayJS application to log information, debug messages, warnings, and errors. The context logger is associated with a specific request and provides contextual information in the log output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.logger.info(\"hello world\");\nctx.logger.debug('debug info');\nctx.logger.warn('WARNNING!!!!');\n\n// 错误日志记录，直接会将错误日志完整堆栈信息记录下来，并且输出到 errorLog 中\n// 为了保证异常可追踪，必须保证所有抛出的异常都是 Error 类型，因为只有 Error 类型才会带上堆栈信息，定位到问题。\nctx.logger.error(new Error('custom error'));\n```\n\n----------------------------------------\n\nTITLE: Hiding Sensitive Information\nDESCRIPTION: This TypeScript code snippet demonstrates how to hide sensitive information by adding keywords to the hiddenKey array in the config.default.ts file. The DefaultHiddenKey is imported and concatenated with additional keywords using wildcards.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/info.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { DefaultHiddenKey } from '@midwayjs/info';\n\nexport default {\n  // ...\n  info: {\n    hiddenKey: DefaultHiddenKey.concat(['*abc', '*def', '*bbb*']),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Fetch API for File Upload\nDESCRIPTION: This snippet demonstrates how to use the Fetch API in JavaScript to upload a file. It creates a `FormData` object, appends the file to it, and sends a POST request to the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileInput = document. querySelector('#your-file-input');\nconst formData = new FormData();\nformData.append('file', fileInput.files[0]);\n\nfetch('/api/upload', {\n   method: 'POST',\n   body: formData,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Controller\nDESCRIPTION: This code snippet demonstrates how to define a WebSocket controller using the @WSController decorator from @midwayjs/decorator.  The @Provide() decorator makes the controller available for dependency injection. This sets up a basic WebSocket service that can handle incoming connections and messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@WSController()\nexport class HelloSocketController {}\n```\n\n----------------------------------------\n\nTITLE: Sequelize Ordinary Column Definition - Typescript\nDESCRIPTION: This code shows how to define ordinary columns in a Sequelize model using the `@Column` decorator.  It can automatically infer the JS type or you can explicitly define the column's data type using the DataType enum from sequelize-typescript.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, Column } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @Column\n  name: string;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Column, DataType } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @Column(DataType.TEXT)\n  name: string;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, Column, DataType } from 'sequelize-typescript'\n\n@Table\nexport class Person extends Model {\n  @Column({\n    type: DataType.FLOAT\n    comment: 'Some value',\n    ...\n  })\n  value: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL DataSourceManager Interface\nDESCRIPTION: This code defines a MySQL DataSourceManager class that extends the built-in DataSourceManager class from MidwayJS. This outlines the creation of the interface and defines the inheritance of the built-in data source manager class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSourceManager, Provide, Scope, ScopeEnum } from '@midwayjs/core';\nimport * as mysql from 'mysql2';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MySqlDataSourceManager extends DataSourceManager<mysql.Connection> {\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Excluding an Endpoint from Swagger Documentation (MidwayJS, TypeScript)\nDESCRIPTION: This snippet demonstrates how to exclude a single endpoint/route from Swagger documentation.  The `@ApiExcludeEndpoint` decorator is applied to the method. Requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/hello')\nexport class HelloController {\n  \n   @ApiExcludeEndpoint()\n   @Get()\n   async getUser() {\n     // ...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing POST API endpoint with request data\nDESCRIPTION: This code demonstrates how to test the POST API endpoint that accepts request data. It uses `createHttpRequest` from `@midwayjs/mock` to send a POST request to the endpoint, including the `name` parameter in the request body. The response is asserted to ensure it returns the expected status code and body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Hello World', async () => {\n  const trigger = getApiTrigger<HttpTriger>(say);\n  const response = await createHttpRequest(app)\n    .post(trigger.path)\n    .send({ args: ['Midway'] })\n    .expect(200);\n  expect(response.text).toBe('Hello Midway!');\n});\n```\n\n----------------------------------------\n\nTITLE: MNS Trigger in Alibaba Cloud Function Compute with Midway\nDESCRIPTION: This code snippet demonstrates how to bind an MNS trigger in Alibaba Cloud Function Compute using the `@ServerlessTrigger` decorator in Midway. It handles messages from Alibaba Cloud Message Queue (MNS). Dependencies include `@midwayjs/core`, `@midwayjs/faas`, and `@midwayjs/fc-starter`. The input is an `MNSEvent` object, and the specific handling logic is omitted (represented by `// ...`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\nimport type {MNSEvent} from '@midwayjs/fc-starter';\n\n@Provide()\nexport class HelloAliyunService {\n   @Inject()\n   ctx: Context;\n\n   @ServerlessTrigger(ServerlessTriggerType.MQ)\n   async handleMNSEvent(event: MNSEvent) {\n     // ...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer Configuration with Instance Reuse\nDESCRIPTION: This TypeScript code demonstrates how to reuse a Kafka instance between multiple consumers using the `kafkaInstanceRef` property. This configuration allows multiple consumers to share the same connection, reducing resource consumption.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          clientId: 'my-app',\n          brokers: ['localhost:9092'],\n        },\n        consumerOptions: {\n          groupId: 'groupId-test-1',\n        },\n        subscribeOptions: {\n          topics: ['topic-test-1'],\n        }\n      },\n      sub2: {\n        kafkaInstanceRef: 'sub1',\n        consumerOptions: {\n          groupId: 'groupId-test-2',\n        },\n        subscribeOptions: {\n          topics: ['topic-test-2'],\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking fetchIndex Method in MidwayJS\nDESCRIPTION: This code snippet shows how to mock the `fetchIndex` method of the `IndexDataService` using the `MidwayMockService`. The mock implementation returns different data based on the URL being requested, allowing for simulation of different API responses during development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/mock/indexData.mock.ts\nimport { App, IMidwayApplication, Inject, Mock, ISimulation, MidwayMockService } from '@midwayjs/core';\nimport { IndexDataService } from '../service/indexData.service';\n\n@Mock()\nexport class IndexDataMock implements ISimulation {\n\n   @App()\n   app: IMidwayApplication;\n\n   @Inject()\n   mockService: MidwayMockService;\n\n   async setup(): Promise<void> {\n     // Mock properties using the MidwayMockService API\n     this.mockService.mockClassProperty(IndexDataService, 'fetchIndex', async (url) => {\n       // return different data according to the logic\n       if (/current/.test(url)) {\n         return {\n           data: require('./resource/current.json'),\n         };\n       } else if (/v7/.test(url)) {\n         return {\n           data: require('./resource/v7.json'),\n         };\n       } else if (/v6/.test(url)) {\n         return {\n           data: require('./resource/v6.json'),\n         };\n       }\n     });\n   }\n\n   enableCondition(): boolean | Promise<boolean> {\n     // Conditions for the mock class to be enabled\n     return ['local', 'test', 'unittest']. includes(this. app. getEnv());\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Jest Assertions (TypeScript)\nDESCRIPTION: This snippet showcases some basic assertions using Jest's `expect` assertion library. It covers checking equality, strict equality, array containment, and other common testing scenarios. These assertions are crucial for verifying the correctness of the code being tested.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexpect(result.status).toBe(200); // 值是否等于某个值，引用相等\nexpect(result.status).not.toBe(200);\nexpect(result).toEqual('hello'); // 简单匹配，对象属性相同也为 true\nexpect(result).toStrictEqual('hello'); // 严格匹配\nexpect(['lime', 'apple']).toContain('lime'); // 判断是否在数组中\n```\n\n----------------------------------------\n\nTITLE: Specify Directory Configuration Loading - TypeScript\nDESCRIPTION: Illustrates how to load configuration files by specifying a directory.  All `config.*.ts` files in the specified directory are scanned and loaded.  ESM and single-file deployments do not support this method.  Requires importing `Configuration` from `@midwayjs/core` and `join` from `path`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport { join } from 'path';\n\n@Configuration({\n   importConfigs: [\n     join(__dirname, './config/'),\n   ]\n})\nexport class MainConfiguration {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint with Path Parameters (GET)\nDESCRIPTION: This code snippet shows how to define a GET API endpoint with a path parameter `id`. It uses `Api`, `Get`, `Params`, and `useContext` to extract the `id` parameter from the URL and return it in the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Api, Get, Params, useContext } from '@midwayjs/hooks'\n\nexport default Api(\n  Get('/article/:id'),\n  Params<{ id: string }>(,\n  async () => {\n    const ctx = useContext()\n    return {\n      article: ctx.params.id\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Add ets to development script\nDESCRIPTION: Adds the `ets` command to the `dev` script in the package.json file, ensuring that TypeScript definition files are generated before starting the development server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/egg-ts-helper.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"dev\": \"cross-env ets && cross-env NODE_ENV=local midway-bin dev --ts \",\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring MidwayJS Upload Component Defaults\nDESCRIPTION: Defines the default configuration for the `@midwayjs/upload` component in the `src/config/config.default.ts` file. This includes settings such as upload mode, maximum file size, allowed file extensions (whitelist), temporary storage directory, cleanup timeout, base64 encoding, and the path to match for parsing file information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/upload';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n   //...\n   upload: {\n     // mode: UploadMode, the default is file, that is, upload to the temporary directory of the server, and can be configured as stream\n     mode: 'file',\n     // fileSize: string, the maximum upload file size, the default is 10mb\n     fileSize: '10mb',\n     // whitelist: string[], file extension whitelist\n     whitelist: uploadWhiteList. filter(ext => ext !== '.pdf'),\n     // tmpdir: string, temporary storage path for uploaded files\n     tmpdir: join(tmpdir(), 'midway-upload-files'),\n     // cleanTimeout: number, how long the uploaded file is automatically deleted in the temporary directory, the default is 5 minutes\n     cleanTimeout: 5 * 60 * 1000,\n     // base64: boolean, set whether the original body is in base64 format, the default is false, generally used for compatibility with Tencent Cloud\n     base64: false,\n     // Parse the file information in the body only when the matching path reaches /api/upload\n     match: /\\/api\\/upload/,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Object Scope with getInstanceScope (TypeScript)\nDESCRIPTION: This code shows how to use the `getInstanceScope` method of the `IMidwayContainer` to determine the scope of an object instance. It demonstrates retrieving the scope of both the `HomeController` and the injected `UserService`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Inject, ApplicationContext, Get, IMidwayContainer } from '@midwayjs/core';\nimport { UserService} from '../service/user.service';\n\n@Singleton()\nexport class UserSerivce {\n   //...\n}\n\n@Controller('/')\nexport class HomeController {\n   @Inject()\n   userService: UserService;\n\n   @ApplicationContext()\n   applicationContext: IMidwayContainer;\n\n   @Get('/')\n   async home(): Promise<string> {\n     console.log(this.applicationContext.getInstanceScope(this));\n     // => Request\n\n     console.log(this.applicationContext.getInstanceScope(this.userService));\n     // => Singleton\n    \n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring moduleNameMapper in Jest\nDESCRIPTION: This snippet shows how to configure the `moduleNameMapper` option in Jest's configuration file (`module.exports`). It maps alias paths (starting with `@/`) to their corresponding source directory paths (`<rootDir>/src/$1`), enabling Jest to resolve aliases during testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/alias_path.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures'],\n  coveragePathIgnorePatterns: ['<rootDir>/test/'],\n  moduleNameMapper: {\n    '^@/(.*)$': '<rootDir>/src/$1'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-One Relationship in TypeORM\nDESCRIPTION: This snippet demonstrates how to create a bidirectional one-to-one relationship between `Photo` and `PhotoMetadata` entities using TypeORM. The `@OneToOne` decorator is used on both entities, along with the `photo => photo.metadata` syntax to define the inverse relation.  Only one side should use `@JoinColumn`. The side with `@JoinColumn` owns the relation and the corresponding foreign key column in the database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from 'typeorm';\nimport { Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { Photo } from './photo';\n\n@Entity()\nexport class PhotoMetadata {\n\n  /* ... other columns */\n\n  @OneToOne(type => Photo, photo => photo.metadata)\n  @JoinColumn()\n  photo: Photo;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from 'typeorm';\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne } from 'typeorm';\nimport { PhotoMetadata } from './photoMetadata.entity';\n\n@Entity()\nexport class Photo {\n\n  /* ... other columns */\n\n  @OneToOne(type => PhotoMetadata, photoMetadata => photoMetadata.photo)\n  metadata: PhotoMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Languages in i18n\nDESCRIPTION: This snippet shows how to configure additional language translations for validation messages within the `i18n` configuration in `src/config/config.default.ts`.  By adding a new language key (e.g., `zh_TW`) and providing a path to the translation file, the validator can return error messages in the specified language.  This requires the i18n component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    // 增加翻译\n    zh_TW: {\n      validate: require('../../locales/zh_TW.json'),\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Controller with a Route Prefix\nDESCRIPTION: This code snippet defines a controller with a route prefix using the `@Controller` decorator in MidwayJS. The `@Controller('/api/user')` decorator indicates that all routes within the `UserController` class will be prefixed with `/api/user`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n\nimport { Controller } from '@midwayjs/core';\n\n@Controller('/api/user')\nexport class UserController {\n  // xxxx\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Timeout in Koa (MidwayJS)\nDESCRIPTION: This code snippet shows how to configure the `serverTimeout` in a MidwayJS application using the Koa framework. `serverTimeout` specifies the time the server waits for the client to send data after receiving a request in milliseconds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    serverTimeout: 100_000\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Message Handling (TypeScript)\nDESCRIPTION: Defines a Socket.IO message handler that receives data and returns a result in MidwayJS. The `@OnWSMessage` decorator listens for the 'myEvent' message, and the `@WSEmit` decorator emits the 'myEventResult' message with the processed data. The handler function `gotMessage` sums the input data and returns an object containing a name and the result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@OnWSMessage('myEvent')\n@WSEmit('myEventResult')\nasync gotMessage(data1, data2, data3) {\n  return {\n    name: 'harry',\n  \tresult: data1 + data2 + data3\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using MidwayLoggerService to get a logger instance - TypeScript\nDESCRIPTION: This snippet shows how to inject and use the MidwayLoggerService to obtain a logger instance.  The `@Controller`, `@Inject`, and `@Get` decorators define a controller, inject the logger service, and create a route. The `getLogger()` method retrieves a specific logger instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, MidwayLoggerService } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  loggerService: MidwayLoggerService;\n\n  @Get('/')\n  async home() {\n    // this.loggerService.getLogger('logger');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Exception Filters in Configuration in Typescript\nDESCRIPTION: This code shows how to apply exception filters within the MidwayJS application configuration.  The `useFilter` method of the application instance is used to register the `InternalServerErrorFilter`. Multiple filters can be registered as an array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, App, Catch } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as koa from '@midwayjs/koa';\nimport { InternalServerErrorFilter } from './filter/internal.filter';\n\n@Configuration({\n  imports: [\n    koa\n  ],\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    this.app.useFilter([InternalServerErrorFilter]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Database Driver (Oracle Example)\nDESCRIPTION: This command installs the Oracle driver for Sequelize.  This driver is needed to connect to an Oracle database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# for Oracle\nnpm install oracledb --save\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Entry Point - JavaScript\nDESCRIPTION: This JavaScript code snippet shows a simple entry point file (typically `bootstrap.js`) for a MidwayJS application. It imports the `@midwayjs/bootstrap` module and calls the `run` method. This file is used to start the application in production environments, typically with a process manager like PM2.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap.run();\n```\n\n----------------------------------------\n\nTITLE: Prometheus Targets Configuration (JSON)\nDESCRIPTION: This JSON file defines the targets that Prometheus will scrape for metrics. The `${ip}` placeholder should be replaced with the IP address of the Node.js application server.  It includes labels for environment and job name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"targets\": [\"${ip}:7001\"],\n    \"labels\": {\n      \"env\": \"prod\",\n      \"job\": \"api\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Github OAuth Controller\nDESCRIPTION: Defines a controller with routes for initiating the Github OAuth flow and handling the callback from Github after the user authorizes the application.  The middleware is applied to protect routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// controller.ts\n\nimport { Provide, Get, Inject } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/oauth')\nexport class AuthController {\n  @Inject()\n  ctx: any;\n\n  @Get('/github', { middleware: ['githubPassportMiddleware'] })\n  async githubOAuth() {}\n\n  @Get('/github/cb', { middleware: ['githubPassportMiddleware'] })\n  async githubOAuthCallback() {\n    return this.ctx.req.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis with Authentication\nDESCRIPTION: Configures Redis connection including authentication details.  Uses an ioredis configuration object, allowing specification of `port`, `host`, and `password`.  `defaultJobOptions` configures timezone for task scheduler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const taskConfig = {\n  redis: {\n    port: 6379,\n    host: '127.0.0.1',\n    password: 'foobared',\n  }, //此处相当于是ioredis的配置 https://www.npmjs.com/package/ioredis\n  prefix: 'midway-task', // 这些任务存储的key，都是midway-task开头，以便区分用户原有redis里面的配置。\n  defaultJobOptions: {\n    repeat: {\n      tz: 'Asia/Shanghai', // Task等参数里面设置的比如（0 0 0 * * *）本来是为了0点执行，但是由于时区不对，所以国内用户时区设置一下。\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configure I18n Module in MidwayJS\nDESCRIPTION: Configures the I18n module within a MidwayJS application using the `@Configuration` decorator. The `i18n` module is imported and included in the `imports` array, making its services available for dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as i18n from '@midwayjs/i18n';\n\n@Configuration({\n  imports: [\n    // ...\n    i18n\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying table name in EntityModel\nDESCRIPTION: Specifies the table name within the `@EntityModel` decorator. This allows mapping the entity to a table with a different name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// entity/photo.ts\nimport { EntityModel } from '@midwayjs/orm';\n\n@EntityModel('photo_table_name')\nexport class Photo {\n  id: number;\n  name: string;\n  description: string;\n  filename: string;\n  views: number;\n  isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to a Single Route (TypeScript)\nDESCRIPTION: Illustrates how to apply middleware to a specific route using the `middleware` option within route decorators like `@Get`. This allows for granular control over which routes execute specific middleware. The `ReportMiddleware` is imported and included in the middleware array within the `@Get` decorator options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\nimport { ReportMiddleware } from '../middleware/report.middlweare';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/', { middleware: [ ReportMiddleware ]})\n  async home() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom view engine in Midway.js\nDESCRIPTION: This TypeScript code demonstrates how to implement a custom view engine in Midway.js by implementing the `IViewEngine` interface. It defines a `MyView` class with `render` and `renderString` methods, which handle the template rendering logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// lib/view.ts\nimport { Provide, Config } from '@midwayjs/core';\nimport { IViewEngine } from '@midwayjs/view';\n\n@Provide()\nexport class MyView implements IViewEngine {\n\n  @Config('xxxx')\n  viewConfig;\n\n  async render(name: string, locals?: Record<string, any>, options?: RenderOptions) {\n    return myengine.render(name, locals, options);\n  }\n\n  async renderString(tpl: string,\n     locals?: Record<string, any>,\n     options?: RenderOptions) {\n\n    throw new Error('not implement');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Midway Cache Component\nDESCRIPTION: This code snippet demonstrates how to configure the `@midwayjs/cache` component within a Midway Hooks project using `createConfiguration` in `configuration.ts`. It imports necessary modules, including `Koa` and `Hooks`, and configures the `imports` and `importConfigs` to include the cache component.  This allows the cache component to be available for use throughout the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/component.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createConfiguration,\n  hooks\n} from '@midwayjs/hooks';\nimport * as Koa from '@midwayjs/koa';\nimport { join } from 'path';\nimport * as cache from '@midwayjs/cache';\n\nexport default createConfiguration({\n  imports: [cache, Koa, Hooks()],\n  importConfigs: [\n    join(__dirname, 'config')\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication in Typescript\nDESCRIPTION: This snippet configures OAuth2 authentication for Swagger in the `config.default.ts` file, including authorization and token URLs, and associates it with a controller using `@ApiOAuth2`. This requires setting up OAuth2 flows.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'oauth2',\n      flows: {\n        implicit: {\n          authorizationUrl: 'http://example.org/api/oauth/dialog',\n          scopes: {\n            'write:pets': 'modify pets in your account',\n            'read:pets': 'read your pets'\n          }\n        },\n        authorizationCode: {\n          authorizationUrl: 'https://example.com/api/oauth/dialog',\n          tokenUrl: 'https://example.com/api/oauth/token',\n          scopes: {\n            'write:pets': 'modify pets in your account',\n            'read:pets': 'read your pets'\n          }\n        },\n      },\n    },\n  },\n}\n\n@ApiOAuth2()\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Add Grafana to Docker Compose\nDESCRIPTION: Adds Grafana to the docker-compose.yml file, allowing for unified management of Prometheus and Grafana.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2.2'\nservices:\n  tapi:\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '50m'\n    image: prom/prometheus\n    restart: always\n    volumes:\n      - ./prometheus_data:/prometheus_data:rw  # prometheus Data mapping directory\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml # prometheus Configuration mapping file\n      - ./targets.json:/etc/prometheus/targets.json\n    command:\n      - '--storage.tsdb.path=/prometheus_data'\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.retention=10d'\n      - '--web.enable-lifecycle'\n    ports:\n      - '9090:9090'\n  // highlight-start\n  grafana:\n    image: grafana/grafana\n    container_name: \"grafana0\"\n    ports:\n      - \"3000:3000\"\n    restart: always\n    volumes:\n      - \"./grafana_data:/var/lib/grafana\" # grafana data mapping directory\n      - \"./grafana_log:/var/log/grafana\"  # grafana log mapping directory\n    // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Default Instance Proxy (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a proxy class (e.g., `HTTPClientService`) that delegates all method calls to the default HTTP client instance obtained from the `ServiceFactory`. This simplifies usage by providing a direct interface to the default client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Provide,\n  Scope,\n  ScopeEnum,\n  Init,\n  ServiceFactory,\n  MidwayCommonError,\n  delegateTargetAllPrototypeMethod\n} from '@midwayjs/core';\n\n// ...\nexport class HTTPClientServiceFactory extends ServiceFactory<HTTPClient> {\n  // ...\n}\n\n// 下面是默认代理类\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class HTTPClientService implements HTTPClient {\n  @Inject()\n  private serviceFactory: HTTPClientServiceFactory;\n\n  // 这个属性用于保存实际的实例\n  private instance: HTTPClient;\n\n  @Init()\n  async init() {\n    // 在初始化阶段，从工厂拿到默认实例\n    this.instance = this.serviceFactory.get(\n      this.serviceFactory.getDefaultClientName() || 'default'\n    );\n    if (!this.instance) {\n      throw new MidwayCommonError('http client default instance not found.');\n    }\n  }\n}\n\n// 下面这段代码，用于默认实例类的 ts 定义正确被继承\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface HTTPClientService extends HTTPClient {\n  // empty\n}\n\n// 下面这段代码，用于默认实例类的实现可以被代理\ndelegateTargetAllPrototypeMethod(HTTPClientService, HTTPClient);\n```\n\n----------------------------------------\n\nTITLE: Define I18n Function for Template Usage (Typescript)\nDESCRIPTION: Defines the `i18n` function used in the template. This function takes the template name (message key) and arguments as input. Requires `@midwayjs/i18n`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction i18n(templateName: string, args: Record<string, any>) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permissions with UsePermission\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `UsePermission` decorator to define the required permissions for a specific route. It sets the action, resource, and possession required for accessing the `/users` endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, UseGuard } from '@midwayjs/core';\nimport { AuthActionVerb, AuthGuard, AuthPossession, UsePermission } from '@midwayjs/casbin';\nimport { Resource } from './resouce';\n\n@Controller('/')\nexport class HomeController {\n\n  @UseGuard(AuthGuard)\n  @UsePermission({\n    action: AuthActionVerb.READ,\n    resource: Resource.USER_ROLES,\n    possession: AuthPossession.ANY\n  })\n  @Get('/users')\n  async findAllUsers() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Framework with Bootstrap (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to initialize and run a web framework (e.g., Koa) within a Midway application using the `@midwayjs/bootstrap` library.  It creates a `WebFramework` instance, configures it with a port number, and then loads and runs the framework using `Bootstrap.load(web).run()`. This is the standard way to start a Midway application with a framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_development.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst WebFramework = require('@midwayjs/koa').Framework;\nconst web = new WebFramework().configure({\n  port: 7001,\n});\n\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap.load(web).run();\n```\n\n----------------------------------------\n\nTITLE: Writing a unit test for a gRPC service\nDESCRIPTION: This code shows how to write a unit test for a gRPC service using the `@midwayjs/grpc` and `@midwayjs/mock` packages. It creates a test application, configures the gRPC service, creates a gRPC consumer, and then calls the service to verify the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\nimport { Framework, createGRPCConsumer } from '@midwayjs/grpc';\nimport { join } from 'path';\nimport { helloworld } from '../src/domain/helloworld';\n\ndescribe('test/index.test.ts', () => {\n  it('should create multiple grpc service in one server', async () => {\n    const baseDir = join(__dirname, '../');\n\n    // 创建服务\n    const app = await createApp<Framework>(baseDir, {\n      services: [\n        {\n          protoPath: join(baseDir, 'proto', 'helloworld.proto'),\n          package: 'helloworld',\n        },\n      ],\n    });\n\n    // 调用服务\n    const service = await createGRPCConsumer<helloworld.GreeterClient>({\n      package: 'helloworld',\n      protoPath: join(baseDir, 'proto', 'helloworld.proto'),\n      url: 'localhost:6565',\n    });\n\n    const result = await service.sayHello().sendMessage({\n      name: 'harry',\n    });\n\n    expect(result.message).toEqual('Hello harry');\n    await close(app);\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Define gRPC dependencies in package.json\nDESCRIPTION: This JSON snippet shows how to add `@midwayjs/grpc` as a runtime dependency and `@midwayjs/grpc-helper` as a development dependency in the `package.json` file. This specifies the project's dependency on these gRPC modules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/grpc\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    \"@midwayjs/grpc-helper\": \"^1.0.0 \",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jaeger Exporter\nDESCRIPTION: This snippet shows how to configure the Jaeger exporter to send traces to a Jaeger instance. It includes installing the necessary dependencies and configuring the exporter within the OpenTelemetry SDK.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { JaegerExporter } = require('@opentelemetry/exporter-jaeger');\nconst { JaegerPropagator } = require('@opentelemetry/propagator-jaeger');\n// ...\n\nconst exporter = new JaegerExporter({\n  tags: [], // optional\n  // You can use the default UDPSender\n  host: 'localhost', // optional\n  port: 6832, // optional\n  // OR you can use the HTTPSender as follows\n  // endpoint: 'http://localhost:14268/api/traces',\n  maxPacketSize: 65000 // optional\n});\n\n// 初始化一个 open-telemetry 的 SDK\nconst sdk = new NodeSDK({\n  traceExporter: exporter,\n  textMapPropagator: new JaegerPropagator()\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Context with mockContext - TypeScript\nDESCRIPTION: This code illustrates how to mock the Midway Context using the `mockContext` method from `MidwayMockService`. It shows how to mock a simple property with default and custom groups, requiring an app instance for context. Dependencies: @midwayjs/core\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayMockService, Configuration, App } from '@midwayjs/core';\n\n@Configuration(/**/)\nexport class MainConfiguration {\n  @Inject()\n  mockService: MidwayMockService;\n\n  @App()\n  app;\n\n  async onReady() {\n    // 模拟上下文， 默认分组\n    this.mockService.mockContext(app, 'user', 'midway');\n    // 自定义分组\n    this.mockService.mockContext(app, 'user', 'midway', 'group1');\n  }\n}\n\n// ctx.user => midway\n```\n\n----------------------------------------\n\nTITLE: Get Uploaded Files - File Mode\nDESCRIPTION: Retrieves uploaded files and fields in 'file' mode using the @Files and @Fields decorators. The files parameter is an array of UploadFileInfo objects, and the fields parameter is an object containing other form fields.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post, Files, Fields } from '@midwayjs/core';\nimport { UploadFileInfo } from '@midwayjs/busboy';\n\n@Controller('/')\nexport class HomeController {\n\n  @Post('/upload', /*...*/)\n  async upload(@Files() files: Array<UploadFileInfo>, @Fields() fields: Record<string, string>) {\n    /*\n    files = [\n      {\n        filename: 'test.pdf',        // 文件原名\n        data: '/var/tmp/xxx.pdf',    // 服务器临时文件地址\n        mimeType: 'application/pdf', // mime\n        fieldName: 'file'            // field name\n      },\n    ]\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage with TypeScript\nDESCRIPTION: Starts the test runner with TypeScript support and generates code coverage reports.  Uses Jest by default.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin cov --ts\n```\n\n----------------------------------------\n\nTITLE: Configure AsyncIterator Mode\nDESCRIPTION: Configures the upload mode to 'asyncIterator' in the application configuration. This mode provides an AsyncGenerator for handling file streams.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  busboy: {\n    mode: 'asyncIterator',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Logger\nDESCRIPTION: This TypeScript code shows how to configure a separate logger for BullMQ.  It defines a custom `fileLogName` for the logger to use. Place this in your `src/config/config.default.ts`\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      bullMQLogger: {\n        fileLogName: 'midway-bullmq.log',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Kafka Component (Standalone)\nDESCRIPTION: Enables the Kafka component within a MidwayJS configuration file. This snippet shows how to import and include the Kafka module in the `imports` array of the `@Configuration` decorator. This sets up Kafka as a standalone main framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as kafka from '@midwayjs/kafka';\n\n@Configuration({\n  imports: [\n    kafka\n  ],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install EJS view dependency\nDESCRIPTION: Installs the @midwayjs/view-ejs package as a project dependency. This package provides the necessary integration for using EJS templates within a MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/view-ejs@2 --save\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Interceptors for Default Axios Instance in Typescript\nDESCRIPTION: This snippet shows how to configure global interceptors for the default Axios instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, IMidwayContainer } from '@midwayjs/core';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    axios // import axios components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n  \tconst httpService = await container.getAsync(axios.HttpService);\n    httpService.interceptors.request.use (\n      config => {\n        // Do something before request is sent\n        return config;\n      },\n      error => {\n        // Do something with request error\n        return Promise.reject(error);\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StageTwo Valve in MidwayJS\nDESCRIPTION: This code defines a pipeline valve named `StageTwo` using the `@Provide()` decorator. The `invoke` method contains the core logic of `StageTwo`. It retrieves context keys, sets stage-specific data based on data from the previous stage (`ctx.get('stageone')`), performs assertions to validate the execution flow, and then returns the string 'stagetwo'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nclass StageTwo implements IValveHandler {\n  async invoke(ctx: IPipelineContext): Promise<any> {\n    const keys = ctx.keys();\n    if (keys.length! = = 2) {\n      throw new Error('keys is not equal');\n    }\n    ctx.set('stagetwo', ctx.get('stageone') + 1);\n    ctx.set('stagetwo_date', Date.now());\n    // Verify whether it is the result returned by the execution stageOne\n    if (ctx.info.prevValue! = = 'stageone') {\n      throw new Error('stageone result empty');\n    }\n    if (ctx.info.current! = = 'stageTwo') {\n      throw new Error('current stage is not stageTwo');\n    }\n    if (ctx.info.next) {\n      throw new Error('stageTwo next stage is not undefined');\n    }\n    if (ctx.info.prev! = = 'stageOne') {\n      throw new Error('prev stage is not stageOne');\n    }\n\n    return 'stagetwo';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Socket.IO Message Event - TypeScript\nDESCRIPTION: Handles incoming messages from a Socket.IO client using the `@OnWSMessage` decorator in MidwayJS. The decorator's input specifies the event name to listen for, and the decorated method will be executed when that event is received.  The `ctx` object represents the socket instance and can be injected via `@Inject()` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, Provide, OnWSMessage, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/socketio';\n\n@WSController('/')\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('myEvent')\n  async gotMessage(data) {\n    console.log('on data got', this.ctx.id, data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Chinese Locale File (zh_CN.json)\nDESCRIPTION: Defines key-value pairs for Chinese translations within the `zh_CN.json` file. The keys represent message identifiers, and the values are the corresponding translated text. Placeholders like `{username}` are used for dynamic replacements.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hello\": \"你好 {username}\",\n  \"email\": \"邮箱\",\n  \"login\": \"帐号\",\n  \"createdAt\": \"注册时间\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Router Table in TypeScript\nDESCRIPTION: This snippet shows how to retrieve a hierarchical router table from the WebRouterCollector using the getRouterTable method. The result is a Map where the key is the controller's route prefix (string), and the value is an array of RouterInfo objects for that controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/router_table.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync getRouterTable(): Promise<Map<string, RouterInfo[]>>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await collector.getRouterTable();\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Cookies in MidwayJS (Typescript)\nDESCRIPTION: This code snippet demonstrates how to set and retrieve cookies in a MidwayJS controller using the `ctx.cookies` object. It sets a cookie named 'foo' with the value 'bar' and encrypts it.  Then it retrieves the cookie with the same name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // set cookie\n    this.ctx.cookies.set('foo', 'bar', { encrypt: true });\n    // get cookie\n    this.ctx.cookies.get('foo', { encrypt: true });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IValveHandler Implementations\nDESCRIPTION: Defines the IValveHandler implementations for retrieving video feeds, account information, tab information, and an error-producing handler. These classes use the TestService to fetch data and implement the `invoke` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 返回视屏信息的\n@Provide()\nclass VideoFeeds implements IValveHandler {\n  alias = 'videos';\n\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<VideoDto[]> {\n    return this.service.getVideos(ctx.args);\n  }\n}\n// 返回账户信息的\n@Provide()\nclass AccountMap implements IValveHandler {\n  alias = 'account';\n\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<AccountDto> {\n\n    // 获取数据执行逻辑\n    return this.service.getAccount(ctx.args);\n  }\n}\n// 返回tab信息的\n@Provide()\nclass CrowFeeds implements IValveHandler {\n  alias = 'tab';\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<TabDto> {\n    // 获取数据执行逻辑\n    return this.service.getTab(ctx.args);\n  }\n}\n// 捕捉整个错误异常的\n@Provide()\nclass ErrorFeeds implements IValveHandler {\n  alias = 'tab';\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<TabDto> {\n    // 获取数据执行逻辑\n    throw new Error('this is error feeds');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Access Job Context\nDESCRIPTION: This TypeScript snippet demonstrates how to access the job context within a task processor. The context provides access to information about the current job, such as the job ID and the `Job` object itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/queue/test.queue.ts\nimport { Processor, IProcessor, Context } from '@midwayjs/bull';\n\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n\n  @Inject()\n  ctx: Context;\n\n  async execute() {\n    // ctx.jobId => xxxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create GET request with query parameters\nDESCRIPTION: This snippet demonstrates how to create a GET request with query parameters using `createHttpRequest`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app)\n  .get('/set_header')\n  .query({ name: 'harry' });\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Data Source in MidwayJS Sequelize Configuration (TypeScript)\nDESCRIPTION: This snippet showcases how to specify the default data source when using multiple data sources in your MidwayJS Sequelize configuration. The `defaultDataSourceName` property in the `sequelize` configuration determines which data source is used by default.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  sequelize: {\n    dataSource: {\n      default1: {\n        // ...\n      },\n      default2: {\n        // ...\n      },\n    },\n    // 多个数据源时可以用这个指定默认的数据源\n    defaultDataSourceName: 'default1',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Global Options for Typegoose\nDESCRIPTION: This TypeScript code shows how to set global options for Typegoose, such as schema options and other configurations, within the `onConfigLoad` lifecycle hook in the `src/configuration.ts` file. These global options affect all Typegoose models in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// srcconfiguration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as typegoose from '@midwayjs/typegoose';\nimport * as Typegoose from '@typegoose/typegoose';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  async onConfigLoad() {\n\n    Typegoose.setGlobalOptions({\n      schemaOptions: {\n        // ...\n      },\n      options: { allowMixed: Severity.ERROR }\n    });\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Component in Configuration - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to enable a component in the `src/configuration.ts` file. The `@midwayjs/validate` component is imported and added to the `imports` array within the `@Configuration` decorator.  This tells MidwayJS to load and initialize the component during application startup. Requires `@midwayjs/core` and the component itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/midway_component.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 应用或者函数的 src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as validate from '@midwayjs/validate';\n\n@Configuration({\n  imports: [validate],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Swagger Configuration\nDESCRIPTION: This code shows how to configure Swagger options such as title, description, version, contact information, and license details in the `config.default.ts` file. These options are used to customize the Swagger UI and provide more information about the API.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const swagger = {\n  title: 'midway-swagger',\n  description: 'swagger-ui for midway api',\n  version: '1.0.0',\n  termsOfService: '',\n  contact: {\n    name: 'API Support',\n    url: 'http://www.example.com/support',\n    email: 'support@example.com',\n  },\n  license: {\n    name: 'Apache 2.0',\n    url: 'https://www.apache.org/licenses/LICENSE-2.0.html',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary File Cleanup in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure automatic temporary file cleanup for file uploads using the `cleanTimeout` property in the `busboy` configuration. It shows also how to set a temporary directory for file uploads using the `tmpdir` property. The timeout is in milliseconds; set to 0 to disable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/busboy';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  busboy: {\n    mode: 'file',\n    tmpdir: join(tmpdir(), 'midway-busboy-files'),\n    cleanTimeout: 5 * 60 * 1000,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Consul Components\nDESCRIPTION: These commands install the necessary Consul components and type definitions for Midwayjs. The @midwayjs/consul package provides the Consul integration, while @types/consul provides TypeScript definitions for the Consul API.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/consul@3 --save\n$ npm i @types/consul --save-dev\n```\n\n----------------------------------------\n\nTITLE: Loading Photo with Metadata using Find Options\nDESCRIPTION: This code snippet demonstrates how to load a `Photo` entity along with its associated `PhotoMetadata` using TypeORM's `find` method. The `relations: ['metadata']` option specifies that the `metadata` relation should be loaded eagerly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhoto() {\n\t\t/*...*/\n    let photos = await this.photoModel.find({ relations: [ 'metadata' ] }); // typeorm@0.2.x\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Column Value Transformation with TypeORM in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `transformer` option in TypeORM column decorators to handle input and output parameter conversions, specifically for formatting dates using Day.js. It defines a `dateTransformer` object with `from` and `to` methods for formatting and converting dates, and applies it to a `createdAt` column in the `Photo` entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport * as dayjs from 'dayjs';\n\nconst dateTransformer = {\n  from: (value: Date | number) => {\n    return dayjs(typeof value === 'number' ? value: value.getTime()).format('YYYY-MM-DD HH:mm:ss');\n  },\n  to: () => new Date(),\n};\n\n@Entity()\nexport class Photo {\n  // ...\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    transformer: dateTransformer,\n  })\n  createdAt: Date;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Services via Dependency Injection (TypeScript)\nDESCRIPTION: This snippet demonstrates how to test individual services by retrieving them from the dependency injection container. The `getApplicationContext().getAsync()` method is used to obtain an instance of the service, and it can be retrieved either by its injection ID (string) or class.  Both ways are showed in the code.  `createApp` and `close` manages the lifecycle of app.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/web';\nimport * as assert from 'assert';\nimport { UserService } from '../../src/service/user';\n\ndescribe('test/controller/home.test.ts', () => {\n  it('should GET /', async () => {\n    // create app\n    const app = await createApp<Framework>();\n\n    // 根据依赖注入 Id 获取实例\n    const userService = await app.getApplicationContext().getAsync<UserService>('userService');\n    // 根据依赖注入 class 获取实例\n    const userService = await app.getApplicationContext().getAsync<UserService>(UserService);\n    // 传入 class 忽略泛型也能正确推导\n    const userService = await app.getApplicationContext().getAsync(UserService);\n\n    // close app\n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Single Function Middleware with withController\nDESCRIPTION: This snippet shows how to apply middleware to a single function using `withController`. It utilizes `@midwayjs/hooks` and `@midwayjs/faas`. The logger middleware measures and logs the request processing time.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_middleware.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withController } from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/faas';\n\nconst logger = async (next) => {\n  const ctx: Context = useContext();\n\n  const start = Date.now();\n  await next();\n  const cost = Date.now() - start;\n  console.log(`request ${ctx.url} cost ${cost}ms`);\n};\n\nexport default withController(\n  {\n    middleware: [logger],\n  },\n  () => {\n    return 'Hello Controller';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Automatic Type Generation (TypeScript)\nDESCRIPTION: This code demonstrates how to use the `json-type-graphql` library to automatically generate TypeGraphQL type definitions from a JSON data source (in this case, a URL). It configures the reader to fetch data from the URL and the writer to output the generated TypeScript file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/graphql.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport transformer from 'json-type-graphql';\nimport path from 'path';\n\n(async () => {\n  await transformer({\n    reader: {\n      url: 'http://127.0.0.1:7001/',\n    },\n    writter: {\n      outputPath: path.join(__dirname, './generated.ts'),\n    },\n  });\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Unified Return Structure Middleware in MidwayJS\nDESCRIPTION: This middleware formats API responses to a consistent structure with code, message, and data fields. It intercepts requests matching the '/api' path and wraps the result of the next middleware with a predefined format. Requires @midwayjs/core and @midwayjs/koa dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class FormatMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      const result = await next();\n      return {\n        code: 0,\n        msg: 'OK',\n        data: result\n      }\n    };\n  }\n\n  match(ctx) {\n    return ctx.path.indexOf('/api') !== -1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual File Upload via FormData (TypeScript)\nDESCRIPTION: This code demonstrates how to manually upload a file using FormData and the `fetch` API. It retrieves the selected file from an input element, appends it to a FormData object, and sends a POST request to the specified endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/upload.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst input =\n  document.getElementById('file');\n\nconst formdata = new FormData();\nformdata.append('file', input.files[0]);\n\nfetch('/api/upload', {\n  method: 'POST',\n  body: formdata\n})\n  .then((res) => res.json())\n  .then((res) => console.log(res));\n```\n\n----------------------------------------\n\nTITLE: Specify Default Data Source\nDESCRIPTION: This configuration defines which data source is the default when multiple data sources exist.  The `defaultDataSourceName` is used to specify which of the defined datasources should be used by default.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  sequelize: {\n    dataSource: {\n      default1: {\n        // ...\n      },\n      default2: {\n        // ...\n      },\n    },\n    // You can use this to specify the default data source when there are multiple data sources\n    defaultDataSourceName: 'default1',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Session Validity Period\nDESCRIPTION: This configuration enables the `renew` option, which extends the session validity period if the session is nearing its expiration. This prevents users from being logged out prematurely if they are actively using the site.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  session: {\n    renew: true\n    // ...\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Environment Variables at Startup (Bash)\nDESCRIPTION: This snippet demonstrates how to specify the operating environment using environment variables when starting a MidwayJS application via npm. `MIDWAY_SERVER_ENV` has higher priority than `NODE_ENV`. These commands set the environment and then start the application using `npm start`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/environment.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMIDWAY_SERVER_ENV=prod npm start // first priority\nNODE_ENV=local npm start // second priority\n```\n\n----------------------------------------\n\nTITLE: Using the ctx.logger Object\nDESCRIPTION: This snippet demonstrates how to use the `ctx.logger` object to log information, warnings, and errors within a Midway Serverless function. The `ctx.logger` provides a convenient way to output log messages during function execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_context.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.logger.info('hello');\nctx.logger.warn('hello');\nctx.logger.error('hello');\n```\n\n----------------------------------------\n\nTITLE: Disable Favicon Middleware\nDESCRIPTION: This TypeScript configuration disables the favicon middleware within the siteFile component of a MidwayJS application. Setting `enable: false` prevents the framework from automatically serving a favicon.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  siteFile: {\n    enable: false,\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Axios Instance in config.default.ts in Typescript\nDESCRIPTION: This snippet demonstrates how to configure the default Axios instance in the `src/config.default.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  axios: {\n    default: {\n      // The configuration of all instances reuse.\n    },\n    clients: {\n      // The configuration of the default instance.\n      default: {\n        baseURL: 'https://api.example.com',\n        // 'headers' are custom headers to be sent\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest'\n        },\n        timeout: 1000, // default is '0' (no timeout)\n\n        // 'withCredentials' indicates whether or not cross-site Access-Control requests\n        // should be made using credentials\n        withCredentials: false, // default\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Response in MidwayJS\nDESCRIPTION: This code demonstrates how to implement a streaming response in MidwayJS using the `ctx.res.write` and `ctx.res.end` methods. It also sets the `Transfer-Encoding` header to `chunked` and status to 200.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, sleep } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n   @Inject()\n   ctx: Context;\n  \n   @Get('/')\n   async home() {\n     this.ctx.status = 200;\n     this.ctx.set('Transfer-Encoding', 'chunked');\n     for (let i = 0; i < 100; i++) {\n       await sleep(100);\n       this.ctx.res.write('abc'.repeat(100));\n     }\n    \n     this.ctx.res.end();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing gRPC Client Multi-Package Name\nDESCRIPTION: This code snippet addresses an issue related to handling multiple package names in gRPC clients.  It resolves a bug where gRPC client configuration or generation was not correctly processing multiple package definitions in proto files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/grpc/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n- multi package name in grpc client ([#917](https://github.com/midwayjs/midway/issues/917)) ([9e08c93](https://github.com/midwayjs/midway/commit/9e08c938988ee965685d751f33730989893a291c))\n```\n\n----------------------------------------\n\nTITLE: Calling gRPC Bidirectional Stream (DUPLEX) with Midwayjs in Typescript\nDESCRIPTION: This code shows how to call a gRPC bidirectional stream from the client-side.  It uses `getCall` to get the client stream and attaches a 'data' event listener to consume the results.  Data is sent to the server using `duplexCall.write` and the stream is closed using `duplexCall.end`. It requires the gRPC service client (service).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst clientStream = service.addMore().getCall();\n\nlet total = 0;\nlet idx = 0;\n\nduplexCall.on('data', (data: math.Num) => {\n  total += data.num;\n  idx++;\n  if (idx === 2) {\n    duplexCall.end();\n    // total => 29\n  }\n});\n\nduplexCall.write({\n  num: 3,\n});\n\nduplexCall.write({\n  num: 6\n});\n\n```\n\n----------------------------------------\n\nTITLE: Installing Bull Board UI Component - Bash\nDESCRIPTION: This snippet shows how to install the `@midwayjs/bull-board` package using npm.  This component provides a UI for managing BullMQ queues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/bull-board@3 --save\n```\n\n----------------------------------------\n\nTITLE: Importing Security Module in Configuration\nDESCRIPTION: This TypeScript code demonstrates how to import and integrate the security module into your Midway.js application's configuration. It registers the security component to be used by other modules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/security.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as security from '@midwayjs/security';\n@Configuration({\n  imports: [\n    // ...other components\n    security\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Modifying Configurations with onConfigLoad in TypeScript\nDESCRIPTION: Demonstrates how to modify application configurations using the `onConfigLoad` lifecycle hook. This example returns a simple object that is automatically merged into the application's configuration. Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onConfigLoad(): Promise<void> {\n    // 直接返回数据，会自动合并到配置中\n    return {\n      test: 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Photo with Metadata using QueryBuilder\nDESCRIPTION: This code demonstrates how to load a `Photo` entity along with its associated `PhotoMetadata` using TypeORM's `QueryBuilder`. The `innerJoinAndSelect` method specifies that the `metadata` relation should be joined and selected in the query. 'photo' and 'metadata' are aliases.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhoto() {\n\t\t/*...*/\n    let photos = await this.photoModel\n      .createQueryBuilder('photo')\n      .innerJoinAndSelect('photo.metadata', 'metadata')\n      .getMany();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Sequelize Component in Midway\nDESCRIPTION: This TypeScript code snippet demonstrates how to enable the Sequelize component within a MidwayJS application's configuration. It imports the necessary modules and adds `sequelize` to the imports array within the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, ILifeCycle } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as sequelize from '@midwayjs/sequelize';\n\n@Configuration({\n  imports: [\n    // ...\n    sequelize,\n  ],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class MainConfiguration implements ILifeCycle {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an EJS template in a Midway.js controller\nDESCRIPTION: This TypeScript code shows how to render an EJS template from within a Midway.js controller. It injects the `Context` and uses the `ctx.render` method to render the `hello.ejs` template, passing in a `data` variable with the value 'world'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render() {\n    await this.ctx.render('hello.ejs', {\n      data: 'world',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Task Execution\nDESCRIPTION: This snippet demonstrates how to manually execute a task by retrieving the queue associated with the processor using `bullmqFramework.getQueue('test')` and then adding a job to the queue using `addJobToQueue()`.  This is done within the `onServerReady` lifecycle hook.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as bullmq from '@midwayjs/bullmq';\n\n@Configuration({\n  imports: [\n    bullmq\n  ]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  bullmqFramework: bullmq.Framework;\n\n  async onServerReady() {\n    // Get the queue associated with the Processor\n    const testQueue = this.bullmqFramework.getQueue('test');\n    // Execute the task immediately\n    await testQueue?.addJobToQueue();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Data Source Synchronization in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure Sequelize data source synchronization parameters such as `force` and `alter` within your MidwayJS application configuration. These options control how Sequelize updates the database schema to match your models.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  sequelize: {\n    dataSource: {\n      default: {\n        sync: true,\n        syncOptions: {\n          force: false,\n          alter: true,\n        },\n      },\n    },\n    // 多个数据源时可以用这个指定默认的数据源\n    defaultDataSourceName: 'default',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Column with Explicit DataType\nDESCRIPTION: This TypeScript code shows how to define a column with a specific data type in a Sequelize model using the `@Column` decorator and the `DataType` enum.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Column, DataType } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @Column(DataType.TEXT)\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up All Mocks in MidwayJS\nDESCRIPTION: This code snippet shows how to use `restoreAllMocks` from `@midwayjs/mock` to clear all mock data manually. This is useful when you want to reset mocks before or after a test.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { restoreAllMocks } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  restoreAllMocks();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Passing request headers\nDESCRIPTION: This code demonstrates how to pass request headers to a Midway Hooks API. It uses `Headers<{ token: string }>()` to declare the expected header. The handler function retrieves the value of `token` from the context's `headers` property and returns it in an object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Headers,\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get('/auth'),\n  Headers<{ token: string }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      token: ctx.headers.token\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Access Message Context (Consumer)\nDESCRIPTION: Demonstrates how to access the message context within a Kafka consumer.  It injects the `Context` object into the consumer class, providing access to the message payload and the Kafka consumer instance itself. This allows for operations like manual offset committing and pausing consumption.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/consumer/sub1.consumer.ts\nimport { KafkaConsumer, IKafkaConsumer, EachMessagePayload, Context } from '@midwayjs/kafka';\nimport { Inject } from '@midwayjs/core';\n\n@KafkaConsumer('sub1')\nclass Sub1Consumer implements IKafkaConsumer {\n\n  @Inject()\n  ctx: Context;\n\n  async eachMessage(payload: EachMessagePayload) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure VSCode Debugger for Midway App\nDESCRIPTION: This snippet configures the VSCode debugger to launch a Midway application in local development mode. It defines a launch configuration that uses npm to run the 'dev' script, sets the environment to 'local', and configures the debugger to attach to child processes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/debugger.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // 使用 IntelliSense 了解相关属性。\n  // 悬停以查看现有属性的描述。\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Midway Local\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceRoot}\",\n      \"runtimeExecutable\": \"npm\",\n      \"windows\": {\n        \"runtimeExecutable\": \"npm.cmd\"\n      },\n      \"runtimeArgs\": [\"run\", \"dev\"],\n      \"env\": {\n        \"NODE_ENV\": \"local\"\n      },\n      \"console\": \"integratedTerminal\",\n      \"protocol\": \"auto\",\n      \"restart\": true,\n      \"port\": 7001,\n      \"autoAttachChildProcesses\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting response headers using Koa Context\nDESCRIPTION: This snippet demonstrates how to set response headers using the Koa Context object obtained via `useContext`. It sets the 'X-Powered-By' header to 'Midway'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  ctx.set('X-Powered-By', 'Midway');\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Enable Code Dye Component in Configuration\nDESCRIPTION: Enables the @midwayjs/code-dye component within the Midway.js application's configuration.  It imports the component and configures it to only be enabled in the 'local' environment, which is set in `enabledEnvironment`.  This prevents performance impacts in production environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/code_dye.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as codeDye from '@midwayjs/code-dye';\n\n@Configuration({\n  imports: [\n    // ...\n    {\n      component: codeDye,\n      enabledEnvironment: ['local'],\t// 只在本地启用\n    }\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration\nDESCRIPTION: This code snippet demonstrates how to define a global middleware in `configuration.ts`. The `createConfiguration` function is used to configure the middleware. It requires `@midwayjs/hooks` dependency. The logger is imported from a separate file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_middleware.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hooks, createConfiguration } from '@midwayjs/hooks';\nimport logger from './logger';\n\n// Global Middleware\nexport default createConfiguration({\n  imports: [\n    hooks({\n      middleware: [logger],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Calling API with path parameters (fullstack)\nDESCRIPTION: This snippet shows how to call an API endpoint with path parameters in a full-stack Midway Hooks application. It passes the parameters as an object to the function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport getArticle from './api/article';\nconst response = await getArticle({\n  params: { id: '100' },\n});\nconsole.log(response); // { article: '100' }\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Timestamp Columns\nDESCRIPTION: This code sets the default value for timestamp columns to the current time using the SQL `NOW()` function.  This is an alternative to modifying the database table itself and is needed if typeorm doesn't generate default values in create table statement.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({\n  default: () => \"NOW()\",\n  type: 'timestamp'\n})\ncreatedOn: Date;\n\n@Column({\n  default: () => \"NOW()\",\n  type: 'timestamp'\n})\nmodifiedOn: Date;\n```\n\n----------------------------------------\n\nTITLE: Injecting Entity Model with DataSourceName (Pseudo-code)\nDESCRIPTION: This code demonstrates the pseudo-code for how to manually specify the data source to use when injecting an entity model, especially in scenarios with multiple data sources. The injected decorator relies on external ORM dependencies which are not defined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// The following is the pseudo code\nimport { SimpleUser } from '../entity/user.entity';\n\nclass UserService {\n  @InjectEntityModel(SimpleUser, 'dataSource2')\n  userModel;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using ILogger from @midwayjs/logger\nDESCRIPTION: This snippet demonstrates importing and using the `ILogger` interface from the `@midwayjs/logger` package. This `ILogger` interface offers a more comprehensive set of logging methods compared to the one from `@midwayjs/core`.  Requires `@midwayjs/logger` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Logger } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Provide()\nexport class UserService {\n\n   @Inject()\n   logger: ILogger;\n\n   async getUser() {\n     // ...\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Gateway Triggers (MidwayJS, TypeScript)\nDESCRIPTION: Similar to HTTP trigger testing, this snippet uses `createHttpRequest` to simulate requests to API Gateway routes. It demonstrates sending a POST request with a payload and asserting the response. Requires `@midwayjs/mock`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHttpRequest } from '@midwayjs/mock';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from http trigger', async () => {\n    // ...\n    const result = await createHttpRequest(app).post('api_gateway_aliyun').send({\n      name: 'zhangting',\n    });\n\n    expect(result.text).toEqual('hello zhangting');\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK in bootstrap.js\nDESCRIPTION: This snippet demonstrates how to initialize the OpenTelemetry SDK within a `bootstrap.js` file, which is used for application deployment. It configures the service name, trace exporter, and auto-instrumentations. It also shows how to handle process termination to gracefully shut down the SDK. The code leverages the `@opentelemetry` packages to enable tracing. The traceExporter is configured with consoleSpanExporter() for initial debugging. To export traces to Jaeger, use JaegerExporter instead.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst process = require('process');\nconst { NodeSDK, node, resources } = require('@opentelemetry/sdk-node');\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions')\nconst { JaegerExporter } = require('@opentelemetry/exporter-jaeger')\n\n// Midway 启动文件\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// https://www.npmjs.com/package/@opentelemetry/exporter-jaeger\nconst tracerAgentHost = process.env['TRACER_AGENT_HOST'] || '127.0.0.1'\nconst jaegerExporter = new JaegerExporter({\n  host: tracerAgentHost,\n});\n\n// 初始化一个 open-telemetry 的 SDK\nconst sdk = new NodeSDK({\n  // 设置追踪服务名\n  resource: new resources.Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: 'my-app',\n  }),\n  // 配置当前的导出方式，比如这里配置了一个输出到控制台的，也可以配置其他的 Exporter，比如 Jaeger\n  traceExporter: new node.ConsoleSpanExporter(),\n  // 配置当前导出为 jaeger\n  // traceExporter: jaegerExporter,\n\n  // 这里配置了默认自带的一些监控模块，比如 http 模块等\n  // 若初始化时间很长，可注销此行，单独配置需要的 instrumentation 条目\n  instrumentations: [getNodeAutoInstrumentations()]\n});\n\n// 初始化 SDK，成功启动之后，再启动 Midway 框架\nsdk.start()\n\n// 在进程关闭时，同时关闭数据采集\nprocess.on('SIGTERM', () => {\n  sdk.shutdown()\n    .then(() => console.log('Tracing terminated'))\n    .catch((error) => console.log('Error terminating tracing', error))\n    .finally(() => process.exit(0));\n});\n\nBootstrap\n  .configure(/**/)\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Property in Midway.js (TypeScript)\nDESCRIPTION: This code shows how to mock a class property using `mockClassProperty`. It mocks the `data` property of the `UserService` class to `{ bbb: 1 }`. The `UserService` class is expected to be defined with the `@Provide()` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class UserService {\n  data;\n\n  async getUser() {\n    return 'hello';\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockClassProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  mockClassProperty(UserService, 'data', {\n    bbb: 1\n  });\n  // userService.data => {bbb: 1}\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull and Bull Board Modules in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and configure both the `bull` and `bullBoard` modules within a MidwayJS application using the `@Configuration` decorator. This enables the Bull queue and Bull Board UI functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as bull from '@midwayjs/bull';\nimport * as bullBoard from '@midwayjs/bull-board';\n\n@Configuration({\n  imports: [\n    // ...\n    bull,\n    bullBoard,\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Security Component to package.json\nDESCRIPTION: Adds the @midwayjs/security dependency to the `package.json` file.  This ensures that the component is installed with the project's other dependencies. Version `^3.0.0` or higher is recommended.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/security.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/security\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BullMQ Configuration with Redis\nDESCRIPTION: This snippet shows a basic configuration for BullMQ, connecting to a Redis server at 127.0.0.1 on port 6379 and setting a default queue prefix.  All queues, processors, queue events, and flow producers will reuse this configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  bullmq: {\n    defaultConnection: {\n      host: '127.0.0.1',\n      port: 6379,\n    },\n    // Optional, queue prefix\n    defaultPrefix: '{midway-bullmq}',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Single Rule's Error Text\nDESCRIPTION: This snippet illustrates how to define a custom error message for a specific validation rule using the `.error()` method of `RuleType`. This allows for overriding the default error message for an individual rule within a DTO. The error message is passed as a new `Error` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserDTO {\n  @Rule(RuleType.number().required().error(new Error('my custom message')))\n  id: number;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for gRPC Services\nDESCRIPTION: This TypeScript snippet shows how to write unit tests for gRPC services in a Midway.js application using `@midwayjs/mock` and `@midwayjs/grpc`. It creates a gRPC consumer using `createGRPCConsumer`, sends a message to the `sayHello` method, and asserts that the result matches the expected output. It's crucial to close the app after the test is completed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\nimport { Framework, createGRPCConsumer } from '@midwayjs/grpc';\nimport { join } from 'path';\nimport { helloworld } from '../src/domain/helloworld';\n\ndescribe('test/index.test.ts', () => {\n\n  it('should create multiple grpc service in one server', async () => {\n    const baseDir = join(__dirname, '../');\n\n    // 创建服务\n    const app = await createApp<Framework>();\n\n    // 调用服务\n    const service = await createGRPCConsumer<helloworld.GreeterClient>({\n      package: 'helloworld',\n      protoPath: join(baseDir, 'proto', 'helloworld.proto'),\n      url: 'localhost:6565'\n    });\n\n    const result = await service.sayHello().sendMessage({\n      name: 'harry'\n    });\n\n    expect(result.message).toEqual('Hello harry');\n    await close(app);\n  });\n\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configure Default ETCD Client\nDESCRIPTION: This TypeScript code snippet demonstrates configuring the default ETCD client in the `config.default.ts` file.  It sets the `host` property within the `etcd.client` object to specify the ETCD server address.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/etcd.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  //...\n  etcd: {\n    client: {\n      host: [\n        '127.0.0.1:2379'\n      ]\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Define a Repeated Task with Cron Expression\nDESCRIPTION: This TypeScript snippet demonstrates how to define a repeated task using a cron expression. The `repeat` option in the `@Processor` decorator allows you to schedule the task to run at specific intervals.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, IProcessor } from '@midwayjs/bull';\nimport { FORMAT } from '@midwayjs/core';\n\n@Processor('test', {\n  repeat: {\n    cron: FORMAT.CRONTAB.EVERY_PER_5_SECOND\n  }\n})\nexport class TestProcessor implements IProcessor {\n  @Inject()\n  logger;\n\n  async execute() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Subscription in a Service in TypeScript\nDESCRIPTION: This code snippet demonstrates how to inject and use the MemoryDataListener in a service. The UserService class injects the MemoryDataListener using @Inject and then calls the getData method to retrieve the current data. This hides the complexity of data updates from the service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_listener.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { MemoryDataListener } from '../listener/memory.listner.ts';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  memoryDataListener: MemoryDataListener;\n\n  async getUserHelloData() {\n    const helloData = this.memoryDataListener.getData();\n    // helloData => helloxxxxxxxx\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Add Web Routing Function - MidwayJS - TypeScript\nDESCRIPTION: Illustrates how to dynamically add a web routing function in MidwayJS. The `addRouter` method of the `MidwayWebRouterService` is used to register a route handler dynamically.  The first argument is the route handler function, which can be in either Koa/Egg or Express format.  The second argument is an object containing the `url` and `requestMethod` properties to define the route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { MidwayWebRouterService, Configuration, Inject } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  async onReady() {\n    // koa/egg format\n    this.webRouterService.addRouter(async (ctx) => {\n      return 'hello world';\n    }, {\n      url: '/api/user',\n      requestMethod: 'GET',\n    });\n\t\t// ...\n\n    // express format\n    this.webRouterService.addRouter(async (req, res) => {\n      return 'hello world';\n    }, {\n      url: '/api/user',\n      requestMethod: 'GET',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Routing Priority Example in Midway\nDESCRIPTION: This code snippet demonstrates the routing priority in Midway. The route `/invoke/abc` will be registered before `/invoke/*` ensuring that it takes precedence when matched.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api')\nexport class APIController {\n  @Get('/invoke/*')\n  async invokeAll() {\n  }\n\n  @Get('/invoke/abc')\n  async invokeABC() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Cron Job Instance\nDESCRIPTION: This TypeScript snippet shows how to inject a cron job instance using the `@InjectJob` decorator. You can inject either the class itself or the task name. This allows you to interact with the cron job object within your application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as cron from '@midwayjs/cron';\nimport { InjectJob, CronJob } from '@midwayjs/cron';\nimport { DataSyncCheckerJob } from './job/sync.job';\n\n@Configuration({\n   imports: [\n     cron\n   ],\n})\nexport class ContainerConfiguration {\n   @InjectJob(DataSyncCheckerJob)\n   syncJob: CronJob;\n  \n   @InjectJob('syncJob')\n   syncJob2: CronJob;\n\n   async onServerReady() {\n     // this.syncJob === this.syncJob2\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Sequelize Data Source Using Decorator in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to inject Sequelize data sources using the `@InjectDataSource` decorator in MidwayJS. It shows how to inject both the default data source and a custom data source specified by name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { InjectDataSource } from '@midwayjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n\n  // 注入默认数据源\n  @InjectDataSource()\n  defaultDataSource: Sequelize;\n\n  // 注入自定义数据源\n  @InjectDataSource('default1')\n  customDataSource: Sequelize;\n\n  async onReady(container: IMidwayContainer) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in task processor\nDESCRIPTION: This TypeScript code demonstrates how to access the Context object within a task processor. The Context object provides access to the Job object, Job ID, and other relevant information about the task.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/queue/test.queue.ts\nimport { Processor, IProcessor, Context } from '@midwayjs/bull';\n\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n\n  @Inject()\n  ctx: Context;\n\n  async execute() {\n    // ctx.jobId => xxxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Override Core Logger Console Level\nDESCRIPTION: This snippet demonstrates how to override the default `consoleLevel` of the `coreLogger` in a MidwayJS application.  This is particularly useful during development to see more detailed output in the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// config.local.ts\nexport const logger = {\n  coreLogger: {\n    consoleLevel: 'INFO',\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Session Configuration (TypeScript)\nDESCRIPTION: This code displays the default session configuration in a Midway.js application. It showcases the `maxAge`, `key`, and `httpOnly` properties. The `key` defines the cookie name used for storing the session ID.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  session: {\n    maxAge: 24 * 3600 * 1000, // 1天\n    key: 'MW_SESS',\n    httpOnly: true,\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KafkaJS Partitioner in Midway.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to explicitly configure the KafkaJS partitioner in a Midway.js application's configuration file. It imports `KafkaJS` and `Partitioners` from the `@midwayjs/kafka` package and sets the `createPartitioner` option in the producer's `producerOptions` to either `DefaultPartitioner` or `LegacyPartitioner`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { KafkaJS } from '@midwayjs/kafka';\nconst { Partitioners } = KafkaJS;\n\nexport default {\n  kafka: {\n    producer: {\n      clients: {\n        pub1: {\n          // ...\n          producerOptions: {\n            createPartitioner: Partitioners.DefaultPartitioner,\n            // ...\n            createPartitioner: Partitioners.LegacyPartitioner,\n          },\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Otel component in MidwayJS\nDESCRIPTION: Enables the @midwayjs/otel component within the MidwayJS application by importing it in the `Configuration` class. This allows the use of the @Trace decorator for method tracing. It also imports koa.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/otel/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as otel from '@midwayjs/otel';\n\n@Configuration({\n  imports: [\n    koa,\n    otel\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Payload in Subscriber\nDESCRIPTION: This TypeScript code shows how to access the message payload within the `subscribe` method of an MQTT subscriber.  The message is available via `this.ctx.message` and needs to be converted to a string using `.toString()`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport class Sub1Subscriber implements IMqttSubscriber {\n   @Inject()\n   ctx: Context;\n\n   async subscribe() {\n     const payload = this.ctx.message.toString();\n     // ...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Specifying Cache Key with @Caching in Midway\nDESCRIPTION: This code demonstrates how to manually define a custom cache key for a method using the `@Caching` decorator. Instead of the automatically generated key, a specific key, `'customKey'`, is used.  The TTL is also specified as 100 seconds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n   @Caching('default', 'customKey', 100)\n   async getUser(name: string) {\n     return name;\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Task History Retention in Decorator (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the number of task records to keep after successful completion or failure using the `@Processor` decorator. The `removeOnComplete` and `removeOnFail` options specify the maximum number of records to retain, preventing excessive key usage in Redis.  Dependencies: `@midwayjs/bull`, `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FORMAT } from '@midwayjs/core';\nimport { IProcessor, Processor } from '@midwayjs/bull';\n\n@Processor('user', {\n  repeat: {\n    cron: FORMAT.CRONTAB.EVERY_MINUTE,\n  },\n  removeOnComplete: 3, // remove task records after success, keep up to 3 recent records\n  removeOnFail: 10,   // remove task records after failure\n})\nexport class UserService implements IProcessor {\n  execute(data: any) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Validation Examples (TypeScript)\nDESCRIPTION: This code shows various examples of validation rules using `RuleType` from the `@midwayjs/decorator` package, covering number, string, object, and array validation with required, optional, range, length, pattern, and item type constraints.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nRuleType.number().required(); // 数字，必填\nRuleType.string().empty(''); // 字符串非必填\nRuleType.number().max(10).min(1); // 数字，最大值和最小值\nRuleType.number().greater(10).less(50); // 数字，大于 10，小于 50\n\nRuleType.string().max(10).min(5); // 字符串，长度最大 10，最小 5\nRuleType.string().length(20); // 字符串，长度 20\nRuleType.string().pattern(/^[abc]+$/); // 字符串，匹配正则格式\n\nRuleType.object().length(5); // 对象，key 数量等于 5\n\nRuleType.array().items(RuleType.string()); // 数组，每个元素是字符串\nRuleType.array().max(10); // 数组，最大长度为 10\nRuleType.array().min(10); // 数组，最小长度为 10\nRuleType.array().length(10); // 数组，长度为 10\n\nRuleType.string().allow(''); // 非必填字段传入空字符串\n```\n\n----------------------------------------\n\nTITLE: Calling the Data Query API\nDESCRIPTION: Illustrates how to call the previously defined data query API. This code snippet imports the fetchFeeds function from the '../api/feeds' module and uses it to retrieve the published articles. The retrieved feeds are then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/prisma.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport fetchFeeds from '../api/feeds';\n\nfetchFeeds().then((feeds) => {\n  console.log(feeds);\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Context in Request Scope (TypeScript)\nDESCRIPTION: This snippet shows how to inject the current request context (ctx) into a controller using the `@Inject` decorator. This allows access to request-specific information within the controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Provide, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Provide() // actually can be omitted\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Simple GET Request with makeHttpRequest - TypeScript\nDESCRIPTION: This snippet demonstrates a simple GET request using the `makeHttpRequest` function from `@midwayjs/core`. It sends a request to the specified URL and returns the response data as a Buffer.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/');\n\n// Buffer.isBuffer(result.data)  => true\n```\n\n----------------------------------------\n\nTITLE: Setting File Size Limits in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet shows how to configure file size limits for uploads using the `limits.fileSize` property within the `busboy` configuration.  The value is specified in bytes. It also references other Busboy configuration options available in the library's documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  busboy: {\n    // ...\n    limits: {\n      fileSize: 1024\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Serverless Function with MidwayServerlessFunctionService (TypeScript)\nDESCRIPTION: This example illustrates how to use the MidwayServerlessFunctionService to dynamically add a serverless function. It defines the function handler, trigger type, metadata, and function/handler names.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayServerlessFunctionService, Configuration, Inject } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  serverlessFunctionService: MidwayServerlessFunctionService;\n\n  async onReady() {\n    this.serverlessFunctionService.addServerlessFunction(async (ctx, event) => {\n      return 'hello world';\n    }, {\n      type: ServerlessTriggerType.HTTP,\n      metadata: {\n        method: 'get',\n        path: '/api/hello'\n      },\n      functionName: 'hello',\n      handlerName: 'index.hello',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OSS Trigger Function\nDESCRIPTION: This code snippet demonstrates how to define a function that is triggered by OSS events using the `@ServerlessTrigger` decorator in Midway.js. It specifies the bucket name, event types, and optional filters (prefix and suffix) for the trigger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_oss.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context, FC } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.OS, {\n    bucket: 'ossBucketName',\n    events: ['oss:ObjectCreated:*', 'oss:ObjectRemoved:DeleteObject'],\n    filter: {\n      prefix: 'filterdir/',\n      suffix: '.jpg',\n    },\n  })\n  async handleOSSEvent(event: FC.OSSEvent) {\n    // xxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling @midwayjs/otel component\nDESCRIPTION: This snippet shows how to enable the @midwayjs/otel component within a Midway.js configuration file.  The otel component is imported and added to the imports array of the Configuration decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as otel from '@midwayjs/otel';\n\n@Configuration({\n  imports: [\n    // ...\n    otel\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSocket Component - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to enable the `@midwayjs/ws` component in a MidwayJS application.  It imports the `Configuration` decorator and the `ws` module, then uses the `@Configuration` decorator to add `ws` to the `imports` array, making the WebSocket functionality available in the application.  `onReady` is an async lifecycle hook called after application initialization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as ws from '@midwayjs/ws';\n\n@Configuration({\n  imports: [ws],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Kafka Consumer Configuration\nDESCRIPTION: This TypeScript code provides a detailed example of Kafka consumer configuration, including `clientId`, `brokers`, `groupId`, and `topics`. These settings specify the Kafka broker connection details, consumer group ID, and the topics to subscribe to.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          clientId: 'my-app',\n          brokers: ['localhost:9092'],\n        },\n        consumerOptions: {\n          groupId: 'groupId-test-1',\n        },\n        subscribeOptions: {\n          topics: ['topic-test-1'],\n        }\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RouterInfo Interface Definition in TypeScript\nDESCRIPTION: This snippet defines the RouterInfo interface, which represents the structure of route information in MidwayJS. It includes properties such as prefix, url, requestMethod, method, handlerName, middleware, and metadata for requests and responses.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/router_table.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RouterInfo {\n  /**\n   * router prefix\n   */\n  prefix: string;\n  /**\n   * router alias name\n   */\n  routerName: string;\n  /**\n   * router path, without prefix\n   */\n  url: string | RegExp;\n  /**\n   * request method for http, like get/post/delete\n   */\n  requestMethod: string;\n  /**\n   * invoke function method\n   */\n  method: string;\n  description: string;\n  summary: string;\n  /**\n   * router handler function key，for IoC container load\n   */\n  handlerName: string;\n  /**\n   *  serverless func load key\n   */\n  funcHandlerName: string;\n  /**\n   * controller provideId\n   */\n  controllerId: string;\n  /**\n   * router middleware\n   */\n  middleware: any[];\n  /**\n   * controller middleware in this router\n   */\n  controllerMiddleware: any[];\n  /**\n   * request args metadata\n   */\n  requestMetadata: any[];\n  /**\n   * response data metadata\n   */\n  responseMetadata: any[];\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Guard to a Controller (TypeScript)\nDESCRIPTION: This code demonstrates how to apply a guard to a controller class using the `@UseGuard` decorator. The `AuthGuard` class is applied to the `HomeController`, meaning all routes within this controller are protected by this guard. It depends on the `AuthGuard` class being defined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from '@midwayjs/core';\nimport { AuthGuard } from '../guard/auth.guard';\n\n@UseGuard(AuthGuard)\n@Controller('/')\nexport class HomeController {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a script to generate TypeScript interfaces\nDESCRIPTION: This JSON snippet adds a `generate` script to the `package.json` file. This script uses the `tsproto` command (provided by `@midwayjs/grpc-helper`) to generate TypeScript interfaces from the proto files located in the `proto` directory and outputs them to the `src/domain` directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"generate\": \"tsproto --path proto --output src/domain\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Data using MidwayConfigService\nDESCRIPTION: This snippet shows how to use the `MidwayConfigService` to retrieve configuration data. It involves injecting the service into a controller and using it within a route handler to access the merged configuration object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayConfigService, Inject, Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  configService: MidwayConfigService;\n\n  @Get('/')\n  async home() {\n    // this.configService.getConfiguration();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Application and Context from non-Web Frameworks\nDESCRIPTION: This code snippet illustrates how to import the Application and Context objects from non-Web frameworks in Midway.js, such as Socket.IO, gRPC, and RabbitMQ. This ensures consistency in accessing core objects across different application types.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context } from '@midwayjs/socketio';\nimport { Application, Context } from '@midwayjs/grpc';\nimport { Application, Context } from '@midwayjs/rabbitmq';\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Table Service in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to access the router table service in MidwayJS using dependency injection. It shows how to inject `MidwayWebRouterService` and `MidwayServerlessFunctionService` and use them to get routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject, MidwayWebRouterService, MidwayServerlessFunctionService } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  @Inject()\n  serverlessFunctionService: MidwayServerlessFunctionService;\n\n  async onReady() {\n    // Web 路由\n    const routes = await this.webRouterService.getFlattenRouterTable();\n\n    // serverless 函数\n    const routes = await this.serverlessFunctionService.getFunctionList();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Validation with Validate\nDESCRIPTION: This code demonstrates basic parameter validation using the `Validate` function with `zod`. It defines an API endpoint that expects a string and a number as input, and validates them using `z.string()` and `z.number()` respectively. It imports APIs, Post and Validate from '@midwayjs/hooks' and z from 'zod'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  APIs,\n  Post,\n  Validate,\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\n\nexport default Api(\n  Post('/hello'),\n  Validate(z.string(), z.number()),\n  async (name: string, age: number) => {\n    return `Hello ${name}, you are ${age} years old.`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Requests with supertest (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create HTTP client requests using `@midwayjs/mock`'s `createHttpRequest` function. This function wraps supertest and simplifies creating HTTP requests within tests. The `app` instance is passed to create the client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 创建一个客户端请求\nconst result = await createHttpRequest(app).get('/');\n// 测试返回结果\nexpect(result.text).toBe('Hello Midwayjs!');\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration - No Credentials - TypeScript\nDESCRIPTION: This TypeScript code configures CORS on the server to allow all origins (`origin: '*'`).  This is suitable when credentials are not required.  It needs to be placed in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cross_domain.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n   // ...\n   cors: {\n     origin: '*',\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Error in MidwayJS Service (TypeScript)\nDESCRIPTION: This code shows how to throw the custom `WeatherEmptyDataError` within a MidwayJS service. It catches potential errors from `makeHttpRequest` and re-throws them as a `WeatherEmptyDataError`, wrapping the original error.  This allows centralized error handling and standardized error messages across the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/weather.service.ts\nimport { Provide, makeHttpRequest } from '@midwayjs/core';\nimport { WeatherInfo } from '../interface';\nimport { WeatherEmptyDataError } from '../error/weather.error';\n\n@Provide()\nexport class WeatherService {\n  async getWeather(cityId: string): Promise<WeatherInfo> {\n    if (! cityId) {\n      throw new WeatherEmptyDataError();\n    }\n\n    try {\n      const result = await makeHttpRequest<WeatherInfo>(`https://midwayjs.org/resource/${cityId}.json`, {\n        dataType: 'json',\n      });\n      if (result.status === 200) {\n        return result.data as WeatherInfo;\n      }\n    } catch (error) {\n      throw new WeatherEmptyDataError(error);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL DataSourceManager with Config\nDESCRIPTION: This code snippet shows how to initialize the MySQL DataSourceManager with configurations using the @Init and @Config decorators from MidwayJS. It injects the mysql configuration and the base directory, then initializes the data source. Dependencies include @midwayjs/core and mysql2. It assumes the configuration is defined in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSourceManager, Provide, Scope, ScopeEnum, Init, Config } from '@midwayjs/core';\nimport * as mysql from 'mysql2';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MySqlDataSourceManager extends DataSourceManager<mysql.Connection> {\n\n  @Config('mysql')\n  mysqlConfig;\n\n  @Inject()\n  baseDir: string;\n\n  @Init()\n  async init() {\n    // It should be noted that the second parameter here needs to pass in an entity class scan address\n    await this.initDataSource(this.mysqlConfig, this.baseDir);\n  }\n\n  // ...\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Intercepting Errors with `afterThrow`\nDESCRIPTION: This example demonstrates how to use the `afterThrow` lifecycle method to intercept errors thrown by an intercepted method. It allows logging errors or throwing new errors based on the original error message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    throw new Error('custom error');\n  }\n}\n\n// src/aspect/report.ts\n@Aspect(HomeController, 'home')\nexport class ReportInfo implements IMethodAspect {\n  async afterThrow(point: JoinPoint, error) {\n    if(/not found/.test(error.message)) {\n    \tthrow new Error('another error');\n    } else {\n    \tconsole.error('got custom error');\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to a Controller Route\nDESCRIPTION: This code demonstrates how to apply middleware to a controller route in Midway.js using the `@Controller` decorator. The `middleware` property within the decorator's options array specifies the middleware to be applied.  The middleware is referenced by its dependency injection container key (the `@Provide` value, which defaults to the camelCase version of the class name).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/web_middleware.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Provide } from '@midwayjs/decorator';\nimport { Context } from 'egg';\n\n@Provide()\n@Controller('/', { middleware: ['reportMiddleware'] })\nexport class HomeController {}\n```\n\n----------------------------------------\n\nTITLE: Add Midway Cache - Javascript\nDESCRIPTION: This commit adds the initial implementation of the Midway cache module to the framework. This module provides caching capabilities for improving application performance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nadd midway cache ([#911](https://github.com/midwayjs/midway/issues/911)) ([cc49eee](https://github.com/midwayjs/midway/commit/cc49eee739ba6d2c37b9270b6cf5239afde4a912))\n```\n\n----------------------------------------\n\nTITLE: Adding i18n Support in MidwayJS\nDESCRIPTION: This feature adds comprehensive i18n support to the MidwayJS framework. It enables developers to easily internationalize their applications, providing localized content and messages for a global audience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: BodyParser Default Configuration in Midway Web\nDESCRIPTION: Shows the default `bodyParser` configuration for Egg.js in Midway Web, which sets the `jsonLimit` to 100k. This configuration can be overridden in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/body-parser.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default\nexport const bodyParser = {\n  jsonLimit: '100k',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Base Framework (TypeScript)\nDESCRIPTION: This code snippet presents the definition of a base framework with generic types for Application, Context, and Configuration Options. It's a starting point for completely custom frameworks. Defines types for the application (APP), context (CTX), and configuration options (OPT) used by the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_development.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BaseFramework<\n  APP extends IMidwayApplication<CTX>,\n  CTX extends IMidwayContext,\n  OPT extends IConfigurationOptions\n> implements IMidwayFramework<APP, OPT> {}\n```\n\n----------------------------------------\n\nTITLE: Configure Logger Output Format\nDESCRIPTION: This code configures the output format for the 'appLogger' and 'customOtherLogger' loggers. The 'format' function takes a Winston info object and returns a formatted string. The 'appLogger' format includes timestamp, level, pid, labelText, and message, while 'customOtherLogger' simply returns \"xxxx\".\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      appLogger: {\n        format: info => {\n          return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.labelText}${info.message}`;\n        }\n        // ...\n      },\n      customOtherLogger: {\n        format: info => {\n          return 'xxxx';\n        }\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Calling gRPC Client Stream with Midwayjs in Typescript\nDESCRIPTION: This snippet shows how to call a gRPC client stream from the client side in TypeScript.  Multiple messages are sent to the server using `sendMessage`, and the stream is terminated with `end()`. The final result from the server is then awaited.  It requires the gRPC service client (service).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// Client push\nconst data = await service.addMany()\n.sendMessage({num: 1})\n.sendMessage({num: 2})\n.sendMessage({num: 3})\n.end();\n\n// data.num = 6\n\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-Many Album Entity\nDESCRIPTION: This code defines an `Album` entity with a many-to-many relationship to the `Photo` entity. The `@ManyToMany` decorator defines the relationship, specifying the target entity (`Photo`) and the reverse relation property in the `Photo` entity (`photo => photo.albums`). The `@JoinTable` decorator indicates that this entity is the owner of the relationship.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from 'typeorm';\n\n@Entity()\nexport class Album {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @ManyToMany(type => Photo, photo => photo.albums)\n  @JoinTable()\n  photos: Photo[];\n}\n```\n\n----------------------------------------\n\nTITLE: UserService with TestService dependency in MidwayJS\nDESCRIPTION: This TypeScript code defines a UserService with a dependency on TestService, showcasing dependency injection in MidwayJS. The `@Provide()` decorator marks the class as injectable, while `@Inject()` injects an instance of TestService. The `getUser` method calls `testService.setData` and returns the result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/process_agent.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { TestService } from './test';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  testService: TestService;\n\n  async getUser() {\n    let result = await this.testService.setData(1);\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Communication - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to test WebSocket communication using `@midwayjs/mock`. It creates an app, establishes a WebSocket client connection, sends a message, waits for a response, and asserts the result. `createWebSocketClient` creates a WebSocket client connected to the specified URL, and `client.send` sends data to the server. `sleep` introduces a delay, and `client.close()` and `close(app)` clean up the client and server, respectively.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createWebSocketClient } from '@midwayjs/mock';\nimport { sleep } from '@midwayjs/core';\n\n// ... 省略 describe\n\nit('should test create websocket app', async () => {\n\n  // 创建一个服务\n  const app = await createApp<Framework>();\n\n  // 创建一个客户端\n  const client = await createWebSocketClient(`ws://localhost:3000`);\n\n  const result = await new Promise(resolve => {\n\n    client.on('message', (data) => {\n      // xxxx\n      resolve(data);\n    });\n\n    // 发送事件\n    client.send(1);\n\n  });\n\n  // 判断结果\n  expect(JSON.parse(result)).toEqual({\n    name: 'harry',\n    result: 6,\n  });\n\n  await sleep(1000);\n\n  // 关闭客户端\n  await client.close();\n\n  // 关闭服务端\n  await close(app);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a service for fetching weather data (TypeScript)\nDESCRIPTION: This code defines a service (`WeatherService`) that fetches weather data from a remote API using `makeHttpRequest`.  It uses the `@Provide` decorator to make the service available for dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/weather.service.ts\nimport { Provide, makeHttpRequest } from '@midwayjs/core';\n\n@Provide()\nexport class WeatherService {\n  async getWeather(cityId: string) {\n    return makeHttpRequest(`https://midwayjs.org/resource/${cityId}.json`, {\n      dataType: 'json',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Behavior Configuration (src/configuration.ts)\nDESCRIPTION: Defines the configuration class for the component using the `@Configuration` decorator. This class can include lifecycle hooks, middleware, and other configuration settings that define the component's behavior.  It imports the `Configuration` decorator from `@midwayjs/decorator`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\n\n@Configuration()\nexport class BookConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Handle Default Errors\nDESCRIPTION: This code defines a default error filter in MidwayJS that catches all uncaught exceptions. It returns a JSON response with the error status and message.  It catches all errors using `@Catch()` without parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/default.filter.ts\n\nimport { Catch } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch()\nexport class DefaultErrorFilter {\n  async catch(err: Error, ctx: Context) {\n\n    // ...\n    return {\n      status: err.status ?? 500,\n      message: err.message;\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Type with ApiProperty\nDESCRIPTION: This TypeScript code shows how to define an array type using the `type` and `items` attributes in the `@ApiProperty` decorator. The `items` attribute specifies the type of the array elements.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n  example: ['1']\n  }\n})\nbreeds: string[];\n```\n\n----------------------------------------\n\nTITLE: Extending Koa Framework with Custom Component in Typescript\nDESCRIPTION: This snippet demonstrates how to extend the `@midwayjs/koa` framework by creating a custom component. It imports the Koa framework and defines a configuration class `MyKoaConfiguration` with a namespace and imports array containing koa.  The `onReady` method is left empty for further implementation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/component_development.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n  namespace: 'myKoa',\n  imports: [koa]\n})\nexport class MyKoaConfiguration {\n  async onReady() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Custom Context Log in MidwayJS\nDESCRIPTION: This snippet illustrates how to obtain a context log associated with a custom logger in MidwayJS.  The `ctx.getLogger` method is used to retrieve the context log for a specific logger, such as `customLogger`.  The context log is associated with the current context (`ctx`), and the same context and key will always return the same log object.  This facilitates logging within the context of a specific request or operation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\nexport class UserService {\n\n   @Inject()\n   ctx: Context;\n\n   async getUser() {\n     // What is obtained here is the context log object corresponding to customLogger\n     const customLogger = this.ctx.getLogger('customLogger');\n     customLogger.info('hello world');\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Jest moduleNameMapper Configuration\nDESCRIPTION: This code configures Jest's `moduleNameMapper` to handle alias paths during testing. It maps aliases like `@/(.*)` to their corresponding directories in the `src` folder, enabling Jest to resolve modules correctly.  The preset is configured to 'ts-jest' and the test environment set to 'node'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/alias_path.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures']\n  coveragePathIgnorePatterns: ['<rootDir>/test/']\n  moduleNameMapper: {\n    '^@/(.*)$': '<rootDir>/src/$1'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: MQTT Publisher Configuration\nDESCRIPTION: This TypeScript code demonstrates how to configure MQTT publishers in the application's configuration file.  The `pub` field contains a `clients` object, where each key represents a named publisher instance (e.g., `default`, `pub2`). Each instance can have specific connection parameters like host and port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\n\nexport default {\n  mqtt: {\n    pub: {\n      clients: {\n        default: {\n          host: 'test.mosquitto.org',\n          port: 1883,\n        },\n        pub2: {\n          // ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Dependency Injection Container From App Instance (TypeScript)\nDESCRIPTION: This snippet shows how to access the dependency injection container through the application instance (`app`) using `app.getApplicationContext()`. The `@App` decorator injects the application instance, and the container can then be obtained. This allows dynamic access to services within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, IMidwayApplication } from '@midwayjs/core';\n\n@Provide()\nexport class BootApp {\n\n  @App()\n  app: IMidwayApplication; //You can also replace it with the app definition of the actual framework here.\n\n  async invoke() {\n\n    // Get the dependency injection container\n  \tconst applicationContext = this.app.getApplicationContext();\n\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Install Redis Adapter and Redis Package for Watcher\nDESCRIPTION: This command installs the necessary packages for using the Redis adapter as a watcher with Casbin in a MidwayJS project. It adds `@midwayjs/casbin-redis-adapter` for the adapter itself and `@midwayjs/redis` for Redis integration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/casbin-redis-adapter @midwayjs/redis --save\n```\n\n----------------------------------------\n\nTITLE: Defining a Method Decorator without Implementation\nDESCRIPTION: This code demonstrates how to define a custom method decorator that doesn't require an implementation. This is achieved by setting the `impl` parameter to `false` in the `createCustomMethodDecorator` function. This allows the decorator to be used solely for storing metadata without any runtime interception.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/logging.decorator.ts\nimport { createCustomMethodDecorator } from '@midwayjs/core';\n\n// 装饰器内部的唯一 id\nexport const LOGGING_KEY = 'decorator:logging_key';\n\nexport function LoggingTime(): MethodDecorator {\n  // 最后一个参数告诉框架，无需指定实现\n  return createCustomMethodDecorator(LOGGING_KEY, {}, false);\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Direct Exchange Consumer\nDESCRIPTION: This TypeScript snippet demonstrates a RabbitMQ consumer using a Direct Exchange. The consumer is configured with an empty queue name ('') and a `routingKey` of 'direct_key'. Messages published to the 'direct_logs' exchange with the same `routingKey` will be routed to this consumer.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Consumer, MSListenerType, RabbitMQListener, Inject, App } from '@midwayjs/core';\nimport { Context, Application } from '../../../../../src';\nimport { ConsumeMessage } from 'amqplib';\n\n@Consumer(MSListenerType.RABBITMQ)\nexport class UserConsumer {\n\n  @App()\n  app: Application;\n\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  logger;\n\n  @RabbitMQListener ('', {\n    exchange: 'direct_logs',\n    exchangeOptions: {\n      type: 'direct',\n      durable: false\n    },\n    routingKey: 'direct_key',\n    exclusive: true,\n    consumeOptions: {\n      noAck: true\n    }\n  })\n  async gotData(msg: ConsumeMessage) {\n    // TODO\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Non-HTTP Triggered Functions in Midway.js\nDESCRIPTION: This snippet illustrates testing non-HTTP-triggered functions (e.g., timers, object storage) in a Midway.js application. It uses `createFunctionApp` to create the function app, `getServerlessInstance` to obtain an instance of the function class, and then directly calls the function's method with test parameters.  The test verifies the function's output based on the provided input.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_testing.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/faas';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n   it('should get result from event trigger', async () => {\n     //Create function app\n     let app: Application = await createFunctionApp<Framework>();\n    \n     // Get the service class\n     const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n    \n     // Call the function method and pass in parameters\n     expect(await instance.handleEvent('hello world')).toEqual('hello world');\n    \n     await close(app);\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Function Testing (TypeScript)\nDESCRIPTION: This snippet shows how to test HTTP-triggered functions using `createHttpRequest` from `@midwayjs/mock`, which wraps SuperTest.  It creates an HTTP client and sends a request to the function, then asserts the result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_v1_upgrade_serverless_v2.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>();\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from api gateway trigger', async () => {\n    const result = await createHttpRequest(app).get('/').query({\n      name: 'zhangting',\n    });\n    expect(result.text).toEqual('hello zhangting');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling EggJS Plugin in MidwayJS\nDESCRIPTION: This TypeScript snippet demonstrates enabling an EggJS plugin (egg-mysql) within a MidwayJS application. The `enable` property is set to `true`, and the `package` property specifies the npm package name of the plugin. This configuration is typically located in `src/config/plugin.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EggPlugin } from 'egg';\nexport default {\n  static: false, // default is true\n  mysql: {\n    enable: true\n    package: 'egg-mysql'\n  }\n} as EggPlugin;\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/plugin.ts\n// Use mysql plug-in\nexport const mysql = {\n  enable: true\n  package: 'egg-mysql',\n};\n\n```\n\n----------------------------------------\n\nTITLE: Accessing form data in Alibaba Cloud HTTP Trigger\nDESCRIPTION: This TypeScript code shows how to access form data when using Alibaba Cloud HTTP trigger. The `ctx.request.body` will contain the form data as a Javascript object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\" B\":\"c\"} => object\n```\n\n----------------------------------------\n\nTITLE: Setting Response Content Type with @ContentType\nDESCRIPTION: This code demonstrates how to set the response content type using the `@ContentType` decorator. The `@ContentType('html')` decorator on the `/` route will set the `Content-Type` header to `html`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Provide, ContentType } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  @ContentType('html')\n  async login() {\n    return '<body>hello world</body>';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom HTTP Framework (TypeScript)\nDESCRIPTION: This code snippet shows how to export the custom HTTP framework. It exports the `Application`, `Context`, `MidwayCustomHTTPFramework` as `Framework` and `IMidwayCustomConfigurationOptions`, ensuring that the framework can be properly loaded and used by the `@midwayjs/bootstrap` library and other parts of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_development.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport {\n  Application,\n  Context,\n  MidwayCustomHTTPFramework as Framework,\n  IMidwayCustomConfigurationOptions,\n} from './custom';\n```\n\n----------------------------------------\n\nTITLE: Filtering Routes with routerFilter in Typescript\nDESCRIPTION: This snippet demonstrates how to filter routes to exclude them from Swagger documentation using the `routerFilter` configuration option in `config.default.ts`.  It provides a function that receives the URL and router options for each route, and returns `true` to filter the route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { RouterOption } from '@midwayjs/core';\n\nexport default {\n  // ...\n  swagger: {\n    routerFilter: (url: string, options: RouterOption) => {\n      return url === '/hello/getUser';\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context via REQUEST_OBJ_CTX_KEY\nDESCRIPTION: This code demonstrates how to access the Context instance using the `REQUEST_OBJ_CTX_KEY` constant. This is useful in interceptors or decorators where the user might not have explicitly declared a `ctx` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, REQUEST_OBJ_CTX_KEY } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    ctx.logger.info(this.ctx === this[REQUEST_OBJ_CTX_KEY]);\n    // => true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Render Nunjucks Template in Controller\nDESCRIPTION: Demonstrates how to render a Nunjucks template from a MidwayJS controller. It injects the `Context` object, defines a route, and uses the `ctx.render` method to render the 'test.nj' template with data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Provide } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render() {\n    await ctx.render('test.nj', { user: 'midway' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @InjectClient with RedisServiceFactory - Typescript\nDESCRIPTION: This snippet demonstrates the new `@InjectClient` decorator in MidwayJS for injecting specific instances from a `ServiceFactory`. It simplifies the code by directly injecting the desired Redis instances (redis1 and redis2) using the decorator, eliminating the need to call the `get` method on the factory. This approach requires `@midwayjs/redis` and `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-12-13-release-3-9.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RedisServiceFactory } from '@midwayjs/redis';\nimport { InjectClient } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n  @InjectClient(RedisServiceFactory, 'instance1')\n  redis1: RedisService;\n  \n  @InjectClient(RedisServiceFactory, 'instance2')\n  redis2: RedisService;\n\n  async save() {\n    // this.redis1.set(...)\n    // this.redis2.set(...)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Photo with Metadata using TypeORM\nDESCRIPTION: This code demonstrates how to create and associate a Photo entity with its metadata using TypeORM. It utilizes the Repository pattern to save both the Photo and PhotoMetadata entities. The photo property in the PhotoMetadata entity is set to the created Photo object to establish the relationship.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Func } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from './entity/photo';\nimport { PhotoMetadata } from './entity/photoMetadata';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  @InjectEntityModel(PhotoMetadata)\n  photoMetadataModel: Repository<PhotoMetadata>;\n\n  async updatePhoto() {\n    // create a photo\n    let photo = new Photo();\n    photo.name = 'Me and Bears';\n    photo.description = 'I am near polar bears';\n    photo.filename = 'photo-with-bears.jpg';\n    photo.isPublished = true;\n\n    // create a photo metadata\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = 'cybershoot';\n    metadata.orientation = 'portrait';\n    metadata.photo = photo; // this way we connect them\n\n    // first we should save a photo\n    await this.photoModel.save(photo);\n\n    // photo is saved. Now we need to save a photo metadata\n    await this.photoMetadataModel.save(metadata);\n\n    // done\n    console.log('Metadata is saved, and relation between metadata and photo is created in the database too');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ETCD Module - Configuration.ts\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the ETCD module in your MidwayJS `configuration.ts` file.  The `etcd` module is added to the `imports` array, enabling the ETCD functionality within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/etcd.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as etcd from '@midwayjs/etcd';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    // ...\n    etcd,\n  ],\n  // ...\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Add Port to Package.json Script\nDESCRIPTION: This snippet shows how to add the port configuration to the `dev` script in `package.json`.  Used when disabling the port in the Koa configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n   \"dev\": \"cross-env NODE_ENV=local midway-bin dev --ts --port=7001\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set and Get Cookie in MidwayJS\nDESCRIPTION: This code snippet demonstrates setting and retrieving cookies using `ctx.cookies` in a MidwayJS controller. Encryption is enabled for both setting and getting the cookie. Dependencies: `@midwayjs/core`, `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // set cookie\n    this.ctx.cookies.set('foo', 'bar', { encrypt: true });\n    // get cookie\n    this.ctx.cookies.get('foo', { encrypt: true });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Object Creation Hook in MidwayJS (onObjectCreated)\nDESCRIPTION: This code snippet demonstrates the `onObjectCreated` lifecycle hook in MidwayJS. It allows developers to execute code after an object instance is created, and can even replace the created object. The function receives the created object (`ins`) and options, including the container context, object definition, and a callback for object replacement.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/lifecycle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectCreatedOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectCreated(ins: any, options: ObjectCreatedOptions): Promise<void> {\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript Fetch FormData Upload\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `fetch` API and `FormData` object to upload a file. It selects a file input element, appends the selected file to a `FormData` object, and sends it to the server via a POST request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileInput = document.querySelector('#your-file-input') ;\nconst formData = new FormData();\nformData.append('file', fileInput.files[0]);\n\nfetch('/api/upload', {\n  method: 'POST',\n  body: formData,\n});\n```\n\n----------------------------------------\n\nTITLE: Enable Sequelize Component - Typescript\nDESCRIPTION: This code snippet demonstrates how to enable the Sequelize component within a MidwayJS application. It imports the necessary modules and adds `sequelize` to the `imports` array in the `@Configuration` decorator. This activates the Sequelize integration and makes it available for use in other parts of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, ILifeCycle } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as sequelize from '@midwayjs/sequelize';\n\n@Configuration({\n  imports: [\n    // ...\n    sequelize\n  ],\n  importConfigs: [join(__dirname, './config')]\n})\nexport class MainConfiguration implements ILifeCycle {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running dev command\nDESCRIPTION: The following command executes the `dev` script as defined in the `package.json` file. This command is used for starting the local development server. The specific actions performed depend on how the `dev` script is defined, such as using `mwtsc` or `@midwayjs/cli` with appropriate flags.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Response Body in MidwayJS\nDESCRIPTION: This code demonstrates how to set the HTTP response body in MidwayJS using the `return` statement. It shows examples of returning strings, JSON objects, HTML, and streams. It also demonstrates setting the body using `this.ctx.body`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, HttpCode } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // Return string\n    return \"Hello Midwayjs!\";\n\n    // Return json\n    return {\n      a: 1\n      b: 2\n    };\n\n    // return html\n    return '<html><h1>Hello</h1></html>';\n\n    // Return to stream\n    return fs.createReadStream('./good.png');\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, HttpCode } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    // Return string\n    this.ctx.body = \"Hello Midwayjs!\";\n\n    // Return JSON\n    this.ctx.body = {\n      a: 1,\n      b: 2,\n    };\n\n    // return html\n    this.ctx.body = '<html><h1>Hello</h1></html>';\n\n    // Return to stream\n    this.ctx.body = fs.createReadStream('./good.png');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry dependencies\nDESCRIPTION: This snippet shows how to install the necessary OpenTelemetry packages using npm, including the API, Node.js SDK, auto-instrumentations, and Jaeger exporter. These are the official OpenTelemetry packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Node.js 的 api 抽象\n$ npm install --save @opentelemetry/api\n\n# Node.js 的 api 实现\n$ npm install --save @opentelemetry/sdk-node\n\n# 常用 Node.js 模块的埋点实现\n$ npm install --save @opentelemetry/auto-instrumentations-node\n\n# jaeger 输出器\n$ npm install --save @opentelemetry/exporter-jaeger\n```\n\n----------------------------------------\n\nTITLE: Managing Sessions in MidwayJS (Typescript)\nDESCRIPTION: This code snippet shows how to access and modify user session data in a MidwayJS controller using `ctx.session`.  It retrieves a `userId` from the session, fetches posts based on it, and increments a `visited` counter in the session.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // 获取 Session 上的内容\n    const userId =  this.ctx.session.userId;\n    const posts = await  this.ctx.service.post.fetch(userId);\n    // 修改 Session 的值\n    this.ctx.session.visited = ctx.session.visited ? (ctx.session.visited + 1) : 1;\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Passport Middleware in TypeScript\nDESCRIPTION: Create a middleware class extending `PassportMiddleware` for the GitHub OAuth strategy. This middleware handles the authentication flow for the GitHub strategy.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// github-middleware.ts\n\nimport { PassportMiddleware } from '@midwayjs/passport';\n\n@Provide()\nexport class GithubPassportMiddleware extends PassportMiddleware {\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect and Correct Session Usage (Koa)\nDESCRIPTION: This example highlights the importance of avoiding certain prefixes for session keys (e.g., `_`) and avoiding using reserved keywords (`isNew`). Using these can lead to data loss or unexpected behavior. Correct usage is demonstrated using the key 'visited'. Dependencies: `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Wrong usage\nctx.session._visited = 1; // --> this field will be lost on the next request\nctx.session.isNew = 'HeHe'; // --> is an internal keyword and should not be changed\n\n// ✔️ The correct usage\nctx.session.visited = 1; // --> no problem here\n```\n\n----------------------------------------\n\nTITLE: Reusing Middleware with Different Options\nDESCRIPTION: This snippet demonstrates how to reuse a middleware class with different options using the `createMiddleare` function.  This allows for creating multiple instances of the same middleware with varying configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration, createMiddleare } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { ReportMiddleware } from './middleware/user.middleware';\n\n@Configuration({\n  imports: [koa]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // 添加 ReportMiddleware 中间件\n    this.app.useMiddleware(ReportMiddleware);\n    // 添加一个不同参数的 ReportMiddleware\n    this.app.useMiddleware(createMiddleare(ReportMiddleware, {\n      text: 'abc'\n    }, 'anotherReportMiddleare'));\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n  initData = 'text1';\n  \n  resolve(_, options?: {\n    text: string;\n  }) {\n    return async (ctx: Context, next: NextFunction) => {\n      this.ctx.setAttr('data', options?.text || this.initData);\n      return await next();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Strategy\nDESCRIPTION: This snippet defines a JWT strategy that extracts the token from the Authorization header and validates it using the provided secret.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// jwt-strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\n\n@CustomStrategy()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  @Config('jwt')\n  jwtConfig;\n\n  async validate(payload) {\n    return payload;\n  }\n\n  getStrategyOptions(): any {\n    return {\n      secretOrKey: this.jwtConfig.secret,\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Type with ApiProperty\nDESCRIPTION: This TypeScript code shows how to explicitly define the type of a property as a boolean using the `type` attribute in the `@ApiProperty` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({\n  type: 'boolean',\n  example: 'true',\n  // ...\n})\nisPure: boolean;\n```\n\n----------------------------------------\n\nTITLE: Save a New Entity using Sequelize Static Method\nDESCRIPTION: This example shows how to save a new entity (Person) using the static `save` method in Sequelize-Typescript. It requires the `@midwayjs/core` package for dependency injection and the `Person` entity defined elsewhere. This operation is only available when repository mode is disabled.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Person } from '../entity/person.entity';\n\n@Provide()\nexport class PersonService {\n  async createPerson() {\n    const person = new Person({ name: 'bob', age: 99 });\n    await person.save();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Session Configuration\nDESCRIPTION: This configuration object shows the default settings for session management in MidwayJS. It includes parameters such as `maxAge` (session lifetime), `key` (cookie key), and `httpOnly` (restricting cookie access from client-side JavaScript).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  session: {\n    MaxAge: 24*3600*1000, // 1 day\n    key: 'MW_SESS',\n    httpOnly: true\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: onObjectCreated Lifecycle Hook in TypeScript\nDESCRIPTION: Demonstrates the usage of the `onObjectCreated` lifecycle hook, which executes after an object instance is created. This hook allows you to modify or even replace the created object. Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectCreatedOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectCreated(ins: any, options: ObjectCreatedOptions): Promise<void> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring baseURL for HTTP Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the `baseURL` option for the HTTP client using the `setupHttpClient` function from `@midwayjs/rpc`. The `baseURL` is dynamically set based on the `NODE_ENV` environment variable to switch between development and production API endpoints.  It sets the base URL for all subsequent requests. Dependencies: `@midwayjs/rpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/client.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupHttpClient } from '@midwayjs/rpc';\n\nsetupHttpClient({\n  baseURL:\n    process.env.NODE_ENV ===\n    'development'\n      ? 'http://localhost:7001'\n      : 'https://api.example.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Querying data from database\nDESCRIPTION: Shows how to retrieve data from the database using various `find` methods on the injected entity model, including finding all, finding one, finding by conditions, and finding with count.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Func } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from './entity/photo';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhotos() {\n    // find All\n    let allPhotos = await this.photoModel.find();\n    console.log('All photos from the db: ', allPhotos);\n\n    // find first\n    let firstPhoto = await this.photoModel.findOne(1);\n    console.log('First photo from the db: ', firstPhoto);\n\n    // find one by name\n    let meAndBearsPhoto = await this.photoModel.findOne({ name: 'Me and Bears' });\n    console.log('Me and Bears photo from the db: ', meAndBearsPhoto);\n\n    // find by views\n    let allViewedPhotos = await this.photoModel.find({ views: 1 });\n    console.log('All viewed photos: ', allViewedPhotos);\n\n    let allPublishedPhotos = await this.photoModel.find({ isPublished: true });\n    console.log('All published photos: ', allPublishedPhotos);\n\n    // find and get count\n    let [allPhotos, photosCount] = await this.photoModel.findAndCount();\n    console.log('All photos: ', allPhotos);\n    console.log('Photos count: ', photosCount);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying tsconfig.json for Source Directory\nDESCRIPTION: Modifies the `tsconfig.json` file to update the `rootDir` option. This ensures the TypeScript compiler (`tsc`) correctly locates the source files in the custom directory during compilation. This is crucial for the build process to work correctly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/change_start_dir.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compileOnSave\": true,\n  \"compilerOptions\": {\n    // ...\n    \"rootDir\": \"server\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend OSS Upload using Signed URL (React)\nDESCRIPTION: Uploads a file to Alibaba Cloud OSS from a React frontend using a pre-signed URL obtained from the backend. It uses the `fetch` API to make a PUT request to the signed URL, including the file content and content type in the request body and headers respectively. It also handles encoding filename for url compatibility.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/oss_upload.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { getOSSUploadUrl } from '../../apis/lambda';\n\nexport default () => {\n  const [message, setMessage] = useState('');\n  useEffect(() => {}, []);\n\n  const uploadPhoto = (e: any) => {\n    const file = e.target.files[0];\n    const filename = encodeURIComponent(file.name);\n\n    getOSSUploadUrl({ filename }).then((url) => {\n      const contentType = 'application/octet-stream';\n      const body = new Blob([file], { type: contentType });\n\n      fetch(url, {\n        method: 'PUT',\n        headers: new Headers({ 'Content-Type': contentType }),\n        body,\n      })\n        .then((res) => {\n          setMessage(`上传成功！文件路径：${url.substring(0, url.indexOf('?'))}`);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    });\n  };\n\n  return (\n    <div className=\"common-container\">\n      <>\n        <p>上传文件，可以在accept属性中控制想要传的文件类型</p>\n        <input onChange={uploadPhoto} type=\"file\" accept=\"*\" />\n      </>\n      <p>{message}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Framework Objects using MidwayFrameworkService\nDESCRIPTION: This snippet demonstrates how to use the `MidwayFrameworkService` to obtain framework objects. It involves injecting the service into a controller and using it within a route handler to get the main framework instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayFrameworkService, Inject, Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  frameworkService: MidwayFrameworkService;\n\n  @Get('/')\n  async home() {\n    // this.frameworkService.getMainFramework();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a BullMQ Task Processor in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a task processor using the BullMQ component in MidwayJS. It utilizes the `@Processor` decorator to register a class as a task handler for a specific queue ('test'). The `execute` method contains the logic to process the task data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2025-01-14-release-3.20.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 定义任务处理器\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  async execute(data: any) {\n    // 处理任务逻辑\n    console.log('processing job:', data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Context in MidwayJS with @midwayjs/mock\nDESCRIPTION: This code snippet demonstrates how to use `mockContext` from `@midwayjs/mock` to simulate the context in a MidwayJS application during testing. It sets the `user` property on the context object to 'midway', allowing you to test code that depends on the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockContext } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  // Simulation context\n  mockContext(app, 'user', 'midway');\n\n  const result1 = await createHttpRequest(app).get('/');\n  // ctx.user => midway\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Frontend Call for OpenId\nDESCRIPTION: This TypeScript/Rax code demonstrates how to call the `getOpenId` cloud function from the frontend. It utilizes `useAsyncEffect` from the `rax-use-async-effect` library to asynchronously fetch the OpenID and display it in the UI. Requires installing `rax-use-async-effect` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_miniprogram.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createElement, useState } from 'rax';\nimport useAsyncEffect from 'rax-use-async-effect';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport styles from './index.module.css';\nimport Logo from '../../components/Logo';\nimport { hello, getOpenId } from '@/cloud/function';\n\nexport default function Home() {\n  const [message, setMessage] = useState('');\n  const [openId, setOpenId] = useState('');\n\n  useAsyncEffect(async () => {\n    const message = await hello('Rax', 'Midway.js');\n    setMessage(message);\n\n    const { openId } = await getOpenId();\n    setOpenId(`${openId!.substring(0, 3)}***************${openId!.substring(14)}`);\n  }, []);\n\n  return (\n    <View className={styles.homeContainer}>\n      <Logo uri=\"//gw.alicdn.com/tfs/TB1MRC_cvb2gK0jSZK9XXaEgFXa-1701-1535.png\" />\n      <Text className={styles.homeTitle}>Welcome to Your Rax App</Text>\n      <Text className={styles.homeInfo}>Message: {message}</Text>\n      <Text className={styles.homeInfo}>OpenId: {openId}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Use COSServiceFactory\nDESCRIPTION: This code snippet illustrates how to use the `COSServiceFactory` to retrieve different COS client instances based on their names (e.g., 'instance1', 'instance3').  Each client instance can then be used to interact with a specific COS configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cos.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { COSServiceFactory } from '@midwayjs/cos';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  cosServiceFactory: COSServiceFactory;\n\n  async save() {\n    const redis1 = await this.cosServiceFactory.get('instance1');\n    const redis2 = await this.cosServiceFactory.get('instance3');\n\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Testing with Mocking in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to perform local testing of an MNS-triggered function using `@midwayjs/mock`. It creates a function app, gets an instance of the service class, and then uses `createMNSEvent` to create a mock MNS event for testing. This simulates the platform-provided structure, allowing testing without deploying.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_mns.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\nimport { createMNSEvent, createInitializeContext } from '@midwayjs/serverless-fc-trigger';\nimport { join } from 'path';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n  let instance: HelloAliyunService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(),\n    });\n    instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from oss trigger', async () => {\n    expect(await instance.handleMNSEvent(createMNSEvent())).toEqual('hello world');\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Apply Error Filters in Configuration\nDESCRIPTION: This code shows how to apply exception filters to a MidwayJS application using the `useFilter` method within the `onReady` lifecycle hook of a configuration class. It imports the necessary modules and applies the `InternalServerErrorFilter` to the Koa application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, App, Catch } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as koa from '@midwayjs/koa';\nimport { InternalServerErrorFilter } from './filter/internal.filter';\n\n@Configuration({\n  imports: [\n    koa\n  ],\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    this.app.useFilter([InternalServerErrorFilter]);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: IoC Middleware with withController\nDESCRIPTION: This example demonstrates using an IoC-defined middleware with `withController`. It involves using `@midwayjs/hooks`, `@midwayjs/faas`, and `@midwayjs/decorator`.  A class-based middleware is defined and injected into the function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_middleware.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withController } from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/faas';\nimport { Provide, ScopeEnum, Scope } from '@midwayjs/decorator';\n\n@Provide('classMiddleware')\n@Scope(ScopeEnum.Singleton)\nexport class ClassMiddleware {\n  resolve() {\n    return async (ctx: Context, next) => {\n      ctx.query.from = 'classMiddleware';\n      await next();\n    };\n  }\n}\n\nexport default withController(\n  {\n    middleware: ['classMiddleware'],\n  },\n  () => {\n    return 'Hello Controller ' + ctx.query.from;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Session in config.default.ts (default value)\nDESCRIPTION: This code snippet shows the default session configuration. The `secret` must be set in the application. The `name` property defines the cookie name, and the `cookie` property configures cookie settings such as `maxAge` and `httpOnly`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const session = {\n  secret: undefined, // must be set in application\n  name: 'MW_SESS',\n  cookie: {\n    maxAge: 24 * 3600 * 1000, // ms\n    httpOnly: true,\n    // sameSite: null,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Koa Context in MidwayJS\nDESCRIPTION: This TypeScript code illustrates how to extend the Koa context in a MidwayJS application. It adds a custom `render` method to the context using `Object.defineProperties`. This extension allows adding custom functionality to the context object that is available in all Koa middleware and routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n\t// ...\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  async onReady(container) {\n    Object.defineProperties(app.context, {\n      render: {\n        value: async function (...args) {\n          // ...\n        },\n      },\n    });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Cron Job with Decorator\nDESCRIPTION: This TypeScript snippet demonstrates how to define a cron job using the `@Job` decorator. The `cronTime` specifies when the job should run, and the `start` property indicates whether the job should start automatically. The `onTick` method contains the logic to be executed when the job is triggered.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/job/sync.job.ts\nimport { Job, IJob } from '@midwayjs/cron';\nimport { FORMAT } from '@midwayjs/core';\n\n@Job({\n   cronTime: FORMAT.CRONTAB.EVERY_PER_30_MINUTE,\n   start: true,\n})\nexport class DataSyncCheckerJob implements IJob {\n   async onTick() {\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration File\nDESCRIPTION: This YAML configuration defines the Prometheus scrape configuration, including the scrape interval, evaluation interval, and job configurations for scraping metrics from Node.js applications and Prometheus itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\nscrape_configs:\n  - job_name: 'node'\n    file_sd_configs:\n      - refresh_interval: 1m\n        files:\n          - '/etc/prometheus/targets.json'\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.IO Dependency - NPM\nDESCRIPTION: Installs the necessary Socket.IO dependencies for a MidwayJS project using NPM.  It includes the core `@midwayjs/socketio` package, as well as optional client-side dependencies. The `--save` flag adds the dependencies to the `package.json` file. Dev dependencies will be installed using the `--save-dev` flag.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/socketio@3 --save\n## optional dependencies\n$ npm i @types/socket.io-client socket.io-client --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using Decorator with Default Registered Pipes in MidwayJS\nDESCRIPTION: This code demonstrates the usage of a custom decorator `RegValid` with implicitly registered pipes. Even without explicitly passing the pipe as an argument to the decorator, the registered pipes are automatically executed. It relies on the `MainConfiguration` to have registered the default pipes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipe.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserService {\n  async invoke(@RegValid(/\\d{11}/) phoneNumber: string) {\n    return phoneNumber;\n  }\n}\n\ninvoke(13712345678) => '345678'\n```\n\n----------------------------------------\n\nTITLE: Custom Swagger-Initializer.js Content (SwaggerUI, JavaScript)\nDESCRIPTION: This snippet demonstrates the content of a customized `swagger-initializer.js` file. It configures the Swagger UI bundle, specifying the URL of the Swagger JSON file and other UI settings. The `url` property should point to the location where the Swagger JSON file is served. Requires SwaggerUI Bundle and Standalone Preset.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n   window.ui = SwaggerUIBundle({\n     url: \"/index.json\",\n     dom_id: '#swagger-ui',\n     deepLinking: true,\n     presets: [\n       SwaggerUIBundle.presets.apis,\n       SwaggerUIStandalonePreset\n     ],\n     plugins: [\n       SwaggerUIBundle.plugins.DownloadUrl\n     ],\n     layout: \"StandaloneLayout\",\n     persistAuthorization: true,\n   });\n};\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Environment Config - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to configure the Bootstrap class from `@midwayjs/bootstrap` with environment specific configurations. This enables to set environment related parameters, that can be later accessed in the different components.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap\n  .configure({\n  \tglobalConfig: [{\n      default: {/*...*/},\n      unittest: {/*...*/}\n    }]\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Passing Headers in an HTTP Request\nDESCRIPTION: This TypeScript snippet demonstrates how to set custom headers in an HTTP request using the `set` method of the `createHttpRequest` object. This is useful for testing endpoints that rely on specific headers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app)\n  .get('/set_header')\n\t.set({\n  \t'x-bbb ': ' 123'\n  })\n  .query({ name: 'harry' });\n```\n\n----------------------------------------\n\nTITLE: Escaping String for XSS Protection (TypeScript)\nDESCRIPTION: This TypeScript example illustrates how to use `ctx.security.escape()` to prevent XSS attacks by escaping potentially malicious characters in strings.  It converts special characters to their HTML entities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/security.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx;\n\n  @Get('/home')\n  async home() {\n    const str = `<script>alert('xss')</script>`;\n    const escapedStr = this.ctx.security.escape(str);\n    // &lt;script&gt;alert(&quot;xss&quot;) &lt;/script&gt;\n    return escapedStr;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Setup File in Jest Configuration (JavaScript)\nDESCRIPTION: This code extends the Jest configuration to include a setup file that runs before tests. It uses the `setupFilesAfterEnv` property to specify the path to the jest.setup.js file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures'],\n  coveragePathIgnorePatterns: ['<rootDir>/test/'],\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'], // 预先读取 jest.setup.js\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Body Parameters with @Body\nDESCRIPTION: This code demonstrates how to retrieve body parameters from a POST request using the `@Body` decorator. The `updateUser` method extracts the `id` parameter from the request body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('/')\nasync updateUser(@Body() id: string): Promise<User> {\n  // id 等价于 ctx.request.body.id\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Useless Files (YAML)\nDESCRIPTION: This snippet shows how to configure the `removeUselessFiles` experimental feature in `f.yml` to remove unnecessary files like `LICENSE`, `*.ts.map`, and `**/test/` files to reduce the build package size.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nexperimentalFeatures:\n\tremoveUselessFiles: true\n```\n\n----------------------------------------\n\nTITLE: Using app.getLogger() to get loggers\nDESCRIPTION: This example illustrates how to use the `getLogger()` method to retrieve logger instances. By default, it returns the application logger, but it can also be used to retrieve custom loggers by providing a name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getLogger();\n// => app logger\nthis.app.getLogger('custom');\n// => custom logger\n```\n\n----------------------------------------\n\nTITLE: Returning Request Method and Path using useContext in Midway Hooks\nDESCRIPTION: This code snippet shows how to access both the request method and path from the Koa context using `useContext`.  It imports `Context` from `@midwayjs/koa` and uses it as a generic type argument to `useContext` to provide type safety.  The snippet then returns the method and path in the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/builtin-hooks.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api\n  Get\n  useContext\n} from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/koa';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  return {\n    method: ctx.method\n    path: ctx.path\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Pipe\nDESCRIPTION: Defines a custom validation pipe by extending the ParsePipe class.  Requires implementation of getSchema to return a Joi validation schema.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pipe } from '@midwayjs/core';\nimport { ParsePipe, RuleType } from '@midwayjs/validate';\n\n@Pipe()\nexport class ParseCustomDataPipe extends ParsePipe {\n  getSchema(): RuleType.AnySchema<any> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Middleware in Routing - TypeScript\nDESCRIPTION: Demonstrates how to reuse middleware, created by `createMiddleware`, within a route definition using the `@Get` decorator.  The `middleware` property of the decorator's options is used to specify the middleware.  This allows applying specific middleware configurations to individual routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, createMiddleware } from '@midwayjs/core';\nimport { ReportMiddleware } from '../middleware/report.middlweare';\n\nconst anotherMiddleware = createMiddleware(ReportMiddleware, {\n  // ...\n});\n\n@Controller('/')\nexport class HomeController {\n  @Get('/', {\n    middleware: [anotherMiddleware],\n  })\n  async home() {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Context Instance with @Inject Decorator\nDESCRIPTION: This code snippet demonstrates how to inject a Context instance into a controller using the `@Inject` decorator. This allows access to request-specific information and methods within the controller. The `@Controller` and `@Get` decorators are used for route handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Local Strategy (Original Passport)\nDESCRIPTION: This TypeScript code shows the original Passport.js implementation using `passport.use` to load the LocalStrategy. The verify logic contains a callback parameter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npassport.use(\n  // 初始化一个策略\n  new LocalStrategy({\n      usernameField: 'username',\n      passwordField: 'password',\n      passReqToCallback: true,\n      session: false\n    },\n    function verify(username, password, done) {\n      User.findOne({ username: username }, function (err, user) {\n        if (err) { return done(err); }\n        if (!user) { return done(null, false); }\n        if (!user.verifyPassword(password)) { return done(null, false); }\n        return done(null, user);\n      });\n    }\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Heartbeat Check - TypeScript\nDESCRIPTION: This TypeScript code shows how to enable the server heartbeat check in the WebSocket configuration.  Setting `enableServerHeartbeatCheck` to `true` allows the server to actively check the health of the WebSocket connections, disconnecting inactive clients.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  webSocket: {\n    enableServerHeartbeatCheck: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeORM in Configuration\nDESCRIPTION: This code snippet shows how to import and register the TypeORM component within a Midway application's configuration file. It imports the necessary modules and configures the component to be used by the application. It also imports config files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typeorm/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as typeorm from '@midwayjs/typeorm';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    typeorm,\n  ],\n  importConfigs: [\n    join(__dirname, './config')\n  ]\n})\nexport class ContainerConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Apollo Server Configuration (TypeScript)\nDESCRIPTION: This code illustrates how to configure Apollo Server as a Midway Component in a Node.js (Koa) application. It defines GraphQL schema resolvers in `config.default.ts` and imports them into `configuration.ts`.  The `generateMiddleware` method is used to register the GraphQL middleware, specifying that it should be used for the GraphQL API path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/graphql.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nimport { SampleResolver } from '../resolvers/sample.resolver';\nimport { CreateGraphQLMiddlewareOption } from 'apollo-server-midway';\n\nexport const graphql: CreateGraphQLMiddlewareOption = {\n  schema: {\n    resolvers: [SampleResolver],\n  },\n};\n\n// configuration.ts\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { ILifeCycle } from '@midwayjs/core';\nimport { IMidwayKoaApplication } from '@midwayjs/koa';\nimport * as GraphQL from 'apollo-server-midway';\n\n@Configuration({\n  imports: [GraphQL],\n  importConfigs: ['./config'],\n})\nexport class ContainerConfiguration implements ILifeCycle {\n  @App()\n  app: IMidwayKoaApplication;\n\n  async onReady(): Promise<void> {\n    this.app.use(\n      // Express 下的命名空间：graphql:GraphQLExpressMiddleware\n      await this.app.generateMiddleware('graphql:GraphQLKoaMiddleware')\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CoreLogger Usage with @Logger('coreLogger') - Typescript\nDESCRIPTION: This snippet demonstrates how to use the `@Logger('coreLogger')` decorator to inject the core logger into a configuration class. It shows how to log information, debug messages, warnings, and errors during the application startup phase. The core logger is typically used for logging events related to components and the framework itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  @Logger('coreLogger')\n  logger: ILogger;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    this.logger.debug('debug info');\n    This.logger.info ('startup takes% D MS', Date.now() -Start);\n    this.logger.warn('warning!');\n\n    this.logger.error(someErrorObj);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: MidwayJS Controller and Service Example\nDESCRIPTION: Demonstrates a basic MidwayJS controller and service using the @Provide, @Inject, Get, and Controller decorators.  It shows how to inject a UserService into a UserController to handle a request.  Requires @midwayjs/decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Get } from '@midwayjs/decorator';\n\n// userController.ts\n@Provide()\n@Controller('/')\nexport class UserController {\n  @Inject()\n  userService: UserService;\n\n  @Get('/')\n  async get() {\n    const user = await this.userService.getUser();\n    console.log(user); // world\n  }\n}\n\n// userService.ts\n@Provide()\nexport class UserService {\n  async getUser() {\n    return 'world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cron Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the `@midwayjs/cron` component as a dependency in your `package.json` file. After adding this, you need to reinstall the dependencies using `npm install` or `yarn install`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"dependencies\": {\n     \"@midwayjs/cron\": \"^3.0.0\",\n     //...\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Enable MQTT Component in Configuration\nDESCRIPTION: This TypeScript snippet demonstrates how to import and enable the MQTT component within the `src/configuration.ts` file.  The `mqtt` import is added to the `imports` array within the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport * as mqtt from '@midwayjs/mqtt';\n\n@Configuration({\n   imports: [\n     // ...other components\n     mqtt,\n   ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts for Midway Hooks Kit\nDESCRIPTION: These npm scripts demonstrate common commands for developing, building, and starting a production server in a Midway Hooks project using @midwayjs/hooks-kit.  The `dev` script starts the development server. The `start` script initiates the production server (after building). The `build` script creates the production build.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/fullstack.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"hooks dev\", // start the development server\n    \"start\": \"hooks start\", // start the production server, please make sure you have run' npm run build' before using it'\n    \"build\": \"hooks build\" // Build the product for production\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Only Swagger JSON (MidwayJS, TypeScript)\nDESCRIPTION: This snippet configures MidwayJS to only provide the Swagger JSON without rendering the UI.  This is useful when you want to use a separate UI or tool to consume the Swagger documentation. Requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { renderJSON } from '@midwayjs/swagger';\n\nexport default {\n   // ...\n   swagger: {\n     swaggerUIRender: renderJSON,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: TestService with RunInPrimary decorator\nDESCRIPTION: This TypeScript code defines a `TestService` class in MidwayJS with the `@RunInPrimary` decorator applied to the `setData` and `getData` methods. This ensures that these methods are executed only in the master process. It uses `Provide` and `Scope` decorators for dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/process_agent.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum } from '@midwayjs/decorator';\nimport { RunInPrimary } from '@midwayjs/process-agent';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class TestService {\n  data: any = 0;\n\n  @RunInPrimary()\n  async setData(b) {\n    this.data = b;\n    return this.data;\n  }\n\n  @RunInPrimary()\n  async getData() {\n    return this.data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File-Level Middleware Configuration\nDESCRIPTION: This TypeScript code shows how to define file-level middleware in Midway Hooks.  The `logger` middleware, defined in a separate file, is applied to all API functions within the current file via the `config.middleware` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/middleware.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ApiConfig,\n  Api,\n  Get,\n} from '@midwayjs/hooks';\nimport logger from './logger';\n\n// File Level Middleware\n// highlight-start\nexport const config: ApiConfig = {\n  middleware: [logger],\n};\n// highlight-end\n\nexport default Api(Get(), async () => {\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Enable JWT Component - Typescript\nDESCRIPTION: This snippet shows how to enable the JWT component in a MidwayJS application. It imports the necessary modules and adds the jwt module to the imports array in the configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\nimport { join } from 'path';\nimport * as jwt from '@midwayjs/jwt';\nimport { Configuration, ILifeCycle,} from '@midwayjs/core';\nimport * as passport from '@midwayjs/passport';\n\n@Configuration({\n  imports: [\n    // ...\n    jwt,\n    passport\n  ],\n  importConfigs: [join(__dirname, './config')]\n})\nexport class MainConfiguration implements ILifeCycle {}\n\n```\n\n----------------------------------------\n\nTITLE: Global Koa CORS Middleware Configuration\nDESCRIPTION: This TypeScript code demonstrates how to configure global Koa middleware (e.g., `@koa/cors`) in Midway Hooks using `createConfiguration`. Both the `logger` and `cors()` middleware are applied globally.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/middleware.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  hooks,\n  createConfiguration,\n} from '@midwayjs/hooks';\nimport logger from './logger';\nimport cors from '@koa/cors';\n\n// Global Middleware\nexport default createConfiguration({\n  imports: [\n    hooks({\n      // highlight-start\n      middleware: [logger, cors()],\n      // highlight-end\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Interceptors for Custom Axios Instance in Typescript\nDESCRIPTION: This snippet shows how to configure global interceptors for a custom Axios instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, IMidwayContainer } from '@midwayjs/core';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    axios // import axios components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n  \tconst httpServiceFactory = await container.getAsync(axios.HttpServiceFactory);\n    const customAxios = httpServiceFactory.get('customAxios');\n    customAxios.interceptors.request.use(\n      config => {\n        //...\n      },\n      error => {\n        //...\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set package type to module\nDESCRIPTION: This configuration snippet sets the `type` field in `package.json` to `module`, indicating that the project uses ECMAScript modules. This is a crucial step for enabling ESM support in Node.js. The `dependencies` object is where you list the packages required for your project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/esm.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-package\",\n  \"type\": \"module\",\n  // ...\n  \"dependencies\": {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Data Source with InjectRepository in MidwayJS (TypeScript)\nDESCRIPTION: This snippet shows how to specify a particular data source using the `InjectRepository` decorator in MidwayJS with Sequelize. This allows you to use different databases for different entities within your application. The second parameter to `InjectRepository` defines the data source name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller } from '@midwayjs/core';\nimport { InjectRepository } from '@midwayjs/sequelize';\nimport { Photo } from '../entity/photo.entity';\nimport { User } from '../entity/user.entity';\nimport { Repository } from 'sequelize-typescript';\n\n@Controller('/')\nexport class HomeController {\n  // 指定某个数据源\n  @InjectRepository(User, 'default')\n  userRepository: Repository<User>;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster\nDESCRIPTION: This TypeScript snippet illustrates the configuration for a Redis cluster in the `config.default.ts` file. It includes an array of nodes (host and port) and optional Redis options such as family, password, and database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  redis: {\n    // Cluster Redis\n    client: {\n      cluster: true\n      nodes: [{\n        host: 'host',\n        port: 'port',\n      },{\n        host: 'host',\n        port: 'port',\n      }],\n      redisOptions: {\n        family: '',\n        password: 'xxxx',\n        db: 'xxx'\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Global Specify Partial Text\nDESCRIPTION: Demonstrates configuring the i18n component to globally specify partial validation text replacements.  This provides a centralized way to customize error messages based on locale.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    // Put your translated text here\n    localeTable: {\n      zh_CN: {\n        validate: {\n          'string. Max': 'Hello World',\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters with ApiQuery and Query Decorator\nDESCRIPTION: This TypeScript code shows how to define query parameters using the `@Query` decorator. Swagger automatically identifies the parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/get_user')\nasync getUser(@Query('name') name: string) {\n  return 'hello';\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Mocks by Group in Midway.js (TypeScript)\nDESCRIPTION: This snippet demonstrates restoring mocks by a specific group using the `restoreMocks` function.  This allows for selective clearing of mock data.  In this example, mocks belonging to 'group1' are restored.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { restoreMocks } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  restoreMocks('group1');();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC service with Protocol Buffers (example)\nDESCRIPTION: This code defines a gRPC service named `Greeter` using Protocol Buffers. It includes a `SayHello` method that takes a `HelloRequest` message as input and returns a `HelloReply` message. The messages define the structure of the request and response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloworld;\n\n// 服务的定义\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// 服务的请求参数\nmessage HelloRequest {\n  string name = 1;\n}\n\n// 服务的响应参数\nmessage HelloReply {\n  string message = 1;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resolve Model Cyclic Dependency in Sequelize-Typescript\nDESCRIPTION: This snippet illustrates how to resolve a model circular dependency error (ReferenceError) that can occur when using the `@BelongsTo` decorator.  Wrapping the type with `ReturnType` allows the type to be resolved without immediate evaluation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Column, Model, BelongsTo, ForeignKey } from 'sequelize-typescript';\nimport { User } from './user.entity';\n\n@Table\nexport class Photo extends Model {\n  // ...\n  @BelongsTo(() => User)\n  user: ReturnType<() => User>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration example for File System Routing\nDESCRIPTION: This code snippet shows the configuration example for file system routing in `midway.config.js`. This enables the file routing system and simple mode. The configuration specifies the source directory and route definitions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/file-route.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@midwayjs/hooks';\n\nexport default defineConfig({\n  source: './src/apis',\n  routes: [\n    {\n      baseDir: 'lambda',\n      basePath: '/api',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating HttpServerResponse (TypeScript)\nDESCRIPTION: This code shows how to instantiate the `HttpServerResponse` class, which requires a context object (`ctx`) from the current request. The `ctx` provides the necessary information about the request and response cycle.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst serverResponse = new HttpServerResponse(this.ctx);\n```\n\n----------------------------------------\n\nTITLE: Triggering a Queue Task with Delay\nDESCRIPTION: Triggers a queue task using the `QueueService`.  The `execute` method is called with the task class, parameters, and options, including a delay.  This example demonstrates scheduling a task to run after a 3-second delay.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueService } from '@midwayjs/task';\nimport { Provide, Inject } from '@midwayjs/decorator';\n\n@Provide()\nexport class UserTask {\n  @Inject()\n  service;\n\n  @Inject()\n  queueService: QueueService;\n\n  async execute(params) {\n    // 3秒后触发分布式任务调度。\n    const xxx = await this.queueService.execute(HelloTask, params, { delay: 3000 });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Dependencies Configuration\nDESCRIPTION: This JSON snippet demonstrates how to add RabbitMQ related dependencies to the `package.json` file of a MidwayJS project. This includes the core RabbitMQ module, amqplib, and its TypeScript definitions for development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/rabbitmq\": \"^3.0.0\",\n    \"amqplib\": \"^0.10.1\",\n    // ...\n  },\n  \"devDependencies\": {\n    \"@types/amqplib\": \"^0.8.2\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Cross-Domain Component (TypeScript)\nDESCRIPTION: Imports the `crossDomain` component into the `src/configuration.ts` file. This step is necessary to enable cross-domain functionality within the MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cross_domain.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as crossDomain from '@midwayjs/cross-domain';\n@Configuration({\n  imports: [\n    // ...other components\n    crossDomain\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Using Default Axios Instance - TypeScript\nDESCRIPTION: This snippet demonstrates how to inject and use the default Axios instance provided by `@midwayjs/axios`. It uses `HttpService` to perform a GET request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpService } from '@midwayjs/axios';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  httpService: HttpService;\n\n  async invoke() {\n  \tconst url = 'https://midwayjs.org/resource/101010100.json';\n    const result = await this.httpService.get(url);\n    // TODO result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Job State\nDESCRIPTION: This TypeScript snippet shows how to get the current state of a job using the `getState()` method of the `Job` object. Possible states include 'delayed', 'completed', etc.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = await job.getState();\n// state => 'delayed' 延迟状态\n// state => 'completed' 完成状态\n```\n\n----------------------------------------\n\nTITLE: Configure UploadMiddleware Globally - Express\nDESCRIPTION: Configures the UploadMiddleware globally for an Express application. This middleware will be applied to all incoming requests, handling multipart/form-data parsing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\nimport { Application } from '@midwayjs/express';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App('express')\n  app: Application;\n  \n  async onReady() {\n    this.app.useMiddleware(busboy.UploadMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure HTTPS using SSL certificates\nDESCRIPTION: This TypeScript code shows how to configure HTTPS by providing the paths to the SSL key and certificate files. It imports the `readFileSync` function from the `fs` module and the `join` function from the `path` module to read the certificate files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  egg: {\n    key: join(__dirname, '../ssl/ssl.key'),\n    cert: join(__dirname, '../ssl/ssl.pem'),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Specifying Partial Text with i18n\nDESCRIPTION: This snippet demonstrates how to globally customize specific validation error messages using the `localeTable` within the i18n configuration. This allows overriding the default error messages for certain validation rules (e.g., `string.max`) across the entire application for specified locales. This configuration is added to `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    // 把你的翻译文本放到这里\n    localeTable: {\n      zh_CN: {\n        validate: {\n          'string.max': 'hello world',\n        },\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Memory Data Listener in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a data listener that updates a string in memory every second. It uses the DataListener class from @midwayjs/core, and implements the initData and onData methods. The class is annotated with @Provide and @Scope to define it as a singleton.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_listener.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/listener/memory.listner.ts\nimport { DataListener, Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MemoryDataListener extends DataListener<string> {\n  // Initialize data\n  initData() {\n    return 'hello' + Date.now();\n  }\n\n  // Update data\n  onData(setData) {\n    setInterval(() => {\n      setData('hello' + Date.now());\n    }, 1000);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Messages\nDESCRIPTION: This code snippet demonstrates how to send data back to the client using the @WSEmit decorator. The return value of the `gotMessage` function ('hello world') is emitted to the client on the `myEventResult` event.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, Provide, OnWSConnection, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/socketio';\n\n@Provide()\n@WSController('/')\nexport class HelloSocketController {\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('myEvent')\n  @WSEmit('myEventResult')\n  async gotMessage() {\n    return 'hello world'; // 这里将 hello world 字符串返回给客户端\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cookie from Frontend - TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a cookie set by the frontend or another system. By setting the `signed` parameter to `false` when getting the cookie, the framework will not attempt to verify the cookie's signature, allowing you to retrieve cookies set by other systems without causing verification errors. This is useful when integrating with frontend applications that set their own cookies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nctx.cookies.get('frontend-cookie', {\n  signed: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Define Multiple Entities\nDESCRIPTION: This TypeScript code defines two entities, `User` and `User2`, with the same properties. These entities are used to demonstrate how to configure multiple data sources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass User {\n\n  @prop()\n  public name?: string;\n\n  @prop({ type: () => [String] })\n  public jobs?: string[];\n}\n\nclass User2 {\n\n  @prop()\n  public name?: string;\n\n  @prop({ type: () => [String] })\n  public jobs?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Captcha Configuration Example - TypeScript\nDESCRIPTION: Provides a sample configuration for the @midwayjs/captcha component, showcasing how to set default values and customize options for different captcha types (image, formula, text). It also demonstrates how configurations are merged with default settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/captcha.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const captcha: CaptchaOptions = {\n  default: { // default config\n    size: 4,\n    noise: 1,\n    width: 120,\n    height: 40,\n  },\n  image: { // Will merge default configuration\n    type: 'mixed',\n  },\n  formula: {}, // Will merge default configuration\n  text: {}, // Will merge default configuration\n  expirationTime: 3600,\n  idPrefix: 'midway:vc',\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Loading - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to conditionally load a component based on the environment. The `imports` array now contains an object with `component` and `enabledEnvironment` properties.  The `info` component will only be loaded when the application is running in the `local` environment. Requires `@midwayjs/core` and the component itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/midway_component.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 应用或者函数的 src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as info from '@midwayjs/info';\n\n@Configuration({\n  imports: [\n    {\n      component: info,\n      enabledEnvironment: ['local'],\n    },\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Run Bundling Process\nDESCRIPTION: This command executes the bundling process as defined in the `package.json` scripts. It will first run `bundle` to prepare the source, then `npm run build` to compile the TypeScript files, and finally `ncc build` to create a single output file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run bundle\n```\n\n----------------------------------------\n\nTITLE: Adding columns to Entity\nDESCRIPTION: Adds columns to the entity using the `@Column` decorator from `typeorm`. Each decorated property represents a column in the database table.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// entity/photo.ts\nimport { EntityModel } from '@midwayjs/orm';\nimport { Column } from 'typeorm';\n\n@EntityModel()\nexport class Photo {\n  @Column()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column()\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Socket Connection\nDESCRIPTION: This code snippet demonstrates how to handle a new Socket.IO connection in MidwayJS. It uses the @OnWSConnection decorator to bind a method that will be executed when a new client connects to the specified namespace, logging the client's ID to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, Provide, OnWSConnection, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/socketio';\n\n@Provide()\n@WSController('/')\nexport class HelloSocketController {\n  @Inject()\n  ctx: Context;\n\n  @OnWSConnection()\n  async onConnectionMethod() {\n    console.log('on client connect', this.ctx.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create app instance with createApp\nDESCRIPTION: This snippet demonstrates how to create a Midway.js application instance using the `createApp` function from `@midwayjs/mock`. The `Framework` type parameter is used to provide type information for the created app.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// create app\nconst app = await createApp<Framework>();\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Many-to-Many Relationship\nDESCRIPTION: This code defines the inverse side of the many-to-many relationship in the `Photo` entity.  The `@ManyToMany` decorator references the `Album` entity and specifies the `albums` property on the `Album` entity as the other side of the relationship.  This allows TypeORM to manage the relationship.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n  /// ... other columns\n\n  @ManyToMany((type) => Album, (album) => album.photos)\n  albums: Album[];\n}\n```\n\n----------------------------------------\n\nTITLE: Bundle and Build Scripts (package.json)\nDESCRIPTION: This JSON snippet shows the `bundle` and `bundle_start` scripts in the `package.json` file. The `bundle` script generates the entry point, builds the TypeScript project, and then compiles it into a single file using `ncc`. The `bundle_start` script starts the compiled application in production mode.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    // ...\n    \"bundle\": \"bundle && npm run build && ncc build bootstrap.js -o build\",\n    \"bundle_start\": \"NODE_ENV=production node ./build/index.js\"\n  },\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with Type Specification in Typescript\nDESCRIPTION: This snippet demonstrates how to specify the HTTP method and data type for a GET request using `makeHttpRequest`.  The `method` is set to 'GET' and `dataType` to 'json'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  method: 'GET',\n  dataType: 'json',\n});\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Prometheus\nDESCRIPTION: This YAML file configures a Prometheus instance using Docker Compose. It defines the service, volumes, command-line arguments, and port mappings required to run Prometheus.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2.2'\nservices:\n  tapi:\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '50m'\n    image: prom/prometheus\n    restart: always\n    volumes:\n      - ./prometheus_data:/prometheus_data:rw\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - ./targets.json:/etc/prometheus/targets.json\n    command:\n      - '--storage.tsdb.path=/prometheus_data'\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.retention=10d'\n      - '--web.enable-lifecycle'\n    ports:\n      - '9090:9090'\n```\n\n----------------------------------------\n\nTITLE: Access @Config in constructor using @Init in MidwayJS\nDESCRIPTION: This TypeScript code shows that values injected by `@Config()` are undefined in the constructor. The `@Init` decorator must be used to get properties injected by `@Config()`\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class UserService {\n\n  @Config('redisConfig')\n  redisConfig;\n\n  constructor() {\n    console.log(this.redisConfig); // undefined\n  }\n\n  @Init()\n  async initMethod() {\n    console.log(this.redisConfig); // has value\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/process-agent dependency in package.json\nDESCRIPTION: Adds the @midwayjs/process-agent package as a dependency in the package.json file. This ensures that the package is installed when the project dependencies are resolved.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/process_agent.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/process-agent\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Configure JWT Module\nDESCRIPTION: This code snippet demonstrates how to import and configure the JWT module within a MidwayJS application configuration. The `jwt` import is added to the `imports` array within the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/jwt.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, IMidwayContainer } from '@midwayjs/core';\nimport { IMidwayContainer } from '@midwayjs/core';\nimport * as jwt from '@midwayjs/jwt';\n\n@Configuration({\n  imports: [\n    // ...\n    jwt,\n  ],\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Logger\nDESCRIPTION: This code snippet demonstrates how to configure a custom logger named 'abcLogger' within the MidwayJS application. It sets the 'fileLogName' option, which determines the name of the log file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      abcLogger: {\n        fileLogName: 'abc.log'\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Using MidwayMockService in Controller - TypeScript\nDESCRIPTION: This snippet shows how to inject and use the MidwayMockService. It defines a controller and injects the mock service. The comments indicates where the service API can be used. `@Controller`, `@Inject`, and `@Get` decorators are used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, MidwayMockService } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  mockService: MidwayMockService;\n\n  @Get('/')\n  async home() {\n    // this.mockService.mockProperty(/** 省略 **/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merge configuration with extend in JavaScript\nDESCRIPTION: This JavaScript code snippet illustrates how configuration objects are merged using the `extend` function. It demonstrates that arrays are directly overwritten during the merging process, rather than being merged element-wise.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = {\n   arr: [ 1, 2 ],\n};\nconst b = {\n   arr: [ 3 ],\n};\nextend(true, a, b);\n// => { arr: [ 3 ] }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Client Instance (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a single client instance with a specific `baseUrl` using the `client` property in the `httpClient` configuration.  It illustrates the configuration structure for a single named client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  default: {\n    timeout: 3000\n  },\n  client: {\n  \tbaseUrl: ''\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling a Component for Specific Environments (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable a component only in specific environments, such as the `local` environment. The `imports` array accepts an object with `component` (the component itself) and `enabledEnvironment` (an array of environment names). This allows you to selectively enable components based on the current environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/midway_component.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 应用或者函数的 src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport * as orm from '@midwayjs/orm';\n\n@Configuration({\n  imports: [\n    {\n      component: orm,\n      enabledEnvironment: ['local'],\n    },\n  ],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Service Class (TypeScript)\nDESCRIPTION: This code snippet shows how to instantiate the service class within the `onReady` lifecycle hook of a configuration class. It uses the `container.getAsync` method to retrieve and instantiate the `HTTPClientServiceFactory`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\n\n@Configuration({\n  imports: [\n    // ...\n  ]\n})\nexport class ContainerConfiguration {\n  async onReady(container) {\n    // 实例化服务类\n    await container.getAsync(HTTPClientServiceFactory);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Static File Serving Directory\nDESCRIPTION: This TypeScript code snippet configures the default directory for static file serving. It sets the prefix and directory path in the application's configuration file. This configuration modifies the default behavior of the static file middleware, mapping requests with the specified prefix to files within the specified directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/static_file.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// {app_root}/src/config/config.default.ts\nexport default {\n  // ...\n  staticFile: {\n    dirs: {\n      default: {\n        prefix: '/',\n        dir: 'xxx',\n      },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Add default data source name in Midway\nDESCRIPTION: This commit introduces the ability to specify a default data source name within the Midway framework, presumably for database connections or similar data access configurations. It allows for a more streamlined configuration process. The feature enhances data source management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mikro/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Bull Configuration with Redis Options (Password)\nDESCRIPTION: This TypeScript snippet shows how to configure the Bull queue with detailed Redis connection options, including port, host, and password, within the `config.default.ts` file. This configuration will be used by default for all queues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  bull: {\n    defaultQueueOptions: {\n      redis: {\n        port: 6379,\n        host: '127.0.0.1',\n        password: 'foobared',\n      },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata from Streaming Calls with getCall() (TypeScript)\nDESCRIPTION: This snippet demonstrates how to get the original client stream and subscribe to `metadata` events in other streaming services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// 获取服务，注意，这里没有 await\nconst call = service.addMany().getCall();\ncall.on('metadata', (meta) => {\n  // output meta\n});\n\n```\n\n----------------------------------------\n\nTITLE: Modify Development Port\nDESCRIPTION: This snippet shows how to modify the development port of the Midway.js application by updating the `dev` script in the `package.json` file. It uses `cross-env` to set environment variables and passes the `--port` option to the `midway-bin dev` command, changing the default port from 7001 to 6001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/start_app.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"scripts\": {\n  //...\n  \"dev\": \"cross-env ets && cross-env NODE_ENV=local midway-bin dev --ts --port=6001\",\n},\n```\n\n----------------------------------------\n\nTITLE: Sequelize Primary Key Definition - Typescript\nDESCRIPTION: This code demonstrates how to define a primary key for a Sequelize model using either `@Column({primaryKey: true})` or `@PrimaryKey` decorators from `sequelize-typescript`. The primary key uniquely identifies each record in the table.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, PrimaryKey } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @PrimaryKey\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: ESM export example\nDESCRIPTION: This snippet demonstrates how to export a function in ESM using the `export` keyword. Traditional `module.exports` or `exports.` are not supported in ESM. It shows the correct way to define and export a function for use in other modules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/esm.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ./foo.ts\nexport function helper() {\n    // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ./bar.ts\nimport { helper } from \"./foo\"; // only works in CJS\n```\n\n----------------------------------------\n\nTITLE: Get the entire config object in MidwayJS\nDESCRIPTION: This code snippet illustrates how to retrieve the entire configuration object in a MidwayJS application using the `@Config` decorator with the `ALL` special attribute. It injects the complete configuration object into the `allConfig` property of the `IndexHandler` class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, ALL } from '@midwayjs/core';\n\nexport class IndexHandler {\n\n   @Config(ALL)\n   allConfig;\n\n   async handler() {\n   console.log(this.allConfig); // { userService: { appname: 'test'}}\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Kafka Producer Configuration\nDESCRIPTION: This TypeScript code shows the configuration structure for Kafka producers.  It uses the `clients` option to allow multiple producer instances. Each instance has its own connection and producer options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    producer: {\n      clients: {\n        pub1: {\n          // ...\n        },\n        pub2: {\n          // ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Concat Pipeline Execution Example\nDESCRIPTION: Demonstrates the use of the `concat` method to execute a pipeline concurrently.  It illustrates that the results are returned as an array, where each element corresponds to the result of a valve in the order they were defined in the pipeline.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline([VideoFeeds, AccountMap, CrowFeeds])\n  stages: IPipelineHandler;\n  \n  async runConcat(): Promise<any> {\n    // 这里并发执行 videoFeeds、accountMap、crowFeeds\n    return this.stages.concat<any>({\n      args: {aa: 123}\n    });\n    \n    // 这里返回的 result 是一个数组\n    /*\n    [\n    \t// 以 videoFeeds 作为第一个返回对象\n      [\n        {\n          videoId: '123',\n          videoUrl: 'https://www.taobao.com/xxx.mp4',\n          videoTitle: 'test 1 video'\n        }, {\n          videoId: '234',\n          videoUrl: 'https://www.taobao.com/xxx234.mp4',\n          videoTitle: 'test 2 video'\n        }, {\n          videoId: '456',\n          videoUrl: 'https://www.taobao.com/xxx456.mp4',\n          videoTitle: 'test 3 video'\n        }\n      ],\n      // 以 accountMap 作为第二个返回对象\n      {\n        id: 'test_account_id',\n        nick: 'test hello',\n        isFollow: true,\n      },\n      // 以 crowFeeds 作为第三个返回对象\n      {\n        title: 'test tab',\n        tabId: 'firstTab',\n        index: 0\n      }\n    ]\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring koa-session Middleware\nDESCRIPTION: This code shows how to configure and use the `koa-session` middleware in a Midway.js Koa application. It sets options like the cookie key and maximum age for the session. It is added as a middleware to the Koa application instance. Dependencies: @midwayjs/decorator, @midwayjs/koa, koa-session.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/koa';\nimport * as session from 'koa-session';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(\n      session(\n        {\n          key: 'koa.sess', // cookie key\n          maxAge: 24 * 3600 * 1000, // 1天\n        },\n        this.app\n      )\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Service Initialization and Message Sending (Midway.js, TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a RabbitMQ service in Midway.js using TypeScript.  It establishes a connection to the RabbitMQ server, creates a channel, asserts a queue, and provides a method to send messages to the queue. The service is defined as a Singleton and is automatically initialized and destroyed using decorators.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum, Init, Autoload, Destroy } from '@midwayjs/decorator';\nimport * as amqp from 'amqp-connection-manager';\n\n@Autoload()\n@Provide()\n@Scope(ScopeEnum.Singleton) // Singleton 单例，全局唯一（进程级别）\nexport class RabbitmqService {\n  private connection: amqp.AmqpConnectionManager;\n\n  private channelWrapper;\n\n  @Init()\n  async connect() {\n    // 创建连接，你可以把配置放在 Config 中，然后注入进来\n    this.connection = await amqp.connect('amqp://localhost');\n\n    // 创建 channel\n    this.channelWrapper = this.connection.createChannel({\n      json: true,\n      setup: function (channel) {\n        return Promise.all([\n          // 绑定队列\n          channel.assertQueue('tasks', { durable: true }),\n        ]);\n      },\n    });\n  }\n\n  // 发送消息\n  public async sendToQueue(queueName: string, data: any) {\n    return this.channelWrapper.sendToQueue(queueName, data);\n  }\n\n  @Destroy()\n  async close() {\n    await this.channelWrapper.close();\n    await this.connection.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running development server (Bash)\nDESCRIPTION: This command starts the MidwayJS development server, enabling hot reloading and other development-friendly features. It also opens the application in a web browser.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n$ open http://localhost:7001\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration in Midway Hooks\nDESCRIPTION: This code shows how to register a middleware globally in a Midway Hooks application using `createConfiguration`. The `hooks` function within the `imports` array is configured with the `middleware` option to include the desired middleware (in this case, `logger`). This middleware applies to all routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/middleware.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  hooks,\n  createConfiguration\n} from '@midwayjs/hooks';\nimport logger from './logger';\n\n// Global Middleware\nexport default createConfiguration({\n  imports: [\n    // highlight-start\n    hooks({\n      middleware: [logger],\n    }),\n    // highlight-end\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Configuration Loading in TypeScript\nDESCRIPTION: This code demonstrates how to load configurations asynchronously before the MidwayJS application starts. It uses a RemoteConfigService to fetch remote configurations and merges them into the application's configuration using app.addConfigObject. The RemoteConfigService is initialized using the @Init decorator, ensuring it runs before the application starts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/multi_framework_start.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Provide, Init } from '@midwayjs/decorator';\nimport { IMidwayApplication } from '@midwayjs/core';\n\n@Provide()\nexport class RemoteConfigService {\n  @App()\n  app: IMidwayApplication;\n\n  @Init()\n  async syncConfig() {\n    // 这里获取一个远端的配置，HTTP，或者订阅其他的配置协议\n    const remoteConfig = await this.getRemote();\n\n    // 将配置合并到全局的配置服务中\n    this.app.addConfigObject(remoteConfig);\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nBootstrap.load(webFramework)\n  .load(grpcFramework)\n  .before(async (container) => {\n    await container.getAsync(RemoteConfigService);\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling in Guard (TypeScript)\nDESCRIPTION: Demonstrates how to throw custom errors within a guard's `canActivate` method. In this example, a `ForbiddenError` is thrown if the `methodName` is 'xxx'. This allows for fine-grained control over error responses. It depends on `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IMiddleware, Guard, IGuard, httpError } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Guard()\nexport class AuthGuard implements IGuard<Context> {\n  async canActivate(context: Context, supplierClz, methodName: string): Promise<boolean> {\n    // ...\n    if (methodName ==='xxx') {\n      throw new httpError.ForbiddenError();\n    }\n    \n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure dateStrings in TypeORM - TypeScript\nDESCRIPTION: This snippet configures `dateStrings` in the TypeORM configuration to ensure that mysql returns time in DATETIME format. This setting is only valid for mysql databases.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        //...\n        dateStrings: true\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Koa Component in Midway\nDESCRIPTION: This TypeScript code snippet demonstrates how to enable the Koa component in a MidwayJS application. It imports the necessary modules and configures the `MainConfiguration` class to include the Koa component. The `@App()` decorator injects the Koa application instance into the `app` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [koa],\n  importConfigs: [join(__dirname, './config')]\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n\t\t// ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Matched Router Info in Middleware\nDESCRIPTION: This code snippet demonstrates how to get the matched router information in a middleware using `MidwayWebRouterService`. It shows how to check if a route is registered in the router table and proceed or throw an error.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, Inject, httpError, MidwayWebRouterService } from '@midwayjs/core';\n\n@Middleware()\nexport class AuthMiddleware {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  resolve() {\n    return async (ctx, next) => {\n      // 查询当前路由是否在路由表中注册\n      const routeInfo = await this.webRouterService.getMatchedRouterInfo(ctx.path, ctx.method);\n      if (routeInfo) {\n        await next();\n      } else {\n        throw new httpError.NotFoundError();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Midway Context in Project (src/interface.ts)\nDESCRIPTION: This code snippet shows how to extend the Midway.js Context interface within a project by declaring a module augmentation. It adds an 'abc' property of type string to the Context interface, making it available throughout the project. The `@midwayjs/core` module needs to be imported before declaration. This method impacts the entire project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/context_definition.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\n\nimport '@midwayjs/core';\n\n// ...\n\ndeclare module '@midwayjs/core'{\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OSSServiceFactory to Get Multiple OSS Instances in MidwayJS\nDESCRIPTION: This TypeScript snippet shows how to use the OSSServiceFactory to obtain instances of OSSService or OSSSTSService for different buckets. It injects the factory, retrieves instances by name, and creates new instances using configurations. It supports both OSSService and OSSSTSService types.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OSSServiceFactory } from '@midwayjs/oss';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  ossServiceFactory: OSSServiceFactory;\n\n  @Config('bucket3')\n  bucket3Config;\n\n  async saveFile() {\n\n    // The default type is OSSService\n    const bucket1 = this.ossServiceFactory.get('bucket1');\n    const bucket2 = this.ossServiceFactory.get('bucket2');\n\n    // If it is STS, you need to set a generic contact.\n    // const bucket1 = this.ossServiceFactory.get<OSSSTSService>('bucket1');\n\n    // config.bucket3 and config.oss.default will be merged\n    const bucket3 = await this.ossServiceFactory.createInstance(this.bucket3Config, 'bucket3');\n    // After passing the name, you can also get it from the factory.\n    bucket3 = this.ossServiceFactory.get('bucket3');\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Framework in Typescript\nDESCRIPTION: This snippet illustrates how to define a custom framework in Midway.js by extending the `BaseFramework` class. It defines custom `Context`, `Application`, and `IMidwayCustomConfigurationOptions` interfaces and implements the `configure`, `applicationInitialize`, and `run` methods in the `MidwayCustomFramework` class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/component_development.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Framework, BaseFramework, IConfigurationOptions, IMidwayApplication, IMidwayContext } from '@midwayjs/core';\n\n// 定义 Context\nexport interface Context extends IMidwayContext {\n  // ...\n}\n\n// 定义 Application\nexport interface Application extends IMidwayApplication<Context> {\n  // ...\n}\n\n// 框架的配置\nexport interface IMidwayCustomConfigurationOptions extends IConfigurationOptions {\n\t// ...\n}\n\n// 实现一个自定义框架，继承基础框架\n@Framework()\nexport class MidwayCustomFramework extends BaseFramework<Application, Context, IMidwayCustomConfigurationOptions> {\n\n  // 处理初始化配置\n  configure() {\n    // ...\n  }\n\n  // app 初始化\n  async applicationInitialize() {\n    // ...\n  }\n\n  // 框架启动，比如 listen\n  async run() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Timer-Triggered Function with Cron - TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a timer-triggered function using the `@ServerlessTrigger` decorator in MidwayJS, specifying a cron expression for the execution schedule. It imports necessary modules from `@midwayjs/decorator` and `@midwayjs/faas`. The cron expression '0 0 4 * * *' triggers the function every day at 4:00 AM UTC. The function logs the event and returns 'hello world'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_timer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context, FC } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.TIMER, {\n    type: 'cron',\n    value: '0 0 4 * * *', // 每天4:00触发  https://help.aliyun.com/document_detail/68172.html\n  })\n  async handleTimerEvent(event: FC.TimerEvent) {\n    this.ctx.logger.info(event);\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating data in database\nDESCRIPTION: Demonstrates how to update an existing record in the database. It fetches an existing entity, modifies its properties, and saves the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Func } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from './entity/photo';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n    let photoToUpdate = await this.photoModel.findOne(1);\n    photoToUpdate.name = 'Me, my friends and polar bears';\n\n    await this.photoModel.save(photoToUpdate);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Midway CLI Test Script in package.json\nDESCRIPTION: This JSON snippet configures the 'test' script in `package.json` to use the Midway CLI (`midway-bin`) for running tests. The `--ts` flag enables TypeScript support. Developers can then run tests using `npm test`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"midway-bin test --ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary File Handling\nDESCRIPTION: This code snippet demonstrates configuring temporary file storage and cleanup using `mode`, `tmpdir`, and `cleanTimeout` options within the `busboy` settings.  Uploaded files are saved to the `tmpdir` location, and `cleanTimeout` specifies the duration in milliseconds before temporary files are automatically deleted.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/busboy';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  busboy: {\n    mode: 'file',\n    tmpdir: join(tmpdir(), 'midway-busboy-files'),\n    cleanTimeout: 5 * 60 * 1000,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating One-to-One Relationship with TypeORM\nDESCRIPTION: This snippet illustrates how to define a one-to-one relationship between two entities (Photo and PhotoMetadata) using TypeORM decorators. It includes the entity definitions for both sides of the relationship and demonstrates how to establish the link when creating new instances. The PhotoMetadata entity contains a foreign key referencing the Photo entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { Photo } from './photo.entity';\n\n@Entity()\nexport class PhotoMetadata {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column(\"int\")\n  height: number;\n\n  @Column(\"int\")\n  width: number;\n\n  @Column()\n  orientation: string;\n\n  @Column()\n  compressed: boolean;\n\n  @Column()\n  comment: string;\n\n  @OneToOne(type => Photo)\n  @JoinColumn()\n  photo: Photo;\n\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { PhotoMetadata } from './entity/photoMetadata.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  @InjectEntityModel(PhotoMetadata)\n  photoMetadataModel: Repository<PhotoMetadata>;\n\n  async updatePhoto() {\n\n  // create a photo\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.isPublished = true;\n\n    // create a photo metadata\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = \"cybershoot\";\n    metadata.orientation = \"portrait\";\n    metadata.photo = photo; // this way we connect them\n\n\n    // first we should save a photo\n    await this.photoModel.save(photo);\n\n    // photo is saved. Now we need to save a photo metadata\n    await this.photoMetadataModel.save(metadata);\n\n    // done\n    console.log(\"Metadata is saved, and relation between metadata and photo is created in the database too\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Authentication in Typescript\nDESCRIPTION: This snippet configures bearer authentication (JWT) for Swagger in the `config.default.ts` file and associates it with a controller using `@ApiBearerAuth`.  This requires a valid JWT token.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'bearer',\n    },\n  },\n}\n\n@ApiBearerAuth()\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Getting Body Parameters from API Context\nDESCRIPTION: Shows how to access the request body using `ctx.request.body`.  The `getUser` method extracts the entire body from the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// POST /user/ HTTP/1.1\n// Host: localhost:3000\n// Content-Type: application/json; charset=UTF-8\n//\n// {\"uid\": \"1\", \"name\": \"harry\"}\nimport { Controller, Post, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n\n  @Post('/')\n  async getUser(): Promise<User> {\n    const body = this.ctx.request.body;\n    // {\n    //   uid: '1',\n    //   name: 'harry',\n    // }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Redis Component for Watcher\nDESCRIPTION: This code snippet demonstrates how to enable the Redis component within a MidwayJS application, intended for use with the Redis watcher. It imports the relevant modules and incorporates `redis` and `casbin` into the `imports` array of the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as redis from '@midwayjs/redis';\nimport * as casbin from '@midwayjs/casbin';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    redis,\n    casbin,\n  ],\n  // ...\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Default Log Levels in TypeScript\nDESCRIPTION: This snippet demonstrates how to adjust the default log levels for the entire application. The `level` property sets the minimum log level for file output, and `consoleLevel` configures the minimum log level for console output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      level: 'info',\n      consoleLevel: 'warn'\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Resource Base URL in midway.config.ts (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the base URL for static resources in a Midway Hooks project using the `midway.config.ts` file. It utilizes the `defineConfig` function from `@midwayjs/hooks-kit` to specify the `base` option within the `vite` configuration, allowing you to point to a CDN for serving static assets. This configuration ensures that when the page is accessed, static resources are loaded from the specified CDN address, improving performance and reducing load on the backend server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/deploy.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport react from '@vitejs/plugin-react';\nimport { defineConfig } from '@midwayjs/hooks-kit';\n\nexport default defineConfig({\n  vite: {\n    plugins: [react()],\n    base: 'https://cdn.example.com',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Service Call in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set a timeout when calling a service method in Midway.js. The `timeout` parameter is passed within the method's options and specifies the maximum time (in milliseconds) the call should wait for a response. If the service call exceeds this timeout, it will throw an error.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await service\n  .sayHello({\n    timeout: 5000,\n  })\n  .sendMessage({\n    name: 'harry',\n  });\n```\n\n----------------------------------------\n\nTITLE: Configure Alias for default index.html\nDESCRIPTION: This TypeScript code configures an alias to serve `index.html` when accessing the root path (`/`). This is useful because  [koa-static-cache](https://github.com/koajs/static-cache)  doesn't directly support serving a default `index.html` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/static_file.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  staticFile: {\n    dirs: {\n      default: {\n        prefix: '/',\n        alias: {\n          '/': '/index.html',\n        },\n      },\n    },\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Default Identifiers in MidwayJS (TypeScript)\nDESCRIPTION: This code demonstrates the use of default identifiers in MidwayJS to inject common values like `baseDir` and `appDir` into a class.  These values are automatically provided by MidwayJS and can be accessed directly using the `@Inject` decorator without specifying an identifier.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class BaseService {\n\n  @Inject()\n  baseDir;\n\n  @Inject()\n  appDir;\n\n  async getUser() {\n    console.log(this.baseDir);\n    console.log(this.appDir);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File-Level Koa CORS Middleware Configuration\nDESCRIPTION: This TypeScript code shows how to configure file-level Koa middleware (e.g., `@koa/cors`) in Midway Hooks.  The `logger` and `cors` middleware are applied to all API functions within the current file via the `config.middleware` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/middleware.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ApiConfig,\n  Api,\n  Get,\n} from '@midwayjs/hooks';\nimport logger from './logger';\nimport cors from '@koa/cors';\n\n// File Level Middleware\n// highlight-start\nexport const config: ApiConfig = {\n  middleware: [logger, cors],\n};\n// highlight-end\n\nexport default Api(Get(), async () => {\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Different Axios Instances in config.default.ts in Typescript\nDESCRIPTION: This snippet demonstrates how to configure multiple Axios instances using different keys in the `src/config.default.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  axios: {\n    default: {\n      // The configuration of all instances reuse.\n    },\n    clients: {\n      default: {\n        // Default instance\n      },\n      customAxios: {\n        // Custom instance\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Https in Koa\nDESCRIPTION: This TypeScript code shows how to configure HTTPS in a MidwayJS Koa application by specifying the paths to the SSL key and certificate files. This configuration allows the Koa server to serve content over HTTPS directly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  koa: {\n    key: join(__dirname, '../ssl/ssl.key')\n    cert: join(__dirname, '../ssl/ssl.pem')\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure importConfigs in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to configure the `importConfigs` property in a MidwayJS application to specify the directories containing configuration files. It uses the `@Configuration` decorator to define the main configuration class and the `join` function from the `path` module to construct the absolute path to the configuration directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport { join } from 'path';\n\n@Configuration({\n   importConfigs: [\n     join(__dirname, './config/'),\n   ]\n})\nexport class MainConfiguration {\n}\n\n```\n\n----------------------------------------\n\nTITLE: WebSocket Default Configuration in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet shows the default configuration for the `@midwayjs/ws` module in a MidwayJS project. It defines the `webSocket` configuration property and sets the `port` to 7001. This configuration will create an HTTP service for the WebSocket server on the specified port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  webSocket: {\n    port: 7001\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default HTTP Client - TypeScript\nDESCRIPTION: This code snippet configures the default settings for the HTTP client, including a timeout value. This default configuration is used as a base for all client instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service_factory.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  default: {\n    timeout: 3000,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Server-Side Streaming Implementation - TypeScript\nDESCRIPTION: This example demonstrates the implementation of a server-side streaming gRPC method using `@GrpcMethod` and `GrpcStreamTypeEnum.WRITEABLE`. The server sends multiple responses to the client via `ctx.write` and closes the stream using `ctx.end`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, GrpcStreamTypeEnum, Inject, MSProviderType, Provide, Provider } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/grpc';\nimport { math } from '../interface';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n */\n@Provide()\n@Provider(MSProviderType.GRPC, { package: 'math' })\nexport class Math implements math.Math {\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod({ type: GrpcStreamTypeEnum.WRITEABLE })\n  async sumMany(args: math.AddArgs) {\n    this.ctx.write({\n      num: 1 + args.num,\n    });\n    this.ctx.write({\n      num: 2 + args.num,\n    });\n    this.ctx.write({\n      num: 3 + args.num,\n    });\n\n    this.ctx.end();\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters with @Param\nDESCRIPTION: This code shows how to extract route parameters (defined in the path) using the `@Param` decorator.  The `findUser` method retrieves the `uid` parameter from the URL (e.g., `/api/user/:uid`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/api/user/:uid')\nasync findUser(@Param() uid: string): Promise<User> {\n  // uid 从路由参数中获取\n}\n```\n\n----------------------------------------\n\nTITLE: All-in-one Call Example for ValidateHttp\nDESCRIPTION: This code demonstrates an all-in-one call to the `/api/filterPosts` endpoint with an invalid `searchString` (empty string).  It catches the validation error and logs the parsed error message and the HTTP status code (422).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport filterPosts from './api';\n\ntry {\n  await filterPosts({\n    query: { searchString: '' },\n  });\n} catch (error) {\n  console.log(\n    JSON.parse(error.data.message)\n  );\n  console.log(error.status); // 422\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom HTTP Framework Components in Typescript\nDESCRIPTION: This snippet shows how to export the components of a custom HTTP framework, including the `Application`, `Context`, `Framework` (aliased to `MidwayCustomHTTPFramework`), and `IMidwayCustomConfigurationOptions`. This enables other parts of the application to use the custom framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/component_development.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport {\n  Application,\n  Context,\n  MidwayCustomHTTPFramework as Framework,\n  IMidwayCustomConfigurationOptions,\n} from './custom';\n```\n\n----------------------------------------\n\nTITLE: UserService with IMidwayLogger Injection and Console Control - Typescript\nDESCRIPTION: This snippet demonstrates how to inject the more complex `IMidwayLogger` definition and use its additional methods, such as `disableConsole()` and `enableConsole()`, to control console output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Logger } from '@midwayjs/core';\nimport { IMidwayLogger } from '@midwayjs/logger';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  logger: IMidwayLogger; // Get context log\n\n  async getUser() {\n    This. Logger. disableConsole(); // Prohibit console output\n  \tthis.logger.info('hello user'); // This sentence is not visible in the console\n    This. Logger. enableConsole(); // Turn on console output\n    this.logger.info('hello user'); // This sentence can be seen in the console\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Data Source in TypeORM with TypeScript\nDESCRIPTION: This code snippet shows how to specify a default data source when using multiple data sources in TypeORM with MidwayJS. The `defaultDataSourceName` property in the `typeorm` configuration object is used to define the default data source to be used by the application. It assumes you have multiple datasources defined under `dataSource` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default1: {\n        // ...\n      },\n      default2: {\n        // ...\n      },\n    },\n    // 多个数据源时可以用这个指定默认的数据源\n    defaultDataSourceName: 'default1',\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Heartbeat Interval - TypeScript\nDESCRIPTION: This TypeScript code shows how to configure the server heartbeat interval. The `serverHeartbeatInterval` property sets the interval, in milliseconds, at which the server sends ping messages to clients. If a client doesn't respond within the same interval, the connection is terminated. This setting is defined in the `src/config/config.default.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  webSocket: {\n    serverHeartbeatInterval: 30000,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Component Logger\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the logger for the cron component. You can specify the file where the logs will be recorded by modifying the `fileLogName` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     //...\n     clients: {\n       //...\n       cronLogger: {\n         fileLogName: 'midway-cron.log',\n       },\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Single COS Client\nDESCRIPTION: This configuration example demonstrates how to configure a single COS client with `SecretId` and `SecretKey`. These credentials are used to authenticate with Tencent Cloud COS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cos.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const cos = {\n  client: {\n    SecretId: '***********',\n    SecretKey: '***********',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Define Sequelize Entity (Model)\nDESCRIPTION: Defines a Sequelize entity using the sequelize-typescript decorators. This defines a database model representing a table named Photo, with a single column named name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Column, Model } from 'sequelize-typescript';\nimport { BaseTable } from '@midwayjs/sequelize';\n\n@BaseTable\nexport class Photo extends Model {\n  @Column({\n    comment: '名字',\n  })\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Translating with Object Arguments\nDESCRIPTION: This demonstrates using the `translate` method with an object as the `args` parameter.  The `username` property in the `args` object will replace the `{username}` placeholder in the translation string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis.i18nService.translate('HELLO_MESSAGE {username}', {\n  args: {\n    username\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Detailed Kafka Producer Configuration\nDESCRIPTION: This TypeScript code provides a more detailed view of Kafka Producer configuration, including `connectionOptions` and `producerOptions`.  This includes settings such as `clientId` and `brokers`\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    producer: {\n      clients: {\n        pub1: {\n          connectionOptions: {\n            clientId: 'my-app',\n            brokers: ['localhost:9092'],\n          },\n          producerOptions: {\n            // ...\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Cron Job with onComplete method\nDESCRIPTION: This TypeScript snippet shows the optional `onComplete` method which gets executed after `onTick` method has completed. This is useful for recording some data or any operation after `onTick` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Job({\n   cronTime: FORMAT.CRONTAB.EVERY_PER_30_MINUTE,\n   start: true,\n})\nexport class DataSyncCheckerJob implements IJob {\n   async onTick() {\n     //...\n   }\n  \n   async onComplete() {\n     // Record some data, etc., not very useful\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ctx.setAttr() and ctx.getAttr() for request-scoped data\nDESCRIPTION: These examples demonstrate how to use `ctx.setAttr()` and `ctx.getAttr()` to store and retrieve temporary, request-scoped data. This data is available throughout the request lifecycle and is automatically cleared when the request is complete.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.setAttr('abc', {\n  a: 1,\n  b: 2,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = this.ctx.getAttr('abc');\nconsole.log(value);\n// { a: 1, b: 2 }\n```\n\n----------------------------------------\n\nTITLE: Aliyun HTTP Trigger String Body Result\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Alibaba Cloud HTTP Trigger with string payload. The request body is a string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // \"bbb\"   => string\n```\n\n----------------------------------------\n\nTITLE: Modifying the Development Port (mwtsc)\nDESCRIPTION: This script snippet shows how to modify the development port using `mwtsc` within the `package.json` file. The `cross-env` command sets the `NODE_ENV` environment variable to `local`. The `--watch` flag enables file watching for automatic restarts. `--run @midwayjs/mock/app.js` specifies the entry point for the mock application. `--port 6001` sets the development port to 6001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quickstart.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"scripts\": {\n  //...\n  \"dev\": \"cross-env NODE_ENV=local mwtsc --watch --run @midwayjs/mock/app.js --port 6001\",\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Sequelize Model with Timestamps\nDESCRIPTION: This TypeScript code shows how to add timestamps to a Sequelize model using the `@Table` decorator.  Timestamps will automatically add createdAt and updatedAt columns.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Table({\n  timestamps: true,\n  ...\n})\nexport class Person extends Model {}\n```\n\n----------------------------------------\n\nTITLE: TenantManager Usage in Middleware\nDESCRIPTION: Demonstrates how to use the TenantManager in a middleware to set the current tenant information for each request. It injects the TenantManager and uses it to set the tenant ID and name within the request lifecycle. The tenant information is accessed and set within the middleware's resolve function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-05-07-release-3.16.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TenantManager } from '@midwayjs/tenant';\nimport { Middleware, Inject, Singleton } from '@midwayjs/core';\n\n// 请求链路中设置，中间件或者 Controller\n@Middleware()\nclass TenantMiddleware {\n  @Inject()\n  tenantManager: tenant.TenantManager;\n\n  resolve() {\n    return async(ctx, next) => {\n      this.tenantManager.setCurrentTenant({\n        id: '123',\n        name: '我的租户'\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Provider and Service\nDESCRIPTION: This TypeScript snippet configures the Consul provider and service within the `config.default.ts` file. It defines settings like service registration, deregistration, Consul server address, port, and service details such as address, port, tags, and name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  consul: {\n    provider: {\n      // Register for this service\n      register: true\n      // Apply normal offline anti-registration\n      deregister: true\n      // consul server service address\n      host: '192.168.0.10',\n      // consul server service port\n      port: '8500',\n      // Policy for invoking the service (random is selected by default)\n      strategy: 'random',\n    },\n    service: {\n      // This is the address of the current midway application.\n      address: '127.0.0.1',\n      // The port of the current midway application\n      port: 7001,\n      // Use for lane isolation, etc.\n      tags: ['tag1', 'tag2'],\n      name: 'my-midway-project'\n      // others consul service definition\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Null Returns in MidwayJS Middleware\nDESCRIPTION: This middleware addresses the default Koa/Egg behavior of returning a 204 status code when middleware returns null. It explicitly sets the context status to 200 if the middleware result is null, ensuring a consistent response even for empty results. Requires @midwayjs/core and @midwayjs/koa dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class FormatMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      const result = await next();\n      if (result === null) {\n        ctx.status = 200;\n      }\n      return {\n        code: 0,\n        msg: 'OK',\n        data: result\n      }\n    };\n  }\n\n  match(ctx) {\n    return ctx.path.indexOf('/api') !== -1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Behavior Configuration (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure component behavior using the `@Configuration` decorator from `@midwayjs/core`. It imports the `Configuration` class and applies it to a `BookConfiguration` class, marking it as a configuration component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/components/book/src/bookConfiguration.ts\nimport { Configuration } from '@midwayjs/core';\n\n@Configuration()\nexport class BookConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Get Multiple ETCD Instances\nDESCRIPTION: This TypeScript code demonstrates how to retrieve configured ETCD instances using the `ETCDServiceFactory`. It injects `ETCDServiceFactory` and then uses the `get` method to obtain specific instances by their names (e.g., 'instance1', 'instance2').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/etcd.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { ETCDServiceFactory } from '@midwayjs/etcd';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  etcdServiceFactory: ETCDServiceFactory;\n\n  async invoke() {\n    const instance1 = this.etcdServiceFactory.get('instance1');\n    //...\n\n    const instance2 = this.etcdServiceFactory.get('instance2');\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using app.getApplicationContext() to get the global application context\nDESCRIPTION: This example demonstrates how to use the `getApplicationContext()` method to access the global dependency injection container. This allows retrieving and managing beans (components) within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getApplicationContext();\n```\n\n----------------------------------------\n\nTITLE: Adding Config Object Dynamically - TypeScript\nDESCRIPTION: This snippet demonstrates how to dynamically add or modify configuration values at runtime using the `app.addConfigObject()` method. The provided object is merged with the existing configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.addConfigObject({\n  a: 1,\n  b: 2,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Executing Midway in Development Mode with Debugging (v1)\nDESCRIPTION: This command executes the MidwayJS application in development mode with debugging enabled. It sets the DEBUG environment variable to include 'midway*' and enables TypeScript compilation using the `--ts` flag.  NODE_ENV is set to 'local'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/midway_slow_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// midway v1\ncross-env DEBUG=midway* NODE_ENV=local midway-bin dev --ts\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Model with decorator\nDESCRIPTION: Defines an entity model using the `@EntityModel` decorator from `@midwayjs/orm`. This associates the class with a database table.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// entity/photo.ts\nimport { EntityModel } from '@midwayjs/orm';\n\n@EntityModel('photo')\nexport class Photo {\n  id: number;\n  name: string;\n  description: string;\n  filename: string;\n  views: number;\n  isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Method Decorator without Implementation (TypeScript)\nDESCRIPTION: Defines a custom method decorator `LoggingTime` that doesn't require an implementation. The last parameter of `createCustomMethodDecorator` is set to `false`, indicating that no handler needs to be registered for this decorator. This is useful for storing metadata without interception.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/logging.decorator.ts\nimport { createCustomMethodDecorator } from '@midwayjs/core';\n\n// Unique id inside the decorator\nexport const LOGGING_KEY = 'decorator:logging_key';\n\nexport function LoggingTime(): MethodDecorator {\n  // The last parameter tells the framework, no need to specify the implementation\n  return createCustomMethodDecorator(LOGGING_KEY, {}, false);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch API Call with Specific Origin (JavaScript)\nDESCRIPTION: A `fetch` call targeting a specific origin, with credentials enabled. This snippet shows how to make a request to `http://127.0.0.1:7002` with `credentials: 'include'`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cross_domain.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('http://127.0.0.1:7002/', {\n  credentials: 'include'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a basic entity\nDESCRIPTION: Defines a basic entity class representing a database table. Each property corresponds to a column in the table.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// entity/photo.ts\nexport class Photo {\n  id: number;\n  name: string;\n  description: string;\n  filename: string;\n  views: number;\n  isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Singleton Scope and Context Injection (TypeScript)\nDESCRIPTION: This example highlights that injecting the request context (ctx) into a Singleton-scoped service is generally incorrect because the Singleton is not associated with a specific request. Attempting to inject ctx in this scenario will result in it being undefined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class UserService {\n\n  @Inject()\n  ctx; // undefined\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Add ets command to package.json scripts\nDESCRIPTION: This JSON snippet adds the `ets` command to the `scripts` section of `package.json`. The `ets` command is used to generate TypeScript definitions for EggJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"dev\": \"cross-env ets && cross-env NODE_ENV=local midway-bin dev --ts\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Applying Koa Middleware Directly\nDESCRIPTION: This code shows how to directly use Koa middleware within the middleware array.  This includes both inline middleware and middleware functions created with parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/controller.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst mw: Middleware = async (ctx, next) => {\n  ctx.home = '4444';\n  await next();\n};\n\nconst newMiddleware = (data): Middleware => {\n  return async (ctx, next) => {\n    ctx.api = data;\n    await next();\n  };\n};\n\n@provide()\n@controller('/', { middleware: ['homeMiddleware', mw] })\nexport class My {\n  @inject()\n  ctx;\n\n  @get('/api', { middleware: ['apiMiddleware', newMiddleware('5555')] })\n  async index() {\n    this.ctx.body = this.ctx.home + this.ctx.api;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Egg application with hook in Midway.js\nDESCRIPTION: This commit uses a hook mechanism to load the Egg application within Midway.js. This allows for a more flexible and extensible way to integrate Egg functionality into Midway.js applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nb47f27bf441431ddb1d0d35d5ee0ae80ae56fce8\n```\n\n----------------------------------------\n\nTITLE: Mixing Default Export with Named Export (Incorrect - Object)\nDESCRIPTION: Illustrates the incorrect way of mixing `export default` (object) and `export const` for configurations. The named export `anotherKey` will be ignored by the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/env_config.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  keys: '12345',\n}\n\nexport const anotherKey = '54321';\n\n```\n\n----------------------------------------\n\nTITLE: Install Egg TypeScript Helper - Bash\nDESCRIPTION: This command installs the `@midwayjs/egg-ts-helper` package as a development dependency. This package is used to generate TypeScript definitions for EggJS development within a MidwayJS project, improving type safety and developer experience. This is done using npm.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @midwayjs/egg-ts-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Listening for Queue Events\nDESCRIPTION: This TypeScript code demonstrates how to listen for queue events, such as completed and failed jobs. It uses the `createQueueEvents` method to create a `QueueEvents` instance, and then attaches event listeners to it.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst eventQueue = bullmqFramework.createQueue('event-queue');\nconst queueEvents = eventQueue.createQueueEvents();\n\n// 监听任务完成事件\nqueueEvents.on('completed', ({ jobId }) => {\n  console.log(`Job ${jobId} completed!`);\n});\n\n// 监听任务失败事件\nqueueEvents.on('failed', ({ jobId, failedReason }) => {\n  console.log(`Job ${jobId} failed: ${failedReason}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Cache Manager Dependency\nDESCRIPTION: Adds the `@midwayjs/cache-manager` package as a dependency in the `package.json` file. This ensures that the caching library is installed with your project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"dependencies\": {\n     \"@midwayjs/cache-manager\": \"^3.0.0\",\n     // ...\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Import Prometheus module in MidwayJS\nDESCRIPTION: Imports the @midwayjs/prometheus module and adds it to the imports array in the MidwayJS configuration.  This enables the Prometheus monitoring component within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as prometheus from '@midwayjs/prometheus'; // Import module\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    prometheus\n  ],\n  importConfigs: [join(__dirname, 'config')]\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Aliyun API Gateway Passthrough Result (x-www-form-urlencoded)\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Alibaba Cloud API Gateway with parameter passthrough and a `content-type` of `application/x-www-form-urlencoded`.  The request body is parsed into a JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\"b\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Open RabbitMQ Component\nDESCRIPTION: This TypeScript code snippet demonstrates how to open the `@midwayjs/rabbitmq` component as a separate main framework within a MidwayJS application. It imports the necessary modules and configures the `MainConfiguration` class to include the `rabbitmq` module in the `imports` array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as rabbitmq from '@midwayjs/rabbitmq';\n\n@Configuration({\n  imports: [\n    rabbitmq\n  ],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Injected Existing Object (urllib) in MidwayJS Service\nDESCRIPTION: This example shows how to use the injected `httpclient` (urllib) object in a MidwayJS service. The `@inject` decorator injects the object, which is then used to make HTTP requests. This provides a centralized and managed way to access the urllib library within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\nexport class BaseService {\n  @inject()\n  httpclient;\n\n  async getUser() {\n    return await this.httpclient.request('/api/getuser');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Templates with npm init\nDESCRIPTION: This command executes the `create-midway` tool and displays a list of available project templates. The output shows the template names and descriptions, allowing the user to choose a suitable starting point for their project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Configure TypeORM Adapter\nDESCRIPTION: This code configures the TypeORM adapter for Casbin, using SQLite as the storage. It defines a TypeORM data source and utilizes the `createAdapter` function from `@midwayjs/casbin-typeorm-adapter` to connect this data source to Casbin.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\nimport { CasbinRule, createAdapter } from '@midwayjs/casbin-typeorm-adapter';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    typeorm: {\n      dataSource: {\n        // Defines a connection for casbin\n        'node-casbin-official': {\n          type: 'sqlite',\n          synchronize: true,\n          database: join(appInfo.appDir, 'casbin.sqlite'),\n          // Note that Entity is explicitly introduced here.\n          entities: [CasbinRule]\n        }\n      }\n    },\n    casbin: {\n      policyAdapter: createAdapter({\n        // The connection name above is configured\n        dataSourceName: 'node-casbin-official'\n      }),\n      // ...\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Configuration Object in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to pass a global configuration object to a MidwayJS application using the `globalConfig` property.  The customKey will be available in the application configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap\n  .configure({\n  \tglobalConfig: {\n      customKey: 'abc'\n    }\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Using the Class Decorator in Configuration\nDESCRIPTION: This code snippet demonstrates how to use the `@Model` decorator within the `configuration.ts` file of a MidwayJS application. It retrieves all classes decorated with `@Model` using `listModule`, and then performs custom operations on each module. It imports modules from `@midwayjs/core`, `path`, and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { listModule, Configuration, App, Inject } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as koa from '@midwayjs/koa';\nimport { MODEL_KEY } from './decorator/model.decorator';\n\n@Configuration({\n  imports: [koa]\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // ...\n\n    // All classes decorated with @Model() decorators can be obtained\n    const modules = listModule(MODEL_KEY);\n    for (let mod of modules) {\n      // Realize custom capability\n      // For example, take metadata getClassMetadata(mod)\n      // For example, initialize app.applicationContext.getAsync(mod) in advance;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Listener Options Interface\nDESCRIPTION: This TypeScript snippet defines the `RabbitMQListenerOptions` interface, which specifies the available options for configuring a RabbitMQ listener using the `@RabbitMQListener` decorator. This includes options for the queue, exchange, routing, and consumption.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RabbitMQListenerOptions {\n  exchange?: string;\n  /**\n   * queue options\n   */\n  exclusive?: boolean;\n  durable?: boolean;\n  autoDelete?: boolean;\n  messageTtl?: number;\n  expires?: number;\n  deadLetterExchange?: string;\n  deadLetterRoutingKey?: string;\n  maxLength?: number;\n  maxPriority?: number;\n  pattern?: string;\n  /**\n   * prefetch\n   */\n  prefetch?: number;\n  /**\n   * router\n   */\n  routingKey?: string;\n  /**\n   * exchange options\n   */\n  exchangeOptions?: {\n    type?: 'direct' | 'topic' | 'headers' | 'fanout' | 'match' | string;\n    durable?: boolean;\n    internal?: boolean;\n    autoDelete?: boolean;\n    alternateExchange?: string;\n    arguments?: any;\n  };\n  /**\n   * consumeOptions\n   */\n  consumeOptions?: {\n    consumerTag?: string;\n    noLocal?: boolean;\n    noAck?: boolean;\n    exclusive?: boolean;\n    priority?: number;\n    arguments?: any;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Queue Task\nDESCRIPTION: Defines a queue task using the `@Queue` decorator.  The class must have an `execute` method, which will be executed when the task is processed.  The task is designed for distributed execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Queue } from '@midwayjs/decorator';\n\n@Queue()\n@Provide()\nexport class HelloTask {\n  @Inject()\n  service;\n\n  async execute(params) {\n    console.log(params);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Configuration Type Definitions\nDESCRIPTION: This TypeScript code defines various types and interfaces for configuring GraphQL in a MidwayJS application. It includes options for Apollo Server, TypeGraphQL schema building, built-in plugins, and middleware creation for Koa and Express.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/graphql.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type UsableApolloOption = Pick<\n  ApolloServerConfig,\n  | 'persistedQueries'\n  | 'plugins'\n  | 'context'\n  | 'formatError'\n  | 'formatResponse'\n  | 'rootValue'\n  | 'dataSources'\n  | 'introspection'\n  | 'mocks'\n  | 'mockEntireSchema'\n  | 'schema'\n>;\n\nexport type UsableBuildSchemaOption = Pick<\n  BuildSchemaOptions,\n  'authChecker' | 'authMode' | 'dateScalarMode' | 'globalMiddlewares' | 'nullableByDefault' | 'skipCheck' | 'resolvers'\n>;\n\nexport type BuiltInPluginConfiguration = {\n  /**\n   * Enable Apollo-Resolve-Time plugin to report GraphQL resolving time as GraphQL Extension.\n   */\n  resolveTime?: {\n    enable?: boolean;\n  };\n  /**\n   * Enable Apollo-Query-Complexity plugin to report GraphQL query complexity as GraphQL Extension,\n   * and reject request when query complexity is greater than configurated.\n   */\n  queryComplexity?: {\n    enable?: boolean;\n    maxComlexity?: number;\n    throwOnMaximum?: boolean;\n  };\n  /**\n   * Enable plugin to send back `MidwayJS Container` information、Application Context as GraphQL Extension.\n   */\n  contextExtension?: {\n    enable?: boolean;\n  };\n  /**\n   * Enable plugin to send back generated `GraphQL Schema` as GraphQL Extension.\n   */\n  printSchema?: {\n    enable?: boolean;\n    sort?: boolean;\n  };\n};\n\nexport type CreateGraphQLMiddlewareOption = {\n  /**\n   * GraphQL API path\n   */\n  path?: string;\n  /**\n   * Enable GraphQL Playground even in production.\n   * Requires `apollo.introspection` to be true for working correctly.\n   */\n  prodPlaygound?: boolean;\n  /**\n   * Add `Application Context` to GraphQL Context which you can get in GraphQL Resolvers.\n   */\n  appendApplicationContext?: boolean;\n  /**\n   * Built-In plugin options.\n   */\n  builtInPlugins?: BuiltInPluginConfiguration;\n  /**\n   * Supported ApolloServer options.\n   */\n  apollo?: UsableApolloOption;\n  /**\n   * Supported TyepeGraphQL buildSchemaSync options.\n   */\n  schema?: UsableBuildSchemaOption & Pick<BuildSchemaOptions, 'emitSchemaFile' | 'container'>;\n  /**\n   * Disable Apollo-Server health check.\n   */\n  disableHealthCheck?: boolean;\n};\n\nexport interface CreateKoaGraphQLMiddlewareOption extends CreateGraphQLMiddlewareOption {\n  /**\n   * CORS options, equal to @koa/cors options.\n   */\n  cors?: CORSOptions | boolean;\n  /**\n   * Customize health check handler.\n   */\n  onHealthCheck?: KoaServerRegistration['onHealthCheck'];\n  /**\n   * BodyParser options, equal to koa-bodyparser options.\n   */\n  bodyParserConfig?: BodyParserOptions | boolean;\n}\n\nexport interface CreateExpressGraphQLMiddlewareOption extends CreateGraphQLMiddlewareOption {\n  /**\n   * CORS options, equal to cors options.\n   */\n  cors?: corsMiddleware.CorsOptions | corsMiddleware.CorsOptionsDelegate | boolean;\n  /**\n   * Customize health check handler.\n   */\n  onHealthCheck?: ExpressServerRegistration['onHealthCheck'];\n  /**\n   * BodyParser options, equal to bodyparser options.\n   */\n  bodyParserConfig?: OptionsJson | boolean;\n}\n\nexport type CreateApolloHandlerOption = {\n  /**\n   * Required. FaaS Context.\n   */\n  context: Context;\n  /**\n   * GraphQL API path\n   */\n  path?: string;\n  /**\n   * FaaS Application.\n   */\n  app?: IMidwayFaaSApplication;\n  /**\n   * Enable GraphQL Playground even in production.\n   * Requires `apollo.introspection` to be true for working correctly.\n   */\n  prodPlaygound?: boolean;\n  /**\n   * Add `FaaS Context` to GraphQL Context which you can get in GraphQL Resolvers.\n   */\n  appendFaaSContext?: boolean;\n  /**\n   * Built-In plugin options.\n   */\n  builtInPlugins?: BuiltInPluginConfiguration;\n  /**\n   * Supported ApolloServer options.\n   */\n  apollo?: UsableApolloOption;\n  /**\n   * Supported TyepeGraphQL buildSchemaSync options.\n   */\n  schema?: UsableBuildSchemaOption;\n  /**\n   * Disable Apollo-Server health check.\n   */\n  disableHealthCheck?: boolean;\n  /**\n   * Disable Built-In health check resolver.\n   */\n  disableHealthResolver?: boolean;\n  /**\n   * Customize health check handler.\n   */\n  onHealthCheck?: (req: MidwayReq) => Promise<unknown>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Leoric Module in Midway\nDESCRIPTION: This code snippet demonstrates how to import the Leoric module within a Midway.js configuration file (`src/configuration.ts`). It includes the `@Configuration` decorator from `@midwayjs/core` to register the Leoric module as a dependency. The `ContainerLifeCycle` class implements the `ILifeCycle` interface, representing the application's lifecycle.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/leoric/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle } from '@midwayjs/core';\nimport * as leoric from '@midwayjs/leoric';\n\n@Configuration({\n  imports: [\n    leoric,\n  ],\n\n})\nexport class ContainerLifeCycle implements ILifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Client Namespace Configuration\nDESCRIPTION: This snippet demonstrates how to configure the client to connect to a specific namespace on the Socket.IO server.  Examples are provided for both the standard `socket.io-client` and Midway's testing client.  The namespace must match the server's configured namespace.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// socket.io client\nconst io = require(\"socket.io-client\")\nio('*****:3000/test', {}); // Here is the namespace of the client\n\n\n// midway's socket.io test client\nconst client = await createSocketIOClient({\n  namespace: '/test',\n});\n```\n\n----------------------------------------\n\nTITLE: Package.json Main Path Configuration\nDESCRIPTION: Specifies the entry point for the component when it is imported into another project.  This ensures that the correct file is loaded when the component is required.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n  \"main\": \"dist/index\"\n```\n\n----------------------------------------\n\nTITLE: Local Testing of Timer Trigger in TypeScript\nDESCRIPTION: This code snippet shows how to locally test a Timer trigger using `@midwayjs/mock` and `@midwayjs/serverless-scf-trigger`. It creates a function app, gets an instance of the service, and then calls the `handleTimerEvent` function with a mock Timer event created by `createTimerEvent`. Requires `@midwayjs/mock`, `@midwayjs/serverless-app`, and `@midwayjs/serverless-scf-trigger` dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_timer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { HelloTencentService } from '../src/function/hello_tencent';\nimport { createTimerEvent } from '@midwayjs/serverless-scf-trigger';\nimport { join } from 'path';\n\ndescribe('test/hello_tencent.test.ts', () => {\n  let app: Application;\n  let instance: HelloTencentService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>();\n    instance = await app.getServerlessInstance<HelloTencentService>(HelloTencentService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from timer trigger', async () => {\n    expect(await instance.handleTimerEvent(createTimerEvent())).toEqual('hello world');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Consul Key-Value Configuration\nDESCRIPTION: This TypeScript snippet demonstrates how to use Consul as a configuration center.  It injects the Consul client and uses the `kv.set` method to set a key-value pair in Consul.  The `kv.get` method is commented out, but demonstrates how to retrieve values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport * as Consul from 'consul';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject('consul:consul')\n  consul: Consul.Consul;\n\n  @Get('/')\n  async home() {\n    await this.consul.kv.set(`name`, `juhai`)\n    // let res = await this.consul.kv.get('name');\n    // console.log(res);\n    return 'Hello Midwayjs!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TestService Class Definition\nDESCRIPTION: Defines the TestService class with methods to retrieve account, video, and tab data.  The methods return promises that resolve to the corresponding DTOs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\n@Provide()\nclass TestService {\n  // 返回当前登录用户信息\n  async getAccount(args: any): Promise<AccountDto> {\n    return {\n      id: 'test_account_id',\n      nick: 'test hello',\n      isFollow: true,\n    };\n  }\n  // 返回视屏列表\n  async getVideos(args: any): Promise<VideoDto[]> {\n    return [{\n      videoId: '123',\n      videoUrl: 'https://www.taobao.com/xxx.mp4',\n      videoTitle: 'test 1 video'\n    }, {\n      videoId: '234',\n      videoUrl: 'https://www.taobao.com/xxx234.mp4',\n      videoTitle: 'test 2 video'\n    }, {\n      videoId: '456',\n      videoUrl: 'https://www.taobao.com/xxx456.mp4',\n      videoTitle: 'test 3 video'\n    }];\n  }\n  // 返回tab页面\n  async getTab(args: any): Promise<TabDto> {\n    return {\n      title: 'test tab',\n      tabId: 'firstTab',\n      index: 0\n    };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting a Web Framework with Bootstrap in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize and start a web framework (using @midwayjs/koa) within a MidwayJS application using the Bootstrap class. It configures the framework with a specific port and then starts the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/multi_framework_start.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst WebFramework = require('@midwayjs/koa').Framework;\nconst web = new WebFramework().configure({\n  port: 7001,\n});\n\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap.load(web).run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Duplicate Field Names\nDESCRIPTION: This snippet configures the `allowFieldsDuplication` option to allow fields with the same name in the upload. When enabled, fields with the same name will be merged into an array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  upload: {\n    allowFieldsDuplication: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Context definition in a Project\nDESCRIPTION: This TypeScript code demonstrates how to extend the `Context` interface from `@midwayjs/core` in a project. By declaring a module augmentation, you can add new properties to the `Context` type, making them accessible throughout your application.  This code should be placed in `src/interface.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/context_definition.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\ndeclare module '@midwayjs/core' {\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration with Target Example\nDESCRIPTION: This TypeScript code demonstrates a proxy configuration using the `target` option.  It matches requests to `/httpbin/(.*)$ /` and proxies them by replacing the captured group to a specific target.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/http-proxy.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  httpProxy: {\n    match: /\\/httpbin\\/(.*)$ /,\n    target: 'https://httpbin.org/$1',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Client-side gRPC Metadata Retrieval with UnaryCall in Midwayjs\nDESCRIPTION: This code shows how to retrieve metadata after an Unary call.  The `sendMessageWithCallback` method is used to make the call, and the metadata is available on the 'metadata' event of the `call` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst call = service.sayHello().sendMessageWithCallback({\n  name: 'zhangting'\n}, (err) => {\n  if (err) {\n    reject(err);\n  }\n});\ncall.on('metadata', (meta) => {\n  // output meta\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining data model with ApiProperty in TypeScript\nDESCRIPTION: This snippet shows how to define a data model with the `@ApiProperty` decorator in MidwayJS with Swagger. The decorator is used to describe each field in the model, including examples and descriptions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@midwayjs/swagger';\n\nexport class Cat {\n  @ApiProperty({ example: 'Kitty', description: 'The name of the Cat'})\n  name: string;\n\n  @ApiProperty({ example: 1, description: 'The age of the Cat' })\n  age: number;\n\n  @ApiProperty({\n    example: 'Maine Coon',\n    description: 'The breed of the Cat',\n  })\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware in Midway Hooks\nDESCRIPTION: This example demonstrates a basic middleware function in Midway Hooks that logs request information and measures execution time. It utilizes `useContext` to access the Koa context and `next` to proceed with the request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/middleware.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/koa';\nimport { useContext } from '@midwayjs/hooks';\n\nconst logger = async (next: any) => {\n  const ctx = useContext<Context>();\n\n  console.log (\n    '<-- [${ctx.method}] ${ctx.url}'\n  );\n\n  const start = Date.now();\n  await next();\n  const cost = Date.now() - start;\n\n  console.log (\n    '--> [${ctx.method}] ${ctx.url} ${cost}ms'\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming Bi-Directional Stream with Event Listener (TypeScript)\nDESCRIPTION: This code shows how to consume a bidirectional stream with event listeners. The client attaches a 'data' event listener to process messages and can send messages using `duplexCall.write` at any time. The example closes the stream after receiving two data messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst clientStream = service.addMore().getCall();\n\nlet total = 0;\nlet idx = 0;\n\nduplexCall.on('data', (data: math.Num) => {\n  total += data.num;\n  idx++;\n  if (idx === 2) {\n    duplexCall.end();\n    // total => 29\n  }\n});\n\nduplexCall.write({\n  num: 3,\n});\n\nduplexCall.write({\n  num: 6,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Basic Types with Swagger\nDESCRIPTION: This TypeScript code snippet shows how Swagger automatically extracts basic types from `@Query` parameters. It demonstrates the usage of number, string, and boolean types and how they are reflected in the Swagger UI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/')\nasync home (\n  @Query('uid') uid: number\n  @Query('tid') tid: string\n  @Query('isBoolean') isBoolean: boolean\n) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship with PhotoMetadata\nDESCRIPTION: This code defines a PhotoMetadata entity with a one-to-one relationship to the Photo entity. The @OneToOne decorator specifies the relationship, and @JoinColumn indicates that this side of the relationship owns it, creating a foreign key column in the photo_metadata table.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { EntityModel } from '@midwayjs/orm';\nimport { Photo } from './photo';\n\n@EntityModel()\nexport class PhotoMetadata {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('int')\n  height: number;\n\n  @Column('int')\n  width: number;\n\n  @Column()\n  orientation: string;\n\n  @Column()\n  compressed: boolean;\n\n  @Column()\n  comment: string;\n\n  @OneToOne((type) => Photo)\n  @JoinColumn()\n  photo: Photo;\n}\n```\n\n----------------------------------------\n\nTITLE: Add Redis Component - Javascript\nDESCRIPTION: This commit adds the Redis component to MidwayJS. This enables developers to easily integrate and use Redis for caching, session management, and other data storage needs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nadd redis component ([#1270](https://github.com/midwayjs/midway/issues/1270)) ([09c993a](https://github.com/midwayjs/midway/commit/09c993ac308d26fa9c742a659471c3f4cf5c5782))\n```\n\n----------------------------------------\n\nTITLE: Customizing Function App Context for Local Testing\nDESCRIPTION: This snippet shows how to customize the FC Context data structure using `Object.assign` with the `mockContext` method. This allows for simulating different function configurations during local testing.  It uses `createFunctionApp` to create the app and `close` to close the app after testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context, Framework } from '@midwayjs/faas';\nimport { mockContext } from '@midwayjs/fc-starter';\nimport { createFunctionApp } from '@midwayjs/mock';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n   it('should get result from event trigger', async () => {\n    \n     // create app\n     const app: Application = await createFunctionApp<Framework>(join(__dirname, '../'), {\n       initContext: Object.assign(mockContext(), {\n         function: {\n           name: '***',\n           handler: '***'\n         }\n       }),\n     });\n    \n     // ...\n    \n     await close(app);\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Adjust Default Log Level\nDESCRIPTION: This snippet shows how to adjust the default log levels for the logger in the `config.local.ts` file. It sets the overall log level to `INFO` and the console log level to `WARN`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// config.local.ts\nexport const logger = {\n  level: 'INFO',\n  consoleLevel: 'WARN',\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie with Options (TypeScript)\nDESCRIPTION: This snippet illustrates setting a cookie with various options like domain, path, maxAge, expires, httpOnly, and overwrite in a Midway.js Koa application. Requires @midwayjs/core and @midwayjs/koa dependencies.  It sets a cookie named 'cid' with specified properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.cookies.set('cid', 'hello world', {\n      domain: 'localhost', // 写cookie所在的域名\n      path: '/index', // 写cookie所在的路径\n      maxAge: 10 * 60 * 1000, // cookie有效时长\n      expires: new Date('2017-02-15'), // cookie失效时间\n      httpOnly: false, // 是否只用于http请求中获取\n      overwrite: false, // 是否允许重写\n    });\n    ctx.body = 'cookie is ok';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using InfoService API in Midway.js\nDESCRIPTION: This TypeScript code demonstrates how to use the InfoService API within a Midway.js application.  It injects the InfoService into a custom service and calls various methods to retrieve and process application information, system details, resource occupation, framework details, configuration, service dependencies, time information, environment variables, dependency information, and network information. These information are available for custom logic and reporting within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/info.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { InfoService } from '@midwayjs/info';\n\n@Provide()\nexport class userService {\n\n  @Inject()\n  inforService: InfoService\n\n  async getInfo() {\n    // Application information, application name, etc.\n    this.inforService.projectInfo();\n    // System information\n    this.inforService.systemInfo();\n    // Heap memory, cpu, etc.\n    this.inforService.resourceOccupationInfo();\n    // midway framework information\n    this.inforService.softwareInfo();\n    // The current environment configuration\n    this.inforService.midwayConfig();\n    // Depend on the service injected into the container\n    this.inforService.midwayService();\n    // System time, time zone, startup time\n    this.inforService.timeInfo();\n    // Environment variable\n    this.inforService.envInfo();\n    // Dependency information\n    this.inforService.dependenciesInfo();\n    // Network information\n    this.inforService.networkInfo();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom @Model Class Decorator in TypeScript\nDESCRIPTION: This code defines a custom class decorator named `@Model` using TypeScript and the MidwayJS framework. It uses `saveModule` to associate the decorated class with the `MODEL_KEY` and `saveClassMetadata` to save metadata to the class. It also sets the scope of the class to `ScopeEnum.Request` using the `@Scope` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/decorator.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { scope, ScopeEnum, saveClassMetadata, saveModule } from 'midway';\n\nconst MODEL_KEY = 'decorator:model';\n\nexport function Model(): ClassDecorator {\n  return (target: any) => {\n    // 将装饰的类，绑定到该装饰器，用于后续能获取到 class\n    saveModule(MODEL_KEY, target);\n    // 保存一些元数据信息，任意你希望存的东西\n    saveClassMetadata(\n      MODEL_KEY,\n      {\n        test: 'abc',\n      },\n      target\n    );\n    // 指定 IoC 容器创建实例的作用域，这里注册为请求作用域，这样能取到 ctx\n    Scope(ScopeEnum.Request)(target);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Github Passport Middleware in Typescript\nDESCRIPTION: This code creates a middleware for handling Github passport authentication using `@midwayjs/passport`. It extends `PassportMiddleware` and specifies the Github strategy.  The `getAuthenticateOptions` method allows configuring authentication options.  This middleware requires the `GithubStrategy` to be defined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/github.middleware.ts\n\nimport { PassportMiddleware } from '@midwayjs/passport';\nimport { Middleware } from '@midwayjs/core';\nimport { GithubStrategy } from './github-strategy.ts';\n\n@Middleware()\nexport class GithubPassportMiddleware extends PassportMiddleware(GithubStrategy) {\n  getAuthenticateOptions(): AuthenticateOptions | Promise<AuthenticateOptions> {\n    return {};\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Priorities - Configuration - Typescript\nDESCRIPTION: This snippet illustrates how to configure instance priorities for different clients in the `config.default.ts` file. It imports `DEFAULT_PRIORITY` from `@midwayjs/core` and defines `clientPriority` within the `httpClient` configuration. `default` is set to `DEFAULT_PRIORITY.L1` (High), and `default2` is set to `DEFAULT_PRIORITY.L2` (Medium).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service_factory.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//config.default.ts\nimport { DEFAULT_PRIORITY } from '@midwayjs/core';\n\nexport default {\n   httpClient: {\n     clients: {\n       default: {\n         baseUrl: ''\n       },\n       default2: {\n         baseUrl: ''\n       }\n     },\n     clientPriority: {\n       default: DEFAULT_PRIORITY.L1,\n       default2: DEFAULT_PRIORITY.L2,\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Midway.js Application with PM2\nDESCRIPTION: This command starts a Midway.js application in production mode using PM2, specifying the application name and the number of instances (processes). It sets the `NODE_ENV` environment variable to `production` and uses cluster mode for load balancing across multiple instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/pm2.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ NODE_ENV=production pm2 start ./bootstrap.js --name midway_app -i 4\n```\n\n----------------------------------------\n\nTITLE: Create Upload API Endpoint (TypeScript)\nDESCRIPTION: This code defines an API endpoint for handling file uploads using `@midwayjs/hooks-upload`. It uses the `Upload` decorator to specify the endpoint path and the `useFiles` hook to retrieve the uploaded files. The function returns the uploaded files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/upload.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Api } from '@midwayjs/hooks';\nimport {\n  Upload,\n  useFiles\n} from '@midwayjs/hooks-upload';\n\nexport default Api(\n  Upload('/api/upload'),\n  async () => {\n    const files = useFiles();\n    return files;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Mongoose Component Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add `@midwayjs/mongoose` as a dependency in the `package.json` file. This allows the MidwayJS application to directly use Mongoose for database interactions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    // 组件\n    \"@midwayjs/mongoose\": \"^3.0.0\",\n    // 上一节中的 mongoose 依赖\n  },\n  \"devDependencies\": {\n    // 上一节中的 mongoose 依赖\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Socket.IO Test Setup with @midwayjs/mock (TypeScript)\nDESCRIPTION: Creates and closes a MidwayJS application for testing Socket.IO functionality. Uses `@midwayjs/mock` to create a test environment. The example demonstrates the basic structure for testing a MidwayJS application with Socket.IO. Requires importing `createApp` and `close` from `@midwayjs/mock` and defining the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock'\n// The Framework definition used here is subject to the main framework.\nimport { Framework } from '@midwayjs/koa';\n\ndescribe('/test/index.test.ts', () => {\n  it('should create app and test socket.io', async () => {\n    const app = await createApp<Framework>();\n\n    //...\n\n    await close(app);\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Plugins in f.yml\nDESCRIPTION: This YAML snippet shows how to configure CLI plugins in the `f.yml` file. It defines two plugins: one fetched from npm (`test-plugin-model`) and another from a local path (`./test/plugin`).  The `plugins` field tells the CLI to load these plugins.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/cli.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n\t- npm::test-plugin-model\n  - local::./test/plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Middleware in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to configure route-specific middleware in a Midway application using the `middleware` property within the route decorator.  Middleware can be applied at both controller and route levels.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Controller, Get, Provide } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/', { middleware: ['reportMiddleware'] }) // controller 级别的中间件\nexport class HomeController {\n  @Get('/', { middleware: ['reportMiddleware'] }) // 路由级别的中间件\n  async home() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Get Connection Count\nDESCRIPTION: This snippet demonstrates how to retrieve the number of Socket.IO connections. It provides examples for getting the total number of connections and the number of connections within a specific namespace.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nConst count = app.engine.clientsCount; //Get all connections\nConst count = app.of('/').sockets.size; // Get the number of connections in a single namespace\n```\n\n----------------------------------------\n\nTITLE: Resolver Using Custom GraphQL Context (TypeScript)\nDESCRIPTION: This code snippet showcases how to access and utilize the custom GraphQL context within a TypeGraphQL resolver. It demonstrates injecting the request context (including headers) into the resolver, providing access to request-specific information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/graphql.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IMidwayContainer } from '@midwayjs/core';\nimport { Provide, Inject, App } from '@midwayjs/decorator';\nimport { IMidwayKoaContext } from '@midwayjs/koa';\nimport { Resolver, Query, Ctx } from 'type-graphql';\n\nimport { SampleType } from '../graphql/sample.type';\n\ninterface IContext {\n  container: IMidwayContainer;\n  reqCtx: IMidwayKoaContext;\n}\n\n@Provide()\n@Resolver((type) => SampleType)\nexport class SampleResolver {\n  @Query((type) => SampleType)\n  QueryApplicationContext(@Ctx() ctx: IContext): SampleType {\n    console.log(ctx.reqCtx.header['authorization']);\n    return {\n      SampleField: 'SampleField',\n      Child: {\n        ChildField: 'ChildField',\n      },\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aspectable Lifecycle Methods Interface\nDESCRIPTION: This code defines the `IMethodAspect` interface, which outlines the lifecycle methods available for interceptors in MidwayJS. These methods allow executing logic before, after, or around the intercepted method's execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IMethodAspect {\n  after?(joinPoint: JoinPoint, result: any, error: Error);\n  afterReturn?(joinPoint: JoinPoint, result: any): any;\n  afterThrow?(joinPoint: JoinPoint, error: Error): void;\n  before?(joinPoint: JoinPoint): void;\n  around?(joinPoint: JoinPoint): any;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverless Application with Midway.js (npm)\nDESCRIPTION: These commands initialize a Midway.js serverless application using a specific template. The first command is for npm v6, and the second is for npm v7. The template used is `@midwayjs-examples/serverless-boilerplate-hooks-react`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_create.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm v6\n$ npm init midway --template=@midwayjs-examples/serverless-boilerplate-hooks-react\n# npm v7\n$ npm init midway -- --template=@midwayjs-examples/serverless-boilerplate-hooks-react\n```\n\n----------------------------------------\n\nTITLE: Object-oriented Route Development with Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to define a route in Midway.js using object-oriented programming with classes and dependency injection. It imports necessary modules from `@midwayjs/core` and `@midwayjs/koa`, defines a controller class `HomeController`, injects the `Context` object, and creates a `GET` route that returns a JSON response containing a message and the client's IP address.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/intro.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/controller/home.ts\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context\n\n  @Get('/')\n  async home() {\n    return {\n      message: 'Hello Midwayjs!',\n      query: this.ctx.ip\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Client Configuration\nDESCRIPTION: This TypeScript snippet shows the client side socket.io configuration, setting the port and path of the socket.io client instance. The `socket.io-client` package is required.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// client\nconst socket = io('************:7001', {\n  //...\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// client\nconst socket = io('************:7001', {\n  path: '/testPath', // 这里是客户端的 path\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger UI Dependency with npm\nDESCRIPTION: This command installs the `swagger-ui-dist` package using npm. This is needed to output Swagger API pages on the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install swagger-ui-dist --save\n```\n\n----------------------------------------\n\nTITLE: Controller with default Provide behavior (TypeScript)\nDESCRIPTION: This example illustrates the default behavior of the Controller decorator, which implicitly includes the functionality of the Provide decorator. This means the controller is automatically managed by the dependency injection container. Explicitly using @Provide is optional for controllers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Controller('/api/user')\nexport class APIController {\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeORM and Casbin Components\nDESCRIPTION: This TypeScript code snippet shows how to enable the TypeORM and Casbin components. Both are imported and added to the import array within the configuration decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as typeorm from '@midwayjs/typeorm';\nimport * as casbin from '@midwayjs/casbin';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    typeorm,\n    casbin,\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OSS Upload URL in Backend (Node.js)\nDESCRIPTION: Generates a signed URL for uploading files to Alibaba Cloud OSS from a Node.js backend using the ali-oss library. The function takes a filename as input, constructs an OSS client with access credentials and bucket information, and then uses the client to generate a signed URL with specified upload parameters (method and content type).  Make sure to replace placeholders for region, accessKeyId, accessKeySecret and bucket with your actual values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/oss_upload.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/apis/lambda/index.ts\n/**\n * \n * @param params Object {filename: 编码后文件名称}\n */\nexport async function getOSSUploadUrl(params: { filename: string }) {\n  const { filename } = params;\n  const dir = 'user-dir-prefix/'; // OSS 文件根目录\n\n  const client = new OSS({\n    region: '<oss region>', // 这里需要修改成你自己的 region\n    accessKeyId: '<Your accessKeyId>', // 这里需要修改成你自己的 accessKeyId\n    accessKeySecret: '<Your accessKeySecret>', // 这里需要修改成你自己的 accessKeySecret\n    bucket: '<Your bucket name>', // 这里需要修改成你自己的 bucket\n    secure: true,\n  });\n\n  const url = client.signatureUrl(dir + decodeURIComponent(filename), {\n    method: 'PUT',\n    'Content-Type': 'application/octet-stream',\n  });\n\n  return url;\n}\n```\n\n----------------------------------------\n\nTITLE: Install egg-ts-helper\nDESCRIPTION: This command installs the `@midwayjs/egg-ts-helper` package as a development dependency and then executes the `ets` command to generate type definition files. It helps to provide type hints for the egg application, which improves the development experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/egg-ts-helper.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/egg-ts-helper --save-dev\n$ ets\n```\n\n----------------------------------------\n\nTITLE: Configure Consul Provider and Service\nDESCRIPTION: Configures the Consul provider and service settings in the `config.default.ts` file. This includes settings for service registration, deregistration, Consul server address and port, load balancing strategy, and service-specific details like address, port, tags, and name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  consul: {\n    provider: {\n      // 注册本服务\n      register: true,\n      // 应用正常下线反注册\n      deregister: true,\n      // consul server 服务地址\n      host: '192.168.0.10',\n      // consul server 服务端口\n      port: '8500',\n      // 调用服务的策略(默认选取 random 具有随机性)\n      strategy: 'random',\n    },\n    service: {\n      // 此处是当前这个 midway 应用的地址\n      address: '127.0.0.1',\n      // 当前 midway 应用的端口\n      port: 7001,\n      // 做泳道隔离等使用\n      tags: ['tag1', 'tag2'],\n      name: 'my-midway-project'\n      // others consul service definition\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resources for Casbin\nDESCRIPTION: This code defines an enumeration of resources that are used in the Casbin policy.  This allows for easy reference and management of resources within the access control system.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Resource {\n  USERS_LIST = 'users_list',\n  USER_ROLES = 'user_roles',\n  USER_PERMISSIONS = 'user_permissions',\n  ROLES_LIST = 'roles_list',\n  ROLE_PERMISSIONS = 'role_permission',\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Exchange Consumer\nDESCRIPTION: This TypeScript snippet shows the implementation of a RabbitMQ consumer that listens to a direct exchange in a MidwayJS application. It configures the exchange with a routing key to route messages to the appropriate queue. Messages are routed based on matching routing keys.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Consumer, MSListenerType, RabbitMQListener, Inject, App } from '@midwayjs/core';\nimport { Context, Application } from '../../../../../src';\nimport { ConsumeMessage } from 'amqplib';\n\n@Consumer(MSListenerType.RABBITMQ)\nexport class UserConsumer {\n\n  @App()\n  app: Application;\n\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  logger;\n\n  @RabbitMQListener('', {\n    exchange: 'direct_logs',\n    exchangeOptions: {\n      type: 'direct',\n      durable: false,\n    },\n    routingKey: 'direct_key',\n    exclusive: true,\n    consumeOptions: {\n      noAck: true,\n    }\n  })\n  async gotData(msg: ConsumeMessage) {\n    // TODO\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deployment Script (deploy.sh)\nDESCRIPTION: This Bash script automates the deployment process for a Midway Serverless application. It builds the application, generates the entry file, copies necessary files to the `.serverless` directory, installs production dependencies, and sets up the environment for deployment using Serverless Devs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nset -e\n\n# Build product directory\nexport BUILD_DIST=$PWD/.serverless\n#Build start time in milliseconds\nexport BUILD_START_TIME=$(date +%s%3N)\n\necho \"Building Midway Serverless Application\"\n\n#Print the current directory cwd\necho \"Current Working Directory: $PWD\"\n#Print result directory BUILD_DIST\necho \"Build Directory: $BUILD_DIST\"\n\n#Install current project dependencies\nnpm i\n\n# Execute build\n./node_modules/.bin/tsc || return 1\n# Generate entry file\n./node_modules/.bin/serverless-yaml-generator || return 1\n\n# If the .serverless folder exists, delete it and recreate it\nif [ -d \"$BUILD_DIST\" ]; then\n   rm -rf $BUILD_DIST\nfi\n\nmkdir $BUILD_DIST\n\n# Copy dist, *.json, *.yml to the .serverless directory\ncp -r dist $BUILD_DIST\ncp *.yaml $BUILD_DIST 2>/dev/null || :\ncp *.json $BUILD_DIST 2>/dev/null || :\n# Move the entry file to the .serverless directory\nmv *.js $BUILD_DIST 2>/dev/null || :\n\n# Enter the .serverless directory\ncd $BUILD_DIST\n# Install online dependencies\nnpm install --production\n\necho \"Build success\"\n```\n\n----------------------------------------\n\nTITLE: Enable Reverse Proxy\nDESCRIPTION: This TypeScript code shows how to enable the `proxy` configuration in the Koa settings of a MidwayJS application. Enabling this option configures Koa to trust the `X-Forwarded-For` header for determining the client's IP address when running behind a reverse proxy like Nginx.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n   // ...\n   koa: {\n     proxy: true,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Log Level in MidwayJS\nDESCRIPTION: This snippet demonstrates how to configure the default log level for MidwayJS.  The log level determines the minimum severity of logs that will be output.  The `level` property is set to `info` in this example, meaning that `info`, `warn`, and `error` level logs will be output. This configures the default logger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       level: 'info',\n     },\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Allowing Undefined Fields via Decorator\nDESCRIPTION: This snippet demonstrates how to configure the validator to allow undefined fields for a specific route using the `allowUnknown` option within the `@Validate` decorator. This configuration overrides the global setting and only applies to the decorated handler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n  @Post('/')\n  @Validate({\n    validationOptions: {\n      allowUnknown: true,\n    },\n  })\n  async updateUser(@Body() user: UserDTO) {\n    // user.id\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Driver for TypeORM in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to explicitly specify the MySQL driver (mysql2) for TypeORM when both `mysql` and `mysql2` packages are installed. By setting the `driver` property to `require('mysql2')`, the application ensures that TypeORM uses the mysql2 driver for database connections.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        //...\n        type: 'mysql',\n        driver: require('mysql2'),\n      }\n    }\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using ILogger Interface in TypeScript\nDESCRIPTION: This code shows how to use the `ILogger` interface from `@midwayjs/core` with the `@Inject()` decorator to inject a logger instance into a service class.  This interface provides basic logging methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Logger, ILogger } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  logger: ILogger;\n\n  async getUser() {\n  \tthis.logger.info('hello user');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Different Cache Instances\nDESCRIPTION: Injects different cache instances using the `@InjectClient` decorator, specifying the client name.  This allows you to use different cache configurations in the same service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayCache } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n\n   @InjectClient(CachingFactory, 'default')\n   cache: MidwayCache;\n  \n   @InjectClient(CachingFactory, 'otherCaching')\n   customCaching: MidwayCache;\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing classes in onReady method\nDESCRIPTION: This code demonstrates the traditional approach of initializing classes within the onReady lifecycle hook of a MidwayJS configuration class. It uses container.getAsync to retrieve and instantiate the RedisErrorListerner and DataSyncListerner classes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/auto_run.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n//...\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  async onReady(container) {\n    await container.getAsync(RedisErrorListerner);\n    await container.getAsync(DataSyncListerner);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MidwayJS project with CLI (Bash)\nDESCRIPTION: This command initializes a new MidwayJS project using the official CLI. It prompts for project details and scaffolds a basic application structure. The `-y` flag automatically accepts default values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Kafka Producer Configuration with Instance Reuse\nDESCRIPTION: This TypeScript code demonstrates how to reuse an existing Kafka instance for a producer by referencing its consumer configuration using the `kafkaInstanceRef` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          clientId: 'my-app',\n          brokers: ['localhost:9092'],\n        },\n      }\n    },\n    producer: {\n      clients: {\n        pub1: {\n          kafkaInstanceRef: 'sub1',\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Socket.IO-Redis Support in MidwayJS\nDESCRIPTION: This feature adds support for socket.io-redis to MidwayJS. This allows for scaling Socket.IO applications across multiple servers using Redis as a message broker.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Define Protocol Buffers Service (helloworld.proto)\nDESCRIPTION: This `helloworld.proto` file defines a gRPC service named `Greeter` with a `SayHello` method. The method takes a `HelloRequest` message containing a `name` field and returns a `HelloReply` message containing a `message` field. This defines the service contract.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloworld;\n\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Component Object Registration\nDESCRIPTION: Registers an object within a component's container using `container.registerObject`. This binds the object to the current component, making it accessible within the component without needing a namespace.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  namespace: 'book',\n})\nexport class BookConfiguration {\n  async onReady(contanier) {\n    contanier.registerObject('aaa', 'bbb'); // 容器内部会绑定到当前的组件\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HttpCode manually\nDESCRIPTION: This snippet demonstrates how to manually set the HTTP status code of the response using the Koa context in Midway Hooks. It sets the status code to 201 using `ctx.status = 201`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  ctx.status = 201;\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status Code in Serverless\nDESCRIPTION: This code demonstrates how to set the response status code using `ctx.status`, which is an alias for `response.statusCode`. This allows controlling the HTTP status code returned by the serverless function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_context.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nctx.status = 404;\n```\n\n----------------------------------------\n\nTITLE: Configure Nunjucks view engine\nDESCRIPTION: Configures the default view engine to Nunjucks and maps the '.nj' file extension to the Nunjucks engine. This configuration is typically placed in the `src/config/config.default.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport const view = {\n  defaultViewEngine: 'nunjucks',\n  mapping: {\n    '.nj': 'nunjucks',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Application and Context from Midway.js packages\nDESCRIPTION: This code snippet demonstrates how to import the Application and Context objects from various Midway.js packages, including Koa, FaaS, Web, and Express. These imports provide access to framework-specific implementations of these core objects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context } from '@midwayjs/koa';\nimport { Application, Context } from '@midwayjs/faas';\nimport { Application, Context } from '@midwayjs/web';\nimport { Application, Context } from '@midwayjs/express';\n```\n\n----------------------------------------\n\nTITLE: Configuring multiple template directories in Midway.js\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure multiple template directories in a Midway.js application using the `rootDir` property within the view configuration.  It allows for defining an object where keys represent directory names and values are the corresponding paths.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\n// Modify the default directory of the default view component\nexport default {\n  // ...\n  view: {\n    rootDir: {\n      default: path.join(__dirname, './view')\n    }\n  },\n}\n\n// Other components need to add directory configuration\nexport default {\n  // ...\n  // Configuration of view components\n  view: {\n    rootDir: {\n      anotherRoot: path.join(__dirname, './view')\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Busboy Component\nDESCRIPTION: Enables the @midwayjs/busboy component in the MidwayJS application by importing it in the configuration file. This makes the upload functionalities available for use in controllers and other parts of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\n\n@Configuration({\n  imports: [\n    // ...other components\n    busboy\n  ],\n  // ...\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many/Many-to-One Relationship\nDESCRIPTION: This code creates a one-to-many/many-to-one relationship between Author and Photo entities using TypeORM. The Author entity has a OneToMany relationship to Photo, while the Photo entity has a ManyToOne relationship to Author. The author property on the Photo entity will store the ID of the related Author.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityModel } from '@midwayjs/orm';\nimport { Column, PrimaryGeneratedColumn, OneToMany, JoinColumn } from 'typeorm';\nimport { Photo } from './entity/photo';\n\n@EntityModel()\nexport class Author {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany((type) => Photo, (photo) => photo.author) // note: we will create author property in the Photo class below\n  photos: Photo[];\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityModel } from '@midwayjs/orm';\nimport { Column, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\nimport { PhotoMetadata } from './photoMetadata';\nimport { Author } from './author';\n\n@Entity()\nexport class Photo {\n  /* ... other columns */\n\n  @ManyToOne((type) => Author, (author) => author.photos)\n  author: Author;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a basic controller with route (TypeScript)\nDESCRIPTION: This code defines a simple controller with a single route (`/weather`) that returns a static string. It uses the `@Controller` and `@Get` decorators from `@midwayjs/core` to define the controller and route, respectively.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class WeatherController {\n  // 这里是装饰器，定义一个路由\n  @Get('/weather')\n  async getWeatherInfo(): Promise<string> {\n    // 这里是 http 的返回，可以直接返回字符串，数字，JSON，Buffer 等\n    return 'Hello Weather!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequelize Model Definition Example (TypeScript)\nDESCRIPTION: Example of a generated Sequelize model definition in TypeScript. It uses sequelize-typescript decorators to define the table name, columns, data types, and other model properties. It demonstrates defining a model with columns, primary keys, indexes, and comments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/sequelize_generator.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Column, DataType, Table, Model } from 'sequelize-typescript';\n\n@Table({\n  tableName: 'task',\n  timestamps: false,\n  indexes: [\n    {\n      name: 'PRIMARY',\n      unique: true,\n      using: 'BTREE',\n      fields: [{ name: 'task_id' }],\n    },\n  ],\n})\nexport class TaskEntity extends Model {\n  @Column({\n    autoIncrement: true,\n    type: DataType.INTEGER.UNSIGNED,\n    allowNull: false,\n    primaryKey: true,\n    field: 'task_id',\n  })\n  taskId: number;\n\n  @Column({\n    type: DataType.TINYINT.UNSIGNED,\n    allowNull: false,\n    defaultValue: 0,\n    comment: '任务所属应用ID: 0-无所属',\n    field: 'app_id',\n  })\n  appId: number;\n\n  @Column({\n    type: DataType.STRING(64),\n    allowNull: false,\n    comment: '任务名称',\n    field: 'task_name',\n  })\n  taskName: string;\n\n  @Column({\n    type: DataType.TINYINT.UNSIGNED,\n    allowNull: false,\n    defaultValue: 0,\n    comment: '任务类别:1-cron,2-interval',\n  })\n  type: number;\n\n  @Column({\n    type: DataType.TINYINT.UNSIGNED,\n    allowNull: false,\n    defaultValue: 0,\n    comment: '任务状态:0-暂停中,1-启动中',\n  })\n  status: number;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: true,\n    comment: '任务开始时间',\n    field: 'start_time',\n  })\n  startTime: string;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: true,\n    comment: '任务结束时间',\n    field: 'end_time',\n  })\n  endTime: string;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n    defaultValue: -1,\n    comment: '任务执行次数',\n  })\n  limit: number;\n\n  @Column({\n    type: DataType.STRING(128),\n    allowNull: true,\n    defaultValue: '',\n    comment: '任务cron配置',\n  })\n  cron: string;\n\n  @Column({\n    type: DataType.INTEGER.UNSIGNED,\n    allowNull: true,\n    defaultValue: 0,\n    comment: '任务执行间隔时间',\n  })\n  every: number;\n\n  @Column({\n    type: DataType.STRING(255),\n    allowNull: true,\n    comment: '参数',\n  })\n  args: string;\n\n  @Column({\n    type: DataType.STRING(255),\n    allowNull: true,\n    comment: '备注',\n  })\n  remark: string;\n}\n```\n\n----------------------------------------\n\nTITLE: BullMQ Configuration in TypeScript\nDESCRIPTION: This code snippet illustrates the configuration structure for the BullMQ component in MidwayJS. It defines the `defaultConnection` settings, including the port and host for the Redis connection. This configuration is used to establish the connection to Redis for BullMQ queue operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2025-01-14-release-3.20.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// BullMQ\nexport default {\n  bullmq: {\n    defaultConnection: {\n      port: 6379,\n      host: '127.0.0.1',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Error Stack Output (MidwayJS)\nDESCRIPTION: This code snippet shows how to enable the full error stack output in online environments by setting the `SERVERLESS_OUTPUT_ERROR_STACK` environment variable to `'true'`. This can be useful for debugging purposes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_error.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.env.SERVERLESS_OUTPUT_ERROR_STACK = 'true';\n```\n\n----------------------------------------\n\nTITLE: Service Startup with Entry Point - CLI - JSON\nDESCRIPTION: This snippet shows how to configure the `dev` command to start the service using a specific entry point, `bootstrap.js`, with `@midwayjs/cli`. The `--entryFile` flag specifies the entry point. This is useful when you want the local development environment to closely mimic the production environment, including the initialization parameters defined in the `bootstrap.js` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"script\": {\n    \"dev\": \"midway-bin dev --ts --entryFile=bootstrap.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Exception Filters in Configuration in Typescript\nDESCRIPTION: This code demonstrates how to apply multiple exception filters (`NotFoundFilter` and `DefaultErrorFilter`) in the `src/configuration.ts` file. The `useFilter` method is called with an array containing the filter classes. The order in the array defines the execution order.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App, Catch } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as koa from '@midwayjs/koa';\nimport { DefaultErrorFilter } from './filter/default.filter';\nimport { NotFoundFilter } from './filter/notfound.filter';\n\n@Configuration({\n  imports: [\n    koa\n  ],\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    this.app.useFilter([NotFoundFilter, DefaultErrorFilter]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Access with usePlugin in TypeScript\nDESCRIPTION: This snippet shows how to use `usePlugin` to access Egg.js plugins within a Midway application. It takes the plugin name as a parameter and returns the plugin instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_builtin.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst plugin = usePlugin('pluginName');\n```\n\n----------------------------------------\n\nTITLE: Fetch API FormData Upload Example (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to upload a file using the Fetch API and FormData. It creates a `FormData` object, appends the selected file to it, and then sends a POST request to the specified endpoint with the FormData as the request body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileInput = document.querySelector('#your-file-input') ;\nconst formData = new FormData();\nformData.append('file', fileInput.files[0]);\n\nfetch('/api/upload', {\n  method: 'POST',\n  body: formData,\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Midway with Disabled Type Checking\nDESCRIPTION: This command executes the MidwayJS application in development mode with TypeScript type checking disabled.  It combines setting TS_NODE_TYPE_CHECK to 'false' and TS_NODE_TRANSPILE_ONLY to 'true' with the debug and development environment variables. This improves startup time.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/midway_slow_problem.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncross-env TS_NODE_TYPE_CHECK=false TS_NODE_TRANSPILE_ONLY=true NODE_DEBUG=midway* NODE_ENV=local midway-bin dev --ts\n```\n\n----------------------------------------\n\nTITLE: Direct Exchange Consumer Implementation\nDESCRIPTION: This snippet demonstrates a RabbitMQ consumer using a direct exchange. It sets a routing key, ensuring that only consumers with matching routing keys receive the messages. The queue name is intentionally left blank, relying solely on the routing key for message routing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Consumer, MSListenerType, RabbitMQListener, Inject, App } from '@midwayjs/decorator';\nimport { Context, Application } from '../../../../../src';\nimport { ConsumeMessage } from 'amqplib';\n\n@Provide()\n@Consumer(MSListenerType.RABBITMQ)\nexport class UserConsumer {\n  @App()\n  app: Application;\n\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  logger;\n\n  @RabbitMQListener('', {\n    exchange: 'direct_logs',\n    exchangeOptions: {\n      type: 'direct',\n      durable: false,\n    },\n    routingKey: 'direct_key',\n    exclusive: true,\n    consumeOptions: {\n      noAck: true,\n    },\n  })\n  async gotData(msg: ConsumeMessage) {\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Context Logger with @Inject() in TypeScript\nDESCRIPTION: This code snippet shows how to inject the context logger (ctx.logger) into a controller using the `@Inject()` decorator. Injecting the logger allows for easy access to the context-specific logger instance within the controller's methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Get, Inject, Controller, Provide } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Controller()\nexport class HelloController {\n\n  @Inject()\n  logger: ILogger;\n\n  @Inject()\n  ctx;\n\n  @Get(\"/\")\n  async hello(){\n    // ...\n\n    // this.logger === ctx.logger\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kafka Admin with Injection\nDESCRIPTION: This TypeScript code demonstrates how to inject a Kafka Admin client instance into a service using the `@InjectClient` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/admin.service.ts\nimport { Provide, InjectClient } from '@midwayjs/core';\nimport { KafkaAdminFactory, Admin } from '@midwayjs/kafka';\n\n@Provide()\nexport class AdminService {\n  \n  @InjectClient(KafkaAdminFactory, 'admin1')\n  admin: Admin;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Project Information using MidwayInformationService\nDESCRIPTION: This snippet shows how to use the `MidwayInformationService` to get the application root directory. It demonstrates injecting the service into a controller and using it within a route handler. The service provides access to directories, package information, and environment-specific paths.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayInformationService, Inject, Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  informationService: MidwayInformationService;\n\n  @Get('/')\n  async home() {\n    // this.informationService.getAppDir();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Function Invocation with Error Handling in TypeScript\nDESCRIPTION: This code defines an asynchronous function `invoke` that performs some remote call logic. The `invokeNew` function attempts to call `invoke` multiple times, catching exceptions in each try block. If an error occurs, it is stored and potentially handled later.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/retry.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Defines an asynchronous function\n\nasync function invoke(id) {\n\n  // Some remote call logic\n\n}\n\n\nasync invokeNew() {\n  let error;\n  try {\n    return await invoke(1);\n  } catch(err) {\n    error = err;\n  }\n\n  try {\n    return await invoke(2);\n  } catch(err) {\n    error = err;\n  }\n\n  if (error) {\n    // ....\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Cookies in Koa Context - TypeScript\nDESCRIPTION: This code snippet demonstrates how to set and get cookies using the `ctx.cookies` object in a MidwayJS Koa application. It sets a cookie named 'foo' with the value 'bar' and encrypts it, then retrieves the cookie value. This example showcases the basic usage of the cookie API within a controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // set cookie\n    this.ctx.cookies.set('foo', 'bar', { encrypt: true });\n    // get cookie\n    this.ctx.cookies.get('foo', { encrypt: true });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Result (form) - Alibaba & Tencent Cloud HTTP Trigger\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed when it is sent as form data (`application/x-www-form-urlencoded`). The `ctx.request.body` will be the received and parsed JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"b\":\"c\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Configuring KafkaJS Partitioner in MidwayJS\nDESCRIPTION: This code snippet shows how to explicitly declare the partitioner for the Kafka producer in MidwayJS, addressing the warning related to KafkaJS v2.0.0's default partitioner change. You can select either the DefaultPartitioner or the LegacyPartitioner.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { KafkaJS } from '@midwayjs/kafka';\nconst { Partitioners } = KafkaJS;\n\nexport default {\n  kafka: {\n    producer: {\n      clients: {\n        pub1: {\n          // ...\n          producerOptions: {\n            createPartitioner: Partitioners.DefaultPartitioner,\n            // ...\n            createPartitioner: Partitioners.LegacyPartitioner,\n          },\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests with Jest in MidwayJS (TypeScript)\nDESCRIPTION: This code provides an example of unit tests for a `/weather` endpoint in MidwayJS using Jest. It uses `@midwayjs/mock` to create and close the application, and `createHttpRequest` to send requests. It tests both successful and failed requests, asserting the expected status code and response text.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/koa';\n\ndescribe('test/controller/weather.test.ts', () => {\n\n  let app: Application;\n  beforeAll(async () => {\n    // create app\n    app = await createApp<Framework>();\n  });\n\n  afterAll(async () => {\n    // close app\n    await close(app);\n  });\n\n  it('should test /weather with success request', async () => {\n    // make request\n    const result = await createHttpRequest(app).get('/weather').query({ cityId: 101010100 });\n\n    expect(result.status).toBe(200);\n    Expect (result.text).toMatch(/Beijing/);\n  });\n\n  it('should test /weather with fail request', async () => {\n    const result = await createHttpRequest(app).get('/weather');\n\n    expect(result.status).toBe(200);\n    expect(result.text).toMatch(/weather data is empty/);\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Component Entry Point Export\nDESCRIPTION: Exports the `BookConfiguration` class as `Configuration` from the component's entry point file. This makes the configuration available for import in other parts of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/index.ts\nexport { BookConfiguration as Configuration } from './configuration`;\n```\n\n----------------------------------------\n\nTITLE: Getting DataSourceName by Model\nDESCRIPTION: This code retrieves the data source name associated with a specific entity class using the `getDataSourceNameByModel` method of the `MySqlDataSourceManager`. It is useful when only one data source is associated with the entity.  If multiple datasources are bound to this entity, the datasource returned may be incorrect.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.mysqlDataSourceManager.getDataSourceNameByModel(SimpleUser);\n\n// => dataSource1\n```\n\n----------------------------------------\n\nTITLE: Configure default view engine to nunjucks\nDESCRIPTION: This TypeScript code configures the default view engine in MidwayJS to Nunjucks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  // ...\n  view: {\n    defaultViewEngine: 'nunjucks',\n  },\n} as MidwayConfig;\n\n```\n\n----------------------------------------\n\nTITLE: Fix: Add event name args - Javascript\nDESCRIPTION: This commit fixes an issue by adding event name arguments. This ensures that event listeners can properly access the event name when handling events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nbfd82320aee8600d8fa30bd2821a0e68c80fd755\n```\n\n----------------------------------------\n\nTITLE: Getting API Trigger Information (HTTP)\nDESCRIPTION: This JSON snippet shows the structure of the trigger information returned by `getApiTrigger` for an HTTP API.  It includes the type of trigger, the HTTP method, and the path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"HTTP\",\n  \"method\": \"GET\",\n  \"path\": \"/hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Controller using Dependency Injection (TypeScript)\nDESCRIPTION: This code shows how to inject the `WeatherService` into the `WeatherController` using the `@Inject` decorator. The controller then calls the service to fetch weather data and returns it. The return type of the `getWeatherInfo` method is also updated to `WeatherInfo`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Query } from '@midwayjs/core';\nimport { WeatherInfo } from '../interface';\nimport { WeatherService } from '../service/weather.service';\n\n@Controller('/')\nexport class WeatherController {\n\n  @Inject()\n  weatherService: WeatherService;\n\n  @Get('/weather')\n  async getWeatherInfo(@Query('cityId') cityId: string): Promise<WeatherInfo> {\n    return this.weatherService.getWeather(cityId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HttpClient Instance with Default Headers and Timeout in Typescript\nDESCRIPTION: This snippet demonstrates creating an `HttpClient` instance with default headers, method and timeout, which will be included in every request made with that instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from '@midwayjs/core';\n\nconst httpclient = new HttpClient({\n  headers: {\n    'x-timeout': '5'\n  },\n  method: 'POST',\n  timeout: 2000\n});\n\n// Bring headers with you every time\nconst result = await httpclient.request('http://127.1:7001/');\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Timer Trigger with Cron Expression in TypeScript (Example)\nDESCRIPTION: This code snippet demonstrates an example of defining a Timer trigger using a cron expression to trigger a function every day at 4:00 AM. The `@ServerlessTrigger` decorator is used to configure the trigger. Requires `@midwayjs/decorator` and `@midwayjs/faas` dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_timer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ServerlessTrigger(ServerlessTriggerType.TIMER, {\n  type: 'cron',\n  value: '0 0 4 * * *', // 每天4:00触发\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Server Heartbeat Interval\nDESCRIPTION: Configures the interval at which the WebSocket server sends `ping` packets for heartbeat checks by setting the `serverHeartbeatInterval` option in the `webSocket` configuration. The interval is specified in milliseconds; the default is 30000 (30 seconds).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n   // ...\n   webSocket: {\n     serverHeartbeatInterval: 30000,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Context with useContext in TypeScript\nDESCRIPTION: This snippet shows how to use generics with `useContext` to specify the type of the context, allowing for type-safe access to context properties. Examples are given for Koa and FaaS environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_builtin.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Koa\nimport { Context } from '@midwayjs/koa';\nconst ctx = useContext<Context>();\n\n// FaaS\nimport { Context } from '@midwayjs/faas';\nconst ctx = useContext<Context>();\n```\n\n----------------------------------------\n\nTITLE: Jest Assertion Examples in TypeScript\nDESCRIPTION: This TypeScript code snippet illustrates various assertion methods available in Jest's `expect` library for testing application logic and verifying expected outcomes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nExpect (result.status).toBe(200); // Whether the value is equal to a certain value, the reference is equal\nexpect(result.status).not.toBe(200);\nExpect (result).toEqual('hello'); //Simple match, the same object attribute is also true\nExpect (result).toStrictEqual('hello'); // Strictly match\nExpect (['lime', 'apple']).toContain('lime'); //Judge whether it is in an array\n```\n\n----------------------------------------\n\nTITLE: Setting withCredentials for HTTP Client in TypeScript\nDESCRIPTION: This snippet shows how to enable `withCredentials` for the HTTP client using `setupHttpClient` from `@midwayjs/rpc`. Setting `withCredentials` to `true` allows the client to include cookies and authentication headers in cross-origin requests.  Dependencies: `@midwayjs/rpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/client.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupHttpClient } from '@midwayjs/rpc';\n\nsetupHttpClient({\n  withCredentials: true\n});\n```\n\n----------------------------------------\n\nTITLE: Controller Level Ignore Global Prefix (Typescript)\nDESCRIPTION: Shows how to ignore the global prefix on a controller level.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// 该 Controller 下所有路由都将忽略全局前缀\n@Controller('/api', {ignoreGlobalPrefix: true})\nexport class HomeController {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORM Event Subscriber Configuration\nDESCRIPTION: This code demonstrates how to configure the application to use the defined event subscriber. The `subscribers` array in the `typeorm` configuration includes the `EverythingSubscriber` class, enabling it to receive database events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { EverythingSubscriber } from '../event/subscriber';\n\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        // ...\n        entities: [Photo],\n        // Incoming subscription class\n        subscribers: [EverythingSubscriber]\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support with Zod and Validate\nDESCRIPTION: This code demonstrates how to use Zod's TypeScript support to define and validate complex types. It defines a `Project` schema using `z.object` and uses it to validate the `project` parameter in the API endpoint.  It imports APIs, Post and Validate from '@midwayjs/hooks' and z from 'zod'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  APIs,\n  Post,\n  Validate,\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\n\nconst Project = z.object({\n  name: z.string(),\n  description: z.string(),\n  owner: z.string(),\n  members: z.array(z.string()),\n});\n\nexport default Api(\n  Post('/project'),\n  Validate(Project),\n  async (\n    // { name: string, description: string, owner: string, members: string[] }\n    project: z.infer<typeof Project>\n  ) => {\n    return project;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Injecting Context via @Inject decorator\nDESCRIPTION: This code demonstrates how to inject the Context instance using the `@Inject` decorator within a Midway.js controller.  The injected `ctx` property provides access to request-specific information and services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TableStore Single Client Configuration (TypeScript)\nDESCRIPTION: This code configures a single TableStore client with the necessary credentials and endpoint information. It defines properties such as accessKeyId, secretAccessKey, stsToken, endpoint, and instancename.  The stsToken is required when using STS authorization. These configurations are generally placed in a config file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/tablestore.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const tableStore = {\n  client: {\n    accessKeyId: '<your access key id>',\n    secretAccessKey: '<your access key secret>',\n    stsToken:\n      '<your stsToken>' /*When you use the STS authorization, you need to fill in. ref:https://help.aliyun.com/document_detail/27364.html*/,\n    endpoint: '<your endpoint>',\n    instancename: '<your instance name>',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing Objects with onObjectCreated in TypeScript\nDESCRIPTION: Demonstrates how to replace a created object with a completely new object using the `onObjectCreated` lifecycle hook and the `replaceCallback`. Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectInitOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectCreated(ins: any, options: ObjectInitOptions): Promise<void> {\n    // 之后每个创建的对象都会被替换为 { bbb: 'aaa' }\n    options.replaceCallback({\n      bbb: 'aaa'\n    });\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Logger\nDESCRIPTION: This code snippet illustrates how to configure a custom logger with a specific file log name. The abcLogger client is defined within the midwayLogger configuration, specifying that the log messages for this client should be written to 'abc.log'.  This configuration is part of the midwayLogger configuration in a MidwayConfig object. The `@Logger('abcLogger')` decorator is used to retrieve this custom logger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      abcLogger: {\n        fileLogName: 'abc.log'\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Insert Albums and Photos with Associations\nDESCRIPTION: This code demonstrates how to insert albums and photos into the database and associate them with each other. It uses the `albumModel` and `photoModel` repositories to save the entities. The `photo.albums` property is set to an array containing the created albums, establishing the many-to-many relationship.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { Album } from './entity/album.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  @InjectEntityModel(Album)\n  albumModel: Repository<Album>\n\n  async updatePhoto() {\n\n    // create a few albums\n    let album1 = new Album();\n    album1.name = \"Bears\";\n    await this.albumModel.save(album1);\n\n    let album2 = new Album();\n    album2.name = \"Me\";\n    await this.albumModel.save(album2);\n\n    // create a few photos\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.albums = [album1, album2];\n    await this.photoModel.save(photo);\n\n\n    // now our photo is saved and albums are attached to it\n    // now lets load them:\n    const loadedPhoto = await this.photoModel.findOne(1, { relations: [\"albums\"] }); // typeorm@0.2.x\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Zod package\nDESCRIPTION: This command installs the Zod package, which is used for defining and validating schemas in Midway Hooks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zod\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL database using mysql2\nDESCRIPTION: This code snippet demonstrates a basic MySQL query using the mysql2 library. It establishes a connection, executes a SELECT query, and logs the results and metadata. This is example code provided by mysql2 documentation. The code does not handle errors explicitly and assumes the database server is running locally on the default port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// get the client\nconst mysql = require('mysql2');\n\n// create the connection to database\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  database: 'test'\n});\n\n// simple query\nconnection.query (\n  'SELECT * FROM `table` WHERE `name` = \"Page\" AND `age` > 45',\n  function(err, results, fields) {\n    console.log(results); // results contains rows returned by server\n    console.log(fields); // fields contains extra meta data about results, if available\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration in f.yml\nDESCRIPTION: This snippet shows how to configure plugins in the `f.yml` file to extend the MidwayJS CLI. It demonstrates the usage of both npm and local plugins. The `plugins` field specifies the plugins to be loaded, with the format `${ 'npm' | 'local' }:${ provider || '' }:${ pluginName || path }`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/cli.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - npm::test-plugin-model\n  - local::./test/plugin\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Method in Midway.js (TypeScript)\nDESCRIPTION: This snippet shows how to mock a class method using `mockClassProperty`. It mocks the `getUser` method of the `UserService` class to return `midway`.  `UserService` is expected to have the `@Provide()` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockClassProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  mockClassProperty(UserService, 'getUser', async () => {\n    return 'midway';\n  });\n\n  // userService.getUser() => 'midway'\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Type Whitelist in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the `mimeTypeWhiteList` in the MidwayJS Busboy component to allow only specific file MIME types to be uploaded.  It utilizes an array of arrays, where each inner array defines an extension and its corresponding allowed MIME type(s).  No default value is provided, meaning no validation occurs unless this is explicitly set.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/busboy';\nexport default {\n  // ...\n  busboy: {\n    // ...\n    // 扩展名白名单\n    whitelist: uploadWhiteList,\n    // 仅允许下面这些文件类型可以上传\n    mimeTypeWhiteList: {\n      '.jpg': 'image/jpeg',\n      // 也可以设置多个 MIME type，比如下面的允许 .jpeg 后缀的文件是 jpg 或者是 png 两种类型\n      '.jpeg': ['image/jpeg', 'image/png'],\n      // 其他类型\n      '.gif': 'image/gif',\n      '.bmp': 'image/bmp',\n      '.wbmp': 'image/vnd.wap.wbmp',\n      '.webp': 'image/webp',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Serverless YAML Generator Script (MidwayJS, JSON)\nDESCRIPTION: This JSON snippet shows how to add the `@midwayjs/serverless-yaml-generator` package to the `package.json` file to automatically generate or update the `s.yaml` file with function information from the decorators. The script `generate` is added to the `scripts` section, pointing to the generator's executable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n+    \"generate\": \"serverless-yaml-generator\",\n  },\n  \"devDependencies\": {\n+    \"@midwayjs/serverless-yaml-generator\": \"^1.0.0\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: ParseIntPipe Custom Implementation\nDESCRIPTION: Shows custom implementation example of ParseIntPipe using custom validation pipe, which returns Joi validation schema\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pipe } from '@midwayjs/core';\nimport { ParsePipe, RuleType } from '@midwayjs/validate';\n\n@Pipe()\nexport class ParseIntPipe extends ParsePipe {\n  getSchema() {\n    return RuleType.number().integer().required();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IPipelineResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure of the result returned by a pipeline execution. It includes a success flag, an optional error object with information about the error, and a result property that contains the actual result of the pipeline.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * pipeline execution returns results\n */\nexport interface IPipelineResult<T> {\n  /**\n   * Success\n   */\n  success: boolean;\n  /**\n   * Exception information (return if any)\n   */\n  error ?: {\n    /**\n     * The anomaly is on that valve.\n     */\n    valveName?: string;\n    /**\n     * Abnormal information\n     */\n    message?: string;\n    /**\n     * Original Error\n     */\n    error?: Error;\n  };\n  /**\n   * Return results\n   */\n  result: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Body Definition with ApiBody\nDESCRIPTION: This TypeScript code shows how to further enhance the body definition with the `@ApiBody` decorator. If `@ApiBody` is configured, the data extracted by the type will be automatically overwritten.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiBody({\n  type: Cat\n})\nasync upateUser(@Body() dto: UserDTO) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Use Multi-Level Cache Methods\nDESCRIPTION: Demonstrates how to use the `mset`, `mget`, and `mdel` methods for multi-level caching.  It showcases how to interact with multiple cache stores simultaneously.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayMultiCache } from '@midwayjs/cache-manager';\n\nconst userId2 = 456;\nconst key2 = 'user_' + userId;\nconst ttl = 5;\n\n@Provide()\nexport class UserService {\n\n  @InjectClient(CachingFactory, 'multiCaching')\n  multiCache: MidwayMultiCache;\n\n  async invoke() {\n    // 设置到所有级别的缓存\n    await this.multiCache.set('foo2', 'bar2', ttl);\n\n    // 从最高优先级的缓存 Store 中获取 key\n    console.log(await this.multiCache.get('foo2'));\n    // >> \"bar2\"\n\n    // 调用每一个 Store 的 del 方法进行删除\n    await this.multiCache.del('foo2');\n\n    // 在所有缓存中设置多个 key，可以多个键值对\n    await this.multiCache.mset(\n      [\n        ['foo', 'bar'],\n        ['foo2', 'bar2'],\n      ],\n      ttl\n    );\n\n    // mget() 从最高优先级的缓存中获取值\n    // 如果第一个缓存 Store 中不包含所有的 key，\n    // 继续在下一个缓存 Store 中查找没有找到的 key。\n    // 这是递归地完成的，直到:\n    // - 所有的 key 都已经查找到值\n    // - 所有的缓存 Store 都被查找过\n    console.log(await this.multiCache.mget('key', 'key2'));\n    // >> ['bar', 'bar2']\n\n    // 调用每一个 Store 的 mdel 方法进行删除\n    await this.multiCache.mdel('foo', 'foo2');\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Producer Configuration\nDESCRIPTION: Shows the basic configuration structure for Kafka producers, using the `clients` field to define multiple producer instances (e.g., `pub1`, `pub2`). This allows for managing multiple producers with different configurations within the same application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    producer: {\n      clients: {\n        pub1: {\n          // ...\n        },\n        pub2: {\n          // ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Method with Conditional Logic\nDESCRIPTION: Caches the result of a method based on a custom logic function. This provides the flexibility to cache results based on specific parameters or conditions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\nfunction cacheBy({methodArgs, ctx, target}) {\n  if (methodArgs[0] === 'harry' || methodArgs[0] === 'mike') {\n    return 'cache1';\n  }\n}\n\n@Provide()\nexport class UserService {\n  @Caching('default', cacheBy, 100)\n  async getUser(name: string) {\n    return 'hello ' + name;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Main Application in configuration.ts\nDESCRIPTION: This code snippet shows how the main application is defined in `src/configuration.ts` by importing and registering the necessary modules (e.g., koa, ws) within the `@Configuration` decorator. The first imported Application is considered the Main Application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { Configuration, ILifeCycle } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as ws from '@midwayjs/ws';\n\n@Configuration({\n  imports: [koa, ws]\n})\nexport class MainConfiguration implements ILifeCycle {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger Decorator - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `@Logger` decorator to inject a logger instance into a class. It also shows how to access the logger using `app.getLogger()`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Logger } from '@midwayjs/decorator';\nimport { ILogger } from '@midwayjs/logger';\n\n@Provide()\nexport class UserService {\n  @App()\n  app: IMidwayApplication;\n\n  @Logger()\n  logger; // 即 loggers.getLogger('logger')\n\n  async getUser() {\n    // 即 loggers.getLogger('coreLogger')\n    this.app.getLogger('coreLogger').warn('warn message');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Locals Support and Case Handling\nDESCRIPTION: This feature introduces support for adding locals and handling different cases within the Midway.js framework. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport add locals and add case ([#2289](https://github.com/midwayjs/midway/issues/2289)) ([fc373d9](https://github.com/midwayjs/midway/commit/fc373d9ac4d2ae82c90cd476292012fae2f5fc2d))\n```\n\n----------------------------------------\n\nTITLE: Configuring @midwayjs/process-agent\nDESCRIPTION: This code snippet demonstrates how to import and use the @midwayjs/process-agent module in a MidwayJS configuration file. The `processAgent` module is added to the `imports` array, enabling its functionality within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/process_agent.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as processAgent from '@midwayjs/process-agent';\n\n@Configuration({\n  imports: [processAgent],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Using Tags Component in MidwayJS Service\nDESCRIPTION: This code shows how to use the @midwayjs/tags component in a MidwayJS service. It injects the TagServiceFactory and TagClient, then demonstrates adding a tag and listing tags.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tags.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/testTags.ts\nimport { Provide, Inject, InjectClient } from '@midwayjs/core';\nimport { TagServiceFactory, TagClient } from '@midwayjs/tags';\n@Provide()\nexport class TestTagsService {\n  @Inject()\n  tags: TagServiceFactory;\n\n  // 相当于 this.tags.get('tagGroup1')\n  @InjectClient(TagServiceFactory, 'tagGroup1')\n  tagClient: TagClient;\n\n  @ServerlessTrigger(ServerlessTriggerType.HTTP, { path: '/tags/list', method: 'get'})\n  async listTags() {\n    // 也可以直接使用 this.tagClient\n    const tagClient: TagClient = this.tags.get('tagGroup1');\n    // add new tag\n    const tagInfo = await tagClient.new({\n      name: 'test-tag-name',\n      desc: 'tag desc',\n    });\n    /*\n    tagInfo = {\n      success: true,\n      id: 1,\n    }\n    */\n    // list top 20 tags\n    const tags = await tagClient.list({ count: true });\n    /*\n    tags: {\n      list: [\n        {\n          id: 1,\n          name: 'test-tag-name',\n          desc: 'tag desc'\n        }\n      ],\n      total: 1\n    }\n    */\n    return tags;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration: Ignore Scanning Directories\nDESCRIPTION: Demonstrates how to exclude specific directories from being scanned by MidwayJS during startup. This is configured within the `@Configuration` decorator using the `detectorOptions.ignore` property, which accepts an array of glob patterns to match directories to exclude.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration, Logger } from '@midwayjs/core';\n// ...\n\n@Configuration({\n  // ...\n  detectorOptions: {\n    ignore: [\n      '**/web/**'\n    ]\n  }\n})\nexport class MainConfiguration {\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Route description\nDESCRIPTION: This code snippet shows how to add a summary and description to a specific route using the `@Get` decorator.  These descriptions enhance the information displayed in the Swagger UI, making it easier to understand the purpose of each endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/', {summary: 'Main Page', description: 'This is a home router'})\nasync home() {\n  return 'Hello Midwayjs!';\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Socket.IO Component - TypeScript\nDESCRIPTION: Enables the Socket.IO component within a MidwayJS configuration.  It imports the `@midwayjs/socketio` module and includes it in the `imports` array of the `@Configuration` decorator. This allows Socket.IO functionality to be used in the application. This code snippet shows the usage of Socket.IO as an independent main framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as socketio from '@midwayjs/socketio';\n\n@Configuration({\n  imports: [socketio]\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing request data as function arguments (POST)\nDESCRIPTION: This example shows how to pass request data to an API endpoint by defining parameters in the handler function. It uses the `Post` trigger and receives a 'name' parameter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Post(), // Http Path: /api/say,\n  async (name: string) => {\n    return `Hello ${name}!`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache Value\nDESCRIPTION: This shows how to delete a cached value using del method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.cache.del(key);\n```\n\n----------------------------------------\n\nTITLE: Enable Kafka Component (Koa)\nDESCRIPTION: Enables the Kafka component alongside the Koa framework in a MidwayJS configuration file. This shows how to import and include both Koa and Kafka in the `imports` array. This attaches Kafka functionality to an existing Koa-based MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as kafka from '@midwayjs/kafka';\n\n@Configuration({\n  imports: [\n    koa,\n    kafka\n  ],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Messages with useLogger in TypeScript\nDESCRIPTION: This snippet provides examples of how to use the logger instance obtained from `useLogger` to output log messages at various levels (debug, info, warn, and error).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_builtin.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.debug();\nlogger.info();\nlogger.warn();\nlogger.error();\n```\n\n----------------------------------------\n\nTITLE: Using Default MIME Type Validation Rules\nDESCRIPTION: This snippet shows how to use the `DefaultUploadFileMimeType` variable provided by the `@midwayjs/upload` component as the default MIME validation rule. This includes common file extensions like `.jpg`, `.png`, and `.psd`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList, DefaultUploadFileMimeType } from '@midwayjs/upload';\nexport default {\n   //...\n   upload: {\n     //...\n     // extension whitelist\n     whitelist: uploadWhiteList,\n     // Only the following file types are allowed to be uploaded\n     mimeTypeWhiteList: DefaultUploadFileMimeType,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Midway gRPC framework support\nDESCRIPTION: This commit introduces support for the gRPC framework within MidwayJS. This allows developers to build gRPC services and clients within the MidwayJS ecosystem, enabling efficient and scalable communication between microservices or other applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Accessing EggJS Plugin in Midway Controller (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to access an EggJS plugin (mysql) within a Midway controller. It showcases three methods: injecting the `app` object, injecting the `ctx` object, and using the `@Plugin` decorator to directly inject the plugin. The @Plugin decorator provides a convenient way to access plugin properties directly from the app object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Provide, Inject, Get } from '@midwayjs/decorator';\nimport { Application, Context } from 'egg';\n\n@Provide()\nexport class HomeController {\n  @App()\n  app: Application;\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.app.mysql.query(sql, values); // 调用 app 上的方法（如果有的话）\n    this.ctx.mysql.query(sql, values); // 调用挂载在 ctx 上的方法（如果有的话）\n  }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Provide, Get, Plugin } from '@midwayjs/decorator';\n\n@Provide()\nexport class HomeController {\n  @Plugin()\n  mysql: any;\n\n  @Get('/')\n  async home() {\n    this.mysql.query(sql, values);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection\nDESCRIPTION: Configures the database connection information in `config.default.ts`. This includes the database type, host, port, username, password, and database name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 单数据库实例\n */\nexport const orm = {\n  type: 'mysql',\n  host: '',\n  port: 3306,\n  username: '',\n  password: '',\n  database: undefined,\n  synchronize: false, // 如果第一次使用，不存在表，有同步的需求可以写 true\n  logging: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Connection Middleware in MidwayJS (TypeScript)\nDESCRIPTION: Registers connection-level middleware for Socket.IO connections in MidwayJS. This middleware (SocketMiddleware) will be triggered when a client connects to the '/api' namespace. Requires the @OnWSConnection decorator and a defined SocketMiddleware.  Connection middleware can be used for tasks such as verifying client credentials or setting up initial connection state.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\n@WSController('/api')\nexport class APIController {\n\n  // Middleware when Connection is triggered\n  @OnWSConnection({\n    middleware: [SocketMiddleware]\n  })\n  init() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data (TypeScript)\nDESCRIPTION: This example shows how to delete all session data by setting `ctx.session` to `null` in a Midway.js Koa application.  This effectively clears the session.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nctx.session = null;\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Streaming Implementation - TypeScript\nDESCRIPTION: This example illustrates a bidirectional streaming gRPC method using `@GrpcMethod` and `GrpcStreamTypeEnum.DUPLEX`. The server receives and sends multiple messages to the client via `ctx.write` and `ctx.end`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, GrpcStreamTypeEnum, Inject, MSProviderType, Provide, Provider } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/grpc';\nimport { math } from '../interface';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n */\n@Provide()\n@Provider(MSProviderType.GRPC, { package: 'math' })\nexport class Math implements math.Math {\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod({ type: GrpcStreamTypeEnum.DUPLEX, onEnd: 'duplexEnd' })\n  async addMore(message: math.AddArgs) {\n    this.ctx.write({\n      id: message.id,\n      num: message.num + 10,\n    });\n  }\n\n  async duplexEnd() {\n    console.log('got client end message');\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Error Class\nDESCRIPTION: This code defines a custom error class, `CustomError`, extending `MidwayError`.  It includes a predefined error message and code for consistent error handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_error.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/error/custom.error.ts\nimport { MidwayError } from '@midwayjs/core';\n\nexport class CustomError extends MidwayError {\n  constructor() {\n    super('my custom error', 'CUSTOM_ERROR_CODE_10000');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Query Parameters with @Query Decorator\nDESCRIPTION: This code snippet demonstrates how to retrieve query parameters from a URL using the `@Query` decorator in MidwayJS. The `@Query('id')` decorator extracts the value of the `id` query parameter and assigns it to the `id` variable in the `getUser` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n\nimport { Controller, Get, Query } from '@midwayjs/core';\n\n@Controller('/api/user')\nexport class UserController {\n  @Get('/')\n  async getUser(@Query('id') id: string): Promise<User> {\n    // xxxx\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure port for unittest environment\nDESCRIPTION: This TypeScript code shows how to configure the port to `null` for the unit test environment. This is typically done because supertest manages the port in test environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.unittest\nexport default {\n  // ...\n  egg: {\n    port: null,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom ServerResponse for User Roles (TypeScript)\nDESCRIPTION: This code snippet showcases the implementation of different ServerResponse classes (`AdminServerResponse`, `UserServerResponse`) within a controller, to differentiate API responses based on user roles. The response is customized based on the detected user role using the `this.ctx.user` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, sleep, HttpServerResponse } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { UserServerResponse, AdminServerResponse } from '../response/api';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n  \n  @Get('/')\n  async home() {\n    // ...\n    if (this.ctx.user === 'xxx') {\n      return new AdminServerResponse(this.ctx).json({\n        router: '/',\n        dbInfo: {\n          // ...\n        },\n        userInfo: {\n          role: 'admin',\n        },\n        status: 'ok',\n      });\n    }\n    return new UserServerResponse(this.ctx).json({\n      status: 'ok',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using app.getEnv() to get the current environment\nDESCRIPTION: This shows how to use the `getEnv()` method to retrieve the current application environment (e.g., production, development). This information can be used to configure the application based on the environment it's running in.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getEnv();\n// => production\n```\n\n----------------------------------------\n\nTITLE: Registering a Method Handler in TypeScript\nDESCRIPTION: This code snippet demonstrates how to register a method handler for a custom method decorator using `MidwayDecoratorService`. It shows how to access the request context (`ctx`) from the decorated instance using `REQUEST_OBJ_CTX_KEY`. The `registerMethodHandler` function associates the `LOGGING_KEY` with an around advice that retrieves the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { REQUEST_OBJ_CTX_KEY } from '@midwayjs/core';\n//...\n\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Logger()\n  logger;\n\n  async onReady() {\n    // ...\n\n    // 实现方法装饰器\n    this.decoratorService.registerMethodHandler(LOGGING_KEY, (options) => {\n      return {\n        around: async (joinPoint: JoinPoint) => {\n          // 装饰器所在的实例\n          const instance = joinPoint.target;\n          const ctx = instance[REQUEST_OBJ_CTX_KEY];\n          // ctx.xxxx\n          // ...\n        },\n      };\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Entity Model with Hooks\nDESCRIPTION: This code demonstrates how to use the `useEntityModel` hook provided by `@midwayjs/orm` to interact with TypeORM entities in a functional style. It shows retrieving the entity model, creating a new entity instance, setting properties, and saving the entity to the database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEntityModel } from '@midwayjs/orm';\nimport { Photo } from './entity/photo';\n\nexport async function getPhoto() {\n  // get model\n  const photoModel = useEntityModel(Photo);\n\n  const photo = new Photo();\n  // create entity\n  photo.name = 'Me and Bears';\n  photo.description = 'I am near polar bears';\n  photo.filename = 'photo-with-bears.jpg';\n  photo.views = 1;\n  photo.isPublished = true;\n\n  // find\n  const newPhoto = await photoModel.save(photo);\n\n  return 'hello world';\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Stream Response Template (TypeScript)\nDESCRIPTION: This code shows how to customize the template used for streaming data responses with `HttpServerResponse`.  The `STREAM_TPL` is used to modify the structure of the stream data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nHttpServerResponse.STREAM_TPL = (data) => { /*...*/};\n```\n\n----------------------------------------\n\nTITLE: Adding Controller Tag with @ApiOperation in Typescript\nDESCRIPTION: This snippet shows how to add a tag to a route with `@ApiOperation`, which can be used to group related routes in Swagger.  If both `@ApiTags` and `@ApiOperation` are used, `@ApiTags` takes precedence.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomeController {\n  @ApiOperation({ tags: ['bbb'] })\n  @Get('/')\n  async home(): Promise<string> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually calling API endpoint with path parameters\nDESCRIPTION: This code demonstrates manually calling an API endpoint with path parameters using the `fetch` API. It constructs the URL with the required parameter value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('/article/100')\n  .then((res) => res.json())\n  .then((res) => console.log(res)); // { article: '100' }\n```\n\n----------------------------------------\n\nTITLE: Customize Formula Captcha Config - TypeScript\nDESCRIPTION: Example config showing how to configure a formula captcha code. The image width is 100 pixels, the height is 60 pixels, and it contains 2 noise lines. Both direct and default configuration are illustrated.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/captcha.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const captcha: CaptchaOptions = {\n  default: {\n    noise: 2,\n    width: 100,\n    height: 60\n  },\n}\n\nexport const captcha: CaptchaOptions = {\n  formula: {\n    noise: 2,\n    width: 100,\n    height: 60\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Function Koa Middleware in Midway Hooks\nDESCRIPTION: This code shows how to use Koa middleware for a single API function in Midway Hooks using `Middleware`.  Both a custom middleware (`logger`) and the Koa middleware (`cors`) are applied to this specific API endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/middleware.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Middleware\n} from '@midwayjs/hooks';\nimport logger from './logger';\nimport cors from '@koa/cors';\n\nexport default Api (\n  Get(),\n  // highlight-start\n  Middleware(logger, cors)\n  // highlight-end\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: UserService Implementation (Midway)\nDESCRIPTION: Defines a UserService class with a dependency on TestService. This service is designed to retrieve user data by calling the setData method of the TestService, demonstrating inter-service communication within the Midway framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/process_agent.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { TestService } from './test';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  testService: TestService;\n\n  async getUser() {\n    let result = await this.testService.setData(1);\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Modifying Info Object - TypeScript\nDESCRIPTION: This snippet demonstrates how to dynamically modify the `info` object used in log formatting using `logger.updateTransformableInfo`. This allows for runtime adjustments to log output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.updateTransformableInfo((info) => {\n  info.timestamp = '123';\n  return info;\n});\n```\n\n----------------------------------------\n\nTITLE: CLI Plugin Code Example (TypeScript)\nDESCRIPTION: This snippet provides a code example for a CLI plugin written in TypeScript, showing how to define custom commands, lifecycle events, options, and hooks using the `@midwayjs/command-core` library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// src/index.ts\n\nimport { BasePlugin } from '@midwayjs/command-core';\n\nexport class TestLalalaPlugin extends BasePlugin {\n  commands = {\n    lalala: {\n      Usage: 'custom command',\n      lifecycleEvents: [\n        'a', // Custom Lifecycle\n        'b',\n      ],\n      // Not yet\n      options: {\n        name: {\n          usage: 'parameter name, for example: mw lalala -- name = 123',\n          shortcut: 'n', // parameter abbreviation\n        },\n      },\n    },\n  };\n\n  hooks = {\n\t\t// Add the command lifecycle extension in the current plugin\n    // the life cycle of the lalala command\n   \t'lalala:a': async () => {\n\n      // Output\n    \tthis.core.cli.log('lalala command hook');\n\n      // Get the parameters entered by the user.\n      this.core.cli.log(this.core.options);\n\n      // f.yml content\n      this.core.cli.log(this.core.service);\n\n      // Only the output under the-V parameter\n      this.core.debug('lalala');\n    },\n\n    // Add command lifecycle extensions in other plug-ins\n    // Execute \"before\" the copyFile life cycle of the package command\n    'before:package:copyFile': async () => {\n    \tconsole.log('package command hook');\n    },\n\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Calling API using zero-API approach (fullstack)\nDESCRIPTION: This snippet shows how to call an API endpoint directly using the imported function. It assumes a zero-API setup where the API function is imported directly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport say from './api';\n\nconst response = await say('Midway');\nconsole.log(response); // Hello Midway!\n```\n\n----------------------------------------\n\nTITLE: Initializing API with GET route\nDESCRIPTION: This code snippet demonstrates how to create a basic API endpoint using Midway Hooks. It uses the `Api` and `Get` functions to define a GET route at `/api/hello` (by default). The handler function returns a 'Hello World!' string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get(), // Http Path: /api/hello\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Logger Output Methods in TypeScript\nDESCRIPTION: This code snippet demonstrates the different output methods provided by the MidwayJS logger object (`logger`), including `debug()`, `info()`, `warn()`, `error()`, and `write()`. Each method is used to log messages at different severity levels.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.debug('debug info');\nlogger.info('启动耗时 %d ms', Date.now() - start);\nlogger.warn('warning!');\nlogger.error(new Error('my error'));\nlogger.write('abcdef');\n```\n\n----------------------------------------\n\nTITLE: Adding Component and Framework Config Definition\nDESCRIPTION: This commit introduces or modifies the definition of component and framework configurations within the MidwayJS framework. These definitions are essential for specifying how different parts of the application are configured and interact with each other, providing a structured approach to manage settings for components and the overall framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_7\n\nLANGUAGE: N/A\nCODE:\n```\nb2fe615\n```\n\n----------------------------------------\n\nTITLE: Configuring compilerOptions for ESM in tsconfig.json (JSON)\nDESCRIPTION: These compiler options in `tsconfig.json` are required for ESM support. `moduleResolution` must be set to `Node16` or `NodeNext` to resolve modules correctly in an ESM environment. `target` and `module` are also set to `ESNext` for modern JavaScript output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/esm.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"compilerOptions\": {\n     \"target\": \"ESNext\",\n     \"module\": \"ESNext\",\n     \"moduleResolution\": \"Node16\",\n     \"esModuleInterop\": true,\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting CacheManager\nDESCRIPTION: This example illustrates how to inject the `CacheManager` into a service class using the `@Inject` decorator. This allows the service to access the cache functionality for storing and retrieving data. `@Provide()` decorator makes the class injectable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Provide } from '@midwayjs/decorator';\nimport { IUserOptions } from '../interface';\nimport { CacheManager } from '@midwayjs/cache';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  cache: CacheManager; // 依赖注入CacheManager\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AuthGuard to a route\nDESCRIPTION: This code snippet shows how to apply the `AuthGuard` to a route using the `@UseGuard` decorator.  This ensures that only authenticated users with the appropriate permissions can access the `findAllUsers` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, UseGuard } from '@midwayjs/core';\nimport { AuthGuard } from '@midwayjs/casbin';\nimport { Resource } from './resouce';\n\n@Controller('/')\nexport class HomeController {\n\n  @UseGuard(AuthGuard)\n  @Get('/users')\n  async findAllUsers() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new DTO from an existing DTO with PickDto/OmitDto\nDESCRIPTION: This snippet demonstrates how to create new DTOs (`SimpleUserDTO`, `NewUserDTO`) by picking or omitting properties from an existing DTO (`UserDTO`) using `PickDto` and `OmitDto` from `@midwayjs/validate`. It shows how to inherit a new DTO and define its properties based on the parent DTO. The generated DTOs will only contain the specified properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// src/dto/user.ts\nimport { Rule, RuleType, PickDto } from '@midwayjs/validate';\n\nexport class UserDTO {\n  @Rule(RuleType.number().required())\n  id: number;\n\n  @Rule(RuleType.string().required())\n  firstName: string;\n\n  @Rule(RuleType.string().max(10))\n  lastName: string;\n\n  @Rule(RuleType.number().max(60))\n  age: number;\n}\n\n// 继承出一个新的 DTO\nexport class SimpleUserDTO extends PickDto(UserDTO, ['firstName', 'lastName']) {}\n\n// const simpleUser = new SimpleUserDTO();\n// 只包含了 firstName 和 lastName 属性\n// simpleUser.firstName = xxx\n\nexport class NewUserDTO extends OmitDto(UserDTO, ['age']) {}\n\n// const newUser = new NewUserDTO();\n// newUser.age 定义和属性都不存在\n\n// 使用\nasync login(@Body() user: NewUserDTO) {\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Manual API call with query params\nDESCRIPTION: This snippet demonstrates how to manually call a Midway Hooks API using the `fetch` API and passing query parameters in the URL. It sends a GET request to `/api/articles?page=0&limit=10`. The response is then parsed as JSON and logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('/api/articles?page=0&limit=10')\n  .then((res) => res.json())\n  .then((res) => console.log(res)); // { page: '0', limit: '10'}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation with Max Size in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure log rotation based on file size. The `maxSize` property specifies the maximum size of a log file before it is rotated. The example sets the maximum size to 100MB.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    default: {\n      maxSize: '100m',\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Using app.getAppDir() to get the project root directory\nDESCRIPTION: This example shows how to use the `getAppDir()` method to retrieve the absolute path of the project's root directory. This path is useful for accessing project-related files and resources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getAppDir();\n// => /my_project\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Adapter for Socket.IO\nDESCRIPTION: This snippet shows how to configure a Redis adapter for Socket.IO in a MidwayJS application. It uses the `createRedisAdapter` utility provided by `@midwayjs/socketio` to create the adapter, specifying the Redis host and port. It depends on `@midwayjs/socketio` and `@midwayjs/bootstrap` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\nconst { Framework, createRedisAdapter } = require('@midwayjs/socketio');\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// 初始化 socket.io 框架\nconst socketFramework = new Framework().configure({\n  port: 3000,\n  adapter: createRedisAdapter({ host: '127.0.0.1', port: 6379 }),\n});\n\nBootstrap.load(socketFramework).run();\n```\n\n----------------------------------------\n\nTITLE: Inherit Existing Transport - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom transport by extending the `FileTransport` class in MidwayJS. This allows you to write logs to a file with custom formatting and buffering logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FileTransport, isEnableLevel, LoggerLevel, LogMeta } from '@midwayjs/logger';\n\n// Transport configuration\ninterface CustomOptions {\n   // ...\n}\n\nclass CustomTransport extends FileTransport {\n   log(level: LoggerLevel | false, meta: LogMeta, ...args) {\n     // Determine whether level satisfies the current Transport\n     if (!isEnableLevel(level, this.options.level)) {\n       return;\n     }\n    \n     // Format the message using built-in formatting methods\n     let buf = this.format(level, meta, args) as string;\n     //Add newline character\n     buf += this.options.eol;\n\n     //Write the log you want to write\n     if (this.options.bufferWrite) {\n       this.bufSize += buf.length;\n       this.buf.push(buf);\n       if (this.buf.length > this.options.bufferMaxLength) {\n         this.flush();\n       }\n     } else {\n       // If caching is not enabled, write directly\n       this.logStream.write(buf);\n     }\n   }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TransportManager } from '@midwayjs/logger';\n\nTransportManager.set('custom', CustomTransport);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         custom: {\n           dir: 'xxxx',\n           fileLogName: 'xxx',\n           // ...\n         }\n       }\n     }\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Retry Asynchronous Function with Delay in TypeScript\nDESCRIPTION: This example shows how to add a delay between retries when using `retryWithAsync`. The `retryInterval` option specifies the number of milliseconds to wait before attempting a retry. In this case, the function will wait 2 seconds (2000ms) before each retry. The function will retry 2 times in addition to the original call.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/retry.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst invokeNew = retryWithAsync(invoke, 2, {\n  retryInterval: 2000, //After the execution fails, continue to try again after 2s.\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Custom Context Logger\nDESCRIPTION: This code snippet demonstrates how to obtain a context logger for a custom logger within a Midway.js service.  It injects the Context object and uses the ctx.getLogger method to retrieve the context logger associated with the 'customLogger'.  The `customLogger.info('hello world')` logs a message to the custom logger with context information.  Requires `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  ctx: Context;\n\n  async getUser() {\n    // 这里获取的是 customLogger 对应的上下文日志对象\n    const customLogger = this.ctx.getLogger('customLogger');\n  \tcustomLogger.info('hello world');\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Error Filter in MidwayJS (TypeScript)\nDESCRIPTION: This snippet defines a MidwayJS error filter that catches `WeatherEmptyDataError` exceptions. The `catch` method logs the error and returns a custom HTML response to the client.  This centralizes error handling for a specific error type and provides a consistent user experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n//src/filter/weather.filter.ts\nimport { Catch } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { WeatherEmptyDataError } from '../error/weather.error';\n\n@Catch(WeatherEmptyDataError)\nexport class WeatherErrorFilter {\n  async catch(err: WeatherEmptyDataError, ctx: Context) {\n    ctx.logger.error(err);\n    return '<html><body><h1>weather data is empty</h1></body></html>';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON body in Tencent Cloud Gateway\nDESCRIPTION: This TypeScript code shows how to access the request body when using Tencent Cloud Gateway and a JSON object is sent in the body. The `ctx.request.body` will contain the body as a parsed Javascript object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\" B \"} => object\n```\n\n----------------------------------------\n\nTITLE: Creating an API Project from a Template\nDESCRIPTION: This command uses `npx degit` to clone the API template project from a GitHub repository into a directory named `hooks-app`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/intro.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit https://github.com/midwayjs/hooks/examples/api ./hooks-app\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Application with createWebSocketClient\nDESCRIPTION: Demonstrates testing a WebSocket application using the createWebSocketClient function from @midwayjs/mock.  This involves creating an application instance, creating a WebSocket client connected to the application, sending messages, receiving responses, validating results, and then closing both the client and the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createWebSocketClient } from '@midwayjs/mock';\nimport { sleep } from '@midwayjs/core';\n\n//... omit describe\n\nit('should test create websocket app', async () => {\n\n  // Create a service\n  const app = await createApp<Framework>();\n\n  // Create a client\n  const client = await createWebSocketClient('ws://localhost:3000');\n\n  const result = await new Promise(resolve => {\n\n    client.on('message', (data) => {\n      // xxxx\n      resolve(data);\n    });\n\n    // Send event\n    client.send(1);\n\n  });\n\n  // Judgment result\n  expect(JSON.parse(result)).toEqual({\n    name: 'harry',\n    result: 6\n  });\n\n  await sleep(1000);\n\n  // Close the client\n  await client.close();\n\n  // Close the server\n  await close(app);\n\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sleep } from '@midwayjs/core';\nimport { once } from 'events';\nimport { createApp, close, createWebSocketClient } from '@midwayjs/mock';\n\n//... omit describe\n\nit('should test create websocket app', async () => {\n\n  // Create a service\n  const app = await createApp<Framework>(process.cwd());\n\n  // Create a client\n  const client = await createWebSocketClient('ws://localhost:3000');\n\n  // Send event\n  client.send(1);\n\n  // Monitor with promise writing of events\n  let gotEvent = once(client, 'message');\n  // Waiting for return\n  let [data] = await gotEvent;\n\n  // Judgment result\n  expect(JSON.parse(data)).toEqual({\n    name: 'harry',\n    result: 6\n  });\n\n  await sleep(1000);\n\n  // Close the client\n  await client.close();\n\n  // Close the server\n  await close(app);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC service with Protocol Buffers\nDESCRIPTION: This code defines a gRPC service named `Greeter` using Protocol Buffers. It includes a `SayHello` method that takes a `HelloRequest` message as input and returns a `HelloReply` message. The messages define the structure of the request and response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloworld;\n\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n\nmessage HelloReply {\n  string message = 1;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Caching gRPC Service Instance using @Init (TypeScript)\nDESCRIPTION: This code demonstrates how to cache a gRPC service instance to a property using the `@Init` decorator. This allows for reusing the same service instance across multiple method calls within the class, improving performance. Dependencies include `@midwayjs/core` and `@midwayjs/grpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  GrpcMethod,\n  MSProviderType,\n  Provider,\n  Inject,\n  Init,\n} from '@midwayjs/core';\nimport { helloworld, hero } from '../interface';\nimport { Clients } from '@midwayjs/grpc';\n\n@Provider(MSProviderType.GRPC, { package: 'hero' })\nexport class HeroService implements hero.HeroService {\n  // 注入客户端\n  @Inject()\n  grpcClients: Clients;\n\n  greeterService: helloworld.GreeterClient;\n\n  @Init()\n  async init() {\n    // 赋值一个服务实例\n    this.greeterService = this.grpcClients.getService<helloworld.GreeterClient>(\n      'helloworld.Greeter'\n    );\n  }\n\n  @GrpcMethod()\n  async findOne(data) {\n    // 调用服务\n    const result = await greeterService.sayHello()\n    \t.sendMessage({\n        name: 'harry'\n      });\n\n    // 返回结果\n    return result;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Local Testing of API Gateway Handler\nDESCRIPTION: This code snippet demonstrates how to locally test the API Gateway handler defined in the previous example. It uses `@midwayjs/mock` to create a function app and simulate HTTP requests. It sends a POST request to the `api_gateway_aliyun` endpoint with a `name` parameter and asserts that the response matches the expected output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_apigw.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Framework } from '@midwayjs/serverless-app';\nimport { createInitializeContext } from '@midwayjs/serverless-fc-trigger';\nimport { createFunctionApp, createHttpRequest } from '@midwayjs/mock';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n  let instance: HelloAliyunService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(),\n    });\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from http trigger', async () => {\n    const result = await createHttpRequest(app).post('api_gateway_aliyun').send({\n      name: 'zhangting',\n    });\n\n    expect(result.text).toEqual('hello zhangting');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Midway Test Component\nDESCRIPTION: Configures the `midway-test-component` within a Midway.js application. This involves importing the component and adding it to the `imports` array within the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-resource/midway-test-component/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport { ILifeCycle } from '@midwayjs/core';\nimport * as test from 'midway-test-component';\n\n@Configuration({\n  imports: [\n    test\n  ]\n})\nexport class ContainerConfiguration implements ILifeCycle {\n  async onReady(): Promise<void> {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules with UserDTO (TypeScript)\nDESCRIPTION: This code defines a DTO (Data Transfer Object) class named UserDTO with validation rules using the `@Rule` decorator. Each property (id, firstName, lastName, age) is annotated with rules for type, requirement, and constraints,leveraging joi via RuleType.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/dto/user.ts\nimport { Rule, RuleType } from '@midwayjs/decorator';\n\nexport class UserDTO {\n  @Rule(RuleType.number().required())\n  id: number;\n\n  @Rule(RuleType.string().required())\n  firstName: string;\n\n  @Rule(RuleType.string().max(10))\n  lastName: string;\n\n  @Rule(RuleType.number().max(60))\n  age: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting DataSource Instance\nDESCRIPTION: This code shows how to retrieve a data source instance using the injected `MySqlDataSourceManager` and its `getDataSource` method. It demonstrates how to access the data source in a service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MySqlDataSourceManager } from './manager/mysqlDataSourceManager';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  mysqlDataSourceManager: MySqlDataSourceManager;\n\n  async invoke() {\n\n    const dataSource = this.mysqlDataSourceManager.getDataSource('dataSource1');\n    // TODO\n\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Controller with Route\nDESCRIPTION: This code demonstrates how to create a simple controller in MidwayJS that handles a GET request to the root route ('/'). It uses the `@Controller` and `@Get` decorators from `@midwayjs/decorator` to define the controller and the route handler. The controller returns a simple string, which will be sent as a `text/plain` response with a 200 status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  async home() {\n    return 'Hello Midwayjs!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Headers in HTTP Requests (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add custom headers to an HTTP request using the `set` method of the `createHttpRequest` client. This is useful for testing routes that require specific headers. The `query` method is used to send query parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app)\n  .get('/set_header')\n  .set({\n    'x-bbb': '123',\n  })\n  .query({ name: 'harry' });\n```\n\n----------------------------------------\n\nTITLE: Accessing body in Alibaba Cloud HTTP Trigger (application/json)\nDESCRIPTION: This TypeScript code shows how to access the request body when using Alibaba Cloud HTTP trigger. The `ctx.request.body` is assigned to the `body` variable which is then returned in an object along with it's type. The `body` variable's type will depend on the structure of the JSON.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = this.ctx.request.body;\nreturn {\n  type: typeof body,\n  body\n};\n```\n\n----------------------------------------\n\nTITLE: Using MidwayApplicationManager to Access Applications\nDESCRIPTION: This snippet demonstrates how to use the `MidwayApplicationManager` to retrieve and manipulate multiple applications (koa, faas, express, egg) by injecting the service and using the `getApplications` method, then attaching a custom middleware to each.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayApplicationManager, Configuration, Inject } from '@midwayjs/core';\nimport { CustomMiddleware } from './middleware/custom.middleware';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  applicationManager: MidwayApplicationManager;\n\n  async onReady() {\n    this.applicationManager\n      .getApplications(['koa', 'faas', 'express', 'egg'])\n      .forEach(app => {\n        app.useMiddleware(CustomMiddleware);\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Configuration with Shared Port in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the `@midwayjs/ws` module to reuse a port already used by other MidwayJS web frameworks like `@midwayjs/koa`.  By omitting the `port` configuration in the `webSocket` object, the WebSocket server will integrate with the existing HTTP service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    port: 7001\n  }\n  webSocket: {\n  \t// No configuration here\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Global Prefix at Route Level\nDESCRIPTION: This code snippet shows how to ignore the global route prefix for a specific route within a controller. The `ignoreGlobalPrefix` option is set to `true` in the `@Get` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  // This route will not be ignored\n  @Get('/', {})\n  async homeSet() {\n  }\n\n  // The route ignores the global prefix\n  @Get('/bbc', {ignoreGlobalPrefix: true})\n  async homeSet2() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Config Definition in MidwayJS\nDESCRIPTION: This feature introduces component and framework configuration definitions in MidwayJS. This provides a structured and centralized way to manage application configurations, improving maintainability and scalability.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Enabling Swagger Component in configuration.ts\nDESCRIPTION: This TypeScript code snippet demonstrates how to enable the Swagger component by importing and adding it to the `imports` array in the `configuration.ts` file. This registers the Swagger module within the MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as swagger from '@midwayjs/swagger';\n\n@Configuration({\n  imports: [\n    // ...\n    swagger\n  ]\n})\nexport class MainConfiguration {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Timer-Triggered Function with Every - TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a timer-triggered function using the `@ServerlessTrigger` decorator in MidwayJS, specifying an 'every' expression for the execution schedule (fixed time interval). It assumes the same imports as the cron example. The 'every' expression '5m' triggers the function every 5 minutes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_timer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ServerlessTrigger(ServerlessTriggerType.TIMER, {\n  type: 'every',\n  value: '5m', // 每隔 5 分钟，最小为 1 分钟\n})\n```\n\n----------------------------------------\n\nTITLE: Local Testing of OSS Trigger\nDESCRIPTION: This code snippet demonstrates how to perform local testing of an OSS trigger function using `@midwayjs/mock`.  It creates a function app, gets an instance of the service, and then calls the handler with a mock OSS event created using `createOSSEvent` from `@midwayjs/serverless-fc-trigger`. This allows developers to test their OSS event handlers without deploying to the cloud.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_oss.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\nimport { createOSSEvent, createInitializeContext } from '@midwayjs/serverless-fc-trigger';\nimport { join } from 'path';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n  let instance: HelloAliyunService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(),\n    });\n    instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from oss trigger', async () => {\n    expect(await instance.handleOSSEvent(createOSSEvent())).toEqual('hello world');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding a Router Function\nDESCRIPTION: This code snippet shows how to dynamically add a router function using the `addRouter` method of `MidwayWebRouterService`. It includes both koa/egg and express formats.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, Inject, MidwayWebRouterService } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  async onReady() {\n    // koa/egg 格式\n    this.webRouterService.addRouter(async (ctx) => {\n      return 'hello world';\n    }, {\n      url: '/api/user',\n      requestMethod: 'GET',\n    });\n\t\t// ...\n\n    // express 格式\n    this.webRouterService.addRouter(async (req, res) => {\n      return 'hello world';\n    }, {\n      url: '/api/user',\n      requestMethod: 'GET',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Add Web Controller - MidwayJS - TypeScript\nDESCRIPTION: Demonstrates how to dynamically add a web controller in MidwayJS.  It requires a controller class decorated with `@Provide`, but *without* the `@Controller` decorator. The `addController` method of the `MidwayWebRouterService` is used to register the controller at runtime. The first argument is the controller class, and the second is an object with `prefix` and `routerOptions` properties, similar to the `@Controller` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Get, Provide } from '@midwayjs/core';\n\n// Note that @Controller decoration is not used here\n@Provide()\nexport class DataController {\n  @Get('/query_data')\n  async getData() {\n    return 'hello world';\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { MidwayWebRouterService, Configuration, Inject } from '@midwayjs/core';\nimport { DataController } from './controller/data.controller';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  async onReady() {\n    if (process.env.NODE_ENV === 'test') {\n      this.webRouterService.addController(DataController, {\n        prefix: '/test',\n        routerOptions: {\n          middleware: [\n            // ...\n          ]\n        }\n      });\n    }\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Strategy in TypeScript\nDESCRIPTION: Define a GitHub OAuth strategy using `@CustomStrategy` and extending `PassportStrategy`. This strategy requires `passport-github` to be installed. The `validate` method processes the user profile, and the `getStrategyOptions` method configures the strategy with client ID, secret, and callback URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// github-strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, StrategyOptions } from 'passport-github';\n\nconst GITHUB_CLIENT_ID = 'xxxxxx', GITHUB_CLIENT_SECRET = 'xxxxxxxx';\n\n@CustomStrategy()\nexport class GithubStrategy extends PassportStrategy(Strategy, 'github') {\n  async validate(...payload) {\n    return payload;\n  }\n  getStrategyOptions() {\n    return {\n      clientID: GITHUB_CLIENT_ID,\n      clientSecret: GITHUB_CLIENT_SECRET,\n      callbackURL: 'https://127.0.0.1:7001/auth/github/cb'\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Multi-Framework in One Process - Feature\nDESCRIPTION: This feature enables running multiple frameworks within a single process. This allows for better resource utilization and simplified deployment scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Defining String Type with ApiProperty\nDESCRIPTION: This TypeScript code shows how to explicitly define the type of a property as a string using the `type` attribute in the `@ApiProperty` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiProperty({\n  type: 'string',\n  // ...\n})\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Binding Multiple Routes to a Single Method\nDESCRIPTION: This example demonstrates how to bind multiple routes to the same handler method using multiple `@Get` decorators. Both `/` and `/main` routes will execute the `home` method, returning the same response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/')\n@Get('/main')\nasync home() {\n  return 'Hello Midwayjs!';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deep Level Config Decorator - TypeScript\nDESCRIPTION: This snippet demonstrates how to access configuration values nested deep within the configuration object using the `@Config` decorator and a chained key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from '@midwayjs/decorator';\n\nexport class IndexHandler {\n  @Config('userService.appname.test.data')\n  data;\n\n  async handler() {\n    console.log(this.data); // xxx\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Instance Creation (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a new HTTP client instance dynamically using the `createInstance` method of the `ServiceFactory`.  This allows runtime creation of clients with specific configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPClientServiceFactory } from './service/httpClientServiceFactory';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  serviceFactory: HTTPClientServiceFactory;\n\n  async invoke() {\n\n    // 会合并 config.bucket3 和 config.default\n    let customHttpClient = await this.serviceFactory.createInstance({\n    \tbaseUrl: 'xxxxx'\n    }, 'custom');\n\n    // 传了名字之后也可以从 factory 中获取\n    customHttpClient = this.serviceFactory.get('custom');\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retry Asynchronous Function and Throw Original Error in TypeScript\nDESCRIPTION: This snippet shows how to configure `retryWithAsync` to throw the original error object instead of `MidwayRetryExceededMaxTimesError` when the maximum number of retries is exceeded.  Setting `throwOriginError` to `true` achieves this. The function will retry 2 times in addition to the original call.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/retry.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst invokeNew = retryWithAsync(invoke, 2, {\n  throwOriginError: true\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Entity Model with Decorator (Pseudo-code)\nDESCRIPTION: This code snippet demonstrates how a custom decorator (InjectEntityModel) might be used to inject a Model (data access object) corresponding to an entity class into a service. This decorator is pseudo-code, as it is not defined in the provided text.  It indicates the possibility of obtaining data source objects from entities. It requires external ORM dependencies which are not defined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// The following is the pseudo code\nimport { SimpleUser } from '../entity/user.entity';\n\nclass UserService {\n  // A Model corresponding to the entity class will be injected here, including adding, deleting, modifying and checking methods.\n  @InjectEntityModel(SimpleUser)\n  userModel;\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Server Build Script\nDESCRIPTION: This bash script outlines the steps to build a Midway application for server deployment. It includes installing dependencies, building the project using `npm run build`, and removing development dependencies using `npm prune --production`. This script ensures a clean production environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n## Server build (code downloaded)\n$ npm install             # installation and development period dependency\n$ npm run build           # build project\n$ npm prune --production  # remove development dependencies\n\n## Local build (dev dependency has been installed)\n$ npm run build\n$ npm prune --production  # remove development dependencies\n```\n\n----------------------------------------\n\nTITLE: Accessing body from text/html POST request\nDESCRIPTION: This TypeScript code shows how to access the request body after it has been decoded. The `ctx.request.body` will contain the decoded string from the base64 encoded body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // '{\"c\":\" B \"}' => string\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Directory Scan\nDESCRIPTION: This code snippet illustrates configuring a directory scan for entity classes, allowing entities to be automatically associated with a data source based on their location. It shows examples of using specific directories, wildcards, and suffix matching to define the scan scope. The snippet assumes the second parameter of the initDataSource method is used as relative path search, with default as baseDir (src or dist).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nimport { User, SimpleUser } from '../entity/user.entity';\n\nexport default {\n  mysql: {\n    dataSource: {\n      dataSource1: {\n        host: 'localhost',\n        user: 'root',\n        database: 'test',\n        entities: [\n          User\n          SimpleUser\n           'entity', // specific directory (equivalent to directory wildcard)\n           '**/abc/**', // Only get files in directories containing abc characters\n           'abc/**/*.ts', // specific directory + wildcard\n           'abc/*.entity.ts', // match suffix\n           '**/*.entity.ts', // wildcard plus suffix match\n           '**/*.{j,t}s', // suffix match\n        ]\n      },\n      // ...\n      // ...\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Directly Using Axios - TypeScript\nDESCRIPTION: This snippet shows how to directly use the underlying axios instance that `@midwayjs/axios` exposes. This avoids needing to inject the HttpService.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Axios } from '@midwayjs/axios';\nimport { ReadStream, createWriteStream } from 'fs';\nimport { finished } from 'stream/promises';\n\nasync function download(url: string, filename: string) {\n  const writer = await createWriteStream(filename);\n  const res = Axios.get<ReadStream>(url, {\n    responseType: 'stream',\n  });\n  res.data.pipe(writer);\n  await finished(writer);\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Client Port Configuration\nDESCRIPTION: This snippet demonstrates how to configure the port in the Socket.IO client to match the server's port configuration, ensuring proper connection establishment.  It shows examples for both the standard `socket.io-client` and Midway's testing client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// socket.io client\nconst socket = io('************:7001', {\n  //...\n});\n\n// midway's socket.io test client\nconst client = await createSocketIOClient({\n  port: 7001\n});\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Streaming Proto (protobuf)\nDESCRIPTION: This code snippet demonstrates how to define a gRPC service with streaming capabilities in a protobuf file.  The `stream` keyword is used to indicate that a parameter is part of a stream.  The service defines bidirectional, server-to-client, and client-to-server streaming methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage math;\n\nmessage AddArgs {\n  int32 id = 1;\n  int32 num = 2;\n}\n\nmessage Num {\n  int32 id = 1;\n  int32 num = 2;\n}\n\nservice Math {\n  rpc Add (AddArgs) returns (Num) {\n  }\n\n\t// 双向流\n  rpc AddMore (stream AddArgs) returns (stream Num) {\n  }\n\n  // 服务端往客户端推\n  rpc SumMany (AddArgs) returns (stream Num) {\n  }\n\n  // 客户端往服务端推\n  rpc AddMany (stream AddArgs) returns (Num) {\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Use @Trace Decorator\nDESCRIPTION: This code shows how to use the `@Trace` decorator provided by the Midway.js OTEL component to add link nodes to methods for tracing purposes. The decorator takes a node name as input, which will be associated with the link node, and records the method's execution time and status.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserService {\n\n  @Trace('user.get')\n  async getUser() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: f.yml Structure Example in YAML\nDESCRIPTION: This YAML snippet shows an example structure of the f.yml file. It defines the service name, provider details (e.g., aliyun, runtime, role), functions with their handlers and events, layers, and custom configurations such as custom domains. It illustrates how to configure multiple functions (hello1, hello2, hello3) with different handlers and HTTP event triggers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice: serverless-hello-world\n\nprovider:\n  name: aliyun\n  runtime: nodejs10\n  role: acs:ram::1647796581073291:role/aoneserverlesstestrole\n\nfunctions:\n  hello1:\n    handler: entry.handler\n    events:\n      - http:\n          path: /foo\n          method:\n            - GET\n            - POST\n  hello2:\n    handler: entry.handler2\n    events:\n      - http:\n          path: /foo\n          method:\n            - GET\n            - POST\n  hello3:\n    handler: test.handler2\n    events:\n      - http:\n          path: /foo\n          method:\n            - GET\n            - POST\n\nlayers:\n  test:\n    path: npm:@midwayjs/egg-layer@latest\n\ncustom:\n  customDomain:\n    domainName: midway-fc.xxxx.com\n```\n\n----------------------------------------\n\nTITLE: Consuming gRPC Server Stream with Promise in Typescript\nDESCRIPTION: This snippet shows how to consume a gRPC server stream on the client-side using Promises in TypeScript.  It calls `service.sumMany()` to initiate the stream and uses `result.forEach` to iterate over the received data. This approach waits for all data to be received before processing.  It requires the gRPC service client to be available (service).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Server push\nlet total = 0;\nlet result = await service.sumMany().sendMessage({\n  num: 1\n});\n\nresult.forEach(data => {\n  total += data.num;\n});\n\n// total = 9;\n\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Routes\nDESCRIPTION: The example shows how routes are prioritized in Midway based on specificity, length, and wildcard usage. Specifically, `/invoke/abc` will be registered first, making it have a higher priority over `/invoke/*`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api')\nexport class APIController {\n  @Get('/invoke/*')\n  async invokeAll() {}\n\n  @Get('/invoke/abc')\n  async invokeABC() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Dependencies to package.json\nDESCRIPTION: This JSON snippet shows how to add `@midwayjs/grpc` and `@midwayjs/grpc-helper` as dependencies in the `package.json` file. `@midwayjs/grpc` is a runtime dependency, while `@midwayjs/grpc-helper` is a development dependency used for generating gRPC service definitions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/grpc\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    \"@midwayjs/grpc-helper\": \"^1.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Prometheus Targets in JSON\nDESCRIPTION: Defines the targets.json file, which specifies the IP address and port of the Node.js application to be monitored by Prometheus.  It includes labels for identifying the environment and job.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"targets\": [\"${ip}:7001\"]\n    \"labels\": {\n      \"env\": \"prod \",\n      \"job\": \"api\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Column\nDESCRIPTION: This TypeScript code shows how to define a simple column in a Sequelize model using the `@Column` decorator. The type of the column is inferred from the JavaScript type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, Column } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @Column\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Data Source via Manager - TypeScript\nDESCRIPTION: This snippet demonstrates how to obtain a TypeORM data source in a MidwayJS application using the `TypeORMDataSourceManager`. The `TypeORMDataSourceManager` is injected into the `MainConfiguration` class, and the `getDataSource` method is used to retrieve a specific data source by its name (e.g., 'default'). The `isConnected` method checks the connection status of the retrieved data source.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { TypeORMDataSourceManager } from '@midwayjs/typeorm';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n    const dataSourceManager = await container.getAsync(TypeORMDataSourceManager);\n  \tconst conn = dataSourceManager.getDataSource('default');\n    console.log(dataSourceManager.isConnected(conn));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logger Access with useLogger in TypeScript\nDESCRIPTION: This snippet demonstrates how to use `useLogger` to retrieve the logger instance within a Midway application. It allows logging messages at different levels (debug, info, warn, error).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_builtin.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst logger = useLogger();\n```\n\n----------------------------------------\n\nTITLE: Local Testing of API Gateway Function with MidwayJS\nDESCRIPTION: This snippet showcases local testing of the API Gateway function using @midwayjs/serverless-app and @midwayjs/mock.  It creates a function app, defines a test case, and uses createHttpRequest to simulate an HTTP request to the API Gateway endpoint. It expects the response text to match the expected output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_apigw.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Framework } from '@midwayjs/serverless-app';\nimport { createFunctionApp, createHttpRequest } from '@midwayjs/mock';\n\ndescribe('test/hello_tencent.test.ts', () => {\n  let app: Application;\n  let instance: HelloTencentService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>();\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from http trigger', async () => {\n    const result = await createHttpRequest(app).post('api_gateway_tencent').send({\n      name: 'zhangting',\n    });\n\n    expect(result.text).toEqual('hello zhangting');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Configuration - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to configure the Bootstrap class from `@midwayjs/bootstrap` with various options such as imports and global configuration. The `configure` method allows passing in settings like component imports and environment-specific configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap\n  .configure({\n  \timports: [/*...*/]\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Getting Query Parameters from API Context\nDESCRIPTION: Demonstrates how to access query parameters using the `ctx.query` object within a controller. The `getUser` method retrieves all query parameters from the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\nimport { Controller, Get, Inject } from \"@midwayjs/core\";\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async getUser(): Promise<User> {\n    const query = this.ctx.query;\n    // {\n    //   uid: '1',\n    //   sex: 'male',\n    // }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Property Decorator Logic\nDESCRIPTION: This code shows how to implement the logic associated with the `@MemoryCache` property decorator. It registers a property handler using `MidwayDecoratorService.registerPropertyHandler`. This handler retrieves data from the `MemoryStore` based on the key provided to the decorator. It injects `MidwayDecoratorService` and `MemoryStore`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject, Init, MidwayDecoratorService } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { MEMORY_CACHE_KEY, MemoryStore } from 'decorator/memoryCache.decorator';\n\n@Configuration({\n  imports: [koa],\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  store: MemoryStore;\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Init()\n  async init() {\n    // ...\n\n    // 实现装饰器\n    this.decoratorService.registerPropertyHandler(MEMORY_CACHE_KEY, (propertyName, meta) => {\n      return this.store.get(meta.key);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Unhealthy Services from Consul\nDESCRIPTION: This TypeScript snippet retrieves unhealthy services from Consul using the BalancerService. The second parameter of the `select` method, set to `false`, specifies that unhealthy services should be returned.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/core';\nimport { BalancerService } from '@midwayjs/consul'\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  balancerService: BalancerService;\n\n  @Get('/')\n  async home() {\n\n    const service = await this.balancerService\n      .getServiceBalancer()\n      .select('my-midway-project', false);\n\n    console.log(service);\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EggJS Configuration Definition in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the standard EggJS configuration writing style within a Midway application, providing complete definitions and attribute suggestions. It exports a function that returns a configuration object, which will be automatically executed and merged into the complete configuration object at runtime. The configuration includes settings for keys, middleware, security (CSRF disabled), and Sequelize.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/config/config.default.ts\n\nimport { EggAppConfig, EggAppInfo, PowerPartial } from 'egg';\n\nexport type DefaultConfig = PowerPartial<EggAppConfig>;\n\nexport default (appInfo: EggAppInfo) => {\n  const config = {} as DefaultConfig;\n\n  // use for cookie sign key, should change to your own and keep security\n  config.keys = appInfo.name + '_1600001669991_8079';\n\n  // add your middleware here\n  config.middleware = [];\n\n  config.security = {\n    csrf: {\n      enable: false,\n    },\n  };\n\n  config.sequelize = {};\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Response Headers with @SetHeader\nDESCRIPTION: This code shows how to set multiple response headers using the `@SetHeader` decorator with an object. The `home` method sets both the `x-bbb` and `x-ccc` headers with their respective values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Provide, SetHeader } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  @SetHeader({\n    'x-bbb': '123',\n    'x-ccc': '234',\n  })\n  async home() {\n    return 'Hello Midwayjs!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing string body in Alibaba Cloud HTTP Trigger\nDESCRIPTION: This TypeScript code shows how to access the request body when using Alibaba Cloud HTTP trigger and a string is sent in the body. The `ctx.request.body` will contain the body as a string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // \"bbb\" => string\n```\n\n----------------------------------------\n\nTITLE: Throwing a basic MidwayError in TypeScript\nDESCRIPTION: This snippet demonstrates how to throw a `MidwayError` with a custom message within a MidwayJS application. It requires importing `MidwayError` from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_error.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayError } from '@midwayjs/core';\n\n// ...\n\nasync findAll() {\n  throw new MidwayError('my custom error');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating midway.config.ts for Hooks Configuration (TypeScript)\nDESCRIPTION: This code defines the configuration for @midwayjs/hooks. It specifies the source directory for hook functions and defines a route with a base directory 'lambda' and a base path '/api'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_bff.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@midwayjs/hooks';\n\nexport default defineConfig({\n  source: './src',\n  routes: [\n    {\n      baseDir: 'lambda',\n      basePath: '/api',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Default MIME Type Validation\nDESCRIPTION: This snippet shows how to use the `DefaultUploadFileMimeType` variable provided by the `@midwayjs/busboy` component. This variable contains MIME data for common file extensions, providing a convenient way to set a default MIME validation rule for file uploads.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList, DefaultUploadFileMimeType } from '@midwayjs/busboy';\nexport default {\n  // ...\n  busboy: {\n    // ...\n    // Extension whitelist\n    whitelist: uploadWhiteList,\n    // Only the following file types are allowed to be uploaded\n    mimeTypeWhiteList: DefaultUploadFileMimeType,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Feature Grouping in MidwayJS (Typescript)\nDESCRIPTION: This snippet illustrates the mock feature grouping functionality introduced in MidwayJS 3.19.0.  It demonstrates how to create mocks with specific group names and subsequently restore or clean mocks based on these groups. It utilizes `mockProperty` and `mockContext` to create mocks for an object property and the application context, respectively. `restoreMocks` is used to restore mocks of a specific group, and `restoreAllMocks` restores all mocks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-11-08-release-3.19.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockContext, restoreMocks } from '@midwayjs/mock';\n\nit('should test mock with groups', async () => {\n  const app = await createApp();\n\n  // 创建普通对象的 mock\n  const a = {};\n  mockProperty(a, 'getUser', async () => {\n    return 'midway';\n  }, 'group1');\n\n  // 创建上下文的 mock\n  mockContext(app, 'user', 'midway', 'group1');\n  mockContext(app, 'role', 'admin', 'group2');\n\n  // 恢复单个分组\n  restoreMocks('group1');\n\n  // 恢复所有分组\n  restoreAllMocks();\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Proxy Configuration Interface\nDESCRIPTION: This TypeScript interface defines the structure for configuring an HTTP proxy. It specifies properties like match (a regular expression to match URLs), host (the target host), target (a URL target with capture groups), proxyTimeout (timeout for the proxy request), and ignoreHeaders (headers to ignore during forwarding).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/http-proxy.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// proxy configuration type\nexport interface HttpProxyConfig {\n  // Match the URL regular expression to be represented\n  match: RegExp;\n  // Replace the host of the matching link and proxy the request to this address.\n  host?: string;\n  // Capture group processing proxy addresses through regular expressions\n  target?: string;\n  // The timeout time of the forwarding request. The default time is 0. No timeout time is set.\n  proxyTimeout?: number;\n  // Ignore the fields in the header forwarded by the proxy request\n  ignoreHeaders ?: {\n    [key: string]: boolean;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: IndexDataService Class (TypeScript)\nDESCRIPTION: This code defines the `IndexDataService` class, which is responsible for fetching and providing index data. It uses `@Singleton()` and `@Config()` decorators from `@midwayjs/core`. The `fetchIndex` method is separated for easier mocking.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/indexData.service.ts\nimport { Singleton, makeHttpRequest, Singleton } from '@midwayjs/core';\n\n@Singleton()\nexport class IndexDataService {\n  \n  @Config('index')\n  indexConfig: {indexUrl: string};\n\n  private indexData;\n\n  async load() {\n    // 从远端获取数据\n    this.indexData = await this.fetchIndex(this.indexConfig.indexUrl);\n  }\n  \n  public getData() {\n    if (!this.indexData) {\n      // 数据不存在，就加载一次\n      this.load();\n    }\n    return this.indexData;\n  }\n\n  async fetchIndex(url) {\n    return makeHttpRequest<Record<string, any>>(url, {\n      method: 'GET',\n      dataType: 'json',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Associating Entities\nDESCRIPTION: This snippet demonstrates how to explicitly associate entity classes with specific data sources using the `entities` configuration property in `config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nimport { User, SimpleUser } from '../entity/user.entity';\n\nexport default {\n  mysql: {\n    dataSource: {\n      dataSource1: {\n        host: 'localhost',\n        user: 'root',\n        database: 'test',\n        entities: [User]\n      },\n      dataSource2: {\n        host: 'localhost',\n        user: 'root',\n        database: 'test',\n        entities: [SimpleUser]\n      },\n      // ...\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Jest Timeout Setup\nDESCRIPTION: This snippet shows how to configure the Jest timeout in a `jest.setup.js` file. The `jest.setTimeout()` function sets the maximum time (in milliseconds) a test can run before Jest considers it timed out.  This is helpful for tests that involve asynchronous operations or long-running tasks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.setup.js\njest.setTimeout(30000);\n\n```\n\n----------------------------------------\n\nTITLE: Default static plugin config for @midwayjs/web\nDESCRIPTION: This snippet shows the default configuration for the static plugin in @midwayjs/web. The `prefix` defines the URL path prefix for accessing static files, while `dir` specifies the directory where static files are stored.  It relies on the appInfo object to build the static path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/static_file.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tprefix: '/public/',\n  dir: path.join(appInfo.baseDir, 'app/public'),\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Try/Catch\nDESCRIPTION: This code shows how to catch validation errors using a try/catch block. It demonstrates how to access the error code and message from the `error.data` object after parsing the JSON message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  // 调用接口\n} catch (error) {\n  console.log(error.data.code); // VALIDATION_FAILED\n  console.log(\n    JSON.parse(error.data.message)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout - TypeScript\nDESCRIPTION: This snippet demonstrates how to set a timeout for the HTTP request.  The `timeout` property is set to 500 milliseconds.  The code includes a try/catch block to handle potential timeout errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nlet err;\n// 超时会报错，注意 catch\ntry {\n  const result = await makeHttpRequest('http://127.1:7001/', {\n    method: 'GET',\n    dataType: 'text',\n    timeout: 500,\n  });\n} catch (e) {\n  err = e;\n}\n```\n\n----------------------------------------\n\nTITLE: Add JWT Dependency\nDESCRIPTION: This JSON snippet shows how to add the `@midwayjs/jwt` component as a dependency in your `package.json` file. This is an alternative way to install the component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/jwt.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/jwt\": \"^3.0.0\"\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Trigger with @ServerlessTrigger - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@ServerlessTrigger` decorator to bind an event trigger to a MidwayJS Serverless function. It imports necessary modules from `@midwayjs/decorator` and `@midwayjs/faas`.  The `handleEvent` method is decorated with `@ServerlessTrigger` and takes an event object as input, returning the event itself. The `ServerlessTriggerType.EVENT` specifies that this is an event trigger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_event.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context, FC } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.EVENT)\n  async handleEvent(event: any) {\n    return event;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rapid Single Service Startup - mwtsc - JSON\nDESCRIPTION: This code snippet demonstrates the configuration for rapidly starting a single service using `mwtsc`. It leverages the `mwtsc` tool for code building and the `@midwayjs/mock` package to run the application. It initializes the service using a built-in API without going through `bootstrap.js` and operates in a single process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"mwtsc --watch --run @midwayjs/mock/app.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT Middleware\nDESCRIPTION: This snippet demonstrates how to enable the JWT middleware within the MidwayJS application. It imports the middleware and adds it to the app.useMiddleware array in the onReady lifecycle hook.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/jwt.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { Configuration, App, IMidwayContainer, IMidwayApplication} from '@midwayjs/core';\nimport * * as jwt from '@midwayjs/jwt';\n\n@Configuration({\n  imports: [\n    // ...\n    jwt\n  ],\n})\nexport class MainConfiguration {\n\n  @App()\n  app: IMidwayApplication;\n\n  async onReady(applicationContext: IMidwayContainer): Promise<void> {\n    // Add middleware\n    this.app.useMiddleware ([\n      // ...\n      JwtMiddleware\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP/API Gateway Trigger Handler\nDESCRIPTION: This snippet demonstrates a serverless function handler specifically designed for HTTP and API Gateway triggers in Midway Serverless.  It shows how to access and return data using the `ctx` object. It demonstrates returning a simple string from the handler function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_context.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\nimport { Provide } from '@midwayjs/core';\n\n@Provide()\nexport class Index {\n\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(...)\n  async handler() {\n    // The following two writing methods are the same\n    // this.ctx.body = 'hello world';\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Upload Middleware Globally (@midwayjs/express)\nDESCRIPTION: This TypeScript code demonstrates how to configure the UploadMiddleware from @midwayjs/busboy globally for a MidwayJS application using Express. All routes will have the upload middleware applied.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\nimport { Application } from '@midwayjs/express';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App('express')\n  app: Application;\n  \n  async onReady() {\n    this.app.useMiddleware(busboy.UploadMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create POST request with body parameters\nDESCRIPTION: This snippet demonstrates how to create a POST request with body parameters using `createHttpRequest`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app)\n  .post('/user/catchThrowWithValidate')\n  .send({id: '1'});\n```\n\n----------------------------------------\n\nTITLE: Component Export Configuration (TypeScript)\nDESCRIPTION: This code snippet shows how to export the component's configuration class to make it accessible from other parts of the application. It exports the `BookConfiguration` class as `Configuration` from the component's entry point.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/components/book/src/index.ts\nexport { BookConfiguration as Configuration } from './bookConfiguration/src';\n```\n\n----------------------------------------\n\nTITLE: Starting the Midway.js Application\nDESCRIPTION: These commands first use npm to run the `dev` script defined in `package.json`, which starts the Midway.js development server. Then, it opens the application in the default web browser at `http://localhost:7001`.  Make sure the application builds successfully before running these commands.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quickstart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n$ open http://localhost:7001\n```\n\n----------------------------------------\n\nTITLE: Before Object Destroy Hook in MidwayJS (onBeforeObjectDestroy)\nDESCRIPTION: This code snippet demonstrates the `onBeforeObjectDestroy` lifecycle hook in MidwayJS. It allows developers to execute code before the object instance is destroyed.  The function receives the object to be destroyed (`ins`) and options, including the container context and object definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/lifecycle.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectBeforeDestroyOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onBeforeObjectDestroy(ins: any, options: ObjectBeforeDestroyOptions): Promise<void> {\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using useInject to Get Injected Instance in TypeScript\nDESCRIPTION: This snippet illustrates how to retrieve an injected `Model` instance using `useInject`.  It imports the `useInject` hook from `@midwayjs/hooks` and uses it to obtain a `Model` instance. Requires `@midwayjs/decorator` for the `@Provide` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_builtin.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useInject } from '@midwayjs/hooks';\nimport { Provide } from '@midwayjs/decorator';\n\nexport async function getModel() {\n  const model = await useInject(Model);\n  return model.name;\n}\n\n@Provide()\nexport class Model {\n  name = 'model';\n}\n```\n\n----------------------------------------\n\nTITLE: File-Level Middleware Definition\nDESCRIPTION: This example illustrates how to define file-level middleware in an API file. The `config.middleware` property is exported to apply the middleware to all API functions within the file. Requires `@midwayjs/hooks` dependency and imports the logger middleware from another file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_middleware.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiConfig } from '@midwayjs/hooks';\nimport logger from './logger';\n\n// File Level Middleware\nexport const config: ApiConfig = {\n  middleware: [logger],\n};\n\nexport default async (message: string) => {\n  return { type: 'POST', message };\n};\n```\n\n----------------------------------------\n\nTITLE: Modify Egg.js Context Log - TypeScript\nDESCRIPTION: This snippet demonstrates how to customize the context log format in an Egg.js application within MidwayJS.  The `contextLoggerFormat` function allows defining a custom format string that includes information like timestamp, log level, process ID, user ID, request duration, and HTTP method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  egg: {\n    contextLoggerFormat: info => {\n      const ctx = info.ctx;\n      return '${info.timestamp} ${info.LEVEL} ${info.pid} [${ctx.userId} - ${Date.now() - ctx.startTime}ms ${ctx.method}] ${info.message}';\n    }\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Service Method\nDESCRIPTION: This snippet illustrates how to mock a method of a service during testing in MidwayJS using `app.mockClassFunction`. It overrides the return value of the specified method for the duration of the test.  The original service definition with `@provide` is also shown for context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test_more.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app, assert } from 'midway-mock/bootstrap';\nimport { IUserService } from '../../src/interface';\n\n// service，放在文件中\n@provide('userService')\nexport class UserService {\n  async getUser() {\n    return 'zhang';\n  }\n}\n\ndescribe('test/service/user.test.ts', () => {\n  it('#getUser', async () => {\n    app.mockClassFunction('userService', 'getUser', () => {\n      return 'chen';\n    });\n    // 取出 userService\n    const user = await app.applicationContext.getAsync<IUserService>('userService');\n    const data = await user.getUser(); // chen\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying TypeScript Source Code Path\nDESCRIPTION: Specifies the directory containing the TypeScript source code. By default, the CLI automatically analyzes the source code path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ midway-bin dev --ts --sourceDir=./app/src\n```\n\n----------------------------------------\n\nTITLE: Defining a POST API endpoint with request data\nDESCRIPTION: This example shows how to define a POST API endpoint using Midway Hooks that accepts request data. The endpoint is defined using the `Api` and `Post` decorators, and it takes a `name` parameter as input. The function returns a greeting message that includes the provided name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Api, Post } from '@midwayjs/hooks';\n\nexport default Api (\n  Post(), // Http Path: /api/say\n  async (name: string) => {\n    return 'Hello ${name}!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing __dirname and __filename in ESM (TypeScript)\nDESCRIPTION: In ESM, `__dirname` and `__filename` are not available.  This code snippet demonstrates how to obtain their values using `import.meta.url`, `fileURLToPath`, and `dirname` from the `node:url` and `node:path` modules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/esm.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM solution\nimport { dirname } from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n```\n\n----------------------------------------\n\nTITLE: Initializing Function App for Local Testing (MidwayJS, TypeScript)\nDESCRIPTION: This code snippet demonstrates how to initialize a MidwayJS function app for local testing using the `createFunctionApp` method from `@midwayjs/mock`. It creates a function app instance that can be used to simulate a serverless environment for testing function handlers. The app instance is then closed using the `close` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context, Framework } from '@midwayjs/faas';\nimport { mockContext } from '@midwayjs/fc-starter';\nimport { createFunctionApp } from '@midwayjs/mock';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from event trigger', async () => {\n    \n    // create app\n    const app: Application = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: mockContext(),\n    });\n    \n    // ...\n    \n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: withController Type Definition\nDESCRIPTION: This snippet presents the TypeScript type definition for the `withController` function. It shows the structure of the controller configuration object, which includes the `middleware` property. The middleware property is an array of any type, meaning it can include both function-based middleware and IoC-defined middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_middleware.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Controller = {\n  middleware?: any[];\n};\n\nfunction withController(controller: Controller, func);\n```\n\n----------------------------------------\n\nTITLE: Creating a custom web parameter decorator in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to create a custom web parameter decorator using `createRequestParamDecorator` in MidwayJS. The decorator extracts the 'token' from the request headers.  It depends on the `@midwayjs/core` package.  It shows how to define a custom decorator to access the request context and extract specific information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-10-29-release-3-7.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRequestParamDecorator } from '@midwayjs/core';\n\n// 实现装饰器\nexport const Token = createRequestParamDecorator(ctx => {\n  return ctx.headers.token;\n});\n\n// 使用装饰器\nexport class UserController {\n  async invoke(@Token() token: string) {\n    console.log(token);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP Service Test Example (TypeScript)\nDESCRIPTION: This snippet provides a complete example of testing an HTTP service in MidwayJS. It includes creating the app, setting up beforeAll and afterAll hooks for lifecycle management, making HTTP requests, and asserting the results using Jest's `expect`.  The test demonstrates both GET and POST requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/web';\nimport { Application } from 'egg'; // 从特定的框架获取 App 定义\nimport * as assert from 'assert';\n\ndescribe('test/controller/home.test.ts', () => {\n  let app: Application;\n\n  beforeAll(async () => {\n    // 只创建一次 app，可以复用\n    try {\n      // 由于Jest在BeforeAll阶段的error会忽略，所以需要包一层catch\n      // refs: https://github.com/facebook/jest/issues/8688\n\n      app = await createApp<Framework>();\n    } catch (err) {\n      console.error('test beforeAll error', err);\n      throw err;\n    }\n  });\n\n  afterAll(async () => {\n    // close app\n    await close(app);\n  });\n\n  it('should GET /', async () => {\n    // make request\n    const result = await createHttpRequest(app).get('/').set('x-timeout', '5000');\n\n    // use expect by jest\n    expect(result.status).toBe(200);\n    expect(result.text).toBe('Hello Midwayjs!');\n\n    // or use assert\n    assert.deepStrictEqual(result.status, 200);\n    assert.deepStrictEqual(result.text, 'Hello Midwayjs!');\n  });\n\n  it('should POST /', async () => {\n    // make request\n    const result = await createHttpRequest(app).post('/').send({ id: '1' });\n\n    // use expect by jest\n    expect(result.status).toBe(200);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing HTTP Request with Axios in Midway Hooks\nDESCRIPTION: This code snippet demonstrates how to customize the HTTP request function in Midway Hooks to use Axios. It imports the `defaults` and `ApiParam` from `@midwayjs/hooks/request` and Axios, then overrides the `defaults.request` with an asynchronous function that uses Axios to make the request. The function extracts the API response data from the Axios response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_custom_request.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaults, ApiParam } from '@midwayjs/hooks/request';\nimport axios from 'axios';\n\ndefaults.request = async (param: ApiParam) => {\n  const resp = await axios(param);\n  return resp.data;\n};\n```\n\n----------------------------------------\n\nTITLE: Import ETCD Component in Configuration\nDESCRIPTION: This TypeScript code shows how to import the ETCD component into the MidwayJS application's configuration.  It imports the necessary modules and adds `etcd` to the `imports` array within the `@Configuration` decorator. This enables ETCD functionality in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/etcd.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as etcd from '@midwayjs/etcd';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    //...\n    etcd,\n  ],\n  //...\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Running Midway CLI Test in Band\nDESCRIPTION: Demonstrates how to run tests using the @midwayjs/cli serially using the `--runInBand` parameter, resolving potential port conflicts during parallel test execution. Includes example commands for both test execution and coverage with TypeScript support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin test --ts --runInBand\n$ midway-bin cov --ts --runInBand\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Service with @WSController\nDESCRIPTION: Defines a WebSocket service using the @WSController decorator from @midwayjs/core. This decorator marks the class as a WebSocket controller, enabling it to handle WebSocket connections and messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController } from '@midwayjs/core';\n\n@WSController()\nexport class HelloSocketController {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Locale via Decorator\nDESCRIPTION: This snippet demonstrates how to specify the locale for validation messages using the `@Validate` decorator from `@midwayjs/validate`.  By setting the `locale` property in the decorator options, the validation messages will be returned in the specified language (e.g., 'en_US'). This overrides the default locale from the i18n component or the browser's language.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/user')\nexport class UserController {\n  @Post('/')\n  @Validate({\n    locale: 'en_US',\n  })\n  async getUser(@Body() bodyData: UserDTO) {\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding WebSocket Dependency - package.json\nDESCRIPTION: This JSON snippet shows how to add `@midwayjs/ws` as a dependency in your `package.json` file.  Version `^3.0.0` indicates that it's compatible with version 3.0.0 and any compatible updates.  After adding this, you need to run `npm install` or `yarn install` to install the dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/ws\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deregister Consul Service\nDESCRIPTION: Deregisters a service from Consul using the `consul.agent.service.deregister` method. It injects the Consul client and uses it to remove the service with the specified ID from Consul's registry.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/core';\nimport * as Consul from 'consul'\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n\n  @Inject('consul:consul')\n  consul: Consul.Consul;\n\n  @Get(\"/222\")\n  async home2(){\n    let res = await this.consul.agent.service.deregister(`my-midway-project:30.10.72.195:7002`);\n    console.log(res);\n\n    // ...\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing API with explicit path using GET method\nDESCRIPTION: This snippet shows how to create an API endpoint with a custom path using the `Get` function's path parameter. It defines a GET route at '/hello' that returns \"Hello World!\".\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get('/hello'), // Http Path: /hello,\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating React Midway Hooks App\nDESCRIPTION: This code shows how to create a React application from the template\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/intro.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit https://github.com/midwayjs/hooks/examples/react ./hooks-app\n```\n\n----------------------------------------\n\nTITLE: Adding Generate Middleware Function - JavaScript\nDESCRIPTION: This commit introduces a `generateMiddleware` function for both Express and FaaS environments. It likely simplifies the creation and registration of middleware components, offering a more streamlined API for middleware management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nbfcfc9a377f01026a459aaed35a3f0fdf0530f26\n```\n\n----------------------------------------\n\nTITLE: Calling Ordered gRPC Bidirectional Stream with Midwayjs in Typescript\nDESCRIPTION: This snippet shows how to call a gRPC bidirectional stream with guaranteed ordering from the client-side. It makes use of Promises to ensure that messages are sent and received in a sequential order. It calls `sendMessage` to send data and processes the response within the `then` block of the promise. The `end()` method closes the connection. It requires the gRPC service client (service).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// Ensure sequential bidirectional flow\nconst t = service.addMore();\n\nconst result4 = await new Promise<number>((resolve, reject) => {\n\n  let total = 0;\n\n  // First call and return\n  t.sendMessage({\n    num: 2\n  })\n    .then(res => {\n      expect(res.num).toEqual(12);\n      total += res.num;\n  \t})\n    .catch(err => console.error(err));\n\n  // Second call and return\n  t.sendMessage({\n    num: 5\n  }).then(res => {\n      expect(res.num).toEqual(15);\n      total += res.num;\n      resolve(total);\n    })\n    .catch(err => console.error(err));\n\n  t.end();\n});\n\n// result4 => 27\n\n```\n\n----------------------------------------\n\nTITLE: Internal Component Service Injection\nDESCRIPTION: Shows how to inject a service (`BookService`) within the same component, without needing to specify the component's namespace. This simplifies dependency injection within the component itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// 这里是组件中的 user 控制器\n\nimport { BookService } from './service/bookService';\n\n@Provide()\n@Controller('/user')\nexport class UserController {\n  @Inject()\n  bookService: BookService; // 这里注入不需要组件前缀，会自动处理\n\n  @Inject('bookService')\n  bookService: BookService; // 这里注入不需要组件前缀，会自动处理，和上面行为一致\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Instance via API\nDESCRIPTION: Retrieves a cache instance using the `cachingFactory.get` method instead of the `@InjectClient` decorator. Requires injecting the `CachingFactory`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayCache } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n\n   @Inject()\n   cachingFactory: CachingFactory;\n\n   async invoke() {\n     const caching = await this.cachingFactory.get('default');\n     // ...\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Dependency using npm\nDESCRIPTION: Installs the @midwayjs/ws package as a project dependency using npm. This command adds the necessary WebSocket module to the project's node_modules directory, allowing it to be imported and utilized in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/ws@3 --save\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Global Config - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to configure the Bootstrap class from `@midwayjs/bootstrap` with a global config object. It allows setting custom keys that are applied to the whole application. This approach merges the provided config into the main application configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap\n  .configure({\n  \tglobalConfig: {\n      customKey: 'abc'\n    }\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Add Nunjucks Filter\nDESCRIPTION: Demonstrates how to add a custom filter to the Nunjucks environment in a MidwayJS application. It defines a filter named 'hello' that prepends 'hi, ' to a string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Configuration, Inject } from '@midwayjs/decorator';\nimport * as view from '@midwayjs/view-nunjucks';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [view],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class AutoConfiguration {\n  @App()\n  app;\n\n  @Inject()\n  env: view.NunjucksEnvironment;\n\n  async onReady() {\n    this.env.addFilter('hello', (str) => {\n      return 'hi, ' + str;\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Config Initialization - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `onConfigLoad` lifecycle hook to perform asynchronous configuration initialization tasks, such as fetching configuration data from a remote source. The return value will be merged with the global config.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport { IMidwayContainer } from '@midwayjs/core';\nimport { join } from 'path';\nimport { RemoteConfigService } from '../service/remote'; // 自定义的获取远端配置服务\n\n@Configuration({\n  importConfigs: [join(__dirname, './config/')],\n})\nexport class ContainerLifeCycle {\n  async onConfigLoad(container: IMidwayContainer) {\n    // 这里你可以修改全局配置\n    const remoteConfigService = await container.getAsync(RemoteConfigService);\n    const remoteConfig = await remoteConfigService.getData();\n\n    // 这里的返回值会和全局的 config 做合并\n    return {\n      data: remoteConfig,\n    };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Model with npx\nDESCRIPTION: This command uses `npx mdl-gen-midway` to generate a MySQL model.  It requires specifying the host, port, database name, username, and password. The `--noConfig` option prevents the creation of `tsconfig.json` and `ormconfig.json`, and `--case-property none` avoids converting property names to any specific case. It depends on `mdl-gen-midway` being installed, typically via `npm install -g mdl-gen-midway` or similar.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/typeorm_generator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Recommended\n# Please replace the configuration information\n$npx mdl-gen-midway -h localhost -p 3306 -d yourdbname -u root -x yourpassword -e mysql --noConfig --case-property none\n```\n\n----------------------------------------\n\nTITLE: Multiple Proxy Configuration Example\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure multiple proxy strategies. It defines a `default` configuration and a `strategy` object with named proxy configurations (gw, g, httpBin), each with their own `match` and `target` or `host` properties. The `default` config will be merged with each named strategy.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/http-proxy.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\n// 代理配置类型\nexport default {\n  httpProxy: {\n    default: {\n      // 一些每个策略复用的值，会和底下的策略进行合并\n    },\n    strategy: {\n      gw: {\n        // https://gw.alicdn.com/tfs/TB1.1EzoBBh1e4jSZFhXXcC9VXa-48-48.png\n        match: /\\/tfs\\//,\n        host: 'https://gw.alicdn.com',\n      },\n      g: {\n        // https://g.alicdn.com/mtb/lib-mtop/2.6.1/mtop.js\n        match: /\\/bdimg\\/(.*)$/,\n        target: 'https://sm.bdimg.com/$1',\n      },\n      httpBin: {\n        // https://httpbin.org/\n        match: /\\/httpbin\\/(.*)$/,\n        target: 'https://httpbin.org/$1',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: API Gateway Trigger in Alibaba Cloud Function Compute with Midway\nDESCRIPTION: This code snippet demonstrates how to bind an API Gateway trigger in Alibaba Cloud Function Compute using the `@ServerlessTrigger` decorator in Midway. It handles API Gateway requests and returns a greeting message. Dependencies include `@midwayjs/core` and `@midwayjs/faas`. The input is a request body parameter \"name\", and the output is a string like \"hello midway\".\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n   @Inject()\n   ctx: Context;\n\n   @ServerlessTrigger(ServerlessTriggerType.API_GATEWAY, {\n     path: '/api_gateway_aliyun',\n     method: 'post',\n   })\n   async handleAPIGatewayEvent(@Body() name) {\n     return `hello ${name}`;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Add URL parameter processing with @Query\nDESCRIPTION: This TypeScript snippet shows how to extract URL parameters using the `@Query` decorator in a MidwayJS controller. It retrieves the `cityId` parameter from the URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Query } from '@midwayjs/core';\n\n@Controller('/')\nexport class WeatherController {\n  @Get('/weather')\n  async getWeatherInfo(@Query('cityId') cityId: string): Promise<string> {\n    return cityId;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Context with Callback in Midway.js (TypeScript)\nDESCRIPTION: This snippet shows how to mock the context using a callback function. This allows for more complex or logic-driven mocking scenarios. It also sets `ctx.user` to `midway`. The `createApp` function is assumed to be defined elsewhere.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockContext } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  // 模拟上下文\n  mockContext(app, (ctx) => {\n    ctx.user = 'midway';\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Log Output (all loggers)\nDESCRIPTION: This code snippet shows how to configure JSON log output for all loggers by enabling the json transport.  Setting the file transport to `false` and configuring the `json` transport with a `fileLogName` will cause all log messages to be output in JSON format to the specified file. This configuration is part of the midwayLogger configuration in a MidwayConfig object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        file: false,\n        json: {\n          fileLogName: 'midway-app.json.log'\n        }\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Handling Socket Messages\nDESCRIPTION: This code snippet shows how to handle incoming Socket.IO messages in MidwayJS. It uses the @OnWSMessage decorator to specify the event to listen for ('myEvent').  The received data is logged to the console along with the client's ID.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, Provide, OnWSConnection, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/socketio';\n\n@Provide()\n@WSController('/')\nexport class HelloSocketController {\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('myEvent')\n  async gotMessage(data) {\n    console.log('on data got', this.ctx.id, data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Casbin Model Configuration\nDESCRIPTION: This example shows a basic Casbin model configuration file (`basic_model.conf`). It defines the request, policy, and role definitions, along with policy effects and matchers. It specifies how requests are matched against defined policies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\ng2 = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && g2(r.obj, p.obj) && r.act == p.act || r.sub == \"root\"\n```\n\n----------------------------------------\n\nTITLE: Install Busboy Dependency\nDESCRIPTION: Installs the @midwayjs/busboy dependency using npm. This is a prerequisite for using the file upload functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/busboy@3 --save\n```\n\n----------------------------------------\n\nTITLE: Updating Photo and Metadata with Cascade Operations\nDESCRIPTION: This code demonstrates how to leverage cascade operations in TypeORM to automatically save associated `PhotoMetadata` when saving a `Photo` entity. By setting the `metadata` property of the `Photo` entity to a new `PhotoMetadata` instance and then saving the `Photo` entity, the `PhotoMetadata` entity is automatically saved as well, eliminating the need for separate save operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { PhotoMetadata } from './entity/photoMetadata.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n\n   // create photo object\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.isPublished = true;\n\n    // create photo metadata object\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = \"cybershoot\";\n    metadata.orientation = \"portrait\";\n\n    photo.metadata = metadata; // this way we connect them\n\n    // save a photo also save the metadata\n    await this.photoModel.save(photo);\n\n    // done\n    console.log(\"Photo is saved, photo metadata is saved too\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Router Parameters from API Context\nDESCRIPTION: Demonstrates how to access route parameters using `ctx.params`.  The `getUser` method retrieves the 'uid' parameter from the route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// GET /user/1\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/:uid')\n  async getUser(): Promise<User> {\n    const params = this.ctx.params;\n    // {\n    //   uid: '1',\n    // }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema\nDESCRIPTION: This Prisma schema defines the structure of the 'User' and 'Post' models, including fields like 'id', 'email', 'name', 'createdAt', 'updatedAt', 'title', 'content', 'published', 'viewCount', 'author', and their respective data types and constraints. It also defines relationships between the 'User' and 'Post' models.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/prisma.md#_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title     String\n  content   String?\n  published Boolean  @default(false)\n  viewCount Int      @default(0)\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Session Decorator in @midwayjs/express\nDESCRIPTION: This code shows how to use the `@Session` decorator to access session data in a Midway.js Express controller. It demonstrates passing a default value and updating the session. Dependencies: @midwayjs/decorator, @midwayjs/express, express.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide, Inject, Session, ALL } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/express';\nimport { Request } from 'express';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  req: Request;\n\n  @Get('/')\n  async home(@Session() visits = 1) {\n    this.req.session.visits = session.visits = visits + 1;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Socket.IO Controller - TypeScript\nDESCRIPTION: Defines a Socket.IO controller using the `@WSController` decorator in MidwayJS.  The decorator's input specifies the Namespace (non-path) for the Socket.IO connection. If no Namespace is provided, the connections will automatically connect to the `/` Namespace. \nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@WSController('/')\nexport class HelloController {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Add a New Static Directory\nDESCRIPTION: This TypeScript code adds a new directory for static file serving alongside the default one. It configures a separate prefix and directory path.  This allows serving static files from multiple locations with different prefixes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/static_file.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// {app_root}/src/config/config.default.ts\nexport default {\n  // ...\n  staticFile: {\n    dirs: {\n      default: {\n        prefix: '/',\n        dir: 'xxx',\n      },\n      another: {\n        prefix: '/',\n        dir: 'xxx',\n      },\n    }\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form for File Upload\nDESCRIPTION: This snippet shows a basic HTML form for file upload. It includes a file input field and sets the `enctype` attribute to `multipart/form-data` to handle file uploads.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/api/upload\" method=\"post\" enctype=\"multipart/form-data\">\n   Name: <input type=\"text\" name=\"name\" /><br />\n   File: <input type=\"file\" name=\"testFile\" /><br />\n   <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Customize Image Captcha Config - TypeScript\nDESCRIPTION: Example config showing how to configure an image captcha code with 5 pure English letters. The image width is 200 pixels, the height is 50 pixels, and it contains 3 noise lines.  Both direct and default configuration are illustrated.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/captcha.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const captcha: CaptchaOptions = {\n  default: {\n    size: 5,\n    noise: 3,\n    width: 200,\n    height: 50\n  },\n  image: {\n    type: 'letter'\n  }\n}\n\nexport const captcha: CaptchaOptions = {\n  image: {\n    size: 5,\n    noise: 3,\n    width: 200,\n    height: 50\n    type: 'letter'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Routing Verification (MidwayJS, TypeScript)\nDESCRIPTION: This snippet demonstrates how to exclude a specific route from API security validation using the `@ApiExcludeSecurity` decorator. It is placed on a method within a controller that is otherwise secured. Requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api')\n@ApiSecurity('api_key')\nclass APIController {\n  // ...\n\n  @Get('/get_user')\n  @ApiExcludeSecurity()\n  async getUser() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid useContext usage example\nDESCRIPTION: This code snippet demonstrates invalid usage of the `useContext` hook.  The `useContext` hook must be used inside of an `Api` function. The code will throw an error if used outside.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/builtin-hooks.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from '@midwayjs/hooks';\n\nconst ctx = useContext(); // will throw error\n```\n\n----------------------------------------\n\nTITLE: FC Type Definition Import in Midway\nDESCRIPTION: This code snippet shows how to import the FC type definition from `@midwayjs/fc-starter` in your `src/interface.ts` file. This is required to ensure that the definition of `ctx.originContext` remains correct.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\nimport type {} from '@midwayjs/fc-starter';\n```\n\n----------------------------------------\n\nTITLE: Prettier configuration with mwts\nDESCRIPTION: This JavaScript snippet shows how to configure Prettier in a project using the default settings provided by mwts. It imports the Prettier configuration from the mwts package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwts.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  ...require('mwts/.prettierrc.json')\n};\n```\n\n----------------------------------------\n\nTITLE: Getting and Checking Client Priority (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve the priority of a client instance using `getClientPriority` and check its priority level using `isHighPriority`, `isMediumPriority`, and `isLowPriority` methods of the `ServiceFactory`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class HTTPClientService implements HTTPClient {\n  @Inject()\n  private serviceFactory: HTTPClientServiceFactory;\n\n  @Init()\n  async init() {\n    // 获取优先级\n    this.serviceFactory.getClientPriority('default'); // DEFAULT_PRIORITY.L2\n\n    // 判断优先级\n    this.serviceFactory.isHighPriority('default');\n    this.serviceFactory.isMediumPriority('default');\n    this.serviceFactory.isLowPriority('default');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Trigger in Alibaba Cloud Function Compute with Midway\nDESCRIPTION: This code snippet demonstrates how to bind an HTTP trigger in Alibaba Cloud Function Compute using the `@ServerlessTrigger` decorator in Midway. It handles HTTP requests and returns a greeting message. Dependencies include `@midwayjs/core` and `@midwayjs/faas`. The input is a query parameter \"name\", and the output is a string like \"hello midway\".\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n   @Inject()\n   ctx: Context;\n\n   @ServerlessTrigger(ServerlessTriggerType.HTTP, {\n     path: '/',\n     method: 'get',\n   })\n   async handleHTTPEvent(@Query() name = 'midway') {\n     return `hello ${name}`;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Client Path Configuration\nDESCRIPTION: This snippet shows how to configure the client path to match the server path configured for Socket.IO, ensuring the client connects to the correct endpoint.  Examples are provided for both the standard `socket.io-client` and Midway's testing client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// socket.io client\nconst socket = io('************:7001', {\n  Path: '/testPath' // here is the path of the client\n});\n\n// Midway's Socket. io test client\nconst client = await createSocketIOClient({\n  path: '/testPath'\n});\n```\n\n----------------------------------------\n\nTITLE: Matching Exception Prototype in Typescript\nDESCRIPTION: This code demonstrates how to match exception prototypes using the `matchPrototype` option in the `@Catch` decorator.  The `TestFilter` will catch `MidwayError` and all of its subclasses. Requires `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch, MidwayError } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\nclass CustomError extends MidwayError {}\n\nclass CustomError2 extends MidwayError {}\n\n// All subclasses will be captured here\n@Catch([MidwayError], {\n  matchPrototype: true\n})\nclass TestFilter {\n  catch(err, ctx) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a route using FP in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a route using the functional programming paradigm in Midway.js. It uses the `useContext` hook from `@midwayjs/hooks` to access the context and retrieve the client's IP address. The `home` function returns a JSON response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/intro.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/api/index.ts\n\nimport { useContext } from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/koa';\n\nexport default async function home() {\n  const ctx = useContext<Context>();\n\n  return {\n    message: 'Hello Midwayjs!',\n    query: ctx.ip,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using custom Axios Instance with HttpServiceFactory in Typescript\nDESCRIPTION: This snippet demonstrates how to use a custom configured Axios instance, injecting it with InjectClient and HttpServiceFactory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpServiceFactory, HttpService } from '@midwayjs/axios';\nimport { InjectClient } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n  @InjectClient(HttpServiceFactory, 'customAxios')\n  customAxios: HttpService;\n\n  async invoke() {\n  \tconst url = 'https://midwayjs.org/resource/101010100.json';\n    const result = await this.customAxios.get(url);\n    // TODO result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Logger: Enable File and JSON, Disable Error and Console\nDESCRIPTION: This snippet demonstrates enabling the File and JSON transports while disabling the Console and Error transports for a specific logger client in MidwayJS. This configures the logger to output to both a text file and in JSON format.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      abcLogger: {\n        enableConsole: false,\n        enableFile: true,\n        enableError: false,\n        enableJSON: true\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger-Initializer.js (MidwayJS, TypeScript)\nDESCRIPTION: This snippet shows how to customize the `swagger-initializer.js` file used by Swagger UI. This allows for overriding default UI configurations. Requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { AppInfo } from '@midwayjs/core';\nimport { renderSwaggerUIDist } from '@midwayjs/swagger';\nimport { join } from 'path';\n\nexport default (appInfo: AppInfo) {\n   return {\n     // ...\n     swagger: {\n       swaggerUIRender: renderSwaggerUIDist,\n       swaggerUIRenderOptions: {\n         customInitializer: join(appInfo.appDir, 'resource/swagger-initializer.js'),\n       }\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating ETCD Instance - UserService\nDESCRIPTION: This TypeScript code snippet demonstrates how to dynamically create an ETCD instance within a MidwayJS service using the `ETCDServiceFactory`. The `createInstance` method allows you to create instances at runtime with specific configurations and a name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/etcd.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { ETCDServiceFactory } from '@midwayjs/etcd';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  etcdServiceFactory: ETCDServiceFactory;\n\n  async invoke() {\n    const instance3 = await this.etcdServiceFactory.createInstance({\n      host: [\n        '127.0.0.1:2379'\n      ]\n    }, 'instance3');\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Axios Module in configuration.ts - TypeScript\nDESCRIPTION: This snippet shows how to import the Axios module in the `configuration.ts` file in Midway.js. It also includes configuration of importConfigs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    axios\t\t// 导入 axios 组件\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Configure koa-static-cache for Serverless\nDESCRIPTION: This snippet shows how to configure `koa-static-cache` for serving static files in a Serverless environment using @midwayjs/faas.  It sets the `buffer` option to `true` to ensure files are served as buffers, which is required by many Serverless gateway implementations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/static_file.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/faas';\nimport * as staticCache from 'koa-static-cache';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(\n      staticCache({\n        prefix: '/public/',\n        dir: join(__dirname, '../public'),\n        dynamic: true,\n        preload: false,\n        buffer: true, // 注意，这里是 true\n        maxFiles: 1000,\n      })\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: External Component Service Injection\nDESCRIPTION: Shows how to inject a component's service (e.g., `BookService`) into an application class, using the component's name. This allows the application to utilize the service provided by the component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/decorator';\nimport { BookService } from 'midway-component-book';\n\n@Provide()\nexport class Library {\n\n  @Inject();\n  bookService: BookService;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Reuse Verification Rules Example\nDESCRIPTION: This snippet illustrates how to reuse validation rules by assigning common rules to variables. This approach reduces code duplication and makes it easier to maintain consistent validation rules across multiple DTOs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Define your department's specifications or commonly used ones in a document yourself.\nconst requiredString = RuleType.string().required();\n\nexport class UserDTO {\n\n  @Rule(requiredString) // So you don't have to write it so long\n  name: string;\n\n  @Rule(requiredString) // Same as above\n  nickName: string;\n\n  @Rule(requiredString) // Same as above\n  description: string;\n}\n\n// Define your department's specifications or commonly used ones in a document yourself.\nconst maxString = (length)=> RuleType.string().max(length);\n\nexport class UserDTO {\n\n  @Rule(requiredString) // Same as above\n  name: string;\n\n  @Rule(requiredString) // Same as above\n  nickName: string;\n\n  @Rule(requiredString) // Same as above\n  description: string;\n\n  @Rule(maxString(50)) // This way, you can change the parameter\n  info: string;\n\n  @Rule(maxString(50).required()) // This will do\n  info2: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Object Property in Midway.js (TypeScript)\nDESCRIPTION: This code demonstrates how to mock an object property using `mockProperty`. It mocks the `name` property of the object `a` to `hello`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  const a = {};\n  mockProperty(a, 'name', 'hello');\n\n  // a['name'] => 'hello'\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Use Default Frame/Multiframe (typescript)\nDESCRIPTION: This snippet shows the changes required when using default frame/multiframe in Midway v3. Separate instantiation is no longer needed in bootstrap.js, instead import as a component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration\nimport * as web from '@midwayjs/web';\nimport * as grpc from '@midwayjs/grpc';\n\n@Configuration({\n  // ...\n  imports: [\n    web,\n    grpc,\n    //...\n  ],\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Call Error Handling\nDESCRIPTION: This snippet demonstrates how to handle validation errors when using the manual call method with `fetcher`. It sends a POST request to `/hello` with invalid arguments and logs the error message and status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfetcher\n  .post('/hello', {\n    args: [null, null],\n  })\n  .catch((error) => {\n    console.log(\n      JSON.parse(error.data.message)\n    );\n    console.log(error.status); // 422\n  });\n```\n\n----------------------------------------\n\nTITLE: Overriding Framework Logger - TypeScript\nDESCRIPTION: This snippet demonstrates how to override the framework's default logger by providing a custom logger instance during framework initialization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nimport { Framework } from '@midwayjs/koa';\nimport { createLogger, createConsoleLogger } from '@midwayjs/logger';\n\n// 一个只有控制台输出的日志\nconst consoleLogger = createConsoleLogger('customConsoleLogger');\n// 文本日志\nconst fileLogger = createLogger('customFileLogger', {\n  dir: __dirname,\n});\n\nconst koaFramework = new Framework().configure({\n  port: 7001,\n  logger: consoleLogger, // or fileLogger\n});\n\nBootstrap.load(koaFramework).run();\n```\n\n----------------------------------------\n\nTITLE: Applying an Error Filter in MidwayJS Configuration (TypeScript)\nDESCRIPTION: This code demonstrates how to apply the `WeatherErrorFilter` to a MidwayJS application. The `useFilter` method of the application instance is used to register the filter globally. This ensures that the filter is applied to all requests handled by the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { WeatherErrorFilter } from './filter/weather.filter';\n// ...\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // ...\n\n    // add filter\n    this.app.useFilter([WeatherErrorFilter]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Socket ID Generation\nDESCRIPTION: This TypeScript code demonstrates how to customize the Socket.IO session ID (sid) generation in a MidwayJS application. It overrides the default `generateId` function on the `app.engine` property to use a UUID (v4) to generate unique session IDs. This snippet requires the 'uuid' package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst uuid = require('uuid');\n\napp.engine.generateId = (req) => {\n  return uuid.v4(); // must be unique across all Socket.IO servers\n};\n```\n\n----------------------------------------\n\nTITLE: Adding @Framework decorator to CustomKoaFramework (New)\nDESCRIPTION: This code snippet demonstrates how to add the @Framework decorator to the CustomKoaFramework class.  This decorator marks the class as a framework component within the MidwayJS dependency injection system, requiring import from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Framework } from '@midwayjs/core';\n\n@Framework()\nexport class CustomKoaFramework extends BaseFramework {\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pipeline in Concat Mode in TypeScript\nDESCRIPTION: This example demonstrates how to execute the pipeline in concat mode using the `concat` method of the `IPipelineHandler`. Similar to parallel execution, the valve handlers are executed concurrently. However, the `concat` method returns a Promise that resolves with an array containing the results of each handler in the order they were defined in the `@Pipeline` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // Declare a pipeline here\n  @Pipeline([VideoFeeds, AccountMap, CrowFeeds])\n  stages: IPipelineHandler;\n\n  async runConcat(): Promise<any> {\n    // The videoFeeds, accountMap and crowFeeds are executed concurrently here.\n    return this.stages.concat<any>({\n      args: {aa: 123}\n    });\n\n    // The result returned here is an array\n    /*\n    [\n    \t// Take videoFeeds as the first return object\n      [\n        {\n          videoId: '123',\n          videoUrl: 'https://www.taobao.com/xxx.mp4',\n          videoTitle: 'test 1 video'\n        }, {\n          videoId: '234',\n          videoUrl: 'https://www.taobao.com/xxx234.mp4',\n          videoTitle: 'test 2 video'\n        }, {\n          videoId: '456',\n          videoUrl: 'https://www.taobao.com/xxx456.mp4',\n          videoTitle: 'test 3 video'\n        }\n      ],\n      // Take accountMap as the second return object\n      {\n        id: 'test_account_id',\n        nick: 'test hello',\n        isFollow: true\n      },\n      // Take crowFeeds as the third return object\n      {\n        title: 'test tab',\n        tabId: 'firstTab',\n        index: 0\n      }\n    ]\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RedisErrorListener and DataSyncListener classes\nDESCRIPTION: This code defines two classes, RedisErrorListener and DataSyncListener, as singletons using @Provide and @Scope decorators. These classes are intended to be initialized during the application's startup phase.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/auto_run.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class RedisErrorListener {\n  // ...\n}\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class DataSyncListener {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Objects in IoC Container (TypeScript)\nDESCRIPTION: This snippet showcases how to register a third-party object (sequelize) into the Midway.js IoC container using the ILifeCycle interface. The container.registerObject method allows developers to make objects available for injection in other classes. This eliminates the need to import and instantiate such objects every time they are needed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/lifecycle.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as sequelize from 'sequelize';\n\n@Configuration()\nexport class ContainerConfiguration implements ILifeCycle {\n  async onReady(container: IMidwayContainer): Promise<void> {\n    // 三方包对象\n    container.registerObject('sequelize', sequelize);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @koa/cors in Serverless Function\nDESCRIPTION: This code snippet demonstrates how to integrate the `@koa/cors` middleware into a Midway.js Serverless function using `@midwayjs/faas` within the `configuration.ts` file. It imports necessary modules and registers the `cors` middleware with a default configuration to allow all origins.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/faas';\nimport * as cors from '@koa/cors';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(\n      cors({\n        origin: '*',\n      })\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Series Pipeline Execution Example\nDESCRIPTION: Demonstrates the usage of the series method of the Pipeline handler. It defines a Pipeline with 'videoFeeds', 'accountMap', and 'crowFeeds' and executes them in series.  The returned result is an object, same as parallel.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline(['videoFeeds', 'accountMap', 'crowFeeds'])\n  stages: IPipelineHandler;\n\n  async runSeries(): Promise<any> {\n    // 这里串行执行 videoFeeds、accountMap、crowFeeds\n    return this.stages.series<any>({\n      args: { aa: 123 },\n    });\n\n    // 这里返回的 result 是一个对象，结果同 parallel 返回的对象拼装规则\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Level (config.default.ts)\nDESCRIPTION: This code shows how to configure the overall log level for the application. The `level` property within the `default` section of the `midwayLogger` configuration specifies the minimum level of logs to be output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      level: 'info',\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Test JWT Auth with Curl\nDESCRIPTION: These bash scripts simulate generating a JWT token and then using it to access a protected endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://127.0.0.1:7001/jwt\n\n结果 {\"t\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}\n\ncurl http://127.0.0.1:7001/passport/jwt -H \"Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n结果 {\"msg\": \"Hello Midway\",\"iat\": 1635468727,\"exp\": 1635468827}\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL Middleware (Koa, TypeScript)\nDESCRIPTION: This code demonstrates how to create a custom GraphQL middleware for a Koa application using `apollo-server-koa` and `type-graphql`. It defines a middleware that builds a GraphQL schema, creates an Apollo Server instance, and applies the middleware to the application. The middleware customizes the GraphQL context to include both the application context and request context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/graphql.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Config, App } from '@midwayjs/decorator';\nimport { IWebMiddleware, IMidwayKoaApplication, IMidwayKoaContext, IMidwayKoaNext } from '@midwayjs/koa';\n\nimport { ApolloServer, ServerRegistration } from 'apollo-server-koa';\nimport { buildSchemaSync } from 'type-graphql';\nimport {\n  ApolloServerPluginLandingPageGraphQLPlayground,\n  ApolloServerPluginLandingPageDisabled,\n} from 'apollo-server-core';\n\nimport { SampleResolver } from '../resolvers/sample.resolver';\n\n@Provide('extend:GraphQLKoaMiddleware')\nexport class GraphQLMiddleware implements IWebMiddleware {\n  @Config('apollo')\n  config: ServerRegistration;\n\n  @App()\n  app: IMidwayKoaApplication;\n\n  resolve() {\n    return async (_ctx: IMidwayKoaContext, next: IMidwayKoaNext) => {\n      const container = this.app.getApplicationContext();\n\n      const schema = buildSchemaSync({\n        resolvers: [SampleResolver],\n        // 直接传入 container，意味着使用应用上下文作为容器\n        // container,\n        // 从 Apollo Context 中获取 container ，意味着使用请求上下文作为容器\n        container: ({ context }: ResolverData<{ container: IMidwayContainer }>) => context.container,\n        emitSchemaFile: 'schema.graphql',\n      });\n\n      const server = new ApolloServer({\n        schema,\n        // 这里的 ctx 实际上是被 Midway 处理过的，所以你可以拿到 requestContext\n        context: ({ ctx }: { ctx: IMidwayKoaContext }) => {\n          return {\n            // 返回请求上下文容器供 TypeGraphQL 使用\n            container: ctx.requestContext,\n            // 返回请求上下文供 Resolver 中使用\n            reqCtx: ctx,\n          };\n        },\n        plugins: [\n          ['production'].includes(process.env.NODE_ENV) || process.env.DISABLE_PLAYGROUND\n            ? ApolloServerPluginLandingPageDisabled()\n            : ApolloServerPluginLandingPageGraphQLPlayground({\n                settings: {\n                  // playground settings\n                },\n              }),\n        ],\n      });\n      await server.start();\n\n      server.applyMiddleware({\n        app: this.app,\n        ...this.config,\n      });\n\n      await next();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic MIME type whitelist configuration\nDESCRIPTION: This example demonstrates how to dynamically define the MIME type whitelist for file uploads based on the request context using a function. This provides flexibility in allowing specific file types based on conditions such as the request path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  upload: {\n    mimeTypeWhiteList: (ctx) => {\n      if (ctx.path === '/') {\n        return {\n          '.jpg': 'image/jpeg',\n        };\n      } else {\n        return {\n          '.jpeg': ['image/jpeg', 'image/png'],\n        }\n      };\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Streaming with onEnd (TypeScript)\nDESCRIPTION: This code implements a client-side streaming gRPC method. The service uses `@GrpcMethod({type: GrpcStreamTypeEnum.READABLE, onEnd: 'sumEnd' })` to handle the stream. The `addMany` method receives data from the client, and the `sumEnd` method is called after the client finishes sending data. The `onEnd` parameter defines the method to call at the end of the stream.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, GrpcStreamTypeEnum, Inject, MSProviderType, Provider } from '@midwayjs/core';\nimport { Context, Metadata } from '@midwayjs/grpc';\nimport { math } from '../interface';\n\n/**\n */\n@Provider(MSProviderType.GRPC, { package: 'math' })\nexport class Math implements math.Math {\n\n  sumDataList: number[] = [];\n\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod({type: GrpcStreamTypeEnum.READABLE, onEnd: 'sumEnd' })\n  async addMany(data: math.Num) {\n    this.sumDataList.push(data);\n  }\n\n  async sumEnd(): Promise<math.Num> {\n    const total = this.sumDataList.reduce((pre, cur) => {\n      return {\n        num: pre.num + cur.num,\n      }\n    });\n    return total;\n  }\n\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Factory Class (TypeScript)\nDESCRIPTION: This code snippet shows how to implement a service factory class by extending the `ServiceFactory` class from `@midwayjs/core`. It includes the `createClient` method for creating instances and the `getName` method for identifying the factory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServiceFactory, Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class HTTPClientServiceFactory extends ServiceFactory<HTTPClient> {\n\n  // 创建单个实例\n  protected createClient(config: any): any {\n    return new HTTPClient(config);\n  }\n\n  getName() {\n    return 'httpClient';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lifecycle Extension\nDESCRIPTION: This snippet demonstrates how to add a lifecycle extension to the MidwayJS CLI using the `midway-integration` field in `package.json`. It shows how to run a custom script after the `installDevDep` lifecycle event of the `package` command. It triggers the `npm run build` command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{\n\t\"midway-integration\": {\n  \t\"lifecycle\": {\n    \t\"after:package:installDevDep\": \"npm run build\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Alibaba Cloud FC using npm\nDESCRIPTION: This shell command initiates the deployment process of the Midway.js application to Alibaba Cloud Function Compute. The `npm run deploy` command executes the deployment script defined in the `package.json` file, which typically utilizes the Midway CLI to package and deploy the application to Alibaba Cloud.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_to_aliyun.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom HTTP Error in Typescript\nDESCRIPTION: This code demonstrates how to throw the previously defined `CustomHttpError` within an application. When this error is thrown, MidwayJS will automatically return the associated HTTP status code (400) to the client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomHttpError } from './error/custom.error';\n\n// ...\n\nasync findAll() {\n  throw new CustomHttpError();\n}\n```\n\n----------------------------------------\n\nTITLE: Import Upload Component\nDESCRIPTION: This code snippet demonstrates how to import the @midwayjs/upload component into a MidwayJS configuration file.  The upload component is added to the imports array of the configuration, enabling its use throughout the application.  Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/upload/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as upload from '@midwayjs/upload';\n@Configuration({\n  imports: [\n    // ...other components\n    upload\n  ],\n})\nexport class AutoConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature - TypeScript\nDESCRIPTION: This commit adds a guard feature to the application. The guard feature is responsible for controlling access to certain resources or functionalities based on predefined rules and conditions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/axios/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Define WeatherInfo interface in TypeScript\nDESCRIPTION: This TypeScript code defines an interface `WeatherInfo` representing the structure of the weather data received from the API.  This interface is used to provide type safety.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\n\n// ...\n\nexport interface WeatherInfo {\n  weatherinfo: {\n    city: string;\n    cityid: string;\n    temp: string;\n    WD: string;\n    WS: string;\n    SD: string;\n    AP: string;\n    njd: string;\n    WSE: string;\n    time: string;\n    sm: string;\n    isRadar: string;\n    Radar: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection for Entity Definition\nDESCRIPTION: This code shows how to specify the database connection to use for an entity using the `connectionName` option within the `@EntityModel` decorator.  This is important in multi-database configurations to ensure the entity is associated with the correct database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// entity/photo.ts\nimport { EntityModel } from '@midwayjs/orm';\n\n@EntityModel('photo', {\n  connectionName: 'test',\n})\nexport class Photo {\n  id: number;\n  name: string;\n  description: string;\n  filename: string;\n  views: number;\n  isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Create ETCD Instance\nDESCRIPTION: This TypeScript code shows how to dynamically create an ETCD instance using the `ETCDServiceFactory`. The `createInstance` method allows defining a new client with specific configurations at runtime.  It requires providing the configuration and a unique name for the instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/etcd.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { ETCDServiceFactory } from '@midwayjs/etcd';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  etcdServiceFactory: ETCDServiceFactory;\n\n  async invoke() {\n    const instance3 = await this.etcdServiceFactory.createInstance({\n      host: [\n        '127.0.0.1:2379'\n      ]\n    }, 'instance3');\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify tsconfig.json for Build Directory (MidwayJS)\nDESCRIPTION: Modifies the `tsconfig.json` file to specify a custom output directory for the compiled JavaScript files.  This is necessary when the compiled code should be placed in a directory other than the default `dist` directory.  The `outDir` compiler option is set to the new build directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/change_start_dir.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compileOnSave\": true,\n  \"compilerOptions\": {\n    // ...\n    \"outDir\": \"build\"\n  },\n  \"exclude\": {\n    \"build\",\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client test code for socket app with acknowledgement\nDESCRIPTION: This is the client side test code for a socket app with acknowledgement. The test sets up a socket client and a mock server. It uses the sendWithAck method to send a request to the socket app and waits for a response. It uses the jest expect function to compare the response from the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/socketio';\nimport { createSocketIOClient } from '@midwayjs/mock';\nimport { once } from 'events';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create socket app', async () => {\n    // 创建一个服务\n    const app = await createApp<Framework>(process.cwd(), { port: 3000 });\n\n    // 创建一个对应的客户端\n    const client = await createSocketIOClient({\n      port: 3000,\n    });\n\n    // 发送事件，这里使用了 await 的写法\n    const data = await client.sendWithAck('myEvent', 1, 2, 3);\n\n    // 判断结果\n    expect(data).toEqual({\n      name: 'harry',\n      result: 6,\n    });\n\n    // 关闭客户端\n    await client.close();\n    // 关闭服务端\n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Classes\nDESCRIPTION: This code snippet defines two entity classes, `SimpleUser` and `User`, representing database table structures. These classes are decorated with `@Entity()` and properties with `@Column()`. This is pseudo code as it does not provide the actual decorator definitions and relies on external ORM frameworks. The code shows that entity classes are same class as the table structure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/entity/user.entity.ts\n// Here is the pseudo code, the decorator needs to implement it by itself.\n@Entity()\nexport class SimpleUser {\n  @Column()\n  name: string;\n}\n\n@Entity()\nexport class User {\n  @Column()\n  name: string;\n\n  @Column()\n  age: number;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber in TypeORM\nDESCRIPTION: This code demonstrates how to create an event subscriber that listens for database operations (insert, update, remove) on entities. The subscriber logs messages before and after these events. It implements the `EntitySubscriberInterface` from TypeORM and is decorated with `@Provide()` and `@EventSubscriberModel()` from MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/decorator';\nimport { EventSubscriberModel } from '@midwayjs/orm';\nimport { EntitySubscriberInterface, InsertEvent, UpdateEvent, RemoveEvent } from 'typeorm';\n\n@Provide()\n@EventSubscriberModel()\nexport class EverythingSubscriber implements EntitySubscriberInterface {\n  /**\n   * Called before entity insertion.\n   */\n  beforeInsert(event: InsertEvent<any>) {\n    console.log(`BEFORE ENTITY INSERTED: `, event.entity);\n  }\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeUpdate(event: UpdateEvent<any>) {\n    console.log(`BEFORE ENTITY UPDATED: `, event.entity);\n  }\n\n  /**\n   * Called before entity insertion.\n   */\n  beforeRemove(event: RemoveEvent<any>) {\n    console.log(`BEFORE ENTITY WITH ID ${event.entityId} REMOVED: `, event.entity);\n  }\n\n  /**\n   * Called after entity insertion.\n   */\n  afterInsert(event: InsertEvent<any>) {\n    console.log(`AFTER ENTITY INSERTED: `, event.entity);\n  }\n\n  /**\n   * Called after entity insertion.\n   */\n  afterUpdate(event: UpdateEvent<any>) {\n    console.log(`AFTER ENTITY UPDATED: `, event.entity);\n  }\n\n  /**\n   * Called after entity insertion.\n   */\n  afterRemove(event: RemoveEvent<any>) {\n    console.log(`AFTER ENTITY WITH ID ${event.entityId} REMOVED: `, event.entity);\n  }\n\n  /**\n   * Called after entity is loaded.\n   */\n  afterLoad(entity: any) {\n    console.log(`AFTER ENTITY LOADED: `, entity);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing bootstrap in dev in MidwayJS\nDESCRIPTION: This commit addresses a bug related to the bootstrap process when running MidwayJS in a development environment. The fix ensures that the application initializes correctly during development, resolving any issues that may have prevented it from starting properly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Lifecycle List\nDESCRIPTION: This code snippet provides a list of available lifecycle events for the `package` command in the MidwayJS CLI. These events can be used to hook into different stages of the packaging process. It includes stages such as cleaning, installing dependencies, copying files, compiling, and generating deployment specifications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n 'cleanup', // 清理构建目录\n 'installDevDep', // 安装开发期依赖\n 'copyFile', // 拷贝文件: package.include 和 shared content\n 'compile', //\n 'emit', // 编译函数  'package:after:tscompile'\n 'analysisCode', // 分析代码\n 'copyStaticFile', // 拷贝src中的静态文件到dist目录，例如 html 等\n 'checkAggregation', // 检测高密度部署\n 'generateSpec', // 生成对应平台的描述文件，例如 serverless.yml 等\n 'generateEntry', // 生成对应平台的入口文件\n 'installLayer', // 安装layer\n 'installDep', // 安装依赖\n 'package', // 函数打包\n 'finalize', // 完成\n```\n\n----------------------------------------\n\nTITLE: Manual API call with headers\nDESCRIPTION: This snippet demonstrates how to manually call a Midway Hooks API using the `fetch` API and passing a header. It sends a GET request to `/auth` with the `token` header set to '123456'. The response is then parsed as JSON and logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('/auth', {\n  headers: {\n    token: '123456',\n  },\n})\n  .then((res) => res.json())\n  .then((res) => console.log(res)); // { token: '123456'}\n```\n\n----------------------------------------\n\nTITLE: External Object Injection with Namespace\nDESCRIPTION: Injects an object registered by the component using `registerObject`, specifying the component's namespace. This ensures that the correct object is injected from the component's container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/decorator';\n\n@Provide()\nexport class Library {\n\n  @Inject('book:aaa');\n  aaa: string;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Set Key-Value Pair in Consul\nDESCRIPTION: Sets a key-value pair in Consul's key-value store using the `consul.kv.set` method. It injects the Consul client and uses it to store the value 'juhai' under the key 'name'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport * as Consul from 'consul';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject('consul:consul')\n  consul: Consul.Consul;\n\n  @Get('/')\n  async home() {\n    await this.consul.kv.set(`name`, `juhai`)\n    // let res = await this.consul.kv.get(`name`);\n    // console.log(res);\n    return 'Hello Midwayjs!';\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Set Logger and Transport Levels in MidwayJS\nDESCRIPTION: This snippet illustrates how to set log levels for both the logger and the file transport separately in MidwayJS.  The transport level overrides the logger level.  Here, the logger level is set to `info`, while the file transport level is set to `warn`, so only `warn` and `error` messages will be written to the file.  This allows for fine-grained control over log output destinations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       // level of logger\n       level: 'info',\n       transports: {\n         file: {\n           //level of file transport\n           level: 'warn'\n         }\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Invoking gRPC Service - TypeScript\nDESCRIPTION: This snippet shows how to obtain a gRPC service client instance from the injected `Clients` object and invoke a service method.  It retrieves the 'helloworld.Greeter' service and calls the `sayHello` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/decorator';\nimport { helloworld, hero } from '../interface';\nimport { Clients } from '@midwayjs/grpc';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  grpcClients: Clients;\n\n  async invoke() {\n    // 获取服务\n    const greeterService = this.grpcClients.getService<helloworld.GreeterClient>('helloworld.Greeter');\n\n    // 调用服务\n    const result = await greeterService.sayHello().sendMessage({\n      name: 'harry',\n    });\n\n    // 返回结果\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Strict Property Initialization Check (TypeScript)\nDESCRIPTION: This snippet shows how to disable the strict property initialization check in `tsconfig.json`.  By setting `strictPropertyInitialization` to `false` (or removing the configuration), the compiler will not report an error (TS2564) when a property is not definitely assigned in the constructor.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/ts_problem.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"strictPropertyInitialization\": false // or remove\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO with Existing HTTP Server\nDESCRIPTION: This snippet illustrates how to integrate `@midwayjs/socketio` with other Midway web frameworks (e.g., Koa). It disables port configuration for Socket.IO and relies on the existing HTTP server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    port: 7001\n  },\n  socketIO: {\n    // No configuration here\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: MidwayJS Asynchronous Initialization\nDESCRIPTION: Demonstrates the use of the `@Init` decorator for asynchronous initialization of services in MidwayJS.  It showcases how to perform asynchronous tasks before a service is used.  Requires @midwayjs/decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class BaseService {\n  @Config('hello')\n  config;\n\n  @Plugin('plugin2')\n  plugin2;\n\n  @Init()\n  async init() {\n    await new Promise((resolve) => {\n      setTimeout(() => {\n        this.config.c = 10;\n        resolve();\n      }, 100);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Objects From Container Typescript\nDESCRIPTION: Demonstrates how to retrieve objects from the container using `getAsync` and `get`. `getAsync` is typically used when dealing with asynchronous dependencies. `get` is used for synchronous retrieval when no async operations are involved.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//... 省略绑定逻辑\n\nconst userService = await container.getAsync('userService'); // 这里根据 key 获取对象\nconst user = await userService.getUser('123');\n\n// 如果对象以及对象的依赖中没有异步的情况，也可以同步获取\nconst userService = container.get('userService');\nconst user = userService.getUser('123');\n//...\n```\n\n----------------------------------------\n\nTITLE: Detailed Producer Configuration\nDESCRIPTION: Illustrates a detailed configuration example for a Kafka producer, including `connectionOptions` and `producerOptions`.  These options are used to configure the connection to the Kafka cluster and customize the producer's behavior. Consult the KafkaJS Producer documentation for available producer options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    producer: {\n      clients: {\n        pub1: {\n          connectionOptions: {\n            clientId: 'my-app',\n            brokers: ['localhost:9092'],\n          },\n          producerOptions: {\n            // ...\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Format Code - Javascript\nDESCRIPTION: This commit applies code formatting changes to improve code readability and maintainability. The changes may include indentation, spacing, and line breaks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n456cc14513bdb000d1aa3130e9719caf7a8a803f\n```\n\n----------------------------------------\n\nTITLE: Modifying Express Port in Default Configuration - Typescript\nDESCRIPTION: This code snippet shows how to modify the default port of the Express HTTP service within the `config.default` file.  Changing the `port` property within the `express` configuration object will change the port the Express application listens on. The default port is 7001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/express.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  express: {\n    port: 6001,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Aliyun HTTP Trigger JSON Body Result\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Alibaba Cloud HTTP Trigger with JSON payload.  The request body is parsed into a JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"b\":\"c\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Output\nDESCRIPTION: This is the expected output from the `/metrics` endpoint after accessing the `/api/get_user` endpoint. It demonstrates the structure of Prometheus Histogram metrics, including buckets (le), sum, and count. The value '100' was observed once, resulting in an increment in the relevant bucket and updates to the sum and count.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# HELP test_histogram 132\n# TYPE test_histogram histogram\ntest_histogram_bucket{le=\"5\",APP_NAME=\"default\"} 0\ntest_histogram_bucket{le=\"10\",APP_NAME=\"default\"} 0\ntest_histogram_bucket{le=\"25\",APP_NAME=\"default\"} 0\ntest_histogram_bucket{le=\"50\",APP_NAME=\"default\"} 0\ntest_histogram_bucket{le=\"100\",APP_NAME=\"default\"} 1\ntest_histogram_bucket{le=\"250\",APP_NAME=\"default\"} 1\ntest_histogram_bucket{le=\"500\",APP_NAME=\"default\"} 1\ntest_histogram_bucket{le=\"1000\",APP_NAME=\"default\"} 1\ntest_histogram_bucket{le=\"2500\",APP_NAME=\"default\"} 1\ntest_histogram_bucket{le=\"5000\",APP_NAME=\"default\"} 1\ntest_histogram_bucket{le=\"10000\",APP_NAME=\"default\"} 1\ntest_histogram_bucket{le=\"+Inf\",APP_NAME=\"default\"} 1\ntest_histogram_sum{APP_NAME=\"default\"} 100\ntest_histogram_count{APP_NAME=\"default\"} 1\n```\n\n----------------------------------------\n\nTITLE: ESM Import with File Extension (TypeScript)\nDESCRIPTION: In ESM, import statements must include the `.js` file extension. This is required for the module resolver to correctly locate the module.  The code demonstrates a valid import statement in ESM and CJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/esm.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { helper } from \"./foo.js\"; // works in ESM & CJS\n```\n\n----------------------------------------\n\nTITLE: HTML Form Upload Example (HTML)\nDESCRIPTION: This code snippet presents a basic HTML form used for file uploads. It sets the `enctype` attribute to `multipart/form-data`, which is essential for transmitting files through an HTML form.  The form includes a file input and a submit button.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/api/upload\" method=\"post\" enctype=\"multipart/form-data\">\n  Name: <input type=\"text\" name=\"name\" /><br />\n  File: <input type=\"file\" name=\"testFile\" /><br />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: UserService using TestService\nDESCRIPTION: This TypeScript code defines a `UserService` class in MidwayJS. It injects a `TestService` dependency and calls its `setData` method in the `getUser` function. The result is then returned.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/process_agent.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/decorator';\nimport { TestService } from './test';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  testService: TestService;\n\n  async getUser() {\n    let result = await this.testService.setData(1);\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a custom filter to Nunjucks in Midway.js\nDESCRIPTION: This TypeScript code demonstrates how to add a custom filter to the Nunjucks environment in a Midway.js application. It injects the `NunjucksEnvironment` and uses the `addFilter` method to register a filter named 'hello'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Configuration, Inject } from '@midwayjs/core';\nimport * as view from '@midwayjs/view-nunjucks';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [view],\n  importConfigs: [join(__dirname, 'config')]\n})\nexport class MainConfiguration {\n\n  @App()\n  app;\n\n  @Inject()\n  env: view.NunjucksEnvironment;\n\n  async onReady() {\n    this.env.addFilter('hello', (str) => {\n      return 'hi, '+ str;\n    });\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware for Context Extension in Midway.js (Koa)\nDESCRIPTION: This code snippet demonstrates a middleware that extends the Koa context by adding a 'abc' property with the value '123'. This allows middleware functions to add custom attributes to the context object, making them available in subsequent handlers. The middleware uses the @midwayjs/core and @midwayjs/koa dependencies. The context is extended with the `abc` property of type `string`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/context_definition.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IWebMiddleware {\n\n  resolve() {\n    return async (ctx: Context, next) => {\n\n      ctx.abc = '123';\n      await next();\n\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configure UploadMiddleware Globally - Web\nDESCRIPTION: Configures the UploadMiddleware globally for a Midway Web application. This middleware will be applied to all incoming requests, handling multipart/form-data parsing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\nimport { Application } from '@midwayjs/web';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App('egg')\n  app: Application;\n  \n  async onReady() {\n    this.app.useMiddleware(busboy.UploadMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Definitions From Proto File\nDESCRIPTION: This JSON snippet defines a script in `package.json` to generate TypeScript interface definitions from a `.proto` file using the `tsproto` command from `@midwayjs/grpc-helper`. It specifies the path to the proto files and the output directory for the generated interfaces.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n     \"generate\": \"tsproto --path proto --output src/domain\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually calling API endpoint with query parameters\nDESCRIPTION: This snippet demonstrates how to manually invoke an API endpoint that expects query parameters, using the `fetch` API.  It constructs the URL with the desired query parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('/api/articles?page=0&limit=10')\n  .then((res) => res.json())\n  .then((res) => console.log(res)); // { page: '0', limit: '10' }\n```\n\n----------------------------------------\n\nTITLE: Enable OTEL Component\nDESCRIPTION: This code snippet shows how to enable the `@midwayjs/otel` component within a Midway.js application by importing it and adding it to the `imports` array within the `Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as otel from '@midwayjs/otel';\n\n@Configuration({\n   imports: [\n     //...\n     otel\n   ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cache Manager Package\nDESCRIPTION: Installs the `@midwayjs/cache-manager` package using npm. This is the first step to using the caching functionality in your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/cache-manager@3 --save\n```\n\n----------------------------------------\n\nTITLE: Updating socket.io dependencies - Bug fix\nDESCRIPTION: This snippet addresses a bug fix involving updating socket.io packages to version v4.4.1. It ensures compatibility and resolves potential issues related to older socket.io versions within the MidwayJS framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Integrate Prometheus Socket.IO module\nDESCRIPTION: Integrates the @midwayjs/prometheus-socket-io module in MidwayJS. This allows to expose socket.io data on the /metrics endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as prometheus from '@midwayjs/prometheus';\nimport * as prometheusSocketIo from '@midwayjs/prometheus-socket-io';\n\n@Configuration({\n  imports: [prometheus, prometheusSocketIo],\n  importConfigs: [join(__dirname, './config')]\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Disable Case Insensitivity in Git (Project Level)\nDESCRIPTION: This command configures Git to be case-sensitive for the current project. This is crucial for preventing issues where files with different capitalization are treated as the same file, especially when deploying to case-sensitive environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/git_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git config core.ignorecase false ## takes effect for the current project\n```\n\n----------------------------------------\n\nTITLE: Setting BullMQ Task Priority\nDESCRIPTION: This TypeScript code shows how to set the priority of a BullMQ task by specifying the `priority` option when adding the job to the queue. Lower numerical values indicate higher priority.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullmqFramework.getQueue('test');\n// priority 值越大优先级越高\nawait testQueue?.addJobToQueue({ priority: 1 }, { priority: 3 }); // 高优先级\nawait testQueue?.addJobToQueue({ priority: 2 }, { priority: 2 }); // 中优先级\nawait testQueue?.addJobToQueue({ priority: 3 }, { priority: 1 }); // 低优先级\n```\n\n----------------------------------------\n\nTITLE: Creating an OSS Trigger Function in Alibaba Cloud with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a function triggered by an OSS (Object Storage Service) event in Alibaba Cloud Function Compute using Midway.js. It uses the `@ServerlessTrigger` decorator to bind the function to the `OS` trigger type. The function receives an `OSSEvent` object as input and is expected to process it. It depends on the `@midwayjs/core`, `@midwayjs/faas`, and `@midwayjs/fc-starter` packages for dependency injection, serverless function context, and OSS event definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\nimport type { OSSEvent } from '@midwayjs/fc-starter';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.OS)\n  async handleOSSEvent(event: OSSEvent) {\n    // xxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting WebSocket Service (bootstrap.js)\nDESCRIPTION: This code snippet shows how to start a WebSocket service using a bootstrap file. It initializes the WebSocket framework, configures the port, and runs the application. It shows how to bootstrap a MidwayJS WebSocket application, configuring the port and loading the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\nconst WebSocketFramework = require('@midwayjs/ws').Framework;\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// 初始化 socket.io 框架\nconst webSocketFramework = new WebSocketFramework().configure({\n  port: 3000,\n});\n\nBootstrap.load(webSocketFramework).run();\n```\n\n----------------------------------------\n\nTITLE: Enable Conflict Check\nDESCRIPTION: This snippet shows how to enable conflict checking in the Midway.js configuration. When enabled, Midway will throw an error if it detects duplicate class names during code scanning in the dependency injection container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_code.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n@Configuration({\n  // ...\n  conflictCheck: true,\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-Many Photo Entity\nDESCRIPTION: This code adds a many-to-many relationship to the `Photo` entity, linking it to the `Album` entity. The `@ManyToMany` decorator defines the relationship, specifying the target entity (`Album`) and the reverse relation property in the `Album` entity (`album => album.photos`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n  /// ... other columns\n\n  @ManyToMany(type => Album, album => album.photos)\n  albums: Album[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default MIME Types in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet shows how to use the `DefaultUploadFileMimeType` variable provided by the `@midwayjs/busboy` component as the default MIME type validation rule.  This variable includes common file extensions and their corresponding MIME types.  It simplifies the configuration by providing a pre-defined set of MIME types.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList, DefaultUploadFileMimeType } from '@midwayjs/busboy';\nexport default {\n  // ...\n  busboy: {\n    // ...\n    // 扩展名白名单\n    whitelist: uploadWhiteList,\n    // 仅允许下面这些文件类型可以上传\n    mimeTypeWhiteList: DefaultUploadFileMimeType,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Axios Defaults\nDESCRIPTION: This snippet illustrates how to configure global Axios defaults, such as `baseURL`, `headers`, `timeout`, and `withCredentials` in `src/config.default.ts`.  These settings apply to all Axios requests made through the `HttpService`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/axios.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const axios = {\n  baseURL: 'https://api.example.com',\n  // `headers` are custom headers to be sent\n  headers: {\n    'X-Requested-With': 'XMLHttpRequest',\n  },\n  timeout: 1000, // default is `0` (no timeout)\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring TableStore Component\nDESCRIPTION: This TypeScript code shows how to import the TableStore component and configure it within a Midway.js application. It imports the module and includes it in the `imports` array of the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tablestore.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as tablestore from '@midwayjs/tablestore';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    tablestore // Import tablestore Components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Controller example\nDESCRIPTION: This is a basic MidwayJS controller with a single route ('/') that returns a simple string. It is used as a target for the interceptor example.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    return \"Hello Midwayjs!\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Validation in Controller (TypeScript)\nDESCRIPTION: This snippet demonstrates how to apply parameter validation using the `@Validate` decorator in a controller method.  The `@Validate` decorator automatically validates the `UserDTO` object based on the rules defined in the `UserDTO` class when the `updateUser` method is called.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\nimport { Controller, Get, Provide, ALL } from '@midwayjs/decorator';\nimport { UserDTO } from './dto/user';\n\n@Provide()\n@Controller('/api/user')\nexport class HomeController {\n  @Post('/')\n  @Validate()\n  async updateUser(@Body(ALL) user: UserDTO) {\n    // user.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Kafka Dependency to package.json\nDESCRIPTION: This JSON snippet shows how to add `@midwayjs/kafka` as a dependency in your `package.json` file. Make sure to reinstall dependencies after adding this.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/kafka\": \"^3.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File-Level Middleware Configuration in Midway Hooks\nDESCRIPTION: This snippet demonstrates how to define middleware at the file level in Midway Hooks.  The `config.middleware` array exports the desired middleware (`logger`) using `ApiConfig`. This middleware will apply to all API functions within the file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/middleware.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ApiConfig,\n  Api,\n  Get\n} from '@midwayjs/hooks';\nimport logger from './logger';\n\n// File Level Middleware\n// highlight-start\nexport const config: ApiConfig = {\n  middleware: [logger]\n};\n// highlight-end\n\nexport default Api(Get(), async () => {\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: BodyParser Configuration in Midway Koa\nDESCRIPTION: Illustrates how to use `koa-bodyparser` middleware in a Midway.js Koa application. It imports and uses the middleware within the `onReady` lifecycle hook. Requires installing `koa-bodyparser`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/body-parser.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { ILifeCycle } from '@midwayjs/core';\nimport { Application } from '@midwayjs/koa';\nimport * as bodyParser from 'koa-bodyparser';\n\n@Configuration()\nexport class ContainerLifeCycle implements ILifeCycle {\n  @App()\n  app: Application;\n\n  async onReady() {\n    // bodyparser options see https://github.com/koajs/bodyparser\n    this.app.use(bodyParser());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Default Instance Proxy - UserService - Typescript\nDESCRIPTION: This example demonstrates how to use the `HTTPClientService` in another service (`UserService`). It injects `HTTPClientService` using the `@Inject` decorator.  When the `invoke` method is called, `this.httpClientService` points to the `default2` client (as configured in the previous snippet), allowing direct access to its methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service_factory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPClientService } from './service/httpClientServiceFactory';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  httpClientService: HTTPClientService;\n\n  async invoke() {\n    // this.httpClientService points to default2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware Class in TypeScript\nDESCRIPTION: This snippet illustrates how to create a middleware class in MidwayJS using the `WebMiddleware` interface and decorators such as `@provide` and `@config`. The `resolve` method returns a middleware function that modifies the context before calling the next middleware.  The example shows how to inject configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/controller.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, WebMiddleware, provide, config } from 'midway';\n\n@provide()\nexport class ApiMiddleware implements WebMiddleware {\n  @config('hello')\n  helloConfig;\n\n  resolve(): Middleware {\n    return async (ctx, next) => {\n      ctx.api = '222' + this.helloConfig.b;\n      await next();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Singleton Decorator Usage (TypeScript)\nDESCRIPTION: Demonstrates the use of the `@Singleton` decorator, introduced in v3.10, as a simplified way to define a class as a singleton in MidwayJS. It achieves the same effect as using `@Provide` and `@Scope(ScopeEnum.Singleton)`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Singleton } from '@midwayjs/core';\n\n@Singleton()\nclass UserService {\n   //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger and Transport Levels (config.default.ts)\nDESCRIPTION: This code shows how to configure both the logger level and the transport level. The transport level overrides the logger level if both are set.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      // logger 的 level\n      level: 'info',\n      transports: {\n        file: {\n          // file transport 的 level\n          level: 'warn'\n        }\n      }\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: TenantManager Usage in Service\nDESCRIPTION: Illustrates how to use the TenantManager in a service to retrieve tenant information. The service is marked as a Singleton and injects the TenantManager. The getCurrentTenant method is used to retrieve the current tenant's information, which is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-05-07-release-3.16.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 服务中\n@Singleton()\nclass TenantService {\n  @Inject()\n  tenantManager: tenant.TenantManager;\n\n  async getTenantInfo() {\n    const tenantInfo = await this.tenantManager.getCurrentTenant();\n    console.log(tenantInfo.name);\n    // 我的租户\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing WebSocket Server Instance\nDESCRIPTION: Demonstrates how to access the WebSocket Server instance (Application) provided by the @midwayjs/ws component within a controller.  The @App decorator is used to inject the 'webSocket' application instance, allowing interaction with the underlying WebSocket server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, App } from '@midwayjs/core';\nimport { Application } from '@midwayjs/ws';\n\n@Controller()\nexport class HomeController {\n\n  @App('webSocket')\n  wsApp: Application;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, App } from '@midwayjs/core';\nimport { Application } from '@midwayjs/ws';\n\n@Controller()\nexport class HomeController {\n\n  @App('webSocket')\n  wsApp: Application;\n\n  async invoke() {\n    this.wsApp.clients.forEach(ws => {\n      // ws.send('something');\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers with ctx.set\nDESCRIPTION: This code snippet demonstrates how to set response headers using the `ctx.set` method in Midway Serverless. This method is a proxy for `response.setHeader`. In the example, it sets the 'X-FaaS-Duration' header to a value of 2100.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_context.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nctx.set('X-FaaS-Duration', 2100);\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration (config.default.ts)\nDESCRIPTION: This JavaScript code snippet configures the Redis client within a Midway.js application.  It specifies the port, host (referencing the Docker Compose service name), password, and database index. The host must match the redis service name in docker-compose.yml. Requires @midwayjs/redis component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n // ...\n  redis: {\n    client: {\n      port: 6379, // redis容器的端口\n      host: \"redis\", // 这里与docker-compose.yml文件中的redis服务名称一致\n      password: \"\", //默认没有密码，请自行修改为redis容器配置的密码\n      db: 0,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduled Task Registration in MidwayJS (TypeScript)\nDESCRIPTION: Demonstrates how to register a scheduled task in MidwayJS using decorators. This example defines a `HelloCron` class with the `@schedule` decorator, specifying the interval and execution type. The `exec` method contains the task's logic, utilizing the context logger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/framework.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/schedule/hello.ts\nimport { provide, schedule, CommonSchedule } from 'midway';\n\n@provide()\n@schedule({\n  interval: 2333, // 2.333s 间隔\n  type: 'worker', // 指定某一个 worker 执行\n})\nexport class HelloCron implements CommonSchedule {\n  // 定时执行的具体任务\n  async exec(ctx) {\n    ctx.logger.info(process.pid, 'hello');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending CLI Lifecycle with Hooks (Bash)\nDESCRIPTION: This snippet illustrates how to extend the CLI's behavior by adding custom logic to the `package.json` file under the `midway-integration` field, specifically using lifecycle hooks.  An example is provided to run `npm run build` after the `package:installDevDep` lifecycle event.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n{\n\t\"midway-integration\": {\n  \t\"lifecycle\": {\n    \t\"after:package:installDevDep\": \"npm run build\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint using @midwayjs/mock and getApiTrigger\nDESCRIPTION: This snippet demonstrates how to test a Midway Hooks API using `@midwayjs/mock` to create a test environment. It uses `getApiTrigger` to retrieve the endpoint's path and method, and then uses `createHttpRequest` to call the API and assert the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/hello.test.ts\nimport {\n  close,\n  createApp,\n  createHttpRequest,\n} from '@midwayjs/mock';\nimport {\n  Framework,\n  IMidwayKoaApplication,\n} from '@midwayjs/koa';\nimport { getApiTrigger, HttpTriger } from '@midwayjs/hooks';\nimport hello from './hello';\n\ndescribe('test koa with api router', () => {\n  let app: IMidwayKoaApplication;\n\n  beforeAll(async () => {\n    app = await createApp();\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  test('Hello World', async () => {\n    const trigger = getApiTrigger<HttpTriger>(hello);\n    const response = await createHttpRequest(app)\n      .get(trigger.path)\n      .expect(200);\n    expect(response.text).toBe('Hello World!');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: MidwayJS Asynchronous Dependency Resolution\nDESCRIPTION: Demonstrates the use of `container.getAsync` for asynchronous dependency resolution in MidwayJS.  This allows for asynchronous initialization of dependencies before injecting them. The container manages the lifecycle and dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 自动 new UserService();\n// 自动 new UserController();\n// 自动赋值 userController.userService = await container.getAsync(UserService);\n\nconst userController = await container.getAsync(UserController);\nawait userController.handler(); // output 'world'\n```\n\n----------------------------------------\n\nTITLE: Initializing ClusterManager for process management - Typescript\nDESCRIPTION: This code snippet demonstrates how to initialize and use the `ClusterManager` class in MidwayJS to create a master-worker process model. It checks if the current process is the primary process and starts the cluster manager if it is, otherwise, it runs the original child process using `Bootstrap.run()`. This setup is particularly useful for scenarios like socket.io with sticky sessions.  It requires `@midwayjs/bootstrap`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-12-13-release-3-9.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ClusterManager, Bootstrap } = require('@midwayjs/bootstrap');\n\nconst clusterManager = new ClusterManager({\n  // 执行的子进程文件\n  exec: __filename,\n  // 进程数\n  count: 2,\n});\n\nif (clusterManager.isPrimary()) {\n  // 启动主进程\n  clusterManager.start();\n} else {\n  // 原有子进程执行\n  Bootstrap.run();\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Transport Configuration\nDESCRIPTION: This snippet configures both the server and client to use only the WebSocket transport, disabling long polling. This can help avoid issues with sticky sessions in multi-process environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// Server\nexport default {\n   //...\n   socketIO: {\n     //...\n     transports: ['websocket'],\n   },\n}\n\n// client\nconst socket = io(\"http://127.0.0.1:7001\", {\n   transports: ['websocket']\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Loggers from App Instance - TypeScript\nDESCRIPTION: This snippet demonstrates how to create loggers from the `app` instance using `app.createLogger`. These loggers are automatically bound to the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AutoConfiguration {\n  @App()\n  app: IMidwayApplication;\n\n  async onReady() {\n    this.app.createLogger('custom1'); // 创建一个全功能的自定义日志\n\n    this.app.createLogger('custom2', {\n      // 创建了一个日志等级为 level，只输出到终端的日志\n      level: 'error',\n      disableFile: true,\n      disableError: true,\n    });\n\n    this.app.createLogger('custom3', {\n      fileLevel: 'warn', // 只修改文件日志等级\n      disableConsole: true, // 禁止终端输出\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BullMQ Original Objects - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the original BullMQ objects using `@midwayjs/bullmq`. This allows accessing object definitions like Queue, Worker, and FlowProducer for more advanced operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BullMQ } from '@midwayjs/bullmq';\n```\n\n----------------------------------------\n\nTITLE: Serverless Handler with Context (HTTP/API Gateway Trigger)\nDESCRIPTION: This code shows a Serverless function handler for HTTP or API Gateway triggers, utilizing the Context object from '@midwayjs/faas'. It imports Context and Provide, injects the context into the class, and defines a handler function that returns 'hello world'.  The handler function can set the response body either by directly returning a value or by setting `this.ctx.body`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_context.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\nimport { Provide } from '@midwayjs/core';\n\n@Provide()\nexport class Index {\n\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(...)\n  async handler() {\n    // 下面两种写法相同\n    // this.ctx.body = 'hello world';\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TagServiceFactory to Manage Tags\nDESCRIPTION: This code demonstrates how to use `TagServiceFactory` and `TagClient` to manage tags in a MidwayJS service. It shows injecting `TagServiceFactory` and `TagClient`, creating a new tag, and listing existing tags.  It relies on `@midwayjs/core` and `@midwayjs/tags`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/testTags.ts\nimport { Provide, Inject, InjectClient } from '@midwayjs/core';\nimport { TagServiceFactory, TagClient } from '@midwayjs/tags';\n@Provide()\nexport class TestTagsService {\n   @Inject()\n   tags: TagServiceFactory;\n\n   // Equivalent to this.tags.get('tagGroup1')\n   @InjectClient(TagServiceFactory, 'tagGroup1')\n   tagClient: TagClient;\n\n   @ServerlessTrigger(ServerlessTriggerType. HTTP, { path: '/tags/list', method: 'get'})\n   async listTags() {\n     // You can also use this.tagClient directly\n     const tagClient: TagClient = this. tags. get('tagGroup1');\n     // add new tag\n     const tagInfo = await tagClient. new({\n       name: 'test-tag-name',\n       desc: 'tag desc',\n     });\n     /*\n     tagInfo = {\n       success: true,\n       id: 1,\n     }\n     */\n     // list top 20 tags\n     const tags = await tagClient. list({ count: true });\n     /*\n     tags: {\n       list: [\n         {\n           id: 1,\n           name: 'test-tag-name',\n           desc: 'tag desc'\n         }\n       ],\n       total: 1\n     }\n     */\n     return tags;\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reloading Prometheus Configuration\nDESCRIPTION: This curl command reloads the Prometheus configuration without restarting the server. This is useful for applying changes to the configuration file, such as updating the targets.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST http://${prometheus的ip}:9090/-/reload\n```\n\n----------------------------------------\n\nTITLE: Example Version Compatibility JSON - JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the version compatibility file provided by `@midwayjs/version`. It maps Midway package names to compatible versions.  This helps determine if the versions of different Midway packages within a project are compatible with each other based on the decorator and core packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/how_to_update_midway.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"@midwayjs/egg-layer\": [\"2.10.18\", \"2.10.19\"],\n  \"@midwayjs/express-layer\": \"2.10.18\",\n  \"@midwayjs/faas-typings\": \"2.10.7\",\n  \"@midwayjs/koa-layer\": \"2.10.18\",\n  \"@midwayjs/runtime-engine\": \"2.10.14\",\n  \"@midwayjs/runtime-mock\": \"2.10.14\",\n  \"@midwayjs/serverless-app\": \"2.10.18\",\n  \"@midwayjs/serverless-aws-starter\": \"2.10.14\",\n  \"@midwayjs/serverless-fc-starter\": \"2.10.18\",\n  \"@midwayjs/serverless-fc-trigger\": \"2.10.18\",\n  \"@midwayjs/serverless-http-parser\": \"2.10.7\",\n  \"@midwayjs/serverless-scf-starter\": \"2.10.14\",\n  \"@midwayjs/serverless-scf-trigger\": \"2.10.18\",\n  \"@midwayjs/static-layer\": \"2.10.18\",\n  \"@midwayjs/bootstrap\": \"2.10.18\",\n  \"@midwayjs/cache\": \"2.10.18\",\n  \"@midwayjs/consul\": \"2.10.18\",\n  \"@midwayjs/core\": \"2.10.18\",\n  \"@midwayjs/decorator\": \"2.10.18\",\n  \"@midwayjs/faas\": \"2.10.18\",\n  \"@midwayjs/grpc\": \"2.10.18\",\n  \"@midwayjs/logger\": \"2.10.18\",\n  \"midway-schedule\": \"2.10.18\",\n  \"midway\": [\"2.10.18\", \"2.10.19\"],\n  \"@midwayjs/mock\": \"2.10.18\",\n  \"@midwayjs/prometheus\": \"2.10.18\",\n  \"@midwayjs/rabbitmq\": \"2.10.18\",\n  \"@midwayjs/socketio\": \"2.10.18\",\n  \"@midwayjs/task\": [\"2.10.18\", \"2.10.19\"],\n  \"@midwayjs/typegoose\": \"2.10.18\",\n  \"@midwayjs/version\": [\"2.10.18\", \"2.10.19\"],\n  \"@midwayjs/express\": \"2.10.18\",\n  \"@midwayjs/koa\": \"2.10.18\",\n  \"@midwayjs/web\": [\"2.10.18\", \"2.10.19\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Component Dependency - package.json\nDESCRIPTION: This JSON snippet shows how to add a component dependency to the `package.json` file.  The `@midwayjs/validate` component is added as a dependency. This allows the component to be installed and used within the MidwayJS application.  The version should match the desired version of the component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/midway_component.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@midwayjs/validate\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with npm\nDESCRIPTION: This command starts the Midway.js development server using npm. It is assumed that the project has already been initialized and has the necessary dependencies installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_create.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Kafka Context Logger Format Configuration\nDESCRIPTION: This TypeScript code shows how to configure the format of the Kafka context logger. You can customize the information included in each log entry using the `contextLoggerFormat` function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  kafka: {\n    // ...\n    contextLoggerFormat: info => {\n      const { jobId, from } = info.ctx;\n      return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.message}`;\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Http Server instance\nDESCRIPTION: This TypeScript code demonstrates how to obtain the underlying HttpServer instance in EggJS/Midway. The HttpServer instance is accessed via the 'server' event.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, App } from '@midwayjs/core';\nimport { Application } from '@midwayjs/web';\n\n@Configuration(/***/)\nexport class MainConfiguration {\n  \n  @App('egg')\n  app: Application;\n  \n  // ...\n  async onServerReady() {\n    this.app.once('server', (server) => {\n      // ...\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Function List - MidwayJS - TypeScript\nDESCRIPTION: Retrieves a list of function routes in MidwayJS, containing more detailed information about each function compared to the flattened router table. The `getFunctionList` method is called on the `serverlessFunctionService` object. It returns a promise that resolves to an array of `RouterInfo` objects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync getFunctionList(): Promise<RouterInfo[]>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await this.serverlessFunctionService.getFunctionList();\n```\n\n----------------------------------------\n\nTITLE: Initializing API with custom GET route\nDESCRIPTION: This snippet shows how to define a custom path for a GET route using Midway Hooks. The `Get('/hello')` specifies that the endpoint will be accessible at the `/hello` path. The handler function returns a 'Hello World!' string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get('/hello'), // Http Path: /hello\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Attaching Multiple Routes to a Single Method\nDESCRIPTION: This code snippet demonstrates how to attach multiple routes (e.g., GET and POST) to a single controller method using multiple route decorators (e.g., `@get` and `@post`). This allows a single method to handle different types of requests for different routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/controller.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\n@controller('/', { middleware: ['homeMiddleware'] })\nexport class My {\n  @inject()\n  ctx;\n\n  @get('/', { middleware: ['apiMiddleware'] })\n  @post('/api/data')\n  async index() {\n    this.ctx.body = this.ctx.home + (this.ctx.api || '');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Port - TypeScript\nDESCRIPTION: This TypeScript code configures the WebSocket port in the `config.default.ts` file. This is necessary when running the WebSocket server as a standalone framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  webSocket: {\n    port: 3000,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a route for static files in FaaS\nDESCRIPTION: This TypeScript snippet demonstrates how to define a route for static files within a Midway FaaS function. It uses the `@ServerlessTrigger` decorator to map the `/public/*` path to the `handleStaticFile` function, effectively serving static files through that route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/static_file.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Provide,\n  ServerlessTrigger,\n  ServerlessTriggerType\n} from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloHTTPService {\n\n  @ServerlessTrigger(ServerlessTriggerType.HTTP, {\n    path: '/public/*',\n    method: 'get',\n  })\n  async handleStaticFile() {\n    // This function can have no method body, just to let the gateway register an additional route\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Tenant Info in Singleton\nDESCRIPTION: This singleton service demonstrates how to retrieve tenant information using the `TenantManager`. The `getCurrentTenant` method retrieves the tenant information that was previously stored in the request context. It's important to note that this data is specific to the current request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tenant.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TenantManager } from '@midwayjs/tenant';\nimport { Inject, Singleton } from '@midwayjs/core';\nimport { TenantInfo } from '../interface';\n\n@Singleton()\nclass TenantService {\n  @Inject()\n  tenantManager: TenantManager;\n\n  async getTenantInfo() {\n    const tenantInfo = await this.tenantManager.getCurrentTenant<TenantInfo>();\n    if (tenantInfo) {\n      console.log(tenantInfo.name);\n      // output => 我的租户\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify SID Generation\nDESCRIPTION: This snippet demonstrates how to customize the session ID (SID) generation for Socket.IO. It uses the `uuid` package to generate unique IDs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst uuid = require(\"uuid\");\n\napp.engine.generateId = (req) => {\n  return uuid.v4(); // must be unique across all Socket.IO servers\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Entry File Using mwtsc\nDESCRIPTION: This JSON snippet defines a `dev` script within the `scripts` section of a `package.json` file. It uses the `mwtsc` tool to watch for file changes and run the application using `bootstrap.js` as the entry point. This approach allows for consistent initialization parameters between local development and online deployment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"mwtsc --watch --run bootstrap.js\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Call Example for TypeScript Support\nDESCRIPTION: This code demonstrates a manual call to the `/project` endpoint using `fetcher.post` with an invalid `name` (number instead of string). It catches the validation error and logs the parsed error message and HTTP status code (422).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfetcher\n  .post('/project', {\n    args: [\n      {\n        name: 1,\n        description: 'test project',\n        owner: 'test',\n        members: ['test'],\n      },\n    ],\n  })\n  .catch((error) => {\n    console.log(\n      JSON.parse(error.data.message)\n    );\n    console.log(error.status); // 422\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeORM Entity Model\nDESCRIPTION: This code snippet demonstrates how to define a TypeORM entity model using decorators. It defines an entity named `Photo` that maps to the `test_user` table in the database.  It defines a primary key column `id` and a column `name`, as well as a OneToMany relation with the Message entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typeorm/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// model/user.ts\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\n\n@Entity('test_user')\nexport class Photo {\n  @PrimaryGeneratedColumn({ name: \"id\" })\n  id: number;\n\n  @Column({ name: \"name\" })\n  name: string;\n\n  @OneToMany(type => Message, message => message.sender)\n  messages: Message[];\n}\n```\n\n----------------------------------------\n\nTITLE: Add @midwayjs/bull as dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add @midwayjs/bull as a dependency in the `package.json` file. After adding this, run `npm install` to install the package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/bull\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using cors middleware with Express\nDESCRIPTION: This code snippet shows how to integrate the `cors` middleware into a Midway.js Express application within the `configuration.ts` file. It imports necessary modules and registers the `cors` middleware with a default configuration to allow all origins.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/express';\nimport * as cors from 'cors';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(\n      cors({\n        origin: '*',\n      })\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESM No Module.exports or exports. (TypeScript)\nDESCRIPTION: In ESM, you can no longer use `module.exports` or `exports.` to export modules. You must use the `export` keyword instead.  The code example shows how to export a function using the `export` keyword and how not to import a function in ESM\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/esm.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ./foo.ts\nexport function helper() {\n     //...\n}\n// ./bar.ts\nimport { helper } from \"./foo\"; // only works in CJS\n```\n\n----------------------------------------\n\nTITLE: Wrapping Method Call with `around`\nDESCRIPTION: This example demonstrates how to use the `around` lifecycle method to wrap the entire method call process. It shows how to execute the original method using `point.proceed` and modify the result before returning it.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    return 'hello';\n  }\n}\n\n// src/aspect/report.ts\n@Aspect(HomeController, 'home') // Only the home method is intercepted here.\nexport class ReportInfo implements IMethodAspect {\n  async around(point: JoinPoint) {\n    Const result = await point.proceed(...point.args); //Execute the original method\n    return result + 'world';\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: User Service Creation\nDESCRIPTION: This code snippet demonstrates how to create a service class in MidwayJS. The `@Provide()` decorator registers the class with the dependency injection container, making it available for injection into other components. The `getUser` method simulates fetching user data based on an ID.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/user.ts\nimport { Provide } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n  async getUser(id: number) {\n    return {\n      id,\n      name: 'Harry',\n      age: 18,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Docker Compose\nDESCRIPTION: Starts the Docker Compose environment, deploying Prometheus with the configured settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up\n```\n\n----------------------------------------\n\nTITLE: Configure session options - TypeScript\nDESCRIPTION: Configures session-related options in the `config.*.ts` file. These options control the behavior of the session, such as maximum age, key, httpOnly flag, encryption, and logging of values. The configuration leverages koa-session options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const session = {\n  maxAge: 24 * 3600 * 1000, // ms\n  key: 'mw.sess',\n  httpOnly: true,\n  encrypt: true,\n  // sameSite: null,\n  logValue: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading to the Latest Compatible Version using npm\nDESCRIPTION: This command upgrades all Midway modules to the latest compatible version using npm. The `-m` flag instructs the tool to identify the latest compatible version within the existing version range. The `-w` flag writes the changes to `package.json` and `package-lock.json`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/version_check.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest -m\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest -m -w\n```\n\n----------------------------------------\n\nTITLE: Query Consul for Unhealthy Service\nDESCRIPTION: Demonstrates querying Consul for an unhealthy service instance using the `BalancerService`. The second parameter of the `select` method is set to `false` to retrieve unhealthy instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/core';\nimport { BalancerService } from '@midwayjs/consul'\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  balancerService: BalancerService;\n\n  @Get('/')\n  async home() {\n\n    const service = await this.balancerService\n      .getServiceBalancer()\n      .select('my-midway-project', false);\n\n    console.log(service);\n\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Cache\nDESCRIPTION: Configures a default in-memory cache in the `config.default.ts` file. This defines the cache store to be 'memory'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n   cacheManager: {\n     clients: {\n       default: {\n         store: 'memory',\n       },\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Functional Route Development with Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to define a route in Midway.js using functional programming with hooks. It imports `useContext` from `@midwayjs/hooks` and `Context` from `@midwayjs/koa`. The `home` function retrieves the context using `useContext`, and returns a JSON response containing a message and the client's IP address.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/intro.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/api/index.ts\n\nimport { useContext } from '@midwayjs/hooks'\nimport { Context } from '@midwayjs/koa';\n\nexport default async function home () {\n  const ctx = useContext<Context>()\n\n  return {\n    message: 'Hello Midwayjs!',\n    query: ctx.ip\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a custom error code enum in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a custom error code enumeration.  These values are used in conjunction with `registerErrorCode`\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_error.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst CustomErrorEnum = {\n  UNKNOWN: 10000,\n  COMMON: 10001,\n  PARAM_TYPE: 10002,\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Function Result (JSON) - Alibaba & Tencent Cloud HTTP Trigger\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed when it is sent as a JSON object. The `ctx.request.body` will be the received and parsed JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"b\":\"c\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Hooks Build Command Options\nDESCRIPTION: This section shows the available options when running `hooks build` from the command line. The `--outDir` option specifies the output directory for the build artifacts. The `--clean` option indicates whether to clean the output directory before building.  The `--help` option displays the help message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/fullstack.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage:\n  $hooks build [root]\n\nOptions:\n  --outDir <dir> [string] output directory (default: dist)\n  --clean [boolean] clean output directory before build (default: false)\n  -h, --help Display this message\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple ETCD Instances - UserService\nDESCRIPTION: This TypeScript code demonstrates how to retrieve multiple ETCD instances within a MidwayJS service using `ETCDServiceFactory`.  The factory is injected, and the `get` method is used to obtain specific instances by name (e.g., 'instance1', 'instance2').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/etcd.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { ETCDServiceFactory } from '@midwayjs/etcd';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  etcdServiceFactory: ETCDServiceFactory;\n\n  async invoke() {\n    const instance1 = this.etcdServiceFactory.get('instance1');\n    // ...\n\n    const instance2 = this.etcdServiceFactory.get('instance2');\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduled Tasks Configuration (typescript)\nDESCRIPTION: This snippet illustrates the configuration needed to use the old `@Schedule` decorator. The `midway-schedule` package needs to be installed and imported as an Egg plugin.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/plugin.ts\n\nexport default {\n  schedule: true,\n  schedulePlus: {\n    enable: true,\n    package: 'midway-schedule',\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Local Testing with Timer Trigger - TypeScript\nDESCRIPTION: This code snippet shows how to test a timer-triggered function locally in MidwayJS using `createFunctionApp` and `getServerlessInstance`. It imports necessary modules from `@midwayjs/mock`, `@midwayjs/serverless-app`, `@midwayjs/serverless-fc-trigger`, and `path`.  It creates a function app, gets an instance of the service, and then calls the timer-triggered function with a mock timer event.  It asserts that the function returns 'hello world'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_timer.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\nimport { createTimerEvent, createInitializeContext } from '@midwayjs/serverless-fc-trigger';\nimport { join } from 'path';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n  let instance: HelloAliyunService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(),\n    });\n    instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from timer trigger', async () => {\n    expect(await instance.handleTimerEvent(createTimerEvent())).toEqual('hello world');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Services in Midway.js (config.default.ts)\nDESCRIPTION: This code snippet demonstrates how to configure gRPC services in the `config.default.ts` file of a Midway.js application. It defines the `grpcServer` configuration, specifying the `protoPath` (absolute path to the proto file) and `package` for each gRPC service. The `appInfo` object provides application-related information, such as the application directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { MidwayAppInfo, MidwayConfig } from '@midwayjs/core';\nimport { join } from 'path';\n\nexport default (appInfo: MidwayAppInfo): MidwayConfig => {\n  return {\n    // ...\n    grpcServer: {\n      services: [\n        {\n          protoPath: join(appInfo.appDir, 'proto/hero.proto'),\n          package: 'hero',\n        },\n        {\n          protoPath: join(appInfo.appDir, 'proto/helloworld.proto'),\n          package: 'helloworld',\n        }\n      ],\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Complete package.json for Midway with EggJS Framework\nDESCRIPTION: This JSON shows a complete `package.json` example for a Midway application that integrates a custom EggJS framework.  It includes dependencies for Midway, the custom framework (`fake-egg`), and EggJS itself.  The `egg.framework` property specifies the custom framework to use.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/custom_eggjs.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"{{name}}\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@midwayjs/web\": \"^2.3.0\",\n    \"@midwayjs/decorator\": \"^2.3.0\",\n    \"fake-egg\": \"^1.0.0\",\t\t\t\t\t\t\t\t\t\t// 这里增加了上层框架\n    \"egg\": \"^2.0.0\",\n    \"egg-scripts\": \"^2.10.0\",\n    \"midway\": \"^2.3.0\"\n  },\n  \"devDependencies\": {\n    ...\t\t\t\t\t\t\t\t\t\t\t\t\t// 开发依赖没有变化\n  },\n  \"egg\": {\n    \"framework\": \"fake-egg\"\t\t\t\t\t\t\t\t\t\t// 额外增加一个配置指定上层框架\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the default extension for view templates in Midway.js\nDESCRIPTION: This TypeScript code demonstrates how to configure the default extension for view templates in a Midway.js application.  By setting `defaultExtension` to `.ejs`, you can omit the extension when calling `ctx.render`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  view: {\n    defaultExtension: '.ejs',\n    mapping: {\n      '.ejs': 'ejs',\n    },\n  },\n  // ejs config\n  ejs: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Parsing Mode in Koa (MidwayJS)\nDESCRIPTION: This code snippet shows how to configure the query parsing mode in a MidwayJS application using the Koa framework. The `queryParseMode` parameter determines how query parameters are parsed, allowing for different handling of array values. The available options are `extended`, `strict`, and `first`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n   // ...\n   koa: {\n     queryParseMode: 'extended',\n     // ...\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Application Directory Path\nDESCRIPTION: This code shows how to use `this.app.getAppDir()` to retrieve the project's root directory path. This method is useful for accessing files and resources within the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getAppDir();\n// => /my_project\n```\n\n----------------------------------------\n\nTITLE: Defining a GET API endpoint with path parameters\nDESCRIPTION: This example demonstrates defining a GET API endpoint with path parameters in Midway Hooks.  It utilizes `Api`, `Get`, `Params`, and `useContext` to define the endpoint '/article/:id'. The id parameter from the URL is extracted using useContext and ctx.params.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Api, Get, Params, useContext } from '@midwayjs/hooks'\n\nexport default Api (\n  Get('/article/:id'),\n  Params<{ id: string }> (,\n  async () => {\n    const ctx = useContext()\n    return {\n      article: ctx.params.id\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Sequelize Component\nDESCRIPTION: Adds the sequelize component to the MidwayJS framework. This integration allows developers to utilize Sequelize for database interactions within their applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/sequelize/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n- add sequelize component ([#1283](https://github.com/midwayjs/midway/issues/1283)) ([9ad91d1](https://github.com/midwayjs/midway/commit/9ad91d1e3ef3cf4cd799a1f8ef3d57b7efae60cf))\n```\n\n----------------------------------------\n\nTITLE: Translate with Group Specification\nDESCRIPTION: Shows how to use the `translate` method with a specific group. This allows you to select translations from a group other than the default one. The `group` parameter specifies which group to use. Requires `@midwayjs/i18n`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nthis.i18nService.translate('user.hello', {\n  args: {\n    username: 'harry',\n  },\n  group: 'user', // Specify other groups\n  locale: 'en_US',\n});\n\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers with @SetHeader\nDESCRIPTION: This code demonstrates how to set custom response headers using the `@SetHeader` decorator. The `home` method will set the `x-bbb` header to `123`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Provide, SetHeader } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  @SetHeader('x-bbb', '123')\n  async home() {\n    return 'Hello Midwayjs!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Singleton Scope Injection Example\nDESCRIPTION: This code illustrates a potential error (MIDWAY_10010) due to scope confusion, where a request-scoped `UserService` is injected into a singleton `LoginService`.  To resolve this, either modify the request scope to singleton, or explicitly declare the scope option with `allowDowngrade: true` on the request-scoped class. This prevents automatic domain degradation and caching instance data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_code.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n@Provide()\nexport class UserService {}\n\n// ...\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class LoginService {\n  @Inject()\n  userService: UserService;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Scope(ScopeEnum.Request, { allowDowngrade: true })\nexport class UserService {}\n```\n\n----------------------------------------\n\nTITLE: Modifying Bootstrap File for Single File Build\nDESCRIPTION: This TypeScript code modifies the entry `bootstrap.js` file. It explicitly imports the user code as a component and disables directory scanning for dependency injection.  This is needed because all code is now in the single file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// Explicitly introduce user code as a component\nBootstrap. configure({\n   // Here is the compiled entry, local development does not use this file\n   imports: require('./dist/index'),\n   // Disable directory scanning for dependency injection\n   moduleDetector: false,\n}).run()\n\n```\n\n----------------------------------------\n\nTITLE: Adding Session Dependency in Serverless\nDESCRIPTION: This JSON snippet demonstrates how to add the `@midwayjs/session` dependency to a serverless project.  This is required to enable session management in serverless environments. Version `^3.0.0` or later.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/cookie_session.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"dependencies\": {\n     \"@midwayjs/session\": \"^3.0.0\",\n     // ...\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Import Configs - TypeScript\nDESCRIPTION: This snippet demonstrates how to explicitly specify a list of configuration files to load using the `importConfigs` property in the `@Configuration` decorator. If any of the specified files are missing, an error will be thrown.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport { join } from 'path';\n\n@Configuration({\n  importConfigs: [\n    join(__dirname, './config/config.default'),\n    join(__dirname, './config/config.local'),\n    join(__dirname, './config/custom.local'), // 可以使用自定义的命名，只要中间部分带环境就行\n  ],\n})\nexport class ContainerLifeCycle {}\n\n```\n\n----------------------------------------\n\nTITLE: Using the DTO instance (TypeScript)\nDESCRIPTION: Shows the usage of the UserDTO object created by parameter transformation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/dto/user.ts\nimport { Rule, RuleType } from '@midwayjs/decorator';\n\nexport class UserDTO {\n  @Rule(RuleType.number().required())\n  id: number;\n\n  @Rule(RuleType.string().required())\n  firstName: string;\n\n  @Rule(RuleType.string().max(10))\n  lastName: string;\n\n  getName() {\n    return this.firstName + ' ' + this.lastName;\n  }\n\n  isAdult() {\n    return this.age > 36 && this.age < 60;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Function Middleware in Midway Hooks\nDESCRIPTION: This example shows how to apply middleware to a single API function in Midway Hooks using the `Middleware` function. The specified middleware (`logger`) is applied only to this specific function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/middleware.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Middleware\n} from '@midwayjs/hooks';\nimport logger from './logger';\n\nexport default Api (\n  Get(),\n  // highlight-start\n  Middleware(logger)\n  // highlight-end\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Add Validate dependency\nDESCRIPTION: Adds the @midwayjs/validate dependency to the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/validate\": \"^3.0.0\"\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual API call with Fetch\nDESCRIPTION: This snippet demonstrates how to manually call a Midway Hooks API using the `fetch` API. It sends a POST request to `/api/say` with the argument 'Midway' in the request body. The response is then parsed as text and logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('/api/say', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    args: ['Midway']\n  }),\n})\n  .then((res) => res.text())\n  .then((res) => console.log(res)); // Hello Midway!\n```\n\n----------------------------------------\n\nTITLE: Define Build Script Using @midwayjs/cli\nDESCRIPTION: This JSON snippet defines the `build` script in the `package.json` file.  It utilizes the `@midwayjs/cli` with the command `midway-bin build -c` to compile the TypeScript code. The `-c` flag likely indicates that the build should be cleaned before building.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"midway-bin build -c\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin Dependency\nDESCRIPTION: This command installs the @midwayjs/casbin package as a project dependency using npm. The `--save` flag adds the package to your project's package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/casbin@3 --save\n```\n\n----------------------------------------\n\nTITLE: Example Midway.js Package Version Compatibility JSON\nDESCRIPTION: This JSON snippet illustrates the version compatibility mapping provided by the `@midwayjs/version` package. It shows which versions of other Midway.js packages are compatible with specific versions of `@midwayjs/decorator` and `@midwayjs/core`. This file helps identify potential version conflicts between Midway.js packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/how_to_update_midway.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@midwayjs/egg-layer\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ],\n  \"@midwayjs/express-layer\": \"2.10.18\",\n  \"@midwayjs/faas-typings\": \"2.10.7\",\n  \"@midwayjs/koa-layer\": \"2.10.18\",\n  \"@midwayjs/runtime-engine\": \"2.10.14\",\n  \"@midwayjs/runtime-mock\": \"2.10.14\",\n  \"@midwayjs/serverless-app\": \"2.10.18\",\n  \"@midwayjs/serverless-aws-starter\": \"2.10.14\",\n  \"@midwayjs/serverless-fc-starter\": \"2.10.18\",\n  \"@midwayjs/serverless-fc-trigger\": \"2.10.18\",\n  \"@midwayjs/serverless-http-parser\": \"2.10.7\",\n  \"@midwayjs/serverless-scf-starter\": \"2.10.14\",\n  \"@midwayjs/serverless-scf-trigger\": \"2.10.18\",\n  \"@midwayjs/static-layer\": \"2.10.18\",\n  \"@midwayjs/bootstrap\": \"2.10.18\",\n  \"@midwayjs/cache\": \"2.10.18\",\n  \"@midwayjs/consul\": \"2.10.18\",\n  \"@midwayjs/core\": \"2.10.18\",\n  \"@midwayjs/decorator\": \"2.10.18\",\n  \"@midwayjs/faas\": \"2.10.18\",\n  \"@midwayjs/grpc\": \"2.10.18\",\n  \"@midwayjs/logger\": \"2.10.18\",\n  \"midway-schedule\": \"2.10.18\",\n  \"midway\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ],\n  \"@midwayjs/mock\": \"2.10.18\",\n  \"@midwayjs/prometheus\": \"2.10.18\",\n  \"@midwayjs/rabbitmq\": \"2.10.18\",\n  \"@midwayjs/socketio\": \"2.10.18\",\n  \"@midwayjs/task\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ],\n  \"@midwayjs/typegoose\": \"2.10.18\",\n  \"@midwayjs/version\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ],\n  \"@midwayjs/express\": \"2.10.18\",\n  \"@midwayjs/koa\": \"2.10.18\",\n  \"@midwayjs/web\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using app.getBaseDir() to get the project base directory\nDESCRIPTION: This code snippet demonstrates how to use the `getBaseDir()` method to retrieve the project's base directory, which typically points to the `src` directory during development and the `dist` directory after compilation. This is useful for locating application source code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getBaseDir();\n// => /my_project/src\n```\n\n----------------------------------------\n\nTITLE: Running Code Analysis\nDESCRIPTION: Analyzes the code for potential problems and provides repair suggestions.  Uses the `check` command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin check\n```\n\n----------------------------------------\n\nTITLE: App Logger Usage with @Logger - Typescript\nDESCRIPTION: This snippet demonstrates how to use the `@Logger()` decorator to inject the application-level logger (App Logger) into a configuration class. It shows how to log information, debug messages, warnings, and errors during the application startup phase. This logger is suitable for recording data and events related to the application itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Logger } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  @Logger()\n  logger: ILogger;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    this.logger.debug('debug info');\n    This.logger.info ('startup takes% d ms', Date.now() - start);\n    this.logger.warn('warning!');\n\n    this.logger.error(someErrorObj);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding mwts as a development dependency\nDESCRIPTION: This JSON snippet shows how to add mwts and typescript as development dependencies to a project.  This is required to use the linting and formatting tools.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwts.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n  \"devDependencies\": {\n    \"mwts\": \"^1.0.5 \",\n    \"typescript\": \"^4.0.0\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Messages\nDESCRIPTION: This code snippet illustrates how to handle incoming WebSocket messages using the @OnWSMessage decorator. When the client sends a 'message' event, the gotMessage function processes the data, adds 5 to it, and returns a JSON object containing the name 'harry' and the calculated result. It uses Context for WebSocket instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, Provide, OnWSConnection, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/ws';\n\n@Provide()\n@WSController()\nexport class HelloSocketController {\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('message')\n  async gotMessage(data) {\n    return { name: 'harry', result: parseInt(data) + 5 };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Midway Project with ESM Scaffolding (Bash)\nDESCRIPTION: This command initializes a new Midway project using the ESM scaffolding.  It uses npm to create a new project with the latest Midway version and pre-selects the esm group scaffolding.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/esm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Using Definite Assignment Assertion for Properties (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the definite assignment assertion operator (`!`) to tell the TypeScript compiler that a class property will definitely be assigned a value at runtime, even though it's not initialized in the constructor. This is useful when properties are injected or assigned asynchronously.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/ts_problem.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomeController {\n  @Inject()\n  userService!: UserService;\n}\n```\n\n----------------------------------------\n\nTITLE: Unified Call with Complex Type Validation Error Handling\nDESCRIPTION: This example shows how to handle validation errors when using the unified call method with a complex type defined by Zod. It attempts to create a project with an invalid `name` (number instead of string) and logs the error message and status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport createProject from './api';\n\ntry {\n  await createProject({\n    name: 1,\n    description: 'test project',\n    owner: 'test',\n    members: ['test'],\n  });\n} catch (error) {\n  console.log(error.message);\n  console.log(error.status); // 422\n}\n```\n\n----------------------------------------\n\nTITLE: Registering tsconfig-paths for Mocha\nDESCRIPTION: Registers tsconfig-paths for resolving path aliases when using Mocha for testing. This is required when paths are configured in `tsconfig.json`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save-dev tsconfig-paths\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin test --ts --mocha -r tsconfig-paths/register\n```\n\n----------------------------------------\n\nTITLE: Serverless route for static middleware\nDESCRIPTION: This snippet shows how to add a simple route in a Serverless function to ensure that the static file middleware is executed. This is necessary because some Serverless environments require explicit routes to trigger middleware execution. The function handles requests to `/public/*`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/static_file.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Provide, Controller， Get } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class ServerlessHelloService {\n\n  @Inject()\n  ctx: Context;\n\n  // 普通路由\n  @ServerlessTrigger(ServerlessTriggerType.HTTP, {\n    path: '/:user_id',\n    method: 'get',\n  })\n  async hello1() {\n    return 22;\n  }\n\n  @ServerlessTrigger(ServerlessTriggerType.HTTP, {\n    path: '/public/*',\n    method: 'get',\n  })\n  async render() {\n    // 这个函数的作用是为了让 static 全局中间件被执行。\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable package-lock.json generation with npm\nDESCRIPTION: This command disables the automatic generation of `package-lock.json` files by npm. This is useful in scenarios where the lock version causes unexpected issues. It configures npm globally to not generate the lockfile.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/npm_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm config set package-lock false\n```\n\n----------------------------------------\n\nTITLE: Creating a MidwayJS project with EggJS using scaffolding\nDESCRIPTION: These commands create a new MidwayJS project utilizing the EggJS framework via scaffolding. The `--type=egg-v3` flag specifies the EggJS v3 template.  Note the slight difference in syntax between npm v6 and npm v7 for passing arguments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm v6\n$ npm init midway --type=egg-v3 my_project\n\n# npm v7\n$ npm init midway -- --type=egg-v3 my_project\n```\n\n----------------------------------------\n\nTITLE: Defining Extensions for Request, Response, Application (TypeScript)\nDESCRIPTION: This code shows how to declare extension interfaces for Request, Response, and Application objects in MidwayJS. This allows you to add custom properties and methods to these objects while maintaining type safety.  The definitions are added in `src/interface.ts` within the 'egg' module.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\ndeclare module 'egg' {\n  interface Request {\n    // ...\n  }\n  interface Response {\n    // ...\n  }\n  interface Application {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Application and Context types\nDESCRIPTION: This code snippet demonstrates how to import the Application and Context types from different Midway framework modules (Egg, Koa, Express) for defining request and response objects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/req_res_app.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context } from 'egg';\nimport { Application, Context } from '@midwayjs/koa';\nimport { Application, Context } from '@midwayjs/express';\n```\n\n----------------------------------------\n\nTITLE: Adding Component and Framework Config Definition - Javascript\nDESCRIPTION: This feature introduces component and framework configuration definitions within the MidwayJS project. This enhancement provides a standardized way to configure components and the overall framework, improving maintainability and scalability.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nb2fe6157f99659471ff1333eca0b86bb889f61a3\n```\n\n----------------------------------------\n\nTITLE: Determining Environment Using MidwayEnvironmentService\nDESCRIPTION: This snippet demonstrates using the `MidwayEnvironmentService` to determine the current environment. The service is injected into a controller and used within a route handler to potentially perform environment-specific logic. The service can also set the current environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayEnvironmentService, Inject, Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  environmentService: MidwayEnvironmentService;\n\n  @Get('/')\n  async home() {\n    // this.environmentService.getCurrentEnvironment();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MidwayJS Captcha as a Dependency (JSON)\nDESCRIPTION: This JSON snippet shows how to add the @midwayjs/captcha component as a dependency in your project's `package.json` file.  It is an alternative to using the command line.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/captcha.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/captcha\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Start Midway.js Application in Docker with PM2\nDESCRIPTION: This command starts a Midway.js application within a Docker container using `pm2-runtime`. It specifies the application name and the number of instances.  `pm2-runtime` is specifically designed for container environments to prevent backgrounded processes from exiting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/pm2.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ NODE_ENV=production pm2-runtime start ./bootstrap.js --name midway_app -i 4\n```\n\n----------------------------------------\n\nTITLE: Defining Aspect with Default Priority in TypeScript\nDESCRIPTION: This code defines an aspect named `MyAspect1` that intercepts methods of `HomeController`. It implements the `IMethodAspect` interface and logs '111' to the console before the intercepted method is executed. The priority is the default value, which is 0.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Aspect([HomeController])\nexport class MyAspect1 implements IMethodAspect {\n  before(point: JoinPoint) {\n    console.log('111');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install I18n Component with NPM\nDESCRIPTION: Installs the `@midwayjs/i18n` component using npm. This command adds the i18n functionality to your MidwayJS project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/i18n@3 --save\n```\n\n----------------------------------------\n\nTITLE: Adding AOP Support\nDESCRIPTION: This commit introduces Aspect-Oriented Programming (AOP) support to MidwayJS. AOP enables developers to modularize cross-cutting concerns such as logging, security, and transaction management, leading to cleaner and more maintainable code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nadd aop ([#640](https://github.com/midwayjs/midway/issues/640)) ([c3e15b3](https://github.com/midwayjs/midway/commit/c3e15b328c184318e364bf40d32fa4df6be2a30a))\n```\n\n----------------------------------------\n\nTITLE: Loading Egg Application using hook in MidwayJS\nDESCRIPTION: This commit uses a hook to load the Egg.js application within MidwayJS. This likely changes the way the underlying Egg.js framework is initialized and integrated, potentially improving the loading process or adding new integration points.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding Configuration and Initialization - TypeScript\nDESCRIPTION: This code snippet shows how to add configuration and initialization to the HTTPClientServiceFactory. It injects a configuration and initializes the clients using the initClients method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service_factory.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServiceFactory } from '@midwayjs/core';\nimport { Provide } from '@midwayjs/decorator';\n\n@Provide()\nexport class HTTPClientServiceFactory extends ServiceFactory<HTTPClient> {\n  @Config('httpClient')\n  httpClientConfig;\n\n  @Init()\n  async init() {\n    await this.initClients(this.httpClientConfig);\n  }\n\n  protected createClient(config: any): any {\n    // 创建实例\n    return new HTTPClient(config);\n  }\n\n  getName() {\n    return 'httpClient';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Swagger in specific environment\nDESCRIPTION: This code snippet demonstrates how to conditionally enable the Swagger component based on the environment. In this case, Swagger is only enabled in the 'local' environment, providing a way to restrict its use to development or testing environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport * as swagger from '@midwayjs/swagger';\n\n@Configuration({\n  imports: [\n    {\n      component: swagger,\n      enabledEnvironment: ['local'],\n    },\n  ],\n})\nexport class ContainerConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Importing Redis Component\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the Redis component into your MidwayJS application's configuration. This involves importing the necessary modules and adding `redis` to the `imports` array in the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as redis from '@midwayjs/redis';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    redis // import redis components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ],\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Cross-Domain Component - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and register the `@midwayjs/cross-domain` component within a MidwayJS configuration file (`src/configuration.ts`). This step is essential for enabling cross-domain functionality in your application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cross_domain.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as crossDomain from '@midwayjs/cross-domain';\n@Configuration({\n  imports: [\n    // ...other components\n    crossDomain\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Socket Message Handler Context\nDESCRIPTION: This code shows how to create a basic socket message handler within a MidwayJS Socket.IO controller. The handler is responsible for handling different events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context, Application } from '@midwayjs/socketio';\n\n@Provide()\n@WSController('/')\nexport class HelloSocketController {\n  @Inject()\n  ctx: Context;\n\n  @App()\n  app: Application;\n\n  @OnWSMessage('myEvent')\n  @WSEmit('myEventResult')\n  async gotMessage() {\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the IoC Container with ctx.requestContext\nDESCRIPTION: This snippet demonstrates how to access the Midway FaaS IoC request scope container using `ctx.requestContext`. You can use it to retrieve instances of other IoC-managed objects, such as services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_context.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst userService = await ctx.requestContext.getAsync('userService');\n```\n\n----------------------------------------\n\nTITLE: Disable Dependency Package Checking in tsconfig.json (TypeScript)\nDESCRIPTION: This snippet shows how to disable dependency package checking in the `tsconfig.json` file. This can be useful when the TS version of the dependency package and the project itself are inconsistent, causing compile-time errors. Setting `skipLibCheck` to `true` will skip type checking of declaration files (.d.ts).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/ts_problem.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waterfall Pipeline Execution Example\nDESCRIPTION: Demonstrates the usage of the waterfall method of the Pipeline handler. It defines a Pipeline with 'stageOne' and 'stageTwo' and executes them in sequence. The output of 'stageOne' is passed as input to 'stageTwo'. The final result is the output of the last valve ('stageTwo').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nclass StageOne implements IValveHandler {\n  async invoke(ctx: IPipelineContext): Promise<any> {\n    if (ctx.args.aa !== 123) {\n      throw new Error('args aa is undefined');\n    }\n    ctx.set('stageone', 'this is stage one');\n    ctx.set('stageone_date', Date.now());\n    if (ctx.info.current !== 'stageOne') {\n      throw new Error('current stage is not stageOne');\n    }\n    if (ctx.info.next !== 'stageTwo') {\n      throw new Error('next stage is not stageTwo');\n    }\n    if (ctx.info.prev) {\n      throw new Error('stageOne prev stage is not undefined');\n    }\n\n    return 'stageone';\n  }\n}\n\n@Provide()\nclass StageTwo implements IValveHandler {\n  async invoke(ctx: IPipelineContext): Promise<any> {\n    const keys = ctx.keys();\n    if (keys.length !== 2) {\n      throw new Error('keys is not equal');\n    }\n    ctx.set('stagetwo', ctx.get('stageone') + 1);\n    ctx.set('stagetwo_date', Date.now());\n    // 验证是否是执行 stageOne 返回的结果\n    if (ctx.info.prevValue !== 'stageone') {\n      throw new Error('stageone result empty');\n    }\n    if (ctx.info.current !== 'stageTwo') {\n      throw new Error('current stage is not stageTwo');\n    }\n    if (ctx.info.next) {\n      throw new Error('stageTwo next stage is not undefined');\n    }\n    if (ctx.info.prev !== 'stageOne') {\n      throw new Error('prev stage is not stageOne');\n    }\n\n    return 'stagetwo';\n  }\n}\n\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline(['stageOne', 'stageTwo'])\n  stages: IPipelineHandler;\n\n  async runStagesWaterfall(): Promise<any> {\n    // 这里通过串行方式执行，可以看到 stageTwo 中做了校验，prevValue 即 stageOne 执行的结果\n    return this.stages.waterfall<any>({\n      args: { aa: 123 },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing MQTT Message Payload\nDESCRIPTION: This TypeScript code shows how to access the MQTT message payload within the `subscribe` method of a subscriber class. The `ctx.message` property of the `Context` object contains the message as a Buffer, which can be converted to a string using `toString()`.  This allows the subscriber to process the received message data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport class Sub1Subscriber implements IMqttSubscriber {\n  @Inject()\n  ctx: Context;\n\n  async subscribe() {\n    const payload = this.ctx.message.toString();\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Conversion for Boolean Request Parameters in MidwayJS\nDESCRIPTION: This TypeScript snippet shows how MidwayJS automatically converts a query parameter to a boolean type when declared in the method signature. Values like 0, \"0\", and \"false\" are converted to `false`, and the rest return Boolean(value) values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/')\nasync getUser(@Query('id') id: boolean): Promise<User> {\n  console.log(typeof id) // boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Registering tsconfig-paths (dev)\nDESCRIPTION: This code snippet imports and registers `tsconfig-paths` in the `src/configuration.ts` file. This allows the application to resolve alias paths defined in `tsconfig.json` during the development phase when running with `ts-node`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/alias_path.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport 'tsconfig-paths/register';\n// ...\n```\n\n----------------------------------------\n\nTITLE: Describe request parameters with detailed options\nDESCRIPTION: This code snippet shows how to provide more detailed descriptions for API parameters, including specifying whether they are required and providing example values. It demonstrates two ways of passing options to the `param` method for the `userId` and `name` parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@CreateApiDoc()\n.summary('get user')\n.description('This is a open api for get user')\n.param('user id', {\n  required: true,\n  example: '123456'\n})\n.param({\n  description: 'This is a user name'\n})\n.build()\n@Get('/:userId')\nasync getUser(@Param() userId: number, @Query() name?: string) {\n  return {\n    name: 'harry',\n    age: 18\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: This Docker Compose configuration defines a web service built from the current directory and a Redis service. The web service depends on Redis and maps port 7001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  web:\n    build: .\n    ports:\n      - \"7001:7001\"\n    links:\n      - redis\n    depends_on:\n      - redis\n  redis:\n    image: redis\n```\n\n----------------------------------------\n\nTITLE: Injecting Context with a custom name via @Inject\nDESCRIPTION: This snippet demonstrates how to use the `@Inject` decorator with a custom name ('ctx') to inject the Context instance into a controller. This allows using a different property name for the context, like `customContextName`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject('ctx')\n  customContextName: Context;\n\n  @Get('/')\n  async home() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Entry File\nDESCRIPTION: This JavaScript snippet demonstrates a simple entry file (`bootstrap.js`) for a Midway application. It requires the `@midwayjs/bootstrap` module and calls the `Bootstrap.run()` method to start the application. This file is crucial for deployment scenarios, facilitating link tracking and other advanced functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap.run();\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Endpoint - TypeScript\nDESCRIPTION: This code defines a POST endpoint in Midway Hooks. A function with parameters exported from a TypeScript file under the `lambda` folder automatically becomes a POST endpoint. The function takes a `name` parameter and returns a greeting message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function bar(name: string) {\n  return `hello ${name}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Translate with Array Arguments (Typescript)\nDESCRIPTION: Shows how to use an array for arguments in the `translate` method.  Placeholders in the translation text (e.g., `{0}`) are replaced by the array elements based on their index. Requires `@midwayjs/i18n`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync index(@Query('username') username: string) {\n  return this.i18nService.translate('hello', {\n    args: [username]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cookie-parser for @midwayjs/express\nDESCRIPTION: These commands install the `cookie-parser` middleware and its type definitions as dependencies for a Midway.js Express application. `cookie-parser` is used to parse cookies from the request headers, and `@types/cookie-parser` provides TypeScript typings for the middleware. Required before using cookies in Express.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cookies.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i cookie-parser --save\n$ npm i @types/cookie-parser --save-dev\n```\n\n----------------------------------------\n\nTITLE: GET Request with Query Parameters - TypeScript\nDESCRIPTION: This snippet demonstrates a GET request with query parameters using the `makeHttpRequest` function. It sets the `dataType` option to 'json', which parses the response body as JSON.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  data: {\n    a: 1,\n    b: 2\n  },\n  dataType: 'json',\t// 返回的数据格式\n});\n\n// typeof result.data => 'object'\n// result.data.url => /?a=1&b=2\n```\n\n----------------------------------------\n\nTITLE: Defining State Type in Koa with MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to define the State type in a Koa application within MidwayJS. The `declare module` syntax is used to augment the existing `@midwayjs/koa/dist/interface` module and add custom properties to the `Context` and `State` interfaces.  This enables Typescript support for custom context and state properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\n\ndeclare module '@midwayjs/koa/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n\n  interface State{\n    bbb: string;\n    ccc: number;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration - Restrict Origin (TypeScript)\nDESCRIPTION: Restricts CORS to a specific origin. When `credentials` is enabled, `origin` must be explicitly set to the allowed origin.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cross_domain.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  cors: {\n    origin: 'http://127.0.0.1:7001',\n    credentials: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Definite Assignment Assertion for Properties (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the definite assignment assertion operator (`!`) to tell the TypeScript compiler that a property will definitely be assigned at runtime, even though it doesn't have an initializer in the class definition. This is used in scenarios where dependency injection frameworks like MidwayJS handle initialization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/ts_problem.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomeController {\n  @Inject()\n  userService! : UserService;\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Jest Runner Settings\nDESCRIPTION: This JSON snippet shows how to configure VSCode's settings.json for the Jest Runner extension. The `jest.pathToJest` and `jestrunner.jestCommand` settings specify the command to run Jest, ensuring that ts-node is used to transpile TypeScript files. The `--detectOpenHandles` flag helps identify resources preventing Jest from exiting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest.pathToJest\": \"node --require=ts-node/register ./node_modules/.bin/jest --detectOpenHandles\",\n  \"jestrunner.jestCommand\": \"node --require=ts-node/register ./node_modules/.bin/jest --detectOpenHandles\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Controller Route\nDESCRIPTION: This snippet demonstrates how to test a controller route in MidwayJS using `midway-mock`. It sends a GET request to the specified route and asserts the response status and body. Requires `midway-mock/bootstrap` for setup.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test_more.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app, assert } from 'midway-mock/bootstrap';\ndescribe('test/controller/home.test.ts', () => {\n  it('should GET /', () => {\n    // 对 app 发起 `GET /` 请求\n    return app\n      .httpRequest()\n      .get('/')\n      .expect('Welcome to midwayjs!') // 期望 body 是 hello world\n      .expect(200); // 期望返回 status 200\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Distributed Scheduled Task\nDESCRIPTION: Defines a distributed scheduled task using the `@Task` decorator. The `repeat` property specifies the cron expression for the task's execution schedule. This task will run on any instance of the application connected to the Redis queue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Task } from '@midwayjs/decorator';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  helloService: HelloService;\n\n  // 例如下面是每分钟执行一次，并且是分布式任务\n  @Task({\n    repeat: { cron: '* * * * *' },\n  })\n  async test() {\n    console.log(this.helloService.getName());\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Controller Tag with @ApiTags in Typescript\nDESCRIPTION: This snippet shows how to add a tag to a controller using the `@ApiTags` decorator, which can be used to group related routes in Swagger.  It can be added on both the Controller class and individual route methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiTags(['hello'])\n@Controller('/hello')\nexport class HelloController {}\n\nexport class HomeController {\n  @ApiTags(['bbb'])\n  @Get('/')\n  async home(): Promise<string> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Uploaded Files - Stream Mode\nDESCRIPTION: Retrieves uploaded files and fields in 'stream' mode using the @Files and @Fields decorators.  The data property of the UploadStreamFileInfo object represents the file stream.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post, Files, Fields } from '@midwayjs/core';\nimport { UploadStreamFileInfo } from '@midwayjs/busboy';\n\n@Controller('/')\nexport class HomeController {\n\n  @Post('/upload', /*...*/) {\n  async upload(@Files() files: Array<UploadStreamFileInfo>, @Fields() fields: Record<string, string) {\n    /*\n    files = [\n      {\n        filename: 'test.pdf',        // 文件原名\n        data: ReadStream,            // 文件流\n        mimeType: 'application/pdf', // mime\n        fieldName: 'file'            // field name\n      },\n    ]\n\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring automatic generation of Controller tags in TypeScript\nDESCRIPTION: This snippet show how to enable or disable automatic generation of Controller tags using the isGenerateTagForController configuration in the swagger configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  swagger: {\n    isGenerateTagForController: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Access and Use the Mongoose Entity\nDESCRIPTION: This TypeScript code demonstrates how to access the Mongoose entity using `@InjectEntityModel` and perform database operations such as creating and finding a user.  It uses `ReturnModelType` for type safety.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typegoose';\nimport { ReturnModelType } from '@typegoose/typegoose';\nimport { User } from '../entity/user';\n\n@Provide()\nexport class TestService {\n\n  @InjectEntityModel(User)\n  userModel: ReturnModelType<typeof User>;\n\n  async getTest() {\n    // create data\n    const { _id: id } = await this.userModel.create({ name: 'JohnDoe', jobs: ['Cleaner'] } as User); // an \"as\" assertion, to have types for all properties\n\n    // find data\n    const user = await this.userModel.findById(id).exec();\n    console.log(user)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Function Middleware - TypeScript\nDESCRIPTION: Shows how to define and use function middleware within a MidwayJS application.  Function middleware is a simple asynchronous function that accepts the Koa context and next function.  It can be added to the middleware list using `useMiddleware` alongside class-based middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/another.middleware.ts\nexport async function fnMiddleware(ctx, next) {\n  // ...\n  await next();\n  // ...\n}\n\n\n// src/configuration.ts\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { ReportMiddleware } from './middleware/user.middleware';\nimport { fnMiddleware } from './middleware/another.middleware';\n\n@Configuration({\n  imports: [koa]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // add middleware\n    this.app.useMiddleware([ReportMiddleware, fnMiddleware]);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Additional Files in Package (C++)\nDESCRIPTION: This snippet shows how to include additional files in the package by adding an `include` section to the `package` field in the `f.yml` file.  Supports specifying file names, directory names, and glob patterns.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\n#... The display of other attributes has been omitted\n\npackage:\n  include: # Specify additional package file configuration by include attributes\n    -static# static folder under the root directory of the project\n    -a.json# a.json file under the root directory of the project\n    -a/B/c.js# c.js file under directory a under directory B under the root directory of the project\n    -a/B/c.json# c.js file under directory a under directory B under the root directory of the project\n    -xxx/**/*.js# All js files in xxx directory under the root directory of the project\n```\n\n----------------------------------------\n\nTITLE: Define Protocol Buffers Service (helloworld.proto) with comments\nDESCRIPTION: This `helloworld.proto` file defines a gRPC service named `Greeter` with a `SayHello` method. The method takes a `HelloRequest` message containing a `name` field and returns a `HelloReply` message containing a `message` field. This defines the service contract. Comments describe each element.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloworld;\n\n// Definition of service\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// Service request parameters\nmessage HelloRequest {\n  string name = 1;\n}\n\n// Response parameters of the service\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Decorator Metadata in TypeScript\nDESCRIPTION: This code snippet demonstrates how to clear all module associations managed by the `decoratorManager`. This is important in testing environments or scenarios with multiple IoC containers to prevent state from leaking between contexts. It uses the `clearAllModule` function from the MidwayJS framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/decorator.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clearAllModule } from 'midway';\n\n// 执行即可\nclearAllModule();\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring JWT Module\nDESCRIPTION: This code snippet showcases how to import and configure the JWT module within a MidwayJS application. It demonstrates adding the jwt module to the imports array in the @Configuration decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/jwt.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, IMidwayContainer } from '@midwayjs/core';\nimport { IMidwayContainer } from '@midwayjs/core';\nimport * as jwt from '@midwayjs/jwt';\n\n@Configuration({\n  imports: [\n    // ...\n    jwt,\n  ],\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State Interface in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet shows how to define the State interface in a MidwayJS application. This allows you to add custom properties to the State object in the Koa context, providing a typed way to store application-specific state. The interface is defined in `src/interface.ts` within the `@midwayjs/web/dist/interface` module. The properties can have any primitive or object type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\n\ndeclare module '@midwayjs/web/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n\n  interface State{\n    bbb: string;\n    ccc: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Repository Mode in Sequelize Configuration\nDESCRIPTION: This configuration snippet shows how to enable repository mode for a specific data source in the Sequelize configuration within a MidwayJS application. Enabling repository mode disables the use of static methods on models.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nimport { Person } from '../entity/person.entity';\n\nexport default {\n  // ...\n  sequelize: {\n    dataSource: {\n      default: {\n        // ...\n        entities: [Person]\n\n        // This one more\n        repositoryMode: true\n      },\n    },\n    sync: false\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting response header\nDESCRIPTION: This snippet illustrates how to set a response header using the Koa context within a Midway Hooks API. It uses `ctx.set('X-Powered-By', 'Midway')` to set the 'X-Powered-By' header to 'Midway'. The handler function returns a 'Hello World!' string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  ctx.set('X-Powered-By', 'Midway');\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Calling the Add Data API\nDESCRIPTION: Demonstrates how to call the add data API. This example calls the signUp function with a name and email, then logs the created user object to the console upon successful registration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/prisma.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signUp } from '../api/feeds';\n\nsignUp('John', 'test@test.com').then(\n  (user) => {\n    console.log(user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using TableStoreService (TypeScript)\nDESCRIPTION: This code demonstrates how to inject and use the TableStoreService within a MidwayJS component (UserService). It utilizes the @Inject decorator to inject the TableStoreService instance and then calls the putRow method to interact with TableStore.  The 'params' variable is assumed to be defined elsewhere with the necessary parameters for the putRow operation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/tablestore.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Controller, Inject, Get } from '@midwayjs/decorator';\nimport { TableStoreService } from '@midwayjs/tablestore';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  tableStoreService: TableStoreService;\n\n  async invoke() {\n    await this.tableStoreService.putRow(params);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: onBeforeObjectDestroy Lifecycle Hook in TypeScript\nDESCRIPTION: Demonstrates the usage of the `onBeforeObjectDestroy` lifecycle hook, which executes before an object instance is destroyed. This hook allows you to perform cleanup tasks before an object is released. Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectBeforeDestroyOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onBeforeObjectDestroy(ins: any, options: ObjectBeforeDestroyOptions): Promise<void> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tenant Dependency to package.json\nDESCRIPTION: Adds the `@midwayjs/tenant` package as a dependency in the `package.json` file. This ensures that the package is installed when the project dependencies are resolved.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tenant.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"dependencies\": {\n     \"@midwayjs/tenant\": \"^3.0.0\",\n     // ...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Global Route Prefix Middleware\nDESCRIPTION: This code demonstrates how to create a middleware that adds a global route prefix (e.g., `/api`) to all incoming requests. The middleware modifies the `ctx.path` property, removing the prefix before passing the request to the next middleware or controller.  A default route of `/` is set if the path becomes empty after replacement.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/web_middleware.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/decorator';\n\n@Provide()\nexport class PrefixMiddleware {\n  resolve() {\n    return async (ctx, next) => {\n      ctx.path = ctx.path.replace(/^\\/api/, '') || '/';\n      await next();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Route-Specific Configuration (TypeScript)\nDESCRIPTION: This code snippet shows how to apply different configurations to different routes using middleware. It demonstrates how to create middleware with the `UploadMiddleware` and pass configuration options such as `mode` to customize the file upload behavior for specific routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post, Files, Fields } from '@midwayjs/core';\nimport { UploadFileInfo, UploadMiddleware } from '@midwayjs/busboy';\n\n@Controller('/')\nexport class HomeController {\n  @Post('/upload1', { middleware: [ createMiddleware(UploadMiddleware, {mode: 'file'}) ]})\n  async upload1(@Files() files Array<UploadFileInfo>) {\n    // ...\n  }\n  \n  @Post('/upload2', { middleware: [ createMiddleware(UploadMiddleware, {mode: 'stream'}) ]})\n  async upload2(@Files() files Array<UploadFileInfo>) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSRF Cookie Usage in Frontend JavaScript\nDESCRIPTION: This JavaScript code shows how to retrieve a CSRF token from a cookie and include it in a request header. This is typically done in frontend JavaScript when making AJAX or Fetch requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/security.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst csrftoken = Cookies.get('csrfToken');\nfetch('/api/post', {\n  method: 'POST',\n  headers: {\n    'x-csrf-token': csrftoken\n  },\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Entire Session in @midwayjs/express\nDESCRIPTION: This code shows how to use the `@Session(ALL)` decorator to get the entire session object in a Midway.js Express controller. It updates a 'visits' counter directly on the session object. Dependencies: @midwayjs/decorator, @midwayjs/express.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide, Session, ALL } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/express';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  async home(@Session(ALL) session) {\n    session.visits = session.visits ? session.visits + 1 : 1;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Context Logger Usage with ctx.logger - Typescript\nDESCRIPTION: This snippet demonstrates how to access and use the context logger (`ctx.logger`) within a Midway application. It shows how to log information, debug messages, warnings, and errors, including error stack traces. The context logger is associated with the framework context object (Context).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nctx.logger.info(\"hello world\");\nctx.logger.debug('debug info');\nctx.logger.warn('WARNNING!!!!');\n\n// Error log recording will directly record the complete stack information of the error log and output it to the errorLog\n// In order to ensure that exceptions can be traced, all exceptions thrown must be of Error type, because only Error type will bring stack information to locate the problem.\nctx.logger.error(new Error('custom error'));\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Streaming Service in Proto File\nDESCRIPTION: This code snippet shows how to define a gRPC streaming service in a `.proto` file. The `stream` keyword is used to indicate that the parameter is a stream.  The example shows definitions for bidirectional, server-push, and client-push streaming services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage math;\n\nmessage AddArgs {\n  int32 id = 1;\n  int32 num = 2;\n}\n\nmessage Num {\n  int32 id = 1;\n  int32 num = 2;\n}\n\nservice Math {\n  rpc Add (AddArgs) returns (Num) {\n  }\n\n\t// Bidirectional flow\n  rpc AddMore (stream AddArgs) returns (stream Num) {\n  }\n\n  // The server pushes to the client.\n  rpc SumMany (AddArgs) returns (stream Num) {\n  }\n\n  // The client pushes to the server.\n  rpc AddMany (stream AddArgs) returns (Num) {\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install HTTP Proxy Dependency\nDESCRIPTION: This command installs the @midwayjs/http-proxy package as a project dependency using npm. The --save flag ensures the package is added to the dependencies section of the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/http-proxy.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/http-proxy@3 --save\n```\n\n----------------------------------------\n\nTITLE: Defining ILifeCycle Interface in TypeScript\nDESCRIPTION: This interface defines the lifecycle hooks that can be implemented in Midway.js. It includes methods for onReady (when the IoC container is ready), onConfigLoad (after application configuration is loaded), and onStop (when the application is stopping). These methods allow developers to execute custom logic during different stages of the application lifecycle.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/lifecycle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ILifeCycle {\n  /**\n   * 在应用 ready 的时候执行\n   * @param container IoC 容器\n   * @param app 应用 app\n   */\n  onReady(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n\n  /**\n   * 在应用配置加载后执行\n   */\n  onConfigLoad?(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n  /**\n   * 在应用停止的时候执行\n   * @param container IoC 容器\n   * @param app 应用 app\n   */\n  onStop?(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Triggered Functions with createHttpRequest in TypeScript\nDESCRIPTION: This snippet demonstrates how to test HTTP-triggered serverless functions using `@midwayjs/mock` and `createHttpRequest`. It creates a function app using `createFunctionApp`, sends an HTTP request, and asserts the result.  Dependencies include `@midwayjs/mock` and `@midwayjs/serverless-app`. The `createHttpRequest(app)` method returns a supertest-like HTTP client for making requests to the function app.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_testing.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>();\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from api gateway trigger', async () => {\n    const result = await createHttpRequest(app).get('/').query({\n      name: 'zhangting',\n    });\n    expect(result.text).toEqual('hello zhangting');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting the Entire Cache\nDESCRIPTION: Clears the entire cache using the `reset` method. This removes all entries from the cache. Be cautious when using this method, especially with Redis.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.cacheManager.reset();\n```\n\n----------------------------------------\n\nTITLE: Getting Application Context\nDESCRIPTION: This code snippet shows how to obtain the global dependency injection container using `this.app.getApplicationContext()`. The container is used for managing and injecting dependencies across the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getApplicationContext();\n```\n\n----------------------------------------\n\nTITLE: Add Start Command to package.json\nDESCRIPTION: Modifies the `package.json` file to include a `start` script. This script sets the `NODE_ENV` environment variable to `production` and executes the `bootstrap.js` file using Node.js. This allows for easy application startup using `npm run start`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_to_app.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"NODE_ENV=production node bootstrap.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting gRPC Call Timeout (TypeScript)\nDESCRIPTION: This code shows how to set a timeout for a gRPC call using the `timeout` option. The timeout value is specified in milliseconds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await service.sayHello({\n  timeout: 5000\n}).sendMessage({\n  name: 'harry'\n});\n\n```\n\n----------------------------------------\n\nTITLE: Extending Midway Context in Component (index.d.ts - All Contexts)\nDESCRIPTION: This code snippet shows how to extend the Midway.js Context interface within a component to affect all contexts. It declares a module augmentation for `@midwayjs/core/dist/interface` and adds an 'abc' property of type string to the Context interface. This will apply to all Midway contexts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/context_definition.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// index.d.ts\n\n// The following paragraph can extend all Context\ndeclare module '@midwayjs/core/dist/interface '{\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Development Script Using @midwayjs/cli\nDESCRIPTION: This JSON snippet defines a `dev` script using `@midwayjs/cli` within the `script` section of a `package.json` file. It utilizes `midway-bin dev --ts` to start the application in a TypeScript (ts-node) environment. The script uses the built-in API(@midwayjs/core `initializeGlobalApplicationContext`) to create a service without `bootstrap.js` and runs in a single process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"script\": {\n    \"dev\": \"midway-bin dev --ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Kafka Component with Koa\nDESCRIPTION: This TypeScript code shows how to enable the `@midwayjs/kafka` component alongside `@midwayjs/koa` in a MidwayJS application. This configuration allows Kafka functionality to be integrated into a Koa-based application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as kafka from '@midwayjs/kafka';\n\n@Configuration({\n  imports: [\n    koa,\n    kafka\n  ],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Entry Point Export Example\nDESCRIPTION: Exports the `AutoConfiguration` class as `Configuration` and re-exports modules to make them available for dependency injection in other parts of the application. This ensures that only explicitly exported files are loaded by the dependency injection container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/index.ts\nexport { AutoConfiguration as Configuration } from './configuration';\nexport * from './controller/user';\nexport * from './controller/api';\nexport * from './service/user';\n```\n\n----------------------------------------\n\nTITLE: MidwayJS Dependency Injection Identifiers\nDESCRIPTION: Illustrates how dependency injection identifiers work in MidwayJS using @Provide and @Inject. It covers default key generation (camel case), explicit string keys, and using classes as identifiers.  It requires @midwayjs/decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IService {}\n\n// service\n@Provide() // <------ 这里暴露的 key 是 userService\nexport class UserService implements IService {\n  //...\n}\n\n// controller\n@Provide()\n@Controller('/api/user')\nexport class APIController {\n  @Inject('userService') // <------ 这里注入的 key 是 userService\n  userService1: UserService;\n\n  @Inject()\n  userService2: UserService; // <------ 这里的类型是 Class，注入的 key 是 userService\n\n  @Inject()\n  userService: IService; // <------ 这里的类型是 Interface，注入的 key 是 userService\n\n  //...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// service\n@Provide('bbbService') // <------ 这里暴露的 标识符 是 bbbService\nexport class UserService {\n  //...\n}\n\n// controller\n@Provide()\nexport class UserController {\n  @Inject('bbbService') // <------ 这里注入的 标识符 是 bbbService\n  userService: UserService;\n\n  //...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide() // <------ 这里暴露的 标识符 是 userService\nexport class UserService {\n  //...\n}\n\n@Provide()\nexport class UserController {\n  @Inject()\n  userService: UserService; // <------ 这里注入的标识符是 UserService 类 (userService)\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Global Objects within Components\nDESCRIPTION: Shows how to inject global objects, such as `baseDir`, within a component without needing to specify a prefix. Global objects are pre-configured and available for injection throughout the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration()\nexport class ContainerLifeCycle {\n  @Inject()\n  baseDir; // 注入全局对象不需要前缀\n\n  async onReady(container) {\n    container.registerObject('aaa', 'bbbb');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS SAM template.yaml Configuration\nDESCRIPTION: This YAML configuration file defines the AWS Lambda function and its properties using AWS Serverless Application Model (SAM). It specifies the handler, runtime, timeout, package type, and API event configurations. The `CodeUri` property points to the deployment package, and the `Handler` property specifies the entry point for the Lambda function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aws_lambda.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nAWSTemplateFormatVersion: \"2010-09-09\"\nTransform: AWS::Serverless-2016-10-31\nResources:\n  EasySchoolBackendFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: ./dist.zip\n      Handler: dist/index/index.handler\n      Runtime: nodejs14.x\n      Timeout: 900\n      PackageType: Zip\n      Events:\n        ApiEvent:\n          Type: Api\n          Properties:\n            Path: /{any+}\n            Method: ANY\n```\n\n----------------------------------------\n\nTITLE: VSCode Launch Configuration for Debugging Jest Tests\nDESCRIPTION: This JSON snippet provides a launch configuration for debugging Jest tests in VSCode. It uses the Node.js debugger with the `--inspect-brk` flag and specifies the Jest command with ts-node for TypeScript support. The `--runInBand` flag ensures tests are executed sequentially, and `--detectOpenHandles` aids in identifying resources causing hanging processes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.0.1\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeArgs\": [\n        \"--inspect-brk\",\n        \"--require=ts-node/register\",\n        \"${workspaceRoot}/node_modules/.bin/jest\",\n        \"--runInBand\",\n        \"--detectOpenHandles\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: HttpProxyConfig Interface Definition\nDESCRIPTION: This TypeScript interface defines the structure for configuring the HTTP proxy. It includes properties for matching URLs (match), specifying the target host (host), using regular expression capture groups for dynamic targets (target), setting proxy timeouts (proxyTimeout), and ignoring specific headers (ignoreHeaders).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/http-proxy.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 代理配置类型\nexport interface HttpProxyConfig {\n  // 匹配要代理的 URL 正则表达式\n  match: RegExp;\n  // 替换匹配到的链接的 host，将请求代理到此地址\n  host?: string;\n  // 通过正则的表达式捕获组处理代理地址\n  target?: string;\n  // 转发请求超时时间，默认为0不设置超时时间\n  proxyTimeout?: number;\n  // 忽略代理请求转发的 header 中的字段\n  ignoreHeaders?: {\n    [key: string]: boolean;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Session Module in FaaS Configuration (TypeScript)\nDESCRIPTION: This code shows how to import the session module in a FaaS (Function as a Service) environment within a Midway.js application. It involves importing `@midwayjs/session` and including it in the `imports` array within the `Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as faas from '@midwayjs/faas';\nimport * as session from '@midwayjs/session';\n\n@Configuration({\n  imports: [\n    faas,\n    session,\n    // ...\n  ]\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting WebSocket Messages\nDESCRIPTION: This code snippet demonstrates how to broadcast WebSocket messages to all connected clients using the @WSBroadCast decorator. When the client sends a 'message' event, the gotMyMessage function processes the data, adds 5 to it, and returns a JSON object containing the name 'harry' and the calculated result. The @WSBroadCast decorator ensures that this result is sent to all connected clients. The disconnect function is called when client disconnects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, Provide, OnWSConnection, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/ws';\n\n@Provide()\n@WSController()\nexport class HelloSocketController {\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('message')\n  @WSBroadCast()\n  async gotMyMessage(data) {\n    return { name: 'harry', result: parseInt(data) + 5 };\n  }\n\n  @OnWSDisConnection()\n  async disconnect(id: number) {\n    console.log('disconnect ' + id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending SSE Errors with HttpServerResponse (TypeScript)\nDESCRIPTION: This code shows how to send an error over an SSE stream using the `sendError` method of `HttpServerResponse`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = new HttpServerResponse(this.ctx).sse();\n\nres.sendError(new Error('test error'));\n```\n\n----------------------------------------\n\nTITLE: Controller for template rendering (TypeScript)\nDESCRIPTION: This code modifies the `WeatherController` to render the `info.html` template with weather data. It injects the `Context` object and uses its `render` method to render the template.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/weather.controller.ts\nimport { Controller, Get, Inject, Query } from '@midwayjs/core';\nimport { WeatherService } from '../service/weather.service';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class WeatherController {\n\n  @Inject()\n  weatherService: WeatherService;\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/weather')\n  async getWeatherInfo(@Query('cityId') cityId: string): Promise<void> {\n    const result = await this.weatherService.getWeather(cityId);\n    if (result) {\n      await this.ctx.render('info', result.weatherinfo);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Code Dye Component\nDESCRIPTION: Enables the `codeDye` component within the MidwayJS application's configuration. The `enabledEnvironment` option restricts activation to the 'local' environment for development debugging. Requires `@midwayjs/core` and `@midwayjs/code-dye`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/code_dye.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as codeDye from '@midwayjs/code-dye';\n\n@Configuration({\n   imports: [\n     //...\n     {\n       component: codeDye,\n       enabledEnvironment: ['local'], // only enabled locally\n     }\n   ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Injecting Context\nDESCRIPTION: This code demonstrates how to inject the `Context` object into a class in Midway Serverless.  The `@Inject()` decorator is used to inject the context object as `ctx` property. This provides access to request and response information, as well as other runtime functionalities within the class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_context.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\n\n@Inject()\nctx: Context;\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint with Request Data (POST)\nDESCRIPTION: This snippet defines a POST API endpoint that accepts a `name` parameter in the request body. It uses the `Api` and `Post` decorators, and returns a greeting message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Api, Post } from '@midwayjs/hooks';\n\nexport default Api(\n  Post(), // Http Path: /api/say,\n  async (name: string) => {\n    return `Hello ${name}!`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Non-HTTP Triggered Functions with Direct Method Calls in TypeScript\nDESCRIPTION: This snippet shows how to test serverless functions triggered by events other than HTTP, such as timers or object storage events. It uses `createFunctionApp` to create the function app, `getServerlessInstance` to get an instance of the service class, and then directly calls the service method with test data. Dependencies include `@midwayjs/mock`, `@midwayjs/serverless-app`, and `@midwayjs/serverless-fc-trigger`. `createInitializeContext` is used to provide aliyun specific initialization context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_testing.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { createInitializeContext } from '@midwayjs/serverless-fc-trigger';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n  let instance: HelloAliyunService;\n\n  beforeAll(async () => {\n    // 创建函数 app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(), // 这里传入了 aliyun 特有的初始化上下文数据\n    });\n\n    // 拿到服务类\n    instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from event trigger', async () => {\n    // 调用函数方法，传入参数\n    expect(await instance.handleEvent('hello world')).toEqual('hello world');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Component-Level Context Extension (Specific) in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to extend specific Context interfaces for different Midway.js frameworks (Koa, Web, FaaS, Express) within a component. It uses the `declare module` syntax targeting specific framework interfaces to add a custom property `abc`. This allows extending only relevant Context objects.  Dependencies: `@midwayjs/koa`, `@midwayjs/web`, `@midwayjs/faas`, `@midwayjs/express`. Input: None, modifies specific Context interfaces. Output: Extended Context interfaces with property abc, scoped to respective frameworks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/context_definition.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// index.d.ts\n\n// 下面这段只 @midwayjs/koa 的 Context 做扩展\ndeclare module '@midwayjs/koa/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n}\n\n// 下面这段只 @midwayjs/web 的 Context 做扩展\ndeclare module '@midwayjs/web/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n}\n\n// 下面这段只 @midwayjs/faas 的 Context 做扩展\ndeclare module '@midwayjs/faas/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n}\n\n// 下面这段只 @midwayjs/express 的 Context 做扩展\ndeclare module '@midwayjs/express/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Code\nDESCRIPTION: This TypeScript snippet provides an example of a MidwayJS CLI plugin. It defines a custom command `lalala` with its own lifecycle events and options. The `hooks` object defines functions to be executed during specific lifecycle events, allowing for custom logic and interaction with the CLI core. The code shows how to access user-provided options, f.yml content, and logging functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/cli.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/index.ts\n\nimport { BasePlugin } from '@midwayjs/command-core';\n\nexport class TestLalalaPlugin extends BasePlugin {\n  commands = {\n    lalala: {\n      usage: '自定义命令',\n      lifecycleEvents: [\n        'a', // 自定义生命周期\n        'b',\n      ],\n      // 暂无\n      options: {\n        name: {\n          usage: '参数 name, 例如: mw lalala --name=123',\n          shortcut: 'n', // 参数缩写\n        },\n      },\n    },\n  };\n\n  hooks = {\n    // 添加当前插件内的命令生命周期扩展\n    // lalala 命令的 a 生命周期\n   \t'lalala:a': async () => {\n\n      // 输出\n    \tthis.core.cli.log('lalala command hook');\n      \n      // 获取用户输入的参数\n      this.core.cli.log(this.core.options);\n      \n      // f.yml 内容\n      this.core.cli.log(this.core.service);\n      \n      // 仅在 -V 参数下输出的内容\n      this.core.debug('lalala');\n    },\n\n    // 添加其他插件内的命令生命周期扩展\n    // 在 package 命令的  copyFile 生命周期 “之前” 执行\n    'before:package:copyFile': async () => {\n    \tconsole.log('package command hook');\n    },\n    \n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Default Instance Proxy Class - HTTPClientService - Typescript\nDESCRIPTION: This code snippet demonstrates the creation of a default proxy class `HTTPClientService` that proxies methods to a default instance of `HTTPClient` obtained from `HTTPClientServiceFactory`.  It uses the `@Provide` and `@Scope` decorators from `@midwayjs/core` to define the class as a singleton service. The `@Init` decorator ensures that the default instance is initialized during the application startup. It also leverages the `MidwayCommonError` for error handling if the default instance is not found.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service_factory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ServiceFactory,\n  MidwayCommonError,\n  delegateTargetAllPrototypeMethod,\n  Provide,\n  Scope,\n  ScopeEnum,\n  Init\n} from '@midwayjs/core';\n\n//...\nexport class HTTPClientServiceFactory extends ServiceFactory<HTTPClient> {\n  //...\n}\n\n// The following is the default proxy class\n@Provide()\n@Scope(ScopeEnum. Singleton)\nexport class HTTPClientService implements HTTPClient {\n  @Inject()\n  private serviceFactory: HTTPClientServiceFactory;\n\n  // This property is used to hold the actual instance\n  private instance: HTTPClient;\n\n  @Init()\n  async init() {\n    // In the initialization phase, get the default instance from the factory\n    this.instance = this.serviceFactory.get(\n      this.serviceFactory.getDefaultClientName() || 'default'\n    );\n    if (!this. instance) {\n      throw new MidwayCommonError('http client default instance not found.');\n    }\n  }\n}\n\n// In the code below, the ts definition for the default instance class is correctly inherited\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface HTTPClientService extends HTTPClient {\n  //empty\n}\n\n// The following code, for the implementation of the default instance class can be proxied\ndelegateTargetAllPrototypeMethod(HTTPClientService, HTTPClient);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Name Args in MidwayJS\nDESCRIPTION: This bug fix adds event name arguments to certain functions within MidwayJS. This provides more context and information when handling events, allowing for more precise and targeted event handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Usage Example of sequelize-auto-midway CLI\nDESCRIPTION: Example command demonstrating how to use the sequelize-auto-midway command-line interface. This includes specifying the database host, name, user, password, port, dialect, output directory, and various casing options.  It also shows how to use the --noInitModels option to prevent writing the init-models file and provides an example of using an additional configuration file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/sequelize_generator.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sequelize-auto-midway -h localhost -d yourDBname -u root -x yourPassword -p 13306  --dialect mysql -o ./models --noInitModels true --caseModel c --caseProp c --caseFile c --indentation 1 -a ./additional.json\n```\n\n----------------------------------------\n\nTITLE: Triggering Task on Application Startup\nDESCRIPTION: Demonstrates how to trigger a task immediately after the application starts.  This involves getting the `QueueService` instance and adding a job to the queue with a delay of 0.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context, ILifeCycle, IMidwayBaseApplication, IMidwayContainer } from '@midwayjs/core';\nimport { Configuration } from '@midwayjs/decorator';\nimport { Queue } from 'bull';\nimport { join } from 'path';\nimport * as task from '@midwayjs/task';\nimport { QueueService } from '@midwayjs/task';\n\n@Configuration({\n  imports: [task],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class ContainerConfiguration implements ILifeCycle {\n  async onReady(container: IMidwayContainer, app?: IMidwayBaseApplication<Context>): Promise<void> {\n    // Task这块的启动后立马执行\n    let result: any = await container.getAsync(QueueService);\n    let job: Queue = result.getQueueTask(`HelloTask`, 'task'); // 此处第一个是你任务的类名，第二个任务的名字也就是装饰器Task的函数名\n    job.add({}, { delay: 0 }); // 表示立即执行。\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriber - TypeScript\nDESCRIPTION: This snippet shows how to add the event subscriber to the MidwayJS configuration file. This step is necessary to register the event subscriber with TypeORM.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { EverythingSubscriber } from '../event/subscriber';\n\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        // ...\n        entities: [Photo],\n        // 传入订阅类\n        subscribers: [EverythingSubscriber]\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Moving context format to user config in Midway.js\nDESCRIPTION: This commit moves the context format configuration to the user configuration in Midway.js. This allows developers to customize the context format according to their specific needs and preferences.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndb53b8eaf22b50df61945ff11086e1eb7aec99a1\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Context Definition\nDESCRIPTION: This TypeScript snippet defines the context available within a RabbitMQ consumer in MidwayJS. It includes the `channel` (amqp.Channel) for interacting with RabbitMQ and the `requestContext` (IMidwayContainer) for accessing the request-scoped container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Context = {\n  channel: amqp.Channel;\n  requestContext: IMidwayContainer;\n};\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Configuration\nDESCRIPTION: This code snippet demonstrates the basic structure for defining a Socket.IO controller in MidwayJS using the @WSController decorator. It sets up the controller to handle connections on the root namespace ('/').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@WSController('/')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Log Error in Filter\nDESCRIPTION: This code shows how to log an error within an exception filter in MidwayJS using the context's logger. It catches all errors and logs the error message before returning a response. Accesses the logger using `ctx.logger.error(err)`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch()\nexport class DefaultErrorFilter {\n  async catch(err: Error, ctx: Context) {\n\n    // ...\n    ctx.logger.error(err);\n    // ...\n    return 'got 500 error, ' + err.message;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Casbin Component in Configuration\nDESCRIPTION: This TypeScript code snippet demonstrates how to import and enable the Casbin component within your MidwayJS application's `configuration.ts` file. This includes importing the `casbin` module and adding it to the `imports` array within the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as casbin from '@midwayjs/casbin';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    // ...\n    casbin,\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Messages to a Client\nDESCRIPTION: This code shows how to send a socket message to a specific client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.emit('hello', 'can you hear me?', 1, 2, 'abc');\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependencies Configuration\nDESCRIPTION: This JSON snippet shows the necessary dependencies added to the package.json file for Sequelize integration in a MidwayJS project.  It includes @midwayjs/sequelize, sequelize, and sequelize-typescript.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/sequelize\": \"^3.0.0\",\n    \"sequelize\": \"^6.21.3\",\n    \"sequelize-typescript\": \"^2.1.0\"\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This code snippet relates to the addition of a guard feature within the MidwayJS framework. The commit associated with this feature is identified by the hash 1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5 and it was part of the version 3.6.0 release. The specific implementation details of the guard are not provided within this changelog entry.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: CustomKoaFramework Configuration and isEnable Method\nDESCRIPTION: This code snippet illustrates how to configure the custom framework.  The `configure` method retrieves configuration using `configService` instead of `@Config` decorator when `applicationInit`. The `isEnable` method determines if the framework should be loaded based on the `services` configuration option, influencing the execution of `framework.run()`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Framework } from '@midwayjs/core';\n\n@Framework()\nexport class CustomKoaFramework extends BaseFramework {\n\n   configure() {\n     /**\n     * return your configuration here\n     * The returned value will be assigned to this.configurationOptions, and the original user's explicit input parameters will be connected\n     *\n     */\n     return this.configService.getConfiguration('xxxxxxx');\n   }\n\n  /**\n   * This new method is used to determine whether the framework is loaded\n   * Sometimes components include server side (framework) and client side, you need to judge\n   *\n   */\n   isEnable(): boolean {\n     return this.configurationOptions.services?.length > 0;\n   }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Board Base Path - TypeScript\nDESCRIPTION: This snippet shows how to configure the base path for the BullBoard UI in a MidwayJS application. This allows customizing the URL path where the UI is accessible.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.prod.ts\nexport default {\n  // ...\n  bullBoard: {\n    basePath: '/ui',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: MidwayJS Dependency Injection Container Binding\nDESCRIPTION: Illustrates how Midway's internal dependency injection container binds classes annotated with @Provide.  This example binds the UserController and UserService to the container, making them available for injection. The container acts like a Map.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = new MidwayContainer();\ncontainer.bind(UserController);\ncontainer.bind(UserService);\n```\n\n----------------------------------------\n\nTITLE: Listening for Queue Events (TypeScript)\nDESCRIPTION: This snippet shows how to listen for events on a Bull queue, such as `progress` and `completed`. Event listeners provide information about job progress and completion, allowing for custom logic to be executed. In this example, the `completed` event also removes the job.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// Local events pass the job instance...\ntestQueue.on('progress', function (job, progress) {\n  console.log(`Job ${job.id} is ${progress * 100}% ready!`);\n});\n\ntestQueue.on('completed', function (job, result) {\n  console.log(`Job ${job.id} completed! Result: ${result}`);\n  job.remove();\n});\n```\n\n----------------------------------------\n\nTITLE: Render Nunjucks Template with Filter\nDESCRIPTION: Renders the Nunjucks template 'test.nj' with the 'name' variable set to 'midway'. The 'hello' filter, defined earlier, will be applied to this variable during rendering.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// controller\n// ...\nawait ctx.render('test.nj', { name: 'midway' });\n```\n\n----------------------------------------\n\nTITLE: Querying Unhealthy Service from Consul in MidwayJS\nDESCRIPTION: This code demonstrates how to query an unhealthy service from Consul using the `BalancerService` in a MidwayJS controller. It injects the `BalancerService`, retrieves a service balancer, and selects an unhealthy instance of the 'my-midway-project' service. The second parameter `false` in the `select` method indicates that unhealthy services should be returned.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/consul.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/decorator';\nimport { BalancerService } from '@midwayjs/consul';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  balancerService: BalancerService;\n\n  @Get('/')\n  async home() {\n    const service = await this.balancerService.getServiceBalancer().select('my-midway-project', false);\n\n    console.log(service);\n\n    return 'Hello Midwayjs!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of getRow operation using TableStoreService (TypeScript)\nDESCRIPTION: This code snippet provides an example of using the getRow method from TableStoreService to retrieve data from a TableStore table.  It demonstrates how to construct primary keys and column filters using types from '@midwayjs/tablestore' such as Long, CompositeCondition, and SingleColumnCondition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/tablestore.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from 'path';\nimport {\n  TableStoreService,\n  Long,\n  CompositeCondition,\n  SingleColumnCondition,\n  LogicalOperator,\n  ComparatorType,\n} from '@midwayjs/tablestore';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  tableStoreService: TableStoreService;\n\n  async getInfo() {\n    const data = await tableStoreService.getRow({\n      tableName: 'sampleTable',\n      primaryKey: [{ gid: Long.fromNumber(20013) }, { uid: Long.fromNumber(20013) }],\n      columnFilter: condition,\n    });\n\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add retry wrapper in MidwayJS\nDESCRIPTION: This commit introduces a retry wrapper for invoking remote data in MidwayJS. The retry wrapper automatically retries failed requests to remote data sources, enhancing system reliability and fault tolerance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/http-proxy/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nadd retry wrapper for invoke some remote data ([#2271](https://github.com/midwayjs/midway/issues/2271)) ([1c47338](https://github.com/midwayjs/midway/commit/1c473386937293104369cc8e5727c5330de4f85c))\n```\n\n----------------------------------------\n\nTITLE: Path Parameters with Api(), Get() and Params<T>\nDESCRIPTION: This code snippet shows how to define an API endpoint with a path parameter using `Api()`, `Get()`, and `Params<T>` in Midway Hooks. It extracts the 'name' parameter from the request and returns it in the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/file-route.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// lambda/[name]/project.ts\nimport {\n  Api,\n  Get,\n  Params,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get(),\n  Params<{ name: string }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      name: ctx.params.name,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Translating with Array Arguments\nDESCRIPTION: This code snippet shows how to use the `translate` method with an array as the `args` parameter. The array elements will replace the numbered placeholders (`{0}`, `{1}`, etc.) in the translation string in the order they appear in the array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.i18nService.translate('HELLO_MESSAGE {0} {1}', {\n  args: ['harry', 'chen'],\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Code Dye with Query Parameter Match\nDESCRIPTION: Configures the @midwayjs/code-dye component to activate when a specific query parameter is present in the request.  The `matchQueryKey` property defines the parameter name to look for in the URL's query string.  The code is placed in `src/config/config.local.ts`, indicating it's a local development configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/code_dye.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nexport default {\n  codeDye: {\n    matchQueryKey: 'codeDyeABC',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run ets command\nDESCRIPTION: Executes the `ets` command, which generates TypeScript definition files for the Egg.js-based Midway project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/egg-ts-helper.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ets\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Uploaded Files - TypeScript\nDESCRIPTION: This code snippet shows how to iterate over the asynchronous iterator of uploaded files to process each file individually.  It extracts the filename and data from each file object for further handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-09-22-release-3.18.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfor await (const file of fileIterator) {\n  const { filename, data } = file;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORM Query Builder Example\nDESCRIPTION: This code demonstrates how to use TypeORM's QueryBuilder to construct a complex SQL query. It selects published photos with specific names, orders them by ID in descending order, applies pagination, and joins related metadata and albums. The `setParameters` method is used to avoid SQL injection vulnerabilities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlet photos = await this.photoModel\n    .createQueryBuilder(\"photo\") // first argument is an alias. Alias is what you are selecting - photos. You must specify it.\n    .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n    .leftJoinAndSelect(\"photo.albums\", \"album\")\n    .where(\"photo.isPublished = true\")\n    .andWhere(\"(photo.name = :photoName OR photo.name = :bearName)\")\n    .orderBy(\"photo.id\", \"DESC\")\n    .skip(5)\n    .take(10)\n    .setParameters({ photoName: \"My\", bearName: \"Mishka\" })\n    .getMany();\n```\n\n----------------------------------------\n\nTITLE: InitDataMock Class (TypeScript)\nDESCRIPTION: This code defines the `InitDataMock` class, which implements the `ISimulation` interface. It adds different middleware and filters based on the framework type.  It uses `@App` decorator and the `enableCondition` method to conditionally apply mocks based on environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, IMidwayApplication, Mock, ISimulation } from '@midwayjs/core';\n\n@Mock()\nexport class InitDataMock implements ISimulation {\n\n  @App()\n  app: IMidwayApplication;\n\n  async appSetup(app: IMidwayApplication): Promise<void> {\n    // 针对不同的框架类型，添加不同的测试中间件\n    if (app.getNamespace() === 'koa') {\n      app.useMiddleware(/*...*/);\n      app.useFilter(/*...*/);\n    }\n    \n    if (app.getNamespace() === 'bull') {\n      app.useMiddleware(/*...*/);\n      app.useFilter(/*...*/);\n    }\n  }\n\n  enableCondition(): boolean | Promise<boolean> {\n    return ['local', 'test', 'unittest'].includes(this.app.getEnv());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose YAML Configuration\nDESCRIPTION: This docker-compose.yml file defines two services: `web` (the MidwayJS application) and `redis`. It builds the web service from the current directory, maps port 7001, and links it to the redis service, using the official redis image.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  web:\n    build: .\n    ports:\n      -\"7001:7001\"\n    links:\n      -redis\n  redis:\n    image: redis\n```\n\n----------------------------------------\n\nTITLE: Setting Prisma Engines Mirror\nDESCRIPTION: Configures the Prisma engines mirror using an environment variable. This is useful when the network environment is not ideal for downloading executable files dynamically during Prisma installation. It sets the PRISMA_ENGINES_MIRROR environment variable to a specific registry.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/prisma.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPRISMA_ENGINES_MIRROR = https://registry.npmmirror.com/-/binary/prisma/\n```\n\n----------------------------------------\n\nTITLE: Getting Query Parameters with @Query Decorator\nDESCRIPTION: This code snippet demonstrates how to retrieve query parameters using the `@Query` decorator in MidwayJS. The `@Query('uid') uid: string` retrieves the value of the 'uid' parameter from the query string and assigns it to the `uid` variable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\nimport { Controller, Get, Query } from '@midwayjs/core';\n\n@Controller('/user')\nexport class UserController {\n  @Get('/')\n  async getUser(@Query('uid') uid: string): Promise<User> {\n    // xxxx\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Output Error Stack - TypeScript\nDESCRIPTION: This code snippet shows how to set an environment variable to force the output of the error stack even in production environments. This is useful for debugging purposes when the default behavior is to only show 'Internal Server Error'. Requires access to set environment variables in your deployment environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_error.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.env.SERVERLESS_OUTPUT_ERROR_STACK = 'true';\n```\n\n----------------------------------------\n\nTITLE: Metadata Handling - Server-Side - TypeScript\nDESCRIPTION: This code snippet shows how to access client-provided metadata and send metadata back to the client in a gRPC service method using the `Context` object and the `Metadata` class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MSProviderType, Provider, Provide, GrpcMethod } from '@midwayjs/decorator';\nimport { helloworld } from '../domain/helloworld';\nimport { Metadata } from '@grpc/grpc-js';\nimport { Context } from '@midwayjs/grpc';\n\n/**\n * 实现 helloworld.Greeter 接口的服务\n */\n@Provide()\n@Provider(MSProviderType.GRPC, { package: 'helloworld' })\nexport class Greeter implements helloworld.Greeter {\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod()\n  async sayHello(request: helloworld.HelloRequest) {\n    // 客户端传递的元数据\n    console.log(this.ctx.metadata);\n\n    // 创建元数据\n    const meta = new Metadata();\n    this.ctx.metadata.add('xxx', 'bbb');\n    this.ctx.sendMetadata(meta);\n\n    return { message: 'Hello ' + request.name };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Class with Automatic Resolution in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@Inject` decorator in TypeScript without specifying a parameter.  This allows Midway to automatically resolve and inject the `PackageBuildInfoHsfService` class based on its type. It simplifies dependency injection for non-polymorphic scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/framework_problem.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Inject()\nservice: PackageBuildInfoHsfService;\n```\n\n----------------------------------------\n\nTITLE: Importing Cron Expressions (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use predefined cron expressions from the `@midwayjs/core` module. It imports the `FORMAT` object and accesses the `CRONTAB.EVERY_MINUTE` property, which represents a cron expression for executing a task every minute. This simplifies the configuration of repeated tasks by providing ready-to-use expressions.  Dependencies: `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FORMAT } from '@midwayjs/core';\n\n// cron expressions executed per minute\nFORMAT.CRONTAB.EVERY_MINUTE\n```\n\n----------------------------------------\n\nTITLE: Fixing RabbitMQ Reconnection and Testing in MidwayJS\nDESCRIPTION: This snippet indicates a bug fix addressing reconnection issues with RabbitMQ and improving related tests within the MidwayJS framework.  It enhances the reliability of RabbitMQ connections and ensures proper testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n- rabbitmq reconnection and test ([#1012](https://github.com/midwayjs/midway/issues/1012)) ([c2bea86](https://github.com/midwayjs/midway/commit/c2bea861430a13e53e5b100ea3935f20889c1fff))\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone in TypeORM Config - TypeScript\nDESCRIPTION: This snippet configures the timezone in the typeorm configuration. Ensure the configured timezone is consistent with the database server timezone.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  typeorm: {\n    dataSource: {\n      default: {\n        type: 'mysql',\n        // ...\n        timezone: '+08:00',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Session in MidwayJS with @midwayjs/mock\nDESCRIPTION: This code snippet demonstrates how to use `mockSession` from `@midwayjs/mock` to simulate the session in a MidwayJS application during testing. It sets the `user` property on the session object to 'midway', which can be useful for testing authentication and authorization scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockSession } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  mockSession(app, 'user', 'midway');\n\n  const result1 = await createHttpRequest(app).get('/');\n  // ctx.session.user => midway\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling a Transport in MidwayJS Logger\nDESCRIPTION: This code shows how to disable a specific transport in the MidwayJS logger configuration by setting it to `false`. In this case, the `console` transport is disabled. Requires `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         console: false,\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Configure Associated Logs - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure associated logs in MidwayJS using the `aliasName` option. This allows multiple logger names to refer to the same logger instance, enabling flexible access to the same log configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     clients: {\n       customLoggerA: {\n         aliasName: 'customLoggerB',\n         // ...\n       },\n     }\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Add Component Dependency (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to add a dependency to a MidwayJS application's `package.json` file. It adds `midway-component-book` as a dependency with a version specified by '*'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"midway-component-book\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies with @Inject (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to inject a dependency using the `@Inject` decorator in TypeScript. By omitting the parameter, Midway.js can automatically infer the dependency based on the type of the property, simplifying dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_problem.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Inject()\nservice: PackageBuildInfoHsfService;\n```\n\n----------------------------------------\n\nTITLE: Enable HTTP Proxy Component\nDESCRIPTION: This TypeScript code snippet demonstrates how to import and enable the @midwayjs/http-proxy component within a MidwayJS application's configuration file (src/configuration.ts). The component is added to the imports array within the @Configuration decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/http-proxy.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport * as proxy from '@midwayjs/http-proxy';\n\n@Configuration({\n  imports: [\n    // ...other components\n    proxy,\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Installing Cross-Domain Component - Bash\nDESCRIPTION: This command installs the `@midwayjs/cross-domain` package as a dependency to your project using npm. This package provides cross-domain support for MidwayJS applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cross_domain.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/cross-domain --save\n```\n\n----------------------------------------\n\nTITLE: Ignoring Global Prefix at Controller Level\nDESCRIPTION: This code snippet shows how to ignore the global route prefix for all routes within a specific controller. The `ignoreGlobalPrefix` option is set to `true` in the `@Controller` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n// All routes under this Controller will ignore the global prefix\n@Controller('/api', {ignoreGlobalPrefix: true})\nexport class HomeController {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/upload as a dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add @midwayjs/upload as a dependency in the `package.json` file.  This allows you to install it by running `npm install`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/upload\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source Entity Path Configuration - Typescript\nDESCRIPTION: This code demonstrates the flexible entity path configuration options available in MidwayJS data sources. It shows various wildcard patterns and suffix matching techniques that can be used to specify the location of entity files within the project. The configuration is part of the mysql data source settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-12-13-release-3-9.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  mysql: {\n    dataSource: {\n      dataSource1: {\n        // ...\n        entities: [\n          'entity',             // 特定目录\n          '**/abc/**',          // 仅获取包含 abc 字符的目录下的文件\n          'abc/**/*.ts',        // 特定目录 + 通配\n          'abc/*.entity.ts',    // 匹配后缀\n          '**/*.entity.ts',     // 通配加后缀匹配\n          '**/*.{j,t}s',        // 后缀匹配\n        ]\n      },\n      // ...\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ILifeCycle Interface Definition in TypeScript\nDESCRIPTION: Defines the interface for handling lifecycle events in a Midway application. Includes methods for configuration loading, dependency injection container readiness, server startup, application shutdown, and health checks. Each method receives the dependency injection container and the Midway application instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ILifeCycle {\n  /**\n  * 在应用配置加载后执行\n  */\n  onConfigLoad?(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n\n  /**\n   * 在依赖注入容器 ready 的时候执行\n   */\n  onReady(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n\n  /**\n   * 在应用服务启动后执行\n   */\n  onServerReady?(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n\n  /**\n   * 在应用停止的时候执行\n   */\n  onStop?(container: IMidwayContainer, app: IMidwayApplication): Promise<void>;\n\n  /**\n   * 在健康检查时执行\n   */\n  onHealthCheck?(container: IMidwayContainer): Promise<HealthResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: External Component Service Injection with Scope\nDESCRIPTION: Demonstrates another way to inject a component's service, by using the component’s name and the service name explicitly. This approach achieves the same result as the previous example.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/decorator';\n\n@Provide()\nexport class Library {\n\n  @Inject('book:bookService');\n  bookService;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Global Serverless CLI (v1)\nDESCRIPTION: This command removes the globally installed `@midwayjs/faas-cli` package, which is no longer used in Serverless v2.0.  The new version uses project-local packages and commands instead of a global CLI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_v1_upgrade_serverless_v2.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm uninstall @midwayjs/faas-cli -g\n```\n\n----------------------------------------\n\nTITLE: MidwayJS Scope Configuration\nDESCRIPTION: Demonstrates how to configure the scope of a class in MidwayJS using the `@Scope` decorator.  It shows how to set a class as a Singleton, making it a global unique instance. Requires @midwayjs/decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// service\nimport { Scope, ScopeEnum } from '@midwayjs/decorator';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class UserService {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Packages with `midway-version -u` (pnpm)\nDESCRIPTION: This command updates Midway packages in projects using `pnpm`, prompting the user for updates. It is essential for maintaining compatibility and incorporating the latest improvements within the `pnpm` ecosystem. It utilizes `pnpx` to execute `midway-version` without global installation and the `-u` flag activates the update prompt for community users.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_update_midway.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Community user\n$ pnpx midway-version -u\n# Internal user\n$ pnpx @ali/midway-version -u\n```\n\n----------------------------------------\n\nTITLE: Cache Consul Configuration\nDESCRIPTION: Caches Consul configuration data by periodically fetching it using `consul.kv.get` and storing it in a singleton service. This reduces the load on the Consul server by limiting the frequency of configuration retrieval to every 5 seconds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Init, Inject, Provide, Scope, ScopeEnum } from '@midwayjs/core';\nimport * as Consul from 'consul';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class ConfigService {\n\n  @Inject('consul:consul')\n  consul: Consul.Consul;\n\n  config: any;\n\n  @Init()\n  async init() {\n    setInterval(()=>{\n      this.consul.kv.get(`name`).then(res=>{\n        this.config = res;\n      })\n    }, 5000);\n    this.config = await this.consul.kv.get(`name`);\n  }\n\n  async getConfig(){\n    return this.config;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Labels in MidwayJS\nDESCRIPTION: This TypeScript code snippet shows how to configure Prometheus labels within the `config.default.ts` file in a MidwayJS application. These labels can be used to categorize and distinguish metrics from different applications or instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  prometheus: {\n    labels: {\n      APP_NAME: 'demo_project',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Object in MidwayJS (onObjectCreated)\nDESCRIPTION: This example illustrates how to completely replace a created object with a new one using the `replaceCallback` within the `onObjectCreated` lifecycle hook in MidwayJS. The `replaceCallback` provides a mechanism to override the default object instantiation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/lifecycle.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectInitOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectCreated(ins: any, options: ObjectInitOptions): Promise<void> {\n    // Each created object will be replaced with {bbb: 'aaa'}\n    options.replaceCallback({\n      bbb: 'aaa'\n    });\n\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Broadcasting WebSocket Messages with @WSBroadCast\nDESCRIPTION: Defines a method to be executed and broadcasted to all connected WebSocket clients when a specific message is received, using the @WSBroadCast decorator in conjunction with @OnWSMessage.  The decorated method processes the message, and the result is sent to all connected clients.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, OnWSConnection, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/ws';\n\n@WSController()\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('message')\n  @WSBroadCast()\n  async gotMyMessage(data) {\n    return { name: 'harry', result: parseInt(data) +5 };\n  }\n\n  @OnWSDisConnection()\n  async disconnect(id: number) {\n    console.log('disconnect '+ id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Koa Component in MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to enable the Koa component in a MidwayJS application. It imports the necessary modules and decorates the `MainConfiguration` class with the `@Configuration` decorator, specifying `koa` as an imported module. The `@App` decorator injects the Koa application instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [koa],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n\t\t// ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Prometheus MidwayJS dependency\nDESCRIPTION: Installs the @midwayjs/prometheus package using npm. This package provides the necessary components for integrating Prometheus monitoring into a MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/prometheus@3 --save\n```\n\n----------------------------------------\n\nTITLE: Install MQTT Component using npm\nDESCRIPTION: This command installs the MQTT component for MidwayJS using npm. The `--save` flag adds the component as a dependency to your `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/mqtt@3 --save\n```\n\n----------------------------------------\n\nTITLE: Use COSServiceFactory for Multiple Instances\nDESCRIPTION: This code demonstrates how to use the `COSServiceFactory` to retrieve different COS client instances based on their configuration names. The `@Inject` decorator injects an instance of `COSServiceFactory`, which then uses the `get` method to retrieve different COS clients. This allows you to interact with multiple COS accounts using their respective configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cos.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { COSServiceFactory } from '@midwayjs/cos';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  cosServiceFactory: COSServiceFactory;\n\n  async save() {\n    const cos1 = await this.cosServiceFactory.get('instance1');\n    const cos2 = await this.cosServiceFactory.get('instance3');\n\n    //...\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual API Call using Fetch (TypeScript)\nDESCRIPTION: This code snippet illustrates how to manually call an API endpoint using the `fetch` API.  It makes a GET request to `/api/articles` with `page` and `limit` query parameters and logs the response to the console. The expected response is a JSON object containing the `page` and `limit` values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('/api/articles?page=0&limit=10')\n  .then((res) => res.json())\n  .then((res) => console.log(res)); // { page: '0', limit: '10' }\n```\n\n----------------------------------------\n\nTITLE: Midway Logger Configuration Structure (config.default.ts)\nDESCRIPTION: This code shows the basic structure of the Midway logger configuration in `src/config/config.default.ts`. It demonstrates the `midwayLogger` object with `default` and `clients` sections for global and individual logger settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      // ...\n    },\n    clients: {\n      coreLogger: {\n        // ...\n      },\n      appLogger: {\n        // ...\n      }\n    }\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Update User with DTO validation\nDESCRIPTION: Updates the updateUser method in the controller to use the UserDTO for validation.  Validation logic is removed from the method itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\nimport { Controller, Get, Provide, Body } from '@midwayjs/core';\nimport { UserDTO } from './dto/user';\n\n@Controller('/api/user')\nexport class HomeController {\n  @Post('/')\n  async updateUser(@Body() user: UserDTO) {\n    // user.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Domain Name in f.yml (YAML)\nDESCRIPTION: This snippet shows how to configure a temporary automatic domain name when publishing a Midway.js function by setting `custom.customDomain` to `auto` in the `f.yml` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n     customDomain: auto\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags client with MySQL Storage\nDESCRIPTION: This example demonstrates how to configure the tags component to use MySQL as the data store. It sets the `dialectType` to `mysql`, enables automatic table synchronization (`sync: true`), and provides a MySQL connection instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tags.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nconst mysql = require('mysql2');\nexport default () => {\n  const connection = mysql.createConnection({\n      host: 'db4free.net',\n      user: 'tag***',\n      password: 'tag***',\n      database: 'tag***',\n      charset: 'utf8',\n  });\n  return {\n    tags: {\n      clients: {\n        'tagGroup': {\n          dialectType: 'mysql',\n          sync: true,\n          instance: { // 包含 query 的mysql连接实例\n            query: (...args) => {\n              return connection.promise().query(...args);\n            }\n          },\n        },\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Midway.js Serverless development script\nDESCRIPTION: This snippet shows an example of a `dev` script in `package.json` tailored for Serverless environments. It uses `@midwayjs/mock/function` to start the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=local mwtsc --watch --run @midwayjs/mock/function\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Koa Port in MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to modify the default port for the Koa HTTP server in a MidwayJS application. It shows how to change the port in both the `config.default` and `config.unittest` files, as well as how to override the port using the `midway-bin dev` command. Setting the port to `null` is standard for unit tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    port: 6001,\n  },\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.unittest\nexport default {\n  // ...\n  koa: {\n    port: null,\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Board UI Component - TypeScript\nDESCRIPTION: This snippet shows how to import and configure the BullBoard module in a MidwayJS application. It includes BullMQ and BullBoard in the `imports` array of the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as bullmq from '@midwayjs/bullmq';\nimport * as bullBoard from '@midwayjs/bull-board';\n\n@Configuration({\n  imports: [\n    // ...\n    bullmq,\n    bullBoard,\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies in package.json using diff format\nDESCRIPTION: This code snippet demonstrates the required changes to the `package.json` file when migrating from Serverless v2 to v3.  It highlights the upgraded Midway and component versions, removal of deprecated dependencies like `@midwayjs/serverless-app`, and updates to CLI and Jest versions. The diff format shows additions and removals for easy comparison.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_v2_upgrade_serverless_v3.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n   \"dev\": \"cross-env NODE_ENV=local midway-bin dev --ts\",\n   \"test\": \"cross-env midway-bin test --ts\",\n- \"deploy\": \"cross-env UDEV_NODE_ENV=production midway-bin deploy\",\n   \"lint\": \"mwts check\",\n   \"lint:fix\": \"mwts fix\"\n},\n\"dependencies\": {\n- \"@midwayjs/core\": \"^2.3.0\",\n- \"@midwayjs/decorator\": \"^2.3.0\",\n- \"@midwayjs/faas\": \"^2.0.0\"\n+ \"@midwayjs/core\": \"^3.12.0\",\n+ \"@midwayjs/faas\": \"^3.12.0\",\n+ \"@midwayjs/fc-starter\": \"^3.12.0\",\n+ \"@midwayjs/logger\": \"^2.0.0\"\n},\n\"devDependencies\": {\n- \"@midwayjs/cli\": \"^1.2.45\",\n- \"@midwayjs/cli-plugin-faas\": \"^1.2.45\",\n- \"@midwayjs/fcli-plugin-fc\": \"^1.2.45\",\n- \"@midwayjs/mock\": \"^2.8.7\",\n- \"@midwayjs/serverless-app\": \"^2.8.7\",\n- \"@midwayjs/serverless-fc-trigger\": \"^2.10.3\",\n- \"@midwayjs/serverless-fc-starter\": \"^2.10.3\",\n- \"@types/jest\": \"^26.0.10\",\n- \"@types/node\": \"14\",\n- \"cross-env\": \"^6.0.0\",\n- \"jest\": \"^26.4.0\",\n- \"mwts\": \"^1.0.5\",\n- \"ts-jest\": \"^26.2.0\",\n- \"typescript\": \"~4.6.0\"\n+ \"@midwayjs/mock\": \"^3.12.0\",\n+ \"@types/jest\": \"29\",\n+ \"@types/node\": \"16\",\n+ \"cross-env\": \"^7.0.3\",\n+ \"jest\": \"29\",\n+ \"mwts\": \"^1.3.0\",\n+ \"ts-jest\": \"29\",\n+ \"ts-node\": \"^10.9.1\",\n+ \"typescript\": \"~5.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Axios Interceptors\nDESCRIPTION: This example demonstrates how to configure global request interceptors for Axios using the `HttpService`. Request interceptors allow modifying the request configuration before it's sent and handling errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/axios.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path';\nimport { IMidwayContainer } from '@midwayjs/core';\n\n@Configuration({\n  imports: [\n    axios, // 导入 axios 组件\n  ],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class ContainerLifeCycle {\n  async onReady(container: IMidwayContainer) {\n    const httpService = await container.getAsync(axios.HttpService);\n    httpService.interceptors.request.use(\n      (config) => {\n        // Do something before request is sent\n        return config;\n      },\n      (error) => {\n        // Do something with request error\n        return Promise.reject(error);\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ISimulation in TypeScript\nDESCRIPTION: This code demonstrates an implementation of the `ISimulation` interface using the `InitDataMock` class in TypeScript. It injects the Midway application instance using `@App()`. The `appSetup` method adds different middleware based on the application framework type (koa or bull). The `enableCondition` method checks if the application environment is 'local', 'test', or 'unittest' to determine whether the simulation should be enabled.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, IMidwayApplication, Mock, ISimulation } from '@midwayjs/core';\n\n@Mock()\nexport class InitDataMock implements ISimulation {\n\n   @App()\n   app: IMidwayApplication;\n\n   async appSetup(app: IMidwayApplication): Promise<void> {\n     // Add different test middleware for different framework types\n     if (app. getNamespace() === 'koa') {\n       app. useMiddleware(/*...*/);\n       app. useFilter(/*...*/);\n     }\n    \n     if (app. getNamespace() === 'bull') {\n       app. useMiddleware(/*...*/);\n       app. useFilter(/*...*/);\n     }\n   }\n\n   enableCondition(): boolean | Promise<boolean> {\n     return ['local', 'test', 'unittest']. includes(this. app. getEnv());\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscriber Implementation\nDESCRIPTION: This TypeScript snippet demonstrates how to implement an MQTT subscriber using the `@MqttSubscriber` decorator and the `IMqttSubscriber` interface. The `subscribe` method is executed when a new message is received on the subscribed topic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/consumer/sub1.subscriber.ts\n\nimport { ILogger, Inject } from '@midwayjs/core';\nimport { Context, IMqttSubscriber, MqttSubscriber } from '@midwayjs/mqtt';\n\n@MqttSubscriber('test')\nexport class Sub1Subscriber implements IMqttSubscriber {\n\n   @Inject()\n   ctx: Context;\n\n   async subscribe() {\n     // ...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating test code dependencies with diff format\nDESCRIPTION: This code snippet shows the changes required in test files. Specifically, it highlights the replacement of `@midwayjs/serverless-app` with `@midwayjs/faas` imports when creating function apps.  This reflects the framework migration from v2 to v3.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_v2_upgrade_serverless_v3.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\n- import { Framework, Application } from '@midwayjs/serverless-app';\n+ import { Framework, Application } from '@midwayjs/faas';\n```\n\n----------------------------------------\n\nTITLE: Using MidwayAspectService to add aspects/interceptors - TypeScript\nDESCRIPTION: This snippet showcases how to inject and use the MidwayAspectService to add aspects or interceptors in a Midway application. It defines a controller and injects the `MidwayAspectService` instance. The comments indicates where the service API can be used. `@Controller`, `@Inject`, and `@Get` decorators are used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, MidwayAspectService } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  aspectService: MidwayAspectService;\n\n  @Get('/')\n  async home() {\n    // this.aspectService.interceptPrototypeMethod(/** 省略 **/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature: Support Multi Root\nDESCRIPTION: This feature adds support for multiple root directories in the MidwayJS framework. The implementation is associated with commit b23dda258563fba143f23c8779680df3ab8ec3d5 and addresses issue #1584.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Implementing MQTT Subscriber Class\nDESCRIPTION: This TypeScript code shows how to implement an MQTT subscriber class using the `@MqttSubscriber` decorator and the `IMqttSubscriber` interface. The decorator associates the class with a subscriber name (e.g., 'test'), and the interface requires the implementation of a `subscribe` method that handles incoming messages.  The `Context` object provides access to the message payload and other MQTT-related information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/consumer/sub1.subscriber.ts\n\nimport { ILogger, Inject } from '@midwayjs/core';\nimport { Context, IMqttSubscriber, MqttSubscriber } from '@midwayjs/mqtt';\n\n@MqttSubscriber('test')\nexport class Sub1Subscriber implements IMqttSubscriber {\n\n  @Inject()\n  ctx: Context;\n\n  async subscribe() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing a Midway.js Application Instance\nDESCRIPTION: This TypeScript snippet shows how to properly close a Midway.js application instance using the `close` function from `@midwayjs/mock`. Closing the application is important for releasing resources and ensuring a clean test environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\n\nawait close(app);\n```\n\n----------------------------------------\n\nTITLE: Controller-level grouping and description\nDESCRIPTION: This code snippet demonstrates how to use the `@Controller` decorator to group related API endpoints and provide a description for the group. The `tagName` and `description` properties are used to customize the Swagger UI display.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/', { tagName: 'Custom Group', description: 'Home Router' })\nexport class HomeController {}\n```\n\n----------------------------------------\n\nTITLE: Accessing MidwayJS Application Context\nDESCRIPTION: Demonstrates how to access the MidwayJS application context to retrieve the dependency injection container.  This allows for dynamic service retrieval. Uses IMidwayApplication and @App.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from '@midwayjs/decorator';\nimport { IMidwayApplication } from '@midwayjs/core';\n\n@Provide()\nexport class BootApp {\n  @App()\n  app: IMidwayApplication; // 这里也可以换成实际的框架的 app 定义\n\n  async ready() {\n    // 获取依赖注入容器\n    const container = this.app.getApplicationContext();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Histogram in API Controller\nDESCRIPTION: This code defines an API endpoint `/api/get_user` that utilizes the previously defined `test_histogram`. It injects the `DataService` and uses its `observe` method to record a value (100) into the histogram each time the endpoint is accessed. It also retrieves user data using the `UserService`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Query } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/koa';\nimport { DataService } from '@midwayjs/prometheus';\nimport { UserService } from '../service/user.service';\n\n@Controller('/api')\nexport class APIController {\n  @Inject()\n  ctx: Context;\n\n  @Inject()\n  userService: UserService;\n\n  @Inject()\n  dataService: DataService;\n\n  @Get('/get_user')\n  async getUser(@Query('uid') uid) {\n    this.dataService.observe('test_histogram', [], 100); //此处我们observe了这个histogram\n    const user = await this.userService.getUser({ uid });\n    return { success: true, message: 'OK', data: user };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/oss Dependency to package.json\nDESCRIPTION: This JSON snippet shows how to manually add the @midwayjs/oss dependency to the dependencies section of the package.json file. Ensure that the version number matches the desired version.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/oss\": \"^3.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Context with Custom Name using @Inject Decorator\nDESCRIPTION: This code snippet shows how to inject a Context instance with a custom name using the `@Inject('ctx')` decorator. This allows for more flexible naming of the context object within the controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject('ctx')\n  customContextName: Context;\n\n  @Get('/')\n  async home() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import KafkaJS Modules\nDESCRIPTION: This TypeScript code demonstrates how to import specific modules from KafkaJS using `@midwayjs/kafka`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KafkaJS } from '@midwayjs/kafka';\n\nconst { ConfigResourceTypes } = KafkaJS;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Obtaining and Logging Middleware Names - TypeScript\nDESCRIPTION: Demonstrates how to retrieve all middleware names in the current middleware list using `getMiddleware().getNames()` and log them to the console. This is useful for verifying the registered middleware and their respective names.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { ReportMiddleware } from './middleware/user.middleware';\nimport { fnMiddleware } from './middleware/another.middleware';\n\n@Configuration({\n  imports: [koa]\n  // ...\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // add middleware\n    this.app.useMiddleware([ReportMiddleware, fnMiddleware]);\n\n    // output\n    console.log(this.app.getMiddleware().getNames());\n    // => report, fnMiddleware\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure matchQueryKey for Code Dye\nDESCRIPTION: Configures the `matchQueryKey` option to control code dyeing based on the presence of a specific query parameter. If the specified query parameter exists in the request, code dyeing is triggered. Configured in `src/config/config.local.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/code_dye.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nexport default {\n   codeDye: {\n     matchQueryKey: 'codeDyeABC',\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Server-Side Stream using Events (TypeScript)\nDESCRIPTION: This code demonstrates how to consume a server-side stream using an event-based approach. The client attaches a 'data' event listener to the call object to process data as it arrives from the server in realtime.  The message is sent using `sendMessage`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// 服务端推送\nlet call = service.sumMany().getCall();\n\ncall.on('data', data => {\n\t// do something\n});\n\ncall.sendMessage({\n  num: 1,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type Using API (Typescript)\nDESCRIPTION: This snippet demonstrates how to set the content type of a response using `ctx.type` API in a MidwayJS controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.type = 'html';\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Fixing setLocals in MidwayJS View\nDESCRIPTION: This bug fix addresses an issue with the `setLocals` function in the @midwayjs/view package. The fix is associated with commit 72789a114b1142674c1a8141c7af382538d92400.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Implementing the @Model Decorator Functionality in TypeScript\nDESCRIPTION: This code snippet implements the functionality associated with the `@Model` decorator. It uses `listModule` to retrieve all classes decorated with `@Model`, iterates through them, and performs custom logic based on the metadata associated with each class.  This is typically done during application startup.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/decorator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 实现 Model 装饰器功能\nimport { listModule } from 'midway';\n\nconst MODEL_KEY = 'decorator:model';\n// 可以获取到所有装饰了 @Model 装饰器的 class\nconst modules = listModule(MODEL_KEY);\nfor (let mod of modules) {\n  // 实现自定义能力\n  // 从 mod 上拿元数据，做不同的处理\n  // 提前初始化等 app.applicationContext.getAsync(getProvideId(mod));\n}\n```\n\n----------------------------------------\n\nTITLE: Simple GET Request with HttpClient - TypeScript\nDESCRIPTION: This snippet demonstrates a simple GET request using the `HttpClient` class. It creates an instance of `HttpClient` and then uses its `request` method to send the GET request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from '@midwayjs/core';\n\nconst httpclient = new HttpClient();\nconst result = await httpclient.request('http://127.1:7001/');\n\n// Buffer.isBuffer(result.data)  => true\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Initialization\nDESCRIPTION: This code snippet demonstrates how to configure lazy initialization for a logger.  The `lazyLoad: true` setting on `customLoggerB` indicates that the logger will not be initialized until it's first used.  This is useful for scenarios where the logger configuration is dynamic or depends on other services that may not be available at startup. This configuration is part of the midwayLogger configuration in a MidwayConfig object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      customLoggerA: {\n        // ..\n      },\n      customLoggerB: {\n        lazyLoad: true,\n      },\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: mwtsc with watch and run\nDESCRIPTION: This command combines watch mode with the 'run' parameter, which automatically executes a specified JavaScript file after successful compilation. Changes trigger recompilation and re-execution. The JavaScript file path must be provided.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mwtsc --watch --run @midwayjs/mock/app.js\n```\n\n----------------------------------------\n\nTITLE: Configured Absolute Path (diff)\nDESCRIPTION: This snippet illustrates the change in how configuration paths are handled in Midway v3. Relative paths for importConfigs are no longer supported; absolute paths must be used instead. This requires using the `join` function from the `path` module.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n// src/configuration\nimport { join } from 'path';\n\n@Configuration({\n  // ...\n  importConfigs: [\n- './config' // error\n+ join(__dirname, './config') // ok\n  ]\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Express Context, Request, and Response\nDESCRIPTION: This code snippet shows how to inject the Express Context, Request, and Response objects into a controller using the `@Inject` decorator. The injected `ctx` object is a collection of the `req` and `res` objects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/req_res_app.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/express';\nimport { Request, Response } from 'express';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context; // 包含了 req 和 res\n\n  @Inject()\n  req: Request;\n\n  @Inject()\n  res: Response;\n\n  @Get('/')\n  async home() {\n    // this.req.query\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add ets to dev script\nDESCRIPTION: This JSON snippet demonstrates how to integrate the `ets` command into the `dev` script within a `package.json` file. The `ets` command is executed before starting the development server, ensuring that type definitions are up-to-date before the application runs. `cross-env` is used to set environment variables consistently across different operating systems.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/egg-ts-helper.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"dev\": \"cross-env ets && cross-env NODE_ENV=local midway-bin dev --ts\",\n  },\n```\n\n----------------------------------------\n\nTITLE: HTML form for file upload\nDESCRIPTION: This HTML snippet provides a basic form for uploading files to a server. It includes an input field for text and another for file selection. The enctype attribute is set to multipart/form-data, which is necessary for file uploads.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/api/upload\" method=\"post\" enctype=\"multipart/form-data\">\n  Name: <input type=\"text\" name=\"name\" /><br />\n  File: <input type=\"file\" name=\"testFile\" /><br />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: UseFields Hook Example (TypeScript)\nDESCRIPTION: This example shows how to retrieve non-file form data using the `useFields` hook. The frontend appends a field named 'name' with the value 'test' to the FormData, and the backend receives an object containing this field.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/upload.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// frontend\nconst formdata = new FormData();\nformdata.append('name', 'test');\n\npost(formdata);\n\n// backend\nconst fields = useFields();\n// { name: 'test'}\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Locale Files\nDESCRIPTION: Illustrates a sample directory structure for storing locale files (`en_US.json` and `zh_CN.json`) within a MidwayJS project. This structure helps organize translations for different languages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n.\n├── src\n│   ├── locales\n|   │   ├── en_US.json\n|   │   └── zh_CN.json\n│   └── controller\n│       └── home.controller.ts\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Configure Scripts for Bundling & Building (package.json)\nDESCRIPTION: This snippet configures the `scripts` section of `package.json` to automate the bundling and building process. `bundle` exports the project code as components and generates a `src/index.ts` file. `npm run build` compiles the TypeScript code to JavaScript. `ncc build` then packages the JavaScript files into a single file using `bootstrap.js` as the entry point, outputting to the `build` directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"scripts\": {\n     //...\n     \"bundle\": \"bundle && npm run build && ncc build bootstrap.js -o build\",\n     \"bundle_start\": \"NODE_ENV=production node ./build/index.js\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Properties with MidwayMockService (TypeScript)\nDESCRIPTION: This example demonstrates how to use `mockClassProperty` to mock a property (method) on a class. It showcases mocking with both the default group and a custom group, allowing for flexible data simulation in different scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayMockService, Provide, Inject } from '@midwayjs/core';\n\n@Provide()\nclass TestMockService {\n  @Inject()\n  mockService: MidwayMockService;\n\n  mock() {\n    // Simulate property, use default group\n    this.mockService.mockClassProperty(UserService, 'getUser', async () => {\n      return 'midway';\n    });\n\n    // Simulate property, specify group\n    this.mockService.mockClassProperty(UserService, 'data', {\n      bbb: '1'\n    }, 'group2');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mongoose Component with Multi-Instance Typegoose Support\nDESCRIPTION: This commit introduces a Mongoose component to the MidwayJS framework, enabling interaction with MongoDB databases. It also adds support for multiple instances of Typegoose, which simplifies the definition and management of MongoDB models using TypeScript classes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_9\n\nLANGUAGE: N/A\nCODE:\n```\nca0b73f\n```\n\n----------------------------------------\n\nTITLE: Mixing Default Export with Named Export (Incorrect)\nDESCRIPTION: Demonstrates the incorrect usage of mixing `export default` (function) and `export const` for configuration. In this case, the `export const keys` will be ignored by MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/env_config.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default (appInfo) => {\n  const config = {};\n\n  // xxx\n  return config;\n};\n\nexport const keys = '12345';\n\n```\n\n----------------------------------------\n\nTITLE: mwtsc with watch and run using npx\nDESCRIPTION: This command is similar to the previous one, but utilizes npx to execute mwtsc. It watches for changes, compiles, and then runs the provided javascript file. \nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc --watch --run ./bootstrap.js\n```\n\n----------------------------------------\n\nTITLE: Getting a Custom Logger in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve a custom logger from the Midway.js context using the `getLogger` method. The `getLogger` method takes the name of the custom logger as a parameter. This is typically used for logging specific events or data within a particular module or component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.getLogger('custom');\n// => custom logger\n```\n\n----------------------------------------\n\nTITLE: Hiding Sensitive Info in Midway.js\nDESCRIPTION: This TypeScript code demonstrates how to hide sensitive information from being displayed by the info component. It utilizes the hiddenKey property to specify keywords or wildcard patterns that should be masked. This helps prevent the exposure of secrets or other confidential data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/info.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { DefaultHiddenKey } from '@midwayjs/info';\n\nexport default {\n  // ...\n  info: {\n    hiddenKey: DefaultHiddenKey.concat(['*abc', '*def', '*bbb*']),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable package-lock.json in npm\nDESCRIPTION: This command disables the automatic generation of the `package-lock.json` file in npm. This can be useful in situations where the lockfile causes unexpected issues or conflicts with project dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/npm_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm config set package-lock false\n```\n\n----------------------------------------\n\nTITLE: Caching Consul Configuration with Singleton Scope in MidwayJS\nDESCRIPTION: This code demonstrates how to cache Consul configuration values using a singleton-scoped service in MidwayJS. It injects the Consul client, defines a `ConfigService` with a singleton scope, and uses the `@Init` decorator to fetch the configuration value from Consul on application startup and periodically using `setInterval`. This reduces pressure on the Consul server by caching the configuration and updating it periodically instead of on every request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/consul.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Init, Inject, Provide, Scope, ScopeEnum } from '@midwayjs/decorator';\nimport * as Consul from 'consul';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class ConfigService {\n  @Inject('consul:consul')\n  consul: Consul.Consul;\n\n  config: any;\n\n  @Init()\n  async init() {\n    setInterval(() => {\n      this.consul.kv.get(`name`).then((res) => {\n        this.config = res;\n      });\n    }, 5000);\n    this.config = await this.consul.kv.get(`name`);\n  }\n\n  async getConfig() {\n    return this.config;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BodyParser Configuration in Midway Express\nDESCRIPTION: Demonstrates how to use `body-parser` middleware in a Midway.js Express application. It imports and uses the middleware within the `onReady` lifecycle hook to parse JSON and URL-encoded data. Requires installing `body-parser`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/body-parser.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/express';\nimport * as bodyParser from 'body-parser';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(bodyParser.json());\n    this.app.use(bodyParser.urlencoded({ extended: false }));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Errors in Exception Filter in Typescript\nDESCRIPTION: This code demonstrates how to log errors within an exception filter. The `ctx.logger.error(err)` line logs the error object using the context's logger. This helps in debugging and monitoring the application's error handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_filter.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch()\nexport class DefaultErrorFilter {\n  async catch(err: Error, ctx: Context) {\n\n    // ...\n    ctx.logger.error(err);\n    // ...\n    return 'got 500 error, '+ err.message;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Port Configuration\nDESCRIPTION: This snippet demonstrates how to configure the port for the `@midwayjs/socketio` module. It shows setting the port directly within the socketIO configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  socketIO: {\n    port: 7001\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling EggJS Plugin in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to enable an EggJS plugin (egg-mysql) within a Midway application.  The plugin configuration specifies whether the plugin is enabled and the package name. This can be done in either `export default` or direct export formats.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { EggPlugin } from 'egg';\nexport default {\n  static: false, // default is true\n  mysql: {\n    enable: true,\n    package: 'egg-mysql',\n  },\n} as EggPlugin;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/config/plugin.ts\n// 使用 mysql 插件\nexport const mysql = {\n  enable: true,\n  package: 'egg-mysql',\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Backend API with Midway Hooks\nDESCRIPTION: This code snippet demonstrates how to define a backend API using Midway Hooks. It uses the `APIs` and `Post` decorators to define an HTTP endpoint at `/api/say`. The function takes a `name` parameter and returns a greeting string.  The `@midwayjs/hooks` dependency is required.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/intro.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  APIs,\n  Post,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Post(), // Http Path: /api/say,\n  async (name: string) => {\n    return `Hello ${name}!`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom HTTP Framework in Typescript\nDESCRIPTION: This snippet demonstrates the implementation of a custom HTTP framework in Midway.js. It extends `BaseFramework` and defines interfaces for `Context`, `Application`, and configuration options. The `applicationInitialize` method creates an HTTP server, sets up the request context, and handles requests, while the `run` method starts the server on the configured port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/component_development.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseFramework, IConfigurationOptions, IMidwayApplication, IMidwayContext } from '@midwayjs/core';\nimport * as http from 'http';\n\n// 定义一些上层业务要使用的定义\nexport interface Context extends IMidwayContext {}\n\nexport interface Application extends IMidwayApplication<Context> {}\n\nexport interface IMidwayCustomConfigurationOptions extends IConfigurationOptions {\n  port: number;\n}\n\n// 实现一个自定义框架，继承基础框架\nexport class MidwayCustomHTTPFramework extends BaseFramework<Application, Context, IMidwayCustomConfigurationOptions> {\n\n  configure(): IMidwayCustomConfigurationOptions {\n    return this.configService.getConfiguration('customKey');\n  }\n\n  async applicationInitialize(options: Partial<IMidwayBootstrapOptions>) {\n    // 创建一个 app 实例\n    this.app = http.createServer((req, res) => {\n      // 创建请求上下文，自带了 logger，请求作用域等\n      const ctx = this.app.createAnonymousContext();\n      // 从请求上下文拿到注入的服务\n      ctx.requestContext\n        .getAsync('xxxx')\n        .then((ins) => {\n          // 调用服务\n          return ins.xxx();\n        })\n        .then(() => {\n          // 请求结束\n          res.end();\n        });\n    });\n\n    // 给 app 绑定上 midway 框架需要的一些方法，比如 getConfig, getLogger 等。\n    this.defineApplicationProperties();\n  }\n\n  async run() {\n    // 启动的参数，这里只定义了启动的 HTTP 端口\n    if (this.configurationOptions.port) {\n      new Promise<void>((resolve) => {\n        this.app.listen(this.configurationOptions.port, () => {\n          resolve();\n        });\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Midway.js Project with npm init\nDESCRIPTION: This command initializes a new Midway.js project using the `create-midway` package. The `-y` flag skips interactive prompts, using default values. Omitting `@latest` may result in an outdated version.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Defining dependencies for EggJS integration in Midway\nDESCRIPTION: This JSON snippet defines the dependencies required for integrating EggJS within a Midway application. It specifies the necessary Midway web adapter, decorator, EggJS core, EggJS scripts, and a Midway-compatible version, along with a development dependency for EggJS TypeScript helper.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/web\": \"^2.3.11\",\n    \"@midwayjs/decorator\": \"^2.3.11\",\n    \"egg\": \"^2.0.0\",\n    \"egg-scripts\": \"^2.10.0\",\n    \"midway\": \"^2.3.11\"\n  },\n  \"devDependencies\": {\n    \"@midwayjs/egg-ts-helper\": \"^1.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Redis Adapter and Redis Package\nDESCRIPTION: This command installs the necessary packages for using the Redis adapter with Casbin in a MidwayJS project. It adds `@midwayjs/casbin-redis-adapter` for the adapter itself and `@midwayjs/redis` for Redis integration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/casbin-redis-adapter @midwayjs/redis --save\n```\n\n----------------------------------------\n\nTITLE: onBeforeObjectCreated Lifecycle Hook in TypeScript\nDESCRIPTION: Demonstrates the usage of the `onBeforeObjectCreated` lifecycle hook, which executes before an object instance is created. This hook allows you to intercept and potentially modify the creation process. Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectBeforeCreatedOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onBeforeObjectCreated(Clzz: new (...args), options: ObjectBeforeCreatedOptions): Promise<void> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Listener File Extensions\nDESCRIPTION: Specifies additional file extensions to listen for changes using the `--watchExt` parameter. Default extensions are `.ts`, `.yml`, and `.json`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n// Specify multiple file extensions separated by commas\n$ midway-bin dev --ts --watchExt=.js,.html\n```\n\n----------------------------------------\n\nTITLE: Using Custom ServerResponse in a Controller (TypeScript)\nDESCRIPTION: This code shows how to use a custom `ServerResponse` class in a MidwayJS controller.  An instance of the custom class is created and used to return a JSON response with the customized template.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n  \n  @Get('/')\n  async home() {\n    return new CustomServerResponse(this.ctx).success().json({\n      // ...\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to the Latest Version using yarn\nDESCRIPTION: This command upgrades all Midway modules to the latest version using yarn. First, it adds `midway-version` as a project dependency using `yarn add`. The `-u` flag instructs the tool to identify the latest available version. The `-w` flag writes the changes to `package.json` and `yarn.lock`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/version_check.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add midway-version@latest\n$ yarn midway-version -u\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn midway-version -u -w\n```\n\n----------------------------------------\n\nTITLE: Enable Consul Component in Midway\nDESCRIPTION: Enables the Consul component within a MidwayJS application by importing it into the `imports` array of the `@Configuration` decorator.  It also imports the configuration file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as consul from '@midwayjs/consul'\n\n@Configuration({\n  imports: [\n    // ..\n    consul\n  ],\n  importConfigs: [join(__dirname, 'config')]\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Install @vercel/ncc Locally\nDESCRIPTION: This command installs the @vercel/ncc package as a development dependency. It's used for building single-file executables by compiling Node.js projects into a single file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @vercel/ncc --save-dev\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in @midwayjs/express\nDESCRIPTION: This code demonstrates how to read cookies in a Midway.js Express application using the `cookie-parser` middleware.  It accesses cookies from the `req.cookies` and `req.signedCookies` properties of the request object. `req.cookies` contains unencrypted cookies, while `req.signedCookies` contains cookies that have been signed using a secret key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cookies.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/express';\nimport { Request } from 'express';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  req: Request;\n\n  @Get('/')\n  async home() {\n    // 获取未加密的 cookie\n    console.log('Cookies: ', this.req.cookies);\n\n    // 获取加密的 cookie\n    console.log('Signed Cookies: ', this.req.signedCookies);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EggJS Plugin using npm\nDESCRIPTION: This bash command demonstrates how to install an EggJS plugin (egg-mysql) within a Midway application using npm. The `--save` flag adds the plugin as a dependency to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm i egg-mysql --save\n```\n\n----------------------------------------\n\nTITLE: Install Passport Dependencies\nDESCRIPTION: This bash script installs the @midwayjs/passport package, along with optional dependencies for local, Github, and JWT strategies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n## 必选\n$ npm i @midwayjs/passport@3 --save\n\n## 可选\n## 下面安装本地策略\n$ npm i passport-local --save\n$ npm i @types/passport-local --save-dev\n## 下面安装 Github 策略\n$ npm i passport-github --save\n## 下面安装 Jwt 策略\n$ npm i passport-jwt --save\n```\n\n----------------------------------------\n\nTITLE: Updating Midway.js Package Versions with `midway-version`\nDESCRIPTION: These commands initiate an update check for Midway.js packages.  They use the `midway-version` tool with the `-u` flag to display update suggestions. The commands are adapted for different package managers like npm/yarn (`npx`) and pnpm (`pnpx`).  The update can also be written to the `package.json` file by adding the `-w` flag.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/how_to_update_midway.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 社区用户\n$ npx midway-version -u\n# 内部用户\n$ tnpx @ali/midway-version -u\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 社区用户\n$ pnpx midway-version -u\n# 内部用户\n$ pnpx @ali/midway-version -u\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 社区用户\n$ npx midway-version -u -w\n# 内部用户\n$ tnpx @ali/midway-version -u -w\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 社区用户\n$ pnpx midway-version -u -w\n# 内部用户\n$ pnpx @ali/midway-version -u -w\n```\n\n----------------------------------------\n\nTITLE: Adding Security Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the @midwayjs/security package as a dependency in your project's package.json file. After adding this, you need to reinstall dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/security.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/security\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Access with useConfig in TypeScript\nDESCRIPTION: This snippet shows how to use `useConfig` to retrieve configuration values within a Midway application. It takes a key as a parameter and returns the corresponding configuration value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_builtin.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = useConfig('key');\n```\n\n----------------------------------------\n\nTITLE: Using Koa Compress Middleware in Midway.js (TypeScript)\nDESCRIPTION: This snippet illustrates how to use an existing Koa middleware (koa-compress) in Midway.js. It imports the `koa-compress` module and exports it directly.  This works because `koa-compress`'s interface `(options) => middleware` is compatible with Midway's middleware requirements.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/middleware.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/middleware/compress.ts\n// koa-compress 暴露的接口((options) => middleware)和框架对中间件要求一致\nmodule.exports = require('koa-compress');\n```\n\n----------------------------------------\n\nTITLE: Stop Application by Name\nDESCRIPTION: This command stops a PM2-managed application by its name.  Using the name makes it easier to target a specific application, especially when multiple applications are running.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/pm2.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pm2 stop test_app\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Context in Method Decorator (TypeScript)\nDESCRIPTION: Demonstrates how to access the request context (`ctx`) within a custom method decorator using `REQUEST_OBJ_CTX_KEY`. The context is retrieved from the instance on which the decorator is applied, enabling access to request-specific data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { REQUEST_OBJ_CTX_KEY } from '@midwayjs/core';\n//...\n\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Logger()\n  logger;\n\n  async onReady() {\n    // ...\n\n    // Implementation method decorator\n    this.decoratorService.registerMethodHandler(LOGGING_KEY, (options) => {\n      return {\n        around: async (joinPoint: JoinPoint) => {\n          // Instance where the decorator is located\n          const instance = joinPoint.target;\n          const ctx = instance[REQUEST_OBJ_CTX_KEY];\n          // ctx.xxxx\n          // ...\n        },\n      };\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Flatten Router Table in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a flattened list of routes from the WebRouterCollector using the getFlattenRouterTable method. The resulting array contains RouterInfo objects representing all registered routes, sorted by priority.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/router_table.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync getFlattenRouterTable(): Promise<RouterInfo[]>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await collector.getFlattenRouterTable();\n```\n\n----------------------------------------\n\nTITLE: Define Controller with route (TypeScript)\nDESCRIPTION: This snippet defines a simple controller in MidwayJS with a route `/`. It uses decorators like `@controller`, `@get`, and `@provide` to configure the controller and its associated route, returning a welcome message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { controller, get, provide } from 'midway';\n\n@provide()\n@controller('/')\nexport class HomeController {\n  @get('/')\n  async index(ctx) {\n    ctx.body = `Welcome to midwayjs!`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with Request Data\nDESCRIPTION: This code shows how to test an API endpoint that expects request data. It uses `createHttpRequest` to send a POST request with the `args` parameter in the request body and verifies the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Hello World', async () => {\n  const trigger = getApiTrigger<HttpTriger>(say);\n  const response = await createHttpRequest(app)\n    .post(trigger.path)\n    .send({ args: ['Midway'] })\n    .expect(200);\n  expect(response.text).toBe('Hello Midway!');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OSS with STS in MidwayJS\nDESCRIPTION: This TypeScript snippet shows how to configure OSS to use Security Token Service (STS). Setting sts to true indicates that an STS client will be created, and accessKeyId and accessKeySecret should be provided.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  oss: {\n    // if config.sts == true, oss will create STS client\n    client: {\n      sts: true\n      accessKeyId: 'your access key',\n      accessKeySecret: 'your access secret',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Typegoose in MidwayJS\nDESCRIPTION: This JSON snippet shows the dependencies required to support MongoDB Server 4.4.x, including mongoose v5 and @typegoose/typegoose v8. It demonstrates how to set up Mongoose with Typegoose for MidwayJS projects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    // Components\n    \"@midwayjs/typegoose\": \"^3.0.0\",\n    // mongoose dependency in the previous section\n  },\n  \"devDependencies\": {\n    // mongoose dependency in the previous section\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Class Decorator (@Model) in TypeScript\nDESCRIPTION: This code defines a custom class decorator named `@Model`. It uses `saveModule` to associate the decorated class with the `MODEL_KEY`, `saveClassMetadata` to store metadata about the class, and `Scope` to specify the IoC container scope. The decorator receives the target class as input.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/decorator_api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scope, ScopeEnum, saveClassMetadata, saveModule } from '@midwayjs/decorator';\n\nconst MODEL_KEY = 'decorator:model';\n\nexport function Model(): ClassDecorator {\n  return (target: any) => {\n    // 将装饰的类，绑定到该装饰器，用于后续能获取到 class\n    saveModule(MODEL_KEY, target);\n    // 保存一些元数据信息，任意你希望存的东西\n    saveClassMetadata(\n      MODEL_KEY,\n      {\n        test: 'abc',\n      },\n      target\n    );\n    // 指定 IoC 容器创建实例的作用域，这里注册为请求作用域，这样能取到 ctx\n    Scope(ScopeEnum.Request)(target);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Logger Configuration\nDESCRIPTION: This TypeScript code demonstrates how to configure the Kafka component's logger using the `midwayLogger` configuration. You can customize the file name where logs are stored.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  midwayLogger: {\n    clients: {\n      kafkaLogger: {\n        fileLogName: 'midway-kafka.log',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Add MQTT Component Dependency to package.json\nDESCRIPTION: This JSON snippet shows how to add the MQTT component as a dependency in your `package.json` file. This ensures the component is installed when running `npm install`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"dependencies\": {\n     \"@midwayjs/mqtt\": \"^3.0.0\",\n     // ...\n   },\n   \"devDependencies\": {\n     // ...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Midway.js Application Instance\nDESCRIPTION: This TypeScript snippet demonstrates how to create an application instance using the `createApp` function from `@midwayjs/mock`. It's essential for setting up a test environment for unit and integration tests. The type parameter `<Framework>` specifies the framework type for TypeScript inference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// create app\nconst app = await createApp<Framework>();\n```\n\n----------------------------------------\n\nTITLE: Bug fix for Buffer in Serverless\nDESCRIPTION: This commit fixes an issue where a buffer was not being returned correctly in a serverless environment. The commit ensures that the static file middleware functions correctly in serverless deployments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- return buffer in serverless environment ([#2085](https://github.com/midwayjs/midway/issues/2085)) ([ef4f70a](https://github.com/midwayjs/midway/commit/ef4f70ac20f8c7dc05165947114349aa991eda56))\n```\n\n----------------------------------------\n\nTITLE: Accessing the Environment with ctx.env\nDESCRIPTION: This code shows how to access the current environment using `ctx.env` in Midway Serverless. The `ctx.env` property returns the value of the NODE_ENV or MIDWAY_SERVER_ENV environment variable, defaulting to 'prod' if neither is set.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_context.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nctx.env; // 默认 prod\n```\n\n----------------------------------------\n\nTITLE: Importing Application and Context (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import `Application` and `Context` from `@midwayjs/faas` in Serverless v2.0. The `IFaaSApplication` interface is replaced with `Application`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_v1_upgrade_serverless_v2.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context } from '@midwayjs/faas';\n```\n\n----------------------------------------\n\nTITLE: Testing RabbitMQ Integration\nDESCRIPTION: This snippet demonstrates a basic test case for RabbitMQ integration in MidwayJS using `@midwayjs/mock`. It creates a RabbitMQ producer, sends a message to a queue, starts the application, and closes it.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRabbitMQProducer, closeApp, creatApp } from '@midwayjs/mock';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create message and get from app', async () => {\n    // create a queue and channel\n    const channel = await createRabbitMQProducer('tasks', {\n      isConfirmChannel: true,\n      mock: false,\n      url: 'amqp://localhost',\n    });\n\n    // send data to queue\n    channel.sendToQueue('tasks', Buffer.from('something to do'));\n\n    // create app and got data\n    const app = await creatApp('base-app', { url: 'amqp://localhost' });\n    await closeApp(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: TestService with RunInPrimary decorator (Midway)\nDESCRIPTION: Defines a TestService with methods decorated with @RunInPrimary. This decorator ensures that the setData and getData methods are executed only in the primary process, solving multi-process data consistency issues. The service stores and retrieves data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/process_agent.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum } from '@midwayjs/core';\nimport { RunInPrimary } from '@midwayjs/process-agent';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class TestService {\n\n  data: any = 0;\n\n  @RunInPrimary()\n  async setData(b){\n    this.data = b;\n    return this.data;\n  }\n\n  @RunInPrimary()\n  async getData(){\n    return this.data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add COS Dependency in package.json\nDESCRIPTION: This snippet demonstrates how to add the `@midwayjs/cos` package as a dependency in the `package.json` file. This ensures that the package is installed when the project's dependencies are resolved. Version `^3.0.0` indicates that any version compatible with 3.0.0 can be installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cos.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/cos\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Website with SSH - Yarn\nDESCRIPTION: Deploys the Midway.js website using Yarn and SSH. This command assumes SSH access is configured.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring a Router Filter for Swagger (MidwayJS, TypeScript)\nDESCRIPTION: This snippet configures a router filter that allows for conditional exclusion of routes from the Swagger documentation. The `routerFilter` function receives the URL and router options, enabling dynamic filtering based on these parameters. Requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { RouterOption } from '@midwayjs/core';\n\nexport default {\n   // ...\n   swagger: {\n     routerFilter: (url: string, options: RouterOption) => {\n       return url === '/hello/getUser';\n     }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Template Name with npm init\nDESCRIPTION: This command demonstrates how to specify a particular template to use for scaffolding, using the `--type` parameter. Replace `koa-v3` with the desired template name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --type=koa-v3\n```\n\n----------------------------------------\n\nTITLE: Consuming Server-Side Stream using Promise (TypeScript)\nDESCRIPTION: This code shows how to consume a server-side stream using a Promise.  The client waits for all the data to be returned from the server before processing it using the `forEach` method. This is a non-realtime approach.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// 服务端推送\nlet total = 0;\nlet result = await service.sumMany().sendMessage({\n  num: 1,\n});\n\nresult.forEach(data => {\n  total += data.num;\n});\n\n// total = 9;\n\n```\n\n----------------------------------------\n\nTITLE: Modifying tsconfig.json with @midwayjs/cli for Build\nDESCRIPTION: This code snippet shows how to modify the `tsconfig.json` file to specify the `rootDir` for compilation when using `@midwayjs/cli`.  This is necessary to ensure that the TypeScript compiler correctly locates the source files in the altered source directory. The `compileOnSave` property enables automatic compilation on file save.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/change_start_dir.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compileOnSave\": true\n  \"compilerOptions\": {\n    // ...\n    \"rootDir\": \"server\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces a 'guard' feature to the MidwayJS framework, likely related to security enhancements. This addition provides extra security layers for applications built with MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/security/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Decorator Functionality in TypeScript\nDESCRIPTION: This code implements the functionality associated with the `@Model` decorator. It uses `listModule` to retrieve all classes decorated with `@Model`, then iterates through them to perform custom actions, such as retrieving metadata and initializing instances. It depends on the `@Model` decorator definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/decorator_api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 实现 Model 装饰器功能\nimport { listModule } from '@midwayjs/decorator';\n\nconst MODEL_KEY = 'decorator:model';\n// 可以获取到所有装饰了 @Model 装饰器的 class\nconst modules = listModule(MODEL_KEY);\nfor (let mod of modules) {\n  // 实现自定义能力\n  // 从 mod 上拿元数据，做不同的处理\n  // 提前初始化等 app.applicationContext.getAsync(getProviderId(mod));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Cron Job with Task Name\nDESCRIPTION: This TypeScript snippet demonstrates defining a cron job with a specific name. This allows you to later retrieve and manage the job using the framework's API. The cron job is defined using the `@Job` decorator with a name and cronTime configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Job('syncJob', {\n   cronTime: '*/2 * * * * *', // execute every 2s\n})\nexport class DataSyncCheckerJob implements IJob {\n   async onTick() {\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure favicon\nDESCRIPTION: This TypeScript code configures the favicon for the application by reading the favicon file and assigning it to the `siteFile` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  siteFile: {\n    '/favicon.ico': readFileSync(join(__dirname, 'favicon.png')),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Midway.js development script\nDESCRIPTION: This snippet shows an example of a `dev` script in `package.json` that uses `mwtsc` for development. It sets the `NODE_ENV` to `local`, enables watch mode, and runs the `@midwayjs/mock/app` file after compilation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=local mwtsc --watch --run @midwayjs/mock/app\",\n    \"build\": \"cross-env rm -rf dist && tsc\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Context Using Generics with useContext in Koa and FaaS\nDESCRIPTION: These snippets demonstrate how to explicitly specify the type of the context returned by `useContext` using generics. This example illustrates the usage of `Context` from both `@midwayjs/koa` and `@midwayjs/faas`, enabling type-safe context access in different Midway frameworks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/builtin-hooks.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Koa\nimport { Context } from '@midwayjs/koa';\nconst ctx = useContext<Context>();\n\n// FaaS\nimport { Context } from '@midwayjs/faas';\nconst ctx = useContext<Context>();\n```\n\n----------------------------------------\n\nTITLE: Creating a UserService with @Provide decorator in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a service in MidwayJS using the @Provide decorator. The UserService class is decorated with @Provide, making it available for dependency injection. The getUser method simulates fetching user data based on an ID.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/user.ts\nimport { Provide } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n  async getUser(id: number) {\n    return {\n      id,\n      name: 'Harry',\n      age: 18,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin Dependency\nDESCRIPTION: This command installs the `@midwayjs/casbin` package as a dependency to your project. This package provides the necessary components for integrating Casbin into your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/casbin@3 --save\n```\n\n----------------------------------------\n\nTITLE: Defining IPipelineHandler Interface in TypeScript\nDESCRIPTION: This interface defines the methods for executing a pipeline in different modes, such as parallel, concat, series, concatSeries, and waterfall. Each method takes IPipelineOptions as input and returns a Promise of IPipelineResult.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IPipelineHandler {\n  /**\n   * Parallel execution, using Promise.all\n   * @param opts execution parameters\n   */\n  parallel<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * Execute in parallel, and the final result is an array.\n   * @param opts execution parameters\n   */\n  concat<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * serial execution, using foreach await\n   * @param opts execution parameters\n   */\n  series<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * serial execution, using foreach await, the final result is an array\n\t * @param opts execution parameters\n   */\n  concatSeries<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * Serially executed, but the former execution result will be taken as an input parameter and passed into the next execution. The valve result of the last execution will be returned\n   * @param opts execution parameters\n   */\n  waterfall<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing BullMQ Context\nDESCRIPTION: This TypeScript code demonstrates how to access the BullMQ context within a processor. The context provides information about the current job, including the job ID and the job object itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Processor, IProcessor, Context } from '@midwayjs/bullmq';\n\n@Processor('test')\nexport class TestProcessor implements IProcessor {\n  @Inject()\n  ctx: Context;\n\n  async execute(data: any) {\n    // ctx.jobId => 当前任务ID\n    // ctx.job => 当前任务对象\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Middleware and Error Filter for Bull App\nDESCRIPTION: This TypeScript snippet shows how to configure middleware and error filters for the Bull application. This allows you to add custom logic to handle requests and errors within the Bull processing context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  imports: [\n    // ...\n    bull\n  ]\n})\nexport class MainConfiguration {\n\n  @App('bull')\n  bullApp: bull.Application;\n\n  //...\n\n  async onReady() {\n    this.bullApp.useMiddleare( /*中间件*/);\n    this.bullApp.useFilter( /*过滤器*/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Mocks by Group in MidwayJS\nDESCRIPTION: This code snippet shows how to use `restoreMocks` to clear mocks associated with a specific group. This allows for more granular control over mock cleanup.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { restoreMocks } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  restoreMocks('group1');\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Router Collector and Exporting Router Table in MidwayJS\nDESCRIPTION: This commit adds a router collector and exports the router table in the MidwayJS framework. The router collector automatically discovers and registers routes defined in the application. Exporting the router table allows for easy inspection and documentation of the API endpoints, facilitating development and maintenance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n3641ac9c78ed9888525ce0c87415b961d4602fa8\n```\n\n----------------------------------------\n\nTITLE: Checking Package Version using npm ls - JavaScript\nDESCRIPTION: This command allows you to check the specific version of a Midway package installed in your project. Replace `@midwayjs/core` with the name of the package you want to inspect. This is useful for verifying that the installed version matches your expectations and is compatible with other packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/how_to_update_midway.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm ls @midwayjs/core\n```\n\n----------------------------------------\n\nTITLE: Testing Socket App with Client\nDESCRIPTION: This code snippet shows how to test a MidwayJS Socket.IO application using a mock client. It creates a server and client, sends an event, and asserts the received data.  The server returns the sum of the received data points from the client, along with a hardcoded name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/socketio';\nimport { createSocketIOClient } from '@midwayjs/mock';\nimport { once } from 'events';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create socket app', async () => {\n    // 创建一个服务\n    const app = await createApp<Framework>(process.cwd(), { port: 3000 });\n\n    // 创建一个对应的客户端\n    const client = await createSocketIOClient({\n      port: 3000,\n    });\n\n    // 拿到结果返回\n    const data = await new Promise((resolve) => {\n      client.on('myEventResult', resolve);\n      // 发送事件\n      client.send('myEvent', 1, 2, 3);\n    });\n\n    // 判断结果\n    expect(data).toEqual({\n      name: 'harry',\n      result: 6,\n    });\n\n    // 关闭客户端\n    await client.close();\n    // 关闭服务端\n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC Component as Main Framework - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to enable the `@midwayjs/grpc` component as the main framework within a Midway.js application. This allows gRPC services to be the primary entry point for the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as grpc from '@midwayjs/grpc';\n\n@Configuration({\n  imports: [grpc],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Docker-Compose YAML Configuration\nDESCRIPTION: This docker-compose.yml file defines two services: 'web' (the Midway.js application) and 'redis'. The 'web' service builds from the current directory and links to the 'redis' service. It exposes port 7001. Requires Docker Compose to be installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/deployment.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - '7001:7001'\n    links:\n      - redis\n  redis:\n    image: redis\n```\n\n----------------------------------------\n\nTITLE: Simulating Local Authentication Request with cURL\nDESCRIPTION: Use cURL to simulate a POST request to the `/passport/local` endpoint with JSON data containing username and password. This tests the implemented local authentication flow.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST http://localhost:7001/passport/local -d '{\"username\": \"demo\", \"password\": \"1234\"}' -H \"Content-Type: application/json\"\n\n结果 {\"username\": \"demo\", \"password\": \"1234\"}\n```\n\n----------------------------------------\n\nTITLE: Checking Compatibility using yarn\nDESCRIPTION: These commands check the compatibility of installed dependencies within a Midway project using yarn.  First, it adds `midway-version` as a project dependency using `yarn add`.  Then, it executes the tool using `yarn midway-version`. The tool analyzes the `node_modules` directory to verify compatibility between installed versions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/version_check.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add midway-version@latest\n$ yarn midway-version\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Issues with Interceptors\nDESCRIPTION: This example illustrates how to handle asynchronous methods when using interceptors. It emphasizes that if the intercepted method is asynchronous, the interceptor lifecycle methods should also be asynchronous. The first code snippet defines an async controller method and async before interceptor method. The second one defines a synchronous controller method and synchronous before interceptor method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() { // here is asynchronous, then the following before is asynchronous\n\n  }\n}\n\n// src/aspect/report.ts\n@Aspect(HomeController, 'home')\nexport class ReportInfo implements IMethodAspect {\n  async before(point: JoinPoint) {\n\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  Home () { // here is synchronized, then the following before is also synchronized\n\n  }\n}\n\n// src/aspect/report.ts\n@Aspect(HomeController, 'home')\nexport class ReportInfo implements IMethodAspect {\n  before(point: JoinPoint) {\n\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: ConcatSeries Pipeline Execution Example\nDESCRIPTION: Demonstrates the usage of the concatSeries method of the Pipeline handler. It executes valves in series and returns result as an array, similar to concat.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline(['videoFeeds', 'accountMap', 'crowFeeds'])\n  stages: IPipelineHandler;\n\n  async runConcatSeries(): Promise<any> {\n    // 这里串行执行 videoFeeds、accountMap、crowFeeds\n    return this.stages.concatSeries<any>({\n      args: { aa: 123 },\n    });\n\n    // 这里返回的 result 是一个数组，同 concat 返回对象拼装\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ISimulation Interface (TypeScript)\nDESCRIPTION: This code defines the `ISimulation` interface, which provides various lifecycle methods for mock classes. These methods allow for setting up and tearing down mock data at different points in the application lifecycle.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ISimulation {\n  /**\n   * 最开始的模拟时机，在生命周期 onConfigLoad 之后执行\n   */\n  setup?(): Promise<void>;\n  /**\n   * 在生命周期关闭时执行，一般用于数据清理\n   */\n  tearDown?(): Promise<void>;\n  /**\n   * 在每种框架初始化时执行，会传递当前框架的 app\n   */\n  appSetup?(app: IMidwayApplication): Promise<void>;\n  /**\n   * 在每种框架的请求开始时执行，会传递当前框架的 app 和 ctx\n   */\n  contextSetup?(ctx: IMidwayContext, app: IMidwayApplication): Promise<void>;\n  /**\n   * 每种框架的请求结束时执行，在错误处理之后\n   */\n  contextTearDown?(ctx: IMidwayContext, app: IMidwayApplication): Promise<void>;\n  /**\n   * 每种框架的停止时执行\n   */\n  appTearDown?(app: IMidwayApplication): Promise<void>;\n  /**\n   * 模拟的执行条件，一般是特定环境，或者特定框架下\n   */\n  enableCondition(): boolean | Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Task Component in MidwayJS\nDESCRIPTION: This commit introduces a new task component to MidwayJS. This component likely facilitates the creation and management of background tasks within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-nunjucks/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Diff\nCODE:\n```\n- add midway task component ([#995](https://github.com/midwayjs/midway/issues/995)) ([befb81d](https://github.com/midwayjs/midway/commit/befb81dee90f01a20bba2c1835e8685cf85a76e7))\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with Setup File\nDESCRIPTION: This snippet configures Jest to use a setup file (`jest.setup.js`) that runs before each test suite.  It adds the `setupFilesAfterEnv` option to the base Jest configuration, pointing to the setup file. This is useful for setting up test environments or mocking dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures'],\n  coveragePathIgnorePatterns: ['<rootDir>/test/'],\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\t// 预先读取 jest.setup.js\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring the default view engine (TypeScript)\nDESCRIPTION: This code configures the default view engine to Nunjucks in the `config.default.ts` file. This tells MidwayJS to use Nunjucks for rendering templates.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  // ...\n  view: {\n    defaultViewEngine: 'nunjucks',\n  },\n} as MidwayConfig;\n\n```\n\n----------------------------------------\n\nTITLE: Defining API Gateway Handler with Midway.js\nDESCRIPTION: This code snippet defines an API Gateway handler using Midway.js decorators. It utilizes `@ServerlessTrigger` to bind a function to a specific path (`/api_gateway_aliyun`) and method ('post'). It expects a `name` parameter in the request body and returns a greeting message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_apigw.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.API_GATEWAY, {\n    path: '/api_gateway_aliyun',\n    method: 'post',\n  })\n  async handleAPIGatewayEvent(@Body() name) {\n    return `hello ${name}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Session Property Names in @midwayjs/web\nDESCRIPTION: This code illustrates incorrect and correct ways to set session properties in Midway.js. It highlights that property names starting with '_' or named 'isNew' should be avoided, as they may cause issues with session handling. Dependencies: @midwayjs/web.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ 错误的用法\nctx.session._visited = 1; //    --> 该字段会在下一次请求时丢失\nctx.session.isNew = 'HeHe'; //    --> 为内部关键字, 不应该去更改\n\n// ✔️ 正确的用法\nctx.session.visited = 1; //   -->  此处没有问题\n```\n\n----------------------------------------\n\nTITLE: Sequelize Dependencies in package.json - JSON\nDESCRIPTION: This JSON snippet shows the required dependencies for Sequelize integration in a MidwayJS project.  It includes @midwayjs/sequelize, sequelize, and sequelize-typescript.  Ensure the versions are compatible with your project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/sequelize\": \"^3.0.0\",\n    \"sequelize\": \"^6.21.3 \",\n    \"sequelize-typescript\": \"^ 2.1.0\"\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure UploadMiddleware Globally - Faas\nDESCRIPTION: Configures the UploadMiddleware globally for a Faas application. This middleware will be applied to all incoming requests, handling multipart/form-data parsing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\nimport { Application } from '@midwayjs/faas';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App('faas')\n  app: Application;\n  \n  async onReady() {\n    this.app.useMiddleware(busboy.UploadMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: This code snippet shows the directory structure of a MidwayJS application, including the controller, interface, and service directories.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   ├── controller\n│   │   └── user.ts\n│   ├── interface.ts\n│   └── service\n│       └── user.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Add proxyTimeout for httpProxy in MidwayJS\nDESCRIPTION: This commit introduces the proxyTimeout feature for the httpProxy component in MidwayJS.  proxyTimeout allows configuring a timeout period for proxy requests, preventing indefinite waits and improving resilience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/http-proxy/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nadd proxyTimeout for httpProxy ([#2308](https://github.com/midwayjs/midway/issues/2308)) ([fb14118](https://github.com/midwayjs/midway/commit/fb141183223098534a075ab20bd3e2c366e40d4a))\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Client Namespace Configuration\nDESCRIPTION: This JavaScript snippet sets the namespace for a Socket.IO client connection. It specifies the endpoint URL to connect to the desired namespace on the server. The `socket.io-client` package is required.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// client\nconst io = require('socket.io-client');\nio('*****:3000/test', {}); // 这里是客户端的 namespace\n```\n\n----------------------------------------\n\nTITLE: COS Event Structure Example in JSON\nDESCRIPTION: This JSON snippet shows the structure of a COS event that is passed to the serverless function. It contains information about the object that triggered the event, the bucket it resides in, and details about the event itself, such as the event name, time, and source.  This data is accessible within the function handler via the `SCF.COSEvent` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_cos.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Records\": [\n    {\n      \"cos\": {\n        \"cosSchemaVersion\": \"1.0\",\n        \"cosObject\": {\n          \"url\": \"http://testpic-1253970026.cos.ap-chengdu.myqcloud.com/testfile\",\n          \"meta\": {\n            \"x-cos-request-id\": \"NWMxOWY4MGFfMjViMjU4NjRfMTUyMV8yNzhhZjM=\",\n            \"Content-Type\": \"\"\n          },\n          \"vid\": \"\",\n          \"key\": \"\",\n          \"size\": 1029\n        },\n        \"cosBucket\": {\n          \"region\": \"cd\",\n          \"name\": \"testpic\",\n          \"appid\": \"1253970026\"\n        },\n        \"cosNotificationId\": \"unkown\"\n      },\n      \"event\": {\n        \"eventName\": \"cos:ObjectCreated:*\",\n        \"eventVersion\": \"1.0\",\n        \"eventTime\": 1545205770,\n        \"eventSource\": \"qcs::cos\",\n        \"requestParameters\": {\n          \"requestSourceIP\": \"192.168.15.101\",\n          \"requestHeaders\": {\n            \"Authorization\": \"****************\"\n          }\n        },\n        \"eventQueue\": \"qcs:0:lambda:cd:appid/1253970026:default.printevent.$LATEST\",\n        \"reservedInfo\": \"\",\n        \"reqid\": 179398952\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Script in package.json (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the test script in the `package.json` file to use `midway-bin` for running tests.  The `--ts` flag ensures that TypeScript files are properly handled. This configuration is necessary to execute tests using the `npm test` command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"midway-bin test --ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Messages to all clients except the sender\nDESCRIPTION: This code sends a message to all connected clients, excluding the sender.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.broadcast.emit('broadcast', 'hello friends!');\n```\n\n----------------------------------------\n\nTITLE: Configure Logger: Disable Console Transport\nDESCRIPTION: This code snippet shows how to disable the Console transport for a specific logger client in the MidwayJS configuration. This prevents logs from being outputted to the console, directing them elsewhere (e.g., a file).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      abcLogger: {\n        enableConsole: false\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Inject Origin Consul Object (TypeScript)\nDESCRIPTION: Demonstrates how to inject the origin Consul object. This allows direct access to the Consul API for advanced operations. The Consul object provides access to the full range of Consul features.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/usage.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Consul from 'consul';\n\n// 使用 consul 官方包装的 API 接口\n@Inject('consul:consul')\nconsul: Consul.Consul;\n```\n\n----------------------------------------\n\nTITLE: Executing Midway in Development Mode with Debugging (v2)\nDESCRIPTION: This command executes the MidwayJS application in development mode with debugging enabled (Midway v2). It sets the NODE_DEBUG environment variable to include 'midway*' and enables TypeScript compilation using the `--ts` flag. NODE_ENV is set to 'local'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/midway_slow_problem.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// midway v2\ncross-env NODE_DEBUG=midway* NODE_ENV=local midway-bin dev --ts\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Component in MidwayJS\nDESCRIPTION: This snippet demonstrates how to import and configure the bullmq component in a MidwayJS application's configuration file. It imports the necessary module and adds it to the imports array within the Configuration decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as bullmq from '@midwayjs/bullmq';\n\n@Configuration({\n  imports: [\n    // ...\n    bullmq\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing nvs on Linux/macOS\nDESCRIPTION: This snippet installs Node Version Switcher (nvs) on Linux or macOS. It clones the nvs repository into the user's home directory, sets the NVS_HOME environment variable, and installs nvs using the provided shell script.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_install_nodejs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export NVS_HOME=\"$HOME/.nvs\"\n$ git clone https://github.com/jasongin/nvs --depth=1 \"$NVS_HOME\"\n$ . \"$NVS_HOME/nvs.sh\" install\n```\n\n----------------------------------------\n\nTITLE: Manual Call with Complex Type Validation Error Handling\nDESCRIPTION: This snippet demonstrates how to handle validation errors when using the manual call method with `fetcher` and a complex type defined by Zod. It sends a POST request to `/project` with an invalid `name` (number instead of string) and logs the parsed error message and status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfetcher\n  .post('/project', {\n    args: [\n      {\n        name: 1,\n        description: 'test project',\n        owner: 'test',\n        members: ['test'],\n      },\n    ],\n  })\n  .catch((error) => {\n    console.log(\n      JSON.parse(error.data.message)\n    );\n    console.log(error.status); // 422\n  });\n```\n\n----------------------------------------\n\nTITLE: HTML Form Upload Example\nDESCRIPTION: This HTML snippet provides an example of a basic HTML form configured for file uploads. It uses the `enctype=\"multipart/form-data\"` attribute to properly encode the form data for file uploads.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/api/upload\" method=\"post\" enctype=\"multipart/form-data\">\n  Name: <input type=\"text\" name=\"name\" /><br />\n  File: <input type=\"file\" name=\"testFile\" /><br />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using app.setAttr() and app.getAttr() for temporary data storage\nDESCRIPTION: These code blocks demonstrate how to use `setAttr()` and `getAttr()` to store and retrieve temporary, application-scoped data. This is useful for sharing data across different parts of the application without relying on global variables or complex dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.setAttr('abc', {\n  a: 1,\n  b: 2,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = this.app.getAttr('abc');\nconsole.log(value);\n// { a: 1, b: 2 }\n```\n\n----------------------------------------\n\nTITLE: Define Custom Logger Transport\nDESCRIPTION: This code defines a custom logger transport by extending the `EmptyTransport` class. The `log` method is overridden to write log messages with level 'error' or 'warn' to a specific file. It also demonstrates how to add this custom transport to the logger instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmptyTransport } from '@midwayjs/logger';\n\nclass CustomTransport extends EmptyTransport {\n  log(info, callback) {\n    const levelLowerCase = info.level;\n    if (levelLowerCase === 'error' || levelLowerCase === 'warn') {\n      writeFileSync(join(logsDir, 'test.log'), info.message);\n    }\n    callback();\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst customTransport = new CustomTransport({\n  level: 'warn',\n});\n\nlogger.add(customTransport);\n```\n\n----------------------------------------\n\nTITLE: Mocking Object Property in MidwayJS with @midwayjs/mock\nDESCRIPTION: This snippet shows how to use `mockProperty` to mock a property of a plain JavaScript object. It sets the `name` property of the object `a` to 'hello' for testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  const a = {};\n  mockProperty(a, 'name', 'hello');\n\n  // a['name'] => 'hello'\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Passport Dependency Configuration - JSON\nDESCRIPTION: This snippet shows the required dependencies for passport in package.json file\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/passport\": \"^3.0.0\",\n    // Local policy\n    \"passport-local\": \"^1.0.0\"\n    // Jwt strategy\n    \"passport-jwt\": \"4.0.0\",\n    // Github policy\n    \"passport-github\": \"1.1.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // Local policy\n    \"@types/passport-local\": \"^1.0.34 \",\n    // Jwt strategy\n    \"@types/passport-jwt\": \"^3.0.6 \",\n    // Github policy\n    \"@types/passport-github\": \"^1.1.7 \",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPS Configuration for Express\nDESCRIPTION: This code snippet demonstrates how to configure HTTPS for the Express module by specifying the key and certificate files. It requires the 'fs' and 'path' modules to read the certificate files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/express.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  express: {\n    key: join(__dirname, '../ssl/ssl.key')\n    cert: join(__dirname, '../ssl/ssl.pem')\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Egg.js HTTP Port - TypeScript\nDESCRIPTION: This snippet demonstrates how to modify the default HTTP port of an Egg.js service within a MidwayJS application.  The default port, usually 7001, is configured in `src/config/config.default.ts`. This configuration is overridden in the unit test environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  egg: {\n    port: 6001\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.unittest\nexport default {\n  // ...\n  egg: {\n    port: null\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Security Module\nDESCRIPTION: This code snippet demonstrates how to import and integrate the Security module into a Midway.js application's configuration. It adds the Security module to the imports array, making its functionalities available within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/security/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Security from '@midwayjs/security';\n@Configuration({\n  imports: [\n    // ...other components\n    Security\n  ],\n})\nexport class AutoConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Frontend Call to Backend API Endpoint (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to call a backend API endpoint in a full-stack application using TypeScript. It imports the `getArticles` function and calls it with the `page` and `limit` parameters. The expected output is an object containing the `page` and `limit` values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport getArticles from './api';\nconst response = await getArticles({\n  query: { page: '0', limit: '10' },\n});\nconsole.log(response); // { page: '0', limit: '10' }\n```\n\n----------------------------------------\n\nTITLE: Middleware for Logging in @midwayjs/rpc - TypeScript\nDESCRIPTION: This snippet shows how to implement middleware for logging requests and responses in @midwayjs/rpc. The middleware logs the request URL before the request is made and the response data after the request is completed. It imports `setupHttpClient` and the `Middleware` type from `@midwayjs/rpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/client.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupHttpClient } from '@midwayjs/rpc';\nimport type { Middleware } from '@midwayjs/rpc';\n\nconst logger: Middleware = async (\n  ctx,\n  next\n) => {\n  console.log(`<-- ${ctx.req.url}`);\n  await next();\n  console.log(\n    `--> ${ctx.req.url} ${ctx.res}`\n  );\n};\n\nsetupHttpClient({\n  middleware: [logger],\n});\n```\n\n----------------------------------------\n\nTITLE: Modify default port in configuration\nDESCRIPTION: This TypeScript code demonstrates how to modify the default port for the EggJS HTTP service by changing the `egg.port` configuration property in `config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  egg: {\n    port: 6001,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting EggJS Application Instance\nDESCRIPTION: This code snippet demonstrates how to inject the EggJS Application instance into a controller using the `@App` decorator. It allows access to EggJS-specific application methods, such as `curl`, within the controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/req_res_app.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Application } from 'egg';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @App()\n  app: Application;\n\n  @Get('/')\n  async home() {\n    const data = await this.app.curl('/api/data.json');\n    return {\n      data,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Consul Component\nDESCRIPTION: This TypeScript snippet demonstrates how to enable the Consul component within a Midwayjs application using the @Configuration decorator. It imports the consul module and includes it in the imports array, along with specifying a configuration file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as consul from '@midwayjs/consul'\n\n@Configuration({\n  imports: [\n    // ..\n    consul\n  ],\n  importConfigs: [join(__dirname, 'config')]\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Disable CSRF Protection - TypeScript\nDESCRIPTION: This snippet shows how to disable Cross-Site Request Forgery (CSRF) protection in an Egg.js application within a MidwayJS project.  Disabling CSRF is generally not recommended for production environments unless proper alternative safeguards are in place. Disabling it in development environments makes testing easier.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport const security = {\n  csrf: false\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Leoric Data Source in Midway Config\nDESCRIPTION: This code snippet configures the Leoric data source within the `src/config/config.default.ts` file. It defines the database dialect (sqlite), database path, synchronization settings, and model paths. The `dataSource` object specifies the connection details for the database, including the dialect, database file path, and automatic model synchronization. It also defines the paths where the Leoric models are located.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/leoric/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default () => {\n  return {\n    leoric: {\n      dataSource: {\n        default: {\n          dialect: 'sqlite',\n          database: path.join(__dirname, '../../', 'database.sqlite'),\n          sync: true,\n          models: [\n            '**/models/*{.ts,.js}'\n          ]\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Koa Framework (TypeScript)\nDESCRIPTION: This code snippet shows how to extend the `@midwayjs/koa` framework to add a default bodyParser middleware. It inherits from the existing `Framework` class, overrides the `applicationInitialize` method, and adds the `koa-bodyparser` middleware to the `app` instance. This allows for customizing the framework's behavior without modifying the core library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_development.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Framework } from '@midwayjs/koa';\nimport * as bodyParser from 'koa-bodyparser';\n\nexport class CustomKoaFramework extends Framework {\n  async applicationInitialize(options) {\n    // 执行父类的 app 初始化\n    await super.applicationInitialize(options);\n\n    // this.app 初始化完之后就有值了，可以直接去 use 中间件了\n    this.app.use(bodyParser(this.getConfiguration('bodyParser')));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Messages to room clients except the sender\nDESCRIPTION: This code snippet demonstrates how to emit an event to all clients in the 'game' room, excluding the sender.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.to('game').emit('nice game', \"let's play a game\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Parameter for I18n Resolution - Typescript\nDESCRIPTION: This code demonstrates how to customize the query parameter used to specify the language in the request URL.  By default, the i18n module looks for the `locale` parameter. This snippet changes the parameter to `abc`.  This modification affects how the application extracts the language preference from the URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    resolver: {\n      queryField: 'abc'\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MQTT Subscriber Configuration\nDESCRIPTION: This TypeScript code shows how to configure MQTT subscribers using the `sub` field in the application's configuration file (`src/config/config.default`).  Each subscriber is defined with a name (e.g., `sub1`, `sub2`) and associated configuration options. These options define connection parameters and topic subscriptions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\n\nexport default {\n  mqtt: {\n    sub: {\n      sub1: {\n        // ...\n      },\n      sub2: {\n        // ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logger Output Methods - Typescript\nDESCRIPTION: This snippet demonstrates the basic output methods available on the logger object: `debug()`, `info()`, `warn()`, and `error()`.  These methods are used to log messages at different severity levels.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlogger.debug('debug info');\nlogger.info('startup takes% d ms', Date.now() - start);\nlogger.warn('warning!');\nlogger.error(new Error('my error'));\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope\nDESCRIPTION: This commit addresses an issue where the singleton invoke request scope was not valid within the MidwayJS framework. The fix ensures that singleton instances invoked within a request scope function as expected.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Configuring High-Density Deployment (C++)\nDESCRIPTION: This snippet showcases how to configure high-density deployment by merging multiple routes into one function using the `aggregation` configuration in the `f.yml` file.  The `functionsPattern` is used to select functions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\naggregation:\n  main:\n    functionsPattern:\n      -'*'\n```\n\n----------------------------------------\n\nTITLE: Feature: Support Multi Root in MidwayJS\nDESCRIPTION: This commit introduces support for multiple root directories in MidwayJS. This allows the application to load modules and resources from various directories, providing greater flexibility and organization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/validate/CHANGELOG.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nsupport multi root ([#1584](https://github.com/midwayjs/midway/issues/1584)) ([b23dda2](https://github.com/midwayjs/midway/commit/b23dda258563fba143f23c8779680df3ab8ec3d5))\n```\n\n----------------------------------------\n\nTITLE: Declaring Consul Dependencies in package.json\nDESCRIPTION: This JSON snippet declares the necessary dependencies for Consul integration in a Midwayjs project's package.json file.  It specifies the @midwayjs/consul package as a dependency and @types/consul as a development dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/consul\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    \"@types/consul\": \"^0.40.0 \",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Backend API with Validation in Midway Hooks\nDESCRIPTION: This code shows an example of defining a backend API with parameter validation using `@midwayjs/hooks` and `zod`. The `Api`, `Post`, and `Validate` decorators are used to define the endpoint, HTTP method, and validation schema, respectively. The endpoint expects a string `name` and a number `age`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/intro.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post,\n  Validate,\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\n\nexport default Api(\n  Post('/hello'),\n  Validate(z.string(), z.number()),\n  async (name: string, age: number) => {\n    return `Hello ${name}, you are ${age} years old.`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Database Drivers\nDESCRIPTION: Installs various database drivers based on the database being used (MySQL, PostgreSQL, SQLite, MSSQL, SQL.js, Oracle, MongoDB). The choice depends on the target database system.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# for MySQL or MariaDB，也可以使用 mysql2 替代\nnpm install mysql --save\nnpm install mysql2 --save\n\n# for PostgreSQL or CockroachDB\nnpm install pg --save\n\n# for SQLite\nnpm install sqlite3 --save\n\n# for Microsoft SQL Server\nnpm install mssql --save\n\n# for sql.js\nnpm install sql.js --save\n\n# for Oracle\nnpm install oracledb --save\n\n# for MongoDB(experimental)\nnpm install mongodb --save\n```\n\n----------------------------------------\n\nTITLE: Customizing SSE Response Template (TypeScript)\nDESCRIPTION: This code shows how to customize the template used for SSE responses with `HttpServerResponse`.  The `SSE_TPL` is used to modify the structure of the SSE data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerSendEventMessage } from '@midwayjs/core';\n\nHttpServerResponse.FILE_TPL = (data: ServerSendEventMessage) => { /*...*/};\n```\n\n----------------------------------------\n\nTITLE: Data Transfer Object (DTO) Definitions\nDESCRIPTION: Defines the data transfer objects (DTOs) for video, account, and tab information, as well as the composite HomepageDto that aggregates these individual DTOs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoDto {\n  videoId: string;\n  videoUrl: string;\n  videoTitle: string;\n}\nclass AccountDto {\n  id: string;\n  nick: string;\n  isFollow: boolean;\n}\nclass TabDto {\n  tabId: string;\n  title: string;\n  index: number;\n}\ninterface HomepageDto {\n  videos: VideoDto[];\n  account: AccountDto;\n  tab: TabDto;\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Header in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to mock a request header using the `mockHeader` method. It sets the `x-abc` header to `bbb`. The `createApp` and `createHttpRequest` functions are expected to be available.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockHeader } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  mockHeader(app, 'x-abc', 'bbb');\n\n  const result1 = await createHttpRequest(app).get('/');\n  // ctx.headers['x-abc'] => bbb\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Permissions using UsePermissions Decorator\nDESCRIPTION: This code shows how to define multiple permissions required for a route using the `UsePermissions` decorator. The route can only be accessed if the user has all the required permissions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@UsePermissions({\n  action: AuthActionVerb.READ,\n  resource: 'USER_ADDRESS',\n  possession: AuthPossession.ANY\n}, {\n  action: AuthActionVerb.READ,\n  resource: 'USER_ROLES',\n  possession: AuthPossession.ANY\n})\n```\n\n----------------------------------------\n\nTITLE: Test Controller using SuperTest (TypeScript)\nDESCRIPTION: This snippet demonstrates how to test a controller using `app.httpRequest()` from `midway-mock`, which is a SuperTest instance. It makes a GET request to `/` and asserts the response body and status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app, assert } from 'midway-mock/bootstrap';\n\ndescribe('test/controller/home.test.ts', () => {\n  it('should GET /', () => {\n    // 对 app 发起 `GET /` 请求\n    return app\n      .httpRequest()\n      .get('/')\n      .expect('Welcome to midwayjs!') // 期望 body 是 hello world\n      .expect(200); // 期望返回 status 200\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Prometheus\nDESCRIPTION: This YAML configuration defines a Docker Compose setup for running Prometheus. It configures volumes for data persistence and specifies the Prometheus configuration file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2.2'\nservices:\n  tapi:\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '50m'\n    image: prom/prometheus\n    restart: always\n    volumes:\n      - ./prometheus_data:/prometheus_data:rw\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - ./targets.json:/etc/prometheus/targets.json\n    command:\n      - '--storage.tsdb.path=/prometheus_data'\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.retention=10d'\n      - '--web.enable-lifecycle'\n    ports:\n      - '9090:9090'\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Project with midway-bin\nDESCRIPTION: Executes the `build` command of `midway-bin` to build a TypeScript project.  The `-c` flag cleans the `/dist` directory before the build process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmidway-bin build\n```\n\nLANGUAGE: bash\nCODE:\n```\nmidway-bin build -c\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope\nDESCRIPTION: This bug fix corrects an issue where singleton invoke request scope was not valid in Midway.js. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Disable Case Insensitivity in Git (Global Level)\nDESCRIPTION: This command configures Git to be case-sensitive globally for all projects. It prevents issues related to file capitalization differences across platforms, which is important when working in mixed-OS environments or deploying to case-sensitive systems.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/git_problem.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global --add core.ignorecase false ## takes effect globally\n```\n\n----------------------------------------\n\nTITLE: Specify template name\nDESCRIPTION: This command specifies the template to use by name, using the `--type` parameter.  The specified template (e.g., `koa-v3`) will be used to generate the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --type=koa-v3\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT\nDESCRIPTION: This sets up the JWT configuration in the config.ts file, defining the secret key and expiration time. Important: Don't store sensitive info in the payload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const jwt = {\n  secret: 'xxxxxxxxxxxxxx', // fs.readFileSync('xxxxx.key')\n  expiresIn: '2d', // https://github.com/vercel/ms\n};\n```\n\n----------------------------------------\n\nTITLE: Configuration with Object Mode\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure Midway.js to load configurations using the object mode. It imports default and local configurations and uses them within the `importConfigs` array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport { join } from 'path';\n\nimport * as DefaultConfig from './config/config.default';\nimport * as LocalConfig from './config/config.local';\n\n@Configuration({\n  importConfigs: [\n    {\n      default: DefaultConfig,\n      local: LocalConfig\n    }\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Command Line - Bash (cross-env)\nDESCRIPTION: These commands demonstrate how to set environment variables using `cross-env` for Windows compatibility when starting a Midway.js application with npm.  This ensures cross-platform environment variable setting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/environment.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncross-env MIDWAY_SERVER_ENV=prod npm start    // 第一优先级\ncross-env NODE_ENV=local npm start            // 第二优先级\n```\n\n----------------------------------------\n\nTITLE: Install @midwayjs/egg-ts-helper\nDESCRIPTION: This command installs the `@midwayjs/egg-ts-helper` package as a development dependency. This package helps generate TypeScript definitions for EggJS development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/egg-ts-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple HTTP Client Instances - TypeScript\nDESCRIPTION: This code snippet shows how to configure multiple HTTP client instances using the 'clients' property, where each key represents a unique client instance.  It also shows how to retrieve named instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service_factory.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  default: {\n    timeout: 3000,\n  },\n  clients: {\n    aaa: {\n      baseUrl: '',\n    },\n    bbb: {\n      baseUrl: '',\n    },\n  },\n};\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPClientServiceFactory } from './service/httpClientServiceFactory';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  serviceFactory: HTTPClientServiceFactory;\n\n  async invoke() {\n    const aaaInstance = this.serviceFactory.get('aaa');\n    // ...\n\n    const bbbInstance = this.serviceFactory.get('bbb');\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Security Configuration (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows the default configuration options for the Midway.js security component. It defines settings for CSRF protection, X-Frame-Options, CSP, HSTS, and XSS protection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/security.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n\n  // 默认配置\n  security: {\n    csrf: {\n      enable: true,\n      type: 'ctoken',\n      useSession: false,\n      cookieName: 'csrfToken',\n      sessionName: 'csrfToken',\n      headerName: 'x-csrf-token',\n      bodyName: '_csrf',\n      queryName: '_csrf',\n      refererWhiteList: [],\n    },\n    xframe: {\n      enable: true,\n      value: 'SAMEORIGIN',\n    },\n    csp: {\n      enable: false,\n    },\n    hsts: {\n      enable: false,\n      maxAge: 365 * 24 * 3600,\n      includeSubdomains: false,\n    },\n    noopen: {\n      enable: false,\n    },\n    nosniff: {\n      enable: false,\n    },\n    xssProtection: {\n      enable: true,\n      value: '1; mode=block',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using the `package` Command (Bash)\nDESCRIPTION: This snippet outlines the usage of the `midway-bin package` command for Serverless project construction, including available options such as `--npm`, `--sourceDir`, `--buildDir`, `--sharedTargetDir`, `--skipZip`, `--skipBuild`, `--tsConfig`, and `--function`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin package\n  -- npm npm client, the default is to automatically identify and add registry\n  -sourceDir the directory where the source code is located, which will be automatically analyzed by default.\n  -buildDir build result target directory\n  -- sharedTargetDir the target directory of shared files. The default is static. Refer to -- sharedDir parameters\n  -This directory will be copied to the $sharedTargetDir directory in the result directory when the sharedDir is built.\n  -skipZip skip zip packaging\n  -skipBuild skip ts code construction\n  -tsConfig tsConfig json string or file location\n  -function specify which functions to package, multiple in English, separated\n```\n\n----------------------------------------\n\nTITLE: BullMQ Configuration with Redis Username and Password\nDESCRIPTION: This snippet shows how to configure BullMQ to connect to a Redis server that requires a username and password. It sets the port, host, and password for the default connection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  bullmq: {\n    defaultConnection: {\n      port: 6379,\n      host: '127.0.0.1',\n      password: 'foobared',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for a provider configuration in a serverless application. It includes properties for cloud platform, runtime, region, timeout, memory size, environment variables, and VPC configuration. The provider defines where and how your serverless application runs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ProviderStructure {\n  name: string;\n  runtime: string;\n  stage?: string;\n  region?: string;\n  timeout?: number;\n  memorySize?: number;\n  description?: string;\n  role?: string;\n  environment?: {\n    [key: string]: string;\n  };\n  serviceId?: string;\n  vpcConfig?: {\n    vpcId: string;\n    vSwitchIds: string[];\n    securityGroupId: string;\n  };\n  internetAccess?: boolean;\n  policies?: string | string[];\n  logConfig?: {\n    project: string;\n    logstore: string;\n  };\n  nasConfig?:\n    | 'auto'\n    | {\n        userId: number;\n        groupId: number;\n        mountPoints: Array<{\n          serverAddr: string;\n          mountDir: string;\n        }>;\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Configure HTTPS with SSL Certificates - TypeScript\nDESCRIPTION: This snippet shows how to enable HTTPS by configuring SSL (TLS) certificates within a MidwayJS application using Egg.js. It requires `ssl.key` (private key) and `ssl.pem` (certificate) files.  These files are read and their paths are set in the `egg` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  egg: {\n    key: join(__dirname, '../ssl/ssl.key')\n    cert: join(__dirname, '../ssl/ssl.pem')\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Photo with Metadata using find options\nDESCRIPTION: This code demonstrates how to load a Photo entity along with its associated metadata using the `find` method in TypeORM. The `relations` option specifies the related entities to be loaded in the same query.  The result is an array of Photo entities, each with a metadata property populated with its related PhotoMetadata object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Func } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from './entity/photo';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhoto() {\n    /*...*/\n    let photos = await this.photoModel.find({ relations: ['metadata'] });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add guard feature in MidwayJS\nDESCRIPTION: This commit adds a guard feature to MidwayJS. A guard is a way to protect routes or methods from unauthorized access. It allows implementing custom authentication or authorization logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Obtaining Tenant Information in Singleton Service\nDESCRIPTION: Retrieves the tenant information in a singleton service using `TenantManager`. The `getCurrentTenant` method is used to retrieve the tenant data, which is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tenant.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TenantManager } from '@midwayjs/tenant';\nimport { Inject, Singleton } from '@midwayjs/core';\nimport { TenantInfo } from '../interface';\n\n@Singleton()\nclass TenantService {\n   @Inject()\n   tenantManager: TenantManager;\n\n   async getTenantInfo() {\n     const tenantInfo = await this.tenantManager.getCurrentTenant<TenantInfo>();\n     if (tenantInfo) {\n       console.log(tenantInfo.name);\n       // output => my tenant\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Middleware Definition - TypeScript\nDESCRIPTION: Defines a Socket.IO middleware in MidwayJS.  This middleware structure mirrors the Web middleware. The `resolve` method returns an asynchronous function that will be executed for each connection or message, depending on the middleware's scope. Note that the middleware must return the result via `return await next()`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/socket.middleware.ts\nimport { Middleware } from '@midwayjs/core';\nimport { Context, NextFunction } from '@midwayjs/socketio';\n\n@Middleware()\nexport class SocketMiddleware {\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      // ...\n      return await next();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Redis Instrumentation (TypeScript)\nDESCRIPTION: Demonstrates how to add a third-party instrumentation (Redis) to the OpenTelemetry SDK.  This involves requiring the `RedisInstrumentation` and adding it to the `instrumentations` array during SDK initialization.  This example shows a basic example; ensure the redis client is properly configured for tracing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { RedisInstrumentation } = require('@opentelemetry/instrumentation-redis');\n// ...\n\n// Initialize an open-telemetry SDK\nconst sdk = new NodeSDK({\n  // ...\n\n  // This is only an added example. If auto-instrumentations-node is used, the following instrumentation are already included\n  instrumentations: [\n    new RedisInstrumentation()\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Error Code Enum\nDESCRIPTION: This demonstrates the definition of an error code enum for systematic error management.  It uses const keyword and numeric values for different error types.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_error.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst CustomErrorEnum = {\n  UNKNOWN: 10000,\n  COMMON: 10001,\n  PARAM_TYPE: 10002,\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Configuration with Lifecycles\nDESCRIPTION: This code snippet shows how to export configuration using lifecycles within a MidwayJS component. It demonstrates the use of the `@Configuration` decorator to define a configuration class and the `@Inject` decorator to inject the framework instance. The `onReady` and `onServerReady` lifecycle methods are used for asynchronous initialization tasks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration,Inject } from '@midwayjs/core';\nimport { MidwayKoaFramework } from './framework';\n\n@Configuration({\n  namespace: 'koa',\n})\nexport class KoaConfiguration {\n  @Inject()\n  framework: MidwayKoaFramework;\n\n  async onReady() {}\n\n  async onServerReady() {\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Component Namespace Configuration\nDESCRIPTION: Configures a namespace for a component using the `@Configuration` decorator.  This is used to avoid conflicts with other components or application code by providing a unique identifier for the component's services and objects. Components export a scope that can be used to inject the component in an isolated way.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/bookConfiguration.ts\nimport { Configuration } from '@midwayjs/decorator';\n\n@Configuration({\n  namespace: 'book',\n})\nexport class BookConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Configuration File Directory Structure - tree command\nDESCRIPTION: Shows the directory structure of a MidwayJS application with configuration files for different environments (default, production, unit test, and local).  This directory structure illustrates the recommended organization for environment-specific configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   ├── config\n│   │   ├── config.default.ts\n│   │   ├── config.prod.ts\n│   │   ├── config.unittest.ts\n│   │   └── config.local.ts\n│   ├── interface.ts\n│   └── service\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Mocha (Bash)\nDESCRIPTION: This bash command executes the test suite using `midway-bin test` with TypeScript support enabled (`--ts`) and uses Mocha as the testing framework (`--mocha`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin test --ts --mocha\n```\n\n----------------------------------------\n\nTITLE: Directory structure\nDESCRIPTION: Shows a typical directory structure of a MidwayJS application with controller, interface, and service files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   ├── controller\n│   │   └── user.ts\n│   ├── interface.ts\n│   └── service\n│       └── user.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Adding ets to development script in package.json\nDESCRIPTION: This snippet demonstrates how to integrate the `ets` command into the development script within the `package.json` file. This ensures that typings are generated before starting the development server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/egg-ts-helper.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"dev\": \"cross-env ets && cross-env NODE_ENV=local midway-bin dev --ts\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Accessing Koa Context with useContext in Midway Hooks\nDESCRIPTION: This code snippet demonstrates how to use the `useContext` hook from `@midwayjs/hooks` to access the Koa `Context` object within a Midway Hooks API handler. It retrieves the request method from the context and returns it in the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/builtin-hooks.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api\n  Get\n  useContext\n} from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/koa';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  console.log(ctx.method);\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Objects with onObjectCreated in TypeScript\nDESCRIPTION: Demonstrates how to dynamically add properties to created objects using the `onObjectCreated` lifecycle hook. In this example, a `_name` property is added to every created object. Dependencies: @midwayjs/core.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer, ObjectInitOptions } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  async onObjectCreated(ins: any, options: ObjectInitOptions): Promise<void> {\n    // 每个创建的对象都会添加一个 _name 的属性\n    ins._name = 'xxxx';\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Socket.IO Message Handling with Client (TypeScript)\nDESCRIPTION: Tests Socket.IO message handling by creating a MidwayJS application, a Socket.IO client using `@midwayjs/mock`, sending a message, and asserting the received result.  Imports `createApp`, `close`, and `createSocketIOClient` from `@midwayjs/mock`. Requires defining the framework and using the `events` module for asynchronous handling. The test verifies the response from the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock'\nimport { Framework } from '@midwayjs/koa';\nimport { createSocketIOClient } from '@midwayjs/mock';\nimport { once } from 'events';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create socket app', async () => {\n\n    // Create a service\n    const app = await createApp<Framework>();\n\n    // Create a corresponding client\n    const client = await createSocketIOClient({\n      port: 3000\n    });\n\n    // Return the result\n    const data = await new Promise(resolve => {\n      client.on('myEventResult', resolve);\n      // Send event\n      client.send('myEvent', 1, 2, 3);\n    });\n\n    // Judgment result\n    expect(data).toEqual({\n      name: 'harry',\n      result: 6\n    });\n\n    // Close the client\n    await client.close();\n \t\t// Close the server\n    await close(app);\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using waterfall in MidwayJS Pipeline\nDESCRIPTION: This code demonstrates the usage of the `waterfall` method to execute pipeline stages sequentially. The `waterfall` method executes the defined pipeline stages (`StageOne`, `StageTwo`) in sequence and returns the result of the last stage's execution (`StageTwo`). The `args` parameter allows passing arguments to each stage. The `prevValue` in subsequent stages contains result from previous stage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // Declare a pipeline here\n  @Pipeline([StageOne, StageTwo])\n  stages: IPipelineHandler;\n\n  async runStagesWaterfall(): Promise<any> {\n    // This is executed in serial mode. You can see that the verification is performed in the stageTwo, and the prevValue is the result of stageOne execution.\n    return this.stages.waterfall<any>({\n      args: {aa: 123}\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unified Call with ValidateHttp Error Handling\nDESCRIPTION: This example demonstrates how to handle validation errors when using the unified call method with `ValidateHttp`. It calls the `filterPosts` API with an invalid query parameter and logs the error message and status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport filterPosts from './api';\n\ntry {\n  await filterPosts({\n    query: { searchString: '' },\n  });\n} catch (error) {\n  console.log(\n    JSON.parse(error.data.message)\n  );\n  console.log(error.status); // 422\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default DataSource Name\nDESCRIPTION: This code shows how to configure a default data source name using the `defaultDataSourceName` property in `config.default.ts`. This simplifies data source selection when an entity is primarily associated with a single data source.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const mysql = {\n  dataSource: {\n    dataSource1: {\n      // ...\n    },\n    dataSource2: {\n      // ...\n    },\n    dataSource3: {\n      // ...\n    },\n  }\n  defaultDataSourceName: 'dataSource2',\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Cookies in Koa Context (TypeScript)\nDESCRIPTION: This snippet demonstrates how to read and write cookies within a Midway.js Koa application using the `ctx.cookies` object. It shows setting a cookie with encryption and then retrieving it. Requires @midwayjs/core and @midwayjs/koa dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // set cookie\n    this.ctx.cookies.set('foo', 'bar', { encrypt: true });\n    // get cookie\n    this.ctx.cookies.get('foo', { encrypt: true });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Github OAuth Strategy\nDESCRIPTION: This defines a Github OAuth strategy.  You need to replace placeholders with your actual Github Client ID and Secret. Also, ensure callbackURL matches your application configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// github-strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, StrategyOptions } from 'passport-github';\n\nconst GITHUB_CLIENT_ID = 'xxxxxx',\n  GITHUB_CLIENT_SECRET = 'xxxxxxxx';\n\n@CustomStrategy()\nexport class GithubStrategy extends PassportStrategy(Strategy) {\n  async validate(...payload) {\n    return payload;\n  }\n  getStrategyOptions() {\n    return {\n      clientID: GITHUB_CLIENT_ID,\n      clientSecret: GITHUB_CLIENT_SECRET,\n      callbackURL: 'https://127.0.0.1:7001/auth/github/cb',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Default Export (JavaScript)\nDESCRIPTION: This is the JavaScript code that results from compiling the TypeScript `export default` example. It defines a default property on the `exports` object with the given value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.default = {};\n```\n\n----------------------------------------\n\nTITLE: Creating an App for Testing (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create an application instance for testing using `@midwayjs/mock`'s `createApp` function.  The `Framework` generic type is used to provide type information to TypeScript, ensuring the returned app instance is correctly typed. This app instance is used as context for the unit tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// create app\nconst app = await createApp<Framework>();\n```\n\n----------------------------------------\n\nTITLE: Testing Services in Request Scope (TypeScript)\nDESCRIPTION: This snippet demonstrates how to test services that are request-scoped.  `createAnonymousContext()` creates an anonymous request context. The service is retrieved from the request context using `requestContext.getAsync()`.  This is useful for testing services that rely on request-specific data (e.g., `ctx`). `createApp` and `close` manages the lifecycle of app.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/web';\nimport * as assert from 'assert';\nimport { UserService } from '../../src/service/user';\n\ndescribe('test/controller/home.test.ts', () => {\n  it('should GET /', async () => {\n    // create app\n    const app = await createApp<Framework>();\n\n    // 根据依赖注入 Id 获取实例\n    const userService = await app.createAnonymousContext().requestContext.getAsync<UserService>('userService');\n\n    // 也能传入 class 获取实例\n    const userService = await app.createAnonymousContext().requestContext.getAsync(UserService);\n\n    // close app\n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Install Redis Watcher Dependencies\nDESCRIPTION: This bash command installs the dependencies for the Redis watcher. This watcher can be used to maintain consistency between multiple Casbin enforcers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/casbin-redis-adapter @midwayjs/redis --save\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Middleware\nDESCRIPTION: Creates middleware for the JWT authentication strategy.  `getAuthenticateOptions` can be customized to add strategy-specific options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// jwt-middleware.ts\n\nimport { Provide } from '@midwayjs/decorator';\nimport { PassportMiddleware } from '@midwayjs/passport';\n\n@Provide()\nexport class JwtPassportMiddleware extends PassportMiddleware(JwtStrategy) {\n  getAuthenticateOptions(): Promise<passport.AuthenticateOptions> | passport.AuthenticateOptions {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MQTT Module in Configuration\nDESCRIPTION: This TypeScript code shows how to import and enable the MQTT module within the `src/configuration.ts` file of a MidwayJS application.  The MQTT module is added to the `imports` array in the `@Configuration` decorator, which initializes it when the application starts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport * as mqtt from '@midwayjs/mqtt';\n\n@Configuration({\n  imports: [\n    // ...other components\n    mqtt,\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Defining API Gateway Trigger with MidwayJS\nDESCRIPTION: This snippet demonstrates how to define an API Gateway trigger for a Tencent Cloud Function using the @midwayjs/decorator package. It uses the @ServerlessTrigger decorator to specify the trigger type, path, and method.  It injects the context and accepts a name parameter from the request body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_apigw.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloTencentService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.API_GATEWAY, {\n    path: '/api_gateway_tencent',\n    method: 'post',\n  })\n  async handleAPIGatewayEvent(@Body() name) {\n    return `hello ${name}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Hooks in Midway Hooks Function (TypeScript)\nDESCRIPTION: This snippet showcases how to call custom Hooks within a Midway Hooks function. It imports the `useHeader` and `usePath` Hooks and uses them to retrieve the request headers and path, respectively. The function then returns an object containing these values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_syntax.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useHeader, usePath } from '../hooks/request';\n\nexport function get() {\n  return {\n    header: useHeader(),\n    path: usePath(),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Environment Variables with cross-env (Bash)\nDESCRIPTION: This snippet demonstrates using the `cross-env` module to set environment variables in a Windows environment. This ensures cross-platform compatibility when setting `MIDWAY_SERVER_ENV` and `NODE_ENV` before starting the MidwayJS application with `npm start`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/environment.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncross-env MIDWAY_SERVER_ENV=prod npm start // first priority\ncross-env NODE_ENV=local npm start // second priority\n```\n\n----------------------------------------\n\nTITLE: Delete Records with Sequelize\nDESCRIPTION: Demonstrates how to delete records from the UserModel table using the destroy method. It imports required decorators and the Photo entity, injects the entity and deletes all records matching the criteria.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Photo } from '../entity/Photo';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Post('/delete')\n  async home() {\n    await UserModel.destroy({\n      where: {\n        name: '123',\n      },\n    });\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Route with Api() in Midway Hooks\nDESCRIPTION: Creates a route using the `Api()` function in Midway Hooks, combined with the `Get()` decorator.  It exports both a function that returns the path, and a default function that returns a simple string. This demonstrates manual path definition support alongside auto-generated routes when used with the `routes` config.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/file-route.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api\n  Get\n} from '@midwayjs/hooks';\nimport { useContext } from '@midwayjs/hooks';\n\nexport async function getPath() {\n  // Get HTTP request context by Hooks\n  const ctx = useContext();\n  return ctx.path;\n}\n\nexport default Api(Get(), async () => {\n  return 'Hello Midway!';\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Security Component with npm\nDESCRIPTION: This command installs the @midwayjs/security package as a dependency to your project using npm. It adds the security features to your Midway.js application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/security.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/security --save\n```\n\n----------------------------------------\n\nTITLE: Install Kafka Module using npm\nDESCRIPTION: This command installs the `@midwayjs/kafka` module as a dependency to your project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/kafka --save\n```\n\n----------------------------------------\n\nTITLE: Defining ISimulation Interface in TypeScript\nDESCRIPTION: This code defines the `ISimulation` interface in TypeScript, which provides methods for executing simulation logic at various stages of the application lifecycle, such as setup, tearDown, appSetup, contextSetup, contextTearDown, and appTearDown. It includes an `enableCondition` method to determine if the simulation should be executed based on certain conditions. The interface uses Promises to handle asynchronous operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ISimulation {\n   /**\n    * The initial simulation timing is executed after the life cycle onConfigLoad\n    */\n   setup?(): Promise<void>;\n   /**\n    * Executed when the life cycle is closed, generally used for data cleaning\n    */\n   tearDown?(): Promise<void>;\n   /**\n    * Executed when each framework is initialized, the app of the current framework will be passed\n    */\n   appSetup?(app: IMidwayApplication): Promise<void>;\n   /**\n    * Executed at the beginning of each frame's request, the app and ctx of the current frame will be passed\n    */\n   contextSetup?(ctx: IMidwayContext, app: IMidwayApplication): Promise<void>;\n   /**\n    * Executed at the end of each frame request, after error handling\n    */\n   contextTearDown?(ctx: IMidwayContext, app: IMidwayApplication): Promise<void>;\n   /**\n    * Executed when each frame is stopped\n    */\n   appTearDown?(app: IMidwayApplication): Promise<void>;\n   /**\n    * The execution conditions of the simulation are generally a specific environment or a specific framework\n    */\n   enableCondition(): boolean | Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Photo and PhotoMetadata with One-to-One Relationship\nDESCRIPTION: This code demonstrates how to create and associate `Photo` and `PhotoMetadata` entities in a MidwayJS service using TypeORM. It creates instances of both entities, sets their properties, and establishes the one-to-one relationship by assigning the `photo` property of the `PhotoMetadata` entity to the `Photo` entity.  The entities are then saved using their respective repositories.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { Photo } from './entity/photo.entity';\nimport { PhotoMetadata } from './entity/photoMetadata.entity';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  @InjectEntityModel(PhotoMetadata)\n  photoMetadataModel: Repository<PhotoMetadata>;\n\n  async updatePhoto() {\n\n  // create a photo\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.isPublished = true;\n\n    // create a photo metadata\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = \"cybershoot\";\n    metadata.orientation = \"portrait\";\n    metadata.photo = photo; // this way we connect them\n\n\n    // first we should save a photo\n    await this.photoModel.save(photo);\n\n    // photo is saved. Now we need to save a photo metadata\n    await this.photoMetadataModel.save(metadata);\n\n    // done\n    console.log(\"Metadata is saved, and relation between metadata and photo is created in the database too\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope in MidwayJS\nDESCRIPTION: This code snippet resolves an issue where the request scope was not valid for singleton invocations. This fix ensures that singleton instances correctly handle request-scoped dependencies within the MidwayJS framework. The commit associated with this fix is f97c063.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/jwt/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Global Cache Configuration\nDESCRIPTION: This snippet displays the default cache configuration settings in the `config.default.ts` file. It includes settings for the store type (memory), maximum number of entries, and default TTL (in seconds).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const cache = {\n  store: 'memory',\n  options: {\n    max: 100,\n    ttl: 10, // 修改默认的ttl配置\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disable Passport Session in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to disable session support in the MidwayJS Passport configuration. By setting the `session` property to `false`, you prevent Passport from attempting to serialize user data into the session, which can be useful when session storage is not required or desired.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  passport: {\n    session: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Uploaded Files with Duplicate Fields\nDESCRIPTION: This snippet shows how to handle uploaded files when `allowFieldsDuplication` is enabled. Fields with the same name are merged into an array within the `fields` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Inject, Post, Files, Fields } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Post('/upload')\n  async upload(@Files() files, @Fields() fields) {\n    /*\n    fields = {\n    \tname: ['name1', 'name2'],\n    \totherName: 'nameOther'\n    \t// ...\n    }\n\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Final Processing with `after`\nDESCRIPTION: This example shows how to use the `after` lifecycle method for final processing, regardless of whether the intercepted method executed successfully or threw an error. This is useful for tasks like logging success or failure counts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    throw new Error('custom error');\n  }\n}\n\n// src/aspect/report.ts\n@Aspect(HomeController, 'home')\nexport class ReportInfo implements IMethodAspect {\n  async after(point: JoinPoint, result, error) {\n    if(error) {\n    \tconsole.error(error);\n    } else {\n      console.log(result);\n  \t}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Override BodyParser Configuration in Midway Web\nDESCRIPTION: Demonstrates how to override the default `bodyParser` configuration in `src/config/config.default.ts` to increase the `jsonLimit` to 1mb.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/body-parser.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default\nexport const bodyParser = {\n  jsonLimit: '1mb',\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Dependency Injection Simulation\nDESCRIPTION: Simulates the dependency injection process, manually instantiating classes and injecting dependencies.  This showcases how the container resolves dependencies by creating instances and assigning properties.  It relies on the UserService and UserController classes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst userService = new UserService();\nconst userController = new UserController();\n\nuserController.userService = userService;\n```\n\n----------------------------------------\n\nTITLE: Handling TS2612 Error in Sequelize Models (TypeScript)\nDESCRIPTION: This snippet provides a solution for the TS2612 error that can occur in Sequelize models when a column property shadows a base property.  The solution is to assign the property an initial value of `undefined`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Column } from 'sequelize-typescript';\n\n@Table\nexport class User extends Model {\n  @Column({\n    primaryKey: true,\n    autoIncrement: true,\n    type: DataType.BIGINT,\n  })\n  id?: number = undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Express dependency\nDESCRIPTION: This snippet updates the express dependency to version v4.18.2. It is necessary to keep dependencies up to date to avoid security vulnerabilities and ensure compatibility with the latest features.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Setting and Getting Attributes on Application\nDESCRIPTION: This code snippet demonstrates how to use `this.app.setAttr()` and `this.app.getAttr()` to store and retrieve temporary global data on the Application object. This is useful for sharing data across different parts of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.setAttr('abc', {\n  a: 1\n  B: 2\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = this.app.getAttr('abc');\nconsole.log(value);\n// { a: 1, B: 2}\n```\n\n----------------------------------------\n\nTITLE: Initializing MidwayJS Bootstrap\nDESCRIPTION: This code snippet shows how to initialize the MidwayJS Bootstrap with configurable parameters. It requires the @midwayjs/bootstrap package. The imports array specifies explicit component references.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap\n  .configure({\n  \timports: [/*...*/]\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Overriding Context Logger Class - TypeScript\nDESCRIPTION: This snippet demonstrates how to override the default context logger class to customize the output of `ctx.logger`.  It involves extending `MidwayContextLogger` and implementing `formatContextLabel`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/custom/logger.ts\n\nimport { MidwayContextLogger } from '@midwayjs/logger';\nimport { Context } from 'egg';\n\nexport class MidwayCustomContextLogger extends MidwayContextLogger<Context> {\n  formatContextLabel() {\n    const ctx = this.ctx;\n    return `${Date.now() - ctx.startTime}ms ${ctx.method}`;\n  }\n}\n\n// configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport { ILifeCycle, IMidwayContainer } from '@midwayjs/core';\nimport { MidwayCustomContextLogger } from './custom/logger';\nimport { Application } from 'egg';\n\n@Configuration()\nexport class ContainerConfiguration implements ILifeCycle {\n  @App()\n  app: Application;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    this.app.setContextLoggerClass(MidwayCustomContextLogger);\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nctx.logger.info('hello world');\n// 2021-01-28 11:10:19,334 INFO 9223 [2ms POST] hello world\n```\n\n----------------------------------------\n\nTITLE: Modify Dev Script for Source Directory in package.json (MidwayJS CLI)\nDESCRIPTION: Modifies the `dev` script in `package.json` to specify a custom source directory. This is necessary when the source code is not located in the default `src` directory.  The `--sourceDir` flag is used to indicate the new source directory. The `--ts` flag enables TypeScript support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/change_start_dir.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"dev\": \"cross-env NODE_ENV=local midway-bin dev --sourceDir=./server --ts\"\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to create-midway with npm init\nDESCRIPTION: This command demonstrates how to pass arguments to the `create-midway` script using the `--` separator.  This allows you to customize the scaffold creation process. `-h` displays help information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- -h\n```\n\n----------------------------------------\n\nTITLE: Loading Photo with Metadata using QueryBuilder\nDESCRIPTION: This code snippet illustrates how to load a Photo entity and its associated metadata using TypeORM's QueryBuilder. The `innerJoinAndSelect` method is used to join the Photo and PhotoMetadata entities and select their properties, ensuring that related data is fetched in a single query. This approach allows for more complex queries and filtering.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Func } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from './entity/photo';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  // find\n  async findPhoto() {\n    /*...*/\n    let photos = await this.photoModel\n      .createQueryBuilder('photo')\n      .innerJoinAndSelect('photo.metadata', 'metadata')\n      .getMany();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FC Runtime in Midway.js (TypeScript)\nDESCRIPTION: This code snippet initializes the Midway.js runtime within the Alibaba Cloud FC environment using the `asyncWrapper` and `start` functions from `@midwayjs/serverless-fc-starter`.  It sets up the runtime instance for handling subsequent requests. The `asyncWrapper` function handles error catching and reporting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/midway-fc-starter/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { asyncWrapper, start } from '@midwayjs/serverless-fc-starter';\n\nlet runtime;\nexports.init = asyncWrapper(async () => {\n  runtime = await start();\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing autoescape config for view-nunjucks in TypeScript\nDESCRIPTION: This commit addresses a bug fix related to the autoescape configuration for the @midwayjs/view-nunjucks package. It also adds a TypeScript interface to improve type safety and developer experience when using the Nunjucks view engine within MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-nunjucks/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** Bug Fixes\n\n- **view-nunjucks:** add autoescape config && add ts interface ([#2148](https://github.com/midwayjs/midway/issues/2148)) ([8d39739](https://github.com/midwayjs/midway/commit/8d39739eb99d9baa2d6da229352d90f18bf072d5)) */\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Compatible Version with npm\nDESCRIPTION: This command upgrades all Midway dependencies to the latest compatible version using npm. The `-m` flag triggers the upgrade process. It initially performs a check and then can be used with `-w` to write changes to `package.json` and `package-lock.json`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/version_check.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest -m\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest -m -w\n```\n\n----------------------------------------\n\nTITLE: Using Faster Startup Method (swc)\nDESCRIPTION: Enables the faster startup mode for the development server using swc. Requires `--fast=swc` flag.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n// Use swc fast dev mode\n$ midway-bin dev --ts --fast=swc\n```\n\n----------------------------------------\n\nTITLE: Run Bundled Application\nDESCRIPTION: This command starts the bundled application in production mode. It sets the `NODE_ENV` environment variable to `production` and then executes the `build/index.js` file using Node.js.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run bundle_start\n```\n\n----------------------------------------\n\nTITLE: IndexDataService Implementation in MidwayJS\nDESCRIPTION: This code defines a `IndexDataService` class with methods to load and retrieve index data from a remote source. It uses `@midwayjs/core` decorators like `@Singleton` and `@Config` for dependency injection and configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/indexData.service.ts\nimport { Singleton, makeHttpRequest, Singleton } from '@midwayjs/core';\n\n@Singleton()\nexport class IndexDataService {\n  \n   @Config('index')\n   indexConfig: {indexUrl: string};\n\n   private indexData;\n\n   async load() {\n     // get data from remote\n     this.indexData = await this.fetchIndex(this.indexConfig.indexUrl);\n   }\n  \n   public getData() {\n     if (!this. indexData) {\n       // If the data does not exist, load it once\n       this. load();\n     }\n     return this. indexData;\n   }\n\n   async fetchIndex(url) {\n     return makeHttpRequest<Record<string, any>>(url, {\n       method: 'GET',\n       dataType: 'json',\n     });\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Event Name Arguments in MidwayJS\nDESCRIPTION: This commit fixes an issue related to event name arguments within the MidwayJS framework. The specific problem addressed involves the handling or processing of event names passed as arguments, ensuring correct event handling within the application. The fix impacts event-driven functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nbfd82320aee8600d8fa30bd2821a0e68c80fd755\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Global Middleware\nDESCRIPTION: This snippet shows how to register multiple global middleware using the useMiddleware method with an array of middleware classes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync onReady() {\n  this.app.useMiddleware([ReportMiddleware1, ReportMiddleware2]);\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Busboy Component\nDESCRIPTION: This TypeScript snippet demonstrates how to enable the @midwayjs/busboy component within a MidwayJS application by importing it in the configuration file. This makes the upload functionality available.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\n\n@Configuration({\n  imports: [\n    // ...other components\n    busboy\n  ],\n  // ...\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Function Result (application/x-www-form-urlencoded) - Alibaba Cloud API Gateway\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed within the serverless function when the Content-Type is application/x-www-form-urlencoded on Alibaba Cloud API Gateway. The framework automatically parses the body into a JSON object, even if it appears as a JSON string in the event body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\"b\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Configure Typegoose in MidwayJS\nDESCRIPTION: This TypeScript code shows how to configure the Typegoose component in a MidwayJS application using the Configuration decorator.  It imports the typegoose module and includes it in the imports array. The configuration imports are set using the join function from the path module.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as typegoose from '@midwayjs/typegoose';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    typegoose // Load typegoose Components\n  ],\n  importConfigs: [\n  \tjoin(__dirname, './config')\n  ]\n})\nexport class MainConfiguration {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Koa Framework (TypeScript)\nDESCRIPTION: This code snippet shows how to export the custom Koa Framework so it can be used by other parts of the application. It exports `CustomKoaFramework` as `Framework`, adhering to the convention that frameworks should be exported under the name `Framework`. This allows the `@midwayjs/bootstrap` library to discover and load the custom framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_development.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { CustomKoaFramework as Framework } from './custom';\n```\n\n----------------------------------------\n\nTITLE: Defining EggJS Framework Exports in Typescript\nDESCRIPTION: This code snippet shows the required exports for a custom EggJS framework to be compatible with Midway. It includes the Application, Agent, AppWorkerLoader, and AgentWorkerLoader properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/custom_eggjs.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'use strict';\n\nconst egg = require('egg');\n\nconst framework = {};\n\n/**\n * @member {Application} Egg#Application\n * @since 1.0.0\n */\nframework.Application = require('./lib/application');\n\n/**\n * @member {Agent} Egg#Agent\n * @since 1.0.0\n */\nframework.Agent = require('./lib/agent');\n\n/**\n * @member {Agent} Egg#AppWorkerLoader\n * @since 1.0.0\n */\nframework.AppWorkerLoader = require('./lib/core/loader/app_worker_loader');\n\n/**\n * @member {Agent} Egg#AgentWorkerLoader\n * @since 1.0.0\n */\nframework.AgentWorkerLoader = require('./lib/core/loader/agent_worker_loader');\n\nmodule.exports = exports = Object.assign(egg, framework);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating HTTP Client Instances - TypeScript\nDESCRIPTION: This code snippet demonstrates how to dynamically create HTTP client instances using the createInstance method. It also explains how to retrieve these instances from the factory if a name is provided during creation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service_factory.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPClientServiceFactory } from './service/httpClientServiceFactory';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  serviceFactory: HTTPClientServiceFactory;\n\n  async invoke() {\n    // 会合并 config.bucket3 和 config.default\n    let customHttpClient = await this.serviceFactory.createInstance(\n      {\n        baseUrl: 'xxxxx',\n      },\n      'custom'\n    );\n\n    // 传了名字之后也可以从 factory 中获取\n    customHttpClient = this.serviceFactory.get('custom');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling @midwayjs/http-proxy Component in configuration.ts\nDESCRIPTION: This TypeScript code snippet demonstrates how to import and enable the @midwayjs/http-proxy component within the src/configuration.ts file in a Midway.js project. This registers the component with the application container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/http-proxy.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport * as proxy from '@midwayjs/http-proxy';\n\n@Configuration({\n  imports: [\n    // ...other components\n    proxy,\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Frontend API Call with Error Handling\nDESCRIPTION: This code snippet showcases how to call an API, created with `@midwayjs/hooks`, from the frontend and handle potential validation errors. It calls the `hello` function with null values, triggering a validation error. The error message and status code are then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/intro.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport hello from './api';\n\ntry {\n  await hello(null, null);\n} catch (error) {\n  console.log(error.message); // 'name must be a string'\n  console.log(error.status); // 422\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mocha Dependencies\nDESCRIPTION: Installs Mocha and its type definitions as development dependencies. Required when using Mocha as the test framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i mocha @types/mocha -D\n```\n\n----------------------------------------\n\nTITLE: Running Docker-Compose Services\nDESCRIPTION: This command starts the services defined in the docker-compose.yml file in detached mode. The '-d' flag runs the services in the background.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/deployment.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining MQ Event Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for message queue events (MQ events), specifying properties such as topic, tags, region, strategy, role, version, and enable status. This defines how messages in a queue trigger function execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MQEvent {\n  topic: string;\n  tags?: string;\n  region?: string;\n  strategy?: string;\n  role?: string;\n  version?: string;\n  enable?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Install RabbitMQ dependencies\nDESCRIPTION: These commands install the necessary dependencies for RabbitMQ integration in a MidwayJS project, including the RabbitMQ module, amqplib, and its type definitions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/rabbitmq@3 --save\n$ npm i amqplib --save\n$ npm i @types/amqplib --save-dev\n```\n\n----------------------------------------\n\nTITLE: Fix Swagger UI JSON Path Replacement in MidwayJS\nDESCRIPTION: This commit fixes an issue related to Swagger UI in MidwayJS, specifically the replacement of the JSON path. This ensures the Swagger UI displays the API documentation correctly by resolving the correct JSON path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/http-proxy/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Configure Report Middleware in Midway Web\nDESCRIPTION: Adds the custom `reportMiddleware` to the middleware stack in the `src/config/config.default.ts` file. This configuration ensures that the middleware is loaded after the default framework middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/body-parser.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nexport default (appInfo: EggAppInfo) => {\n  const config = {} as DefaultConfig;\n\n  // ...\n\n  config.middleware = ['reportMiddleware'];\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis and Casbin Components\nDESCRIPTION: This TypeScript code snippet shows how to enable both the Redis and Casbin components in the `configuration.ts` file. This imports both redis and casbin and adds to the import array of the Configuration decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as redis from '@midwayjs/redis';\nimport * as casbin from '@midwayjs/casbin';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    redis,\n    casbin,\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support with Zod for Complex Types\nDESCRIPTION: This code showcases the TypeScript support in Zod for defining and validating complex types. It defines a `Project` schema with nested properties and uses `z.infer` to infer the TypeScript type for the `project` parameter in the API handler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post,\n  Validate,\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\n\nconst Project = z.object({\n  name: z.string(),\n  description: z.string(),\n  owner: z.string(),\n  members: z.array(z.string()),\n});\n\nexport default Api(\n  Post('/project'),\n  Validate(Project),\n  async (\n    // { name: string, description: string, owner: string, members: string[] }\n    project: z.infer<typeof Project>\n  ) => {\n    return project;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Upgrading to the Latest Compatible Version using pnpm\nDESCRIPTION: This command upgrades all Midway modules to the latest compatible version using pnpm. The `-m` flag instructs the tool to identify the latest compatible version within the existing version range. The `-w` flag writes the changes to `package.json` and `pnpm-lock.yaml`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/version_check.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest -m\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest -m -w\n```\n\n----------------------------------------\n\nTITLE: Configuring @midwayjs/passport in configuration.ts\nDESCRIPTION: Import and configure the necessary modules, including jwt and passport, within the Midway.js configuration file. This step integrates the authentication and JWT functionalities into the application's lifecycle.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// configuration.ts\n\nimport { join } from 'path';\nimport * as jwt from '@midwayjs/jwt';\nimport { ILifeCycle,} from '@midwayjs/core';\nimport { Configuration } from '@midwayjs/core';\nimport * as passport from '@midwayjs/passport';\n\n@Configuration({\n  imports: [\n    jwt,\n    passport,\n  ],\n  importConfigs: [join(__dirname, './config')],\n  conflictCheck: true,\n})\nexport class ContainerLifeCycle implements ILifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Node.js Versions with nvs\nDESCRIPTION: This snippet demonstrates common nvs commands for installing, linking, listing, and using different Node.js versions. It includes installing the latest LTS version, linking it as the default, installing a specific version (12), listing installed versions, and switching to version 12 in the current shell.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_install_nodejs.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install the latest LTS version\n$ nvs add lts\n# Configure as default version\n$ nvs link lts\n\n# Install other versions and try them\n$ nvs add 12\n# View installed versions\n$ nvs ls\n# Switch version at current Shell\n$ nvs use 12\n```\n\n----------------------------------------\n\nTITLE: Configuring tag descriptions in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure tag descriptions in the swagger configuration, which helps to provide additional information about each tag in the Swagger UI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nexport default {\n  swagger: {\n    tags: [\n      {\n        name: 'api',\n        description: 'API Document'\n      },\n      {\n        name: 'hello',\n        description: 'Other Router'\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/upload dependency with npm\nDESCRIPTION: This command installs the @midwayjs/upload package as a project dependency using npm. The --save flag ensures the package is added to the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/upload@3 --save\n```\n\n----------------------------------------\n\nTITLE: MNS Trigger Usage with Decorators in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@ServerlessTrigger` decorator to define an MNS trigger for a function in Midway.js. It specifies the trigger type as `MQ`, along with the topic and tags for filtering messages. The `handleMNSEvent` function will be invoked when a message matching the specified criteria is received.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_mns.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context, FC } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.MQ, {\n    topic: 'test-topic',\n    tags: 'bbb',\n  })\n  async handleMNSEvent(event: FC.MNSEvent) {\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating `package.json` with `midway-version -u -w` (pnpm)\nDESCRIPTION: This command updates the `package.json` file with the latest Midway package versions in projects using `pnpm`. This ensures that the project's dependency specifications are current and consistent with the installed versions. The `-w` flag writes updates directly to `package.json`, and `pnpx` executes `midway-version` without global installation, streamlining the update process for community users.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_update_midway.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Community user\n$ pnpx midway-version -u -w\n# Internal user\n$ pnpx @ali/midway-version -u -w\n```\n\n----------------------------------------\n\nTITLE: Adding Serverless YAML Generator Script\nDESCRIPTION: This diff shows how to add the `@midwayjs/serverless-yaml-generator` package as a dev dependency and add a `generate` script to the `package.json` file. This script can be used to automatically update the `s.yaml` file with function information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n{\n\"scripts\": {\n+ \"generate\": \"serverless-yaml-generator\",\n   },\n   \"devDependencies\": {\n+ \"@midwayjs/serverless-yaml-generator\": \"^1.0.0\",\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the gRPC helper tool\nDESCRIPTION: This command installs the `@midwayjs/grpc-helper` package as a development dependency. This tool is used to generate TypeScript interface files from the proto definitions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/grpc-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using ALL Config Decorator - TypeScript\nDESCRIPTION: This snippet demonstrates how to inject the entire configuration object into a class using the `@Config` decorator and the `ALL` special attribute.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, ALL } from '@midwayjs/decorator';\n\nexport class IndexHandler {\n  @Config(ALL)\n  allConfig;\n\n  async handler() {\n    console.log(this.allConfig); // { userService: { appname: 'test'}}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Prometheus MidwayJS Component\nDESCRIPTION: Installs the @midwayjs/prometheus component using npm. This component provides the necessary middleware to expose metrics in a Prometheus-compatible format.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/prometheus -S\n```\n\n----------------------------------------\n\nTITLE: Import EJS view module\nDESCRIPTION: Imports the @midwayjs/view-ejs module and configures it within the MidwayJS application.  This involves adding the view module to the `imports` array in the `Configuration` decorator and specifying the configuration file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport * as view from '@midwayjs/view-ejs';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    view, // 导入 ejs 组件\n  ],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Decorator in TypeScript\nDESCRIPTION: This code demonstrates how to use the `@Model` decorator on a class. It also uses the `@Provide` decorator to expose the class as an IoC component.  It requires the `@Model` decorator to be defined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/decorator_api.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from '../decorator/model';\n\n// Provide 的作用是暴露出一个 IoC id，能被 IoC 扫描到\n@Provide()\n// Model 的作用是我们自己的逻辑能被执行（保存的元数据）\n@Model()\nexport class UserModel {}\n```\n\n----------------------------------------\n\nTITLE: RouterPriority Interface Definition in TypeScript\nDESCRIPTION: This snippet defines the RouterPriority interface, which contains information about the priority of each router. It includes properties like prefix, priority, middleware, routerOptions, and controllerId. This interface is used for obtaining route priority lists.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/router_table.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RouterPriority {\n  prefix: string;\n  priority: number;\n  middleware: any[];\n  routerOptions: any;\n  controllerId: string;\n}\n\nasync getRoutePriorityList(): Promise<RouterPriority[]>\n```\n\n----------------------------------------\n\nTITLE: Executing mwtsc command\nDESCRIPTION: This command executes the mwtsc tool, which is equivalent to the standard tsc command. It is used for compiling TypeScript files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc\n```\n\n----------------------------------------\n\nTITLE: Customizing Text and Blob Response Templates (TypeScript)\nDESCRIPTION: This code shows how to customize the response templates for `text` and `blob` methods in `HttpServerResponse`. This allows for global customization of the data returned by these methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nHttpServerResponse.TEXT_TPL = (data, isSuccess) => { /*...*/};\nHttpServerResponse.BLOB_TPL = (data, isSuccess) => { /*...*/};\n```\n\n----------------------------------------\n\nTITLE: MNS Trigger Configuration with Region and Retry Strategy in TypeScript\nDESCRIPTION: This code snippet shows how to configure the MNS trigger with optional parameters such as region and retry strategy using the `@ServerlessTrigger` decorator.  It allows you to specify the region where the topic is located and the retry mechanism for function invocations. The `BACKOFF_RETRY` strategy is used in this example.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_mns.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ServerlessTrigger(ServerlessTriggerType.MQ, {\n  topic: 'test-topic',\n  region: 'cn-shanghai'\n  strategy: 'BACKOFF_RETRY'\n})\n\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with Path Parameters\nDESCRIPTION: This snippet demonstrates how to test an API endpoint with path parameters. It uses `createHttpRequest` to send a GET request to `/article/1` and verifies that the response body contains the correct `article` value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Get Article', async () => {\n  const response = await createHttpRequest(app)\n    .get('/article/1')\n    .expect(200);\n\n  expect(response.body).toEqual({ article: '1' });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Component Logging in MidwayJS\nDESCRIPTION: This code snippet shows how to configure the Kafka component logging in MidwayJS, including specifying the log file name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  midwayLogger: {\n    clients: {\n      kafkaLogger: {\n        fileLogName: 'midway-kafka.log',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Install @midwayjs/egg-ts-helper\nDESCRIPTION: Installs the @midwayjs/egg-ts-helper package as a development dependency using npm. This package provides the `ets` command for generating TypeScript definition files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/egg-ts-helper.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/egg-ts-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Timeout (TypeScript)\nDESCRIPTION: This snippet shows how to configure the health check timeout using the global configuration. This timeout value will be used by the MidwayHealthService.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n//config.default\nexport default {\n   core: {\n     healthCheckTimeout: 2000,\n   }\n};\n```\n\n----------------------------------------\n\nTITLE: Using OSSSTSService with STS to Assume Role in MidwayJS\nDESCRIPTION: This TypeScript snippet demonstrates how to use the OSSSTSService to assume an STS role and obtain temporary credentials. It injects the OSSSTSService, defines the role ARN, and then calls the assumeRole method to retrieve the credentials. These credentials can be used to access OSS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OSSSTSService } from '@midwayjs/oss';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  stsService: OSSSTSService;\n\n  async saveFile() {\n\n    const roleArn = '******'; // This is arn of ariyun role\n    const result = await this.stsService.assumeRole(roleArn);\n\n    // result.credentials.AccessKeyId\n    // result.credentials.AccessKeySecret;\n    // result.credentials.SecurityToken;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Conversion for Number Request Parameters in MidwayJS\nDESCRIPTION: This TypeScript snippet shows how MidwayJS automatically converts a query parameter to a number type when declared in the method signature.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/')\nasync getUser(@Query('id') id: number): Promise<User> {\n  console.log(typeof id) // number\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Midway Logger Feature\nDESCRIPTION: This commit introduces a new logger feature to MidwayJS. This likely provides a more structured and configurable logging mechanism within the framework, allowing developers to customize logging levels, formats, and destinations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Configure Upload Middleware Globally (@midwayjs/faas)\nDESCRIPTION: This TypeScript code demonstrates how to configure the UploadMiddleware from @midwayjs/busboy globally for a MidwayJS application using Faas. All routes will have the upload middleware applied.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\nimport { Application } from '@midwayjs/faas';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App('faas')\n  app: Application;\n  \n  async onReady() {\n    this.app.useMiddleware(busboy.UploadMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Directory with npm init\nDESCRIPTION: This command shows how to specify the target directory for the generated project, using the `--target` parameter. The `type` parameter must also be specified. If the target directory does not exist, it will be created.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --type=koa-v3 --target=abc\n```\n\n----------------------------------------\n\nTITLE: Client-Side Heartbeat Handling - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how a WebSocket client can handle server-side heartbeat messages (pings). The `heartbeat` function clears the existing timeout and sets a new timeout. If a ping message isn't received within the timeout period, the client assumes the connection is broken and attempts to reconnect or terminates the connection. The client listens for 'ping' events from the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport WebSocket from 'ws';\n\nfunction heartbeat() {\n  clearTimeout(this.pingTimeout);\n\n  // 每次接收 ping 之后，延迟等待，如果下一次未拿到服务端 ping 消息，则认为出现问题\n  this.pingTimeout = setTimeout(() => {\n    // 重连或者中止\n  }, 30000 + 1000);\n}\n\nconst client = new WebSocket('wss://websocket-echo.com/');\n\n// ...\nclient.on('ping', heartbeat);\n```\n\n----------------------------------------\n\nTITLE: Get Request Handler in Midway Hooks (Simple Mode)\nDESCRIPTION: Defines a GET request handler in Midway Hooks that retrieves the request path from the context. This demonstrates the simple mode where pure functions are used to create interfaces, requiring the `routes` configuration to be enabled in `midway.config.js`. This only supports `GET` and `POST` methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/file-route.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from '@midwayjs/hooks';\n\nexport async function getPath() {\n  // Get HTTP request context by Hooks\n  const ctx = useContext();\n  return ctx.path;\n}\n```\n\n----------------------------------------\n\nTITLE: Controller update for template rendering\nDESCRIPTION: This TypeScript code updates the WeatherController to render the `info.html` template with weather data. It injects the `Context` and uses it to call `ctx.render`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/weather.controller.ts\nimport { Controller, Get, Inject, Query } from '@midwayjs/core';\nimport { WeatherService } from '../service/weather.service';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class WeatherController {\n\n  @Inject()\n  weatherService: WeatherService;\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/weather')\n  async getWeatherInfo(@Query('cityId') cityId: string): Promise<void> {\n    const result = await this.weatherService.getWeather(cityId);\n    if (result) {\n      await this.ctx.render('info', result.weatherinfo);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure with Custom Decorator\nDESCRIPTION: This example shows the recommended directory structure for placing custom decorators in a MidwayJS application. It shows a `decorator` folder inside the `src` directory where custom decorators such as `user.decorator.ts` can be stored.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   ├── controller\n│   │   ├── user.controller.ts\n│   │   └── home.controller.ts\n│   ├── interface.ts\n│   ├── decorator                   ## 自定义装饰器\n│   │   └── user.decorator.ts\n│   └── service\n│       └── user.service.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Updating Kafka Framework & Adding Test Demo in Midway\nDESCRIPTION: This commit updates the Kafka framework integrated within the MidwayJS project. It also includes the addition of a test demo for the Kafka functionality, likely to showcase usage and validate integration. Implementation details for the update and demo can be found in the linked commit.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/kafka/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configure Locals Field Name (Typescript)\nDESCRIPTION: Configures the name of the locals field used for accessing the I18n function in templates.  The `localsField` property in the I18n configuration specifies the name used to access the function. Requires `@midwayjs/i18n`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    localsField: 'i18n',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Default Instance (TypeScript)\nDESCRIPTION: This code shows how to retrieve the default HTTP client instance from the `HTTPClientServiceFactory` using the `get` method without any arguments. This assumes that a default client has been configured.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPClientServiceFactory } from './service/httpClientServiceFactory';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  serviceFactory: HTTPClientServiceFactory;\n\n  async invoke() {\n    const httpClient = this.serviceFactory.get();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting HTTPS Configuration for Web/Koa/Express\nDESCRIPTION: This commit adds support for HTTPS configuration for web, Koa, and Express applications in MidwayJS. It allows developers to configure HTTPS settings directly within their MidwayJS application configurations. This enhances security by enabling encrypted communication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\na0c07b9e3cc2eec7e88e49085f1e66242fa1ec50\n```\n\n----------------------------------------\n\nTITLE: Add ETS Command to Scripts - JSON\nDESCRIPTION: This code snippet demonstrates how to add the `ets` command to the `scripts` section of the `package.json` file. This allows for the automatic generation of TypeScript definitions for EggJS before running the development server. The command uses `cross-env` to set environment variables and then executes `midway-bin dev --ts` to start the development server with TypeScript support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"dev\": \"cross-env ets && cross-env NODE_ENV=local midway-bin dev --ts\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Koa server timeout in MidwayJS\nDESCRIPTION: This snippet shows how to configure the `serverTimeout` option in the Koa component within a MidwayJS application.  Setting `serverTimeout` defines the maximum time the server will wait for a request to complete before timing out.  It allows controlling timeout durations for requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-10-29-release-3-7.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const koa = {\n  serverTimeout: 1000,\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Midway.js FaaS App (Aggregated)\nDESCRIPTION: This bash snippet initializes a new Midway.js FaaS application using the `faas-aggr` template. It uses the `npm init midway` command to create the project.  The version check is there to accommodate different command structures between npm v6 and v7. The template is designed for aggregated deployments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_aggr.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm -v\n\n# 如果是 npm v6\n$ npm init midway --type=faas-aggr my_midway_app\n\n# 如果是 npm v7\n$ npm init midway -- --type=faas-aggr my_midway_app\n```\n\n----------------------------------------\n\nTITLE: Fix swagger ui json path in MidwayJS\nDESCRIPTION: This commit fixes an issue with the Swagger UI where the JSON path was not being correctly resolved. This resolves issues displaying the swagger documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Configure Luckyeye rule package\nDESCRIPTION: This configuration adds a `midway-luckyeye` section to `package.json`, specifying the rule packages to use. In this case, it uses the `midway_v2` rule package for Midway v2 projects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/luckyeye.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"midway-luckyeye\": {\n  \"packages\": [\n    \"midway_v2\"\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Disable CSRF in Security Configuration - TypeScript\nDESCRIPTION: This code snippet shows how to disable CSRF (Cross-Site Request Forgery) protection in the security configuration for an EggJS application within a MidwayJS project. Disabling CSRF should be done with caution and after understanding the security implications. It exports a configuration object named `security` with the `csrf` property set to `false`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const security = {\n  csrf: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Enable Log Rotation\nDESCRIPTION: This snippet shows how to enable the `logrotator` plugin in a MidwayJS application when using `egg-logger`. This is necessary for log file rotation to avoid excessive file sizes.  It requires modification of the plugin configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/plugin.ts\nimport { EggPlugin } from 'egg';\nexport default {\n  logrotator: true, // 这行改成 true，或者删掉\n  static: false,\n} as EggPlugin;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Log Output Format in TypeScript\nDESCRIPTION: This snippet configures the output format of a context log message.  The `contextFormat` property takes a function that receives an `info` object (containing the `ctx`) and returns a formatted string to be written to the log. This allows inclusion of request-specific data in the log message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      customLogger: {\n        contextFormat: info => {\n          const ctx = info.ctx;\n          return `${info.timestamp} ${info.LEVEL} ${info.pid} [${Date.now() - ctx.startTime}ms ${ctx.method}] ${info.message}`;\n        }\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: ConcatSeries Pipeline Execution Example\nDESCRIPTION: Demonstrates the use of the `concatSeries` method to execute a pipeline sequentially. It indicates that the result is an array similar to the `concat` method's return structure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline([VideoFeeds, AccountMap, CrowFeeds])\n  stages: IPipelineHandler;\n  \n  async runConcatSeries(): Promise<any> {\n    // 这里串行执行 videoFeeds、accountMap、crowFeeds\n    return this.stages.concatSeries<any>({\n      args: {aa: 123}\n    });\n    \n    // 这里返回的 result 是一个数组，同 concat 返回对象拼装\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding guard feature\nDESCRIPTION: This snippet adds a 'guard' feature to the framework. Guards can be used to protect routes and ensure that only authorized users can access them.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Configure Redis Connection and Casbin Adapter\nDESCRIPTION: This code snippet configures the Redis connection and Casbin adapter within a MidwayJS application. It defines a Redis client configuration for Casbin and then utilizes the `createAdapter` function from `@midwayjs/casbin-redis-adapter` to link this client to the Casbin policy adapter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\nimport { createAdapter } from '@midwayjs/casbin-redis-adapter';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    redis: {\n      clients: {\n        // Defines a connection for casbin\n        'node-casbin-official': {\n          host: '127.0.0.1',\n          port: 6379,\n          password: '',\n          db: '0',\n        }\n      }\n    },\n    casbin: {\n      policyAdapter: createAdapter({\n        // The connection name above is configured\n        clientName: 'node-casbin-official'\n      }),\n      // ...\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configure UploadMiddleware Globally - Koa\nDESCRIPTION: Configures the UploadMiddleware globally for a Koa application. This middleware will be applied to all incoming requests, handling multipart/form-data parsing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuratin.ts\n\nimport { Configuration } from '@midwayjs/core';\nimport * as busboy from '@midwayjs/busboy';\nimport { Application } from '@midwayjs/koa';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App('koa')\n  app: Application;\n  \n  async onReady() {\n    this.app.useMiddleware(busboy.UploadMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Fanout Exchange in RabbitMQ\nDESCRIPTION: This snippet demonstrates how to test a fanout exchange in RabbitMQ with MidwayJS. It creates a producer, asserts the existence of a fanout exchange, sends a message to the exchange, starts the consumer application, waits for a period, and then closes the producer and consumer.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager = await createRabbitMQProducer('tasks-fanout', {\n  isConfirmChannel: false,\n  mock: false,\n  url: 'amqp://localhost',\n});\n\n// Name of the exchange\nconst ex = 'logs';\n// Write a message\nconst msg = 'Hello World!';\n\n// 声明交换机\nmanager.assertExchange(ex, 'fanout', { durable: false }); // 'fanout' will broadcast all messages to all the queues it knows\n\n// 启动服务\nconst app = await creatApp('base-app-fanout', {\n  url: 'amqp://localhost',\n  reconnectTime: 2000,\n});\n\n// 发送到交换机，由于不持久化，需要等订阅服务起来之后再发\nmanager.sendToExchange(ex, '', Buffer.from(msg));\n\n// 等一段时间\nawait sleep(5000);\n\n// 校验结果\n\n// 关闭 producer\nawait manager.close();\n\n// 关闭 app\nawait closeApp(app);\n```\n\n----------------------------------------\n\nTITLE: Build Script - mwtsc - TypeScript\nDESCRIPTION: This code snippet demonstrates the `build` script configuration using `mwtsc`. The `--cleanOutDir` flag ensures that the output directory is cleaned before building. This command compiles the TypeScript code into JavaScript, preparing the application for deployment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"mwtsc --cleanOutDir\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use I18n in Nunjucks Template (HTML)\nDESCRIPTION: Demonstrates how to use the I18n function in a Nunjucks template to display translated text.  The `i18n` function is used within the template to translate a message with given arguments.  Requires `@midwayjs/i18n`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<span>{{ i18n('hello', user) }}</span>\n```\n\n----------------------------------------\n\nTITLE: Adding Component and Framework Config Definition\nDESCRIPTION: This commit adds definitions for component and framework configurations within the Midway.js framework. This provides a structured way to define and manage configuration settings for both components and the overall framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nadd component and framework config definition ([#1367](https://github.com/midwayjs/midway/issues/1367)) ([b2fe615](https://github.com/midwayjs/midway/commit/b2fe6157f99659471ff1333eca0b86bb889f61a3))\n```\n\n----------------------------------------\n\nTITLE: Adding Midway Task Component\nDESCRIPTION: This commit introduces a new task component to the MidwayJS framework, likely enabling the scheduling and execution of background tasks or jobs. The task component simplifies the process of defining and managing asynchronous operations within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_12\n\nLANGUAGE: N/A\nCODE:\n```\nbefb81d\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/jwt to package.json\nDESCRIPTION: This snippet demonstrates how to add the @midwayjs/jwt dependency to the dependencies section of the package.json file. This is an alternative to using the npm install command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/jwt.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/jwt\": \"^3.0.0\"\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Configuration - TypeScript\nDESCRIPTION: Configures the caching mechanism for the @midwayjs/captcha component using @midwayjs/cache-manager. By default, it uses an in-memory store named 'captcha'.  Configuration shows how to set the memory store client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/captcha.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  cacheManager: {\n    clients: {\n      captcha: {\n        store: 'memory',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Sequelize Auto Midway Help Usage\nDESCRIPTION: Displays the help information for the sequelize-auto-midway command. This output shows the available command-line options, their descriptions, and how to use them. The help information includes parameters for database connection, output directory, dialect selection, and various model generation options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/sequelize_generator.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUsage: npx sequelize-auto-midway -h <host> -d <database> -p [port] -u <user> -x\n[password] -e [engine]\n\nOptions:\n    --help               Show help                                   [boolean]\n    --version            Show version number                         [boolean]\n-h, --host               IP/Hostname for the database.                [string]\n-d, --database           Database name.                               [string]\n-u, --user               Username for database.                       [string]\n-x, --pass               Password for database. If specified without providing\n                          a password, it will be requested interactively from\n                          the terminal.\n-p, --port               Port number for database (not for sqlite). Ex:\n                          MySQL/MariaDB: 3306, Postgres: 5432, MSSQL: 1433\n                                                                      [number]\n-c, --config             Path to JSON file for Sequelize-Auto options and\n                          Sequelize's constructor \"options\" flag object as\n                          defined here:\n                          https://sequelize.org/master/class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor\n                                                                      [string]\n-o, --output             What directory to place the models.          [string]\n-e, --dialect            The dialect/engine that you're using: postgres,\n                          mysql, sqlite, mssql                         [string]\n-a, --additional         Path to JSON file containing model options (for all\n                          tables). See the options: https://sequelize.org/master/class/lib/model.js~Model.html#static-method-init\n                                                                      [string]\n    --indentation        Number of spaces to indent                   [number]\n-t, --tables             Space-separated names of tables to import     [array]\n-T, --skipTables         Space-separated names of tables to skip       [array]\n--caseModel, --cm        Set case of model names: c|l|o|p|u\n                          c = camelCase\n                          l = lower_case\n                          o = original (default)\n                          p = PascalCase\n                          u = UPPER_CASE\n--caseProp, --cp         Set case of property names: c|l|o|p|u\n--caseFile, --cf         Set case of file names: c|l|o|p|u|k\n                          k = kebab-case\n--noAlias                Avoid creating alias `as` property in relations\n                                                                     [boolean]\n--noInitModels           Prevent writing the init-models file        [boolean]\n-n, --noWrite            Prevent writing the models to disk          [boolean]\n-s, --schema             Database schema from which to retrieve tables[string]\n-v, --views              Include database views in generated models  [boolean]\n-l, --lang               Language for Model output: es5|es6|esm|ts\n                          es5 = ES5 CJS modules (default)\n                          es6 = ES6 CJS modules\n                          esm = ES6 ESM modules\n                          ts = TypeScript                             [string]\n--useDefine              Use `sequelize.define` instead of `init` for es6|esm|ts\n--singularize, --sg      Singularize model and file names from plural table\n                          names\n```\n\n----------------------------------------\n\nTITLE: Initialize classes in onReady using getAsync\nDESCRIPTION: This code snippet illustrates the traditional way of initializing classes during the application startup in MidwayJS using the onReady method and the container.getAsync method. It shows how RedisErrorListener and DataSyncListener are instantiated within the onReady lifecycle hook.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/auto_run.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n//...\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  async onReady(container) {\n    await container.getAsync(RedisErrorListerner);\n    await container.getAsync(DataSyncListerner);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Configuration in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet defines the default configuration for a MidwayJS web application. It sets the port to 7001 under the `egg` property.  This configuration is typically placed in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  egg: {\n    port: 7001\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-Framework Application with createBootstrap in TypeScript\nDESCRIPTION: This code snippet illustrates how to test a multi-framework MidwayJS application using createBootstrap.  It loads the application using the bootstrap.js file, retrieves a specific framework's app instance (in this case, WEB_KOA), and then performs tests. Finally, it closes the bootstrap instance to clean up resources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/multi_framework_start.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBootstrap } from '@midwayjs/mock';\nimport { MidwayFrameworkType } from '@midwayjs/decorator';\n\ndescribe('/test/new.test.ts', () => {\n  it('should GET /', async () => {\n    // create app\n    const bootstrap = await createBootstrap(join(process.cwd(), 'bootstrap.js'));\n    const app = bootstrap.getApp(MidwayFrameworkType.WEB_KOA);\n\n    // expect and test\n\n    // close bootstrap\n    await bootstrap.close();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Dependency to Package.json\nDESCRIPTION: This JSON snippet shows how to add @midwayjs/redis as a dependency in your package.json file.  This ensures that the Redis module is installed when the project dependencies are resolved.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/redis\": \"^3.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: pkg Configuration (package.json)\nDESCRIPTION: This JSON snippet shows the configuration for pkg within the package.json file. It defines the entry point, included scripts, assets, target platforms, and output path for the packaged executable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-midway-project\",\n  // ...\n  \"devDependencies\": {\n    // ...\n    \"@midwayjs/bundle-helper\": \"^1.2.0\",\n    \"pkg\": \"^5.8.1\"\n  },\n  \"scripts\": {\n    // ...\n    \"pkg\": \"pkg . -d > build/pkg.log\",\n    \"bundle\": \"bundle && npm run build\"\n  },\n  \"bin\": \"./bootstrap.js\",\n  \"pkg\": {\n    \"scripts\": \"dist/**/*.js\",\n    \"assets\": [],\n    \"targets\": [\n      \"node18-macos-arm64\"\n    ],\n    \"outputPath\": \"build\"\n  },\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Camel Case Conversion Example\nDESCRIPTION: Demonstrates how MidwayJS converts class names to camel case for dependency injection identifiers.  It shows how two uppercase letters are handled in the conversion process.  Uses the camelcase library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n➜  midway_v2_demo git:(master) ✗ node\n\n> require('camelCase')('UserMQController')\n'userMqController'\n>\n```\n\n----------------------------------------\n\nTITLE: Combining Context Types from Multiple Frameworks\nDESCRIPTION: This code snippet demonstrates how to combine context types from multiple frameworks (e.g., KOA and Bull) using type intersection. This is useful when a service needs to be called by different frameworks with different context types.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { Context as BullContext } from '@midwayjs/bull';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  ctx: Context & BullContext;\n\n  async getUser() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing RabbitMQ Parameter Error in MidwayJS\nDESCRIPTION: This snippet indicates a bug fix addressing a parameter error specifically related to the RabbitMQ integration in MidwayJS. This ensures correct configuration and usage of RabbitMQ within the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n- rabbitmq parameter error ([#1002](https://github.com/midwayjs/midway/issues/1002)) ([cdbd5f9](https://github.com/midwayjs/midway/commit/cdbd5f9e5ba3b1d1e2cf26cb59eaec9447514416))\n```\n\n----------------------------------------\n\nTITLE: Adding the start script to package.json\nDESCRIPTION: This JSON snippet adds a `start` script to the `package.json` file. This script sets the `NODE_ENV` environment variable to `production` and then executes the `bootstrap.js` file using Node.js.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"scripts\": {\n  \"start\": \"NODE_ENV=production node ./bootstrap.js\",\n},\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Swagger UI JSON Path\nDESCRIPTION: This commit fixes an issue related to the swagger ui where the JSON path was not being correctly resolved. The fix ensures that the swagger UI can correctly load and display the API documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- swagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Enabling the @midwayjs/upload component\nDESCRIPTION: This TypeScript code demonstrates how to import and enable the @midwayjs/upload component within a Midway.js application's configuration.  It shows how to add the upload module to the imports array within the @Configuration decorator. This imports and registers the upload component into the application context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as upload from '@midwayjs/upload';\n\n@Configuration({\n  imports: [\n    // ...other components\n    upload\n  ],\n  // ...\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration\nDESCRIPTION: This TypeScript code demonstrates how to configure a global middleware in Midway Hooks using `createConfiguration`. The `logger` middleware is applied to all routes in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/middleware.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  hooks,\n  createConfiguration,\n} from '@midwayjs/hooks';\nimport logger from './logger';\n\n// Global Middleware\nexport default createConfiguration({\n  imports: [\n    // highlight-start\n    hooks({\n      middleware: [logger],\n    }),\n    // highlight-end\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: CMQ Trigger Implementation in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a CMQ trigger in a Midway.js serverless function using decorators. It shows the import statements for necessary modules, the declaration of a class and method, and the use of the `@ServerlessTrigger` decorator to specify the trigger type, topic, and tags. The `handleCMQEvent` method will be executed when a message is received on the specified topic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_cmq.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context, SCF } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloTencentService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.MQ, {\n    topic: 'test-topic',\n    tags: 'bbb',\n  })\n  async handleCMQEvent(event: SCF.CMQEvent) {\n    // xxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Axios Installation Dependency in Bash\nDESCRIPTION: This snippet shows how to install the `@midwayjs/axios` package using npm.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/axios@3 --save\n```\n\n----------------------------------------\n\nTITLE: Define Service with IoC (TypeScript)\nDESCRIPTION: This snippet defines a service in MidwayJS using IoC (Inversion of Control). It utilizes the `@provide` decorator to register the `UserService` in the container. The service retrieves a user based on provided options and returns a promise.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provide } from 'midway';\nimport { IUserService, IUserOptions, IUserResult } from '../../interface';\n\n// 装载 service 到 IoC 容器\n@provide('userService')\nexport class UserService implements IUserService {\n  async getUser(options: IUserOptions): Promise<IUserResult> {\n    return new Promise<IUserResult>((resolve) => {\n      // 10ms 之后返回用户数据\n      setTimeout(() => {\n        resolve({\n          id: options.id,\n          username: 'mockedName',\n          phone: '12345678901',\n          email: 'xxx.xxx@xxx.com',\n        });\n      }, 10);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Service with IoC (TypeScript)\nDESCRIPTION: This snippet demonstrates how to test a service that's been injected into the IoC container. It uses `app.applicationContext.getAsync` to retrieve the `userService` and then calls its `getUser` method, asserting the returned data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app, assert } from 'midway-mock/bootstrap';\nimport { IUserService } from '../../src/interface';\n\ndescribe('test/service/user.test.ts', () => {\n  it('#getUser', async () => {\n    // 取出 userService\n    const user = await app.applicationContext.getAsync<IUserService>('userService');\n    const data = await user.getUser({ id: 1 });\n    assert(data.id === 1);\n    assert(data.username === 'mockedName');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Component Provider Wrapper with Prefix\nDESCRIPTION: Exposes a method using `providerWrapper`, ensuring that the component's namespace is included in the ID to avoid conflicts with other providers. This is necessary when exposing methods that should be uniquely identified within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providerWrapper, IMidwayContainer } from '@midwayjs/core';\n\nexport async function contextHandler(container: IMidwayContainer) {}\n\nproviderWrapper([\n  {\n    id: 'book:contextHandler', // 这里务必增加组件前缀\n    provider: contextHandler,\n    scope: ScopeEnum.Request,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Add Cache Manager Dependency to package.json\nDESCRIPTION: Adds the @midwayjs/cache-manager as a dependency in the package.json file. This ensures that the cache manager module is included in the project's dependencies during installation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/cache-manager\": \"^3.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image\nDESCRIPTION: This command builds a Docker image named `helloworld` from the Dockerfile in the current directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t helloworld.\n```\n\n----------------------------------------\n\nTITLE: Setting Favicon in Koa with MidwayJS\nDESCRIPTION: This TypeScript code shows how to configure a favicon for a Koa application within MidwayJS using the `siteFile` configuration.  It reads the favicon file from the file system and sets it in the configuration. The static file middleware must be enabled to use the favicon.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  siteFile: {\n    favicon: readFileSync(join(__dirname, '../static/fav.ico')),\n  },\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  siteFile: {\n    enable: false,\n    // ...\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Prisma Engines Mirror via Environment Variable\nDESCRIPTION: This bash command sets the 'PRISMA_ENGINES_MIRROR' environment variable to a specified URL. This is used to configure Prisma to download required binaries from a mirror, which can be helpful in environments with restricted network access or slow download speeds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/prisma.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPRISMA_ENGINES_MIRROR=https://registry.npmmirror.com/-/binary/prisma/\n```\n\n----------------------------------------\n\nTITLE: Getting Database Connection\nDESCRIPTION: This code demonstrates how to retrieve a specific database connection by its name using `getConnection` from TypeORM.  It is used inside the `onReady` lifecycle hook of a MidwayJS configuration class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport { getConnection } from 'typeorm';\n\n@Configuration()\nexport class AutoConfiguration {\n  async onReady() {\n    const conn = getConnection('default');\n    console.log(conn.isConnected);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Client Configuration - TypeScript\nDESCRIPTION: This code snippet initializes the configuration for an HTTP client, including the base URL and timeout. The configuration is used to create an instance of the HTTPClient class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service_factory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 创建客户端的配置\nconst config = {\n  baseUrl: '',\n  timeout: 1000,\n};\n\n// 创建客户端实例的方法\nconst httpClient = new HTTPClient(config);\n```\n\n----------------------------------------\n\nTITLE: Default Session Configuration in @midwayjs/web\nDESCRIPTION: This code provides the default session configuration for @midwayjs/web, including the cookie key, maximum age, httpOnly flag, and encryption settings. These settings define how session data is stored and managed. Dependencies: @midwayjs/web.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const session = {\n  key: 'EGG_SESS',\n  maxAge: 24 * 3600 * 1000, // 1 天\n  httpOnly: true,\n  encrypt: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Async Iterators for Uploads - TypeScript\nDESCRIPTION: This code snippet illustrates how to use asynchronous iterators to handle uploaded files and form fields within a MidwayJS controller. It leverages the `@Files` and `@Fields` decorators to receive iterators for file and field data respectively.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-09-22-release-3.18.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Post, Files, Fields } from '@midwayjs/core';\nimport { UploadStreamFileInfo, UploadStreamFieldInfo } from '@midwayjs/busboy';\n\n@Controller('/')\nexport class HomeController {\n\n  @Post('/upload', /*... */)\n  async upload(\n    @Files() fileIterator: AsyncGenerator<UploadStreamFileInfo>,\n    @Fields() fieldIterator: AsyncGenerator<UploadStreamFieldInfo>\n  ) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mongoose Schema Equivalent\nDESCRIPTION: This TypeScript code provides the equivalent Mongoose schema for the Typegoose User entity, demonstrating how Typegoose simplifies model creation. It shows the direct Mongoose implementation for comparison.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst userSchema = new mongoose.Schema({\n  name: String,\n  jobs: [{ type: String }]\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding a Controller\nDESCRIPTION: This code snippet shows how to dynamically add a controller using the `addController` method of `MidwayWebRouterService`. It includes the controller class and options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, Inject, MidwayWebRouterService } from '@midwayjs/core';\nimport { DataController } from './controller/data.controller';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  async onReady() {\n    if (process.env.NODE_ENV === 'test') {\n      this.webRouterService.addController(DataController, {\n        prefix: '/test',\n        routerOptions: {\n          middleware: [\n            // ...\n          ]\n        }\n      });\n    }\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrated Call to Get Request Handler (Midway Hooks)\nDESCRIPTION: Illustrates how to make an integrated call to the `getPath` function, retrieving the path. This relies on the `getPath` function being defined in the specified file (`./api/lambda`). The expected output is the request path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/file-route.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getPath } from './api/lambda';\nconst path = await getPath();\nconsole.log(path); // /api/getPath\n```\n\n----------------------------------------\n\nTITLE: Default Security Configuration\nDESCRIPTION: This is the default configuration object for the security component. It defines settings for CSRF protection, X-Frame-Options, Content Security Policy (CSP), HTTP Strict Transport Security (HSTS), and XSS protection. Each property represents a specific security feature with configurable options such as enabling/disabling the feature and setting specific values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/security/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 默认配置\nexport const security = {\n  csrf: {\n    enable: true,\n    type: 'ctoken',\n    useSession: false,\n    cookieName: 'csrfToken',\n    sessionName: 'csrfToken',\n    headerName: 'x-csrf-token',\n    bodyName: '_csrf',\n    queryName: '_csrf',\n    refererWhiteList: [],\n  },\n  xframe: {\n    enable: true,\n    value: 'SAMEORIGIN',\n  },\n  csp: {\n    enable: false,\n  },\n  hsts: {\n    enable: false,\n    maxAge: 365 * 24 * 3600,\n    includeSubdomains: false,\n  },\n  noopen: {\n    enable: false,\n  },\n  nosniff: {\n    enable: false,\n  },\n  xssProtection: {\n    enable: true,\n    value: '1; mode=block',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Testing MNS Triggered Function\nDESCRIPTION: This snippet details testing an MNS-triggered function. An instance is retrieved using `getServerlessInstance`, and `handleMNSEvent` is invoked with a mocked MNS event, created using `mockMNSEvent` from `@midwayjs/fc-starter`. The expected result is verified via `expect`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\nimport { mockMNSEvent } from '@midwayjs/fc-starter';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n   it('should get result from oss trigger', async () => {\n     // ...\n     const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n     expect(await instance.handleMNSEvent(mockMNSEvent())).toEqual('hello world');\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Transformation Example (TypeScript)\nDESCRIPTION: Shows an example how to disable auto transformation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Validate(false)\nasync updateUser(@Body(ALL) user: UserDTO ) {\n  // user instanceof UserDTO  => false\n}\n```\n\n----------------------------------------\n\nTITLE: Import Component in Application (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import a component into a MidwayJS application's configuration file. It imports the `midway-component-book` component and adds it to the `imports` array in the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts of application or function\nimport { Configuration } from '@midwayjs/core';\nimport * as book from 'midway-component-book';\n\n@Configuration({\n  imports: [book]\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Add koa-static-cache middleware to @midwayjs/koa\nDESCRIPTION: This snippet shows how to integrate the `koa-static-cache` middleware in a @midwayjs/koa application for serving static files. It configures the middleware with a URL prefix and a directory to serve files from.  Requires installation of the koa-static-cache package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/static_file.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/koa';\nimport * as staticCache from 'koa-static-cache';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(\n      staticCache({\n        prefix: '/public/',\n        dir: path.join(this.app.getAppDir(), 'public'),\n      })\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Express Port\nDESCRIPTION: This code snippet demonstrates how to modify the default port for the Express module. In this example, the port is changed from 7001 to 6001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/express.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  express: {\n    port: 6001\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Install ali-oss dependency\nDESCRIPTION: Installs the ali-oss package and its TypeScript definition using npm.  ali-oss is used to interact with Alibaba Cloud's Object Storage Service (OSS). The @types/ali-oss package provides TypeScript type definitions for the ali-oss library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/oss_upload.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i ali-oss -S && npm i @types/ali-oss -D\n```\n\n----------------------------------------\n\nTITLE: Using concatSeries in MidwayJS Pipeline\nDESCRIPTION: This code snippet demonstrates the usage of `concatSeries` method to execute pipeline stages serially. The `concatSeries` method executes the defined pipeline stages (`VideoFeeds`, `AccountMap`, `CrowFeeds`) in sequence and returns an array containing the results of each stage. The `args` parameter allows passing arguments to each stage in the pipeline.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // Declare a pipeline here\n  @Pipeline([VideoFeeds, AccountMap, CrowFeeds])\n  stages: IPipelineHandler;\n\n  async runConcatSeries(): Promise<any> {\n\t\t// here serially execute videoFeeds, accountMap, crowdFeeds\n    return this.stages.concatSeries<any>({\n      args: {aa: 123}\n    });\n\n    // The result returned here is an array that is assembled with the object returned by concat.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Development Script Using mwtsc\nDESCRIPTION: This JSON snippet defines a `dev` script within the `scripts` section of a `package.json` file. It uses the `mwtsc` tool to watch for file changes, build the TypeScript code, and then run the application using `@midwayjs/mock/app.js`.  The script uses the built-in API (`initializeGlobalApplicationContext` of @midwayjs/core) to create a service without going through `bootstrap.js` and operates in single process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"scripts\": {\n     \"dev\": \"mwtsc --watch --run @midwayjs/mock/app.js\",\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Name Args in MidwayJS\nDESCRIPTION: This code snippet fixes a bug related to event handling in MidwayJS by adding event name arguments. This enhancement ensures that event handlers receive the correct event name as an argument, enabling them to respond appropriately to different events within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bug Fixes\n\n//- add event name args ([#986](https://github.com/midwayjs/midway/issues/986)) ([bfd8232](https://github.com/midwayjs/midway/commit/bfd82320aee8600d8fa30bd2821a0e68c80fd755))\n```\n\n----------------------------------------\n\nTITLE: Install Jaeger Exporter and Propagator (Bash)\nDESCRIPTION: Installs the Jaeger exporter and propagator packages using npm.  These are required for sending OpenTelemetry traces to a Jaeger backend.  Ensure npm is installed and configured before running these commands.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @opentelemetry/exporter-jaeger @opentelemetry/propagator-jaeger\n```\n\n----------------------------------------\n\nTITLE: Getting DataSource Name by Model\nDESCRIPTION: This code snippet explains how to get the data source name associated with an entity using `getDataSourceNameByModel`.  It shows usage scenarios and discusses limitations when an entity is associated with multiple data sources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// 下面为伪代码\nimport { SimpleUser } from '../entity/user.entity';\n\nclass UserService {\n  // 这里一般会注入一个实体类对应的 Model，包含增删改查方法\n  @InjectEntityModel(SimpleUser)\n  userModel;\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Restart Application by Name\nDESCRIPTION: This command restarts a PM2-managed application by its name. It's useful for applying configuration changes or recovering from errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/pm2.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pm2 restart test_app\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status Code with @HttpCode\nDESCRIPTION: This code demonstrates how to set a custom HTTP status code for a response using the `@HttpCode` decorator. The `home` method will return a 201 status code instead of the default 200.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Provide, HttpCode } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  @HttpCode(201)\n  async home() {\n    return 'Hello Midwayjs!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Controller Files\nDESCRIPTION: This code snippet shows the directory structure of a MidwayJS application, highlighting the location of controller files within the `src/controller` directory. It illustrates where controller files like `home.ts` reside in the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   └── controller\n│       └── home.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Support multi entities manager in Midway\nDESCRIPTION: This commit fixes a bug in Midway that prevented the support for mikro-orm multi entities manager in request context. It allows multiple entities to be managed within a request context, enabling more complex data operations and improving the framework's ability to handle multi-entity scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mikro/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Configure Luckyeye Rule Package\nDESCRIPTION: This configuration specifies the rule packages to be used by `luckyeye`. The `midway_v2` package is used for checking compatibility with Midway v2.  This configuration is added to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/luckyeye.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"midway-luckyeye\": {\n  \"packages\": [\n    \"midway_v2\"\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Bull Configuration in TypeScript\nDESCRIPTION: This code snippet demonstrates the configuration structure for the original Bull component in MidwayJS. It specifies the default queue options, including the Redis connection details (port and host). This configuration is used to connect to the Redis instance for queue operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2025-01-14-release-3.20.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Bull\nexport default {\n  bull: {\n    defaultQueueOptions: {\n      redis: {\n        port: 6379,\n        host: '127.0.0.1',\n      },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Repository Mode\nDESCRIPTION: This TypeScript code demonstrates how to enable repository mode for a specific data source in the Sequelize configuration. This is done by adding the `repositoryMode: true` property to the data source configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nimport { Person } from '../entity/person.entity';\n\nexport default {\n  // ...\n  sequelize: {\n    dataSource: {\n      default: {\n        // ...\n        entities: [Person],\n\n        // 多了这一个\n        repositoryMode: true,\n      },\n    },\n    sync: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: External Method Injection with Namespace\nDESCRIPTION: Illustrates how to inject a method exposed by a component using `providerWrapper`, specifying the component's namespace. This ensures that the correct method is injected and used within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/decorator';\n\n@Provide()\nexport class Library {\n\n  @Inject('book:contextHandler');\n  contextHandler;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Logger and Application Context\nDESCRIPTION: Demonstrates how to access the logger and application context within a queue task. The logger can be injected or accessed from the context, allowing for logging task execution details.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Inject, Provide, Queue } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/koa';\n\n@Queue()\n@Provide()\nexport class QueueTask {\n  @App()\n  app: Application;\n\n  @Inject()\n  logger;\n\n  async execute(params) {\n    this.logger.info(`====>QueueTask execute`);\n    this.app.getApplicationContext().registerObject(`queueConfig`, JSON.stringify(params));\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Inject, Provide, Queue } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/koa';\n\n@Queue()\n@Provide()\nexport class QueueTask {\n  @App()\n  app: Application;\n\n  @Inject()\n  ctx;\n\n  async execute(params) {\n    this.ctx.logger.info(`====>QueueTask execute`);\n    this.app.getApplicationContext().registerObject(`queueConfig`, JSON.stringify(params));\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enhance Cache Functionality - Javascript\nDESCRIPTION: This commit enhances the cache functionality in MidwayJS, addressing issue #1103. The enhancement likely includes improvements to caching mechanisms, performance, or configurability.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nenhance cache for [#1103](https://github.com/midwayjs/midway/issues/1103) ([#1189](https://github.com/midwayjs/midway/issues/1189)) ([562236c](https://github.com/midwayjs/midway/commit/562236cfa5970d47454f26d92c350165d73a63cd))\n```\n\n----------------------------------------\n\nTITLE: Defining a Timer Trigger with Cron Expression in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a Timer trigger in a Midway.js service using a cron expression. The `@ServerlessTrigger` decorator is used to configure the trigger, specifying the trigger type as `TIMER` and providing the cron expression for scheduling the function execution. The function `handleTimerEvent` will be executed according to the defined cron schedule. Requires `@midwayjs/decorator` and `@midwayjs/faas` dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_timer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context, SCF } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloTencentService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.TIMER, {\n    type: 'cron',\n    value: '*/60 * * * * * *', // 每 60s 触发\n  })\n  async handleTimerEvent(event: SCF.TimerEvent) {\n    this.ctx.logger.info(event);\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using hook to load Egg application in MidwayJS\nDESCRIPTION: This commit modifies the loading of the Egg application in MidwayJS to use a hook. This likely improves the application's lifecycle management or allows for more customizable loading behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nuse hook to load egg application ([#1782](https://github.com/midwayjs/midway/issues/1782)) ([b47f27b](https://github.com/midwayjs/midway/commit/b47f27bf441431ddb1d0d35d5ee0ae80ae56fce8))\n```\n\n----------------------------------------\n\nTITLE: Rendering a Nunjucks template in a Midway.js controller\nDESCRIPTION: This TypeScript code shows how to render a Nunjucks template from within a Midway.js controller. It injects the `Context` and uses the `ctx.render` method to render the `test.nj` template, passing in a `user` variable with the value 'midway'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render() {\n    await ctx.render('test.nj', { user: 'midway' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming to New Package in Midway.js\nDESCRIPTION: This commit signifies a transformation to a new package structure within Midway.js. This likely involves refactoring and reorganization of the codebase. The commit hash is 9144b48.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Configure Midway CLI test script in package.json\nDESCRIPTION: This snippet shows how to configure the test script in the `package.json` file to use the Midway CLI for running tests. This includes TypeScript support via the `--ts` flag.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"midway-bin test --ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating body-parser dependency\nDESCRIPTION: This snippet updates the body-parser dependency to version v1.20.1.  Body-parser is a middleware used to parse incoming request bodies before your handlers process them.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding third-party instrumentation\nDESCRIPTION: This snippet demonstrates how to add a third-party instrumentation, such as RedisInstrumentation, to the OpenTelemetry SDK during initialization.  This allows tracing of Redis operations. If auto-instrumentations-node is used, it already includes commonly used instrumentations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { RedisInstrumentation } = require('@opentelemetry/instrumentation-redis');\n// ...\n\n// 初始化一个 open-telemetry 的 SDK\nconst sdk = new NodeSDK({\n  // ...\n\n  // 这里仅是添加的示例，如果使用了 auto-instrumentations-node，已经包含了下面的 instrumentation\n  instrumentations: [\n    new RedisInstrumentation(),\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Middleware Properties in Init\nDESCRIPTION: This snippet demonstrates how to dynamically modify middleware properties such as 'match' or 'ignore' within the `init` lifecycle hook. It merges configuration values from `reportConfig` into the middleware's routing rules during the initialization phase.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  // 某个中间件的配置\n  @Config('report')\n  reportConfig;\n\n  @Init()\n  async init() {\n    // 动态合并一些规则\n    if (this.reportConfig.match) {\n      this.match = ['/api/index', '/api/user'].concat(this.reportConfig.match);\n    } else if (this.reportConfig.ignore) {\n      this.match = [].concat(this.reportConfig.ignore);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Registry with npm init\nDESCRIPTION: This command specifies a custom npm registry using the `--registry` parameter.  This is useful when working with private or mirror registries.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --registry=https://registry.npmmirror.com\n```\n\n----------------------------------------\n\nTITLE: Defining Timer Event Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for timer events, specifying properties such as type (cron, every, interval), value (cron expression or interval), payload, version, and enable status.  This allows scheduling of serverless functions based on time.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TimerEvent {\n  type?: 'cron' | 'every' | 'interval';\n  value: string;\n  payload?: string;\n  version?: string;\n  enable?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Socket.IO dependency in Midway.js\nDESCRIPTION: This commit updates the socket.io packages to version 4.5.3 within the Midway.js project. This ensures that the project uses the latest features and security updates provided by socket.io.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n3bc64d60d1648e18304259f1b957349f8d8e9ac6\n```\n\n----------------------------------------\n\nTITLE: Adding Socket Middleware Support in MidwayJS\nDESCRIPTION: This commit introduces support for socket connection and message middleware in MidwayJS. This allows developers to intercept and process socket connections and messages, enabling functionalities like authentication, logging, and data transformation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsupport socket connection and message middleware ([#1984](https://github.com/midwayjs/midway/issues/1984)) ([886d0bf](https://github.com/midwayjs/midway/commit/886d0bf6b47aecf870df15853d4ba82256c08858))\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Version with npm\nDESCRIPTION: This command upgrades all Midway dependencies to the latest version using npm. The `-u` flag triggers the upgrade process. It initially performs a check and then can be used with `-w` to write changes to `package.json` and `package-lock.json`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/version_check.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest -u\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest -u -w\n```\n\n----------------------------------------\n\nTITLE: Adding the gRPC component to the configuration\nDESCRIPTION: This code demonstrates how to add the `@midwayjs/grpc` component to the MidwayJS configuration. It imports the `grpc` module and includes it in the `imports` array of the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { Configuration } from '@midwayjs/decorator';\nimport * as grpc from '@midwayjs/grpc';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [grpc],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class AutoConfiguration {}\n\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration for Socket.IO\nDESCRIPTION: This snippet shows how to configure Cross-Origin Resource Sharing (CORS) settings for Socket.IO in a MidwayJS application. This is necessary when the client and server are on different domains or ports.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default\nexport default {\n  socketIO: {\n    cors: {\n      origin: \"http://localhost:8080 \",\n      methods: [\"GET\", \"POST\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/static-file dependency\nDESCRIPTION: This command installs the @midwayjs/static-file package as a project dependency using npm. This package provides the functionality for serving static files in a Midway application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/static_file.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/static-file@3 --save\n```\n\n----------------------------------------\n\nTITLE: Adding Event Name Arguments in MidwayJS\nDESCRIPTION: This bug fix adds arguments for the event name within the MidwayJS framework. The associated commit is bfd82320aee8600d8fa30bd2821a0e68c80fd755 and addresses issue #986.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Using @Session Decorator in @midwayjs/koa\nDESCRIPTION: This code shows how to use the `@Session` decorator to access session data in a Midway.js Koa controller. It demonstrates passing a default value and updating the session. Dependencies: @midwayjs/decorator, @midwayjs/koa.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide, Inject, Session, ALL } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/koa';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home(@Session() visits = 1) {\n    this.req.session.visits = session.visits = visits + 1;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Logger\nDESCRIPTION: This TypeScript code shows how to configure the MQTT component's logger. Specifically, it configures the `fileLogName` which determines the name of the log file where MQTT logs will be written.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     // ...\n     mqttLogger: {\n       fileLogName: 'midway-mqtt.log',\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default DataSourceName\nDESCRIPTION: This code snippet shows how to configure a default data source name using the `defaultDataSourceName` configuration option. If the user doesn't provide the data source, the default value would be used. If no default data source specified, the last set data source is returned.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const mysql = {\n  dataSource: {\n    dataSource1: {\n      // ...\n    },\n    dataSource2: {\n      // ...\n    },\n    dataSource3: {\n      // ...\n    },\n  }\n  defaultDataSourceName: 'dataSource2',\n}\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Koa Application Instance\nDESCRIPTION: This code snippet demonstrates how to inject the Koa Application instance into a controller using the `@App` decorator. It allows access to Koa-specific application methods within the controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/req_res_app.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/koa';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @App()\n  app: Application;\n\n  @Get('/')\n  async home() {\n    // this.app.use(xxx)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Namespace of the Application\nDESCRIPTION: This code snippet shows how to use `this.app.getNamespace()` to retrieve the framework type (namespace) of the component the current app belongs to (e.g., 'koa').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getNamespace();\n// 'koa'\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Routes using Decorators\nDESCRIPTION: This code demonstrates how to apply middleware to specific routes using the `middleware` option in the `@controller` and `@get` decorators.  The middleware can be specified as a string (referring to a `WebMiddleware` class in the IoC container) or as a Koa middleware function. It also shows dependency injection using `@inject`\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/controller.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\n@controller('/', { middleware: ['homeMiddleware'] })\nexport class My {\n  @inject()\n  ctx;\n\n  @get('/', { middleware: ['apiMiddleware'] })\n  async index() {\n    this.ctx.body = this.ctx.home + this.ctx.api;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compile and Publish Component (Bash)\nDESCRIPTION: This bash command demonstrates how to compile and publish a MidwayJS component to npm. It runs the `npm run build` command to compile the component and then runs `npm publish` to publish it to npm.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n## Compile and publish the corresponding component\n$ npm run build && npm publish\n```\n\n----------------------------------------\n\nTITLE: Disabling Custom Domain for HTTPS (C++)\nDESCRIPTION: This snippet demonstrates how to disable the custom domain temporarily by setting `custom.customDomain` to `false` in the `f.yml` file after configuring the HTTPS certificate in the cloud console. This prevents resetting the domain to HTTP on the next release.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\ncustom:\n\tcustomDomain: false\n```\n\n----------------------------------------\n\nTITLE: Run single test file using Jest\nDESCRIPTION: This snippet shows how to run a single test file using the Jest command-line interface.  It targets a specific test file by its path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ jest test/controller/api.ts\n```\n\n----------------------------------------\n\nTITLE: Sequelize Auto Midway Usage Example\nDESCRIPTION: Executes the sequelize-auto-midway command to generate Sequelize models. This command connects to a MySQL database, retrieves table schemas, and generates model files in the specified output directory.  The command also uses an additional configuration file to define model options such as timestamps and paranoid mode.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/sequelize_generator.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Recommended\n# Please replace the configuration information\nnpx sequelize-auto-midway -h localhost -d yourDBname -u root -x yourPassword -p 13306 --dialect mysql -o ./models --noInitModels true --caseModel c --caseProp c --caseFile c --indentation 1 -a ./additional.json\n```\n\n----------------------------------------\n\nTITLE: Throw a Custom Http Error\nDESCRIPTION: This code snippet shows how to throw the custom HTTP error defined previously within a MidwayJS application. It imports the custom error class and throws an instance of it.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomHttpError } from './error/custom.error';\n\n// ...\n\nasync findAll() {\n  throw new CustomHttpError();\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling CoreLogger Info Console Output in Local Environment in MidwayJS\nDESCRIPTION: This commit disables the coreLogger info console output in the local environment within MidwayJS. This change reduces the amount of noise in the console during local development. It improves the developer experience and makes it easier to focus on important messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nadaaaeaa9694c072de709c6643c0d7cffbdf3065\n```\n\n----------------------------------------\n\nTITLE: Configuring the Report Middleware in Midway.js (TypeScript)\nDESCRIPTION: This snippet shows how to configure the 'report' middleware in the `config.default.ts` file.  The `middleware` array specifies the names of the middleware to be loaded.  The name 'report' should match the filename (report.ts) without the extension.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/middleware.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  middleware: ['report'],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Injection Package Bash\nDESCRIPTION: This command installs the `injection` package using npm. The `--save` flag adds the package as a dependency to the `package.json` file.  This package provides the necessary tools for dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i injection --save\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/bull-board Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the @midwayjs/bull-board package as a dependency in your project's `package.json` file. After adding this, you need to reinstall the dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/bull-board\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Socket.IO Dependency\nDESCRIPTION: Installs the @midwayjs/prometheus-socket-io package to enable Prometheus monitoring for Socket.IO in a MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/prometheus-socket-io@3 --save\n```\n\n----------------------------------------\n\nTITLE: Default i18n Configuration\nDESCRIPTION: This code shows the default configuration for the i18n component in a Midway.js application. It defines the default locale, locale table (including fallbacks), and resolver options for determining the locale based on query parameters, headers, and cookies.  The `FORMAT.MS.ONE_YEAR` part assumes `FORMAT` is defined elsewhere.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// config/config.default.js\nexport const i18n = {\n  // default locale  \"en_US\"\n  defaultLocale: 'en_US',\n\n  // your can put your translate message here\n  localeTable: {\n    en_US: {\n      // group name\n      default: {\n        // hello: 'hello'\n      }\n    },\n    zh_CN: {\n      // group name\n      default: {\n        // hello: '你好'\n      }\n    },\n    fallbacks: {\n      //   'en_*': 'en_US',\n      //   pt: 'pt-BR',\n    },\n    writeCookie: true,\n    resolver: {\n      // URL parameter，default is \"locale\"\n      queryField: 'locale',\n      // Header key, default is \"locale\"\n      headerField: 'locale',\n      cookieField: {\n        fieldName: 'locale',\n        // Cookie domain，default is empty，valid in current domain\n        cookieDomain: '',\n        // Default validity period, one year.\n        cookieMaxAge: FORMAT.MS.ONE_YEAR,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating gRPC Proto Loader Dependency\nDESCRIPTION: This snippet updates the @grpc/proto-loader dependency to version ^0.6.0.  This is a bug fix related to gRPC proto loading, potentially resolving issues related to proto file handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/grpc/CHANGELOG.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n- **deps:** update dependency @grpc/proto-loader to ^0.6.0 ([#1505](https://github.com/midwayjs/midway/issues/1505)) ([67eaee7](https://github.com/midwayjs/midway/commit/67eaee791878908ccad8a1fdaac39ac6786e889e))\n```\n\n----------------------------------------\n\nTITLE: Checking Midway.js Package Versions\nDESCRIPTION: These commands check the versions of Midway.js packages installed in a project. They utilize the `midway-version` tool, which helps identify version inconsistencies or outdated packages. The tool can be executed using `npx` or `pnpx`, depending on the package manager used (npm/yarn or pnpm respectively).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/how_to_update_midway.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 社区用户\n$ npx midway-version\n# 内部用户\n$ tnpx @ali/midway-version\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 社区用户\n$ pnpx midway-version\n# 内部用户\n$ pnpx @ali/midway-version\n```\n\n----------------------------------------\n\nTITLE: Get Route Priority List API Usage\nDESCRIPTION: This code snippet demonstrates how to retrieve the route priority list. It shows how to call the `getRoutePriorityList` method and process the result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = await collector.getRoutePriorityList();\n```\n\n----------------------------------------\n\nTITLE: Get App Namespace API Usage\nDESCRIPTION: This code snippet shows how to use the `getNamespace` API on the application instance to determine the framework type the app belongs to (e.g., 'egg').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-01-30-release-3.10.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application } from '@midwayjs/web';\n\n@Controller()\nclass HomeController {\n\n  @App()\n  app: Application;\n\n  async invoke() {\n    // this.app.getNamespace()  => 'egg'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration File\nDESCRIPTION: This YAML file defines the Prometheus configuration, including scrape intervals and scrape configurations.  It configures Prometheus to scrape metrics from 'node' using file-based service discovery and from itself.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\nscrape_configs:\n  - job_name: 'node'\n    file_sd_configs:\n      - refresh_interval: 1m\n        files:\n          - '/etc/prometheus/targets.json'\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple View Engine Mappings\nDESCRIPTION: This snippet configures mapping for multiple view engines.  The example shows how to map `.ejs` extension to the `ejs` engine and `.nj` extension to the `nunjucks` engine. This setup allows the application to use different template engines for different file types.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport const view = {\n  mapping: {\n    '.ejs': 'ejs',\n    '.nj': 'nunjucks',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Query Parameter with type conversion (Typescript)\nDESCRIPTION: This code shows how to get query parameters and have them automatically converted to specific types.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/')\nasync getUser(@Query('id') id: number): Promise<User> {\n  console.log(typeof id)  // number\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/')\nasync getUser(@Query('id') id: boolean): Promise<User> {\n  console.log(typeof id)  // boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EggJS Framework in package.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the custom EggJS framework in the `package.json` file. The `egg.framework` property is used to specify the name of the custom framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/custom_eggjs.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ali-demo\",\n  \"egg\": {\n    \"framework\": \"fake-egg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OSS Event Structure\nDESCRIPTION: This JSON snippet illustrates the structure of an OSS event that is passed to the triggered function. It includes information about the event name, source, time, OSS bucket, object, region, request parameters, response elements, and user identity. This structure is described by `FC.OSSEvent`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_oss.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\": [\n    {\n      \"eventName\": \"ObjectCreated:PutObject\",\n      \"eventSource\": \"acs:oss\",\n      \"eventTime\": \"2017-04-21T12:46:37.000Z\",\n      \"eventVersion\": \"1.0\",\n      \"oss\": {\n        \"bucket\": {\n          \"arn\": \"acs:oss:cn-shanghai:123456789:bucketname\",\n          \"name\": \"testbucket\",\n          \"ownerIdentity\": \"123456789\",\n          \"virtualBucket\": \"\"\n        },\n        \"object\": {\n          \"deltaSize\": 122539,\n          \"eTag\": \"688A7BF4F233DC9C88A80BF985AB7329\",\n          \"key\": \"image/a.jpg\",\n          \"size\": 122539\n        },\n        \"ossSchemaVersion\": \"1.0\",\n        \"ruleId\": \"9adac8e253828f4f7c0466d941fa3db81161e853\"\n      },\n      \"region\": \"cn-shanghai\",\n      \"requestParameters\": {\n        \"sourceIPAddress\": \"140.205.128.221\"\n      },\n      \"responseElements\": {\n        \"requestId\": \"58F9FF2D3DF792092E12044C\"\n      },\n      \"userIdentity\": {\n        \"principalId\": \"123456789\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Scaffold Parameters with t_ prefix\nDESCRIPTION: This command shows how to pass parameters to the scaffold when the parameter name conflicts with a tool parameter. Use the `t_` prefix; the tool removes this prefix before passing the parameter to the scaffold.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --type=koa-v3 --t_type=ccc\n```\n\n----------------------------------------\n\nTITLE: Accessing body in Tencent Cloud Gateway\nDESCRIPTION: This TypeScript code shows how to access the request body when using Tencent Cloud Gateway. The `ctx.request.body` is assigned to the `body` variable which is then returned in an object along with it's type. The `body` variable's type will depend on the structure of the JSON.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = this.ctx.request.body;\nreturn {\n  type: typeof body,\n  body\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Info Component Dependency - package.json\nDESCRIPTION: This JSON snippet shows how to add the @midwayjs/info component as a dependency in the package.json file.  Ensure to run npm install after updating the file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/info.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/info\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Egg Application Load with Hook in MidwayJS\nDESCRIPTION: This code snippet resolves an issue where the Egg application was not being loaded correctly. It uses a hook to ensure proper loading of the Egg application within the MidwayJS framework. The commit associated with this fix is b47f27b.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/jwt/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nuse hook to load egg application ([#1782](https://github.com/midwayjs/midway/issues/1782)) ([b47f27b](https://github.com/midwayjs/midway/commit/b47f27bf441431ddb1d0d35d5ee0ae80ae56fce8))\n```\n\n----------------------------------------\n\nTITLE: Using @Query Decorator with and without parameter\nDESCRIPTION: This code illustrates two different ways of using the `@Query` decorator in MidwayJS. The first example shows how to retrieve a specific query parameter by passing the key to the decorator (e.g., `@Query('id')`). The second example shows how to retrieve the entire query object by calling `@Query()` without any parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// URL = /?id=1\nasync getUser(@Query('id') id: string) // id = 1\nasync getUser(@Query() queryData) // {\"id\": \"1\"}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Log Levels in TypeScript\nDESCRIPTION: This snippet defines various log levels. These log levels determine the minimum severity of messages that will be output to the logs. Lower numbers represent more critical messages (e.g., error), while higher numbers represent less critical messages (e.g., silly).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst levels = {\n  none: 0\n  error: 1\n  trace: 2\n  warn: 3\n  info: 4\n  verbose: 5\n  debug: 6\n  silly: 7\n  all: 8\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in Method Decorators in TypeScript\nDESCRIPTION: This code defines a method decorator `MyCustomDecorator` that accesses the request context within a MidwayJS application. It retrieves the context from the `REQUEST_OBJ_CTX_KEY` property of the instance, allowing for request-specific operations. It requires `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/decorator_api.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { REQUEST_OBJ_CTX_KEY } from '@midwayjs/core';\n\nexport function MyCustomDecorator(): MethodDecorator {\n  return (target: object, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const method = descriptor.value;\n    descriptor.value = function (...args) {\n      // 指向当前上层框架的上下文对象，上层框架的上下文对象请参考各上层框架文档。\n      console.log(this[REQUEST_OBJ_CTX_KEY]);\n\n      return method.apply(this, [...args]);\n    };\n    return descriptor;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Prettier Configuration for mwts\nDESCRIPTION: This JavaScript snippet shows how to create a Prettier configuration file that extends the default mwts Prettier configuration. It allows for consistent code formatting across the project, inheriting the rules defined in the mwts package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/mwts.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  ...require('mwts/.prettierrc.json'),\n};\n```\n\n----------------------------------------\n\nTITLE: Singleton Scope Example - UserService in HomeController (TypeScript)\nDESCRIPTION: This code demonstrates the effect of using a singleton scope for `UserService` when injected into a request-scoped `HomeController`. The `UserService` instance will be the same for all requests to `HomeController`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// This class is the default request scope (Request)\n@Provide() // Actually can be omitted\n@Controller()\nexport class HomeController {\n  @Inject()\n  userService: UserService;\n}\n\n\n// Set a single instance, the process level is unique.\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class UserService {\n\tasync getUser() {\n  \t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Cookies in HTTP Requests (TypeScript)\nDESCRIPTION: This snippet demonstrates how to pass cookies in an HTTP request using the `set` method of the `createHttpRequest` client. Cookies are added to the 'Cookie' header. This is useful for testing authentication or session-related functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst cookie = [\n  'koa.sess=eyJuYW1lIjoiaGFycnkiLCJfZXhwaXJlIjoxNjE0MTQ5OTQ5NDcyLCJfbWF4QWdlIjo4NjQwMDAwMH0=; path=/; expires=Wed, 24 Feb 2021 06:59:09 GMT; httponly',\n  'koa.sess.sig=mMRQWascH-If2-BC7v8xfRbmiNo; path=/; expires=Wed, 24 Feb 2021 06:59:09 GMT; httponly',\n];\n\nconst result = await createHttpRequest(app).get('/set_header').set('Cookie', cookie).query({ name: 'harry' });\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket Communication with Events - TypeScript\nDESCRIPTION: This TypeScript code demonstrates an alternative approach to testing WebSocket communication using the `once` method from the `events` module. It creates a MidwayJS application, establishes a WebSocket client connection, sends a message, and uses `once` to listen for a single 'message' event. It awaits the event and then asserts the result.  `once` returns a promise that resolves when the event is emitted.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sleep } from '@midwayjs/core';\nimport { once } from 'events';\nimport { createApp, close, createWebSocketClient } from '@midwayjs/mock';\n\n// ... 省略 describe\n\nit('should test create websocket app', async () => {\n\n  // 创建一个服务\n  const app = await createApp<Framework>(process.cwd());\n\n  // 创建一个客户端\n  const client = await createWebSocketClient(`ws://localhost:3000`);\n\n  // 发送事件\n  client.send(1);\n\n  // 用事件的 promise 写法监听\n  let gotEvent = once(client, 'message');\n  // 等待返回\n  let [data] = await gotEvent;\n\n  // 判断结果\n  expect(JSON.parse(data)).toEqual({\n    name: 'harry',\n    result: 6,\n  });\n\n  await sleep(1000);\n\n  // 关闭客户端\n  await client.close();\n\n  // 关闭服务端\n  await close(app);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Type Whitelist\nDESCRIPTION: This code snippet demonstrates how to configure the `mimeTypeWhiteList` parameter in the `busboy` configuration to restrict the allowed MIME types for uploaded files. It uses a nested array to define allowed MIME types for specific file extensions. The example shows how to allow only 'image/jpeg' for '.jpg' files and both 'image/jpeg' and 'image/png' for '.jpeg' files, enhancing security by preventing malicious file uploads.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/busboy';\nexport default {\n  // ...\n  busboy: {\n    // ...\n    // Extension whitelist\n    whitelist: uploadWhiteList,\n    // Only the following file types are allowed to be uploaded\n    mimeTypeWhiteList: {\n      '.jpg': 'image/jpeg',\n      // You can also set multiple MIME types. For example, the following allows files with the .jpeg suffix to be either jpg or png.\n      '.jpeg': ['image/jpeg', 'image/png'],\n      // Other types\n      '.gif': 'image/gif',\n      '.bmp': 'image/bmp',\n      '.wbmp': 'image/vnd.wap.wbmp',\n      '.webp': 'image/webp',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Property Decorator\nDESCRIPTION: This code snippet shows how to use the `@MemoryCache` decorator on a property of a class. When the `invoke` method is called, the `cacheValue` property will be populated with the value retrieved from the `MemoryStore` using the specified key ('aaa').  It imports the `MemoryCache` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MemoryCache } from 'decorator/memoryCache.decorator';\n\n// ...\nexport class UserService {\n  @MemoryCache('aaa')\n  cacheValue;\n\n  async invoke() {\n    console.log(this.cacheValue);\n    // => 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/tags dependency\nDESCRIPTION: This command installs the @midwayjs/tags package as a dependency using npm. This package provides tag management capabilities for MidwayJS applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tags.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/tags --save\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/process-agent\nDESCRIPTION: This command installs the @midwayjs/process-agent package as a project dependency using npm. It specifies version 2 and saves it to the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/process_agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/process-agent@2 -S\n```\n\n----------------------------------------\n\nTITLE: Example Event (application/json) - Alibaba Cloud API Gateway\nDESCRIPTION: This JSON represents the event payload received by a serverless function when using Alibaba Cloud API Gateway with '入参透传' enabled and a Content-Type of application/json. The body is base64 encoded. The framework automatically parses the JSON string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"eyJjIjoiYiJ9\",\n  \"headers\": {\n    \"X-Ca-Dashboard-Action\": \"DEBUG\",\n    \"X-Ca-Dashboard-Uid\": \"125087\",\n    \"X-Ca-Stage\": \"RELEASE\",\n    \"X-Ca-Dashboard-Role\": \"USER\",\n    \"User-Agent\": \"Apache-HttpClient/4.5.6 (Java/1.8.0_172)\",\n    \"Accept-Encoding\": \"gzip,deflate\",\n    \"Content-MD5\": \"Kry+hjKjc2lvIrwoJqdY9Q==\",\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  },\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"path\": \"/api/321\",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Messages to specific namespace and room\nDESCRIPTION: Send socket message to a specific namespace and a room, including sender.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// 从 app 发送\nthis.app.of('myNamespace').to('room').emit('event', 'message');\n// 从 ctx 发送\nthis.ctx.nsp.emit('bigger-announcement', 'the tournament will start soon');\n```\n\n----------------------------------------\n\nTITLE: Using the Property Decorator in a Class\nDESCRIPTION: This code shows how to use the `@MemoryCache` property decorator in a class (`UserService`). The `cacheValue` property is decorated with `@MemoryCache('aaa')`, which means it will retrieve the value associated with the key 'aaa' from the `MemoryStore` when the property is accessed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MemoryCache } from 'decorator/memoryCache.decorator';\n\n// ...\nexport class UserService {\n  @MemoryCache('aaa')\n  cacheValue;\n\n  async invoke() {\n    console.log(this.cacheValue);\n    // => 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Proxy Configuration Example\nDESCRIPTION: This TypeScript code snippet shows an example of a single proxy configuration.  The `match` property specifies a regular expression to match URLs containing \"/tfs/\". The `host` property defines the target host to proxy requests to (https://gw.alicdn.com).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/http-proxy.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nexport default {\n  httpProxy: {\n    match: /\\/tfs\\//,\n    host: 'https://gw.alicdn.com',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Service Definition with Provide\nDESCRIPTION: Service definition that gets mocked in the testing example.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test_more.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 真正的 service，放在 service/user.ts\n@provide('userService')\nexport class UserService {\n  async getUser() {\n    return 'zhang';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite for Cross-Origin Access (TypeScript)\nDESCRIPTION: This code demonstrates how to configure the `SameSite` attribute for session cookies to allow cross-origin access in a Midway.js application.  It sets `sameSite` to `'none'` and `secure` to `true` to enable cross-origin cookie sharing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  session: {\n    sameSite: 'none',\n    // 需要指定 Secure，否则 SameSite=None 无效\n    secure: true,\n    // ...\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Local Testing CMQ Trigger in TypeScript\nDESCRIPTION: This code snippet demonstrates how to test a CMQ trigger function locally using `@midwayjs/mock`. It shows the import statements for necessary modules, the creation of a function app, the retrieval of the service instance, and the use of `createCMQEvent` to create a mock CMQ event. The test case then calls the `handleCMQEvent` method with the mock event and asserts the expected result. This approach facilitates local testing and debugging of CMQ trigger functions without deploying to the cloud.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_cmq.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { HelloTencentService } from '../src/function/hello_tencent';\nimport { createCMQEvent } from '@midwayjs/serverless-scf-trigger';\nimport { join } from 'path';\n\ndescribe('test/hello_tencent.test.ts', () => {\n  let app: Application;\n  let instance: HelloTencentService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(),\n    });\n    instance = await app.getServerlessInstance<HelloTencentService>(HelloTencentService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from cmq trigger', async () => {\n    expect(await instance.handleCMQEvent(createCMQEvent())).toEqual('hello world');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/bullmq via npm\nDESCRIPTION: This snippet shows how to install the @midwayjs/bullmq package using npm. It's required to use the bullmq component in your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/bullmq@3 --save\n```\n\n----------------------------------------\n\nTITLE: Custom Session Store Configuration with memorystore\nDESCRIPTION: This example demonstrates how to use `memorystore` as a custom session store. It injects the `SessionStoreManager` and sets the session store to `MemoryStore`, configuring it with a check period of 24 hours to prune expired entries.  It requires the `@midwayjs/core`, `@midwayjs/express`, `@midwayjs/express-session`, and `memorystore` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as session from '@midwayjs/express-session';\nimport MemoryStore = require('memorystore');\n\n@Configuration({\n  imports: [\n    express,\n    session,\n  ],\n  //...\n})\nexport class AutoConfiguration {\n  @Inject()\n  sessionStoreManager: session.SessionStoreManager;\n\n  async onReady() {\n    this.sessionStoreManager.setSessionStore(MemoryStore, {\n      checkPeriod: 86400000 // prune expired entries every 24h\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provide Decorator Typescript\nDESCRIPTION: This code snippet uses the `@provide()` decorator to mark a class as injectable and automatically bind it to the IoC container. The `UserService` class can then be automatically scanned and managed by the container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\nexport class UserService {\n  @inject()\n  userModel;\n\n  async getUser(userId) {\n    return await this.userModel.get(userId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify context logger format\nDESCRIPTION: This TypeScript code demonstrates how to customize the format of the context logger in EggJS.  It defines a function `contextLoggerFormat` that takes the log information and returns a formatted string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  egg: {\n    contextLoggerFormat: info => {\n      const ctx = info.ctx;\n      return `${info.timestamp} ${info.LEVEL} ${info.pid} [${ctx.userId} - ${Date.now() - ctx.startTime}ms ${ctx.method}] ${info.message}`;\n    }\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Apply Multiple Error Filters\nDESCRIPTION: This code demonstrates how to apply multiple exception filters to a MidwayJS application. It imports necessary filters and applies both `NotFoundFilter` and `DefaultErrorFilter` using `app.useFilter`. Filters are applied in the order they appear in the array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App, Catch } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as koa from '@midwayjs/koa';\nimport { DefaultErrorFilter } from './filter/default.filter';\nimport { NotFoundFilter } from './filter/notfound.filter';\n\n@Configuration({\n  imports: [\n    koa\n  ],\n})\nexport class MainConfiguration {\n\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    this.app.useFilter([NotFoundFilter, DefaultErrorFilter]);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript interfaces from proto\nDESCRIPTION: This code shows the TypeScript interfaces generated from the `helloworld.proto` file by the `grpc-helper` tool.  It defines the `Greeter` service interface for the server-side implementation, `GreeterClient` interface for client-side implementation, and the `HelloRequest` and `HelloReply` interfaces for the request and response messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This file is auto-generated by grpc-helper\n */\n\nimport * as grpc from '@midwayjs/grpc';\n\n// 生成的命名空间\nexport namespace helloworld {\n  // 服务端使用的定义\n  export interface Greeter {\n    // Sends a greeting\n    sayHello(data: HelloRequest): Promise<HelloReply>;\n  }\n\n  // 客户端使用的定义\n  export interface GreeterClient {\n    // Sends a greeting\n    sayHello(options?: grpc.IClientOptions): grpc.IClientUnaryService<HelloRequest, HelloReply>;\n  }\n\n  // 请求体结构\n  export interface HelloRequest {\n    name?: string;\n  }\n\n  // 响应体结构\n  export interface HelloReply {\n    message?: string;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Run Midway.js Dev Server\nDESCRIPTION: This shell command starts the Midway.js development server. After the server is running, it opens the default web browser and navigates to `http://localhost:7001` to test the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_aggr.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run dev\n$ open http://localhost:7001\n```\n\n----------------------------------------\n\nTITLE: Building Project with NPM\nDESCRIPTION: This command builds the Midway Hooks project for production deployment. It compiles the code and prepares it for execution in a production environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/function/readme.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Binding Object Definition Typescript\nDESCRIPTION: This code shows how to bind a class (e.g., `UserService`) to the container. The `bind` method can either accept a string key along with the class or just the class itself, which will automatically analyze and generate an object definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserService {\n  private userModel;\n\n  async getUser(uid) {\n    // TODO\n  }\n}\n\n// 内部代码\nconst container = new Container(); // 创建容器\ncontainer.bind('userService', UserService); // 可以在绑定的时候传一个名字作为 key\ncontainer.bind(UserService); // 也可以直接传入 Class，自动分析对象的元信息生成对象定义\n```\n\n----------------------------------------\n\nTITLE: Creating a React Project from a Template\nDESCRIPTION: This command uses `npx degit` to clone the React template project from a GitHub repository into a directory named `hooks-app`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/intro.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit https://github.com/midwayjs/hooks/examples/react ./hooks-app\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with Force Exit\nDESCRIPTION: This code snippet demonstrates how to add the `forceExit` option to the Jest configuration. When set to `true`, Jest will force the process to exit after all tests have completed.  This is useful when tests leave resources running, such as timers or open connections, which prevent Jest from exiting normally.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures'],\n  coveragePathIgnorePatterns: ['<rootDir>/test/'],\n  forceExit: true,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Install @midwayjs/busboy Dependency\nDESCRIPTION: This command installs the @midwayjs/busboy package as a project dependency, enabling file upload capabilities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/busboy@3 --save\n```\n\n----------------------------------------\n\nTITLE: TestService Implementation\nDESCRIPTION: Defines a TestService class with methods to simulate fetching data related to video, account and tab information. These methods return promises that resolve to the DTO objects defined earlier.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide('service')\nclass TestService {\n  // 返回当前登录用户信息\n  async getAccount(args: any): Promise<AccountDto> {\n    return {\n      id: 'test_account_id',\n      nick: 'test hello',\n      isFollow: true,\n    };\n  }\n  // 返回视屏列表\n  async getVideos(args: any): Promise<VideoDto[]> {\n    return [\n      {\n        videoId: '123',\n        videoUrl: 'https://www.taobao.com/xxx.mp4',\n        videoTitle: 'test 1 video',\n      },\n      {\n        videoId: '234',\n        videoUrl: 'https://www.taobao.com/xxx234.mp4',\n        videoTitle: 'test 2 video',\n      },\n      {\n        videoId: '456',\n        videoUrl: 'https://www.taobao.com/xxx456.mp4',\n        videoTitle: 'test 3 video',\n      },\n    ];\n  }\n  // 返回tab页面\n  async getTab(args: any): Promise<TabDto> {\n    return {\n      title: 'test tab',\n      tabId: 'firstTab',\n      index: 0,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding View and Nunjucks Support in MidwayJS\nDESCRIPTION: This commit introduces support for views, specifically integrating EJS and Nunjucks templating engines within the MidwayJS framework. This allows developers to render dynamic content using these templating engines.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-nunjucks/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Diff\nCODE:\n```\n- add view, view-ejs and view-nunjucks ([#1308](https://github.com/midwayjs/midway/issues/1308)) ([a00f44b](https://github.com/midwayjs/midway/commit/a00f44bd769052245cd49d49ab417d621bb89caa))\n```\n\n----------------------------------------\n\nTITLE: Defining a weather data interface (TypeScript)\nDESCRIPTION: This code defines an interface (`WeatherInfo`) to represent the structure of the weather data received from the API. This ensures type safety and provides a clear definition of the data structure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\n\n// ...\n\nexport interface WeatherInfo {\n  weatherinfo: {\n    city: string;\n    cityid: string;\n    temp: string;\n    WD: string;\n    WS: string;\n    SD: string;\n    AP: string;\n    njd: string;\n    WSE: string;\n    time: string;\n    sm: string;\n    isRadar: string;\n    Radar: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Strategy in TypeScript\nDESCRIPTION: Define a JWT authentication strategy extending `PassportStrategy`. The `validate` method processes the JWT payload, and the `getStrategyOptions` method configures the strategy with the secret key and extraction method for the JWT from the request headers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// strategy/jwt-strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\n\n@CustomStrategy()\nexport class JwtStrategy extends PassportStrategy(\n  Strategy,\n  'jwt'\n) {\n  @Config('jwt')\n  jwtConfig;\n\n  async validate(payload) {\n    return payload;\n  }\n\n  getStrategyOptions(): any {\n    return {\n      secretOrKey: this.jwtConfig.secret,\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    };\n  }\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deregister Consul Service in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to manually deregister a service from Consul using the `deregister` method. It injects the Consul client and calls the `agent.service.deregister` method with the service name to remove it from Consul's service registry. The service name corresponds to the service ID in Consul.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/core';\nimport * as Consul from 'consul'\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n\n  @Inject('consul:consul')\n  consul: Consul.Consul;\n\n  @Get(\"/222\")\n  async home2() {\n    let res = await this.consul.agent.service.deregister('my-midway-project:30.10.72.195:7002');\n    console.log(res);\n\n    // ...\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Engine Root Directory (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the template engine root directory in a Midway application, modifying the default `app/view` directory to a custom location using `path.join(appInfo.baseDir, 'view')`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/config/config.default.ts\n\nmodule.exports = (appInfo) => {\n  return {\n    view: {\n      root: path.join(appInfo.baseDir, 'view'),\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Messages to namespace clients including the sender\nDESCRIPTION: This code shows sending a message to all clients in a specified namespace, including the sender.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// 从 app 发送\nthis.app.of('myNamespace').emit('bigger-announcement', 'the tournament will start soon');\n// 从 ctx 发送\nthis.ctx.nsp.emit('bigger-announcement', 'the tournament will start soon');\n```\n\n----------------------------------------\n\nTITLE: Run single test file using Midway CLI\nDESCRIPTION: This snippet shows how to run a single test file using the Midway CLI.  The `-f` flag specifies the path to the test file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin test -f test/controller/api.ts\n```\n\n----------------------------------------\n\nTITLE: mwtsc with port adjustment\nDESCRIPTION: This command runs mwtsc in watch mode, executes a file after compilation, and adjusts the HTTP port using the `--port` parameter. This parameter overrides any port configurations set in the code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc --watch --run @midwayjs/mock/app --port 7001\n```\n\n----------------------------------------\n\nTITLE: Enable Validate component\nDESCRIPTION: Enables the @midwayjs/validate component in the MidwayJS application's configuration file. It imports the necessary modules and adds 'validate' to the imports array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as validate from '@midwayjs/validate';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [koa, validate],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared npm Global Modules\nDESCRIPTION: This snippet shows how to configure a shared npm global modules directory for NVS to avoid reinstalling global modules when switching between Node.js versions.  It creates a directory, sets the npm prefix to this directory, and updates the PATH environment variable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/how_to_install_nodejs.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p ~/.npm-global\n$ npm config set prefix ~/.npm-global\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"export PATH=~/.npm-global/bin:$PATH\" >> ~/.zshrc\n$ source ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Parallel Pipeline Execution Example\nDESCRIPTION: Demonstrates the use of the `parallel` method to execute a pipeline concurrently. It shows how to define a pipeline with specific IValveHandler implementations and how the results are structured in an object keyed by the alias of each valve.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline([VideoFeeds, AccountMap, CrowFeeds])\n  stages: IPipelineHandler;\n  \n  async runParallel(): Promise<any> {\n    // 这里并发执行 videoFeeds、accountMap、crowFeeds\n    return this.stages.parallel<any>({\n      args: {aa: 123}\n    });\n    \n    // 返回的 result 结构\n    /*\n    {\n      // 以 accountMap 的 alias account 作为返回对象的 key\n      account: {\n        id: 'test_account_id',\n        nick: 'test hello',\n        isFollow: true,\n      },\n      // 以 videoFeeds 的 alias video 作为返回对象的 key\n      video: [\n        {\n          videoId: '123',\n          videoUrl: 'https://www.taobao.com/xxx.mp4',\n          videoTitle: 'test 1 video'\n        }, {\n          videoId: '234',\n          videoUrl: 'https://www.taobao.com/xxx234.mp4',\n          videoTitle: 'test 2 video'\n        }, {\n          videoId: '456',\n          videoUrl: 'https://www.taobao.com/xxx456.mp4',\n          videoTitle: 'test 3 video'\n        }\n      ],\n      // 以 crowFeeds 的 alias tab 作为返回对象的 key\n      tab: {\n        title: 'test tab',\n        tabId: 'firstTab',\n        index: 0\n      }\n    }\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MySQL DataSourceManager\nDESCRIPTION: This code snippet defines a MySQL DataSourceManager class that extends the built-in DataSourceManager class from MidwayJS. It overrides the createDataSource, getName, checkConnected, and destroyDataSource methods to provide MySQL-specific implementations. It requires the @midwayjs/core and mysql2 packages as dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSourceManager, Provide, Scope, ScopeEnum } from '@midwayjs/core';\nimport * as mysql from 'mysql2';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MySqlDataSourceManager extends DataSourceManager<mysql.Connection> {\n\t// Create a single instance\n  protected async createDataSource(config: any, dataSourceName: string): Promise<mysql.Connection> {\n    return mysql.createConnection(config);\n  }\n\n  getName(): string {\n    return 'mysql';\n  }\n\n  async checkConnected(dataSource: mysql.Connection): Promise<boolean> {\n    // Pseudocode\n    return dataSource.status === 'connected';\n  }\n\n  async destroyDataSource(dataSource: mysql.Connection): Promise<void> {\n    if (await this.checkConnected(dataSource)) {\n      await dataSource.destroy();\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example of Valid Function Exports - TypeScript\nDESCRIPTION: This code shows examples of valid function exports that can be used as API endpoints in Midway Hooks. The functions must be directly exported from the module's top level.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_api.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function demo() {}\n\nexport const demo = async function () {};\n\nexport default async function demo() {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Root Directory (config.default.ts)\nDESCRIPTION: This code shows how to configure the root directory where log files are stored. It involves setting the `dir` property for the `file` and `error` transports in the `transports` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        file: {\n          dir: '/home/admin/logs',\n        },\n        error: {\n          dir: '/home/admin/logs',\n        },\n      }\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: cfork Process Management in Node.js\nDESCRIPTION: This code snippet demonstrates how to use the `cfork` library to manage worker processes in a Node.js application. It forks a number of worker processes equal to the CPU core count, using `bootstrap.js` as the entry point for each worker. It also listens for events like `fork`, `disconnect`, and `exit` to log information about the workers' lifecycle and handle potential errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cfork.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n\n'use strict';\n\nconst cfork = require('cfork');\nconst util = require('util');\nconst path = require('path');\nconst os = require('os');\n\n// 获取 cpu 核数\nconst cpuNumbers = os.cpus().length;\n\ncfork({\n  exec: path.join(__dirname, './bootstrap.js'),\n  count: cpuNumbers,\n})\n  .on('fork', (worker) => {\n    console.warn('[%s] [worker:%d] new worker start', Date(), worker.process.pid);\n  })\n  .on('disconnect', (worker) => {\n    console.warn(\n      '[%s] [master:%s] wroker:%s disconnect, exitedAfterDisconnect: %s, state: %s.',\n      Date(),\n      process.pid,\n      worker.process.pid,\n      worker.exitedAfterDisconnect,\n      worker.state\n    );\n  })\n  .on('exit', (worker, code, signal) => {\n    const exitCode = worker.process.exitCode;\n    const err = new Error(\n      util.format(\n        'worker %s died (code: %s, signal: %s, exitedAfterDisconnect: %s, state: %s)',\n        worker.process.pid,\n        exitCode,\n        signal,\n        worker.exitedAfterDisconnect,\n        worker.state\n      )\n    );\n    err.name = 'WorkerDiedError';\n    console.error('[%s] [master:%s] wroker exit: %s', Date(), process.pid, err.stack);\n  });\n```\n\n----------------------------------------\n\nTITLE: Testing Event Triggers (MidwayJS, TypeScript)\nDESCRIPTION: This code demonstrates how to test event triggers by getting a class instance and invoking the handler function directly. The `getServerlessInstance` method retrieves the instance, allowing direct testing with custom event data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from event trigger', async () => {\n    // ...\n    const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n    expect(await instance.handleEvent('hello world')).toEqual('hello world');\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Console Output Colors\nDESCRIPTION: This code snippet demonstrates how to disable colored output in the console. Setting autoColors to false for the console transport will prevent the logger from using colors in the console output, even if the terminal supports it. This configuration is part of the midwayLogger configuration in a MidwayConfig object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        console: {\n          autoColors: false,\n        }\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: cfork Process Management with Node.js\nDESCRIPTION: This code snippet demonstrates how to use the `cfork` library to manage child processes in a Node.js application. It forks a specified number of worker processes (equal to the number of CPU cores) and monitors them for disconnects and exits. The `exec` option specifies the script to be executed by each worker process (bootstrap.js). Event listeners are attached to handle worker forks, disconnects, and exits, logging relevant information to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cfork.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n\n'use strict';\n\nconst cfork = require('cfork');\nconst util = require('util');\nconst path = require('path');\nconst os = require('os');\n\n// Get cpu cores\nconst cpuNumbers = os.cpus().length;\n\ncfork({\n  exec: path.join(__dirname, './bootstrap.js')\n  count: cpuNumbers\n})\n  .on('fork', (worker) => {\n    console.warn('[%s] [worker:%d] new worker start', Date(), worker.process.pid);\n  })\n  .on('disconnect', (worker) => {\n    console.warn (\n      '[%s] [master:%s] wroker:%s disconnect, exitedAfterDisconnect: %s, state: %s .',\n      Date()\n      process.pid\n      worker.process.pid\n      worker.exitedAfterDisconnect\n      worker.state\n    );\n  })\n  .on('exit', (worker, code, signal) => {\n    const exitCode = worker.process.exitCode;\n    const err = new Error (\n      util.format (\n        'worker %s died (code: %s, signal: %s, exitedAfterDisconnect: %s, state: %s)',\n        worker.process.pid\n        exitCode\n        signal\n        worker.exitedAfterDisconnect\n        worker.state\n      )\n    );\n    err.name = 'WorkerDiedError';\n    console.error('[%s] [master:%s] wroker exit: %s', Date(), process.pid, err.stack);\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing Socket.IO Framework with Bootstrap\nDESCRIPTION: This snippet demonstrates how to initialize the Socket.IO framework in MidwayJS using the Bootstrap class. It configures the port for the Socket.IO server and then loads and runs the framework. It requires the `@midwayjs/socketio` and `@midwayjs/bootstrap` packages as dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\nconst SocketFramework = require('@midwayjs/socketio').Framework;\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// 初始化 socket.io 框架\nconst socketFramework = new SocketFramework().configure({\n  port: 3000,\n});\n\nBootstrap.load(socketFramework).run();\n```\n\n----------------------------------------\n\nTITLE: Specifying Access Group for Deployment (C++)\nDESCRIPTION: This snippet shows how to specify a non-default access group for deployment using the `--access` parameter with the `midway-bin deploy` command. This is necessary when a new `access` group is created and needs to be used instead of the default.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_23\n\nLANGUAGE: cpp\nCODE:\n```\nmidway-bin deploy --access=default-2\n```\n\n----------------------------------------\n\nTITLE: Setting ContentType with ContentType\nDESCRIPTION: This snippet demonstrates how to set the Content-Type header of the response using the `ContentType` function in Midway Hooks. It sets the Content-Type to 'text/html'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  ContentType\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get(),\n  ContentType('text/html'),\n  async () => {\n    return '<h1>Hello World! </h1>';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Kafka Configuration in MidwayJS (Typescript)\nDESCRIPTION: This code snippet demonstrates the new Kafka component configuration in MidwayJS 3.19.0. It showcases the configuration for both consumer and producer clients, including connection options, consumer options, and subscribe options. The connection options specify the client ID and broker addresses, while the consumer and subscribe options configure the consumer group ID and topics to subscribe to.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-11-08-release-3.19.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          clientId: 'my-app',\n          brokers: ['localhost:9092'],\n        },\n        consumerOptions: {\n          groupId: 'groupId-test-1',\n        },\n        subscribeOptions: {\n          topics: ['topic-test-1'],\n        }\n      },\n    },\n    producer: {\n      clients: {\n        pub1: {\n          connectionOptions: {\n            clientId: 'my-app',\n            brokers: ['localhost:9092'],\n          },\n          producerOptions: {\n            // ...\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending AxiosRequestConfig Type in Typescript\nDESCRIPTION: This snippet demonstrates how to extend the AxiosRequestConfig type to add custom properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// interface.ts\nimport '@midwayjs/axios';\n\ndeclare module '@midwayjs/axios/dist/interface' {\n  interface AxiosRequestConfig {\n    retryDelay?: number;\n    retry?: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RouterInfo Interface Definition\nDESCRIPTION: This code snippet defines the `RouterInfo` interface in TypeScript, which represents the structure of routing information.  It includes properties like `prefix`, `routerName`, `url`, `requestMethod`, `method`, `description`, `summary`, `handlerName`, `funcHandlerName`, `controllerId`, `middleware`, `controllerMiddleware`, `requestMetadata`, and `responseMetadata`, each representing different aspects of a route's configuration.  It is essential for understanding the data structure used within the routing table.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RouterInfo {\n  /**\n   * router prefix\n   */\n  prefix: string;\n  /**\n   * router alias name\n   */\n  routerName: string;\n  /**\n   * router path, without prefix\n   */\n  url: string | RegExp;\n  /**\n   * request method for http, like get/post/delete\n   */\n  requestMethod: string;\n  /**\n   * invoke function method\n   */\n  method: string;\n  description: string;\n  summary: string;\n  /**\n   * router handler function key，for IoC container load\n   */\n  handlerName: string;\n  /**\n   *  serverless func load key\n   */\n  funcHandlerName: string;\n  /**\n   * controller provideId\n   */\n  controllerId: string;\n  /**\n   * router middleware\n   */\n  middleware: any[];\n  /**\n   * controller middleware in this router\n   */\n  controllerMiddleware: any[];\n  /**\n   * request args metadata\n   */\n  requestMetadata: any[];\n  /**\n   * response data metadata\n   */\n  responseMetadata: any[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using createInitializeContext from @midwayjs/serverless-fc-trigger in TypeScript\nDESCRIPTION: This snippet shows how to use `createInitializeContext` from `@midwayjs/serverless-fc-trigger` to create initialization data for testing Alibaba Cloud Function Compute functions.  It creates a function app with a custom initialization context using `createFunctionApp`. The `initContext` option is used to pass the context data to the function app.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_testing.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createInitializeContext } from '@midwayjs/serverless-fc-trigger';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  // ...\n\n  beforeAll(async () => {\n    // 创建函数 app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(), // 这里传入了 aliyun 特有的初始化上下文数据\n    });\n\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring express-session Middleware\nDESCRIPTION: This code shows how to configure and use the `express-session` middleware in a Midway.js Express application. It sets options like the secret, resave, and saveUninitialized. The middleware is added to the Express application instance. Dependencies: @midwayjs/decorator, @midwayjs/express, express-session.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/express';\nimport * as session from 'express-session';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(\n      session({\n        secret: 'my-secret',\n        resave: false,\n        saveUninitialized: false,\n      })\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Devs Provider\nDESCRIPTION: This YAML snippet shows the configuration required in `f.yml` to set the starter as `@midwayjs/fc-starter` for Alibaba Cloud function deployment using Serverless Devs. This ensures that Midway FaaS is correctly used as the runtime.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n   name: aliyun\n   starter: '@midwayjs/fc-starter'\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Application with Midway.js (npm)\nDESCRIPTION: These commands initialize a Midway.js web application using a specific template. The first command is for npm v6, and the second is for npm v7. The template used is `@midwayjs-examples/applicaiton-hooks-koa-react`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_create.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm v6\n$ npm init midway --template=@midwayjs-examples/applicaiton-hooks-koa-react\n# npm v7\n$ npm init midway -- --template=@midwayjs-examples/applicaiton-hooks-koa-react\n```\n\n----------------------------------------\n\nTITLE: Modify Default Instance Name - Configuration - Typescript\nDESCRIPTION: This snippet shows how to modify the default instance name in the `config.default.ts` file.  The `httpClient` configuration object defines clients and specifies `defaultClientName` as `default2`. This means the `HTTPClientService` will proxy methods to the `default2` client instead of `default`. The baseUrl for both default and default2 clients are defined as empty strings, but in a real-world scenario, these would be populated with actual URLs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service_factory.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  clients: {\n    default: {\n      baseUrl: ''\n    },\n    default2: {\n      baseUrl: ''\n    }\n  },\n  defaultClientName: 'default2',\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Midway Development Server\nDESCRIPTION: These commands start the Midway development server and open the application in a web browser. The `npm run dev` command executes the development script defined in `package.json`, which typically starts the server in watch mode for automatic reloading upon code changes. The second line opens the default URL where the application is running.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quickstart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n$ open http://localhost:7001\n```\n\n----------------------------------------\n\nTITLE: Manual Call with ValidateHttp Error Handling\nDESCRIPTION: This code demonstrates how to handle validation errors when using the manual call method with `fetcher` and `ValidateHttp`. It sends a GET request to `/api/filterPosts` with an invalid query parameter and logs the error message and status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfetcher\n  .get(\n    '/api/filterPosts?searchString=1'\n  )\n  .catch((error) => {\n    console.log(\n      JSON.parse(error.data.message)\n    );\n    console.log(error.status); // 422\n  });\n```\n\n----------------------------------------\n\nTITLE: Specify File Configuration Loading - TypeScript\nDESCRIPTION: Shows how to load specific configuration files by explicitly specifying their paths using `importConfigs` and the `join` function from the `path` module. Requires importing `Configuration` from `@midwayjs/core` and `join` from `path`. An error is reported if the specified file does not exist.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport { join } from 'path';\n\n@Configuration({\n   importConfigs: [\n     join(__dirname, './config/config.default'),\n     join(__dirname, './config/config.local'),\n     join(__dirname, './config/custom.local') // You can use custom naming, as long as the middle part has an environment\n   ]\n})\nexport class MainConfiguration {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependency Declaration\nDESCRIPTION: Adds a dependency on the `midway-component-book` component in the application's `package.json` file. This allows the application to use the component's functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"midway-component-book\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Validation with CommonUserDTO and UserDTO (TypeScript)\nDESCRIPTION: This example illustrates inherited validation where `UserDTO` extends `CommonUserDTO`. Validation rules defined in `CommonUserDTO` are inherited by `UserDTO`, allowing for common properties like `token` and `workId` to be validated along with specific properties like `name`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType } from '@midwayjs/decorator';\n\nexport class CommonUserDTO {\n  @Rule(RuleType.string().required())\n  token: string;\n  @Rule(RuleType.string())\n  workId: string;\n}\n\nexport class UserDTO extends CommonUserDTO {\n  @Rule(RuleType.string().required())\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Component Configuration (Non-Lerna)\nDESCRIPTION: Exports the `BookConfiguration` class as `Configuration` from the component's entry point file in a non-Lerna project structure. It ensures that the configuration is accessible when the component is imported.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/components/book/src/index.ts\nexport { BookConfiguration as Configuration } from './bookConfiguration/src`;\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Server Namespace Configuration\nDESCRIPTION: This snippet illustrates how to define a namespace in a MidwayJS Socket.IO controller using the `@WSController` decorator. This determines the endpoint at which the socket server will be available. The `@midwayjs/decorator` package is a dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@WSController('/test') // 这里是服务端的 namespace\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Modifying npm script for debugging with inspect\nDESCRIPTION: This code snippet demonstrates how to modify an npm script to include the `--inspect` flag, which enables debugging. It assumes the usage of `midway-bin` for running tests and includes TypeScript support. The modified command is then executed within the VSCode terminal.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/debug.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"test\": \"npm run lint && midway-bin test --ts --inspect\"\n```\n\n----------------------------------------\n\nTITLE: Changing tsconfig.json Location\nDESCRIPTION: Specifies the location of the `tsconfig.json` file using the `TS_NODE_PROJECT` environment variable. This allows using a specific configuration file for development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cross-env TS_NODE_PROJECT=./tsconfig.dev.json midway-bin dev -ts\n```\n\n----------------------------------------\n\nTITLE: Koa Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to declare the `@midwayjs/koa` package as a dependency in your `package.json` file. This ensures that the Koa framework is included when installing project dependencies. The version specified should match the desired version of the Koa integration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/koa\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Midway Cache Component\nDESCRIPTION: This snippet demonstrates how to install the necessary packages for the Midway Cache component using npm. It includes the core cache module and the cache-manager library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/cache@2 cache-manager -S\n$ npm install @types/cache-manager -D\n```\n\n----------------------------------------\n\nTITLE: Adding Guard feature in MidwayJS\nDESCRIPTION: This code snippet introduces a guard feature within the MidwayJS framework. Guards are used to protect routes or resources by implementing authorization or authentication checks. The commit associated with this feature is 1b952a1.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/jwt/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Starting agenthub with configuration\nDESCRIPTION: This snippet demonstrates how to start the agenthub process using the `yourconfig.json` file containing the `App ID` and `App Secret`. This command initiates the data collection and reporting to the Alibaba Cloud Node.js Performance Platform. It assumes that agenthub is installed globally and the configuration file exists in the current directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/alinode.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nagenthub start yourconfig.json\n```\n\n----------------------------------------\n\nTITLE: Using MidwayAspectService to Add Interceptor Implementation\nDESCRIPTION: This snippet demonstrates the usage of `MidwayAspectService` for adding an interceptor implementation. It is generally used with custom decorators. The aspect service is injected into a controller, though it's primarily used in configuration and aspect definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAspectService, Inject, Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  aspectService: MidwayAspectService;\n\n  @Get('/')\n  async home() {\n    // this.aspectService.interceptPrototypeMethod(/* omitted */);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing body with Input Parameter Mapping\nDESCRIPTION: This TypeScript code shows how to access the request body when using input parameter mapping. Since the `content-type` is not available, the framework will only process the base64 result, so the body will be a string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // '{\"c\":\" B \"}' => string\n```\n\n----------------------------------------\n\nTITLE: Example Service Configuration in YAML (Detailed)\nDESCRIPTION: This YAML snippet demonstrates a detailed configuration for a service, including both the name and a description.  This allows you to provide more information about the service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: serverless-hello-world\n  description: 'some description'\n```\n\n----------------------------------------\n\nTITLE: Adding Socket.IO-Redis Support in MidwayJS\nDESCRIPTION: This feature adds support for Socket.IO-Redis integration within the MidwayJS framework. The associated commit is 2818920b9d3391c81666c5b8587a899b9b237d9e, and it addresses issue #874.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Define ICacheService interface and implementations\nDESCRIPTION: Defines an interface `ICacheService` and two implementations, `LocalCacheService` and `RemoteCacheService`, using the `@Provide()` decorator to register them as injectable components in the MidwayJS container.  These services are intended to provide data from different cache sources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ICacheService {\n  getData(): any;\n}\n\n@Provide()\nexport class LocalCacheService implements ICacheService {\n  async getData {}\n}\n\n@Provide()\nexport class RemoteCacheService implements ICacheService {\n  async getData {}\n}\n```\n\n----------------------------------------\n\nTITLE: Logging with ctx.logger\nDESCRIPTION: This example demonstrates how to use the `ctx.logger` object in Midway Serverless to log messages at different levels. The `ctx.logger` provides methods like `info`, `warn`, and `error` for logging information, warnings, and errors, respectively. The logged messages are typically directed to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_context.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nctx.logger.info('hello');\nctx.logger.warn('hello');\nctx.logger.error('hello');\n```\n\n----------------------------------------\n\nTITLE: Mongoose and Typegoose Dependencies for MongoDB 5.x\nDESCRIPTION: This JSON snippet shows the dependencies required for using Mongoose and Typegoose with MongoDB Server 5.x. It includes the necessary versions of `mongoose` and `@typegoose/typegoose`. Make sure that the versions match for compatibility purposes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"dependencies\": {\n    \"mongoose\": \"^6.0.7\",\n    \"@typegoose/typegoose\": \"^9.0.0\",\t\t// 使用 typegoose 需要安装此依赖\n  },\n```\n\n----------------------------------------\n\nTITLE: Excluding Controller with @ApiExcludeController in Typescript\nDESCRIPTION: This snippet shows how to exclude an entire controller from Swagger documentation using the `@ApiExcludeController` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiExcludeController()\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Run Consul in Docker\nDESCRIPTION: Runs a Consul instance in a Docker container using the `docker run` command.  The `-P` flag publishes the container's ports to random ports on the host.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -itd -P consul\n```\n\n----------------------------------------\n\nTITLE: Installing midway-init globally using npm\nDESCRIPTION: This command installs the `midway-init` package globally using npm, which is used to scaffold Midway.js applications. The `-g` flag ensures it's available system-wide.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i midway-init -g\n```\n\n----------------------------------------\n\nTITLE: Importing Axios Module in Configuration in Typescript\nDESCRIPTION: This snippet shows how to import the Axios module into a Midway.js configuration file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    axios // import axios components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permissions using UsePermission Decorator\nDESCRIPTION: This code defines the permissions required for a route using the `UsePermission` decorator. It specifies the action, resource, and possession needed to access the `findAllUsers` method.  This ensures fine-grained access control based on Casbin policies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, UseGuard } from '@midwayjs/core';\nimport { AuthActionVerb, AuthGuard, AuthPossession, UsePermission } from '@midwayjs/casbin';\nimport { Resource } from './resouce';\n\n@Controller('/')\nexport class HomeController {\n\n  @UseGuard(AuthGuard)\n  @UsePermission({\n    action: AuthActionVerb.READ,\n    resource: Resource.USER_ROLES,\n    possession: AuthPossession.ANY\n  })\n  @Get('/users')\n  async findAllUsers() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling the Nunjucks component (TypeScript)\nDESCRIPTION: This code imports and enables the `@midwayjs/view-nunjucks` component in the `configuration.ts` file.  The component is added to the `imports` array in the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport * as view from '@midwayjs/view-nunjucks';\n\n@Configuration({\n  imports: [\n    koa,\n    // ...\n    view\n  ],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class MainConfiguration {\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing the ctx.env Variable\nDESCRIPTION: This code shows how to access the current environment using `ctx.env`.  `ctx.env` returns the value of NODE_ENV or MIDWAY_SERVER_ENV, defaulting to 'prod'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_context.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nctx.env; // 默认 prod\n```\n\n----------------------------------------\n\nTITLE: Defining AuthOptions Interface for Swagger Authentication\nDESCRIPTION: This TypeScript code defines the `AuthOptions` interface, which extends the `SecuritySchemeObject` from the OpenAPI specification. It includes properties for defining authentication types such as basic, bearer, cookie, oauth2, apikey, and custom.  It provides configuration options for different authentication schemes used in the Swagger UI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 继承自 https://swagger.io/specification/#security-scheme-object\n */\nexport interface AuthOptions extends Omit<SecuritySchemeObject, 'type'> {\n  /**\n   * 验权类型\n   * basic  => http basic 验证\n   * bearer => http jwt 验证\n   * cookie => cookie 方式验证\n   * oauth2 => 使用 oauth2\n   * apikey => apiKey\n   * custom => 自定义方式\n   */\n  authType: AuthType;\n  /**\n   * https://swagger.io/specification/#security-scheme-object type 字段\n   */\n  type?: SecuritySchemeType;\n  /**\n   * authType = cookie 时可以修改，通过 ApiCookie 装饰器关联的名称\n   */\n  securityName?: string;\n  /**\n   * authType = cookie 时可以修改，cookie 的名称\n   */\n  cookieName?: string;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Serverless App Method in MidwayJS\nDESCRIPTION: This code addresses a bug fix for the serverless app more method within the MidwayJS framework.  The corresponding commit hash is 9c44c3f58930d0c12464d00eceee93cb9e7aaa62 and resolves issue #1034.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Using __dirname and __filename in ESM\nDESCRIPTION: In ESM, `__dirname` and `__filename` are not directly available. This snippet shows how to achieve the same functionality using `import.meta.url` and the `node:path` and `node:url` modules. It demonstrates how to derive the directory and file paths in an ESM context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/esm.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ESM solution\nimport { dirname } from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = dirname(fileURLToPath(import.meta.url))\n```\n\n----------------------------------------\n\nTITLE: Modifying Return Result with `afterReturn`\nDESCRIPTION: This example shows how to use the `afterReturn` lifecycle method to modify the return result of an intercepted method. This is a simpler way to modify the return result compared to using the `around` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  async home() {\n    return 'hello';\n  }\n}\n\n// src/aspect/report.ts\n@Aspect(HomeController, 'home') // Only the home method is intercepted here.\nexport class ReportInfo implements IMethodAspect {\n  async afterReturn(point: JoinPoint, result) {\n    return result + 'world';\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting 'type' to 'module' in package.json (JSON)\nDESCRIPTION: This configuration change in `package.json` specifies that the project uses ESM. Without this setting, Node.js will treat the code as CommonJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/esm.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"my-package\",\n   \"type\": \"module\",\n   //...\n   \"dependencies\": {\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing an Error in a Serverless Trigger - TypeScript\nDESCRIPTION: This code snippet demonstrates how to throw an error within a Midway.js Serverless function triggered by a ServerlessTrigger.  The framework will catch this error and, by default, return an 'Internal Server Error' in production environments. In non-production environments, the full error stack will be output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_error.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@ServerlessTrigger(//...)\nasync invoke() {\n  throw new Error('abc');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Middleware in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to implement a Web middleware in a Midway application. The middleware measures the execution time of the controller. It implements the `IWebMiddleware` interface and returns an asynchronous function that wraps the `next()` call, allowing actions to be performed before and after the controller execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Provide } from '@midwayjs/decorator';\nimport { IWebMiddleware, IMidwayWebNext } from '@midwayjs/web';\nimport { Context } from 'egg';\n\n@Provide()\nexport class ReportMiddleware implements IWebMiddleware {\n  resolve() {\n    return async (ctx: Context, next: IMidwayWebNext) => {\n      const startTime = Date.now();\n      await next();\n      console.log(Date.now() - startTime);\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Output Error Stack (MidwayJS)\nDESCRIPTION: This code snippet shows how to set an environment variable to force the output of the error stack, even in production environments. This allows for more detailed error debugging when the default behavior is to hide the stack trace.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_error.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprocess.env.SERVERLESS_OUTPUT_ERROR_STACK = 'true';\n```\n\n----------------------------------------\n\nTITLE: Configure Jest test script in package.json\nDESCRIPTION: This snippet shows how to configure the test script in the `package.json` file to use Jest directly. This allows running tests with the standard `npm test` command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MidwayMockService in a Controller (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to inject and use the MidwayMockService within a controller to simulate data during development or testing. It showcases the basic structure and dependency injection mechanism.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayMockService, Inject, Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  mockService: MidwayMockService;\n\n  @Get('/')\n  async home() {\n    // this.mockService.mockProperty(/** omitted **/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure File Mode\nDESCRIPTION: Configures the upload mode to 'file' in the application configuration.  In file mode, uploaded files are stored as temporary files on the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/busboy.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  busboy: {\n    mode: 'file',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Component Behavior Configuration (Non-Lerna)\nDESCRIPTION: Defines the configuration class for a component within a non-Lerna setup, using the `@Configuration` decorator. This example illustrates how to configure a component located in a subdirectory within a larger application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/components/book/src/bookConfiguration.ts\nimport { Configuration } from '@midwayjs/decorator';\n\n@Configuration()\nexport class BookConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Supporting Bootstrap Load Config First in MidwayJS\nDESCRIPTION: This feature enables loading the configuration during the bootstrap process. The corresponding commit is ae9ed261aacdb483d3a9a612be79fff384503bcc, and it addresses issue #931.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Registering Multiple Global Guards in TypeScript\nDESCRIPTION: This code demonstrates registering multiple global guards by passing an array of guard classes to the `app.useGuard` method within the `onReady` lifecycle hook.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/guard.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync onReady() {\n  this.app.useGuard([AuthGuard, Auth2Guard]);\n}\n```\n\n----------------------------------------\n\nTITLE: Run Tests using npm (Bash)\nDESCRIPTION: This snippet shows how to run tests using the `npm test` command. It executes the test script defined in `package.json`, utilizing `midway-bin` to run the tests with TypeScript support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n\n> unittest-example@test /Users/harry/midwayj/examples/unittest\n> midway-bin test --ts\n\n  test/hello.test.ts\n    ✓ should work\n\n  1 passing (10ms)\n```\n\n----------------------------------------\n\nTITLE: Configuring Koa in MidwayJS\nDESCRIPTION: This TypeScript code shows the default configuration options for Koa in a MidwayJS application. It includes settings such as port, global prefix, keys, hostname, key, cert, ca, http2, proxy, subdomainOffset, proxyIpHeader, maxIpsCount, serverTimeout, and serverOptions. These options allow customizing various aspects of the Koa server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    port: 7001,\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Excluding a Controller from Swagger Documentation (MidwayJS, TypeScript)\nDESCRIPTION: This snippet shows how to exclude an entire controller and its routes from the Swagger documentation. This uses the `@ApiExcludeController` decorator. Requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiExcludeController()\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Local Fanout Exchange Testing\nDESCRIPTION: This TypeScript snippet provides an example of local testing for a fanout exchange using the `@midwayjs/mock` tool. It creates a producer, declares a fanout exchange, sends a message to the exchange, and verifies that the message is received by all bound queues. It also creates an app to listen to queue data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager = await createRabbitMQProducer('tasks-fanout', {\n  isConfirmChannel: false,\n  mock: false,\n  url: 'amqp://localhost',\n});\n\n// Name of the exchange\nconst ex = 'logs';\n// Write a message\nconst msg = \"Hello World!\";\n\n// 声明交换机\nmanager.assertExchange(ex, 'fanout', { durable: false }) // 'fanout' will broadcast all messages to all the queues it knows\n\n// 启动服务\nconst app = await creatApp('base-app-fanout', {\n  url: 'amqp://localhost',\n  reconnectTime: 2000\n});\n\n// 发送到交换机，由于不持久化，需要等订阅服务起来之后再发\nmanager.sendToExchange(ex, '', Buffer.from(msg))\n\n// 等一段时间\nawait sleep(5000);\n\n// 校验结果\n\n// 关闭 producer\nawait manager.close();\n\n// 关闭 app\nawait close(app);\n```\n\n----------------------------------------\n\nTITLE: Initializing RabbitMQ Framework in MidwayJS\nDESCRIPTION: This snippet demonstrates how to initialize the RabbitMQ framework within a MidwayJS application using the `Bootstrap` class and `RabbitMQFramework`. It configures the RabbitMQ connection URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// server.js\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nconst RabbitMQFramework = require('@midwayjs/rabbitmq').Framework;\n\nconst rabbitMQFramework = new RabbitMQFramework().configure({\n  url: 'amqp://localhost',\n});\n\nBootstrap.load(rabbitMQFramework).run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Interceptors for Default Axios - Javascript\nDESCRIPTION: This snippet demonstrates how to configure global request interceptors for the default Axios instance. It retrieves the `HttpService` instance and uses its `interceptors.request.use` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Configuration, IMidwayContainer } from '@midwayjs/core';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    axios\t\t// 导入 axios 组件\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n\n  async onReady(container: IMidwayContainer) {\n  \tconst httpService = await container.getAsync(axios.HttpService);\n    httpService.interceptors.request.use(\n      config => {\n        // Do something before request is sent\n        return config;\n      },\n      error => {\n        // Do something with request error\n        return Promise.reject(error);\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Midway Schedule Plugin (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable the `midway-schedule` plugin in a MidwayJS application.  It adds a `schedule` property and `schedulePlus` object to the `plugin.ts` configuration file. This configuration tells MidwayJS to load and enable the `midway-schedule` plugin, allowing the use of scheduled tasks.  The `package` property within `schedulePlus` specifies the package name of the plugin.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/plugin.ts\nexport default {\n  schedule: true,\n  schedulePlus: {\n    enable: true,\n    package: 'midway-schedule',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a gRPC service with MidwayJS\nDESCRIPTION: This code demonstrates how to start a gRPC service using the `@midwayjs/grpc` framework. It configures the framework with the path to the proto file and the package name, then uses the `Bootstrap` class to load and run the service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// 获取框架\nconst { Framework } = require('@midwayjs/grpc');\nconst { join } = require('path');\n\n// 初始化框架\nconst grpcService = new Framework().configure({\n  services: [\n    {\n      protoPath: join(__dirname, 'proto/helloworld.proto'),\n      package: 'helloworld',\n    },\n  ],\n});\n\n// 使用 bootstrap 启动\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap.load(grpcService).run();\n```\n\n----------------------------------------\n\nTITLE: mwtsc with custom bootstrap\nDESCRIPTION: This snippet demonstrates running a custom bootstrap file using the `--run` option.  It is typically used to start the application in development mode.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc --watch --run ./bootstrap.js\n```\n\n----------------------------------------\n\nTITLE: mwtsc with run parameter\nDESCRIPTION: This snippet shows how to use the `--run` parameter to execute a JavaScript file after successful compilation, allowing for automatic restarts during development.  The `run` command must be the last argument, as all subsequent arguments are passed to the executed script.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mwtsc --watch --run @midwayjs/mock/app.js\n```\n\n----------------------------------------\n\nTITLE: Define Many-to-One/One-to-Many Author Entity\nDESCRIPTION: This code defines an `Author` entity with a one-to-many relationship to the `Photo` entity. It uses TypeORM decorators to define the entity, primary key, a column for the author's name, and the one-to-many relationship. The `OneToMany` decorator specifies the target entity (`Photo`) and the reverse relation property in the `Photo` entity (`photo => photo.author`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from 'typeorm';\nimport { Column, PrimaryGeneratedColumn, OneToMany, JoinColumn } from 'typeorm';\nimport { Photo } from './entity/photo.entity';\n\n@Entity()\nexport class Author {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany(type => Photo, photo => photo.author) // note: we will create author property in the Photo class below\n  photos: Photo[];\n}\n```\n\n----------------------------------------\n\nTITLE: Get Environment in Code (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to obtain the current operating environment within a MidwayJS application using the `getEnv()` method of the `Application` object. The `@App()` decorator injects the application instance. The `console.log` statement outputs the environment (e.g., 'prod').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/environment.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application } from '@midwayjs/koa';\n\n// process.env.MIDWAY_SERVER_ENV=prod\n\n@Provide()\nexport class UserService {\n\n  @App()\n  app: Application;\n\n  async invoke() {\n    console.log(this.app.getEnv()); // prod\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Config Decorator - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `@Config` decorator to inject configuration values into a class. The decorator automatically retrieves the value from the configuration object based on the provided key (property name by default).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from '@midwayjs/decorator';\n\nexport class IndexHandler {\n  @Config('userService')\n  userConfig;\n\n  async handler() {\n    console.log(this.userConfig); // { appname: 'test'}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Developing Full-Stack App using Functions in Midway.js (TypeScript)\nDESCRIPTION: This code snippet showcases how to develop a full-stack application using functions in Midway.js with the `@midwayjs/hooks` package. It defines an API endpoint that accepts `page` and `limit` query parameters and returns them in the response. It requires the `@midwayjs/hooks` package. The `Api`, `Get`, and `Query` decorators are used to define the API endpoint and its parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Query,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get(),\n  Query<{\n    page: string;\n    limit: string;\n  }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      page: ctx.query.page,\n      limit: ctx.query.limit,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: cfork Process Management in MidwayJS (server.js)\nDESCRIPTION: This code snippet demonstrates how to use the `cfork` library to manage worker processes in a MidwayJS application. It imports necessary modules such as `cfork`, `util`, `path`, and `os`. It determines the number of CPU cores and uses `cfork` to spawn that many worker processes, each executing `bootstrap.js`. The code also includes event listeners for `fork`, `disconnect`, and `exit` events, logging relevant information about the worker processes. The script is intended to be run using `node server.js`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cfork.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n\n'use strict';\n\nconst cfork = require('cfork');\nconst util = require('util');\nconst path = require('path');\nconst os = require('os');\n\n// 获取 cpu 核数\nconst cpuNumbers = os.cpus().length;\n\ncfork({\n  exec: path.join(__dirname, './bootstrap.js'),\n  count: cpuNumbers,\n})\n  .on('fork', (worker) => {\n    console.warn('[%s] [worker:%d] new worker start', Date(), worker.process.pid);\n  })\n  .on('disconnect', (worker) => {\n    console.warn(\n      '[%s] [master:%s] wroker:%s disconnect, exitedAfterDisconnect: %s, state: %s.',\n      Date(),\n      process.pid,\n      worker.process.pid,\n      worker.exitedAfterDisconnect,\n      worker.state\n    );\n  })\n  .on('exit', (worker, code, signal) => {\n    const exitCode = worker.process.exitCode;\n    const err = new Error(\n      util.format(\n        'worker %s died (code: %s, signal: %s, exitedAfterDisconnect: %s, state: %s)',\n        worker.process.pid,\n        exitCode,\n        signal,\n        worker.exitedAfterDisconnect,\n        worker.state\n      )\n    );\n    err.name = 'WorkerDiedError';\n    console.error('[%s] [master:%s] wroker exit: %s', Date(), process.pid, err.stack);\n  });\n```\n\n----------------------------------------\n\nTITLE: Serverless Deployment Script (MidwayJS, Bash)\nDESCRIPTION: This Bash script automates the deployment process for a MidwayJS serverless application using Serverless Devs. It handles building the application, generating the `s.yaml` file, copying necessary files to the `.serverless` directory, installing production dependencies, and finally deploying the application using the `s deploy` command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nset -e\n\n# 构建产物目录\nexport BUILD_DIST=$PWD/.serverless\n# 构建开始时间，单位毫秒\nexport BUILD_START_TIME=$(date +%s%3N)\n\necho \"Building Midway Serverless Application\"\n\n# 打印当前目录 cwd\necho \"Current Working Directory: $PWD\"\n# 打印结果目录 BUILD_DIST\necho \"Build Directory: $BUILD_DIST\"\n\n# 安装当前项目依赖\nnpm i\n\n# 执行构建\n./node_modules/.bin/tsc || return 1\n# 生成入口文件\n./node_modules/.bin/serverless-yaml-generator || return 1\n\n# 如果 .serverless 文件夹存在，则删除后重新创建\nif [ -d \"$BUILD_DIST\" ]; then\n  rm -rf $BUILD_DIST\nfi\n\nmkdir $BUILD_DIST\n\n# 拷贝 dist、 *.json、*.yml 到 .serverless 目录\ncp -r dist $BUILD_DIST\ncp *.yaml $BUILD_DIST 2>/dev/null || :\ncp *.json $BUILD_DIST 2>/dev/null || :\n# 移动入口文件到 .serverless 目录\nmv *.js $BUILD_DIST 2>/dev/null || :\n\n# 进入 .serverless 目录\ncd $BUILD_DIST\n# 安装线上依赖\nnpm install --production\n\necho \"Build success\"\n\n# 在 .serverless 目录进行部署\ns deploy\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring the Info Component in Midway - TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and configure the `@midwayjs/info` component within a Midway application's `configuration.ts` file. It involves importing the `info` module, adding it to the `imports` array in the `@Configuration` decorator, and including configuration files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as info from '@midwayjs/info';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    info,\n  ],\n  importConfigs: [\n    join(__dirname, './config')\n  ]\n})\nexport class ContainerConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Using Adapter Factory in MidwayJS Service\nDESCRIPTION: This code demonstrates using the injected `adapterFactory` to obtain an adapter instance. The `BaseService` class retrieves the adapter name from the configuration and uses the factory to create the `adapter` instance during initialization. The `@config`, `@inject`, and `@init` decorators are used for configuration, dependency injection, and lifecycle management, respectively.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\nexport class BaseService {\n  @config('adapterName')\n  adapterName;\n\n  @inject('adapterFactory')\n  factory;\n\n  adapter: Adapter;\n\n  @init()\n  async init() {\n    this.adapter = await this.factory(this.adapterName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Configure COS Component in MidwayJS\nDESCRIPTION: This snippet demonstrates how to import the COS component and configure it within a MidwayJS application's `configuration.ts` file. It imports the `cos` module and adds it to the `imports` array within the `@Configuration` decorator, allowing the application to access COS services. It also imports the configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cos.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as cos from '@midwayjs/cos';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    // ...\n    cos // import cos components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Install Cross-Domain Dependency (npm)\nDESCRIPTION: Installs the `@midwayjs/cross-domain` package using npm. This package provides cross-domain functionality for MidwayJS applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cross_domain.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/cross-domain --save\n```\n\n----------------------------------------\n\nTITLE: Parallel Pipeline Execution Example\nDESCRIPTION: Demonstrates the usage of the parallel method of the Pipeline handler.  It defines a Pipeline with 'videoFeeds', 'accountMap', and 'crowFeeds' and executes them in parallel. The returned result is an object with the alias of each valve as the key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline(['videoFeeds', 'accountMap', 'crowFeeds'])\n  stages: IPipelineHandler;\n\n  async runParallel(): Promise<any> {\n    // 这里并发执行 videoFeeds、accountMap、crowFeeds\n    return this.stages.parallel<any>({\n      args: { aa: 123 },\n    });\n\n    // 返回的 result 结构\n    /*\n    {\n      // 以 accountMap 的 alias account 作为返回对象的 key\n      account: {\n        id: 'test_account_id',\n        nick: 'test hello',\n        isFollow: true,\n      },\n      // 以 videoFeeds 的 alias video 作为返回对象的 key\n      video: [\n        {\n          videoId: '123',\n          videoUrl: 'https://www.taobao.com/xxx.mp4',\n          videoTitle: 'test 1 video'\n        }, {\n          videoId: '234',\n          videoUrl: 'https://www.taobao.com/xxx234.mp4',\n          videoTitle: 'test 2 video'\n        }, {\n          videoId: '456',\n          videoUrl: 'https://www.taobao.com/xxx456.mp4',\n          videoTitle: 'test 3 video'\n        }\n      ],\n      // 以 crowFeeds 的 alias tab 作为返回对象的 key\n      tab: {\n        title: 'test tab',\n        tabId: 'firstTab',\n        index: 0\n      }\n    }\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Testing Setup with createFunctionApp in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up local testing for a COS-triggered function using `@midwayjs/mock`. It creates a function application, retrieves an instance of the service class, and then uses `createCOSEvent` to simulate a COS event. This allows developers to test their function logic without deploying to a cloud environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_cos.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { HelloTencentService } from '../src/function/hello_tencent';\nimport { createCOSEvent } from '@midwayjs/serverless-scf-trigger';\nimport { join } from 'path';\n\ndescribe('test/hello_tencent.test.ts', () => {\n  let app: Application;\n  let instance: HelloTencentService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>();\n    instance = await app.getServerlessInstance<HelloTencentService>(HelloTencentService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from timer trigger', async () => {\n    expect(await instance.handleCOSEvent(createCOSEvent())).toEqual('hello world');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Level Cache with mget/mset/mdel\nDESCRIPTION: Uses a multi-level cache, demonstrating the `mset`, `mget`, and `mdel` methods for setting, getting, and deleting multiple keys across all cache levels. Requires the `MidwayMultiCache` type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayMultiCache } from '@midwayjs/cache-manager';\n\nconst userId2 = 456;\nconst key2 = 'user_' + userId;\nconst ttl = 5;\n\n@Provide()\nexport class UserService {\n\n   @InjectClient(CachingFactory, 'multiCaching')\n   multiCache: MidwayMultiCache;\n\n   async invoke() {\n     // Set to all levels of caching\n     await this.multiCache.set('foo2', 'bar2', ttl);\n\n     // Get the key from the highest priority cache Store\n     console.log(await this.multiCache.get('foo2'));\n     // >> \"bar2\"\n\n     // Call the del method of each Store to delete\n     await this.multiCache.del('foo2');\n\n     // Set multiple keys in all caches, including multiple key-value pairs\n     await this.multiCache.mset(\n       [\n         ['foo', 'bar'],\n         ['foo2', 'bar2'],\n       ],\n       ttl\n     );\n\n     // mget() fetches from highest priority cache.\n     // If the first cache does not return all the keys,\n     // the next cache is fetched with the keys that were not found.\n     // This is done recursively until either:\n     // - all have been found\n     // - all caches has been fetched\n     console.log(await this.multiCache.mget('key', 'key2'));\n     // >> ['bar', 'bar2']\n\n     // Call the mdel method of each Store to delete\n     await this.multiCache.mdel('foo', 'foo2');\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Global npm Module Path\nDESCRIPTION: This snippet configures a unified global npm module installation path to `~/.npm-global`. It creates the directory, sets the npm `prefix` configuration, and updates the `PATH` environment variable in `.zshrc` to include the global bin directory.  The source command reloads the shell configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_install_nodejs.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p ~/.npm-global\n$ npm config set prefix ~/.npm-global\n```\n\n----------------------------------------\n\nTITLE: Series Pipeline Execution Example\nDESCRIPTION: Demonstrates the use of the `series` method to execute a pipeline sequentially.  It highlights that the return structure of the result is similar to the `parallel` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // 这里声明一个 pipeline\n  @Pipeline([VideoFeeds, AccountMap, CrowFeeds])\n  stages: IPipelineHandler;\n  \n  async runSeries(): Promise<any> {\n    // 这里串行执行 videoFeeds、accountMap、crowFeeds\n    return this.stages.series<any>({\n      args: {aa: 123}\n    });\n    \n    // 这里返回的 result 是一个对象，结果同 parallel 返回的对象拼装规则\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Session Store Implementation - TypeScript\nDESCRIPTION: Creates a custom session store class, `MemorySessionStore`, that extends the abstract `SessionStore` class from `@midwayjs/session`.  This implementation stores session data in memory. It includes methods for getting, setting, and destroying session data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SessionStore } from '@midwayjs/session';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MemorySessionStore extends SessionStore {\n  sessions = {};\n  async get(key) {\n    return this.sessions[key];\n  }\n\n  async set(key, value) {\n    this.sessions[key] = value;\n  }\n\n  async destroy(key) {\n    this.sessions[key] = undefined;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Data Fetching with Prisma Query (TypeScript)\nDESCRIPTION: This TypeScript code shows how to fetch data from the backend API using a function named 'fetchFeeds'. It imports the 'fetchFeeds' function from a specified path and then uses a promise to log the results ('feeds') to the console once the data is successfully retrieved.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/prisma.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport fetchFeeds from '../api/feeds';\n\nfetchFeeds().then((feeds) => {\n  console.log(feeds);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding preload modules option - Bug fix\nDESCRIPTION: This snippet describes a bug fix that adds an option to preload modules. This allows for faster application startup by preloading necessary modules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Specify registry\nDESCRIPTION: This command specifies a custom npm registry to use. The `--registry` parameter is used to specify the registry URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --registry=https://registry.npmmirror.com\n```\n\n----------------------------------------\n\nTITLE: Define One-to-One Relationship with Sequelize-Typescript\nDESCRIPTION: This example demonstrates how to define a one-to-one relationship between two models (Photo and User) using `@HasOne` and `@BelongsTo` decorators from `sequelize-typescript`. The `Photo` model contains a foreign key `userId` referencing the `User` model.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Column, Model, BelongsTo, ForeignKey } from 'sequelize-typescript';\nimport { User } from './user.entity';\n\n@Table\nexport class Photo extends Model {\n  @ForeignKey(() => User)\n  @Column({\n    comment: 'User Id',\n  })\n  userId: number;\n\n  @BelongsTo(() => User)\n  user: User;\n\n  @Column({\n    Comment: 'name',\n  })\n  name: string;\n}\n\n@Table\nexport class User extends Model {\n  @Column\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Event (text/html) - Alibaba Cloud API Gateway\nDESCRIPTION: This JSON represents the event payload received by a serverless function when using Alibaba Cloud API Gateway with '入参透传' (passthrough) enabled and a Content-Type of text/html. The body is base64 encoded.  The function should decode the base64 encoded string to obtain the actual data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"eyJjIjoiYiJ9\",\n  \"headers\": {\n    \"x-ca-dashboard-action\": \"DEBUG\",\n    \"x-ca-dashboard-uid\": \"125087\",\n    \"x-ca-stage\": \"RELEASE\",\n    \"x-ca-dashboard-role\": \"USER\",\n    \"user-agent\": \"Apache-HttpClient/4.5.6 (Java/1.8.0_172)\",\n    \"accept-encoding\": \"gzip,deflate\",\n    \"content-md5\": \"Kry+hjKjc2lvIrwoJqdY9Q==\",\n    \"content-type\": \"text/html; charset=utf-8\"\n  },\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"path\": \"/api/321\",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Axios Instance with HttpService in Typescript\nDESCRIPTION: This snippet demonstrates how to use the default Axios instance via the `HttpService` class in a Midway.js service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpService } from '@midwayjs/axios';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  httpService: HttpService;\n\n  async invoke() {\n  \tconst url = 'https://midwayjs.org/resource/101010100.json';\n    const result = await this.httpService.get(url);\n    // TODO result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket App (createApp)\nDESCRIPTION: This code snippet shows how to create a WebSocket app for testing using createApp from @midwayjs/mock.  It initializes a WebSocket server on port 3000, allowing you to simulate client connections and interactions. It then closes the application after.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/ws';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create webSocket app', async () => {\n    const app = await createApp<Framework>(process.cwd(), { port: 3000 });\n\n    //...\n\n    await closeApp(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Authentication Controller in TypeScript\nDESCRIPTION: Implement a controller with a route `/passport/local` that uses the `LocalPassportMiddleware`. The `localPassport` method logs and returns the authenticated user data from the request context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// controller.ts\n\nimport { Provide, Post, Inject, Controller } from '@midwayjs/core';\n\n@Provide()\n@Controller('/')\nexport class LocalController {\n\n  @Post('/passport/local', { middleware: [LocalPassportMiddleware] })\n  async localPassport() {\n    console.log('local user: ', this.ctx.req.user);\n    return this.ctx.req.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Circular Dependencies with Lazy Functions\nDESCRIPTION: This TypeScript code demonstrates how to handle circular dependencies between classes when defining types for Swagger. Lazy functions (arrow functions) are used to provide type information when the type is not yet fully defined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass Photo {\n  // ...\n  @ApiProperty({\n    type: () => Album\n  })\n  album: Album;\n}\nclass Album {\n  // ...\n  @ApiProperty({\n    type: () => Photo\n  })\n  photo: Photo;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CreateCatDto {\n  // ...\n\n  @ApiProperty({\n    type: 'array',\n    items: {\n      $ref: () => getSchemaPath(Cat)\n    }\n  })\n  relatedList: Cat[];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters with @Query\nDESCRIPTION: This code shows how to extract query parameters from the URL using the `@Query` decorator. The `getUser` method retrieves the `id` parameter from the query string and uses it.  The route is defined as `/` under the `/api/user` controller prefix.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n\nimport { Controller, Provide, Get, Query } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/api/user')\nexport class UserController {\n  @Get('/')\n  async getUser(@Query() id: string): Promise<User> {\n    // xxxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to a Single Route\nDESCRIPTION: This code shows how to apply middleware to a single route using the `@Get` decorator in Midway.js. Similar to the `@Controller` decorator, the `middleware` property is used to specify the middleware to be applied to that specific route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/web_middleware.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Provide } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/', { middleware: ['reportMiddleware'] })\n  async home() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Component Dependency\nDESCRIPTION: This snippet shows how to add a component dependency to your MidwayJS application's `package.json` file. This makes the component available for use within your application. It uses `@midwayjs/validate` as an example.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/midway_component.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@midwayjs/validate\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker-Compose Services\nDESCRIPTION: This command builds the services defined in the docker-compose.yml file. It creates the necessary images for each service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/deployment.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose build\n```\n\n----------------------------------------\n\nTITLE: Updating `package.json` with `midway-version -u -w` (npm)\nDESCRIPTION: This command updates the Midway package versions listed in the `package.json` file, automatically writing the new versions to the file. This simplifies the update process and ensures that the project's dependencies are accurately reflected.  The `-w` flag writes the updates to `package.json`, and `npx` runs `midway-version` without global installation for community users.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_update_midway.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Community user\n$ npx midway-version -u -w\n# Internal user\n$ tnpx @ali/midway-version -u -w\n```\n\n----------------------------------------\n\nTITLE: Service Startup with Entry Point - mwtsc - JSON\nDESCRIPTION: This snippet shows how to configure the `dev` command to start the service using a specific entry point, `bootstrap.js`, with `mwtsc`. This is useful when you want the local development environment to closely mimic the production environment, including the initialization parameters defined in the `bootstrap.js` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"mwtsc --watch --run bootstrap.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Delay Load without Layer and Egg-Cluster in MidwayJS\nDESCRIPTION: This snippet describes a bug fix for delayed loading scenarios in MidwayJS, specifically when neither a layer nor egg-cluster is present. This ensures proper application initialization in these specific configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n- delay load without layer and egg-cluster ([#985](https://github.com/midwayjs/midway/issues/985)) ([52ba60d](https://github.com/midwayjs/midway/commit/52ba60d67d6e2df7a53609f72ec067dc083317ce))\n```\n\n----------------------------------------\n\nTITLE: Configuring Info Component in Midway.js\nDESCRIPTION: This TypeScript code configures the @midwayjs/info component within a Midway.js application. It imports the necessary modules and adds the info component to the imports array within the @Configuration decorator. This makes the info component available for use in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/info.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as info from '@midwayjs/info';\n\n@Configuration({\n  imports: [\n    // ...\n    info\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding component and framework config definition\nDESCRIPTION: This code snippet introduces a new feature by adding component and framework configuration definitions. This enhances the configurability and extensibility of the MidwayJS framework, allowing developers to customize and tailor the framework to their specific needs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Features\n\n//- add component and framework config definition ([#1367](https://github.com/midwayjs/midway/issues/1367)) ([b2fe615](https://github.com/midwayjs/midway/commit/b2fe6157f99659471ff1333eca0b86bb889f61a3))\n```\n\n----------------------------------------\n\nTITLE: Updating amqp-connection-manager dependency in MidwayJS RabbitMQ\nDESCRIPTION: This snippet describes the updating of the amqp-connection-manager dependency to version 4 within the @midwayjs/rabbitmq package. This update likely includes bug fixes or new features from the dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- **deps:** update dependency amqp-connection-manager to v4 ([#1534](https://github.com/midwayjs/midway/issues/1534)) ([78612e1](https://github.com/midwayjs/midway/commit/78612e13211332112f28e868404473b9fe5a7b75))\n```\n\n----------------------------------------\n\nTITLE: Use Nunjucks Filter in Template\nDESCRIPTION: Illustrates how to use a custom filter within a Nunjucks template. The 'hello' filter is applied to the 'name' variable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  {\n    name | hello;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Functions Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure multiple functions within a `functions` section.  Each function specifies a handler and memory size. This snippet illustrates defining different handlers and memory configurations for each function in the service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n  hello1:\n    handler: index.handler1\n    memorySize: 128\n  hello2:\n    handler: index.handler2\n    memorySize: 256\n  hello3:\n    handler: index.handler3\n    memorySize: 512\n```\n\n----------------------------------------\n\nTITLE: Internal Redirect (Typescript)\nDESCRIPTION: This snippet demonstrates how to perform an internal redirect to another route using `ctx.forward` in a MidwayJS controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    return this.ctx.forward('/api');\n  }\n  \n  @Get('/api')\n  async api() {\n    return 'abc';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Framework for Testing (TypeScript)\nDESCRIPTION: This code snippet shows how to create a framework instance for testing using `@midwayjs/mock`. It imports the custom `Framework` and the `create` function from `@midwayjs/mock`, and then uses `create<Framework>()` to instantiate the framework. This provides a way to test the framework's functionality in isolation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_development.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Framework } from 'xxxxxx';\nimport { create } from '@midwayjs/mock';\n\ndescribe('/test/framework.test.ts', () => {\n\n\tit('test framework', async () => {\n\n  \t// create framework with user code\n\t\tconst framework = await create<Framework>();\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Support - MidwayJS\nDESCRIPTION: This commit adds initial RabbitMQ integration. It includes the necessary configurations, services, and classes to interact with a RabbitMQ server, allowing MidwayJS applications to publish and consume messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nadd rabbitmq ([#647](https://github.com/midwayjs/midway/issues/647)) ([2c03eb4](https://github.com/midwayjs/midway/commit/2c03eb4f5e979d309048a11f17f7579a1d299ba1))\n```\n\n----------------------------------------\n\nTITLE: Enable Socket.IO with Koa - TypeScript\nDESCRIPTION: Enables the Socket.IO component within a MidwayJS configuration, alongside Koa. It imports both `@midwayjs/koa` and `@midwayjs/socketio` modules and includes them in the `imports` array of the `@Configuration` decorator. This integrates Socket.IO functionality into a Koa-based MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as socketio from '@midwayjs/socketio';\n\n@Configuration({\n  imports: [koa, socketio]\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/bullmq Package\nDESCRIPTION: This command installs the @midwayjs/bullmq package as a dependency for your MidwayJS project, enabling the use of BullMQ for task queue management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/bullmq@3 --save\n```\n\n----------------------------------------\n\nTITLE: Install static-file Package using npm\nDESCRIPTION: This command installs the @midwayjs/static-file package as a project dependency, enabling static asset serving.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/static_file.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/static-file@3 --save\n```\n\n----------------------------------------\n\nTITLE: Singleton Service Definition (New)\nDESCRIPTION: This code snippet shows the new and simplified way of defining a singleton service in MidwayJS using the `@Singleton` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-01-30-release-3.10.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Singleton()\nclass SingletonService {}\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Configuration Options\nDESCRIPTION: This snippet defines the configuration options for RabbitMQ within MidwayJS, including the connection URL, socket options, and reconnect time. The `IMidwayRabbitMQConfigurationOptions` type outlines the structure of the configuration object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type IMidwayRabbitMQConfigurationOptions = {\n  url: string | Options.Connect;\n  socketOptions?: any;\n  reconnectTime?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Midway Logger Feature\nDESCRIPTION: This commit introduces a new logging feature to MidwayJS. This feature enables developers to implement structured logging in their applications, making debugging and monitoring easier. The implementation uses the @midwayjs/logger package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n13e8cc753d994e6f9f073688e22527f75d39984a\n```\n\n----------------------------------------\n\nTITLE: Using app.getConfig() to get configuration values\nDESCRIPTION: This code snippet showcases how to use the `getConfig()` method to retrieve application configuration values. It shows how to retrieve all configurations, a specific configuration by key, and multi-level configurations using dot notation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// 获取所有配置\nthis.app.getConfig();\n// 获取特定 key 配置\nthis.app.getConfig('koa');\n// 获取多级配置\nthis.app.getConfig('midwayLoggers.default.dir');\n```\n\n----------------------------------------\n\nTITLE: Mongoose and Typegoose Dependencies for MongoDB 4.4.x (Not Recommended)\nDESCRIPTION: This JSON snippet shows an older set of dependencies for using Mongoose and Typegoose with MongoDB Server 4.4.x. It includes specific versions of `mongodb`, `mongoose`, and `@typegoose/typegoose`.  This setup also requires specific versions of `@types/mongodb` and `@types/mongoose` and is not recommended for new projects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n \"dependencies\": {\n    \"mongodb\": \"3.6.3\",\t\t\t\t\t\t\t\t\t// mongoose 内部写死了该版本\n    \"mongoose\": \"~5.10.18\",\n    \"@typegoose/typegoose\": \"^7.0.0\",   // 使用 typegoose 需要安装此依赖\n },\n \"devDependencies\": {\n    \"@types/mongodb\": \"3.6.3\",\t\t\t\t\t// 只能使用此版本\n    \"@types/mongoose\": \"~5.10.3\",\n }\n```\n\n----------------------------------------\n\nTITLE: Injecting App-Created Loggers - TypeScript\nDESCRIPTION: This snippet shows how to inject loggers created from the `app` instance using the `@Logger` decorator.  It assumes the loggers were created in the `configuration.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ILogger } from '@midwayjs/logger';\n\nexport class UserService {\n  @Logger('custom1')\n  custom1Logger: ILogger;\n\n  @Logger('custom2')\n  custom2Logger: ILogger;\n\n  @Logger('custom3')\n  custom3Logger: ILogger;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Egg Router Before Midway Container Ready\nDESCRIPTION: This bug fix addresses the issue of loading the Egg.js router before the Midway container is ready. The commit is 4640674c752122ef4706282b55cff2deb097867e and resolves issue #909.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Configure Prometheus scraping\nDESCRIPTION: Configures the prometheus.yml file for scraping metrics. It defines the scrape interval and the targets from which to collect metrics.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\nscrape_configs:\n  - job_name: 'node'\n    file_sd_configs:\n      - refresh_interval: 1m\n        files:\n          - '/etc/prometheus/targets.json'\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: This command starts the local development server for the mini program. It uses `npm start` to initiate the development environment, allowing developers to preview and test their mini program locally.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_miniprogram.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adjusting Entity Return Types - TypeScript\nDESCRIPTION: This snippet shows how to adjust entity return types, such as `@CreateDateColumn` and `@UpdateDateColumn`, to string when the `dateStrings` configuration is enabled. This will return formatted date strings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n@UpdateDateColumn({\n  name: \"gmt_modified\",\n  type: 'timestamp'\n})\ngmtModified: string;\n\n@CreateDateColumn({\n  name: \"gmt_create\",\n  type: 'timestamp',\n})\ngmtCreate: string;\n```\n\n----------------------------------------\n\nTITLE: Middleware with Request Scope Instance\nDESCRIPTION: This code demonstrates how to access request-scoped instances within a middleware. Since middleware instances are singletons, you need to use `ctx.requestContext.getAsync('xxx')` within the `resolve` method to bind to the current context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/controller.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\nexport class ApiMiddleware implements WebMiddleware {\n  @inject()\n  myService; // 由于中间件实例属于单例，这个实例即使注入也无法获取到 ctx\n\n  resolve(): Middleware {\n    return async (ctx, next) => {\n      // 必须通过从请求作用域中获取对象的方式，来绑定上下文\n      ctx.service = await ctx.requestContext.getAsync('myService');\n      await next();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getMatchedRouterInfo to get Current Route\nDESCRIPTION: This snippet demonstrates how to use the `getMatchedRouterInfo` method of `MidwayWebRouterService` to retrieve the `RouterInfo` object for the currently matched route.  It is used within middleware to determine if a route is registered in the routing table, allowing for pre-controller processing such as authentication.  It requires the `@midwayjs/core` package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, Inject, httpError, MidwayWebRouterService } from '@midwayjs/core';\n\n@Middleware()\nexport class AuthMiddleware {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  resolve() {\n    return async (ctx, next) => {\n      // Query whether the current route is registered in the routing table.\n      const routeInfo = await this.webRouterService.getMatchedRouterInfo(ctx.path, ctx.method);\n      if (routeInfo) {\n        await next();\n      } else {\n        throw new httpError.NotFoundError();\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing cluster compatible issue in MidwayJS\nDESCRIPTION: This code snippet fixes an issue related to cluster compatibility in the MidwayJS framework. It addresses issue #1942 and includes a commit hash for the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/oss/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- cluster compatible ([#1942](https://github.com/midwayjs/midway/issues/1942)) ([3891150](https://github.com/midwayjs/midway/commit/3891150deec98c9f09edee0973ca8f52d79c66f5))\n```\n\n----------------------------------------\n\nTITLE: Rendering EJS template without extension\nDESCRIPTION: This TypeScript code shows how to render an EJS template from within a Midway.js controller after configuring the default extension.  The `ctx.render` method now only requires the base name of the template (e.g., 'hello' instead of 'hello.ejs').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render() {\n    await this.ctx.render('hello', {\n      data: 'world',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes for Missing MaxAge\nDESCRIPTION: This commit adds the missing maxAge property to the static file configuration. The maxAge property controls the cache lifetime of the static files served by the middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- add missing maxAge ([#1612](https://github.com/midwayjs/midway/issues/1612)) ([5f21909](https://github.com/midwayjs/midway/commit/5f21909104db650e96f1e3445bbbfceadf536c06))\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Board Module in MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to import and configure the `@midwayjs/bull-board` module within a MidwayJS application's configuration. This registers the middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as bullmq from '@midwayjs/bullmq';\nimport * as bullBoard from '@midwayjs/bull-board';\n\n@Configuration({\n  imports: [\n    // ...\n    bullmq,\n    bullBoard,\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: IPipelineHandler Interface Definition\nDESCRIPTION: Defines the IPipelineHandler interface, outlining the methods for executing a pipeline with different strategies such as parallel, concat, series, concatSeries and waterfall.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IPipelineHandler {\n  /**\n   * 并行执行，使用 Promise.all\n   * @param opts 执行参数\n   */\n  parallel<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * 并行执行，最终 result 为数组\n   * @param opts 执行参数\n   */\n  concat<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * 串行执行，使用 foreach await\n   * @param opts 执行参数\n   */\n  series<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * 串行执行，使用 foreach await，最终 result 为数组\n   * @param opts 执行参数\n   */\n  concatSeries<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * 串行执行，但是会把前者执行结果当成入参，传入到下一个执行中去，最后一个执行的 valve 结果会被返回\n   * @param opts 执行参数\n   */\n  waterfall<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Install @midwayjs/session - Bash\nDESCRIPTION: Installs the @midwayjs/session component as a project dependency using npm. This command adds the session management functionality to your Midway.js application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/session --save\n```\n\n----------------------------------------\n\nTITLE: Mocking Header in MidwayJS with @midwayjs/mock\nDESCRIPTION: This code snippet demonstrates how to use `mockHeader` from `@midwayjs/mock` to simulate HTTP headers in a MidwayJS application during testing. It sets the `x-abc` header to 'bbb', allowing you to test code that relies on specific header values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockHeader } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  mockHeader(app, 'x-abc', 'bbb');\n\n  const result1 = await createHttpRequest(app).get('/');\n  // ctx.headers['x-abc'] => bbb\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Express Routing Middleware\nDESCRIPTION: This commit fixes an issue where Express routing middleware was only taking effect at the controller level. The fix ensures that middleware applies correctly across the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nexpress routing middleware takes effect at the controller level ([#1364](https://github.com/midwayjs/midway/issues/1364)) ([b9272e0](https://github.com/midwayjs/midway/commit/b9272e0971003443304b0c53815be31a0061b4bd))\n```\n\n----------------------------------------\n\nTITLE: Task Status and Management\nDESCRIPTION: This snippet demonstrates how to update and retrieve the progress of a task, as well as get its current state (e.g., 'delayed', 'completed', 'failed'). It uses the `Job` object returned by `addJobToQueue`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullmqFramework.getQueue('test');\nconst job = await testQueue?.addJobToQueue();\n\n// Update progress\nawait job.updateProgress(60);\n// Get progress\nconst progress = await job.progress;\n// => 60\n\n// Get task status\nconst state = await job.getState();\n// state => 'delayed'\n// state => 'completed'\n// state => 'failed'\n```\n\n----------------------------------------\n\nTITLE: Add ETCD Dependency to package.json\nDESCRIPTION: This JSON snippet shows how to manually add `@midwayjs/etcd` as a dependency in your `package.json` file.  This allows you to manage and track your project dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/etcd.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/etcd\": \"^3.0.0\",\n    //...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Midway Hooks Path Parameter Example\nDESCRIPTION: Demonstrates how to use path parameters in Midway Hooks routes using the `[file]` naming convention. The example defines a route `/api/about/:name/project` and uses `Params<T>` to define the type of the `name` parameter. It retrieves the parameter value from the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/file-route.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// lambda/[name]/project.ts\nimport {\n  Api\n  Get\n  Params\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get()\n  Params<{ name: string }>()\n  async () => {\n    const ctx = useContext();\n    return {\n      name: ctx.params.name\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Run Midway App in Development Mode\nDESCRIPTION: This command starts the Midway.js application in development mode using `npm run dev`.  It launches an HTTP server, typically on port 7001, allowing users to access the application in a web browser. The command assumes that the `dev` script is defined in `package.json` and correctly configures the Midway CLI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/start_app.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n$ open http://localhost:7001\n```\n\n----------------------------------------\n\nTITLE: Fixing Mongoose Remote Config Bug\nDESCRIPTION: This code snippet refers to a commit that fixes a bug related to Mongoose remote configuration within the MidwayJS framework. The bug fix likely addresses issues in how the application retrieves or utilizes Mongoose configurations from a remote source, ensuring correct database connection parameters and settings are applied during runtime. The commit hash e37602d provides a direct reference to the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_6\n\nLANGUAGE: N/A\nCODE:\n```\ne37602d\n```\n\n----------------------------------------\n\nTITLE: Updating Sequelize Dependency\nDESCRIPTION: Updates the sequelize dependency to version ~6.12.0. This ensures compatibility and incorporates latest features or bug fixes from the sequelize library in MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/sequelize/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n- **deps:** update dependency sequelize to ~6.12.0 ([#1509](https://github.com/midwayjs/midway/issues/1509)) ([6f96bf7](https://github.com/midwayjs/midway/commit/6f96bf745761c849c94a8977436dc2955f3d9a3c))\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP GET Request with makeHttpRequest in Typescript\nDESCRIPTION: This snippet demonstrates a simple HTTP GET request using the `makeHttpRequest` function from `@midwayjs/core`. It sends a request to a specified URL and returns the data as a Buffer.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/');\n\n// Buffer.isBuffer(result.data) => true\n```\n\n----------------------------------------\n\nTITLE: Fixing Delay Load in MidwayJS\nDESCRIPTION: This bug fix addresses an issue with delay loading when no layer and egg-cluster are present. The associated commit is 52ba60d67d6e2df7a53609f72ec067dc083317ce and resolves issue #985.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Inheritance Check Example with DTOs\nDESCRIPTION: This snippet demonstrates inheritance validation using DTOs in MidwayJS. It shows how to create a base DTO (`CommonUserDTO`) with common attributes and then extend it in another DTO (`UserDTO`) to add specific attributes. The `@Rule` decorator is used to define validation rules for each attribute.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType } from '@midwayjs/validate';\n\nexport class CommonUserDTO {\n  @Rule(RuleType.string().required())\n  token: string;\n  @Rule(RuleType.string())\n  workId: string;\n}\n\nexport class UserDTO extends CommonUserDTO {\n\n  @Rule(RuleType.string().required())\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: mwtsc in watch mode\nDESCRIPTION: This snippet shows how to use `mwtsc` in watch mode for automatic recompilation on file changes. It's equivalent to `tsc --watch`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 监听模式\n$ npx mwtsc --watch\n```\n\n----------------------------------------\n\nTITLE: Setting response header with SetHeader\nDESCRIPTION: This snippet demonstrates how to set a response header using the `SetHeader` function in Midway Hooks. It sets the 'X-Powered-By' header to 'Midway'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  SetHeader\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get(),\n  SetHeader('X-Powered-By', 'Midway'),\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Weather API with Jest (TypeScript)\nDESCRIPTION: This code snippet showcases unit testing of a `/weather` API endpoint using Jest and `@midwayjs/mock`. It creates an application instance using `createApp`, sends HTTP requests using `createHttpRequest`, and asserts the response status and content using `expect`. The test suite includes both success and failure scenarios. `beforeAll` and `afterAll` are used to manage the application lifecycle.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/koa';\n\ndescribe('test/controller/weather.test.ts', () => {\n\n  let app: Application;\n  beforeAll(async () => {\n    // create app\n    app = await createApp<Framework>();\n  });\n\n  afterAll(async () => {\n    // close app\n    await close(app);\n  });\n\n  it('should test /weather with success request', async () => {\n    // make request\n    const result = await createHttpRequest(app).get('/weather').query({ cityId: 101010100 });\n\n    expect(result.status).toBe(200);\n    expect(result.text).toMatch(/北京/);\n  });\n\n  it('should test /weather with fail request', async () => {\n    const result = await createHttpRequest(app).get('/weather');\n\n    expect(result.status).toBe(200);\n    expect(result.text).toMatch(/weather data is empty/);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: IPipelineResult Interface Definition\nDESCRIPTION: Defines the structure of the result returned by the Pipeline execution. It includes a success flag, an optional error object containing valve name, message and original Error, and the actual result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * pipeline 执行返回结果\n */\nexport interface IPipelineResult<T> {\n  /**\n   * 是否成功\n   */\n  success: boolean;\n  /**\n   * 异常信息(如果有则返回)\n   */\n  error?: {\n    /**\n     * 异常出在那个 valve 上\n     */\n    valveName?: string;\n    /**\n     * 异常信息\n     */\n    message?: string;\n    /**\n     * 原始 Error\n     */\n    error?: Error;\n  };\n  /**\n   * 返回结果\n   */\n  result: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Install @vercel/ncc Globally\nDESCRIPTION: This command installs the @vercel/ncc package globally. It's used for building single-file executables by compiling Node.js projects into a single file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @vercel/ncc -g\n```\n\n----------------------------------------\n\nTITLE: Controller with implicit Provide\nDESCRIPTION: This code snippet shows how the `@Provide()` decorator is implicitly included in the `@Controller()` decorator.  This is the equivalent to writing `@Provide()` above the controller decorator. The controller is still managed by the dependency injection container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Controller('/api/user')\nexport class APIController {\n```\n\n----------------------------------------\n\nTITLE: OSS Trigger in Alibaba Cloud Function Compute with Midway\nDESCRIPTION: This code snippet demonstrates how to bind an OSS trigger in Alibaba Cloud Function Compute using the `@ServerlessTrigger` decorator in Midway. It handles events related to file creation or updates in OSS. Dependencies include `@midwayjs/core`, `@midwayjs/faas`, and `@midwayjs/fc-starter`. The input is an `OSSEvent` object, and the output is not explicitly defined (represented by `//xxx`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\nimport type { OSSEvent } from '@midwayjs/fc-starter';\n\n@Provide()\nexport class HelloAliyunService {\n   @Inject()\n   ctx: Context;\n\n   @ServerlessTrigger(ServerlessTriggerType.OS)\n   async handleOSSEvent(event: OSSEvent) {\n     //xxx\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using Registered Objects (TypeScript)\nDESCRIPTION: This code demonstrates how to inject and use an object that has been registered in the IoC container. The @Inject decorator is used to inject the 'sequelize' object into the IndexHandler class. This allows the handler to access the registered object and perform operations like database interactions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/lifecycle.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class IndexHandler {\n  @Inject()\n  sequelize;\n\n  async handler() {\n    console.log(this.sequelize);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Passport Compatible Code\nDESCRIPTION: This commit fixes code to ensure compatibility with Passport in the MidwayJS framework. This is likely related to authentication or user management and helps streamline integration with Passport.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\npassport compatible code ([#2133](https://github.com/midwayjs/midway/issues/2133)) ([2975e4f](https://github.com/midwayjs/midway/commit/2975e4f5b6cf8cbcd42cbfb8ce3e08633dbba383))\n```\n\n----------------------------------------\n\nTITLE: Creating a BullMQ Task Flow in TypeScript\nDESCRIPTION: This code snippet illustrates how to create a task flow using BullMQ's Flow Producer in MidwayJS. It initializes a Flow Producer and adds a parent job with a child job, establishing a dependency relationship. The parent job ('flow-queue-1') will execute before the child job ('flow-queue-2').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2025-01-14-release-3.20.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 创建任务流\nconst flowProducer = bullmqFramework.createFlowProducer({}, 'test-flow');\n\nawait flowProducer.add({\n  name: 'flow-test',\n  queueName: 'flow-queue-1',\n  data: { value: 1 },\n  children: [\n    {\n      name: 'child-job',\n      queueName: 'flow-queue-2',\n      data: { value: 2 }\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Get Cache Instance via API\nDESCRIPTION: Demonstrates how to get a cache instance programmatically using the `CachingFactory` and its `get` method. This provides an alternative to using the `@InjectClient` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayCache } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  cachingFactory: CachingFactory;\n\n  async invoke() {\n    const caching = await this.cachingFactory.get('default');\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Redirect\nDESCRIPTION: This snippet demonstrates how to redirect the request to another URL using the `Redirect` function in Midway Hooks. It redirects the request from `/demo` to `/hello`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Redirect\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get('/demo'),\n  Redirect('/hello'),\n  async () => {}\n);\n```\n\n----------------------------------------\n\nTITLE: Configure Delayed Initialization - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure lazy initialization for a logger in MidwayJS. The `lazyLoad` option delays the initialization of `customLoggerB` until it's actually used, improving startup performance when not all loggers are immediately needed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     clients: {\n       customLoggerA: {\n         // ..\n       },\n       customLoggerB: {\n         lazyLoad: true,\n       },\n     }\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Serverless Trigger Handler with Context\nDESCRIPTION: This code snippet shows a typical serverless function handler using the Midway Serverless framework. It imports `Context` and `Provide` decorators from `@midwayjs/faas` and `@midwayjs/core` respectively. The `handler` function receives an `event` parameter and returns a simple string. This is a normal trigger scenario.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_context.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\nimport { Provide } from '@midwayjs/core';\n\n@Provide()\nexport class Index {\n\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(...)\n  async handler(event) {\n  \treturn 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing string body in Tencent Cloud Gateway\nDESCRIPTION: This TypeScript code shows how to access the request body when using Tencent Cloud Gateway and a string is sent in the body. The `ctx.request.body` will contain the body as a string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // \"bbb\" => string\n```\n\n----------------------------------------\n\nTITLE: Configuring User Retrieval for Casbin\nDESCRIPTION: This code configures how to obtain the username from the context when using decorator authentication with Casbin. In this case, it retrieves the username from `ctx.user`, assuming that user information is stored there after authentication (e.g., using passport).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    casbin: {\n      modelPath: join(appInfo.appDir, 'basic_model.conf')\n      policyAdapter: join(appInfo.appDir, 'basic_policy.csv')\n      usernameFromContext: (ctx) => {\n        return ctx.user;\n      }\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple COS Clients\nDESCRIPTION: This configuration shows how to set up multiple COS clients, each with its own set of `SecretId` and `SecretKey`. This allows the application to interact with different COS buckets or accounts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cos.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const cos = {\n  clients: {\n    instance1: {\n      SecretId: '***********',\n      SecretKey: '***********',\n    },\n    instance2: {\n      SecretId: '***********',\n      SecretKey: '***********',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating GET Request with Query Parameters (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a GET request with query parameters using the `createHttpRequest` function. Query parameters are appended to the URL. This is useful for testing routes that accept query parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app).get('/set_header').query({ name: 'harry' });\n```\n\n----------------------------------------\n\nTITLE: Running Tests with forceExit and ts (Bash)\nDESCRIPTION: This bash command executes the test suite using `midway-bin test` with TypeScript support enabled (`--ts`) and forces the process to exit after completion (`--forceExit`). It demonstrates how to run tests and coverage with the force exit option.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin test --ts --forceExit\n$ midway-bin cov --ts --forceExit\n```\n\n----------------------------------------\n\nTITLE: Monitoring File Changes\nDESCRIPTION: Specifies additional files or folders to monitor for changes. Uses the `--watchFile` option, with multiple paths separated by commas.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n// Specify multiple files, separated by commas\n$ midway-bin dev --ts --watchFile=./a.txt,./b.txt\n\n// Specify multiple folders and files separated by commas\n$ midway-bin dev --ts --watchFile=./test,./b.txt\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ dependencies\nDESCRIPTION: This snippet shows the commands to install the necessary dependencies for RabbitMQ integration in a MidwayJS project, including the core RabbitMQ module, amqplib, and its TypeScript definitions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/rabbitmq@3 --save\n$ npm i amqplib --save\n$ npm i @types/amqplib --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Jaeger Exporter dependencies\nDESCRIPTION: This snippet shows how to install the necessary OpenTelemetry packages for using the Jaeger exporter with npm.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @opentelemetry/exporter-jaeger @opentelemetry/propagator-jaeger\n```\n\n----------------------------------------\n\nTITLE: Example JSON Version Matching\nDESCRIPTION: This JSON configuration provides version compatibility information for various Midway packages. Each package name is a key, and the corresponding value is a string or an array of strings representing compatible versions. This example showcases how specific versions of different packages within the Midway ecosystem are designed to work together, aiding in dependency management and conflict resolution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_update_midway.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@midwayjs/egg-layer\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ],\n  \"@midwayjs/express-layer\": \"2.10.18\",\n  \"@midwayjs/faas-typings\": \"2.10.7\",\n  \"@midwayjs/koa-layer\": \"2.10.18\",\n  \"@midwayjs/runtime-engine\": \"2.10.14\",\n  \"@midwayjs/runtime-mock\": \"2.10.14\",\n  \"@midwayjs/serverless-app\": \"2.10.18\",\n  \"@midwayjs/serverless-aws-starter\": \"2.10.14\",\n  \"@midwayjs/serverless-fc-starter\": \"2.10.18\",\n  \"@midwayjs/serverless-fc-trigger\": \"2.10.18\",\n  \"@midwayjs/serverless-http-parser\": \"2.10.7\",\n  \"@midwayjs/serverless-scf-starter\": \"2.10.14\",\n  \"@midwayjs/serverless-scf-trigger\": \"2.10.18\",\n  \"@midwayjs/static-layer\": \"2.10.18\",\n  \"@midwayjs/bootstrap\": \"2.10.18\",\n  \"@midwayjs/cache\": \"2.10.18\",\n  \"@midwayjs/consul\": \"2.10.18\",\n  \"@midwayjs/core\": \"2.10.18\",\n  \"@midwayjs/decorator\": \"2.10.18\",\n  \"@midwayjs/faas\": \"2.10.18\",\n  \"@midwayjs/grpc\": \"2.10.18\",\n  \"@midwayjs/logger\": \"2.10.18\",\n  \"midway-schedule\": \"2.10.18\",\n  \"midway\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ],\n  \"@midwayjs/mock\": \"2.10.18\",\n  \"@midwayjs/prometheus\": \"2.10.18\",\n  \"@midwayjs/rabbitmq\": \"2.10.18\",\n  \"@midwayjs/socketio\": \"2.10.18\",\n  \"@midwayjs/task\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ],\n  \"@midwayjs/typegoose\": \"2.10.18\",\n  \"@midwayjs/version\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ],\n  \"@midwayjs/express\": \"2.10.18\",\n  \"@midwayjs/koa\": \"2.10.18\",\n  \"@midwayjs/web\": [\n    \"2.10.18\",\n    \"2.10.19\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single HTTP Client Instance - TypeScript\nDESCRIPTION: This code snippet configures settings for a single HTTP client instance using the 'client' property and shows how to get the default instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service_factory.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  default: {\n    timeout: 3000,\n  },\n  client: {\n    baseUrl: '',\n  },\n};\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPClientServiceFactory } from './service/httpClientServiceFactory';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  serviceFactory: HTTPClientServiceFactory;\n\n  async invoke() {\n\n    const httpClient = this.serviceFactory.get();\n\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Replacing egg-bin with Midway CLI\nDESCRIPTION: This feature replaces `egg-bin` with the Midway CLI for managing MidwayJS projects. This likely provides a more streamlined and integrated development experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Disable Automatic CRLF Conversion in Git (Global)\nDESCRIPTION: This command disables the automatic conversion of line endings between CRLF (Windows) and LF (Linux/macOS) when committing and checking out files. This is crucial to avoid issues with line ending inconsistencies across different operating systems.  After running this command, it is necessary to re-clone the repository.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/git_problem.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global core.autocrlf false\n```\n\n----------------------------------------\n\nTITLE: Defining a Controller Without @Controller\nDESCRIPTION: This code snippet shows how to define a controller class without using the `@Controller` decorator, for dynamically adding it later.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Get, Provide } from '@midwayjs/core';\n\n// 注意这里未使用 @Controller 修饰\n@Provide()\nexport class DataController {\n  @Get('/query_data')\n  async getData() {\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Example with mysql2\nDESCRIPTION: This code shows an example of creating a MySQL connection using the `mysql2` package and configuring the `@midwayjs/tags` component to use it. The `query` function adapts the `mysql2` promise-based query method to be compatible with the tag component's requirements.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nconst mysql = require('mysql2');\nexport default () => {\n   const connection = mysql.createConnection({\n       host: 'db4free.net',\n       user: 'tag***',\n       password: 'tag***',\n       database: 'tag***',\n       charset: 'utf8',\n   });\n   return {\n     tags: {\n       clients: {\n         'tagGroup': {\n           dialectType: 'mysql',\n           sync: true,\n           instance: { // mysql connection instance containing query\n             query: (...args) => {\n               return connection.promise().query(...args);\n             }\n           },\n         },\n       },\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Run single test using Jest testNamePattern\nDESCRIPTION: This snippet shows how to run a single test case by name using the Jest `-t` or `--testNamePattern` option.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ jest -t \"name of your test\"\n```\n\n----------------------------------------\n\nTITLE: Client-Side Heartbeat Handling\nDESCRIPTION: Demonstrates how a WebSocket client can handle heartbeat messages from the server. The client listens for 'ping' events, and upon receiving one, resets a timeout. If the timeout expires without receiving another 'ping', the client assumes the connection is lost and attempts to reconnect or abort.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport WebSocket from 'ws';\n\nfunction heartbeat() {\n   clearTimeout(this.pingTimeout);\n\n   // After each ping is received, delay and wait. If the server ping message is not received next time, it is considered that there is a problem.\n   this.pingTimeout = setTimeout(() => {\n     //Reconnect or abort\n   }, 30000 + 1000);\n}\n\nconst client = new WebSocket('wss://websocket-echo.com/');\n\n// ...\nclient.on('ping', heartbeat);\n```\n\n----------------------------------------\n\nTITLE: Config with Client Default in Memory (TypeScript)\nDESCRIPTION: This snippet illustrates how when a `client` is configured in `config.default.ts`, it's internally transformed into a `clients` configuration with a `default` key, making it consistent with the multiple instance configuration pattern.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  client: {\n  \tbaseUrl: ''\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  clients: {\n    default: {\n      baseUrl: ''\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Generic Return Data with SuccessWrapper in Typescript\nDESCRIPTION: This snippet defines a `SuccessWrapper` function to wrap generic return data with a common structure (code, message, data) for API responses. It utilizes the `@ApiProperty` decorator to define the properties of the wrapper class.  It also shows how to extend the generated class to create a specific return type like `ViewCat`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Type } from '@midwayjs/swagger';\n\ntype Res<T> = {\n  code: number;\n  message: string;\n  data: T;\n}\n\nexport function SuccessWrapper<T>(ResourceCls: Type<T>): Type<Res<T>> {\n  class Successed {\n    @ApiProperty({ description: '状态码' })\n    code: number;\n\n    @ApiProperty({ description: '消息' })\n    message: string;\n\n    @ApiProperty({\n      type: ResourceCls,\n    })\n    data: T;\n  }\n\n  return Successed;\n}\n\nclass ViewCat extends SuccessWrapper<Cat>(Cat) {}\n\n@Get('/:id')\n@ApiResponse({\n  status: 200,\n  description: 'The found record',\n  type: ViewCat,\n})\nasync findOne(@Param('id') id: string, @Query('test') test: any): ViewCat {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing exports missing in MidwayJS\nDESCRIPTION: This commit addresses a bug where certain exports were missing in MidwayJS. The fix ensures that all necessary modules or components are properly exported, allowing other parts of the application to access and utilize them.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Bug Fix: Configuration Inject Plugin in Production\nDESCRIPTION: Fixes an issue where configuration injection plugin was not working correctly in the production environment. This ensures proper configuration loading and dependency injection in production deployments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nconfiguration inject plugin and more in production environment ([#680](https://github.com/midwayjs/midway/issues/680)) ([41bce5d](https://github.com/midwayjs/midway/commit/41bce5d8a60a6fde61ff62794612eecff2e260ed))\n```\n\n----------------------------------------\n\nTITLE: Adding Midway Task Component\nDESCRIPTION: This commit introduces a task component to Midway.js. This component allows for the scheduling and execution of tasks within the Midway.js application, improving background processing capabilities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nadd midway task component ([#995](https://github.com/midwayjs/midway/issues/995)) ([befb81d](https://github.com/midwayjs/midway/commit/befb81dee90f01a20bba2c1835e8685cf85a76e7))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Factory - TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement a Service Factory for an HTTPClient in MidwayJS. It extends the ServiceFactory class and implements the createClient and getName methods to create and identify the service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service_factory.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServiceFactory } from '@midwayjs/core';\nimport { Provide } from '@midwayjs/decorator';\n\n@Provide()\nexport class HTTPClientServiceFactory extends ServiceFactory<HTTPClient> {\n  // 创建单个实例\n  protected createClient(config: any): any {\n    return new HTTPClient(config);\n  }\n\n  getName() {\n    return 'httpClient';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying tsconfig.json for Build Directory\nDESCRIPTION: Modifies the `tsconfig.json` file to update the `outDir` option. This specifies the output directory for the compiled JavaScript files. Changing this is necessary to alter the default `dist` directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/change_start_dir.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compileOnSave\": true,\n  \"compilerOptions\": {\n    // ...\n    \"outDir\": \"build\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Github OAuth Dependencies\nDESCRIPTION: Installs the passport-github library required for implementing Github OAuth strategy.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i passport-github --save\n```\n\n----------------------------------------\n\nTITLE: Add Missing Dependency\nDESCRIPTION: Adds a missing dependency to the project. This ensures that all required packages are available for the application to function correctly. The added dependency likely resolves a runtime error or compilation issue that was previously encountered.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nadd missing dep ([#1684](https://github.com/midwayjs/midway/issues/1684))\n```\n\n----------------------------------------\n\nTITLE: Add Guard Feature\nDESCRIPTION: Introduces a guard feature to the MidwayJS application. This enhancement provides a mechanism for controlling access to specific resources or functionalities. The guard acts as a security layer, ensuring that only authorized users or components can proceed with certain actions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345))\n```\n\n----------------------------------------\n\nTITLE: Configure Jest in jest.config.js (TypeScript)\nDESCRIPTION: This snippet shows the configuration for `jest.config.js`. It sets the preset to `ts-jest` for TypeScript support and specifies the test environment to be `midway-bin/jest/env.js`, which is specific to MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'midway-bin/jest/env.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Show all templates\nDESCRIPTION: This command displays all available templates, including those that are not the current version.  The `-a` parameter, passed to `create-midway` using `--`, forces the tool to show all templates.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- -a\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logger for BullMQ Component - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a custom logger for the BullMQ component using the `midwayLogger` configuration. It allows specifying a separate log file name for BullMQ logs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      bullMQLogger: {\n        fileLogName: 'midway-bullmq.log',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: mwtsc with project and bootstrap\nDESCRIPTION: This snippet demonstrates the use of both `--project` and `--run` arguments. It compiles the code using a specific tsconfig file and then executes a JavaScript file after successful compilation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc --watch --project tsconfig.production.json --run ./bootstrap.js\n```\n\n----------------------------------------\n\nTITLE: Executing Midway v1 with ts-node and debug flags\nDESCRIPTION: This command starts a Midway v1 application in development mode using ts-node for on-the-fly TypeScript compilation. It sets debug flags to provide detailed output during the startup process and specifies the 'local' environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/midway_slow_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// midway v1\ncross-env DEBUG=midway* NODE_ENV=local midway-bin dev --ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Nunjucks as default engine in Midway.js\nDESCRIPTION: This TypeScript code demonstrates how to configure Nunjucks as the default view engine within a Midway.js application's configuration file. It also defines a `mapping` that associates the `.nj` file extension with the 'nunjucks' engine.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  view: {\n    defaultViewEngine: 'nunjucks',\n    mapping: {\n      '.nj': 'nunjucks',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Midway Hooks App\nDESCRIPTION: This code shows how to create an api application from the template\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/intro.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit https://github.com/midwayjs/hooks/examples/api ./hooks-app\n```\n\n----------------------------------------\n\nTITLE: Installing Security Component\nDESCRIPTION: This command installs the @midwayjs/security component as a dependency in your Midway.js project using tnpm. This component provides security features such as CSRF and XSS protection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/security/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntnpm i @midwayjs/security --save\n```\n\n----------------------------------------\n\nTITLE: Injecting Data Source via Decorator - TypeScript\nDESCRIPTION: This snippet demonstrates how to inject TypeORM data sources directly into a class using the `@InjectDataSource` decorator in a MidwayJS application.  It injects both the default data source and a custom data source ('default1') into properties of the `MainConfiguration` class. Requires Midway v3.8.0 or later.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { InjectDataSource } from '@midwayjs/typeorm';\nimport { DataSource } from 'typeorm';\n\n@Configuration({\n   //...\n})\nexport class MainConfiguration {\n\n   // Inject the default data source\n   @InjectDataSource()\n   defaultDataSource: DataSource;\n\n   // inject custom data source\n   @InjectDataSource('default1')\n   customDataSource: DataSource;\n\n   async onReady(container: IMidwayContainer) {\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Request Context Load ConfigService in Midway.js\nDESCRIPTION: This commit addresses a bug related to loading the ConfigService within the request context in Midway.js.  The provided commit hash links to the specific change that resolves the problem. The fix ensures proper configuration loading during request handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_39\n\nLANGUAGE: Other\nCODE:\n```\nf2c874f\n```\n\n----------------------------------------\n\nTITLE: Fixing Functional Config Loading in MidwayJS\nDESCRIPTION: This code snippet fixes the loading of functional configuration files in MidwayJS. The commit hash is 51566c08124275798b92d3c931b27a86a48a2ba7, and it resolves issue #1017.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Adding custom route parameter decorator\nDESCRIPTION: This snippet adds a feature for custom route parameter decorators. These decorators allow developers to customize how route parameters are handled within their application, providing greater flexibility in request processing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Defining Log Event Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for log events, specifying properties such as source, project, log, retry time, interval, role, and version.  This configuration defines how log entries trigger the function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LogEvent {\n  source: string;\n  project: string;\n  log: string;\n  retryTime?: number;\n  interval?: number;\n  role?: string;\n  version?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Consul component in MidwayJS\nDESCRIPTION: These commands install the MidwayJS Consul component and its type definitions as a project dependency and a development dependency respectively. The @midwayjs/consul package provides integration with Consul, while @types/consul provides TypeScript type definitions for the Consul API.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/consul.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @midwayjs/consul@2 -S\nnpm i @types/consul -D\n```\n\n----------------------------------------\n\nTITLE: Installing @koa/cors for Serverless\nDESCRIPTION: This command installs the `@koa/cors` package, which is used for enabling CORS in Serverless functions in Midway.js.  Although, according to the text, it is often unnecessary when using FC HTTP triggers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @koa/cors --save\n```\n\n----------------------------------------\n\nTITLE: Add Code Dye Dependency to package.json\nDESCRIPTION: Adds the @midwayjs/code-dye dependency to the `package.json` file. This specifies the project's dependency on the code dyeing module. Reinstalling dependencies is required after adding this entry.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/code_dye.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"dependencies\": {\n     \"@midwayjs/code-dye\": \"^3.0.0\"\n     //...\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Nunjucks Template for weather information (HTML)\nDESCRIPTION: This is a Nunjucks template (`info.html`) that displays weather information. It uses Nunjucks syntax (`{{ ... }}`) to render variables passed from the controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>天气预报</title>\n    <style>\n      .weather_bg {\n        background-color: #0d68bc;\n        height: 150px;\n        color: #fff;\n        font-size: 12px;\n        line-height: 1em;\n        text-align: center;\n        padding: 10px;\n      }\n\n      .weather_bg label {\n        line-height: 1.5em;\n        text-align: center;\n        text-shadow: 1px 1px 1px #555;\n        background: #afdb00;\n        width: 100px;\n        display: inline-block;\n        margin-left: 10px;\n      }\n\n      .weather_bg .temp {\n        font-size: 32px;\n        margin-top: 5px;\n        padding-left: 14px;\n      }\n      .weather_bg sup {\n        font-size: 0.5em;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"weather_bg\">\n      <div>\n        <p>\n          {{city}}（{{WD}}{{WS}}）\n        </p>\n        <p class=\"temp\">{{temp}}<sup>℃</sup></p>\n        <p>\n          气压<label>{{AP}}</label>\n        </p>\n        <p>\n          湿度<label>{{SD}}</label>\n        </p>\n      </div>\n    </div>\n  </body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: @plugin Inject Undefined in Web Middleware\nDESCRIPTION: Addresses a bug where the `@plugin` decorator was injecting undefined values into web middleware. This ensures that plugins are correctly injected and available in middleware functions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n[@plugin](https://github.com/plugin) inject undefined in web middleware ([#667](https://github.com/midwayjs/midway/issues/667)) ([cacb2fa](https://github.com/midwayjs/midway/commit/cacb2faa61258172ef445db0a86e45c3f19014a6))\n```\n\n----------------------------------------\n\nTITLE: Importing FC Starter Typescript\nDESCRIPTION: This TypeScript snippet shows how to import the necessary type definitions from `@midwayjs/fc-starter` in `src/interface.ts`.  This ensures that `ctx.originContext` is correctly typed. The code itself is an empty import, but its presence is important for type checking.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\nimport type {} from '@midwayjs/fc-starter';\n```\n\n----------------------------------------\n\nTITLE: Rendering Swagger UI from CDN (MidwayJS, TypeScript)\nDESCRIPTION: This snippet configures MidwayJS to render the Swagger UI using resources from a CDN (unpkg.com in this case). This is done when the `swagger-ui-dist` package is not installed. Requires `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { renderSwaggerUIRemote } from '@midwayjs/swagger';\n\nexport default {\n   // ...\n   swagger: {\n     swaggerUIRender: renderSwaggerUIRemote,\n     swaggerUIRenderOptions: {\n       // ...\n     }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Serverless Devs Configuration (s.yaml)\nDESCRIPTION: This YAML snippet demonstrates a Serverless Devs configuration file (`s.yaml`) for deploying a Midway application to Alibaba Cloud. It defines the project name, access credentials, service details, function configuration (name, handler, code URI, initializer), custom domains, and HTTP trigger configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nedition: 1.0.0\nname: \"midwayApp\" # project name\naccess: \"default\" # Secret key alias\n\nvars:\n   service:\n     name: fc-build-demo\n     description: 'demo for fc-deploy component'\nservices:\n   project-0981cd9b07:\n     component: devsapp/fc\n     props:\n       region: cn-hangzhou\n       service: ${vars.service}\n       function:\n         name: hello # function name\n         handler: helloHttpService.handleHTTPEvent\n         codeUri: '.'\n         initializer: helloHttpService.initializer\n       customDomains:\n         - domainName: auto\n           protocol: HTTP\n           routeConfigs:\n             - path: /*\n               serviceName: ${vars.service.name}\n               functionName: helloHttpService-handleHTTPEvent\n       triggers:\n         - name: http\n           type: http\n           config:\n             methods:\n               -GET\n             authType: anonymous\n```\n\n----------------------------------------\n\nTITLE: Define Test Scripts in package.json (JSON)\nDESCRIPTION: This snippet defines the test and coverage scripts in the `package.json` file. It uses `midway-bin` to run tests and generate coverage reports with TypeScript support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"midway-bin test --ts\",\n    \"cov\": \"midway-bin cov --ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing CTX Logger Overwrite in Egg Extend\nDESCRIPTION: This fix addresses the issue of context logger overwrites in Egg.js extensions. The commit hash is a9d7a0dab8db24c970fe6528deb62afcf24c11b0 and the related issue is #846.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Nunjucks template with custom filter\nDESCRIPTION: This snippet shows a Nunjucks template that uses a custom filter named `hello` to transform the `name` variable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{{name | hello}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Level Cache\nDESCRIPTION: Configures a multi-level cache using both memory and Redis stores.  This involves defining individual cache configurations for memory and Redis and then combining them into a multi-level cache configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { createRedisStore } from '@midwayjs/cache-manager';\nexport default {\n  cacheManager: {\n    clients: {\n      memoryCaching: {\n        store: 'memory',\n      },\n      redisCaching: {\n        store: createRedisStore('default'),\n        options: {\n          ttl: 10,\n        }\n      },\n      multiCaching: {\n        store: ['memoryCaching', 'redisCaching'],\n        options: {\n          ttl: 100,\n        },\n      },\n    },\n  },\n  redis: {\n    clients: {\n      default: {\n        port: 6379,\n        host: '127.0.0.1',\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable TypeORM Component\nDESCRIPTION: This code snippet shows how to enable the TypeORM component in a MidwayJS application. It imports the required modules and includes `typeorm` and `casbin` in the `imports` array of the `@Configuration` decorator. This allows the application to use TypeORM for database interactions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as typeorm from '@midwayjs/typeorm';\nimport * as casbin from '@midwayjs/casbin';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    typeorm,\n    casbin\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace Feature in Midway.js\nDESCRIPTION: This commit introduces a namespace feature in Midway.js. It allows for better organization and management of components and configurations. The commit hash is bb2a8c8.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Client Support in MidwayJS\nDESCRIPTION: This code snippet introduces core functionality for enabling Prometheus client support within the MidwayJS framework. It lays the groundwork for exposing application metrics in a format that can be scraped and monitored by Prometheus, providing valuable insights into application health and performance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @fileoverview Introduces support for the Prometheus client.\n */\n// Feature: support prometheus client\n// See issue [#963](https://github.com/midwayjs/midway/issues/963)\n// Commit: [b0edd42](https://github.com/midwayjs/midway/commit/b0edd428cbda986a472b8fa3055de1bdfb54b146)\n```\n\n----------------------------------------\n\nTITLE: Creating a Socket App for Testing\nDESCRIPTION: This code snippet demonstrates how to create a MidwayJS Socket.IO application for testing purposes, specifying the port for the Socket.IO server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/socketio';\n\ndescribe('/test/index.test.ts', () => {\n  it('should test create socket app', async () => {\n    const app = await createApp<Framework>(process.cwd(), { port: 3000 });\n\n    //...\n\n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running local development server\nDESCRIPTION: These commands install dependencies, starts the local development server, and opens the application in a browser. It assumes Node.js and npm are installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n$ npm run dev\n$ open http://localhost:7001/\n```\n\n----------------------------------------\n\nTITLE: Install Application Deployment Dependencies\nDESCRIPTION: Installs the necessary dependencies, `@midwayjs/bootstrap` and `@midwayjs/serverless-app`, which are required for starting the Midway framework and wrapping function code into a runnable application. These dependencies are added to the project's `package.json` file as development dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_to_app.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/bootstrap @midwayjs/serverless-app --save\n```\n\n----------------------------------------\n\nTITLE: Enabling Date Strings in Configuration\nDESCRIPTION: This configuration option, `dateStrings: true`, enables the conversion of date values to strings. This is useful when you want to receive time values in the current timezone instead of UTC.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config/default\n\nconfig.orm = {\n  //...\n  dateStrings: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Framework to MidwayJS\nDESCRIPTION: This commit introduces the Midway gRPC framework. gRPC is a high-performance, open-source universal RPC framework that enables efficient communication between services. This adds support for building gRPC-based microservices within the MidwayJS ecosystem.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nadd midway gRPC framework ([#786](https://github.com/midwayjs/midway/issues/786)) ([d90362c](https://github.com/midwayjs/midway/commit/d90362c6bf15c00621ffc2981f19842f216395f8))\n```\n\n----------------------------------------\n\nTITLE: Creating a Project from a Template\nDESCRIPTION: This command uses `npx degit` to clone a template project from a GitHub repository. Replace `<name>` with the name of the template you want to use.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/intro.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit https://github.com/midwayjs/hooks/examples/<name>\n```\n\n----------------------------------------\n\nTITLE: Install pkg Globally\nDESCRIPTION: This command installs the `pkg` package globally. `pkg` is a tool for packaging Node.js projects into standalone executables.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i pkg -g\n```\n\n----------------------------------------\n\nTITLE: Fixing swagger ui json path in MidwayJS\nDESCRIPTION: This code snippet fixes the JSON path in the Swagger UI of the MidwayJS framework. It addresses issue #1860 and includes a commit hash for the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/oss/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- swagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Messages to a room clients including the sender\nDESCRIPTION: This example shows sending a socket message to all clients in room game, including the sender.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.in('game').emit('big-announcement', 'the game will start soon');\n```\n\n----------------------------------------\n\nTITLE: Multi Language Error Text\nDESCRIPTION: Demonstrates how to configure different error message text for different languages in the i18n configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    // Put your translated text here\n    localeTable: {\n      zh_CN: {\n        validate: {\n          'string.max': '字符超长',\n        },\n      },\n      en_US: {\n        validate: {\n          'string.max': 'string is too long',\n        },\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CoreLogger in MidwayJS\nDESCRIPTION: This snippet shows how to use the core logger (coreLogger) for logging in components or framework-level development. The `@Logger('coreLogger')` decorator is used to inject the core logger.  Requires `@midwayjs/core` and `@midwayjs/logger` dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n   @Logger('coreLogger')\n   logger: ILogger;\n\n   async onReady(container: IMidwayContainer): Promise<void> {\n     this.logger.debug('debug info');\n     this.logger.info('Startup took %d ms', Date.now() - start);\n     this.logger.warn('warning!');\n\n     this.logger.error(someErrorObj);\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Configs in Object Mode\nDESCRIPTION: This TypeScript code shows how to configure importConfigs in object mode. This format is required for single-file builds.  DefaultConfig and LocalConfig are imported as objects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport { join } from 'path';\n\nimport * as DefaultConfig from './config/config.default';\nimport * as LocalConfig from './config/config.local';\n\n@Configuration({\n   importConfigs: [\n     {\n       default: DefaultConfig,\n       local: LocalConfig\n     }\n   ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ORM Module\nDESCRIPTION: Imports the ORM module into the MidwayJS application's configuration.  This enables database access using TypeORM by adding the `orm` module to the `imports` array within the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport * as orm from '@midwayjs/orm';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    orm, // 加载 orm 组件\n  ],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class ContainerConfiguratin {}\n```\n\n----------------------------------------\n\nTITLE: Install Midway.js OTEL\nDESCRIPTION: This command installs the `@midwayjs/otel` package, version 3, as a dependency to enable OpenTelemetry integration within a Midway.js application. The `--save` flag ensures it's added to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/otel@3 --save\n```\n\n----------------------------------------\n\nTITLE: Upgrading to the Latest Version using pnpm\nDESCRIPTION: This command upgrades all Midway modules to the latest version using pnpm. The `-u` flag instructs the tool to identify the latest available version. The `-w` flag writes the changes to `package.json` and `pnpm-lock.yaml`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/version_check.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest -u\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest -u -w\n```\n\n----------------------------------------\n\nTITLE: Handling Web Requests in FC (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to handle web requests within the Alibaba Cloud FC environment using the initialized Midway.js runtime. It uses `runtime.asyncEvent` to process the request and returns a simple 'hello world' response. The `asyncWrapper` function provides error handling and logging.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/midway-fc-starter/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// for web request\nexports.handler = asyncWrapper(async (...args) => {\n  return runtime.asyncEvent(async function(ctx) {\n    return 'hello world';  // ctx.body = 'hello world';\n  })(...args);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new Midway gRPC project\nDESCRIPTION: These commands initialize a new MidwayJS project with the gRPC template. The first command is for npm v6, and the second is for npm v7 or later. It creates a basic project structure with a gRPC service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm -v\n\n# 如果是 npm v6\n$ npm init midway --type=grpc my_midway_app\n\n# 如果是 npm v7\n$ npm init midway -- --type=grpc my_midway_app\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in Midway.js\nDESCRIPTION: This code snippet represents the addition of a new 'guard' feature within the Midway.js project. The guard feature likely introduces access control or security measures to the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5\n```\n\n----------------------------------------\n\nTITLE: Installing Typegoose Component\nDESCRIPTION: This bash command installs the `@midwayjs/typegoose` component, which provides MongoDB access capabilities within a MidwayJS application. It should be used alongside compatible versions of Mongoose and other related dependencies. The `--save` flag adds the package as a dependency in the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/typegoose@3 --save\n```\n\n----------------------------------------\n\nTITLE: Initializing a Midway Project via NPM\nDESCRIPTION: This command uses npm to initialize a new Midway project. The `-y` flag automatically accepts default options.  After running this command, a set of files and directories will be created in your local environment. The `midway@latest` ensures you are using the most up-to-date version of the Midway CLI tool.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Defining a User Interface\nDESCRIPTION: This TypeScript code defines a `User` interface, specifying the structure of user data with properties for `id`, `name`, and `age`. This interface is typically used for type checking and data consistency within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\nexport interface User {\n  id: number;\n  name: string;\n  age: number;\n}\n\n```\n\n----------------------------------------\n\nTITLE: CMQ Trigger Configuration with Region and Retry in TypeScript\nDESCRIPTION: This code snippet provides an example configuration for a CMQ trigger with specific settings such as region and retry strategy. It uses the `@ServerlessTrigger` decorator to specify the trigger type as MQ, the topic, the region ('cn-shanghai'), and the retry strategy ('BACKOFF_RETRY'). This configuration allows the function to be triggered by messages from the specified topic in the Shanghai region and implements a backoff retry mechanism in case of failures.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_cmq.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ServerlessTrigger(ServerlessTriggerType.MQ, {\n  topic: 'test-topic',\n  region: 'cn-shanghai'\n  strategy: 'BACKOFF_RETRY'\n})\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Model with mdl-gen-midway\nDESCRIPTION: This command uses `mdl-gen-midway` to generate a TypeORM model for a MySQL database. It requires specifying the host, port, database name, username, and password. The `--noConfig` flag prevents the creation of tsconfig.json and ormconfig.json, and `--case-property none` disables property name conversion.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/typeorm_generator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 推荐\n# 请替换配置信息\n$ npx mdl-gen-midway -h localhost -p 3306 -d yourdbname -u root -x yourpassword -e mysql --noConfig --case-property none\n```\n\n----------------------------------------\n\nTITLE: Socket Message Handler with Ack\nDESCRIPTION: This code snippet shows the server-side code for handling socket messages with acknowledgment. The function receives three data arguments, sums them and sends the result to the client using acknowledgement.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@OnWSMessage('myEvent')\n@WSEmit('myEventResult')\nasync gotMessage(data1, data2, data3) {\n  return {\n    name: 'harry',\n  \tresult: data1 + data2 + data3,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Synchronization in Controller (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to implement CSRF token synchronization in a controller. It retrieves the CSRF token from the context and includes it in an HTML form.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/security.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx;\n\n  @Get('/home')\n  async home() {\n    return `<form method=\"POST\" action=\"/upload?_csrf=${ this.ctx.csrf }\" >\n      title: <input name=\"title\" />\n      <button type=\"submit\">upload</button>\n    </form>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Package.json Configuration\nDESCRIPTION: Configures the `package.json` file for a Midway.js component, specifying the name, version, entry points, and dependencies. It uses `@midwayjs/core` and `@midwayjs/decorator` as development dependencies, which are required for component functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"name\": \"midway-component-book\",\n  \"version\": \"1.0.0\",\n  \"main\": \"dist/index\",\n  \"typings\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist/**/*.js\",\n    \"dist/**/*.d.ts\"\n  ],\n  \"devDependencies\": {\n    \"@midwayjs/core\": \"^2.3.0\",\n    \"@midwayjs/decorator\": \"^2.3.0\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an MNS Trigger Function in Alibaba Cloud with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a function triggered by an MNS (Message Service) event in Alibaba Cloud Function Compute using Midway.js. It uses the `@ServerlessTrigger` decorator to bind the function to the `MQ` trigger type. The function receives an `MNSEvent` object as input and is expected to process it. It depends on the `@midwayjs/core`, `@midwayjs/faas`, and `@midwayjs/fc-starter` packages for dependency injection, serverless function context, and MNS event definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\nimport type { MNSEvent } from '@midwayjs/fc-starter';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.MQ)\n  async handleMNSEvent(event: MNSEvent) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Data with Prisma in Midway Hooks (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates how to create a new user in the database using Prisma within a Midway Hooks API. It imports necessary modules from '@midwayjs/hooks', 'zod', and the 'prisma' client. It defines a 'signUp' API endpoint using 'Api', 'Post', and 'Validate' decorators, accepting 'name' (string) and 'email' (string, validated as email) as parameters and creates a new user record using 'prisma.user.create'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/prisma.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post,\n  Validate,\n} from '@midwayjs/hooks';\nimport { z } from 'zod';\nimport { prisma } from './prisma';\n\nexport const signUp = Api(\n  Post(),\n  Validate(\n    z.string(),\n    z.string().email()\n  ),\n  async (\n    name: string,\n    email: string\n  ) => {\n    const result =\n      await prisma.user.create({\n        data: {\n          name,\n          email,\n        },\n      });\n    return result;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Complete API Documentation Example\nDESCRIPTION: This code provides a complete example of integrating Swagger documentation with a MidwayJS controller. It includes defining a DTO for request parameters, decorating properties within the DTO with descriptions, and using `@CreateApiDoc` to describe the API endpoint, its parameters, and its responses. It leverages the `@Rule` decorator for data validation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateApiDoc, CreateApiPropertyDoc } from '@midwayjs/swagger';\n\nexport class UserDTO {\n  @CreateApiPropertyDoc('user name')\n  @Rule(RuleType.string().required())\n  name: string;\n\n  @CreateApiPropertyDoc('user age')\n  @Rule(RuleType.number())\n  age: number;\n}\n\n@Provide()\n@Controller('/user')\nexport class UserController {\n  @Inject()\n  ctx: IMidwayKoaContext;\n\n  @Inject()\n  userService: UserService;\n\n  @(CreateApiDoc()\n    .summary('get user')\n    .description('This a a open api for get user')\n    .param('user id', {\n      required: true,\n      example: 2,\n    })\n    .param('user name')\n    .respond(200, 'success', 'text', {\n      example: 'hello world',\n    })\n    .respond(500, 'throw error')\n    .build())\n  @Get('/:userId')\n  async getUser(@Param() userId: number, @Query() name?: string) {\n    return {\n      name: 'harry',\n      age: 18,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Use Repository Mode with Sequelize-Typescript\nDESCRIPTION: This example shows how to use the `Repository` class with the `InjectRepository` decorator to perform database operations (querying, creating, deleting) in repository mode. It requires `@midwayjs/core` and `@midwayjs/sequelize` packages. The `Op` import enables the use of Sequelize operators.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\nimport { InjectRepository } from '@midwayjs/sequelize';\nimport { Photo } from '../entity/photo.entity';\nimport { User } from '../entity/user.entity';\nimport { Op } from 'sequelize';\nimport { Repository } from 'sequelize-typescript';\n\n@Controller('/')\nexport class HomeController {\n  @InjectRepository(User)\n  userRepository: Repository<User>;\n\n  @InjectRepository(Photo)\n  photoRepository: Repository<Photo>;\n\n  @Get('/')\n  async home() {\n    // Query\n    let result = await this.photoRepository.findAll();\n    console.log(result);\n\n    // New\n    await this.photoRepository.create({\n      name: '123',\n    });\n\n    // Delete\n    await this.photoRepository.destroy({\n      where: {\n        name: '123',\n      },\n    });\n\n    // Joint query\n    // SELECT * FROM photo WHERE name = \"23\" OR name = \"34\";\n    let result = await this.photoRepository.findAll({\n      where: {\n        [Op.or]: [{ name: '23' }, { name: '34' }]\n      },\n    });\n    // => result\n\n    // even table query\n    let result = await this.userRepository.findAll({ include: [Photo] });\n    // => result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Axios Dependency to ^0.24.0 - TypeScript\nDESCRIPTION: This commit updates the axios dependency to version ^0.24.0. This ensures that the application is using the latest version of Axios and benefits from any bug fixes, performance improvements, or new features introduced in that version.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/axios/CHANGELOG.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n**deps:** update dependency axios to ^0.24.0 ([#1506](https://github.com/midwayjs/midway/issues/1506)) ([d2a7dab](https://github.com/midwayjs/midway/commit/d2a7dab55e6f96528e6087ae503f6328013088fb))\n```\n\n----------------------------------------\n\nTITLE: Lifecycle Methods in Try-Catch-Finally Structure\nDESCRIPTION: This Javascript code illustrates the execution order of interceptor lifecycle methods within a try-catch-finally block. It helps visualize how `before`, `around`, `afterReturn`, `afterThrow`, and `after` methods are called during the execution of an intercepted method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n    // before\n    // around or invokeMethod\n    // afterReturn\n} catch(err) {\n    // afterThrow\n} finally {\n    // after\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Component Service Injection with Scope\nDESCRIPTION: Demonstrates an alternative way to inject a component's service using the explicit scope and name of the service. This method is equivalent to directly importing the service class and injecting it.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// in project\nimport { Provide, Inject } from '@midwayjs/decorator';\n\n@Provide()\nexport class Library {\n\n  @Inject('book:bookService');\n  bookService;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Koa Response 204 in MidwayJS\nDESCRIPTION: This commit addresses an issue where Koa was incorrectly sending a 204 No Content response. It ensures the proper handling of 204 responses in Koa applications within the MidwayJS framework. This fix prevents potential errors and ensures correct response behavior for requests that should return a 204 status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n2463d77cf2d9b03216acff901839816be45c5e73\n```\n\n----------------------------------------\n\nTITLE: Fixing logger close before bootstrap close - Bug fix\nDESCRIPTION: This snippet represents a bug fix that ensures the logger is closed after the bootstrap process has completed. This prevents potential issues with logging during application shutdown.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Disable Unused Locals Check (TypeScript)\nDESCRIPTION: This snippet shows how to disable the `noUnusedLocals` check in the `tsconfig.json` file. Setting this option to `false` will prevent the compiler from reporting errors (TS6133) when a variable is declared but not used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/ts_problem.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noUnusedLocals\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Subscriber Configuration\nDESCRIPTION: This TypeScript snippet shows the basic configuration structure for MQTT subscribers in `src/config/config.default.ts`. It defines connection options and subscription options for each subscriber.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\n\nexport default {\n   mqtt: {\n     sub: {\n       sub1: {\n         // ...\n       },\n       sub2: {\n         // ...\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Update ejs dependency in MidwayJS\nDESCRIPTION: This commit updates the ejs dependency to version 3.1.7 due to security concerns. This ensures the project uses a secure version of the ejs template engine.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Run pkg Script\nDESCRIPTION: This bash command executes the pkg script defined in package.json to build a standalone executable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run bundle\n$ npm run pkg\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope in MidwayJS\nDESCRIPTION: This commit resolves an issue where the request scope was not valid for singleton invoke. This ensures the proper context and data isolation for singleton instances within request lifecycles.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Testing Singleton Service\nDESCRIPTION: This snippet shows how to test a singleton service in MidwayJS. It retrieves the service instance from the application context using `app.applicationContext.getAsync` and calls a method on it, asserting the result. It assumes the service is registered with an identifier.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test_more.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app, assert } from 'midway-mock/bootstrap';\nimport { IUserService } from '../../src/interface';\n\ndescribe('test/service/user.test.ts', () => {\n  it('#getUser', async () => {\n    // 取出 userService\n    const user = await app.applicationContext.getAsync<IUserService>('userService');\n    const data = await user.getUser({ id: 1 });\n    assert(data.id === 1);\n    assert(data.username === 'mockedName');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fix: Hook Loading of Egg Application in MidwayJS\nDESCRIPTION: This commit fixes a problem with using hooks to load Egg applications within the MidwayJS framework. It suggests an adjustment to the lifecycle or initialization process of Egg within Midway to ensure proper loading.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/validate/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nuse hook to load egg application ([#1782](https://github.com/midwayjs/midway/issues/1782)) ([b47f27b](https://github.com/midwayjs/midway/commit/b47f27bf441431ddb1d0d35d5ee0ae80ae56fce8))\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependency\nDESCRIPTION: This command installs the @midwayjs/redis package as a dependency for your MidwayJS project, enabling Redis integration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/redis@3 --save\n```\n\n----------------------------------------\n\nTITLE: Getting Context Start Time\nDESCRIPTION: This code shows how to get the context execution start time using `this.ctx.startTime`. This can be useful for measuring the duration of a request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.startTime\n// 1642820640502\n```\n\n----------------------------------------\n\nTITLE: Incorrect module import order in MidwayJS Configuration\nDESCRIPTION: This code shows a bug where an incorrect import order can cause the application context to be incorrectly assigned.  The problem arises because of the way the application context is determined using `require`. This can cause issues such as middleware being added to the wrong application, if not properly fixed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-10-29-release-3-7.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as bull from '@midwayjs/bull';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n\timports: [koa, bull]\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Environment in Serverless\nDESCRIPTION: This code demonstrates how to access the current startup environment (`NODE_ENV` or `MIDWAY_SERVER_ENV`) using `ctx.env` within a Midway Serverless function. The default value is `prod`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_context.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nctx.env; //default prod\n```\n\n----------------------------------------\n\nTITLE: Getting Route Priority List in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a list of route priorities from the WebRouterCollector using the getRoutePriorityList method. The resulting array contains RouterPriority objects, providing information about the priority of each router.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/router_table.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = await collector.getRoutePriorityList();\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in package.json for EggJS\nDESCRIPTION: This JSON snippet showcases the dependencies required for an EggJS project within MidwayJS. It lists `@midwayjs/web` and `@midwayjs/core` for the Midway integration, `egg` as the core framework, and `egg-scripts` for startup scripts. It also includes `@midwayjs/egg-ts-helper` as a dev dependency for TypeScript support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"dependencies\": {\n    \"@midwayjs/web\": \"^3.0.0\",\n    \"@midwayjs/core\": \"^3.0.0\",\n    \"egg\": \"^2.0.0 \",\n    \"egg-scripts\": \"^2.10.0\"\n  },\n  \"devDependencies\": {\n    \"@midwayjs/egg-ts-helper\": \"^1.0.1 \",\n  },\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Port Configuration Example\nDESCRIPTION: This snippet showcases how to configure the port for Socket.IO within a MidwayJS application. Two examples are provided, demonstrating how to set the port directly in either the `koa` or `socketIO` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  koa: {\n    Port: 7001, // Port here\n  }\n}\n\n// or\n\nexport default {\n  socketIO: {\n    Port: 7001, // Port here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Router Collector and Export Router Table in MidwayJS\nDESCRIPTION: This feature introduces a router collector and the ability to export the router table. The commit hash is 3641ac9c78ed9888525ce0c87415b961d4602fa8 and the related issue is #852.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Moving Context Logger and Adding File Logger in MidwayJS\nDESCRIPTION: This commit refactors the context logger in MidwayJS and moves it to the @midwayjs/logger package. Additionally, it adds the ability to create file loggers. Separating the context logger and adding file logging provides more flexibility and control over logging within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n49f568f372b610494d59fa415f4f241c400c7db0\n```\n\n----------------------------------------\n\nTITLE: Installing amqplib and amqp-connection-manager\nDESCRIPTION: This snippet illustrates the installation of amqplib and amqp-connection-manager to provide message sending capabilities in RabbitMQ services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i amqplib amqp-connection-manager --save\n$ npm i @types/amqplib --save-dev\n```\n\n----------------------------------------\n\nTITLE: Get Route Priority List\nDESCRIPTION: This snippet demonstrates how to retrieve the route priority list using the `getRoutePriorityList` method. Each Controller corresponds to a Router object, and the routers are sorted by prefix. The method returns a `Promise` resolving to an array of `RouterPriority` objects, providing information such as prefix, priority, middleware, router options, and controller ID.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RouterPriority {\n  prefix: string;\n  priority: number;\n  middleware: any[];\n  routerOptions: any;\n  controllerId: string;\n}\n\nasync getRoutePriorityList(): Promise<RouterPriority[]>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst list = await collector.getRoutePriorityList();\n```\n\n----------------------------------------\n\nTITLE: Configure deploy script in package.json\nDESCRIPTION: This JSON snippet demonstrates how to add a 'deploy' script to the `package.json` file, which executes the `deploy.sh` shell script when running `npm run deploy`.  This allows for simplified and repeatable deployments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"scripts\": {\n     \"deploy\": \"sh deploy.sh\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Domain Name (YAML)\nDESCRIPTION: This snippet demonstrates how to cancel the automatic domain name configuration by setting `custom.customDomain` to `false` in the `f.yml` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n    customDomain: false\n```\n\n----------------------------------------\n\nTITLE: Building Midway.js Application with npm\nDESCRIPTION: This command builds the Midway.js application in preparation for deployment. This command compiles the code and generates the necessary artifacts for deployment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_create.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Route Parameter Decorator in Midway Core (TypeScript)\nDESCRIPTION: This feature introduces a custom route parameter decorator to the Midway core, enhancing the flexibility of route handling. It allows developers to define custom logic for extracting and transforming route parameters. This functionality adds more expressive power to the framework's routing capabilities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: List available templates\nDESCRIPTION: This command shows a list of available templates to the user to choose from. It invokes `create-midway` which then prompts the user to select a template. No template is selected automatically.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Deploying Serverless Application with npm\nDESCRIPTION: This command deploys the Midway.js serverless application using npm. It is assumed that the project has already been built and configured for deployment to a serverless environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_create.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Adding tags to route method in TypeScript\nDESCRIPTION: This snippet demonstrates two ways to add tags to a specific route method: using the `@ApiTags` and `@ApiOperation` decorators. `@ApiTags` has a higher priority than `@ApiOperation` if both are present.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport class HomeController {\n  @ApiTags(['bbb'])\n  @Get('/')\n  async home(): Promise<string> {\n    // ...\n  }\n}\n\n// ...\nexport class HomeController {\n  @ApiOperation({ tags: ['bbb'] })\n  @Get('/')\n  async home(): Promise<string> {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tenant Component via npm\nDESCRIPTION: This command installs the `@midwayjs/tenant` package as a project dependency.  The `--save` flag adds it to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tenant.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/tenant@3 --save\n```\n\n----------------------------------------\n\nTITLE: Middleware Reuse - Class Middleware (TypeScript)\nDESCRIPTION: This code demonstrates how to reuse a class middleware in multiple routes using `createMiddleware` in MidwayJS. It allows passing different parameters to create unique middleware instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-08-29-release-3.17.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n  // ...\n}\n\n@Controller(/**/)\nexport class HomeController {\n\n  @Get('/', { middleware: [createMiddleware(ReportMiddleware, {}, 'name1')]})\n  async home() {}\n  \n  @Get('/api', { middleware: [createMiddleware(ReportMiddleware, {}, 'name2')]})\n  async api() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Mock Functionality\nDESCRIPTION: This snippet relates to fixing the `mock fn` functionality in MidwayJS, likely addressing issues where mocking functions was not working as expected. The fix ensures that functions can be properly mocked for testing or development purposes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Configuring Node.js Runtime in f.yml\nDESCRIPTION: This snippet shows how to specify the Node.js runtime version in the `f.yml` file.  Here, `nodejs12` is used as the runtime environment for the function. Ensure this version is supported by Tencent Cloud SCF.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_to_tencent.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: midway-faas-examples\n\nprovider:\n  name: tencent\n  runtime: nodejs12\n```\n\n----------------------------------------\n\nTITLE: Default Import (TypeScript)\nDESCRIPTION: This snippet shows how to import a module in TypeScript using `import * as` when it's exported using `module.exports`. It imports all exports into a namespace.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// ts 写法\nimport * as path from 'path';\n```\n\n----------------------------------------\n\nTITLE: Customizing Info Route in Midway.js\nDESCRIPTION: This TypeScript code snippet shows how to customize the access route for the info component in a Midway.js application. By modifying the infoPath property within the info configuration, the default route (`/_info`) can be changed to a different path (e.g., `/_my_info`) for security or organizational purposes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/info.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  info: {\n    infoPath: '/_my_info',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller code that renders the Nunjucks template with a filter\nDESCRIPTION: This is the controller code that calls the render to display the nj template with the filter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// controller\n// ...\nawait ctx.render('test.nj', { name: 'midway' });\n```\n\n----------------------------------------\n\nTITLE: Run Tests using Jest (Bash)\nDESCRIPTION: This snippet shows how to run the Jest tests using the `npm run test` command. It executes the Jest command defined in the `package.json` scripts section.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Fixing Express Routing Middleware\nDESCRIPTION: This commit fixes an issue where the Express routing middleware was not taking effect at the controller level. The fix ensures that middleware defined at the controller level is properly applied to the corresponding routes, addressing issue #1364.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nb9272e0971003443304b0c53815be31a0061b4bd\n```\n\n----------------------------------------\n\nTITLE: User Interface Definition\nDESCRIPTION: Defines a TypeScript interface for a `User` object with `id`, `name`, and `age` properties. This is typically stored in `src/interface.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\nexport interface User {\n  id: number;\n  name: string;\n  age: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Specify target directory\nDESCRIPTION: This command specifies the target directory for the generated project using the `--target` parameter. The `type` parameter needs to be specified as well.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --type=koa-v3 --target=abc\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --type=koa-v3 abc\n```\n\n----------------------------------------\n\nTITLE: Fix: Adding getSchema Method for Validation in MidwayJS\nDESCRIPTION: This commit fixes a bug by adding a `getSchema` method for validation within the MidwayJS framework, specifically in the `@midwayjs/validate` package. This likely allows retrieval or access to the validation schema used by the validator. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/validate/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nadd getSchema method for validate ([#2155](https://github.com/midwayjs/midway/issues/2155)) ([aee9353](https://github.com/midwayjs/midway/commit/aee9353fb2c39f4996dff97b901a7b6d99f7cb9f))\n```\n\n----------------------------------------\n\nTITLE: Caching Function Results with @Caching Decorator (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `@Caching` decorator from `@midwayjs/cache-manager` to cache the results of a function. The function `invokeData` will cache its return value for 100 milliseconds, after which a new value will be returned. The first parameter to `@Caching` specifies the cache client ('default' in this example), and the second parameter defines the time-to-live (TTL) in milliseconds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-01-13-release-3.14.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Caching('default', 100)\nasync invokeData(name: string) {\n  return name;\n}\n```\n\n----------------------------------------\n\nTITLE: Update Tablestore Dependency to v5.2.1\nDESCRIPTION: Updates the tablestore dependency to version 5.2.1. This bug fix likely addresses specific issues or vulnerabilities present in earlier versions of the tablestore library. The update ensures improved stability and security for the Tablestore integration within MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nupdate dependency tablestore to v5.2.1 ([#2197](https://github.com/midwayjs/midway/issues/2197))\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content - Yarn\nDESCRIPTION: Generates static content for the Midway.js website using Yarn. The output is placed in the `build` directory, ready for deployment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Fixing Component Injection of Global Objects\nDESCRIPTION: This snippet describes a bug fix related to component injection of global objects in MidwayJS.  It includes the addition of a test case to verify the fix. The fix ensures that global objects are correctly injected into components.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Fast Installation of Node Modules (YAML)\nDESCRIPTION: This snippet shows how to configure the `fastInstallNodeModules` experimental feature in `f.yml` to select production dependencies from the current devDependencies for publishing, potentially improving the publishing speed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nexperimentalFeatures:\n\tfastInstallNodeModules: true\n```\n\n----------------------------------------\n\nTITLE: Import and Configure Cache Manager\nDESCRIPTION: Imports and configures the cacheManager module in the configuration.ts file. It registers the cacheManager module and imports the configuration from the 'config' directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as cacheManager from '@midwayjs/cache-manager';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    // ...\n    cacheManager,\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding View, View-EJS and View-Nunjucks\nDESCRIPTION: This commit adds support for view rendering using EJS and Nunjucks templating engines. This feature enables developers to easily integrate dynamic content into their applications using familiar templating syntax.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nadd view, view-ejs and view-nunjucks ([#1308](https://github.com/midwayjs/midway/issues/1308)) ([a00f44b](https://github.com/midwayjs/midway/commit/a00f44bd769052245cd49d49ab417d621bb89caa))\n```\n\n----------------------------------------\n\nTITLE: Implementing TestService in TypeScript\nDESCRIPTION: This service provides methods to retrieve video, account, and tab information. These methods are asynchronous and return Promises that resolve with the corresponding DTOs. The `@Provide()` decorator makes the service injectable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\n@Provide()\nclass TestService {\n  // Returns the current login user information\n  async getAccount(args: any): Promise<AccountDto> {\n    return {\n      id: 'test_account_id',\n      nick: 'test hello',\n      isFollow: true\n    };\n  }\n  // Return to the video list\n  async getVideos(args: any): Promise<VideoDto[]> {\n    return [{\n      videoId: '123',\n      videoUrl: 'https://www.taobao.com/xxx.mp4',\n      videoTitle: 'test 1 video'\n    }, {\n      videoId: '234',\n      videoUrl: 'https://www.taobao.com/xxx234.mp4',\n      videoTitle: 'test 2 video'\n    }, {\n      videoId: '456',\n      videoUrl: 'https://www.taobao.com/xxx456.mp4',\n      videoTitle: 'test 3 video'\n    }];\n  }\n// return to the tab page\n  async getTab(args: any): Promise<TabDto> {\n    return {\n      title: 'test tab',\n      tabId: 'firstTab',\n      index: 0\n    };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deregistering a Service from Consul in MidwayJS\nDESCRIPTION: This code demonstrates how to manually deregister a service from Consul using the Consul client in a MidwayJS controller. It injects the Consul client and uses the `agent.service.deregister` method to remove a service with a specific ID from Consul. The service ID must match the name displayed in the Consul UI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/consul.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/decorator';\nimport * as Consul from 'consul';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject('consul:consul')\n  consul: Consul.Consul;\n\n  @Get('/222')\n  async home2() {\n    let res = await this.consul.agent.service.deregister(`my-midway-project:30.10.72.195:7002`);\n    console.log(res);\n    return 'Hello Midwayjs2!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring All Mocks in Midway.js (TypeScript)\nDESCRIPTION: This code shows how to restore all mocks using the `restoreAllMocks` function, which can be used to clear all mock data. This is useful for cleaning up after tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { restoreAllMocks } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  restoreAllMocks();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Install OpenTelemetry Dependencies\nDESCRIPTION: Installs the necessary OpenTelemetry packages using npm.  These packages provide the API abstraction, Node.js SDK implementation, common module instrumentation, and Jaeger exporter for OpenTelemetry.  Ensure npm is installed and configured before running these commands.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Node.js api abstraction\n$ npm install --save @opentelemetry/api\n\nApi implementation of# Node.js\n$ npm install --save @opentelemetry/sdk-node\n\n# Common Node.js Module Buried Point Implementation\n$ npm install --save @opentelemetry/auto-instrumentations-node\n\n# jaeger output\n$ npm install --save @opentelemetry/exporter-jaeger\n```\n\n----------------------------------------\n\nTITLE: Support Bootstrap Load Config First - Javascript\nDESCRIPTION: This commit modifies the bootstrap process to load the configuration first in MidwayJS. This ensures that the application is configured correctly before any other modules are initialized.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsupport bootstrap load config first ([#931](https://github.com/midwayjs/midway/issues/931)) ([ae9ed26](https://github.com/midwayjs/midway/commit/ae9ed261aacdb483d3a9a612be79fff384503bcc))\n```\n\n----------------------------------------\n\nTITLE: Install Code Dye Dependency\nDESCRIPTION: Installs the @midwayjs/code-dye component as a dependency using npm. This is a prerequisite for using the code dyeing functionality in your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/code_dye.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/code-dye@3 --save\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path in MidwayJS\nDESCRIPTION: This commit fixes an issue where the JSON path used by the Swagger UI was incorrect. This ensures that the Swagger UI correctly displays the API documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/security/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Installing Koa Dependency in MidwayJS\nDESCRIPTION: This command installs the `@midwayjs/koa` package, which provides the Koa integration for MidwayJS. The `--save` flag adds the package as a dependency to the `package.json` file. Version 3 is specified.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/koa@3 --save\n```\n\n----------------------------------------\n\nTITLE: Accessing Application via @App() decorator\nDESCRIPTION: This code demonstrates how to access the main Application instance using the `@App()` decorator within a Midway.js controller. The injected `app` property provides access to application-level configurations and services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Controller, Get } from '@midwayjs/core';\nimport { Application } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @App()\n  app: Application;\n\n  @Get('/')\n  async home() {\n    // this.app.getConfig()\n    // this.app.getEnv()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: gRPC Timeout Handling in Midwayjs\nDESCRIPTION: This code demonstrates how to set a timeout for a gRPC call using the `timeout` parameter in milliseconds within the options of `sendMessage`.  If the server does not respond within the specified time, the client will receive a timeout error. It requires the gRPC service client (service).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await service.sayHello({\n  timeout: 5000\n}).sendMessage({\n  name: 'harry'\n});\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Component for Specific Environments\nDESCRIPTION: This snippet illustrates how to enable a component only in specific environments, such as the local development environment. The `imports` array in the `@Configuration` decorator contains an object with `component` and `enabledEnvironment` properties.  This restricts the component's activation to the specified environments. `@midwayjs/info` is used as an example.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/midway_component.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts of application or function\nimport { Configuration } from '@midwayjs/core';\nimport * as info from '@midwayjs/info';\n\n@Configuration({\n  imports: [\n    {\n      component: info,\n      enabledEnvironment: ['local']\n    },\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Configuring OSS Cluster Bucket in MidwayJS\nDESCRIPTION: This TypeScript snippet demonstrates how to configure OSS in cluster mode with multiple buckets. It includes an array of cluster configurations, each with its own endpoint, accessKeyId, and accessKeySecret. The schedule determines how requests are distributed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  oss: {\n    // need to config all bucket information under cluster\n    client: {\n      clusters: [{\n        endpoint: 'host1',\n        accessKeyId: 'id1',\n        accessKeySecret: 'secret1',\n      }, {\n        endpoint: 'host2',\n        accessKeyId: 'id2',\n        accessKeySecret: 'secret2',\n      }],\n      schedule: 'masterSlave', //default is 'roundRobin'\n      timeout: '60s',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using MidwayMockService to mock class property - TypeScript\nDESCRIPTION: This snippet demonstrates how to mock properties of a class using the MidwayMockService for testing purposes. It first defines a simple `UserService` class, then uses `mockService.mockClassProperty` to replace the `getUser` method and the `data` property. The example shows how to use both the default group and a custom group (`group2`). The `@Provide` decorator marks the class as a provider for dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class UserService {\n  data;\n\n  async getUser() {\n    return 'hello';\n  }\n}\n\nimport { MidwayMockService, Provide, Inject } from '@midwayjs/core';\n\n@Provide()\nclass TestMockService {\n  @Inject()\n  mockService: MidwayMockService;\n\n  mock() {\n    // 模拟属性，使用默认分组\n    this.mockService.mockClassProperty(UserService, 'getUser', async () => {\n      return 'midway';\n    });\n\n    // 模拟属性，指定分组\n    this.mockService.mockClassProperty(UserService, 'data', {\n      bbb: '1'\n    }, 'group2');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces a 'guard' feature to the MidwayJS framework. The provided commit hash can be used to view the full implementation details.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/otel/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: MongoDB Dependency Installation (Mongoose v5 - old)\nDESCRIPTION: This JSON snippet shows an older way to configure dependencies for MongoDB Server 4.4.x, including mongoose v5, @typegoose/typegoose v7, and separate type definitions. This method is not recommended anymore.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n \"dependencies\": {\n    \"mongodb\": \"3.6.3\", // The version is written inside the mongoose\n    \"mongoose\": \"~5.10.18 \",\n    \"@typegoose/typegoose\": \"7.0.0\", // This dependency needs to be installed using typegoose\n },\n \"devDependencies\": {\n    \"@types/mongodb\": \"3.6.3\", // this version can only be used\n    \"@types/mongoose\": \"~5.10.3 \",\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Secret Filter Feature\nDESCRIPTION: This feature adds a secret filter to the Midway.js framework.  This can be used to filter out sensitive information from logs or other output. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd secret filter ([#1531](https://github.com/midwayjs/midway/issues/1531)) ([ce77e48](https://github.com/midwayjs/midway/commit/ce77e4804aaffc18a0a091d3726e36d7ec1514b2))\n```\n\n----------------------------------------\n\nTITLE: Configuring ContainerLifeCycle with Prometheus Histogram\nDESCRIPTION: This code configures the `ContainerLifeCycle` class to import necessary modules like `koa`, `validate`, `prometheus`, and `info`. It defines a custom Histogram named `test_histogram` within the `onReady` lifecycle hook. The `define` method of the `DataService` is used to create the Histogram with specific buckets and metadata.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  imports: [\n    koa,\n    validate,\n    prometheus,\n    {\n      component: info,\n      enabledEnvironment: ['local'],\n    },\n  ],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class ContainerLifeCycle {\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    const result = await this.app.getApplicationContext().getAsync(DataService);\n    // 此处定义了一个名字叫 test_histogram 的 Histogram\n    result.define('test_histogram', 'Histogram', {\n      help: '132',\n      name: 'test_histogram',\n      buckets: [5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000],\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compatibility with Midway Mock in Midway.js\nDESCRIPTION: This commit ensures compatibility with the midway-mock package. This fix ensures that other packages work seamlessly with the mocking capabilities of Midway.js, likely through adjustments to dependencies or API usage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_44\n\nLANGUAGE: Other\nCODE:\n```\nd738b7f\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI Rendering (TypeScript)\nDESCRIPTION: This snippet demonstrates configuring the Swagger UI rendering using `renderSwaggerUIRemote` from `@midwayjs/swagger`. By setting `swaggerUIRender` to `renderSwaggerUIRemote`, the application will fetch the Swagger UI from a remote CDN, reducing the server's workload.  The `swaggerUIRenderOptions` allow further customization of the rendering process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-01-13-release-3.14.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { renderSwaggerUIRemote } from '@midwayjs/swagger';\n\nexport default {\n  // ...\n  swagger: {\n    swaggerUIRender: renderSwaggerUIRemote,\n    swaggerUIRenderOptions: {\n      // ...\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status Code Using API (Typescript)\nDESCRIPTION: This snippet demonstrates how to set the HTTP status code of a response using `ctx.status` API in a MidwayJS controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.status = 201;\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoupling with Injection Typescript\nDESCRIPTION: Illustrates decoupling using the `injection` package.  A container is created, and classes `A` and `B` are bound to it. Class `C` retrieves instances of `A` and `B` from the container, reducing direct dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 使用 IoC\nimport { Container } from 'injection';\nimport { A } from './A';\nimport { B } from './B';\nconst container = new Container();\ncontainer.bind(A);\ncontainer.bind(B);\n\nclass C {\n  constructor() {\n    this.a = container.get('a');\n    this.b = container.get('b');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serverless Handler with Context and Event (Ordinary Trigger)\nDESCRIPTION: This code demonstrates a basic Serverless function handler using the Context object in Midway Serverless. It imports Context from '@midwayjs/faas' and Provide from '@midwayjs/core'. The handler function takes an event object as input and returns a string 'hello world'. This example applies to ordinary trigger scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_context.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\nimport { Provide } from '@midwayjs/core';\n\n@Provide()\nexport class Index {\n\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(...)\n  async handler(event) {\n  \treturn 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Timer Event Structure in JSON\nDESCRIPTION: This JSON snippet shows the default structure of the timer event data returned by the `createTimerEvent` function from `@midwayjs/serverless-fc-trigger`.  It includes properties like `triggerTime`, `triggerName`, and `payload`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_testing.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  triggerTime: new Date().toJSON(),\n  triggerName: 'timer',\n  payload: '',\n}\n```\n\n----------------------------------------\n\nTITLE: Example Provider Configuration in YAML (Aliyun)\nDESCRIPTION: This YAML snippet provides an example of a provider configuration for Aliyun Function Compute.  It includes settings for runtime, memory, policies, VPC configuration, log configuration, and NAS configuration, tailored for deployment on the Aliyun platform.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: aliyun\n  runtime: nodejs10\n  memorySize: 128\n  policies:\n    - AliyunECSNetworkInterfaceManagementAccess\n  vpcConfig:\n    vpcId: 'vpc-j6cfu2g6tslzekh8grfmk'\n    vSwitchIds: ['vsw-j6chkgsg9naj6gx49espd']\n    securityGroupId: 'sg-j6ceitqs6ljyssm1apom'\n  logConfig:\n    project: localtestlog\n    logstore: localteststore\n  nasConfig:\n    userId: 10003\n    groupId: 10003\n    mountPoints:\n      - serverAddr: '012194b28f-xxxxx.cn-hangzhou.nas.aliyuncs.com:/'\n        mountDir: '/mnt/test'\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Grafana\nDESCRIPTION: This YAML configuration adds Grafana to the `docker-compose.yml` file, enabling it to be managed alongside Prometheus. It configures data and log volume mappings for persistence.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2.2'\nservices:\n  tapi:\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '50m'\n    image: prom/prometheus\n    restart: always\n    volumes:\n      - ./prometheus_data:/prometheus_data:rw  # prometheus Data mapping directory\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml # prometheus Configuration mapping file\n      - ./targets.json:/etc/prometheus/targets.json\n    command:\n      - '--storage.tsdb.path=/prometheus_data'\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.retention=10d'\n      - '--web.enable-lifecycle'\n    ports:\n      - '9090:9090'\n  // highlight-start\n  grafana:\n    image: grafana/grafana\n    container_name: \"grafana0\"\n    ports:\n      - \"3000:3000\"\n    restart: always\n    volumes:\n      - \"./grafana_data:/var/lib/grafana\" # grafana data mapping directory\n      - \"./grafana_log:/var/log/grafana\"  # grafana log mapping directory\n    // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Caching gRPC Service Client with @Init Decorator\nDESCRIPTION: This code snippet demonstrates how to cache a gRPC service client using the `@Init` decorator. The `init` method is decorated with `@Init`, which ensures it's executed after the class is instantiated. The service client is retrieved in this method and assigned to a property, allowing it to be reused across multiple method calls.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  GrpcMethod,\n  MSProviderType,\n  Provider,\n  Inject,\n  Init,\n} from '@midwayjs/core';\nimport { helloworld, hero } from '../interface';\nimport { Clients } from '@midwayjs/grpc';\n\n@Provider(MSProviderType.GRPC, { package: 'hero' })\nexport class HeroService implements hero.HeroService {\n  // Injection client\n  @Inject()\n  grpcClients: Clients;\n\n  greeterService: helloworld.GreeterClient;\n\n  @Init()\n  async init() {\n    // Assign a service instance\n    this.greeterService = this.grpcClients.getService<helloworld.GreeterClient>(\n      'helloworld.Greeter'\n    );\n  }\n\n  @GrpcMethod()\n  async findOne(data) {\n    // Call service\n    const result = await this.greeterService.sayHello()\n    \t.sendMessage({\n        name: 'harry'\n      });\n\n    // Return result\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cookies Dependency in MidwayJS\nDESCRIPTION: This commit updates the dependency `@midwayjs/cookies` to version 1.0.2. The update may include bug fixes, performance improvements, or new features within the cookies library used by MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Removing Sourcemaps from Distribution - JavaScript\nDESCRIPTION: This commit removes sourcemap and source files from the distribution package. The likely purpose is to reduce the package size and prevent source code leakage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\ne561a88f4a70af15d4be3d5fe0bd39487677d4ce\n```\n\n----------------------------------------\n\nTITLE: Clearing Container Cache During Tests in MidwayJS\nDESCRIPTION: This code snippet fixes an issue where the container cache wasn't being cleared during tests in MidwayJS. The associated commit hash is a202075b52d281e06f1ed7c6139e968fafc960f6, and the fix addresses issue #978.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Midway.js Function Definition File (f.yml)\nDESCRIPTION: This YAML file defines the function configuration for aggregated deployment. It specifies the service name, provider (e.g., aliyun), and configures the aggregation mode for HTTP functions using the `aggregation` section. The `functionsPattern` property defines which functions to aggregate, in this case, all functions ('*').\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_aggr.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: midway-faas-examples ## 函数组名，可以理解为应用名\n\nprovider:\n  name: aliyun ## 发布的平台，这里是阿里云\n\naggregation: ## 对 HTTP 函数使用聚合模式部署\n  all: ## 部署的函数名\n    functionsPattern: ## 匹配的函数规则\n      - '*'\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Egg Application Loading\nDESCRIPTION: This commit fixes an issue where the Egg application was not being loaded correctly. It ensures that the Egg application integrates seamlessly with MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- use hook to load egg application ([#1782](https://github.com/midwayjs/midway/issues/1782)) ([b47f27b](https://github.com/midwayjs/midway/commit/b47f27bf441431ddb1d0d35d5ee0ae80ae56fce8))\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/view-nunjucks dependency with npm\nDESCRIPTION: This bash command installs the `@midwayjs/view-nunjucks` package as a project dependency using npm. The `--save` flag ensures that the dependency is added to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/view-nunjucks@3 --save\n```\n\n----------------------------------------\n\nTITLE: Supporting Queries Decorator in MidwayJS\nDESCRIPTION: This code adds support for the `@Queries` decorator. The associated commit is ddb080bbba0b24a4c1f826d8552966275f31ebeb and addresses issue #858.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Fixing Egg Socket IO Missing Session Middleware\nDESCRIPTION: This code snippet fixes a bug where the Egg.js Socket.IO implementation was missing session middleware. The associated commit hash is 6e605a15b64bf51182b393b68d66d0867c571b94, which fixes issue #835.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Extending Midway Context in Component (index.d.ts - Web Context)\nDESCRIPTION: This snippet shows how to extend only the `@midwayjs/web` Context within a component. It declares a module augmentation for `@midwayjs/web/dist/interface` and adds an 'abc' property of type string to the Context interface. This extension is specific to the `@midwayjs/web` context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/context_definition.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// index.d.ts\n\n// The following paragraph is only extended by @midwayjs/Web Context\ndeclare module '@midwayjs/web/dist/interface '{\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing project dependencies using npm\nDESCRIPTION: This command installs the necessary dependencies for the Midway.js application, as defined in the `package.json` file. It downloads and installs packages required for running and developing the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/quickstart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Aliyun API Gateway Mapping Event Example\nDESCRIPTION: This JSON snippet demonstrates the event structure when using Alibaba Cloud API Gateway with parameter mapping enabled. Notably, the `content-type` header is absent.  The `body` is base64 encoded.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"eyJjIjoiYiJ9\",\n  \"headers\": {\n    \"X-Ca-Dashboard-Action\": \"DEBUG\",\n    \"X-Ca-Dashboard-Uid\": \"111111\",\n    \"X-Ca-Dashboard-Role\": \"USER\"\n  },\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"path\": \"/api/321\",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Security Component via npm\nDESCRIPTION: Installs the @midwayjs/security component using npm.  This is the primary method for adding the security features to a MidwayJS project. The component provides CSRF and XSS protection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/security.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/security --save\n```\n\n----------------------------------------\n\nTITLE: Define a Global Error Filter\nDESCRIPTION: This code defines a global exception filter in MidwayJS that catches all errors. It uses the `@Catch` decorator without any arguments to catch all error types. The `catch` method handles the error and performs actions such as logging the error.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/filter/all.filter.ts\nimport { Catch } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Catch()\nexport class AllErrorFilter {\n  async catch(err: Error, ctx: Context) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Decorator with MidwayDecoratorService (TypeScript)\nDESCRIPTION: Registers a parameter handler for the `USER_KEY` using `MidwayDecoratorService`. The handler modifies the parameter value by extracting the `user` property from the context (first argument of the method). It depends on `koa`, `MidwayDecoratorService`, and a logger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n//...\n\n@Configuration({\n  imports: [koa]\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Logger()\n  logger;\n\n  async onReady() {\n    // ...\n\n    // Implement parameter decorator\n    this.decoratorService.registerParameterHandler(USER_KEY, (options) => {\n      // originArgs is the original method\n      // The first parameter here is ctx, so ctx.user is taken.\n      return options.originArgs[0]?.user ?? {};\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Import Configs - TypeScript\nDESCRIPTION: This snippet shows how to import configuration files from outside the project's `src` directory.  Absolute paths and the `.js` extension must be used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport { join } from 'path';\n\n@Configuration({\n  importConfigs: [join(__dirname, './config/'), join(__dirname, '../customConfig.default')],\n})\nexport class ContainerLifeCycle {}\n\n```\n\n----------------------------------------\n\nTITLE: Redirecting Using Decorator (Typescript)\nDESCRIPTION: This snippet demonstrates how to redirect a request to another URL using the `@Redirect` decorator in a MidwayJS controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Redirect } from '@midwayjs/core';\n\n@Controller('/')\nexport class LoginController {\n\n  @Get('/login_check')\n  async check() {\n    // TODO\n  }\n\n  @Get('/login')\n  @Redirect('/login_check')\n  async login() {\n    // TODO\n  }\n\n  @Get('/login_another')\n  @Redirect('/login_check', 302)\n  async loginAnother() {\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Up Command\nDESCRIPTION: This bash command starts the Docker containers defined in the docker-compose.yml file in detached mode.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: RouterInfo Interface Definition in MidwayJS\nDESCRIPTION: This code snippet defines the `RouterInfo` interface, which represents the structure of each route information. It includes properties such as prefix, url, requestMethod, method, handlerName, middleware, and metadata.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RouterInfo {\n  /**\n   * router prefix\n   */\n  prefix: string;\n  /**\n   * router alias name\n   */\n  routerName: string;\n  /**\n   * router path, without prefix\n   */\n  url: string | RegExp;\n  /**\n   * request method for http, like get/post/delete\n   */\n  requestMethod: string;\n  /**\n   * invoke function method\n   */\n  method: string;\n  description: string;\n  summary: string;\n  /**\n   * router handler function key，for IoC container load\n   */\n  handlerName: string;\n  /**\n   *  serverless func load key\n   */\n  funcHandlerName: string;\n  /**\n   * controller provideId\n   */\n  controllerId: string;\n  /**\n   * router middleware\n   */\n  middleware: any[];\n  /**\n   * controller middleware in this router\n   */\n  controllerMiddleware: any[];\n  /**\n   * request args metadata\n   */\n  requestMetadata: any[];\n  /**\n   * response data metadata\n   */\n  responseMetadata: any[];\n}\n```\n\n----------------------------------------\n\nTITLE: Koa Port Configuration for Unit Tests\nDESCRIPTION: This TypeScript code snippet shows the port configuration for the Koa framework specifically within a unit testing environment.  Setting the port to `null` allows testing frameworks like SuperTest to manage the port assignment dynamically, preventing conflicts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.unittest\nexport default {\n  // ...\n  koa: {\n    port: null\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Nunjucks template example\nDESCRIPTION: This snippet shows a basic Nunjucks template using double curly braces for variable interpolation. It outputs a user variable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// view/test.nj\nhi, {{ user }}\n```\n\n----------------------------------------\n\nTITLE: Clearing Container Cache During Tests in MidwayJS\nDESCRIPTION: This bug fix ensures that the container cache is cleared during tests in MidwayJS. This prevents stale data from persisting between test runs, ensuring more reliable and accurate test results.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure a global middleware in a Midway application using the `middleware` property in `src/config/config.default.ts`. The middleware is specified by its key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/eggjs.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/config/config.default.ts\n\nexport default (appInfo: EggAppInfo) => {\n  const config = {} as DefaultConfig;\n\n  // ...\n\n  config.middleware = ['reportMiddleware'];\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Install Upload Component\nDESCRIPTION: This command installs the @midwayjs/upload package as a dependency to your project.  This package provides functionality for handling file uploads in MidwayJS applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/upload/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntnpm i @midwayjs/upload --save\n```\n\n----------------------------------------\n\nTITLE: Install Luckyeye Package (npm)\nDESCRIPTION: This command installs the `@midwayjs/luckyeye` package as a development dependency using npm. This package provides the error checking rules for MidwayJS projects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/luckyeye.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @midwayjs/luckyeye --save-dev\n```\n\n----------------------------------------\n\nTITLE: Update User with @Body decorator\nDESCRIPTION: This code snippet demonstrates the usage of the `@Body` decorator in a MidwayJS controller. The `updateUser` method receives a `UserDTO` object as input, which will be automatically validated and converted if it's decorated with `@Rule` when the `@midwayjs/validate` component is enabled. No explicit pipes are defined here; the validation relies on the component's default behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipe.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n\n   @Post('/')\n   async updateUser(@Body() user: UserDTO ) {\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a new static file directory in Midway\nDESCRIPTION: This TypeScript snippet demonstrates how to add a new static file directory to the configuration in a Midway application's `config.default.ts` file. It adds a new key-value pair under `staticFile.dirs`, allowing for multiple static directories with different prefixes. It shows the configuration for serving files from a directory named 'another'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/static_file.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// {app_root}/src/config/config.default.ts\nexport default {\n  // ...\n  staticFile: {\n    dirs: {\n      default: {\n        prefix: '/',\n        dir: 'xxx',\n      },\n      another: {\n        prefix: '/',\n        dir: 'xxx',\n      },\n    }\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Compatible Version with pnpm\nDESCRIPTION: This command upgrades all Midway dependencies to the latest compatible version using pnpm. The `-m` flag triggers the upgrade process. It initially performs a check and then can be used with `-w` to write changes to `package.json` and `pnpm-lock.yaml`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/version_check.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest -m\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest -m -w\n```\n\n----------------------------------------\n\nTITLE: Event Type Definitions Import in Midway\nDESCRIPTION: This code snippet shows how to import various event type definitions, as well as InitializeContext type, from `@midwayjs/fc-starter` in your Midway application. These types are useful when working with different trigger types in Alibaba Cloud Function Compute.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n//Event type\nimport type {\n   OSSEvent,\n   MNSEvent,\n   SLSEEvent,\n   CDNEvent,\n   TimerEvent,\n   APIGatewayEvent,\n   TableStoreEvent,\n} from '@midwayjs/fc-starter';\n// InitializeContext type\nimport type { InitializeContext } from '@midwayjs/fc-starter';\n```\n\n----------------------------------------\n\nTITLE: Adding 2.x Pipeline Features in Midway.js\nDESCRIPTION: This commit introduces pipeline features to Midway.js 2.x. The new pipeline enables streamlined request processing and middleware execution. The commit hash is 9eb3e100ebac966cf58713d4d3f021cd44971150.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Install Socket.IO Dependency\nDESCRIPTION: This command installs the @midwayjs/socketio package, enabling Socket.IO functionality within a MidwayJS project, as well as type definitions and the client library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/socketio --save\n$ npm i @types/socket.io-client socket.io-client --save-dev\n```\n\n----------------------------------------\n\nTITLE: Show help options\nDESCRIPTION: This command shows all available options for the `create-midway` tool.  The `--` is used to pass the `-h` parameter directly to `create-midway` instead of `npm init`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- -h\n```\n\n----------------------------------------\n\nTITLE: Testing Socket.IO with Events.once (TypeScript)\nDESCRIPTION: This code showcases an alternative test implementation using the `once` function from the `events` module for cleaner asynchronous handling of Socket.IO events. It initializes a MidwayJS application and Socket.IO client, then utilizes `once` to wait for the 'myEventResult' event before asserting the result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock'\nimport { Framework } from '@midwayjs/koa';\nimport { createSocketIOClient } from '@midwayjs/mock';\nimport { once } from 'events';\n\ndescribe('/test/index.test.ts', () => {\n\n  it('should test create socket app', async () => {\n\n    // Create a service\n    const app = await createApp<Framework>();\n\n    // create a client\n    const client = await createSocketIOClient({\n      port: 3000\n    });\n\n    // Monitor with promise writing of events\n    const gotEvent = once(client, 'myEventResult');\n    // Send event\n    client.send('myEvent', 1, 2, 3);\n    // Waiting for return\n    const [data] = await gotEvent;\n    // Judgment result\n    expect(data).toEqual({\n      name: 'harry',\n      result: 6\n    });\n\n    // Close the client\n    await client.close();\n \t\t// Close the server\n    await close(app);\n  });\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing optional options in MidwayJS\nDESCRIPTION: This commit resolves an issue related to optional options within MidwayJS. The fix likely ensures that optional configuration parameters are handled correctly, preventing errors or unexpected behavior when these options are not explicitly provided.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Configure Default Memory Cache\nDESCRIPTION: Configures a default memory cache with a specified store type.  This snippet shows how to configure a basic in-memory cache using the `memory` store.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  cacheManager: {\n    clients: {\n      default: {\n        store: 'memory',\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Egg Static Plugin\nDESCRIPTION: This TypeScript code disables the default static plugin in Egg.js to prevent conflicts when using the @midwayjs/static-file component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/static_file.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/plugin.ts\nimport { EggPlugin } from 'egg';\nexport default {\n  // ...\n  static: false,\n} as EggPlugin;\n```\n\n----------------------------------------\n\nTITLE: Disabling TCP SACK in Bash\nDESCRIPTION: This bash command disables TCP Selective Acknowledgement (SACK).  It can be used as a workaround for network issues leading to Handshake inactivity timeouts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo sysctl -w net.inet.tcp.sack=0\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Node.js Versions with NVS\nDESCRIPTION: This snippet shows how to install the latest LTS version of Node.js using NVS, configure it as the default version, install a specific version (12 in this case), list installed versions, and switch to a specific version in the current shell session. These commands provide a basic overview of how to manage Node.js versions with NVS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/how_to_install_nodejs.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 安装最新的 LTS 版本\n$ nvs add lts\n# 配置为默认版本\n$ nvs link lts\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 安装其他版本尝尝鲜\n$ nvs add 12\n# 查看已安装的版本\n$ nvs ls\n# 在当前 Shell 切换版本\n$ nvs use 12\n```\n\n----------------------------------------\n\nTITLE: Implement Custom Framework (TypeScript)\nDESCRIPTION: This code snippet outlines the structure for creating a custom MidwayJS framework. It defines interfaces for Context, Application, and configuration options, and then implements a `MidwayCustomFramework` class that extends `BaseFramework`, overriding `configure`, `applicationInitialize`, and `run` methods to customize the framework's behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Framework } from '@midwayjs/core';\nimport { BaseFramework, IConfigurationOptions, IMidwayApplication, IMidwayContext } from '@midwayjs/core';\n\n// Define Context\nexport interface Context extends IMidwayContext {\n  // ...\n}\n\n// Define Application\nexport interface Application extends IMidwayApplication<Context> {\n  // ...\n}\n\n// Frame configuration\nexport interface IMidwayCustomConfigurationOptions extends IConfigurationOptions {\n\t// ...\n}\n\n// Implement a custom framework and inherit the basic framework\n@Framework()\nexport class MidwayCustomFramework extends BaseFramework<Application, Context, IMidwayCustomConfigurationOptions> {\n\n  // Process initialization configuration\n  configure() {\n    // ...\n  }\n\n  // app initialization\n  async applicationInitialize() {\n    // ...\n  }\n\n  // Framework startup, such as listen\n  async run() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing egg-cors\nDESCRIPTION: This command installs the `egg-cors` package, which is used for enabling CORS in the `@midwayjs/web` framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i egg-cors --save \n```\n\n----------------------------------------\n\nTITLE: Additional Configuration File Example\nDESCRIPTION: Example JSON configuration file used to specify additional model options, such as enabling timestamps and paranoid mode (soft deletes).  This file is referenced by the `-a` or `--additional` flag in the CLI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/sequelize_generator.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamps\": true,\n  \"paranoid\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Express Routing Middleware in MidwayJS\nDESCRIPTION: This commit fixes an issue where the Express routing middleware was only taking effect at the controller level in MidwayJS. The fix ensures that the middleware functions correctly for all routes within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-nunjucks/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Diff\nCODE:\n```\n- express routing middleware takes effect at the controller level ([#1364](https://github.com/midwayjs/midway/issues/1364)) ([b9272e0](https://github.com/midwayjs/midway/commit/b9272e0971003443304b0c53815be31a0061b4bd))\n```\n\n----------------------------------------\n\nTITLE: Register Custom Session Store - TypeScript\nDESCRIPTION: Registers the custom session store with the session component in the `AutoConfiguration` class. This allows the application to use the custom store for managing session data.  The `setSessionStore` method is used to link the store implementation to the session component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MemorySessionStore } from './store';\nimport * as session from '@midwayjs/session';\n\n@Configuration({\n  imports: [\n    koa,\n    session,\n  ],\n  //...\n})\nexport class AutoConfiguration {\n  @Inject()\n  memoryStore: MemorySessionStore;\n\n  @Inject()\n  sessionStoreManager: session.SessionStoreManager;\n\n  async onReady() {\n    this.sessionStoreManager.setSessionStore(this.memoryStore);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Class Declaration in MidwayJS\nDESCRIPTION: This code snippet shows the basic structure of a mock class in MidwayJS.  It uses the `@Mock` decorator from `@midwayjs/core` to indicate that this class is a mock implementation.  The class implements the `ISimulation` interface, which requires a `setup` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/mock/indexData.mock.ts\nimport { Mock, ISimulation } from '@midwayjs/core';\n\n@Mock()\nexport class IndexDataMock implements ISimulation {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Database Driver (MongoDB Example)\nDESCRIPTION: This command installs the MongoDB driver for Sequelize.  This driver is needed to connect to a MongoDB database. Note that this is marked as experimental.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# for MongoDB(experimental)\nnpm install mongodb --save\n```\n\n----------------------------------------\n\nTITLE: Adding Mongoose Component with Multi-Instance Support\nDESCRIPTION: This commit introduces a Mongoose component to Midway.js, enabling integration with MongoDB.  It supports multi-instance configurations for Typegoose, allowing multiple database connections.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nadd mongoose component and support multi-instance for typegoose ([#1334](https://github.com/midwayjs/midway/issues/1334)) ([ca0b73f](https://github.com/midwayjs/midway/commit/ca0b73fec77e8871e4001b4c9d3e45397ce32450))\n```\n\n----------------------------------------\n\nTITLE: Clearing Container Cache During Testing in MidwayJS\nDESCRIPTION: This commit addresses an issue where the container cache was not being cleared during testing within the MidwayJS framework. Clearing the container cache during tests is essential to ensure isolation and prevent interference between test cases. The fix ensures that the tests run in a clean environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\na202075b52d281e06f1ed7c6139e968fafc960f6\n```\n\n----------------------------------------\n\nTITLE: Add Code Dye Dependency to package.json\nDESCRIPTION: Adds the @midwayjs/code-dye component as a dependency in the `package.json` file. This ensures that the component is installed when dependencies are installed or updated. The code specifies version 3.0.0 or later of the package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/code_dye.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/code-dye\": \"^3.0.0\"\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Error Display\nDESCRIPTION: This commit fixes an issue where real errors were hidden when user code threw errors.  The fix ensures that the original error is properly displayed, aiding in debugging and troubleshooting as described in issue #1128.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ne728b0b80956c09cfb856ffe082f44fa29cfeb82\n```\n\n----------------------------------------\n\nTITLE: Configuring Tencent Cloud Provider in f.yml\nDESCRIPTION: This snippet demonstrates how to set the `provider` to `tencent` in the `f.yml` file. This is a mandatory configuration step for deploying to Tencent Cloud SCF.  The `service.name` is a placeholder and should be replaced with the application's name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_to_tencent.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: midway-faas-examples\n\nprovider:\n  name: tencent\n```\n\n----------------------------------------\n\nTITLE: Declare I18n Dependency in package.json\nDESCRIPTION: Defines the `@midwayjs/i18n` dependency within the `package.json` file.  This ensures that the component is installed when dependencies are resolved. Minimum version specified is 3.0.0.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/i18n\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Install TypeORM Adapter and TypeORM Package\nDESCRIPTION: This command installs the necessary packages for using the TypeORM adapter with Casbin in a MidwayJS project.  It adds `@midwayjs/casbin-typeorm-adapter` for the adapter and `@midwayjs/typeorm` for TypeORM integration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/casbin-typeorm-adapter @midwayjs/typeorm --save\n```\n\n----------------------------------------\n\nTITLE: DataSourceManager Methods\nDESCRIPTION: This code lists other methods available in the data source manager for checking the existence of a data source, getting all data source names, and checking if a data source is connected.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// 数据源是否存在\nthis.mysqlDataSourceManager.hasDataSource('dataSource1');\n// 获取所有的数据源名\nthis.mysqlDataSourceManager.getDataSourceNames();\n// 数据源是否连接\nthis.mysqlDataSourceManager.isConnected('dataSource1')\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Report Middleware in Midway.js (TypeScript)\nDESCRIPTION: This snippet demonstrates creating a simple report middleware in Midway v1. It measures the request time and reports it. It relies on `reportTime` function to submit the data. This middleware is a function that returns an async function, accepting the Koa context (ctx) and a next function as parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/middleware.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/middleware/report.ts\n\nmodule.exports = () => {\n  return async function (ctx, next) {\n    const startTime = Date.now();\n    await next();\n    // 上报请求时间\n    reportTime(Date.now() - startTime);\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Sequelize Model Definition (TypeScript)\nDESCRIPTION: Defines a Sequelize model using TypeScript and the sequelize-typescript library. This example demonstrates how to define a model representing a 'task' table, including column definitions, data types, and indexes. It showcases the use of decorators to map table columns to class properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/sequelize_generator.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Column, DataType, Table, Model } from 'sequelize-typescript';\n\n@Table({\n  tableName: 'task',\n  timestamps: false,\n  indexes: [\n    {\n      name: 'PRIMARY',\n      unique: true,\n      using: 'BTREE',\n      fields: [{ name: 'task_id' }]\n    },\n  ],\n})\nexport class TaskEntity extends Model {\n  @Column({\n    autoIncrement: true,\n    type: DataType.INTEGER.UNSIGNED,\n    allowNull: false,\n    primaryKey: true,\n    field: 'task_id',\n  })\n  taskId: number;\n\n\t@Column({\n    type: DataType.TINYINT.UNSIGNED,\n    allowNull: false,\n    defaultValue: 0,\n    comment: '******',\n    field: 'app_id',\n  })\n  appId: number;\n\n  @Column({\n    type: DataType.STRING(64),\n    allowNull: false,\n    comment: '****',\n    field: 'task_name',\n  })\n  taskName: string;\n\n  @Column({\n    type: DataType.TINYINT.UNSIGNED,\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Task Category: 1-cron,2-interval',\n  })\n  type: number;\n\n  @Column({\n    type: DataType.TINYINT.UNSIGNED,\n    allowNull: false,\n    defaultValue: 0,\n    comment: 'Task Status: 0-Pause, 1-Startup',\n  })\n  status: number;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: true,\n    comment: 'Task Start Time',\n    field: 'start_time',\n  })\n  startTime: string;\n\n  @Column({\n    type: DataType.DATE,\n    allowNull: true,\n    comment: 'Mission End Time',\n    field: 'end_time',\n  })\n  endTime: string;\n\n  @Column({\n    type: DataType.INTEGER,\n    allowNull: false,\n    defaultValue: -1,\n    comment: 'Number of Task Executations',\n  })\n  limit: number;\n\n  @Column({\n    type: DataType.STRING(128),\n    allowNull: true,\n    defaultValue: '',\n    comment: 'task cron configuration',\n  })\n  cron: string;\n\n  @Column({\n    type: DataType.INTEGER.UNSIGNED,\n    allowNull: true,\n    defaultValue: 0,\n    comment: 'Task Execution Interval',\n  })\n  every: number;\n\n  @Column({\n    type: DataType.STRING(255),\n    allowNull: true,\n    comment: 'parameter',\n  })\n  args: string;\n\n  @Column({\n    type: DataType.STRING(255),\n    allowNull: true,\n    comment: 'Remarks',\n  })\n  remark: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Midway.js Project using npm\nDESCRIPTION: This command uses npm to initialize a new Midway.js project with the latest version, automatically answering yes to all prompts.  It streamlines the project setup process.  Ensure npm is installed and available in your environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Disabling Unused Locals Check in TypeScript\nDESCRIPTION: This snippet demonstrates how to disable the `noUnusedLocals` compiler option in `tsconfig.json`. When enabled, TypeScript reports an error if a local variable is declared but not used. Disabling it prevents TS6133 errors when variables are declared but not used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ts_problem.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noUnusedLocals\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Frameworks with Bootstrap in TypeScript\nDESCRIPTION: This snippet shows how to load and run multiple frameworks (koa and gRPC) within a single MidwayJS application. It initializes each framework with its specific configurations (port for koa, service definitions for gRPC) and then uses Bootstrap to load and run them together.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/multi_framework_start.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst WebFramework = require('@midwayjs/koa').Framework;\nconst GRPCFramework = require('@midwayjs/grpc').Framework;\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\nconst web = new WebFramework().configure({\n  port: 7001,\n});\n\nconst grpcService = new GRPCFramemwork().configure({\n  services: [\n    {\n      protoPath: join(__dirname, 'proto/helloworld.proto'),\n      package: 'helloworld',\n    },\n  ],\n});\n\nBootstrap.load(web).load(grpcService).run();\n```\n\n----------------------------------------\n\nTITLE: Converting Column Values with Transformer - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `transformer` parameter in a TypeORM column decorator to convert column values, such as formatting dates. It defines a `dateTransformer` object with `from` and `to` methods for formatting a Date object to 'YYYY-MM-DD HH:mm:ss' string and converting to a new Date object respectively. It uses the `dayjs` library for date formatting. The `createdAt` column is decorated with `@CreateDateColumn` and uses the `dateTransformer`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport * as dayjs from 'dayjs';\n\nconst dateTransformer = {\n  from: (value: Date | number) => {\n    return dayjs(typeof value === 'number '? value: value.getTime()).format('YYYY-MM-DD HH:mm:ss');\n  },\n  to: () => new Date()\n};\n\n@Entity()\nexport class Photo {\n  // ...\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    transformer: dateTransformer\n  })\n  createdAt: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Using MidwayApplicationManager to add middleware - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the MidwayApplicationManager to retrieve multiple application instances and add a common middleware to them.  It uses the `@Configuration` decorator to define a configuration class and the `@Inject` decorator to inject the MidwayApplicationManager. The `getApplications` method retrieves applications based on their namespace (e.g., 'koa', 'faas'). The `forEach` method iterates through the retrieved applications and applies the `CustomMiddleware` to each.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayApplicationManager, onfiguration, Inject } from '@midwayjs/core'\nimport { CustomMiddleware } from './middleware/custom.middleware';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  applicationManager: MidwayApplicationManager;\n\n  async onReady() {\n    this.applicationManager\n      .getApplications(['koa', 'faas', 'express', 'egg'])\n      .forEach(app => {\n        app.useMiddleware(CustomMiddleware);\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Configuration Injection in Production\nDESCRIPTION: This snippet describes a fix for configuration injection issues in production environments within MidwayJS. Specifically, it addresses scenarios where plugins were not being injected correctly. This fix ensures that configuration and plugin injection work as expected in production.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: IndexDataMock Class (TypeScript)\nDESCRIPTION: This code defines the `IndexDataMock` class, which implements the `ISimulation` interface. It is used to mock the behavior of the `IndexDataService` in development environments. It uses `@Mock`, `@App`, and `@Inject` decorators. The `enableCondition` method determines when the mock is active.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/mock/indexData.mock.ts\nimport { Mock, ISimulation } from '@midwayjs/core';\n\n@Mock()\nexport class IndexDataMock implements ISimulation {\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/mock/indexData.mock.ts\nimport { App, IMidwayApplication, Inject, Mock, ISimulation, MidwayMockService } from '@midwayjs/core';\nimport { IndexDataService } from '../service/indexData.service';\n\n@Mock()\nexport class IndexDataMock implements ISimulation {\n\n  @App()\n  app: IMidwayApplication;\n\n  @Inject()\n  mockService: MidwayMockService;\n\n  async setup(): Promise<void> {\n    // 使用 MidwayMockService API 模拟属性\n    this.mockService.mockClassProperty(IndexDataService, 'fetchIndex', async (url) => {\n      // 根据逻辑返回不同的数据\n      if (/current/.test(url)) {\n        return {\n          data: require('./resource/current.json'),\n        };\n      } else if (/v7/.test(url)) {\n        return {\n          data: require('./resource/v7.json'),\n        };\n      } else if (/v6/.test(url)) {\n        return {\n          data: require('./resource/v6.json'),\n        };\n      }\n    });\n  }\n\n  enableCondition(): boolean | Promise<boolean> {\n    // 模拟类启用的条件\n    return ['local', 'test', 'unittest'].includes(this.app.getEnv());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket.IO Message Response - TypeScript\nDESCRIPTION: Emits a response to a Socket.IO client using the `@WSEmit` decorator in MidwayJS. This decorator sends the return value of the decorated method to the client under the specified event name. The method return value will be sent to the client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, OnWSConnection, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/socketio';\n\n@WSController('/')\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSMessage('myEvent')\n  @WSEmit('myEventResult')\n  async gotMessage() {\n    return 'hello world'; // The hello world string is returned to the client here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate TypeScript Definitions for Egg.js - Bash & JSON\nDESCRIPTION: This snippet outlines the process of generating TypeScript definitions for Egg.js dependencies within a MidwayJS project. It involves installing the `@midwayjs/egg-ts-helper` package and adding a script to `package.json` to execute the helper before the development server starts. This ensures that TypeScript recognizes the Egg.js APIs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/egg-ts-helper --save-dev\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"dev\": \"cross-env ets && cross-env NODE_ENV=local midway-bin dev --ts \",\n  },\n```\n\n----------------------------------------\n\nTITLE: Replacing Swagger UI JSON Path - TypeScript\nDESCRIPTION: This commit fixes an issue where the Swagger UI was pointing to an incorrect JSON path. This change ensures that the Swagger UI can correctly load and display the API documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/axios/CHANGELOG.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logger Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a custom logger configuration. This allows creating a logger that is specifically tailored to a module or component. The `fileLogName` determines the name of the log file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      abcLogger: {\n        fileLogName: 'abc.log'\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Throwing an Error in a Serverless Function (MidwayJS)\nDESCRIPTION: This code snippet demonstrates how to throw an error within a MidwayJS Serverless function. When an error is thrown, the framework will catch it and return a default error message (Internal Server Error) in production or the full error stack in non-production environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_error.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@ServerlessTrigger(//...)\nasync invoke() {\n\tthrow new Error('abc');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task History Cleanup in BullMQ - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the cleanup options for successful and failed tasks in BullMQ. The `removeOnComplete` option specifies how many successful task records to keep, and `removeOnFail` specifies how many failed task records to retain.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  bullmq: {\n    defaultQueueOptions: {\n      defaultJobOptions: {\n        removeOnComplete: 3,  // Keep only the last 3 records after success\n        removeOnFail: 10,     // Keep only the last 10 records after failure\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Name Arguments in MidwayJS\nDESCRIPTION: This snippet signifies the addition of event name arguments within the MidwayJS framework. This enhancement likely provides more context or flexibility when handling events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n- add event name args ([#986](https://github.com/midwayjs/midway/issues/986)) ([bfd8232](https://github.com/midwayjs/midway/commit/bfd82320aee8600d8fa30bd2821a0e68c80fd755))\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/view-ejs dependency with npm\nDESCRIPTION: This command installs the @midwayjs/view-ejs package as a project dependency using npm. The `--save` flag ensures that the dependency is added to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/view-ejs@3 --save\n```\n\n----------------------------------------\n\nTITLE: Start Application with Name\nDESCRIPTION: This command starts a Node.js application with a specified name using PM2.  The `--name` parameter assigns a custom name to the application, making it easier to manage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/pm2.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pm2 start ./bootstrap.js --name test_app\n```\n\n----------------------------------------\n\nTITLE: Setting Cascade Options for OneToOne Relationship - TypeScript\nDESCRIPTION: This snippet demonstrates how to set cascade options in a @OneToOne relationship using TypeORM. The cascade option allows automatically saving the associated object when the main object is saved. This removes the need to separately save the related entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n  /// ... other columns\n\n  @OneToOne(type => PhotoMetadata, metadata => metadata.photo, {\n    cascade: true,\n  })\n  metadata: PhotoMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing swagger ui replace json path\nDESCRIPTION: This snippet fixes an issue where the JSON path in the Swagger UI was being incorrectly replaced. Swagger UI is a tool for visualizing and interacting with API documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Display Help Information for Hooks Build Command\nDESCRIPTION: This shows the usage and available options for the `hooks build` command. It indicates that the command takes an optional root directory as an argument and provides options for specifying the output directory and cleaning the output directory before building.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/fullstack.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage:\n  $ hooks build [root]\n\nOptions:\n  --outDir <dir>  [string] output directory (default: dist)\n  --clean         [boolean] clean output directory before build (default: false)\n  -h, --help      Display this message\n```\n\n----------------------------------------\n\nTITLE: Updating nanoid Dependency in MidwayJS\nDESCRIPTION: This commit updates the 'nanoid' dependency to version 3.3.1 within the MidwayJS project. This ensures the project uses the latest version of the nanoid library for generating unique IDs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/security/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n**deps:** update dependency nanoid to v3.3.1 ([#1704](https://github.com/midwayjs/midway/issues/1704)) ([7e31d41](https://github.com/midwayjs/midway/commit/7e31d41d9d66a3667b21c5c6aa7fedc675ed38aa))\n```\n\n----------------------------------------\n\nTITLE: Defining Tenant Information Interface\nDESCRIPTION: This TypeScript interface defines the structure of tenant information. It specifies that a tenant has an `id` (string) and a `name` (string).  This interface is used to strongly type tenant data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tenant.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TenantInfo {\n  id: string;\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Local Scheduled Task\nDESCRIPTION: Defines a local scheduled task using the `@TaskLocal` decorator. The cron expression is provided as the first argument to the decorator.  Local tasks execute on the specific instance of the application where they are defined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, TaskLocal } from '@midwayjs/decorator';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  helloService: HelloService;\n\n  // 例如下面是每秒钟执行一次\n  @TaskLocal('* * * * * *')\n  async test() {\n    console.log(this.helloService.getName());\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Streaming Proto - Protobuf\nDESCRIPTION: This code snippet defines a gRPC service with streaming capabilities in a protobuf file. The `stream` keyword is used to indicate streaming parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage math;\n\nmessage AddArgs {\n  int32 id = 1;\n  int32 num = 2;\n}\n\nmessage Num {\n  int32 id = 1;\n  int32 num = 2;\n}\n\nservice Math {\n  rpc Add (AddArgs) returns (Num) {\n  }\n\n\t// 双向流\n  rpc AddMore (stream AddArgs) returns (stream Num) {\n  }\n\n  // 服务端往客户端推\n  rpc SumMany (AddArgs) returns (stream Num) {\n  }\n\n  // 客户端往服务端推\n  rpc AddMany (stream AddArgs) returns (Num) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Bull Component in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet shows how to use the Bull component in MidwayJS, which replaces the original task component. It demonstrates how to get a queue instance and add a job to the queue for immediate execution. Bull is a Redis-based queue system for background processing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-10-12-release-3-6.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// invoke\nconst testQueue = this.bullFramework.getQueue('test');\n// 立即执行这个任务\nawait testQueue?.runJob({\n  aaa: 1,\n  bbb: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Serverless Function with Generic Trigger\nDESCRIPTION: This code snippet demonstrates a basic serverless function in Midway using a generic trigger. It showcases the use of the `Context` object and the `ServerlessTrigger` decorator. The function receives an `event` parameter and returns a simple string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_context.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\nimport { Provide } from '@midwayjs/decorator';\n\n@Provide()\nexport class Index {\n\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(...)\n\tasync handler(event) {\n\t\treturn 'hello world'\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Axios Dependency to ^0.25.0 - TypeScript\nDESCRIPTION: This commit updates the axios dependency to version ^0.25.0. This ensures that the application is using the latest version of Axios and benefits from any bug fixes, performance improvements, or new features introduced in that version.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/axios/CHANGELOG.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n**deps:** update dependency axios to ^0.25.0 ([#1596](https://github.com/midwayjs/midway/issues/1596)) ([b30f1ae](https://github.com/midwayjs/midway/commit/b30f1aecc66755972f0572692918eb3408e22be2))\n```\n\n----------------------------------------\n\nTITLE: Fix: Supertest Typings and createFunctionApp in MidwayJS\nDESCRIPTION: This commit resolves issues with supertest typings and the `createFunctionApp` function in MidwayJS. It likely improves the developer experience by providing more accurate type definitions for testing and function app creation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/validate/CHANGELOG.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Injecting gRPC Clients - TypeScript\nDESCRIPTION: This code snippet demonstrates how to inject the gRPC `Clients` object into a service using `@midwayjs/decorator`. The `Clients` object provides access to configured gRPC services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/decorator';\nimport { helloworld, hero } from '../interface';\nimport { Clients } from '@midwayjs/grpc';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  grpcClients: Clients;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing default error directory and loadMidwayController in MidwayJS\nDESCRIPTION: This commit fixes issues related to the default error directory and the `loadMidwayController` function in MidwayJS. These fixes likely address incorrect file paths or loading behavior for error handling and controller initialization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\ndefault error dir and loadMidwayController ([#1791](https://github.com/midwayjs/midway/issues/1791)) ([4fd6b64](https://github.com/midwayjs/midway/commit/4fd6b643d683b85335f4bd314a9574ef8501a3f6))\n```\n\n----------------------------------------\n\nTITLE: Fixing Passport Compatibility in Midway.js\nDESCRIPTION: This code snippet represents a bug fix addressing compatibility issues with Passport within the Midway.js project. The fix likely ensures seamless integration and proper functionality when using Passport for authentication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n2975e4f5b6cf8cbcd42cbfb8ce3e08633dbba383\n```\n\n----------------------------------------\n\nTITLE: Removing Zlib in MidwayJS\nDESCRIPTION: This snippet shows the removal of the zlib library from the MidwayJS project. This might be due to security concerns, dependency issues, or a shift in the project's compression strategy.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n- remove zlib ([#1035](https://github.com/midwayjs/midway/issues/1035)) ([cc2cd40](https://github.com/midwayjs/midway/commit/cc2cd405a104b3388d93a09d981b59b472fd8ea1))\n```\n\n----------------------------------------\n\nTITLE: Fixing COS Config and Updating Docs in MidwayJS\nDESCRIPTION: This commit addresses the cos config definition and also updates the 3.x documentation. These updates ensure that the COS configuration is accurate and that the documentation reflects the current state of the 3.x version.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ncos config definition & 3.x doc update ([#1515](https://github.com/midwayjs/midway/issues/1515)) ([0ac7ac5](https://github.com/midwayjs/midway/commit/0ac7ac5805b7ab8873f8792fc1712a74e3223172))\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Build Command\nDESCRIPTION: This bash command builds the Docker images defined in the docker-compose.yml file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose build\n```\n\n----------------------------------------\n\nTITLE: Pass headers to a request\nDESCRIPTION: This snippet shows how to pass custom headers to a request using the `.set()` method of the `createHttpRequest` object. This is useful for testing endpoints that require specific headers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app)\n  .get('/set_header')\n\t.set({\n  \t'x-bbb': '123'\n  })\n  .query({ name: 'harry' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Username Retrieval from Context\nDESCRIPTION: This TypeScript code snippet shows how to configure the `usernameFromContext` option, which is a function used to extract the username from the context. This allows casbin to authenticate the logged in user against configured policies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    casbin: {\n      modelPath: join(appInfo.appDir, 'basic_model.conf'),\n      policyAdapter: join(appInfo.appDir, 'basic_policy.csv'),\n      usernameFromContext: (ctx) => {\n        return ctx.user;\n      }\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Consul in Docker\nDESCRIPTION: This bash command runs a Consul instance in a Docker container. The `-itd` flags run the container in detached mode, while `-P` publishes all exposed ports to random ports on the host.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -itd -P consul\n```\n\n----------------------------------------\n\nTITLE: Component Configuration Import\nDESCRIPTION: Imports configuration files into a component using the `importConfigs` option in the `@Configuration` decorator. This allows the component to load and use configuration settings defined in separate files.  The paths must be absolute.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// src/bookConfiguration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport { join } from 'path';\n\n@Configuration({\n  namespace: 'book',\n  importConfigs: [\n    join(__dirname, 'config'), // 可以指定整个目录\n    join(__dirname, 'anotherConfig/config.default.ts'), // 可以指定单个文件\n  ],\n})\nexport class BookConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Exporting Framework Components - TypeScript\nDESCRIPTION: This code snippet demonstrates how to export the custom HTTP framework components, including the Application, Context, Framework (MidwayCustomHTTPFramework), and IMidwayCustomConfigurationOptions. This export statement allows other modules to import and use the custom framework in their applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport {\n  Application,\n  Context,\n  MidwayCustomHTTPFramework as Framework,\n  IMidwayCustomConfigurationOptions\n} from './custom';\n```\n\n----------------------------------------\n\nTITLE: Default Egg Plugins (javascript)\nDESCRIPTION: This snippet lists the default Egg plugins enabled in Midway v3. Most of the Egg default plugins have been turned off for documentation and behavior consistency. Users should enable them as appropriate (may conflict with Midway functionality).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  onerror: true,\n  security: true,\n  static: false,\n  development: false,\n  watcher: false,\n  multipart: false,\n  logrotator: false,\n  view: false,\n  schedule: false,\n  i18n: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer with Context Injection\nDESCRIPTION: This TypeScript code shows how to inject the `Context` into a Kafka consumer class. The `Context` provides access to the message payload and the consumer instance, enabling advanced message processing and consumer management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/consumer/sub1.consumer.ts\nimport { KafkaConsumer, IKafkaConsumer, EachMessagePayload, Context } from '@midwayjs/kafka';\nimport { Inject } from '@midwayjs/core';\n\n@KafkaConsumer('sub1')\nclass Sub1Consumer implements IKafkaConsumer {\n\n  @Inject()\n  ctx: Context;\n\n  async eachMessage(payload: EachMessagePayload) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @koa/cors\nDESCRIPTION: This command installs the `@koa/cors` package, which is used for enabling CORS in the `@midwayjs/koa` framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @koa/cors --save\n```\n\n----------------------------------------\n\nTITLE: Conditional Info Component Loading\nDESCRIPTION: This TypeScript code demonstrates how to conditionally enable the info component based on the environment. It uses the enabledEnvironment property to specify that the component should only be loaded in the 'local' environment, preventing sensitive information from being exposed in production environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/info.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as info from '@midwayjs/info';\n\n@Configuration({\n  imports: [\n    koa\n    {\n      component: info\n      enabledEnvironment: ['local'], // enabled locally only\n    }\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Update User\nDESCRIPTION: Illustrates a simple update user endpoint in a MidwayJS controller without validation. It checks for the existence of 'id' and if 'age' is greater than 30.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\nimport { Controller, Get, Provide } from '@midwayjs/core';\n\n@Controller('/api/user')\nexport class HomeController {\n  @Post('/')\n  async updateUser(@Body() user: User) {\n    if (!user.id || typeof user.id !== 'number') {\n      throw new Error('id error');\n    }\n\n    if (user.age <= 30) {\n      throw new Error('age not match');\n    }\n    // xxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit adds a guard feature to the MidwayJS framework. The linked issue and commit hash provide further details about the implementation and purpose of this guard.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- add guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Fixing singleton invoke request scope in Midway.js\nDESCRIPTION: This commit resolves an issue where the request scope was not valid when invoking singleton services in Midway.js. This ensures that singleton services can correctly access request-scoped dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nf97c0632107b47cf357d17774a4e4bb5233bba57\n```\n\n----------------------------------------\n\nTITLE: Class-Based Injection Example (TypeScript)\nDESCRIPTION: This code shows the simplest form of dependency injection in MidwayJS, where a class `B` is injected into class `A` based on its type.  Midway automatically generates a UUID for the class and uses it as the injection identifier.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\n\n@Provide() // <------ Expose a Class\nexport class B {\n  //...\n}\n\n@Provide()\nexport class A {\n\n  @Inject()\n  B: B; // <------ The attribute here uses Class\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: mwtsc enabling HTTPS\nDESCRIPTION: This command runs mwtsc in watch mode, executes a file after compilation, and enables HTTPS using the `--ssl` parameter. The framework uses a built-in certificate for local testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc --watch --run @midwayjs/mock/app --ssl\n```\n\n----------------------------------------\n\nTITLE: Supporting @configuration Decorator in Midway.js\nDESCRIPTION: This commit adds support for the @configuration decorator in Midway.js. The decorator simplifies the process of defining application configurations. The commit hash is 0584494.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Switching to Intel Environment\nDESCRIPTION: This snippet provides steps for switching to an Intel environment on a Mac with Apple Silicon. It uses the `arch` command to verify the current architecture and then uses `arch -x86_64 zsh` to open a new terminal running in the Intel environment. The architecture is checked again to confirm the switch.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_install_nodejs.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n* 1. Open the terminal, execute `arch`, and confirm that the running is `arm64`\n* 2. Execute `arch -x86_64 zsh` to open a new terminal\n* 3. Execute `arch` to confirm that the running is `i386`\n```\n\n----------------------------------------\n\nTITLE: Adding a guard feature in MidwayJS\nDESCRIPTION: This commit introduces a new guard feature within the MidwayJS framework. It's associated with issue #2345 and identified by commit hash 1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Disabling the default view plugin in Egg.js\nDESCRIPTION: This TypeScript code snippet shows how to disable the default view plugin in an Egg.js application when using @midwayjs/web.  Setting the `view` property to `false` in the `plugin.ts` file prevents conflicts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EggPlugin } from 'egg';\nexport default {\n  // ...\n  view: false\n} as EggPlugin;\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Heartbeat Check\nDESCRIPTION: Configures the WebSocket server to automatically send `ping` packets to connected clients for heartbeat checks by setting `enableServerHeartbeatCheck` to true in the `webSocket` configuration. If a client does not respond within the configured time interval, the server will terminate the connection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n   // ...\n   webSocket: {\n     enableServerHeartbeatCheck: true,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context Manager Middleware\nDESCRIPTION: This code snippet adds context manager with middleware to the Midway.js project. It is associated with commit 99ba506 and issue #2116.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/async-hooks-context-manager/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Using Hook to Load Egg Application in Midway.js\nDESCRIPTION: This code snippet refers to using a hook to load the Egg application within Midway.js. This change is likely related to the integration of Egg.js within the Midway.js framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nb47f27bf441431ddb1d0d35d5ee0ae80ae56fce8\n```\n\n----------------------------------------\n\nTITLE: Installing express-session and its types\nDESCRIPTION: These commands install `express-session` and its type definitions, which are required for session management in @midwayjs/express applications. The `--save` flag adds the package to the project's dependencies, while `-D` installs the type definitions as a dev dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i express-session\n$ npm i -D @types/express-session\n```\n\n----------------------------------------\n\nTITLE: Using Kafka Admin with MidwayJS\nDESCRIPTION: This code snippet demonstrates how to use the Kafka Admin within a MidwayJS service. It injects an Admin instance using `@InjectClient`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/admin.service.ts\nimport { Provide, InjectClient } from '@midwayjs/core';\nimport { KafkaAdminFactory, Admin } from '@midwayjs/kafka';\n\n@Provide()\nexport class AdminService {\n  \n  @InjectClient(KafkaAdminFactory, 'admin1')\n  admin: Admin;\n}\n```\n\n----------------------------------------\n\nTITLE: Add Bootstrap File (bootstrap.js)\nDESCRIPTION: Creates a `bootstrap.js` file in the project root directory. This file is responsible for loading and running the Midway application using `@midwayjs/bootstrap` and `@midwayjs/serverless-app`. The code initializes the application with a specified port (7001).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_to_app.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// bootstrap.js\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nconst { Framework } = require('@midwayjs/serverless-app');\nconst app = new Framework().configure({\n  port: 7001,\n});\n\nBootstrap.load(app).run();\n```\n\n----------------------------------------\n\nTITLE: Using `createBootstrap` for Integration Tests (TypeScript)\nDESCRIPTION: This snippet shows how to use `createBootstrap` to test the application by starting it using the `bootstrap.js` entry point.  This creates a real service with possible running multiple frameworks. `getApp` method returns the app of the selected framework. The bootstrap should be closed with `bootstrap.close()` after all tests are finished.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayFrameworkType } from '@midwayjs/decorator';\n\nit('should GET /', async () => {\n  // create app\n  const bootstrap = await createBootstrap(join(process.cwd(), 'bootstrap.js'));\n  // 根据框架类型获取 app 实例\n  const app = bootstrap.getApp(MidwayFrameworkType.WEB_KOA);\n\n  // expect and test\n\n  // close bootstrap\n  await bootstrap.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Loading config once - Bug fix\nDESCRIPTION: This snippet addresses a bug fix to ensure that the configuration is only loaded once and that singleton services can be loaded before the framework starts. This improves performance and ensures correct service initialization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Modifying Dev Script with @midwayjs/cli in package.json\nDESCRIPTION: This code snippet demonstrates how to modify the `dev` script in `package.json` when using `@midwayjs/cli`. It sets the `NODE_ENV` to `local` and specifies the source directory using the `--sourceDir` option. The `--ts` flag indicates that TypeScript should be used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/change_start_dir.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"dev\": \"cross-env NODE_ENV=local midway-bin dev --sourceDir=./server --ts\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap with Modified Compilation Directory\nDESCRIPTION: This code snippet demonstrates how to configure the `Bootstrap` in `bootstrap.js` when the compilation directory has been changed. It uses the `join` function from the `path` module to create a path to the new compilation directory (`build`) and configures the `baseDir` for the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/change_start_dir.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst { join } = require('path');\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n//...\n\n// configure method is required to configure baseDir\nBootstrap\n  .configure({\n    baseDir: join(__dirname, 'build')\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Configure Consul (YAML)\nDESCRIPTION: Configures the Consul provider and service. The provider settings specify the Consul server address, port, and registration behavior. The service settings define the service's address, port, and tags. These configurations are necessary for the application to register itself with Consul and for other services to discover it.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/usage.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconsul: {\n  provider: {\n    // 注册本服务\n    register: true,\n    // 应用正常下线反注册\n    deregister: true,\n    // consul server 主机\n    host: '192.168.0.10',\n    // consul server 端口\n    port: 8500,\n    // 调用服务的策略(默认选取 random 具有随机性)\n    strategy: 'random',\n  },\n  service: {\n    address: '127.0.0.1',\n    port: 7001,\n    tags: ['tag1', 'tag2'],\n    // others consul service definition\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User interface\nDESCRIPTION: Defines a User interface with properties like id, firstName, lastName, and age. Used as a type definition for user data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\nexport interface User {\n  id: number;\n  firstName: string;\n  lastName: string;\n  age: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving API trigger information with getApiTrigger\nDESCRIPTION: This example shows how to use the `getApiTrigger` function from `@midwayjs/hooks` to retrieve information about an API endpoint, such as the HTTP method and path. The `getApiTrigger` function takes an API function as input and returns an object containing the trigger details. This information can be used to construct HTTP requests for testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"HTTP \",\n  \"method\": \"GET \",\n  \"path\": \"/hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete 2.x Beta Features - JavaScript\nDESCRIPTION: This commit signifies the completion of the 2.x beta phase, potentially including numerous new features, bug fixes, and improvements across the framework. It is a comprehensive set of changes aiming for stability and feature completeness.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nb23cd00fe9cefc9057a2284d38d5419773539206\n```\n\n----------------------------------------\n\nTITLE: Adding logger type definition to src/interface.ts\nDESCRIPTION: This code snippet shows how to add the logger type definition to the `src/interface.ts` file. This is necessary to enable type hinting for `midwayLogger` in the configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// src/interface.ts\n+ import type {} from '@midwayjs/logger';\n```\n\n----------------------------------------\n\nTITLE: Support Entry File in Bootstrap\nDESCRIPTION: This code snippet introduces functionality to support specifying an entry file during the application's bootstrap process. This allows developers to customize the startup sequence and load specific modules or configurations at the beginning of the application lifecycle. The commit hash 49a5ff6 provides a direct reference to the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_14\n\nLANGUAGE: N/A\nCODE:\n```\n49a5ff6\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration - No Credentials - JavaScript\nDESCRIPTION: This JavaScript code demonstrates a client-side `fetch` call without credentials. This is the simplest form of a cross-origin request, where no user authentication is required.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cross_domain.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(url);\n```\n\n----------------------------------------\n\nTITLE: Merging Service Factory Client and Clients - TypeScript\nDESCRIPTION: This commit addresses the merging of service factory client and clients, likely to consolidate and streamline client management within the application. It potentially simplifies the process of accessing and utilizing different services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/axios/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nservice factory client & clients merge ([#2248](https://github.com/midwayjs/midway/issues/2248)) ([cfdee64](https://github.com/midwayjs/midway/commit/cfdee6449cb2770bc238e74fd754b783c331b822))\n```\n\n----------------------------------------\n\nTITLE: Captcha Configuration (TypeScript)\nDESCRIPTION: This TypeScript code provides a default configuration for the @midwayjs/captcha component.  It defines default values for captcha size, noise, width, height, character type, expiration time, and ID prefix. It also shows how the configurations for image, formula, and text types merge with the default settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/captcha.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const captcha: CaptchaOptions = {\n  default: { // 默认配置\n    size: 4,\n    noise: 1,\n    width: 120,\n    height: 40,\n  },\n  image: {      // 最终会合并 default 配置\n    type: 'mixed',\n  },\n  formula: {},  // 最终会合并 default 配置\n  text: {},     // 最终会合并 default 配置\n  expirationTime: 3600,\n  idPrefix: 'midway:vc',\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Casbin Module in MidwayJS\nDESCRIPTION: This commit adds the Casbin module to the MidwayJS framework. Casbin is an authorization library that supports access control models like ACL, RBAC, ABAC.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Installing Swagger Dependency with npm\nDESCRIPTION: This command installs the `@midwayjs/swagger` package and `swagger-ui-dist` as development dependency using npm. The swagger-ui-dist is used to output Swagger API pages on the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/swagger@3 --save\n$ npm install swagger-ui-dist --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Dependencies\nDESCRIPTION: These commands install the required dependencies for RabbitMQ integration with Node.js.  `amqplib` and `amqp-connection-manager` are installed as runtime dependencies, while `@types/amqplib` is installed as a development dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i amqplib amqp-connection-manager --save\n$ npm i @types/amqplib --save-dev\n```\n\n----------------------------------------\n\nTITLE: Customizing File Response Template (TypeScript)\nDESCRIPTION: This code snippet showcases how to customize the template used for file responses using `HttpServerResponse`. The `FILE_TPL` is used to modify the structure of the file data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nHttpServerResponse.FILE_TPL = (data: Readable, isSuccess: boolean) => { /*...*/};\n```\n\n----------------------------------------\n\nTITLE: TestService with RunInPrimary decorator in MidwayJS\nDESCRIPTION: This TypeScript code defines a TestService with methods `setData` and `getData` decorated with `@RunInPrimary()`.  This ensures that these methods are executed only in the main process.  `@Provide()` makes the class injectable, and `@Scope(ScopeEnum.Singleton)` ensures a single instance.  The data returned by the methods is limited to serializable JSON.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/process_agent.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum } from '@midwayjs/core';\nimport { RunInPrimary } from '@midwayjs/process-agent';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class TestService {\n\n  data: any = 0;\n\n  @RunInPrimary()\n  async setData( B) {\n    this.data = B;\n    return this.data;\n  }\n\n  @RunInPrimary()\n  async getData() {\n    return this.data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using app.getCoreLogger() to get the core logger\nDESCRIPTION: This snippet demonstrates how to use the `getCoreLogger()` method to access the core logger instance. The core logger is typically used for framework-level logging.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getCoreLogger();\n```\n\n----------------------------------------\n\nTITLE: Configuring AppId in build.json\nDESCRIPTION: This JSON snippet shows how to configure the AppId for a WeChat mini program in the `build.json` file.  The `appid` field within the `wechat-miniprogram.nativeConfig` section is used to specify the application's unique identifier for WeChat.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_miniprogram.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targets\": [\n    //...\n  ],\n  \"plugins\": [\n    //...\n  ],\n  \"wechat-miniprogram\": {\n    \"nativeConfig\": {\n      \"appid\": \"<你的 AppID>\",\n      \"name\": \"nativeConfig 是用户配置 project.config.json 的地方\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start development server\nDESCRIPTION: Starts the development server using npm. This allows developers to test changes locally before deploying. The server usually runs on port 7001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Configure Log Output Format in MidwayJS\nDESCRIPTION: This snippet demonstrates how to configure the output format of log messages in MidwayJS.  The `format` property within the `clients` configuration specifies a function that defines the structure of each log line.  The function receives a `LoggerInfo` object containing information about the log message and returns a formatted string. In this example two loggers, appLogger and customOtherLogger are configured with distinct formats.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoggerInfo } from '@midwayjs/logger';\n\nexport default {\n  midwayLogger: {\n    clients: {\n      appLogger: {\n        format: (info: LoggerInfo) => {\n          return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.labelText}${info.message}`;\n        }\n        // ...\n      },\n      customOtherLogger: {\n        format: (info: LoggerInfo) => {\n          return 'xxxx';\n        }\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Serverless Devs Configuration (MidwayJS, YAML)\nDESCRIPTION: This YAML configuration file defines the structure for deploying a MidwayJS application using Serverless Devs to Alibaba Cloud Function Compute. It specifies the project name, access credentials, service details, function configuration (handler, code URI, initializer), custom domains, and triggers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nedition: 1.0.0\nname: \"midwayApp\" #  项目名称\naccess: \"default\" #  秘钥别名\n\nvars:\n  service:\n    name: fc-build-demo\n    description: 'demo for fc-deploy component'\nservices:\n  project-0981cd9b07:\n    component: devsapp/fc\n    props:\n      region: cn-hangzhou\n      service: ${vars.service}\n      function:\n        name: hello\t# 函数名\n        handler: helloHttpService.handleHTTPEvent\n        codeUri: '.'\n        initializer: helloHttpService.initializer\n      customDomains:\n        - domainName: auto\n          protocol: HTTP\n          routeConfigs:\n            - path: /*\n              serviceName: ${vars.service.name}\n              functionName: helloHttpService-handleHTTPEvent\n      triggers:\n        - name: http\n          type: http\n          config:\n            methods:\n              - GET\n            authType: anonymous\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK in bootstrap.js\nDESCRIPTION: Configures and starts the OpenTelemetry SDK within the `bootstrap.js` file. This involves creating a NodeSDK instance, configuring resources and auto-instrumentations, and registering the SDK to begin recording telemetry data. It also includes graceful shutdown handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/otel/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst process = require('process');\nconst { NodeSDK, node, resources } = require('@opentelemetry/sdk-node');\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// configure the SDK to export telemetry data to the console\n// enable all auto-instrumentations from the meta package\nconst traceExporter = new node.ConsoleSpanExporter();\nconst sdk = new NodeSDK({\n  resource: new resources.Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: 'my-service',\n  }),\n  traceExporter,\n  instrumentations: [getNodeAutoInstrumentations()]\n});\n\n// initialize the SDK and register with the OpenTelemetry API\n// this enables the API to record telemetry\nsdk.start()\n\n// gracefully shut down the SDK on process exit\nprocess.on('SIGTERM', () => {\n  sdk.shutdown()\n    .then(() => console.log('Tracing terminated'))\n    .catch((error) => console.log('Error terminating tracing', error))\n    .finally(() => process.exit(0));\n});\n\nBootstrap\n  .configure(/**/)\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Integrating Socket.IO with Existing HTTP Service\nDESCRIPTION: This snippet demonstrates how to integrate Socket.IO with an existing HTTP service (Koa in this example) in a MidwayJS application. It loads both the Web framework and the Socket.IO framework, ensuring that the HTTP framework is loaded as the primary framework. The Socket.IO framework automatically attaches to the HTTP server without needing an explicit port configuration. It requires `@midwayjs/koa`, `@midwayjs/socketio`, and `@midwayjs/bootstrap` as dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst WebFramework = require('@midwayjs/koa').Framework;\nconst SocketFramework = require('@midwayjs/socketio').Framework;\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// 加载主 web 框架\nconst webFramework = new WebFramework().configure({\n  port: 7001,\n});\n\n// 加载副 socket.io 框架，自动适配主框架，这里不需要配置 port\nconst socketFramework = new SocketFramework().configure({});\n\nBootstrap.load(webFramework).load(socketFramework).run();\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/express-session\nDESCRIPTION: These commands install the @midwayjs/express-session package and its associated type definitions as development dependencies. These packages provide session management capabilities for Midway.js applications using Express.js.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/express-session --save\n$ npm i @types/express-session --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta on Mac\nDESCRIPTION: This snippet installs Rosetta on a Mac, which allows applications built for Intel chips to run on Apple Silicon. It uses the `softwareupdate` command to install Rosetta and accepts the license agreement.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_install_nodejs.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ /usr/sbin/softwareupdate --install-rosetta --agree-to-license\n```\n\n----------------------------------------\n\nTITLE: Generating Commit History with npm\nDESCRIPTION: This command demonstrates how to generate commit history using npm. This is used when creating a release proposal and updating the history, similar to a changelog.\nSOURCE: https://github.com/midwayjs/midway/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run commits\n```\n\n----------------------------------------\n\nTITLE: Creating Simplified Loggers - TypeScript\nDESCRIPTION: This snippet shows how to use `createLogger` and `createConsoleLogger` from `@midwayjs/logger` to quickly create loggers with specific configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogger, createConsoleLogger } from '@midwayjs/logger';\n\n// 一个只有控制台输出的日志，并添加到默认的日志容器中\nconst consoleLogger = createConsoleLogger('customConsoleLogger');\n\n// 一个只写文本的日志，并添加到默认的日志容器中（不会将错误转到其他日志，也不会输出控制台）\nconst onlyFileLogger = createFileLogger('customOnlyFileConsoleLogger', {\n  dir: logsDir,\n  fileLogName: 'test-logger.log',\n});\n\n// 文本日志，并添加到默认的日志容器中\nconst fileLogger = createLogger('customFileLogger', {\n  level: 'warn',\n  dir: __dirname,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MidwayJS project with Koa-Hooks-React\nDESCRIPTION: This command initializes a new MidwayJS project using the Koa-Hooks-React template. It uses the Midway CLI to create the project with the specified template and project name. The user then navigates into the newly created project directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/application_integration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 如果是 npm v6\n$ npm init midway --type=koa-hooks-react my_app\n\n# 如果是 npm v7\n$ npm init midway -- --type=koa-hooks-react my_app\n\n$ cd my_app\n```\n\n----------------------------------------\n\nTITLE: Executing mwtsc\nDESCRIPTION: This snippet shows the basic usage of the `mwtsc` command, which is equivalent to running `tsc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc\n```\n\n----------------------------------------\n\nTITLE: Component Object Injection without Prefix\nDESCRIPTION: Injects a registered object (e.g., 'aaa') within the same component, without needing to specify the component's namespace.  This is possible because the object is bound to the component's container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Controller('/user')\nexport class UserController {\n  @Inject()\n  aaa: string; // 这里注入不需要组件前缀，会自动处理\n}\n```\n\n----------------------------------------\n\nTITLE: Adding eggPath for container mock in Midway Mock\nDESCRIPTION: This commit enhances the container mocking functionality in the midway-mock package by adding more `eggPath` configurations. This addition allows for more comprehensive and flexible mocking of containers, improving the accuracy of tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_51\n\nLANGUAGE: None\nCODE:\n```\ncb45a44\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with useInject in TypeScript\nDESCRIPTION: This snippet demonstrates how to use `useInject` to retrieve injected instances within a Midway application.  It's equivalent to using the `@Inject` decorator in classes or the `getAsync` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_builtin.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useInject<T = any>(identifier: any): Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Testing API Gateway Triggered Function\nDESCRIPTION: This code demonstrates how to test an API Gateway triggered function. It uses `createHttpRequest` from `@midwayjs/mock` to send a POST request to the `api_gateway_aliyun` path with a request body.  The response text is then asserted using `expect`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHttpRequest } from '@midwayjs/mock';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n   it('should get result from http trigger', async () => {\n     // ...\n     const result = await createHttpRequest(app).post('api_gateway_aliyun').send({\n       name: 'zhangting',\n     });\n\n     expect(result.text).toEqual('hello zhangting');\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding guard feature in MidwayJS\nDESCRIPTION: This commit introduces a new guard feature to the MidwayJS framework. The guard likely provides a mechanism for access control or authorization, enhancing the security of MidwayJS applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Define School DTO\nDESCRIPTION: Defines a SchoolDTO class with validation rules for name (required string) and address (optional string).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType, getSchema } from '@midwayjs/validate';\n\nexport class SchoolDTO {\n  @Rule(RuleType.string().required())\n  name: string;\n  @Rule(RuleType.string())\n  address: string;\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Dependency Installation (Mongoose v6)\nDESCRIPTION: This JSON snippet shows the dependencies required to support MongoDB Server 5.x, including mongoose v6 and @typegoose/typegoose v9. It emphasizes using Typegoose as a TypeScript wrapper for Mongoose models.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n  \"dependencies\": {\n    \"mongoose\": \"^6.0.7 \",\n    \"@typegoose/typegoose\": \"9.0.0\", // This dependency needs to be installed using typegoose\n  }\n```\n\n----------------------------------------\n\nTITLE: Example Router Priority List\nDESCRIPTION: This shows an example output of the router priority list, which includes the prefix, priority, middleware, routerOptions, and controllerId of each router.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    \"prefix\": \"/case\",\n    \"priority\": 0,\n    \"middleware\": [],\n    \"routerOptions\": {\n      \"middleware\": [],\n      \"sensitive\": true\n    },\n    \"controllerId\": \"caseController\"\n  },\n  {\n    \"prefix\": \"/user\",\n    \"priority\": 0,\n    \"middleware\": [],\n    \"routerOptions\": {\n      \"middleware\": [],\n      \"sensitive\": true\n    },\n    \"controllerId\": \"userController\"\n  },\n  {\n    \"prefix\": \"/\",\n    \"priority\": -999,\n    \"middleware\": [],\n    \"routerOptions\": {\n      \"middleware\": [],\n      \"sensitive\": true\n    },\n    \"controllerId\": \"apiController\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring egg-cors plugin\nDESCRIPTION: This code snippet configures the `cors` plugin in the `src/config/config.default.ts` file. It shows the basic structure for setting properties like `origin` and `allowMethods`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport const cors = {\n  // {string|Function} origin: '*',\n  // {string|Array} allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH'\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing User Serialization/Deserialization in MidwayJS Passport Strategy\nDESCRIPTION: This code snippet shows how to override the `serializeUser` and `deserializeUser` methods in a custom Passport strategy to control how user data is stored in and retrieved from the session.  It limits the amount of data stored in session and fetches the complete user record upon deserialization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// src/strategy/local.strategy.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport { Repository } from 'typeorm';\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { UserEntity } from './user';\nimport * as bcrypt from 'bcrypt';\n\n@CustomStrategy()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  // ...\n  serializeUser(user, done) {\n    // 可以只保存用户名\n    done(null, user.username);\n  }\n\n  deserializeUser(id, done) {\n    // 这里不是异步方法，你可以从其他地方根据用户名，反查用户数据。\n    const user = getUserFromDataBase(id);\n\n    done(null, user);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure matchQueryKey with Dye Result\nDESCRIPTION: Configures the `matchQueryKey` option and demonstrates how the value of the query parameter can determine the format of the dye report (html, json, or log).  If the specified query parameter exists and matches one of those values in the request, code dyeing is triggered. Configured in `src/config/config.local.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/code_dye.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nexport default {\n   codeDye: {\n     matchQueryKey: 'codeDyeXXX',\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Prometheus Client\nDESCRIPTION: This feature introduces support for using a Prometheus client within the MidwayJS framework. It enables developers to integrate Prometheus for monitoring and metrics collection in their applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Configuring Swagger Tags in Typescript\nDESCRIPTION: This snippet demonstrates how to configure Swagger tags with descriptions in the `config.default.ts` file.  This allows for providing additional information about each tag in the Swagger UI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nexport default {\n  swagger: {\n    tags: [\n      {\n        name: 'api',\n        description: 'API Document'\n      },\n      {\n        name: 'hello',\n        description: 'Other Router'\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope in MidwayJS\nDESCRIPTION: This commit fixes an issue where the request scope was not valid when invoking singleton instances within the MidwayJS framework. This ensures that singleton instances correctly access the request scope during invocation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/security/CHANGELOG.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Update Tablestore Dependency to v5.2.0\nDESCRIPTION: Updates the tablestore dependency to version 5.2.0. This bug fix addresses potential problems or inconsistencies within the Tablestore integration. Updating to the latest version helps ensure smooth functionality and compatibility.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nupdate dependency tablestore to v5.2.0 ([#2179](https://github.com/midwayjs/midway/issues/2179))\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Context Logger Format for Bull in MidwayJS (TypeScript)\nDESCRIPTION: This snippet shows how to configure a custom format for the context logger within the Bull component in MidwayJS.  This allows you to customize the log message structure, including information like timestamp, log level, process ID, job ID, and the name of the source.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  bull: {\n    // ...\n    contextLoggerFormat: info => {\n      const { jobId, from } = info.ctx;\n      return `${info.timestamp} ${info.LEVEL} ${info.pid} [${jobId} ${from.name}] ${info.message}`;\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Error\nDESCRIPTION: This shows how to import and throw the defined `CustomError` in application logic. Dependencies include the `CustomError` class defined in a separate file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_error.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomError } from './error/custom.error';\n\n// ...\n\nasync findAll() {\n  throw new CustomError();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Serverless Projects\nDESCRIPTION: Deploys Serverless projects to platforms such as Aliyun FC, Tencent SCF, and AWS Lambda. Automatically executes the `package` command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Cross-Domain Component in Configuration\nDESCRIPTION: This TypeScript code snippet demonstrates how to import and integrate the `@midwayjs/cross-domain` component into a MidwayJS application's configuration. It imports the `crossDomain` module and adds it to the `imports` array within the `@Configuration` decorator. This enables the cross-domain functionality in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cross-domain/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as crossDomain from '@midwayjs/cross-domain';\n@Configuration({\n  imports: [\n    // ...other components\n    crossDomain\n  ],\n})\nexport class AutoConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Support custom Egg framework definition\nDESCRIPTION: Enables defining a custom Egg framework in MidwayJS applications. This gives developers greater flexibility in tailoring the underlying framework to their specific needs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nsupport define custom egg framework ([#709](https://github.com/midwayjs/midway/issues/709)) ([f5baba1](https://github.com/midwayjs/midway/commit/f5baba18d10e3dc91ba9651effadd00b8f66cf8b))\n```\n\n----------------------------------------\n\nTITLE: Simple EJS template example\nDESCRIPTION: This snippet shows a basic EJS template. It renders a variable called `data` within a simple greeting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// view/hello.ejs\nhello <%= data %>\n```\n\n----------------------------------------\n\nTITLE: Removing Midway Bin Dependency\nDESCRIPTION: This change removes the `midway-bin` dependency.  This could be due to refactoring or moving functionality elsewhere.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/bull-board Package\nDESCRIPTION: This command installs the @midwayjs/bull-board package as a dependency for your MidwayJS project, enabling the use of Bull UI to manage your queues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/bull-board@3 --save\n```\n\n----------------------------------------\n\nTITLE: Defining OS Event Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for object storage events (OS events), specifying properties such as name, bucket, events, filter (prefix, suffix), enable status, role, and version. This defines how object creation or deletion events trigger the function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OSEvent {\n  name?: string;\n  bucket: string;\n  events: string;\n  filter: {\n    prefix: string;\n    suffix: string;\n  };\n  enable?: boolean;\n  role?: string;\n  version?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declare HTTP Proxy Dependency in package.json\nDESCRIPTION: This snippet shows how to declare the @midwayjs/http-proxy dependency in the package.json file.  The version should be specified to ensure consistent installations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/http-proxy.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/http-proxy\": \"^3.0.0\"\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Express Routing Middleware in MidwayJS\nDESCRIPTION: This bug fix ensures that Express routing middleware takes effect at the controller level within the MidwayJS framework. This guarantees that middleware configurations are correctly applied to specific controllers, providing more granular control over request handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Package Version Update (json)\nDESCRIPTION: This snippet demonstrates the updated package versions required for Midway v3. All component and core packages should be upgraded to the 3.x version. `@midwayjs/cli` and `@midwayjs/luckyeye` are also updated.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/bootstrap\": \"^3.0.0\",\n    \"@midwayjs/core\": \"^3.0.0\",\n    \"@midwayjs/decorator\": \"^3.0.0\",\n    \"@midwayjs/koa\": \"^3.0.0\",\n    \"@midwayjs/task\": \"^3.0.0\",\n  },\n  \"devDependencies\": {\n    \"@midwayjs/cli\": \"^1.2.90\",\n    \"@midwayjs/luckyeye\": \"^1.0.0\",\n    \"@midwayjs/mock\": \"^3.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pass scaffolding parameters\nDESCRIPTION: This command passes custom parameters to the scaffolding process. If a parameter name conflicts with tool parameters, use `t_` prefix.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --bbb=ccc\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --type=koa-v3 --t_type=ccc\n```\n\n----------------------------------------\n\nTITLE: Fixing rabbitmq client mock in MidwayJS\nDESCRIPTION: This commit addresses a bug related to mocking the RabbitMQ client in MidwayJS. The fix ensures that the RabbitMQ client can be mocked effectively, enabling developers to test their applications without requiring a real RabbitMQ instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Default Import (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import a module in Javascript using `require` when it exports using `module.exports`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// js 写法\nconst path = require('path');\n```\n\n----------------------------------------\n\nTITLE: Supporting Entry File in Bootstrap\nDESCRIPTION: This commit enables support for specifying an entry file in the bootstrap process. This allows for more flexible application initialization and configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nsupport entry file in bootstrap ([#819](https://github.com/midwayjs/midway/issues/819)) ([49a5ff6](https://github.com/midwayjs/midway/commit/49a5ff662134bdd42dc3a80738b44a05138f8f7c))\n```\n\n----------------------------------------\n\nTITLE: Adding TableStore Dependency in package.json\nDESCRIPTION: This JSON snippet shows the required dependency entry in the `package.json` file for the @midwayjs/tablestore component. It specifies the package name and version.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tablestore.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/tablestore\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Singleton Invoke Request Scope\nDESCRIPTION: Addresses an issue where the request scope was not valid for singleton invocations. This ensures that singleton instances correctly access and utilize the request scope when handling requests. The fix ensures proper isolation and data consistency across requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622))\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Feature - JavaScript\nDESCRIPTION: This commit introduces RabbitMQ integration into the Midway.js framework. This feature likely involves adding new classes, configurations, and decorators for interacting with RabbitMQ message queues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\n2c03eb4f5e979d309048a11f17f7579a1d299ba1\n```\n\n----------------------------------------\n\nTITLE: Fixing supertest typings in MidwayJS\nDESCRIPTION: This commit addresses issues with supertest typings and the createFunctionApp function within the MidwayJS project. It's associated with issue #1642 and commit hash 484f4f41b3b9e889d4d285f4871a0b37fa51e73f.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Timer Event Structure in Alibaba Cloud Function Compute\nDESCRIPTION: This JSON snippet describes the structure of a Timer event in Alibaba Cloud Function Compute.  It includes the trigger time, trigger name, and payload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"triggerTime\": new Date().toJSON(),\n   \"triggerName\": 'timer',\n   \"payload\": '',\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Supertest Typings - Midway.js\nDESCRIPTION: This bug fix addresses type definitions for the supertest library and the createFunctionApp function within the Midway.js framework. Correcting the typings ensures proper type checking and reduces potential runtime errors when using these features. The commit hash provides a reference to the specific changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- supertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Logger Configuration Changes (typescript)\nDESCRIPTION: This snippet demonstrates the changes to the logger configuration in Midway v3. A new key (`midwayLogger`) is used to avoid conflicts with the egg logger. The original `midwayFeature` field is no longer used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const midwayLogger = {\n  default: {\n    level: 'warn',\n    consoleLevel: 'info'\n  },\n  clients: {\n    // custom log\n    customLoggerA: {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Prometheus HTTP Server Undefined Error in MidwayJS\nDESCRIPTION: This code snippet addresses a bug where the `http_server` property could be undefined during the `onStop` lifecycle event in the Prometheus module of a MidwayJS application. The fix ensures that the server is properly handled during the shutdown process, preventing potential errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @fileoverview Fixes a potential error where the HTTP server might be undefined during onStop.\n */\n// Bug fix for prometheus: this.http_server may undefined onStop\n// See issue [#1124](https://github.com/midwayjs/midway/issues/1124)\n// Commit: [300a3ec](https://github.com/midwayjs/midway/commit/300a3ec9d308e4f32b7b266f41370dd920145e0b)\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest typings and createFunctionApp\nDESCRIPTION: This commit fixes the typings for supertest and the createFunctionApp function within the MidwayJS framework. These fixes improve the developer experience by providing better type safety and functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Using App Logger in TypeScript\nDESCRIPTION: This code demonstrates how to use the application logger (App Logger) in a MidwayJS configuration class to log application-level information, such as startup messages, debug information, warnings, and errors.  The `@Logger()` decorator is used to inject the logger instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Logger } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Configuration()\nexport class MainConfiguration implements ILifeCycle {\n\n  @Logger()\n  logger: ILogger;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    this.logger.debug('debug info');\n    this.logger.info('启动耗时 %d ms', Date.now() - start);\n    this.logger.warn('warning!');\n\n    this.logger.error(someErrorObj);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Loggers Container - TypeScript\nDESCRIPTION: This snippet shows how to access the global loggers container using `loggers` from `@midwayjs/logger`. This container stores all created loggers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loggers } from '@midwayjs/logger';\n\nconsole.log(loggers); // 当前全局默认的日志容器\n```\n\n----------------------------------------\n\nTITLE: Defining OneToMany Relationship - TypeScript\nDESCRIPTION: This code snippet defines a OneToMany relationship between `Author` and `Photo` entities using TypeORM decorators. The `Author` entity has a `photos` property decorated with `@OneToMany`, indicating that one author can have multiple photos.  It utilizes a reverse relation with the author property from Photo entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from 'typeorm';\nimport { Column, PrimaryGeneratedColumn, OneToMany, JoinColumn } from 'typeorm';\nimport { Photo } from './entity/photo.entity';\n\n@Entity()\nexport class Author {\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany(type => Photo, photo => photo.author) // note: we will create author property in the Photo class below\n  photos: Photo[];\n}\n```\n\n----------------------------------------\n\nTITLE: Create POST request with form body parameters\nDESCRIPTION: This snippet demonstrates how to create a POST request with form body parameters using `createHttpRequest`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app)\n  .post('/param/body')\n  .type('form')\n  .send({id: '1'})\n```\n\n----------------------------------------\n\nTITLE: Updating ws Dependency in MidwayJS (v8.4.2)\nDESCRIPTION: This commit updates the 'ws' dependency to version v8.4.2. This may address bug fixes or security vulnerabilities found in previous ws versions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n**deps:** update dependency ws to v8.4.2 ([#1570](https://github.com/midwayjs/midway/issues/1570)) ([932b034](https://github.com/midwayjs/midway/commit/932b034d6fa98dc149ab876df05d081b855ce2bb))\n```\n\n----------------------------------------\n\nTITLE: Configuring TableStore Client (Single)\nDESCRIPTION: This TypeScript code demonstrates configuring a single TableStore client in the `config.default` file. It specifies the `accessKeyId`, `secretAccessKey`, `stsToken`, `endpoint`, and `instancename` properties for the client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tablestore.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  tableStore: {\n    client: {\n      accessKeyId: '<your access key id>',\n      secretAccessKey: '<your access key secret>',\n      stsToken: '<your stsToken>', /*When you use the STS authorization, you need to fill in. ref:https://help.aliyun.com/document_detail/27364.html */\n      endpoint: '<your endpoint>',\n      instancename: '<your instance name>'\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: info.html Nunjucks template\nDESCRIPTION: This HTML code defines a Nunjucks template for rendering weather information. It uses Nunjucks syntax (`{{ ... }}`) to display dynamic data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<! DOCTYPE html>\n<html>\n  <head>\n    <title> weather forecast </title>\n\t\t<style>\n      .weather_bg {\n        background-color: #0d68bc;\n        height: 150px;\n        color: #fff;\n        font-size: 12px;\n        line-height: 1em;\n        text-align: center;\n        padding: 10px;\n      }\n\n      .weather_bg label {\n        line-height: 1.5em;\n        text-align: center;\n        text-shadow: 1px 1px 1px #555;\n        background: #afdb00;\n        width: 100px;\n        display: inline-block;\n        margin-left: 10px;\n      }\n\n      .weather_bg .temp {\n        font-size: 32px;\n        margin-top: 5px;\n        padding-left: 14px;\n      }\n      .weather_bg sup {\n        font-size: 0.5em;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"weather_bg\">\n      <div>\n        <p>\n          {{city}}({{WD}}{{WS}})\n        </p>\n        <p class=\"temp\">{{temp}}<sup>℃</sup></p>\n        <p>\n          Air pressure <label >{{ AP }}</label>\n        </p>\n        <p>\n          Humidity <label >{{ SD }}</label>\n        </p>\n      </div>\n    </div>\n  </body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Updating test code imports and configuration\nDESCRIPTION: This code snippet demonstrates how to update test code imports and configurations during the migration.  It showcases the replacement of  `@midwayjs/serverless-fc-trigger` and `@midwayjs/serverless-fc-starter` with `@midwayjs/fc-starter`, the use of `mockContext` for initializing context, and demonstrates how to use `createFunctionApp` with the correct configuration.  It requires `@midwayjs/faas` and `@midwayjs/fc-starter`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_v2_upgrade_serverless_v3.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context, Framework } from '@midwayjs/faas';\nimport { mockContext } from '@midwayjs/fc-starter';\nimport { createFunctionApp } from '@midwayjs/mock';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n   it('should get result from event trigger', async () => {\n    \n     // create app\n     const app: Application = await createFunctionApp<Framework>(join(__dirname, '../'), {\n       initContext: Object.assign(mockContext(), {\n         function: {\n           name: '***',\n           handler: '***'\n         }\n       }),\n     });\n    \n     // ...\n    \n     await close(app);\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a COS Trigger with TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a COS trigger for a Midway.js serverless function using the `@ServerlessTrigger` decorator. It specifies the bucket, events to listen for (object creation), and a filter for specific file prefixes and suffixes. The handler function `handleCOSEvent` will be triggered when an event matching these criteria occurs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_cos.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Provide,\n  Inject,\n  ServerlessTrigger,\n  ServerlessTriggerType,\n} from '@midwayjs/decorator';\nimport { Context, SCF } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloTencentService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.OS, {\n    bucket: 'cli-appid.cos.ap-beijing.myqcloud.com',\n    events: 'cos:ObjectCreated:*',\n    filter: {\n      prefix: 'filterdir/',\n      suffix: '.jpg',\n    },\n  })\n  async handleCOSEvent(event: SCF.COSEvent) {\n    // xxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing OSS Triggers (MidwayJS, TypeScript)\nDESCRIPTION: This code illustrates testing OSS triggers.  It gets the class instance using `getServerlessInstance` and then calls the handler function directly with mock OSS event data created with `mockOSSEvent` from `@midwayjs/fc-starter`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\nimport { mockOSSEvent } from '@midwayjs/fc-starter';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  it('should get result from oss trigger', async () => {\n    // ...\n    const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n    expect(await instance.handleOSSEvent(mockOSSEvent())).toEqual('hello world');\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Method Decorator with createCustomMethodDecorator (TypeScript)\nDESCRIPTION: Defines a custom method decorator `LoggingTime` using `createCustomMethodDecorator` from `@midwayjs/core`. This decorator is associated with a unique key `LOGGING_KEY` and can accept parameters like `formatUnit` to customize its behavior. It returns a MethodDecorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/logging.decorator.ts\nimport { createCustomMethodDecorator } from '@midwayjs/core';\n\n// Unique id inside the decorator\nexport const LOGGING_KEY = 'decorator:logging_key';\n\nexport function LoggingTime(formatUnit = 'ms'): MethodDecorator {\n\t// We pass a parameter that modifies the display format\n  return createCustomMethodDecorator(LOGGING_KEY, { formatUnit });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Log Output (single logger)\nDESCRIPTION: This code snippet shows how to configure JSON log output for a single logger by enabling the json transport on the appLogger client. This configuration is part of the midwayLogger configuration in a MidwayConfig object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    default: {\n      // ...\n    },\n    clients: {\n      appLogger: {\n        transports: {\n          json: {\n            // ...\n          }\n        }\n      }\n    }\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Installing Database Driver (MySQL Example)\nDESCRIPTION: This command installs the MySQL2 driver for Sequelize.  This driver is needed to connect to a MySQL database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# for MySQL or MariaDB，也可以使用 mysql2 替代\nnpm install mysql --save\nnpm install mysql2 --save\n```\n\n----------------------------------------\n\nTITLE: Fixing Cache Typings in MidwayJS\nDESCRIPTION: This code snippet describes a bug fix related to cache typings within the MidwayJS framework. The commit associated with this fix is identified by the hash 8db4e698e534da3eb7b4a37eeb7485b4fe34b977. This fix was included in version 3.3.12 of the @midwayjs/cache package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\ncache typings ([#2018](https://github.com/midwayjs/midway/issues/2018)) ([8db4e69](https://github.com/midwayjs/midway/commit/8db4e698e534da3eb7b4a37eeb7485b4fe34b977))\n```\n\n----------------------------------------\n\nTITLE: Passing Constructor Parameters Dynamically to Instances (TypeScript)\nDESCRIPTION: This snippet demonstrates how to pass constructor parameters when dynamically retrieving an instance using `getAsync`.  This allows customization of the instance creation process with specific values passed to the constructor.  Note that only fixed values can be passed; instances cannot be injected as constructor parameters in this manner.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nclass UserService {\n  constructor(private readonly type) {}\n\n  getUser() {\n    // this.type => student\n  }\n}\n\n// The global container is obtained as a singleton.\nconst userSerivce = await applicationContext.getAsync(UserService, [\n  'student', // constructor parameters, will apply to the constructor\n]);\n\n// Request scope container, get the request scope instance.\nconst userSerivce = await ctx.requestContext.getAsync(UserService, [\n  'student'\n]);\n```\n\n----------------------------------------\n\nTITLE: Fixing OTEL Test in MidwayJS\nDESCRIPTION: This commit addresses a bug in the OTEL (OpenTelemetry) test suite within the MidwayJS framework. Details of the fix are available via the linked commit hash.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/otel/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\notel test ([#1837](https://github.com/midwayjs/midway/issues/1837)) ([36fa998](https://github.com/midwayjs/midway/commit/36fa998c077551e3ce9e0f0fda89d8bf1a3f0be7))\n```\n\n----------------------------------------\n\nTITLE: Fix COS Config Definition - Midway.js\nDESCRIPTION: This bug fix addresses the configuration definition for COS (Cloud Object Storage) and updates the 3.x documentation within the Midway.js framework. The fix ensures the COS configuration is correctly defined and that the documentation accurately reflects the framework's functionality, improving the usability of the COS integration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- cos config definition & 3.x doc update ([#1515](https://github.com/midwayjs/midway/issues/1515)) ([0ac7ac5](https://github.com/midwayjs/midway/commit/0ac7ac5805b7ab8873f8792fc1712a74e3223172))\n```\n\n----------------------------------------\n\nTITLE: CMQ Event Structure Example in JSON\nDESCRIPTION: This JSON snippet represents the structure of a CMQ event that is passed to the serverless function when triggered. It contains an array of records, where each record has a CMQ object that contains information such as the topic type, owner, name, subscription, publish time, message ID, request ID, message body, and message tag. This structure is defined by the `SCF.CMQEvent` type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_cmq.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Records\": [\n    {\n      \"CMQ\": {\n        \"type\": \"topic\",\n        \"topicOwner\": 1567,\n        \"topicName\": \"testtopic\",\n        \"subscriptionName\": \"xxxxxx\",\n        \"publishTime\": \"1970-01-01T00:00:00.000Z\",\n        \"msgId\": \"123345346\",\n        \"requestId\": \"123345346\",\n        \"msgBody\": \"Hello from CMQ!\",\n        \"msgTag\": \"tag1,tag2\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Distributed Tasks\nDESCRIPTION: Configures the Redis connection details for distributed tasks in the config.default.ts file.  The `redis` property specifies the connection URL or configuration object for Redis, which is used by the bull library for task queuing. The `prefix` ensures task keys are namespaced in Redis. `defaultJobOptions` configures timezone for task scheduler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const taskConfig = {\n  redis: `redis://127.0.0.1:32768`, //任务依赖redis，所以此处需要加一个redis\n  prefix: 'midway-task', // 这些任务存储的key，都是midway-task开头，以便区分用户原有redis里面的配置。\n  defaultJobOptions: {\n    repeat: {\n      tz: 'Asia/Shanghai', // Task等参数里面设置的比如（0 0 0 * * *）本来是为了0点执行，但是由于时区不对，所以国内用户时区设置一下。\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Add Guard Feature - Midway.js\nDESCRIPTION: This feature introduces a 'guard' mechanism to the Midway.js framework. Guards are used for authorization and authentication, potentially allowing for control over access to certain resources or functionalities. No specific code is provided, but the commit hash is available.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- add guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Adding Locals Support and Case in MidwayJS View\nDESCRIPTION: This feature adds support for adding locals and cases to the @midwayjs/view package. The implementation is associated with commit fc373d9ac4d2ae82c90cd476292012fae2f5fc2d.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Local Direct Exchange Testing\nDESCRIPTION: This TypeScript snippet demonstrates local testing of a direct exchange in MidwayJS using `@midwayjs/mock`. It configures a producer, asserts a direct exchange, sends a message with a routing key, and asserts message reception based on the routing key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * direct 类型的消息，根据 routerKey 做定向过滤\n  */\nconst manager = await createRabbitMQProducer('tasks-direct', {\n  isConfirmChannel: false,\n  mock: false,\n  url: 'amqp://localhost',\n});\n\n// Name of the exchange\nconst ex = 'direct_logs';\n// Write a message\nconst msg = \"Hello World!\";\n\n// 声明交换机\nmanager.assertExchange(ex, 'direct', { durable: false }) // 'fanout' will broadcast all messages to all the queues it knows\n\nconst app = await creatApp('base-app-direct', {\n  url:  'amqp://localhost',\n  reconnectTime: 2000\n});\n\n// 这里指定 routerKey，发送到交换机\nmanager.sendToExchange(ex, 'direct_key', Buffer.from(msg))\n\n// 校验结果\n\nawait manager.close();\nawait close(app);\n```\n\n----------------------------------------\n\nTITLE: Add Guard Feature\nDESCRIPTION: This feature introduces a guard mechanism to the MidwayJS framework. This guard enhances security and access control by allowing developers to define rules that determine whether a user or process is authorized to access certain resources or functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typeorm/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: JSONP Configuration - TypeScript\nDESCRIPTION: This TypeScript code shows how to configure JSONP in `src/config/config.default.ts`. It sets the callback function name to 'jsonp' and limits the callback length to 512 characters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cross_domain.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  jsonp: {\n    callback: 'jsonp',\n    limit: 512\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing authenticate error throwing\nDESCRIPTION: This commit fixes an issue where an error was not being thrown during authentication. This addresses issue #2141. The commit hash is 730a28209162bb18b989cb783b54936a4bb747e0.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Enable Passport Component\nDESCRIPTION: This TypeScript code snippet shows how to enable the @midwayjs/passport component within a MidwayJS application's configuration file. It imports the passport module and adds it to the imports array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { join } from 'path';\nimport { ILifeCycle } from '@midwayjs/core';\nimport { Configuration } from '@midwayjs/core';\nimport * as passport from '@midwayjs/passport';\n\n@Configuration({\n  imports: [\n    // ...\n    passport,\n  ],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class MainConfiguration implements ILifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Fixing import directory error in Midway Mock\nDESCRIPTION: This commit fixes an issue where the import directory was incorrectly configured within the midway-mock package. The fix ensures that modules are imported from the correct location, resolving import-related errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_49\n\nLANGUAGE: None\nCODE:\n```\nf5df1de\n```\n\n----------------------------------------\n\nTITLE: Axios Dependency Configuration in package.json\nDESCRIPTION: This snippet shows how to add the `@midwayjs/axios` package as a dependency in `package.json`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/axios\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Mongoose Remote Configuration Bug in Midway.js\nDESCRIPTION: This commit resolves a bug related to remote configuration in the Mongoose integration within Midway.js. This ensures that the Mongoose connection is properly configured when using remote configuration sources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nmongoose remote config bug ([#1399](https://github.com/midwayjs/midway/issues/1399)) ([e37602d](https://github.com/midwayjs/midway/commit/e37602d54ae503aeee48afa320709aae3d18b329))\n```\n\n----------------------------------------\n\nTITLE: Install Prometheus Socket.IO dependency\nDESCRIPTION: Installs the @midwayjs/prometheus-socket-io package. This package is used to monitor socket.io data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/prometheus-socket-io@3 --save\n```\n\n----------------------------------------\n\nTITLE: Using MidwayDecoratorService to Register Decorator Handler\nDESCRIPTION: This snippet demonstrates the usage of `MidwayDecoratorService` for registering decorator handlers, it's about how to register property decorator implementation, method decorator implementation and parameter decorator implementation. \nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayDecoratorService, Inject, Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Get('/')\n  async home() {\n    // this.decoratorService.registerPropertyHandler(/* omitted */);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope Validity in MidwayJS\nDESCRIPTION: This commit fixes an issue where the request scope was not valid when invoking a singleton instance in MidwayJS. It ensures that the request context is correctly propagated and available within singleton-scoped components. The commit hash is f97c0632107b47cf357d17774a4e4bb5233bba57.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Serverless Midway.js script configuration with mwtsc\nDESCRIPTION: This JSON snippet shows an example configuration for Serverless environments using `mwtsc` in the \"scripts\" section of a `package.json` file. It uses `cross-env` to set the environment variable.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"scripts\": {\n     \"dev\": \"cross-env NODE_ENV=local mwtsc --watch --run @midwayjs/mock/function\",\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Swagger UI JSON Path\nDESCRIPTION: Addresses an issue where the JSON path in Swagger UI was incorrect. This fix ensures that the Swagger UI correctly references and displays the API documentation in JSON format. This is important for API testing and documentation purposes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860))\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus Socket.IO Support\nDESCRIPTION: This feature introduces support for Prometheus metrics within the Socket.IO context in MidwayJS. It allows developers to monitor Socket.IO applications using Prometheus, providing insights into connection metrics and other relevant data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Configure Favicon\nDESCRIPTION: This TypeScript code configures a favicon for the Koa application using the `siteFile` component. It reads the favicon file from the file system and provides it as a Buffer.  This middleware automatically serves the favicon.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  siteFile: {\n    favicon: readFileSync(join(__dirname, '../static/fav.ico'))\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Prometheus labels\nDESCRIPTION: Configures labels for Prometheus metrics in the config.default.ts file. These labels can be used to classify and filter metrics, such as distinguishing between different applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  prometheus: {\n    labels: {\n      APP_NAME: 'demo_project',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Authentication in Swagger (MidwayJS, TypeScript)\nDESCRIPTION: This snippet configures Swagger to use a custom authentication method. It defines the `authType` as `'custom'` within the `swagger` configuration in `config.default.ts`. Requires the `@midwayjs/swagger` and `@midwayjs/core` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'custom',\n      name: 'mycustom'\n      // ...\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Flattened Router Table\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all routes that can be registered to HTTP services using the `getFlattenRouterTable` method of `MidwayWebRouterService`. The routes are sorted from highest to lowest priority. It returns a `Promise` that resolves to an array of `RouterInfo` objects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync getFlattenRouterTable(): Promise<RouterInfo[]>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await this.webRouterService.getFlattenRouterTable();\n```\n\n----------------------------------------\n\nTITLE: Function Result (text/html) - Alibaba Cloud API Gateway\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed within the serverless function when the Content-Type is text/html and '入参透传' is enabled on Alibaba Cloud API Gateway. The body is a string containing the decoded base64 data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // '{\"c\":\"b\"}'   => string\n```\n\n----------------------------------------\n\nTITLE: Fixing mockClassFunction missing in MidwayJS\nDESCRIPTION: This commit fixes a bug where the `mockClassFunction` method was missing in MidwayJS. The fix makes sure that the `mockClassFunction` method is available, which is used for mocking class functions during testing or development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Declare Passport Dependencies in package.json\nDESCRIPTION: This JSON snippet demonstrates how to declare @midwayjs/passport and associated strategy dependencies in the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/passport\": \"^3.0.0\",\n    // 本地策略\n    \"passport-local\": \"^1.0.0\"\n    // Jwt 策略\n    \"passport-jwt\": \"^4.0.0\",\n    // Github 策略\n    \"passport-github\": \"^1.1.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // 本地策略\n    \"@types/passport-local\": \"^1.0.34\",\n    // Jwt 策略\n    \"@types/passport-jwt\": \"^3.0.6\",\n    // Github 策略\n    \"@types/passport-github\": \"^1.1.7\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a BullMQ Job in TypeScript\nDESCRIPTION: This snippet shows how to execute a job within a BullMQ queue in MidwayJS. It retrieves a queue instance using `bullmqFramework.getQueue('test')` and then uses the `runJob` method to add a job to the queue with specified data. This triggers the execution of the task processor.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2025-01-14-release-3.20.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 执行任务\nconst testQueue = this.bullmqFramework.getQueue('test');\nawait testQueue?.runJob({\n  name: 'harry'\n});\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Attributes on Context\nDESCRIPTION: This code snippet demonstrates how to use `this.ctx.setAttr()` and `this.ctx.getAttr()` to store and retrieve temporary data on the Context object. This is useful for sharing data within the scope of a single request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.setAttr('abc', {\n  a: 1\n  B: 2\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = this.ctx.getAttr('abc');\nconsole.log(value);\n// { a: 1, B: 2}\n```\n\n----------------------------------------\n\nTITLE: Manually Clear All Queue Jobs\nDESCRIPTION: This TypeScript snippet shows how to manually clear all jobs from a queue using the `obliterate` method. This is useful for cleaning up queues during development or in specific deployment scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, App, Inject } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { join } from 'path';\nimport * as bull from '@midwayjs/bull';\n\n@Configuration({\n  imports: [koa, bull],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  bullFramework: bull.Framework;\n\n  async onReady() {\n    // 在这个阶段，装饰器队列还未创建，使用 API 提前手动创建队列，装饰器会复用同名队列\n    const queue = this.bullFramework.createQueue('user');\n    // 通过队列手动执行清理\n    await queue.obliterate({ force: true });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting response header using SetHeader\nDESCRIPTION: This snippet shows how to set a response header using the `SetHeader` function from `@midwayjs/hooks`. It sets the 'X-Powered-By' header to 'Midway'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  SetHeader,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get(),\n  SetHeader('X-Powered-By', 'Midway'),\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fixing Passport Compatibility in MidwayJS\nDESCRIPTION: This commit addresses compatibility issues with Passport authentication within the MidwayJS framework. It is associated with issue #2133 and identified by commit hash 2975e4f5b6cf8cbcd42cbfb8ce3e08633dbba383.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npassport compatible code ([#2133](https://github.com/midwayjs/midway/issues/2133)) ([2975e4f](https://github.com/midwayjs/midway/commit/2975e4f5b6cf8cbcd42cbfb8ce3e08633dbba383))\n```\n\n----------------------------------------\n\nTITLE: Disable Default Custom Domain in Serverless YAML\nDESCRIPTION: This YAML snippet demonstrates how to disable the default automatically generated domain for a Midway FaaS application.  Setting `customDomain` to `false` allows for the configuration of a custom domain.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_http.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: midway-faas-examples\n\nprovider:\n  name: aliyun\n\ncustom:\n  customDomain: false\n```\n\n----------------------------------------\n\nTITLE: Adding Event Name Arguments\nDESCRIPTION: This bug fix adds event name arguments, likely to an event emitter or listener mechanism. This enhancement provides more context for event handlers, enabling more specific and targeted event handling logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Bug fix: Singleton invoke request scope validity\nDESCRIPTION: This commit fixes a bug where the request scope was not valid during singleton invocation. It ensures that the request context is correctly maintained when singleton instances are accessed. The fix is identified by commit hash f97c063.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cross-domain/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Update prom-client Dependency - Midway.js\nDESCRIPTION: This update bumps the dependency prom-client to v14 within the Midway.js framework.  Updating dependencies ensures compatibility and access to the latest features and security patches provided by the prom-client library. This likely affects the prometheus package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **deps:** update dependency prom-client to v14 ([#1486](https://github.com/midwayjs/midway/issues/1486)) ([87b6678](https://github.com/midwayjs/midway/commit/87b6678b179e239f8dbe5d0adb935df2c713d94b))\n```\n\n----------------------------------------\n\nTITLE: Fixing Express Routing Middleware in Midway.js\nDESCRIPTION: This commit fixes an issue where the Express routing middleware was only taking effect at the controller level. This ensures that middleware functions are applied correctly to routes defined within the Midway.js application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nexpress routing middleware takes effect at the controller level ([#1364](https://github.com/midwayjs/midway/issues/1364)) ([b9272e0](https://github.com/midwayjs/midway/commit/b9272e0971003443304b0c53815be31a0061b4bd))\n```\n\n----------------------------------------\n\nTITLE: Fixing Node v16 Typings in MidwayJS\nDESCRIPTION: This code snippet addresses an issue related to TypeScript typings for Node.js version 16 within the MidwayJS framework. The fix ensures that the TypeScript compiler correctly understands and validates code targeting Node.js v16, preventing potential type-related errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Bug Fixes\n\n//- node v16 typings ([#1269](https://github.com/midwayjs/midway/issues/1269)) ([e3443b5](https://github.com/midwayjs/midway/commit/e3443b58fc1faddadf1e95dd03a2f319410941bb))\n```\n\n----------------------------------------\n\nTITLE: Configuring Busboy in asyncIterator Mode - TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the busboy middleware in a MidwayJS application to use the asynchronous iterator mode for handling file uploads. This mode enables streaming uploads of multiple files in a single request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-09-22-release-3.18.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  busboy: {\n    mode: 'asyncIterator',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Alibaba API Gateway Event Example (Input Parameter Mapping)\nDESCRIPTION: This JSON represents the event structure received by the serverless function when Alibaba Cloud API Gateway is configured with input parameter mapping. The `body` is base64 encoded. The headers usually contain the `content-type` are not forwarded to the function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"eyJjIjoiYiJ9 \",\n  \"headers\": {\n    \"X-Ca-Dashboard-Action\": \"DEBUG \",\n    \"X-Ca-Dashboard-Uid\": \"111111\",\n    \"X-Ca-Dashboard-Role\": \"USER\"\n  },\n  \"httpMethod\": \"POST \",\n  \"isBase64Encoded\": true\n  \"path\": \"/api/321 \",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a primary key column\nDESCRIPTION: Defines a primary key column using the `@PrimaryColumn` decorator. Every entity must have at least one primary key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// entity/photo.ts\nimport { EntityModel } from '@midwayjs/orm';\nimport { Column, PrimaryColumn } from 'typeorm';\n\n@EntityModel()\nexport class Photo {\n  @PrimaryColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column()\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Provider Wrapper without Prefix\nDESCRIPTION: Illustrates how to inject a method exposed using `providerWrapper` within the same component, without needing to specify the component's namespace. The component injects and uses the `contextHandler` function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Controller('/user')\nexport class UserController {\n  @Inject()\n  contextHandler; // 这里注入不需要组件前缀，会自动处理\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in Midway.js\nDESCRIPTION: This commit introduces the 'guard' feature to the Midway.js framework. Guards are used for access control and authorization, ensuring that only authorized users can access specific resources or functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5\n```\n\n----------------------------------------\n\nTITLE: Using MQTT Producer Factory\nDESCRIPTION: This TypeScript code demonstrates how to use the `MqttProducerFactory` to inject a specific MQTT publisher instance by name. This allows for using multiple configured MQTT clients.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/user.service.ts\nimport { Provide, Inject } from '@midwayjs/core';\nimport { MqttProducerFactory, DefaultMqttProducer } from '@midwayjs/mqtt';\n\n@Provide()\nexport class UserService {\n  \n   @InjectClient(MqttProducerFactory, 'pub2')\n   producer: DefaultMqttProducer;\n  \n   async invoke() {\n     // ...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Favicon Settings - TypeScript\nDESCRIPTION: This snippet configures the `favicon.ico` for a MidwayJS application using Egg.js. The `siteFile` configuration maps the `/favicon.ico` route to a file, typically `favicon.png`. The `readFileSync` function from the `fs` module is used to read the file content.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  siteFile: {\n    '/favicon.ico': readFileSync(join(__dirname, 'favicon.png'))\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Compatible Version with yarn\nDESCRIPTION: This command upgrades all Midway dependencies to the latest compatible version using yarn. The `-m` flag triggers the upgrade process.  It first adds the `midway-version` as a dev dependency and then executes the command.  It then can be used with `-w` to write changes to `package.json` and `yarn.lock`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/version_check.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add midway-version@latest\n$ yarn midway-version -m\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn midway-version -m -w\n```\n\n----------------------------------------\n\nTITLE: Function Result (string) - Alibaba & Tencent Cloud HTTP Trigger\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed when it is sent as a raw string. The `ctx.request.body` will be the received string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // \"bbb\"   => string\n```\n\n----------------------------------------\n\nTITLE: Casbin Redis Adapter and Watcher Configuration - Typescript\nDESCRIPTION: This code illustrates how to configure the Casbin Redis adapter and watcher in MidwayJS, utilizing the `@midwayjs/casbin-redis-adapter` package. It shows how to define multiple Redis clients (one for publishing and one for subscribing) and then use them to create the adapter and watcher instances. It requires `@midwayjs/core` and `@midwayjs/casbin-redis-adapter`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-12-13-release-3-9.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\nimport { createAdapter, createWatcher } from '@midwayjs/casbin-redis-adapter';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    keys: '123456',\n    redis: {\n      clients: {\n        'node-casbin-official': {\n          host: '127.0.0.1',\n          port: 6379,\n          password: '',\n          db: '0',\n        },\n        'node-casbin-sub': {\n          host: '127.0.0.1',\n          port: 6379,\n          password: '',\n          db: '0',\n        }\n      }\n    },\n    casbin: {\n      // ...\n      policyAdapter: createAdapter({\n        clientName: 'node-casbin-official'\n      }),\n      policyWatcher: createWatcher({\n        pubClientName: 'node-casbin-official',\n        subClientName: 'node-casbin-sub',\n      })\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing tsconfig-paths/register (TypeScript)\nDESCRIPTION: This TypeScript code imports and registers `tsconfig-paths/register`. It allows the application to resolve module paths defined in the `tsconfig.json` file during development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport 'tsconfig-paths/register';\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI with renderSwaggerUIRemote in TypeScript\nDESCRIPTION: This TypeScript code shows how to configure Swagger UI using `renderSwaggerUIRemote` from `@midwayjs/swagger`. This method renders the UI using resources from a CDN, such as unpkg.com. It is used when the `swagger-ui-dist` package is not installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { renderSwaggerUIRemote } from '@midwayjs/swagger';\n\nexport default {\n  // ...\n  swagger: {\n    swaggerUIRender: renderSwaggerUIRemote,\n    swaggerUIRenderOptions: {\n      // ...\n    }\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Start application using egg-scripts with parameters\nDESCRIPTION: This command shows how to start an EggJS application using `egg-scripts` with custom parameters. Parameters such as port, daemon mode, and process title can be configured.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ egg-scripts start --port=7001 --daemon --title=egg-server-showcase\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for mwts\nDESCRIPTION: This JSON snippet demonstrates the default ESLint configuration for a Midway.js project using mwts. It extends the mwts ESLint rules, ignores specified patterns (node_modules, dist, test, jest config and interface files) and configures the environment for Jest testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/mwts.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extends\": \"./node_modules/mwts/\",\n  \"ignorePatterns\": [\"node_modules\", \"dist\", \"test\", \"jest.config.js\", \"interface.ts\"],\n  \"env\": {\n    \"jest\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting container method in Midway Mock\nDESCRIPTION: This commit attempts to export the container method within the midway-mock package. This may enable more direct access and control over container mocking functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_57\n\nLANGUAGE: None\nCODE:\n```\n7921cdb\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Instance Name (TypeScript)\nDESCRIPTION: This snippet illustrates how to configure and change the name of the default instance using `defaultClientName` in the `httpClient` configuration. This configuration allows specifying an alternate default instance within the ServiceFactory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  clients: {\n    default: {\n      baseUrl: ''\n    },\n    default2: {\n      baseUrl: ''\n    }\n  },\n  defaultClientName: 'default2',\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPClientService } from './service/httpClientServiceFactory';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  httpClientService: HTTPClientService;\n\n  async invoke() {\n\t\t// this.httpClientService 中指向的是 default2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy Settings\nDESCRIPTION: This code snippet shows how to configure the HTTP proxy settings within your MidwayJS application. It defines properties such as the host, match (regular expression for matching URLs), and target (the URL to which the request will be proxied). The `$1` in the target URL represents the captured group from the match regular expression.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/http-proxy/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const httpProxy = {\n  host: 'http://127.0.0.1',\n  match: /\\/assets\\/(.*)/,\n  target: 'http://127.0.0.1/$1',\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Conflict Check Feature in MidwayJS\nDESCRIPTION: This commit introduces a conflict check feature to the MidwayJS framework. The conflict check feature prevents multiple components or modules from defining the same route or resource, avoiding conflicts during runtime. This enhances the stability and predictability of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n673470a14e3f5a159bf7a2f1e56cbf27cc3b6b21\n```\n\n----------------------------------------\n\nTITLE: Saving Tenant Information in Middleware\nDESCRIPTION: Implements a middleware to set the tenant information in the request context using `TenantManager`. The `setCurrentTenant` method is used to store the tenant data. This is a typical pattern of setting tenant information in the request scope.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tenant.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TenantManager } from '@midwayjs/tenant';\nimport { Middleware, Inject } from '@midwayjs/core';\n\n@Middleware()\nclass TenantMiddleware {\n   @Inject()\n   tenantManager: TenantManager;\n\n   resolve() {\n     return async(ctx, next) => {\n       //Set tenant information in the request link\n       await this.tenantManager.setCurrentTenant({\n         id: '123',\n         name: 'my tenant'\n       });\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Midway.js Development Server with Debugging (v1/v2)\nDESCRIPTION: This code snippet shows how to start the Midway.js development server with debugging enabled, which can help identify performance bottlenecks during the startup process. It includes commands for both Midway v1 and v2. The `--ts` flag enables TypeScript support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/midway_slow_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// midway v1\ncross-env DEBUG=midway* NODE_ENV=local midway-bin dev --ts\n\n// midway v2\ncross-env NODE_DEBUG=midway* NODE_ENV=local midway-bin dev --ts\n```\n\n----------------------------------------\n\nTITLE: Example OSS Event Structure (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an OSSEvent object received by an OSS-triggered function in Alibaba Cloud Function Compute. It includes details about the event, the OSS bucket, and the object that triggered the event.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\": [\n    {\n      \"eventName\": \"ObjectCreated:PutObject\",\n      \"eventSource\": \"acs:oss\",\n      \"eventTime\": \"2017-04-21T12:46:37.000Z\",\n      \"eventVersion\": \"1.0\",\n      \"oss\": {\n        \"bucket\": {\n          \"arn\": \"acs:oss:cn-shanghai:123456789:bucketname\",\n          \"name\": \"testbucket\",\n          \"ownerIdentity\": \"123456789\",\n          \"virtualBucket\": \"\"\n        },\n        \"object\": {\n          \"deltaSize\": 122539,\n          \"eTag\": \"688A7BF4F233DC9C88A80BF985AB7329\",\n          \"key\": \"image/a.jpg\",\n          \"size\": 122539\n        },\n        \"ossSchemaVersion\": \"1.0\",\n        \"ruleId\": \"9adac8e253828f4f7c0466d941fa3db81161e853\"\n      },\n      \"region\": \"cn-shanghai\",\n      \"requestParameters\": {\n        \"sourceIPAddress\": \"140.205.128.221\"\n      },\n      \"responseElements\": {\n        \"requestId\": \"58F9FF2D3DF792092E12044C\"\n      },\n      \"userIdentity\": {\n        \"principalId\": \"123456789\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Session in @midwayjs/web\nDESCRIPTION: This code shows how to delete a session by setting `ctx.session` to null. This effectively clears the session data for the current user. Dependencies: @midwayjs/web.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nctx.session = null;\n```\n\n----------------------------------------\n\nTITLE: Git Workflow for Contributing Code Changes (Bash)\nDESCRIPTION: This snippet outlines the standard git workflow for contributing code changes to the Midway framework. It includes creating a new branch, installing dependencies, building the project, running tests, committing changes, and pushing the branch to origin.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 创建新分支\n$ git checkout -b branch-name\n# 安装依赖\n$ npm i\n# 构建项目\n$ npm run build\n\n# 开发并执行测试\n$ npm test\n\n$ git add . # git add -u to delete files\n$ git commit -m \"fix(role): role.use must xxx\"\n$ git push origin branch-name\n```\n\n----------------------------------------\n\nTITLE: Initializing Rax Mini Program\nDESCRIPTION: This command initializes a Rax mini program project. It leverages the `npm init rax` command to create a new project with the necessary configurations for a mini program integrated with cloud development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_miniprogram.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init rax\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Full-Stack Application (Midway.js, TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure Vite for a full-stack Midway.js application. It imports the `react` plugin from `@vitejs/plugin-react` and the `defineConfig` function from `@midwayjs/hooks-kit`.  It then exports a default configuration object that uses `defineConfig` to configure Vite with the React plugin.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/config.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport react from '@vitejs/plugin-react';\nimport { defineConfig } from '@midwayjs/hooks-kit';\n\nexport default defineConfig({\n  vite: {\n    plugins: [react()]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Import Consul Module (TypeScript)\nDESCRIPTION: Imports the Consul module into the MidwayJS application. This allows the application to use Consul for service registration and discovery. The configuration class imports the consul module and defines import configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/usage.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as consul from '@midwayjs/consul'\n\n@Configuration({\n  imports: [\n    consul\n  ],\n  importConfigs: [join(__dirname, 'config')]\n})\nexport class ContainerConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Initialize OpenTelemetry SDK in tel.js (JavaScript)\nDESCRIPTION: Initializes the OpenTelemetry SDK within a Midway.js application when using egg-scripts. The code configures the SDK to use a console span exporter and includes auto-instrumentations. It is loaded via the `--require` flag in egg-scripts. It also shuts down the SDK gracefully on SIGTERM.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst process = require('process');\nconst { NodeSDK, node, resources } = require('@opentelemetry/sdk-node');\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\n\n// Initialize an open-telemetry SDK\nconst sdk = new NodeSDK({\n  // Configure the current export method. For example, one output to the console is configured here, or other Exporter can be configured, such as Jaeger.\n  traceExporter: new node.ConsoleSpanExporter(),\n  // Some monitoring modules provided by default are configured here, such as http module, etc.\n  instrumentations: [getNodeAutoInstrumentations()]\n});\n\n// Initialize SDK\nsdk.start()\n\n\n// When the process is closed, data collection is closed at the same time\nprocess.on('SIGTERM', () => {\n  sdk.shutdown()\n    .then(() => console.log('Tracing terminated'))\n    .catch((error) => console.log('Error terminating tracing', error))\n    .finally(() => process.exit(0));\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for gRPC Service using createGRPCConsumer\nDESCRIPTION: This code snippet demonstrates how to write unit tests for a gRPC service using the `createGRPCConsumer` method provided by `@midwayjs/grpc`. This method allows for real-time calling of clients in the testing environment. It creates a gRPC consumer, calls a service method (`sayHello`), and asserts the result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\nimport { Framework, createGRPCConsumer } from '@midwayjs/grpc';\nimport { join } from 'path';\nimport { helloworld } from '../src/domain/helloworld';\n\ndescribe('test/index.test.ts', () => {\n\n  it('should create multiple grpc service in one server', async () => {\n    const baseDir = join(__dirname, '../');\n\n    // Create Service\n    const app = await createApp<Framework>();\n\n    // Call service\n    const service = await createGRPCConsumer<helloworld.GreeterClient>({\n      package: 'helloworld',\n      protoPath: join(baseDir, 'proto', 'helloworld.proto'),\n      url: 'localhost:6565'\n    });\n\n    const result = await service.sayHello().sendMessage({\n      name: 'harry'\n    });\n\n    expect(result.message).toEqual('Hello harry');\n    await close(app);\n  });\n\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation with maxFiles (string)\nDESCRIPTION: This code snippet shows how to configure log rotation by specifying the maximum number of days to keep log files.  The maxFiles property is set to '3d', indicating that log files older than 3 days should be removed. This configuration is part of the midwayLogger configuration in a MidwayConfig object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        file: {\n          maxFiles: '3d',\n        },\n        error: {\n          maxFiles: '3d',\n        },\n      }\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Install project dependencies\nDESCRIPTION: These commands install the dependencies for the example project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Fixing Redis ON Method Missing\nDESCRIPTION: This commit resolves an issue where the 'on' method was missing from the Redis client in MidwayJS. This fix restores the 'on' method, allowing developers to listen for events emitted by the Redis client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Get HTTP Request Context in Simple Mode (GET)\nDESCRIPTION: This code snippet demonstrates how to get the HTTP request context using useContext() in a simple mode GET request in Midway Hooks. It returns the request path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/file-route.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from '@midwayjs/hooks';\n\nexport async function getPath() {\n  // Get HTTP request context by Hooks\n  const ctx = useContext();\n  return ctx.path;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code in MidwayJS\nDESCRIPTION: This code snippet applies code formatting changes to the MidwayJS codebase. Code formatting improves readability, consistency, and maintainability, making it easier for developers to understand and collaborate on the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bug Fixes\n\n//- format ([#997](https://github.com/midwayjs/midway/issues/997)) ([456cc14](https://github.com/midwayjs/midway/commit/456cc14513bdb000d1aa3130e9719caf7a8a803f))\n```\n\n----------------------------------------\n\nTITLE: Typegoose Component Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add `@midwayjs/typegoose` as a dependency in the `package.json` file. You should also include the necessary mongoose dependencies. This allows the MidwayJS application to access MongoDB using Typegoose.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    // 组件\n    \"@midwayjs/typegoose\": \"^3.0.0\",\n    // 上一节中的 mongoose 依赖\n  },\n  \"devDependencies\": {\n    // 上一节中的 mongoose 依赖\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Config Export in MidwayJS\nDESCRIPTION: This code snippet addresses a bug related to the config export default case within the MidwayJS framework, providing the issue number and commit hash for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/code-dye/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- config export default case ([#2089](https://github.com/midwayjs/midway/issues/2089)) ([15c66d8](https://github.com/midwayjs/midway/commit/15c66d894e42bf488e3cb74084a1ecb17a42752b))\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationship in TypeORM\nDESCRIPTION: This code defines a many-to-many relationship between `Album` and `Photo` entities using TypeORM decorators. It specifies the `@EntityModel` decorator for the `Album` class, along with `@PrimaryGeneratedColumn` and `@Column` decorators for the `id` and `name` properties. The `@ManyToMany` decorator defines the relationship with the `Photo` entity, and `@JoinTable` indicates that this side of the relationship is the owner.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityModel } from '@midwayjs/orm';\nimport { PrimaryGeneratedColumn, Column, ManyToMany, JoinTable } from 'typeorm';\n\n@EntityModel()\nexport class Album {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @ManyToMany((type) => Photo, (photo) => photo.albums)\n  @JoinTable()\n  photos: Photo[];\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Koa Framework with Middleware, Filters and Context in Typescript\nDESCRIPTION: This snippet shows how to inject and extend the `@midwayjs/koa` framework within a custom component. It injects the koa.Framework, adds middleware and filters using `useMiddleware` and `useFilter`, and extends the Koa context with a custom property 'user'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/component_development.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n  namespace: 'myKoa',\n  imports: [koa]\n})\nexport class MyKoaConfiguration {\n  @Inject()\n  framework: koa.Framework;\n\n  async onReady() {\n    // 添加中间件，koa 中的 app.useMiddleware 其实代理了 framework 上的方法\n    this.framework.useMiddleware(/* ... */);\n\n    // 添加过滤器，koa 中的 app.useFilter 其实代理了 framework 上的方法\n    this.framework.useFilter(/* ... */);\n\n    // koa 自身的扩展能力，比如扩展 context\n    const app = this.framework.getApplication();\n    Object.defineProperty(app.context, 'user', {\n      get() {\n        // ...\n        return 'xxx';\n      },\n      enumerable: true,\n    });\n    // ...\n  }\n\n  async onServerReady() {\n    const server = this.framework.getServer();\n    // server.xxxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/info Component\nDESCRIPTION: This command installs the @midwayjs/info component as a dependency for a Midway.js project using npm. The --save flag ensures that the dependency is added to the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/info.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/info@3 --save\n```\n\n----------------------------------------\n\nTITLE: Fix Express Routing Middleware - Javascript\nDESCRIPTION: This commit fixes an issue where the Express routing middleware was taking effect at the controller level in MidwayJS. This ensures that middleware application is correctly scoped.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexpress routing middleware takes effect at the controller level ([#1364](https://github.com/midwayjs/midway/issues/1364)) ([b9272e0](https://github.com/midwayjs/midway/commit/b9272e0971003443304b0c53815be31a0061b4bd))\n```\n\n----------------------------------------\n\nTITLE: Creating Custom View Engine\nDESCRIPTION: This code snippet demonstrates how to create a custom view engine class. It defines a class called `MyView` with `render` and `renderString` methods. The `render` method is responsible for rendering the template, while `renderString` should throw an error if not implemented. The `Provide` decorator marks the class as a provider for dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// lib/view.ts\nimport { Provide } from '@midwayjs/core';\n\n@Provide()\nexport class MyView {\n\n  @Config('xxxx')\n  viewConfig;\n\n  async render(fullpath, locals) {\n    return myengine.render(fullpath, locals);\n  }\n\n  async renderString() { throw new Error('not implement'); }\n};\n```\n\n----------------------------------------\n\nTITLE: Deploy Prometheus with Docker Compose\nDESCRIPTION: Defines a docker-compose.yml file for deploying Prometheus. This file configures Prometheus to collect metrics and stores data in a specified directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2.2'\nservices:\n  tapi:\n    logging:\n      driver: 'json-file'\n      options:\n        max-size: '50m'\n    image: prom/prometheus\n    restart: always\n    volumes:\n      - ./prometheus_data:/prometheus_data:rw\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - ./targets.json:/etc/prometheus/targets.json\n    command:\n      - '--storage.tsdb.path=/prometheus_data'\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.retention=10d'\n      - '--web.enable-lifecycle'\n    ports:\n      - '9090:9090'\n```\n\n----------------------------------------\n\nTITLE: Mocking Session in Midway.js (TypeScript)\nDESCRIPTION: This example demonstrates how to mock the session using the `mockSession` method. It sets the `user` property of the session to `midway`.  `createApp` and `createHttpRequest` functions are presumed to be defined elsewhere in the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockSession } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  mockSession(app, 'user', 'midway');\n\n  const result1 = await createHttpRequest(app).get('/');\n  // ctx.session.user => midway\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Additional Sequelize Model Options (JSON)\nDESCRIPTION: Defines additional Sequelize model options using a JSON configuration file. This file enables timestamps (createdAt and updatedAt) and paranoid mode (deletedAt) for all models generated by sequelize-auto-midway. These options are applied during model initialization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/sequelize_generator.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamps\": true,\n  \"paranoid\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ws Dependency in MidwayJS (v8.5.0)\nDESCRIPTION: This commit updates the 'ws' dependency to version v8.5.0.  This update likely includes bug fixes and performance improvements in the websocket library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n**deps:** update dependency ws to v8.5.0 ([#1668](https://github.com/midwayjs/midway/issues/1668)) ([5326c43](https://github.com/midwayjs/midway/commit/5326c43ebf0641a745be1e772c2a5a527dfcb688))\n```\n\n----------------------------------------\n\nTITLE: Fixing CI, Build, and Type Errors with RabbitMQ in MidwayJS\nDESCRIPTION: This snippet describes fixing continuous integration (CI), build, and type errors specifically related to the RabbitMQ integration in MidwayJS. This ensures a more stable and reliable development process when using RabbitMQ.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n- ci、build and type error with rabbitmq ([#1253](https://github.com/midwayjs/midway/issues/1253)) ([80ae991](https://github.com/midwayjs/midway/commit/80ae9919e1c21c9e326b5f186f891d14d43495a5))\n```\n\n----------------------------------------\n\nTITLE: Extending Context definition in a Component\nDESCRIPTION: This TypeScript code demonstrates how to extend the `Context` interface from `@midwayjs/core` within a component. By declaring a module augmentation, you can add new properties to the `Context` type, making them accessible within the component.  Note that the module path is slightly different (`@midwayjs/core/dist/interface`) compared to extending it in a project. This code should be placed in `src/index.ts` or another exported file within your component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/context_definition.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\ndeclare module '@midwayjs/core/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Egg Socket IO Session Middleware\nDESCRIPTION: This code snippet fixes a bug related to the session middleware for Egg.js's socket.io implementation. The fix ensures that session data is correctly handled and accessible within socket.io connections. The commit hash 6e605a1 provides a direct reference to the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_13\n\nLANGUAGE: N/A\nCODE:\n```\n6e605a1\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Middleware in MidwayJS (TypeScript)\nDESCRIPTION: This snippet shows how to create a middleware in MidwayJS using TypeScript. It implements the `IMiddleware` interface and logs the request duration.  The middleware intercepts incoming requests, records the start time, waits for the next middleware or handler to execute via `next()`, and then logs the elapsed time.  It relies on `@midwayjs/core` and `@midwayjs/web`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { Context, NextFunction } from '@midwayjs/web';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  resolve() {\n    return async (ctx: Context, next: NextFunction) => {\n      const startTime = Date.now();\n      await next();\n      console.log(Date.now() - startTime);\n    };\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Aliyun API Gateway Passthrough Result (text/html)\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Alibaba Cloud API Gateway with parameter passthrough and a `content-type` of `text/html`.  The request body is a string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // '{\"c\":\"b\"}'   => string\n```\n\n----------------------------------------\n\nTITLE: OSS Event Structure in Alibaba Cloud Function Compute\nDESCRIPTION: This JSON snippet describes the structure of an OSS event in Alibaba Cloud Function Compute. It includes details about the event, the bucket, and the object. It represents information about an event that occurred in OSS, such as creating or updating an object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"events\": [\n     {\n       \"eventName\": \"ObjectCreated:PutObject\",\n       \"eventSource\": \"acs:oss\",\n       \"eventTime\": \"2017-04-21T12:46:37.000Z\",\n       \"eventVersion\": \"1.0\",\n       \"oss\": {\n         \"bucket\": {\n           \"arn\": \"acs:oss:cn-shanghai:123456789:bucketname\",\n           \"name\": \"testbucket\",\n           \"ownerIdentity\": \"123456789\",\n           \"virtualBucket\": \"\"\n         },\n         \"object\": {\n           \"deltaSize\": 122539,\n           \"eTag\": \"688A7BF4F233DC9C88A80BF985AB7329\",\n           \"key\": \"image/a.jpg\",\n           \"size\": 122539\n         },\n         \"ossSchemaVersion\": \"1.0\",\n         \"ruleId\": \"9adac8e253828f4f7c0466d941fa3db81161e853\"\n       },\n       \"region\": \"cn-shanghai\",\n       \"requestParameters\": {\n         \"sourceIPAddress\": \"140.205.128.221\"\n       },\n       \"responseElements\": {\n         \"requestId\": \"58F9FF2D3DF792092E12044C\"\n       },\n       \"userIdentity\": {\n         \"principalId\": \"123456789\"\n       }\n     }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Midway App\nDESCRIPTION: This command initializes a new Midway.js web application using the `npm init midway` command.  The `--type=web` flag specifies that a web application should be created, and `my_midway_app` is the name of the project directory. The CLI automatically creates the directory and populates it with starter code.  Different npm versions require slightly different syntax for passing arguments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/start_app.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm -v\n\n# 如果是 npm v6\n$ npm init midway --type=web my_midway_app\n\n# 如果是 npm v7\n$ npm init midway -- --type=web my_midway_app\n```\n\n----------------------------------------\n\nTITLE: Supporting fun router in MidwayJS\nDESCRIPTION: This commit introduces support for \"fun router\" functionality within the MidwayJS framework. This likely refers to a more flexible or expressive way of defining routes, possibly using a functional programming paradigm or a more concise syntax.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Running MidwayJS Benchmark\nDESCRIPTION: These commands are used to prepare the environment and execute the benchmark script for the Midway framework. The `ready.sh` script likely sets up necessary configurations or dependencies, while `node index` runs the benchmark tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/benchmark/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./ready.sh\n$ node index\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces the Guard feature within the MidwayJS framework. Guards are used to control access to routes and resources based on certain conditions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Defining API Response with @ApiResponse in Typescript\nDESCRIPTION: This snippet demonstrates how to define the API response for a specific endpoint using the `@ApiResponse` decorator in MidwayJS.  It specifies the HTTP status code, a description, and the data model (`Cat`) for the response.  It uses `@Param` and `@Query` to define the parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/:id')\n@ApiResponse({\n  status: 200,\n  description: 'The found record',\n  type: Cat,\n})\nfindOne(@Param('id') id: string, @Query('test') test: any): Cat {\n  return this.catsService.findOne(+id);\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side gRPC Metadata Retrieval for Streaming Services with Midwayjs\nDESCRIPTION: This code snippet illustrates how to retrieve metadata for streaming services by subscribing to the `metadata` event of the client stream object. It retrieves the call object using `service.addMany().getCall()` and attaches a 'metadata' event listener to process metadata as it arrives. Note that there is no `await` here.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the service. Note that there is no await here.\nconst call = service.addMany().getCall();\ncall.on('metadata', (meta) => {\n  // output meta\n});\n\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/bull dependency to package.json\nDESCRIPTION: This JSON snippet shows how to add @midwayjs/bull as a dependency in your project's `package.json` file. It specifies the version of the package to be installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/bull\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Version with yarn\nDESCRIPTION: This command upgrades all Midway dependencies to the latest version using yarn. The `-u` flag triggers the upgrade process. It first adds the `midway-version` as a dev dependency and then executes the command. It then can be used with `-w` to write changes to `package.json` and `yarn.lock`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/version_check.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add midway-version@latest\n$ yarn midway-version -u\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn midway-version -u -w\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes for Singleton Invoke Request\nDESCRIPTION: This commit addresses a bug where the singleton invoke request scope was not valid. It fixes the issue related to request scope management within singleton instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- singleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Fixing Plugin Injection in Web Middleware - JavaScript\nDESCRIPTION: This commit resolves a bug where a plugin was being injected as undefined in web middleware. This impacts how plugins are used within web request handling and likely involved correcting the plugin injection mechanism.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\ncacb2faa61258172ef445db0a86e45c3f19014a6\n```\n\n----------------------------------------\n\nTITLE: Singleton Scope Dependency Freezing\nDESCRIPTION: Illustrates that singleton dependencies are \"frozen\" and won't change even if other components are re-instantiated on each request. Subsequent instances are cached.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// 这个类是默认的请求作用域（Request）\n@Provide()\nexport class HomeController {\n  @Inject()\n  userService: UserService;\n}\n\n// 设置了单例，进程级别唯一\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class UserService {\n  async getUser() {\n    // ...\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// 这个类是默认的请求作用域（Request）\n@Provide()\nexport class HomeController {\n  @Inject()\n  userService: UserService;\n}\n\n// 设置了单例，进程级别唯一\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class UserService {\n  @Inject()\n  dbManager: DBManager;\n\n  async getUser() {\n    // ...\n  }\n}\n\n// 未设置作用域，默认是请求作用域（这里用来验证单例链路下，后续的实例都被缓存的场景）\n@Provide()\nexport class DBManager {}\n```\n\n----------------------------------------\n\nTITLE: Directory structure with interceptor file\nDESCRIPTION: This shows the directory structure of a MidwayJS application with an interceptor file (`report.ts`) placed in the `src/aspect` directory and a controller file (`home.ts`) in the `src/controller` directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/aspect.md#_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n➜ my_midway_app tree\n.\n├── src\n│   │── aspect                    ## interceptor directory\n│   │   └── report.ts\n│   └── controller                ## Web Controller Directory\n│       └── home.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Fixing bootstrap cache error framework in MidwayJS\nDESCRIPTION: This commit corrects an error related to the bootstrap cache within the MidwayJS framework. The fix likely addresses a specific scenario where the framework encountered an issue while utilizing the bootstrap cache during its initialization process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Mocking with Groups in Midway.js (TypeScript)\nDESCRIPTION: This code demonstrates how to mock with groups, allowing for selective restoration of mock data.  It creates mocks for an object property and context properties, assigning them to different groups, and then restores only one group. It depends on the `createApp` function to be defined elsewhere.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockContext, restoreMocks } from '@midwayjs/mock';\n\nit('should test mock with groups', async () => {\n  const app = await createApp();\n\n  // 创建普通对象的 mock\n  const a = {};\n  mockProperty(a, 'getUser', async () => {\n    return 'midway';\n  }, 'group1');\n\n  // 创建上下文的 mock\n  mockContext(app, 'user', 'midway', 'group1');\n  mockContext(app, 'role', 'admin', 'group2');\n\n  // 恢复单个分组\n  restoreMocks('group1');\n\n  // 恢复所有分组\n  restoreAllMocks();\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Router Table Service in Midway.js\nDESCRIPTION: This snippet demonstrates how to get the routing table service in Midway.js by injecting `MidwayWebRouterService` and `MidwayServerlessFunctionService`. It retrieves the flattened router table for web routing and the function list for serverless functions within the `onReady` lifecycle hook. `MidwayServerlessFunctionService` only applies to Serverless scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayWebRouterService, MidwayServerlessFunctionService, Configuration, Inject } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  @Inject()\n  serverlessFunctionService: MidwayServerlessFunctionService;\n\n  async onReady() {\n    // Web routing\n    const routes = await this.webRouterService.getFlattenRouterTable();\n\n    // serverless function\n    const routes = await this.serverlessFunctionService.getFunctionList();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adapter Factory Function Injection in MidwayJS\nDESCRIPTION: This snippet shows how to create and inject a factory function that returns different adapter instances based on the provided `adapterName`. The `adapterFactory` function uses the context to retrieve the appropriate adapter instance. The `providerWrapper` registers this factory, making it injectable into other components.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport function adapterFactory(context: IApplicationContext) {\n  return async (adapterName: string) => {\n    if (adapterName === 'google') {\n      return await context.getAsync('googleAdapter');\n    }\n\n    if (adapterName === 'baidu') {\n      return await context.getAsync('baiduAdapter');\n    }\n\n    // return await context.getAsync(adapterName + 'Adapter');\n  };\n}\n\nproviderWrapper([\n  {\n    id: 'adapterFactory',\n    provider: adapterFactory,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Fixing Service Factory Client Merge in MidwayJS\nDESCRIPTION: This commit addresses a bug related to service factory client and client merge operations within the MidwayJS framework. The fix likely resolves issues encountered when combining or managing multiple service clients, specifically in factory contexts. It relates to issue #2248.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nservice factory client & clients merge ([#2248](https://github.com/midwayjs/midway/issues/2248)) ([cfdee64](https://github.com/midwayjs/midway/commit/cfdee6449cb2770bc238e74fd754b783c331b822))\n```\n\n----------------------------------------\n\nTITLE: Adding guard feature in Midway.js\nDESCRIPTION: This commit introduces a 'guard' feature within the Midway.js framework. It adds functionality related to security and access control, enhancing the application's protection mechanisms. The feature is identified by commit hash 1b952a1.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cross-domain/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Fixing Config Key Requirement in MidwayJS\nDESCRIPTION: This commit fixes an issue in MidwayJS where a config key was required. The purpose of this fix is to remove the unnecessary requirement for the config key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- config key required ([#1615](https://github.com/midwayjs/midway/issues/1615)) ([fb2188e](https://github.com/midwayjs/midway/commit/fb2188eaf5c24ffc9972f73323773a5899825037))\n```\n\n----------------------------------------\n\nTITLE: Move context format to user config\nDESCRIPTION: This snippet moves the context format to the user configuration.  This allows users to customize the format of the context object that is passed to route handlers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Using OSSService to Save a File in MidwayJS\nDESCRIPTION: This TypeScript snippet demonstrates how to use the OSSService to save a file to OSS. It injects the OSSService, defines a local file path, and then calls the put method to upload the file to the specified OSS path. The result contains the URL of the uploaded file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OSSService } from '@midwayjs/oss';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  ossService: OSSService;\n\n  async saveFile() {\n\n\n    const localFile = join(__dirname, 'test.log');\n    const result = await this.ossService.put('/test/test.log', localFile);\n\n    // => result.url\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Policies using CasbinEnforcerService\nDESCRIPTION: This code shows how to reload the Casbin policies using the `loadPolicy` method of the `CasbinEnforcerService`. This is useful when the policies have been updated and need to be reloaded into the Casbin enforcer.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.casbinEnforcerService.loadPolicy();\n```\n\n----------------------------------------\n\nTITLE: Run Luckyeye check with npm\nDESCRIPTION: This command executes the 'check' script defined in `package.json`, which in turn runs the Luckyeye inspection tool.  It analyzes the project based on configured rules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/luckyeye.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run check\n```\n\n----------------------------------------\n\nTITLE: Associating Entities with Data Sources\nDESCRIPTION: This code snippet demonstrates how to explicitly associate entity classes with specific data sources in the `config.default.ts` file. It imports the `User` and `SimpleUser` entity classes and adds them to the `entities` array of the corresponding data source configuration. It does not define the decorator or entity implementations themselves.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_source.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nimport { User, SimpleUser } from '../entity/user.entity';\n\nexport default {\n  mysql: {\n    dataSource: {\n      dataSource1: {\n        host: 'localhost',\n        user: 'root',\n        database: 'test',\n        entities: [User]\n      },\n      dataSource2: {\n        host: 'localhost',\n        user: 'root',\n        database: 'test',\n        entities: [SimpleUser]\n      },\n      // ...\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Bootstrap for testing\nDESCRIPTION: Demonstrates how to load `bootstrap.js` to create the app for tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nit('should GET /', async () => {\n  // create app\n  const bootstrap = await createBootstrap(join(process.cwd(), 'bootstrap.js'));\n  // 根据框架类型获取 app 实例\n  const app = bootstrap.getApp('koa');\n\n  // expect and test\n\n  // close bootstrap\n  await bootstrap.close();\n});\n```\n\n----------------------------------------\n\nTITLE: mwtsc adjust port\nDESCRIPTION: This snippet shows how to use the `--port` option to dynamically modify the HTTP port for local testing.  This overrides any port configuration defined in the code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$  npx mwtsc --watch --run @midwayjs/mock/app --port 7001\n```\n\n----------------------------------------\n\nTITLE: Example Timer Event Structure (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a TimerEvent object received by a timer-triggered function in Alibaba Cloud Function Compute. It includes the trigger time, trigger name, and payload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"triggerTime\": new Date().toJSON(),\n  \"triggerName\": 'timer',\n  \"payload\": ''\n}\n```\n\n----------------------------------------\n\nTITLE: Running Single Test File with midway-bin (Bash)\nDESCRIPTION: This command demonstrates how to run a single test file using the `midway-bin test -f` command. This is useful for focusing on specific tests during development or debugging. `test/controller/api.ts` is the single file to be tested.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin test -f test/controller/api.ts\n```\n\n----------------------------------------\n\nTITLE: Running Grafana with Docker\nDESCRIPTION: This command runs Grafana in a Docker container, mapping port 3000 on the host machine to port 3000 on the container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name=grafana -p 3000:3000 grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Creating a Direct Exchange\nDESCRIPTION: This code snippet demonstrates how to create a direct exchange in RabbitMQ using `@midwayjs/mock`. It creates a producer, declares a direct exchange, sends a message to the exchange with a routing key, and then closes the producer and application. The exchange is used for targeted filtering according to routerKey.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * direct type messages, targeted filtering according to routerKey\n  */\nconst manager = await createRabbitMQProducer('tasks-direct', {\n  isConfirmChannel: false\n  mock: false\n  url: 'amqp://localhost',\n});\n\n// Name of the exchange\nconst ex = 'direct_logs';\n// Write a message\nconst msg = \"Hello World!\";\n\n// Declare Switch\nmanager.assertExchange(ex, 'direct', { durable: false }) // 'fanout' will broadcast all messages to all the queues it knows\n\nconst app = await creatApp('base-app-direct', {\n  url: 'amqp://localhost',\n  reconnectTime: 2000\n});\n\n// Specify the routerKey here and send it to the switch\nmanager.sendToExchange(ex, 'direct_key', Buffer.from(msg))\n\n// Check result\n\nawait manager.close();\nawait close(app);\n\n```\n\n----------------------------------------\n\nTITLE: Run Bundle and PKG build\nDESCRIPTION: These commands execute the bundling and binary building processes. First, `npm run bundle` is executed as configured in the `package.json` which creates `src/index.ts` and builds the project to JS. Then, `npm run pkg` creates the platform-specific build using the `pkg` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run bundle\n$ npm run pkg\n```\n\n----------------------------------------\n\nTITLE: Installing NCC for Single File Build\nDESCRIPTION: This command installs the `@vercel/ncc` package globally or as a dev dependency.  This package is used to build a single file from the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n## Used to build a single file\n## install to the global\n$ npm i @vercel/ncc -g\n## Or install to project (recommended)\n$ npm i @vercel/ncc --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Passport Dependencies\nDESCRIPTION: This command installs the necessary dependencies for Passport in a MidwayJS project, including the Passport library itself and its TypeScript definition files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/passport@2 passport --save\n$ npm i @types/passport --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Entities for Multiple Databases\nDESCRIPTION: This TypeScript code defines two separate entity classes, `User` and `User2`, each representing a different entity for different MongoDB databases.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n\n  @prop()\n  public name?: string;\n\n  @prop({ type: () => [String] })\n  public jobs?: string[];\n}\n\nclass User2 {\n\n  @prop()\n  public name?: string;\n\n  @prop({ type: () => [String] })\n  public jobs?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Context Manager with Middleware in Midway.js\nDESCRIPTION: This code snippet represents the addition of a context manager with middleware feature to the Midway.js project. The feature likely introduces a mechanism for managing request context and applying middleware to specific contexts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n99ba506b82b1061af26bf333892ae90b654a7b31\n```\n\n----------------------------------------\n\nTITLE: Calling gRPC Service Using Clients Injection\nDESCRIPTION: This code snippet shows how to call a gRPC service using the `Clients` injection provided by `@midwayjs/grpc`. It injects `grpcClients` into a class and then uses `getService` to obtain the client instance for a specific service. Finally, it calls a method on the service and returns the result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Provide,\n  Inject,\n} from '@midwayjs/core';\nimport { helloworld } from '../interface';\nimport { Clients } from '@midwayjs/grpc';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  grpcClients: Clients;\n\n  async invoke() {\n    // Get Services\n  \tconst greeterService = this.grpcClients.getService<helloworld.GreeterClient>(\n      'helloworld.Greeter'\n    );\n\n    // Call service\n    const result = await greeterService.sayHello()\n    \t.sendMessage({\n        name: 'harry'\n      });\n\n    // Return result\n    return result;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Component Project with Midway CLI (npm v6)\nDESCRIPTION: Initializes a new Midway.js component project named 'hello2' using the Midway CLI. This command assumes you are using npm version 6.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway --type=component hello2\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Property Initialization Check (TypeScript)\nDESCRIPTION: This snippet shows how to disable the strict property initialization check in the `tsconfig.json` file. When enabled, TypeScript requires all class properties to be initialized in the constructor or declared with a definite assignment assertion. Setting `strictPropertyInitialization` to `false` or removing it disables this check, allowing uninitialized properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/ts_problem.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"strictPropertyInitialization\": false // 或者移除\n}\n```\n\n----------------------------------------\n\nTITLE: Context Logger Injection with @Inject - Typescript\nDESCRIPTION: This snippet demonstrates how to inject the context logger (`ctx.logger`) into a controller using the `@Inject()` decorator. It shows that the injected logger instance (`this.logger`) is equivalent to calling `ctx.logger` directly. This approach allows for easy access to the context logger within the controller's methods.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Get, Inject, Controller, Provide } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Controller()\nexport class HelloController {\n\n  @Inject()\n  logger: ILogger;\n\n  @Inject()\n  ctx;\n\n  @Get(\"/\")\n  async hello() {\n    // ...\n\n    // this.logger === ctx.logger\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Socket.IO-Redis Support to MidwayJS\nDESCRIPTION: This commit adds support for socket.io-redis within the MidwayJS framework. Socket.IO-Redis is a Redis-based adapter for Socket.IO that enables scaling Socket.IO applications across multiple processes or servers. This new feature allows for scalable and reliable real-time communication capabilities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n2818920b9d3391c81666c5b8587a899b9b237d9e\n```\n\n----------------------------------------\n\nTITLE: Fixing Express Router Missing Issue in MidwayJS\nDESCRIPTION: This commit addresses an issue where the Express router was missing in certain configurations within the MidwayJS framework. This fix ensures that the Express router is properly initialized and available for handling requests. This is important for correct routing behavior when using Express.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n30cd26cc505ea91fb7d0796c59238962c5045b3d\n```\n\n----------------------------------------\n\nTITLE: Run Bundle Script\nDESCRIPTION: This bash command executes the bundle script defined in package.json.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run bundle\n```\n\n----------------------------------------\n\nTITLE: Fixing router sort with param in MidwayJS\nDESCRIPTION: This commit addresses an issue where the router sorting mechanism was malfunctioning when parameters were involved in MidwayJS. The fix ensures that routes are correctly sorted even when they include parameters, preventing potential routing conflicts or unexpected behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Running in Production Mode\nDESCRIPTION: This command executes the compiled Midway Hooks project in production mode. It starts the application using the bootstrap.js file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/function/readme.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ node bootstrap.js\n```\n\n----------------------------------------\n\nTITLE: Custom Server Response - Failed Response (TypeScript)\nDESCRIPTION: This code demonstrates how to return a failed JSON response using `HttpServerResponse`. It sets the 'success' flag to 'false' and includes an error message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-08-29-release-3.17.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 失败的返回\nreturn new HttpServerResponse(this.ctx).fail().json('hello world');\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Data Source\nDESCRIPTION: This TypeScript code shows how to configure a Sequelize data source in a MidwayJS application.  It specifies the database connection details and the entities to be used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\n\nimport { Person } from '../entity/person.entity';\n\nexport default {\n  // ...\n  sequelize: {\n    dataSource: {\n      // 第一个数据源，数据源的名字可以完全自定义\n      default: {\n        database: 'test4',\n        username: 'root',\n        password: '123456',\n        host: '127.0.0.1',\n        port: 3306,\n        encrypt: false,\n        dialect: 'mysql',\n        define: { charset: 'utf8' },\n        timezone: '+08:00',\n        // 本地的时候，可以通过 sync: true 直接 createTable\n        sync: false,\n        \n        // 实体形式\n        entities: [Person],\n\n        // 支持如下的扫描形式，为了兼容我们可以同时进行.js和.ts匹配️\n        entities: [\n          'entity',                        // 指定目录\n          '**/entity/*.entity.{j,t}s',     // 通配加后缀匹配\n        ],\n      },\n\n      // 第二个数据源\n      default2: {\n        // ...\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and createFunctionApp in MidwayJS\nDESCRIPTION: This commit addresses type definition issues for Supertest and the `createFunctionApp` function in MidwayJS. It resolves potential type errors or inconsistencies, ensuring proper type checking and usage of these components. The commit hash is 484f4f41b3b9e889d4d285f4871a0b37fa51e73f.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Building Docker Compose Services\nDESCRIPTION: This command builds the services defined in the `docker-compose.yml` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose build\n```\n\n----------------------------------------\n\nTITLE: Using etcd Component in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to use the new etcd component in a MidwayJS application. It injects the ETCDService and uses it to retrieve a value from etcd. Requires the '@midwayjs/etcd' package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-11-18-release-3-8.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ETCDService } from '@midwayjs/etcd';\n\n@Provide()\nexport class UserService {\n  \n  @Inject()\n  etcdService: ETCDService;\n\n  async invoke() {\n\n    const fooValue = await this.etcdService.get('foo').string();\n    console.log('foo was:', fooValue);\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Session in FaaS Environment (JSON)\nDESCRIPTION: This snippet showcases the necessary dependencies to add session support in a function-as-a-service (FaaS) environment using Midway.js.  It specifies the `@midwayjs/session` package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/session\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Service Factory Client Merge\nDESCRIPTION: Addresses an issue related to service factory client and clients merge. This bug fix resolves conflicts or inconsistencies that may arise when merging client configurations or instances within the service factory. The solution ensures a more stable and predictable behavior when dealing with multiple clients.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nservice factory client & clients merge ([#2248](https://github.com/midwayjs/midway/issues/2248))\n```\n\n----------------------------------------\n\nTITLE: Modify Koa Port\nDESCRIPTION: This TypeScript code demonstrates how to modify the default port of the Koa HTTP service in a MidwayJS application by changing the `port` configuration property in `config.default.ts`. This allows you to run the application on a different port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    port: 6001\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing mock method missing in MidwayJS\nDESCRIPTION: This commit addresses an issue where a mock method was missing in MidwayJS. The fix ensures that the necessary mock method is available, which likely resolves issues in testing and development scenarios by enabling the mocking of specific functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Import and Configure Prometheus Module in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to import and configure the @midwayjs/prometheus module within a MidwayJS application. It also showcases how to import configuration files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport * as prometheus from '@midwayjs/prometheus'; // 导入模块\nimport { join } from 'path';\n\n@Configuration({\n  imports: [prometheus], // 引入模块\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class AutoConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Configure Logger Replacement\nDESCRIPTION: This snippet demonstrates how to configure whether to use the default `@midwayjs/logger` or `egg-logger` in a MidwayJS application. Setting `replaceEggLogger` to `false` will use `egg-logger`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config.default.ts\nexport const midwayFeature = {\n  // true 代表 使用 midway logger\n  // false 或者为空代表使用 egg-logger\n  replaceEggLogger: false,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Running with ARMS\nDESCRIPTION: This snippet shows how to run the application with the necessary environment variables and the `-r` flag to enable the `opentelemetry-arms` integration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ SERVICE_NAME=nodejs-opentelemetry-express AUTHENTICATION=****  ENDPOINT=grpc://**** node  -r opentelemetry-arms bootstrap.js\n```\n\n----------------------------------------\n\nTITLE: Middleware Reuse - Function Middleware (TypeScript)\nDESCRIPTION: This code shows how to reuse a function middleware in multiple routes within a MidwayJS controller.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-08-29-release-3.17.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mw = (ctx, next) => {\n  // ...\n}\n\n@Controller(/**/)\nexport class HomeController {\n\n  @Get('/', { middleware: [mw]})\n  async home() {}\n  \n  @Get('/api', { middleware: [mw]})\n  async api() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Support\nDESCRIPTION: This feature introduces support for RabbitMQ within the MidwayJS framework.  RabbitMQ is a widely used message broker that enables asynchronous communication between different parts of an application.  This provides a robust solution for building distributed systems with MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nadd rabbitmq ([#647](https://github.com/midwayjs/midway/issues/647)) ([2c03eb4](https://github.com/midwayjs/midway/commit/2c03eb4f5e979d309048a11f17f7579a1d299ba1))\n```\n\n----------------------------------------\n\nTITLE: Fixing Passport compatibility code in Midway.js\nDESCRIPTION: This commit addresses compatibility issues with Passport, a popular authentication middleware, within the Midway.js framework. This ensures seamless integration between Midway.js and Passport for handling user authentication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n2975e4f5b6cf8cbcd42cbfb8ce3e08633dbba383\n```\n\n----------------------------------------\n\nTITLE: Setting Cache with TTL\nDESCRIPTION: This code shows how to set a cache entry with a specific Time-To-Live (TTL) value. The `ttl` option determines how long the data remains valid in the cache, in seconds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.cache.set(key, value, { ttl: 1000 }); // ttl的单位为秒\n```\n\n----------------------------------------\n\nTITLE: Import and Configure staticFile Module\nDESCRIPTION: This TypeScript code imports necessary modules from @midwayjs/core, @midwayjs/koa, and @midwayjs/static-file. It then configures the static file module within the Midway application's configuration file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/static_file.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as staticFile from '@midwayjs/static-file';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    koa,\n    staticFile\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Dependency Tree with npm ls\nDESCRIPTION: This command lists the dependency tree of a specific package in the project, in this case, `@midwayjs/decorator`. It helps identify if there are multiple versions of the package or if it's not properly deduplicated.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm ls @midwayjs/decorator\n```\n\n----------------------------------------\n\nTITLE: Using ctx.requestContext to get the request-scoped container\nDESCRIPTION: This shows how to access the request-scoped dependency injection container using `ctx.requestContext`. This container is used to create and manage objects within the scope of a single request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst userService = await this.ctx.requestContext.getAsync(UserService);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuration for allowFieldsDuplication\nDESCRIPTION: This code snippet shows how to configure the `allowFieldsDuplication` option in the @midwayjs/upload component. When set to true, it allows multiple fields with the same name, which will be merged into an array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  upload: {\n    allowFieldsDuplication: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing container cache when testing in MidwayJS\nDESCRIPTION: This commit addresses a bug where the container cache was not being properly cleared during testing in MidwayJS. The fix ensures that the cache is cleared after each test, preventing potential interference between test runs and ensuring accurate test results.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Updating body-parser and express dependencies\nDESCRIPTION: This snippet updates the body-parser dependency to v1.19.2 and express to v4.17.3.  These updates typically include bug fixes, performance improvements, and security patches.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Installing Sequelize and Dependencies\nDESCRIPTION: This command installs the Sequelize adapter for MidwayJS, the Sequelize library, and the Sequelize-Typescript library as dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/sequelize@3 sequelize sequelize-typescript --save\n```\n\n----------------------------------------\n\nTITLE: Mocking with Groups in MidwayJS with @midwayjs/mock\nDESCRIPTION: This code demonstrates how to use groups to manage different mock data, making it easier to restore or clean up specific sets of mocks.  It creates two mock groups, `group1` and `group2`, and shows how to restore mocks from a single group using `restoreMocks` and all mocks using `restoreAllMocks`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockContext, restoreMocks } from '@midwayjs/mock';\n\nit('should test mock with groups', async () => {\n  const app = await createApp();\n\n  // Create a mock for a regular object\n  const a = {};\n  mockProperty(a, 'getUser', async () => {\n    return 'midway';\n  }, 'group1');\n\n  // Create a mock for the context\n  mockContext(app, 'user', 'midway', 'group1');\n  mockContext(app, 'role', 'admin', 'group2');\n\n  // Restore a single group\n  restoreMocks('group1');\n\n  // Restore all groups\n  restoreAllMocks();\n});\n```\n\n----------------------------------------\n\nTITLE: Fix singleton invoke request scope in MidwayJS\nDESCRIPTION: This commit fixes a problem where singleton-scoped components were not properly injected into request-scoped components. This was resulting in request-specific data not being available.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Run Bundle Start Script\nDESCRIPTION: This bash command executes the bundle_start script defined in package.json.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run bundle_start\n```\n\n----------------------------------------\n\nTITLE: Getting Core Logger\nDESCRIPTION: This code shows how to get the core logger using `this.app.getCoreLogger()`. The core logger is used for logging framework-level events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getCoreLogger();\n```\n\n----------------------------------------\n\nTITLE: Testing Direct Exchange in RabbitMQ\nDESCRIPTION: This snippet showcases testing a direct exchange with a specific routing key in RabbitMQ within a MidwayJS environment. A producer is created, the direct exchange is asserted, a message is sent using a defined routing key, and the consumer app is started and stopped.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * direct 类型的消息，根据 routerKey 做定向过滤\n */\nconst manager = await createRabbitMQProducer('tasks-direct', {\n  isConfirmChannel: false,\n  mock: false,\n  url: 'amqp://localhost',\n});\n\n// Name of the exchange\nconst ex = 'direct_logs';\n// Write a message\nconst msg = 'Hello World!';\n\n// 声明交换机\nmanager.assertExchange(ex, 'direct', { durable: false }); // 'fanout' will broadcast all messages to all the queues it knows\n\nconst app = await creatApp('base-app-direct', {\n  url: 'amqp://localhost',\n  reconnectTime: 2000,\n});\n\n// 这里指定 routerKey，发送到交换机\nmanager.sendToExchange(ex, 'direct_key', Buffer.from(msg));\n\n// 校验结果\n\nawait manager.close();\nawait closeApp(app);\n```\n\n----------------------------------------\n\nTITLE: Using the Class Decorator in a Class Definition\nDESCRIPTION: This code snippet shows how to apply the `@Model` class decorator to a class (`UserModel`). This indicates that the `UserModel` class should be treated as a model class and will be processed by the logic defined in the `configuration.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from '../decorator/model.decorator';\n\n// Model 的作用是我们自己的逻辑能被执行（保存的元数据）\n@Model()\nexport class UserModel {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Jest Configuration (settings.json)\nDESCRIPTION: Configures VSCode settings for the Jest Runner extension. It specifies the path to the Jest executable, including the necessary `ts-node/register` hook for TypeScript support, and enables open handles detection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jest.pathToJest\": \"node --require=ts-node/register ./node_modules/.bin/jest --detectOpenHandles \",\n  \"jestrunner.jestCommand\": \"node --require=ts-node/register ./node_modules/.bin/jest --detectOpenHandles\"\n}\n```\n\n----------------------------------------\n\nTITLE: File Routing Configuration in f.yml (Midway Hooks 1.0)\nDESCRIPTION: This configuration defines routing rules for API functions within a monolithic project. `rules` specifies the routing rules with `baseDir` indicating the function folder and `events` configuring function triggers, specifically HTTP triggers with a `basePath` defining the URL prefix for the API endpoints.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_route.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctionsRule:\n  rules:\n    - baseDir: lambda\n      events:\n        http:\n          basePath: /api\n```\n\n----------------------------------------\n\nTITLE: Using app.getNamespace() to get the component namespace\nDESCRIPTION: This code demonstrates the usage of `getNamespace()` API to retrieve the type of framework of the app (component's namespace).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getNamespace();\n// 'koa'\n```\n\n----------------------------------------\n\nTITLE: Pass cookies to a request\nDESCRIPTION: This snippet demonstrates how to pass cookies to a request using the `.set('Cookie', cookie)` method of the `createHttpRequest` object.  It constructs a cookie string and sets it in the header.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst cookie = [\n  \"koa.sess=eyJuYW1lIjoiaGFycnkiLCJfZXhwaXJlIjoxNjE0MTQ5OTQ5NDcyLCJfbWF4QWdlIjo4NjQwMDAwMH0=; path=/; expires=Wed, 24 Feb 2021 06:59:09 GMT; httponly\",\n  \"koa.sess.sig=mMRQWascH-If2-BC7v8xfRbmiNo; path=/; expires=Wed, 24 Feb 2021 06:59:09 GMT; httponly\"\n]\n\nconst result = await createHttpRequest(app)\n  .get('/set_header')\n  .set('Cookie', cookie)\n  .query({ name: 'harry' });\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Columns with Types\nDESCRIPTION: This code defines timestamp columns (`gmtModified` and `gmtCreate`) with explicit `type: 'timestamp'`. This is needed when `dateStrings: true` is enabled so the values are returned as strings with the correct timezone.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n@EntityModel()\nexport class Photo {\n  //...\n  @UpdateDateColumn({\n    name: 'gmt_modified',\n    type: 'timestamp',\n  })\n  gmtModified: Date;\n\n  @CreateDateColumn({\n    name: 'gmt_create',\n    type: 'timestamp',\n  })\n  gmtCreate: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AOP Feature - JavaScript\nDESCRIPTION: This commit introduces Aspect-Oriented Programming (AOP) capabilities to the Midway.js framework. It might involve new decorators, configuration options, and runtime mechanisms for defining and applying aspects to different parts of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nc3e15b328c184318e364bf40d32fa4df6be2a30a\n```\n\n----------------------------------------\n\nTITLE: Mocking Function Context Data (MidwayJS, TypeScript)\nDESCRIPTION: This snippet illustrates how to mock the FC Context data structure using the `mockContext` function from `@midwayjs/fc-starter`.  This allows for simulating the execution environment of a serverless function during local testing, enabling the setting of properties like the function name and handler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context, Framework } from '@midwayjs/faas';\nimport { mockContext } from '@midwayjs/fc-starter';\nimport { createFunctionApp } from '@midwayjs/mock';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from event trigger', async () => {\n    \n    // create app\n    const app: Application = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: Object.assign(mockContext(), {\n        function: {\n          name: '***',\n          handler: '***'\n        }\n      }),\n    });\n    \n    // ...\n    \n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request returning JSON in Typescript\nDESCRIPTION: This snippet demonstrates making a POST request and expecting a JSON response using `makeHttpRequest`.  It includes setting the `contentType` to 'json' to send the data as JSON.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  method: 'POST',\n  data: {\n    a: 1\n    B: 2\n  },\n  dataType: 'json',\n  contentType:'json', // the post sent is json\n});\n\n// result.data...\n```\n\n----------------------------------------\n\nTITLE: Replacing Egg-bin with Midway CLI\nDESCRIPTION: Replaces the egg-bin tool with the Midway CLI. The Midway CLI provides enhanced features and a more streamlined development experience for MidwayJS applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nuse midway cli replace egg-bin ([#639](https://github.com/midwayjs/midway/issues/639)) ([62bbf38](https://github.com/midwayjs/midway/commit/62bbf3852899476600a0b594cb7dc274b05e29ec))\n```\n\n----------------------------------------\n\nTITLE: Adding ETCD Dependency - package.json\nDESCRIPTION: This JSON snippet shows how to add `@midwayjs/etcd` as a dependency in your `package.json` file. Ensure that you reinstall dependencies after adding this to your project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/etcd.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/etcd\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using RedisServiceFactory - Old Approach - Typescript\nDESCRIPTION: This code shows the original way to access multiple Redis instances using `RedisServiceFactory` in MidwayJS. It requires injecting the factory and then calling the `get` method for each instance. It imports `RedisServiceFactory` from `@midwayjs/redis`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-12-13-release-3-9.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RedisServiceFactory } from '@midwayjs/redis';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  redisServiceFactory: RedisServiceFactory;\n\n  async save() {\n    const redis1 = this.redisServiceFactory.get('instance1');\n    const redis2 = this.redisServiceFactory.get('instance2');\n\n    //...\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MQTT Component\nDESCRIPTION: This command installs the @midwayjs/mqtt component using npm.  The --save flag adds it to the project's dependencies. This allows MQTT functionality to be used within the MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/mqtt@3 --save\n```\n\n----------------------------------------\n\nTITLE: Disabling TypeScript Type Checking for Faster Startup\nDESCRIPTION: This snippet demonstrates how to disable TypeScript type checking during Midway.js development to improve startup times.  It sets the `TS_NODE_TYPE_CHECK` and `TS_NODE_TRANSPILE_ONLY` environment variables to `false` and `true` respectively. This skips type checking at runtime, relying on the editor for type validation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/midway_slow_problem.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTS_NODE_TYPE_CHECK=false TS_NODE_TRANSPILE_ONLY=true\n```\n\n----------------------------------------\n\nTITLE: Tenant Info Interface Definition\nDESCRIPTION: Defines an interface `TenantInfo` to represent the structure of tenant information. This interface specifies the `id` and `name` properties for a tenant.  This is used as an example of how you might define tenant info.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tenant.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TenantInfo {\n   id: string;\n   name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: `extended` Query Parsing Effect Example\nDESCRIPTION: This JSON snippet illustrates the `extended` query parsing effect on the given request parameter using the `qs` module. All parameters with the same name are represented as an array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"a\": [\"1\", \"3\" ],\n   \"b\": [\"2\"],\n   \"c\": [\"1\", \"2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Database Driver (Microsoft SQL Server Example)\nDESCRIPTION: This command installs the Microsoft SQL Server driver for Sequelize.  This driver is needed to connect to a SQL Server database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# for Microsoft SQL Server\nnpm install mssql --save\n```\n\n----------------------------------------\n\nTITLE: Adding context manager with middleware in MidwayJS\nDESCRIPTION: This commit introduces a context manager with middleware functionality to MidwayJS. This allows for managing the request context with added middleware, potentially for request-scoped data or processing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nadd context manager with middleware ([#2116](https://github.com/midwayjs/midway/issues/2116)) ([99ba506](https://github.com/midwayjs/midway/commit/99ba506b82b1061af26bf333892ae90b654a7b31))\n```\n\n----------------------------------------\n\nTITLE: Define Captcha Options Interface - TypeScript\nDESCRIPTION: Defines the CaptchaOptions interface, which describes the available configuration options for the @midwayjs/captcha component. This includes options for default settings, image, formula, and text captcha types, as well as expiration time and ID prefix.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/captcha.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CaptchaOptions {\n  default?: { // default config\n    // The number of interference lines, the default is 1\n    noise?: number;\n    // width, default is 120px\n    width?: number;\n    // width, default is 40px\n    height?: number;\n    // Graphic verification code configuration, the graphic contains some characters\n  },\n  image?: {\n    // Verification code character length, default 4 characters\n    size?: number;\n    // The character type in the image verification code, the default is 'mixed'\n    // - 'mixed' means 0-9, A-Z and a-z\n    // - 'letter' means A-Z and a-z\n    // - 'number' means 0-9\n    type?: 'mixed',\n    // The number of interference lines, the default is 1\n    noise?: number;\n    // width, default is 120px\n    width?: number;\n    // width, default is 40px\n    height?: number;\n  },\n  // Calculation formula verification code configuration, for example, the returned image content is 1+2, the user needs to fill in 3\n  formula?: {\n     // The number of interference lines, the default is 1\n    noise?: number;\n    // width, default is 120px\n    width?: number;\n    // width, default is 40px\n    height?: number;\n  },\n  // Plain text verification code configuration, based on the plain text verification code, SMS verification code and email verification code can be implemented\n  text?: {\n    // Verification code character length, default 4 characters\n    size?: number;\n    // The character type in the image verification code, the default is 'mixed'\n    // - 'mixed' means 0-9, A-Z and a-z\n    // - 'letter' means A-Z and a-z\n    // - 'number' means 0-9\n    type?: 'mixed',\n  },\n  // Verification code expiration time, the default is 1h\n  expirationTime?: 3600,\n  // key prefix stored in verification code\n  idPrefix: 'midway:vc',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Root Directory in TypeScript\nDESCRIPTION: This snippet shows how to configure the root directory where log files will be stored. The `dir` property specifies the desired directory path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      dir: '/home/admin/logs',\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Update Tablestore Dependency\nDESCRIPTION: Updates the tablestore dependency to version 5.3.0. This is a bug fix that ensures compatibility and incorporates the latest features from the tablestore library. The update addresses potential issues and provides access to the newest enhancements.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nupdate dependency tablestore to v5.3.0 ([#2418](https://github.com/midwayjs/midway/issues/2418))\n```\n\n----------------------------------------\n\nTITLE: Add @midwayjs/busboy to package.json\nDESCRIPTION: This JSON snippet shows how to add @midwayjs/busboy as a dependency in the package.json file. Reinstalling after adding this is necessary.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"dependencies\": {\n  \"@midwayjs/busboy\": \"^3.0.0\",\n  \t// ...\n  },\n  \"devDependencies\": {\n  \t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update User without Validate Decorator in Controller (New)\nDESCRIPTION: This code snippet demonstrates how to update a user in a controller in newer versions of MidwayJS. The `@Validate` decorator is no longer required due to the introduction of Pipe, simplifying the code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-01-30-release-3.10.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n\n  @Post('/')\n  async updateUser(@Body() user: UserDTO ) {\n    // user.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Add Serverless Function - MidwayJS - TypeScript\nDESCRIPTION: Shows how to dynamically add a serverless function in MidwayJS. The `addServerlessFunction` method of the `MidwayServerlessFunctionService` is used. The first argument is the serverless function handler, and the second argument is an object containing configuration properties like `type`, `metadata`, `functionName`, and `handlerName`. The `metadata` object is equivalent to the parameters of the `@ServerlessTrigger` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { MidwayServerlessFunctionService, Configuration, Inject } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  serverlessFunctionService: MidwayServerlessFunctionService;\n\n  async onReady() {\n    this.serverlessFunctionService.addServerlessFunction(async (ctx, event) => {\n      return 'hello world';\n    }, {\n      type: ServerlessTriggerType.HTTP,\n      metadata: {\n        method: 'get',\n        path: '/api/hello'\n      },\n      functionName: 'hello',\n      handlerName: 'index.hello',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Fetcher with Axios for @midwayjs/rpc - TypeScript\nDESCRIPTION: This code demonstrates how to replace the default fetcher (redaxios) with Axios for the @midwayjs/rpc HTTP client. It defines a custom `fetcher` function that uses Axios to make HTTP requests and returns the response data. The snippet imports axios, `setupHttpClient`, and the `Fetcher` type from `@midwayjs/rpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/client.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\nimport { setupHttpClient } from '@midwayjs/rpc';\nimport type { Fetcher } from '@midwayjs/rpc';\n\nconst fetcher: Fetcher = async (\n  req,\n  options\n) => {\n  const response = await axios({\n    method: req.method,\n    url: req.url,\n    data: req.data,\n    params: req.query,\n    headers: req.headers,\n    baseURL: options.baseURL,\n    withCredentials:\n      options.withCredentials,\n  });\n  return response.data;\n};\n\nsetupHttpClient({ fetcher });\n```\n\n----------------------------------------\n\nTITLE: Create New DTO from Original DTO\nDESCRIPTION: This snippet demonstrates the use of `PickDto` and `OmitDto` utility functions to create new DTOs based on existing ones. `PickDto` selects specific attributes from the original DTO, while `OmitDto` removes specified attributes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/dto/user.ts\nimport { Rule, RuleType, PickDto } from '@midwayjs/validate';\n\nexport class UserDTO {\n  @Rule(RuleType.number().required())\n  id: number;\n\n  @Rule(RuleType.string().required())\n  firstName: string;\n\n  @Rule(RuleType.string().max(10))\n  lastName: string;\n\n  @Rule(RuleType.number().max(60))\n  age: number;\n}\n\n// Inherit a new DTO\nexport class SimpleUserDTO extends PickDto(UserDTO, ['firstName', 'lastName']) {}\n\n// const simpleUser = new SimpleUserDTO();\n// Contains only firstName and lastName attributes\n// simpleUser.firstName = xxx\n\nexport class NewUserDTO extends OmitDto(UserDTO, ['age']) {}\n\n// const newUser = new NewUserDTO();\n// newUser.age definition and attribute do not exist\n\n// Use\nasync login(@Body() user: NewUserDTO) {\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Alinode with tnvm and npm\nDESCRIPTION: This snippet demonstrates how to install Alinode using tnvm for version management and npm for installing the agenthub package.  It outlines the necessary steps to install tnvm, install a specific Alinode version, use the Alinode version, and globally install the @alicloud/agenthub package. It depends on wget and requires network access to download resources from GitHub and npm.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/alinode.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install the version management tool tnvm, please refer to the installation process error: https://github.com/aliyun-node/tnvm/master/install.sh\n$ wget -O- https://raw.githubusercontent.com/aliyun-node/tnvm/master/install.sh | bash\n$ source ~/.bashrc\n\n# tnvm ls-remote alinode # View the required version\n$ tnvm install alinode-v6.5.0 # Install the required version\n$ tnvm use alinode-v6.5.0 # use the required version\n\n$ npm install @alicloud/agenthub -g # install agenthub\n```\n\n----------------------------------------\n\nTITLE: Creating a MidwayJS Application for Testing - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to create a MidwayJS application for testing using `@midwayjs/mock`.  It imports `createApp` and `close` from `@midwayjs/mock`, along with the relevant framework (in this case, `Framework` from `@midwayjs/koa`). `createApp<Framework>()` creates a test instance of the application, and `close(app)` shuts it down after the tests are complete.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock'\n// 这里使用的 Framework 定义，以主框架为准\nimport { Framework } from '@midwayjs/koa';\n\ndescribe('/test/index.test.ts', () => {\n\n  it('should create app and test webSocket', async () => {\n    const app = await createApp<Framework>();\n\n    //...\n\n    await close(app);\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Redis Watcher and Adapter\nDESCRIPTION: This TypeScript code snippet configures the Redis adapter and watcher for Casbin.  It defines two Redis clients (one for publishing and one for subscribing) and configures the `createAdapter` and `createWatcher` functions to use those clients.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\nimport { createAdapter, createWatcher } from '@midwayjs/casbin-redis-adapter';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    redis: {\n      clients: {\n        'node-casbin-official': {\n          host: '127.0.0.1',\n          port: 6379,\n          db: '0',\n        },\n        'node-casbin-sub': {\n          host: '127.0.0.1',\n          port: 6379,\n          db: '0',\n        }\n      }\n    },\n    casbin: {\n      // ...\n      policyAdapter: createAdapter({\n        clientName: 'node-casbin-official'\n      }),\n      policyWatcher: createWatcher({\n        pubClientName: 'node-casbin-official',\n        subClientName: 'node-casbin-sub',\n      })\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Aliyun API Gateway Passthrough Event Example (text/html)\nDESCRIPTION: This JSON snippet shows an example event passed to a serverless function when using Alibaba Cloud API Gateway with parameter passthrough and a `content-type` of `text/html`.  The `body` field contains a base64 encoded string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"eyJjIjoiYiJ9\",\n  \"headers\": {\n    \"x-ca-dashboard-action\": \"DEBUG\",\n    \"x-ca-dashboard-uid\": \"125087\",\n    \"x-ca-stage\": \"RELEASE\",\n    \"x-ca-dashboard-role\": \"USER\",\n    \"user-agent\": \"Apache-HttpClient/4.5.6 (Java/1.8.0_172)\",\n    \"accept-encoding\": \"gzip,deflate\",\n    \"content-md5\": \"Kry+hjKjc2lvIrwoJqdY9Q==\",\n    \"content-type\": \"text/html; charset=utf-8\"\n  },\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"path\": \"/api/321\",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Lookup Service Instance (TypeScript)\nDESCRIPTION: Demonstrates how to lookup service instances using the Consul balancer. The IConsulBalancer interface is injected to provide access to the service balancer. It showcases retrieval via injection and direct application context access. It shows how to select a service instance, optionally considering health checks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/usage.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. 注入的方式\n@Inject('consul:balancerService')\nbalancerService: IConsulBalancer;\n// 2. 编码的方式\nconst balancerService = await app.getApplicationContext().getAsync<IConsulBalancer>('consul:balancerService');\n\n// 查询的 service 数据是 consul 返回的原生数据，因为组件并不知道应用层使用了 consul 的哪些元数据信息\n// 注意下 select 在没有服务实例时会抛出 Error\n\n// 1. 查询通过健康检查的服务\nconst service = await balancerService.getBalancer().select('the-service-name');\n// 2. 可能取到不健康的服务\nconst service = await balancerService.getBalancer().select('the-service-name', false);\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/view-nunjucks dependency in package.json\nDESCRIPTION: This JSON snippet demonstrates how to add the @midwayjs/view-nunjucks package as a dependency in the `package.json` file.  It specifies the version of the package to be installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/view-nunjucks\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Database Driver\nDESCRIPTION: Installs the appropriate database driver for Sequelize. Choose the driver corresponding to the database you intend to connect to (e.g., MySQL, PostgreSQL, SQLite, MSSQL, Oracle).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# for MySQL or MariaDB，也可以使用 mysql2 替代\nnpm install mysql --save\nnpm install mysql2 --save\n\n# for PostgreSQL or CockroachDB\nnpm install pg --save\n\n# for SQLite\nnpm install sqlite3 --save\n\n# for Microsoft SQL Server\nnpm install mssql --save\n\n# for sql.js\nnpm install sql.js --save\n\n# for Oracle\nnpm install oracledb --save\n\n# for MongoDB(experimental)\nnpm install mongodb --save\n```\n\n----------------------------------------\n\nTITLE: Clearing Container Cache When Testing in MidwayJS\nDESCRIPTION: This snippet describes a bug fix for clearing the container cache during testing in MidwayJS. This fix guarantees that tests run in a clean environment, preventing interference from previously cached data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n- clear container cache when test ([#978](https://github.com/midwayjs/midway/issues/978)) ([a202075](https://github.com/midwayjs/midway/commit/a202075b52d281e06f1ed7c6139e968fafc960f6))\n```\n\n----------------------------------------\n\nTITLE: Add Histogram Observation - Midway.js\nDESCRIPTION: This feature adds support for users to observe histogram values within the Midway.js framework, potentially related to metrics or performance monitoring. The commit introduces the necessary code to enable observation of histogram data. No specific code is provided, but the commit hash is available.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- support user to observe histogram value ([#2401](https://github.com/midwayjs/midway/issues/2401)) ([1d8c9ad](https://github.com/midwayjs/midway/commit/1d8c9ad1cad4f8863b1b6fd899388e554deb807e))\n```\n\n----------------------------------------\n\nTITLE: Install Prometheus Socket.IO Component\nDESCRIPTION: Installs the @midwayjs/prometheus-socket-io component using npm. This component provides the necessary integration to collect metrics from Socket.IO.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nnpm install @midwayjs/prometheus-socket-io -S\n```\n\n----------------------------------------\n\nTITLE: Fixing passport strategy 'this' context\nDESCRIPTION: This commit fixes an issue where the 'this' context was missing in the passport strategy. Resolves issue #2264. The commit hash is 2e5467a7c1cd4b7aa5574ddab624861dea54346b.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Fixing OSS Cluster Typings in MidwayJS\nDESCRIPTION: This commit fixes typings for OSS (Object Storage Service) clusters within the MidwayJS framework.  It likely corrects type definitions related to cluster configurations or interactions with OSS services, which is linked to issue #1924.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\noss cluster typings ([#1924](https://github.com/midwayjs/midway/issues/1924)) ([ab2e2be](https://github.com/midwayjs/midway/commit/ab2e2beb9cadb80885ffeb3406da1fb78530f7ef))\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/view-ejs dependency in package.json\nDESCRIPTION: This JSON snippet demonstrates how to add the @midwayjs/view-ejs package as a dependency in the `package.json` file.  It specifies the version of the package to be installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/view-ejs\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting serverless app context - Bug fix\nDESCRIPTION: This snippet describes a bug fix to ensure serverless applications properly support the application context. This is essential for dependency injection and managing application state in a serverless environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Temporarily Adjusting Global Logger Levels (config.default.ts)\nDESCRIPTION: This code shows how to temporarily adjust the global log levels using the `default` section of the `midwayLogger` configuration. It includes settings for the overall logger level and specific transport levels.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      level: 'info',\n      transports: {\n        console: {\n          level: 'warn'\n        }\n      }\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Running the Midway.js application in development mode\nDESCRIPTION: This command starts the Midway.js application in development mode. It typically uses `npm scripts` defined in `package.json`, which may include features like automatic reloading on code changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/quickstart.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Fixing faas close server\nDESCRIPTION: This snippet fixes an issue where the faas server was not being closed properly. This ensures resources are released and prevents potential memory leaks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Default TypeORM Logger Configuration\nDESCRIPTION: This code snippet displays the default configuration for the `typeormLogger` in MidwayJS. The `lazyLoad` property is a new addition that allows the logger to be initialized only when it's actually used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-01-30-release-3.10.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmidwayLogger: {\n  clients: {\n    typeormLogger: {\n      lazyLoad: true,\n      fileLogName: 'midway-typeorm.log',\n      enableError: false,\n      level: 'info',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Version with pnpm\nDESCRIPTION: This command upgrades all Midway dependencies to the latest version using pnpm. The `-u` flag triggers the upgrade process. It initially performs a check and then can be used with `-w` to write changes to `package.json` and `pnpm-lock.yaml`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/version_check.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest -u\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest -u -w\n```\n\n----------------------------------------\n\nTITLE: Checking Compatibility with pnpm\nDESCRIPTION: This command checks the compatibility of installed Midway dependencies using pnpm. It executes the `midway-version` tool to identify any version conflicts or inconsistencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/version_check.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest\n```\n\n----------------------------------------\n\nTITLE: Fixing supertest typings and createFunctionApp in MidwayJS\nDESCRIPTION: This commit addresses issues related to the supertest typings and the `createFunctionApp` function within MidwayJS. It likely resolves TypeScript errors or improves the usability of these components for testing purposes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Configuring MIME Type Whitelist for Uploads in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the MIME type whitelist for the Upload component in MidwayJS. It allows specifying allowed file types and their corresponding MIME types, enhancing security by preventing the execution of potentially malicious files based on mismatched extensions and content.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-03-27-release-3.11.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  upload: {\n    // ...\n    // 仅允许下面这些文件类型可以上传\n    mimeTypeWhiteList: {\n      '.jpg': 'image/jpeg',\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Parameter Handler in TypeScript\nDESCRIPTION: This code snippet demonstrates how to register a parameter handler for the `User` decorator using `MidwayDecoratorService`. It defines a handler function that extracts the user object from the request context (`ctx.user`).  The `registerParameterHandler` function associates the `USER_KEY` with the provided handler function.  Dependencies include `koa` and `MidwayDecoratorService`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  imports: [koa],\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  decoratorService: MidwayDecoratorService;\n\n  @Logger()\n  logger;\n\n  async onReady() {\n    // ...\n\n    // 实现参数装饰器\n    this.decoratorService.registerParameterHandler(USER_KEY, (options) => {\n      // originArgs 是原始的方法入参\n      // 这里第一个参数是 ctx，所以取 ctx.user\n      return options.originArgs[0]?.user ?? {};\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Express Routing Middleware in MidwayJS\nDESCRIPTION: This snippet indicates a bug fix where Express routing middleware was not correctly applied at the controller level within a MidwayJS application. This ensures that middleware configured for routes within a controller is properly executed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- express routing middleware takes effect at the controller level ([#1364](https://github.com/midwayjs/midway/issues/1364)) ([b9272e0](https://github.com/midwayjs/midway/commit/b9272e0971003443304b0c53815be31a0061b4bd))\n```\n\n----------------------------------------\n\nTITLE: Fixing Axios Typings and Upgrade to v1 - TypeScript\nDESCRIPTION: This commit fixes the axios typings and upgrades the axios dependency to v1. This resolves issues related to incorrect or missing type definitions and ensures compatibility with the latest version of Axios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/axios/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfix axios typings and upgrade to v1 ([#2379](https://github.com/midwayjs/midway/issues/2379)) ([f0666f0](https://github.com/midwayjs/midway/commit/f0666f03c1404b7d11e8b3e8da7082a35432fe48))\n```\n\n----------------------------------------\n\nTITLE: Adding Export HSF in Midway.js\nDESCRIPTION: This commit introduces the export of HSF (High-Speed Framework) functionality within Midway.js. It extends the framework's capabilities by providing access to HSF features. The commit hash associated with this addition is 55f1e43fbb9bd442939a6bb504aa721297eaf631.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope in MidwayJS\nDESCRIPTION: This commit addresses an issue where the singleton invoke request scope was not valid in MidwayJS. This fix likely involves modifying the dependency injection container or request handling mechanism to ensure that singleton instances are correctly scoped within a request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/processAgent/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Installing Cross-Domain Component with TNPM\nDESCRIPTION: This command installs the @midwayjs/cross-domain component using TNPM, a package manager, and saves it as a project dependency. The `--save` flag ensures that the dependency is added to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cross-domain/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntnpm i @midwayjs/cross-domain --save\n```\n\n----------------------------------------\n\nTITLE: Moving Context Logger in MidwayJS\nDESCRIPTION: This commit moves the context logger to the @midwayjs/logger package and adds the createFileL feature. This aims to centralize logging functionalities and provide more control over log file creation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nmove context logger to @midwayjs/logger and add createFileL… ([#859](https://github.com/midwayjs/midway/issues/859)) ([49f568f](https://github.com/midwayjs/midway/commit/49f568f372b610494d59fa415f4f241c400c7db0))\n```\n\n----------------------------------------\n\nTITLE: Example Event (入参映射) - Alibaba Cloud API Gateway\nDESCRIPTION: This JSON represents the event payload received by a serverless function when using Alibaba Cloud API Gateway with '入参映射' (input mapping) enabled. The content-type header is missing. The body is still base64 encoded.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"eyJjIjoiYiJ9\",\n  \"headers\": {\n    \"X-Ca-Dashboard-Action\": \"DEBUG\",\n    \"X-Ca-Dashboard-Uid\": \"111111\",\n    \"X-Ca-Dashboard-Role\": \"USER\"\n  },\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"path\": \"/api/321\",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing getLocalTask Method in MidwayJS\nDESCRIPTION: This commit addresses a bug where the `getLocalTask` method was missing in the MidwayJS framework. The fix likely involves adding the missing method or correcting its implementation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/processAgent/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmissing getLocalTask method ([#1728](https://github.com/midwayjs/midway/issues/1728)) ([1c916e9](https://github.com/midwayjs/midway/commit/1c916e9f6bb8de6ea8b64f45f8043ca315396d62))\n```\n\n----------------------------------------\n\nTITLE: Injecting Entity Model with Specific DataSource\nDESCRIPTION: This code shows how to inject an entity model and associate it with a specific data source. The second parameter of `InjectEntityModel` decorator specifies the data source to use.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectEntityModel } from '@midwayjs/typeorm';\nimport { User } from './entity/user.entity';\n\nexport class XXX {\n\n  @InjectEntityModel(User, 'test')\n  testUserModel: Repository<User>;\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Export= with Named Export (Incorrect)\nDESCRIPTION: Shows the incorrect use of mixing `export =` and `export const`. If there are other configurations after `export =`, the value of `export =` will be ignored.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/env_config.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport = {\n  a: 1\n}\nexport const b = 2;\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const b = 2;\n```\n\n----------------------------------------\n\nTITLE: Install Upload Dependencies (npm)\nDESCRIPTION: This command installs the necessary dependencies for file uploads in a Midway Hooks project: @midwayjs/upload and @midwayjs/hooks-upload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/upload.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @midwayjs/upload @midwayjs/hooks-upload\n```\n\n----------------------------------------\n\nTITLE: Installing Database Driver (SQLite Example)\nDESCRIPTION: This command installs the SQLite driver for Sequelize.  This driver is needed to connect to a SQLite database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# for SQLite\nnpm install sqlite3 --save\n```\n\n----------------------------------------\n\nTITLE: Initializing Data in the Memory Store\nDESCRIPTION: This code demonstrates initializing the `MemoryStore` with some data within the `onReady` lifecycle hook of the `MainConfiguration` class. It injects the `MemoryStore` and uses its `save` method to store key-value pairs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_decorator.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n// 入口实例化，并保存一些数据\nimport { Configuration, App, Inject } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n  imports: [koa],\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  @Inject()\n  store: MemoryStore;\n\n  async onReady() {\n    // ...\n\n    // 初始化一些数据\n    store.save('aaa', 1);\n    store.save('bbb', 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 2.x Lifecycle Features in Midway.js\nDESCRIPTION: This commit adds new lifecycle features to Midway.js 2.x. The update includes enhancements to the component initialization and destruction processes. The commit hash is 7313ab804091fd410b1b3118ea41f18cf05fb01f.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Starting Local Development Server - Yarn\nDESCRIPTION: Starts a local development server for the Midway.js website using Yarn. This allows for live previewing of changes without restarting the server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Update User with Validate Decorator in Controller (Old)\nDESCRIPTION: This code snippet demonstrates how to update a user in a controller using the `@Validate` decorator in older versions of MidwayJS. It showcases the explicit validation step required before processing the request body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-01-30-release-3.10.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n\n  @Post('/')\n  @Validate()\n  async updateUser(@Body() user: UserDTO ) {\n    // user.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ws Dependency in MidwayJS\nDESCRIPTION: This commit updates the 'ws' dependency to version v8.9.0. Updating dependencies ensures that the project benefits from the latest bug fixes, security patches, and performance improvements provided by the dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n**deps:** update dependency ws to v8.9.0 ([#2333](https://github.com/midwayjs/midway/issues/2333)) ([8a84a10](https://github.com/midwayjs/midway/commit/8a84a109b0a304c3f75db6cfb6dcf11e6d3edd78))\n```\n\n----------------------------------------\n\nTITLE: Enable Upload Component in configuration.ts\nDESCRIPTION: Enables the `@midwayjs/upload` component in the `configuration.ts` file of the backend directory. This step is crucial for integrating the upload functionality into the Midway application.  It also imports necessary modules from `@midwayjs/hooks` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/upload.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { createConfiguration, hooks } from '@midwayjs/hooks';\nimport * as Koa from '@midwayjs/koa';\n+ import * as upload from '@midwayjs/upload';\n\n/**\n * setup midway server\n */\nexport default createConfiguration({\n  imports: [\n    Koa,\n    hooks(),\n+   upload\n  ],\n  importConfigs: [{ default: { keys: 'session_keys' } }],\n});\n```\n\n----------------------------------------\n\nTITLE: Remove sourcemap and src in dist\nDESCRIPTION: This commit removes sourcemap files and src directory from the distributed package. This reduces the package size and improves security by preventing source code exposure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nremove sourcemap and src in dist ([#645](https://github.com/midwayjs/midway/issues/645)) ([e561a88](https://github.com/midwayjs/midway/commit/e561a88f4a70af15d4be3d5fe0bd39487677d4ce))\n```\n\n----------------------------------------\n\nTITLE: Testing with Replaced Service (IoC)\nDESCRIPTION: This snippet shows how to test using the replaced service with IoC. First, it creates and prepares the application, binds the mock service implementation to the original service ID using `app.applicationContext.bindClass`, creates a mock context, retrieves the service and then tests the service logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test_more.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mm, assert } from 'midway-mock';\nimport { IUserService } from '../../src/interface';\nimport { MockUserService } from '../service/user';\n\ndescribe('test/service/user.test.ts', () => {\n  it('#getUser', async () => {\n    const app = mm.app();\n    await app.ready();\n\n    // 用同样的 id 替换真的 service，后续逻辑和其他测试相同\n    app.applicationContext.bindClass(MockUserService);\n\n    // 创建匿名上下文\n    const ctx = app.mockContext();\n    // 取出 userService\n    const user = await ctx.requestContext.getAsync<IUserService>('userService');\n    const data = await user.getUser({ id: 1 });\n    assert(data.id === 1);\n    assert(data.username === 'mockedName');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Cleanup with destroyListener in TypeScript\nDESCRIPTION: This code snippet extends the previous example by adding a destroyListener method to clean up resources. Specifically, it clears the interval timer that was set in the onData method. This ensures that the timer is stopped when the listener is no longer needed, preventing memory leaks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_listener.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/listener/memory.listner.ts\nimport { DataListener, Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MemoryDataListener extends DataListener<string> {\n  private intervalHandler;\n\n  // Initialize data\n  initData() {\n    return 'hello' + Date.now();\n  }\n\n  // Update data\n  onData(setData) {\n    this.intervalHandler = setInterval(() => {\n      setData('hello' + Date.now());\n    }, 1000);\n  }\n\n  // Clean up resources\n  async destroyListener() {\n    // Turn off timer\n    clearInterval(this.intervalHandler);\n    // Other cleanup, close sdk, etc\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Bug fix: Swagger UI JSON path replacement\nDESCRIPTION: This commit addresses a bug related to Swagger UI where the JSON path was incorrectly generated or resolved. The fix ensures that the Swagger UI correctly displays and interacts with the API documentation. The fix is identified by commit hash 0f3728d.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cross-domain/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Install Consul Dependencies (Shell)\nDESCRIPTION: Installs the @midwayjs/consul package as a dependency and @types/consul as a dev dependency using npm. These dependencies are required to integrate Consul with your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/usage.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @midwayjs/consul -S\nnpm i @types/consul -D\n```\n\n----------------------------------------\n\nTITLE: Get Http Server from Koa Framework\nDESCRIPTION: This TypeScript code demonstrates how to retrieve the underlying HTTP server instance from the Koa framework within a MidwayJS application.  The `getServer()` method allows access to the raw HTTP server for advanced configurations or operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n\t// ...\n})\nexport class MainConfiguration {\n  @Inject()\n  framework: koa.Framework;\n\n  async onServerReady(container) {\n    const server = this.framework.getServer();\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Entity Class Definition\nDESCRIPTION: This code defines example entity classes (`SimpleUser` and `User`) with properties annotated using pseudo-decorators (`@Entity`, `@Column`). These classes represent database tables.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/entity/user.entity.ts\n// 这里是伪代码，装饰器需要自行实现\n@Entity()\nexport class SimpleUser {\n  @Column()\n  name: string;\n}\n\n@Entity()\nexport class User {\n  @Column()\n  name: string;\n\n  @Column()\n  age: number;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Tests Serially (Bash)\nDESCRIPTION: This bash command executes the test suite serially using `midway-bin test` with TypeScript support enabled (`--ts`) and the `--runInBand` option.  It forces the test suite to run in a single process instead of parallel processes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin test --ts --runInBand\n$ midway-bin cov --ts --runInBand\n```\n\n----------------------------------------\n\nTITLE: Adding additional schema type descriptions with ApiExtraModel in TypeScript\nDESCRIPTION: This snippet demonstrates how to add additional schema type descriptions using the `@ApiExtraModel` decorator to a Controller or Model Class in MidwayJS with Swagger.  This is useful when you don't want to define the model type by type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiExtraModel(TestExtraModel)\n@Controller()\nclass HelloController {\n  @Post('/:id', { summary: 'test'})\n  @ApiResponse({\n    status: 200,\n    content: {\n      'application/json ': {\n        schema: {\n          properties: {\n            data: { '$ref': getSchemaPath(TestExtraModel)}\n          }\n        }\n      }\n    }\n  })\n  async create(@Body() createCatDto: CreateCatDto, @Param('id') id: number): Promise<Cat> {\n    return this.catsService.create(createCatDto);\n  }\n}\n\n// or\n@ApiExtraModel(TestExtraModel)\nclass TestModel {\n  @ApiProperty({\n    item: {\n      $ref: getSchemaPath(TestExtraModel)\n    },\n    description: 'The name of the Catage'\n  })\n  one: TestExtraModel;\n}\n```\n\n----------------------------------------\n\nTITLE: tslint-midway-contrib Installation\nDESCRIPTION: Installs the `tslint-midway-contrib` package as a development dependency. This package provides basic tslint rules for Typescript applications in Midway.js.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n  \"devDependencies\": {\n    \"tslint-midway-contrib\": \"1\",\n  }\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and Function App Creation in MidwayJS\nDESCRIPTION: This commit addresses type definition issues with Supertest and the createFunctionApp functionality in MidwayJS.  It focuses on improving the type safety and usability of Supertest for testing function applications, and is associated with issue #1642.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Using Casbin for Authorization in MidwayJS (TypeScript)\nDESCRIPTION: This code snippet illustrates how to use Casbin, a popular authorization library, in MidwayJS with TypeScript. It demonstrates using decorators like `@UseGuard` and `@UsePermission` to define access control rules for controller methods. It shows the integration with resources and actions for fine-grained permission management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-10-12-release-3-6.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, UseGuard } from '@midwayjs/decorator';\nimport { AuthActionVerb, AuthGuard, AuthPossession, UsePermission } from '@midwayjs/casbin';\nimport { Resource } from './resouce';\n\n@Controller('/')\nexport class HomeController {\n\n  @UseGuard(AuthGuard)\n  @UsePermission({\n    action: AuthActionVerb.READ,\n    resource: Resource.USER_ROLES,\n    possession: AuthPossession.ANY\n  })\n  @Get('/users')\n  async findAllUsers() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending gRPC Metadata from Server (TypeScript)\nDESCRIPTION: This code demonstrates how to send gRPC metadata from a server using the `ctx.sendMetadata` method. It shows how to create a `Metadata` object, add key-value pairs, and send it with the response. It also shows how to access client-provided metadata using `this.ctx.metadata`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MSProviderType,\n  Provider,\n  GrpcMethod,\n} from '@midwayjs/core';\nimport { helloworld } from '../domain/helloworld';\nimport { Context, Metadata } from '@midwayjs/grpc';\n\n/**\n * 实现 helloworld.Greeter 接口的服务\n */\n@Provider(MSProviderType.GRPC, { package: 'helloworld' })\nexport class Greeter implements helloworld.Greeter {\n\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod()\n  async sayHello(request: helloworld.HelloRequest) {\n\n    // 客户端传递的元数据\n    console.log(this.ctx.metadata);\n\n    // 创建元数据\n    const meta = new Metadata();\n    this.ctx.metadata.add('xxx', 'bbb');\n    this.ctx.sendMetadata(meta);\n\n    return { message: 'Hello ' + request.name };\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Health Status with MidwayHealthService - TypeScript\nDESCRIPTION: This code demonstrates how to use `MidwayHealthService` to get the status of health checks. It retrieves the results of health checks and logs them, which are executed from the `onHealthCheck` methods defined in components. Dependencies: @midwayjs/core\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayHealthService ,Configuration, Inject } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  healthService: MidwayHealthService;\n\n  async onServerReady() {\n    setInterval(() => {\n      const results = await this.healthService.getStatus();\n      \n      // console.log(results);\n      // =>\n      // {\n      //   \"status\": false\n      //   \"namespace\": \"redis\",\n      //   \"reason\": \"health check timeout\",\n      //   \"results\": [\n      //      {\n      //        \"status\": false\n      //        \"reason\": \"health check timeout\",\n      //        \"namespace\": \"redis\"\n      //      }\n      //    ]\n      // }\n      \n    }, 1000);\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Swagger - ApiProperty with oneOf example\nDESCRIPTION: Demonstrates the usage of ApiProperty with the `oneOf` parameter to define a property that can be one of multiple types.  This example illustrates creating a class Photo with properties that accept either a single string or an array of strings, and either a single Album or an array of Albums.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-05-07-release-3.16.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@midwayjs/swagger';  \n\nclass Album {\n  @ApiProperty()\n  id: number;\n\n  @ApiProperty()\n  name: string;\n}\n\nclass Photo {\n  @ApiProperty({\n    oneOf: [\n      { type: 'string' },\n      {\n        type: 'array',\n        items: {\n          type: 'string',\n        },\n      },\n    ],\n  })\n  name: string | string[];\n\n  @ApiProperty({\n    oneOf: [\n      { type: Album },\n      {\n        type: 'array',\n        items: {\n          type: () => Album,\n        },\n      },\n    ],\n  })\n  album: Album | Album[];\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Redis Client Readiness in Unit Tests\nDESCRIPTION: This commit resolves an issue where the Redis client was being used before it was fully ready, especially during unit tests in MidwayJS. This fix ensures that the client is ready before any operations are performed, preventing errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Controller with allowFieldsDuplication enabled\nDESCRIPTION: This code shows how fields with the same name are processed after enabling `allowFieldsDuplication`. Fields with the same names will be grouped into an array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/upload.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Inject, Post, Files, Fields } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Post('/upload')\n  async upload(@Files() files, @Fields() fields) {\n    /*\n    fields = {\n    \tname: ['name1', 'name2'],\n    \totherName: 'nameOther'\n    \t// ...\n    }\n\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Directories\nDESCRIPTION: This code snippet demonstrates how to configure root directories for views. It defines a `rootDir` object with a default directory and an additional directory. This allows the application to search for view templates in multiple directories.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default appInfo => {\n  const appDir = appInfo.appDir;\n  return {\n    view: {\n      rootDir: {\n        default: `${appDir}/view`,\n        anotherDir: `${appDir}/view2`\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Check Script (npm)\nDESCRIPTION: This command executes the `check` script defined in the `package.json` file, which in turn runs the `luckyeye` error checking tool.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/luckyeye.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run check\n```\n\n----------------------------------------\n\nTITLE: Fixing nunjucks local cache in MidwayJS\nDESCRIPTION: Addresses an issue related to local caching within the Nunjucks view engine in the MidwayJS framework. This ensures that templates are properly cached and updated, improving performance and preventing stale content from being served.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-nunjucks/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** Bug Fixes\n\n- nunjucks local cache ([#1774](https://github.com/midwayjs/midway/issues/1774)) ([413ec44](https://github.com/midwayjs/midway/commit/413ec44ea309077ce482fe55db3819aaab45894a)) */\n```\n\n----------------------------------------\n\nTITLE: Adding Tenant Component to package.json\nDESCRIPTION: This JSON snippet demonstrates how to add the `@midwayjs/tenant` package as a dependency in your `package.json` file.  After adding this, you need to reinstall the dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tenant.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/tenant\": \"^3.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IPipelineHandler Interface Definition\nDESCRIPTION: Defines the interface for the Pipeline handler, which provides methods for executing valves in different modes (parallel, series, concat, waterfall).  Each method accepts IPipelineOptions and returns a Promise resolving to IPipelineResult.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IPipelineHandler {\n  /**\n   * 并行执行，使用 Promise.all\n   * @param opts 执行参数\n   */\n  parallel<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * 并行执行，最终 result 为数组\n   * @param opts 执行参数\n   */\n  concat<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * 串行执行，使用 foreach await\n   * @param opts 执行参数\n   */\n  series<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * 串行执行，使用 foreach await，最终 result 为数组\n   * @param opts 执行参数\n   */\n  concatSeries<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n  /**\n   * 串行执行，但是会把前者执行结果当成入参，传入到下一个执行中去，最后一个执行的 valve 结果会被返回\n   * @param opts 执行参数\n   */\n  waterfall<T>(opts: IPipelineOptions): Promise<IPipelineResult<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing COS Config Definition & Doc Update in MidwayJS\nDESCRIPTION: This commit fixes the configuration definition for COS (Cloud Object Storage) and updates the documentation for version 3.x in MidwayJS.  It ensures correct configuration and provides up-to-date documentation for using COS with MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- cos config definition & 3.x doc update ([#1515](https://github.com/midwayjs/midway/issues/1515)) ([0ac7ac5](https://github.com/midwayjs/midway/commit/0ac7ac5805b7ab8873f8792fc1712a74e3223172))\n```\n\n----------------------------------------\n\nTITLE: Creating a Container Typescript\nDESCRIPTION: This code snippet shows how to create a new instance of the `Container` class from the `injection` package. This container is the core component for managing object dependencies and providing instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Container } from 'injection';\nconst container = new Container();\n```\n\n----------------------------------------\n\nTITLE: Axios Dependency in package.json - JSON\nDESCRIPTION: This snippet shows the `dependencies` section of a `package.json` file, including the `@midwayjs/axios` package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/axios\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Removing reset bootstrap logger - Bug fix\nDESCRIPTION: This snippet describes a bug fix that removes the reset bootstrap logger functionality. This change may be related to stabilizing the logger and preventing unexpected behavior during the bootstrap process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Configuring CLI Plugins (YAML)\nDESCRIPTION: This snippet demonstrates how to configure CLI plugins in the `f.yml` file. Plugins can be either npm packages or local directories. The configuration format is `${ 'npm' | 'local' }:${ provider | | ''}:${ pluginName | | path }`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  -npm::test-plugin-model\n  -local::./test/plugin\n```\n\n----------------------------------------\n\nTITLE: Adding COS Component - Javascript\nDESCRIPTION: This feature adds a COS (Cloud Object Storage) component to the MidwayJS framework. This component allows developers to easily integrate with cloud storage services, enabling them to store and retrieve files in the cloud.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nc18e597d55a6452188cc7daecd0062bf161028cc\n```\n\n----------------------------------------\n\nTITLE: Mocking object in Midway Mock\nDESCRIPTION: This commit provides a fix related to mocking objects within the midway-mock package. It ensures that objects are mocked correctly, allowing for accurate and reliable testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_53\n\nLANGUAGE: None\nCODE:\n```\n1d867ed\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Dependency with NPM\nDESCRIPTION: This command installs the `@midwayjs/prometheus` package as a dependency to your MidwayJS project. This enables metric collection for your application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/prometheus@3 --save\n```\n\n----------------------------------------\n\nTITLE: Fixing Merge Bug in Midway.js\nDESCRIPTION: This commit addresses a merge conflict or issue within the Midway.js project. The provided commit hash links to the specific change that resolves the problem. The fix is likely related to code integration or conflict resolution during development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_38\n\nLANGUAGE: Other\nCODE:\n```\n7f41fc9\n```\n\n----------------------------------------\n\nTITLE: Midway.js script configuration with mwtsc\nDESCRIPTION: This JSON snippet shows example configurations within the \"scripts\" section of a package.json file, using mwtsc for development and tsc for building. It demonstrates how to use cross-env for setting environment variables.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"scripts\": {\n     \"dev\": \"cross-env NODE_ENV=local mwtsc --watch --run @midwayjs/mock/app\",\n     \"build\": \"cross-env rm -rf dist && tsc\"\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Midway Task Component\nDESCRIPTION: This commit introduces a new task component to MidwayJS. This component likely provides functionality for managing and scheduling tasks within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nadd midway task component ([#995](https://github.com/midwayjs/midway/issues/995)) ([befb81d](https://github.com/midwayjs/midway/commit/befb81dee90f01a20bba2c1835e8685cf85a76e7))\n```\n\n----------------------------------------\n\nTITLE: Fixing i18n Cookie Setting\nDESCRIPTION: This bug fix addresses an issue with setting i18n cookies in Midway.js. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ni18n cookie set ([#1621](https://github.com/midwayjs/midway/issues/1621)) ([582dd97](https://github.com/midwayjs/midway/commit/582dd97d35b91837481e7fca558f68f123210027))\n```\n\n----------------------------------------\n\nTITLE: Throwing a MidwayError instance\nDESCRIPTION: This snippet demonstrates how to instantiate and throw a MidwayError with a custom message in a MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/custom_error.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayError } from '@midwayjs/core';\n\n// ...\n\nasync findAll() {\n  throw new MidwayError('my custom error');\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Egg Application Using Hook\nDESCRIPTION: This commit modifies the way Egg applications are loaded, using a hook mechanism. This approach improves the integration between MidwayJS and Egg.js, ensuring proper application initialization and lifecycle management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Setting and Getting Consul Configuration Values in MidwayJS\nDESCRIPTION: This code demonstrates how to set and get configuration values in Consul using the Consul client in a MidwayJS controller. It injects the Consul client, sets a key-value pair (`name: juhai`) using the `kv.set` method, and retrieves the same value. The commented-out lines show how to retrieve the value using `kv.get`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/consul.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/decorator';\nimport * as Consul from 'consul';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject('consul:consul')\n  consul: Consul.Consul;\n\n  @Get('/')\n  async home() {\n    await this.consul.kv.set(`name`, `juhai`);\n    // let res = await this.consul.kv.get(`name`);\n    // console.log(res);\n    return 'Hello Midwayjs!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/http-proxy via npm\nDESCRIPTION: This command installs the @midwayjs/http-proxy component as a project dependency using npm. The --save flag ensures the package is added to the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/http-proxy.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/http-proxy@3 --save\n```\n\n----------------------------------------\n\nTITLE: Supporting Entry File in Bootstrap\nDESCRIPTION: This commit adds support for specifying an entry file during the bootstrap process. This allows for more flexible configuration and customization of application startup.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport entry file in bootstrap ([#819](https://github.com/midwayjs/midway-faas/issues/819)) ([49a5ff6](https://github.com/midwayjs/midway-faas/commit/49a5ff662134bdd42dc3a80738b44a05138f8f7c))\n```\n\n----------------------------------------\n\nTITLE: Mocking Object Method in MidwayJS with @midwayjs/mock\nDESCRIPTION: This snippet demonstrates how to use `mockProperty` to mock a method of a plain JavaScript object. It overrides the `getUser` method of the object `a` to return 'midway'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  const a = {};\n  mockProperty(a, 'getUser', async () => {\n    return 'midway';\n  });\n\n  // a.getUser() => 'midway'\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest typings\nDESCRIPTION: This commit addresses typings for Supertest and createFunctionApp. Related to issue #1642. Commit hash is 484f4f41b3b9e889d4d285f4871a0b37fa51e73f.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster\nDESCRIPTION: This code demonstrates how to configure bullmq to connect to a Redis Cluster.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport Redis from 'ioredis';\n\nconst clusterOptions = {\n  enableReadyCheck: false,\n  retryDelayOnClusterDown: 300,\n  retryDelayOnFailover: 1000,\n  retryDelayOnTryAgain: 3000,\n  slotsRefreshTimeout: 10000,\n  maxRetriesPerRequest: null\n}\n\nconst redisClientInstance = new Redis.Cluster([\n  {\n    port: 7000,\n    host: '127.0.0.1'\n  },\n  {\n    port: 7002,\n    host: '127.0.0.1'\n  },\n], clusterOptions);\n\nexport default {\n  bullmq: {\n    defaultConnection: redisClientInstance,\n    defaultPrefix: '{midway-bullmq}',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Performance by Moving Body Patch\nDESCRIPTION: This commit improves performance by moving the body patch operation outside of middleware in MidwayJS. This optimization likely reduces overhead and improves request processing speed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmove body patch without middleware ([#2209](https://github.com/midwayjs/midway/issues/2209)) ([97c9301](https://github.com/midwayjs/midway/commit/97c930107c6fa93d8209516b15348c988848ca3d))\n```\n\n----------------------------------------\n\nTITLE: Self-initialize class with @Autoload and @Init decorators\nDESCRIPTION: This code snippet demonstrates how to use the @Autoload decorator in MidwayJS to enable a class to initialize itself automatically. The @Init decorator marks the method to be executed during the class initialization. This approach eliminates the need for explicit initialization in the onReady method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/auto_run.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Autoload, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Autoload()\n@Scope(ScopeEnum.Singleton)\nexport class RedisErrorListener {\n  @Init()\n  async init() {\n    const redis = new Redis();\n    redis.on('xxx', () => {\n      // ...\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Response and Header Handling in MidwayJS\nDESCRIPTION: This commit addresses an issue related to returning the ctx.body and setting headers after sending the response in MidwayJS. The fix ensures that the ctx.body is properly returned and headers are correctly set after the response has been sent, preventing potential errors or unexpected behavior. It enhances the stability and correctness of response handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n4c8e740865ece6a62176144a877863c1d5317d65\n```\n\n----------------------------------------\n\nTITLE: Adding Task Component\nDESCRIPTION: This commit introduces the Midway Task component. This new component facilitates the management and execution of background tasks within MidwayJS applications, as described in issue #995.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nbefb81dee90f01a20bba2c1835e8685cf85a76e7\n```\n\n----------------------------------------\n\nTITLE: Checking Package Versions with `midway-version` (npm)\nDESCRIPTION: This command is used to check the versions of Midway packages installed in the project. It helps identify potential version conflicts or outdated packages that may need updating. This snippet utilizes `npx` to execute the `midway-version` package without requiring global installation, simplifying version checks for community users.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_update_midway.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Community user\n$ npx midway-version\n# Internal user\n$ tnpx @ali/midway-version\n```\n\n----------------------------------------\n\nTITLE: Configuration with object mode in ESM\nDESCRIPTION: In ESM, configuration imports must use the object mode. This snippet showcases how to import configuration files as objects within a MidwayJS configuration. It highlights the structure needed to import default and environment-specific configurations correctly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/esm.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport DefulatConfig from './config/config.default.js';\nimport UnittestConfig from './config/config.unittest.js';\n\n@Configuration({\n  importConfigs: [\n    {\n      default: DefulatConfig,\n      unittest: UnittestConfig,\n    },\n  ],\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Messages to multiple room clients except the sender\nDESCRIPTION: This example shows sending a socket message to clients in multiple rooms ('game1' and 'game2'), excluding the sender.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.to('game1').to('game2').emit('nice game', \"let's play a game (too)\");\n```\n\n----------------------------------------\n\nTITLE: Fixing OSS cluster typings in MidwayJS\nDESCRIPTION: This code snippet fixes the typings for OSS in a clustered environment within the MidwayJS framework. The fix addresses issue #1924 and includes a commit hash for the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/oss/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- oss cluster typings ([#1924](https://github.com/midwayjs/midway/issues/1924)) ([ab2e2be](https://github.com/midwayjs/midway/commit/ab2e2beb9cadb80885ffeb3406da1fb78530f7ef))\n```\n\n----------------------------------------\n\nTITLE: Modifying Development Port (@midwayjs/cli)\nDESCRIPTION: This code snippet shows how to modify the development server port in the `package.json` file when using `@midwayjs/cli`. It sets the `--port` option in the `dev` script.  The `cross-env` package ensures environment variables work cross-platform.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quickstart.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"scripts\": {\n  //...\n  \"dev\": \"cross-env NODE_ENV=local midway-bin dev --ts --port=6001\",\n},\n```\n\n----------------------------------------\n\nTITLE: Fixing supertest typings in Midway.js\nDESCRIPTION: This commit addresses typing issues related to supertest, a library for testing HTTP servers, and createFunctionApp within Midway.js. This ensures that the typings are correct and consistent, improving the developer experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n484f4f41b3b9e889d4d285f4871a0b37fa51e73f\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/static-file to package.json\nDESCRIPTION: This JSON snippet shows how to add @midwayjs/static-file as a dependency in `package.json`. This allows npm to install and manage the package. The snippet includes both the dependencies and devDependencies sections.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/static_file.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/static-file\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Admin Configuration with Instance Reuse\nDESCRIPTION: This TypeScript code demonstrates how to reuse an existing Kafka instance for an Admin client by referencing its consumer configuration using the `kafkaInstanceRef` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          clientId: 'my-app',\n          brokers: ['localhost:9092'],\n        },\n      }\n    },\n    admin: {\n      clients: {\n        admin1: {\n          kafkaInstanceRef: 'sub1',\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding egg-scripts to package.json (JSON)\nDESCRIPTION: This JSON snippet adds `start` and `stop` scripts to the `package.json` file for deploying a MidwayJS application using `egg-scripts`. The `start` script starts the application in daemon mode using `egg-scripts start`, and the `stop` script stops the application using `egg-scripts stop`. Requires `egg-scripts` package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"egg-scripts start --daemon --title=********* --framework=@midwayjs/web\",\n    \"stop\": \"egg-scripts stop --title=*********\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Routes with String/Regex/Array\nDESCRIPTION: This snippet demonstrates how to match routes using strings, regular expressions, or arrays. It assigns the values to the `match` property of the middleware class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/middleware.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Middleware, IMiddleware } from '@midwayjs/core';\nimport { NextFunction, Context } from '@midwayjs/koa';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n  // 字符串\n  match = '/api/index';\n\n  // 正则\n  match = /^\\/api/;\n\n  // 数组\n  match = ['/api/index', '/api/user', /^\\/openapi/, ctx => {\n    if (ctx.path === '/api/index') {\n      return true;\n    }\n  }];\n}\n```\n\n----------------------------------------\n\nTITLE: Midway.js HTTP Testing with Mock\nDESCRIPTION: This TypeScript code demonstrates how to write HTTP tests for a Midway.js function using the `@midwayjs/mock` package. It uses `createFunctionApp` to create a function application, `createHttpRequest` to make HTTP requests, and `assert` or `expect` to verify the results. The `close` method cleans up the application after the test.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_aggr.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework } from '@midwayjs/serverless-app';\nimport * as assert from 'assert';\n\ndescribe('test/index.test.ts', () => {\n  it('should get /', async () => {\n    // create app\n    const app = await createFunctionApp<Framework>();\n\n    // make request\n    const result = await createHttpRequest(app).get('/');\n\n    // use expect by jest\n    expect(result.status).toBe(200);\n    expect(result.text).toBe('Hello Midwayjs');\n\n    const result2 = await createHttpRequest(app).get('/get').query({ name: 123 });\n    // or use assert\n    assert.deepStrictEqual(result2.status, 200);\n    assert.deepStrictEqual(result2.body.name, '123');\n\n    // close app\n    await close(app);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling the Egg static plugin\nDESCRIPTION: This TypeScript snippet shows how to disable the default static plugin in an Egg (@midwayjs/web) application.  This prevents conflicts when using `@midwayjs/static-file` for static file serving by setting `static: false` in the `src/config/plugin.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/static_file.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/plugin.ts\nimport { EggPlugin } from 'egg';\nexport default {\n   // ...\n   static: false,\n} as EggPlugin;\n```\n\n----------------------------------------\n\nTITLE: Combining @Body and @Query Decorators\nDESCRIPTION: This code demonstrates how to use both `@Body` and `@Query` decorators within the same method. The `updateUser` method retrieves the entire request body as a `User` object and also extracts the `pageIdx` from the query parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Post('/')\nasync updateUser(@Body(ALL) user: User, @Query() pageIdx: number): Promise<User> {\n  // user 从 body 获取\n  // pageIdx 从 query 获取\n}\n```\n\n----------------------------------------\n\nTITLE: Extend Koa Framework (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to extend the `@midwayjs/koa` framework within a MidwayJS component. It imports `@midwayjs/koa`, defines `MyKoaConfiguration`, and injects the Koa `Framework` to add middleware, filters, and extend the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/component_development.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n  namespace: 'myKoa',\n  imports: [koa]\n})\nexport class MyKoaConfiguration {\n  @Inject()\n  framework: koa.Framework;\n\n  async onReady() {\n    // Add middleware, app.useMiddleware in koa actually proxy the framework method\n    this.framework.useMiddleware(/* ... */);\n\n    // Add filter, app.useFilter in koa actually proxy the framework method\n    this.framework.useFilter(/* ... */);\n\n    // koa's own expansion capabilities, such as expansion context\n    const app = this.framework.getApplication();\n    Object.defineProperty(app.context, 'user', {\n      get() {\n        // ...\n        return 'xxx';\n      },\n      enumerable: true\n    });\n    // ...\n  }\n\n  async onServerReady() {\n    const server = this.framework.getServer();\n    // server.xxxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying outDir in tsconfig.json for Compilation\nDESCRIPTION: This code snippet shows how to modify the `tsconfig.json` file to change the output directory (`outDir`) to `build`. It also includes an `exclude` configuration to prevent the build directory from being included in the compilation process. The `compileOnSave` property enables automatic compilation on file save.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/change_start_dir.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compileOnSave\": true\n  \"compilerOptions\": {\n    // ...\n    \"outDir\": \"build\"\n  },\n  \"exclude\": {\n    \"build\",\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dev Dependencies in package.json (JSON)\nDESCRIPTION: This JSON snippet shows the updated versions of development dependencies for the Midway.js project after removing Node v12 support. It includes @midwayjs/cli, @types/jest, jest, ts-jest and typescript. These dependencies are updated to versions compatible with Node.js versions greater than v12.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-11-04-remove-node-v12.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n  \"@midwayjs/cli\": \"^2.0.0\",\n  \"@types/jest\": \"^29.2.0\",\n  \"jest\": \"^29.2.2\",\n  \"ts-jest\": \"^29.0.3\",\n  \"typescript\": \"~4.8.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Development Dependencies (JSON)\nDESCRIPTION: This snippet shows the updated development dependencies in the `package.json` file for Serverless v2.0. Key changes include the addition of `@midwayjs/cli`, `@midwayjs/mock`, `@midwayjs/serverless-app`, `@midwayjs/fcli-plugin-fc`, and the replacement of `@types/mocha` with `@types/jest`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_v1_upgrade_serverless_v2.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"devDependencies\": {\n    \"@midwayjs/cli\": \"^1.2.45\",\n    \"@midwayjs/mock\": \"^2.8.7\",\n    \"@midwayjs/serverless-app\": \"^2.8.7\",\n    \"@midwayjs/fcli-plugin-fc\": \"^1.2.45\",\n    \"@types/jest\": \"^26.0.10\",\n    \"@types/node\": \"^14\",\n    \"typescript\": \"^4.0.0\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Adapter Dependencies\nDESCRIPTION: This bash command shows how to install the required dependencies for using the Redis adapter with Casbin.  It installs both the `@midwayjs/casbin-redis-adapter` and `@midwayjs/redis` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/casbin-redis-adapter @midwayjs/redis --save\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy in Koa with MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to configure the `proxy` setting in a Koa application within MidwayJS. It enables the `proxy` option and optionally sets the `proxyIpHeader` to a custom value. This is important when the application is behind a reverse proxy like Nginx.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    proxy: true,\n  },\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    proxy: true,\n    proxyIpHeader: 'X-Forwarded-Host'\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/passport and dependencies\nDESCRIPTION: Install the @midwayjs/passport package along with its dependencies passport and the type definitions for passport. This allows for authentication capabilities within a Midway.js application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm i @midwayjs/passport passport --save\n$ npm i @types/passport --save-dev\n```\n\n----------------------------------------\n\nTITLE: Modifying Application Base Directory\nDESCRIPTION: Specifies the root directory of the application. This is typically the folder containing the `package.json` file. The default is `process.cwd()`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ midway-bin dev --ts --baseDir=./app\n```\n\n----------------------------------------\n\nTITLE: Install JWT Component\nDESCRIPTION: This command installs the `@midwayjs/jwt` component using npm. This is the first step to using JWT in your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/jwt.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/jwt@3 --save\n```\n\n----------------------------------------\n\nTITLE: Fixing typings missing issue in MidwayJS\nDESCRIPTION: This commit fixes an issue where typings were missing in the MidwayJS framework. This resolves potential TypeScript compilation errors and improves the developer experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\ntypings missing ([#1863](https://github.com/midwayjs/midway/issues/1863)) ([7d684a0](https://github.com/midwayjs/midway/commit/7d684a0b58c2598b3f242343a5c3797e47ba7efd))\n```\n\n----------------------------------------\n\nTITLE: NPM Script for Performance Analysis (JSON)\nDESCRIPTION: This JSON snippet showcases the addition of a `perf-init` command for startup performance analysis in MidwayJS development environments.  It demonstrates how to integrate the `perf-init` flag into the `dev` script of the `package.json` file.  This allows developers to profile the application's startup performance using `mwtsc` and the `@midwayjs/mock/app.js` entry point.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-11-08-release-3.19.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=local mwtsc --watch --run @midwayjs/mock/app.js --perf-init\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Captcha Dependency - package.json\nDESCRIPTION: Adds the @midwayjs/captcha component as a dependency in your project's package.json file. This allows npm to install the component when running npm install.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/captcha.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/captcha\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone via Environment Variable (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the timezone for an Alibaba Cloud Function Compute environment within the `f.yml` configuration file. The TZ environment variable is set to 'Asia/Shanghai' to align with the desired timezone.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_aliyun_faq.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: aliyun\n  runtime: nodejs12\n\tenvironment:\n  \tTZ: 'Asia/Shanghai'\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and createFunctionApp in MidwayJS\nDESCRIPTION: This code snippet addresses type definitions for supertest and fixes issues related to createFunctionApp. This ensures proper testing and setup of function applications within the MidwayJS framework. The commit associated with this fix is 484f4f4.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/jwt/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables (JavaScript)\nDESCRIPTION: This snippet demonstrates how to export variables in JavaScript using `exports`. The `exports` object is used to attach functions and other values that should be made available from the module.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// js 写法\nfunction alert() {}\nexports.alert = alert;\nexports.config = { a: 1 };\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces a new 'guard' feature in the MidwayJS framework.  The specific functionality and implementation details of the guard are not evident from this snippet, but it is associated with issue #2345.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple COS Clients\nDESCRIPTION: This code snippet illustrates how to configure multiple COS clients within the `config.default.ts` file. The `cos` property contains a `clients` object, where each key (e.g., `instance1`, `instance2`) represents a different COS client with its own `SecretId` and `SecretKey`.  These placeholders should be replaced with actual credentials.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cos.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  cos: {\n    clients: {\n      instance1: {\n        SecretId: '***********',\n        SecretKey: '***********',\n      },\n      instance2: {\n        SecretId: '***********',\n        SecretKey: '***********',\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Sticky Session Configuration\nDESCRIPTION: This snippet shows the configuration for setting up sticky sessions using `@midwayjs/bootstrap`. It creates a cluster manager, configures sticky sessions, and starts an HTTP server.  Requires `@midwayjs/bootstrap` and `http` modules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap, ClusterManager, setupStickyMaster } = require('@midwayjs/bootstrap');\nconst http = require('http');\n\n// Create a process manager to handle child processes\nconst clusterManager = new ClusterManager({\n   exec: __filename,\n   count: 4,\n   sticky: true, // enable sticky session support\n});\n\nif (clusterManager. isPrimary()) {\n   // The main process starts an http server to monitor\n   const httpServer = http. createServer();\n   setupStickyMaster(httpServer);\n\n   // start child process\n   clusterManager.start().then(() => {\n     // listening port\n     httpServer.listen(7001);\n     console.log('main process is ok');\n   });\n\n   clusterManager.onStop(async () => {\n     // close http server when stopped\n     await httpServer. close();\n   });\n} else {\n   // subprocess logic\n   Bootstrap\n     .run()\n     .then(() => {\n       console.log('child is ready');\n     });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Transport: Dependency Injection Example\nDESCRIPTION: This snippet illustrates how to define a custom transport using dependency injection in MidwayJS.  It uses `@Provide` and `@Scope` from `@midwayjs/core` to make the transport injectable. It also demonstrates how to inject it into a configuration class and add it to a logger instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmptyTransport, IMidwayLogger } from '@midwayjs/logger';\nimport { Provide, Scope, ScopeEnum } from '@midwayjs/core';\nimport { MidwayLoggerService } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum)\nexport class CustomTransport extends EmptyTransport {\n  log(info, callback) {\n    // ...\n    callback();\n  }\n}\n\n// src/configuration.ts\n@Configuration(/*...*/)\nexport class MainConfiguration {\n\n  @Inject()\n  loggerService: MidwayLoggerService;\n\n  @Inject()\n  customTransport: CustomTransport;\n\n  async onReady() {\n    const appLogger = this.loggerService.getLogger('customLogger') as IMidwayLogger;\n    appLogger.add(this.customTransport);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User DTO inheriting from Common\nDESCRIPTION: Defines a UserDTO inheriting from CommonUserDTO, adding a name property.  Used to demonstrate validation inheritance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType } from '@midwayjs/validate';\n\nexport class CommonUserDTO {\n  @Rule(RuleType.string().required())\n  token: string;\n  @Rule(RuleType.string())\n  workId: string;\n}\n\nexport class UserDTO extends CommonUserDTO {\n  @Rule(RuleType.string().required())\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Leoric Model in Midway Controller\nDESCRIPTION: This code snippet demonstrates how to use a Leoric model within a Midway.js controller (`src/controller/user.ts`). It uses `@InjectModel` to inject the `User` model and then queries the database using Leoric's `order` and `limit` methods. The `@Controller` decorator defines the route for the controller, and `@Get` defines the route for the `index` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/leoric/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\nimport { Controller } from '@midwayjs/core';\nimport { InjectModel } from '@midwayjs/leoric';\nimport User from '../model/user';\n\n@Controller('/api/users')\nexport class UserController {\n  @InjectModel(User)\n  User: typeof User;\n\n  @Get('/')\n  async index() {\n    return await this.User.order('id', 'desc').limit(10);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and CreateFunctionApp in MidwayJS\nDESCRIPTION: This commit resolves issues related to supertest typings and the `createFunctionApp` function in MidwayJS. The fix likely involves updating type definitions or correcting the implementation of `createFunctionApp` to ensure proper functionality and type safety.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/processAgent/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Adding logger type hint in src/interface.ts\nDESCRIPTION: This code snippet shows how to add a type hint for `midwayLogger` by referencing the log library in `src/interface.ts`. This ensures that the TypeScript compiler recognizes and provides type information for the logger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// src/interface.ts\n+ import type {} from '@midwayjs/logger';\n```\n\n----------------------------------------\n\nTITLE: Installing JWT Dependencies\nDESCRIPTION: Installs the required dependencies for JWT authentication using passport-jwt and @midwayjs/jwt.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/jwt passport-jwt --save\n```\n\n----------------------------------------\n\nTITLE: Consuming Bi-Directional Stream with Order Guarantee (TypeScript)\nDESCRIPTION: This code demonstrates a bi-directional stream call with guaranteed order. It sends messages and awaits their individual responses using Promises, ensuring the responses are processed in the same order they were sent. It requires an `id` field in the messages to maintain order. The example also shows how to pass in a different key name if `id` is not the default.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// 保证顺序的双向流\nconst t = service.addMore({\n  messageKey: 'uid'\n});\n\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/axios\nDESCRIPTION: This command installs the @midwayjs/axios package as a dependency to your project. This package provides Axios integration within the Midway.js framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/axios.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/axios@2 --save\n```\n\n----------------------------------------\n\nTITLE: Add Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces a guard feature to the MidwayJS framework. A guard is a mechanism for controlling access to routes or resources based on certain conditions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/http-proxy/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Fixing COS Config Definition and Updating Docs in MidwayJS\nDESCRIPTION: This commit fixes the configuration definition for COS (likely Cloud Object Storage) and updates the documentation for MidwayJS version 3.x. The fix addresses any inconsistencies or errors in the COS configuration and ensures that the documentation is accurate and up-to-date.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/processAgent/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncos config definition & 3.x doc update ([#1515](https://github.com/midwayjs/midway/issues/1515)) ([0ac7ac5](https://github.com/midwayjs/midway/commit/0ac7ac5805b7ab8873f8792fc1712a74e3223172))\n```\n\n----------------------------------------\n\nTITLE: Configure Git to Disable Automatic CRLF Conversion\nDESCRIPTION: This command configures Git to disable automatic conversion of line endings between CRLF (Windows) and LF (Linux/Mac). This prevents unexpected modifications to line endings when committing code across different operating systems, avoiding potential issues with linting or other tools.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/git_problem.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global core.autocrlf false\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Supertest Typings and createFunctionApp\nDESCRIPTION: This bug fix addresses typings for supertest and createFunctionApp in MidwayJS. The fix is associated with commit 484f4f41b3b9e889d4d285f4871a0b37fa51e73f and addresses issue #1642.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Fixing OSS config typings in MidwayJS\nDESCRIPTION: This code snippet fixes the typings for OSS configurations in the MidwayJS framework. It addresses issue #2277 and includes a commit hash for the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/oss/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- oss config typings ([#2277](https://github.com/midwayjs/midway/issues/2277)) ([f62e42a](https://github.com/midwayjs/midway/commit/f62e42abf18ff4df3b6d2f23189ec0a46db72c11))\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path in MidwayJS\nDESCRIPTION: This code snippet addresses an issue where the JSON path in Swagger UI was incorrect. This fix ensures that the Swagger UI correctly displays the API documentation by pointing to the right JSON file. The commit associated with this fix is 0f3728d.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/jwt/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Fixing config key required issue in MidwayJS\nDESCRIPTION: This commit addresses an issue where a config key was incorrectly marked as required in MidwayJS. The fix resolves this by either making the config key optional or providing a suitable default value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nconfig key required ([#1615](https://github.com/midwayjs/midway/issues/1615)) ([fb2188e](https://github.com/midwayjs/midway/commit/fb2188eaf5c24ffc9972f73323773a5899825037))\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This code snippet adds a guard feature to the MidwayJS framework. It contains the issue number and commit hash associated with the implementation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/code-dye/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- add guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Parameters using ctx.params\nDESCRIPTION: This code snippet demonstrates how to access path parameters in HTTP trigger (Aliyun) and API Gateway trigger scenarios using `ctx.params`.  It retrieves the value of a parameter named 'id' from the request path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_context.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// /api/user/[id]   /api/user/faas\nctx.params.id; // faas\n```\n\n----------------------------------------\n\nTITLE: Accessing Job and Setting Progress\nDESCRIPTION: Demonstrates how to access the Bull.js job object within a task and set its progress. This allows tracking the execution status of long-running tasks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QueueService } from '@midwayjs/task';\nimport { Provide, Controller, Get } from '@midwayjs/decorator';\n\n@Provide()\n@Controller()\nexport class HelloController {\n  @Inject()\n  queueService: QueueService;\n\n  @Get('/get-queue')\n  async getQueue(@Query() id: string) {\n    return await this.queueService.getClassQueue(TestJob).getJob(id);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running code style checks\nDESCRIPTION: This command uses npm to execute the linting script defined in the `package.json` file, enforcing code style standards.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.zh-CN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run lint\n```\n\n----------------------------------------\n\nTITLE: Adding Event Name Arguments in MidwayJS\nDESCRIPTION: This commit adds arguments for event names within the MidwayJS framework. This likely improves the ability to handle and process events within the application by providing more context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-nunjucks/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Diff\nCODE:\n```\n- add event name args ([#986](https://github.com/midwayjs/midway/issues/986)) ([bfd8232](https://github.com/midwayjs/midway/commit/bfd82320aee8600d8fa30bd2821a0e68c80fd755))\n```\n\n----------------------------------------\n\nTITLE: Installation using npm\nDESCRIPTION: Installs the sequelize-auto-midway package using npm. This command downloads and installs the necessary dependencies for generating Sequelize models within a Midway project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/sequelize_generator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i sequelize-auto-midway\n```\n\n----------------------------------------\n\nTITLE: Configure Console Output Color - TypeScript\nDESCRIPTION: This snippet demonstrates how to disable color output for the console transport in MidwayJS. Setting `autoColors` to `false` prevents the logger from using colors when writing to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         console: {\n           autoColors: false,\n         }\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring midway-test-inner-component in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to import and configure the 'midway-test-inner-component' within a MidwayJS application. It uses the `@Configuration` decorator to register the component in the application's container, and the `ILifeCycle` interface to define lifecycle hooks, such as the `onReady` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-resource/midway-test-inner-component/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration， ILifeCycle } from '@midwayjs/core';\nimport * as test from 'midway-test-inner-component';\n\n@Configuration({\n  imports: [\n    test\n  ]\n})\nexport class ContainerConfiguration implements ILifeCycle {\n  async onReady(): Promise<void> {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This feature adds a guard mechanism to the MidwayJS framework. The guard implementation is associated with commit 1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Running Multi Framework in One Process in MidwayJS\nDESCRIPTION: This code change allows running multiple frameworks within a single process. The associated commit is 330555f93b9af2a783771edd58bb9431a325938f and addresses issue #925.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Adding uncaughtException handler - Bug fix\nDESCRIPTION: This snippet describes a bug fix that adds an uncaughtException handler to the application. This handler is used to gracefully catch and log any unhandled exceptions that may occur within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope in Midway.js\nDESCRIPTION: This code snippet represents a bug fix addressing an issue where the singleton invoke request scope was not valid within the Midway.js project. The fix likely ensures that singleton instances are properly scoped within request contexts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nf97c0632107b47cf357d17774a4e4bb5233bba57\n```\n\n----------------------------------------\n\nTITLE: Adding Socket.IO-Redis Support in MidwayJS\nDESCRIPTION: This snippet indicates the addition of support for socket.io-redis in the MidwayJS framework. This integration allows for scaling Socket.IO applications across multiple processes or servers using Redis as a message broker.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n- add socket.io-redis support ([#874](https://github.com/midwayjs/midway/issues/874)) ([2818920](https://github.com/midwayjs/midway/commit/2818920b9d3391c81666c5b8587a899b9b237d9e))\n```\n\n----------------------------------------\n\nTITLE: Definition fix for getLogger and getCoreLogger in MidwayJS\nDESCRIPTION: This commit provides a definition fix for the `getLogger` and `getCoreLogger` functions in MidwayJS. The fix likely corrects the type definitions or interfaces for these functions, ensuring that they are used correctly and that TypeScript or other type-checking tools can properly validate their usage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Fixing passport strategy callback arguments\nDESCRIPTION: This commit fixes an issue with the number of arguments in some passport strategy verify callbacks. Addresses issue #2151. Commit hash is 65c9025a3b399d9d7e5061cecb30ad4943d337cd.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Fixing session maxAge definition in MidwayJS\nDESCRIPTION: This commit fixes an issue related to the `maxAge` definition for sessions within the MidwayJS framework.  The fix likely addresses incorrect or incomplete type definitions for the `maxAge` property, ensuring correct session expiry behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Install Luckyeye package with npm\nDESCRIPTION: This command installs the `@midwayjs/luckyeye` package as a development dependency. This package provides the inspection rules for Midway.js projects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/luckyeye.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @midwayjs/luckyeye --save-dev\n```\n\n----------------------------------------\n\nTITLE: Publishing bootstrap file in Midway Mock\nDESCRIPTION: This commit adds the bootstrap file to the published package of midway-mock. This inclusion is important for setting up the mocking environment correctly during installation and usage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_56\n\nLANGUAGE: None\nCODE:\n```\n3593ec5\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n for validate in MidwayJS\nDESCRIPTION: This snippet describes the implementation of internationalization (i18n) for validation within the MidwayJS framework.  This likely involves adding support for displaying validation error messages in different languages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- implement i18n for validate ([#1426](https://github.com/midwayjs/midway/issues/1426)) ([4c7ed2f](https://github.com/midwayjs/midway/commit/4c7ed2ff2e7ccf10f88f62abad230f92f5e76b97))\n```\n\n----------------------------------------\n\nTITLE: SQL CREATE TABLE Statement for Relationship table\nDESCRIPTION: This SQL statement defines the schema for the `relationship` table, which stores the associations between tags and objects (entities). It includes columns for the relationship ID, tag ID, object ID, creation timestamp, and update timestamp.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tags.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `relationship` (\n    `id` BIGINT unsigned NOT NULL AUTO_INCREMENT,\n    `tid` BIGINT unsigned NOT NULL,\n    `oid` BIGINT unsigned NOT NULL,\n    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    `update_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP  ON UPDATE CURRENT_TIMESTAMP NOT NULL,\n    PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing Configuration Imports to Object\nDESCRIPTION: Replaces the string-based configuration.imports with a direct object.  String-based configuration is deprecated.  This change provides a more structured and explicit way to manage configuration imports.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nreplace configuration.imports to object directly and deprecated string ([#657](https://github.com/midwayjs/midway/issues/657)) ([f1b42a1](https://github.com/midwayjs/midway/commit/f1b42a1b338a69cdfaf63e2d951a65333e4f3007))\n```\n\n----------------------------------------\n\nTITLE: Registering Existing Object (urllib) in MidwayJS\nDESCRIPTION: This snippet shows how to register an existing object, such as a third-party library instance (urllib), in the MidwayJS container using `container.registerobject`. This allows the object to be injected into other components using the `@inject` decorator, avoiding the need for direct `require` statements.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// in global file\nimport * as urllib from 'urllib';\ncontainer.registerobject('httpclient', urllib);\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/http-proxy Dependency to package.json\nDESCRIPTION: This JSON snippet shows how to add the @midwayjs/http-proxy component as a dependency in the package.json file.  This will allow npm to install the package when running `npm install`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/http-proxy.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/http-proxy\": \"^3.0.0\"\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Clients in MidwayJS\nDESCRIPTION: This code snippet shows how to configure multiple Redis clients using ServiceFactory in a MidwayJS application. It defines two clients, 'default' and 'default2', and allows selection of the default client to be injected. Requires redis configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-11-18-release-3-8.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  redis: {\n    clients: {\n      default: {\n        // ...\n      },\n      default2: {\n        // ...\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Dependency\nDESCRIPTION: These commands install the @midwayjs/ws package and its TypeScript definitions as dependencies for a MidwayJS project. The @midwayjs/ws package provides the necessary tools for creating WebSocket servers, while @types/ws provides type definitions for the ws library, enhancing TypeScript support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/ws --save\n$ npm i @types/ws --save-dev\n```\n\n----------------------------------------\n\nTITLE: Fixing Conflicts in Midway.js 2.x\nDESCRIPTION: This commit addresses conflicts within the Midway.js 2.x version. It aims to resolve compatibility issues that may arise during development and deployment. The fix is identified by the commit hash 2b0f44c6d4c91154fb8a7779b6789acbb2635b1b.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Using ILogger from @midwayjs/core\nDESCRIPTION: This snippet shows how to use the simplest `ILogger` definition from `@midwayjs/core`.  It provides only the basic log levels (`debug`, `info`, `warn`, `error`).  Requires `@midwayjs/core` dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Logger, ILogger } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n   @Inject()\n   logger: ILogger;\n\n   async getUser() {\n     this.logger.info('hello user');\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking object properties with mockProperty - TypeScript\nDESCRIPTION: This code demonstrates how to mock object properties using the `mockProperty` method from `MidwayMockService`. It showcases mocking a simple property with a default group and a custom group, as well as mocking an asynchronous method. Dependencies: @midwayjs/core\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayMockService, Provide, Inject } from '@midwayjs/core';\n\n@Provide()\nclass TestMockService {\n  @Inject()\n  mockService: MidwayMockService;\n\n  mock() {\n    const a = {};\n    // 默认分组\n    this.mockService.mockProperty(a, 'name', 'hello');\n    // 模拟属性，自定义分组\n    this.mockService.mockProperty(a, 'name', 'hello', 'group1');\n    // a['name'] => 'hello'\n\n    // 模拟方法\n    this.mockService.mockProperty(a, 'getUser', async () => {\n      return 'midway';\n    }, 'group2');\n    // await a.getUser() => 'midway'\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Cache Class (MemoryStore)\nDESCRIPTION: This code snippet defines a simple in-memory cache class `MemoryStore` that extends `Map`. It includes methods for saving and retrieving data. The class is decorated with `@Provide` and `@Scope` to make it available in the IoC container as a singleton.  It relies on `Configuration`, `Provide`, `Scope`, and `ScopeEnum` from `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Simple cache class\nimport { Configuration, Provide, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class MemoryStore extends Map {\n  save(key, value) {\n    this.set(key, value);\n  }\n\n  get(key) {\n    return this.get(key);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the POST API endpoint from the front-end (TypeScript)\nDESCRIPTION: This code demonstrates how to call the `createPost` API endpoint from the front-end. It imports the `createPost` function and passes an object with the required parameters: `title`, `content`, and `authorEmail`. It assumes that the `createPost` function is defined elsewhere and handles the API call to the backend. It provides type safety through Zod schema on the backend.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/safe.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPost } from '../api/post';\n\nawait createPost({\n  title: 'Hello Midway',\n  content: 'Hello Prisma',\n  authorEmail: 'test@test.com',\n});\n\n```\n\n----------------------------------------\n\nTITLE: Defining a route with FP in Midway.js\nDESCRIPTION: This code snippet shows how to define a route using the Functional Programming (FP) paradigm in Midway.js. It imports `useContext` from `@midwayjs/hooks` and `Context` from `@midwayjs/koa`. The `home` function retrieves the context using `useContext` and returns a JSON response similar to the OOP example, demonstrating how to access request information within a functional component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/intro.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/api/index.ts\n\nimport { useContext } from '@midwayjs/hooks'\nimport { Context } from '@midwayjs/koa';\n\nexport default async function home () {\n  const ctx = useContext<Context>()\n\n  return {\n    message: 'Hello Midwayjs!',\n    query: ctx.ip\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding setDiff Utility in MidwayJS\nDESCRIPTION: This code snippet introduces a new utility function called `setDiff` to the MidwayJS framework. This function likely calculates the difference between two sets, providing a convenient way to identify elements that are present in one set but not in the other. This utility may be used to compare sets of data or configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Features\n\n//- add setDiff ([#1263](https://github.com/midwayjs/midway/issues/1263)) ([9dd1a08](https://github.com/midwayjs/midway/commit/9dd1a08326540da52abf79cf31182d4e63b7f4d9))\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliyun HTTP Trigger for Single Interface in Typescript\nDESCRIPTION: This code snippet demonstrates how to configure an Aliyun HTTP trigger for a single interface using the `@ServerlessTrigger` decorator in MidwayJS. It binds the HTTP trigger to a specific path and method, and defines a handler function to process the request. The handler function takes a query parameter 'name' and returns a greeting message.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_http.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.HTTP, {\n    path: '/',\n    method: 'get',\n  })\n  async handleHTTPEvent(@Query() name = 'midway') {\n    return `hello ${name}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sequelize Dependency\nDESCRIPTION: Updates the sequelize dependency to version ~6.13.0. This ensures compatibility and incorporates latest features or bug fixes from the sequelize library in MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/sequelize/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n- **deps:** update dependency sequelize to ~6.13.0 ([#1554](https://github.com/midwayjs/midway/issues/1554)) ([0a82a2c](https://github.com/midwayjs/midway/commit/0a82a2c698f9b85debf3d09850fb9d350b27bba7))\n```\n\n----------------------------------------\n\nTITLE: Express Port Configuration for Unit Tests\nDESCRIPTION: This code snippet shows the Express port configuration for unit tests. The port is set to null because the single-test environment requires supertest to start the port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/express.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.unittest\nexport default {\n  // ...\n  express: {\n    port: null\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure default EggJS settings\nDESCRIPTION: This TypeScript code snippet defines the default configuration for EggJS within a Midway application. It sets the default port to 7001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  egg: {\n    port: 7001,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing bootstrap cache error - Bug fix\nDESCRIPTION: This snippet represents a bug fix related to bootstrap cache errors within the framework. This ensures that the caching mechanism operates correctly during the application's bootstrap process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Delete Service by ID\nDESCRIPTION: This command deletes a specific service managed by PM2 using its ID. Deleting a service removes it from PM2's management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/pm2.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pm2 delete 1 # delete service number 1\n```\n\n----------------------------------------\n\nTITLE: Example Loaded Photo JSON\nDESCRIPTION: This JSON represents the structure of a loaded photo object after retrieving it from the database with its associated albums.  It shows the `id`, `name`, `description`, and `filename` of the photo, as well as an array of album objects, each containing an `id` and `name`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"name\": \"Me and Bears\",\n  \"description\": \"I am near polar bears\",\n  \"filename\": \"photo-with-bears.jpg\",\n  \"albums\": [\n    {\n      \"id\": 1,\n      \"name\": \"Bears\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Me\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in MidwayJS using TypeScript\nDESCRIPTION: This code snippet demonstrates a simple solution for dependency injection in MidwayJS using the `@Inject` decorator in TypeScript. It automatically finds and injects the corresponding class if the property definition is clearly written. Not applicable to polymorphic injections.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/framework_problem.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Inject()\nservice: PackageBuildInfoHsfService;\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Example\nDESCRIPTION: Shows the directory structure with a controller file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   └── controller\n│       └── home.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Configure npm scripts for Jest (JSON)\nDESCRIPTION: This snippet demonstrates how to configure the `test` script in `package.json` to use Jest. The `--forceExit` option ensures that the Jest process exits after the tests are completed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest --forceExit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TableStore dependency with npm\nDESCRIPTION: This command installs the @midwayjs/tablestore package as a project dependency using npm. The --save flag ensures that the dependency is added to the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/tablestore.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/tablestore@2 --save\n```\n\n----------------------------------------\n\nTITLE: Updating Socket.IO dependency in Midway.js\nDESCRIPTION: This commit updates the socket.io packages to version 4.4.1 within the Midway.js project. This ensures that the project uses the latest features and security updates provided by socket.io.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n14b27eaa0eeb479a80d171ede3af3ebda689ec46\n```\n\n----------------------------------------\n\nTITLE: Setting Response Header in Serverless\nDESCRIPTION: This code shows how to set a response header using `ctx.set()`, which is an alias for `response.setHeader`. This allows setting custom headers in the serverless function response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_context.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nctx.set('X-FaaS-Duration', 2100);\n```\n\n----------------------------------------\n\nTITLE: RegValid Decorator with Pipe Binding\nDESCRIPTION: This code demonstrates creating a custom parameter decorator `RegValid` using `createCustomParamDecorator` from `@midwayjs/core`. It takes a regular expression `reg` and a pipe `pipe` as arguments. The `pipes` option in the decorator configuration binds the specified pipe to the decorator, ensuring it's executed when the decorator is used. The decorator is associated with the key 'reg-valid'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipe.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PipeUnionTransform, createCustomParamDecorator } from '@midwayjs/core';\n\nfunction RegValid(reg: RegExp, pipe: PipeUnionTransform) {\n   return createCustomParamDecorator('reg-valid', {\n     reg,\n   }, {\n     //...\n     pipes: [pipe]\n   });\n}\n```\n\n----------------------------------------\n\nTITLE: Addressing MidwayJS Cases in Egg-Layer and DecoratorManager\nDESCRIPTION: This commit addresses specific use cases within the MidwayJS framework related to the egg-layer architecture and DecoratorManager. It adds missing cases for proper integration with egg-layer, and also adds a warning for DecoratorManager to improve the developer experience. The fix aims to enhance stability and maintainability.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n3d601aa19104081870eb32ba09170357a9da4d03\n```\n\n----------------------------------------\n\nTITLE: Importing TableStore module in configuration.ts (TypeScript)\nDESCRIPTION: This code snippet demonstrates importing the TableStore module into the MidwayJS configuration file (configuration.ts). It uses the @Configuration decorator to import the tablestore module and its associated configuration. It also imports the 'join' function from 'path' for path manipulation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/tablestore.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport * as tablestore from '@midwayjs/tablestore';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    tablestore, // 导入 tablestore 组件\n  ],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Fixing Conflict in Midway.js 2.x\nDESCRIPTION: This commit resolves a conflict issue within the Midway.js 2.x environment. This aims to enhance the overall stability and compatibility of the framework in complex scenarios. The fix is denoted by the commit hash 6064ecf0fcf0f79ca9f9f177b06baef6d65ca7ea.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Fixing module name in Midway Mock\nDESCRIPTION: This commit corrects an issue with the module name within the midway-mock package, ensuring it is consistent and accurate.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_55\n\nLANGUAGE: None\nCODE:\n```\nc00d20c\n```\n\n----------------------------------------\n\nTITLE: Using ResolveModule Instead of FindFramework in Midway.js\nDESCRIPTION: This commit replaces the findFramework() function with resolveModule() in the midway-bin package. The provided issue number and commit hash provide context. This change likely improves module resolution within the Midway.js build or execution process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_41\n\nLANGUAGE: Other\nCODE:\n```\n8c24e2e\n```\n\n----------------------------------------\n\nTITLE: Adding AOP Support\nDESCRIPTION: This commit adds support for Aspect-Oriented Programming (AOP) to MidwayJS. This allows developers to apply cross-cutting concerns such as logging, security, and transaction management in a modular way.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Tencent Cloud Trigger String Body Result\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Tencent Cloud with string payload. The request body is a string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // \"bbb\"   => string\n```\n\n----------------------------------------\n\nTITLE: Caching gRPC Service Instance - TypeScript\nDESCRIPTION: This example demonstrates caching a gRPC service instance using the `@Init` decorator for reuse in other methods. This is more performant than repeatedly obtaining the service instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, MSProviderType, Provider, Provide, Inject, Init } from '@midwayjs/decorator';\nimport { helloworld, hero } from '../interface';\nimport { Clients } from '@midwayjs/grpc';\n\n@Provide()\n@Provider(MSProviderType.GRPC, { package: 'hero' })\nexport class HeroService implements hero.HeroService {\n  // 注入客户端\n  @Inject()\n  grpcClients: Clients;\n\n  greeterService: helloworld.Greeter;\n\n  @Init()\n  async init() {\n    // 赋值一个服务实例\n    this.greeterService = this.grpcClients.getService<helloworld.GreeterClient>('helloworld.Greeter');\n  }\n\n  @GrpcMethod()\n  async findOne(data) {\n    // 调用服务\n    const result = await greeterService.sayHello().sendMessage({\n      name: 'harry',\n    });\n\n    // 返回结果\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Swagger component to configuration\nDESCRIPTION: This code snippet shows how to import and register the Swagger component in the `configuration.ts` file of a MidwayJS project.  This enables Swagger functionality for the application by adding the `@midwayjs/swagger` module to the imports array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport * as swagger from '@midwayjs/swagger';\n\n@Configuration({\n  imports: [swagger],\n})\nexport class ContainerConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Fixing Plugin Injection in Web Middleware\nDESCRIPTION: This commit addresses an issue where plugins were being injected as 'undefined' in web middleware within the MidwayJS framework. The fix ensures that plugins are correctly injected and accessible in web middleware components.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Using the Context Object\nDESCRIPTION: This snippet shows how to import and inject the `Context` object in a Midway FaaS function. The `Context` provides access to request and response information, logging, and other functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_context.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\n\n@Inject()\nctx: Context;\n```\n\n----------------------------------------\n\nTITLE: Supporting Application Layer\nDESCRIPTION: This commit adds support for an application layer, enabling better separation of concerns and improved application architecture.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nSupport application layer ([#534](https://github.com/midwayjs/midway-faas/issues/534)) ([7a141c0](https://github.com/midwayjs/midway-faas/commit/7a141c0c9404dc20d4d146a14e01dff404943142))\n```\n\n----------------------------------------\n\nTITLE: Casbin Policy Configuration\nDESCRIPTION: This code defines the access control policies for Casbin. It includes rules that define which subjects have access to which objects, based on specific actions and roles.  These rules are used by Casbin to make access control decisions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\np, superuser, user, read:any\np, manager, user_roles, read:any\np, guest, user, read:own\n\ng, alice, superuser\ng, bob, guest\ng, tom, manager\n\ng2, users_list, user\ng2, user_roles, user\ng2, user_permissions, user\ng2, roles_list, role\ng2, role_permissions, role\n```\n\n----------------------------------------\n\nTITLE: Creating Koa Project with Midway CLI\nDESCRIPTION: This set of commands uses the Midway CLI to create a new project based on the Koa v3 template. There are two versions, one for npm v6 and another for npm v7 and later. These commands bootstrap a basic Koa application within the MidwayJS framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm v6\n$ npm init midway --type=koa-v3 my_project\n\n# npm v7\n$ npm init midway -- --type=koa-v3 my_project\n```\n\n----------------------------------------\n\nTITLE: EJS Template Example\nDESCRIPTION: Defines a simple EJS template that displays a variable named 'data'. This template will be rendered by the MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// view/hello.ejs\nhello <%= data %>\n```\n\n----------------------------------------\n\nTITLE: Get Flatten Router Table API Usage\nDESCRIPTION: This code snippet demonstrates how to retrieve the flattened router table using `MidwayWebRouterService`. It shows how to call the `getFlattenRouterTable` method and process the result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await this.webRouterService.getFlattenRouterTable();\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Publish Tag\nDESCRIPTION: This snippet demonstrates how to configure the npm publish tag in `package.json`.  It's used to specify the tag when publishing a package, such as using the `next` tag for pre-release versions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"publishConfig\": {\n  \"tag\": \"next\"\n}\n```\n\n----------------------------------------\n\nTITLE: Npm Scripts Usage\nDESCRIPTION: These npm scripts are used for dependency management, code style checking, and running unit tests. They use npm commands to execute specific tasks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/test/fixtures/enhance/base-app-hackernews/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n- Use `npm run autod` to auto detect dependencies upgrade\n- Use `npm run lint` to check code style\n- Use `npm test` to run unit test\n```\n\n----------------------------------------\n\nTITLE: Install Midway Test Component\nDESCRIPTION: Installs the `midway-test-component` package as a dependency using npm. This command adds the package to the `node_modules` directory and updates the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-resource/midway-test-component/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i midway-test-component --save\n```\n\n----------------------------------------\n\nTITLE: Fixing Config Export Default Case in Midway\nDESCRIPTION: This commit addresses a bug related to the default export of configuration files within the MidwayJS framework. The fix likely ensures correct loading and application of configuration settings. Implementation details are available in the associated commit.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/kafka/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Checking Compatibility with npm\nDESCRIPTION: This command checks the compatibility of installed Midway dependencies using npm. It executes the `midway-version` tool to identify any version conflicts or inconsistencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/version_check.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest\n```\n\n----------------------------------------\n\nTITLE: Fixing Passport Compatible Code in Midway\nDESCRIPTION: This commit fixes a code compatibility issue related to Passport.js within the MidwayJS framework. It likely ensures proper integration and functionality between MidwayJS and Passport.js for authentication purposes. The specifics of the fix are detailed in the linked commit.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/kafka/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Validate/Rule Decorator Changes (typescript)\nDESCRIPTION: This snippet demonstrates the change in the import path for `Validate`, `Rule`, and `RuleType` decorators in Midway v3. They are now imported from `@midwayjs/validate` and requires installing and enabling the validate component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration\nimport * as validate from '@midwayjs/validate';\n\n@Configuration({\n  // ...\n  imports: [\n    validate\n  ],\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status Code using ctx.status\nDESCRIPTION: This code demonstrates how to set the HTTP response status code using the `ctx.status` property, which is an alias for `response.statusCode`. It sets the status code to 404.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_context.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nctx.status = 404;\n```\n\n----------------------------------------\n\nTITLE: Request Scope UserService Example\nDESCRIPTION: This example illustrates a scenario where a request-scoped `UserService` is injected into a singleton `LoginService`, potentially leading to scope downgrade issues.  By default, Midway prevents this to avoid caching request-specific data in a singleton.  The `allowDowngrade` option can be used to explicitly allow this behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_code.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n@Provide()\nexport class UserService {}\n\n// ...\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class LoginService {\n  @Inject()\n  userService: UserService;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Scope(ScopeEnum.Request, { allowDowngrade: true })\nexport class UserService {}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Trigger Function in Alibaba Cloud with TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a function triggered by an event in Alibaba Cloud Function Compute using Midway.js. It uses the `@ServerlessTrigger` decorator to bind the function to the `EVENT` trigger type. The function receives an event object as input and returns it.  It depends on the `@midwayjs/core` and `@midwayjs/faas` packages for dependency injection and serverless function context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.EVENT)\n  async handleEvent(event: any) {\n    return event;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Request-Scoped Instance\nDESCRIPTION: This code shows how to get a request-scoped instance of a service using `this.ctx.requestContext.getAsync(UserService)`. This allows for creating objects that are unique to each request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst userService = await this.ctx.requestContext.getAsync(UserService);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with Request Headers\nDESCRIPTION: This snippet demonstrates how to test an API endpoint with request headers. It uses `createHttpRequest` to send a GET request to `/auth` and sets the `token` header to `123456`. It then verifies that the response body contains the correct `token` value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/test.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Auth', async () => {\n  const response = await createHttpRequest(app)\n    .get('/auth')\n    .set('token', '123456')\n    .expect(200);\n\n  expect(response.body).toEqual({ token: '123456' });\n});\n```\n\n----------------------------------------\n\nTITLE: Install Sequelize Module\nDESCRIPTION: Installs the Sequelize module for MidwayJS. This module provides the necessary integration between the MidwayJS framework and the Sequelize ORM library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @midwayjs/sequelize@2 -S\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Command Line - Bash\nDESCRIPTION: These commands demonstrate how to set the `MIDWAY_SERVER_ENV` and `NODE_ENV` environment variables when starting a Midway.js application using npm. `MIDWAY_SERVER_ENV` has higher priority.  These commands are for Unix-like systems.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/environment.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMIDWAY_SERVER_ENV=prod npm start        // 第一优先级\nNODE_ENV=local npm start                // 第二优先级\n```\n\n----------------------------------------\n\nTITLE: Fixing singleton invoke request scope in MidwayJS\nDESCRIPTION: This commit addresses an issue where the singleton invoke request scope was not valid within the MidwayJS project. It's associated with issue #1622 and commit hash f97c0632107b47cf357d17774a4e4bb5233bba57.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Typings\nDESCRIPTION: This commit addresses and resolves missing typings, ensuring proper type definitions and improved code completion.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nfix missing typings ([#171](https://github.com/midwayjs/midway-faas/issues/171)) ([1d40cf1](https://github.com/midwayjs/midway-faas/commit/1d40cf1c1d76f45888b4ce15f9a2151b81c7a8f9))\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and CreateFunctionApp in Midway.js\nDESCRIPTION: This code snippet represents a bug fix related to supertest typings and the createFunctionApp function within the Midway.js project. The fix likely improves the type definitions for supertest and resolves issues with creating function applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n484f4f41b3b9e889d4d285f4871a0b37fa51e73f\n```\n\n----------------------------------------\n\nTITLE: Using InfoService API\nDESCRIPTION: This TypeScript code snippet shows how to use the InfoService API to retrieve various application information in a non-HTTP or custom scenario. It retrieves project, system, resource occupation, software, configuration, service, time, environment, dependency, and network information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/info.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { InfoService } from '@midwayjs/info';\n\n@Provide()\nexport class userService {\n\n  @Inject()\n  inforService: InfoService\n\n  async getInfo() {\n    // 应用信息，应用名等\n    this.inforService.projectInfo();\n    // 系统信息\n    this.inforService.systemInfo();\n    // 堆内存，cpu 等\n    this.inforService.resourceOccupationInfo();\n    // midway 框架的信息\n    this.inforService.softwareInfo();\n    // 当前使用的环境配置\n    this.inforService.midwayConfig();\n    // 依赖注入容器中的服务\n    this.inforService.midwayService();\n    // 系统时间，时区，启动时常\n    this.inforService.timeInfo();\n    // 环境变量\n    this.inforService.envInfo();\n    // 依赖信息\n    this.inforService.dependenciesInfo();\n    // 网络信息\n    this.inforService.networkInfo();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and Function App Creation\nDESCRIPTION: This bug fix corrects the supertest typings and function app creation in Midway.js. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Directory with npm init (alternative)\nDESCRIPTION: This command shows an alternative way to specify the target directory, by providing the path as the last argument.  The `type` parameter must still be specified.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --type=koa-v3 abc\n```\n\n----------------------------------------\n\nTITLE: Adding guard feature in MidwayJS\nDESCRIPTION: This code snippet adds a guard feature to the MidwayJS framework. It references issue #2345 and includes a commit hash for the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/oss/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- add guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Add: Component and framework config definition - Javascript\nDESCRIPTION: This commit introduces the ability to define component and framework configurations. This allows for greater flexibility and customization in configuring the MidwayJS application and its components.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nb2fe6157f99659471ff1333eca0b86bb889f61a3\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Triggered Functions in Midway.js\nDESCRIPTION: This snippet demonstrates how to test HTTP-triggered functions in a Midway.js application using `createFunctionApp` and `createHttpRequest`. The `createFunctionApp` method creates a function application for testing, and `createHttpRequest` is used to create an HTTP client to send requests to the function. The test verifies the response from the HTTP endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_testing.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/faas';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from api gateway trigger', async () => {\n    \n    const app: Application = await createFunctionApp<Framework>();\n    \n    const result = await createHttpRequest(app).get('/').query({\n      name: 'zhangting',\n    });\n    expect(result.text).toEqual('hello zhangting');\n    \n    await close(app);\n\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing tsconfig-paths (dev)\nDESCRIPTION: This command installs the `tsconfig-paths` package as a development dependency. This package is used to resolve alias paths defined in `tsconfig.json` during local development (using ts-node).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/alias_path.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i tsconfig-paths --save-dev\n```\n\n----------------------------------------\n\nTITLE: Timer Event Structure - JSON\nDESCRIPTION: This JSON snippet shows the structure of the event object that is passed to the timer-triggered function. It contains the trigger time, trigger name ('timer'), and an optional payload.  The `triggerTime` property is a string representing a date in ISO format.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_timer.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  triggerTime: new Date().toJSON(),\n  triggerName: 'timer',\n  payload: '',\n}\n```\n\n----------------------------------------\n\nTITLE: Create App Instance with midway-mock (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create an application instance using `midway-mock` within a Mocha `before` hook. It imports `mm` from `midway-mock` and initializes the app, ensuring it's ready before running tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// test/controller/home.test.js\nimport { mm } from 'midway-mock';\n\ndescribe('test/controller/home.test.ts', () => {\n  let app;\n  before(() => {\n    // 创建当前应用的 app 实例\n    app = mm.app();\n    // 等待 app 启动成功，才能执行测试用例\n    return app.ready();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing framework find and sort in MidwayJS\nDESCRIPTION: This commit addresses a bug related to how the framework finds and sorts modules or components within MidwayJS. The fix likely involves correcting the logic used to locate and order these elements, ensuring that the framework operates correctly and efficiently.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Installing cors for Express\nDESCRIPTION: This command installs the `cors` package, which is used for enabling CORS in the `@midwayjs/express` framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cors.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install cors --save\n```\n\n----------------------------------------\n\nTITLE: Creating a BullMQ Worker and QueueEvents in TypeScript\nDESCRIPTION: This code demonstrates how to create a worker and queue events listener using BullMQ in MidwayJS. The `createWorker` function creates a worker that processes jobs from the specified queue ('queueName'). The `createQueueEvents` function creates an event listener that listens for specific queue events, such as job completion.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2025-01-14-release-3.20.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// BullMQ 新增了独立的 Worker 和 QueueEvents\nconst worker = bullmqFramework.createWorker(\n  'queueName',\n  async (job) => {\n    // 处理任务\n  }\n);\n\nconst queueEvents = queue.createQueueEvents();\nqueueEvents.on('completed', ({ jobId }) => {\n  console.log(`Job ${jobId} completed!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing IoC Objects in app.ts\nDESCRIPTION: This code snippet demonstrates how to access Inversion of Control (IoC) container objects within the `app.ts` file during the application's startup phase.  It shows how to retrieve singleton objects from the global scope and objects from the request scope. The `app` object is an instance of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/quickstart.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// app.js\nmodule.exports = (app) => {\n  app.beforeStart(async () => {\n    // 从全局作用域拿单例对象\n    const obj = await app.applicationContext.getAsync('xxx');\n\n    // 从请求作用域拿对象\n    const ctx = app.createAnonymousContext();\n    const obj = await ctx.requestContext.getAsync('xxx');\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Adjusting Koa Port in bootstrap.js - Typescript\nDESCRIPTION: This snippet demonstrates how to explicitly set the port for a Koa application within the `bootstrap.js` file using the `@midwayjs/bootstrap` package. This ensures the application listens on the specified port (8080 in this case) when deployed to AWS Lambda or other environments. The `Bootstrap.configure` method allows modification of global configurations including the Koa server's port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aws_lambda.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// 显式以组件方式引入用户代码\nBootstrap.configure({\n  globalConfig: {\n    koa: {\n      port: 8080,\n    }\n  }\n}).run()\n```\n\n----------------------------------------\n\nTITLE: Using nvs to Manage Node.js Versions\nDESCRIPTION: This snippet demonstrates common nvs commands for managing Node.js versions. It includes commands for adding the latest LTS version, linking it as the default version, installing a specific version, listing installed versions, and using a specific version in the current shell. These commands are useful for quickly switching between different Node.js versions for development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/how_to_install_nodejs.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 安装最新的 LTS 版本\n$ nvs add lts\n# 配置为默认版本\n$ nvs link lts\n# 安装其他版本尝尝鲜\n$ nvs add 12\n# 查看已安装的版本\n$ nvs ls\n# 在当前 Shell 切换版本\n$ nvs use 12\n```\n\n----------------------------------------\n\nTITLE: Fix MikroConfigOptions generic type in Midway\nDESCRIPTION: This commit addresses a bug where the MikroConfigOptions type definition in Midway lacked a default generic type. This likely caused issues when using the configuration options without explicitly specifying the generic type. Adding the default generic type fixes this type-related issue, improving type safety and developer experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mikro/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: All-in-one Call Example for TypeScript Support\nDESCRIPTION: This code demonstrates an all-in-one call to the `/project` endpoint with an invalid `name` (number instead of string). It catches the validation error and logs the error message and HTTP status code (422).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/validate.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport createProject from './api';\n\ntry {\n  await createProject({\n    name: 1,\n    description: 'test project',\n    owner: 'test',\n    members: ['test'],\n  });\n} catch (error) {\n  console.log(error.message);\n  console.log(error.status); // 422\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying mysql2 Driver - TypeScript\nDESCRIPTION: This snippet specifies the `mysql2` driver to use when both `mysql` and `mysql2` are installed. It configures the data source to explicitly use the `mysql2` driver.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        //...\n        type: 'mysql',\n        driver: require('mysql2')\n      }\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bull Board for UI Management (Bash)\nDESCRIPTION: This snippet shows the command used to install the `@midwayjs/bull-board` package using npm. Bull Board provides a UI for managing Bull queues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/bull-board@3 --save\n```\n\n----------------------------------------\n\nTITLE: Configure Logger: Disable File and Error Transports\nDESCRIPTION: This code snippet demonstrates how to disable the File and Error transports for a specific logger client in the MidwayJS configuration.  This reduces the number of outputs and makes it console only.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      abcLogger: {\n        enableFile: false,\n        enableError: false\n        // ...\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Directory Scanning for Entities\nDESCRIPTION: This code showcases how to configure entity classes using wildcard paths in the `entities` property. This allows for automatic entity discovery based on directory and file name patterns.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_source.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nimport { User, SimpleUser } from '../entity/user.entity';\n\nexport default {\n  mysql: {\n    dataSource: {\n      dataSource1: {\n        host: 'localhost',\n        user: 'root',\n        database: 'test',\n        entities: [\n          User,\n          SimpleUser,\n          'entity',             // 特定目录（等价于目录通配）\n          '**/abc/**',          // 仅获取包含 abc 字符的目录下的文件\n          'abc/**/*.ts',        // 特定目录 + 通配\n          'abc/*.entity.ts',    // 匹配后缀\n          '**/*.entity.ts',     // 通配加后缀匹配\n          '**/*.{j,t}s',        // 后缀匹配\n        ]\n      },\n      // ...\n      // ...\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with TypeScript\nDESCRIPTION: Starts the local development server with TypeScript support. The `--ts` flag enables TypeScript compilation and execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin dev --ts\n```\n\n----------------------------------------\n\nTITLE: IPipelineResult Interface Definition\nDESCRIPTION: Defines the structure of the IPipelineResult interface, which encapsulates the result of a pipeline execution, including success status, error information, and the actual result.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/pipeline.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * pipeline 执行返回结果\n */\nexport interface IPipelineResult<T> {\n  /**\n   * 是否成功\n   */\n  success: boolean;\n  /**\n   * 异常信息(如果有则返回)\n   */\n  error?: {\n    /**\n     * 异常出在那个 valve 上\n     */\n    valveName?: string;\n    /**\n     * 异常信息\n     */\n    message?: string;\n    /**\n     * 原始 Error\n     */\n    error?: Error;\n  };\n  /**\n   * 返回结果\n   */\n  result: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Redis Adapter\nDESCRIPTION: This bash command shows how to install the `@socket.io/redis-adapter` package using npm. This adapter is used for distributed processing of Socket.IO connections.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @socket.io/redis-adapter --save\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/logger as dependency\nDESCRIPTION: This code snippet demonstrates how to add the `@midwayjs/logger` package as a dependency in your `package.json` file. This is required for users who haven't already declared it as a dependency to avoid errors. It ensures compatibility with `@midwayjs/core` version 3.13.0 and above.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-11-13-release-3.13.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n\"dependencies\": {\n+  \"@midwayjs/logger\": \"^2.19.2\",\n},\n```\n```\n\n----------------------------------------\n\nTITLE: Supporting Entry File in Bootstrap in MidwayJS\nDESCRIPTION: This commit adds support for specifying an entry file in the bootstrap process in MidwayJS. This feature allows developers to customize the entry point of their application, providing more control over the application initialization process. It improves the flexibility and configurability of the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n49a5ff662134bdd42dc3a80738b44a05138f8f7c\n```\n\n----------------------------------------\n\nTITLE: Importing Container Definitions (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import `ILifeCycle` and `IMidwayContainer` from `@midwayjs/core` in Serverless v2.0. These interfaces provide container definitions for the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_v1_upgrade_serverless_v2.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ILifeCycle, IMidwayContainer } from '@midwayjs/core';\n```\n\n----------------------------------------\n\nTITLE: Default Export (JavaScript)\nDESCRIPTION: This snippet demonstrates the `module.exports` approach to exporting in Javascript. It is used to export an entire object or function as the default export of the module.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// js 写法\nmodule.exports = {\n  a: 1,\n};\n\nmodule.exports = () => {\n  console.log(111);\n};\n```\n\n----------------------------------------\n\nTITLE: Fix Supertest Typings and createFunctionApp\nDESCRIPTION: Fixes typings for supertest and updates createFunctionApp. This ensures correct type definitions when using supertest for testing and resolves issues with createFunctionApp. This likely improves developer experience and testing capabilities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642))\n```\n\n----------------------------------------\n\nTITLE: Merging Bug Fix in Midway.js\nDESCRIPTION: This commit implements a bug fix related to merging operations in Midway.js. This resolves issues encountered when merging configurations or data. The commit hash is 7f41fc94adf1fc9e4465c5aefdf94346184e1efc.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Updating Cookies Dependency in Midway.js\nDESCRIPTION: This commit updates the dependency @midwayjs/cookies to version 1.0.2 within the Midway.js framework.  Updating dependencies ensures the framework utilizes the latest features and bug fixes provided by the cookies package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n**deps:** update dependency @midwayjs/cookies to v1.0.2 ([#1834](https://github.com/midwayjs/midway/issues/1834)) ([e99a5fa](https://github.com/midwayjs/midway/commit/e99a5fad0b9e0a7021d3b0158eafe7809e90b652))\n```\n\n----------------------------------------\n\nTITLE: Adding Component and Framework Config Definition\nDESCRIPTION: This commit introduces the ability to define configurations for components and the framework itself. This enhancement allows for greater customization and control over the application's behavior and component settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nadd component and framework config definition ([#1367](https://github.com/midwayjs/midway/issues/1367)) ([b2fe615](https://github.com/midwayjs/midway/commit/b2fe6157f99659471ff1333eca0b86bb889f61a3))\n```\n\n----------------------------------------\n\nTITLE: Introducing Tenant Component\nDESCRIPTION: Introduces the tenant component into the MidwayJS application by importing it in the `src/configuration.ts` file.  This enables the tenant management features.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tenant.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as tenant from '@midwayjs/tenant';\n\n@Configuration({\n   imports: [\n     // ...\n     tenant,\n   ],\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: mwtsc enable https\nDESCRIPTION: This snippet demonstrates enabling HTTPS for local testing using the `--ssl` flag.  Midway provides a built-in certificate for this purpose.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/mwtsc.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$  npx mwtsc --watch --run @midwayjs/mock/app --ssl\n```\n\n----------------------------------------\n\nTITLE: Moving Koa-Session and Definition\nDESCRIPTION: This commit moves the koa-session package and its definition within the MidwayJS framework. This is likely a restructuring of dependencies or files within the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nmove koa-session and definition ([#1572](https://github.com/midwayjs/midway/issues/1572)) ([95743c1](https://github.com/midwayjs/midway/commit/95743c11917507ccf4c218f5353e1b88917237a5))\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers using ctx.set\nDESCRIPTION: This snippet demonstrates how to set response headers using the `ctx.set` method, which is an alias for `response.setHeader`. It sets the 'X-FaaS-Duration' header with a value of 2100.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_context.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nctx.set('X-FaaS-Duration', 2100);\n```\n\n----------------------------------------\n\nTITLE: Fix express use router and middleware\nDESCRIPTION: This commit fixes an issue with how Express was using routers and middleware. Routers are used to organize routes into separate modules, and middleware is used to intercept and process requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Swagger UI JSON Path Replacement\nDESCRIPTION: This bug fix replaces the JSON path in the Swagger UI for the Midway.js framework. This ensures the Swagger UI correctly displays the API documentation. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Adding View Components\nDESCRIPTION: This commit adds view components, including view-ejs and view-nunjucks. This enhancement provides developers with more options for rendering views within MidwayJS applications, as addressed in issue #1308.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\na00f44bd769052245cd49d49ab417d621bb89caa\n```\n\n----------------------------------------\n\nTITLE: Singleton Scope with Request-Scoped Dependency - DBManager (TypeScript)\nDESCRIPTION: This example illustrates the scope downgrade issue. `UserService` is a singleton, and it injects `DBManager`, which is request-scoped. The `DBManager` instance within `UserService` becomes fixed, exhibiting a singleton-like behavior instead of being request-scoped.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// This class is the default request scope (Request)\n@Provide()\nexport class HomeController {\n  @Inject()\n  userService: UserService;\n}\n\n\n// Set a single instance, the process level is unique.\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class UserService {\n\n  @Inject()\n  dbManager: DBManager;\n\n  async getUser() {\n  \t// ...\n  }\n}\n\n// The scope is not set, and the default is the request scope (here is used to verify the scenario where all subsequent instances are cached under the single instance link)\n@Provide()\nexport class DBManager {\n}\n```\n\n----------------------------------------\n\nTITLE: MNS Event Structure in Alibaba Cloud Function Compute\nDESCRIPTION: This JSON snippet describes the structure of an MNS (Alibaba Cloud Message Queue) event in Alibaba Cloud Function Compute. It includes information about the message, topic, subscriber, and other relevant details.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Context\": \"user custom info\",\n   \"TopicOwner\": \"1186202104331798\",\n   \"Message\": \"hello topic\",\n   \"Subscriber\": \"1186202104331798\",\n   \"PublishTime\": 1550216302888,\n   \"SubscriptionName\": \"test-fc-subscibe\",\n   \"MessageMD5\": \"BA4BA9B48AC81F0F9C66F6C909C39DBB\",\n   \"TopicName\": \"test-topic\",\n   \"MessageId\": \"2F5B3C281B283D4EAC694B7425288675\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mongoose in MidwayJS\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure the Mongoose component within a MidwayJS application by importing it into the `src/configuration.ts` file. This enables direct access to Mongoose functionalities, bypassing Typegoose.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as mongoose from '@midwayjs/mongoose';\n\n@Configuration({\n  imports: [\n    mongoose  \t\t\t\t\t\t\t\t\t// 加载 mongoose 组件\n  ],\n  importConfigs: [\n  \tjoin(__dirname, './config')\n  ]\n})\nexport class MainConfiguration {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Install @midwayjs/bundle-helper\nDESCRIPTION: This command installs the @midwayjs/bundle-helper package as a development dependency. It's used to generate an entry point for single-file builds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/bundle-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Domain Name (YAML)\nDESCRIPTION: This snippet illustrates how to configure a custom domain name for a Midway.js function by specifying the `domainName` under `custom.customDomain` in the `f.yml` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ncustom:\n\tcustomDomain:\n    domainName: test.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Cleanup with Max Files in TypeScript\nDESCRIPTION: This snippet shows how to configure log cleanup based on the maximum number of files to retain. The `maxFiles` property specifies the maximum number of log files to keep before older files are deleted. The example retains logs for 3 days.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n} as MidwayConfig;export default {\n  midwayLogger: {\n    default: {\n      maxFiles: '3d',\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Getting Cron Job Instance from Framework API\nDESCRIPTION: This TypeScript snippet demonstrates how to get a cron job instance using the MidwayJS framework's API. You can retrieve the job either by its class or by its name. This allows you to interact with the cron job object within your application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as cron from '@midwayjs/cron';\nimport { InjectJob, CronJob } from '@midwayjs/cron';\nimport { DataSyncCheckerJob } from './job/sync.job';\n\n@Configuration({\n   imports: [\n     cron\n   ],\n})\nexport class ContainerConfiguration {\n   @Inject()\n   cronFramework: cron.Framework;\n\n   async onServerReady() {\n     const syncJob = this.cronFramework.getJob(DataSyncCheckerJob);\n     const syncJob2 = this.cronFramework.getJob('syncJob');\n    \n     // syncJob === syncJob2\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Removing Sourcemap and Src in Dist\nDESCRIPTION: This change removes sourcemap and src files from the dist directory. This reduces package size and prevents exposing source code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Fixing middleware disable in express\nDESCRIPTION: This snippet fixes an issue where middleware could not be disabled in Express. Middleware functions are used to intercept and process requests before they reach the route handlers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Conditional Framework Execution in Configuration\nDESCRIPTION: This code snippet shows how to conditionally execute the framework's `run()` method within the `onServerReady` lifecycle. It checks a condition and, if met, manually calls `this.framework.run()` to start the framework. This allows for deferred or conditional initialization of the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration,Inject } from '@midwayjs/core';\nimport { MidwayKoaFramework } from './framework';\n\n@Configuration({\n  namespace: 'koa',\n})\nexport class KoaConfiguration {\n  @Inject()\n  framework: MidwayKoaFramework;\n\n  async onReady() {}\n\n  async onServerReady() {\n    // If isEnable is true, the framework will call framework.run() by default\n    // If enable is false at the beginning, you can also delay to manually run\n    if (/* defer execution */) {\n      await this.framework.run();\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Bug fix: Config key required\nDESCRIPTION: This commit addresses an issue where a configuration key was required but not properly handled, potentially causing errors or unexpected behavior. The fix ensures correct handling of required configuration keys. The fix is identified by commit hash fb2188e.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cross-domain/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig key required ([#1615](https://github.com/midwayjs/midway/issues/1615)) ([fb2188e](https://github.com/midwayjs/midway/commit/fb2188eaf5c24ffc9972f73323773a5899825037))\n```\n\n----------------------------------------\n\nTITLE: Fix TypeORM Config Typings Key\nDESCRIPTION: This bug fix addresses an issue with the typings for the TypeORM configuration within MidwayJS.  The fix ensures correct type definitions, preventing potential errors and improving developer experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typeorm/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Fixing Egg Application Loading with Hook in MidwayJS\nDESCRIPTION: This commit modifies the way Egg applications are loaded within the MidwayJS framework using a hook mechanism. This change might impact the application lifecycle or the interaction between Midway and Egg, and is associated with issue #1782.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nuse hook to load egg application ([#1782](https://github.com/midwayjs/midway/issues/1782)) ([b47f27b](https://github.com/midwayjs/midway/commit/b47f27bf441431ddb1d0d35d5ee0ae80ae56fce8))\n```\n\n----------------------------------------\n\nTITLE: JSONP Configuration\nDESCRIPTION: This TypeScript code defines the structure for JSONP configuration options. The `jsonp` object contains properties like `callback` and `limit`, which control various aspects of JSONP behavior. The `callback` property specifies the name of the callback function, and the `limit` property defines the maximum size of the JSONP response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cross-domain/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const jsonp = {\n  callback: 'jsonp',\n  limit: 512,\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Website without SSH - Yarn\nDESCRIPTION: Deploys the Midway.js website using Yarn without SSH, requiring the GitHub username to be provided. It builds and pushes to the `gh-pages` branch.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with mwts\nDESCRIPTION: This JSON snippet shows the default ESLint configuration for a Midway project using mwts. It extends the mwts configuration and defines ignore patterns and environment settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwts.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extends\": \"./node_modules/mwts /\",\n  \"ignorePatterns\": [\"node_modules\", \"dist\", \"test\", \"jest.config.js\", \"interface.ts\"]\n  \"env\": {\n    \"jest\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Service Factory Client Merge\nDESCRIPTION: This commit addresses a bug related to the service factory client and how clients are merged in the MidwayJS framework. The fix ensures that client merging functions correctly, preventing potential issues with service interactions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nservice factory client & clients merge ([#2248](https://github.com/midwayjs/midway/issues/2248)) ([cfdee64](https://github.com/midwayjs/midway/commit/cfdee6449cb2770bc238e74fd754b783c331b822))\n```\n\n----------------------------------------\n\nTITLE: Install Captcha Dependency - npm\nDESCRIPTION: Installs the @midwayjs/captcha component using npm. This command adds the captcha component to your project's node_modules directory and updates the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/captcha.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/captcha@3 --save\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Component\nDESCRIPTION: This TypeScript snippet demonstrates how to enable the RabbitMQ component within a MidwayJS application's configuration. It imports the necessary modules and includes `rabbitmq` in the `imports` array of the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as rabbitmq from '@midwayjs/rabbitmq';\n\n@Configuration({\n  imports: [\n    rabbitmq\n  ],\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n        // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Https in Koa with MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to configure HTTPS for a Koa application within MidwayJS by providing the SSL key and certificate files. It uses `readFileSync` to read the key and certificate from the file system.  It is generally recommended to handle HTTPS at the reverse proxy layer, such as Nginx.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  koa: {\n    key: join(__dirname, '../ssl/ssl.key'),\n    cert: join(__dirname, '../ssl/ssl.pem'),\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Serverless App More Method in MidwayJS\nDESCRIPTION: This snippet indicates a bug fix related to the `more` method in serverless applications built with MidwayJS. It ensures the correct behavior of the `more` method within a serverless context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n- serverless app more method ([#1034](https://github.com/midwayjs/midway/issues/1034)) ([9c44c3f](https://github.com/midwayjs/midway/commit/9c44c3f58930d0c12464d00eceee93cb9e7aaa62))\n```\n\n----------------------------------------\n\nTITLE: Installing Mongoose Component\nDESCRIPTION: This bash command installs the `@midwayjs/mongoose` component, providing direct access to Mongoose functionalities within a MidwayJS application. The `--save` flag adds the package as a dependency in the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/mongoose@3 --save\n```\n\n----------------------------------------\n\nTITLE: tsconfig Include Configuration\nDESCRIPTION: This JSON snippet shows a tsconfig.json configuration that includes `typeRoots` and `include`.  If `include` does not contain the directories listed in `typeRoots`, the TypeScript compiler may fail to find type definitions, leading to build errors. Ensure directories with type definition files are present in both `typeRoots` and `include`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ts_problem.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"typeRoots\": [\n    \"./node_modules/@types\",\n    \"./typings\"\n  ],\n  \"include\": [\n    \"src\",\n    \"typings\"\n  ],\n  \"exclude\": [\n    \"dist\",\n    \"node_modules\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Testing Timer Triggered Function\nDESCRIPTION: This snippet illustrates testing a timer-triggered function. It obtains a class instance using `getServerlessInstance` and calls the `handleTimerEvent` method with a mocked timer event created using `mockTimerEvent` from `@midwayjs/fc-starter`. The expected result is then asserted.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\nimport { mockTimerEvent } from '@midwayjs/fc-starter';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n   it('should get result from timer trigger', async () => {\n     // ...\n     const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n     expect(await instance.handleTimerEvent(mockTimerEvent())).toEqual('hello world');\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Log Cleaning by Time in MidwayJS\nDESCRIPTION: This snippet shows how to configure log cleaning based on the age of the log files in MidwayJS.  The `maxFiles` property, when set to a time duration (e.g., '3d'), specifies the maximum duration for which log files will be retained.  In this example, both the `file` and `error` log files will be kept for 3 days before being deleted.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         file: {\n           maxFiles: '3d',\n         },\n         error: {\n           maxFiles: '3d',\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Rendering Template in Controller\nDESCRIPTION: This code snippet demonstrates how to render a template within a controller using the ctx.render method. It imports necessary modules from @midwayjs/core and @midwayjs/koa, injects the Context, and defines a route that renders the 'hello.ejs' template with the data object. The `Context` object provides the `render` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render(){\n    await this.ctx.render('hello.ejs', {\n      data: 'world',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of COS Trigger Configuration in TypeScript\nDESCRIPTION: This example shows how to configure a COS trigger to listen for object creation events. It specifies the bucket name, event type (`cos:ObjectCreated:*`), and filters to trigger the function only for objects with a specific prefix and suffix. This allows you to selectively process objects based on their path and file type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_cos.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  @ServerlessTrigger(ServerlessTriggerType.OS, {\n    bucket: 'cli-appid.cos.ap-beijing.myqcloud.com',\n    events: 'cos:ObjectCreated:*',\n    filter: {\n      prefix: 'filterdir/',\n      suffix: '.jpg',\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Using useContext with Koa\nDESCRIPTION: This code snippet demonstrates how to use the `useContext` hook to access the Koa context within a Midway Hooks API handler.  It imports `Api`, `Get`, and `useContext` from `@midwayjs/hooks` and `Context` from `@midwayjs/koa`.  It then uses `useContext<Context>()` to retrieve the Koa context and accesses the request method and path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/builtin-hooks.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext,\n} from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/koa';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  return {\n    method: ctx.method,\n    path: ctx.path,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating `tag` Table in SQL\nDESCRIPTION: This SQL script defines the structure of the `tag` table. It includes fields for `id`, `group`, `name`, `descri`, `created_at`, and `update_at`. The `id` is an auto-incrementing primary key. The `created_at` and `update_at` fields are timestamps with default values and automatic updates.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `tag` (\n     `id` BIGINT unsigned NOT NULL AUTO_INCREMENT,\n     `group` varchar(32) NULL,\n     `name` varchar(32) NULL,\n     `descri` varchar(128) NULL,\n     `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,\n     `update_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL,\n     PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Consumer Services (config.default.ts)\nDESCRIPTION: This code snippet shows how to configure gRPC consumer services in the `config.default.ts` file.  It defines a `grpc` object containing a `services` array.  Each entry in the array specifies the `url`, `protoPath`, and `package` needed to connect to an external gRPC service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nimport { MidwayAppInfo, MidwayConfig } from '@midwayjs/core';\nimport { join } from 'path';\n\nexport default (appInfo: MidwayAppInfo): MidwayConfig => {\n  return {\n    // ...\n    grpc: {\n      services: [\n        {\n          url: 'localhost:6565',\n          protoPath: join(appInfo.appDir, 'proto/helloworld.proto'),\n          package: 'helloworld',\n        },\n      ],\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding Queues to Bull Board (TypeScript)\nDESCRIPTION: This snippet illustrates how to dynamically add queues to the Bull Board UI using the `BullBoardManager` class. It injects the `bullFramework` to create a queue and the `bullBoardManager` to register the newly created queue for monitoring and management in the UI.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as bull from '@midwayjs/bull';\nimport * as bullBoard from '@midwayjs/bull-board';\n\n@Configuration({\n  imports: [\n    // ...\n    bull,\n    bullBoard\n  ]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  bullFramework: bull.Framework;\n  \n  @Inject()\n  bullBoardManager: bullBoard.BullBoardManager;\n\n  async onReady() {\n    const testQueue = this.bullFramework.createQueue('test', {\n      // ...\n    });\n\n    this.bullBoardManager.addQueue(testQueue);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces a new 'guard' feature to the MidwayJS framework. The guard likely provides a mechanism for access control or request validation within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Installing Nunjucks view engine (Bash)\nDESCRIPTION: This command installs the `@midwayjs/view-nunjucks` component, which enables Nunjucks template rendering in MidwayJS applications. The `--save` flag adds the component as a project dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/view-nunjucks --save\n```\n\n----------------------------------------\n\nTITLE: Update Age with ParseIntPipe\nDESCRIPTION: This code snippet shows how to use the `ParseIntPipe` to convert a string or numeric data to a number. The `@Body` decorator is used to extract the 'age' parameter from the request. The `ParseIntPipe` is applied to the 'age' parameter, ensuring that it's converted to a number before being used in the `updateAge` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipe.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ParseIntPipe } from '@midwayjs/validate';\n\n@Controller('/api/user')\nexport class HomeController {\n\n   @Post('/update_age')\n   async updateAge(@Body('age', [ParseIntPipe]) age: number ) {\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending SSE Data with HttpServerResponse (TypeScript)\nDESCRIPTION: This code shows how to send data over an SSE stream using the `send` and `sendEnd` methods of `HttpServerResponse`.  `sendEnd` closes the connection after sending the data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = new HttpServerResponse(this.ctx).sse();\n\nres.send({\n  data: 'abcde'\n});\n\nres.sendEnd({\n  data: 'end'\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize Midway project\nDESCRIPTION: This command initializes a Midway project using the latest version of the `create-midway` package. The `-y` flag automatically answers yes to all prompts, using default values. This command pulls the package from the npm registry and executes it.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope\nDESCRIPTION: Addresses an issue where the singleton invoke request scope was not valid. This fix ensures the correct scoping and lifecycle management of singleton instances within request contexts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/sequelize/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n- singleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Code\nDESCRIPTION: Compiles TypeScript code using mwcc(tsc), suitable for standard projects. Use `package` for Serverless projects.  `-c` flag cleans the build directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin build -c\n```\n\n----------------------------------------\n\nTITLE: Fixing Service Factory Client Merge Bug\nDESCRIPTION: This commit addresses a bug related to the merging of service factory clients in MidwayJS. The fix ensures that clients are properly merged, preventing potential issues with service discovery and invocation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Production Deployment Setup\nDESCRIPTION: This shell command starts the application in production mode by setting the `EGG_SERVER_ENV` environment variable to `prod`. It requires npm to execute the start script.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/test/fixtures/enhance/base-app-hackernews/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ EGG_SERVER_ENV=prod npm start\n```\n\n----------------------------------------\n\nTITLE: Updating ws Dependency in MidwayJS (v8)\nDESCRIPTION: This commit updates the 'ws' dependency to version 8. This update likely includes breaking changes, new features, and performance improvements related to the websocket library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n**deps:** update dependency ws to v8 ([#1488](https://github.com/midwayjs/midway/issues/1488)) ([7e71bb4](https://github.com/midwayjs/midway/commit/7e71bb4eeb731d3bf91f0caf06bc9d9acb6297ca))\n```\n\n----------------------------------------\n\nTITLE: Installing Axios Dependency - Bash\nDESCRIPTION: This snippet shows the command to install the `@midwayjs/axios` package using npm.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/axios@3 --save\n```\n\n----------------------------------------\n\nTITLE: Import COS Component\nDESCRIPTION: This code snippet imports the COS component and the Configuration decorator in the `configuration.ts` file to integrate COS into the MidwayJS application. It also sets up the configuration path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cos.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport * as cos from '@midwayjs/cos';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    cos, // 导入 cos 组件\n  ],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding MQTT Subscriber\nDESCRIPTION: Shows how to dynamically add an MQTT subscriber using the mqtt.Framework. It injects the mqtt.Framework and calls createSubscriber with the broker options, subscribe options, subscriber class, and name. This allows for programmatically defining MQTT subscriptions during runtime.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-05-07-release-3.16.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as mqtt from '@midwayjs/mqtt';\n\n@Configuration({\n  // ...\n})\nclass MainConfiguration {\n  \n  @Inject()\n  mqttFramework: mqtt.Framework;\n  \n  async onReady() {\n    await this.mqttFramework.createSubscriber({\n      host: 'test.mosquitto.org',\n      port: 1883,\n    }, {\n      topicObject: 'test_midway_dynamic',\n    }, TestSubscriber, 'test');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Middleware with ctx.body in MidwayJS\nDESCRIPTION: This snippet refers to a bug fix related to middleware interacting with `ctx.body` in MidwayJS. It likely resolves an issue where middleware was not correctly handling or modifying the response body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n- middleware with ctx.body ([#1389](https://github.com/midwayjs/midway/issues/1389)) ([77af5c0](https://github.com/midwayjs/midway/commit/77af5c0b456f1843f4dcfd3dbfd2c0aa244c51bd))\n```\n\n----------------------------------------\n\nTITLE: Configure Logger: Lazy Initialization\nDESCRIPTION: This code snippet shows how to configure lazy initialization for a specific logger client in the MidwayJS configuration. A logger with `lazyLoad: true` will only be initialized when it's first used via `getLogger` or `@Logger` injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     clients: {\n       customLoggerA: {\n         level: 'DEBUG',\n       },\n       customLoggerB: {\n         lazyLoad: true,\n       },\n     }\n     //...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Importing Event Types from FC Starter Typescript\nDESCRIPTION: This TypeScript snippet shows how to import various Event types, like `OSSEvent`, `MNSEvent`, `SLSEvent`, `CDNEvent`, `TimerEvent`, `APIGatewayEvent`, `TableStoreEvent`, and `InitializeContext` from the `@midwayjs/fc-starter` package. These types can be used to strongly type the event parameters in your serverless functions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Event 类型\nimport type { \n  OSSEvent,\n  MNSEvent,\n  SLSEvent,\n  CDNEvent,\n  TimerEvent,\n  APIGatewayEvent,\n  TableStoreEvent,\n} from '@midwayjs/fc-starter';\n// InitializeContext 类型\nimport type { InitializeContext } from '@midwayjs/fc-starter';\n```\n\n----------------------------------------\n\nTITLE: tsconfig.json Example with typeRoots and include (TypeScript)\nDESCRIPTION: This snippet illustrates a typical `tsconfig.json` configuration including `typeRoots`, `include`, and `exclude` fields.  It highlights a potential issue where types defined in `typeRoots` may not be recognized if they are not also included in the `include` array. The example emphasizes that `include` must explicitly list directories containing TypeScript source files and type definition files to be compiled.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/ts_problem.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typeRoots\": [\n    \"./node_modules/@types \",\n    \"./typings\"\n  ],\n  \"include\": [\n    \"src \",\n    \"typings\"\n  ],\n  \"exclude\": [\n    \"dist \",\n    \"node_modules\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Add casbin module feature in MidwayJS\nDESCRIPTION: This commit adds the casbin module to the MidwayJS framework. Casbin is an authorization library that supports access control models like ACL, RBAC, ABAC in Midway.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces a guard feature to the MidwayJS framework. Guards are used to protect routes or other resources by verifying that the user or request has the necessary permissions or authorization before proceeding.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Tencent Cloud Trigger Request Body Type Check\nDESCRIPTION: This TypeScript snippet demonstrates a function used to check the type of the request body received from an Tencent Cloud trigger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = this.ctx.request.body;\nreturn {\n  type: typeof body,\n  body,\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Prometheus Bootstrap for Egg\nDESCRIPTION: This bug fix corrects an issue related to bootstrapping the Prometheus module within the Egg.js framework. The fix ensures that Prometheus is properly initialized and configured when used within Egg.js applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/bull\nDESCRIPTION: This command installs the @midwayjs/bull package as a dependency to your project. The @3 version is specified.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/bull@3 --save\n```\n\n----------------------------------------\n\nTITLE: Database Connection Management in TypeScript\nDESCRIPTION: This code demonstrates how to use the ILifeCycle interface to manage a database connection in Midway.js. The ContainerConfiguration class implements ILifeCycle and uses the onReady method to connect to the database and the onStop method to close the connection. The @Inject decorator is used to inject a database connection utility class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/lifecycle.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport { ILifeCycle, IMidwayContainer } from '@midwayjs/core';\n\n@Configuration()\nexport class ContainerConfiguration implements ILifeCycle {\n  @Inject()\n  db: any;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    // 建立数据库连接\n    await this.db.connect();\n  }\n\n  async onStop(): Promise<void> {\n    // 关闭数据库连接\n    await this.db.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Scripts (JSON)\nDESCRIPTION: This snippet updates the scripts in the `package.json` file to use the `midway-bin` command for development, testing, and deployment.  The `build` command is removed, as the `deploy` command now handles building the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_v1_upgrade_serverless_v2.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"dev\": \"midway-bin dev --ts\",\n    \"test\": \"midway-bin test --ts\",\n    \"deploy\": \"midway-bin deploy\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Manually setting response header using Koa Context\nDESCRIPTION: This code demonstrates manually setting a response header using the Koa Context object. It obtains the context using `useContext` and then uses the `ctx.set` method to add the header.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  ctx.set('X-Powered-By', 'Midway');\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Variables (TypeScript)\nDESCRIPTION: This snippet shows how to import variables from a module in TypeScript using the `import` statement.  It is essential for maintaining proper type information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// ts 写法\nimport { applicatoin } from 'midway';\n```\n\n----------------------------------------\n\nTITLE: Providing Object ID Typescript\nDESCRIPTION: This code shows how to explicitly define object IDs using the `@provide()` decorator and inject specific instances using `@inject()`. This allows injecting different instances of the same type based on their IDs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@provide('uModel')\nexport class UserModel {}\n\n@provide('user')\nexport class UserService {\n  @inject('uModel')\n  userModel;\n\n  async getUser(userId) {\n    return await this.userModel.get(userId);\n  }\n}\n\n// 使用修改之后的 id 获取对象\nconst userService = await container.getAsync('user');\n```\n\n----------------------------------------\n\nTITLE: Assign Null Value to Model Property to Fix TS2612\nDESCRIPTION: This snippet illustrates how to fix a TS2612 error by assigning a default value of `undefined` to properties. This makes the Typescript compiler happy and removes the error, allowing the code to compile successfully.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Column } from 'sequelize-typescript';\n\n@Table\nexport class User extends Model {\n   @Column({\n     primaryKey: true,\n     autoIncrement: true,\n     type: DataType.BIGINT,\n   })\n   id?: number = undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Server Response - Controller Example (TypeScript)\nDESCRIPTION: This code demonstrates how to use `HttpServerResponse` to customize the server response format in a MidwayJS controller. It creates a JSON response with a success flag and data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-08-29-release-3.17.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerResponse, HttpServerResponse } from '@midwayjs/core';\n\n@Controller()\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async index() {\n    return new HttpServerResponse(this.ctx).json({\n      success: true,\n      data: 'hello world',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure matchHeaderKey for Code Dye\nDESCRIPTION: Configures the `matchHeaderKey` option to enable code dyeing based on the presence of a specific header. When a request contains the defined header, the code dyeing functionality is activated. Defined within `src/config/config.local.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/code_dye.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nexport default {\n   codeDye: {\n     matchHeaderKey: 'codeDyeHeader',\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling CoreLogger Info Console Output in Local Env\nDESCRIPTION: This code change disables the core logger's info console output in local environments. The associated commit is adaaaeaa9694c072de709c6643c0d7cffbdf3065 and it resolves issue #829.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: CORS Configuration - Limiting Origin - JavaScript\nDESCRIPTION: This JavaScript code showcases a `fetch` call with credentials to a specific origin (`http://127.0.0.1:7002/`).  The server must be configured to allow credentials and limit the allowed origin.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cross_domain.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('http://127.0.0.1:7002/', {\n   credentials: 'include'\n})\n```\n\n----------------------------------------\n\nTITLE: VSCode settings.json configuration for Jest Runner (JavaScript)\nDESCRIPTION: This JavaScript code represents a configuration snippet for VSCode's settings.json, specifically for the Jest Runner extension.  It specifies the path to the Jest executable and includes the `--detectOpenHandles` flag for detecting open handles that might prevent the process from exiting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"jest.pathToJest\": \"node --require=ts-node/register ./node_modules/.bin/jest --detectOpenHandles\",\n  \"jestrunner.jestCommand\": \"node --require=ts-node/register ./node_modules/.bin/jest --detectOpenHandles\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zod\nDESCRIPTION: This command installs the Zod validation library, which is required for the validation features described in this document.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install zod\n```\n\n----------------------------------------\n\nTITLE: Importing Axios Module in Configuration\nDESCRIPTION: This code snippet shows how to import the Axios module in the `configuration.ts` file.  This is necessary to register the Axios component with the Midway.js dependency injection container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/axios.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport * as axios from '@midwayjs/axios';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    axios, // 导入 axios 组件\n  ],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with HttpClient Instance in Typescript\nDESCRIPTION: This snippet demonstrates creating an `HttpClient` instance and using its `request` method to make an HTTP request. The response data is a Buffer.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpClient } from '@midwayjs/core';\n\nconst httpclient = new HttpClient();\nconst result = await httpclient.request('http://127.1:7001/');\n\n// Buffer.isBuffer(result.data) => true\n```\n\n----------------------------------------\n\nTITLE: Multiple Routes to the Same Method\nDESCRIPTION: Maps multiple routes to the same controller method using multiple `@Get` decorators. Both '/' and '/main' routes will execute the `home` method, responding with \"Hello Midwayjs!\".\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('/')\n@Get('/main')\nasync home() {\n  return 'Hello Midwayjs!';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Casbin Module to MidwayJS\nDESCRIPTION: This code snippet represents the addition of the casbin module to the MidwayJS framework. The casbin module likely provides access control features. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/validate/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd casbin module ([#2358](https://github.com/midwayjs/midway/issues/2358)) ([a7d2786](https://github.com/midwayjs/midway/commit/a7d27863b756dcf81abc4d7dedaf35c517c2c1e3))\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Egg Framework\nDESCRIPTION: This feature enables developers to define a custom Egg framework within MidwayJS. This allows for greater flexibility and customization of the underlying framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Fixing App/Extend Publication Issue in Midway.js\nDESCRIPTION: This commit addresses a bug where the app/extend files were not being published to npm. This fix ensures that extensions to the application context are correctly packaged and distributed with the Midway.js framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_43\n\nLANGUAGE: Other\nCODE:\n```\n73ba51a\n```\n\n----------------------------------------\n\nTITLE: Querying Healthy Service from Consul in MidwayJS\nDESCRIPTION: This code demonstrates how to query a healthy service from Consul using the `BalancerService` in a MidwayJS controller. It injects the `BalancerService`, retrieves a service balancer, and selects a healthy instance of the 'my-midway-project' service. The `select` method retrieves information about a healthy service instance from Consul.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/consul.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/decorator';\nimport { BalancerService } from '@midwayjs/consul';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  balancerService: BalancerService;\n\n  @Get('/')\n  async home() {\n    const service = await this.balancerService.getServiceBalancer().select('my-midway-project');\n    console.log(service);\n    return 'Hello Midwayjs!';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing @midwayjs/logger in interface.ts\nDESCRIPTION: This code snippet shows how to import the `@midwayjs/logger` module in your `interface.ts` file to restore the logger's configuration definitions. This is necessary because TypeScript type merging requires explicit declaration in the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-11-13-release-3.13.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n+ import type {} from '@midwayjs/logger';\n\n/**\n * @description User-Service parameters\n */\nexport interface IUserOptions {\n  uid: number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Passing Scaffold Parameters with npm init\nDESCRIPTION: This command illustrates passing custom parameters to the scaffold using the `--` separator. `bbb` is the parameter name, and `ccc` is its value. The scaffold can access these parameters during generation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --bbb=ccc\n```\n\n----------------------------------------\n\nTITLE: Configure Default Line Ending in VSCode\nDESCRIPTION: This JSON snippet configures the default end-of-line (eol) character in VSCode to be a newline character (LF). This ensures that all newly created files in VSCode use LF line endings, preventing issues with line ending inconsistencies when collaborating with developers on different operating systems.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/git_problem.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"files.eol\": \"\\n\",\n```\n\n----------------------------------------\n\nTITLE: Get Service from Application Context (Static API)\nDESCRIPTION: Demonstrates how to retrieve a service instance from the global application context using `getCurrentApplicationContext()` after the application has started.  This allows accessing services without dependency injection in utility classes or other scenarios where direct injection is not feasible.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCurrentApplicationContext } from '@midwayjs/core';\n\nexport const getService = async (serviceName) => {\n  return getCurrentApplicationContext().getAsync(serviceName);\n}\n```\n\n----------------------------------------\n\nTITLE: IValveHandler Implementations\nDESCRIPTION: Defines IValveHandler implementations for fetching video feeds, account information, and tab information. Each class has an alias and uses the TestService to fetch the data. They each implement the invoke method, which takes an IPipelineContext as argument and returns a promise resolving to the appropriate DTO.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 返回视屏信息的\n@Provide()\nclass VideoFeeds implements IValveHandler {\n  alias = 'videos';\n\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<VideoDto[]> {\n    return this.service.getVideos(ctx.args);\n  }\n}\n// 返回账户信息的\n@Provide()\nclass AccountMap implements IValveHandler {\n  alias = 'account';\n\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<AccountDto> {\n    // 获取数据执行逻辑\n    return this.service.getAccount(ctx.args);\n  }\n}\n// 返回tab信息的\n@Provide()\nclass CrowFeeds implements IValveHandler {\n  alias = 'tab';\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<TabDto> {\n    // 获取数据执行逻辑\n    return this.service.getTab(ctx.args);\n  }\n}\n// 捕捉整个错误异常的\n@Provide()\nclass ErrorFeeds implements IValveHandler {\n  alias = 'tab';\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<TabDto> {\n    // 获取数据执行逻辑\n    throw new Error('this is error feeds');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Consumer Configuration Example\nDESCRIPTION: Provides a complete example of Kafka consumer configuration, including `clientId`, `brokers`, `groupId`, and `topics`.  This configuration is essential for connecting to a Kafka cluster, identifying the application, and subscribing to relevant topics for message consumption. Replace the placeholder values with actual Kafka broker addresses and topic names.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          clientId: 'my-app',\n          brokers: ['localhost:9092'],\n        },\n        consumerOptions: {\n          groupId: 'groupId-test-1',\n        },\n        subscribeOptions: {\n          topics: ['topic-test-1'],\n        }\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UserService with User interface in TypeScript\nDESCRIPTION: This code defines a UserService class with a getUser method that returns a Promise resolving to a User object. It imports the User interface from '../interface' and uses it as the return type for the getUser method. The @Provide decorator marks the class for dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/service.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { User } from '../interface';\n\n@Provide()\nexport class UserService {\n\n  async getUser(id: number): Promise<User> {\n    return {\n      id,\n      name: 'Harry',\n      age: '18',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding mwts as a development dependency\nDESCRIPTION: This JSON snippet shows how to add mwts and TypeScript as development dependencies to a project using npm or yarn. These dependencies are required for linting, formatting, and type checking.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/mwts.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"mwts\": \"^1.0.5\",\n    \"typescript\": \"^4.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mocha Dependencies for Coverage\nDESCRIPTION: Installs Mocha, its type definitions, and NYC (Istanbul) as development dependencies. Required when using Mocha for coverage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i mocha @types/mocha nyc --save-dev\n```\n\n----------------------------------------\n\nTITLE: Modifying Egg Bin Setup File Rule in Midway.js\nDESCRIPTION: This commit modifies the setup file rule within the Egg.js binary used by Midway.js. The provided commit hash links to the specific change. The change is related to configuration or execution of Egg.js components within the Midway.js framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_40\n\nLANGUAGE: Other\nCODE:\n```\n4b9461d\n```\n\n----------------------------------------\n\nTITLE: Enable view-nunjucks component in configuration\nDESCRIPTION: This TypeScript code imports and enables the `@midwayjs/view-nunjucks` component within the MidwayJS application configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport * as view from '@midwayjs/view-nunjucks';\n\n@Configuration({\n  imports: [\n    koa,\n    // ...\n    view\n  ],\n  importConfigs: [join(__dirname, './config')]\n})\nexport class MainConfiguration {\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Reverse One-to-One Relationship in Photo\nDESCRIPTION: This code snippet adds a one-to-one relationship to the `Photo` entity that maps back to the `PhotoMetadata` entity. This creates a bi-directional mapping where `Photo` has a `metadata` property that represents its associated `PhotoMetadata` object.  `type => PhotoMetadata, photoMetadata => photoMetadata.photo` defines the relationship.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from 'typeorm';\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne } from 'typeorm';\nimport { PhotoMetadata } from './photoMetadata.entity';\n\n@Entity()\nexport class Photo {\n\n  /* ... other columns */\n\n  @OneToOne(type => PhotoMetadata, photoMetadata => photoMetadata.photo)\n  metadata: PhotoMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Package Versions with `midway-version` (pnpm)\nDESCRIPTION: This command checks the versions of Midway packages when the project uses `pnpm` for dependency management. It's crucial for ensuring that all Midway packages are compatible and up-to-date within the pnpm environment. It uses `pnpx` to run `midway-version` without requiring global installation, streamlining the version checking process for community users.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_update_midway.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Community user\n$ pnpx midway-version\n# Internal user\n$ pnpx @ali/midway-version\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection and Casbin Adapter\nDESCRIPTION: This TypeScript code snippet configures the Redis connection and the Casbin adapter within the `config.default.ts` file. It defines a Redis client specifically for Casbin and configures the `createAdapter` function to use that client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\nimport { createAdapter } from '@midwayjs/casbin-redis-adapter';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    redis: {\n      clients: {\n        // 为 casbin 定义了一个连接\n        'node-casbin-official': {\n          host: '127.0.0.1',\n          port: 6379,\n          password: '',\n          db: '0',\n        }\n      }\n    },\n    casbin: {\n      policyAdapter: createAdapter({\n        // 配置了上面的连接名\n        clientName: 'node-casbin-official'\n      }),\n      // ...\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Route Priority using @priority Decorator\nDESCRIPTION: This code demonstrates the use of the `@priority` decorator to control the order in which routes are matched.  This is particularly important in single-page applications where catch-all routes might interfere with more specific routes. The decorator accepts a number, with lower numbers indicating higher priority.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/controller.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\n@priority(-1)\n@controller('/')\nexport class HomeController {\n  @get('/hello')\n  async index(ctx) {\n    ctx.body = 'hello';\n  }\n\n  @get('/*')\n  async all(ctx) {\n    ctx.body = 'world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using an API (integration example)\nDESCRIPTION: This code shows how to call an API (presumably defined in the previous snippet) from another part of the application. It uses `import getIp from './api';` and `await getIp();` to call the API asynchronously and print the returned IP address. It assumes that the `getIp` function is an async function that returns an object containing an `ip` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/builtin-hooks.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport getIp from './api';\nconst { ip } = await getIp();\nconsole.log(ip); // 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing Database Drivers - Bash\nDESCRIPTION: This series of commands installs database drivers for different database systems like MySQL, PostgreSQL, SQLite, MSSQL, SQL.js, Oracle, and MongoDB. You should install the driver corresponding to the database you intend to use with Sequelize. Use `npm install <driver_name> --save`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# for MySQL or MariaDB, you can also use mysql2 instead\nnpm install mysql --save\nnpm install mysql2 --save\n\n# for PostgreSQL or CockroachDB\nnpm install pg --save\n\n# for SQLite\nnpm install sqlite3 --save\n\n# for Microsoft SQL Server\nnpm install mssql --save\n\n# for SQL .js\nnpm install SQL .js --save\n\n# for Oracle\nnpm install oracledb --save\n\n# for MongoDB(experimental)\nnpm install mongodb --save\n```\n\n----------------------------------------\n\nTITLE: Event Trigger in Alibaba Cloud Function Compute with Midway\nDESCRIPTION: This code snippet demonstrates how to bind an event trigger in Alibaba Cloud Function Compute using the `@ServerlessTrigger` decorator in Midway. It handles event-based function invocations and returns the event data. Dependencies include `@midwayjs/core` and `@midwayjs/faas`. Input is any event data, and output is the same event data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloAliyunService {\n   @Inject()\n   ctx: Context;\n\n   @ServerlessTrigger(ServerlessTriggerType.EVENT)\n   async handleEvent(event: any) {\n     return event;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Connections\nDESCRIPTION: This code snippet shows how to handle WebSocket connections using the @OnWSConnection decorator. When a client connects, the onConnectionMethod function is triggered, logging a message to the console. It utilizes the Context and http modules for accessing WebSocket instance and request info respectively.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, Provide, OnWSConnection, Inject } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/ws';\nimport * as http from 'http';\n\n@Provide()\n@WSController()\nexport class HelloSocketController {\n  @Inject()\n  ctx: Context;\n\n  @OnWSConnection()\n  async onConnectionMethod(socket: Context, request: http.IncomingMessage) {\n    console.log(`namespace / got a connection ${this.ctx.readyState}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Triggered Function\nDESCRIPTION: This snippet shows how to test an HTTP-triggered function using `createHttpRequest` from `@midwayjs/mock`. It sends a GET request to the root path with a query parameter and asserts the response text. Assumes the Midway app is already initialized.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n   it('should get result from http trigger', async () => {\n     // ...\n     const result = await createHttpRequest(app).get('/').query({\n       name: 'zhangting',\n     });\n     expect(result.text).toEqual('hello zhangting');\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: TypeORM Multi-Datasource Configuration\nDESCRIPTION: This code shows how to configure multiple database connections in TypeORM. The `dataSource` object contains multiple connection configurations, each with its own type, host, port, and database settings. This allows you to connect to multiple databases within the same application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from 'path';\n\nexport default {\n  typeorm: {\n    dataSource: {\n      default: {\n        type: 'sqlite',\n        database: join(__dirname, '../../default.sqlite')\n        // ...\n      },\n      test: {\n        type: 'mysql',\n        host: '127.0.0.1',\n        port: 3306\n        // ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Jest and CLI versions in package.json\nDESCRIPTION: This snippet shows the required updates in the `package.json` file to upgrade Jest to v29 and `@midwayjs/cli` to a version greater than or equal to 1.3.16. This resolves compatibility issues with the `exports` field. The dependencies `@types/jest` and `ts-jest` are also upgraded for compatibility.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-10-29-update-jest.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@midwayjs/cli\": \"^2.0.1\",\n    \"@types/jest\": \"^29.2.0\",\n    \"jest\": \"^29.2.2\",\n    \"ts-jest\": \"^29.0.3\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Event Triggered Function\nDESCRIPTION: This code demonstrates testing an event-triggered function by obtaining an instance of the class using `getServerlessInstance` and calling the `handleEvent` method with test parameters. The expected output is then asserted using `expect`.  `HelloAliyunService` is assumed to be defined elsewhere.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n   it('should get result from event trigger', async () => {\n     // ...\n     const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n     expect(await instance.handleEvent('hello world')).toEqual('hello world');\n     // ...\n   });\n});\n```\n\n----------------------------------------\n\nTITLE: Example MNS Event Structure (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an MNSEvent object received by an MNS-triggered function in Alibaba Cloud Function Compute. It includes details about the message, topic, subscriber, and other relevant information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Context\": \"user custom info\",\n  \"TopicOwner\": \"1186202104331798\",\n  \"Message\": \"hello topic\",\n  \"Subscriber\": \"1186202104331798\",\n  \"PublishTime\": 1550216302888,\n  \"SubscriptionName\": \"test-fc-subscibe\",\n  \"MessageMD5\": \"BA4BA9B48AC81F0F9C66F6C909C39DBB\",\n  \"TopicName\": \"test-topic\",\n  \"MessageId\": \"2F5B3C281B283D4EAC694B7425288675\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Routes for a Controller\nDESCRIPTION: This code shows how to define multiple routes with different HTTP methods within the same controller.  It uses `@Get` and `@Post` decorators to map different methods and paths to different handler functions.  The `updateData` method is mapped to the `/update` path using the POST method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Post, Provide } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  async home() {\n    return 'Hello Midwayjs!';\n  }\n\n  @Post('/update')\n  async updateData() {\n    return 'This is a post method';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Dependency Example Typescript\nDESCRIPTION: Demonstrates a common dependency pattern where class `C` directly instantiates and depends on classes `A` and `B`. This approach results in tight coupling, making testing and maintenance more difficult.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 常见的依赖\nimport { A } from './A';\nimport { B } from './B';\n\nclass C {\n  constructor() {\n    this.a = new A();\n    this.b = new B(this.a);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Dependencies in package.json\nDESCRIPTION: This snippet shows the necessary devDependencies for TypeScript in a Midway.js project. It includes type definitions for Node.js and Mocha, as well as ts-node, tslint, and the TypeScript compiler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// in package.json\n\"devDependencies\": {\n  \"@types/mocha\": \"^5.2.5\",\n  \"@types/node\": \"^10.5.5\",\n  \"ts-node\": \"^7.0.1\",\n  \"tslint\": \"^5.9.1\",\n  \"typescript\": \"^2.8.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Default Environment\nDESCRIPTION: This change fixes the default environment configuration in MidwayJS, addressing issues reported across multiple related issues. The fix ensures the correct default environment is used, resolving inconsistencies and potential errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Creating a Timer Event with createTimerEvent in TypeScript\nDESCRIPTION: This snippet demonstrates using `createTimerEvent` to simulate a timer trigger event in a serverless function test. It gets an instance of the service and invokes its timer handler with the created event. Dependencies include `@midwayjs/serverless-fc-trigger`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_testing.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTimerEvent } from '@midwayjs/serverless-fc-trigger';\n\nit('should get result from timer trigger', async () => {\n  // 拿到服务类\n  const instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n  // 调用函数方法，传入参数\n  await instance.handleTimer(createTimerEvent());\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings - TypeScript\nDESCRIPTION: This commit fixes the typings for the supertest library and addresses issues related to the createFunctionApp functionality. This change ensures that supertest is used correctly and improves the overall testing experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/axios/CHANGELOG.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Adding Casbin Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the `@midwayjs/casbin` package as a dependency in your `package.json` file.  This ensures that the Casbin package is included when installing project dependencies.  The caret `^` indicates a semver range, allowing compatible minor and patch updates.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/casbin\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Context Logger Mixin in MidwayJS\nDESCRIPTION: This bug fix addresses issues related to context logger mixins. The associated commit is 21c78c2a6d3d313d5e504394abdf2d4e91b71b24 and it resolves issue #836.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Getting Middleware Name for Function Middleware - TypeScript\nDESCRIPTION: Shows how the name of function middleware is derived from the function name.  If the function is anonymous, the `_name` property can be added to the function to specify a name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function fnMiddleware(ctx, next) {\n  // ...\n  await next();\n  // ...\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = async (ctx, next) => {\n  // ...\n  await next();\n  // ...\n};\n\nfn._name = 'fnMiddleware';\n\n```\n\n----------------------------------------\n\nTITLE: GetCurrentApplicationContext API Support - Feature\nDESCRIPTION: This feature adds support for the `getCurrentApplicationContext` API. This API provides a way to retrieve the current application context within the MidwayJS framework, offering greater flexibility in managing application state and dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Opening the EggJS Component in MidwayJS\nDESCRIPTION: This TypeScript code snippet demonstrates how to open and configure the EggJS component within a MidwayJS application. It imports necessary modules from `@midwayjs/core` and `@midwayjs/web`, and uses the `@Configuration` decorator to define the main configuration class. It also includes an example of accessing the application instance.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App } from '@midwayjs/core';\nimport * as web from '@midwayjs/web';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [web]\n  importConfigs: [join(__dirname, './config')]\n})\nexport class MainConfiguration {\n  @App()\n  app: web.Application;\n\n  async onReady() {\n\t\t// ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cleaning Temporary Files with midway-bin\nDESCRIPTION: Executes the `clean` command of `midway-bin` to remove temporary files like logs, run directory and .nodejs-cache.  Can be extended via configuration in `package.json`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmidway-bin clean\n```\n\n----------------------------------------\n\nTITLE: Configuring Info Component - Environment Specific\nDESCRIPTION: This TypeScript code snippet configures the @midwayjs/info component to be enabled only in the 'local' environment. This can be useful for preventing sensitive application information from being exposed in production environments.  The koa import is present as a dependency to display info in http requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/info.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as info from '@midwayjs/info';\n\n@Configuration({\n  imports: [\n    koa,\n    {\n      component: info,\n      enabledEnvironment: ['local'],\t// 只在本地启用\n    }\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Component and Framework Config Definition\nDESCRIPTION: Adds the component and framework config definition. This enhancement allows developers to define and manage configurations for components and the overall framework within MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/sequelize/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n- add component and framework config definition ([#1367](https://github.com/midwayjs/midway/issues/1367)) ([b2fe615](https://github.com/midwayjs/midway/commit/b2fe6157f99659471ff1333eca0b86bb889f61a3))\n```\n\n----------------------------------------\n\nTITLE: Supporting Wildcard Routes in Koa-Router for MidwayJS\nDESCRIPTION: This commit enhances the koa-router integration within MidwayJS by adding support for wildcard routes. Wildcard routes allow matching of multiple route segments with a single route definition. This feature provides greater flexibility in defining API endpoints and handling dynamic URLs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n0321497421de648dc791ceb60316c78026dc3cf9\n```\n\n----------------------------------------\n\nTITLE: Test Local Auth with Curl\nDESCRIPTION: This bash script simulates a POST request to the `/passport/local` endpoint with username and password credentials.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:7001/passport/local -d '{\"username\": \"demo\", \"password\": \"1234\"}' -H \"Content-Type: application/json\"\n\n结果 {\"username\": \"demo\", \"password\": \"1234\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Zlib Logger File Support\nDESCRIPTION: This feature adds support for using zlib to compress logger files in MidwayJS. It provides a way to reduce storage space consumed by logs by compressing them using the zlib library.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Install Kafka Dependency (npm)\nDESCRIPTION: Installs the `@midwayjs/kafka` module using npm. This is a required step to use Kafka in your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/kafka --save\n```\n\n----------------------------------------\n\nTITLE: Example Event (application/x-www-form-urlencoded) - Alibaba Cloud API Gateway\nDESCRIPTION: This JSON represents the event payload received by a serverless function when using Alibaba Cloud API Gateway with a Content-Type of application/x-www-form-urlencoded.  'isBase64Encoded' is false.  The content-type header is present.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"{\\\"c\\\":\\\"b\\\"}\",\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"cache-control\": \"no-cache\",\n    \"user-agent\": \"PostmanRuntime/7.24.1\",\n    \"postman-token\": \"feb51b11-9103-463a-92ff-73076d37b683\",\n    \"accept-encoding\": \"gzip, deflate, br\",\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  },\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": false,\n  \"path\": \"/api/321\",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Colors in MikroORM Logging (Typescript)\nDESCRIPTION: This snippet demonstrates how to disable colors in MikroORM logging output and configure the log file name within a Midway application. By setting `autoColors` to `false` and specifying `fileLogName`, the appearance and location of the log file can be customized.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mikro.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexporg default {\n\tmidwayLogger: {\n    clients: {\n      mikroLogger: {\n        transports: {\n          console: {\n            autoColors: false,\n          }，\n          file: {\n            fileLogName: 'mikro.log'，\n          },\n        },\n      }\n    }\n  },\n  mikro: {\n    dataSource: {\n      default: {\n        entities: [Author, Book, BookTag, Publisher, BaseEntity],\n        // ...\n        logger: 'mikroLogger',\n        colors: false,\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Swagger UI JSON path\nDESCRIPTION: This commit replaces the JSON path used by the Swagger UI. Addresses issue #1860. Commit hash is 0f3728daccba12923f23f5b498c7dda13ced36d7.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Tencent Cloud Trigger JSON Body Result\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Tencent Cloud with JSON payload. The request body is parsed into a JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\"b\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Fixing service factory client merge in MidwayJS\nDESCRIPTION: This code snippet fixes an issue related to service factory client and client merges within the MidwayJS framework. The fix addresses issue #2248 and is associated with a specific commit hash.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/oss/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- service factory client & clients merge ([#2248](https://github.com/midwayjs/midway/issues/2248)) ([cfdee64](https://github.com/midwayjs/midway/commit/cfdee6449cb2770bc238e74fd754b783c331b822))\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n for validation in MidwayJS\nDESCRIPTION: This feature implements internationalization (i18n) for validation within the MidwayJS framework. It allows developers to define validation messages in multiple languages, enhancing the user experience for global applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Configure Code Dye with Header Match\nDESCRIPTION: Configures the @midwayjs/code-dye component to activate when a specific header is present in the request. The `matchHeaderKey` property defines the header name to look for in the request headers. The code is placed in `src/config/config.local.ts`, indicating it's a local development configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/code_dye.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nexport default {\n  codeDye: {\n    matchHeaderKey: 'codeDyeHeader',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aliyun API Gateway Passthrough Event Example (application/json)\nDESCRIPTION: This JSON snippet shows an example event passed to a serverless function when using Alibaba Cloud API Gateway with parameter passthrough and a `content-type` of `application/json`.  The `body` field contains a base64 encoded string representing a JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"eyJjIjoiYiJ9\",\n  \"headers\": {\n    \"X-Ca-Dashboard-Action\": \"DEBUG\",\n    \"X-Ca-Dashboard-Uid\": \"125087\",\n    \"X-Ca-Stage\": \"RELEASE\",\n    \"X-Ca-Dashboard-Role\": \"USER\",\n    \"User-Agent\": \"Apache-HttpClient/4.5.6 (Java/1.8.0_172)\",\n    \"Accept-Encoding\": \"gzip,deflate\",\n    \"Content-MD5\": \"Kry+hjKjc2lvIrwoJqdY9Q==\",\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  },\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": true,\n  \"path\": \"/api/321\",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing test case in Midway Mock\nDESCRIPTION: This commit addresses a bug in the test case for the midway-mock package. The fix ensures the test case functions correctly, validating the mocking functionality as intended.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_48\n\nLANGUAGE: None\nCODE:\n```\nde70efa\n```\n\n----------------------------------------\n\nTITLE: Configuring OSS Trigger\nDESCRIPTION: This code snippet shows how to configure the OSS trigger using the `@ServerlessTrigger` decorator. It sets the `bucket`, `events`, and `filter` properties to define the trigger's behavior.  This example listens for object creation and deletion events, filtering for objects with a 'filterdir/' prefix and '.jpg' suffix.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_oss.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ServerlessTrigger(ServerlessTriggerType.OS, {\n  bucket: 'ossBucketName',\n  events: ['oss:ObjectCreated:*', 'oss:ObjectRemoved:DeleteObject'],\n  filter: {\n    prefix: 'filterdir/',\n    suffix: '.jpg',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Hook\nDESCRIPTION: This code snippet demonstrates how to create a reusable hook called `useIp` that extracts the IP address from the Koa context. It uses the `useContext` hook to access the context and then returns the `ctx.ip` value. This reusable hook can then be used in multiple API handlers to access the IP address.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/builtin-hooks.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext,\n} from '@midwayjs/hooks';\nimport { Context } from '@midwayjs/koa';\n\nfunction useIp() {\n  const ctx = useContext<Context>();\n  return ctx.ip;\n}\n\nexport default Api(Get(), async () => {\n  const ip = useIp();\n  return {\n    ip,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Log Root Directory in MidwayJS\nDESCRIPTION: This snippet shows how to configure the root directory where log files are stored in MidwayJS.  The `dir` property within the `transports` configuration specifies the directory path for both the `file` and `error` transports. All transport paths need to be modified if the root is configured.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         file: {\n           dir: '/home/admin/logs',\n         },\n         error: {\n           dir: '/home/admin/logs',\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Performing Queue Operations with BullMQ in TypeScript\nDESCRIPTION: This code demonstrates various queue operations that can be performed using BullMQ in MidwayJS. It creates a queue instance and then performs actions such as running a job, creating an event listener, and creating an event producer. These operations allow managing and monitoring the queue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2025-01-14-release-3.20.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// BullMQ 提供了更多队列操作方法\nconst queue = bullmqFramework.createQueue('test');\nawait queue.runJob(data);              // 执行任务\nawait queue.createQueueEvents();       // 创建事件监听\nawait queue.createQueueEventsProducer(); // 创建事件生产者\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Prisma\nDESCRIPTION: Demonstrates how to query data using the generated Prisma Client. This example retrieves all published articles, including their authors, using the findMany method with specific where and include options. It leverages the @midwayjs/hooks framework for API endpoint definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/prisma.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get\n} from '@midwayjs/hooks';\nimport { prisma } from './prisma';\n\nexport default Api(Get(), async () => {\n  const posts =\n    await prisma.post.findMany({\n      where: { published: true},\n      include: { author: true}\n    });\n  return posts;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Port for Testing - TypeScript\nDESCRIPTION: This TypeScript code configures the WebSocket port specifically for unit tests in the `config.unittest.ts` file. It sets the `koa.port` to `null` to prevent the HTTP server from starting during tests (using supertest), and sets `webSocket.port` to a specific port for the WebSocket server to listen on during testing.  This allows testing of the WebSocket functionality without interference from a running HTTP server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.unittest\nexport default {\n  // ...\n  koa: {\n    port: null,\n  },\n  webSocket: {\n    port: 3000,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default MQTT Publisher\nDESCRIPTION: This TypeScript code demonstrates how to inject and use the `DefaultMqttProducer` to publish messages. It shows both synchronous and asynchronous publishing methods, including the ability to add configuration options like `qos`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/user.service.ts\nimport { Provide, Inject } from '@midwayjs/core';\nimport { DefaultMqttProducer } from '@midwayjs/mqtt';\n\n@Provide()\nexport class UserService {\n  \n   @Inject()\n   producer: DefaultMqttProducer;\n  \n   async invoke() {\n     // Publish messages synchronously\n     this.producer.publish('test', 'hello world');\n    \n     //Asynchronous release\n     await this.producer.publishAsync('test', 'hello world');\n    \n     //Add configuration\n     await this.producer.publishAsync('test', 'hello world', {\n       qos: 2\n     });\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Role Decorator and Guard (TypeScript)\nDESCRIPTION: This code demonstrates how to use the `@Role` decorator to protect a specific route based on user roles. The `getUserRoles` method is only accessible to users with the 'admin' role.  It requires a configured `AuthGuard` and `Role` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@midwayjs/core';\nimport { ReportMiddleware } from '../middleware/report.middlweare';\nimport { AuthGuard } from '../guard/auth.guard';\n\n@UseGuard(AuthGuard)\n@Controller('/user')\nexport class HomeController {\n\n  // 只允许 admin 访问\n  @Role(['admin'])\n  @Get('/getUserRoles')\n  async getUserRoles() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting File Size Limit\nDESCRIPTION: This snippet shows how to configure a file size limit for uploads using the `limits` option within the `busboy` configuration. The `fileSize` property is specified in bytes, and exceeding this limit will trigger a `MultipartFileSizeLimitError`. Other limits from the busboy library can also be configured here.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/busboy.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  busboy: {\n    // ...\n    limits: {\n      fileSize: 1024\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using useContext with Koa/FaaS\nDESCRIPTION: This code snippet demonstrates how to use the `useContext` hook with different context types in Midway.js. It shows how to specify the context type using generics, allowing the code to work with both Koa and FaaS contexts. It relies on the `@midwayjs/koa` or `@midwayjs/faas` packages for the `Context` type definitions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/builtin-hooks.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Koa\nimport { Context } from '@midwayjs/koa';\nconst ctx = useContext<Context>();\n\n// FaaS\nimport { Context } from '@midwayjs/faas';\nconst ctx = useContext<Context>();\n```\n\n----------------------------------------\n\nTITLE: Catch Derived Exceptions\nDESCRIPTION: This code demonstrates how to catch all derived classes of a specific exception using the `matchPrototype` option in the `@Catch` decorator. It defines a base error class `MidwayError` and two derived classes, `CustomError` and `CustomError2`.  The `TestFilter` will catch all subclasses of `MidwayError`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_filter.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Catch, MidwayError } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\nclass CustomError extends MidwayError {}\n\nclass CustomError2 extends MidwayError {}\n\n// 这里会捕获所有的子类\n@Catch([MidwayError], {\n  matchPrototype: true\n})\nclass TestFilter {\n  catch(err, ctx) {\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configure BodyParser in Koa\nDESCRIPTION: This TypeScript configuration shows how to customize the bodyParser middleware in a MidwayJS Koa application. It allows enabling specific content types (json, form, text, xml) and setting size limits for each type. These settings define how incoming request bodies are parsed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  bodyParser: {\n    enableTypes: ['json', 'form', 'text', 'xml'],\n    formLimit: '1mb',\n    jsonLimit: '1mb',\n    textLimit: '1mb',\n    xmlLimit: '1mb',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure I18n Locale Table with Multiple Groups\nDESCRIPTION: Configures the `localeTable` with multiple groups, such as `default` and `user`. This allows organizing translations into different categories or modules within the application.  Each group has its own set of translation files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    // Put your translated text here\n    localeTable: {\n      en_US: {\n        default: require('../locale/en_US'),\n        user: require('../locale/user_en_US'),\n      },\n      zh_CN: {\n        default: require('../locale/zh_CN'),\n        user: require('../locale/user_zh_CN'),\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Sequelize Entity (Model) - Typescript\nDESCRIPTION: This code defines a Sequelize entity (model) named `Person` and `Hobby` using the `sequelize-typescript` library. It uses decorators like `@Table`, `@Column`, and `@HasMany` to define the table name, columns, and relationships. Each property of the class represents a column in the database table.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/entity/person.entity.ts\nimport { Table, Model, Column, HasMany } from 'sequelize-typescript';\n\n@Table\nexport class Hobby extends Model {\n  @Column\n  name: string;\n}\n\n@Table\nexport class Person extends Model {\n  @Column\n  name: string;\n\n  @Column\n  birthday: Date;\n\n  @HasMany(() => Hobby)\n  hobbies: Hobby[];\n}\n```\n\n----------------------------------------\n\nTITLE: Add guard feature in Midway\nDESCRIPTION: This commit adds a 'guard' feature to Midway, likely for implementing authorization or access control mechanisms within the framework.  Guards are typically used to protect routes or methods, ensuring that only authorized users can access them. This feature likely introduces a mechanism for defining and applying these guards within Midway applications, enhancing security and access control.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mikro/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Customizing Error Text Completely\nDESCRIPTION: This snippet shows how to completely customize validation error messages by replacing the entire language translation file. This involves providing a path to a custom JSON file containing the full set of translations for a specific locale. The file path should be provided in the i18n configuration, like in `src/config/config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    localeTable: {\n      // 替换中文翻译\n      zh_CN: {\n        validate: require('../../locales/custom.json'),\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a BullMQ Task Flow with Dependencies in TypeScript\nDESCRIPTION: This code snippet shows how to create a task flow with dependencies using BullMQ's Flow Producer in MidwayJS. It initializes a Flow Producer and adds a parent job with child tasks specified in the `children` array. This allows defining complex workflows with job dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2025-01-14-release-3.20.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// BullMQ 支持创建任务依赖关系\nconst flowProducer = bullmqFramework.createFlowProducer();\nawait flowProducer.add({\n  name: 'flow-test',\n  queueName: 'flow-queue-1',\n  children: [/* 子任务 */]\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger UI Initialization with JavaScript\nDESCRIPTION: This JavaScript code snippet provides an example of the content of a custom `swagger-initializer.js` file. It demonstrates how to configure the Swagger UI using `SwaggerUIBundle`, including setting the URL for the Swagger JSON, customizing the layout, and enabling persistence of authorization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n  window.ui = SwaggerUIBundle({\n    url: \"/index.json\",\n    dom_id: '#swagger-ui',\n    deepLinking: true,\n    presets: [\n      SwaggerUIBundle.presets.apis,\n      SwaggerUIStandalonePreset\n    ],\n    plugins: [\n      SwaggerUIBundle.plugins.DownloadUrl\n    ],\n    layout: \"StandaloneLayout\",\n    persistAuthorization: true,\n  });\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configure Query Array Parsing - TypeScript\nDESCRIPTION: This snippet demonstrates configuring how query parameters are parsed in an Egg.js application. The `queryParseMode` and `queryParseOptions` allow for customizing how arrays in the query string are handled.  The 'simple' mode provides a middle ground between ignoring arrays completely and strictly parsing everything as an array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  egg: {\n    // ...\n    queryParseMode: 'simple',\n    queryParseOptions: {\n      arrayLimit: 100,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configure I18n Locale Table in config.default.ts\nDESCRIPTION: Configures the `localeTable` within the `config.default.ts` file. This maps locale identifiers (e.g., `en_US`, `zh_CN`) to their corresponding translation files.  These files are loaded using `require`. The `default` property specifies the default group name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  i18n: {\n    // Put your translated text here\n    localeTable: {\n      en_US: {\n        default: require('../locale/en_US'),\n      },\n      zh_CN: {\n        default: require('../locale/zh_CN'),\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend call to the POST API endpoint (TypeScript)\nDESCRIPTION: This code shows how to call the createPost API endpoint from the frontend. It imports the createPost function and calls it with the required post data. The example demonstrates how the frontend uses types inferred from the Zod schema for static type checking. Requires the createPost function to be defined and accessible.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/safe.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPost } from '../api/post';\n\nawait createPost({\n  title: 'Hello Midway',\n  content: 'Hello Prisma',\n  authorEmail: 'test@test.com',\n});\n\n```\n\n----------------------------------------\n\nTITLE: Checking Compatibility using npm\nDESCRIPTION: This command checks the compatibility of installed dependencies within a Midway project using npm. It uses the `npx` command to execute the `midway-version` tool without requiring global installation. The tool analyzes the `node_modules` directory to verify compatibility between installed versions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/version_check.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest\n```\n\n----------------------------------------\n\nTITLE: Logger Middleware Example (Function)\nDESCRIPTION: This middleware logs the request method, URL, and execution time. It uses `useContext` to access the request context and calculates the cost of the request execution.  It requires `@midwayjs/faas` and `@midwayjs/hooks` dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_middleware.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\nimport { useContext } from '@midwayjs/hooks';\n\nconst logger = async (next: any) => {\n  const ctx = useContext<Context>();\n\n  console.log(`<-- [${ctx.method}] ${ctx.url}`);\n\n  const start = Date.now();\n  await next();\n  const cost = Date.now() - start;\n\n  console.log(`[${ctx.method}] ${ctx.url} ${cost}ms`);\n};\n```\n\n----------------------------------------\n\nTITLE: Captcha Options Interface (TypeScript)\nDESCRIPTION: This TypeScript interface defines the configuration options for the @midwayjs/captcha component, including settings for default, image, formula, and text captcha types. It shows how to customize the size, noise, width, height, and character types for different captcha types.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/captcha.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CaptchaOptions {\n  default?: { // 默认配置\n    // 验证码字符长度，默认 4 个字符\n    size?: number;\n    // 干扰线条的数量，默认 1 条\n    noise?: number;\n    // 宽度，默认为 120 像素\n    width?: number;\n    // 宽度，默认为 40 像素\n    height?: number;\n    // 图形验证码配置，图形中包含一些字符\n  },\n  image?: {\n    // 验证码字符长度，默认 4 个字符\n    size?: number;\n    // 图像验证码中的字符类型，默认为 'mixed'\n    // - 'mixed' 表示 0-9、A-Z 和 a-z\n    // - 'letter' 表示 A-Z 和 a-z\n    // - 'number' 表示 0-9\n    type?: 'mixed',\n    // 干扰线条的数量，默认 1 条\n    noise?: number;\n    // 宽度，默认为 120 像素\n    width?: number;\n    // 宽度，默认为 40 像素\n    height?: number;\n  },\n  // 计算公式验证码配置，例如返回的图像内容为 1+2，需要用户填入 3\n  formula?: {\n     // 干扰线条的数量，默认 1 条\n    noise?: number;\n    // 宽度，默认为 120 像素\n    width?: number;\n    // 宽度，默认为 40 像素\n    height?: number;\n  },\n  // 纯文本验证码配置，基于纯文本验证码可以实现短信验证码、邮件验证码\n  text?: {\n    // 验证码字符长度，默认 4 个字符\n    size?: number;\n    // 文本验证码中的字符类型，默认为 'mixed'\n    // - 'mixed' 表示 0-9、A-Z 和 a-z\n    // - 'letter' 表示 A-Z 和 a-z\n    // - 'number' 表示 0-9\n    type?: 'mixed',\n  },\n  // 验证码过期时间，默认为 1h\n  expirationTime?: 3600,\n  // 验证码存储的 key 前缀\n  idPrefix: 'midway:vc',\n}\n```\n\n----------------------------------------\n\nTITLE: Default Export Using `export default` (TypeScript)\nDESCRIPTION: This snippet shows how to export a default value using `export default` in TypeScript. This is a common pattern in ES modules and is used to export a single value as the default export of a module.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {};\n```\n\n----------------------------------------\n\nTITLE: Exporting bootstrap file in Midway Mock\nDESCRIPTION: These commits ensure that the bootstrap file is correctly exported from the midway-mock package. This is necessary for the proper initialization and functioning of the mocking functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_54\n\nLANGUAGE: None\nCODE:\n```\nd2bd919\n```\n\nLANGUAGE: None\nCODE:\n```\n1337926\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces a new guard feature to the MidwayJS framework. The purpose of the guard is not further specified in the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- add guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Server Stream (WRITEABLE) with Midwayjs\nDESCRIPTION: This code snippet demonstrates how to implement a gRPC server stream using Midwayjs. The `@GrpcMethod` decorator is used with `GrpcStreamTypeEnum.WRITEABLE` to define a server-side streaming method. The `ctx.write` method is used to send multiple responses to the client, and `ctx.end()` is called to terminate the stream.  The provider is registered using `MSProviderType.GRPC`.  It depends on `@midwayjs/core` and `@midwayjs/grpc`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, GrpcStreamTypeEnum, Inject, MSProviderType, Provider } from '@midwayjs/core';\nimport { Context, Metadata } from '@midwayjs/grpc';\nimport { math } from '../interface';\n\n/**\n */\n@Provider(MSProviderType.GRPC, { package: 'math' })\nexport class Math implements math.Math {\n\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod({type: GrpcStreamTypeEnum.WRITEABLE })\n  async sumMany(args: math.AddArgs) {\n    this.ctx.write({\n      num: 1 + args.num\n    });\n    this.ctx.write({\n      num: 2 + args.num\n    });\n    this.ctx.write({\n      num: 3 + args.num\n    });\n\n    this.ctx.end();\n  }\n\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fixing JS-App-XML Test Case\nDESCRIPTION: This commit addresses an issue with the JS-App-XML test case within the Midway.js project. The fix ensures that tests involving XML configuration or application context are correctly validated.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_46\n\nLANGUAGE: Other\nCODE:\n```\n1298195\n```\n\n----------------------------------------\n\nTITLE: Client-Side Streaming Implementation - TypeScript\nDESCRIPTION: This code shows how to implement a client-side streaming gRPC method using `@GrpcMethod` and `GrpcStreamTypeEnum.READABLE`. The server receives multiple messages from the client and returns a single response using the `onEnd` parameter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/grpc.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GrpcMethod, GrpcStreamTypeEnum, Inject, MSProviderType, Provide, Provider } from '@midwayjs/decorator';\nimport { Context } from '@midwayjs/grpc';\nimport { math } from '../interface';\nimport { Metadata } from '@grpc/grpc-js';\n\n/**\n */\n@Provide()\n@Provider(MSProviderType.GRPC, { package: 'math' })\nexport class Math implements math.Math {\n  sumDataList: number[] = [];\n\n  @Inject()\n  ctx: Context;\n\n  @GrpcMethod({ type: GrpcStreamTypeEnum.READABLE, onEnd: 'sumEnd' })\n  async addMany(data: math.Num) {\n    this.sumDataList.push(data);\n  }\n\n  async sumEnd(): Promise<math.Num> {\n    const total = this.sumDataList.reduce((pre, cur) => {\n      return {\n        num: pre.num + cur.num,\n      };\n    });\n    return total;\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Admin Configuration\nDESCRIPTION: This TypeScript code illustrates the basic configuration for Kafka Admin clients using the `admin` field. It allows defining multiple admin clients, each with its own configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    admin: {\n      clients: {\n        admin1: {\n          // ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration Options (JavaScript)\nDESCRIPTION: This JavaScript code snippet displays available configuration options for the @koa/cors middleware. It shows how to set allowed origins, methods, headers, maximum age, credentials, and handle errors.  The snippet provides a comprehensive overview of the customization possibilities for CORS in your application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/cors.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * CORS middleware\n *\n * @param {Object} [options]\n *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is request Origin header\n *  - {String|Array} allowMethods `Access-Control-Allow-Methods`, default is 'GET,HEAD,PUT,POST,DELETE,PATCH'\n *  - {String|Array} exposeHeaders `Access-Control-Expose-Headers`\n *  - {String|Array} allowHeaders `Access-Control-Allow-Headers`\n *  - {String|Number} maxAge `Access-Control-Max-Age` in seconds\n *  - {Boolean|Function(ctx)} credentials `Access-Control-Allow-Credentials`, default is false.\n *  - {Boolean} keepHeadersOnError Add set headers to `err.header` if an error is thrown\n * @return {Function} cors middleware\n * @api public\n */\n```\n\n----------------------------------------\n\nTITLE: Fix missing express cookie parser typings\nDESCRIPTION: This snippet addresses an issue where the typings for the Express cookie parser were missing. Cookie parsers are used to extract cookies from incoming requests and make them available to the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Frontend API Call Example - TypeScript\nDESCRIPTION: This snippet demonstrates how to import and call server-side functions directly from the frontend in Midway Hooks. It imports `getPath` and `post` functions from the `./apis/lambda` module and calls them to simulate API requests. This allows for \"zero-API\" calls, simplifying frontend development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getPath, post } from './apis/lambda';\n\n// send GET request to /api/getPath\nconst path = await getPath();\nconsole.assert(path === '/api/getPath');\n\nconst { message, method } = await post('Jake');\n\nconsole.assert(message === 'Hello Jake!');\nconsole.assert(method === 'POST');\n```\n\n----------------------------------------\n\nTITLE: midway-init Command Options\nDESCRIPTION: Examples of using `midway-init` with various options, including setting the directory, type, template source, npm package, and npm registry.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmidway-init -h                                          // 帮助文档\nmidway-init --dir my_project                            // 在当前目录下的 my_project 子目录创建脚手架\nmidway-init --type midway-ts                            // 从内置脚手架类型 midway-ts 创建目录\nmidway-init --template ../custom_boilerplate            // 从本地的特地目录创建脚手架\nmidway-init --package midway-boilerplate-typescript     // 从 npm 包创建脚手架\nmidway-init --registry china/npm/registry.cnpmjs.org    // 从不同的 registry 获取 npm 包，和 --package 合用\n```\n\n----------------------------------------\n\nTITLE: Ignoring TypeScript Errors (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the `ignoreTsError` experimental feature in `f.yml` to ignore TypeScript errors during the build process, allowing the build to continue even with errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nexperimentalFeatures:\n\tignoreTsError: true\n```\n\n----------------------------------------\n\nTITLE: Socket Message Handler\nDESCRIPTION: A simple socket message handler that receives three data points, sums them, and returns the result with a predefined name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@OnWSMessage('myEvent')\n@WSEmit('myEventResult')\nasync gotMessage(data1, data2, data3) {\n  return {\n    name: 'harry',\n  \tresult: data1 + data2 + data3,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC message with ID for Ordered Stream (protobuf)\nDESCRIPTION: This code snippet shows the protobuf definition for messages used in an ordered bi-directional stream, where each message (request and response) includes a fixed `id` field for maintaining order.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_24\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage math;\n\nmessage AddArgs {\n  int32 id = 1;\t\t\t\t\t\t\t//  这里的 id 名字是固定的\n  int32 num = 2;\n}\n\nmessage Num {\n  int32 id = 1;\t\t\t\t\t\t\t//  这里的 id 名字是固定的\n  int32 num = 2;\n}\n\nservice Math {\n  rpc Add (AddArgs) returns (Num) {\n  }\n\n  rpc AddMore (stream AddArgs) returns (stream Num) {\n  }\n\n  // 服务端往客户端推\n  rpc SumMany (AddArgs) returns (stream Num) {\n  }\n\n  // 客户端往服务端推\n  rpc AddMany (stream AddArgs) returns (Num) {\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests using npm\nDESCRIPTION: This bash command shows how to run the test suite using npm. It executes the script defined in the `package.json` file and displays the test results in the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n➜ my_midway_app npm run test\n\n> my_midway_project@1.0.0 test /Users/harry/project/application/my_midway_app\n>jest\n\nTesting all *.test.ts...\n  PASS test/controller/home.controller.test.ts\n  PASS test/controller/api.controller.test.ts\n\nTest Suites: 2 passed, 2 total\nTests: 2 passed, 2 total\nSnapshots: 0 total\nTime: 3.26 seconds\nRan all test suites matching /\\/test\\/[^.]*\\.test\\.ts$/i.\n```\n\n----------------------------------------\n\nTITLE: Adding Zlib Logger File Feature in MidwayJS\nDESCRIPTION: This code snippet introduces a new feature to add zlib compression for logger files in MidwayJS.  This enhances the logging capabilities of the MidwayJS framework, allowing developers to reduce the storage space occupied by log files through zlib compression.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Features\n\n//- add zlib logger file ([#1038](https://github.com/midwayjs/midway/issues/1038)) ([2ae9131](https://github.com/midwayjs/midway/commit/2ae9131b8c8745d2840c40a5d50aa2d3f73bafbf))\n```\n\n----------------------------------------\n\nTITLE: Configure JWT Options\nDESCRIPTION: This configuration snippet shows how to configure JWT options such as the secret key, signing options (e.g., expiration), and verification options in the `config.default.ts` file.  The `secret` is used for signing the token, and `expiresIn` controls the token's lifetime. The secret should be securely stored.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/jwt.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  jwt: {\n    secret: 'xxxxxxxxxxxxxx', // fs.readFileSync('xxxxx.key')\n    sign: {\n      // signOptions\n      expiresIn: '2d', // https://github.com/vercel/ms\n    },\n    verify: {\n      // verifyOptions\n    },\n    decode: {\n      // decodeOptions\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing a Midway.js Component\nDESCRIPTION: Compiles the TypeScript component code into JavaScript and publishes the resulting package to npm. This makes the component available for use in other Midway.js projects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build && npm publish // 编译并发布对应的component\n```\n\n----------------------------------------\n\nTITLE: Configure Log Cleaning by Number of Files in MidwayJS\nDESCRIPTION: This snippet demonstrates how to configure log cleaning based on the maximum number of log files to retain in MidwayJS.  The `maxFiles` property, when set to a number, specifies the maximum number of log files that will be kept.  In this example, the most recent 3 `file` log files will be kept, along with the last 3 days' worth of `error` logs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         file: {\n           maxFiles: '3',\n         },\n         error: {\n           maxFiles: '3d',\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Adding Config Definitions in MidwayJS\nDESCRIPTION: This commit adds component and framework configuration definitions to MidwayJS.  This enables developers to define and manage configuration settings for their applications and components in a structured manner.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-nunjucks/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Diff\nCODE:\n```\n- add component and framework config definition ([#1367](https://github.com/midwayjs/midway/issues/1367)) ([b2fe615](https://github.com/midwayjs/midway/commit/b2fe6157f99659471ff1333eca0b86bb889f61a3))\n```\n\n----------------------------------------\n\nTITLE: Validation Utility Functions Example (TypeScript)\nDESCRIPTION: This code shows the creation of reusable validation utility functions for commonly used validation rules like `requiredString` and `maxString`. This promotes code reusability and simplifies validation definitions across multiple DTO classes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst requiredString = RuleType.string().required(); // 自己在一个文件中定义一下你们部门的规范或常用的。\n\nexport class UserDTO {\n  @Rule(requiredString) // 这样就不用写上面这么长的了\n  name: string;\n\n  @Rule(requiredString) // 同上\n  nickName: string;\n\n  @Rule(requiredString) // 同上\n  description: string;\n}\n\nconst maxString = (length) => RuleType.string().max(length); // 自己在一个文件中定义一下你们部门的规范或常用的。\n\nexport class UserDTO {\n  @Rule(requiredString) // 同上\n  name: string;\n\n  @Rule(requiredString) // 同上\n  nickName: string;\n\n  @Rule(requiredString) // 同上\n  description: string;\n\n  @Rule(maxString(50)) // 这样通过换个参数即可\n  info: string;\n\n  @Rule(maxString(50).required()) //这样也行\n  info2: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing HTTP Gateway in f.yml\nDESCRIPTION: This snippet illustrates how to reuse an existing HTTP gateway in Tencent Cloud.  By specifying the `serviceId`, the deployment process will bind the function to the existing gateway instead of creating a new one. This is useful for development environments to avoid creating too many gateways.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_to_tencent.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: midway-faas-examples\n\nprovider:\n  name: tencent\n  serviceId: ********\n```\n\n----------------------------------------\n\nTITLE: Add Consul Dependencies to package.json\nDESCRIPTION: Adds the `@midwayjs/consul` package and its associated type definitions as dependencies in the `package.json` file.  Run `npm install` afterwards to install the dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/consul\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    \"@types/consul\": \"^0.40.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Case Sensitivity in Git (Local)\nDESCRIPTION: This command configures Git to be case-sensitive for the current project. This ensures that Git recognizes changes when filenames are modified with different casing. It prevents issues where case-sensitive file systems on servers fail to recognize the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/git_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git config core.ignorecase false\n```\n\n----------------------------------------\n\nTITLE: Initialize MidwayJS project with scaffolding\nDESCRIPTION: This command uses the MidwayJS CLI to initialize a new project. The `-y` flag automatically accepts the default options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway@latest -y\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/process-agent with npm\nDESCRIPTION: This command installs the @midwayjs/process-agent package using npm.  The `--save` flag adds the package as a dependency to the `package.json` file. This package is used for managing data consistency between processes in multi-process Node.js environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/process_agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/process-agent@3 --save\n```\n\n----------------------------------------\n\nTITLE: Moving Register to onServerReady in MidwayJS\nDESCRIPTION: This commit changes the registration process to occur during the `onServerReady` lifecycle event in MidwayJS. It delays the registration until the server is fully ready, ensuring that all dependencies and configurations are properly initialized. The commit hash is b5f8256d8cab103e3b9c7f22d5fc66bd5fa6c525.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmove register to on server ready ([#1576](https://github.com/midwayjs/midway/issues/1576)) ([b5f8256](https://github.com/midwayjs/midway/commit/b5f8256d8cab103e3b9c7f22d5fc66bd5fa6c525))\n```\n\n----------------------------------------\n\nTITLE: Defining Local Controller\nDESCRIPTION: This defines a controller to handle requests to `/passport/local` with local authentication middleware. It accesses the authenticated user information from `this.ctx.req.user`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// controller.ts\n\nimport { Provide, Post, Inject, Controller } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class LocalController {\n  @Post('/passport/local', { middleware: ['local'] })\n  async localPassport() {\n    console.log('local user: ', this.ctx.req.user);\n    return this.ctx.req.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mocha for Testing\nDESCRIPTION: Uses Mocha as the testing framework instead of Jest.  Requires manual installation of Mocha and @types/mocha.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin test --ts --mocha\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional amqplib Dependency\nDESCRIPTION: This snippet describes the implementation of an optional dependency for `amqplib` within the `@midwayjs/mock` package. This change likely allows the mock package to function without requiring `amqplib` to be installed unless specifically needed, improving its flexibility and reducing unnecessary dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Configure HTTP Trigger for Static File Serving in FaaS\nDESCRIPTION: This TypeScript code configures an HTTP trigger for static file serving in a Function-as-a-Service (FaaS) environment. It defines a route that will be used to serve static files. The path property defines the route, and the method is set to 'get'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/static_file.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Provide,\n  ServerlessTrigger,\n  ServerlessTriggerType,\n} from '@midwayjs/core';\nimport { Context } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloHTTPService {\n\n  @ServerlessTrigger(ServerlessTriggerType.HTTP, {\n    path: '/public/*',\n    method: 'get',\n  })\n  async handleStaticFile() {\n    // 这个函数可以没有方法体，只是为了让网关注册一个额外的路由\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port in Bootstrap File (MidwayJS, TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to configure the port for a custom runtime in a MidwayJS application by modifying the `bootstrap.js` file. This allows the application to listen on port 9000, as required by some platforms, while avoiding conflicts with local development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// 显式以组件方式引入用户代码\nBootstrap.configure({\n  globalConfig: {\n    koa: {\n      port: 9000,\n    }\n  }\n}).run()\n```\n\n----------------------------------------\n\nTITLE: Cascading Saves in One-to-One Relationships\nDESCRIPTION: This code shows how to configure a one-to-one relationship with cascading saves using TypeORM. By setting `cascade: true` in the @OneToOne decorator, saving the Photo entity will automatically save the associated PhotoMetadata entity. This simplifies the process of saving related entities and ensures data consistency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n  /// ... other columns\n\n  @OneToOne((type) => PhotoMetadata, (metadata) => metadata.photo, {\n    cascade: true,\n  })\n  metadata: PhotoMetadata;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Func } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from './entity/photo';\nimport { PhotoMetadata } from './entity/photoMetadata';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n    // create photo object\n    let photo = new Photo();\n    photo.name = 'Me and Bears';\n    photo.description = 'I am near polar bears';\n    photo.filename = 'photo-with-bears.jpg';\n    photo.isPublished = true;\n\n    // create photo metadata object\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = 'cybershoot';\n    metadata.orientation = 'portrait';\n\n    photo.metadata = metadata; // this way we connect them\n\n    // save a photo also save the metadata\n    await this.photoModel.save(photo);\n\n    // done\n    console.log('Photo is saved, photo metadata is saved too');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Log Rotation by Size in MidwayJS\nDESCRIPTION: This snippet demonstrates how to configure log rotation based on file size in MidwayJS.  The `maxSize` property within the `transports` configuration specifies the maximum size of a log file before it is rotated.  In this example, both the `file` and `error` log files will be rotated when they reach 100MB.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         file: {\n           maxSize: '100m',\n         },\n         error: {\n           maxSize: '100m',\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Verifying Alinode and agenthub installation\nDESCRIPTION: This snippet shows how to verify the successful installation of Alinode and agenthub by checking their paths using the `which` command. The output should point to the `.tnvm` directory, indicating that Alinode's version of Node.js and agenthub are being used. It depends on tnvm being correctly installed and activated.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/alinode.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ which node\n/root/.tnvm/versions/alinode/v3.11.4/bin/node\n\n$ which agenthub\n/root/.tnvm/versions/alinode/v3.11.4/bin/agenthub\n```\n\n----------------------------------------\n\nTITLE: Defining Local Strategy\nDESCRIPTION: This snippet demonstrates how to define a local authentication strategy using `@CustomStrategy` and `PassportStrategy`. It includes a `validate` method to verify user credentials against a password using bcrypt.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// strategy/local.ts\n\nimport { CustomStrategy, PassportStrategy } from '@midwayjs/passport';\nimport * as bcrypt from 'bcrypt';\n\n@CustomStrategy()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  async validate(user, password) {\n    // 实际的秘钥\n    const password = '*********';\n\n    // 和用户的秘钥做对比\n    const isLegalUser = await bcrypt.compare(password, user.password);\n    if (!isLegalUser) {\n      throw new Error('error password ' + user.name);\n    }\n\n    return {\n      user,\n      password,\n    };\n  }\n\n  // 当前策略的参数\n  getStrategyOptions(): any {\n    return {\n      passwordField: 'pwd',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Koa port in bootstrap.js (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Koa application to listen on port 9000 within the `bootstrap.js` file. This is done using the `@midwayjs/bootstrap` package to set the `koa.port` configuration option. This configuration is necessary when running the application in a custom runtime environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// Explicitly introduce user code as a component\nBootstrap.configure({\n   globalConfig: {\n     koa: {\n       port: 9000,\n     }\n   }\n}).run()\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Dependencies in package.json - JSON\nDESCRIPTION: Defines the Socket.IO dependencies within the `package.json` file for a MidwayJS project. This includes the `@midwayjs/socket.io` package and optional client dependencies such as `socket.io-client` and its corresponding type definitions (`@types/socket.io-client`). These are defined within the `dependencies` and `devDependencies` sections, respectively.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/socket.io\": \"^3.0.0\",\n    // Client optional\n    \"socket.io-client\": \"^4.4.1 \",\n    // ...\n  },\n  \"devDependencies\": {\n    // Client optional\n    \"@types/socket.io-client\": \"^1.4.36 \",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify config at startup with Bootstrap in MidwayJS\nDESCRIPTION: These JavaScript snippets demonstrate how to modify the global configuration of a MidwayJS application at startup using the `configure` method of the `Bootstrap` class. The `globalConfig` attribute can be used to pass either a configuration object (for direct overriding) or an array of configuration objects (for environment-specific configurations).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/env_config.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// bootstrap.js\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap\n  .configure({\n    globalConfig: [\n      {\n        default: {\n          abc: '123'\n        },\n        unittest: {\n          abc: '321'\n        }\n      }\n    ]\n  })\n  .run();\n\n// in unittest, app.getConfig('abc') => '321'\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// bootstrap.js\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap\n  .configure({\n    globalConfig: {\n      abc: 'text'\n    }\n  })\n  .run();\n\n// app.getConfig('abc') => 'text'\n\n```\n\n----------------------------------------\n\nTITLE: Enable Redis Component\nDESCRIPTION: This code snippet demonstrates how to enable the Redis component in a MidwayJS application. It imports the necessary modules from `@midwayjs/core`, `@midwayjs/redis`, `@midwayjs/casbin`, and `path`, and then includes `redis` and `casbin` in the `imports` array of the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as redis from '@midwayjs/redis';\nimport * as casbin from '@midwayjs/casbin';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    redis,\n    casbin\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adjusting Logger Label - TypeScript\nDESCRIPTION: This snippet demonstrates how to dynamically adjust the label of a log message using the `label` option in the `logger.info` method. It shows how to pass a string or an array to the `label` option.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst logger = this.app.createLogger('custom', {\n  // 创建了一个日志等级为 level，只输出到终端的日志\n  level: 'info',\n});\n\n// 可以传递一个字符串\nlogger.info('hello world', { label: 'UserService' });\n\n// output => 2021-01-20 15:13:25,408 INFO 66376 [UserService] hello world\n\n// 也可以传递数组，会使用:进行组合\nlogger.info('hello world', { label: ['a', 'b'] });\n\n// output => 2021-01-20 15:13:25,408 INFO 66376 [a:b] hello world\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Context Logger Format\nDESCRIPTION: This TypeScript code demonstrates how to customize the format of the MQTT context logger. You can provide a function (`contextLoggerFormat`) that takes an `info` object and returns a formatted log message string.  This allows you to control the content and structure of the log messages generated by the MQTT component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  mqtt: {\n    // ...\n    contextLoggerFormat: info => {\n      const { jobId, from } = info.ctx;\n      return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.message}`;\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Socket.IO\nDESCRIPTION: This snippet shows how to configure Cross-Origin Resource Sharing (CORS) for Socket.IO in a MidwayJS application. It sets the `origin` and `methods` options in the `cors` configuration object.  This is crucial for allowing connections from different domains.  It requires the `@midwayjs/socketio` package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst { Framework } = require('@midwayjs/socketio');\nconst socketFramework = new Framework().configure({\n  port: 7001,\n  cors: {\n    origin: 'http://localhost:8080',\n    methods: ['GET', 'POST'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Midway Context in Component (index.d.ts - Koa Context)\nDESCRIPTION: This code snippet demonstrates extending only the `@midwayjs/koa` Context within a component. It declares a module augmentation for `@midwayjs/koa/dist/interface` and adds an 'abc' property of type string to the Context interface. This only affects contexts used within Koa applications. Other context types are unaffected.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/context_definition.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// index.d.ts\n\n// The following paragraph is only extended by the Context of @midwayjs/koa\ndeclare module '@midwayjs/koa/dist/interface '{\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Midway.js Development Start Command with Disabled Type Check\nDESCRIPTION: This snippet provides a full example command for starting the Midway.js development server with TypeScript type checking disabled.  It combines environment variables for disabling type checking (`TS_NODE_TYPE_CHECK`, `TS_NODE_TRANSPILE_ONLY`), enabling debugging (`NODE_DEBUG`), setting the environment (`NODE_ENV`), and specifying the TypeScript flag (`--ts`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/midway_slow_problem.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ncross-env TS_NODE_TYPE_CHECK=false TS_NODE_TRANSPILE_ONLY=true NODE_DEBUG=midway* NODE_ENV=local midway-bin dev --ts\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Connections with @OnWSConnection\nDESCRIPTION: Defines a method to be executed when a client connects to the WebSocket service using the @OnWSConnection decorator. This decorator automatically calls the decorated method each time a new client establishes a connection, allowing for initialization and connection-specific logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WSController, OnWSConnection, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/ws';\nimport * as http from 'http';\n\n@WSController()\nexport class HelloSocketController {\n\n  @Inject()\n  ctx: Context;\n\n  @OnWSConnection()\n  async onConnectionMethod(socket: Context, request: http.IncomingMessage) {\n    console.log('namespace / got a connection ${this.ctx.readyState}');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: getRow Operation with TableStoreService\nDESCRIPTION: This TypeScript code snippet illustrates using the `TableStoreService` to perform a `getRow` operation in TableStore. It shows how to specify the table name, primary key, and column filter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tablestore.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { join } from 'path';\nimport {\n  TableStoreService\n  Long\n  CompositeCondition\n  SingleColumnCondition\n  LogicalOperator\n  ComparatorType\n} from '@midwayjs/tablestore';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  tableStoreService: TableStoreService;\n\n  async getInfo() {\n\n    const data = await tableStoreService.getRow({\n      tableName: \"sampleTable \",\n      primaryKey: [{ 'gid': Long.fromNumber(20013) }, { 'uid': Long.fromNumber(20013) }]\n      columnFilter: condition\n    });\n\n    // TODO\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting WebSocket Service (npm scripts)\nDESCRIPTION: This JSON defines npm scripts for starting, developing, and testing a MidwayJS application. The `start` script is used for production, `dev` for local development with TypeScript compilation and entry file specification, and `test` and `cov` for testing with and without coverage.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"NODE_ENV=production node ./bootstrap.js\",\n    \"dev\": \"cross-env NODE_ENV=local midway-bin dev --ts --entryFile=bootstrap.js\",\n    \"test\": \"midway-bin test --ts\",\n    \"cov\": \"midway-bin cov --ts\",\n    ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Extend Koa Context in Midway\nDESCRIPTION: This TypeScript code demonstrates how to extend the Koa Context object in a MidwayJS application.  It adds a custom `render` method to the context, allowing it to be used within request handlers. Note that additional type definitions are needed to provide type safety.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n\t// ...\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  async onReady(container) {\n    Object.defineProperties(app.context, {\n      render: {\n        value: async function (...args) {\n          // ...\n        },\n      },\n    });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Integrated API Call with Validation Handling\nDESCRIPTION: This code shows how to call a validated API and handle validation errors. The validation is done on both frontend (with Typescript) and backend, and the errors are caught and printed. It imports hello from the api and calls it with null values, which will throw validation error.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/intro.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport hello from './api';\n\ntry {\n  await hello(null, null);\n} catch (error) {\n  console.log(error.message); // 'name must be a string'\n  console.log(error.status); // 422\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Http Server - TypeScript\nDESCRIPTION: This snippet shows how to access the original HttpServer within a MidwayJS Egg.js application, which is typically sealed inside Eggjs. It involves listening for the 'server' event emitted by the application during the `onServerReady` lifecycle hook.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, App } from '@midwayjs/core';\nimport { Application } from '@midwayjs/web';\n\n@Configuration(/***/)\nexport class MainConfiguration {\n  \n  @App('egg')\n  app: Application;\n  \n  // ...\n  async onServerReady() {\n    this.app.once('server', (server) => {\n      // ...\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Ports for WebSocket\nDESCRIPTION: Sets the port for the WebSocket service during testing. When running the WebSocket framework independently, the port must be explicitly specified. If the WebSocket service is a sub-framework, the port is configured in the test environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  webSocket: {\n    port: 3000\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.unittest\nexport default {\n  // ...\n  koa: {\n    port: null\n  },\n  webSocket\n    port: 3000\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using TableStoreServiceFactory for multiple instances\nDESCRIPTION: This TypeScript code demonstrates using `TableStoreServiceFactory` to obtain different TableStore service instances based on configuration. It injects the factory and then uses the `get` method to retrieve specific client instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tablestore.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TableStoreServiceFactory } from '@midwayjs/tablestore';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  tableStoreServiceFactory: TableStoreServiceFactory;\n\n  async save() {\n    const db1 = await this.tableStoreServiceFactory.get('db1');\n    const db2 = await this.tableStoreServiceFactory.get('db2');\n\n    //...\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies - Yarn\nDESCRIPTION: Installs the necessary dependencies for the Midway.js website using Yarn package manager. This step is required before running any other commands.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Fixing Schedule Definition Error in MidwayJS\nDESCRIPTION: This code snippet addresses a bug related to the declaration definition error within the schedule functionality of MidwayJS. The commit associated with this fix is ec8af5a35a270855c22b8875c11a0c01a0e78188. It resolves issue #1076.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Aliyun HTTP Trigger Request Body Type Check\nDESCRIPTION: This TypeScript snippet demonstrates a function used to check the type of the request body received from an Alibaba Cloud HTTP trigger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = this.ctx.request.body;\nreturn {\n  type: typeof body,\n  body,\n};\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Cookies Definition in Koa\nDESCRIPTION: This bug fix corrects the cookies definition in Koa within the MidwayJS framework. The fix is associated with commit 91adc35f1dbcc1b362419b501ffa86be2f1050bc and addresses issue #1720.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Initializing WebRouterCollector in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the WebRouterCollector class from the '@midwayjs/core' module. The WebRouterCollector is used to collect and manage route information within a MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/router_table.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebRouterCollector } from '@midwayjs/core';\nconst collector = new WebRouterCollector();\n```\n\n----------------------------------------\n\nTITLE: Fixing @Func Return Type in Midway.js\nDESCRIPTION: This commit rectifies the return type of the @Func decorator in Midway.js. It ensures that the return type is correctly defined and handled. The fix is associated with the commit hash 9064743c04713ef77ef246416dabe8f79b97fc79.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Listing @midwayjs/core Dependencies with npm\nDESCRIPTION: This command lists the dependency tree of the `@midwayjs/core` package in the project. It helps identify if multiple instances of the package exist, which can cause issues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/framework_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm ls @midwayjs/core\n```\n\n----------------------------------------\n\nTITLE: Rapid Single Service Startup - CLI - JSON\nDESCRIPTION: This code snippet demonstrates the configuration for rapidly starting a single service using the `@midwayjs/cli`. It utilizes the `--ts` flag to specify a TypeScript (ts-node) environment for startup. Like the `mwtsc` approach, it uses a built-in API to create the service without `bootstrap.js` and runs in a single process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"script\": {\n    \"dev\": \"midway-bin dev --ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Default DataSource with @InjectDataSource\nDESCRIPTION: This snippet shows how to inject the default data source into a service using the @InjectDataSource decorator in MidwayJS. This simplifies the process of obtaining a data source for MikroORM, Sequelize, or TypeORM. Requires '@midwayjs/typeorm' and TypeORM.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-11-18-release-3-8.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectDataSource } from '@midwayjs/typeorm';\nimport { DataSource, Repository } from 'typeorm';\n\n@Provide()\nexport class UserService {\n  \n  @InjectDataSource()\n  defaultDataSource: DataSource;\n\n  async invoke() {\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeGraphQL Type Definition (TypeScript)\nDESCRIPTION: This code shows an example of a TypeGraphQL type definition generated by the `json-type-graphql` library. It defines a GraphQL object type `Root` with fields for `success` (boolean) and `message` (string).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/graphql.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ObjectType, Field, Int, ID } from 'type-graphql';\n\n@ObjectType()\nexport class Root {\n  @Field()\n  success!: boolean;\n\n  @Field()\n  message!: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Component Project with Midway CLI (npm v7+)\nDESCRIPTION: Initializes a new Midway.js component project named 'hello2' using the Midway CLI. This command is for npm version 7 or higher, adjusting for CLI argument parsing changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --type=component hello2\n```\n\n----------------------------------------\n\nTITLE: Configure Luckyeye rules package in package.json\nDESCRIPTION: This snippet configures the `midway-luckyeye` section in `package.json` to specify the rules packages to use, such as `midway_v2`. This tells the tool which rules to apply during the inspection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/luckyeye.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"midway-luckyeye\": {\n  \"packages\": [\n    \"midway_v2\"\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Defining a Backend API with Midway Hooks\nDESCRIPTION: This code snippet demonstrates how to define a backend API endpoint using Midway Hooks. It utilizes the `Api`, `Post` decorators from `@midwayjs/hooks` to create an HTTP POST endpoint at `/api/say`. The function takes a string `name` as input and returns a greeting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/intro.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Post,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Post(), // Http Path: /api/say,\n  async (name: string) => {\n    return `Hello ${name}!`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Example (UserService)\nDESCRIPTION: This code snippet demonstrates a common scenario where a `UserService` is injected into a `HomeController`.  If `UserService` is not properly registered with `@Provide` or implicitly contains the `@Provide` decorator, a `MidwayDefinitionNotFoundError` (MIDWAY_10003) will occur. This example shows how to troubleshoot dependency injection issues in Midway.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_code.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nexport class UserService {}\n\n// ...\n@Controller()\nexport class HomeController {\n  @Inject()\n  userService: UserService;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Flatten Router Table Output\nDESCRIPTION: This is example JSON of a flatten route table.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/router_table.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    \"prefix\": \"/\",\n    \"routerName\": \"\",\n    \"url\": \"/set_header\",\n    \"requestMethod\": \"get\",\n    \"method\": \"homeSet\",\n    \"description\": \"\",\n    \"summary\": \"\",\n    \"handlerName\": \"apiController.homeSet\",\n    \"funcHandlerName\": \"apiController.homeSet\",\n    \"controllerId\": \"apiController\",\n    \"middleware\": [],\n    \"controllerMiddleware\": [],\n    \"requestMetadata\": [],\n    \"responseMetadata\": [\n      {\n        \"type\": \"web:response_header\",\n        \"setHeaders\": {\n          \"ccc\": \"ddd\"\n        }\n      },\n      {\n        \"type\": \"web:response_header\",\n        \"setHeaders\": {\n          \"bbb\": \"aaa\"\n        }\n      }\n    ],\n  },\n  {\n    \"prefix\": \"/\",\n    \"routerName\": \"\",\n    \"url\": \"/ctx-body\",\n    \"requestMethod\": \"get\",\n    \"method\": \"getCtxBody\",\n    \"description\": \"\",\n    \"summary\": \"\",\n    \"handlerName\": \"apiController.getCtxBody\",\n    \"funcHandlerName\": \"apiController.getCtxBody\",\n    \"controllerId\": \"apiController\",\n    \"middleware\": [],\n    \"controllerMiddleware\": [],\n    \"requestMetadata\": [],\n    \"responseMetadata\": [],\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Executing tasks manually\nDESCRIPTION: This TypeScript code demonstrates how to manually execute a task by getting the queue and adding a job to it. It uses `@Inject` to get the `bull` framework instance and then retrieves the queue named 'test'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as bull from '@midwayjs/bull';\n\n@Configuration({\n  imports: [\n    // ...\n    bull\n  ]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  bullFramework: bull;\n\n  //...\n\n  async onServerReady() {\n    // Get the Processor-related queue\n    const testQueue = this.bullFramework.getQueue('test');\n    // Execute this task immediately\n    await testQueue?.addJobToQueue();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hooks for Reusable Logic in Midway Hooks (TypeScript)\nDESCRIPTION: This code defines two custom Hooks, `useHeader` and `usePath`, which retrieve the request headers and path respectively from the request context using the `useContext` hook. These custom Hooks encapsulate common logic for accessing request information, promoting code reuse.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_syntax.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from '@midwayjs/hooks';\n\nexport function useHeader() {\n  const { request } = useContext();\n  return request.headers;\n}\n\nexport function usePath() {\n  const { request } = useContext();\n  return request.path;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Hierarchical Router Table - MidwayJS - TypeScript\nDESCRIPTION: Retrieves the hierarchical routing table in MidwayJS. The table is a map with the controller's route prefix as the key and an array of `RouterInfo` objects as the value. The hierarchy is sorted from high to low by priority. The `getRouterTable` method is called on a collector object, presumably an instance of a class providing this functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/router_table.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync getRouterTable(): Promise<Map<string, RouterInfo[]>>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await collector.getRouterTable();\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Flow with FlowProducer\nDESCRIPTION: This snippet shows how to create a task flow using the `FlowProducer` to define dependencies between tasks. It adds a parent job with a child job, where the child job will only be executed after the parent job completes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst flowProducer = bullmqFramework.createFlowProducer({}, 'test-flow');\n\n// Create task flow\nawait flowProducer.add({\n  name: 'flow-test',\n  queueName: 'flow-queue-1',\n  data: { value: 1 },\n  children: [\n    {\n      name: 'child-job',\n      queueName: 'flow-queue-2',\n      data: { value: 2 }\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Access and Modify Session in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to access and modify the session using `ctx.session` in a MidwayJS controller. It retrieves a `userId` from the session and updates a `visited` count. Dependencies: `@midwayjs/core`, `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    // Get the content on the Session\n    const userId = this.ctx.session.userId;\n    const posts = await this.ctx.service.post.fetch(userId);\n    // Modify the value of the Session\n    this.ctx.session.visited = ctx.session.visited? (ctx.session.visited + 1) : 1;\n    // ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Static Prefix\nDESCRIPTION: Corrects the static prefix. This fix ensures that static assets are served correctly within the MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/sequelize/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n- static prefix ([#1321](https://github.com/midwayjs/midway/issues/1321)) ([31fe961](https://github.com/midwayjs/midway/commit/31fe961931fed7656a144b1682ee4c4bb25fdff5))\n```\n\n----------------------------------------\n\nTITLE: Streaming Response (Typescript)\nDESCRIPTION: This snippet demonstrates how to create a streaming response in a MidwayJS controller method using `ctx.res.write` and `ctx.res.end`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, sleep } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n  \n  @Get('/')\n  async home() {\n    this.ctx.status = 200;\n    this.ctx.set('Transfer-Encoding', 'chunked');\n    for (let i = 0; i < 100; i++) {\n      await sleep(100);\n      this.ctx.res.write('abc'.repeat(100));\n    }\n    \n    this.ctx.res.end();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Service Implementation (TypeScript)\nDESCRIPTION: This TypeScript code defines a Redis service using ioredis. It initializes the Redis client with the host set to 'redis' (as defined in the docker-compose.yml). It includes methods to set and get values from Redis.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/deployment.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Scope, ScopeEnum, Init } from '@midwayjs/decorator';\nimport * as Redis from 'ioredis';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class RedisService {\n  redis: Redis.Redis = null;\n\n  @Init()\n  async init() {\n    this.redis = new Redis({\n      host: 'redis',\n    });\n  }\n\n  async setValue(key, value) {\n    return await this.redis.set(key, value);\n  }\n\n  async getValue(key) {\n    return await this.redis.get(key);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESM import with file extension\nDESCRIPTION: In ESM, import statements require specifying the file extension, typically `.js`.  This ensures that Node.js can correctly resolve the module. This example shows a correct import statement with the `.js` extension.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/esm.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { helper } from \"./foo.js\"; // works in ESM & CJS\n```\n\n----------------------------------------\n\nTITLE: Using Custom MQTT Publisher Instance\nDESCRIPTION: This TypeScript code shows how to use a specific MQTT publisher instance (e.g., 'pub2') using the `MqttProducerFactory` and `@InjectClient`.  This allows you to inject different publisher instances with varying configurations into different parts of your application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/user.service.ts\nimport { Provide, Inject } from '@midwayjs/core';\nimport { MqttProducerFactory, DefaultMqttProducer } from '@midwayjs/mqtt';\n\n@Provide()\nexport class UserService {\n  \n  @InjectClient(MqttProducerFactory, 'pub2')\n  producer: DefaultMqttProducer;\n  \n  async invoke() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Package Check in tsconfig.json (TypeScript)\nDESCRIPTION: This snippet demonstrates how to disable dependency package checking in the `tsconfig.json` file. This is useful when the TypeScript version of a dependency package conflicts with the project's TypeScript version, causing compilation errors. By setting `skipLibCheck` to `true`, the compiler will skip type checking of declaration files (*.d.ts) of the dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/ts_problem.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Nunjucks view module\nDESCRIPTION: Imports the @midwayjs/view-nunjucks module and configures it within the MidwayJS application. This involves adding the view module to the `imports` array in the `Configuration` decorator and specifying the configuration file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport * as view from '@midwayjs/view-nunjucks';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    view, // 导入 nunjucks 组件\n  ],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Aliyun HTTP Trigger Form Body Result\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Alibaba Cloud HTTP Trigger with form data.  The request body is parsed into a JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"b\":\"c\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Validation in Controller (TypeScript)\nDESCRIPTION: This snippet demonstrates a basic approach to parameter validation within a controller using manual checks. It retrieves data from the request body and performs type and value validation with conditional checks, throwing an error if validation fails.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/validate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\nexport interface User {\n  id: number;\n  firstName: string;\n  lastName: string;\n  age: number;\n}\n\n// src/controller/home.ts\nimport { Controller, Get, Provide, ALL } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/api/user')\nexport class HomeController {\n  @Post('/')\n  async updateUser(@Body(ALL) user: User) {\n    if (!user.id || typeof user.id !== 'number') {\n      throw new Error('id error');\n    }\n\n    if (user.age <= 30) {\n      throw new Error('age not match');\n    }\n    // xxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alibaba API Gateway Event Example (text/html)\nDESCRIPTION: This JSON shows the event structure received by the serverless function when using Alibaba Cloud API Gateway with 'pass-through' configuration and a content type of `text/html`. The body is base64 encoded and contains a string, which needs to be decoded. The function receives this encoded string in `event.body` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"eyJjIjoiYiJ9 \",\n  \"headers\": {\n    \"x-ca-dashboard-action\": \"DEBUG \",\n    \"x-ca-dashboard-uid\": \"125087\",\n    \"x-ca-stage\": \"RELEASE \",\n    \"x-ca-dashboard-role\": \"USER \",\n    \"user-agent\": \"Apache-HttpClient/4.5.6 (Java/1.8.0_172) \",\n    \"accept-encoding\": \"gzip,deflate \",\n    \"content-md5\": \"Kry+hjKjc2lvIrwoJqdY9Q== \",\n    \"content-type\": \"text/html; charset=utf-8\"\n  },\n  \"httpMethod\": \"POST \",\n  \"isBase64Encoded\": true\n  \"path\": \"/api/321 \",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity using mwtypeorm - Bash\nDESCRIPTION: This snippet shows how to create a new entity file using the `mwtypeorm` CLI. This command will create a `src/entity/User.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtypeorm entity:create src/entity/User\n```\n\n----------------------------------------\n\nTITLE: Injecting Client with Decorator (TypeScript)\nDESCRIPTION: This snippet shows how to use the `@InjectClient` decorator from `@midwayjs/core` to inject specific HTTP client instances directly into a class. It requires specifying the `ServiceFactory` class and the client name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPClientServiceFactory } from './service/httpClientServiceFactory';\nimport { join } from 'path';\nimport { InjectClient } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n  @InjectClient(HTTPClientServiceFactory, 'aaa')\n  aaaInstance: HTTPClientServiceFactory;\n\n  @InjectClient(HTTPClientServiceFactory, 'bbb')\n  bbbInstance: HTTPClientServiceFactory;\n\n  async invoke() {\n    // this.aaaInstance.xxx\n\t\t// this.bbbInstance.xxx\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring moduleNameMapper in Jest (TypeScript)\nDESCRIPTION: This TypeScript snippet configures the `moduleNameMapper` option in Jest to map module paths defined with the `@` alias to their corresponding directories in the `src` folder. It allows Jest to resolve module paths correctly during testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  testPathIgnorePatterns: ['<rootDir>/test/fixtures'],\n  coveragePathIgnorePatterns: ['<rootDir>/test/'],\n  moduleNameMapper: {\n    '^@/(.*)$': '<rootDir>/src/$1',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Simulating JWT Request with cURL\nDESCRIPTION: Use cURL to generate a JWT and then use it to authenticate a request to the `/passport/jwt` endpoint. This tests the JWT generation and authentication flow.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/README.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST http://127.0.0.1:7001/jwt\n\n结果 {\"t\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}\n\ncurl http://127.0.0.1:7001/passport/jwt -H \"Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n结果 {\"msg\": \"Hello Midway\",\"iat\": 1635468727,\"exp\": 1635468827}\n```\n\n----------------------------------------\n\nTITLE: Updating Project Dependencies (JSON)\nDESCRIPTION: This snippet shows the updated dependencies in the `package.json` file for Serverless v2.0. The `@midwayjs/faas` package should be updated to version 2.0.0 or higher.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_v1_upgrade_serverless_v2.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@midwayjs/faas\": \"^2.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Use Fields Example\nDESCRIPTION: This example demonstrates how to use `useFields()` on the backend to retrieve non-file fields from a FormData object.  It showcases a simple usage where a \"name\" field is extracted.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/upload.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// frontend\nconst formdata = new FormData();\nformdata.append('name', 'test');\n\npost(formdata);\n\n// backend\nconst fields = useFields();\n// { name: 'test' }\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope in MidwayJS\nDESCRIPTION: This commit corrects an issue where the request scope was not valid during singleton invocations within MidwayJS. This fix likely ensures proper dependency injection and context management when singletons are used within request-scoped operations, linked to issue #1622.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests (Bash)\nDESCRIPTION: This command executes the Jest test suite in a MidwayJS project.  It assumes that the test script is defined in the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run test\n```\n\n----------------------------------------\n\nTITLE: Running Pipeline in Parallel Mode in TypeScript\nDESCRIPTION: This example demonstrates how to execute the pipeline in parallel mode using the `parallel` method of the `IPipelineHandler`. The `@Pipeline` decorator specifies the valve handlers to be executed. The `parallel` method returns a Promise that resolves with an object where each key corresponds to the alias of a valve handler, and the value is the result of that handler's execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass StageTest {\n  // Declare a pipeline here\n  @Pipeline([VideoFeeds, AccountMap, CrowFeeds])\n  stages: IPipelineHandler;\n\n  async runParallel(): Promise<any> {\n    // The videoFeeds, accountMap and crowFeeds are executed concurrently here.\n    return this.stages.parallel<any>({\n      args: {aa: 123}\n    });\n\n    // The returned result structure\n    /*\n    {\n      // The key with the accountMap alias account as the return object\n      account: {\n        id: 'test_account_id',\n        nick: 'test hello',\n        isFollow: true\n      },\n      // The videoFeeds alias video is used as the key of the return object.\n      video: [\n        {\n          videoId: '123',\n          videoUrl: 'https://www.taobao.com/xxx.mp4',\n          videoTitle: 'test 1 video'\n        }, {\n          videoId: '234',\n          videoUrl: 'https://www.taobao.com/xxx234.mp4',\n          videoTitle: 'test 2 video'\n        }, {\n          videoId: '456',\n          videoUrl: 'https://www.taobao.com/xxx456.mp4',\n          videoTitle: 'test 3 video'\n        }\n      ],\n      // The crowFeeds alias tab is used as the key of the return object.\n      tab: {\n        title: 'test tab',\n        tabId: 'firstTab',\n        index: 0\n      }\n    }\n    */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Query Parameters from Decorator\nDESCRIPTION: Demonstrates how to retrieve a query parameter ('uid') using the `@Query` decorator within a controller.  The `getUser` method retrieves the `uid` from the query string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\nimport { Controller, Get, Query } from \"@midwayjs/core\";\n\n@Controller('/user')\nexport class UserController {\n  @Get('/')\n  async getUser(@Query('uid') uid: string): Promise<User> {\n    // xxxx\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specify Entry File Using @midwayjs/cli\nDESCRIPTION: This JSON snippet defines a `dev` script using `@midwayjs/cli` within the `script` section of a `package.json` file. It utilizes `midway-bin dev --ts --entryFile=bootstrap.js` to start the application in a TypeScript (ts-node) environment, specifying `bootstrap.js` as the entry point. This ensures consistency between local and production environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"script\": {\n    \"dev\": \"midway-bin dev --ts --entryFile=bootstrap.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Testing of Aliyun HTTP Trigger in Typescript\nDESCRIPTION: This code snippet demonstrates how to locally test an Aliyun HTTP trigger using `createFunctionApp` and `createHttpRequest` from `@midwayjs/mock`. It creates a function app, sends an HTTP request to the trigger endpoint, and asserts that the response matches the expected output. It includes setup and teardown for the test environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_http.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Framework } from '@midwayjs/serverless-app';\nimport { createInitializeContext } from '@midwayjs/serverless-fc-trigger';\nimport { createFunctionApp, createHttpRequest } from '@midwayjs/mock';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n  let instance: HelloAliyunService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(),\n    });\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from http trigger', async () => {\n    const result = await createHttpRequest(app).get('/').query({\n      name: 'zhangting',\n    });\n    expect(result.text).toEqual('hello zhangting');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Context in Serverless Function\nDESCRIPTION: This code shows how to inject the `Context` object into a Midway Serverless function class using the `@Inject()` decorator. This provides access to the function context within the class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_context.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from '@midwayjs/faas';\n\n@Inject()\nctx: Context;\n```\n\n----------------------------------------\n\nTITLE: Removing Connection Key\nDESCRIPTION: This code snippet refers to a commit that removes a specific 'connection key'. This might be related to database connections or some other configuration within the application. Removing it suggests that it was either redundant, insecure, or causing some issue. The commit hash 6ac219e provides a direct reference to the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_8\n\nLANGUAGE: N/A\nCODE:\n```\n6ac219e\n```\n\n----------------------------------------\n\nTITLE: Injecting Repository with Specific Data Source (Typescript)\nDESCRIPTION: This snippet shows how to inject an `EntityRepository` for a specific data source in a Midway application. By using the `@InjectRepository` decorator with the desired entity and data source name (`custom1`), the controller can access and manage entities from the specified data source.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mikro.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\n@Provide()\nexport class BookController {\n\n  @InjectRepository(Book, 'custom1')\n  bookRepository: EntityRepository<Book>;\n\n  async findBookAndQuery() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Components with useInject in TypeScript\nDESCRIPTION: This code snippet showcases how to access and use a component instance, specifically `CacheManager` from `@midwayjs/cache`, at runtime within a Midway Hooks API using `useInject`.  It demonstrates setting and retrieving a value from the cache.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/component.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useInject,\n} from '@midwayjs/hooks';\nimport { CacheManager } from '@midwayjs/cache';\n\nexport default Api(Get(), async () => {\n  const cache = await useInject(\n    CacheManager\n  );\n\n  await cache.set('name', 'Midway');\n  const result = await cache.get(\n    `name`\n  );\n\n  return `Hello ${result}!`;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Duplicate Class Name Checking\nDESCRIPTION: This snippet demonstrates how to enable duplicate class name checking in the Midway configuration. Enabling this feature will cause a `MidwayDuplicateClassNameError` (MIDWAY_10015) if the same class name is found in the dependency injection container during code scanning. This helps prevent naming conflicts and ensures code clarity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/error_code.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n@Configuration({\n  // ...\n  conflictCheck: true\n})\nexport class MainConfiguration {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Data Creation with Prisma Mutation (TypeScript)\nDESCRIPTION: This TypeScript code showcases how to call the 'signUp' API from the frontend, passing 'John' as the name and 'test@test.com' as the email. It uses a promise to log the created user object to the console once the request is successful.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/prisma.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signUp } from '../api/feeds';\n\nsignUp('John', 'test@test.com').then(\n  (user) => {\n    console.log(user);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using translate Method\nDESCRIPTION: This code snippet showcases how to use the `translate` method from the `MidwayI18nService` to translate messages within a controller. The translated message is returned as the response to a GET request. The `username` query parameter is passed as an argument to the translation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class UserController {\n\n  @Inject()\n  i18nService: MidwayI18nService;\n\n  @Get('/')\n  async index(@Query('username') username: string) {\n    return this.i18nService.translate('HELLO_MESSAGE', {\n      args: {\n        username\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Loggers Dynamically\nDESCRIPTION: This code snippet demonstrates how to dynamically obtain logger objects using the getLogger method. It shows how to retrieve the coreLogger, the default contextLogger, and a contextLogger associated with a specific logger ('customA'). Requires `@midwayjs/koa` or another framework with a Context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// 获取 coreLogger\nconst coreLogger = app.getLogger('coreLogger');\n// 获取默认的 contextLogger\nconst contextLogger = ctx.getLogger();\n// 获取特定 logger 创建出来的 contextLogger，等价于 customALogger.createContextLogger(ctx)\nconst customAContextLogger = ctx.getLogger('customA');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Request Parameter Decorator (Typescript)\nDESCRIPTION: This code defines a custom request parameter decorator named `Token` using `createRequestParamDecorator`.  The decorator retrieves the value of the 'token' header from the request context.  The second part of the snippet shows how to use the new decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRequestParamDecorator } from '@midwayjs/core';\n\n// 实现装饰器\nexport const Token = () => {\n  return createRequestParamDecorator(ctx => {\n    return ctx.headers.token;\n  });\n};\n\n// 使用装饰器\nexport class UserController {\n  async invoke(@Token() token: string) {\n    console.log(token);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSRF Token Synchronization in Controller (TypeScript)\nDESCRIPTION: Demonstrates how to render a CSRF token in a form within a MidwayJS controller using the token synchronization method. The token is accessed via `ctx.csrf` and embedded into the HTML form's action attribute.  The `_csrf` field name can be configured.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/security.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx;\n\n  @Get('/home')\n  async home() {\n    return '<form method=\"POST\" action=\"/upload?_csrf=${ this.ctx.csrf }\">\n      title: <input name=\"title\" />\n      <button type=\"submit\">upload</button>\n    </form>';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Context types from multiple frameworks\nDESCRIPTION: This code snippet shows how to combine Context types from multiple frameworks (e.g., Koa and Bull) using type intersection (`&`). This allows accessing properties and methods from different framework-specific context objects within a single service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\nimport { Context as BullContext } from '@midwayjs/bull';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  ctx: Context & BullContext;\n\n  async getUser() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Table Names for Tags and Relationships\nDESCRIPTION: Illustrates how the table names for the tag and relationship tables are dynamically generated based on the client name, table prefix, and table separator configured in the application. This allows for flexible and customizable database schema.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tags.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst clientName = 'local-test';\nconst { tablePrefix = 'a', tableSeparator = '_' } = tagOptions;\nconst tagTableName = `${tablePrefix}${tableSeparator}${clientName}${tableSeparator}tag`;\n// tagTableName: a_local-test_tag\nconst relationshipTableName =  `${tablePrefix}${tableSeparator}${clientName}${tableSeparator}relationship`\n// relationshipTableName: a_local-test-relationship\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Logger for Bull in MidwayJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a custom logger for the Bull component in MidwayJS.  It involves setting the `fileLogName` property within the `midwayLogger` configuration to specify the log file name. This allows for centralized logging of Bull-related activities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      // ...\n      bullLogger: {\n        fileLogName: 'midway-bull.log',\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Method Results with @Caching Decorator in Midway\nDESCRIPTION: This code snippet showcases how to use the `@Caching` decorator from `@midwayjs/cache-manager` to automatically cache the results of a method. It caches the result of the `getUser` method when it is first called, subsequent calls return the cached value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/caching.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/core';\nimport { Caching } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n   @Caching('default')\n   async getUser(name: string) {\n     return name;\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/process-agent with npm\nDESCRIPTION: Installs the @midwayjs/process-agent package using npm. This command adds the package to your project's dependencies, allowing you to use its features for managing inter-process communication and ensuring certain tasks execute in the primary process.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/process_agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/process-agent@3 --save\n```\n\n----------------------------------------\n\nTITLE: Modifying default static file serving directory\nDESCRIPTION: This TypeScript snippet shows how to modify the default static file serving directory in a Midway application's `config.default.ts` file. It adjusts the `dirs.default.dir` property within the `staticFile` configuration to specify a different directory for static file serving.  The prefix can also be configured.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/static_file.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// {app_root}/src/config/config.default.ts\nexport default {\n  // ...\n  staticFile: {\n    dirs: {\n      default: {\n        prefix: '/',\n        dir: 'xxx',\n      },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Association\nDESCRIPTION: This TypeScript code demonstrates how to define a one-to-many association between two Sequelize models (Player and Team) using sequelize-typescript decorators. It uses `@ForeignKey`, `@BelongsTo`, and `@HasMany` to establish the relationship.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, Column, ForeignKey, BelongsTo, HasMany } from 'sequelize-typescript';\n\n@Table\nexport class Player extends Model {\n  @Column\n  name: string;\n\n  @Column\n  num: number;\n\n  @ForeignKey(() => Team)\n  @Column\n  teamId: number;\n\n  @BelongsTo(() => Team)\n  team: Team;\n}\n\n@Table\nexport class Team extends Model {\n  @Column\n  name: string;\n\n  @HasMany(() => Player)\n  players: Player[];\n}\n```\n\n----------------------------------------\n\nTITLE: Fix supertest typings and createFunctionApp in MidwayJS\nDESCRIPTION: This commit addresses type definitions for supertest and createFunctionApp. It enhances the developer experience when writing integration tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Installing midway-test-inner-component\nDESCRIPTION: This command installs the 'midway-test-inner-component' package as a dependency in your project. It uses npm, the Node.js package manager, to download and add the component to your project's 'node_modules' directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-resource/midway-test-inner-component/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i midway-test-inner-component --save\n```\n\n----------------------------------------\n\nTITLE: Task Priority Configuration\nDESCRIPTION: This snippet shows how to assign priorities to tasks, with higher priority tasks being executed first. The `priority` option is used to set the priority of each task. Higher priority value means higher priority.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullmqFramework.getQueue('test');\n// Higher priority value means higher priority\nawait testQueue?.addJobToQueue({ priority: 1 }, { priority: 3 }); // High priority\nawait testQueue?.addJobToQueue({ priority: 2 }, { priority: 2 }); // Medium priority\nawait testQueue?.addJobToQueue({ priority: 3 }, { priority: 1 }); // Low priority\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition with Prisma\nDESCRIPTION: Defines the database schema using Prisma's schema definition language. This includes defining the User and Post models with their respective fields, data types, and relationships. It utilizes SQLite as the database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/prisma.md#_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  email String @unique\n  name String?\n  posts Post[]\n}\n\nmodel Post {\n  id Int @id @default(autoincrement())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  content String?\n  published Boolean @default(false)\n  viewCount Int @default(0)\n  author User?    @relation(fields: [authorId], references: [id])\n  authorId Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Cache\nDESCRIPTION: This shows how to reset the entire cache store.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.cache.reset(); // 这块需要注意\n```\n\n----------------------------------------\n\nTITLE: Guard File Structure\nDESCRIPTION: Shows the recommended directory structure for guard files within a MidwayJS project. This structure helps organize and locate guard implementations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/guard.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   ├── controller\n│   │   ├── user.controller.ts\n│   │   └── home.controller.ts\n│   ├── interface.ts\n│   ├── guard\n│   │   └── auth.guard.ts\n│   └── service\n│       └── user.service.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Mocking Context with Callback - TypeScript\nDESCRIPTION: This snippet shows how to mock the Midway Context using a callback function with `mockContext`.  This approach allows for more complex data or logic when mocking the context. Dependencies: @midwayjs/core\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayMockService, Configuration, App } from '@midwayjs/core';\n\n@Configuration(/**/)\nexport class MainConfiguration {\n  @Inject()\n  mockService: MidwayMockService;\n\n  @App()\n  app;\n\n  async onReady() {\n    // 模拟上下文\n    this.mockService.mockContext(app, (ctx) => {\n      ctx.user = 'midway';\n    }, 'group2');\n  }\n}\n\n// ctx.user => midway\n```\n\n----------------------------------------\n\nTITLE: Upgrading to the Latest Compatible Version using yarn\nDESCRIPTION: This command upgrades all Midway modules to the latest compatible version using yarn.  First, it adds `midway-version` as a project dependency using `yarn add`.  The `-m` flag instructs the tool to identify the latest compatible version within the existing version range. The `-w` flag writes the changes to `package.json` and `yarn.lock`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/version_check.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add midway-version@latest\n$ yarn midway-version -m\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn midway-version -m -w\n```\n\n----------------------------------------\n\nTITLE: Using the RabbitMQ Service (Midway.js, TypeScript)\nDESCRIPTION: This code snippet shows how to inject and use the RabbitMQ service within another Midway.js component (UserService).  It demonstrates the injection of the RabbitmqService using the @Inject decorator and calls the sendToQueue method to send a message to the 'tasks' queue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class UserService {\n  @Inject()\n  rabbitmqService: RabbitmqService;\n\n  async invoke() {\n    // TODO\n\n    // 发送消息\n    await this.rabbitmqService.sendToQueue('tasks', { hello: 'world' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Bundle Helper and PKG (npm)\nDESCRIPTION: This snippet shows how to install the `@midwayjs/bundle-helper` package, used to generate the `src/index.ts` entry file, and the `pkg` package, used for building binary executables. The `pkg` package can be installed globally or as a project dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n## Used to generate entry\n$ npm i @midwayjs/bundle-helper --save-dev\n\n## for building binaries\n## install to the global\n$ npm i pkg -g\n## Or install to project (recommended)\n$ npm i pkg --save-dev\n```\n\n----------------------------------------\n\nTITLE: Handling Events in FC (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to handle events within the Alibaba Cloud FC environment using the initialized Midway.js runtime. It uses `runtime.asyncEvent` to process the event and returns a simple data object. The `asyncWrapper` function provides error handling and logging.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/midway-fc-starter/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// for event\nexports.handler = asyncWrapper(async (...args) => {\n  return runtime.asyncEvent(async function(ctx, event) {\n    return {data: 1};\n  })(...args);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n for Validation in Midway.js\nDESCRIPTION: This commit introduces internationalization (i18n) support for validation within the Midway.js framework. This feature allows developers to easily adapt validation messages to different languages, improving the user experience for global applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimplement i18n for validate ([#1426](https://github.com/midwayjs/midway/issues/1426)) ([4c7ed2f](https://github.com/midwayjs/midway/commit/4c7ed2ff2e7ccf10f88f62abad230f92f5e76b97))\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Global Module Path\nDESCRIPTION: This snippet shows how to configure a shared npm global module path to avoid reinstalling global modules when switching Node.js versions with nvs. It creates a .npm-global directory, sets the npm prefix to this directory, and updates the PATH environment variable to include the global bin directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/how_to_install_nodejs.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p ~/.npm-global\n$ npm config set prefix ~/.npm-global\n$ echo \"export PATH=~/.npm-global/bin:$PATH\" >> ~/.zshrc\n$ source ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Defining Resources for Casbin\nDESCRIPTION: This TypeScript code snippet shows how to define resources using an enum, which allows for consistent and type-safe resource management within the application.  These resources correspond to the object part of Casbin policies, enabling fine-grained access control.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Resource {\n  USERS_LIST = 'users_list',\n  USER_ROLES = 'user_roles',\n  USER_PERMISSIONS = 'user_permissions',\n  ROLES_LIST = 'roles_list',\n  ROLE_PERMISSIONS = 'role_permission',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Routes with Api() in Simple Mode\nDESCRIPTION: This code snippet shows how to create routes using `Api()` in simple mode in Midway Hooks. It exports two routes: one using the `getPath` function and another that returns a simple greeting.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/file-route.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n} from '@midwayjs/hooks';\nimport { useContext } from '@midwayjs/hooks';\n\nexport async function getPath() {\n  // Get HTTP request context by Hooks\n  const ctx = useContext();\n  return ctx.path;\n}\n\nexport default Api(Get(), async () => {\n  return 'Hello Midway!';\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a custom view engine in Midway.js\nDESCRIPTION: This TypeScript code snippet shows how to register a custom view engine in a Midway.js application using the `ViewManager`. The `use` method is called to associate the 'ejs' engine with the `MyView` class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, Inject, Provide } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as view from '@midwayjs/view';\nimport { MyView } from './lib/my';\n\n@Configuration({\n  imports: [koa, view],\n  importConfigs: [join(__dirname, 'config')]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  viewManager: view.ViewManager;\n\n  async onReady() {\n    this.viewManager.use('ejs', MyView);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Query Parameters from Context\nDESCRIPTION: This code snippet demonstrates how to retrieve query parameters from the context in MidwayJS, using `this.ctx.query`. It gets the entire query object which includes all parameters passed in the URL's query string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async getUser(): Promise<User> {\n    const query = this.ctx.query;\n    // {\n    //   uid: '1',\n    // sex: 'male',\n    //}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Renewing Session on Activity (TypeScript)\nDESCRIPTION: This code snippet shows how to configure session renewal in a Midway.js application. By setting `renew` to `true`, the session's expiration time will be extended if the user is actively using the site, preventing them from being logged out due to inactivity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/cookie_session.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  session: {\n    renew: true,\n    // ...\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Swagger UI JSON Path - Midway.js\nDESCRIPTION: This bug fix addresses an issue where the Swagger UI was pointing to an incorrect JSON path. This likely caused problems with displaying or accessing the API documentation. The commit changes the JSON path to the correct one, resolving the issue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- swagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Fixing Consul Config Definition in MidwayJS\nDESCRIPTION: This commit fixes a bug related to the Consul configuration definition within the MidwayJS framework. It addresses issues with the configuration structure or validation, ensuring that the Consul module can be configured correctly. The commit hash is 2a0d57c183f3fad22fe878f538a26182291b7b44.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nconsule config definition ([#1804](https://github.com/midwayjs/midway/issues/1804)) ([2a0d57c](https://github.com/midwayjs/midway/commit/2a0d57c183f3fad22fe878f538a26182291b7b44))\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Triggers (MidwayJS, TypeScript)\nDESCRIPTION: This snippet shows how to test HTTP triggers using `createHttpRequest`. It simulates an HTTP request to the function app and asserts the response.  Dependencies include `@midwayjs/mock`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/aliyun_faas.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloAliyunService } from '../src/function/hello_aliyun';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from http trigger', async () => {\n    // ...\n    const result = await createHttpRequest(app).get('/').query({\n      name: 'zhangting',\n    });\n    expect(result.text).toEqual('hello zhangting');\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Injection in MidwayJS (TypeScript)\nDESCRIPTION: Illustrates how to inject plugins in MidwayJS using the `@plugin` decorator.  This example demonstrates injecting the `egg-jwt` plugin, allowing access to the `app.jwt` object via dependency injection. The decorator decouples the code from the `app` object by accessing the plugin property directly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/framework.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provide, plugin } from 'midway';\n\n@provide()\nexport class BaseService {\n  @plugin()\n  jwt;\n}\n```\n\n----------------------------------------\n\nTITLE: Inject Data Source using InjectDataSource Decorator\nDESCRIPTION: This example shows how to inject a Sequelize data source directly into a class using the `@InjectDataSource` decorator. This is a convenient alternative to using the `SequelizeDataSourceManager`.  A specific data source can be specified as a parameter to the decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport { InjectDataSource } from '@midwayjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\n\n@Configuration({\n   //...\n})\nexport class MainConfiguration {\n\n   // Inject the default data source\n   @InjectDataSource()\n   defaultDataSource: Sequelize;\n\n   // inject custom data source\n   @InjectDataSource('default1')\n   customDataSource: Sequelize;\n\n   async onReady(container: IMidwayContainer) {\n     //...\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Casbin Policy Configuration\nDESCRIPTION: This example shows a basic Casbin policy file (`basic_policy.csv`). It defines the policies and role hierarchies used by Casbin. The `p` lines define policies, while `g` and `g2` lines define role hierarchies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\np, superuser, user, read:any\np, manager, user_roles, read:any\np, guest, user, read:own\n\ng, alice, superuser\ng, bob, guest\ng, tom, manager\n\ng2, users_list, user\ng2, user_roles, user\ng2, user_permissions, user\ng2, roles_list, role\ng2, role_permissions, role\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js service with Alinode\nDESCRIPTION: This snippet shows how to start the Node.js service with the `ENABLE_NODE_LOG=YES` environment variable. This environment variable is required for Alinode to properly collect and report performance data. It also includes setting the `NODE_ENV` environment variable to `production`.  The `bootstrap.js` file is assumed to be the entry point of the Node.js application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/alinode.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ NODE_ENV=production ENABLE_NODE_LOG=YES node bootstrap.js\n```\n\n----------------------------------------\n\nTITLE: Supporting multi root directories in MidwayJS\nDESCRIPTION: This commit introduces support for multiple root directories in MidwayJS. This allows for more flexible project structures and the ability to load modules from different locations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nsupport multi root ([#1584](https://github.com/midwayjs/midway/issues/1584)) ([b23dda2](https://github.com/midwayjs/midway/commit/b23dda258563fba143f23c8779680df3ab8ec3d5))\n```\n\n----------------------------------------\n\nTITLE: Custom Transport: Basic Implementation in TypeScript\nDESCRIPTION: This code defines a custom transport in TypeScript that extends `EmptyTransport` from `@midwayjs/logger`.  It overrides the `log` method to write error or warning messages to a specific file. Requires `fs.writeFileSync` and `path.join`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmptyTransport } from '@midwayjs/logger';\n\nclass CustomTransport extends EmptyTransport {\n  log(info, callback) {\n    const levelLowerCase = info.level;\n    if (levelLowerCase === 'error' || levelLowerCase === 'warn') {\n      writeFileSync(join(logsDir, 'test.log'), info.message);\n    }\n    callback();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jest Test Script with Timeout\nDESCRIPTION: This JSON snippet shows a package.json script that runs Jest with a specified timeout. The `--testTimeout` parameter sets the maximum time (in milliseconds) a test can run before Jest considers it timed out. This is helpful for tests that involve asynchronous operations or long-running tasks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest --testTimeout=30000\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Options in tsconfig.json\nDESCRIPTION: This snippet shows the configuration options in a `tsconfig.json` file for a Midway.js project.  It specifies the compilation target, module system, module resolution, and other settings for the TypeScript compiler. `experimentalDecorators` enables decorator support.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"experimentalDecorators\": true,\n    \"noImplicitThis\": true,\n    \"noUnusedLocals\": true,\n    \"stripInternal\": true,\n    \"pretty\": true,\n    \"declaration\": true,\n    \"sourceMap\": true,\n    \"outDir\": \"dist\",\n    \"lib\": [\"es2017\", \"dom\"]\n  },\n  \"exclude\": [\"dist\", \"node_modules\", \"test\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Resource Base URL in Midway.config.ts (Vite)\nDESCRIPTION: This code snippet demonstrates how to configure the base URL for static assets in a Midway Hooks project using the `midway.config.ts` file. The `vite.base` option is set to specify the CDN URL where the static assets are hosted. This ensures that when the application is built, all static asset references will point to the CDN.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/deploy.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport react from '@vitejs/plugin-react';\nimport { defineConfig } from '@midwayjs/hooks-kit';\n\nexport default defineConfig({\n  vite: {\n    plugins: [react()],\n    base: 'https://cdn.example.com',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NVS Mirror Address\nDESCRIPTION: This snippet shows how to configure NVS to use a mirror address for downloading Node.js distributions, which is particularly useful in regions where the default Node.js download servers are slow or unreliable.  It sets the remote node address to the specified mirror.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/how_to_install_nodejs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nvs remote node https://npm.taobao.org/mirrors/node/\n$ nvs remote\ndefault             node\nchakracore          https://github.com/nodejs/node-chakracore/releases/\nchakracore-nightly  https://nodejs.org/download/chakracore-nightly/\nnightly             https://nodejs.org/download/nightly/\nnode                https://nodejs.org/dist/\n```\n\n----------------------------------------\n\nTITLE: Creating a Fanout Exchange\nDESCRIPTION: This code snippet demonstrates how to create a fanout exchange in RabbitMQ using `@midwayjs/mock`. It creates a producer, declares a fanout exchange, sends a message to the exchange, and then closes the producer and application. It is configured to send non-persistent messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/rabbitmq.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager = await createRabbitMQProducer('tasks-fanout', {\n  isConfirmChannel: false\n  mock: false\n  url: 'amqp://localhost',\n});\n\n// Name of the exchange\nconst ex = 'logs';\n// Write a message\nconst msg = \"Hello World!\";\n\n// Declare Switch\nmanager.assertExchange(ex, 'fanout', { durable: false }) // 'fanout' will broadcast all messages to all the queues it knows\n\n// Start the service\nconst app = await creatApp('base-app-fanout', {\n  url: 'amqp://localhost',\n  reconnectTime: 2000\n});\n\n// Sent to the switch, because it is not persistent, you need to wait until the subscription service is up before sending it.\nmanager.sendToExchange(ex, '', Buffer.from(msg))\n\n// Wait for a while\nawait sleep(5000);\n\n// Check result\n\n// Close producer\nawait manager.close();\n\n// Close app\nawait close(app);\n\n```\n\n----------------------------------------\n\nTITLE: Singleton Scope and Context Injection\nDESCRIPTION: Illustrates the limitations of injecting the request context (`ctx`) into a Singleton-scoped class.  Because Singletons are not associated with a request, the `ctx` will be undefined. Requires @midwayjs/decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class UserService {\n  @Inject()\n  ctx; // undefined\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing export and refactoring request scope in Midway Mock\nDESCRIPTION: This commit addresses export issues and refactors the request scope within the midway-mock package. The fix ensures that the package is exported correctly and that the request scope is handled efficiently and accurately.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_52\n\nLANGUAGE: None\nCODE:\n```\nc88b17e\n```\n\n----------------------------------------\n\nTITLE: Importing Cache Module\nDESCRIPTION: This code snippet shows how to import the Midway Cache module into the `configuration.ts` file. This step is essential for enabling the cache component within the Midway application. The configuration also imports the config directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/koa';\nimport * as bodyParser from 'koa-bodyparser';\nimport * as cache from '@midwayjs/cache'; // 导入cacheComponent模块\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    cache, // 导入 cache 组件\n  ],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Koa Compress Middleware in Midway.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the 'compress' middleware (koa-compress) in the `config.default.js` file. Similar to the previous configuration, the `middleware` array specifies the names of the middleware to be loaded. The name 'compress' corresponds to the middleware file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/middleware.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.js\nmodule.exports = {\n  middleware: ['compress'],\n};\n```\n\n----------------------------------------\n\nTITLE: Opening WebSocket Component in Configuration (Integrated)\nDESCRIPTION: Imports the @midwayjs/koa and @midwayjs/ws modules and includes both in the imports array within the MainConfiguration class.  This configures Midway to use the WebSocket component alongside the Koa framework, attaching it to an existing web application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as ws from '@midwayjs/ws';\n\n@Configuration({\n  imports: [koa, ws]\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ctx.getApp() to get the application instance from the context\nDESCRIPTION: This example shows how to get the application instance (of the corresponding framework type) from the context using `ctx.getApp()`.  This allows accessing application-level configurations and services from within a request context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = this.ctx.getApp();\n// app.getConfig();\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection Typescript\nDESCRIPTION: Demonstrates constructor injection using `@inject` and other decorators like `@config` and `@plugin`.  Dependencies are injected as constructor parameters. This example shows how to inject configurations, plugins, and other managed objects into a class.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\nexport class A {\n  config = {\n    c: 20,\n  };\n}\n\n@provide()\nexport class B {\n  config = {\n    c: 40,\n  };\n}\n\n@provide()\nexport class BaseService {\n  config;\n  plugin2;\n\n  constructor(@inject() a, @config('hello') config, @inject() b, @plugin('plugin2') plugin2) {\n    this.config = Object.assign(config, {\n      c: a.config.c + b.config.c + config.c,\n    });\n    this.plugin2 = plugin2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Initialization Context Data in TypeScript\nDESCRIPTION: This example shows how to modify the default initialization context data created by `createInitializeContext`.  It demonstrates passing an object to `createInitializeContext` to override default values for specific properties. It shows how to customize the initialization data according to test requirements.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_testing.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createInitializeContext } from '@midwayjs/serverless-fc-trigger';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n  // ...\n\n  beforeAll(async () => {\n    // 创建函数 app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext({\n        accountId: 'xxxxxxx', // 可以按照结构，调整数据\n      }),\n    });\n\n    // ...\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status Code with API in MidwayJS\nDESCRIPTION: This code demonstrates how to set the HTTP status code using the `ctx.status` API in MidwayJS. The status code is set to 201 for the `/` route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.status = 201;\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Dependency Injection (TypeScript)\nDESCRIPTION: This snippet demonstrates the `getAsync` method of the MidwayJS dependency injection container. It shows how the container handles asynchronous initialization of objects and automatic attribute assignment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/***** The following is the internal code of the dependency injection container *****/\n\n// Automatic new UserService();\n// Automatic new UserController();\n// Automatic assignment userController.userService = await container.getAsync(UserService);\n\nconst userController = await container.getAsync(UserController);\nawait userController.handler(); // output 'world'\n```\n\n----------------------------------------\n\nTITLE: Fixing Config Filter for Sequelize & Mongoose\nDESCRIPTION: This commit adds a configuration filter and modifies the Sequelize and Mongoose configurations within the MidwayJS framework. The config filter likely allows for more specific configuration options, while the modifications improve the integration of Sequelize and Mongoose.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nadd config filter and modify sequelize & mongoose config ([#2150](https://github.com/midwayjs/midway/issues/2150)) ([5db3b9b](https://github.com/midwayjs/midway/commit/5db3b9b56b6eac393820acf9f089e6f8cdd6a8b6))\n```\n\n----------------------------------------\n\nTITLE: Add npm scripts to package.json for start/stop\nDESCRIPTION: This JSON snippet configures the `start` and `stop` scripts in `package.json` to use `egg-scripts` for deploying and stopping the application. The `start` command includes options for running the application in daemon mode, setting the process title, and specifying the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"scripts\": {\n    \"start\": \"egg-scripts start --daemon --title=********* --framework=@midwayjs/web\",\n    \"stop\": \"egg-scripts stop --title=*********\",\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/view-ejs\nDESCRIPTION: This command installs the @midwayjs/view-ejs package, which provides EJS template engine support for the @midwayjs/view component. It's a necessary dependency for using EJS templates in a Midway.js application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/view-ejs --save\n```\n\n----------------------------------------\n\nTITLE: Manual Task History Cleanup on Startup (TypeScript)\nDESCRIPTION: This snippet demonstrates how to manually clean up all tasks at startup using the `obliterate` method. It retrieves a queue instance and calls `obliterate({ force: true })` to remove all jobs from the queue, including completed and failed tasks. It is executed in the `onReady` lifecycle hook. The code imports `Configuration`, `App`, `Inject` from `@midwayjs/core` and the bull module. Dependencies: `@midwayjs/core`, `@midwayjs/koa`, `@midwayjs/bull`\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, App, Inject } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { join } from 'path';\nimport * as bull from '@midwayjs/bull';\n\n@Configuration({\n  imports: [koa, bull],\n  importConfigs: [join(__dirname, '. /config')],\n})\nexport class MainConfiguration {\n  @App()\n  app: koa;\n\n  @Inject()\n  bullFramework: bull;\n\n  async onReady() {\n    // At this stage, the decorator queue has not been created yet, use the API to create the queue manually in advance, the decorator will reuse the queue with the same name\n    const queue = this.bullFramework.createQueue('user');\n    // perform cleanup manually via queue\n    await queue.obliterate({ force: true });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscriber Configuration with connectOptions and subscribeOptions\nDESCRIPTION: This TypeScript code shows a complete subscriber configuration with `connectOptions` (host, port) and `subscribeOptions` (topicObject). These options determine how the subscriber connects to the MQTT broker and which topic it subscribes to.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\n\nexport default {\n   mqtt: {\n     sub: {\n       sub1: {\n         connectOptions: {\n           host: 'test.mosquitto.org',\n           port: 1883,\n         },\n         subscribeOptions: {\n           topicObject: 'test',\n         },\n       },\n       sub2: {\n         // ...\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Triggered Function with Supertest\nDESCRIPTION: This snippet demonstrates how to test a HTTP triggered function in Midway.js FaaS using `createFunctionApp` to create a function app and `createHttpRequest` (wraps supertest) to simulate HTTP requests. It gets result from api gateway trigger and asserts the response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_testing.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunctionApp, close, createHttpRequest } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/faas';\n\ndescribe('test/hello_aliyun.test.ts', () => {\n\n  it('should get result from api gateway trigger', async () => {\n    \n    const app: Application = await createFunctionApp<Framework>();\n    \n    const result = await createHttpRequest(app).get('/').query({\n      name: 'zhangting',\n    });\n    expect(result.text).toEqual('hello zhangting');\n    \n    await close(app);\n\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Midway Schedule (Bash)\nDESCRIPTION: This bash command installs the `midway-schedule` package as a project dependency. This package allows you to use scheduled tasks within your MidwayJS application, similar to the scheduling capabilities in EggJS.  It's a prerequisite for using EggJS compatible scheduled tasks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i midway-schedule --save\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta on macOS\nDESCRIPTION: This snippet shows how to install Rosetta on macOS. Rosetta is an application that allows applications built for Intel chips to run on Apple Silicon.  This is required to run older version of Node.js on newer Macs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/how_to_install_nodejs.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ /usr/sbin/softwareupdate --install-rosetta --agree-to-license\n```\n\n----------------------------------------\n\nTITLE: Quick Start Commands for Midway.js (Bash)\nDESCRIPTION: This code snippet provides the commands to quickly get started with a Midway.js project. It checks the npm version, initializes a new Midway.js project, navigates to the project directory, and starts the development server.  It assumes Node.js and npm are installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm -v\n\n## 选择模版\n$ npm init midway\n\n## 进入项目路径\ncd my_midway_app && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Async Initialization with Init Decorator Typescript\nDESCRIPTION: This example demonstrates asynchronous initialization using the `@init` decorator.  The `init` method is marked with `@init` and is automatically called asynchronously after the class is instantiated, allowing for asynchronous setup tasks.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\nexport class BaseService {\n  @config('hello')\n  config;\n\n  @plugin('plugin2')\n  plugin2;\n\n  @init()\n  async init() {\n    await new Promise((resolve) => {\n      setTimeout(() => {\n        this.config.c = 10;\n        resolve();\n      }, 100);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Session Support in Passport Configuration\nDESCRIPTION: This code snippet demonstrates how to disable session support in the `@midwayjs/passport` configuration. Setting `session` to `false` prevents passport from attempting to serialize and save user data to the session. This is useful when session-based authentication is not required or desired.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  passport: {\n    session: false\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Web Router with MidwayWebRouterService (TypeScript)\nDESCRIPTION: This snippet shows how to use the MidwayWebRouterService to dynamically add a new web route. It defines a handler function and specifies the URL and HTTP method for the route.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayWebRouterService, Configuration, Inject } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  webRouterService: MidwayWebRouterService;\n\n  async onReady() {\n    this.webRouterService.addRouter(async (ctx) => {\n      return 'hello world';\n    }, {\n      url: '/',\n      requestMethod: 'GET',\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Application and Context from MidwayJS Modules\nDESCRIPTION: This code snippet demonstrates how to import the Application and Context objects from various MidwayJS modules such as @midwayjs/koa, @midwayjs/faas, @midwayjs/web, and @midwayjs/express. These imports are necessary to access the framework's built-in objects and their functionalities.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context } from '@midwayjs/koa';\nimport { Application, Context } from '@midwayjs/faas';\nimport { Application, Context } from '@midwayjs/web';\nimport { Application, Context } from '@midwayjs/express';\n```\n\n----------------------------------------\n\nTITLE: Modifying Development Port (mwtsc)\nDESCRIPTION: This code snippet shows how to modify the development server port in the `package.json` file when using `mwtsc`.  It sets the `port` option in the `dev` script.  The `cross-env` package ensures environment variables work cross-platform.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quickstart.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"scripts\": {\n  //...\n  \"dev\": \"cross-env NODE_ENV=local mwtsc --watch --run @midwayjs/mock/app.js --port 6001\",\n},\n```\n\n----------------------------------------\n\nTITLE: Defining a simple API endpoint with Midway Hooks\nDESCRIPTION: This code defines a simple GET endpoint using Midway Hooks. It imports the Api and Get decorators from '@midwayjs/hooks' and exports a default function that returns 'Hello World!'. This function is decorated with Api and Get, which configure it as an HTTP endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Api, Get } from '@midwayjs/hooks';\n\nexport default Api(Get('/hello'), async () => {\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Binding a Controller Method to a Route\nDESCRIPTION: This snippet demonstrates how to manually bind a controller method to a route using `app.generateController`. This is useful when a controller isn't decorated with `@controller` and its methods need to be exposed as routes. The `app.generateController` method takes a string in the format `ClassName.methodName`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/controller.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app/router.ts\n\nmodule.exports = function (app) {\n  app.get('/api/index', app.generateController('baseApi.index'));\n};\n```\n\n----------------------------------------\n\nTITLE: Query Records with OR Condition\nDESCRIPTION: Demonstrates how to query records with an OR condition using Sequelize's Op object.  It retrieves all records from the Photo table where the name is either '23' or '34'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Photo } from '../entity/Photo';\nimport { Op } from 'sequelize';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  async home() {\n    let result = await Photo.findAll({\n      where: {\n        [Op.or]: [{ name: '23' }, { name: '34' }], // SELECT * FROM photo WHERE name = \"23\" OR name = \"34\";\n      },\n    });\n    console.log(result);\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Configs Object - TypeScript\nDESCRIPTION: This snippet demonstrates how to load configuration files as objects using the `importConfigs` property in the `@Configuration` decorator. Each object's key represents the environment, and the value represents the corresponding configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport { join } from 'path';\n\nimport * as DefaultConfig from './config/config.default';\nimport * as LocalConfig from './config/config.local';\n\n@Configuration({\n  importConfigs: [\n    {\n      default: DefaultConfig,\n      local: LocalConfig,\n    },\n  ],\n})\nexport class ContainerLifeCycle {}\n\n```\n\n----------------------------------------\n\nTITLE: Add generate script to package.json\nDESCRIPTION: This JSON snippet demonstrates how to add a `generate` script to the `package.json` file. This script uses the `tsproto` command from `@midwayjs/grpc-helper` to generate TypeScript interface files from Protocol Buffers files located in the `proto` directory and outputs them to the `src/domain` directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n     \"generate\": \"tsproto --path proto --output src/domain\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix Tablestore Ref\nDESCRIPTION: Corrects the tablestore reference within the project. This likely resolves an issue where the tablestore library was not correctly referenced or imported, leading to runtime errors or unexpected behavior. The fix ensures that the tablestore library is properly integrated into the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\ntablestore ref ([#1616](https://github.com/midwayjs/midway/issues/1616))\n```\n\n----------------------------------------\n\nTITLE: Captcha Configuration Example 1 (TypeScript)\nDESCRIPTION: This TypeScript example shows how to configure the @midwayjs/captcha component to generate an image captcha with 5 letters, a width of 200 pixels, a height of 50 pixels, and 3 noise lines. It demonstrates modifying the `default` configuration and the specific `image` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/captcha.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const captcha: CaptchaOptions = {\n  default: {\n    size: 5,\n    noise: 3,\n    width: 200,\n    height: 50\n  },\n  image: {\n    type: 'letter'\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const captcha: CaptchaOptions = {\n  image: {\n    size: 5,\n    noise: 3,\n    width: 200,\n    height: 50\n    type: 'letter'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Transports in MidwayJS Logger\nDESCRIPTION: This example demonstrates how to configure the default transports (`console`, `file`, `error`) in the MidwayJS logger configuration.  You can modify the behavior of each transport by providing specific configurations.  Requires `@midwayjs/core`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         console: {\n           // console transport configuration\n         },\n         file: {\n           // file transport configuration\n         },\n         error: {\n           // error transport configuration\n         },\n       }\n     },\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Applying the Class Decorator to a Class\nDESCRIPTION: This code snippet shows how to apply the custom `@Model` decorator to a class, such as `UserModel`. When the application starts, the logic defined in the `configuration.ts` for the `@Model` decorator will be executed for this class. It imports the `Model` decorator from the defined decorator file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from '../decorator/model.decorator';\n\n// The role of Model is that our own logic can be executed (saved metadata)\n@Model()\nexport class UserModel {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WebSocket Dependency in package.json\nDESCRIPTION: Declares the @midwayjs/ws package as a dependency in the project's package.json file. This ensures that the WebSocket module is included when installing project dependencies.  The version is set to ^3.0.0, meaning it will use compatible versions greater than or equal to 3.0.0.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/ws\": \"^3.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Entry Point Modification\nDESCRIPTION: This JavaScript code snippet modifies the `bootstrap.js` file to explicitly import user code as a component and disable directory scanning for dependency injection. Requires @midwayjs/bootstrap.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n// 显式以组件方式引入用户代码\nBootstrap.configure({\n  // 这里引用的是编译后的入口，本地开发不走这个文件\n  imports: require('./dist/index'),\n  // 禁用依赖注入的目录扫描\n  moduleDetector: false,\n}).run()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider in f.yml for Alibaba Cloud\nDESCRIPTION: This YAML snippet configures the provider to be 'aliyun' within the `f.yml` file. This file is essential for specifying the cloud provider for deployment using the Midway Serverless CLI. It ensures that the deployment process is directed towards Alibaba Cloud's Function Compute service.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_to_aliyun.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: midway-faas-examples\n\nprovider:\n  name: aliyun\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Configs Directory - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the `importConfigs` property in the `@Configuration` decorator to load all `config.*.ts` files within a specified directory. The framework automatically selects the appropriate configuration file based on the current environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport { join } from 'path';\n\n@Configuration({\n  importConfigs: [join(__dirname, './config/')],\n})\nexport class ContainerLifeCycle {}\n\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Example (TypeScript)\nDESCRIPTION: This code highlights the relationship between `@Provide` and `@Inject` decorators for dependency injection in MidwayJS. The `UserService` is decorated with `@Provide` to make it injectable, and the `APIController` uses `@Inject` to receive an instance of `UserService`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// service\n@Provide()\nexport class UserService {\n  //...\n}\n\n// controller\n@Provide()\n@Controller('/api/user')\nexport class APIController {\n  @Inject()\n  userService: UserService; // <------ 这里的类型是 Class，即会注入一个该类型的实例\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Info Component Dependency - npm\nDESCRIPTION: This command installs the @midwayjs/info component as a dependency using npm. The --save flag adds the dependency to the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/info.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/info@3 --save\n```\n\n----------------------------------------\n\nTITLE: Loading Custom GraphQL Middleware (TypeScript)\nDESCRIPTION: This code shows how to load the custom GraphQL middleware in the `configuration.ts` file. It uses `app.generateMiddleware` to register the middleware with the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/graphql.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { ILifeCycle, IMidwayContainer } from '@midwayjs/core';\nimport { IMidwayKoaApplication } from '@midwayjs/koa';\n\n@Configuration({\n  importConfigs: ['./config'],\n})\nexport class ContainerConfiguration implements ILifeCycle {\n  @App()\n  app: IMidwayKoaApplication;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    this.app.use(\n      // Use extend middleware\n      await this.app.generateMiddleware('extend:GraphQLKoaMiddleware')\n    );\n  }\n\n  async onStop(): Promise<void> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Transport: Accessing Context Data\nDESCRIPTION: This custom transport example demonstrates how to potentially access context data (`info.ctx`) within the `log` method. However, the documentation notes that `info.ctx` is empty. This is for demoing how you'd check for a context object and branch logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomTransport extends EmptyTransport {\n  log(info, callback) {\n    if (info.ctx) {\n      // ...\n    } else {\n      // ...\n    }\n    callback();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HttpService for API Requests\nDESCRIPTION: This code demonstrates how to inject and use the `HttpService` in a Midway.js service to make an HTTP GET request. The `HttpService` is a wrapper around Axios, providing the same API.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/axios.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpService } from '@midwayjs/axios';\n\n@Provide()\nexport class UserService {\n  @Inject()\n  httpService: HttpService;\n\n  async invoke() {\n    const url = 'http://www.weather.com.cn/data/cityinfo/101010100.html';\n    const result = await this.httpService.get(url);\n    // TODO result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Route Parameter from API Operation in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to access route parameters using `ctx.params` within a MidwayJS controller.  It requires injecting the `Context` object. The `params` object will contain key-value pairs of route parameters. Dependencies: `@midwayjs/core`, `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/user.ts\n// GET /user/1\nimport { Controller, Get, Inject } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/user')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/:uid')\n  async getUser(): Promise<User> {\n    const params = this.ctx.params;\n    // {\n    // uid: '1',\n    //}\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Client-side gRPC Metadata Handling with Midwayjs\nDESCRIPTION: This code snippet shows how to send metadata from the client-side to the server using the options parameter of the gRPC method. Metadata is added to a `Metadata` object and passed to the `sendMessage` method. It requires the gRPC service client (service).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Metadata } from '@midwayjs/grpc';\n\nconst meta = new Metadata();\nmeta.add('key', 'value');\n\nconst result = await service.sayHello({\n  metadata: meta\n}).sendMessage({\n  name: 'harry'\n});\n\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in API Endpoint\nDESCRIPTION: This example demonstrates how to define an API endpoint that accepts path parameters using Midway Hooks.  It uses `Params<T>` to specify the expected path parameters and extracts them from the Koa context's `params` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Params,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get('/article/:id'),\n  Params<{ id: string }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      article: ctx.params.id,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis in MidwayJS\nDESCRIPTION: This JavaScript code configures the Redis client in a MidwayJS application. It specifies the port, host, password, and database. The host is set to \"redis\" to match the service name in the docker-compose.yml file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n   redis: {\n     client: {\n       port: 6379, //The port of the redis container\n       host: \"redis\", // This is consistent with the redis service name in the docker-compose.yml file\n       password: \"\", //There is no password by default. Please change it to the password configured for the redis container.\n       db: 0,\n     },\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing API Gateway in YAML\nDESCRIPTION: This snippet demonstrates how to reuse an existing API Gateway service ID in a `serverless.yml` file. By specifying the `serviceId` under the `provider` section, subsequent deployments will use the same API Gateway instance. This avoids the creation of multiple gateway instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_tencent_faq.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice: fc-qinyue-test\n\nprovider:\n  name: tencent\n  runtime: nodejs10\n  serviceId: service-xxxxxx # <---- 把 id 填在这里复用\n```\n\n----------------------------------------\n\nTITLE: Run with Environment Variables and -R Parameter\nDESCRIPTION: This command demonstrates how to start a Node.js application with environment variables for service name, authentication, and endpoint configuration, while also using the `-r` parameter to require the `opentelemetry-arms` module at startup for automatic instrumentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$SERVICE_NAME=nodejs-opentelemetry-express AUTHENTICATION=**** ENDPOINT=grpc://**** node -r opentelemetry-arms bootstrap.js\n```\n\n----------------------------------------\n\nTITLE: Configuring alias for default index.html\nDESCRIPTION: This TypeScript code snippet illustrates how to configure an alias for the default `index.html` file within the `staticFile` configuration in a Midway application. It maps the root path `/` to `/index.html`, allowing users to access the index page directly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/static_file.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   // ...\n   staticFile: {\n     dirs: {\n       default: {\n         prefix: '/',\n         alias: {\n           '/': '/index.html',\n         },\n       },\n     },\n     // ...\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring egg-scripts start command\nDESCRIPTION: This snippet shows how to modify the `package.json` file to include the `--require` flag when starting the application using `egg-scripts`. This ensures that the `otel.js` file, which initializes the OpenTelemetry SDK, is loaded before the application starts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    \"start\": \"egg-scripts start --daemon --title=**** --framework=@midwayjs/web --require=./otel.js\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Manual File Upload via FormData\nDESCRIPTION: This snippet demonstrates how to manually upload files using FormData. It retrieves the selected file from an input element, appends it to a FormData object, and then sends the FormData object to the upload API using the `fetch` API.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/upload.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst input =\n  document.getElementById('file');\n\nconst formdata = new FormData();\nformdata.append('file', input.files[0]);\n\nfetch('/api/upload', {\n  method: 'POST',\n  body: formdata,\n})\n  .then((res) => res.json())\n  .then((res) => console.log(res));\n```\n\n----------------------------------------\n\nTITLE: Using MidwayLoggerService to Get a Logger Instance\nDESCRIPTION: This snippet demonstrates how to use the `MidwayLoggerService` to obtain a logger instance. It involves injecting the service into a controller and using it within a route handler to get a logger object based on its name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayLoggerService, Inject, Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  loggerService: MidwayLoggerService;\n\n  @Get('/')\n  async home() {\n    // this.loggerService.getLogger('logger');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying bootstrap.js for Build Directory\nDESCRIPTION: Modifies the `bootstrap.js` file to configure the base directory for the application. This is required when the build directory is changed, ensuring the application correctly locates its files during startup. The `Bootstrap.configure` method is used to set the `baseDir` option.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/change_start_dir.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// bootstrap.js\n\nconst { join } = require('path');\nconst { Bootstrap } = require('@midwayjs/bootstrap');\n\n//...\n\n// 需要用 configure 方法配置 baseDir\nBootstrap.configure({\n  baseDir: join(__dirname, 'build'),\n})\n  .load(web)\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Installing nvs on Linux/macOS\nDESCRIPTION: This snippet demonstrates how to install nvs on Linux or macOS by cloning the nvs repository and sourcing the nvs script. It sets the NVS_HOME environment variable, clones the nvs repository to the specified directory, and then installs nvs by sourcing the nvs.sh script.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/how_to_install_nodejs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export NVS_HOME=\"$HOME/.nvs\"\n$ git clone https://github.com/jasongin/nvs --depth=1 \"$NVS_HOME\"\n$ . \"$NVS_HOME/nvs.sh\" install\n```\n\n----------------------------------------\n\nTITLE: Alibaba API Gateway Event Example (application/x-www-form-urlencoded)\nDESCRIPTION: This JSON presents the event structure received when using Alibaba Cloud API Gateway with a content type of `application/x-www-form-urlencoded`.  The `isBase64Encoded` is false, meaning the body is not base64 encoded. The `body` contains the URL-encoded data as a string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"{\\\"c\\\":\\\" B \\\"}\",\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"cache-control\": \"no-cache\",\n    \"user-agent\": \"PostmanRuntime/7.24.1\",\n    \"postman-token\": \"feb51b11-9103-463a-92ff-73076d37b683\",\n    \"accept-encoding\": \"gzip, deflate, br\",\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  },\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": false\n  \"path\": \"/api/321 \",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using RedisServiceFactory to Get Instances\nDESCRIPTION: This TypeScript snippet shows how to use the RedisServiceFactory to obtain different Redis instances based on their configuration names. This allows you to interact with multiple Redis databases within the same application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/redis.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RedisServiceFactory } from '@midwayjs/redis';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  redisServiceFactory: RedisServiceFactory;\n\n  async save() {\n    const redis1 = this.redisServiceFactory.get('instance1');\n    const redis2 = this.redisServiceFactory.get('instance3');\n\n    //...\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IoC Container API Changes (typescript)\nDESCRIPTION: This snippet showcases the removal of certain IoC container APIs in Midway v3. These methods have been replaced by corresponding framework built-in services. The code illustrates how to access the environment service using the new `get` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst environmentService = app.getApplicationContext().get(MidwayEnvironmentService)\nconst env = environmentService.getCurrentEnvironment();\n```\n\n----------------------------------------\n\nTITLE: Adding MQTT Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the @midwayjs/mqtt component as a dependency in the `package.json` file. After adding the dependency, you need to reinstall the packages to make it available in your project.  This ensures that the MQTT component is available for use in your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mqtt.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/mqtt\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Application and Context from Non-Web MidwayJS Modules\nDESCRIPTION: This code snippet shows how to import Application and Context objects from non-Web MidwayJS modules, like @midwayjs/socketio, @midwayjs/grpc, and @midwayjs/rabbitmq. The imports are consistent across different types of applications, providing a unified interface.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context } from '@midwayjs/socketio';\nimport { Application, Context } from '@midwayjs/grpc';\nimport { Application, Context } from '@midwayjs/rabbitmq';\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in Midway.js\nDESCRIPTION: This feature adds a guard to the Midway.js framework. Guards are used to protect routes and ensure that only authorized users can access them. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Mongoose and Typegoose Dependencies for MongoDB 4.4.x (Recommended)\nDESCRIPTION: This JSON snippet shows the recommended dependencies for using Mongoose and Typegoose with MongoDB Server 4.4.x. It includes the necessary versions of `mongoose` and `@typegoose/typegoose`. These versions do not require additional definition packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"dependencies\": {\n    \"mongoose\": \"^5.13.3\",\n    \"@typegoose/typegoose\": \"^8.0.0\",   // 使用 typegoose 需要安装此依赖\n  },\n```\n\n----------------------------------------\n\nTITLE: Disable Case Sensitivity in Git (Global)\nDESCRIPTION: This command configures Git to be case-sensitive globally for all projects. This ensures that Git recognizes changes when filenames are modified with different casing. This prevents issues where case-sensitive file systems on servers fail to recognize the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/git_problem.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global --add core.ignorecase false\n```\n\n----------------------------------------\n\nTITLE: Running Tests using Midway CLI and npm\nDESCRIPTION: This bash snippet shows how to execute tests using the Midway CLI via npm. The CLI facilitates running test suites and provides feedback on test status.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/testing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n➜  my_midway_app npm run test\n\n> my_midway_project@1.0.0 test /Users/harry/project/application/my_midway_app\n> midway-bin test\n\nTesting all *.test.ts...\n PASS  test/controller/home.controller.test.ts\n PASS  test/controller/api.controller.test.ts\n\nTest Suites: 2 passed, 2 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        3.26 s\nRan all test suites matching /\\/test\\/[^.]*\\.test\\.ts$/i.\n```\n\n----------------------------------------\n\nTITLE: Enable Upload Component in Configuration (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to enable the `@midwayjs/upload` component within the `configuration.ts` file of a Midway application. It imports the upload module and adds it to the `imports` array within the `createConfiguration` function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/upload.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfiguration, hooks } from '@midwayjs/hooks';\nimport * as Koa from '@midwayjs/koa';\n+ import * as upload from '@midwayjs/upload';\n\n/**\n * setup midway server\n */\nexport default createConfiguration({\n  imports: [\n    Koa,\n    hooks(),\n+   upload\n  ],\n  importConfigs: [{ default: { keys: 'session_keys' } }]\n});\n```\n\n----------------------------------------\n\nTITLE: Directory Structure including interface.ts\nDESCRIPTION: This code snippet illustrates the directory structure of a MidwayJS application that includes `interface.ts`. It demonstrates the location of the `interface.ts` file alongside the controller files (`user.ts` and `home.ts`) within the `src` directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   ├── controller\n│   │   ├── user.ts\n│   │   └── home.ts\n│   └── interface.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Enabling Component in Configuration\nDESCRIPTION: This snippet demonstrates how to enable a component in your MidwayJS application's `src/configuration.ts` file. The `@midwayjs/validate` component is imported and added to the `imports` array in the `@Configuration` decorator. This makes the component's functionality available throughout the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/midway_component.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts of application or function\nimport { Configuration } from '@midwayjs/core';\nimport * as validate from '@midwayjs/validate';\n\n@Configuration({\n  imports: [validate]\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Function Result (入参映射) - Alibaba Cloud API Gateway\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed within the serverless function when '入参映射' is enabled on Alibaba Cloud API Gateway. The body is a string containing the decoded base64 data since there's no content-type header.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // '{\"c\":\"b\"}'   => string\n```\n\n----------------------------------------\n\nTITLE: SQL CREATE TABLE Statement for Tag table\nDESCRIPTION: This SQL statement defines the schema for the `tag` table, which stores tag metadata such as ID, group, name, description, creation timestamp, and update timestamp.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tags.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `tag` (\n    `id` BIGINT unsigned NOT NULL AUTO_INCREMENT,\n    `group` varchar(32) NULL,\n    `name` varchar(32) NULL,\n    `descri` varchar(128) NULL,\n    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    `update_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP  ON UPDATE CURRENT_TIMESTAMP NOT NULL,\n    PRIMARY KEY (id)\n)\n```\n\n----------------------------------------\n\nTITLE: MongoDB Dependency Installation (Mongoose v7)\nDESCRIPTION: This JSON snippet shows the dependencies required to support MongoDB Server 6.x, including mongoose v7 and @typegoose/typegoose v10. It highlights the use of Typegoose for defining Mongoose models using TypeScript classes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n  \"dependencies\": {\n    \"mongoose\": \"^7.0.0\",\n    \"@typegoose/typegoose\": \"^10.0.0\",\t\t// This dependency needs to be installed using typegoose\n  }\n```\n\n----------------------------------------\n\nTITLE: Getting Entire Session in @midwayjs/koa\nDESCRIPTION: This code shows how to use the `@Session(ALL)` decorator to get the entire session object in a Midway.js Koa controller. It updates a 'visits' counter directly on the session object. Dependencies: @midwayjs/decorator, @midwayjs/koa.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/controller/home.ts\n\nimport { Controller, Get, Provide, Session, ALL } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  async home(@Session(ALL) session) {\n    session.visits = session.visits ? session.visits + 1 : 1;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adjusting Specific Logger Levels (config.default.ts)\nDESCRIPTION: This code shows how to adjust the log levels for specific loggers, such as `coreLogger` and `appLogger`. The `clients` section of the `midwayLogger` configuration is used to define individual logger settings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    clients: {\n      coreLogger: {\n        level: 'warn',\n        // ...\n      },\n      appLogger: {\n        level: 'warn',\n        // ...\n      }\n    }\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging - TypeScript\nDESCRIPTION: This snippet shows how to configure logging for TypeORM in a MidwayJS application.  It demonstrates how to configure the default `typeormLogger` client and how to disable logging for specific data sources in the `typeorm` configuration. You can disable logging globally or for specific data sources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     clients: {\n       typeormLogger: {\n         fileLogName: 'midway-typeorm.log',\n         enableError: false,\n         level: 'info',\n       },\n     },\n   }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  typeorm: {\n    default: {\n      // All data sources closed\n      logging: false,\n    },\n    dataSource: {\n      default: {\n        // Single data source closed\n        logging: false,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mongoose and Typegoose Dependencies for MongoDB 6.x\nDESCRIPTION: This JSON snippet shows the dependencies required for using Mongoose and Typegoose with MongoDB Server 6.x. It includes the necessary versions of `mongoose` and `@typegoose/typegoose`. Make sure that the versions match for compatibility purposes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"dependencies\": {\n    \"mongoose\": \"^7.0.0\",\n    \"@typegoose/typegoose\": \"^10.0.0\",\t\t// 使用 typegoose 需要安装此依赖\n  },\n```\n\n----------------------------------------\n\nTITLE: Fixing Express method error\nDESCRIPTION: This commit fixes an issue where the `is express method` check was returning an incorrect result. Resolves issue #1919. The commit hash is 7ca9359c8421f77f1f410c56730cb8babaf65a8c.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Import and Configure Prometheus Socket.IO Module in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to import and configure the @midwayjs/prometheus-socket-io module within a MidwayJS application. It showcases how to import both prometheus and prometheusSocketIo modules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport { join } from 'path';\nimport * as prometheus from '@midwayjs/prometheus';\nimport * as prometheusSocketIo from '@midwayjs/prometheus-socket-io';\n\n@Configuration({\n  imports: [prometheus, prometheusSocketIo],\n  importConfigs: [join(__dirname, './config')],\n  conflictCheck: true,\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Using usePlugin to Access Egg Sequelize Plugin in TypeScript\nDESCRIPTION: This snippet demonstrates accessing the `sequelize` plugin using `usePlugin` and then logging the plugin instance. It requires the `egg-sequelize` plugin to be installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_builtin.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePlugin } from '@midwayjs/hooks';\n\nexport default async function getUserById(empId: number) {\n  const sequelize = usePlugin('sequelize');\n  console.log(sequelize);\n}\n```\n\n----------------------------------------\n\nTITLE: Captcha Configuration Example 2 (TypeScript)\nDESCRIPTION: This TypeScript example shows how to configure the @midwayjs/captcha component to generate a formula captcha with a width of 100 pixels, a height of 60 pixels, and 2 noise lines.  It illustrates modifying the `default` configuration and the specific `formula` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/captcha.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const captcha: CaptchaOptions = {\n  default: {\n    noise: 2,\n    width: 100,\n    height: 60\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const captcha: CaptchaOptions = {\n  formula: {\n    noise: 2,\n    width: 100,\n    height: 60\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: This command builds a Docker image named 'helloworld' using the Dockerfile in the current directory. The '-t' flag is used to tag the image with a name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/deployment.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t helloworld .\n```\n\n----------------------------------------\n\nTITLE: Installing TypeORM Adapter Dependencies\nDESCRIPTION: This bash command installs the necessary dependencies for using the TypeORM adapter with Casbin.  It includes the `@midwayjs/casbin-typeorm-adapter` and `@midwayjs/typeorm` packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/casbin-typeorm-adapter @midwayjs/typeorm --save\n```\n\n----------------------------------------\n\nTITLE: Docker Compose YAML - Redis\nDESCRIPTION: This docker-compose.yml file defines a setup where the midway project requires using redis.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Implementing Route Redirection with @Redirect\nDESCRIPTION: This code demonstrates how to implement route redirection using the `@Redirect` decorator.  The `@Redirect('/login_check')` decorator on the `/login` route will redirect the user to the `/login_check` route with a default status code of 302.  The `@Redirect('/login_check', 302)` decorator on `/login_another` does the same but explicitly sets the status code to 302.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Provide, Redirect } from '@midwayjs/decorator';\n\n@Provide()\n@Controller('/')\nexport class LoginController {\n  @Get('/login_check')\n  async check() {\n    // TODO\n  }\n\n  @Get('/login')\n  @Redirect('/login_check')\n  async login() {\n    // TODO\n  }\n\n  @Get('/login_another')\n  @Redirect('/login_check', 302)\n  async loginAnother() {\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing koa-session\nDESCRIPTION: This command installs the `koa-session` middleware, which is required for session management in @midwayjs/koa applications. The `--save` flag adds the package to the project's dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/session.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install koa-session --save\n```\n\n----------------------------------------\n\nTITLE: Describe a request with summary and description\nDESCRIPTION: This code snippet demonstrates how to use the `CreateApiDoc` decorator to add a summary and description to an API endpoint using Swagger. It describes the purpose of the `getUser` endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateApiDoc } from '@midwayjs/swagger'\n\n@CreateApiDoc()\n  .summary('get user')\n  .description('This is a open api for get user')\n  .build()\n\n@Get('/:userId')\nasync getUser(@Param() userId: number, @Query() name?: string) {\n  return {\n    name: 'harry',\n    age: 18\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: MNS Event Structure in JSON\nDESCRIPTION: This JSON snippet shows the structure of an MNS event that is passed to the function triggered by an MNS message.  The event includes information about the message, topic, subscriber, and other metadata. The `FC.MNSEvent` type in the Midway.js FAAS framework defines this structure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_mns.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Context\": \"user custom info\",\n  \"TopicOwner\": \"1186202104331798\",\n  \"Message\": \"hello topic\",\n  \"Subscriber\": \"1186202104331798\",\n  \"PublishTime\": 1550216302888,\n  \"SubscriptionName\": \"test-fc-subscibe\",\n  \"MessageMD5\": \"BA4BA9B48AC81F0F9C66F6C909C39DBB\",\n  \"TopicName\": \"test-topic\",\n  \"MessageId\": \"2F5B3C281B283D4EAC694B7425288675\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Default Injections in MidwayJS (TypeScript)\nDESCRIPTION: Demonstrates default properties injected by the MidwayJS framework using the `@inject` decorator. These properties include the application root directory (appDir), the base directory (baseDir), the Koa context (ctx), and the ContextLogger (logger).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/framework.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@inject()\nappDir; // 当前项目的根目录\n\n@inject()\nbaseDir;  // 当前项目基础目录 src 或者 dist，绝对路径\n\n@inject()\nctx; // 请求作用域，koa ctx\n\n@inject()\nlogger; // 请求作用域，ContextLogger\n```\n\n----------------------------------------\n\nTITLE: Define RedisErrorListener and DataSyncListener classes\nDESCRIPTION: This code snippet shows the definition of two classes, RedisErrorListener and DataSyncListener, using the @Provide and @Scope decorators in MidwayJS. These classes are intended to be initialized during the application startup process and are marked as Singletons.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/auto_run.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class RedisErrorListener {\n  // ...\n}\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class DataSyncListener {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Local Middleware\nDESCRIPTION: This code creates a middleware for the local authentication strategy by extending `PassportMiddleware`. It also sets up `AuthenticateOptions` like `failureRedirect` and `presetProperty`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// local-middleware.ts\n\nimport { Inject, Provide } from '@midwayjs/decorator';\nimport { PassportMiddleware } from '@midwayjs/passport';\nimport { Context } from '@midwayjs/express';\n\n@Provide('local') // 此处可以使用一个简短的identifier\nexport class LocalPassportMiddleware extends PassportMiddleware(LocalStrategy) {\n  // 设置 AuthenticateOptions\n  getAuthenticateOptions(): Promise<passport.AuthenticateOptions> | passport.AuthenticateOptions {\n    return {\n      failureRedirect: '/login',\n      presetProperty: 'user',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Report Middleware in Midway Web\nDESCRIPTION: Defines a custom middleware in Midway.js Web to access and log the request body. It utilizes `@midwayjs/decorator` for dependency injection and middleware definition, and `egg` for context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/body-parser.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/report.ts\n\nimport { Provide } from '@midwayjs/decorator';\nimport { IWebMiddleware, IMidwayWebNext } from '@midwayjs/web';\nimport { Context } from 'egg';\n\n@Provide()\nexport class ReportMiddleware implements IWebMiddleware {\n  resolve() {\n    return async (ctx: Context, next: IMidwayWebNext) => {\n      // 这里获取了 body 数据\n      console.log(ctx.request.body);\n      await next();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Captcha Service in a Controller (TypeScript)\nDESCRIPTION: This TypeScript code shows how to use the `CaptchaService` in a MidwayJS controller to generate and validate captchas. It includes examples for image, formula, SMS, and email captchas, as well as a generic text captcha. It also provides a mechanism to check if a given answer matches the generated captcha.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/captcha.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Inject } from '@midwayjs/core';\nimport { CaptchaService } from '@midwayjs/captcha';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx;\n\n  @Inject()\n  captchaService: CaptchaService;\n\n  // 示例：获取图像验证码\n  @Get('/get-image-captcha')\n  async getImageCaptcha() {\n    const { id, imageBase64 } = await this.captchaService.image({ width: 120, height: 40 });\n    return {\n      id,          // 验证码 id\n      imageBase64, // 验证码 SVG 图片的 base64 数据，可以直接放入前端的 img 标签内\n    }\n  }\n\n  // 示例：获取计算表达式验证码\n  @Get('/get-formula-captcha')\n  async getFormulaCaptcha() {\n    const { id, imageBase64 } = await this.captchaService.formula({ noise: 1 });\n    return {\n      id,          // 验证码 id\n      imageBase64, // 验证码 SVG 图片的 base64 数据，可以直接放入前端的 img 标签内\n    }\n  }\n\n  // 验证验证码是否正确\n  @Post('/check-captcha')\n  async getCaptcha() {\n    const { id, answer } = this.ctx.request.body;\n    const passed: boolean = await this.captchaService.check(id, answer);\n    if (passed) {\n      return 'passed';\n    }\n    return 'error';\n  }\n\n  // 示例：短信验证码\n  @Post('/sms-code')\n  async sendSMSCode() {\n    // 验证验证码是否正确\n    const { id, text: code } = await this.captchaService.text({ size: 4 });\n    await sendSMS(18888888888, code);\n    return { id }\n  }\n\n  // 示例：邮件验证码\n  @Post('/email-code')\n  async sendEmailCode() {\n    // 验证验证码是否正确\n    const { id, text: code } = await this.captchaService.text({ type: 'number'});\n    await sendEmail('admin@example.com', code);\n    return { id }\n  }\n\n   // 示例：将任意文本内容塞入验证码中\n  @Get('/test-text')\n  async testText() {\n    // 存入内容，获取验证码id\n    const id: string = await this.captchaService.set('123abc');\n    // 根据验证码id，校验内容是否正确\n    const passed: boolean = await this.captchaService.check(id, '123abc');\n    return {\n      passed: passed === true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring i18n Component\nDESCRIPTION: This code snippet demonstrates how to import the i18n module and integrate it into a Midway.js application configuration. It imports both `koa` and `i18n` modules and adds `i18n` into the `imports` array of the `Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as koa from '@midwayjs/koa';\nimport * as i18n from '@midwayjs/i18n';\n\n@Configuratino({\n  imports: [\n    koa,\n    i18n\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Server Configuration\nDESCRIPTION: This TypeScript snippet shows the server side socket.io configuration, setting the port and path of the socketFramework instance. The `@midwayjs/socketio` package is required.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Framework } = require('@midwayjs/socketio');\nconst io = require('socket.io-client');\n\n// server\nconst socketFramework = new Framework().configure({\n  port: 7001, // 这里的端口\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Framework } = require('@midwayjs/socketio');\nconst io = require('socket.io-client');\n\n// server\nconst socketFramework = new Framework().configure({\n  port: 7001,\n  path: '/testPath', // 这里是服务端 path\n});\n```\n\n----------------------------------------\n\nTITLE: Directory structure of a basic Midway.js project\nDESCRIPTION: This shows the directory structure of a minimal Midway.js project. It includes the `src` directory for source code, `test` for tests, `package.json` for dependencies and scripts, and `tsconfig.json` for TypeScript configuration. It shows basic structure after the initialization command runs.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quickstart.md#_snippet_1\n\nLANGUAGE: null\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src                            ## midway project source code\n│   └── controller                 ## Web Controller Directory\n│       └── home.controller.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Consul Module in MidwayJS\nDESCRIPTION: This code imports the Consul module into a MidwayJS application and configures it using a configuration file. The `@Configuration` decorator registers the `ContainerConfiguration` class as a configuration class, importing the Consul module and configuration settings from the `config` directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/consul.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as consul from '@midwayjs/consul';\n\n@Configuration({\n  imports: [consul],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class ContainerConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Importing Tags Module in MidwayJS Configuration\nDESCRIPTION: This code snippet demonstrates how to import the `@midwayjs/tags` module into your MidwayJS application's configuration.  This enables the tag component to be used throughout your application. The `tags` import is added to the `imports` array within the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as tags from '@midwayjs/tags';\n@Configuration({\n   imports: [\n     //...\n     tags\n   ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Code and Files/Fields\nDESCRIPTION: This commit implements a custom error code system and adds support for @Files and @Fields decorators within the MidwayJS framework. These features allow for more specific error handling and easier access to file and field data in requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\ncustom error code & add @Files/@Fields ([#1438](https://github.com/midwayjs/midway/issues/1438)) ([b0032af](https://github.com/midwayjs/midway/commit/b0032afd2fa9ea0416fe69f4bd0c1a58bea5314e))\n```\n\n----------------------------------------\n\nTITLE: Serving static files with custom route in Express\nDESCRIPTION: This snippet demonstrates how to serve static files from a directory named 'public' using a custom route '/static' in an Express application. This allows accessing files in the 'public' directory through the '/static' URL prefix.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/static_file.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.use('/static', express.static(path.join(__dirname, 'public')));\n```\n\n----------------------------------------\n\nTITLE: Testing WebSocket App (events.once)\nDESCRIPTION: This code snippet demonstrates testing a WebSocket app using `events.once`. A client is created and connects to the server.  A message is sent, and the response is awaited using `events.once` before asserting the result. Then, the client and app are closed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ws.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sleep } from '@midwayjs/decorator';\nimport { once } from 'events';\nimport { createApp, closeApp, createWebSocketClient } from '@midwayjs/mock';\n\n// ... 省略 describe\n\nit('should test create websocket app', async () => {\n  // 创建一个服务\n  const app = await createApp<Framework>(process.cwd(), { port: 3000 });\n\n  // 创建一个客户端\n  const client = await createWebSocketClient(`ws://localhost:3000`);\n\n  // 发送事件\n  client.send(1);\n\n  // 用事件的 promise 写法监听\n  let gotEvent = once(client, 'message');\n  // 等待返回\n  let [data] = await gotEvent;\n\n  // 判断结果\n  expect(JSON.parse(data)).toEqual({\n    name: 'harry',\n    result: 6,\n  });\n\n  await sleep(1000);\n\n  // 关闭客户端\n  await client.close();\n\n  // 关闭服务端\n  await closeApp(app);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing TableStore Dependency using npm\nDESCRIPTION: This command installs the @midwayjs/tablestore package as a dependency in your Midway.js project.  This allows your application to interact with Alibaba Cloud TableStore.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tablestore.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/tablestore@3 --save\n```\n\n----------------------------------------\n\nTITLE: Aliyun API Gateway Passthrough Result (application/json)\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Alibaba Cloud API Gateway with parameter passthrough and a `content-type` of `application/json`.  The request body is automatically parsed into a JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\"b\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Using MidwayMiddlewareService to Compose Middleware\nDESCRIPTION: This snippet showcases the usage of the `MidwayMiddlewareService` for composing middleware. It involves injecting the service into a controller. The compose method allows combining multiple middleware arrays into a single middleware function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayMiddlewareService, Inject, Controller, Get } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  middlewareService: MidwayMiddlewareService;\n\n  @Get('/')\n  async home() {\n    // this.middlewareService.com pose(/**omitted**/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add HTTP Proxy Component in MidwayJS\nDESCRIPTION: This commit adds a new HTTP proxy component to the MidwayJS framework.  The component allows applications to proxy HTTP requests to other servers, enabling functionalities like load balancing, request modification, and security enhancements.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/http-proxy/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nadd http proxy component ([#1843](https://github.com/midwayjs/midway/issues/1843)) ([5281e31](https://github.com/midwayjs/midway/commit/5281e316220591b84a0200c6cdf1572680f6e2f6))\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Fields with @ApiExtension in Typescript\nDESCRIPTION: This snippet illustrates how to add extension fields (prefixed with `x-`) to the Swagger documentation using the `@ApiExtension` decorator in MidwayJS. This allows adding custom metadata to the API schema.  It requires the `@midwayjs/swagger` package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiExtension('x-hello', { hello: 'world' })\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Static File Prefix\nDESCRIPTION: This code snippet demonstrates how to override the default prefix for static file serving in a Midway.js application. It shows how to modify the `dirs.default.prefix` configuration to change the URL path used to access static files served from the default directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// {app_root}/src/config/config.default.ts\nexport const staticFile = {\n  dirs: {\n    default: {\n      prefix: '/',\n    },\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters in API Endpoint\nDESCRIPTION: This snippet shows how to access query parameters from the URL in a Midway Hooks API.  It uses `Query<T>` to define the expected query parameters and extracts their values from the Koa context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Query,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get(),\n  Query<{ \n    page: string;\n    limit: string;\n  }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      page: ctx.query.page,\n      limit: ctx.query.limit,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Aliyun Credentials via Environment Variables\nDESCRIPTION: This bash script sets the necessary environment variables (REGION, ACCOUNT_ID, ACCESS_KEY_ID, ACCESS_KEY_SECRET) required for deploying to Alibaba Cloud.  These variables are used by the underlying funcraft tool for authentication and region selection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_aliyun_faq.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport REGION=cn-beijing\nexport ACCOUNT_ID=xxx\nexport ACCESS_KEY_ID=xxx\nexport ACCESS_KEY_SECRET=xxx\n```\n\n----------------------------------------\n\nTITLE: Frontend API Call with Midway Hooks\nDESCRIPTION: This snippet illustrates how to call a backend API defined using Midway Hooks from the frontend. It imports the `say` function (assumed to be generated from the backend API definition) and calls it with the argument 'Midway'. The response is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/intro.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport say from './api';\n\nconst response = await say('Midway');\nconsole.log(response); // Hello Midway!\n```\n\n----------------------------------------\n\nTITLE: Configure gRPC Component in Midway.js (Standalone)\nDESCRIPTION: This TypeScript code shows how to import and configure the `@midwayjs/grpc` component within a Midway.js application's `configuration.ts` file. The `grpc` module is added to the `imports` array in the `@Configuration` decorator, enabling gRPC functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as grpc from '@midwayjs/grpc';\n\n@Configuration({\n  imports: [grpc]\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Default Redis Client in MidwayJS\nDESCRIPTION: This snippet demonstrates how to select a non-default Redis client as the default client using the 'defaultClientName' configuration option in MidwayJS. It sets 'default2' as the default client, meaning the RedisService will be an instance of 'default2'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-11-18-release-3-8.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  redis: {\n    clients: {\n      default: {\n        // ...\n      },\n      default2: {\n        // ...\n      },\n    },\n    defaultClientName: 'default2'\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Manual API call with path params\nDESCRIPTION: This snippet demonstrates how to manually call a Midway Hooks API using the `fetch` API and passing a path parameter in the URL. It sends a GET request to `/article/100`. The response is then parsed as JSON and logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('/article/100')\n  .then((res) => res.json())\n  .then((res) => console.log(res)); // { article: '100'}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Resources with onStop in TypeScript\nDESCRIPTION: Illustrates the use of the `onStop` lifecycle hook to clean up resources, such as closing database connections. Dependencies: @midwayjs/core, @midwayjs/koa.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/lifecycle.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, ILifeCycle, IMidwayContainer } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\n\n@Configuration({\n  imports: [koa]\n})\nexport class MainConfiguration implements ILifeCycle {\n  @Inject()\n  db: any;\n\n  async onReady(container: IMidwayContainer): Promise<void> {\n    // 建立数据库连接\n    await this.db.connect();\n  }\n\n  async onStop(): Promise<void> {\n    // 关闭数据库连接\n    await this.db.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/process-agent as a dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add @midwayjs/process-agent as a dependency in the `package.json` file.  Specifying the version ensures consistency across different environments. This configuration enables the use of the process agent in the MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/process_agent.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/process-agent\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Consul for Registered Service\nDESCRIPTION: Demonstrates how to query Consul for a registered service using the `BalancerService`.  The `select` method retrieves a healthy instance of the specified service. The output is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, Provide } from '@midwayjs/core';\nimport { BalancerService } from '@midwayjs/consul'\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  balancerService: BalancerService;\n\n  @Get('/')\n  async home() {\n    const service = await this.balancerService.getServiceBalancer().select('my-midway-project');\n\n    // output\n    console.log(service)\n\n    // ...\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ID: 'c434e36b-1b62-c4e1-c4ec-76c5d3742ff8',\n  Node: '1b2d5b8771cb',\n  Address: '127.0.0.1',\n  Datacenter: 'dc1',\n  TaggedAddresses: {\n    lan: '127.0.0.1',\n    lan_ipv4: '127.0.0.1',\n    wan: '127.0.0.1',\n    wan_ipv4: '127.0.0.1'\n  },\n  NodeMeta: { 'consul-network-segment': '' },\n  ServiceKind: '',\n  ServiceID: 'my-midway-project:xxx:7001',\n  ServiceName: 'my-midway-project',\n  ServiceTags: [ 'tag1', 'tag2' ],\n  ServiceAddress: 'xxxxx',\n  ServiceTaggedAddresses: {\n    lan_ipv4: { Address: 'xxxxx', Port: 7001 },\n    wan_ipv4: { Address: 'xxxxxx', Port: 7001 }\n  },\n  ServiceWeights: { Passing: 1, Warning: 1 },\n  ServiceMeta: {},\n  ServicePort: 7001,\n  ServiceEnableTagOverride: false,\n  ServiceProxy: { MeshGateway: {}, Expose: {} },\n  ServiceConnect: {},\n  CreateIndex: 14,\n  ModifyIndex: 14\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Call for POST Endpoint - TypeScript\nDESCRIPTION: This snippet shows how to call a POST endpoint from the frontend in Midway Hooks. It imports the `bar` function from the `./apis/lambda` module and calls it with a name parameter. The response is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_api.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bar } from './apis/lambda';\n\nconst response = await bar('张三');\nconsole.log(response); // hello 张三\n```\n\n----------------------------------------\n\nTITLE: Automatic Upgrade Script (bash)\nDESCRIPTION: This script automates part of the upgrade process from Midway v2 to v3. It should be executed in the project's root directory to apply automated updates. It's recommended to create a new branch before running the script to prevent data loss in case of failure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx --ignore-existing midway-upgrade\n```\n\n----------------------------------------\n\nTITLE: Applying AuthGuard Globally\nDESCRIPTION: This TypeScript code snippet shows how to enable the AuthGuard on the `findAllUsers` method which provides authentication before the route is accessible. The `AuthGuard` is provided by the `@midwayjs/casbin` package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, UseGuard } from '@midwayjs/core';\nimport { AuthGuard } from '@midwayjs/casbin';\nimport { Resource } from './resouce';\n\n@Controller('/')\nexport class HomeController {\n\n  @UseGuard(AuthGuard)\n  @Get('/users')\n  async findAllUsers() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Kafka Consumer Configuration\nDESCRIPTION: This TypeScript code represents the minimal configuration needed for a Kafka consumer, including `connectionOptions`, `consumerOptions`, and `subscribeOptions`. These options are essential for establishing a connection, configuring the consumer, and subscribing to specific topics.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        connectionOptions: {\n          // ...\n        },\n        consumerOptions: {\n          // ...\n        },\n        subscribeOptions: {\n          // ...\n        },\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating @midwayjs/logger dependency in package.json\nDESCRIPTION: This code snippet demonstrates how to upgrade the `@midwayjs/logger` dependency from version 2.0.0 to version 3.0.0 in the `package.json` file. This update is necessary to use the features and improvements of the new version.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n   \"dependencies\": {\n- \t\t\"@midwayjs/logger\": \"2.0.0\",\n+ \t\t\"@midwayjs/logger\": \"^3.0.0\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Image\nDESCRIPTION: This command runs the Docker image named 'helloworld' in detached mode. The '-itd' flags allocate a pseudo-TTY connected to the container, keep STDIN open even if not attached, and run the container in the background, respectively. The '-P' flag publishes all exposed ports to random ports on the host.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/deployment.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -itd -P helloworld\n```\n\n----------------------------------------\n\nTITLE: Revert Node 14 support in Midway\nDESCRIPTION: This commit reverts the support for Node.js version 14 in Midway. This could be due to compatibility issues or a decision to focus on newer Node.js versions. The reversion of Node 14 support likely means that Midway applications may no longer be compatible with Node 14.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mikro/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Aliyun API Gateway Mapping Result\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Alibaba Cloud API Gateway with parameter mapping. Because there is no content type, the request body is treated as a raw string.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // '{\"c\":\"b\"}'   => string\n```\n\n----------------------------------------\n\nTITLE: Full stack application (Zero API) call\nDESCRIPTION: This example shows how to call a Midway Hooks API (defined elsewhere) from a full-stack application. It imports the API function `say` and calls it with the argument 'Midway'. The response is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport say from './api';\n\nconst response = await say('Midway');\nconsole.log(response); // Hello Midway!\n```\n\n----------------------------------------\n\nTITLE: Enable Redis and Casbin Components for Watcher\nDESCRIPTION: This TypeScript code snippet enables both the Redis and Casbin components in the `configuration.ts` file for watcher. This imports both redis and casbin and adds to the import array of the Configuration decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as redis from '@midwayjs/redis';\nimport * as casbin from '@midwayjs/casbin';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    redis,\n    casbin,\n  ],\n  // ...\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout in jest.setup.js (JavaScript)\nDESCRIPTION: This JavaScript snippet sets the Jest timeout to 30000ms (30 seconds) within the jest.setup.js file.  This is used to increase the default timeout for asynchronous tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.setup.js\njest.setTimeout(30000);\n```\n\n----------------------------------------\n\nTITLE: Install COS Dependency\nDESCRIPTION: This command installs the `@midwayjs/cos` package as a project dependency. The `--save` flag ensures that the dependency is added to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cos.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/cos@2 --save\n```\n\n----------------------------------------\n\nTITLE: Add check script to package.json\nDESCRIPTION: This script adds a \"check\" command to the `scripts` section of `package.json`. This allows running the luckyeye tool using `npm run check`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/luckyeye.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  // ......\n  \"check\": \"luckyeye\"\n},\n```\n\n----------------------------------------\n\nTITLE: Handling Request Headers in API Endpoint\nDESCRIPTION: This snippet demonstrates how to access request headers in a Midway Hooks API. It uses `Headers<T>` to define the expected headers and extracts the values from the Koa context's `headers` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  Headers,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get('/auth'),\n  Headers<{ token: string }>(),\n  async () => {\n    const ctx = useContext();\n    return {\n      token: ctx.headers.token,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Middleware and error handling for bull's App\nDESCRIPTION: This TypeScript code demonstrates how to configure middleware and error filters for the bull's App, which is a separate framework instance within the Bull component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  imports: [\n    // ...\n    bull\n  ]\n})\nexport class MainConfiguration {\n\n  @App('bull')\n  bullApp: bull.Application;\n\n  //...\n\n  async onReady() {\n    this.bullApp.useMiddleare( /*middleware*/);\n    this.bullApp.useFilter( /*filter*/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger to Only Render JSON in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to configure Swagger to only render the JSON document using `renderJSON` from `@midwayjs/swagger`. This configuration does not require the `swagger-ui-dist` package and only provides the Swagger JSON endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { renderJSON } from '@midwayjs/swagger';\n\nexport default {\n  // ...\n  swagger: {\n    swaggerUIRender: renderJSON,\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Local Passport Middleware\nDESCRIPTION: This TypeScript code creates a middleware for handling local passport authentication. It extends `PassportMiddleware` and specifies the `LocalStrategy`. It also defines the `getAuthenticateOptions` to handle authentication failures.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/local.middleware.ts\n\nimport { Middleware } from '@midwayjs/core';\nimport { PassportMiddleware, AuthenticateOptions } from '@midwayjs/passport';\nimport { LocalStrategy } from '../strategy/local.strategy';\n\n@Middleware()\nexport class LocalPassportMiddleware extends PassportMiddleware(LocalStrategy) {\n  // 设置 AuthenticateOptions\n  getAuthenticateOptions(): Promise<AuthenticateOptions> | AuthenticateOptions {\n    return {\n      failureRedirect: '/login',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unified Call Error Handling\nDESCRIPTION: This example shows how to handle validation errors when using the unified call method. It attempts to call the `hello` API with invalid parameters and logs the error message and status code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/validate.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport hello from './api';\n\ntry {\n  await hello(null, null);\n} catch (error) {\n  console.log(\n    JSON.parse(error.data.message)\n  );\n  console.log(error.status); // 422\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Midway Context in Component (index.d.ts - Express Context)\nDESCRIPTION: This code snippet shows extending only the `@midwayjs/express` Context within a component. It declares a module augmentation for `@midwayjs/express/dist/interface` and adds the 'abc' property (string) to the Express context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/context_definition.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// index.d.ts\n\n// The following paragraph is only extended by @midwayjs/express Context\ndeclare module '@midwayjs/express/dist/interface '{\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding for XSS Protection (TypeScript)\nDESCRIPTION: This TypeScript code uses `ctx.security.json()` to safely encode JSON data to prevent XSS vulnerabilities when injecting JSON into JavaScript. This is important when outputting JSON from the server to the client-side JavaScript.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/security.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx;\n\n  @Get('/home')\n  async home() {\n    return `<script>windows.config = ${this.ctx.security.json( ...variable )};</script>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Component Dependency in package.json\nDESCRIPTION: This code snippet shows how to add a component, specifically `@midwayjs/orm`, as a dependency to your MidwayJS application using the `package.json` file.  This makes the component available for use in your project. The version specified ensures compatibility.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/midway_component.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"dependencies\": {\n    \"@midwayjs/orm\": \"^1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Controller\nDESCRIPTION: Defines a controller for `/passport/jwt` that uses JWT authentication middleware, and an endpoint for generating a JWT.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Post, Inject } from '@midwayjs/decorator';\nimport { Controller, Post } from '@midwayjs/decorator';\nimport { JwtService } from '@midwayjs/jwt';\n\n@Provide()\n@Controller('/')\nexport class JwtController {\n\n  @Inject()\n  jwt: JwtService;\n\n  @Inject();\n  ctx: any;\n\n  @Post('/passport/jwt', { middleware: ['jwtPassportMiddleware'] })\n  async jwtPassport() {\n    console.log('jwt user: ', this.ctx.req.user);\n    return this.ctx.req.user;\n  }\n\n  @Post('/jwt')\n  async genJwt() {\n    return {\n      t: await this.jwt.sign({ msg: 'Hello Midway' }),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describe request parameters\nDESCRIPTION: This code snippet shows how to use the `param` method to describe API parameters. It demonstrates providing basic descriptions for the `userId` and `name` parameters of the `getUser` endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@CreateApiDoc()\n\t.param('user id')\n\t.param('user name')\n  .build()\n\n@Get('/:userId')\nasync getUser(@Param() userId: number, @Query() name?: string) {\n  return {\n    name: 'harry',\n    age: 18\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configure JSON Output - TypeScript\nDESCRIPTION: This snippet demonstrates how to enable JSON output for the logger in MidwayJS by configuring the `json` transport. The logs are written to a file in JSON format, and the output can be customized using the `format` option.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         file: false,\n         json: {\n           fileLogName: 'midway-app.json.log'\n         }\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     default: {\n       // ...\n     },\n     clients: {\n       appLogger: {\n         transports: {\n           json: {\n             // ...\n           }\n         }\n       }\n     }\n   },\n} as MidwayConfig;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     default: {\n       transports: {\n         json: {\n           format: (info: LoggerInfo & {data: string}) => {\n             info.data = 'custom data';\n             return info;\n           }\n         }\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Using registered error codes in a custom error class in TypeScript\nDESCRIPTION: This snippet demonstrates how to use registered error codes within a custom error class that extends `MidwayError`.  The registered error code is assigned to the error object and used for easier debugging.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_error.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MidwayParameterError extends MidwayError {\n  constructor(message?: string) {\n    super(message ?? 'Parameter type not match', FrameworkErrorEnum.PARAM_TYPE);\n  }\n}\n\n// user code\nasync findAll(data) {\n  if (! data.user) {\n    throw new MidwayParameterError();\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and createFunctionApp in MidwayJS\nDESCRIPTION: This code snippet describes a bug fix related to supertest typings and createFunctionApp within the MidwayJS framework. The commit associated with this fix is identified by the hash 484f4f41b3b9e889d4d285f4871a0b37fa51e73f. This fix was included in version 3.0.4 of the @midwayjs/cache package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Add Check Script to package.json\nDESCRIPTION: This adds a `check` script to the `scripts` section of the `package.json` file. This script executes the `luckyeye` command, which runs the error checking tool.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/luckyeye.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  // ......\n  \"check\": \"luckyeye\"\n},\n```\n\n----------------------------------------\n\nTITLE: Installing and Using midway-init\nDESCRIPTION: Globally installs `midway-init` and uses it to scaffold a Midway.js application. Provides options for creating projects from built-in templates, local directories, or npm packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g midway-init\nmidway-init\n```\n\n----------------------------------------\n\nTITLE: Disabling Index.html Hosting in Midway Hooks\nDESCRIPTION: This code snippet shows how to disable the default `index.html` hosting capability in a Midway Hooks application. This is useful when the `index.html` file is hosted separately (e.g., by a CDN or Nginx). Setting `static: false` prevents the generation of the `index.html` hosting function during the build process, allowing for a more streamlined API-only deployment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/deploy.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@midwayjs/hooks-kit';\n\nexport default defineConfig({\n  static: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Autoloading with @Autoload and @Init\nDESCRIPTION: This code shows how to use the @Autoload decorator to automatically initialize a class and execute its init method. The RedisErrorListener class is decorated with @Autoload and @Scope, and its init method is decorated with @Init. This eliminates the need to manually initialize the class in the onReady method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/auto_run.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Autoload, Scope, ScopeEnum } from '@midwayjs/core';\n\n@Autoload()\n@Scope(ScopeEnum.Singleton)\nexport class RedisErrorListener {\n  @Init()\n  async init() {\n    const redis = new Redis();\n    redis.on('xxx', () => {\n      // ...\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install swagger-ui-dist as dependency\nDESCRIPTION: This command installs `swagger-ui-dist` as a regular dependency, which is required if you want to serve the Swagger API page on the server. This is in contrast to a dev dependency, which would only be used during development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install swagger-ui-dist --save\n```\n\n----------------------------------------\n\nTITLE: Generating Table Names in Typescript\nDESCRIPTION: This TypeScript code snippet demonstrates how table names for the `tag` and `relationship` tables are dynamically generated. It utilizes a `clientName`, `tablePrefix`, and `tableSeparator` from the `tagOptions` configuration. The table names are constructed by concatenating these values.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst clientName = 'local-test';\nconst { tablePrefix = 'a', tableSeparator = '_' } = tagOptions;\nconst tagTableName = `${tablePrefix}${tableSeparator}${clientName}${tableSeparator}tag`;\n// tagTableName: a_local-test_tag\nconst relationshipTableName = `${tablePrefix}${tableSeparator}${clientName}${tableSeparator}relationship`\n// relationshipTableName: a_local-test-relationship\n```\n\n----------------------------------------\n\nTITLE: Configuration Imports Update - JavaScript\nDESCRIPTION: This commit replaces string-based configuration imports with direct object imports. This change affects the way configuration files are loaded and managed within the Midway.js application, moving to a more direct object-based approach for configuration definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nf1b42a1b338a69cdfaf63e2d951a65333e4f3007\n```\n\n----------------------------------------\n\nTITLE: Enable @midwayjs/session in FaaS - TypeScript\nDESCRIPTION: Enables the session component in a Midway.js FaaS application by importing it in the `src/configuration.ts` file. This allows the application to use session management features.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { join } from 'path';\nimport * as faas from '@midwayjs/faas';\nimport * as session from '@midwayjs/session';\n\n@Configuration({\n  imports: [\n    faas,\n    session,\n  ],\n  // ...\n})\nexport class ContainerLifeCycle implements ILifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Controller without @controller Decorator\nDESCRIPTION: This code snippet illustrates a class that is not automatically bound to a route during application initialization because it lacks the `@controller` decorator.  It is still loaded by the IoC container due to the `@provide` decorator, making it available for manual route binding. It shows a simple `index` method that sets the response body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/controller.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app/controller/api.ts\n\n@provide()\nexport class BaseApi {\n  async index(ctx) {\n    ctx.body = 'index';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Mongoose Schema Definition\nDESCRIPTION: This TypeScript code shows the equivalent Mongoose schema definition for the `User` entity defined using Typegoose. It illustrates how Typegoose simplifies the model creation process compared to directly using Mongoose schemas.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/mongodb.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst userSchema = new mongoose.Schema({\n  name: String,\n  jobs: [{ type: String }]\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Branch with Git Bash\nDESCRIPTION: This snippet demonstrates how to create a new development branch in Git, run tests, and push changes to the remote repository. It's essential for contributing code to the project and adhering to the contribution workflow.\nSOURCE: https://github.com/midwayjs/midway/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new branch for development. The name of the branch should be semantic, avoiding words like 'update' or 'tmp'. We suggest using feature/xxx, if the modification is about to implement a new feature.\n$ git checkout -b branch-name\n\n# Run the test after you finish your modification. Add new test cases or change old ones if you feel necessary\n$ npm test\n\n# If your modification passes the tests, congratulations it's time to push your work back to us. Notice that the commit message should be written in the following format.\n$ git add . # git add -u to delete files\n$ git commit -m \"fix(role): role.use must xxx\"\n$ git push origin branch-name\n```\n\n----------------------------------------\n\nTITLE: Support Default Data Source Name\nDESCRIPTION: This feature adds support for a default data source name in the MidwayJS framework. This enhancement simplifies configuration and improves the user experience by providing a default data source if one is not explicitly specified.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typeorm/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Timer Event Structure JSON\nDESCRIPTION: This code snippet shows the structure of the JSON event passed to the Timer trigger function. It includes properties like `Message`, `Time`, `TriggerName`, and `Type`. The event structure is of type `SCF.TimerEvent`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/tencent_trigger_timer.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  Message: '',\n  Time: new Date().toJSON(),\n  TriggerName: 'test',\n  Type: 'Timer',\n}\n```\n\n----------------------------------------\n\nTITLE: Specify npm client\nDESCRIPTION: This command specifies a custom npm client to use, such as tnpm. The `--npm` parameter is used to specify the client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --npm=tnpm\n```\n\n----------------------------------------\n\nTITLE: Install Koa Dependency\nDESCRIPTION: This bash command installs the `@midwayjs/koa` package as a project dependency using npm. This package provides the Koa framework integration for MidwayJS applications. Ensure you have npm installed before running this command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/koa@3 --save\n```\n\n----------------------------------------\n\nTITLE: Developing Cloud Function (getOpenId)\nDESCRIPTION: This TypeScript code defines a cloud function `getOpenId` that retrieves the user's OpenID from the WeChat context. It uses `cloud.getWXContext()` to access the context and returns an object containing the OpenID.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_miniprogram.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getOpenId = async () => {\n  const wechatContext = cloud.getWXContext();\n\n  return {\n    openId: wechatContext.OPENID,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize and Dependencies - Bash\nDESCRIPTION: This command installs the necessary Sequelize modules for a MidwayJS project, including the core Sequelize library, the Sequelize-Typescript wrapper, and the MidwayJS Sequelize integration package. It adds these packages as dependencies to the project's package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/sequelize.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/sequelize@3 sequelize sequelize-typescript --save\n```\n\n----------------------------------------\n\nTITLE: Manual Queue Creation (TypeScript)\nDESCRIPTION: This snippet demonstrates how to manually create a queue using the `createQueue` method of the `bull.Framework` instance. It creates a queue named 'test' with specified Redis connection options and a prefix. This allows for programmatic queue creation, independent of the `@Processor` decorator.  Dependencies: `@midwayjs/core`, `@midwayjs/bull`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, Inject } from '@midwayjs/core';\nimport * as bull from '@midwayjs/bull';\n\n@Configuration({\n  imports: [\n    // ...\n    bull\n  ]\n})\nexport class MainConfiguration {\n\n  @Inject()\n  bullFramework: bull.Framework;\n\n  async onReady() {\n    const testQueue = this.bullFramework.createQueue('test', {\n      redis: {\n        port: 6379,\n        host: '127.0.0.1',\n        password: 'foobared',\n      },\n      prefix: '{midway-bull}',\n    });\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Trigger Validation Code - Alibaba & Tencent Cloud\nDESCRIPTION: This TypeScript code snippet is used to validate the type and value of the request body in both Alibaba Cloud HTTP Trigger and Tencent Cloud API Gateway.  It accesses the body via `this.ctx.request.body` and returns an object containing the type and value.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = this.ctx.request.body;\nreturn {\n  type: typeof body,\n  body,\n};\n```\n\n----------------------------------------\n\nTITLE: Access ctx.traceId\nDESCRIPTION: This snippet demonstrates how to access the `traceId` property from the context object (`ctx`) within a Midway.js application, when using supported components like Egg.js or Koa.js. The trace ID is a unique identifier for a distributed trace.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/otel.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nctx.traceId => *****\n```\n\n----------------------------------------\n\nTITLE: Manually calling API endpoint for testing\nDESCRIPTION: This code shows an alternative way to test an API endpoint by manually specifying the path. It uses `createHttpRequest` from `@midwayjs/mock` to send a GET request to the '/hello' endpoint and asserts that the response has a status code of 200 and the expected text.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/test.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('Hello World', async () => {\n  const response = await createHttpRequest(app)\n    .get('/hello')\n    .expect(200);\n  expect(response.text).toBe('Hello World!');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tencent Cloud Authentication\nDESCRIPTION: This snippet shows the required environment variables for authenticating with Tencent Cloud services. It includes the AppId, SecretId, SecretKey, and Token. These variables are typically stored in a `.env` file at the root of the deployment directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_tencent_faq.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nTENCENT_APP_ID=xxxxxx     #授权账号的 AppId\nTENCENT_SECRET_ID=xxxxxx  #授权账号的 SecretId\nTENCENT_SECRET_KEY=xxxxxx #授权账号的 SecretKey\nTENCENT_TOKEN=xxxxx       #临时 token\n```\n\n----------------------------------------\n\nTITLE: Applying the error filter to the application (TypeScript)\nDESCRIPTION: This code applies the `WeatherErrorFilter` to the application. The `useFilter` method is called in the `onReady` lifecycle hook to register the filter.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quick_guide.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration, App } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport { WeatherErrorFilter } from './filter/weather.filter';\n// ...\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @App()\n  app: koa.Application;\n\n  async onReady() {\n    // ...\n\n    // add filter\n    this.app.useFilter([WeatherErrorFilter]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Result (application/json) - Alibaba Cloud API Gateway\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed within the serverless function when the Content-Type is application/json and '入参透传' is enabled on Alibaba Cloud API Gateway. The body is a parsed JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_post_difference.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\"b\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Install MidwayJS COS Dependency\nDESCRIPTION: This command installs the `@midwayjs/cos` package as a project dependency, enabling access to Tencent Cloud COS services within the MidwayJS application. It uses npm to download and add the package to the project's `node_modules` directory and `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cos.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/cos@3 --save\n```\n\n----------------------------------------\n\nTITLE: Setting the default view engine in Midway.js\nDESCRIPTION: This TypeScript code snippet shows how to set the default view engine in a Midway.js application's configuration. The `defaultViewEngine` property specifies which engine to use when a template suffix is not explicitly mapped.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  view: {\n    defaultViewEngine: 'ejs',\n    mapping: {\n      '.ejs': 'ejs',\n    },\n  },\n  // ejs config\n  ejs: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope in MidwayJS\nDESCRIPTION: This commit fixes an issue where singleton-scoped components were not correctly invoked within a request scope. The fix ensures that singleton components are properly accessed and function as intended within the context of a request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Setting Global Route Prefix for Koa in Midway\nDESCRIPTION: This code snippet shows how to configure a global route prefix for Koa applications in the `src/config/config.default.ts` file. The `globalPrefix` property under the `koa` key sets the prefix for all routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  koa: {\n    globalPrefix: '/v1'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Functions to Package (Shell)\nDESCRIPTION: This snippet demonstrates how to specify which functions to package and deploy using the `--function` parameter with the `midway-bin package` and `midway-bin deploy` commands.  Multiple function names must be separated by commas.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n// Pack\nmidway-bin package --function=a, B ,c\n\n// Publish\nmidway-bin deploy --function=a, B ,c\n```\n\n----------------------------------------\n\nTITLE: POST Request Returning JSON - TypeScript\nDESCRIPTION: This snippet demonstrates a POST request with a JSON payload and specifies that the response should be parsed as JSON by setting `dataType` to 'json' and `contentType` to 'json'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  method: 'POST',\n  data: {\n    a: 1,\n    b: 2\n  },\n  dataType: 'json',\n  contentType:'json', \t// 发送的 post 为 json\n});\n\n// result.data ...\n```\n\n----------------------------------------\n\nTITLE: Parse and Validate Integer with Pipe in Controller\nDESCRIPTION: This code snippet shows how to use Pipe to parse a string parameter into an integer and validate it. The `ParseIntPipe` automatically converts the string to a number and performs validation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-01-30-release-3.10.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n\n  @Post('/update_age')\n  async updateAge(@Body('age', [ParseIntPipe]) age: number ) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Authentication in Typescript\nDESCRIPTION: This snippet configures cookie authentication for Swagger in the `config.default.ts` file and associates it with a controller using `@ApiCookieAuth`. This requires a valid cookie.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'cookie',\n      securityName: 'testforcookie',\n      cookieName: 'connect.sid',\n    },\n  },\n}\n\n@ApiCookieAuth('testforcookie')\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication in Typescript\nDESCRIPTION: This snippet configures custom authentication for Swagger in the `config.default.ts` file and associates it with a controller using `@ApiSecurity`. This requires a custom implementation for handling the authentication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'custom',\n      name: 'mycustom'\n      // ...\n    },\n  },\n}\n\n@ApiSecurity('mycustom')\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Rendering Template with Specific Extension\nDESCRIPTION: This snippet shows how to render a file with specific extension, which should be already mapped. Assumes that nunjucks engine is already configured for `.nj` extension. It uses the `ctx.render` to render the template.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.ctx.render('user.nj');\n```\n\n----------------------------------------\n\nTITLE: Configure JWT Secret\nDESCRIPTION: This TypeScript code snippet shows how to configure the JWT secret and expiration time in the application configuration file. The `secret` should be a strong, randomly generated string and never stored in the payload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  jwt: {\n    secret: 'xxxxxxxxxxxxxx', // fs.readFileSync('xxxxx.key')\n    expiresIn: '2d', // https://github.com/vercel/ms\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Consul in Docker\nDESCRIPTION: This command runs a Consul instance in a Docker container in detached mode. The `-P` flag publishes all exposed ports to random ports on the host. This command simplifies the process of setting up a Consul development environment by using a Docker image.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/consul.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -itd -P consul\n```\n\n----------------------------------------\n\nTITLE: ParseIntPipe Implementation in MidwayJS\nDESCRIPTION: This snippet shows the implementation of `ParseIntPipe`, a specific validation pipeline that checks if the input is a required integer. It extends `ParsePipe` and defines the validation schema using `RuleType.number().integer().required()`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/validate.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pipe } from '@midwayjs/core';\nimport { ParsePipe, RuleType } from '@midwayjs/validate';\n\n@Pipe()\nexport class ParseIntPipe extends ParsePipe {\n   getSchema() {\n     return RuleType.number().integer().required();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tags module in Configuration\nDESCRIPTION: This code snippet demonstrates how to import and register the @midwayjs/tags module within a MidwayJS application's configuration file.  This makes the tags component available for use in other parts of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tags.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as tags from '@midwayjs/tags';\n@Configuration({\n  imports: [\n    // ...\n    tags\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout in Koa (MidwayJS)\nDESCRIPTION: This code snippet shows how to configure the `requestTimeout` in a MidwayJS application using the Koa framework.  `requestTimeout` specifies the time the server waits for a complete request from the client in milliseconds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    serverOptions: {\n      requestTimeout: 600_000\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing App Object from Context in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to access the application object from the Midway.js context using the `getApp` method. The application object provides access to application-level configurations and services. The `getConfig()` method is shown as an example of a method available on the app object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = this.ctx.getApp();\n// app. getConfig();\n```\n\n----------------------------------------\n\nTITLE: Fixing Egg logger context logger creation in MidwayJS\nDESCRIPTION: This commit fixes an issue with the Egg logger's context logger creation within MidwayJS. It ensures the context logger is correctly created, allowing for request-specific logging.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\negg logger create context logger case ([#1760](https://github.com/midwayjs/midway/issues/1760)) ([f9bebf1](https://github.com/midwayjs/midway/commit/f9bebf18cffbced4bd596d1ab39b585ea4d6a229))\n```\n\n----------------------------------------\n\nTITLE: Using ctx.getLogger() to get a custom logger in the context\nDESCRIPTION: This example demonstrates how to use `ctx.getLogger()` to retrieve a custom logger that's specific to the request context. This allows for associating log messages with a particular request and logging them separately.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/req_res_app.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nthis.ctx.getLogger('custom');\n// => custom logger\n```\n\n----------------------------------------\n\nTITLE: Configuring ApiKey Authentication in Typescript\nDESCRIPTION: This snippet configures apikey authentication for Swagger in the `config.default.ts` file and associates it with a controller using `@ApiSecurity`. This requires a valid API key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  swagger: {\n    auth: {\n      authType: 'apikey',\n    \tname: 'api_key'\n    },\n  },\n}\n\n@ApiSecurity('api_key')\n@Controller('/hello')\nexport class HelloController {}\n```\n\n----------------------------------------\n\nTITLE: Book Service Implementation\nDESCRIPTION: Defines a simple `BookService` class using the `@Provide` decorator, making it available for dependency injection. This service provides a method for retrieving a book by its ID. It demonstrates a typical service component structure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/service/bookService\nimport { Provide } from '@midwayjs/decorator';\n\n@Provide()\nexport class BookService {\n  async getBookById(id) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Security Helper in MidwayJS\nDESCRIPTION: This commit introduces a 'security helper' feature to the MidwayJS framework, which likely provides utility functions or components to aid in implementing security measures within a MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/security/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsecurity helper ([#1795](https://github.com/midwayjs/midway/issues/1795)) ([cc8a148](https://github.com/midwayjs/midway/commit/cc8a148bf7a2ea1351d3912084de2ad755c465e7))\n```\n\n----------------------------------------\n\nTITLE: Configure VSCode to use LF Line Endings\nDESCRIPTION: This JSON snippet configures VSCode to use LF line endings for all new files. This ensures consistency in line endings across the project, especially in cross-platform development environments, preventing potential issues related to inconsistent line endings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/git_problem.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"files.eol\": \"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Frontend Call for GET Endpoint - TypeScript\nDESCRIPTION: This snippet shows how to call a GET endpoint from the frontend in Midway Hooks. It imports the `foo` function from the `./apis/lambda` module and calls it. The response is then logged to the console.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { foo } from './apis/lambda';\n\nconst response = await foo();\nconsole.log(response); // foo\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata in Unary Calls with sendMessageWithCallback (TypeScript)\nDESCRIPTION: This code shows how to retrieve metadata from a unary gRPC call using the `sendMessageWithCallback` method. The metadata is accessed within the callback's `on('metadata')` event.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/grpc.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst call = service.sayHello().sendMessageWithCallback({\n  name: 'zhangting'\n}, (err) => {\n  if (err) {\n    reject(err);\n  }\n});\ncall.on('metadata', (meta) => {\n  // output meta\n});\n\n```\n\n----------------------------------------\n\nTITLE: Common PM2 Commands\nDESCRIPTION: These are common PM2 commands for managing Node.js applications. They allow you to start, list, stop, restart, delete, and view logs of services managed by PM2.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/pm2.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pm2 start# Start a service\n$ pm2 list# lists the current services\n$ pm2 stop# stop a service\n$ pm2 restart# Restart a service\n$ pm2 delete# delete a service\n$ pm2 logs# view the output log of the service\n```\n\n----------------------------------------\n\nTITLE: Deleting data from database\nDESCRIPTION: Shows how to remove a record from the database. It finds an entity and uses the `remove` method to delete it.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Func } from '@midwayjs/decorator';\nimport { InjectEntityModel } from '@midwayjs/orm';\nimport { Photo } from './entity/photo';\nimport { Repository } from 'typeorm';\n\n@Provide()\nexport class PhotoService {\n  @InjectEntityModel(Photo)\n  photoModel: Repository<Photo>;\n\n  async updatePhoto() {\n    /*...*/\n    let photoToRemove = await this.photoModel.findOne(1);\n    await this.photoModel.remove(photoToRemove);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies with Inject Decorator Typescript\nDESCRIPTION: This code uses the `@inject()` decorator to inject a dependency (`userModel`) into the `UserService` class.  The container will automatically resolve and inject the `userModel` instance during the instantiation of `UserService`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\nexport class UserService {\n  @inject()\n  userModel;\n\n  async getUser(userId) {\n    return await this.userModel.get(userId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Time Columns with Decorators\nDESCRIPTION: This TypeScript code shows how to define createdAt, updatedAt, and deletedAt columns in a Sequelize model using the `@CreatedAt`, `@UpdatedAt`, and `@DeletedAt` decorators from sequelize-typescript.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Table, Model, CreatedAt, UpdatedAt, DeletedAt } from 'sequelize-typescript';\n\n@Table\nexport class Person extends Model {\n  @CreatedAt\n  creationDate: Date;\n\n  @UpdatedAt\n  updatedOn: Date;\n\n  @DeletedAt\n  deletionDate: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Type with ApiProperty\nDESCRIPTION: This TypeScript code demonstrates how to define an enumeration type using the `enum` attribute in the `@ApiProperty` decorator. The `enum` attribute specifies the possible values for the property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nenum HelloWorld {\n  One = 'One',\n  Two = 'Two',\n  Three = 'Three',\n}\n\n@ApiProperty({\n  enum: ['One', 'Two', 'Three']\n  description: 'The name of the Catage'\n})\nhello: HelloWorld;\n```\n\n----------------------------------------\n\nTITLE: Adding Default Cookie for HTTP Parser\nDESCRIPTION: This commit introduces the addition of a default cookie for the HTTP parser. This ensures consistent cookie handling and compatibility across different environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ndefault add cookie for http parser ([#540](https://github.com/midwayjs/midway-faas/issues/540)) ([5799e96](https://github.com/midwayjs/midway-faas/commit/5799e9642144b23b81d5c629387ce52510dde00d))\n```\n\n----------------------------------------\n\nTITLE: Modify tsconfig.json for Source Directory (MidwayJS CLI)\nDESCRIPTION: Modifies the `tsconfig.json` file to specify a custom root directory for the TypeScript compiler.  This is necessary to ensure that the compiler correctly locates the source files when they are not in the default `src` directory.  The `rootDir` compiler option is set to the new source directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/change_start_dir.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"compileOnSave\": true,\n  \"compilerOptions\": {\n    // ...\n    \"rootDir\": \"server\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Library Checks in TypeScript\nDESCRIPTION: This snippet demonstrates how to disable checks for declaration files of dependencies in the `tsconfig.json` file. This is useful when the project's TypeScript version differs from the dependency's version, causing compilation errors. This setting will skip type checking of all declaration files (.d.ts).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ts_problem.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Opening WebSocket Component in Configuration (Standalone)\nDESCRIPTION: Imports the @midwayjs/ws module and includes it in the imports array within the MainConfiguration class.  This configures Midway to use the WebSocket component as an independent main framework within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as ws from '@midwayjs/ws';\n\n@Configuration({\n  imports: [ws]\n  // ...\n})\nexport class MainConfiguration {\n  async onReady() {\n\t\t// ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Mode POST Request Example\nDESCRIPTION: This code snippet shows a simple mode POST request handler in Midway Hooks. It receives a name as a parameter and returns a message with the name and the HTTP method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/file-route.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from '@midwayjs/hooks';\n\nexport async function post(\n  name: string\n) {\n  const ctx = useContext();\n\n  return {\n    message: `Hello ${name}!`,\n    method: ctx.method,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: UserService with ILogger Injection - Typescript\nDESCRIPTION: This code showcases the simplest approach for incorporating `ILogger` into a class using the `@Inject` decorator. It provides type safety for logging functions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Logger } from '@midwayjs/core';\nimport { ILogger } from '@midwayjs/logger';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  logger: ILogger; // Get context log\n\n  async getUser() {\n  \tthis.logger.info('hello user');\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Serverless App More Method in MidwayJS\nDESCRIPTION: This bug fix resolves an issue with the serverless app's 'more' method in MidwayJS. This ensures that serverless applications function correctly and efficiently when using the 'more' method for handling requests or events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Setting Timezone via Environment Variable (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to set the timezone for an Alibaba Cloud Function Compute environment using the TZ environment variable. This ensures the application uses the correct timezone (Asia/Shanghai) instead of the default UTC.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_aliyun_faq.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nprocess.env.TZ = 'Asia/Shanghai';\n```\n\n----------------------------------------\n\nTITLE: Default Query Parsing Effect Example\nDESCRIPTION: This JSON snippet illustrates the default effect (using `querystring`) on the given request parameter. When multiple parameters share the same name, they are represented as an array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"a\": [\"1\", \"3\" ],\n   \"b\": \"2\",\n   \"c[0]\": \"1\",\n   \"c[1]\": \"2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add Kafka Dependency (package.json)\nDESCRIPTION: Adds the `@midwayjs/kafka` module as a dependency in your `package.json` file.  After adding this, you need to reinstall dependencies (e.g., `npm install`).  This ensures the Kafka module is available to your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/kafka\": \"^3.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring OSS Component in MidwayJS\nDESCRIPTION: This TypeScript snippet demonstrates how to import the OSS component and configure it within a MidwayJS application's configuration file. The oss import registers the component, and importConfigs specifies the configuration directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as oss from '@midwayjs/oss';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    // ...\n    oss // import oss components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Import Sequelize Module in Configuration\nDESCRIPTION: Imports the Sequelize module into the MidwayJS configuration file (configuration.ts). This step is necessary to register the Sequelize module within the MidwayJS application context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Configuration } from '@midwayjs/decorator';\nimport { ILifeCycle } from '@midwayjs/core';\nimport { Application } from 'egg';\nimport { join } from 'path';\nimport * as sequlize from '@midwayjs/sequelize';\n\n@Configuration({\n  imports: [sequlize],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class ContainerLifeCycle implements ILifeCycle {\n  @App()\n  app: Application;\n\n  async onReady() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Manually setting HTTP status code using Koa Context\nDESCRIPTION: This snippet demonstrates how to manually set the HTTP status code using the Koa Context object. It accesses the context via `useContext` and modifies the `ctx.status` property.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(Get(), async () => {\n  const ctx = useContext<Context>();\n  ctx.status = 201;\n  return 'Hello World!';\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and Function App in MidwayJS\nDESCRIPTION: This commit addresses issues related to supertest typings and the createFunctionApp function. These improvements ensure smoother testing and application setup.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Configure Jest Types in tsconfig.json (JSON)\nDESCRIPTION: This snippet shows how to configure the `tsconfig.json` file to include Jest types. This configuration is important for resolving type definition conflicts between Mocha and Jest when using Jest as the testing framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"jest\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Luckyeye check script to package.json\nDESCRIPTION: This snippet shows how to add a \"check\" script to the `package.json` file, which executes the `luckyeye` command. This allows running the inspection tool using `npm run check`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/luckyeye.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  // ......\n  \"check\": \"luckyeye\"\n},\n```\n\n----------------------------------------\n\nTITLE: Get Global Configuration (Static API)\nDESCRIPTION: Illustrates how to retrieve the global configuration object using `getCurrentMainApp().getConfig()` after the application has started. This enables access to configuration settings from anywhere in the application without relying on dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCurrentMainApp } from '@midwayjs/core';\n\nexport const getGlobalConfig = () => {\n  return getCurrentMainApp().getConfig();\n}\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disabling Global Validation\nDESCRIPTION: This snippet shows how to temporarily disable validation for a specific parameter by using `Partial<UserDTO>`. This allows skipping validation for this parameter, while still maintaining validation for other parameters that are not wrapped in `Partial<>`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/api/user')\nexport class HomeController {\n  @Post('/')\n  async updateUser(@Body() user: Partial<UserDTO>) {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install Swagger dependencies\nDESCRIPTION: These commands install the necessary dependencies for Swagger integration in a MidwayJS project. `@midwayjs/swagger` provides the core Swagger functionality, and `swagger-ui-dist` provides the Swagger UI for visualizing the API documentation. The `--save-dev` flag indicates that `swagger-ui-dist` is a development dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/swagger.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @midwayjs/swagger@1 --save\nnpm install swagger-ui-dist --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Axios Instance - TypeScript\nDESCRIPTION: This snippet shows how to configure and inject a custom Axios instance with a specific key. It defines a `customAxios` client and injects it using `InjectClient`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/axios.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  axios: {\n    default: {\n      // 所有实例复用的配置\n    },\n    clients: {\n      default: {\n        // 默认实例\n      },\n      customAxios: {\n        // 自定义实例\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpServiceFactory, HttpService } from '@midwayjs/axios';\nimport { InjectClient } from '@midwayjs/core';\n\n@Provide()\nexport class UserService {\n\n  @InjectClient(HttpServiceFactory, 'customAxios')\n  customAxios: HttpService;\n\n  async invoke() {\n  \tconst url = 'https://midwayjs.org/resource/101010100.json';\n    const result = await this.customAxios.get(url);\n    // TODO result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer Configuration\nDESCRIPTION: This TypeScript code demonstrates the basic configuration for Kafka consumers using the `consumer` field. It shows how to define multiple consumers with individual settings for connection, consumer, and subscription options.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/kafka.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  kafka: {\n    consumer: {\n      sub1: {\n        // ...\n      },\n      sub2: {\n        // ...\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Midway Logger Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates the basic structure of the MidwayJS logger configuration within a TypeScript configuration file. It includes a `default` configuration and a `clients` section for defining specific logger instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      // ...\n    },\n    clients: {\n      coreLogger: {\n        // ...\n      },\n      appLogger: {\n        // ...\n      }\n    }\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Setting TCP SACK to 0\nDESCRIPTION: This command disables TCP SACK. It is often recommended when encountering Handshake inactivity timeout errors due to network issues or connectivity problems. It sets `net.inet.tcp.sack` to 0 in the system's kernel parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\nsudo sysctl -w net.inet.tcp.sack=0\n```\n\n----------------------------------------\n\nTITLE: Inject Different Cache Instances\nDESCRIPTION: Injects different configured cache instances into a service.  This shows how to use `@InjectClient` with different client names to access specific cache configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/caching.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectClient, Provide } from '@midwayjs/core';\nimport { CachingFactory, MidwayCache } from '@midwayjs/cache-manager';\n\n@Provide()\nexport class UserService {\n\n  @InjectClient(CachingFactory, 'default')\n  cache: MidwayCache;\n  \n  @InjectClient(CachingFactory, 'otherCaching')\n  customCaching: MidwayCache;\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Singleton Invoke Request Scope\nDESCRIPTION: Fixes an issue where the singleton invoke request scope was not valid.  This ensures that singleton services correctly handle request-scoped dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Open development server\nDESCRIPTION: Opens the development server in a web browser. The server is expected to be running on `http://localhost:7001/`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ open http://localhost:7001/\n```\n\n----------------------------------------\n\nTITLE: Extend State type in Koa Context\nDESCRIPTION: This TypeScript code extends the Koa Context's State interface in an EggJS/Midway application. This allows you to add custom properties to the state object, providing a way to share data across middleware and routes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\n\ndeclare module '@midwayjs/web/dist/interface' {\n  interface Context {\n    abc: string;\n  }\n\n  interface State{\n    bbb: string;\n    ccc: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable JWT Component\nDESCRIPTION: This TypeScript code snippet shows how to enable the @midwayjs/jwt component and update the configuration with the passport component within a MidwayJS application's configuration file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\nimport { join } from 'path';\nimport * as jwt from '@midwayjs/jwt';\nimport { Configuration, ILifeCycle } from '@midwayjs/core';\nimport * as passport from '@midwayjs/passport';\n\n@Configuration({\n  imports: [\n    // ...\n    jwt,\n    passport,\n  ],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class MainConfiguration implements ILifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Method in MidwayJS with @midwayjs/mock\nDESCRIPTION: This code snippet demonstrates how to use `mockClassProperty` to mock a method of a class. It overrides the `getUser` method of the `UserService` class, making it return 'midway' instead of 'hello' during the test.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockClassProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  mockClassProperty(UserService, 'getUser', async () => {\n    return 'midway';\n  });\n\n  // userService.getUser() => 'midway'\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Service with weather data interface and http request\nDESCRIPTION: This TypeScript code shows the WeatherService implementation, using the WeatherInfo interface for type checking and `makeHttpRequest` to fetch the data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, makeHttpRequest } from '@midwayjs/core';\nimport { WeatherInfo } from '../interface';\n\n@Provide\nexport class WeatherService {\n  async getWeather(cityId: string): Promise<WeatherInfo> {\n    const result = await makeHttpRequest<WeatherInfo>(`https://midwayjs.org/resource/${cityId}.json`, {\n      dataType: 'json',\n    });\n\n    if (result.status === 200) {\n      return result.data as WeatherInfo;;\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ETCD Dependency - npm\nDESCRIPTION: This command installs the `@midwayjs/etcd` package as a dependency for your MidwayJS project. The `--save` flag ensures that the dependency is added to your `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/etcd.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/etcd@3 --save\n```\n\n----------------------------------------\n\nTITLE: Install Consul Component\nDESCRIPTION: Installs the `@midwayjs/consul` package and its associated type definitions using npm. This command adds the necessary dependencies for Consul integration into a MidwayJS project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/consul.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/consul@3 --save\n$ npm i @types/consul --save-dev\n```\n\n----------------------------------------\n\nTITLE: Deleting a Session in MidwayJS (Typescript)\nDESCRIPTION: This snippet demonstrates how to delete a user session in MidwayJS by setting `ctx.session` to `null`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nctx.session = null;\n```\n\n----------------------------------------\n\nTITLE: Configuring the default datasource for TypeORM in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to configure the default datasource name when using multiple datasources with TypeORM in a MidwayJS application. By setting `defaultDataSourceName`, you specify which datasource will be used when `InjectEntityModel` is called without explicitly providing a datasource name.  It provides a way to define a consistent default datasource.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-10-29-release-3-7.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const typeorm = {\n  dataSource: {\n    abc: {},\n    bcd: {}\n  },\n  defaultDataSourceName: 'bcd',\n}\n```\n\n----------------------------------------\n\nTITLE: Route Level Ignore Global Prefix (Typescript)\nDESCRIPTION: Shows how to ignore the global prefix on a route level.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/')\nexport class HomeController {\n  // 该路由不会忽略\n  @Get('/', {})\n  async homeSet() {\n  }\n\n  // 该路由会忽略全局前缀\n  @Get('/bbc', {ignoreGlobalPrefix: true})\n  async homeSet2() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Component - MidwayJS\nDESCRIPTION: This commit introduces the RabbitMQ component to the MidwayJS framework, enabling integration with RabbitMQ message broker. This likely involves adding necessary dependencies, configuration options, and classes/services for interacting with RabbitMQ.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nrabbitmq component ([#802](https://github.com/midwayjs/midway/issues/802)) ([d40197a](https://github.com/midwayjs/midway/commit/d40197a66cdff4a49ad16c6cd1a3467003c9a0a1))\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Through REQUEST_OBJ_CTX_KEY\nDESCRIPTION: This code snippet demonstrates how to access the context object through the built-in `REQUEST_OBJ_CTX_KEY` field. This is useful when designing interceptors or decorators where the user might not have explicitly declared the `ctx` attribute.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, REQUEST_OBJ_CTX_KEY } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    ctx.logger.info(this.ctx === this[REQUEST_OBJ_CTX_KEY]);\n    // => true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-environment Configuration in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to pass different configurations for different environments (e.g., default, unittest) to a MidwayJS application using the `globalConfig` property as an array. The configuration will be merged based on the environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { Bootstrap } = require('@midwayjs/bootstrap');\nBootstrap\n  .configure({\n  \tglobalConfig: [{\n      default: {/*...*/}\n      unittest: {/*...*/}\n    }]\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope Issue\nDESCRIPTION: This commit corrects an issue where singleton-scoped components were not properly injected within the request scope in MidwayJS. The fix ensures that singletons can be used within request-scoped contexts without errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Getting Middleware Name with static getName() - TypeScript\nDESCRIPTION: Illustrates how to define a middleware name using the static `getName()` method within a middleware class. This name can be used for sorting or debugging. If `getName()` is not defined, the class name is used by default.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/middleware.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, NextFunction> {\n\n  // ...\n\n  static getName(): string {\n    return 'report'; // Middleware name\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Midway with optimized ts-node settings\nDESCRIPTION: This command starts a Midway application in development mode with ts-node, disabling type checking (TS_NODE_TYPE_CHECK=false) and enabling transpilation-only mode (TS_NODE_TRANSPILE_ONLY=true) to improve startup speed. It includes debugging flags and specifies the 'local' environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/midway_slow_problem.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ncross-env TS_NODE_TYPE_CHECK=false TS_NODE_TRANSPILE_ONLY=true NODE_DEBUG=midway* NODE_ENV=local midway-bin dev --ts\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Context Type\nDESCRIPTION: This snippet defines the structure of the RabbitMQ context object, which includes the AMQP channel and the MidwayJS container request context. This context provides access to the AMQP channel and request-scoped services within the message handler.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Context = {\n  channel: amqp.Channel;\n  requestContext: IMidwayContainer;\n};\n```\n\n----------------------------------------\n\nTITLE: Testing JWT Authentication\nDESCRIPTION: These commands simulate generating a JWT and then making a request to `/passport/jwt` with the JWT in the Authorization header to test the JWT authentication strategy.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://127.0.0.1:7001/jwt\n\n结果 {\"t\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}\n\ncurl http://127.0.0.1:7001/passport/jwt -H \"Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n结果 {\"msg\": \"Hello Midway\",\"iat\": 1635468727,\"exp\": 1635468827}\n```\n\n----------------------------------------\n\nTITLE: Configure EJS view engine\nDESCRIPTION: Configures the default view engine to EJS and maps the '.ejs' file extension to the EJS engine.  This configuration is typically placed in the `src/config/config.default.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport const view = {\n  defaultViewEngine: 'ejs',\n  mapping: {\n    '.ejs': 'ejs',\n  },\n};\n\n// ejs config\nexport const ejs = {};\n```\n\n----------------------------------------\n\nTITLE: Delayed Task Execution\nDESCRIPTION: This snippet shows how to delay the execution of a task by a specified amount of time (in milliseconds). The `delay` option is passed as part of the options object to the `addJobToQueue` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst testQueue = this.bullmqFramework.getQueue('test');\nawait testQueue?.addJobToQueue({}, { delay: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Executing Midway v2 with ts-node and debug flags\nDESCRIPTION: This command starts a Midway v2 application in development mode using ts-node.  It leverages NODE_DEBUG instead of DEBUG for debugging output and specifies the 'local' environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/midway_slow_problem.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// midway v2\ncross-env NODE_DEBUG=midway* NODE_ENV=local midway-bin dev --ts\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Support\nDESCRIPTION: This commit introduces support for Amazon Web Services (AWS), expanding the platform compatibility and enabling deployment to AWS environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\naws support ([#526](https://github.com/midwayjs/midway-faas/issues/526)) ([9da022e](https://github.com/midwayjs/midway-faas/commit/9da022ecdf1e7770c21705131679940adc67ff3c))\n```\n\n----------------------------------------\n\nTITLE: Adding Casbin Dependency in package.json\nDESCRIPTION: This code snippet shows how to add the @midwayjs/casbin dependency to your project's package.json file. This ensures that the package is installed when you run npm install.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/casbin.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/casbin\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Captcha Component - src/configuration.ts\nDESCRIPTION: Imports and enables the @midwayjs/captcha component within the MidwayJS application's configuration file. This step registers the component with the framework, making its services available for injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/captcha.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as captcha from '@midwayjs/captcha';\n\n@Configuration({\n  imports: [\n    // ...other components\n    captcha\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type using ContentType\nDESCRIPTION: This snippet shows how to set the Content-Type header of the response using the `ContentType` function from `@midwayjs/hooks`. It sets the content type to `text/html`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  ContentType,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get(),\n  ContentType('text/html'),\n  async () => {\n    return '<h1>Hello World!</h1>';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Install grpc-helper dependency using npm\nDESCRIPTION: This command installs the `@midwayjs/grpc-helper` package as a dev dependency.  `@midwayjs/grpc-helper` provides utilities to simplify gRPC development, specifically generating typescript interface files from proto files.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/grpc.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/grpc-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Container Pseudo Code (TypeScript)\nDESCRIPTION: This code snippet represents a simplified version of the dependency injection container's logic for instantiating classes and injecting dependencies. It demonstrates how the container creates instances and assigns properties.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/***** The following is the dependency injection container pseudo code *****/\nconst userService = new UserService();\nconst userController = new UserController();\n\nuserController.userService = userService;\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameter Decorator with createCustomParamDecorator (TypeScript)\nDESCRIPTION: Defines a custom parameter decorator `User` using `createCustomParamDecorator` from `@midwayjs/core`. This decorator is associated with a unique key `USER_KEY`. It returns a ParameterDecorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_decorator.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/decorator/logging.decorator.ts\nimport { createCustomParamDecorator } from '@midwayjs/core';\n\n// Unique id inside the decorator\nexport const USER_KEY = 'decorator:user_key';\n\nexport function User(): ParameterDecorator {\n  return createCustomParamDecorator(USER_KEY, {});\n}\n```\n\n----------------------------------------\n\nTITLE: `strict` Query Parsing Effect Example\nDESCRIPTION: This JSON snippet illustrates the `strict` query parsing effect on the given request parameter using the `qs` module. Similar to the default, but the value of b is not treated as an array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"a\": [\"1\", \"3\" ],\n   \"b\": \"2\",\n   \"c\": [\"1\", \"2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus Dependency to package.json\nDESCRIPTION: This JSON snippet shows how to add the `@midwayjs/prometheus` package to the `dependencies` section of your `package.json` file. After adding, you need to reinstall dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/prometheus\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Development Script\nDESCRIPTION: This bash command executes the `dev` script defined in the `package.json` file using npm. This command is typically used to start the application in a development environment with features like automatic reloading upon file changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating an auto-generated primary key\nDESCRIPTION: Defines an auto-generated primary key using the `@PrimaryGeneratedColumn` decorator. This automatically increments the ID for each new entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// entity/photo.ts\nimport { EntityModel } from '@midwayjs/orm';\nimport { Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@EntityModel()\nexport class Photo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  filename: string;\n\n  @Column()\n  views: number;\n\n  @Column()\n  isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kafka Support in Midway\nDESCRIPTION: This commit introduces Kafka support within the MidwayJS framework. This includes integrating Kafka as a messaging system for asynchronous communication and data streaming. The implementation details are found in the linked commit.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/kafka/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Creating POST Request with Form Body Parameters (TypeScript)\nDESCRIPTION: This snippet demonstrates creating a POST request with form body parameters. `type('form')` sets the Content-Type header to `application/x-www-form-urlencoded`. Then the `send` function attach the body to the request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await createHttpRequest(app).post('/param/body').type('form').send({ id: '1' });\n```\n\n----------------------------------------\n\nTITLE: Deploy using shell script\nDESCRIPTION: This shell script executes the 's deploy' command to deploy the application from the `.serverless` directory. It is intended to be used on a Mac environment, but can be adapted for other platforms.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/aliyun_faas.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ns deploy\n```\n\n----------------------------------------\n\nTITLE: Registering tsconfig-paths\nDESCRIPTION: This code snippet imports and registers `tsconfig-paths` in the `src/configuration.ts` file.  This allows the application to resolve paths defined in `tsconfig.json` during the development phase using `ts-node`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/alias_path.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport 'tsconfig-paths/register';\n// ...\n```\n\n----------------------------------------\n\nTITLE: Route Priority Examples in TypeScript\nDESCRIPTION: This snippet shows examples of route priorities in MidwayJS. It lists different route patterns and their relative priorities, demonstrating how the framework resolves conflicts between routes with varying specificity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/router_table.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/api/invoke/abc\n/api/invoke/*\n/api/abc\n/api/*\n/abc\n/*\n```\n\n----------------------------------------\n\nTITLE: Creating a Midway Hooks App with degit\nDESCRIPTION: This code snippet shows how to use `degit` to scaffold a new Midway Hooks application from a template. The template name is specified as part of the GitHub repository URL.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/intro.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit https://github.com/midwayjs/hooks/examples/<name>\n```\n\n----------------------------------------\n\nTITLE: Importing and Enabling Captcha Component (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import and enable the @midwayjs/captcha component within a MidwayJS application by adding it to the `imports` array of the `@Configuration` decorator in `src/configuration.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/captcha.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as captcha from '@midwayjs/captcha';\n\n@Configuration({\n  imports: [\n    // ...other components\n    captcha\n  ],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Custom ServerResponse Classes for Different Users (TypeScript)\nDESCRIPTION: This code defines two custom `ServerResponse` classes (`UserServerResponse` and `AdminServerResponse`) with different JSON templates for different user roles. This allows for role-based response customization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// src/response/api.ts\nexport class UserServerResponse extends HttpServerResponse {}\nUserServerResponse.JSON_TPL = (data, isSuccess) => {\n  if (isSuccess) {\n    return {\n      status: 200,\n      ...data,\n    };\n  } else {\n    return {\n      status: 500,\n      message: 'limit exceed'\n    };\n  }\n};\n\nexport class AdminServerResponse extends HttpServerResponse {}\nAdminServerResponse.JSON_TPL = (data, isSuccess) => {\n  if (isSuccess) {\n    return {\n      status: 200,\n      router: data.router,\n      ...data\n    };\n  } else {\n    return {\n      status: 500,\n      message: 'interal error',\n      ...data\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Data Transfer Objects (DTOs) in TypeScript\nDESCRIPTION: These classes define the data structures for video, account, and tab information. They are used as the return types for the services and as input/output for the pipeline stages. These objects facilitates data transfer within the pipeline stages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoDto {\n  videoId: string;\n  videoUrl: string;\n  videoTitle: string;\n}\nclass AccountDto {\n  id: string;\n  nick: string;\n  isFollow: boolean;\n}\nclass TabDto {\n  tabId: string;\n  title: string;\n  index: number;\n}\ninterface HomepageDto {\n  videos: VideoDto[];\n  account: AccountDto;\n  tab: TabDto;\n}\n```\n\n----------------------------------------\n\nTITLE: Disable BodyParser Middleware\nDESCRIPTION: This TypeScript configuration demonstrates how to disable the bodyParser middleware in a MidwayJS Koa application.  Setting `enable: false` within the `bodyParser` configuration will prevent the framework from automatically parsing request bodies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  bodyParser: {\n    enable: false,\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Context Logger Format\nDESCRIPTION: This TypeScript code shows how to configure the output format of the MQTT context logger. The `contextLoggerFormat` function allows customizing the log message structure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mqtt.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   mqtt: {\n     // ...\n     contextLoggerFormat: info => {\n       const { jobId, from } = info.ctx;\n       return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.message}`;\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Bull Board Dependency in package.json (JSON)\nDESCRIPTION: This snippet represents the dependency entry within `package.json` for `@midwayjs/bull-board`, indicating that the project relies on the Bull Board component for UI management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bull.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/bull-board\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP status code using HttpCode\nDESCRIPTION: This snippet shows how to set the HTTP status code of the response using the `HttpCode` function from `@midwayjs/hooks`.  It sets the status code to 201.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  HttpCode,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get(),\n  HttpCode(201),\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/bullmq Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the @midwayjs/bullmq package as a dependency in your project's `package.json` file.  After adding this, you need to reinstall the dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bullmq.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/bullmq\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path in MidwayJS\nDESCRIPTION: This commit fixes an issue in the Swagger UI related to the JSON path. The provided commit hash links to the specific changes made to resolve the bug.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/otel/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Customizing Log Display Format - TypeScript\nDESCRIPTION: This snippet demonstrates how to customize the log display format using the `printFormat` option when creating a logger.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AutoConfiguration {\n  @App()\n  app: IMidwayApplication;\n\n  async onReady() {\n    this.app.createLogger('custom1', {\n      printFormat: (info) => {\n        return `${info.timestamp} ${info.level} ${info.message}`;\n      },\n    });\n\n    this.app.getLogger('custom1').info('hello world');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HttpCode with HttpCode\nDESCRIPTION: This snippet demonstrates how to set the HTTP status code of the response using the `HttpCode` function in Midway Hooks. It sets the status code to 201.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  HttpCode\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get(),\n  HttpCode(201),\n  async () => {\n    return 'Hello World!';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Server Path Configuration\nDESCRIPTION: This snippet demonstrates how to configure the server path for Socket.IO, specifying the URL path under which the Socket.IO server will be accessible. The path should match on both the server and client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default\nexport default {\n  socketIO: {\n    Path: '/testPath' // This is the server path\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Local Authentication\nDESCRIPTION: This command simulates a POST request to `/passport/local` with username and password to test the local authentication strategy. The content type is set to application/json.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:7001/passport/local -d '{\"username\": \"demo\", \"pwd\": \"1234\"}' -H \"Content-Type: application/json\"\n\n结果 {\"username\": \"demo\", \"pwd\": \"1234\"}\n```\n\n----------------------------------------\n\nTITLE: Extending the MidwayError class in TypeScript\nDESCRIPTION: This snippet shows how to extend the built-in `MidwayError` class to create custom error types in MidwayJS. This allows for adding additional attributes and logic to standard errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/custom_error.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MidwayError extends Error {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding lint and fix scripts\nDESCRIPTION: This TypeScript snippet shows how to add lint and lint:fix scripts to a project's package.json file. These scripts use mwts to check and fix code style issues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwts.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n  \"scripts\": {\n    \"lint\": \"mwts check \",\n    \"lint:fix\": \"mwts fix\",\n  },\n```\n\n----------------------------------------\n\nTITLE: Manually setting redirect using Koa Context\nDESCRIPTION: This snippet demonstrates manually setting a redirect using the Koa Context object obtained via `useContext`. It calls the `ctx.redirect` method to perform the redirection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/api.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext,\n} from '@midwayjs/hooks';\n\nexport default Api(\n  Get('/demo'),\n  async () => {\n    const ctx = useContext<Context>();\n    ctx.redirect('/hello');\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Template Package Name with npm init\nDESCRIPTION: This command shows how to use a custom template from an npm package, using `-t` or `--template`. `custom-template` should be the name of the npm package containing the template.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- -t=custom-template\n```\n\n----------------------------------------\n\nTITLE: Fixing express routing middleware - Bug fix\nDESCRIPTION: This snippet describes a bug fix where the express routing middleware now correctly takes effect at the controller level. This ensures that routes are properly handled by controllers within the MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Configure Prometheus Labels in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to configure custom labels for Prometheus metrics within a MidwayJS application. It allows developers to categorize and filter metrics based on application-specific attributes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultConfig } from '@midwayjs/prometheus';\n\nexport const prometheus: DefaultConfig = {\n  labels: {\n    APP_NAME: 'demo_project',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Prometheus Server Undefined onStop\nDESCRIPTION: This bug fix addresses an issue where the HTTP server in the Prometheus module could be undefined during the `onStop` lifecycle event. The fix ensures that the server is properly initialized and available during shutdown.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Supporting entry file in bootstrap in MidwayJS\nDESCRIPTION: This commit adds support for specifying an entry file during the bootstrap process in MidwayJS. This gives developers more control over the application's initialization, allowing them to customize the startup sequence or load specific modules or configurations before the main application logic is executed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: UserService with RegValid and Default CutPipe\nDESCRIPTION: This code demonstrates the usage of the `RegValid` decorator after the `CutPipe` has been registered as a default pipe. Even without explicitly passing `CutPipe` to `RegValid`, the pipeline is executed because it's been registered as a default.  The phone number is validated, and then sliced to the last 6 digits.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipe.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserService {\n   async invoke(@RegValid(/\\d{11}/) phoneNumber: string) {\n     return phoneNumber;\n   }\n}\n\ninvoke(13712345678) => '345678'\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Timeout in f.yml\nDESCRIPTION: This snippet configures the function execution timeout in the `f.yml` file. The `timeout` parameter is set to 60 seconds.  Adjust the timeout value according to the expected execution time of the function to prevent premature termination.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_to_tencent.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: midway-faas-examples\n\nprovider:\n  name: tencent\n  timeout: 60 # 单位秒\n```\n\n----------------------------------------\n\nTITLE: Start Port Configuration (json)\nDESCRIPTION: This snippet shows the addition of a port configuration that the framework now requires upon startup. If no port is specified, the application might fail to start listening on any port.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  egg: {\n    port: 7001,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Passport Module\nDESCRIPTION: This code snippet imports the Passport module into the MidwayJS configuration file. It also imports the JWT module, as the example uses JWT authentication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { ILifeCycle } from '@midwayjs/core';\nimport { Configuration } from '@midwayjs/decorator';\nimport * as jwt from '@midwayjs/jwt';\nimport * as passport from '@midwayjs/passport';\n\n@Configuration({\n  imports: [jwt, passport],\n  // ...\n})\nexport class ContainerLifeCycle implements ILifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Install view-nunjucks component\nDESCRIPTION: This command installs the `@midwayjs/view-nunjucks` component, which enables Nunjucks template rendering in MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/quick_guide.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/view-nunjucks --save\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/jwt dependency\nDESCRIPTION: This command installs the @midwayjs/jwt component as a project dependency using npm. The --save flag adds the dependency to the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/jwt.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/jwt@3 --save\n```\n\n----------------------------------------\n\nTITLE: Update Tablestore Dependency to v5.1.1\nDESCRIPTION: Updates the tablestore dependency to version 5.1.1.  This update addresses any known issues or vulnerabilities in the Tablestore library, ensuring stability and security.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/tablestore/CHANGELOG.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nupdate dependency tablestore to v5.1.1 ([#1743](https://github.com/midwayjs/midway/issues/1743))\n```\n\n----------------------------------------\n\nTITLE: Specify template package name\nDESCRIPTION: This command specifies a custom template package name, either from npm or a local path. The `-t` or `--template` parameter is used to provide the package name or path to the template.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/create_midway.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- -t=custom-template\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- -t=./custom-template\n```\n\n----------------------------------------\n\nTITLE: Default Koa Configuration\nDESCRIPTION: This TypeScript code shows the default configuration for the `@midwayjs/Koa` package in a MidwayJS application. It specifies the port number for the Koa server. This configuration can be modified to customize the server's behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  koa: {\n    port: 7001\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Default Export (TypeScript)\nDESCRIPTION: This snippet demonstrates the `export =` approach to exporting in TypeScript.  The document recommends avoiding this approach.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ts 写法\nexport = {\n  a: 1,\n};\n\nexport = () => {\n  console.log(111);\n};\n```\n\n----------------------------------------\n\nTITLE: TableStore Multiple Clients Configuration (TypeScript)\nDESCRIPTION: This code configures multiple TableStore clients, allowing access to different TableStore instances or databases. Each client is defined with its own set of credentials and endpoint information, differentiated by keys like 'db1' and 'db2'. The stsToken is required when using STS authorization.  These configurations are generally placed in a config file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/tablestore.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const tableStore = {\n  clients: {\n    db1: {\n      accessKeyId: '<your access key id>',\n      secretAccessKey: '<your access key secret>',\n      stsToken:\n        '<your stsToken>' /*When you use the STS authorization, you need to fill in. ref:https://help.aliyun.com/document_detail/27364.html*/,\n      endpoint: '<your endpoint>',\n      instancename: '<your instance name>',\n    },\n    db2: {\n      accessKeyId: '<your access key id>',\n      secretAccessKey: '<your access key secret>',\n      stsToken:\n        '<your stsToken>' /*When you use the STS authorization, you need to fill in. ref:https://help.aliyun.com/document_detail/27364.html*/,\n      endpoint: '<your endpoint>',\n      instancename: '<your instance name>',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Deployment Region in YAML\nDESCRIPTION: This snippet shows how to configure the deployment region in a `serverless.yml` file. The `region` property under the `provider` section determines the Tencent Cloud region where the application will be deployed. Common region values include `ap-shanghai`, `ap-guangzhou`, `ap-beijing`, and `ap-hongkong`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_tencent_faq.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice: fc-qinyue-test\n\nprovider:\n  name: tencent\n  runtime: nodejs10\n  region: ap-shanghai\n```\n\n----------------------------------------\n\nTITLE: Fixing Lifecycle Bug in Midway.js 2.x\nDESCRIPTION: This commit addresses a bug related to the lifecycle management in Midway.js 2.x. The fix ensures proper initialization and execution of components within the framework's lifecycle. The fix is identified by the commit hash 22d3e121d98575e994282c93b7522ddcf76942be.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Midway Logger Transport Configuration (config.default.ts)\nDESCRIPTION: This code shows the configuration for default transports in the Midway logger, including `console`, `file`, and `error`.  It configures these transports under the `transports` property within the `default` section of the `midwayLogger` configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { MidwayConfig } from '@midwayjs/core';\n\nexport default {\n  midwayLogger: {\n    default: {\n      transports: {\n        console: {\n          // console transport 配置\n        },\n        file: {\n          // file transport 配置\n        },\n        error: {\n          // error transport 配置\n        },\n      }\n    },\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Fixing singleton invoke request scope in MidwayJS\nDESCRIPTION: This code snippet addresses an issue where singleton-scoped invocations were not properly validated within request scopes in MidwayJS. It resolves issue #1622 and includes the corresponding commit hash.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/oss/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- singleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Configuring MikroORM Logging in Midway (Typescript)\nDESCRIPTION: This snippet shows how to configure MikroORM logging within a Midway application by specifying a logger client in the `midwayLogger` configuration and linking it to the MikroORM data source. This enables the recording of SQL and other relevant information.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mikro.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexporg default {\n\tmidwayLogger: {\n    clients: {\n      mikroLogger: {\n        // ...\n      }\n    }\n  },\n  mikro: {\n    dataSource: {\n      default: {\n        entities: [Author, Book, BookTag, Publisher, BaseEntity],\n        // ...\n        logger: 'mikroLogger',\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Service by ID\nDESCRIPTION: This command stops a specific service managed by PM2 using its ID.  The ID is a numerical identifier assigned to each service by PM2. It provides a quick way to manage individual services.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/pm2.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pm2 stop 1 # stop service number 1\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration - Using Credentials - JavaScript\nDESCRIPTION: This JavaScript code shows a `fetch` call with `credentials: 'include'`, instructing the browser to include cookies in the request.  The server must also be configured to allow credentials.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cross_domain.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfetch(url, {\n   credentials: \"include\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/bullmq dependency to package.json\nDESCRIPTION: This snippet shows how to add the @midwayjs/bullmq package as a dependency in your package.json file. After adding it, you need to reinstall the dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/bullmq.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/bullmq\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Redirection with API in MidwayJS\nDESCRIPTION: This code demonstrates how to perform a redirection using the `ctx.redirect()` API in MidwayJS. The code redirects the `/` route to `/login_check`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/controller.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n    this.ctx.redirect('/login_check');\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Dependencies with npm\nDESCRIPTION: This snippet shows how to install the necessary dependencies for RabbitMQ integration in a MidwayJS project, including the core RabbitMQ module, its type definitions, and amqplib.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/rabbitmq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/rabbitmq@2 amqplib --save\n$ npm i @types/amqplib --save-dev\n```\n\n----------------------------------------\n\nTITLE: Disable Koa Port\nDESCRIPTION: This snippet disables the port configuration for the Koa application when using the sticky session approach.  The port can be added to `config.local.ts` or in the package.json scripts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n   koa: {\n     // port: 7001,\n   },\n   socketIO: {\n     //...\n   },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Client (TypeScript)\nDESCRIPTION: This snippet shows how to configure a default timeout for the HTTP client using the `default` property within the `httpClient` configuration object in `config.default.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/service_factory.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nexport const httpClient = {\n  default: {\n    timeout: 3000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HSF Decorator in Midway.js\nDESCRIPTION: This commit incorporates the HSF (High-Speed Framework) decorator into Midway.js. The decorator facilitates integration with HSF for enhanced performance and scalability. The commit hash is d5afed3ace4e3570b29a2c789b2683f0cd4fd697.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Install Nunjucks view dependency\nDESCRIPTION: Installs the @midwayjs/view-nunjucks package as a project dependency. This package provides the necessary integration for using Nunjucks templates within a MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/view-nunjucks --save\n```\n\n----------------------------------------\n\nTITLE: Accessing form data in Tencent Cloud Gateway\nDESCRIPTION: This TypeScript code shows how to access form data when using Tencent Cloud Gateway. The `ctx.request.body` will contain the form data as a Javascript object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\" B \"} => object\n```\n\n----------------------------------------\n\nTITLE: Local Authentication Request - Bash\nDESCRIPTION: This snippet shows how to simulate a request to the local authentication endpoint using curl. It sends a POST request with the username and password in the request body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/passport.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:7001/passport/local -d '{\"username\": \"demo\", \"password\": \"1234\"}' -H \"Content-Type: application/json\"\n\nResult {\"username\": \"demo\", \"password\": \"1234\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Midway.js application\nDESCRIPTION: This command uses the globally installed `midway-init` tool to create a new Midway.js application. It typically prompts the user for project details like name and template.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/quickstart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-init\n```\n\n----------------------------------------\n\nTITLE: Specifying npm Client with npm init\nDESCRIPTION: This command allows specifying a custom npm client using the `--npm` parameter, such as `tnpm`. This is useful when working with private or internal npm registries.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- --npm=tnpm\n```\n\n----------------------------------------\n\nTITLE: Checking Compatibility using pnpm\nDESCRIPTION: This command checks the compatibility of installed dependencies within a Midway project using pnpm. It uses the `pnpx` command to execute the `midway-version` tool without requiring global installation. The tool analyzes the `node_modules` directory to verify compatibility between installed versions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/version_check.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpx midway-version@latest\n```\n\n----------------------------------------\n\nTITLE: Using @Trace decorator\nDESCRIPTION: This snippet demonstrates how to use the `@Trace` decorator provided by the Otel component to add a trace node to a method. This records the execution time and status of the method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserService {\n\n  @Trace('user.get')\n  async getUser() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @midwayjs/info Dependency to package.json\nDESCRIPTION: This JSON snippet demonstrates how to manually add the @midwayjs/info component as a dependency within the dependencies section of the package.json file. It specifies the version of the package to be used.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/info.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/info\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Create JWT Passport Middleware\nDESCRIPTION: This TypeScript code creates a middleware for JWT passport authentication. It extends `PassportMiddleware` and specifies the `JwtStrategy`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/jwt.middleware.ts\n\nimport { Middleware } from '@midwayjs/core';\nimport { PassportMiddleware, AuthenticateOptions } from '@midwayjs/passport';\nimport { JwtStrategy } from '../strategy/jwt.strategy';\n\n@Middleware()\nexport class JwtPassportMiddleware extends PassportMiddleware(JwtStrategy) {\n  getAuthenticateOptions(): Promise<AuthenticateOptions> | AuthenticateOptions {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IValveHandler Stages in TypeScript\nDESCRIPTION: These classes implement the `IValveHandler` interface and represent individual stages in the pipeline. Each stage has an `alias` and an `invoke` method. The `invoke` method retrieves data using the `TestService` and returns a Promise. The `@Provide()` decorator makes the handlers injectable, and `@Inject()` is used to inject the `TestService`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipeline.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns the video information\n@Provide()\nclass VideoFeeds implements IValveHandler {\n  alias = 'videos';\n\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<VideoDto[]> {\n    return this.service.getVideos(ctx.args);\n  }\n}\n// Return account information\n@Provide()\nclass AccountMap implements IValveHandler {\n  alias = 'account';\n\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<AccountDto> {\n\n    // Get data execution logic\n    return this.service.getAccount(ctx.args);\n  }\n}\n// Returns tab information\n@Provide()\nclass CrowFeeds implements IValveHandler {\n  alias = 'tab';\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<TabDto> {\n    // Get data execution logic\n    return this.service.getTab(ctx.args);\n  }\n}\n// Catch the entire error exception\n@Provide()\nclass ErrorFeeds implements IValveHandler {\n  alias = 'tab';\n  @Inject()\n  service: TestService;\n\n  async invoke(ctx: IPipelineContext): Promise<TabDto> {\n    // Get data execution logic\n    throw new Error('this is error feeds');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrated Call to Post Request Handler (Midway Hooks)\nDESCRIPTION: Demonstrates an integrated call to the `post` function, passing the string 'Midway' as the `name` parameter. It logs the response object containing the message and the method. This relies on the `post` function being defined in `./api/lambda`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/file-route.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { post } from './api/lambda';\nconst response = await post('Midway');\nconsole.log(response.data); // { message: 'Hello Midway!', method: 'POST'}\n```\n\n----------------------------------------\n\nTITLE: Getting Base Directory Path\nDESCRIPTION: This code shows how to use `this.app.getBaseDir()` to get the project's base directory path. This is typically the `src` directory in development and the `dist` directory after compilation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.getBaseDir();\n// => /my_project/src\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Server Namespace Configuration\nDESCRIPTION: This snippet demonstrates how to configure a namespace on the server using `@WSController`. The namespace organizes socket connections and events. The namespace must match on both server and client.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/socketio.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// server\n@WSController('/test') // here is the namespace of the server\nexport class HelloController {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in jest.setup.js (JavaScript)\nDESCRIPTION: This JavaScript code sets a global environment variable `MIDWAY_TS_MODE` to `true` within the jest.setup.js file. It demonstrates how to configure the test environment before running tests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/testing.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.setup.js\nprocess.env.MIDWAY_TS_MODE = 'true';\n```\n\n----------------------------------------\n\nTITLE: Excluding Endpoint with @ApiExcludeEndpoint in Typescript\nDESCRIPTION: This snippet shows how to exclude a single endpoint from Swagger documentation using the `@ApiExcludeEndpoint` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/swagger.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller('/hello')\nexport class HelloController {\n  \n  @ApiExcludeEndpoint()\n  @Get()\n  async getUser() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request returning Text in Typescript\nDESCRIPTION: This snippet showcases how to retrieve data in text format using `makeHttpRequest`. The `dataType` option is set to 'text'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  method: 'GET',\n  dataType: 'text',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Content Type Using Decorator (Typescript)\nDESCRIPTION: This snippet demonstrates how to set the content type of a response using the `@ContentType` decorator in a MidwayJS controller method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, ContentType } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Get('/')\n  @ContentType('html')\n  async login() {\n    return '<body>hello world</body>';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing delay load in MidwayJS\nDESCRIPTION: This commit resolves an issue concerning delayed loading functionality in MidwayJS, specifically when used without layers and egg-cluster. The fix ensures that delayed loading operates correctly in these specific configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: UserService Class Example\nDESCRIPTION: This code snippet demonstrates a potential issue where a `UserService` class is not properly decorated with `@Provide` or an equivalent decorator, leading to a dependency injection error when used in a `HomeController` class. The absence of `@Provide` prevents the class from being registered in the dependency injection container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/error_code.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nexport class UserService {}\n\n// ...\n@Controller()\nexport class HomeController {\n  @Inject()\n  userService: UserService;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Connection\nDESCRIPTION: Configures the connection information for a SQLite database within `config.default.ts`. It includes the database type and path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const orm = {\n  type: 'sqlite',\n  database: path.join(__dirname, '../../test.sqlite'),\n  synchronize: true,\n  logging: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Configure PKG in package.json\nDESCRIPTION: This snippet configures the `package.json` file for creating binary builds using `pkg`. It defines the entry file (`bin`), specifies the files to include (`pkg.scripts`), defines assets to be included (`pkg.assets`), specifies the target platform (`pkg.targets`), and defines the output directory (`pkg.outputPath`).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"my-midway-project\",\n   //...\n   \"devDependencies\": {\n     //...\n     \"@midwayjs/bundle-helper\": \"^1.2.0\",\n     \"pkg\": \"^5.8.1\"\n   },\n   \"scripts\": {\n     //...\n     \"pkg\": \"pkg . -d > build/pkg.log\",\n     \"bundle\": \"bundle && npm run build\"\n   },\n   \"bin\": \"./bootstrap.js\",\n   \"pkg\": {\n     \"scripts\": \"dist/**/*.js\",\n     \"assets\": [],\n     \"targets\": [\n       \"node18-macos-arm64\"\n     ],\n     \"outputPath\": \"build\"\n   },\n   //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ORM and TypeORM\nDESCRIPTION: Installs the @midwayjs/orm and typeorm packages as dependencies for the project. This command adds the necessary libraries for database interaction using TypeORM within the MidwayJS framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @midwayjs/orm@2 typeorm --save\n```\n\n----------------------------------------\n\nTITLE: Installing MidwayJS Upload Dependency\nDESCRIPTION: Installs the `@midwayjs/upload` package as a project dependency using npm. This command adds the package to the `node_modules` directory and updates the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/upload@3 --save\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/tags dependency\nDESCRIPTION: This command installs the `@midwayjs/tags` package as a dependency to your project, allowing you to use the tag management functionalities within your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/tags --save\n```\n\n----------------------------------------\n\nTITLE: Throwing an Error in a Serverless Trigger (MidwayJS)\nDESCRIPTION: This code snippet demonstrates how to throw a standard JavaScript `Error` within a MidwayJS serverless function. The `@ServerlessTrigger` decorator indicates that this function is triggered by a serverless event. The thrown error will be handled by the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_error.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@ServerlessTrigger(//...)\nasync invoke() {\n  throw new Error('abc');\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing More Linting Issues in Midway.js\nDESCRIPTION: This commit fixes additional linting issues within the Midway.js project. The change ensures code style consistency and adherence to coding standards.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_47\n\nLANGUAGE: Other\nCODE:\n```\n12873dc\n```\n\n----------------------------------------\n\nTITLE: Injecting Redis Service with Selected Default Client\nDESCRIPTION: This code shows how the configured default Redis client is injected into a service in MidwayJS.  The redisService instance will be an instance of the 'default2' client as configured in the previous snippet. Requires '@midwayjs/redis'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2022-11-18-release-3-8.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  redisService: RedisService;\n\n  async invoke() {\n    // this.redisService 中包裹的是 default2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy application\nDESCRIPTION: Starts the production server using npm. This command is used to deploy the application to a production environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for EggJS in MidwayJS\nDESCRIPTION: This command installs the necessary dependencies for using EggJS within a MidwayJS project. It includes the `@midwayjs/web` package for the Midway EggJS adaptation layer and the `egg` package for the EggJS framework itself. Additionally, it installs `@midwayjs/egg-ts-helper` as a dev dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/web@3 egg --save\n$ npm i @midwayjs/egg-ts-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Check code style\nDESCRIPTION: Runs the linter to check the code style. It helps to maintain a consistent code style across the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run lint\n```\n\n----------------------------------------\n\nTITLE: Delaying load without layer/egg-cluster - Bug fix\nDESCRIPTION: This snippet outlines a bug fix addressing delayed loading issues when layer or egg-cluster are not present. This change ensures that resources load correctly in various deployment scenarios.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Installing Database Driver (PostgreSQL Example)\nDESCRIPTION: This command installs the PostgreSQL driver for Sequelize.  This driver is needed to connect to a PostgreSQL database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# for PostgreSQL or CockroachDB\nnpm install pg --save\n```\n\n----------------------------------------\n\nTITLE: Fixing Express Routing Middleware - Javascript\nDESCRIPTION: This commit fixes an issue where the Express routing middleware was only taking effect at the controller level within the MidwayJS framework. This ensures that middleware is applied correctly across the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nb9272e0971003443304b0c53815be31a0061b4bd\n```\n\n----------------------------------------\n\nTITLE: Configuring Default ETCD Client - config.default.ts\nDESCRIPTION: This TypeScript code snippet shows the configuration for the default ETCD client in `config.default.ts`.  It specifies the host address for the ETCD server.  Multiple hosts can be provided for high availability.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/etcd.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  etcd: {\n    client: {\n      host: [\n        '127.0.0.1:2379'\n      ]\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Proxy Module in Configuration\nDESCRIPTION: This code snippet demonstrates how to import the @midwayjs/http-proxy module into your MidwayJS application's configuration file. It adds the proxy component to the imports array within the @Configuration decorator, enabling its functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/http-proxy/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as proxy from '@midwayjs/http-proxy';\n@Configuration({\n  imports: [\n    // ...other components\n    proxy\n  ],\n})\nexport class AutoConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Redirecting manually\nDESCRIPTION: This snippet demonstrates how to manually redirect the request to another URL using the Koa context in Midway Hooks. It redirects the request from `/demo` to `/hello` using `ctx.redirect('/hello')`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get('/demo'),\n  async () => {\n    const ctx = useContext<Context>();\n    ctx.redirect('/hello');\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Mocking Context in Midway.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to mock the context in a Midway.js application using the `mockContext` method from `@midwayjs/mock`. It mocks the `user` property of the context to `midway`.  It requires the `createApp` and `createHttpRequest` functions to be defined elsewhere in the project. The mock is applied before any middleware is executed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockContext } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  // 模拟上下文\n  mockContext(app, 'user', 'midway');\n\n  const result1 = await createHttpRequest(app).get('/');\n  // ctx.user => midway\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Cache Configuration for Captcha (TypeScript)\nDESCRIPTION: This TypeScript snippet configures the cache-manager component to use memory for storing captcha data.  If you want to use Redis, see the documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/captcha.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  cacheManager: {\n    clients: {\n      captcha: {\n        store: 'memory',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Execute Luckyeye check\nDESCRIPTION: This command executes the `check` script defined in `package.json`, which in turn runs the `luckyeye` tool to check for errors based on the configured rule packages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/luckyeye.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run check\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Transport\nDESCRIPTION: This code snippet shows how to register a custom transport with the TransportManager. This makes the custom transport available for use in the logger configuration. Requires `@midwayjs/logger`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TransportManager } from '@midwayjs/logger';\n\nTransportManager.set('custom', CustomTransport);\n```\n\n----------------------------------------\n\nTITLE: WebMiddleware Interface Update - TypeScript\nDESCRIPTION: This commit updates WebMiddleware to IWebMiddleware.  This likely involves changing the type or interface definition used for web middleware components within the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\ne69cf286fa76ab3144404806c5cbbe8642cdcd61\n```\n\n----------------------------------------\n\nTITLE: Installing MidwayJS Cron Component\nDESCRIPTION: This command installs the `@midwayjs/cron` component using npm. This component allows you to schedule tasks to run at specific times or intervals within your MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/cron@3 --save\n```\n\n----------------------------------------\n\nTITLE: Support Bootstrap Loading Config First - Feature\nDESCRIPTION: This feature adds support for loading the configuration before the bootstrap process starts. This ensures that the application has access to the necessary configuration settings from the beginning.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: JSONP Configuration (TypeScript)\nDESCRIPTION: Configures JSONP settings in the `src/config/config.default.ts` file. This includes setting the callback function name and the maximum length of the JSONP response.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cross_domain.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  jsonp: {\n    callback: 'jsonp',\n    limit: 512,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Install pkg Locally\nDESCRIPTION: This command installs the `pkg` package locally as a development dependency. `pkg` is a tool for packaging Node.js projects into standalone executables.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/deployment.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i pkg --save-dev\n```\n\n----------------------------------------\n\nTITLE: Install MidwayJS Typegoose Component\nDESCRIPTION: This bash command shows how to install the @midwayjs/typegoose component, which provides access to MongoDB in a MidwayJS application. Version 3 of the component is used here.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm i @midwayjs/typegoose@3 --save\n```\n\n----------------------------------------\n\nTITLE: Installing tsconfig-paths\nDESCRIPTION: This command installs the `tsconfig-paths` package as a development dependency. `tsconfig-paths` is used to resolve module paths defined in `tsconfig.json` during development.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/alias_path.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i tsconfig-paths --save-dev\n```\n\n----------------------------------------\n\nTITLE: Install @midwayjs/bull via npm\nDESCRIPTION: This command installs the @midwayjs/bull package using npm. The `--save` flag adds the package as a dependency to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/bull.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/bull@3 --save\n```\n\n----------------------------------------\n\nTITLE: Fixing Loggers with Egg Logger Instance in MidwayJS\nDESCRIPTION: This bug fix ensures that loggers use the Egg.js logger instance and invokes the `disableConsole` method. The commit is b5d18e22764b06b0a9f95e924c475678e78f6b42 and addresses issue #849.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Fixing Delay Load in MidwayJS\nDESCRIPTION: This bug fix addresses an issue related to delay loading in MidwayJS when used without layer and egg-cluster. It ensures that delay loading functions correctly in various deployment scenarios, preventing errors or unexpected behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: mwtsc in watch mode\nDESCRIPTION: This command runs mwtsc in watch mode, which automatically recompiles the code whenever changes are detected.  It utilizes the `--watch` flag.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc --watch\n```\n\n----------------------------------------\n\nTITLE: Installing ARMS SDK\nDESCRIPTION: This snippet shows how to install the opentelemetry-arms package using npm, which is required for integrating with Alibaba Cloud ARMS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# arms sdk\n$ npm install --save opentelemetry-arms\n```\n\n----------------------------------------\n\nTITLE: Define Prometheus as dependency\nDESCRIPTION: Adds @midwayjs/prometheus as a dependency in the package.json file. This ensures that the package is installed when the project is set up.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/prometheus\": \"^3.0.0\",\n    // ...\n  },\n  \"devDependencies\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Dependency - npm\nDESCRIPTION: This command installs the `@midwayjs/ws` package as a dependency in your project. This package provides the necessary components for creating and managing WebSocket connections.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/ws.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/ws@3 --save\n```\n\n----------------------------------------\n\nTITLE: Fixing Bootstrap Cache Error in MidwayJS\nDESCRIPTION: This code snippet addresses a bootstrap cache error within the MidwayJS framework. The commit hash is 59ec10096418fd1e7be2dbce8f254bce1073e931 and resolves issue #955.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Singleton Service Definition (Old)\nDESCRIPTION: This code snippet shows the old way of defining a singleton service in MidwayJS using `@Scope` and `@Provide` decorators.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2023-01-30-release-3.10.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Scope(ScopeEnum.Singleton)\n@Provide()\nclass SingletonService {}\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/oss Dependency\nDESCRIPTION: This command installs the @midwayjs/oss package as a project dependency using npm. The --save flag ensures the dependency is added to the package.json file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/oss.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/oss@3 --save\n```\n\n----------------------------------------\n\nTITLE: Service File Structure\nDESCRIPTION: This code shows the structure of files in the src directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/service.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n➜  my_midway_app tree\n.\n├── src\n│   ├── controller\n│   │   ├── user.ts\n│   │   └── home.ts\n│   ├── interface.ts\n│   └── service\n│       └── user.ts\n├── test\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Fixing RegExp for Root Path Match in Midway.js\nDESCRIPTION: This code snippet represents a bug fix addressing an issue with the regular expression used for matching the root path within the Midway.js project. The fix likely ensures accurate identification and handling of requests to the root path.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n97ccc0391cd1436ef5106a7e35f0d81dca4477dd\n```\n\n----------------------------------------\n\nTITLE: Using the @Model Decorator in TypeScript\nDESCRIPTION: This code shows how to use the custom `@Model` decorator along with the `@provide` decorator in a TypeScript class. `@provide` makes the class available in the IoC container.  `@Model` triggers the associated logic defined earlier.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/decorator.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Model } from '../decorator/model';\n\n// Provide 的作用是暴露出一个 IoC id，能被 IoC 扫描到\n@provide()\n// Model 的作用是我们自己的逻辑能被执行（保存的元数据）\n@Model()\nexport class UserModel {}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code in MidwayJS Project\nDESCRIPTION: This commit focuses on code formatting within the MidwayJS project. It applies consistent coding style and formatting rules across the codebase. The main purpose of the commit is to improve readability and maintainability of the code, ensuring consistency throughout the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n456cc14513bdb000d1aa3130e9719caf7a8a803f\n```\n\n----------------------------------------\n\nTITLE: Task Component Configuration Key Change (typescript)\nDESCRIPTION: This snippet shows the change in the configuration key for the task component in Midway v3. The configuration key has been changed from `taskConfig` to `task`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const task = {};\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope - TypeScript\nDESCRIPTION: This commit fixes an issue where the request scope was not valid when invoking a singleton. This ensures that singletons can correctly access the request scope and its associated data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/axios/CHANGELOG.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: This command lists the currently running Docker containers. It provides information about the container ID, image, command, status, and ports.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Modifying Dev Script for Source Directory\nDESCRIPTION: Modifies the `dev` script in `package.json` to specify a custom source directory for development. This ensures the `midway-bin dev` command correctly locates the source files. The `--sourceDir` option is used to specify the new source directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/change_start_dir.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"dev\": \"cross-env NODE_ENV=local midway-bin dev --sourceDir=./server --ts\",\n```\n\n----------------------------------------\n\nTITLE: Importing and configuring the EJS view component in Midway.js\nDESCRIPTION: This TypeScript code snippet shows how to import the @midwayjs/view-ejs component and configure it within a Midway.js application using the `@Configuration` decorator.  It imports the `View` module and adds it to the `imports` array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/render.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as view from '@midwayjs/view-ejs';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    view // import ejs components\n  ],\n  importConfigs: [\n    join(__dirname, 'config')\n  ]\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing midway-bin\nDESCRIPTION: Installs the midway-bin package as a development dependency using npm. This package extends egg-bin with TypeScript-related commands for building Midway.js applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install midway-bin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/hooks Dependency (npm)\nDESCRIPTION: This command installs the @midwayjs/hooks package as a project dependency, which is required to use Hooks in Midway.js.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_bff.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/hooks -S\n```\n\n----------------------------------------\n\nTITLE: Fixing Schedule Case in MidwayJS\nDESCRIPTION: This snippet pertains to a bug fix for a specific schedule case within the MidwayJS framework. It likely addresses an issue where scheduled tasks were not executing correctly or were encountering errors.  Details of the specific scheduling problem can be found in the associated issue.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Alinode configuration file example\nDESCRIPTION: This snippet illustrates the structure of the `yourconfig.json` file, which stores the `App ID` and `App Secret` obtained from the Alibaba Cloud Node.js Performance Platform.  It is used by agenthub to authenticate and report data to the platform.  The file must be valid JSON and placed in the project root directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/alinode.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"appid\": \"****\",\n  \"secret\": \"****\",\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger with Custom Label - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a logger with a custom label using `this.app.createLogger`. The `defaultLabel` option sets a default label for log messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/logger.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst logger = this.app.createLogger('custom', {\n  // 创建了一个日志等级为 level，只输出到终端的日志\n  level: 'info',\n  defaultLabel: 'main label',\n});\n\nlogger.info('hello world');\n\n// output => 2021-01-20 15:13:25,408 INFO 66376 [main label] hello world\n```\n\n----------------------------------------\n\nTITLE: Using the @Trace decorator\nDESCRIPTION: Demonstrates the usage of the `@Trace` decorator to create a new span for the `getUser` method.  The decorator accepts a string that serves as the span name.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/otel/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserService {\n\n  @Trace('user.get')\n  async getUser() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Lazy Get Default Framework\nDESCRIPTION: This commit addresses an issue related to lazy loading of the default framework within MidwayJS.  The fix ensures that the default framework is correctly loaded when needed, resolving potential startup or dependency issues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Using Class as Type with Query decorator (Typescript)\nDESCRIPTION: This code shows how to use a class as the type of the query decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/controller.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// class\nclass UserDTO {\n  name: string;\n\n  getName() {\n    return this.name;\n  }\n}\n\n@Get('/')\nasync getUser(@Query() query: UserDTO): Promise<User> {\n  // query.getName()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Directories\nDESCRIPTION: This code configures the static file serving directories and their prefixes within the Midway.js application.  It shows how to define multiple directories with custom prefixes, allowing different parts of the application to serve static files from different locations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// {app_root}/src/config/config.default.ts\nexport const staticFile = {\n  dirs: {\n    default: {\n      prefix: '/public',\n      dir: 'xxx'\n    },\n    antoherDir: {\n      prefix: '/',\n      dir: 'xxx'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliased Logger\nDESCRIPTION: This code snippet shows how to configure an alias for a logger. Setting the aliasName property to 'customLoggerB' for customLoggerA means that both app.getLogger('customLoggerA') and app.getLogger('customLoggerB') will return the same logger instance. This configuration is part of the midwayLogger configuration in a MidwayConfig object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/logger_v3.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      customLoggerA: {\n        aliasName: 'customLoggerB',\n        // ...\n      },\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Enable static plugin in @midwayjs/web\nDESCRIPTION: This snippet shows how to enable the built-in static file serving plugin in a @midwayjs/web (Egg.js) application.  Enabling this plugin allows serving static assets from a designated directory. The plugin relies on koa-static-cache for its functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/static_file.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/plugin.ts\nexports.static = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Info Component - Basic\nDESCRIPTION: This TypeScript code snippet shows how to import and configure the @midwayjs/info component in a MidwayJS application's configuration. The component is added to the imports array within the Configuration decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/info.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as info from '@midwayjs/info';\n\n@Configuration({\n  imports: [\n    // ...\n    info\n  ]\n})\nexport class MainConfiguration {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Midway Context in Component (index.d.ts - FaaS Context)\nDESCRIPTION: This snippet demonstrates extending only the `@midwayjs/faas` Context within a component. It uses a module declaration for `@midwayjs/faas/dist/interface` to add an 'abc' property of type string to the Context interface, restricting the change to FaaS contexts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/context_definition.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// index.d.ts\n\n// The following paragraph is only extended by the Context of @midwayjs/faas\ndeclare module '@midwayjs/faas/dist/interface '{\n  interface Context {\n    abc: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MidwayJS Captcha Component\nDESCRIPTION: This command installs the @midwayjs/captcha component as a project dependency using npm. The `--save` flag adds the dependency to your `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/captcha.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/captcha@3 --save\n```\n\n----------------------------------------\n\nTITLE: Testing Request-Scoped Service\nDESCRIPTION: This snippet demonstrates how to test a request-scoped service in MidwayJS, which depends on the context. It creates a mock context using `app.mockContext` and retrieves the service instance from the request context using `ctx.requestContext.getAsync`, then calls a method and asserts the result. Requires a mock context to simulate a request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test_more.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app, assert } from 'midway-mock/bootstrap';\nimport { IUserService } from '../../src/interface';\n\ndescribe('test/service/user.test.ts', () => {\n  it('#getUser', async () => {\n    // 创建匿名上下文\n    const ctx = app.mockContext();\n    // 取出 userService\n    const user = await ctx.requestContext.getAsync<IUserService>('userService');\n    const data = await user.getUser({ id: 1 });\n    assert(data.id === 1);\n    assert(data.username === 'mockedName');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Add Custom Transport to Logger Instance\nDESCRIPTION: This snippet shows how to create an instance of a custom transport and add it to a logger instance in MidwayJS. The level for the custom transport is set to 'warn'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst customTransport = new CustomTransport({\n  level: 'warn',\n});\n\nlogger.add(customTransport);\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Column Names\nDESCRIPTION: Shows how to define a custom name for a database column using the `name` option within the `@Column` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/orm.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({\n  length: 100,\n  name: 'custom_name'\n})\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Messages to current node\nDESCRIPTION: This code emits a message to all clients connected to the current node (process), relevant in multi-process setups.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/socketio.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nthis.app.local.emit('hi', 'my lovely babies');\n```\n\n----------------------------------------\n\nTITLE: Docker Run Grafana\nDESCRIPTION: This command starts a Grafana instance using Docker, mapping port 3000 on the host to port 3000 in the container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name=grafana -p 3000:3000 grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: mwtsc with custom tsconfig\nDESCRIPTION: This command specifies a custom tsconfig file to be used by mwtsc for compilation. The `--project` flag is used to specify the path to the tsconfig file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/mwtsc.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtsc --project tsconfig.production.json\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Services in Detached Mode\nDESCRIPTION: This command starts the services defined in the `docker-compose.yml` file in detached mode (`-d`), running them in the background.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Github OAuth Middleware\nDESCRIPTION: This creates a middleware for the Github OAuth strategy. It extends the base `PassportMiddleware` without specific configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/passport.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// github-middleware.ts\n\nimport { PassportMiddleware } from '@midwayjs/passport';\n\n@Provide()\nexport class GithubPassportMiddleware extends PassportMiddleware {}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with TypeScript Support\nDESCRIPTION: Starts the test runner with TypeScript support. By default, it uses Jest as the test framework. The `--ts` flag enables TypeScript compilation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin test --ts\n```\n\n----------------------------------------\n\nTITLE: Loading Ready After Super.Load in MidwayJS\nDESCRIPTION: This bug fix ensures that the ready event is loaded after `super.load` is called. The associated commit is e3293338514909179da31847027f46f23cdc1759 and addresses issue #840.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Fix: Singleton Invoke Request Scope Validation in MidwayJS\nDESCRIPTION: This commit addresses a validation issue with singleton invoke request scopes in MidwayJS. It ensures that the request scope is properly validated when a singleton is invoked, preventing potential errors or unexpected behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/validate/CHANGELOG.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM and Casbin Adapter\nDESCRIPTION: This TypeScript code snippet configures the TypeORM connection and the Casbin adapter, using SQLite as the database.  It defines a datasource specifically for Casbin and configures the `createAdapter` function to use that datasource.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/casbin.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayAppInfo } from '@midwayjs/core';\nimport { join } from 'path';\nimport { CasbinRule, createAdapter } from '@midwayjs/casbin-typeorm-adapter';\n\nexport default (appInfo: MidwayAppInfo) => {\n  return {\n    // ...\n    typeorm: {\n      dataSource: {\n        // 为 casbin 定义了一个连接\n        'node-casbin-official': {\n          type: 'sqlite',\n          synchronize: true,\n          database: join(appInfo.appDir, 'casbin.sqlite'),\n          // 注意这里显式引入了 Entity\n          entities: [CasbinRule],\n        }\n      }\n    },\n    casbin: {\n      policyAdapter: createAdapter({\n        // 配置了上面的连接名\n        dataSourceName: 'node-casbin-official'\n      }),\n      // ...\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Timeout Configuration in Typescript\nDESCRIPTION: This snippet shows how to set a timeout for an HTTP request using `makeHttpRequest`. A `try...catch` block is used to handle potential timeout errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nlet err;\n// Timeout will report an error, pay attention to catch\ntry {\n  const result = await makeHttpRequest('http://127.1:7001/', {\n    method: 'GET',\n    dataType: 'text',\n    timeout: 500\n  });\n} catch (e) {\n  err = e;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Support\nDESCRIPTION: This commit adds support for RabbitMQ to the MidwayJS framework. This allows developers to integrate with RabbitMQ for message queuing and asynchronous communication.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Reload Prometheus Configuration\nDESCRIPTION: This command reloads the Prometheus configuration without restarting the server.  It sends a POST request to the /-/reload endpoint.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncurl -X POST http://${prometheus的ip}:9090/-/reload\n```\n\n----------------------------------------\n\nTITLE: Adding event name arguments - Bug fix\nDESCRIPTION: This snippet represents a bug fix that adds event name arguments. This allows for more specific event handling and filtering.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Logger Injection in MidwayJS (TypeScript)\nDESCRIPTION: Illustrates how to inject a custom logger instance into a MidwayJS component using the `@logger` decorator. This example assumes a custom logger named `myLogger` is configured in the application. The decorator retrieves the specific logger instance by its key.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/framework.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provide, logger } from 'midway';\n\n@provide()\nexport class BaseService {\n  @logger('myLogger')\n  logger;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing query parser with array\nDESCRIPTION: This snippet fixes an issue with the query parser when dealing with arrays. The query parser is responsible for extracting parameters from the URL query string and making them available to the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configure Query Array Parsing\nDESCRIPTION: This TypeScript code shows how to configure the query array parsing mode. Setting `queryParseMode` to 'simple' allows `ctx.query` to be parsed in a way that produces a structure between ignoring arrays and strictly converting all fields to arrays.  `queryParseOptions` further configures parsing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  egg: {\n    // ...\n    queryParseMode: 'simple',\n    queryParseOptions: {\n      arrayLimit: 100,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ManyToMany Relationship (Photo) - TypeScript\nDESCRIPTION: This snippet defines the other side of the ManyToMany relationship for the Photo entity. It utilizes the albums property decorated with @ManyToMany, mapping to the corresponding albums property of Album entity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n  /// ... other columns\n\n  @ManyToMany(type => Album, album => album.photos)\n  albums: Album[];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with midway-bin\nDESCRIPTION: Executes the `doc` command of `midway-bin` to generate documentation using typedoc. Accepts standard typedoc command parameters.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmidway-bin doc\n```\n\n----------------------------------------\n\nTITLE: Install ETCD Dependency\nDESCRIPTION: This command installs the `@midwayjs/etcd` package as a project dependency using npm. The `--save` flag adds the package to the `package.json` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/etcd.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/etcd@3 --save\n```\n\n----------------------------------------\n\nTITLE: Adding guard feature in MidwayJS\nDESCRIPTION: This commit introduces a 'guard' feature to the MidwayJS framework. The commit adds functionality related to guards, potentially for authorization or access control purposes. The details of the implementation are linked to the provided commit hash and issue number.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: CORS Configuration - Allow All Origins (TypeScript)\nDESCRIPTION: Configures CORS to allow requests from any origin by setting `origin` to `*`. This is a permissive setting and should be used with caution in production environments.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/cross_domain.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  cors: {\n    origin: '*',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON path replacement in MidwayJS\nDESCRIPTION: This commit addresses an issue where the JSON path was not correctly replaced in the Swagger UI within MidwayJS.  This ensures the Swagger UI correctly points to the API definition.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Fixing Problems in 2.x Boilerplate\nDESCRIPTION: This commit addresses various problems within the 2.x boilerplate for MidwayJS. These are likely minor fixes to improve the initial setup and developer experience when using the boilerplate.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Fixing Socket Listen Sequelize in MidwayJS\nDESCRIPTION: This bug fix addresses an issue related to socket listening with Sequelize in MidwayJS. It ensures that socket events are correctly handled in conjunction with Sequelize database operations, preventing errors or unexpected behavior.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Adding Prometheus QPS and RT metrics to MidwayJS\nDESCRIPTION: This code snippet introduces new features to the Prometheus module in MidwayJS, specifically adding support for collecting and exposing Query Per Second (QPS) and Response Time (RT) metrics. This enhancement allows for more detailed monitoring of application performance using Prometheus.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @fileoverview Adds support for collecting and exposing QPS and RT metrics for Prometheus.\n */\n// Feature: prometheus qps rt\n// See issue [#1039](https://github.com/midwayjs/midway/issues/1039)\n// Commit: [398203e](https://github.com/midwayjs/midway/commit/398203e8f371e74a8c0aeff476c814e764e2b5df)\n```\n\n----------------------------------------\n\nTITLE: Configure Context Log Format - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the context log format for a specific logger in MidwayJS. It modifies the output format of the context log associated with `customLogger` by accessing the `ctx` object within the `info` object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   midwayLogger: {\n     clients: {\n       customLogger: {\n         contextFormat: info => {\n           const ctx = info.ctx;\n           return `${info.timestamp} ${info.LEVEL} ${info.pid} [${Date.now() - ctx.startTime}ms ${ctx.method}] ${info.message}`;\n         }\n         // ...\n       }\n     }\n     // ...\n   },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Install Code Dye Component via npm\nDESCRIPTION: Installs the @midwayjs/code-dye component using npm.  This is a necessary first step to using the component in your Midway.js application.  It specifies version 3 of the package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/code_dye.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/code-dye@3 --save\n```\n\n----------------------------------------\n\nTITLE: Asynchronous initData Method in TypeScript\nDESCRIPTION: This code snippet shows that the `initData` method of the `DataListener` can be asynchronous, allowing it to fetch data from external sources or perform other asynchronous operations during initialization.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/data_listener.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport class MemoryDataListener extends DataListener<string> {\n  async initData() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Prometheus Module in MidwayJS\nDESCRIPTION: This TypeScript code demonstrates how to import and configure the Prometheus module within a MidwayJS application using the `@Configuration` decorator. It integrates the `prometheus` module into the application's dependency injection container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\nimport * as prometheus from '@midwayjs/prometheus'; // 导入模块\nimport { join } from 'path';\n\n@Configuration({\n  imports: [\n    // ...\n    prometheus\n  ],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class MainConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Configuring View Engine Mapping\nDESCRIPTION: This code snippet configures the view engine mapping in the application's configuration file (src/config/config.default.ts). It associates file extensions (e.g., '.ejs') with specific view engines (e.g., 'ejs'). This mapping tells Midway.js which engine to use when rendering files with those extensions. It also shows the ejs configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport const view = {\n  defaultViewEngine: 'ejs',\n  mapping: {\n    '.ejs': 'ejs',\n  },\n};\n\n// ejs config\nexport const ejs = {};\n```\n\n----------------------------------------\n\nTITLE: Modifying Development Server Port\nDESCRIPTION: Modifies the port on which the development server listens. The `-p` or `--port` option allows specifying a custom port number.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ midway-bin dev --ts --port=7002\n```\n\n----------------------------------------\n\nTITLE: Install JWT Dependencies\nDESCRIPTION: This bash script installs the necessary dependencies for using JWT strategy, including @midwayjs/jwt and passport-jwt.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/passport.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/jwt passport-jwt --save\n```\n\n----------------------------------------\n\nTITLE: Accessing ctx.traceId\nDESCRIPTION: This snippet shows how to access the `ctx.traceId` property within a supported component (e.g., Egg.js or Koa.js).\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nctx.traceId => *****\n```\n\n----------------------------------------\n\nTITLE: Install Upload Dependencies (npm)\nDESCRIPTION: Installs the required dependencies for file uploads using npm: @midwayjs/upload and @midwayjs/hooks-upload.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/hooks/upload.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @midwayjs/upload @midwayjs/hooks-upload\n```\n\n----------------------------------------\n\nTITLE: Removing error and symbol link in Windows in MidwayJS\nDESCRIPTION: This commit addresses issues related to errors and symbolic links on Windows systems within the MidwayJS framework. The fix likely involves removing or modifying code that caused problems on Windows, improving compatibility and stability on that platform.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Fixing Configuration Injection in Production - JavaScript\nDESCRIPTION: This commit addresses an issue where configuration injection was not working correctly in production environments. It involves changes related to plugin injection and potentially other configuration-related aspects of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n41bce5d8a60a6fde61ff62794612eecff2e260ed\n```\n\n----------------------------------------\n\nTITLE: Streaming Data Response with HttpServerResponse (TypeScript)\nDESCRIPTION: This code demonstrates how to use the `stream` method of `HttpServerResponse` to send streaming data to the client. It sets up a timer to send data in chunks and then ends the stream. Requires `@midwayjs/core` and `@midwayjs/koa`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get, Inject, sleep, HttpServerResponse } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n  @Inject()\n  ctx: Context;\n  \n  @Get('/')\n  async home() {\n    const res = new HttpServerResponse(this.ctx).stream();\n    setTimeout(() => {\n      for (let i = 0; i < 100; i++) {\n        await sleep(100);\n        res.send('abc'.repeat(100));\n      }\n\n      res.end();\n    }, 1000);\n    return res;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Bootstrap for Simplified Testing (TypeScript)\nDESCRIPTION: This snippet shows how to import `app`, `mock`, and `assert` from `midway-mock/bootstrap` for a more concise testing setup. This approach reduces boilerplate by providing pre-configured instances.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/test.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// test/controller/home.test.ts\nimport { app, mock, assert } from 'midway-mock/bootstrap';\n\ndescribe('test/controller/home.test.ts', () => {\n  // test cases\n});\n```\n\n----------------------------------------\n\nTITLE: Improving passport compatibility\nDESCRIPTION: This commit improves the compatibility of the passport implementation. Addresses issue #2133. Commit hash is 2975e4f5b6cf8cbcd42cbfb8ce3e08633dbba383.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/otel component\nDESCRIPTION: This snippet shows how to install the @midwayjs/otel component using npm.  The version 3 is specifically requested.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/otel.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/otel@3 --save\n```\n\n----------------------------------------\n\nTITLE: Checking mwtypeorm Installation - Bash\nDESCRIPTION: This snippet shows how to check if `mwtypeorm` is installed by using help command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtypeorm -h\n```\n\n----------------------------------------\n\nTITLE: MidwayJS Benchmark Results\nDESCRIPTION: This snippet shows the example output from running the MidwayJS benchmark. It displays the Queries Per Second (QPS) for different configurations of the Midway framework, like 'request context' and 'async hooks'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/benchmark/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWaiting for Midway 3 with request context to initialize...\nRunning benchmark on Midway 3 with request context...\nMidway 3 with request context QPS:  2374.4\nWaiting for Midway 3 with async hooks to initialize...\nRunning benchmark on Midway 3 with async hooks...\nMidway 3 with async hooks QPS:  2495.81\n```\n\n----------------------------------------\n\nTITLE: Feature: Support closing consul service check - Javascript\nDESCRIPTION: This commit adds the functionality to close the Consul service check. This allows for dynamic management of service health checks within the Consul registry.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\na632bae4c87eeed77b448a65cd2164a9d4f59779\n```\n\n----------------------------------------\n\nTITLE: Adding guard feature in MidwayJS\nDESCRIPTION: This commit introduces a 'guard' feature within the MidwayJS framework. The details of this feature are in issue #2345. The commit hash is 1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces a new guard feature to the MidwayJS framework.  It enhances security by implementing a guard mechanism, providing a way to control access to specific resources or functionalities. The commit hash is 1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Fully Customized Transport - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a fully custom transport in MidwayJS by extending the `Transport` class. This allows you to send logs to a remote service asynchronously.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger_v3.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Transport, ITransport, LoggerLevel, LogMeta } from '@midwayjs/logger';\n\n\n// Transport configuration\ninterface CustomOptions {\n   // ...\n}\n\nclass CustomTransport extends Transport<CustomOptions> implements ITransport {\n   log(level: LoggerLevel | false, meta: LogMeta, ...args) {\n     // Format the message using built-in formatting methods\n     let msg = this.format(level, meta, args) as string;\n  \n     //Asynchronously write to the log library\n     remoteSdk.send(msg).catch(err => {\n       // Log the error or ignore it\n       console.error(err);\n     });\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Value\nDESCRIPTION: This shows how to retrieve a cached value using key. If no value found, it returns undefined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/cache.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = await this.cache.get(key);\n```\n\n----------------------------------------\n\nTITLE: Installing Tenant Dependency\nDESCRIPTION: Installs the `@midwayjs/tenant` package using npm. This package provides the core functionality for tenant management in MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tenant.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/tenant@3 --save\n```\n\n----------------------------------------\n\nTITLE: Alibaba API Gateway Event Example (application/json)\nDESCRIPTION: This JSON shows an event structure from Alibaba Cloud API Gateway, configured with 'pass-through' and `application/json` content type. The `body` is base64 encoded.  The framework automatically parses the decoded JSON string into a JavaScript object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_post_difference.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"eyJjIjoiYiJ9 \",\n  \"headers\": {\n    \"X-Ca-Dashboard-Action\": \"DEBUG \",\n    \"X-Ca-Dashboard-Uid\": \"125087\",\n    \"X-Ca-Stage\": \"RELEASE \",\n    \"X-Ca-Dashboard-Role\": \"USER \",\n    \"User-Agent\": \"Apache-HttpClient/4.5.6 (Java/1.8.0_172) \",\n    \"Accept-Encoding\": \"gzip,deflate \",\n    \"Content-MD5\": \"Kry+hjKjc2lvIrwoJqdY9Q== \",\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  },\n  \"httpMethod\": \"POST \",\n  \"isBase64Encoded\": true\n  \"path\": \"/api/321 \",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom View Engine\nDESCRIPTION: This code snippet demonstrates how to register a custom view engine with the ViewManager. It imports necessary modules, including the custom view engine class (`MyView`).  The `onReady` lifecycle hook is used to register the custom view engine (`MyView`) with the name 'ejs'. This allows the application to use the custom view engine for files with the 'ejs' extension.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration, Inject, Provide } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as view from '@midwayjs/view';\nimport { MyView } from './lib/my';\n\n@Configuration({\n  imports: [koa, view],\n  importConfigs: [join(__dirname, 'config')]\n})\nexport class AutoConfiguration {\n\n  @Inject()\n  viewManager: view.ViewManager;\n\n  async onReady(){\n    this.viewManager.use('ejs', MyView);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Eslint for Code Style Check\nDESCRIPTION: This snippet shows how to run Eslint to check for styling issues in the code. It ensures that the code adheres to the project's style guide, which is a prerequisite for contributing code.\nSOURCE: https://github.com/midwayjs/midway/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run lint\n```\n\n----------------------------------------\n\nTITLE: Caching Consul Configuration for High QPS\nDESCRIPTION: This TypeScript snippet provides a solution for handling high QPS when using Consul as a configuration center.  It creates a singleton service that periodically fetches the configuration from Consul and caches it, reducing the load on the Consul server.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/consul.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Init, Inject, Provide, Scope, ScopeEnum } from '@midwayjs/core';\nimport * as Consul from 'consul';\n\n@Provide()\n@Scope(ScopeEnum.Singleton)\nexport class ConfigService {\n\n  @Inject('consul:consul')\n  consul: Consul.Consul;\n\n  config: any;\n\n  @Init()\n  async init() {\n    setInterval(()=> {\n      this.consul.kv.get('name').then(res=> {\n        this.config = res;\n      })\n    }, 5000);\n    this.config = await this.consul.kv.get('name');\n  }\n\n  async getConfig() {\n    return this.config;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HttpServerResponse with Different Data Types (TypeScript)\nDESCRIPTION: This example showcases the chainable API of `HttpServerResponse`, demonstrating how to set different data types using methods like `json`, `text`, and `blob`.  The `blob` method requires a `Buffer` object as input.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_response.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// json\nserverResponse.json({\n  a: 1,\n});\n// text\nserverResponse.text('abcde');\n// blob\nserverResponse.blob(Buffer.from('hello world'));\n```\n\n----------------------------------------\n\nTITLE: Retry Asynchronous Method with 'this' Binding (Alternative) in TypeScript\nDESCRIPTION: This code provides an alternative way to bind `this` when using `retryWithAsync` in a class.  It uses `.bind(this)` and type assertion to explicitly bind the `this` context to the method before passing it to `retryWithAsync`. The receiver parameter is still provided for correctness of the defined package method. The function will retry 2 times in addition to the original call.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/retry.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// wrap\nconst getUserDataOrigin = retryWithAsync(\n  this.getUserDataFromRemote.bind(this) as typeof this.getUserDataFromRemote,\n  2,\n  {\n    receiver: this\n  }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Creating a CLI Plugin with TypeScript\nDESCRIPTION: This TypeScript code shows the structure of a CLI plugin.  It extends `BasePlugin` from `@midwayjs/command-core` and defines a custom command (`lalala`) with options and lifecycle hooks.  It showcases how to add commands, define options, and attach hooks to existing or custom command lifecycles to extend CLI functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/cli.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/index.ts\n\nimport { BasePlugin } from '@midwayjs/command-core';\n\nexport class TestLalalaPlugin extends BasePlugin {\n  commands = {\n    lalala: {\n      usage: '自定义命令',\n      lifecycleEvents: [\n        'a', // 自定义生命周期\n        'b',\n      ],\n      // 暂无\n      options: {\n        name: {\n          usage: '参数 name, 例如: mw lalala --name=123',\n          shortcut: 'n', // 参数缩写\n        },\n      },\n    },\n  };\n\n  hooks = {\n    // 添加当前插件内的命令生命周期扩展\n    // lalala 命令的 a 生命周期\n    'lalala:a': async () => {\n      // 输出\n      this.core.cli.log('lalala command hook');\n\n      // 获取用户输入的参数\n      this.core.cli.log(this.core.options);\n\n      // f.yml 内容\n      this.core.cli.log(this.core.service);\n\n      // 仅在 -V 参数下输出的内容\n      this.core.debug('lalala');\n    },\n\n    // 添加其他插件内的命令生命周期扩展\n    // 在 package 命令的  copyFile 生命周期 “之前” 执行\n    'before:package:copyFile': async () => {\n      console.log('package command hook');\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring midway-bin build\nDESCRIPTION: Configures the `midway-bin-build` section in `package.json` to specify files and directories to be copied from `src` to `dist` during the build process. Uses relative paths and glob patterns.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"midway-bin-build\": {\n    \"include\": [\n      \"app/public\",\n      \"app/view\",\n      \"lib/platform/aone/api.json\",\n      \"lib/*.json\",\n      \"lib/*.text\",\n      [\"pattern/**\", \"!pattern/**/*.js\"]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ContentType without using Context\nDESCRIPTION: This snippet demonstrates how to set the Content-Type header of the response using the `ContentType` function in Midway Hooks. It sets the Content-Type to 'text/html'. Note: This is identical to the previous snippet, as manually settings are not shown for content type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/hooks/api.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Api,\n  Get,\n  ContentType\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get(),\n  ContentType('text/html'),\n  async () => {\n    return '<h1>Hello World! </h1>';\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fixing COS Config Definition and Docs in MidwayJS\nDESCRIPTION: This commit addresses issues with the configuration definition for COS (Cloud Object Storage) and updates the documentation for version 3.x of MidwayJS. It aims to improve the clarity and accuracy of COS configuration and documentation, and is related to issue #1515.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ncos config definition & 3.x doc update ([#1515](https://github.com/midwayjs/midway/issues/1515)) ([0ac7ac5](https://github.com/midwayjs/midway/commit/0ac7ac5805b7ab8873f8792fc1712a74e3223172))\n```\n\n----------------------------------------\n\nTITLE: Accessing Request-Scoped Container in Middleware\nDESCRIPTION: Demonstrates how to access the request-scoped dependency injection container within MidwayJS middleware.  This allows for retrieving request-specific dependencies. The container is attached to the request context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/container.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class ReportMiddleware {\n  resolve() {\n    return async (ctx, next) => {\n      // ctx.requestContext  请求链路的依赖注入容器\n      await next();\n    };\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class ReportMiddleware {\n  resolve() {\n    return (req, res, next) => {\n      // req.requestContext  请求链路的依赖注入容器\n      next();\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Definite Assignment Assertion\nDESCRIPTION: This TypeScript code snippet illustrates the use of the definite assignment assertion operator (!). This operator tells the compiler that a property will definitely be assigned a value at runtime, even if the compiler cannot detect it statically. It prevents TS2564 errors where properties are not initialized in the constructor.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ts_problem.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HomeController {\n  @Inject()\n  userService!: UserService;\n}\n```\n\n----------------------------------------\n\nTITLE: Start Docker Compose\nDESCRIPTION: This command starts the services defined in the docker-compose.yml file, including Prometheus.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/prometheus.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Midway Task Component\nDESCRIPTION: Installs the @midwayjs/task component using npm. This command adds the component as a dependency to the project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @midwayjs/task@2 -S\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Swagger UI JSON Path Replacement in MidwayJS\nDESCRIPTION: This bug fix replaces the JSON path in the Swagger UI for the MidwayJS framework. The fix is associated with commit 0f3728daccba12923f23f5b498c7dda13ced36d7 and addresses issue #1860.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Using Injected Context Handler in MidwayJS Service\nDESCRIPTION: This code shows how to use the injected `contextHandler` function within a MidwayJS service.  The `@inject` decorator injects the function, which is then called asynchronously to perform some logic. The injected function provides dynamic behavior based on the application context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\nexport class BaseService {\n  @inject()\n  contextHandler: () => Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with Query Parameters in Typescript\nDESCRIPTION: This snippet shows how to make an HTTP GET request with query parameters using `makeHttpRequest`. The `data` option is used to specify the query parameters, and `dataType` is set to 'json' to receive the response as a JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/axios.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeHttpRequest } from '@midwayjs/core';\n\nconst result = await makeHttpRequest('http://127.1:7001/', {\n  data: {\n    a: 1\n    B: 2\n  },\n  dataType: 'json', // returned data format\n});\n\n// typeof result.data => 'object'\n// result.data.url => /?a=1&b=2\n```\n\n----------------------------------------\n\nTITLE: tsconfig.json Configuration Example (TypeScript)\nDESCRIPTION: This snippet provides an example of a `tsconfig.json` configuration showing how to configure `typeRoots`, `include`, and `exclude` options. It highlights the importance of including the directories containing type definitions (e.g., 'typings') in the `include` array, especially when using `typeRoots`. Failure to do so can result in compilation errors due to missing type definitions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/ts_problem.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"typeRoots\": [\n  \"./node_modules/@types\",\n  \"./typings\"\n],\n\"include\": [\n  \"src\",\n  \"typings\"\n],\n\"exclude\": [\n  \"dist\",\n  \"node_modules\"\n],\n}\n```\n\n----------------------------------------\n\nTITLE: Restart Docker Compose environment\nDESCRIPTION: Restarts the Docker Compose environment to apply changes to the configuration, such as adding Grafana.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/prometheus.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose restart\n```\n\n----------------------------------------\n\nTITLE: Moving Koa-Session and Definition in MidwayJS\nDESCRIPTION: This commit moves the `koa-session` middleware and its related type definitions. The purpose is likely related to refactoring or internal reorganization of the codebase, potentially to align with framework updates or dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Adding Event Name Arguments\nDESCRIPTION: This commit adds arguments for event names, enabling more detailed event handling and management within the MidwayJS framework. It enhances the flexibility and control over event-driven operations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nadd event name args ([#986](https://github.com/midwayjs/midway/issues/986)) ([bfd8232](https://github.com/midwayjs/midway/commit/bfd82320aee8600d8fa30bd2821a0e68c80fd755))\n```\n\n----------------------------------------\n\nTITLE: Fixing Aspect Binding in MidwayJS\nDESCRIPTION: This snippet addresses an issue where aspect bindings were missing context (ctx) within the MidwayJS framework. The fix ensures that the necessary context is available during aspect execution, resolving the reported problem.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Adding OTEL Component to MidwayJS\nDESCRIPTION: This commit introduces the OTEL (OpenTelemetry) component to the MidwayJS framework. The complete implementation can be reviewed using the provided commit hash.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/otel/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nadd otel component ([#1808](https://github.com/midwayjs/midway/issues/1808)) ([8fda71e](https://github.com/midwayjs/midway/commit/8fda71e82cedfcf05e590780c55fbff10c4132cb))\n```\n\n----------------------------------------\n\nTITLE: Running Dev Server with NPM\nDESCRIPTION: This command starts the development server for the Midway Hooks project. It allows developers to test and debug their code in a local environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/function/readme.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Output Format in TypeScript\nDESCRIPTION: This snippet configures the output format of a log message.  The `format` property takes a function that receives an `info` object and returns a formatted string to be written to the log. This allows for complete control over the log message structure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/logger.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  midwayLogger: {\n    clients: {\n      appLogger: {\n        format: info => {\n          return `${info.timestamp} ${info.LEVEL} ${info.pid} ${info.labelText}${info.message}`;\n        }\n        // ...\n      },\n      customOtherLogger: {\n        format: info => {\n          return 'xxxx';\n        }\n      }\n    }\n    // ...\n  },\n} as MidwayConfig;\n```\n\n----------------------------------------\n\nTITLE: Adding a Guard Feature in Midway\nDESCRIPTION: This commit introduces a guard feature within the MidwayJS framework. Guards are used for controlling access to certain resources or functionalities based on predefined conditions or roles. The specific implementation details are found in the linked commit.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/kafka/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Report Middleware Implementation in TypeScript\nDESCRIPTION: This code defines a simple report middleware using TypeScript in a Midway.js application. It measures the execution time of the controller. The middleware implements the `IWebMiddleware` interface and utilizes the `Context` from Egg.js to access the request and response objects. The `resolve` method returns an asynchronous function that executes before and after the controller logic, logging the execution time.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/web_middleware.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide } from '@midwayjs/decorator';\nimport { IWebMiddleware, IMidwayWebNext } from '@midwayjs/web';\nimport { Context } from 'egg';\n\n@Provide()\nexport class ReportMiddleware implements IWebMiddleware {\n  resolve() {\n    return async (ctx: Context, next: IMidwayWebNext) => {\n      // 控制器前执行的逻辑\n      const startTime = Date.now();\n      // 执行下一个 Web 中间件，最后执行到控制器\n      await next();\n      // 控制器之后执行的逻辑\n      console.log(Date.now() - startTime);\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing singleton invoke request scope validity in MidwayJS\nDESCRIPTION: This commit resolves an issue where singleton invocations within a request scope were not valid in MidwayJS. This fix ensures that singleton instances are correctly scoped within the context of a request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/info/CHANGELOG.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Adding Socket Middleware support in Midway.js\nDESCRIPTION: This commit introduces support for socket connection and message middleware within the Midway.js framework. This allows developers to apply middleware logic to WebSocket connections and messages, enabling features like authentication, authorization, and data transformation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n886d0bf6b47aecf870df15853d4ba82256c08858\n```\n\n----------------------------------------\n\nTITLE: Using MidwayEnvironmentService to check environment - TypeScript\nDESCRIPTION: This snippet demonstrates how to inject and use the MidwayEnvironmentService to determine the current environment (e.g., development, production). The `@Controller`, `@Inject`, and `@Get` decorators are used to define a controller, inject the service, and create a route handler, respectively. The service's `getCurrentEnvironment()` method can be used to fetch the current environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/built_in_service.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Controller, Get, MidwayEnvironmentService } from '@midwayjs/core';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  environmentService: MidwayEnvironmentService;\n\n  @Get('/')\n  async home() {\n    // this.environmentService.getCurrentEnvironment();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Aliyun Deployment Configuration with Midway CLI\nDESCRIPTION: This bash command allows you to reset the Alibaba Cloud deployment configuration using the Midway CLI. It clears previously saved options, such as AccessKey or region, enabling a fresh configuration setup.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_aliyun_faq.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmidway-bin deploy --resetConfig\n```\n\n----------------------------------------\n\nTITLE: Setting up PATH for global npm modules\nDESCRIPTION: This snippet adds the `~/.npm-global/bin` directory to the `PATH` environment variable in the `~/.zshrc` file, ensuring that globally installed npm modules are accessible from the command line. It then sources the `.zshrc` file to apply the changes in the current shell.  This makes global modules available.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_install_nodejs.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"export PATH=~/.npm-global/bin:$PATH\" >> ~/.zshrc\n$ source ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Component Import in Application Configuration\nDESCRIPTION: Imports a component into an application's configuration using the `imports` option in the `@Configuration` decorator. This makes the component's services and other features available for use in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/component_development.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// 应用或者函数的 src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport * as book from 'midway-component-book';\n\n@Configuration({\n  imports: [book],\n})\nexport class ContainerLifeCycle {}\n```\n\n----------------------------------------\n\nTITLE: Fixing missing namespace requestContainer in MidwayJS\nDESCRIPTION: This commit resolves a bug where the `requestContainer` namespace was missing in MidwayJS. The fix ensures that the `requestContainer` is properly defined and available, which is essential for managing request-scoped dependencies and data within the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Executing unit tests\nDESCRIPTION: This command executes unit tests using the testing framework configured in the `package.json` file. It validates the functionality of individual components and modules.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.zh-CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Mocking Object Method in Midway.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to mock an object method using `mockProperty`. It mocks the `getUser` method of the object `a` to return `midway`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/mock.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockProperty } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n\n  const a = {};\n  mockProperty(a, 'getUser', async () => {\n    return 'midway';\n  });\n\n  // a.getUser() => 'midway'\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Code Dye Query Parameter for HTML Output\nDESCRIPTION: Configures the @midwayjs/code-dye component to activate code dyeing and produce an HTML formatted report when a specific query parameter is present in the request. The configuration sets the `matchQueryKey` and expects the parameter's value to specify the desired report format. The code is placed in `src/config/config.local.ts`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/code_dye.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nexport default {\n  codeDye: {\n    matchQueryKey: 'codeDyeXXX',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Code Dye Feature in MidwayJS\nDESCRIPTION: This code snippet introduces the 'code dye' feature to the MidwayJS framework. It provides the issue number and commit hash for context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/code-dye/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- code dye ([#2078](https://github.com/midwayjs/midway/issues/2078)) ([a9cf1c5](https://github.com/midwayjs/midway/commit/a9cf1c50199b5bad1e3d6024a87d1c4761370fde))\n```\n\n----------------------------------------\n\nTITLE: Fixing Kafka Start Error in Midway\nDESCRIPTION: This commit addresses a bug that causes an error during the startup of Kafka within the MidwayJS framework. The fix likely involves error handling or configuration adjustments to prevent the startup failure. Detailed implementation can be found in the linked commit.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/kafka/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding Application Keys\nDESCRIPTION: Addresses the missing app.keys by adding it. This is necessary for proper functionality of the MidwayJS application and its components.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/sequelize/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n- add app.keys ([#1395](https://github.com/midwayjs/midway/issues/1395)) ([c44afc6](https://github.com/midwayjs/midway/commit/c44afc6cc6764a959d1fa7ae04d60099282d156a))\n```\n\n----------------------------------------\n\nTITLE: Fixing Empty Logger Issue in MidwayJS\nDESCRIPTION: This code snippet addresses an issue where `egg-logger` was returning an empty logger instance. The corresponding commit hash is 4077c70a71507477c7a5fa15449771cc395bc0c0, which fixes issue #1031.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Adding Casbin Module in MidwayJS\nDESCRIPTION: This code snippet adds the Casbin module to the MidwayJS framework. It includes the issue number and commit hash related to the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/code-dye/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- add casbin module ([#2358](https://github.com/midwayjs/midway/issues/2358)) ([a7d2786](https://github.com/midwayjs/midway/commit/a7d27863b756dcf81abc4d7dedaf35c517c2c1e3))\n```\n\n----------------------------------------\n\nTITLE: Query All Records with Sequelize\nDESCRIPTION: Demonstrates how to retrieve all records from the Photo table using the findAll method. It imports required decorators and the Photo entity, injects the entity and retrieves all records.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/sequelize.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, Controller, Get, Provide } from '@midwayjs/decorator';\nimport { Photo } from '../entity/Photo';\n\n@Provide()\n@Controller('/')\nexport class HomeController {\n  @Get('/')\n  async home() {\n    let result = await Photo.findAll();\n    console.log(result);\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Get Prototype Of Function Typescript\nDESCRIPTION: This function recursively gets the prototype chain of a target object using `ordinaryGetPrototypeOf` from `reflect-metadata`. It returns an array containing all prototypes in the chain.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction recursiveGetPrototypeOf(target: any): any[] {\n  const properties = [];\n  let parent = ordinaryGetPrototypeOf(target);\n  while (parent !== null) {\n    properties.push(parent);\n    parent = ordinaryGetPrototypeOf(parent);\n  }\n  return properties;\n}\n```\n\n----------------------------------------\n\nTITLE: Fix supertest typings and createFunctionApp\nDESCRIPTION: This snippet addresses typings issues with Supertest and the createFunctionApp. Supertest is a library used for testing HTTP endpoints, and createFunctionApp is a function used to create a function app.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Add egg-mock (json)\nDESCRIPTION: This snippet illustrates the manual addition of the `egg-mock` package in `package.json`. Since the framework has removed the egg-mock package, it needs to be manually added as a dev dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"egg-mock\": \"^1.0.0\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing CRC Error in NCC Bundle for MidwayJS\nDESCRIPTION: This commit addresses a CRC error encountered during the NCC (Node.js Compiler Collection) bundling process. This fix resolves a potential issue related to checksum mismatches in bundled code, ensuring correct execution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path in MidwayJS\nDESCRIPTION: This commit fixes an issue in the Swagger UI related to the JSON path. The fix ensures that the Swagger UI correctly references and displays the API definition JSON file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Fixing i18n Resolver and Task Typing\nDESCRIPTION: This bug fix resolves issues related to i18n resolver and task typing within Midway.js. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ni18 resolver and task typing ([#2003](https://github.com/midwayjs/midway/issues/2003)) ([c7b8ad1](https://github.com/midwayjs/midway/commit/c7b8ad1a86eb680059ab685e1f84ffe046a59292))\n```\n\n----------------------------------------\n\nTITLE: Updating ws Dependency in MidwayJS (v8.8.1)\nDESCRIPTION: This commit updates the 'ws' dependency to version v8.8.1. Updating dependencies ensures that the project benefits from the latest bug fixes, security patches, and performance improvements provided by the dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n**deps:** update dependency ws to v8.8.1 ([#2125](https://github.com/midwayjs/midway/issues/2125)) ([fabf2a4](https://github.com/midwayjs/midway/commit/fabf2a4b773c3c132043592c5e1ec7cb57f7dae0))\n```\n\n----------------------------------------\n\nTITLE: Adding and Exporting Functions in Midway.js\nDESCRIPTION: This commit adds and exports functions within the midway-bin package. The provided commit hash gives context to the types of function exported. This likely enhances the functionality or utility of the Midway.js command-line tools.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_42\n\nLANGUAGE: Other\nCODE:\n```\n80ef6b8\n```\n\n----------------------------------------\n\nTITLE: Listing Dependency Trees with npm\nDESCRIPTION: This command uses npm to list the dependency trees of a specific package (@midwayjs/core in this case) within a project. It helps identify dependency conflicts and duplication issues. Requires npm to be installed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/faq/framework_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm ls @midwayjs/core\n```\n\n----------------------------------------\n\nTITLE: Configuration file structure\nDESCRIPTION: Example of how configuration files are structured within the `src/config` directory. Each file corresponds to a specific environment like default, production, unit test, and local.  These files are used to configure the application based on the running environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/quickstart.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsrc/config\n|- config.default.ts\n|- config.prod.ts\n|- config.unittest.ts\n`- config.local.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Global Configuration for Cron Jobs\nDESCRIPTION: This TypeScript snippet shows how to set global configurations for all cron jobs. These configurations will be merged with the configuration of each individual job. Refer to [CronJobParameters](https://github.com/kelektiv/node-cron/blob/main/lib/job.js#L51) for `defaultCronJobOptions` configuration items.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/cron.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n   cron: {\n     defaultCronJobOptions: {\n       //...\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Context with Callback in MidwayJS\nDESCRIPTION: This code snippet shows an alternative way to use `mockContext` with a callback function, allowing for more complex context simulation logic. The callback receives the context object (`ctx`) as an argument, enabling you to modify multiple properties or perform calculations based on the context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/mock.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockContext } from '@midwayjs/mock';\n\nit('should test create koa app with new mode with mock', async () => {\n  const app = await createApp();\n\n  // Simulation context\n  mockContext(app, (ctx) => {\n    ctx.user = 'midway';\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sending messages to a RabbitMQ queue\nDESCRIPTION: This snippet demonstrates how to inject and use the RabbitMQ service to send messages to a queue from another service in Midway.js. It injects `RabbitmqService` and calls the `sendToQueue` method. The `tasks` queue is used as an example. The `rabbitmqService` dependency needs to be available through Midway's dependency injection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/rabbitmq.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Provide()\nexport class UserService {\n\n  @Inject()\n  rabbitmqService: RabbitmqService;\n\n\tasync invoke() {\n    // TODO\n\n    // 发送消息\n  \tawait this.rabbitmqService.sendToQueue('tasks', {hello: 'world'});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding app.keys in MidwayJS\nDESCRIPTION: This code snippet fixes an issue where `app.keys` was missing, potentially causing errors or unexpected behavior within the MidwayJS application. The addition of `app.keys` ensures proper application configuration and functionality.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bug Fixes\n\n//- add app.keys ([#1395](https://github.com/midwayjs/midway/issues/1395)) ([c44afc6](https://github.com/midwayjs/midway/commit/c44afc6cc6764a959d1fa7ae04d60099282d156a))\n```\n\n----------------------------------------\n\nTITLE: Adding Event Name Arguments\nDESCRIPTION: This commit adds event name arguments. This enhancement improves event handling capabilities within MidwayJS, as addressed in issue #986.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nbfd82320aee8600d8fa30bd2821a0e68c80fd755\n```\n\n----------------------------------------\n\nTITLE: Request-Scoped Logger Injection in MidwayJS (TypeScript)\nDESCRIPTION: Shows how to inject a request-scoped logger into a MidwayJS component using the `@inject` decorator. Because request scope is enabled by default, the framework adds a default logger to each request, making it available for injection using \"logger\" as the key. If the property name is `logger`, the key is optional.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/framework.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@provide()\nexport class BaseService {\n  @inject()\n  logger;\n\n  // 也可以直接传入 key // @inject('logger')\n  // logger;\n}\n```\n\n----------------------------------------\n\nTITLE: RegisterObject Namespace Change (typescript)\nDESCRIPTION: This snippet illustrates how component developers should adapt to the RegisterObject namespace change. During component development, the namespace prefix is no longer automatically added.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  namespace: 'A'\n  // ...\n})\nexport class MainConfiguration {\n\n  async onReady(container) {\n  \tcontainer.registerObject('aaa', 'bbb');\n  }\n}\n\ncontainer.getAsync('aaa'); // => OK\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry dependencies\nDESCRIPTION: Installs the necessary OpenTelemetry packages for tracing in a Node.js environment. These include the API, SDK, and auto-instrumentation libraries.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/otel/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save @opentelemetry/api\n$ npm install --save @opentelemetry/sdk-node\n$ npm install --save @opentelemetry/auto-instrumentations-node\n```\n\n----------------------------------------\n\nTITLE: Adding Event Name Arguments\nDESCRIPTION: This code snippet refers to a commit that introduces or modifies arguments related to event names within the application. This might be related to event handling or custom event listeners. The commit hash bfd8232 provides a direct reference to the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_11\n\nLANGUAGE: N/A\nCODE:\n```\nbfd8232\n```\n\n----------------------------------------\n\nTITLE: Fix egg missing session definition\nDESCRIPTION: This commit fixes an issue where the session definition was missing in Egg.js.  Sessions are used to store user-specific data across multiple requests.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Fixing mock empty options in MidwayJS\nDESCRIPTION: This commit resolves an issue where mock functionality in MidwayJS was not working correctly when empty options were provided. The fix ensures that mock functionality can handle cases where options are not explicitly specified, possibly by providing default values or handling empty option scenarios gracefully.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Adding gRPC Framework in MidwayJS\nDESCRIPTION: This commit introduces a gRPC framework in MidwayJS. gRPC is a high-performance, open-source universal RPC framework that can be used for building distributed applications. This feature allows developers to create gRPC services and clients within the MidwayJS ecosystem.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nd90362c6bf15c00621ffc2981f19842f216395f8\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature to MidwayJS\nDESCRIPTION: This commit introduces a 'guard' feature to the MidwayJS framework. A guard is probably a component responsible for authorization and access control within the application. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/validate/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Showing All Templates with npm init\nDESCRIPTION: This command uses the `-a` flag to display all available templates, including those that might be hidden by default based on the current version. This is useful for accessing older or less common templates.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- -a\n```\n\n----------------------------------------\n\nTITLE: Fix Singleton Invoke Request Scope - Midway.js\nDESCRIPTION: This bug fix addresses an issue where the singleton invoke request scope was not valid within the Midway.js framework. This could cause unexpected behavior when using singleton-scoped services within request contexts. The fix ensures the correct scope is used, resolving potential issues with data isolation and lifecycle management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- singleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Midway CLI Replacement - JavaScript\nDESCRIPTION: This commit indicates a shift from using `egg-bin` to `midway cli`. It involves changes to the development workflow and build processes of the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\n62bbf3852899476600a0b594cb7dc274b05e29ec\n```\n\n----------------------------------------\n\nTITLE: Fixing ctx.locals Missing in FaaS\nDESCRIPTION: This bug fix addresses an issue where `ctx.locals` was missing in FaaS (Function as a Service) environments within Midway.js. The commit hash is provided for reference.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nctx.locals missing in faas ([#2302](https://github.com/midwayjs/midway/issues/2302)) ([a0a5903](https://github.com/midwayjs/midway/commit/a0a59036e0a0e8b5f92b17829af3f79191c1ee91))\n```\n\n----------------------------------------\n\nTITLE: Git Workflow for Code Contribution (Midway)\nDESCRIPTION: This snippet demonstrates the typical git workflow for contributing code changes to the Midway project. It includes creating a new branch, installing dependencies, building the code, running tests, committing changes, and pushing the branch to a remote repository.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new branch\n$ git checkout -b branch-name\n# install dependencies\n$ npm i\n# build code\n$ npm run build\n\n# Develop and execute tests\n$ npm test\n\n$ git add . # git add -u to delete files\n$ git commit -m \"fix(role): role.use must xxx\"\n$ git push origin branch-name\n```\n\n----------------------------------------\n\nTITLE: Getting Application Instance with @App() Decorator\nDESCRIPTION: This code snippet illustrates how to obtain the main Application instance using the `@App()` decorator within a MidwayJS controller. The decorator injects the Application object, allowing access to application-level configurations and services. The `@Controller` and `@Get` decorators are used for route handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Controller, Get } from '@midwayjs/core';\nimport { Application } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @App()\n  app: Application;\n\n  @Get('/')\n  async home() {\n    // this.app.getConfig()\n    // this.app.getEnv()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings in MidwayJS\nDESCRIPTION: This commit fixes the typings for supertest and createFunctionApp within the MidwayJS framework. Supertest is a library for testing HTTP assertions, and this fix ensures type safety and proper usage within the MidwayJS environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- supertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: MongoDB Dependency Installation (Mongoose v5)\nDESCRIPTION: This JSON snippet shows the dependencies required to support MongoDB Server 4.4.x, including mongoose v5 and @typegoose/typegoose v8. It demonstrates how to set up Mongoose with Typegoose for MidwayJS projects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/mongodb.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n  \"dependencies\": {\n    \"mongoose\": \"^5.13.3 \",\n    \"@typegoose/typegoose\": \"8.0.0\", // This dependency needs to be installed using typegoose\n  }\n```\n\n----------------------------------------\n\nTITLE: Sequelize Model Factory Injection in MidwayJS\nDESCRIPTION: This snippet shows the creation and injection of a Sequelize model factory. The asynchronous `factory` function retrieves a Sequelize instance from the context and defines a model. The `providerWrapper` wraps the factory function, allowing it to be injected as a dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { providerWrapper, IApplicationContext } from 'midway';\nimport * as Sequelize from 'sequelize';\nimport { Sequelize as SequelizeInstance } from 'sequelize';\n\n// 可以直接写 async 方法\nexport async function factory(context: IApplicationContext) {\n  const instance = await context.getAsync<SequelizeInstance>('coreDB');\n\n  const UiKeyTraceModel = instance.define(\n    name,\n    {\n      gmtCreate: {\n        type: Sequelize.DATE,\n        allowNull: true,\n        field: 'gmt_create',\n      },\n      gmtModified: {\n        type: Sequelize.DATE,\n        allowNull: true,\n        field: 'gmt_modified',\n      },\n    },\n    {\n      timestamps: true,\n      createdAt: 'gmt_create',\n      updatedAt: 'gmt_modified',\n      freezeTableName: true,\n      tableName: 'xxxx',\n    }\n  );\n\n  return UiKeyTraceModel;\n}\n\nproviderWrapper([\n  {\n    id: 'keyTraceModel',\n    provider: factory,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding cookie-parser Middleware in @midwayjs/express\nDESCRIPTION: This code snippet configures the `cookie-parser` middleware within a Midway.js Express application. It imports the necessary modules and adds the `cookieParser()` middleware to the application's middleware stack within the `onReady` lifecycle hook.  Requires `@midwayjs/decorator` and `@midwayjs/express`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/cookies.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// configuration.ts\n\nimport { Configuration, App } from '@midwayjs/decorator';\nimport { Application } from '@midwayjs/express';\nimport * as cookieParser from 'cookie-parser';\n\n@Configuration()\nexport class AutoConfiguration {\n  @App()\n  app: Application;\n\n  async onReady() {\n    this.app.use(cookieParser());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Health Checks with MidwayHealthService (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the MidwayHealthService to perform health checks. It shows how to retrieve the status and handle the results of the health check operation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/built_in_service.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MidwayHealthService, Configuration, Inject } from '@midwayjs/core';\n\n@Configuration({\n  // ...\n})\nexport class MainConfiguration {\n  @Inject()\n  healthService: MidwayHealthService;\n\n  async onServerReady() {\n    setInterval(() => {\n      const results = await this.healthService.getStatus();\n      \n      // console.log(results);\n      // =>\n      // {\n      //   \"status\": false\n      //   \"namespace\": \"redis\",\n      //   \"reason\": \"health check timeout\",\n      //   \"results\": [\n      //      {\n      //        \"status\": false\n      //        \"reason\": \"health check timeout\",\n      //        \"namespace\": \"redis\"\n      //      }\n      //    ]\n      // }\n      \n    }, 1000);\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Axios Configuration Instance Problems - TypeScript\nDESCRIPTION: This commit resolves issues related to axios configuration instance problems within the @midway/axios package. It ensures that multiple configuration instances work correctly and do not conflict with each other.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/axios/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n**axios:** fix @midway/axios more configuration instance problems ([#2273](https://github.com/midwayjs/midway/issues/2273)) ([edf9377](https://github.com/midwayjs/midway/commit/edf937753a1b290de77bea334a052b22adbb9684))\n```\n\n----------------------------------------\n\nTITLE: Fixing scheduleOpts Interface in Midway.js\nDESCRIPTION: This commit addresses a bug related to the scheduleOpts interface in Midway.js. It fixes issues in schedule task configuration and option handling. The commit hash is 2ae0766.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/decorator/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Dynamically Returning MIME Rules\nDESCRIPTION: This snippet demonstrates how to dynamically return MIME rules based on different conditions using a function for the `mimeTypeWhiteList` configuration option. The function receives the `ctx` object, allowing you to tailor MIME type validation based on request context.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nexport default {\n   // ...\n   upload: {\n     mimeTypeWhiteList: (ctx) => {\n       if (ctx.path === '/') {\n         return {\n           '.jpg': 'image/jpeg',\n         };\n       } else {\n         return {\n           '.jpeg': ['image/jpeg', 'image/png'],\n         }\n       };\n     }\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Local Testing of Event Trigger - TypeScript\nDESCRIPTION: This code snippet shows how to test a MidwayJS Serverless function with an event trigger locally using `createFunctionApp` and `getServerlessInstance`. It creates a function app, retrieves an instance of the service, and calls the `handleEvent` method with a test event. The test verifies that the function returns the expected output.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/aliyun_trigger_event.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('test/hello_aliyun.test.ts', () => {\n  let app: Application;\n  let instance: HelloAliyunService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext(),\n    });\n    instance = await app.getServerlessInstance<HelloAliyunService>(HelloAliyunService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from event trigger', async () => {\n    expect(await instance.handleEvent('hello world')).toEqual('hello world');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags client with Memory Storage\nDESCRIPTION: This code defines a configuration for the tags component, specifying the use of in-memory storage for the 'tagGroup1' client. It sets the `dialectType` to 'memory'.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tags.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nexport default {\n  tags: {\n    clients: {\n      'tagGroup1': {\n        // 使用 本机内存 作为数据存储\n        dialectType: 'memory',\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes for Supertest Typings\nDESCRIPTION: This commit includes bug fixes for supertest typings and createFunctionApp. It ensures that type definitions for supertest are accurate, and the createFunctionApp function works as intended.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/static-file/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- supertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Fix: Express routing middleware at controller level - Javascript\nDESCRIPTION: This commit fixes an issue where the Express routing middleware was not properly applied at the controller level. This ensures that routes defined within controllers are correctly handled by the middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nb9272e0971003443304b0c53815be31a0061b4bd\n```\n\n----------------------------------------\n\nTITLE: Adding @Framework decorator to CustomKoaFramework (Old)\nDESCRIPTION: This code snippet shows the original way to define a custom Koa framework by extending BaseFramework. It lacks the @Framework decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/upgrade_v3.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CustomKoaFramework extends BaseFramework {\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Supertest Typings and createFunctionApp\nDESCRIPTION: This commit addresses issues related to supertest typings and the createFunctionApp function in MidwayJS.  The fix likely resolves type errors or improves the usability of these features.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope in MidwayJS\nDESCRIPTION: This commit resolves an issue where the request scope was not valid when invoking singletons within the MidwayJS framework. This fix ensures that singletons correctly operate within the context of a request.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- singleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Nunjucks Template Example\nDESCRIPTION: Defines a simple Nunjucks template that displays a variable named 'user'. This template will be rendered by the MidwayJS application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// view/test.ejs\nhi, {{ user }}\n```\n\n----------------------------------------\n\nTITLE: Installing i18n Component\nDESCRIPTION: This command installs the @midwayjs/i18n component as a dependency for your Midway.js project.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/i18n/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/i18n --save\n```\n\n----------------------------------------\n\nTITLE: Adding i18n support in MidwayJS\nDESCRIPTION: This snippet indicates the addition of internationalization (i18n) support to the MidwayJS framework. This enhancement enables applications to be localized for different languages and regions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n- add i18n ([#1375](https://github.com/midwayjs/midway/issues/1375)) ([bffefe0](https://github.com/midwayjs/midway/commit/bffefe07afe45777d49b5a76b9ab17fc2b9d9a55))\n```\n\n----------------------------------------\n\nTITLE: Fixing Decorator in Midway Mock\nDESCRIPTION: This commit addresses a bug related to decorators within the midway-mock package. The fix ensures that decorators function correctly when mocking services or components within the Midway.js framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_45\n\nLANGUAGE: Other\nCODE:\n```\n60367fb\n```\n\n----------------------------------------\n\nTITLE: Aliyun API Gateway Passthrough Event (x-www-form-urlencoded)\nDESCRIPTION: This JSON snippet shows the event structure when the `content-type` is `application/x-www-form-urlencoded` with parameter passthrough. The `isBase64Encoded` field is false, and the body contains the raw form data as a string.  This example was tested with Postman.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": \"{\\\"c\\\":\\\"b\\\"}\",\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"cache-control\": \"no-cache\",\n    \"user-agent\": \"PostmanRuntime/7.24.1\",\n    \"postman-token\": \"feb51b11-9103-463a-92ff-73076d37b683\",\n    \"accept-encoding\": \"gzip, deflate, br\",\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  },\n  \"httpMethod\": \"POST\",\n  \"isBase64Encoded\": false,\n  \"path\": \"/api/321\",\n  \"pathParameters\": {\n    \"userId\": \"321\"\n  },\n  \"queryParameters\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cookie-Session Dependency in MidwayJS\nDESCRIPTION: This commit updates the cookie-session dependency to version 2 within the MidwayJS framework. Updating dependencies ensures compatibility and security by incorporating the latest features and fixes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **deps:** update dependency cookie-session to v2 ([#1483](https://github.com/midwayjs/midway/issues/1483)) ([ef1c1d1](https://github.com/midwayjs/midway/commit/ef1c1d1b8fd7dd297761e7ed3666c6bc0d496fc2))\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Property Initialization\nDESCRIPTION: This code snippet shows how to disable strict property initialization in `tsconfig.json`. When enabled, TypeScript requires all class properties to be initialized in the constructor or declared with a definite assignment assertion (!). Disabling it will prevent errors when properties are not initialized in the constructor.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/ts_problem.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"strictPropertyInitialization\": false // 或者移除\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the Development Port (@midwayjs/cli)\nDESCRIPTION: This script snippet shows how to modify the development port using `@midwayjs/cli` within the `package.json` file. The `cross-env` command sets the `NODE_ENV` environment variable to `local`.  `midway-bin dev` starts the development server. `--ts` enables TypeScript support. `--port=6001` sets the development port to 6001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/quickstart.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"scripts\": {\n  //...\n  \"dev\": \"cross-env NODE_ENV=local midway-bin dev --ts --port=6001\",\n},\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Koa Component in Typescript\nDESCRIPTION: This snippet demonstrates how a business application can directly use a custom Koa component (e.g., `@midwayjs/my-koa`) without directly importing `@midwayjs/koa`.  The `MyConfiguration` class imports and uses the custom `myKoa` component.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/component_development.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/core';\n// 你自己的组件\nimport * as myKoa from '@midwayjs/my-koa';\n\n@Configuration({\n  imports: [myKoa],\n})\nexport class MyConfiguration {\n  async onReady() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Application with Middleware\nDESCRIPTION: This code snippet shows how to configure the main Application in `src/configuration.ts` to load middleware for both KOA and WebSocket applications. It uses the `@Configuration` decorator and imports the necessary modules (`@midwayjs/koa` and `@midwayjs/ws`). The `@App()` decorator is used to inject specific Application instances, which are then configured with middleware.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/req_res_app.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\n\nimport { Configuration, ILifeCycle } from '@midwayjs/core';\nimport * as koa from '@midwayjs/koa';\nimport * as ws from '@midwayjs/ws';\n\n@Configuration({\n  imports: [koa, ws]\n})\nexport class MainConfiguration implements ILifeCycle {\n  @App()\n  koaApp: koa.Application;\n\n  @App('webSocket')\n  wsApp: ws.Application;\n\n  async onReady() {\n    this.koaApp.useMiddleweare(...);\n    this.wsApp.useMiddleweare(...);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Test\nDESCRIPTION: Demonstrates how to create a test for a WebSocket application using @midwayjs/mock.  This involves creating an application instance, performing test actions, and then closing the application to clean up resources.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/ws.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock'\n// The Framework definition used here is subject to the main framework.\nimport { Framework } from '@midwayjs/koa';\n\ndescribe('/test/index.test.ts', () => {\n\n  it('should create app and test webSocket', async () => {\n    const app = await createApp<Framework>();\n\n    //...\n\n    await close(app);\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Add Component and Framework Config Definition - Javascript\nDESCRIPTION: This commit introduces a component and framework config definition in MidwayJS. This allows for better configuration management and modularity within the framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nadd component and framework config definition ([#1367](https://github.com/midwayjs/midway/issues/1367)) ([b2fe615](https://github.com/midwayjs/midway/commit/b2fe6157f99659471ff1333eca0b86bb889f61a3))\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Prometheus for Egg.js in Midway\nDESCRIPTION: This code snippet fixes an issue related to bootstrapping the Prometheus module within a MidwayJS application that utilizes Egg.js. The fix ensures that the Prometheus module is correctly initialized and integrated with the Egg.js framework, enabling proper monitoring and metrics collection.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus/CHANGELOG.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @fileoverview Fixes the bootstrap issue for the Prometheus module when used with Egg.js.\n */\n// Bug fix for prometheus: bootstrap for egg\n// See issue [#1045](https://github.com/midwayjs/midway/issues/1045)\n// Commit: [aeb0888](https://github.com/midwayjs/midway/commit/aeb0888930d35a3e13a139f30ce4c39710823cfa)\n```\n\n----------------------------------------\n\nTITLE: Adding lint scripts to package.json\nDESCRIPTION: This TypeScript snippet demonstrates how to add lint and lint:fix scripts to the package.json file. These scripts allow for running code checks and automatically fixing linting issues using the mwts tool.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/mwts.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  \"scripts\": {\n    \"lint\": \"mwts check\",\n    \"lint:fix\": \"mwts fix\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags with MySQL Connection Lifecycle\nDESCRIPTION: This example demonstrates how to manage the MySQL connection lifecycle within a MidwayJS configuration. The connection is established in `onConfigLoad` and closed in `onStop` to ensure proper resource management. The `instance` parameter expects a `query` method.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tags.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Config, Configuration } from '@midwayjs/core';\nimport { join } from 'path';\nimport * as tags  from '@midwayjs/tags';\nimport { ITagMysqlDialectOption } from '@midwayjs/tags';\nconst mysql = require('mysql2');\n\n@Configuration({\n  imports: [\n    tags\n  ],\n})\nexport class MainConfiguration {\n  connection;\n\n  @Config()\n  tags;\n\n  async onConfigLoad(container) {\n    // 创建 mysql 连接\n    this.connection = mysql.createConnection({\n      host: 'db4free.net',\n      user: 'tag***',\n      password: 'tag***',\n      database: 'tag***',\n      charset: 'utf8',\n    });\n    let dialect: ITagMysqlDialectOption = {\n      dialectType: 'mysql',\n      sync: true,\n      instance: {\n        query: (...args) => {\n          return this.connection.promise().query(...args);\n        }\n      }\n    };\n\n    return {\n      tags: dialect\n    }\n  }\n\n  async onStop() {\n    // 关闭 mysql 连接\n    this.connection.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings & Function App in MidwayJS\nDESCRIPTION: This commit fixes type definitions for Supertest and the `createFunctionApp` function. The fix ensures accurate type information for testing and function application creation, improving developer experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/session/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit introduces a new guard feature to the MidwayJS framework. The guard mechanism likely provides a way to control access to specific resources or functionalities within the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/processAgent/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Fixing Middleware with ctx.body in MidwayJS\nDESCRIPTION: This bug fix addresses an issue related to middleware handling of `ctx.body` in MidwayJS. It ensures that middleware correctly interacts with and modifies the response body, preventing unexpected behavior or errors.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Restarting Docker Compose\nDESCRIPTION: This command restarts the services defined in the `docker-compose.yml` file. It is used after modifying the file, such as adding Grafana, to apply the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose restart\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus QPS and RT Metrics\nDESCRIPTION: This feature introduces support for collecting and exposing Query Per Second (QPS) and Response Time (RT) metrics within the Prometheus module. It allows developers to monitor the performance of their applications using these key metrics.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path\nDESCRIPTION: This commit fixes an issue with the Swagger UI where the JSON path was not correctly resolved. The fix ensures that the Swagger UI can properly load and display the API documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Fixing Duplicate Invoke in Midway.js\nDESCRIPTION: This code snippet represents a bug fix addressing an issue where invoke calls were being duplicated within the Midway.js project.  The fix likely ensures that each invoke operation is executed only once.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n6bd3f57dbd68742c5b789335b46e929b7f71c6c4\n```\n\n----------------------------------------\n\nTITLE: Fixing event name arguments in MidwayJS\nDESCRIPTION: This commit addresses a bug related to event name arguments within the MidwayJS framework. The fix likely ensures that event names are correctly passed and processed, resolving any issues arising from incorrect or missing event name data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Fix Koa Pipe Bug in MidwayJS\nDESCRIPTION: This commit fixes a bug related to Koa's pipe functionality within the MidwayJS framework. It addresses issues where the pipe operation might not function correctly, ensuring data is transferred seamlessly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/http-proxy/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nkoa pipe ([#1973](https://github.com/midwayjs/midway/issues/1973)) ([5cebb76](https://github.com/midwayjs/midway/commit/5cebb76e793abd75bc34dd328d9c1db3d430b58a))\n```\n\n----------------------------------------\n\nTITLE: Declaring faas as the main framework in configuration.ts\nDESCRIPTION: This code snippet demonstrates how to explicitly declare FaaS as the main framework in the `configuration.ts` file. By importing `@midwayjs/faas` and including it in the `imports` array within the `@Configuration` decorator, the application is configured to use the FaaS framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/serverless/serverless_v2_upgrade_serverless_v3.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration\nimport * as faas from '@midwayjs/faas';\n\n@Configuration({\n   // ...\n   imports: [\n     faas\n   ],\n})\nexport class MainConfiguration {\n   // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Tenant Module in Configuration\nDESCRIPTION: This code snippet shows how to import and integrate the `@midwayjs/tenant` module into your MidwayJS application's configuration. The `tenant` module is added to the `imports` array within the `@Configuration` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/tenant.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/core';\nimport * as tenant from '@midwayjs/tenant';\n\n@Configuration({\n  imports: [\n    // ...\n    tenant,\n  ],\n})\nexport class MainConfiguration {\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and createFunctionApp in MidwayJS\nDESCRIPTION: This commit addresses an issue related to supertest typings and the createFunctionApp function in the MidwayJS framework. This ensures correct type definitions and proper functionality when using supertest and creating function applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/security/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Including local path in source map for Midway Mock\nDESCRIPTION: This commit ensures that the source map includes the local path, which can assist in debugging and troubleshooting the midway-mock package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_59\n\nLANGUAGE: None\nCODE:\n```\na8acb01\n```\n\n----------------------------------------\n\nTITLE: Install egg-scripts dependency\nDESCRIPTION: This command installs the `egg-scripts` package as a development dependency. `egg-scripts` is a tool provided by EggJS for deploying and managing EggJS applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i egg-scripts --save\n```\n\n----------------------------------------\n\nTITLE: Generating Dependency Tree in MidwayJS\nDESCRIPTION: This code shows how to generate a dependency tree using the `dumpDependency` method of the MidwayJS container.  The generated text output can be visualized using tools like viz-js to help identify and resolve dependency-related issues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = new Container();\ncontainer.bind(UserService);\ncontainer.bind(UserController);\ncontainer.bind(DbAPI);\nconst newTree = await container.dumpDependency();\n\nconsole.log(newTree);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Decorator Metadata in TypeScript\nDESCRIPTION: This code snippet shows how to clear all module metadata associated with decorators, particularly useful in testing or multi-IoC container scenarios. It uses `clearAllModule` to remove the data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/decorator_api.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clearAllModule } from '@midwayjs/decorator';\n\n// 执行即可\nclearAllModule();\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON path in Midway.js\nDESCRIPTION: This commit resolves an issue with the Swagger UI where the JSON path was not correctly configured in Midway.js. This ensures that the Swagger UI can properly display and interact with the API documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n0f3728daccba12923f23f5b498c7dda13ced36d7\n```\n\n----------------------------------------\n\nTITLE: Fixing array query parser in MidwayJS\nDESCRIPTION: This commit fixes a bug in the query parser that handles arrays incorrectly. This addresses issue #2207. The commit hash is 94ddd691e2c0a8e06d88704d4e85a39443deef52.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Fix not found after no router set\nDESCRIPTION: This commit fixes an issue where a 'not found' error was being returned when no router was set. This ensures that the application handles requests correctly even when no routes are defined.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Defining HTTP Event Structure in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for HTTP events, specifying properties such as path, method, role, version, service ID, CORS settings, timeout, and integrated response.  This configures how HTTP requests trigger the serverless function.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface HTTPEvent {\n  path?: string;\n  method?: string | string[];\n  role?: string;\n  version?: string;\n  serviceId?: string;\n  cors?: boolean;\n  timeout?: number;\n  integratedResponse?: boolean;\n}\n\nexport interface APIGatewayEvent extends HTTPEvent {}\n```\n\n----------------------------------------\n\nTITLE: Adding original URL proxy from URL in Midway.js\nDESCRIPTION: This commit introduces the functionality to add the original URL proxy from the URL within the Midway.js framework. This enhancement improves URL handling capabilities and allows for more flexible routing configurations.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd original url proxy from url ([#1936](https://github.com/midwayjs/midway/issues/1936)) ([402ad24](https://github.com/midwayjs/midway/commit/402ad249d10f5e9a30d68ee58bc57dc33d7b3107))\n```\n\n----------------------------------------\n\nTITLE: Generating Migration with TypeORM CLI in Bash\nDESCRIPTION: This bash command demonstrates how to generate a new migration file based on changes in the entity definitions, using the TypeORM CLI (mwtypeorm) in a MidwayJS project.  The migration file is named `photo` and placed in `src/migration`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtypeorm migration:generate -d ./src/config/config.default.ts src/migration/photo\n```\n\n----------------------------------------\n\nTITLE: Fixing Error Handling in MidwayJS\nDESCRIPTION: This commit addresses an issue where real errors were hidden when user code threw exceptions. The fix ensures that the original error is properly exposed for debugging and troubleshooting purposes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-nunjucks/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Diff\nCODE:\n```\n- hide real error when user code throw error ([#1128](https://github.com/midwayjs/midway/issues/1128)) ([e728b0b](https://github.com/midwayjs/midway/commit/e728b0b80956c09cfb856ffe082f44fa29cfeb82))\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path in MidwayJS\nDESCRIPTION: This code snippet describes a bug fix related to the Swagger UI JSON path within the MidwayJS framework. The commit associated with this fix is identified by the hash 0f3728daccba12923f23f5b498c7dda13ced36d7. This fix was included in version 3.2.1 of the @midwayjs/cache package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Singleton Invoke Request Scope Validation\nDESCRIPTION: This bug fix addresses an issue where the singleton invoke request scope was not valid in MidwayJS. The fix is associated with commit f97c0632107b47cf357d17774a4e4bb5233bba57 and addresses issue #1622.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Loading Egg Application with Hook in MidwayJS\nDESCRIPTION: This commit addresses an issue with loading Egg applications by utilizing a hook mechanism. This improves the integration and lifecycle management of Egg applications within the MidwayJS environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nuse hook to load egg application ([#1782](https://github.com/midwayjs/midway/issues/1782)) ([b47f27b](https://github.com/midwayjs/midway/commit/b47f27bf441431ddb1d0d35d5ee0ae80ae56fce8))\n```\n\n----------------------------------------\n\nTITLE: Fixing mm.container test case bug in Midway Mock\nDESCRIPTION: This commit addresses a specific bug in the `mm.container` test case for the midway-mock package. The fix ensures that the test case related to container mocking functions correctly, validating the container mocking functionality as expected.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_50\n\nLANGUAGE: None\nCODE:\n```\nec491a3\n```\n\n----------------------------------------\n\nTITLE: Removing File Options in MidwayJS\nDESCRIPTION: This code change removes the file options. The associated commit is 2287e00f617b365ac28b6b2d01d3cf89d0935f9b and addresses issue #869.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Fixing passport middleware definition\nDESCRIPTION: This commit fixes the definition of the passport middleware. Fixes issue #1701. The commit hash is bca38603437f7645603feba3cd47ad9b696f8db7.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/passport/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Specifying Local Template Path with npm init\nDESCRIPTION: This command shows how to use a custom template from a local directory, using `-t`.  This is useful when developing templates locally. The path can be relative or absolute.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/create_midway.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init midway -- -t=./custom-template\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Namespace in MidwayJS\nDESCRIPTION: This bug fix resolves an issue where the namespace for the request container was missing in MidwayJS. This ensures that the request container is correctly initialized and accessible, preventing errors during request processing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Configuring dateStrings for DATETIME Format in TypeORM in TypeScript\nDESCRIPTION: This snippet illustrates how to configure TypeORM to return date values in DATETIME format from MySQL. By setting the `dateStrings` property to `true`, the application receives dates as strings in the 'YYYY-MM-DD HH:mm:ss' format instead of JavaScript Date objects.  Also shows how to update the entity type.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport default {\n  // ...\n  typeorm: {\n    dataSource: {\n      default: {\n        //...\n        dateStrings: true,\n      }\n    }\n  },\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@UpdateDateColumn({\n  name: \"gmt_modified\",\n  type: 'timestamp'\n})\ngmtModified: string;\n\n@CreateDateColumn({\n  name: \"gmt_create\",\n  type: 'timestamp',\n})\ngmtCreate: string;\n\n```\n\n----------------------------------------\n\nTITLE: Installing Bundle Helper for Single File Build\nDESCRIPTION: This command installs the `@midwayjs/bundle-helper` package as a development dependency. This package is used to generate the entry point for the single file build.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/deployment.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n## Used to generate entry\n$ npm i @midwayjs/bundle-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Hiding Real Error when User Code Throws\nDESCRIPTION: This commit improves error handling by masking the underlying error when user code throws an exception.  This is done to prevent exposing sensitive implementation details in error messages.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nhide real error when user code throw error ([#1128](https://github.com/midwayjs/midway/issues/1128)) ([e728b0b](https://github.com/midwayjs/midway/commit/e728b0b80956c09cfb856ffe082f44fa29cfeb82))\n```\n\n----------------------------------------\n\nTITLE: Midway Container Pseudo Code (TypeScript)\nDESCRIPTION: This snippet illustrates the internal working of the MidwayJS dependency injection container. It shows how the container binds classes with the `@Provide` decorator and how it handles dependency resolution and instantiation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/container.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/***** The following is Midway's internal code *****/\n\nconst container = new MidwayContainer();\ncontainer.bind(UserController);\ncontainer.bind(UserService);\n```\n\n----------------------------------------\n\nTITLE: Custom Server Response - JSON Template (TypeScript)\nDESCRIPTION: This code shows the default JSON template used by `HttpServerResponse` for successful and failed responses. It defines the structure of the JSON response with 'success' and 'data' or 'message' fields.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-08-29-release-3.17.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nHttpServerResponse.JSON_TPL = (data, isSuccess) => {\n  if (isSuccess) {\n    return {\n      success: 'true',\n      data,\n    };\n  } else {\n    return {\n      success: 'false',\n      message: data || 'fail',\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Close app instance with close\nDESCRIPTION: This snippet demonstrates how to close a Midway.js application instance using the `close` function from `@midwayjs/mock`. Closing the app releases resources and ensures a clean test environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/testing.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, close } from '@midwayjs/mock';\n\nawait close(app);\n```\n\n----------------------------------------\n\nTITLE: Fixing Singleton Invoke Request Scope in MidwayJS\nDESCRIPTION: This code snippet describes a bug fix related to singleton invoke request scope within the MidwayJS framework. The commit associated with this fix is identified by the hash f97c0632107b47cf357d17774a4e4bb5233bba57. This fix was included in version 3.0.2 of the @midwayjs/cache package.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nsingleton invoke request scope not valid ([#1622](https://github.com/midwayjs/midway/issues/1622)) ([f97c063](https://github.com/midwayjs/midway/commit/f97c0632107b47cf357d17774a4e4bb5233bba57))\n```\n\n----------------------------------------\n\nTITLE: Adding Set Difference Functionality\nDESCRIPTION: This feature adds a `setDiff` function to the MidwayJS framework. The function calculates the difference between two sets, providing a utility for comparing and manipulating sets of data.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Disable package-lock.json Generation in npm\nDESCRIPTION: This command configures npm to prevent the automatic generation of the `package-lock.json` file. This file is intended to lock down dependency versions, but it can sometimes cause unexpected issues. Running this command will modify npm's global configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/npm_problem.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm config set package-lock false\n```\n\n----------------------------------------\n\nTITLE: Disable CSRF in Egg Security\nDESCRIPTION: This TypeScript code snippet shows how to disable CSRF (Cross-Site Request Forgery) protection in EggJS. It's generally recommended to understand the implications of disabling CSRF before doing so.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/egg.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const security = {\n  csrf: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @midwayjs/egg-ts-helper using npm\nDESCRIPTION: This snippet shows how to install the @midwayjs/egg-ts-helper package as a dev dependency using npm. This package provides the `ets` command for generating typings.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/tool/egg-ts-helper.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @midwayjs/egg-ts-helper --save-dev\n$ ets\n```\n\n----------------------------------------\n\nTITLE: Formatting code in MidwayJS\nDESCRIPTION: This commit focuses on code formatting improvements within the MidwayJS project. It suggests that changes were made to adhere to a consistent coding style, enhancing readability and maintainability of the codebase.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring midway-bin clean\nDESCRIPTION: Configures the `midway-bin-clean` section in `package.json` to specify additional directories and files to be cleaned. Uses paths relative to the application root.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"midway-bin-clean\": [\"src/app/public\", \"resource/temp\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing NYC config in Midway Mock\nDESCRIPTION: This commit removes the NYC configuration from the midway-mock package. This may be related to changes in code coverage tooling or configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_58\n\nLANGUAGE: None\nCODE:\n```\n58f99de\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path Replacement\nDESCRIPTION: This commit corrects an issue where the JSON path was not being properly replaced in the Swagger UI. The fix ensures that the Swagger UI correctly displays API documentation based on the JSON schema.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Configuring Node.js mirror address using nvs\nDESCRIPTION: This snippet configures the Node.js mirror address using nvs to use npmmirror.com. This is useful in China to avoid issues accessing the default Node.js distribution site. The second command lists configured remotes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/how_to_install_nodejs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ nvs remote node https://npmmirror.com/mirrors/node/\n$ nvs remote\n```\n\n----------------------------------------\n\nTITLE: Setting SACK to 0 - Bash\nDESCRIPTION: This snippet sets TCP SACK to 0 for troubleshooting network issues.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/orm.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$sudo sysctl -w net.inet.tcp.sack=0\n```\n\n----------------------------------------\n\nTITLE: PM2 Global Installation\nDESCRIPTION: This command installs PM2 globally using npm.  A global installation allows PM2 to be accessed from anywhere in the system. This is a prerequisite for using PM2 to manage applications.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/pm2.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pm2 -g# command line installation pm2\n```\n\n----------------------------------------\n\nTITLE: Disable Egg View Plugin\nDESCRIPTION: Disables the default view plugin in an Egg.js application when using @midwayjs/web. This prevents conflicts with the @midwayjs/view-* components.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/render.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EggPlugin } from 'egg';\nexport default {\n  // ...\n  view: false,\n} as EggPlugin;\n```\n\n----------------------------------------\n\nTITLE: Fixing bootstrap missing create logger in MidwayJS\nDESCRIPTION: This commit resolves an issue where the `create logger` functionality was missing during the bootstrap process in MidwayJS. The fix ensures that the logger is properly initialized during startup, allowing the application to log events and errors from the beginning.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Defining a User Interface\nDESCRIPTION: This code defines a simple TypeScript interface for a `User` object.  It specifies the structure of the user data, including `id`, `name`, and `age` properties with their respective types. This interface can be used to type-check user data throughout the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// src/interface.ts\nexport interface User {\n  id: number;\n  name: string;\n  age: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path in MidwayJS\nDESCRIPTION: This commit addresses an issue in the MidwayJS framework related to the Swagger UI, specifically fixing the JSON path. This ensures that the Swagger UI correctly displays and utilizes the API documentation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/express-session/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- swagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Using dotenv for Environment Variables - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `dotenv` package to load environment variables from a `.env` file into the `process.env` object, making them accessible within the application configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/env_config.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Configuration } from '@midwayjs/decorator';\nimport * as dotenv from 'dotenv';\n\n// load .env file in process.cwd\ndotenv.config();\n\n@Configuration({\n  //...\n})\nexport class AutoConfiguration {\n  async onReady(container) {}\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\n\nexport const oss = {\n  accessKey: process.env.OSS_ACCESSKEY, // 54321\n  secret: process.env.OSS_SECRET, // 12345\n};\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Original JWT Object\nDESCRIPTION: This snippet shows how to access the original JWT object and its methods through the exported `Jwt` object from the @midwayjs/jwt package. This allows access to types like `TokenExpiredError`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/jwt.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Jwt } from '@midwayjs/jwt';\n\n// Jwt.TokenExpiredError\n```\n\n----------------------------------------\n\nTITLE: Loading Config Once in MidwayJS\nDESCRIPTION: This code change ensures that the configuration is loaded only once and supports loading singleton services before the framework starts. The associated commit is 201dd5930bd97f62e5717777b2941b47b54d68c6 and addresses issue #970.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Adding Event Name Arguments\nDESCRIPTION: This commit introduces arguments for event names, enhancing the flexibility and clarity of event handling within the system. It allows for more precise identification and management of events.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mongoose/CHANGELOG.md#_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nadd event name args ([#986](https://github.com/midwayjs/midway/issues/986)) ([bfd8232](https://github.com/midwayjs/midway/commit/bfd82320aee8600d8fa30bd2821a0e68c80fd755))\n```\n\n----------------------------------------\n\nTITLE: Default Express Configuration\nDESCRIPTION: This code snippet shows the default configuration for the Express module in a MidwayJS application. It sets the default port to 7001.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/express.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default\nexport default {\n  // ...\n  express: {\n    port: 7001\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Decorators (TypeScript)\nDESCRIPTION: This snippet shows how to import decorators like `App` and `Config` from `@midwayjs/decorator` in Serverless v2.0.  The lowercase decorators are replaced with uppercase decorators.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_v1_upgrade_serverless_v2.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App, Config } from '@midwayjs/decorator';\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Factory Instance Priorities (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set priorities for service factory instances using `clientPriority` in the configuration. Instances can be assigned different priorities (e.g., `DEFAULT_PRIORITY.L1`, `DEFAULT_PRIORITY.L3`). These priorities affect external logic like health checks, where lower-priority instances might be skipped or considered weak dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/blog/2024-01-13-release-3.14.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// config.default.ts\nimport { DEFAULT_PRIORITY } from '@midwayjs/core';\n\nexport default {\n  redis: {\n    clients: {\n      instance1: {\n        // ...\n      },\n      instance2: {\n        // ...\n      }\n    },\n    clientPriority: {\n      instance1: DEFAULT_PRIORITY.L1,\n      instance2: DEFAULT_PRIORITY.L3,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ctx.throw for Serverless Apps in Midway.js\nDESCRIPTION: This commit introduces the ctx.throw method for serverless applications within the Midway.js framework. This feature provides a standardized way to handle and propagate errors in serverless environments, improving application robustness.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd ctx.throw for serverless app ([#1262](https://github.com/midwayjs/midway/issues/1262)) ([70008b3](https://github.com/midwayjs/midway/commit/70008b32157286708ec01390b0bf8233ba5a84dd))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Framework (TypeScript)\nDESCRIPTION: This code snippet implements a basic HTTP server framework. It inherits from `BaseFramework`, implements `applicationInitialize` to create an HTTP server and request context, and implements `run` to start the server. This example demonstrates how to bootstrap a simple application using the Midway framework structure.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/framework_development.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseFramework, IConfigurationOptions, IMidwayApplication, IMidwayContext } from '@midwayjs/core';\nimport * as http from 'http';\n\n// 定义一些上层业务要使用的定义\nexport interface Context extends IMidwayContext {}\n\nexport interface Application extends IMidwayApplication<Context> {}\n\n// 这里是 new Framework().configure({...}) 传递的参数定义\nexport interface IMidwayCustomConfigurationOptions extends IConfigurationOptions {\n  port: number;\n}\n\n// 实现一个自定义框架，继承基础框架\nexport class MidwayCustomHTTPFramework extends BaseFramework<Application, Context, IMidwayCustomConfigurationOptions> {\n  public app: Application;\n\n  async applicationInitialize(options: Partial<IMidwayBootstrapOptions>) {\n    // 创建一个 app 实例\n    this.app = http.createServer((req, res) => {\n      // 创建请求上下文，自带了 logger，请求作用域等\n      const ctx = this.app.createAnonymousContext();\n      // 从请求上下文拿到注入的服务\n      ctx.requestContext\n        .getAsync('xxxx')\n        .then((ins) => {\n          // 调用服务\n          return ins.xxx();\n        })\n        .then(() => {\n          // 请求结束\n          res.end();\n        });\n    });\n\n    // 给 app 绑定上 midway 框架需要的一些方法，比如 getConfig, getLogger 等。\n    this.defineApplicationProperties();\n  }\n\n  async run() {\n    // 启动的参数，这里只定义了启动的 HTTP 端口\n    if (this.configurationOptions.port) {\n      new Promise<void>((resolve) => {\n        this.server.listen(this.configurationOptions.port, () => {\n          resolve();\n        });\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags Component with Memory Storage\nDESCRIPTION: This snippet shows how to configure the `@midwayjs/tags` component to use in-memory storage for tag data.  It defines a client named `tagGroup1` and sets its `dialectType` to `memory`. This configuration is typically placed in the `src/config/config.local.ts` file.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/tags.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.local.ts\nexport default {\n   tags: {\n     clients: {\n       'tagGroup1': {\n         // Use local memory as data storage\n         dialectType: 'memory',\n       },\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Aliyun Deployment Timeout in Configuration (TypeScript)\nDESCRIPTION: This TypeScript-like snippet demonstrates how to configure the deployment timeout in the `~/.fcli/config.yaml` file for the Alibaba Cloud Function Compute deployment tool (funcraft). The timeout is specified in seconds.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/deploy_aliyun_faq.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nendpoint: ***************\napi_version: '2016-08-15'\naccess_key_id: ***************\naccess_key_secret: ***************\nsecurity_token: ''\ndebug: false\ntimeout: 50      ## 部署超时时间，单位为 s\nretries: 3\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Passport Compatibility Code\nDESCRIPTION: This commit fixes passport compatible code in MidwayJS. This likely addresses issues related to authentication when using Passport.js with MidwayJS.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/prometheus-socket-io/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npassport compatible code ([#2133](https://github.com/midwayjs/midway/issues/2133)) ([2975e4f](https://github.com/midwayjs/midway/commit/2975e4f5b6cf8cbcd42cbfb8ce3e08633dbba383))\n```\n\n----------------------------------------\n\nTITLE: Adding custom error code in MidwayJS\nDESCRIPTION: This commit introduces custom error codes and adds the @Files and @Fields decorators within the MidwayJS framework. It's associated with issue #1438 and identified by commit hash b0032afd2fa9ea0416fe69f4bd0c1a58bea5314e.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ncustom error code & add @Files/@Fields ([#1438](https://github.com/midwayjs/midway/issues/1438)) ([b0032af](https://github.com/midwayjs/midway/commit/b0032afd2fa9ea0416fe69f4bd0c1a58bea5314e))\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup\nDESCRIPTION: These shell commands install dependencies, start the development server, and open the application in a browser. It uses npm for package management.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/test/fixtures/enhance/base-app-hackernews/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install\n$ npm run dev\n$ open http://localhost:7001/\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature in MidwayJS\nDESCRIPTION: This commit adds a 'guard' feature to the MidwayJS framework.  A guard likely provides a mechanism for controlling access or behavior based on certain conditions, potentially enhancing security or adding conditional logic.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/ws/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nadd guard ([#2345](https://github.com/midwayjs/midway/issues/2345)) ([1b952a1](https://github.com/midwayjs/midway/commit/1b952a1b09adbb88ff3cff9a2974eb1e37ce53a5))\n```\n\n----------------------------------------\n\nTITLE: Adding Guard Feature\nDESCRIPTION: This code snippet adds a guard feature to the Midway.js project. It is associated with commit 1b952a1 and issue #2345.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/async-hooks-context-manager/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Midway Mock: Feature for applicationContext and IoC mocking\nDESCRIPTION: This feature introduces support for `applicationContext` to retrieve ctx dependency injection and for mocking object methods within the IoC container.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_61\n\nLANGUAGE: None\nCODE:\n```\n4f07c6d\n```\n\n----------------------------------------\n\nTITLE: Defining Service Structure in TypeScript\nDESCRIPTION: This TypeScript code defines the structure for a service in a serverless application. It allows for a simplified string representation or a detailed object with a name and description.  This provides flexibility in defining the service depending on complexity.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ServiceStructure =\n  | string\n  | {\n      name: string;\n      description?: string;\n    };\n```\n\n----------------------------------------\n\nTITLE: Fixing middleware return issue in Midway.js\nDESCRIPTION: This commit addresses an issue where middleware was not properly returning in resolve scenarios within Midway.js. This ensures that middleware functions correctly execute and pass control to the next handler in the chain.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nec018a3365b06c1cc809e014afede0a24ce1dd74\n```\n\n----------------------------------------\n\nTITLE: Bug fix: Supertest typings and createFunctionApp\nDESCRIPTION: This commit resolves issues with Supertest typings and the createFunctionApp function within the Midway.js framework. The fix ensures type compatibility and proper functionality for testing purposes. The fix is identified by commit hash 484f4f4.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cross-domain/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsupertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Adding Component and Framework Config Definition\nDESCRIPTION: This commit introduces component and framework configuration definitions. This feature enhances the configurability and modularity of MidwayJS applications, as described in issue #1367.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nb2fe6157f99659471ff1333eca0b86bb889f61a3\n```\n\n----------------------------------------\n\nTITLE: Run unit tests\nDESCRIPTION: Runs the unit tests using npm. Ensures the code functions as expected and prevents regressions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Consumer Implementation (eachBatch)\nDESCRIPTION: Illustrates an alternative consumer implementation using the `eachBatch` method to process messages in batches. This can improve performance when handling a high volume of messages. The consumer name ('sub1') must match the configuration.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/kafka.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/consumer/sub1.consumer.ts\nimport { KafkaConsumer, IKafkaConsumer, EachBatchPayload } from '@midwayjs/kafka';\n\n@KafkaConsumer('sub1')\nclass Sub1Consumer implements IKafkaConsumer {\n  async eachBatch(payload: EachBatchPayload) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature: Consul Registration and Balancer - Javascript\nDESCRIPTION: Adds features for registering services with a Consul server and looking up services with load balancing capabilities. This allows the system to use Consul for service discovery and request distribution.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/consul/CHANGELOG.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nd5f99167b63102e0e98ef7e5a92368320ef0e0f2\n```\n\n----------------------------------------\n\nTITLE: Context Handler Function Injection in MidwayJS\nDESCRIPTION: This code snippet demonstrates how to inject a function into a MidwayJS class, providing access to the context object. The `contextHandler` function receives the context and returns an asynchronous function that can be injected and used in other IoC objects. The `providerWrapper` function registers the function with a specific ID.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/injection.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport function contextHandler(context) {\n  return async () => {\n    // const xxx = context.getAsync('xxxx');\n    return true;\n  };\n}\n\nproviderWrapper([\n  {\n    id: 'contextHandler',\n    provider: contextHandler,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Fix: Swagger UI JSON Path Replacement in MidwayJS\nDESCRIPTION: This commit fixes an issue where the JSON path in the Swagger UI was being replaced incorrectly within the MidwayJS framework. This likely involves updates to the swagger-related components to ensure proper API documentation generation.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/validate/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Adding Koa Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add `@midwayjs/koa` as a dependency in the `package.json` file. This is an alternative to using the `npm install` command. After adding this, you need to run `npm install` to install the dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/koa.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@midwayjs/koa\": \"^3.0.0\",\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining extended fields with ApiExtension in TypeScript\nDESCRIPTION: This snippet shows how to add extended fields to Swagger using the `@ApiExtension` decorator in MidwayJS.  This allows adding custom metadata to the Swagger definition using the `x-` prefix.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/swagger.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@ApiExtension('x-hello', { hello: 'world' })\n```\n\n----------------------------------------\n\nTITLE: Install sequelize-auto-midway\nDESCRIPTION: Installation command for sequelize-auto-midway using npm. This command adds the package to your project's dependencies.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/sequelize_generator.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i sequelize-auto-midway\n```\n\n----------------------------------------\n\nTITLE: Updating Socket.IO Dependencies in Midway.js\nDESCRIPTION: This code snippet represents a bug fix where the socket.io packages were updated to version 4.5.3 within the Midway.js project. This ensures compatibility and addresses potential issues with older versions.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/bootstrap/CHANGELOG.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n3bc64d60d1648e18304259f1b957349f8d8e9ac6\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Parsing Example (querystring)\nDESCRIPTION: This JSON snippet illustrates the default query parameter parsing behavior using `querystring`. Note how the framework will split the data in the array.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"a[0]\": 1,\n     \"a[1]\": 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Add Event Name Arguments - Javascript\nDESCRIPTION: This commit adds event name arguments, likely to an event emitter or similar system within MidwayJS. This allows for more specific and targeted event handling.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cache-manager/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nadd event name args ([#986](https://github.com/midwayjs/midway/issues/986)) ([bfd8232](https://github.com/midwayjs/midway/commit/bfd82320aee8600d8fa30bd2821a0e68c80fd755))\n```\n\n----------------------------------------\n\nTITLE: Fixing config filter in MidwayJS\nDESCRIPTION: This commit fixes a bug related to the configuration filter and modifies the Sequelize and Mongoose configurations within the MidwayJS project. It's associated with issue #2150 and commit hash 5db3b9b56b6eac393820acf9f089e6f8cdd6a8b6.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/typegoose/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd config filter and modify sequelize & mongoose config ([#2150](https://github.com/midwayjs/midway/issues/2150)) ([5db3b9b](https://github.com/midwayjs/midway/commit/5db3b9b56b6eac393820acf9f089e6f8cdd6a8b6))\n```\n\n----------------------------------------\n\nTITLE: Upgrading ioredis to v5 in MidwayJS\nDESCRIPTION: This feature updates the ioredis dependency to version 5 in the MidwayJS Redis module. This upgrade brings performance improvements and new features provided by ioredis v5.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Custom CutPipe Implementation\nDESCRIPTION: This code defines a custom pipe named `CutPipe` that implements the `PipeTransform` interface. The `transform` method takes a number as input and returns a string that is a substring of the number's string representation, starting from index 5. The `@Pipe` decorator registers the class as a pipe.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/pipe.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Pipe()\nexport class CutPipe implements PipeTransform {\n   transform(value: number, options: TransformOptions): string {\n     return String(value).slice(5);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Supertest Typings and createFunctionApp\nDESCRIPTION: This commit addresses issues related to supertest typings and the createFunctionApp function in MidwayJS. The fix ensures that the typings are correct and that the createFunctionApp function works as expected, improving the testing experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/redis/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Importing Task Module in Configuration\nDESCRIPTION: Imports the @midwayjs/task module and adds it to the imports array in the Midway.js configuration file (configuration.ts). This enables the task scheduling functionality in the application.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/extensions/task.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/configuration.ts\nimport { Configuration } from '@midwayjs/decorator';\nimport * as task from '@midwayjs/task'; // 导入模块\nimport { join } from 'path';\n\n@Configuration({\n  imports: [task],\n  importConfigs: [join(__dirname, 'config')],\n})\nexport class AutoConfiguration {}\n\n```\n\n----------------------------------------\n\nTITLE: Example Provider Configuration in YAML (Tencent Cloud)\nDESCRIPTION: This YAML snippet provides an example of a provider configuration for Tencent Cloud. It includes settings for runtime, memory size, timeout, service ID, and region, configured for deployment on the Tencent Cloud platform.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  name: tencent\n  runtime: Nodejs10\n  memorySize: 128\n  timeout: 10\n  serviceId: xxxxx\n  region: ap-shanghai\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose\nDESCRIPTION: This command starts the services defined in the `docker-compose.yml` file, including Prometheus.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/prometheus.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up\n```\n\n----------------------------------------\n\nTITLE: Deploying Web Application with Node.js\nDESCRIPTION: This command executes the `bootstrap.js` file using Node.js, which is likely responsible for starting the web application in a production environment. This command assumes that the application has been built.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/hooks/hooks_create.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ node bootstrap.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Extension\nDESCRIPTION: This snippet sets the default extension for view files. When rendering a view without specifying an extension, the configured default extension will be appended. This simplifies the rendering process in controllers.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/config/config.default.ts\nexport const view = {\n  defaultExtension: '.html',\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// controller\nimport { Inject, Provide } from '@midwayjs/core';\nimport { Context } from '@midwayjs/koa';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async render(){\n    // render user.html\n    await this.ctx.render('user');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing OSS Config Typings in Midway.js\nDESCRIPTION: This commit addresses an issue related to the typings for OSS (Object Storage Service) configurations within the Midway.js framework. The fix ensures accurate type definitions for OSS configurations, improving code reliability and developer experience.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noss config typings ([#2277](https://github.com/midwayjs/midway/issues/2277)) ([f62e42a](https://github.com/midwayjs/midway/commit/f62e42abf18ff4df3b6d2f23189ec0a46db72c11))\n```\n\n----------------------------------------\n\nTITLE: Fixing Swagger UI JSON Path Replacement in MidwayJS\nDESCRIPTION: This commit addresses a bug in the Swagger UI related to the replacement of JSON paths within the MidwayJS framework. It corrects the generation or display of API documentation using Swagger UI, specifically affecting how JSON paths are handled, and it is related to issue #1860.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/cos/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nswagger ui replace json path ([#1860](https://github.com/midwayjs/midway/issues/1860)) ([0f3728d](https://github.com/midwayjs/midway/commit/0f3728daccba12923f23f5b498c7dda13ced36d7))\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status Code with ctx.status\nDESCRIPTION: This example demonstrates how to set the HTTP response status code using the `ctx.status` property in Midway Serverless.  This is a proxy for `response.statusCode`. In the example, it sets the status code to 404.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/serverless/serverless_context.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nctx.status = 404;\n```\n\n----------------------------------------\n\nTITLE: Using Data Subscription in UserService with TypeScript\nDESCRIPTION: This code demonstrates how to inject and use the `MemoryDataListener` in a `UserService`. The `getData` method of the listener is called to retrieve the current data. The `@Inject` decorator is used to inject the listener instance.  This class demonstrates the use of dependency injection to use a data listener.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/data_listener.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject } from '@midwayjs/core';\nimport { MemoryDataListener } from '../listener/memory.listner.ts';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  memoryDataListener: MemoryDataListener;\n\n  async getUserHelloData() {\n    const helloData = this.memoryDataListener.getData();\n    // helloData => helloxxxxxxxx\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Request/Response in Express Context - JavaScript\nDESCRIPTION: This commit modifies how the request and response objects are bound to the context (ctx) in Express. The change likely involves updating how these objects are accessed or managed within the Midway.js framework when using Express.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web-express/CHANGELOG.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n1d2639698e8e292fe12506a6e530a6d032f46d7e\n```\n\n----------------------------------------\n\nTITLE: Deploying the application\nDESCRIPTION: This command starts the application in production mode. It assumes the application has been built and configured for a production environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Checking Compatibility with yarn\nDESCRIPTION: This command checks the compatibility of installed Midway dependencies using yarn. It first adds the `midway-version` as a dev dependency and then executes the command.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/version_check.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add midway-version@latest\n$ yarn midway-version\n```\n\n----------------------------------------\n\nTITLE: Adding component and framework config definition in MidwayJS\nDESCRIPTION: This snippet indicates adding the definition of component and framework configurations in MidwayJS. This likely includes defining the structure and types of configuration objects for both components and the overall framework.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- add component and framework config definition ([#1367](https://github.com/midwayjs/midway/issues/1367)) ([b2fe615](https://github.com/midwayjs/midway/commit/b2fe6157f99659471ff1333eca0b86bb889f61a3))\n```\n\n----------------------------------------\n\nTITLE: Fixing supertest typings in MidwayJS\nDESCRIPTION: This code snippet fixes the typings for supertest and createFunctionApp in the MidwayJS framework. It addresses issue #1642 and includes a commit hash for the changes.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/oss/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- supertest typings and createFunctionApp ([#1642](https://github.com/midwayjs/midway/issues/1642)) ([484f4f4](https://github.com/midwayjs/midway/commit/484f4f41b3b9e889d4d285f4871a0b37fa51e73f))\n```\n\n----------------------------------------\n\nTITLE: Fixing COS config definition in Midway.js\nDESCRIPTION: This commit fixes the configuration definition for COS (Cloud Object Storage) within Midway.js and updates the documentation for version 3.x. This ensures that developers can correctly configure and use COS with Midway.js.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n0ac7ac5805b7ab8873f8792fc1712a74e3223172\n```\n\n----------------------------------------\n\nTITLE: Supporting Koa App Creation\nDESCRIPTION: This commit adds support for creating Koa applications, allowing developers to leverage the Koa framework within the Midway.js environment.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nsupport koa app create ([#173](https://github.com/midwayjs/midway-faas/issues/173)) ([c3793eb](https://github.com/midwayjs/midway-faas/commit/c3793eba182f634684fdaf147981433bb64639a1))\n```\n\n----------------------------------------\n\nTITLE: `first` Query Parsing Effect Example\nDESCRIPTION: This JSON snippet illustrates the `first` query parsing effect on the given request parameter using the `qs` module.  Only the first value for each parameter name is retained.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/koa.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"a\": \"1\",\n   \"b\": \"2\",\n   \"c\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing zlib Dependency in MidwayJS\nDESCRIPTION: This change removes the zlib dependency from the MidwayJS package. This can reduce the overall bundle size and improve performance by eliminating an unnecessary dependency.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/socketio/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Installing Database Driver (sql.js Example)\nDESCRIPTION: This command installs the sql.js driver for Sequelize.  This driver is needed to connect to a sql.js database.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/sequelize.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# for sql.js\nnpm install sql.js --save\n```\n\n----------------------------------------\n\nTITLE: Fix root path regexp in Midway\nDESCRIPTION: This commit fixes a regular expression used for matching the root path in Midway. The incorrect regular expression caused routing or path resolution issues. The fix ensures that the root path is correctly matched, resolving the related routing or path resolution problems.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mikro/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Defining global any type in Midway Mock\nDESCRIPTION: This commit introduces a global `any` type definition within the midway-mock package. This is likely for TypeScript compatibility and allowing flexible handling of types during mocking.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/mock/CHANGELOG.md#_snippet_60\n\nLANGUAGE: None\nCODE:\n```\na1c5910\n```\n\n----------------------------------------\n\nTITLE: Fix: AMQPLIB Optional Dependency - MidwayJS Mock\nDESCRIPTION: This commit addresses an issue where amqplib was not an optional dependency in the mock package. This fix ensures that the mock package can be used without requiring amqplib to be installed, providing more flexibility for testing.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/rabbitmq/CHANGELOG.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nimplement optional dep for amqplib in mock package ([#654](https://github.com/midwayjs/midway/issues/654)) ([3319872](https://github.com/midwayjs/midway/commit/33198727855ff042db7d96723992b49c632aa25d))\n```\n\n----------------------------------------\n\nTITLE: Fixing egg application loading in MidwayJS\nDESCRIPTION: This code snippet fixes an issue with loading the Egg.js application within the MidwayJS framework by utilizing a hook. It resolves issue #1782 and includes a commit hash.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/oss/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- use hook to load egg application ([#1782](https://github.com/midwayjs/midway/issues/1782)) ([b47f27b](https://github.com/midwayjs/midway/commit/b47f27bf441431ddb1d0d35d5ee0ae80ae56fce8))\n```\n\n----------------------------------------\n\nTITLE: Install Luckyeye package\nDESCRIPTION: This command installs the `@midwayjs/luckyeye` package as a development dependency. This package provides rule checking tools for MidwayJS projects.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/tool/luckyeye.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm I @midwayjs/luckyeye --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using EggJS Plugin in MidwayJS Controller\nDESCRIPTION: This TypeScript code illustrates how to utilize an EggJS plugin within a MidwayJS controller. It uses `@App` and `@Inject` to obtain the `app` and `ctx` objects respectively, allowing access to plugin methods. It also demonstrates injecting plugins via the `@Plugin` decorator.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/egg.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Inject, Get } from '@midwayjs/core';\nimport { Application, Context } from '@midwayjs/web';\n\n@Provide()\nexport class HomeController {\n\n  @App()\n  app: Application;\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home() {\n  \tThis. app.mysql.query (SQL, values); // Call methods on app (if any)\n    This. ctx.mysql.query (SQL, values); // Call the method mounted on ctx (if any)\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Provide, Get, Plugin } from '@midwayjs/core';\n\n@Provide()\nexport class HomeController {\n\n  @Plugin()\n  mysql: any;\n\n  @Get('/')\n  async home() {\n  \tthis.mysql.query( SQL, values);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Hidden Error\nDESCRIPTION: This commit fixes a bug where the real error was hidden when the user code threw an error. The fix ensures that the actual error is displayed, aiding in debugging.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view-ejs/CHANGELOG.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nhide real error when user code throw error ([#1128](https://github.com/midwayjs/midway/issues/1128)) ([e728b0b](https://github.com/midwayjs/midway/commit/e728b0b80956c09cfb856ffe082f44fa29cfeb82))\n```\n\n----------------------------------------\n\nTITLE: Upgrading to the Latest Version using npm\nDESCRIPTION: This command upgrades all Midway modules to the latest version using npm.  The `-u` flag instructs the tool to identify the latest available version.  The `-w` flag writes the changes to `package.json` and `package-lock.json`.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/tool/version_check.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest -u\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npx midway-version@latest -u -w\n```\n\n----------------------------------------\n\nTITLE: tslint-midway-contrib Configuration\nDESCRIPTION: Extends the `tslint.json` configuration file to include the `tslint-midway-contrib` rules. This enables the basic TypeScript linting rules provided by Midway.js.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/tool/cli.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n// tslint.json\n{\n  \"extends\": [\"tslint-midway-contrib\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Variables (JavaScript)\nDESCRIPTION: This shows the standard JavaScript way of importing modules using `require`. The first example shows how to access an exported property directly.  The second example demonstrates destructuring to pull out properties more explicitly.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-1.0.0/ts_guide.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// js 写法\nconst applicatoin = require('midway').application;\nconst { applicatoin } = require('midway');\n```\n\n----------------------------------------\n\nTITLE: Disabling Unused Locals Check (TypeScript)\nDESCRIPTION: This snippet shows how to disable the unused locals check in the `tsconfig.json` file. When enabled, TypeScript will report an error if a variable is declared but never used. Setting `noUnusedLocals` to `false` disables this check, allowing unused variables without causing a compilation error.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/faq/ts_problem.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noUnusedLocals\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tencent Cloud Trigger Form Body Result\nDESCRIPTION: This TypeScript snippet shows how the request body is accessed in the serverless function when using Tencent Cloud with form data. The request body is parsed into a JSON object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_post_difference.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nctx.request.body; // {\"c\":\"b\"}   => object\n```\n\n----------------------------------------\n\nTITLE: Removing Zlib Dependency in MidwayJS\nDESCRIPTION: This code snippet is a bug fix to remove the zlib dependency. The associated commit hash is cc2cd405a104b3388d93a09d981b59b472fd8ea1 and addresses issue #1035.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/web/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Adding App Keys\nDESCRIPTION: This commit adds `app.keys` to the application context. The `app.keys` configuration is essential for session management and other security-related features, as highlighted in issue #1395.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages/view/CHANGELOG.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nc44afc6cc6764a959d1fa7ae04d60099282d156a\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity with TypeORM CLI in Bash\nDESCRIPTION: This bash command demonstrates how to create a new entity file using the TypeORM CLI (mwtypeorm) in a MidwayJS project. It generates a file named `User.ts` inside the `src/entity/` directory.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/orm.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ npx mwtypeorm entity:create src/entity/User\n```\n\n----------------------------------------\n\nTITLE: Data Transfer Objects (DTOs) Definitions\nDESCRIPTION: Defines several DTOs to represent data structures: VideoDto, AccountDto, TabDto, and HomepageDto. These are used to structure the data returned by the different pipeline stages. They specify the shape of the data being processed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/pipeline.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoDto {\n  videoId: string;\n  videoUrl: string;\n  videoTitle: string;\n}\nclass AccountDto {\n  id: string;\n  nick: string;\n  isFollow: boolean;\n}\nclass TabDto {\n  tabId: string;\n  title: string;\n  index: number;\n}\ninterface HomepageDto {\n  videos: VideoDto[];\n  account: AccountDto;\n  tab: TabDto;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Service Configuration in YAML (Simplified)\nDESCRIPTION: This YAML snippet shows a simplified configuration for a service, using only the service name as a string.  This shorthand notation is valid when no additional service description is needed.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/serverless/serverless_yml.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice: serverless-hello-world // 简写\n```\n\n----------------------------------------\n\nTITLE: Accessing All Query Parameters with @Query(ALL)\nDESCRIPTION: This example demonstrates how to retrieve the entire query object using the `@Query(ALL)` decorator.  The `getUser` method receives an object containing all query parameters.  `ALL` is a special key to capture the whole object.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/controller.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ALL } from \"@midwayjs/decorator\";\n\nasync getUser(@Query(ALL) queryObject: object)  // queryObject = {\"id\": 1}\n```\n\n----------------------------------------\n\nTITLE: Install dependencies\nDESCRIPTION: Installs project dependencies using npm. This command is essential before running the project or any other npm scripts.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/example/class/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n```\n\n----------------------------------------\n\nTITLE: User DTO Multi Type Validation\nDESCRIPTION: Demonstrates multi-type validation for the school property, which can be either a string or a SchoolDTO.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/docs/extensions/validate.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rule, RuleType, getSchema } from '@midwayjs/validate';\n\nexport class SchoolDTO {\n  @Rule(RuleType.string().required())\n  name: string;\n  @Rule(RuleType.string())\n  address: string;\n}\n\nexport class UserDTO {\n  @Rule(RuleType.string().required())\n  name: string;\n\n  @Rule(RuleType.alternatives([RuleType.string(), getSchema(SchoolDTO)]).required())\n  school: string | SchoolDTO;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NVS on Linux/macOS\nDESCRIPTION: This snippet shows how to install NVS on Linux or macOS by cloning the NVS repository from GitHub and sourcing the NVS script. It sets the NVS_HOME environment variable and installs NVS using the provided script.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/versioned_docs/version-2.0.0/how_to_install_nodejs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export NVS_HOME=\"$HOME/.nvs\"\n$ git clone https://github.com/jasongin/nvs --depth=1 \"$NVS_HOME\"\n$ . \"$NVS_HOME/nvs.sh\" install\n```\n\n----------------------------------------\n\nTITLE: Pass Data to Template for I18n (Typescript)\nDESCRIPTION: Illustrates how to pass data to the template for use with the `i18n` function. The data is passed as an object to the `ctx.render` method, which makes it available in the template. Requires `@midwayjs/i18n` and a web framework like Koa.\nSOURCE: https://github.com/midwayjs/midway/blob/main/site/i18n/en/docusaurus-plugin-content-docs/current/extensions/i18n.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\n@Controller('/')\nexport class UserController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async index() {\n    await this.ctx.render('index', {\n      // Note that this is the entire object passed to the template\n      user: {\n        username: 'harry',\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting method parse body and form body\nDESCRIPTION: This commit removes the parsing of body and form data for DELETE requests. This change aligns with standard HTTP practices where DELETE requests typically do not contain a request body.\nSOURCE: https://github.com/midwayjs/midway/blob/main/packages-serverless/faas-typings/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndelete method parse body and form body ([#891](https://github.com/midwayjs/midway-faas/issues/891)) ([f5c1e70](https://github.com/midwayjs/midway-faas/commit/f5c1e7042ed85656e323563421391a719999979e))\n```"
  }
]