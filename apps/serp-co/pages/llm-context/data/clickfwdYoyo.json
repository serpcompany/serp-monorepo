[
  {
    "owner": "clickfwd",
    "repo": "yoyo",
    "content": "TITLE: Configuring Yoyo Framework Core Settings\nDESCRIPTION: PHP code to bootstrap and configure the Yoyo framework with essential settings like URL endpoint, scripts path, and component namespace.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Clickfwd\\Yoyo\\View;\nuse Clickfwd\\Yoyo\\ViewProviders\\YoyoViewProvider;\nuse Clickfwd\\Yoyo\\Yoyo;\n\n$yoyo = new Yoyo();\n\n$yoyo->configure([\n  'url' => '/yoyo',\n  'scriptsPath' => 'app/resources/assets/js/',\n  'namespace' => 'App\\\\Yoyo\\\\'\n]);\n\n// Register the native Yoyo view provider \n// Pass the Yoyo components' template directory path in the constructor\n\n$yoyo->registerViewProvider(function() {\n  return new YoyoViewProvider(new View(__DIR__.'/resources/views/yoyo'));\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Components with yoyo_render\nDESCRIPTION: Basic component rendering on page load using the yoyo_render function. Handles both dynamic and anonymous components.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php echo yoyo_render('search'); ?>\n```\n\n----------------------------------------\n\nTITLE: Data Binding Implementation\nDESCRIPTION: Implementing data binding between HTML elements and component properties using the yoyo attribute.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <input yoyo name=\"message\" type=\"text\" value=\"<?php echo $message; ?>\">\n    <h1><?php echo $message;?></h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Component Property Definition\nDESCRIPTION: Defining public properties in a component class that are automatically tracked and available to the view.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorld extends Component\n{\n    public $message = 'Hello World!';\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <h1><?php echo $message; ?></h1>\n    <!-- Will output \"Hello World!\" -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic Search Component Class\nDESCRIPTION: Complete PHP class for a dynamic search component that handles queries and returns filtered results.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n# /app/Yoyo/Search\n\n<?php\n\nnamespace App\\Yoyo;\n\nuse Clickfwd\\Yoyo\\Component;\n\nclass Search extends Component\n{\n\tpublic $query;\n\t\n\tprotected $queryString = ['query'];\n\t\n\tpublic function render()\n\t{\n\t\t$query = $this->query;\n\t\n\t\t// Perform your database query\n\t\t$entries = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\t\n\t\t$results = array_filter($entries, function($entry) use ($query) {\n\t\t\treturn $query && stripos($entry, $query) !== false;\n\t\t});\n\t\n\t  // Render the component view\n\t\treturn $this->view('search',['results' => $results]);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Component Action Implementation\nDESCRIPTION: Implementing component actions with different HTTP methods and passing data to actions.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass Review extends Component\n{\n    public Review $review;\n\n    public function helpful()\n    {\n        $this->review->userFoundHelpful($userId);\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button yoyo:on=\"click\" yoyo:get=\"helpful\">Found Helpful</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Computed Properties Implementation\nDESCRIPTION: Implementing computed properties with and without arguments in component classes.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorld extends Component\n{\n    public $message = 'Hello World!';\n    \n    public function getHelloWorldProperty()\n    {\n        return $message;\n    }\n\n    public function getErrorsProperty($name)\n    {\n        return [\n            'title' => 'Please enter a title',\n            'description' => 'Please enter a description',\n        ][$name] ?? null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Yoyo Router in Phalcon Framework\nDESCRIPTION: PHP code to configure the router for handling Yoyo requests in Phalcon Framework.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$router->add('/yoyo', [\n            'controller' => 'yoyo',\n            'action' => 'handle',\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading States in HTML\nDESCRIPTION: Demonstrates various ways to handle loading states in Yoyo components using the yoyo:spinning directive and its modifiers.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button yoyo:post=\"submit\">Submit</button>\n\n    <div yoyo:spinning>\n        Processing your submission...\n    </div>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button yoyo:post=\"submit\">Submit</button>\n\n    <div yoyo:spinning.remove>\n        Text hidden while updating ...\n    </div>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button yoyo:post=\"submit\">Submit</button>\n\n    <div yoyo:spinning.delay>\n        Processing your submission...\n    </div>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n\t<button yoyo:get=\"edit\">Edit</button>\n\n\t<button yoyo:get=\"like\">Like</button>\n\n    <div yoyo:spinning yoyo:spin-on=\"edit\">\n        Show for edit action\n    </div>\n\n    <div yoyo:spinning yoyo:spin-on=\"like\">\n        Show for like action\n    </div>\n\n    <div yoyo:spinning yoyo:spin-on=\"edit, like\">\n        Show for edit and like actions\n    </div>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in PHP\nDESCRIPTION: Demonstrates various methods of emitting events in Yoyo components, including emitting to all components, parent components, specific components, and using selectors.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\npublic function increment()\n{\n\t$this->count++;\n\t\t\n\t$this->emit('counter-updated', $count);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php $this->emit('counter-updated', $count) ; ?>\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->emitUp('postWascreated', $arg1, $arg2);\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->emitTo('cart', 'productAddedToCart', $arg1, $arg2);\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->emitTo('.cart', 'productAddedToCart');\n$this->emitTo('#cart', 'productAddedToCart');\n$this->emitTo('.post-100', 'saved');\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->emitSelf('productAddedToCart', $arg1, $arg2);\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Custom Triggers\nDESCRIPTION: Customizing event triggers using the yoyo:on directive with debouncing and throttling options.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<input yoyo:on=\"keyup delay:300ms\" name=\"message\" type=\"text\" value=\"<?php echo $message; ?>\">\n\n<input yoyo:on=\"input throttle:2s\" name=\"message\" type=\"text\" value=\"<?php echo $message; ?>\">\n\n<input yoyo:on=\"keyup delay:300ms changed\" name=\"message\" type=\"text\" value=\"<?php echo $message; ?>\">\n```\n\n----------------------------------------\n\nTITLE: Component Registration in Yoyo\nDESCRIPTION: Registering components during Yoyo bootstrap process using the registerComponent method.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$yoyo->registerComponent('search', App\\Yoyo\\LiveSearch::class);\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Component in HTML Template\nDESCRIPTION: Demonstrates the usage of a dynamic Yoyo component in an HTML template, utilizing the yoyo:get directive for state updates.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<div>\n\t<button yoyo:get=\"increment\">+</button>\n\t<span><?php echo $count; ?></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Component Property Initialization\nDESCRIPTION: Initializing component properties using the mount method which runs after instantiation.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorld extends Component\n{\n    public $message;\n\n    public function mount()\n    {\n        $this->message = 'Hello World!';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component Class in PHP\nDESCRIPTION: A simple PHP counter component class that extends the Yoyo Component class. It maintains a count state and includes an increment method to increase the count value.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n# /app/Yoyo/Counter.php\n\n<?php \nnamespace App\\Yoyo;\n\nuse Clickfwd\\Yoyo\\Component;\n\nclass Counter extends Component\n{\n\tpublic $count = 0;\n\t\n\tprotected $props = ['count'];\n\n    public function increment()\n    {\n        $this->count++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Update Processing\nDESCRIPTION: Processing component updates using the yoyo_update function for handling request output.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php echo yoyo_update(); ?>\n```\n\n----------------------------------------\n\nTITLE: Toggling CSS Classes and Attributes in HTML\nDESCRIPTION: Shows how to toggle CSS classes and attributes during component updates using yoyo:spinning directives with class and attr modifiers.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button yoyo:post=\"submit\" yoyo:spinning.class=\"text-gray-300\">\n\t\tSubmit\n\t</button>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button yoyo:post=\"submit\" yoyo:spinning.class.remove=\"bg-blue-200\" class=\"bg-blue-200\">\n\t\tSubmit\n\t</button>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <button yoyo:post=\"submit\" yoyo:spinning.attr=\"disabled\">\n\t\tSubmit\n\t</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listening for Events in JavaScript\nDESCRIPTION: Demonstrates how to register JavaScript event listeners for events emitted by Yoyo components.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nYoyo.on('productAddedToCart', id => {\n\talert('A product was added to the cart with ID:' + id\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Component Props in PHP\nDESCRIPTION: Shows how to create a dynamic Yoyo component with props defined in the component class using the protected $props property.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nclass Counter extends Component\n{\n\tpublic $count = 0;\n\t\n\tprotected $props = ['count'];\n\n    public function increment()\n    {\n        $this->count++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Twig View with Yoyo\nDESCRIPTION: Uses the Yoyo's Twig view provider to render any Twig template in your application.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$twig = \\Clickfwd\\Yoyo\\Yoyo::getViewProvider()->getProviderInstance();\n\necho $twig->render('home');\n```\n\n----------------------------------------\n\nTITLE: Implementing Query String Handling in PHP\nDESCRIPTION: Shows how to automatically update the browser's query string on state changes using the protected $queryString property in a Yoyo component.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nclass Search extends Component\n{\n\tpublic $query;\n\t\n\tprotected $queryString = ['query'];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass Posts extends Component\n{\n\tpublic $page = 1;\n\t\n\tprotected $queryString = ['page'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Computed Properties in Twig Templates\nDESCRIPTION: Shows how to access computed properties in a Twig template using this.property_name syntax.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_57\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n\t<h1>{{ this.hello_world }}</h1>\n\t<!-- Will output \"Hello World!\" -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Computed Properties in Blade Templates\nDESCRIPTION: Shows how to access computed properties in a Blade template using $this->property_name syntax.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_46\n\nLANGUAGE: blade\nCODE:\n```\n<div>\n    <h1>{{ $this->hello_world }}</h1>\n    <!-- Will output \"Hello World!\" -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Browser Events in PHP\nDESCRIPTION: Shows how to dispatch browser events from Yoyo component methods or templates, allowing communication between server-side components and client-side JavaScript.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// passing single value\n$this->dispatchBrowserEvent('counter-updated', $count);\n\n// Passing an array\n$this->dispatchBrowserEvent('counter-updated', ['count' => $count]);\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Properties in Twig Components\nDESCRIPTION: Example of a Yoyo component class with a computed property method for use with Twig templates. Computed properties are defined using getPropertyNameProperty naming convention.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorld extends Component\n{\n    public $message = 'Hello World!';\n\n    public function getHelloWorldProperty()\n    {\n\t    return $this->message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Properties in Blade Components\nDESCRIPTION: Example of a Yoyo component class with a computed property method and its Blade template usage. Computed properties are defined using getPropertyNameProperty naming convention.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorld extends Component\n{\n    public $message = 'Hello World!';\n\n    public function getHelloWorldProperty()\n    {\n\t    return $message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Anonymous Component Props in PHP/HTML\nDESCRIPTION: Demonstrates how to specify props for an anonymous Yoyo component using the yoyo:props attribute, allowing for state persistence without a component class.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php $count = $count ?? 0 ; ?>\n<div yoyo:props=\"count\">\n\t<button yoyo:val.count=\"<?php echo $count + 1; ?>\">+</button> \n    <p><?php echo $count; ?></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listening for Events in PHP\nDESCRIPTION: Shows how to register event listeners in Yoyo components using the protected $listeners property.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nclass Counter extends Component {\n\n\tpublic $message;\n\n\tprotected $listeners = ['counter-updated' => 'showNewCount'];\n\n\tprotected function showNewCount($count)\n\t{\n\t\t$this->message = \"The new count is: $count\";\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Search Component Template\nDESCRIPTION: HTML template for a dynamic search component with live updates and a results list.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- /app/resources/views/yoyo/search.php -->\n\n<input yoyo:on=\"keyup delay:300ms changed\" type=\"text\" name=\"query\" value=\"<?php echo $query; ?>\" />\n\n<ul yoyo:ignore>\n    <?php if ($query && empty($results)): ?>\n        <li>No results found</li>\n    <?php endif; ?>\n    \n    <?php foreach ($results as $entry): ?>\n        <li><?php echo $entry; ?></li>\n    <?php endforeach; ?>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Results in a Template\nDESCRIPTION: PHP and HTML template code that filters and displays search results based on user input.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$query = $query ?? '';\n$entries = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n$results = array_filter($entries, function($entry) use ($query) {\n    return $query && strpos($entry, $query) !== false;\n});\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Search with Debounce\nDESCRIPTION: HTML input with Yoyo directives for creating a live search with debounce to limit update requests.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<input yoyo:on=\"keyup delay:300ms changed\" type=\"text\" name=\"query\" value=\"<?php echo $query; ?>\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection in PHP\nDESCRIPTION: Shows how to perform redirects after actions in Yoyo components using the redirect method.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nclass Registration extends Component\n{\n    public function register()\n    {\n\t// Create the user \n\n\t$this->redirect('/welcome');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Results List in a Search Component\nDESCRIPTION: HTML template for displaying search results with conditional rendering for empty results.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<form>\n    <input type=\"text\" name=\"query\" value=\"<?php echo $query; ?>\">\n    <button type=\"submit\">Submit</button>\n</form>\n    \n<ul>\n    <?php if ($query && empty($results)): ?>\n        <li>No results found</li>\n    <?php endif; ?>\n    \n    <?php foreach ($results as $entry): ?>\n        <li><?php echo $entry; ?></li>\n    <?php endforeach; ?>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Search Component Template\nDESCRIPTION: HTML template for a basic search component with a form input and submit button.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n// resources/views/yoyo/search.php\n\n<form>\n    <input type=\"text\" name=\"query\" value=\"<?php echo $query ?? ''; ?>\">\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using spinning Variable in Twig\nDESCRIPTION: Shows how to use the spinning variable in Twig templates to detect when a component is being re-rendered.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_54\n\nLANGUAGE: twig\nCODE:\n```\n{% if spinning %}\nComponent updated\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Locating Yoyo JavaScript File Path\nDESCRIPTION: Specifies the path to the yoyo.js file in the vendor directory that needs to be copied to your project's public assets.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_37\n\nLANGUAGE: file\nCODE:\n```\n/vendor/clickfwd/yoyo/src/assets/js/yoyo.js \n```\n\n----------------------------------------\n\nTITLE: Using Event Functions in Twig\nDESCRIPTION: Shows how to use Yoyo's event emission functions in Twig templates to trigger events between components.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_55\n\nLANGUAGE: twig\nCODE:\n```\n{{ emit('eventName', {'foo':'bar'}) }}\n{{ emitUp('eventName', {'foo':'bar'}) }}\n{{ emitSelf('eventName', {'foo':'bar'}) }}\n{{ emitTo('component-name', 'eventName', {'foo':'bar'}) }}\n```\n\n----------------------------------------\n\nTITLE: Using Blade Event Directives\nDESCRIPTION: Shows how to use Yoyo's event emission directives in Blade templates to trigger events between components.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_44\n\nLANGUAGE: blade\nCODE:\n```\n@emit('eventName', ['foo' => 'bar']);\n@emitUp('eventName', ['foo' => 'bar']);\n@emitSelf('eventName', ['foo' => 'bar']);\n@emitTo('component-name', 'eventName', ['foo' => 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Listening for Browser Events in JavaScript\nDESCRIPTION: Demonstrates how to listen for browser events dispatched by Yoyo components using JavaScript event listeners.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\nwindow.addEventListener('counter-updated', event => {\n\t// Reading a single value\n\talert('Counter is now: ' + event.detail);\n\n\t// Reading from an array\n\talert('Counter is now: ' + event.detail.count);\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Blade @spinning Directive\nDESCRIPTION: Demonstrates the @spinning directive which allows checking if a component is being re-rendered, with an optional conditional check.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_43\n\nLANGUAGE: blade\nCODE:\n```\n@spinnning\nComponent updated\n@endspinning\n\n@spinning($liked == 1)\nComponent updated and liked == 1\n@endspinning\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component Template in HTML\nDESCRIPTION: HTML template for the counter component that includes a button to increment the count and displays the current count value.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- /app/resources/views/yoyo/counter.php -->\n\n<div>\n\n\t<button yoyo:get=\"increment\">+</button>\n\t\n\t<span><?php echo $count; ?></span>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Yoyo with Twig\nDESCRIPTION: Creates a Twig instance, registers the YoyoTwigExtension, and sets it as the view provider for Yoyo. This code needs to run when rendering or updating components.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nuse Clickfwd\\Yoyo\\Twig\\YoyoTwigExtension;\nuse Clickfwd\\Yoyo\\ViewProviders\\TwigViewProvider;\nuse Clickfwd\\Yoyo\\Yoyo;\nuse Twig\\Extension\\DebugExtension;\n\ndefine('APP_PATH', __DIR__);\n\n$yoyo = new Yoyo();\n\n$yoyo->configure([\n  'url' => 'yoyo',\n  'scriptsPath' => APP_PATH.'/app/resources/assets/js/',\n  'namespace' => 'App\\\\Yoyo\\\\',\n]);\n\n$loader = new \\Twig\\Loader\\FilesystemLoader([\n  APP_PATH.'/resources/views',\n  APP_PATH.'/resources/views/yoyo',\n]);\n\n$twig = new \\Twig\\Environment($loader, [\n  'cache' => APP_PATH.'/../cache',\n  'auto_reload' => true,\n  // 'debug' => true\n]);\n\n// Add Yoyo's Twig Extension\n\n$twig->addExtension(new YoyoTwigExtension());\n\n// Register Twig view provider for Yoyo\n\n$yoyo->registerViewProvider(function() use ($twig) {\n  return new TwigViewProvider($twig);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Yoyo with Blade\nDESCRIPTION: Creates a Blade instance, registers it as the view provider for Yoyo, and sets up the YoyoServiceProvider. This code should run whenever rendering or updating components.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Clickfwd\\Yoyo\\Blade\\Application;\nuse Clickfwd\\Yoyo\\Blade\\YoyoServiceProvider;\nuse Clickfwd\\Yoyo\\ViewProviders\\BladeViewProvider;\nuse Clickfwd\\Yoyo\\Yoyo;\nuse Illuminate\\Contracts\\Foundation\\Application as ApplicationContract;\nuse Illuminate\\Contracts\\View\\Factory as ViewFactory;\nuse Illuminate\\Support\\Fluent;\nuse Jenssegers\\Blade\\Blade;\n\ndefine('APP_PATH', __DIR__);\n\n$yoyo = new Yoyo();\n\n$yoyo->configure([\n  'url' => 'yoyo',\n  'scriptsPath' => APP_PATH.'/app/resources/assets/js/',\n  'namespace' => 'App\\\\Yoyo\\\\',\n]);\n\n// Create a Blade instance\n\n$app = Application::getInstance();\n\n$app->bind(ApplicationContract::class, Application::class);\n\n// Needed for Blade anonymous components\n\n$app->alias('view', ViewFactory::class);\n\n$app->extend('config', function (array $config) {\n    return new Fluent($config);\n});\n\n$blade = new Blade(\n    [\n        APP_PATH.'/resources/views',\n        APP_PATH.'/resources/views/yoyo',\n        APP_PATH.'/resources/views/components',\n    ],\n    APP_PATH.'/../cache',\n    $app\n);\n\n$app->bind('view', function () use ($blade) {\n    return $blade;\n});\n\n(new YoyoServiceProvider($app))->boot();\n\n// Optionally register Blade components\n\n$blade->compiler()->components([\n    // 'button' => 'button',\n]);\n\n// Register Blade view provider for Yoyo\n\n$yoyo->registerViewProvider(function() use ($blade) {\n    return new BladeViewProvider($blade);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Yoyo Twig Components\nDESCRIPTION: Code that handles updating Yoyo components when in the designated Yoyo route.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\necho (new \\Clickfwd\\Yoyo\\Yoyo())->update();\n```\n\n----------------------------------------\n\nTITLE: Updating Yoyo Blade Components\nDESCRIPTION: Code that handles updating Yoyo components when in the designated Yoyo route.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\necho (new \\Clickfwd\\Yoyo\\Blade\\Yoyo())->update();\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Twig Views in Yoyo Components\nDESCRIPTION: Example of a Yoyo component class using an inline Twig template instead of a separate template file. The render method returns a heredoc string with the component's HTML and Twig syntax.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorld extends Component\n{\n    public $message = 'Hello World!';\n}\n\npublic function render()\n{\n\treturn <<<'twig'\n\t\t<div>\n\t\t    <input yoyo name=\"message\" type=\"text\" value=\"{{ message }}\">\n\t\t    <h1>{{ message }}</h1>\n\t\t</div>\t\t\n\ttwig;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Blade Views in Yoyo Components\nDESCRIPTION: Example of a Yoyo component class using an inline Blade template instead of a separate template file. The render method returns a heredoc string with the component's HTML and Blade syntax.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nclass HelloWorld extends Component\n{\n    public $message = 'Hello World!';\n}\n\npublic function render()\n{\n\treturn <<<'yoyo'\n\t\t<div>\n\t\t    <input yoyo name=\"message\" type=\"text\" value=\"{{ $message }}\">\n\t\t    <h1>{{ $message }}</h1>\n\t\t</div>\t\t\n\tyoyo;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Yoyo Components in Twig\nDESCRIPTION: Uses the yoyo function to include a Yoyo component in Twig templates.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_51\n\nLANGUAGE: twig\nCODE:\n```\nyoyo('search')\n```\n\n----------------------------------------\n\nTITLE: Rendering Yoyo Components in Blade\nDESCRIPTION: Uses the @yoyo directive to include a Yoyo component in Blade views.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_40\n\nLANGUAGE: blade\nCODE:\n```\n@yoyo('search')\n```\n\n----------------------------------------\n\nTITLE: Including Yoyo Scripts in Twig Template\nDESCRIPTION: Twig function to load necessary Yoyo JavaScript in your page's head section.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_49\n\nLANGUAGE: twig\nCODE:\n```\n{{ yoyo_scripts() }}\n```\n\n----------------------------------------\n\nTITLE: Including Yoyo Scripts in Blade Template\nDESCRIPTION: Blade directive to load necessary Yoyo JavaScript in your page's head section.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_38\n\nLANGUAGE: blade\nCODE:\n```\n@yoyo_scripts\n```\n\n----------------------------------------\n\nTITLE: Including Yoyo Scripts in HTML Template\nDESCRIPTION: PHP code to insert necessary Yoyo JavaScript in the HTML head section.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php yoyo_scripts(); ?>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Blade View with Yoyo\nDESCRIPTION: Uses the Yoyo's Blade view provider to render any Blade template in your application.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$blade = \\Clickfwd\\Yoyo\\Yoyo::getViewProvider()->getProviderInstance();\n\necho $blade->render('home');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dynamic Properties with QueryString in YoYo Components\nDESCRIPTION: Code sample showing how to implement dynamic properties in YoYo components that can be pushed to the URL as query string parameters. The example demonstrates defining dynamic property names and merging them with regular query string parameters.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function addDynamicProperties() \n{\n    return ['width', 'length'];\n}\n\npublic function getQueryString()\n{\n    return array_merge($this->queryString, $this->addDynamicProperties());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Listeners for Refresh Action\nDESCRIPTION: Code example showing how to configure component listeners in YoYo to trigger the default refresh action when an 'updated' event occurs.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected $listeners = ['updated' => 'refresh'];\n```\n\n----------------------------------------\n\nTITLE: Installing Yoyo with Twig\nDESCRIPTION: Composer commands to install the required packages for using Yoyo with Twig templating engine.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require clickfwd/yoyo\ncomposer require twig/twig\n```\n\n----------------------------------------\n\nTITLE: Installing Yoyo and Blade via Composer\nDESCRIPTION: Provides the Composer commands to install Yoyo and the Blade templating engine for use in a PHP project.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require clickfwd/yoyo\ncomposer require jenssegers/blade\n```\n\n----------------------------------------\n\nTITLE: Installing Yoyo via Composer\nDESCRIPTION: Command to install Yoyo PHP framework using Composer package manager.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require clickfwd/yoyo\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Yoyo Components\nDESCRIPTION: PHP code to manually register Yoyo components when not using auto-discovery via namespace.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$yoyo->registerComponents([\n    'counter' => App\\Yoyo\\Counter::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Yoyo Service Provider in Phalcon Framework\nDESCRIPTION: PHP code to register the Yoyo service provider with the Phalcon dependency injection container.\nSOURCE: https://github.com/clickfwd/yoyo/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$di->register(new \\Clickfwd\\Yoyo\\YoyoPhalconServiceProvider());\t\n```"
  }
]