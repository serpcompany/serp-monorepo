[
  {
    "owner": "stashapp",
    "repo": "stash",
    "content": "TITLE: ThePornDB Performer and Scene Scraper Configuration\nDESCRIPTION: This YAML configuration file defines the structure and logic for scraping performer and scene data from ThePornDB using the Stash JSON scraper. It includes configurations for performer searches by name and URL, scene searches by URL and fragment, and defines the specific JSON scrapers used to extract relevant data fields.  The configuration uses `scrapeJson` actions and specifies `queryURL` and `scraper` properties for each action.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nname: ThePornDB\nperformerByName:\n  action: scrapeJson\n  queryURL: https://api.metadataapi.net/performers?q={}\n  scraper: performerSearch\nperformerByURL:\n  - action: scrapeJson\n    url:\n      - https://api.metadataapi.net/performers/\n    scraper: performerScraper\nsceneByURL:\n  - action: scrapeJson\n    url:\n      - https://api.metadataapi.net/scenes/\n    scraper: sceneScraper\nsceneByFragment:\n  action: scrapeJson\n  queryURL: https://api.metadataapi.net/scenes?parse={filename}&hash={oshash}&limit=1\n  scraper: sceneQueryScraper\n  queryURLReplace:\n    filename:\n      - regex: \"[^a-zA-Z\\\\d\\\\-._~]\" # clean filename so that it can construct a valid url\n        with: \".\" # \"%20\"\n      - regex: HEVC\n        with:\n      - regex: x265\n        with:\n      - regex: \\.+\n        with: \".\"\njsonScrapers:\n  performerSearch:\n    performer:\n      Name: data.#.name\n      URL:\n        selector: data.#.id\n        postProcess:\n          - replace:\n              - regex: ^\n                with: https://api.metadataapi.net/performers/\n\n  performerScraper:\n    common:\n      $extras: data.extras\n    performer:\n      Name: data.name\n      Gender: $extras.gender\n      Birthdate: $extras.birthday\n      Ethnicity: $extras.ethnicity\n      Height:\n        selector: $extras.height\n        postProcess:\n          - replace:\n              - regex: cm\n                with:\n      Measurements: $extras.measurements\n      Tattoos: $extras.tattoos\n      Piercings: $extras.piercings\n      Aliases: data.aliases\n      Image: data.image\n\n  sceneScraper:\n    common:\n      $performers: data.performers\n    scene:\n      Title: data.title\n      Details: data.description\n      Date: data.date\n      URL: data.url\n      Image: data.background.small\n      Performers:\n        Name: data.performers.#.name\n      Studio:\n        Name: data.site.name\n      Tags:\n        Name: data.tags.#.tag\n\n  sceneQueryScraper:\n    common:\n      $data: data.0\n      $performers: data.0.performers\n    scene:\n      Title: $data.title\n      Details: $data.description\n      Date: $data.date\n      URL: $data.url\n      Image: $data.background.small\n      Performers:\n        Name: $data.performers.#.name\n      Studio:\n        Name: $data.site.name\n      Tags:\n        Name: $data.tags.#.tag\ndriver:\n  headers:\n    - Key: User-Agent\n      Value: Stash JSON Scraper\n    - Key: Authorization\n      Value: Bearer lPdwFdfY17p4qBkTVF03zscUU2glSjdf17bZyoe  # use an actual API Key here\n# Last Updated April 7, 2021\n```\n\n----------------------------------------\n\nTITLE: XPath Scraper Example (YAML)\nDESCRIPTION: This complete example showcases an XPath scraper configuration for both performer and scene information from Pornhub. It demonstrates extracting data like name, birthdate, and career length for performers, and title, tags, performers, and studio for scenes, utilizing common variables and post-processing.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_27\n\nLANGUAGE: YAML\nCODE:\n```\nname: Pornhub\nperformerByURL:\n  - action: scrapeXPath\n    url: \n      - pornhub.com\n    scraper: performerScraper\nsceneByURL:\n  - action: scrapeXPath\n    url: \n      - pornhub.com/view_video.php\n    scraper: sceneScraper\nxPathScrapers:\n  performerScraper:\n    common:\n      $infoPiece: //div[@class=\"infoPiece\"]/span\n    performer:\n      Name: //h1[@itemprop=\"name\"]\n      Birthdate: \n        selector: //span[@itemprop=\"birthDate\"]\n        parseDate: Jan 2, 2006\n      Twitter: //span[text() = 'Twitter']/../@href\n      Instagram: //span[text() = 'Instagram']/../@href\n      Measurements: $infoPiece[text() = 'Measurements:']/../span[@class=\"smallInfo\"]\n      Height: \n        selector: $infoPiece[text() = 'Height:']/../span[@class=\"smallInfo\"]\n        postProcess:\n          - replace: \n              - regex: .*\\((\\d+) cm\\)\n                with: $1\n      Ethnicity: $infoPiece[text() = 'Ethnicity:']/../span[@class=\"smallInfo\"]\n      FakeTits: $infoPiece[text() = 'Fake Boobs:']/../span[@class=\"smallInfo\"]\n      Piercings: $infoPiece[text() = 'Piercings:']/../span[@class=\"smallInfo\"]\n      Tattoos: $infoPiece[text() = 'Tattoos:']/../span[@class=\"smallInfo\"]\n      CareerLength: \n        selector: $infoPiece[text() = 'Career Start and End:']/../span[@class=\"smallInfo\"]\n        postProcess:\n          - replace:\n            - regex: \\s+to\\s+\n              with: \"-\"\n  sceneScraper:\n    common:\n      $performer: //div[@class=\"pornstarsWrapper\"]/a[@data-mxptype=\"Pornstar\"]\n      $studio: //div[@data-type=\"channel\"]/a\n    scene:\n      Title: //div[@id=\"main-container\"]/@data-video-title\n      Tags: \n        Name: //div[@class=\"categoriesWrapper\"]//a[not(@class=\"add-btn-small \")]\n      Performers:\n        Name: $performer/@data-mxptext\n        URL: $performer/@href\n      Studio:\n        Name: $studio\n        URL: $studio/@href\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Source YAML File\nDESCRIPTION: This is an example of a YAML file that serves as a source for Stash plugins. It specifies the structure and required fields for each package, including ID, name, version, date, dependencies, path to the zip file, and SHA256 hash.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Plugins.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- id: <package id>\n  name: <package name>\n  version: <version>\n  date: <date>\n  requires:\n  - <ids of packages required by this package (optional)>\n  - ...\n  path: <path to package zip file>\n  sha256: <sha256 of zip>\n  metadata:\n    <optional key/value pairs for extra information>\n- ...\n```\n\n----------------------------------------\n\nTITLE: Script Action Configuration in YAML\nDESCRIPTION: This YAML code snippet shows how to configure the `script` action, which executes a script to perform the scrape.  The `script` field is required and accepts a list of string arguments that specify the command to execute. Stash will attempt to locate the appropriate Python executable.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\naction: script\nscript:\n  - python\n  - iafdScrape.py\n  - query\n```\n\n----------------------------------------\n\nTITLE: Stash Action Configuration in Stash\nDESCRIPTION: This snippet illustrates how to configure the `stash` action for various scraper types, including `performerByName`, `performerByFragment`, `sceneByName`, `sceneByQueryFragment`, and `sceneByFragment`. It requires the top-level `stashServer` field to be configured, including the URL and either username/password or an API key for authentication with the remote Stash server.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: stash\nperformerByName:\n  action: stash\nperformerByFragment:\n  action: stash\nsceneByFragment:\n  action: stash\nsceneByName:\n  action: stash\nsceneByQueryFragment:\n  action: stash\nstashServer:\n  apiKey: <api key>\n  url: http://stashserver.com:9999\n```\n\n----------------------------------------\n\nTITLE: Python Performer Scraper Example\nDESCRIPTION: This Python code snippet shows an example of a performer scraper, demonstrating how to read JSON input from stdin, perform scraping logic, and output JSON data to stdout. It includes functions for searching and scraping performer information, and also utilizes sys.argv to determine which function needs to be run.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport json\nimport sys\nimport string\n\ndef readJSONInput():\n\tinput = sys.stdin.read()\n\treturn json.loads(input)\n\n\ndef searchPerformer(name):\n    # perform scraping here - using name for the query\n\n    # fill in the output\n    ret = []\n    \n    # example shown for a single found performer \n    p = {}\n    p['name'] = \"some name\"\n    p['url'] = \"performer url\"\n    ret.append(p)\n    \n    return ret\n\ndef scrapePerformer(input):\n    ret = []\n    # get the url from the input\n    url = input['url']\n    return scrapePerformerURL(url)\n\ndef debugPrint(t):\n    sys.stderr.write(t + \"\\n\")\n\ndef scrapePerformerURL(url):\n    debugPrint(\"Reading url...\")\n    debugPrint(\"Parsing html...\")\n    \n    # parse html\n\n    # fill in performer details - single object\n    ret = {}\n\n    ret['name'] = \"fred\"\n    ret['aliases'] = \"freddy\"\n    ret['ethnicity'] = \"\"\n    # and so on\n\n    return ret\n\n# read the input \ni = readJSONInput()\n\nif sys.argv[1] == \"query\":\n    ret = searchPerformer(i['name'])\n    print(json.dumps(ret))\nelif sys.argv[1] == \"scrape\":\n    ret = scrapePerformer(i)\n    print(json.dumps(ret))\nelif sys.argv[1] == \"scrapeURL\":\n    ret = scrapePerformerURL(i['url'])\n    print(json.dumps(ret))\n```\n\n----------------------------------------\n\nTITLE: XPath Scraper Configuration with Post-processing in Stash\nDESCRIPTION: This snippet demonstrates an XPath scraper configuration with post-processing.  It defines a selector to extract the performer's name and then specifies a `postProcess` section with a `javascript` operation to capitalize the first letter of the name. Uses `goja` javascript engine.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nperformer:\n  Name:\n    selector: //div[@class=\"example element\"]\n    postProcess:\n      - javascript: |+\n          // capitalise the first letter\n          if (value && value.length) {\n            return value[0].toUpperCase() + value.substring(1)\n          }\n```\n\n----------------------------------------\n\nTITLE: Regex directory pattern exclusion\nDESCRIPTION: This example shows how to exclude all directories matching a specific pattern (e.g., `/stash/videos/exclude/`) using a regular expression. During the scan process, directories matching this pattern will be excluded from being added to the Stash library.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Configuration.md#_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n\"^/stash/videos/exclude//\"\n```\n\n----------------------------------------\n\nTITLE: Scrape JSON using sceneByURL in Stash\nDESCRIPTION: This snippet demonstrates how to use the `scrapeJson` action with `sceneByURL` to scrape data from a website using a JSON API. It utilizes `queryURLReplace` to dynamically construct the API URL based on the input URL. The regex extracts parts of the original URL to form the API endpoint.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsceneByURL:\n  - action: scrapeJson\n    url:\n      - metartnetwork.com\n    scraper: sceneScraper\n    queryURL: \"{url}\"\n    queryURLReplace:\n      url:\n        - regex: '^(?:.+\\.)?([^.]+)\\.com/.+movie/(\\d+)/(\\w+)/?$'\n          with: https://www.$1.com/api/movie?name=$3&date=$2\n```\n\n----------------------------------------\n\nTITLE: Hook Configuration Example\nDESCRIPTION: This example shows the configuration structure for defining hooks within a Stash plugin. Hooks are triggered by specific events and include a name, description, trigger types, and default arguments that are passed to the plugin when the hook is triggered.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Plugins.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  - name: <operation name>\n    description: <optional description>\n    triggeredBy:\n      - <trigger types>...\n    defaultArgs:\n      argKey: argValue\n```\n\n----------------------------------------\n\nTITLE: Post-Processing ParseDate Configuration in Stash\nDESCRIPTION: This snippet demonstrates the use of the `parseDate` post-processing operation to convert a scraped string into a date. It shows how to specify the date format using Go's reference date (`2006-01-02`) and unix timestamps.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nDate:\n  selector: //div[@class=\"value epoch\"]/text()\n  postProcess:\n    - parseDate: unix\n```\n\n----------------------------------------\n\nTITLE: Python Script Execution Configuration\nDESCRIPTION: Example configuration of the 'exec' field in a Stash plugin configuration file, specifically for executing a Python script. The script 'foo.py' is located in the same directory as the plugin configuration file. It shows how to specify the Python interpreter and the script path as arguments.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ExternalPlugins.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexec:\n  - python\n  - {pluginDir}/foo.py\n```\n\n----------------------------------------\n\nTITLE: Custom Served Folders Configuration (YAML) - Stash Folder\nDESCRIPTION: This YAML snippet shows an example of mapping a custom folder within the Stash directory to the `/` path under `/custom`. This enables the use of static resources like images in custom CSS. The `<stash folder>` part represents the actual path to your stash folder.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Interface.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\ncustom_served_folders:\n  /: <stash folder>\\\\custom\n```\n\n----------------------------------------\n\nTITLE: scrapeXPath Action Configuration in YAML\nDESCRIPTION: This YAML snippet shows how to configure the `scrapeXPath` action, which scrapes a web page using XPath.  It requires the top-level `xPathScrapers` configuration to be populated, and the `scraper` field must match a name configured in `xPathScrapers`. `url` is matched to the scraper.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nsceneByURL:\n- action: scrapeXPath\n  url: \n    - pornhub.com/view_video.php\n  scraper: sceneScraper\n```\n\n----------------------------------------\n\nTITLE: scrapeXPath with performerByName in YAML\nDESCRIPTION: YAML Configuration for `performerByName` using `scrapeXPath`. Requires `queryURL` to perform a search query URL for performer names. The placeholder string sequence `{}` is replaced with the performer name search string. The `URL` field must be filled in with the URL of the performer page that matches a URL given in a `performerByURL` scraping configuration.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nname: Boobpedia\nperformerByName:\n  action: scrapeXPath\n  queryURL: http://www.boobpedia.com/wiki/index.php?title=Special%3ASearch&search={}&fulltext=Search\n  scraper: performerSearch\nperformerByURL:\n  - action: scrapeXPath\n    url: \n      - boobpedia.com/boobs/\n    scraper: performerScraper\nxPathScrapers:\n  performerSearch:\n    performer:\n      Name: # name element\n      URL: # URL element that matches the boobpedia.com/boobs/ URL above\n  performerScraper:\n    # ... performer scraper details ...\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Example - Javascript\nDESCRIPTION: This Javascript code demonstrates how to perform a GraphQL mutation to create a tag in Stash. It defines a mutation string, variables for the input, and uses the `gql.Do` function to execute the mutation. It then logs the ID of the newly created tag using the `log.Info` function.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/EmbeddedPlugins.md#_snippet_3\n\nLANGUAGE: Javascript\nCODE:\n```\n// creates a tag\nvar mutation = \"\\\nmutation tagCreate($input: TagCreateInput!) {\\\n  tagCreate(input: $input) {\\\n    id\\\n  }\\\n}\";\n\nvar variables = {\n    input: {\n        'name': tagName\n    }\n};\n\nresult = gql.Do(mutation, variables);\nlog.Info(\"tag id = \" + result.tagCreate.id);\n```\n\n----------------------------------------\n\nTITLE: scrapeJson Action Configuration in YAML\nDESCRIPTION: This YAML snippet shows how to configure the `scrapeJson` action, which scrapes a web page using a JSON configuration. It uses the top-level `jsonScrapers` configuration, and the `scraper` field must match a name configured in `jsonScrapers`. `url` is matched to the scraper.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nsceneByFragment:\n  action: scrapeJson\n  scraper: sceneQueryScraper\n  queryURL: https://metadataapi.net/api/scenes?parse={filename}&limit=1\n  queryURLReplace:\n    filename:\n      - regex: <some regex>\n        with: <replacement>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Served Folders in Stash (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure custom served folders in the Stash application. It maps URLs under the `/custom` prefix to specific file system folders.  Requests to `/custom/foo/bar.png` would serve `D:\\bar\\bar.png`. The `/` entry acts as a default, serving files from `D:\\stash\\static` for unmatched prefixes.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Configuration.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncustom_served_folders:\n  /: D:\\\\stash\\\\static\n  /foo: D:\\\\bar\n```\n\n----------------------------------------\n\nTITLE: JSON Scraper Configuration for Performer Name in Stash\nDESCRIPTION: This snippet demonstrates a basic JSON scraper configuration for extracting a performer's name from a JSON structure. It uses the `data.name` GJSON path to locate the name within the JSON response.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nperformer:\n  Name: data.name\n```\n\n----------------------------------------\n\nTITLE: Regex exclusion example\nDESCRIPTION: This example demonstrates how to exclude files ending in `sample.mp4` using a regular expression in the Stash configuration. The pattern is case-insensitive and applied during the scan process to prevent these files from being added to the database.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Configuration.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\"sample\\.mp4$\"\n```\n\n----------------------------------------\n\nTITLE: Fixed Attribute Value Configuration in Stash\nDESCRIPTION: This snippet shows how to set a fixed value for an attribute in the scraper configuration.  Instead of using a selector, the `fixed` field is used to assign a static value to the `Gender` attribute.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nperformer:\n  Gender:\n    fixed: Female\n```\n\n----------------------------------------\n\nTITLE: Plugin Task Input JSON Format\nDESCRIPTION: This example shows the JSON structure for the input provided to a Stash plugin task. It contains the server connection information, including scheme, port, session cookie, configuration directory, plugin directory, and arguments for the task.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Plugins.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"server_connection\": {\n        \"Scheme\": \"http\",\n        \"Port\": 9999,\n        \"SessionCookie\": {\n            \"Name\":\"session\",\n            \"Value\":\"cookie-value\",\n            \"Path\":\"\",\n            \"Domain\":\"\",\n            \"Expires\":\"0001-01-01T00:00:00Z\",\n            \"RawExpires\":\"\",\n            \"MaxAge\":0,\n            \"Secure\":false,\n            \"HttpOnly\":false,\n            \"SameSite\":0,\n            \"Raw\":\"\",\n            \"Unparsed\":null\n        },\n        \"Dir\": <path to stash config directory>,\n        \"PluginDir\": <path to plugin config directory>,\n    },\n    \"args\": {\n        \"argKey\": \"argValue\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex specific Windows directory exclusion\nDESCRIPTION: This example demonstrates how to exclude a specific Windows directory (e.g., `c:\\stash\\videos\\exclude`) using a regular expression. This ensures that files within this directory are not included in the Stash library during scanning and are removed during the clean task.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Configuration.md#_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n\"c:\\\\stash\\\\videos\\\\exclude\"\n```\n\n----------------------------------------\n\nTITLE: Example Assets Mapping in Plugin Configuration\nDESCRIPTION: This example demonstrates how to map URL prefixes to filesystem paths within a plugin's assets configuration. It shows how Stash resolves URLs to specific files within the plugin directory using prefixes and the root path.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Plugins.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nassets:\n  foo: bar\n  /: .\n```\n\n----------------------------------------\n\nTITLE: Common Fragments Configuration in Stash\nDESCRIPTION: This snippet demonstrates the use of common fragments in scraper configurations. A common fragment `$infoPiece` is defined and then used in the `Measurements` selector, reducing redundancy and improving maintainability.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncommon:\n  $infoPiece: //div[@class=\"infoPiece\"]/span\nperformer:\n  Measurements: $infoPiece[text() = 'Measurements:']/../span[@class=\"smallInfo\"]\n```\n\n----------------------------------------\n\nTITLE: Regex Windows network path exclusion\nDESCRIPTION: This example shows how to exclude a specific Windows network path (e.g., `\\\\stash\\network\\share\\excl\\`) using a regular expression. This will prevent Stash from scanning files located in the specified network share and removing them during clean up.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Configuration.md#_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\\\\\stash\\\\network\\\\share\\\\excl\\\\\"\n```\n\n----------------------------------------\n\nTITLE: Post-Processing SubtractDays Configuration in Stash\nDESCRIPTION: This snippet demonstrates the use of the `subtractDays` post-processing operation.  It first extracts a number of days ago, uses replace to isolate the number, and then subtracts that number of days from the current date.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nDate:\n  selector: //strong[contains(text(),\"Added:\")]/following-sibling::text()\n  postProcess:\n    - replace:\n        - regex: (\\d+)\\sdays\\sago.+\n          with: $1\n    - subtractDays: true\n```\n\n----------------------------------------\n\nTITLE: XPath Scraper Configuration for Performer Name in Stash\nDESCRIPTION: This snippet demonstrates a basic XPath scraper configuration for extracting a performer's name from an HTML page. It targets an `<h1>` element with the `itemprop` attribute set to `name`. The `Name` field in the `performer` section maps to the XPath selector.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nperformer:\n  Name: //h1[@itemprop=\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Post-Processing Map Configuration in Stash\nDESCRIPTION: This snippet demonstrates the use of the `map` post-processing operation to map scraped values to predefined values. It maps `F` to `Female` and `M` to `Male` for the `Gender` attribute, and shows feetToCm and lbToKg usage.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nperformer:\n  Gender:\n    selector: //div[@class=\"example element\"]\n    postProcess:\n      - map:\n          F: Female\n          M: Male\n  Height:\n    selector: //span[@id=\"height\"]\n    postProcess:\n      - feetToCm: true\n  Weight:\n    selector: //span[@id=\"weight\"]\n    postProcess:\n      - lbToKg: true\n```\n\n----------------------------------------\n\nTITLE: Post-Processing Replace Configuration in Stash\nDESCRIPTION: This snippet demonstrates the use of the `replace` post-processing operation to replace substrings within a scraped value. It replaces \"\\s+to\\s+\" with \"-\" in the CareerLength attribute.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nCareerLength: \n  selector: $infoPiece[text() = 'Career Start and End:']/../span[@class=\"smallInfo\"]\n  postProcess:\n    - replace:\n        - regex: \\s+to\\s+\n          with: \"-\"\n```\n\n----------------------------------------\n\nTITLE: Task Configuration with Exec Args\nDESCRIPTION: Example configuration demonstrating the use of the `execArgs` field within a Stash task configuration. This allows adding extra parameters to the execution arguments for a specific task, providing flexibility in customizing task behavior.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ExternalPlugins.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  - name: <operation name>\n    description: <optional description>\n    execArgs:\n      - <arg to add to the exec line>\n```\n\n----------------------------------------\n\nTITLE: Running Stash Docker Container with Docker Run (Specific)\nDESCRIPTION: This command runs the Stash docker container using `docker run` with a specific example directory structure. It sets environment variables and mounts volumes for configuration, media, metadata, cache, and generated data. This example assumes a directory structure where the config, metadata, generated, and cache directories reside within a parent `/stash` directory, separate from the `/media` directory.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docker/build/x86_64/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n -e STASH_STASH=/data/ \\\n -e STASH_METADATA=/metadata/ \\\n -e STASH_CACHE=/cache/ \\\n -e STASH_GENERATED=/generated/ \\\n -v /stash/config:/root/.stash \\\n -v /media:/data \\\n -v /stash/metadata:/metadata \\\n -v /stash/cache:/cache \\\n -v /stash/generated:/generated \\\n -p 9999:9999 \\\n stash/build:latest \n```\n\n----------------------------------------\n\nTITLE: Configure CDP Clicks (YAML)\nDESCRIPTION: This snippet demonstrates how to configure mouse clicks on elements using CDP.  Each click element has an `xpath` value to target the element and an optional `sleep` value to wait after clicking. If the `sleep` value is not set, it defaults to `2` seconds.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_22\n\nLANGUAGE: YAML\nCODE:\n```\nname: clickDemo # demo only for a single URL\nsceneByURL:\n  - action: scrapeXPath\n    url:\n      - https://getbootstrap.com/docs/4.3/components/collapse/\n    scraper: sceneScraper\n\nxPathScrapers:\n  sceneScraper:\n    scene:\n      Title: //head/title\n      Details: # shows the id/s of the visible div/s for the Multiple targets example of the page\n        selector: //div[@class=\"bd-example\"]//div[@class=\"multi-collapse collapse show\"]/@id\n        concat: \"\\n\\n\"\n\ndriver:\n  useCDP: true\n  sleep: 1\n  clicks: # demo usage toggle on off multiple times\n    - xpath: //a[@href=\"#multiCollapseExample1\"] # toggle on first element\n    - xpath: //button[@data-target=\"#multiCollapseExample2\"] # toggle on second element\n      sleep: 4\n    - xpath: //a[@href=\"#multiCollapseExample1\"] # toggle off fist element\n      sleep: 1\n    - xpath: //button[@data-target=\"#multiCollapseExample2\"] # toggle off second element\n    - xpath: //button[@data-target=\"#multiCollapseExample2\"] # toggle on second element\n```\n\n----------------------------------------\n\nTITLE: Configure Cookies with Random Values (YAML)\nDESCRIPTION: This snippet demonstrates configuring cookies with randomly generated values. Use `ValueRandom` instead of `Value` with an integer specifying the length of the random string. The `ValueRandom` property requires an integer value greater than `0`.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_25\n\nLANGUAGE: YAML\nCODE:\n```\ndriver:\n  cookies:\n    - CookieURL: \"https://www.example.com\"\n      Cookies:\n        - Name: \"_warning\"\n          Domain: \".example.com\"\n          Value: \"true\"\n          Path: \"/\"\n        - Name: \"_test2\"\n          ValueRandom: 6\n          Domain: \".example.com\"\n          Path: \"/\"\n    - CookieURL: \"https://api.somewhere.com\"\n      Cookies:\n        - Name: \"_warn\"\n          ValueRandom: 3\n          Domain: \".somewhere.com\"\n```\n\n----------------------------------------\n\nTITLE: Running Stash Docker Container with Docker Run (Generic)\nDESCRIPTION: This command runs the Stash docker container using `docker run`. It sets environment variables for the data, metadata, cache, and generated directories. It also mounts volumes for configuration, media, metadata, cache, and generated data. Replace `<xxx>` placeholders with actual paths.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docker/build/x86_64/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n -e STASH_STASH=/data/ \\\n -e STASH_METADATA=/metadata/ \\\n -e STASH_CACHE=/cache/ \\\n -e STASH_GENERATED=/generated/ \\\n -v <path to config dir>:/root/.stash \\\n -v <path to media>:/data \\\n -v <path to metadata>:/metadata \\\n -v <path to cache>:/cache \\\n -v <path to generated>:/generated \\\n -p 9999:9999 \\\n stash/build:latest \n```\n\n----------------------------------------\n\nTITLE: Returning Plugin Output - Example 2 - Javascript\nDESCRIPTION: This example demonstrates another way to return plugin output from a Javascript plugin task.  A function 'main' is defined, which returns an object, and then the 'main' function is called. The output object has a field called 'Output' with the value 'ok'.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/EmbeddedPlugins.md#_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nfunction main() {\n    return {\n        Output: \"ok\"\n    };\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Arch Linux Dependencies Installation\nDESCRIPTION: Installs the necessary dependencies for building Stash on Arch Linux using the `pacman` package manager. This includes `go`, `git`, `yarn`, `gcc`, `make`, `nodejs`, and `ffmpeg`.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docs/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S go git yarn gcc make nodejs ffmpeg --needed\n```\n\n----------------------------------------\n\nTITLE: Downloading docker-compose.yml with curl\nDESCRIPTION: This snippet demonstrates how to download the docker-compose.yml file from the StashApp repository using curl. It first creates a directory named stashapp, navigates into it, and then uses curl to download the file from the specified URL.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docker/production/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir stashapp && cd stashapp\ncurl -o docker-compose.yml https://raw.githubusercontent.com/stashapp/stash/develop/docker/production/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Adding Codeberg Weblate Remote\nDESCRIPTION: Adds a remote repository named `weblate_codeberg` pointing to the Codeberg Weblate repository. This allows fetching translation updates from Codeberg.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/locales/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add weblate_codeberg https://translate.codeberg.org/git/stash/stash/\n```\n\n----------------------------------------\n\nTITLE: Invalid Recursive Common Fragments Example in Stash\nDESCRIPTION: This snippet illustrates an invalid configuration with recursive common fragments, which are not supported. Referencing `$info` within `$models` will cause an error.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncommon:\n  $info: //div[@class=\"info\"]\n  # Referencing $info in $models will cause an error\n  $models: $info/a[@class=\"model\"]\nscene:\n  Title: $info/h1\n  Performers:\n    Name: $models\n    URL: $models/@href\n```\n\n----------------------------------------\n\nTITLE: Running StashApp with docker-compose\nDESCRIPTION: This snippet shows how to start the StashApp container using docker-compose. It assumes that the docker-compose.yml file has been downloaded and configured as desired. The `docker compose up -d` command starts the containers in detached mode, running them in the background.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docker/production/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Scene Update Hook Args Example\nDESCRIPTION: This example provides an example of the `args` values for a Scene update hook, showing the structure of the `hookContext`, including the `type`, `id`, `input` (containing the JSON GraphQL input), and `inputFields` indicating which fields were passed to the operation.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Plugins.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hookContext\": {\n        \"type\":\"Scene.Update.Post\",\n        \"id\":45,\n        \"input\":{\n            \"clientMutationId\":null,\n            \"id\":\"45\",\n            \"title\":null,\n            \"details\":null,\n            \"url\":null,\n            \"date\":null,\n            \"rating\":null,\n            \"organized\":null,\n            \"studio_id\":null,\n            \"gallery_ids\":null,\n            \"performer_ids\":null,\n            \"groups\":null,\n            \"tag_ids\":[\"21\"],\n            \"cover_image\":null,\n            \"stash_ids\":null\n        },\n        \"inputFields\":[\n            \"tag_ids\",\n            \"id\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Plugin Output - Example 1 - Javascript\nDESCRIPTION: This example shows how to return plugin output from a Javascript plugin task by returning an object within an immediately invoked function expression (IIFE). The output object has a field called 'Output' with the value 'ok'.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/EmbeddedPlugins.md#_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\n(function() {\n    return {\n        Output: \"ok\"\n    };\n})();\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Yarn\nDESCRIPTION: This script starts the application in development mode. It launches a development server with hot-reloading enabled, allowing for real-time updates in the browser as code changes are made. The server typically runs on port 3000 and displays linting errors in the console.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building Stash with Make\nDESCRIPTION: Various `make` commands for building different parts of the Stash application. These commands handle tasks such as installing UI dependencies, generating files, building the UI, building binaries, and running tests.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docs/DEVELOPMENT.md#_snippet_4\n\nLANGUAGE: Makefile\nCODE:\n```\nmake pre-ui\nmake generate\nmake generate-stash-box-client\nmake ui\nmake stash\nmake stash-macapp\nmake phasher\nmake build\nmake build-release\nmake docker-build\nmake docker-cuda-build\nmake validate\nmake lint\nmake it\nmake fmt\nmake fmt-ui\nmake validate-ui\nmake fmt-ui-quick\nmake validate-ui-quick\nmake server-start\nmake server-clean\nmake ui-start\n```\n\n----------------------------------------\n\nTITLE: Resetting Codeberg Weblate Branch\nDESCRIPTION: Resets the `codeberg_weblate` branch to the `develop` branch of the `weblate_codeberg` remote. This effectively overwrites the local branch with the latest Codeberg translations.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/locales/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit reset --hard weblate_codeberg/develop\n```\n\n----------------------------------------\n\nTITLE: Building Production App with Yarn\nDESCRIPTION: This script builds the application for production, creating an optimized bundle in the `build` folder. The build process minifies the code and includes content hashes in the filenames for efficient caching. The resulting application is ready for deployment to a production environment.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Yarn\nDESCRIPTION: This script uses Prettier to automatically format TypeScript and SCSS code, ensuring consistent code style throughout the project. This helps improve code readability and maintainability and should ideally be run before submitting pull requests.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn format\n```\n\n----------------------------------------\n\nTITLE: Building Stash with Flags\nDESCRIPTION: Example `make` commands demonstrating the use of build flags to customize the build process, such as removing debug information, building a PIE binary, or building a statically linked binary.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docs/DEVELOPMENT.md#_snippet_5\n\nLANGUAGE: Makefile\nCODE:\n```\nmake flags-release stash\nmake flags-pie build\nmake flags-static phasher\nmake flags-static-pie stash\nmake flags-static-windows build\n```\n\n----------------------------------------\n\nTITLE: Task Configuration Example\nDESCRIPTION: This example shows the configuration structure for defining tasks within a Stash plugin. It specifies the task's name, optional description, and default arguments that are passed to the plugin when the task is executed.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Plugins.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  - name: <operation name>\n    description: <optional description>\n    defaultArgs:\n      argKey: argValue\n```\n\n----------------------------------------\n\nTITLE: Building Stash Docker Container\nDESCRIPTION: This command builds the Stash docker container from the top-level directory.  It requires the `tools.go` file to be present in the current directory. The resulting image will be tagged as `stash/build`.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docker/build/x86_64/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake docker-build\n```\n\n----------------------------------------\n\nTITLE: Cross Compilation Docker Run\nDESCRIPTION: Command to run the docker image for cross-compilation of the Stash application.  It mounts the current directory into the container and starts an interactive bash session.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docs/DEVELOPMENT.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --mount type=bind,source=\"$(pwd)\",target=/stash -w /stash -it stashapp/compiler /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Set Request Headers (YAML)\nDESCRIPTION: This snippet shows how to set request headers for scrapers (plain, CDP, or JSON).  Headers are defined as a list of Key-Value pairs within the `driver` section. Setting a `User-Agent` header from the scraper overrides the one in the Stash configuration.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\ndriver:\n  headers:\n    - Key: User-Agent\n      Value: My Stash Scraper\n    - Key: Authorization\n      Value: Bearer ds3sdfcFdfY17p4qBkTVF03zscUU2glSjWF17bZyoe8\n```\n\n----------------------------------------\n\nTITLE: Date Format Example\nDESCRIPTION: Example of the `created_at` and `updated_at` date format used in the JSON files for various StashApp entities. The format is `YYYY-MM-DDThh:mm:ssTZD`, representing the date and time with timezone offset.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/JSONSpec.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"created_at\": \"2019-05-03T21:36:58+01:00\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Task Output JSON Format\nDESCRIPTION: This example shows the JSON structure for the output of a Stash plugin task. It includes an optional error string and an output field that can contain any data.  The `error` field is logged as an error if present, and `output` is logged at the debug level.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Plugins.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": <optional error string>\n    \"output\": <anything>\n}\n```\n\n----------------------------------------\n\nTITLE: Split Post-processing Configuration in Stash\nDESCRIPTION: This snippet demonstrates the use of the `split` post-processing option.  It splits a comma-separated list of tags and returns an array of individual tags.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nTags:\n  Name:\n    selector: //span[@class=\"list_attributes\"]\n    split: \",\"\n```\n\n----------------------------------------\n\nTITLE: Enable Chrome CDP Support (YAML)\nDESCRIPTION: This snippet enables Chrome DevTools Protocol (CDP) support for a scraper configuration. It allows Stash to load the webpage using an instance of Chrome, enabling scraping of dynamically loaded content. The `useCDP` option must be set to `true`.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\ndriver:\n  useCDP: true\n```\n\n----------------------------------------\n\nTITLE: Set CDP Sleep Value (YAML)\nDESCRIPTION: This snippet configures the sleep duration after CDP page load. The `sleep` value specifies the amount of time (in seconds) the scraper should wait after loading the website to perform the scrape, allowing time for scripts to finish loading dynamic content. Defaults to 2 seconds if unset.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\ndriver:\n  useCDP: true\n  sleep: 1\n```\n\n----------------------------------------\n\nTITLE: Configure Cookies for Direct XPath Scraper (YAML)\nDESCRIPTION: This snippet demonstrates setting cookies for the direct XPath scraper.  `CookieURL` is required and must be the request URL expected from the site being scraped. `Cookies` contain `Name`, `Value`, `Domain`, and `Path` values. If the `CookieURL` is not valid the cookies will not set.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\ndriver:\n  cookies:\n    - CookieURL: \"https://www.example.com\"\n      Cookies:\n        - Name: \"_warning\"\n          Domain: \".example.com\"\n          Value: \"true\"\n          Path: \"/\"\n        - Name: \"_test2\"\n          Value: \"123412\"\n          Domain: \".example.com\"\n          Path: \"/\"\n    - CookieURL: \"https://api.somewhere.com\"\n      Cookies:\n        - Name: \"_warn\"\n          Value: \"123\"\n          Domain: \".somewhere.com\"\n```\n\n----------------------------------------\n\nTITLE: Configure Cookies for CDP Scraper (YAML)\nDESCRIPTION: This snippet shows how to configure cookies when using Chrome DevTools Protocol (CDP). In CDP, only the `Cookies` array is required, containing `Name`, `Value`, `Domain`, and `Path` values. `CookieURL` is not used in CDP mode.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_24\n\nLANGUAGE: YAML\nCODE:\n```\ndriver:\n  useCDP: true\n  cookies:\n    - Cookies:\n        - Name: \"_warning\"\n          Domain: \".example.com\"\n          Value: \"true\"\n          Path: \"/\"\n        - Name: \"_test2\"\n          Value: \"123412\"\n          Domain: \".example.com\"\n          Path: \"/\"\n    - Cookies:\n        - Name: \"_warn\"\n          Value: \"123\"\n          Domain: \".somewhere.com\"\n```\n\n----------------------------------------\n\nTITLE: Scraper Configuration File Format in YAML\nDESCRIPTION: This YAML code snippet shows the general structure of a Stash scraper configuration file. The `name` field is mandatory, and other top-level fields determine the capabilities of the scraper. Each top-level field contains a configuration that must at least have an `action` field.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: <site>\nperformerByName:\n  <single scraper config>\nperformerByFragment:\n  <single scraper config>\nperformerByURL:\n  <multiple scraper URL configs>\nsceneByName:\n  <single scraper config>\nsceneByQueryFragment:\n  <single scraper config>\nsceneByFragment:\n  <single scraper config>\nsceneByURL:\n  <multiple scraper URL configs>\ngroupByURL:\n  <multiple scraper URL configs>\ngalleryByFragment:\n  <single scraper config>\ngalleryByURL:\n  <multiple scraper URL configs>\nimageByFragment:\n  <single scraper config>\nimageByURL:\n  <multiple scraper URL configs>\n<other configurations>\n```\n\n----------------------------------------\n\nTITLE: Defining Scene JSON Schema\nDESCRIPTION: This JSON schema defines the structure for representing scene metadata. It specifies the properties of a scene object, including title, studio, URL, date, rating, details, performers, tags, markers, files, and timestamps. Each property is defined with its description and data type.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/JSONSpec.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://docs.stashapp.cc/in-app-manual/tasks/jsonspec#scenejson\",\n  \"title\": \"scene\",\n  \"description\": \"A json file representing a scene. The file is named by the MD5 Code of the file its data is referring to.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\n      \"description\": \"Title of the scene\",\n      \"type\": \"string\"\n    },\n    \"studio\": {\n      \"description\": \"The name of the studio that produced that scene\",\n      \"type\": \"string\"\n    },\n    \"url\": {\n      \"description\": \"The url to the scenes original source\",\n      \"type\": \"string\"\n    },\n    \"date\": {\n      \"description\": \"The release date of the scene. Its given in the format YYYY-MM-DD\",\n      \"type\": \"string\"\n    },\n    \"rating\": {\n      \"description\": \"The scenes Rating. Its given in stars, from 1 to 5\",\n      \"type\": \"integer\"\n    },\n    \"details\": {\n      \"description\": \"A description of the scene, containing things like the story arc\",\n      \"type\": \"string\"\n    },\n    \"performers\": {\n      \"description\": \"A list of names of the performers in this gallery\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true\n    },\n    \"tags\": {\n      \"description\": \"A list of the tags associated with this scene\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true\n    },\n    \"markers\": {\n      \"description\": \"Markers mark certain events in the scene, most often the change of the position. They are attributed with their own tags.\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\": {\n            \"description\": \"Searchable name of the marker\",\n            \"type\": \"string\"\n          },\n          \"seconds\": {\n            \"description\": \"At what second the marker is set. It is given with after comma values, such as 10.0 or 17.5\",\n            \"type\": \"string\"\n          },\n          \"primary_tag\": {\n            \"description\": \"A tag identifying this marker. Multiple markers from the same scene with the same primary tag are concatenated, showing them as similar in nature\",\n            \"type\": \"string\"\n          },\n          \"tags\": {\n            \"description\": \"A list of the tags associated with this marker\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"minItems\": 1,\n            \"uniqueItems\": true\n          },\n          \"created_at\": {\n            \"description\": \"The time this marker was added to the database. Format is YYYY-MM-DDThh:mm:ssTZD\",\n            \"type\": \"string\"\n          },\n          \"updated_at\": {\n            \"description\": \"The time this marker was updated the last time. Format is YYYY-MM-DDThh:mm:ssTZD\",\n            \"type\": \"string\"\n          }\n\n        },\n        \"required\": [\"seconds\", \"primary_tag\", \"created_at\", \"updated_at\"]\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true\n    },\n    \"files\": {\n      \"description\": \"A list of paths of the files for this scene\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"minItems\": 1,\n      \"uniqueItems\": true\n    },\n    \"created_at\": {\n      \"description\": \"The time this studios data was added to the database. Format is YYYY-MM-DDThh:mm:ssTZD\",\n      \"type\": \"string\"\n    },\n    \"updated_at\": {\n      \"description\": \"The time this studios data was last changed in the database. Format is YYYY-MM-DDThh:mm:ssTZD\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"files\", \"created_at\", \"updated_at\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Hook Input Example\nDESCRIPTION: This example showcases the structure of the `hookContext` argument included in plugin tasks triggered by a hook. It contains information about the triggered event, including the object ID, trigger type, operation input, and input fields.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Plugins.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": <object id>,\n    \"type\": <trigger type>,\n    \"input\": <operation input>,\n    \"inputFields\": <fields included in input>\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Stash Events in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `PluginApi.Event.addEventListener` to listen for the `stash:location` event, which is triggered when the page location changes. It logs the pathname of the new location to the console.  The `e.detail.data.location.pathname` contains the path.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/UIPluginApi.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPluginApi.Event.addEventListener(\"stash:location\", (e) => console.log(\"Page Changed\", e.detail.data.location.pathname))\n```\n\n----------------------------------------\n\nTITLE: Regex hidden directory exclusion\nDESCRIPTION: This example demonstrates how to exclude hidden directories (e.g., `/.directoryname/`) using a regular expression. This pattern is used during the scan process to prevent these directories and their contents from being included in the Stash library.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Configuration.md#_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n\"/\\.[[:word:]]+//\"\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Configuration File Format\nDESCRIPTION: This example shows the basic structure of a Stash plugin configuration file. It defines fields such as name, description, version, URL, UI configuration (CSS, JavaScript, assets, CSP), settings, and task-related configurations (exec, interface, errLog, tasks).\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Plugins.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: <plugin name>\ndescription: <optional description of the plugin>\nversion: <optional version tag>\nurl: <optional url>\n\nui:\n  # optional list of css files to include in the UI\n  css:\n    - <path to css file>\n\n  # optional list of js files to include in the UI\n  javascript:\n    - <path to javascript file>\n\n  # optional list of plugin IDs to load prior to this plugin\n  requires:\n    - <plugin ID>\n\n  # optional list of assets \n  assets:\n    urlPrefix: fsLocation\n    ...\n\n  # content-security policy overrides\n  csp:\n    script-src:\n      - http://alloweddomain.com\n    \n    style-src:\n      - http://alloweddomain.com\n    \n    connect-src:\n      - http://alloweddomain.com\n\n# map of setting names to be displayed in the plugins page in the UI\nsettings:\n  # internal name\n  foo:\n  # name to display in the UI\n  displayName: Foo\n  # type of the attribute to show in the UI\n  # can be BOOLEAN, NUMBER, or STRING\n  type: BOOLEAN\n\n# the following are used for plugin tasks only\nexec:\n  - ...\ninterface: [interface type]\nerrLog: [one of none trace, debug, info, warning, error]\ntasks:\n  - ...\n```\n\n----------------------------------------\n\nTITLE: Returning Plugin Output - Example 3 - Javascript\nDESCRIPTION: This example illustrates a third method for returning plugin output from a Javascript plugin task. A variable 'output' is defined and assigned an object, and then the variable 'output' is returned as the evaluated value of the script. The output object has a field called 'Output' with the value 'ok'.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/EmbeddedPlugins.md#_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\nvar output = {\n    Output: \"ok\"\n};\n\noutput;\n```\n\n----------------------------------------\n\nTITLE: Enable Debugging for Stash Scrapers (YAML)\nDESCRIPTION: This snippet enables debugging by printing the received HTML/JSON to the log file. Add this configuration to the scraper's YAML file to inspect the data received during scraping.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ScraperDevelopment.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\ndebug:\n  printHTML: true\n```\n\n----------------------------------------\n\nTITLE: YAML Source Configuration Example\nDESCRIPTION: This YAML snippet demonstrates the structure required for a source configuration file used to define available scraper packages for Stash. It includes fields for package ID, name, version, date, dependencies, path to the package zip file, SHA256 checksum, and optional metadata.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Scraping.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- id: <package id>\n  name: <package name>\n  version: <version>\n  date: <date>\n  requires:\n  - <ids of packages required by this package (optional)>\n  - ...\n  path: <path to package zip file>\n  sha256: <sha256 of zip>\n  metadata:\n    <optional key/value pairs for extra information>\n- ...\n```\n\n----------------------------------------\n\nTITLE: Custom Locale Override (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to override the default localisation strings in Stash. It shows an example of modifying the `actions.add_directory` label from its default value of `Add Directory` to `Some other description`. This requires creating a custom locale file with the desired overrides.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Interface.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"actions\": {\n    \"add_directory\": \"Some other description\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Served Folders Configuration (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure custom served folders in Stash. It exposes specific folders to the UI under the `/custom` URL path prefix. This allows serving static content or custom UI elements through Stash.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/Interface.md#_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\ncustom_served_folders:\n  /: D:\\\\stash\\\\static\n  /foo: D:\\\\bar\n```\n\n----------------------------------------\n\nTITLE: Building React Plugin with Yarn\nDESCRIPTION: These commands outline the build process for the React plugin. First, all dependencies are installed using `yarn install --frozen-lockfile`, ensuring consistent dependency versions.  Then, `yarn run build` executes the build script defined in the `package.json`, copying the compiled plugin files to the `dist` directory.\nSOURCE: https://github.com/stashapp/stash/blob/develop/pkg/plugin/examples/react-component/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install --frozen-lockfile\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Studio JSON Schema\nDESCRIPTION: JSON schema definition for a studio object in StashApp. It specifies the properties, their descriptions, and data types for representing studio metadata. The schema helps ensure data integrity and validation when importing or exporting studio information.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/JSONSpec.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://docs.stashapp.cc/in-app-manual/tasks/jsonspec#studiojson\",\n  \"title\": \"studio\",\n  \"description\": \"A json file representing a studio. The file is named by a MD5 Code.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"description\": \"Name of the studio\",\n      \"type\": \"string\"\n    },\n    \"url\": {\n      \"description\": \"URL to the studios websites\",\n      \"type\": \"string\"\n    },\n    \"image\": {\n      \"description\": \"Logo of the studio, parsed into base64\",\n      \"type\": \"string\"\n    },\n    \"created_at\": {\n      \"description\": \"The time this studios data was added to the database. Format is YYYY-MM-DDThh:mm:ssTZD\",\n      \"type\": \"string\"\n    },\n    \"updated_at\": {\n      \"description\": \"The time this studios data was last changed in the database. Format is YYYY-MM-DDThh:mm:ssTZD\",\n      \"type\": \"string\"\n    },\n    \"details\": {\n      \"description\": \"Description of the studio\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"name\", \"image\", \"created_at\", \"updated_at\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Performer JSON Schema\nDESCRIPTION: JSON schema definition for a performer object in StashApp.  It outlines the expected properties, their descriptions, and data types. This schema can be used for validation and ensuring data consistency when importing or exporting performer metadata.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/JSONSpec.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"https://docs.stashapp.cc/in-app-manual/tasks/jsonspec#performerjson\",\n  \"title\": \"performer\",\n  \"description\": \"A json file representing a performer. The file is named by a MD5 Code.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"description\": \"Name of the performer\",\n      \"type\": \"string\"\n    },\n    \"url\": {\n      \"description\": \"URL to website of the performer\",\n      \"type\": \"string\"\n    },\n    \"twitter\": {\n      \"description\": \"Twitter name of the performer\",\n      \"type\": \"string\"\n    },\n    \"instagram\": {\n      \"description\": \"Instagram name of the performer\",\n      \"type\": \"string\"\n    },\n    \"birthdate\": {\n      \"description\": \"Birthdate of the performer. Format is YYYY-MM-DD\",\n      \"type\": \"string\"\n    },\n    \"death_date\": {\n      \"description\": \"Death date of the performer. Format is YYYY-MM-DD\",\n      \"type\": \"string\"\n    },\n    \"ethnicity\": {\n      \"description\": \"Ethnicity of the Performer. Possible values are black, white, asian or hispanic\",\n      \"type\": \"string\"\n    },\n    \"country\": {\n      \"description\": \"Country of the performer\",\n      \"type\": \"string\"\n    },\n    \"hair_color\": {\n      \"description\": \"Hair color of the performer\",\n      \"type\": \"string\"\n    },\n    \"eye_color\": {\n      \"description\": \"Eye color of the performer\",\n      \"type\": \"string\"\n    },\n    \"height\": {\n      \"description\": \"Height of the performer in centimeters\",\n      \"type\": \"string\"\n    },\n    \"weight\": {\n      \"description\": \"Weight of the performer in kilograms\",\n      \"type\": \"string\"\n    },\n    \"measurements\": {\n      \"description\": \"Measurements of the performer\",\n      \"type\": \"string\"\n    },\n    \"fake_tits\": {\n      \"description\": \"Whether performer has fake tits. Possible are Yes or No\",\n      \"type\": \"string\"\n    },\n    \"career_length\": {\n      \"description\": \"The time the performer has been in business. In the format YYYY-YYYY\",\n      \"type\": \"string\"\n    },\n    \"tattoos\": {\n      \"description\": \"Giving a description of Tattoos of the performer if any\",\n      \"type\": \"string\"\n    },\n    \"piercings\": {\n      \"description\": \"Giving a description of Piercings of the performer if any\",\n      \"type\": \"string\"\n    },\n    \"image\": {\n      \"description\": \"Image of the performer, parsed into base64\",\n      \"type\": \"string\"\n    },\n    \"created_at\": {\n      \"description\": \"The time this performers data was added to the database. Format is YYYY-MM-DDThh:mm:ssTZD\",\n      \"type\": \"string\"\n    },\n    \"updated_at\": {\n      \"description\": \"The time this performers data was last changed in the database. Format is YYYY-MM-DDThh:mm:ssTZD\",\n      \"type\": \"string\"\n    },\n    \"details\": {\n      \"description\": \"Description of the performer\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"name\", \"ethnicity\", \"image\", \"created_at\", \"updated_at\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Pushing Codeberg Weblate Branch to Origin\nDESCRIPTION: Pushes the `codeberg_weblate` branch to the `origin` remote. This uploads the translation updates to the user's GitHub account.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/locales/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin codeberg_weblate\n```\n\n----------------------------------------\n\nTITLE: Creating Codeberg Weblate Branch\nDESCRIPTION: Creates and checks out a new branch named `codeberg_weblate`. This branch will be used to hold the translation updates fetched from Codeberg.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/locales/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b codeberg_weblate\n```\n\n----------------------------------------\n\nTITLE: Fetching Codeberg Weblate Develop Branch\nDESCRIPTION: Fetches the `develop` branch from the `weblate_codeberg` remote. This downloads the latest translation commits from Codeberg without merging them.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/locales/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch weblate_codeberg develop\n```\n\n----------------------------------------\n\nTITLE: Building Stash GoRPC Plugin\nDESCRIPTION: This command builds the 'gorpc' example plugin for Stash. It utilizes the Go compiler with the 'plugin_example' tag, creating an executable named 'plugin_gorpc.exe'. The plugin's source code resides in the './pkg/plugin/examples/gorpc/...' directory.\nSOURCE: https://github.com/stashapp/stash/blob/develop/pkg/plugin/examples/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngo build -tags=plugin_example -o plugin_gorpc.exe ./pkg/plugin/examples/gorpc/...\n```\n\n----------------------------------------\n\nTITLE: Building Stash GoRaw Plugin\nDESCRIPTION: This command builds the 'goraw' example plugin for Stash. It uses the Go compiler with the 'plugin_example' tag and outputs the executable as 'plugin_goraw.exe'. The source code is located in the './pkg/plugin/examples/goraw/...' directory.\nSOURCE: https://github.com/stashapp/stash/blob/develop/pkg/plugin/examples/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo build -tags=plugin_example -o plugin_goraw.exe ./pkg/plugin/examples/goraw/...\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn\nDESCRIPTION: This script launches the test runner in interactive watch mode. This allows for continuous testing as code is modified. Refer to the Create React App documentation for more information on configuring and running tests.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Ejecting CRA Configurations with Yarn\nDESCRIPTION: This script ejects the Create React App configuration, providing full control over the build process. This is a one-way operation that copies all configuration files and dependencies into the project, allowing for customization of webpack, Babel, ESLint, and other tools. Note: This action cannot be undone.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn eject\n```\n\n----------------------------------------\n\nTITLE: Ubuntu Dependencies Installation\nDESCRIPTION: Installs the necessary dependencies for building Stash on Ubuntu using the `apt-get` package manager. This includes `golang`, `git`, `yarnpkg`, `gcc`, `nodejs`, and `ffmpeg`.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docs/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install golang git yarnpkg gcc nodejs ffmpeg -y\n```\n\n----------------------------------------\n\nTITLE: OpenBSD Dependencies Installation\nDESCRIPTION: Installs the necessary dependencies for building Stash on OpenBSD using the `pkg_add` package manager. This includes `gmake`, `go`, `git`, `yarn`, `node`, and `cmake`.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docs/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndoas pkg_add gmake go git yarn node cmake\n```\n\n----------------------------------------\n\nTITLE: OpenBSD FFMPEG Removal\nDESCRIPTION: Removes the default ffmpeg package on OpenBSD, required if it was previously installed, before compiling a custom version from ports.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docs/DEVELOPMENT.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndoas pkg_delete ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Pprof Usage\nDESCRIPTION: Example commands demonstrating how to use `go tool pprof` to analyze CPU profiles generated by Stash. It showcases generating a call graph in SVG format.\nSOURCE: https://github.com/stashapp/stash/blob/develop/docs/DEVELOPMENT.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof <path to binary> <path to profile filename>\ngo tool pprof -svg <path to binary> <path to profile filename> > <output svg file>\n```\n\n----------------------------------------\n\nTITLE: External Plugin Execution Configuration\nDESCRIPTION: Example configuration of the 'exec' field in a Stash plugin configuration file. It demonstrates how to specify the executable and arguments for an external plugin. The plugin executable 'my_plugin' is placed in the 'plugins' subdirectory and requires arguments 'foo' and 'bar'.\nSOURCE: https://github.com/stashapp/stash/blob/develop/ui/v2.5/src/docs/en/Manual/ExternalPlugins.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexec:\n  - my_plugin\n  - foo\n  - bar\n```"
  }
]