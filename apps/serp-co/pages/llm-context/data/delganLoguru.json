[
  {
    "owner": "delgan",
    "repo": "loguru",
    "content": "TITLE: Basic Logging with Loguru in Python\nDESCRIPTION: Demonstrates how to import and use Loguru for basic logging without any configuration.\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom loguru import logger\n\nlogger.debug(\"That's it, beautiful and simple logging!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Loguru with Multiprocessing Pool\nDESCRIPTION: Demonstrates how to initialize and use Loguru with a multiprocessing Pool on Windows. It shows how to set up the logger and use it with both class-based and global logger approaches.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# main.py\nfrom multiprocessing import Pool\nfrom loguru import logger\nimport workers_a\nimport workers_b\n\nif __name__ == \"__main__\":\n    logger.remove()\n    logger.add(\"file.log\", enqueue=True)\n\n    worker = workers_a.Worker()\n    with Pool(4, initializer=worker.set_logger, initargs=(logger, )) as pool:\n        results = pool.map(worker.work, [1, 10, 100])\n\n    with Pool(4, initializer=workers_b.set_logger, initargs=(logger, )) as pool:\n        results = pool.map(workers_b.work, [1, 10, 100])\n\n    logger.info(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Defining Type Hints for Loguru Library in Python\nDESCRIPTION: This code snippet contains the entire type hints (stub file) for the Loguru logging library. It includes type definitions for functions, classes, and variables used in Loguru, enabling static type checking and better IDE support.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/api/type_hints_source.rst#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. include:: ../../loguru/__init__.pyi\n   :literal:\n```\n\n----------------------------------------\n\nTITLE: Implementing Loguru with Multiprocessing Pool (Class-based)\nDESCRIPTION: Demonstrates how to use Loguru with a multiprocessing Pool using a class-based approach. This method allows workers to access the shared logger by assigning it to a class attribute.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# workers_a.py\nclass Worker:\n\n    _logger = None\n\n    @staticmethod\n    def set_logger(logger_):\n        Worker._logger = logger_\n\n    def work(self, x):\n        self._logger.info(\"Square rooting {}\", x)\n        return x**0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Loguru Handlers in Python\nDESCRIPTION: Example showing how to remove the default handler and configure custom handlers for console and file output with specific formats and rotation settings.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogger.remove()  # Remove the default handler.\nlogger.add(sys.stderr, format=\"{time} - {level} - {message}\")  # Log to console with custom format.\nlogger.add(\"file.log\", level=\"INFO\", rotation=\"500 MB\")  # Also log to a file, rotating every 500 MB.\n```\n\n----------------------------------------\n\nTITLE: Using Loguru with Custom Multiprocessing Context\nDESCRIPTION: Shows how to use Loguru with a custom multiprocessing context to prevent issues when passing handlers to subprocesses in different contexts. It demonstrates specifying the context to be used by Loguru while adding the handler.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport multiprocessing\nfrom loguru import logger\nimport workers_a\n\nif __name__ == \"__main__\":\n    context = multiprocessing.get_context(\"spawn\")\n\n    logger.remove()\n    logger.add(\"file.log\", enqueue=True, context=context)\n\n    worker = workers_a.Worker()\n    with context.Pool(4, initializer=worker.set_logger, initargs=(logger, )) as pool:\n        results = pool.map(worker.work, [1, 10, 100])\n```\n\n----------------------------------------\n\nTITLE: Filtering Specific Logger Messages in Loguru\nDESCRIPTION: Demonstrates how to configure a sink to log only specific messages using custom filters and bound loggers. Shows how to create specialized loggers with extra context.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef specific_only(record):\n    return \"specific\" in record[\"extra\"]\n\nlogger.add(\"specific.log\", filter=specific_only)\n\nspecific_logger = logger.bind(specific=True)\n\nlogger.info(\"General message\")          # This is filtered-out by the specific sink\nspecific_logger.info(\"Module message\")  # This is accepted by the specific sink (and others)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Log Filtering with Bound Extra Values\nDESCRIPTION: Demonstrates using bind() with a custom filter function to dynamically control logging levels. This approach allows changing effective log levels without removing handlers by examining extra contextual values bound to the logger instance.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef my_filter(record):\n    if record[\"extra\"].get(\"warn_only\"):  # \"warn_only\" is bound to the logger and set to 'True'\n        return record[\"level\"].no >= logger.level(\"WARNING\").no\n    return True  # Fallback to default 'level' configured while adding the handler\n\n\nlogger.add(sys.stderr, filter=my_filter, level=\"DEBUG\")\n\n# Use this logger first, debug messages are filtered out\nlogger = logger.bind(warn_only=True)\nlogger.warn(\"Initialization in progress\")\n\n# Then you can use this one to log all messages\nlogger = logger.bind(warn_only=False)\nlogger.debug(\"Back to debug messages\")\n```\n\n----------------------------------------\n\nTITLE: Loguru Configuration for Scripts and Libraries\nDESCRIPTION: Demonstrates proper Loguru setup for both scripts and libraries, including configuration and enabling/disabling\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# For scripts\nconfig = {\n    \"handlers\": [\n        {\"sink\": sys.stdout, \"format\": \"{time} - {message}\"},\n        {\"sink\": \"file.log\", \"serialize\": True},\n    ],\n    \"extra\": {\"user\": \"someone\"}\n}\nlogger.configure(**config)\n\n# For libraries, should be your library's `__name__`\nlogger.disable(\"my_library\")\nlogger.info(\"No matter added sinks, this message is not displayed\")\n\n# In your application, enable the logger in the library\nlogger.enable(\"my_library\")\nlogger.info(\"This message however is propagated to the sinks\")\n```\n\n----------------------------------------\n\nTITLE: Removing Default Handler to Avoid Duplicate Console Logs\nDESCRIPTION: Demonstrates how to remove Loguru's pre-configured default handler before adding a custom one. This prevents log messages from being printed twice to the console by ensuring only one handler is directing output to stderr.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlogger.remove()  # Remove all handlers added so far, including the default one.\nlogger.add(sys.stderr, level=\"WARNING\")\n```\n\n----------------------------------------\n\nTITLE: Controlling Log Levels with a Callable Filter Object\nDESCRIPTION: Shows an advanced technique for dynamic log level control using a callable filter object. This approach allows programmatically changing the minimum log level at runtime without needing to remove and re-add handlers by updating a global variable referenced by the filter.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmin_level = logger.level(\"DEBUG\").no\n\ndef filter_by_level(record):\n    return record[\"level\"].no >= min_level\n\n\nlogger.remove()\nlogger.add(sys.stderr, filter=filter_by_level, level=0)\n\nlogger.debug(\"Logged\")\n\nmin_level = logger.level(\"WARNING\").no\n\nlogger.debug(\"Not logged\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Message Serialization with Pickle in Loguru\nDESCRIPTION: Demonstrates how to safely deserialize log messages using pickle by adding HMAC signature verification. This prevents execution of malicious code through pickle deserialization attacks by validating message integrity with a shared secret key.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\nimport hmac\nimport pickle\n\ndef client(connection):\n    data = pickle.dumps(\"Log message\")\n    digest =  hmac.digest(b\"secret-shared-key\", data, hashlib.sha1)\n    connection.send(digest + b\" \" + data)\n\ndef server(connection):\n    expected_digest, data = connection.read().split(b\" \", 1)\n    data_digest = hmac.digest(b\"secret-shared-key\", data, hashlib.sha1)\n    if not hmac.compare_digest(data_digest, expected_digest):\n        print(\"Integrity error\")\n    else:\n        message = pickle.loads(data)\n        logger.info(message)\n```\n\n----------------------------------------\n\nTITLE: Warning Integration with Loguru\nDESCRIPTION: Shows how to capture Python warnings and convert them into Loguru log messages using a custom warning handler.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\nfrom loguru import logger\n\nshowwarning_ = warnings.showwarning\n\ndef showwarning(message, *args, **kwargs):\n    logger.opt(depth=2).warning(message)\n    showwarning_(message, *args, **kwargs)\n\nwarnings.showwarning = showwarning\n```\n\n----------------------------------------\n\nTITLE: Colorized Logging with Loguru\nDESCRIPTION: Demonstrates how to add colors to log output using Loguru's markup tags.\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(sys.stdout, colorize=True, format=\"<green>{time}</green> <level>{message}</level>\")\n```\n\n----------------------------------------\n\nTITLE: Logging Level Configuration Example in Loguru\nDESCRIPTION: Shows how logging levels affect message visibility with debug messages being filtered out when level is set to INFO.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(sys.stderr, level=\"INFO\")\nlogger.debug(\"Some debug message\")  # Won't be displayed since \"DEBUG\" is below \"INFO\".\n```\n\n----------------------------------------\n\nTITLE: Configuring Loguru Handler in Python\nDESCRIPTION: Shows how to add a custom handler to Loguru, specifying format, filter, and log level.\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(sys.stderr, format=\"{time} {level} {message}\", filter=\"my_module\", level=\"INFO\")\n```\n\n----------------------------------------\n\nTITLE: Pytest Fixture for Capturing Loguru Logs\nDESCRIPTION: This snippet defines a pytest fixture that allows capturing Loguru logs using the caplog fixture. It adds a Loguru sink that propagates logs to the caplog handler, enabling testing of Loguru logs in pytest.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom loguru import logger\nfrom _pytest.logging import LogCaptureFixture\n\n@pytest.fixture\ndef caplog(caplog: LogCaptureFixture):\n    handler_id = logger.add(\n        caplog.handler,\n        format=\"{message}\",\n        level=0,\n        filter=lambda record: record[\"level\"].no >= caplog.handler.level,\n        enqueue=False,  # Set to 'True' if your test is spawning child processes.\n    )\n    yield caplog\n    logger.remove(handler_id)\n```\n\n----------------------------------------\n\nTITLE: Exception Catching with Loguru Decorator\nDESCRIPTION: Shows how to use Loguru's catch decorator to ensure exceptions are logged.\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@logger.catch\ndef my_function(x, y, z):\n    # An error? It's caught anyway!\n    return 1 / (x + y + z)\n```\n\n----------------------------------------\n\nTITLE: Implementing Loguru with Multiprocessing on Linux\nDESCRIPTION: Demonstrates how to use Loguru with multiprocessing on Linux. It shows that thanks to os.fork, there are no pitfalls when using the logger inside another process started by the multiprocessing module.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Linux implementation\nimport multiprocessing\nfrom loguru import logger\n\ndef my_process():\n    logger.info(\"Executing function in child process\")\n    logger.complete()\n\nif __name__ == \"__main__\":\n    logger.add(\"file.log\", enqueue=True)\n\n    process = multiprocessing.Process(target=my_process)\n    process.start()\n    process.join()\n\n    logger.info(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Record Patching in Loguru\nDESCRIPTION: Demonstrates using patch() method to dynamically update record attributes for each message\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(sys.stderr, format=\"{extra[utc]} {message}\")\nlogger = logger.patch(lambda record: record[\"extra\"].update(utc=datetime.utcnow()))\n```\n\n----------------------------------------\n\nTITLE: Testing Logging with Loguru using Logot\nDESCRIPTION: Demonstrates how to test logging calls using Logot, a high-level log testing library with built-in support for Loguru. It shows a simple test case using Logot to assert logged messages.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom logot import Logot, logged\n\ndef test_something(logot: Logot) -> None:\n    do_something()\n    logot.assert_logged(logged.info(\"Something was done\"))\n```\n\n----------------------------------------\n\nTITLE: Named Logger Configuration in Loguru\nDESCRIPTION: Shows how to create and configure multiple named loggers with dedicated log files using filters and bound loggers.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(\"a.log\", filter=lambda record: record[\"extra\"].get(\"name\") == \"a\")\nlogger.add(\"b.log\", filter=lambda record: record[\"extra\"].get(\"name\") == \"b\")\n\nlogger_a = logger.bind(name=\"a\")\nlogger_b = logger.bind(name=\"b\")\n\nlogger_a.info(\"Message A\")\nlogger_b.info(\"Message B\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Log Formatter in Python\nDESCRIPTION: Example of implementing a custom formatter function that adjusts log format based on log level, including thread information for error messages.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef custom_formatter(record):\n    if record[\"level\"].no >= 40:\n        return \"<green>{time}</> - {level} - <red>{thread}</> - <lvl>{message}</>\n{exception}\"\n    else:\n        return \"<green>{time}</> - {level} - <lvl>{message}</lvl>\n{exception}\"\n\nlogger.add(sys.stderr, format=custom_formatter)\n```\n\n----------------------------------------\n\nTITLE: Contextual Logging with Loguru Bind Method\nDESCRIPTION: Shows how to add context to log messages using bind() method and format strings with extra attributes\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(\"file.log\", format=\"{extra[ip]} {extra[user]} {message}\")\ncontext_logger = logger.bind(ip=\"192.168.0.1\", user=\"someone\")\ncontext_logger.info(\"Contextualize your logger easily\")\ncontext_logger.bind(user=\"someone_else\").info(\"Inline binding of extra attribute\")\ncontext_logger.info(\"Use kwargs to add context during formatting: {user}\", user=\"anybody\")\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Logging with Loguru\nDESCRIPTION: Shows how to enable asynchronous logging using Loguru's enqueue parameter.\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(\"somefile.log\", enqueue=True)\n```\n\n----------------------------------------\n\nTITLE: Loguru Function Decorator for Entry/Exit Logging\nDESCRIPTION: Decorator implementation to log function entry and exit with parameters and return values\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport functools\nfrom loguru import logger\n\ndef logger_wraps(*, entry=True, exit=True, level=\"DEBUG\"):\n    def wrapper(func):\n        name = func.__name__\n\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            logger_ = logger.opt(depth=1)\n            if entry:\n                logger_.log(level, \"Entering '{}' (args={}, kwargs={})\", name, args, kwargs)\n            result = func(*args, **kwargs)\n            if exit:\n                logger_.log(level, \"Exiting '{}' (result={})\", name, result)\n            return result\n        return wrapped\n    return wrapper\n```\n\n----------------------------------------\n\nTITLE: Detailed Exception Logging with Loguru\nDESCRIPTION: Demonstrates how to configure Loguru for detailed exception logging with full stack traces and variable values.\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Caution, \"diagnose=True\" is the default and may leak sensitive data in prod\nlogger.add(\"out.log\", backtrace=True, diagnose=True)\n\ndef func(a, b):\n    return a / b\n\ndef nested(c):\n    try:\n        func(5, c)\n    except ZeroDivisionError:\n        logger.exception(\"What?!\")\n\nnested(0)\n```\n\n----------------------------------------\n\nTITLE: Module-Specific Logging Configuration in Loguru\nDESCRIPTION: Demonstrates how to configure different log files for different modules using filters.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(\"my_app.log\")  # All messages.\nlogger.add(\"module_1.log\", filter=\"module_1\")  # Messages from \"module_1\" only.\nlogger.add(\"module_2.log\", filter=\"module_2\")  # Messages from \"module_2\" only.\n```\n\n----------------------------------------\n\nTITLE: Custom Log Filtering with Bound Loggers in Loguru\nDESCRIPTION: Example of using bound loggers to create specific log filters and separate log files.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef is_specific_log(record):\n    return record[\"extra\"].get(\"is_specific\") is True\n\nlogger.add(\"specific.log\", filter=is_specific_log)\nlogger.add(\"other.log\", filter=lambda r: not is_specific_log(r))\n\nspecific_logger = logger.bind(is_specific=True)\nspecific_logger.info(\"This message will go to 'specific.log' only.\")\n\nlogger.info(\"This message will go to 'other.log' only.\")\n```\n\n----------------------------------------\n\nTITLE: File Logging with Rotation in Loguru\nDESCRIPTION: Demonstrates how to set up file logging with various rotation and retention policies using Loguru.\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(\"file_{time}.log\")\nlogger.add(\"file_1.log\", rotation=\"500 MB\")    # Automatically rotate too big file\nlogger.add(\"file_2.log\", rotation=\"12:00\")     # New file is created each day at noon\nlogger.add(\"file_3.log\", rotation=\"1 week\")    # Once the file is too old, it's rotated\n\nlogger.add(\"file_X.log\", retention=\"10 days\")  # Cleanup after some time\n\nlogger.add(\"file_Y.log\", compression=\"zip\")    # Save some loved space\n```\n\n----------------------------------------\n\nTITLE: Traceback Logging with Loguru in Python\nDESCRIPTION: Demonstrates how to add traceback information to log messages using a custom formatter function. The example shows how to prefix logged messages with the full call stack.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport traceback\nfrom itertools import takewhile\n\ndef tracing_formatter(record):\n    # Filter out frames coming from Loguru internals\n    frames = takewhile(lambda f: \"/loguru/\" not in f.filename, traceback.extract_stack())\n    stack = \" > \".join(\"{}:{}:{}\".format(f.filename, f.name, f.lineno) for f in frames)\n    record[\"extra\"][\"stack\"] = stack\n    return \"{level} | {extra[stack]} - {message}\\n{exception}\"\n\ndef foo():\n    logger.info(\"Deep call\")\n\ndef bar():\n    foo()\n\nlogger.remove()\nlogger.add(sys.stderr, format=tracing_formatter)\n\nbar()\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialized Logging in Python with Loguru\nDESCRIPTION: Demonstrates how to enable JSON serialization of log messages using Loguru's serialize parameter\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(custom_sink_function, serialize=True)\n```\n\n----------------------------------------\n\nTITLE: Changing Log Level of an Existing Handler by Removal and Re-addition\nDESCRIPTION: Shows how to change the log level of an existing handler by storing the handler ID, removing it, and then re-adding it with the updated level. This approach requires maintaining a reference to the handler's identifier returned when it was initially added.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhandler_id = logger.add(sys.stderr, level=\"WARNING\")\n\nlogger.info(\"Logging 'WARNING' or higher messages only\")\n\n...\n\nlogger.remove(handler_id)  # For the default handler, it's actually '0'.\nlogger.add(sys.stderr, level=\"DEBUG\")\n\nlogger.debug(\"Logging 'DEBUG' messages too\")\n```\n\n----------------------------------------\n\nTITLE: Capturing stdout and stderr with Loguru\nDESCRIPTION: Implements a custom stream handler to capture and redirect standard output and standard error to Loguru logging handlers.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\nimport sys\nfrom loguru import logger\n\nclass StreamToLogger:\n\n    def __init__(self, level=\"INFO\"):\n        self._level = level\n\n    def write(self, buffer):\n        for line in buffer.rstrip().splitlines():\n            logger.opt(depth=1).log(self._level, line.rstrip())\n\n    def flush(self):\n        pass\n\nlogger.remove()\nlogger.add(sys.__stdout__)\n\nstream = StreamToLogger()\nwith contextlib.redirect_stdout(stream):\n    print(\"Standard output is sent to added handlers.\")\n```\n\n----------------------------------------\n\nTITLE: Using logger.catch with Default Return Value\nDESCRIPTION: Example showing usage of logger.catch() decorator with new default return value for error cases. Added in version 0.5.0+.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CHANGELOG.rst#2025-04-05_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@logger.catch(default=None)\ndef some_function():\n    # Function code here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Replacing Logger Adapter with Loguru's Bind Method\nDESCRIPTION: This snippet shows how to replace the LoggerAdapter from standard logging with Loguru's bind method. It demonstrates adding context to log messages and configuring the log format accordingly.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncontext = {\"clientip\": \"192.168.0.1\", \"user\": \"fbloggs\"}\n\nlogger.info(\"Protocol problem\", extra=context)   # Standard logging\nlogger.bind(**context).info(\"Protocol problem\")  # Loguru\n\nfmt = \"%(asctime)s %(clientip)s %(user)s %(message)s\"     # Standard logging\nfmt = \"{time} {extra[clientip]} {extra[user]} {message}\"  # Loguru\n```\n\n----------------------------------------\n\nTITLE: Filtered Logging with Loguru Bind\nDESCRIPTION: Shows how to combine bind() with filter for fine-grained control over log message routing\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(\"special.log\", filter=lambda record: \"special\" in record[\"extra\"])\nlogger.debug(\"This message is not logged to the file\")\nlogger.bind(special=True).info(\"This message, though, is logged to the file!\")\n```\n\n----------------------------------------\n\nTITLE: Checking Logger Configuration in Python using Loguru\nDESCRIPTION: Demonstrates how to verify logger configuration and handlers by printing the logger object.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(logger)\n# Output: <loguru.logger handlers=[(id=0, level=10, sink=<stderr>)]>\n```\n\n----------------------------------------\n\nTITLE: Setting Secure File Permissions for Log Files\nDESCRIPTION: Shows how to modify the default file access permissions when creating log files with Loguru. This example uses a custom opener function to set restrictive file permissions (0o600) that ensure only the file owner can read or write to the log file.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef opener(file, flags):\n    return os.open(file, flags, 0o600)\n\nlogger.add(\"combined.log\", opener=opener)\n```\n\n----------------------------------------\n\nTITLE: Sink Implementation Examples in Loguru\nDESCRIPTION: Demonstrates implementation of simple and advanced sinks in Loguru, showing how to handle basic string messages and access record metadata.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef simple_sink(message):\n    # A simple sink can use \"message\" as a basic string and ignore the \"record\" attribute.\n    print(message, end=\"\")\n\ndef advanced_sink(message):\n    # An advanced sink can use the \"record\" attribute to access contextual information.\n    record = message.record\n```\n\n----------------------------------------\n\nTITLE: Preventing Log Injection Attacks in Loguru\nDESCRIPTION: Shows how unescaped user input can lead to log injection attacks where attackers can insert fake log entries. This example demonstrates how seemingly innocent user data could create misleading log entries by including newlines and log-level indicators.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(\"file.log\", format=\"{level} {message}\")\n\n# If value is \"Josh logged in.\\nINFO User James\" then there will appear to be two log entries.\nusername = external_data()\nlogger.info(\"User \" + username + \" logged in.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Level-Based Log Filtering in Python\nDESCRIPTION: Demonstrates how to configure handlers with different log levels and filter functions to prevent duplicate logging.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef is_debug(record):\n    return record[\"level\"].no <= 10\n\nlogger.add(sys.stderr, level=\"DEBUG\", format=\"{time} - {name} - {message}\", filter=is_debug)\nlogger.add(sys.stderr, level=\"INFO\", format=\"{message}\", filter=lambda r: not is_debug(r))\n```\n\n----------------------------------------\n\nTITLE: Colorized Exception Traceback Formatting in Python\nDESCRIPTION: This code snippet shows a colorized and formatted traceback for complex exception scenarios. It uses ANSI color codes to highlight different parts of the traceback, making it easier to read and understand the exception flow.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/grouped_with_cause_and_context.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n[33m[1mTraceback (most recent call last):[0m\n\n  File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m31[0m, in [35mmain[0m\n    [1ma[0m[1m([0m[1m)[0m\n    [36m└ [0m[36m[1m<function a at 0xDEADBEEF>[0m\n\n  File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m10[0m, in [35ma[0m\n    [34m[1m1[0m [35m[1m/[0m [34m[1m0[0m\n\n[31m[1mZeroDivisionError[0m:[1m division by zero[0m\n\n\n[1mThe above exception was the direct cause of the following exception:[0m\n\n\n[33m[1mTraceback (most recent call last):[0m\n\n  File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m34[0m, in [35mmain[0m\n    [35m[1mraise[0m [1mValueError[0m[1m([0m[36m\"Error\"[0m[1m)[0m [35m[1mfrom[0m [1merr[0m\n\n[31m[1mValueError[0m:[1m Error[0m\n\n\n[1mDuring handling of the above exception, another exception occurred:[0m\n\n\n  + [33m[1mException Group Traceback (most recent call last):[0m\n  |\n  | > File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m43[0m, in [35m<module>[0m\n  |     [1mmain[0m[1m([0m[1m)[0m\n  |     [36m└ [0m[36m[1m<function main at 0xDEADBEEF>[0m\n  |\n  |   File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m36[0m, in [35mmain[0m\n  |     [35m[1mraise[0m [1mExceptionGroup[0m[1m([0m[36m\"from_context\"[0m[1m,[0m [1m[[0m[1mfrom_context[0m[1m,[0m [1mfrom_cause[0m[1m][0m[1m)[0m\n  |     [36m                                      │             └ [0m[36m[1mValueError('CauseError')[0m\n  |     [36m                                      └ [0m[36m[1mValueError('ContextError')[0m\n  |\n  | [31m[1mExceptionGroup[0m:[1m from_context (2 sub-exceptions)[0m\n  +-+---------------- 1 ----------------\n    | [33m[1mTraceback (most recent call last):[0m\n    |\n    |   File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m17[0m, in [35mmain[0m\n    |     [1ma[0m[1m([0m[1m)[0m\n    |     [36m└ [0m[36m[1m<function a at 0xDEADBEEF>[0m\n    |\n    |   File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m10[0m, in [35ma[0m\n    |     [34m[1m1[0m [35m[1m/[0m [34m[1m0[0m\n    |\n    | [31m[1mZeroDivisionError[0m:[1m division by zero[0m\n    |\n    |\n    | [1mThe above exception was the direct cause of the following exception:[0m\n    |\n    |\n    | [33m[1mTraceback (most recent call last):[0m\n    |\n    |   File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m19[0m, in [35mmain[0m\n    |     [35m[1mraise[0m [1mValueError[0m[1m([0m[36m\"ContextError\"[0m[1m)[0m [35m[1mfrom[0m [1merr[0m\n    |\n    | [31m[1mValueError[0m:[1m ContextError[0m\n    +---------------- 2 ----------------\n    | [33m[1mTraceback (most recent call last):[0m\n    |\n    |   File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m24[0m, in [35mmain[0m\n    |     [1ma[0m[1m([0m[1m)[0m\n    |     [36m└ [0m[36m[1m<function a at 0xDEADBEEF>[0m\n    |\n    |   File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m10[0m, in [35ma[0m\n    |     [34m[1m1[0m [35m[1m/[0m [34m[1m0[0m\n    |\n    | [31m[1mZeroDivisionError[0m:[1m division by zero[0m\n    |\n    |\n    | [1mDuring handling of the above exception, another exception occurred:[0m\n    |\n    |\n    | [33m[1mTraceback (most recent call last):[0m\n    |\n    |   File \"[32mtests/exceptions/source/modern/[0m[32m[1mgrouped_with_cause_and_context.py[0m\", line [33m26[0m, in [35mmain[0m\n    |     [35m[1mraise[0m [1mValueError[0m[1m([0m[36m\"CauseError\"[0m[1m)[0m\n    |\n    | [31m[1mValueError[0m:[1m CauseError[0m\n    +------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Disabling Diagnose Feature for Production Logging\nDESCRIPTION: Demonstrates how to disable Loguru's automatic exception diagnosis feature in production environments. This prevents potential exposure of sensitive information when exceptions are logged by turning off the detailed variable inspection that's helpful for debugging.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(\"out.log\", diagnose=False)\n```\n\n----------------------------------------\n\nTITLE: Custom Log Formatter Implementation in Loguru\nDESCRIPTION: Example of implementing a custom formatter function that includes exception information in the log output.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef custom_formatter(record):\n    return \"{time} - {level} - {message}\\n{exception}\"\n\nlogger.add(sys.stderr, format=custom_formatter)\n```\n\n----------------------------------------\n\nTITLE: Loguru Project Structure Example\nDESCRIPTION: Shows a typical project structure for implementing Loguru logging across different Python files\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nmypackage\n├── __init__.py\n├── __main__.py\n├── main.py\n└── mymodule.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Loguru with Multiprocessing on Windows\nDESCRIPTION: Shows how to use Loguru with multiprocessing on Windows. Due to Windows not supporting forking, the logger object needs to be explicitly passed as an initializer argument to the child process.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Windows implementation\nimport multiprocessing\nfrom loguru import logger\n\ndef my_process(logger_):\n    logger_.info(\"Executing function in child process\")\n    logger_.complete()\n\nif __name__ == \"__main__\":\n    logger.remove()  # Default \"sys.stderr\" sink is not picklable\n    logger.add(\"file.log\", enqueue=True)\n\n    process = multiprocessing.Process(target=my_process, args=(logger, ))\n    process.start()\n    process.join()\n\n    logger.info(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Inline Progress Logging with Loguru\nDESCRIPTION: Shows how to manipulate newline terminators to write multiple logs on the same line, useful for displaying progress indicators or step-by-step processes.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef formatter(record):\n    end = record[\"extra\"].get(\"end\", \"\\n\")\n    return \"[{time}] {message}\" + end + \"{exception}\"\n\nlogger.add(sys.stderr, format=formatter)\nlogger.add(\"foo.log\", mode=\"w\")\n\nlogger.bind(end=\"\").debug(\"Progress: \")\n\nfor _ in range(5):\n    logger.opt(raw=True).debug(\".\")\n\nlogger.opt(raw=True).debug(\"\\n\")\n\nlogger.info(\"Done\")\n```\n\n----------------------------------------\n\nTITLE: Handling Python AssertionError with Enhanced Traceback in Loguru\nDESCRIPTION: This code snippet shows how Loguru enhances Python's exception tracebacks by adding colors, variable values, and improved formatting. The example demonstrates an AssertionError occurring in a library function with different traceback options.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/assertion_from_lib.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nassertionerror(a, b)\n```\n\nLANGUAGE: python\nCODE:\n```\nassert x == y\n```\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=False)\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Loguru\nDESCRIPTION: Demonstrates setting Loguru defaults through environment variables\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Linux / OSX\nexport LOGURU_FORMAT=\"{time} | <lvl>{message}</lvl>\"\n\n# Windows\nsetx LOGURU_DEBUG_COLOR \"<green>\"\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Levels in Loguru\nDESCRIPTION: Demonstrates creating custom logging levels with color and icon support\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nnew_level = logger.level(\"SNAKY\", no=38, color=\"<yellow>\", icon=\"🐍\")\n\nlogger.log(\"SNAKY\", \"Here we go!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Loguru with Multiprocessing Pool (Global Logger)\nDESCRIPTION: Shows how to use Loguru with a multiprocessing Pool by overriding the global logger in child processes. This approach allows workers to access the shared logger through the global logger variable.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# workers_b.py\nfrom loguru import logger\n\ndef set_logger(logger_):\n    global logger\n    logger = logger_\n\ndef work(x):\n    logger.info(\"Square rooting {}\", x)\n    return x**0.5\n```\n\n----------------------------------------\n\nTITLE: Using Type Hints with Loguru\nDESCRIPTION: A basic example demonstrating the use of type hints with Loguru, including properly typing message sinks and filters. The example shows how type checkers can catch errors, such as accessing an invalid key in a Record dictionary.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/api/type_hints.rst#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport loguru\nfrom loguru import logger\n\ndef good_sink(message: loguru.Message):\n    print(\"My name is\", message.record[\"name\"])\n\ndef bad_filter(record: loguru.Record):\n    return record[\"invalid\"]\n\nlogger.add(good_sink, filter=bad_filter)\n```\n\n----------------------------------------\n\nTITLE: Python Assertion Error Example with Loguru Formatting\nDESCRIPTION: A code example showing an assertion error with enhanced Loguru traceback formatting that includes variable values and colored output. The error occurs when validating numerical conditions in a function.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/assertion_error_custom.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfoo(9, 55)\n\ndef foo(abc, xyz):\n    assert abc > 10 and xyz == 60, \"Foo assertion failed\"\n```\n\n----------------------------------------\n\nTITLE: Pytest Fixture for Propagating Loguru Logs to Standard Logging\nDESCRIPTION: This snippet defines a pytest fixture that propagates Loguru logs to the standard logging module. It's useful when dealing with the --log-cli-level command-line flag in pytest.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture(autouse=True)\ndef propagate_logs():\n\n    class PropagateHandler(logging.Handler):\n        def emit(self, record):\n            if logging.getLogger(record.name).isEnabledFor(record.levelno):\n                logging.getLogger(record.name).handle(record)\n\n    logger.remove()\n    logger.add(PropagateHandler(), format=\"{message}\")\n    yield\n```\n\n----------------------------------------\n\nTITLE: Standard Logging Integration with Loguru\nDESCRIPTION: Shows various ways to integrate Loguru with Python's standard logging module\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nhandler = logging.handlers.SysLogHandler(address=('localhost', 514))\nlogger.add(handler)\n```\n\n----------------------------------------\n\nTITLE: Type Hinting Loguru Logger (Python)\nDESCRIPTION: Demonstrates how to use the Logger class for type hinting purposes without runtime access, using conditional imports and TYPE_CHECKING.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport typing\n\nfrom loguru import logger\n\nif typing.TYPE_CHECKING:\n    from loguru import Logger\n\ndef my_function(logger: Logger):\n    logger.info(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Capturing Warnings with Loguru in Python\nDESCRIPTION: This snippet shows how to capture warnings and redirect them to Loguru. It replaces the showwarning function from the warnings module to log warnings using Loguru.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\nfrom loguru import logger\n\nshowwarning_ = warnings.showwarning\n\ndef showwarning(message, *args, **kwargs):\n    logger.warning(message)\n    showwarning_(message, *args, **kwargs)\n\nwarnings.showwarning = showwarning\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Loguru Exception Handling with Unprintable Object in Python\nDESCRIPTION: This code snippet shows a division by zero error involving an unprintable object. It demonstrates how Loguru formats the traceback, including file path, line number, and the representation of an unprintable object.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/unprintable_object.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nobj + 1 / 0\n```\n\n----------------------------------------\n\nTITLE: Patching Logger for Unknown Source (Python)\nDESCRIPTION: Shows how to patch the logger when the source information is missing or incorrect, which can happen with certain frameworks like Dask or Cython.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nlogger = logger.patch(lambda record: record.update(name=\"my_module\"))\n```\n\n----------------------------------------\n\nTITLE: Notification Integration with Loguru and Apprise\nDESCRIPTION: Demonstrates integrating Loguru with Apprise for sending notifications on log events\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport apprise\n\n# Define the configuration constants.\nWEBHOOK_ID = \"123456790\"\nWEBHOOK_TOKEN = \"abc123def456\"\n\n# Prepare the object to send Discord notifications.\nnotifier = apprise.Apprise()\nnotifier.add(f\"discord://{WEBHOOK_ID}/{WEBHOOK_TOKEN}\")\n\n# Install a handler to be alerted on each error.\n# You can filter out logs from \"apprise\" itself to avoid recursive calls.\nlogger.add(notifier.notify, level=\"ERROR\", filter={\"apprise\": False})\n```\n\n----------------------------------------\n\nTITLE: Preventing Recursive Logging in Loguru (Python)\nDESCRIPTION: Illustrates how to prevent recursive logging calls that can lead to RuntimeErrors. Uses a custom sink function and a filter to avoid recursion.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom loguru import logger\n\n\ndef my_sink(message):\n    logger.debug(\"Within my sink\")\n    print(message, end=\"\")\n\n\ndef avoid_recursion(record):\n    return record[\"function\"] != \"my_sink\"\n\n\nif __name__ == \"__main__\":\n    logger.remove()\n    logger.add(\"file.log\")\n    logger.add(my_sink, filter=avoid_recursion)\n\n    logger.info(\"First message\")\n    logger.debug(\"Another message\")\n```\n\n----------------------------------------\n\nTITLE: Pytest Fixture for Propagating Loguru Logs to Terminal Reporter\nDESCRIPTION: This snippet defines a pytest fixture that propagates Loguru logs to the pytest terminal reporter. It allows Loguru logs to be displayed in the pytest output.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom loguru import logger\n\n@pytest.fixture\ndef reportlog(pytestconfig):\n    logging_plugin = pytestconfig.pluginmanager.getplugin(\"logging-plugin\")\n    handler_id = logger.add(logging_plugin.report_handler, format=\"{message}\")\n    yield\n    logger.remove(handler_id)\n```\n\n----------------------------------------\n\nTITLE: Standard Python Traceback Output\nDESCRIPTION: Shows a standard Python traceback for a ZeroDivisionError occurring in an async generator when attempting division by zero.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/exception_formatting_async_generator.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/modern/exception_formatting_async_generator.py\", line 20, in <module>\n    f.send(None)\n  File \"tests/exceptions/source/modern/exception_formatting_async_generator.py\", line 14, in foo\n    yield a / b\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Handling Critical Errors in Python with Loguru\nDESCRIPTION: This snippet demonstrates how to handle critical errors using Loguru. It checks the log level and prints a custom message to stderr for critical errors, while using a standard print for other levels.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif record[\"level\"].no >= 50:\n    file_path = record[\"file\"].path\n    print(f\"Critical error in {file_path}\", end=\"\", file=sys.stderr)\nelse:\n    print(message, end=\"\")\n\nlogger.add(simple_sink)\nlogger.add(advanced_sink)\n```\n\n----------------------------------------\n\nTITLE: Stream Redirection Error Example in Loguru\nDESCRIPTION: Illustrates a common pitfall when redirecting stdout and using it as a logger sink.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import contextmanager\nimport sys\nimport io\nfrom loguru import logger\n\n@contextmanager\ndef redirect_stdout(new_target):\n    old_target, sys.stdout = sys.stdout, new_target\n    try:\n        yield new_target\n    finally:\n        sys.stdout = old_target\n        new_target.close()\n\nif __name__ == \"__main__\":\n    logger.remove()\n    f = io.StringIO()\n\n    with redirect_stdout(f):\n        logger.add(sys.stdout)  # Logger is inadvertently configured with wrapped stream.\n        logger.info(\"Hello\")\n        output = f.getvalue()\n\n    print(f\"Captured output: {output}\")\n\n    # ValueError: I/O operation on closed file.\n    logger.info(\"World\")\n```\n\n----------------------------------------\n\nTITLE: Using Loguru's Opt Method for Lazy Evaluation\nDESCRIPTION: This snippet demonstrates how to use Loguru's opt method with the lazy option to replace the isEnabledFor method from standard logging. It allows for performance optimization by only evaluating expensive functions when needed.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/migration.rst#2025-04-05_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif logger.isEnabledFor(logging.DEBUG):\n    logger.debug(\"Message data: %s\", expensive_func())\n\n# Arguments should be functions which will be called if needed\nlogger.opt(lazy=True).debug(\"Message data: {}\", expensive_func)\n```\n\n----------------------------------------\n\nTITLE: Handling Closed sys.stderr in Loguru (Python)\nDESCRIPTION: Demonstrates how to handle a situation where sys.stderr is closed, causing a ValueError when logging. Suggests using catch=False to allow the error to propagate.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlogger.info(\"Test 2\", catch=False)\n```\n\n----------------------------------------\n\nTITLE: SyntaxError Exception Handling\nDESCRIPTION: Demonstrates SyntaxError handling with line number and pointer indication, including multiple notes.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/notes.txt#2025-04-05_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nraise e  # SyntaxError: syntax error (a = 7 *)\n```\n\n----------------------------------------\n\nTITLE: Implementing Loguru Network Server\nDESCRIPTION: Server implementation for receiving and handling log messages over TCP connections\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# server.py\nimport socketserver\nimport pickle\nimport struct\nimport sys\nfrom loguru import logger\n\nclass LoggingRequestHandler(socketserver.StreamRequestHandler):\n    def handle(self):\n        while True:\n            chunk = self.connection.recv(4)\n            if len(chunk) < 4:\n                break\n            slen = struct.unpack(\">L\", chunk)[0]\n            chunk = self.connection.recv(slen)\n            while len(chunk) < slen:\n                chunk = chunk + self.connection.recv(slen - len(chunk))\n            record = pickle.loads(chunk)\n            level, message = record[\"level\"].name, record[\"message\"]\n            logger.patch(lambda r, record=record: r.update(record)).log(level, message)\n\nif __name__ == \"__main__\":\n    logger.configure(handlers=[{\"sink\": \"server.log\"}, {\"sink\": sys.stderr}])\n    with socketserver.TCPServer((\"localhost\", 9999), LoggingRequestHandler) as server:\n        server.serve_forever()\n```\n\n----------------------------------------\n\nTITLE: Lazy Evaluation and Advanced Options in Loguru\nDESCRIPTION: Shows various opt() method uses including lazy evaluation, exception handling, and formatting options\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlogger.opt(lazy=True).debug(\"If sink level <= DEBUG: {x}\", x=lambda: expensive_function(2**64))\n\n# By the way, \"opt()\" serves many usages\nlogger.opt(exception=True).info(\"Error stacktrace added to the log message (tuple accepted too)\")\nlogger.opt(colors=True).info(\"Per message <blue>colors</blue>\")\nlogger.opt(record=True).info(\"Display values from the record (eg. {record[thread]})\")\nlogger.opt(raw=True).info(\"Bypass sink formatting\\n\")\nlogger.opt(depth=1).info(\"Use parent stack context (useful within wrapped functions)\")\nlogger.opt(capture=False).info(\"Keyword arguments not added to {dest} dict\", dest=\"extra\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Loguru Network Client\nDESCRIPTION: Client implementation for sending log messages to a Loguru TCP server\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/recipes.rst#2025-04-05_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# client.py\nimport socket\nimport struct\nimport time\nimport pickle\nfrom loguru import logger\n\nclass SocketHandler:\n    def __init__(self, host, port):\n        self._host = host\n        self._port = port\n\n    def write(self, message):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.connect((self._host, self._port))\n        record = message.record\n        data = pickle.dumps(record)\n        slen = struct.pack(\">L\", len(data))\n        sock.send(slen + data)\n\nif __name__ == \"__main__\":\n    logger.configure(handlers=[{\"sink\": SocketHandler('localhost', 9999)}])\n    logger.info(\"Sending message from the client\")\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Keyword Arguments\nDESCRIPTION: Shows how to use structured logging by automatically adding kwargs to the extra dict. This can be controlled with the .opt(capture=False) parameter.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CHANGELOG.rst#2025-04-05_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nlogger.info(\"Message {var}\", var=123, extra_field=\"value\")\n```\n\n----------------------------------------\n\nTITLE: Python Error Traceback with Match Statement Division Error\nDESCRIPTION: Error traceback showing a ZeroDivisionError that occurs when running a Python program using match-case statements. The traceback shows the call stack through three function calls, with the error occurring when attempting to divide by zero in a match statement pattern.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/match_statement.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmatch(1)\n# Function call leading to error\n\ncase y: case(x)\n# Pattern matching with nested function call\n\nmatch y / 0:\n# Division by zero error in match statement\n```\n\n----------------------------------------\n\nTITLE: Installing loguru-mypy Plugin\nDESCRIPTION: Command for installing the loguru-mypy plugin which provides additional type checking capabilities for Loguru, including validating lazy logging and proper record usage.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/api/type_hints.rst#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install loguru-mypy\n```\n\n----------------------------------------\n\nTITLE: String Formatting in Loguru Logs\nDESCRIPTION: Illustrates how to use modern string formatting with braces in Loguru log messages.\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlogger.info(\"If you're using Python {}, prefer {feature} of course!\", 3.6, feature=\"f-strings\")\n```\n\n----------------------------------------\n\nTITLE: Installing Loguru Development Dependencies\nDESCRIPTION: Command for installing Loguru in development mode with additional development dependencies.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CONTRIBUTING.rst#2025-04-05_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: DateTime Formatting in Loguru\nDESCRIPTION: Shows Loguru's simplified datetime formatting capabilities\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nlogger.add(\"file.log\", format=\"{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}\")\n```\n\n----------------------------------------\n\nTITLE: Python Traceback Demonstrating ZeroDivisionError Through Recursive Function Calls\nDESCRIPTION: This traceback shows an exception path where a division by zero error occurs in function 'a', after being called by function 'b', which was called by function 'c'. The error propagates up the call stack and is displayed in the traceback with line numbers and file location.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/frame_values_backward.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/backtrace/frame_values_backward.py\", line 24, in <module>\n    c(k)\n  File \"tests/exceptions/source/backtrace/frame_values_backward.py\", line 21, in c\n    b(n - 1)\n> File \"tests/exceptions/source/backtrace/frame_values_backward.py\", line 17, in b\n    a(n - 1)\n  File \"tests/exceptions/source/backtrace/frame_values_backward.py\", line 13, in a\n    1 / n\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks\nDESCRIPTION: Command for setting up pre-commit hooks to ensure code quality checks before commits.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CONTRIBUTING.rst#2025-04-05_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install --install-hooks\n```\n\n----------------------------------------\n\nTITLE: Running Loguru Tests\nDESCRIPTION: Command for running the test suite using tox.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CONTRIBUTING.rst#2025-04-05_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntox -e tests\n```\n\n----------------------------------------\n\nTITLE: Python Function with Walrus Operator Causing ZeroDivisionError\nDESCRIPTION: This code snippet shows a function 'foo' that uses the walrus operator (:=) in an if statement. It attempts to perform a division by zero, which raises a ZeroDivisionError.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/walrus_operator.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif a := \"a\" + (x:=1/0):\n```\n\n----------------------------------------\n\nTITLE: Git Commit and Push Commands\nDESCRIPTION: Series of Git commands for committing and pushing changes to the repository.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CONTRIBUTING.rst#2025-04-05_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m 'Add succinct explanation of what changed'\ngit push origin fix_bug\n```\n\n----------------------------------------\n\nTITLE: Error Handling with onerror Callback\nDESCRIPTION: Demonstrates using the onerror parameter with logger.catch() to provide custom error handling when exceptions occur.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CHANGELOG.rst#2025-04-05_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@logger.catch(onerror=lambda e: print(f\"Error: {e}\"))\ndef function_that_may_fail():\n    raise ValueError(\"Something went wrong\")\n```\n\n----------------------------------------\n\nTITLE: Raising an Empty ValueError in Python with Loguru Traceback Formatting\nDESCRIPTION: This example demonstrates how Loguru formats Python exception tracebacks. The code shows a call chain from module level through bar() and foo() functions, ending with raising a ValueError that has an empty error message. Loguru enhances the traceback with color-coded file paths, line numbers, and function annotations.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/no_error_message.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This code appears to be from tests/exceptions/source/diagnose/no_error_message.py\n# The complete code would include:\n\ndef foo():\n    raise ValueError(\"\")\n\ndef bar():\n    foo()\n\nbar()\n```\n\n----------------------------------------\n\nTITLE: Standard Python Traceback Example\nDESCRIPTION: Example of a standard Python traceback showing a ZeroDivisionError. This shows the error path through the code, including function calls and line numbers, but without additional diagnostic information.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/exception_formatting_function.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/others/exception_formatting_function.py\", line 17, in <module>\n    a(1, 0)\n  File \"tests/exceptions/source/others/exception_formatting_function.py\", line 14, in a\n    a / b\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Loguru Enhanced Traceback Example\nDESCRIPTION: Loguru's enhanced traceback formatting for the same ZeroDivisionError. It adds visual indicators (└, │) and shows the values of variables (a=1, b=0) and function objects, making debugging easier.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/exception_formatting_function.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n\n  File \"tests/exceptions/source/others/exception_formatting_function.py\", line 17, in <module>\n    a(1, 0)\n    └ <function a at 0xDEADBEEF>\n\n  File \"tests/exceptions/source/others/exception_formatting_function.py\", line 14, in a\n    a / b\n    │   └ 0\n    └ 1\n\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Python Type Error Traceback Display\nDESCRIPTION: Example of a formatted error traceback showing a TypeError when attempting to divide an integer (1) by a string variable. The traceback includes ANSI color codes for terminal display, line numbers, and truncated variable content.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/truncating.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[33m[1mTraceback (most recent call last):[0m\n\n  File \"[32mtests/exceptions/source/diagnose/[0m[32m[1mtruncating.py[0m\", line [33m15[0m, in [35m<module>[0m\n    [1mdiv[0m[1m([0m[1m)[0m\n    [36m└ [0m[36m[1m<function div at 0xDEADBEEF>[0m\n\n  File \"[32mtests/exceptions/source/diagnose/[0m[32m[1mtruncating.py[0m\", line [33m11[0m, in [35mdiv[0m\n    [35m[1mreturn[0m [34m[1m1[0m [35m[1m/[0m [1mvar[0m\n    [36m           └ [0m[36m[1m'9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999...[0m\n\n[31m[1mTypeError[0m:[1m unsupported operand type(s) for /: 'int' and 'str'[0m\n```\n\n----------------------------------------\n\nTITLE: Loguru Enhanced Traceback with Current Frame Indicator\nDESCRIPTION: Loguru's enhanced traceback with a '>' marker indicating the current frame, plus additional variable information. This combines frame highlighting with Loguru's detailed variable inspection for maximum debugging clarity.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/exception_formatting_function.txt#2025-04-05_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n\n> File \"tests/exceptions/source/others/exception_formatting_function.py\", line 17, in <module>\n    a(1, 0)\n    └ <function a at 0xDEADBEEF>\n\n  File \"tests/exceptions/source/others/exception_formatting_function.py\", line 14, in a\n    a / b\n    │   └ 0\n    └ 1\n\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Python Assertion Error Example with Loguru Traceback\nDESCRIPTION: This code snippet shows a Python assertion error thrown when conditions are not met, along with Loguru's enhanced traceback display that shows the actual values of variables involved in the failed assertion.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/assertion_error.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfoo(9, 55)\n\nassert abc > 10 and xyz == 60\n```\n\n----------------------------------------\n\nTITLE: Setting Up Loguru Development Environment\nDESCRIPTION: Series of bash commands for cloning the repository and setting up the development environment with virtual environment and dependencies.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CONTRIBUTING.rst#2025-04-05_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:your_name_here/loguru.git\ncd loguru\n```\n\n----------------------------------------\n\nTITLE: Handling Chained Exceptions in Python with Indirect Function Calls\nDESCRIPTION: This code demonstrates how exceptions are chained in Python when one exception occurs during the handling of another. A function 'a' attempts a division by zero, then raises a ValueError in the exception handler, which is called from function 'b' and caught in the main module.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/chained_expression_indirect.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef a():\n    try:\n        1 / 0\n    except ZeroDivisionError:\n        raise ValueError(\"NOK\")\n\ndef b():\n    a()\n\nb()  # First call pattern through function b\n\na()  # Second call pattern directly\n\na()  # Third call pattern directly\n```\n\n----------------------------------------\n\nTITLE: Python Division by Zero Error Example 2\nDESCRIPTION: Function bug_2 showing a division by zero error with multiple parameters and line continuation\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/source_multilines.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbug_2(1, string, 3)\nreturn (1 / 0 + a + b + \\\n```\n\n----------------------------------------\n\nTITLE: Python TypeError Traceback with Multiline Variable Display\nDESCRIPTION: Example of a formatted error traceback showing a TypeError when attempting to add two objects of type 'A' with multiline array representations. The traceback includes colored formatting codes and detailed variable state visualization.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/multilines_repr.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[33m[1mTraceback (most recent call last):[0m\n\n  File \"[32mtests/exceptions/source/diagnose/[0m[32m[1mmultilines_repr.py[0m\", line [33m20[0m, in [35m<module>[0m\n    [1mmultiline[0m[1m([0m[1m)[0m\n    [36m└ [0m[36m[1m<function multiline at 0xDEADBEEF>[0m\n\n  File \"[32mtests/exceptions/source/diagnose/[0m[32m[1mmultilines_repr.py[0m\", line [33m16[0m, in [35mmultiline[0m\n    [1ma[0m [35m[1m+[0m [1mb[0m\n    [36m│   └ [0m[36m[1m[[1, 2, 3][0m\n    [36m│     [0m[36m[1m [4, 5, 6][0m\n    [36m│     [0m[36m[1m [7, 8, 9]][0m\n    [36m└ [0m[36m[1m[[1, 2, 3][0m\n    [36m  [0m[36m[1m [4, 5, 6][0m\n    [36m  [0m[36m[1m [7, 8, 9]][0m\n\n[31m[1mTypeError[0m:[1m unsupported operand type(s) for +: 'A' and 'A'[0m\n```\n\n----------------------------------------\n\nTITLE: Installing Loguru with pip\nDESCRIPTION: Command to install Loguru using pip package manager.\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install loguru\n```\n\n----------------------------------------\n\nTITLE: Indirect Division Function Call in Python\nDESCRIPTION: This snippet demonstrates the call to 'divide_indirect' function with arguments 10 and 0, which leads to a ZeroDivisionError. It's part of the traceback showing the origin of the exception.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/indirect.txt#2025-04-05_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndivide_indirect(10, 0)\n```\n\n----------------------------------------\n\nTITLE: Exception Group Traceback Display in Python\nDESCRIPTION: Demonstrates the output format of an ExceptionGroup traceback, showing nested exceptions and colorized formatting. Includes both the initial exception group containing a ValueError and subsequent exception handling that raises another ValueError.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/exception_group_catch.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n  File \"tests/exceptions/source/modern/exception_group_catch.py\", line 14, in a\n    raise ExceptionGroup(\"group\", [ValueError(1)])\n\nExceptionGroup: group (1 sub-exception)\n+-+---------------- 1 ----------------\n  | ValueError: 1\n  +------------------------------------\n\nDuring handling of the above exception, another exception occurred:\n\nFile \"tests/exceptions/source/modern/exception_group_catch.py\", line 25, in <module>\n  b()\nFile \"tests/exceptions/source/modern/exception_group_catch.py\", line 21, in b\n  except* TypeError: a()\nFile \"tests/exceptions/source/modern/exception_group_catch.py\", line 15, in a\n  except* x as e: raise ValueError(2)\n\nValueError: 2\n```\n\n----------------------------------------\n\nTITLE: Loguru Changelog in RST Format\nDESCRIPTION: ReStructuredText formatted changelog documenting version history and changes for the Loguru logging library. Includes detailed lists of features, fixes and improvements organized by version numbers.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CHANGELOG.rst#2025-04-05_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n`Unreleased`_\n=============\n\n- Add new ``logger.reinstall()`` method to automatically set up the ``logger`` in spawned child processes (`#818 <https://github.com/Delgan/loguru/issues/818>`_, thanks `@monchin <https://github.com/monchin>`_).\n- Fix a regression preventing formatting of ``record[\"time\"]`` when using ``zoneinfo.ZoneInfo`` timezones (`#1260 <https://github.com/Delgan/loguru/pull/1260>`_, thanks `@bijlpieter <https://github.com/bijlpieter>`_).\n- Fix possible ``ValueError`` raised on Windows when system clock was set far ahead in the future (`#1291 <https://github.com/Delgan/loguru/issues/1291>`_).\n```\n\n----------------------------------------\n\nTITLE: Python Exception Group Chain with Cause and Context\nDESCRIPTION: Test case demonstrating nested ExceptionGroups with ZeroDivisionError and ValueError as sub-exceptions. Shows three levels of exception groups (group_1, group_2, group_3) with cause/context relationships and detailed tracebacks.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/grouped_as_cause_and_context.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef a():\n    1 / 0\n\ndef b():\n    raise ValueError(\"Error\")\n\ndef main():\n    error_1 = ZeroDivisionError('division by zero')\n    error_2 = ValueError('Error')\n    err = ExceptionGroup(\"group_1\", [error_1, error_2])\n    raise ExceptionGroup(\"group_2\", [error_2, error_1]) from err\n    raise ExceptionGroup(\"group_3\", [err])\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Invoking Test Function with Loguru Traceback Options in Python\nDESCRIPTION: This snippet shows the invocation of a test function with various Loguru traceback options. It demonstrates how to configure Loguru's exception handling features such as backtrace, colorization, and diagnosis.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/direct.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=True)\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted ZeroDivisionError with Loguru\nDESCRIPTION: This is an example of how Loguru formats and displays a ZeroDivisionError in the console. The output includes ANSI color codes for enhanced readability, showing line numbers, the error type, and error message.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/grouped_as_cause_and_context.txt#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      |     [34m[1m1[0m [35m[1m/[0m [34m[1m0[0m\n      |\n      | [31m[1mZeroDivisionError[0m:[1m division by zero[0m\n      +------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Raising Nested Exception Groups in Python\nDESCRIPTION: This code snippet shows the raising of nested exception groups with a maximum depth limit. It creates a complex structure of exceptions within exception groups, demonstrating how traceback is handled when the nesting reaches the maximum allowed depth.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/grouped_max_depth.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nraise ExceptionGroup(\"group\", [nesting_left, nesting_right, nesting_both])\n```\n\n----------------------------------------\n\nTITLE: Head Recursion Function 'a' Error Trace\nDESCRIPTION: Traceback showing recursive function 'a' calling itself with decremented input until reaching zero, causing a division by zero error. The function attempts to divide 1 by the input parameter after recursion.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/head_recursion.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    a(n - 1)\n    1 / n\n```\n\n----------------------------------------\n\nTITLE: Raising Nested Exception Groups in Python\nDESCRIPTION: This code snippet shows the main function that raises nested exception groups. It includes calls to functions that raise ZeroDivisionError and ValueError, which are then grouped and re-raised.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/grouped_nested.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    divide_by_zero()\n    raise_value_error(100)\n    raise ExceptionGroup(\"group_1\", [error_1, error_2])\n    raise_value_error(-100)\n    raise ExceptionGroup(\"group_2\", [error_4, error_3]) from None\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Exception Group Test Case with Multiple ZeroDivisionErrors\nDESCRIPTION: A test case demonstrating Exception Group handling in Python with three nested function calls leading to ZeroDivisionError exceptions. The code shows error propagation through functions a(), b(), and c() with division by zero operations.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/grouped_simple.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef a():\n    x = 1\n    y = 0\n    x / y\n\ndef b():\n    a()\n\ndef c(f):\n    f()\n\ndef main():\n    error_1 = None\n    try:\n        c(b)\n    except Exception as e:\n        error_1 = e\n\n    error_2 = None\n    try:\n        c(a)\n    except Exception as e:\n        error_2 = e\n\n    error_3 = None\n    try:\n        a()\n    except Exception as e:\n        error_3 = e\n\n    raise ExceptionGroup(\"group\", [error_1, error_2, error_3]) from None\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Head Recursion Function 'b' Error Trace\nDESCRIPTION: Traceback showing recursive function 'b' calling itself with decremented input until reaching zero, causing a division by zero error. Similar to function 'a', it attempts division after recursion.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/head_recursion.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    b(n - 1)\n    1 / n\n```\n\n----------------------------------------\n\nTITLE: Python F-String Exception Example with Loguru Formatted Traceback\nDESCRIPTION: This code snippet shows a Python error traceback produced by Loguru with enhanced formatting. The error stems from a zero division occurring in f-string expressions, with the traceback showing the call path from the main module through the hello() and world() functions.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/f_string.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhello()\n# Function call that triggers the exception\n```\n\nLANGUAGE: python\nCODE:\n```\noutput = f\"Hello\" + f' ' + f\"\"\"World\"\"\" and world()\n# String concatenation with f-strings and a function call\n```\n\nLANGUAGE: python\nCODE:\n```\nf\"{name} -> { f }\" and {} or f'{{ { f / 0} }}'\n# F-string with a zero division error\n```\n\n----------------------------------------\n\nTITLE: Python Function with Positional-Only Arguments Causing ZeroDivisionError\nDESCRIPTION: This code snippet demonstrates a Python function that uses positional-only parameters (with the '/' syntax) that ultimately triggers a ZeroDivisionError. The function accepts positional-only arguments, regular positional arguments, keyword-only arguments, and captures arbitrary keyword arguments.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/positional_only_argument.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef foo(a, /, b, *, c, **d): 1 / 0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Function Call Exception in Python\nDESCRIPTION: This code snippet shows a traceback for a ZeroDivisionError occurring in a nested function call. The error originates from dividing by zero in the 'nested' function, which is called by function 'a'.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/backtrace/nested.py\", line 17, in <module>\n    a(0)\n> File \"tests/exceptions/source/backtrace/nested.py\", line 14, in a\n    nested(x)\n  File \"tests/exceptions/source/backtrace/nested.py\", line 12, in nested\n    1 / i\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Type Hints in Python\nDESCRIPTION: This snippet shows the definition of a function 'foo' using type hints, including Union types and a string literal type. The function causes a ZeroDivisionError.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/type_hints.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef foo(a: int, b: Union[Name, float], c: \"Name\") -> T: 1 / 0\n```\n\n----------------------------------------\n\nTITLE: Raising ValueError in Bar.__repr__ (Python)\nDESCRIPTION: This snippet demonstrates a traceback for a ValueError raised in the __repr__ method of a Bar object. Similar to the Foo object, the exception occurs when trying to obtain the string representation of the object.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/broken_but_decorated_repr.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n\n  File \"tests/exceptions/source/others/broken_but_decorated_repr.py\", line 31, in <module>\n    repr(bar)\n         └ <unprintable Bar object>\n\n> File \"tests/exceptions/source/others/broken_but_decorated_repr.py\", line 18, in __repr__\n    raise ValueError(\"Something went wrong (Bar)\")\n\nValueError: Something went wrong (Bar)\n```\n\n----------------------------------------\n\nTITLE: Python Nested Function Call Error Traceback - Case 1\nDESCRIPTION: Error traceback showing a ZeroDivisionError propagating through nested function calls starting with a(0), going through f(x), and failing at division by zero.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested_wrapping.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/nested_wrapping.py\", line 19, in <module>\n    a(0)\n  File \"tests/exceptions/source/backtrace/nested_wrapping.py\", line 16, in a\n    f(x)\n  File \"tests/exceptions/source/backtrace/nested_wrapping.py\", line 10, in f\n    1 / i\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Python ZeroDivisionError Traceback Example\nDESCRIPTION: Python error traceback showing a zero division error occurring in a function call chain. The error originates from a division operation in function c() where the denominator is zero.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/catch_as_decorator_without_parentheses.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/others/catch_as_decorator_without_parentheses.py\", line 14, in <module>\n    c(2)\n  File \"tests/exceptions/source/others/catch_as_decorator_without_parentheses.py\", line 11, in c\n    a / b\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Git Branch Creation Commands\nDESCRIPTION: Series of Git commands for creating and switching to a new feature branch.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CONTRIBUTING.rst#2025-04-05_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit branch fix_bug\ngit checkout fix_bug\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ZeroDivisionError in Python\nDESCRIPTION: This code snippet shows a traceback for a ZeroDivisionError occurring when attempting to divide by zero within a function. The error originates from line 10 of the 'catch_as_function.py' file and is propagated to the main module.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/catch_as_function.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/others/catch_as_function.py\", line 14, in <module>\n    a()\n  File \"tests/exceptions/source/others/catch_as_function.py\", line 10, in a\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment\nDESCRIPTION: Commands for creating and activating a Python virtual environment for Loguru development.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CONTRIBUTING.rst#2025-04-05_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Python Direct Function Call Error Traceback - Case 2\nDESCRIPTION: Error traceback showing a ZeroDivisionError from directly calling f(0), failing at division by zero operation.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested_wrapping.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/nested_wrapping.py\", line 24, in <module>\n    f(0)\n  File \"tests/exceptions/source/backtrace/nested_wrapping.py\", line 10, in f\n    1 / i\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Python Division by Zero Exception\nDESCRIPTION: Example showing two occurrences of a ZeroDivisionError exception with full tracebacks. The error occurs in function 'a()' when attempting to divide by zero.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/catch_message.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef a():\n    1 / 0\n\n# First error occurrence\na()\n\n# Second error occurrence\na()\n```\n\n----------------------------------------\n\nTITLE: Installing Loguru Version Check\nDESCRIPTION: Code snippet showing how to check the installed version of Loguru using Python.\nSOURCE: https://github.com/Delgan/loguru/blob/master/CONTRIBUTING.rst#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(loguru.__version__)\n```\n\n----------------------------------------\n\nTITLE: Loguru Enhanced Traceback Format\nDESCRIPTION: Demonstrates Loguru's enhanced traceback format with variable value annotations. Shows detailed information about the generator object and variable values at the time of the exception.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/exception_formatting_generator.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n\n  File \"tests/exceptions/source/others/exception_formatting_generator.py\", line 20, in <module>\n    next(f)\n         └ <generator object foo at 0xDEADBEEF>\n\n  File \"tests/exceptions/source/others/exception_formatting_generator.py\", line 14, in foo\n    yield a / b\n          │   └ 0\n          └ 1\n\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Including Changelog using reStructuredText directive\nDESCRIPTION: This snippet uses the reStructuredText 'include' directive to import the CHANGELOG.rst file from the parent directory structure.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/project/changelog.rst#2025-04-05_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Python Nested Function Call Exception\nDESCRIPTION: Demonstrates a ZeroDivisionError occurring in nested function calls. The error originates in the bar() function, which is called by foo(), which is called from the main module. The traceback shows the complete call stack leading to the error.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested_explicit_catch_up.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n  File \"tests/exceptions/source/backtrace/nested_explicit_catch_up.py\", line 20, in <module>\n    foo()\n  File \"tests/exceptions/source/backtrace/nested_explicit_catch_up.py\", line 11, in foo\n    bar()\n  File \"tests/exceptions/source/backtrace/nested_explicit_catch_up.py\", line 16, in bar\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Division by Zero Error in Python\nDESCRIPTION: Code snippet showing a division by zero error that occurred in a function named 'a' on line 17 of the handler_formatting_with_context_manager.py file.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/handler_formatting_with_context_manager.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n1 / 0\n```\n\n----------------------------------------\n\nTITLE: Including README Content in Sphinx Documentation with reStructuredText\nDESCRIPTION: Uses Sphinx directives to include the README.md file content in the documentation using the myst_parser.sphinx_ parser. The include directive is configured to stop at the '<!-- end-of-readme-intro -->' marker.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/index.rst#2025-04-05_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../README.md\n   :parser: myst_parser.sphinx_\n   :end-before: <!-- end-of-readme-intro -->\n```\n\n----------------------------------------\n\nTITLE: Python Error Traceback with ZeroDivisionError\nDESCRIPTION: Traceback showing a runtime error where a division by zero operation was attempted. The error originates in function a() on line 17 and propagates to the module level on line 20.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/handler_formatting_with_decorator.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n__main__ handler_formatting_with_decorator.py <module> 20\nTraceback (most recent call last):\n  File \"tests/exceptions/source/others/handler_formatting_with_decorator.py\", line 20, in <module>\n    a()\n  File \"tests/exceptions/source/others/handler_formatting_with_decorator.py\", line 17, in a\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents with reStructuredText\nDESCRIPTION: Defines a table of contents using Sphinx's toctree directive. The directive is configured to include hidden documents and set a maximum depth of 2 levels, listing four documentation files to include.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/index.rst#2025-04-05_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :includehidden:\n   :maxdepth: 2\n\n   overview.rst\n   api.rst\n   resources.rst\n   project.rst\n```\n\n----------------------------------------\n\nTITLE: ZeroDivisionError in Python Property Accessor\nDESCRIPTION: A traceback showing a division by zero error occurring when accessing a property called 'value' on an object of class A. The traceback includes visualization of the objects involved in the error chain.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/exception_in_property.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvalue = a.value\n        │ └ <property object at 0xDEADBEEF>\n        └ <__main__.A object at 0xDEADBEEF>\n```\n\n----------------------------------------\n\nTITLE: Zero Division Error Example with Loguru Level 13\nDESCRIPTION: Example showing a division by zero error being logged by Loguru at level 13. The error occurs in a file named 'level_number.py' and demonstrates Loguru's exception formatting capabilities.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/level_number.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n1 / 0\n```\n\n----------------------------------------\n\nTITLE: Python Exception Traceback with Loguru Formatting\nDESCRIPTION: This example shows Loguru's enhanced traceback format for a TypeError exception. It demonstrates how Loguru adds color-coding, line references, and additional context like variable values to make debugging easier.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/encoding.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndiv()\n\n# In function div:\nreturn _deep(\"天\")\n\n# In function _deep:\nreturn 1 / val  # val = '天'\n```\n\n----------------------------------------\n\nTITLE: Raising ZeroDivisionError in Python\nDESCRIPTION: This code snippet intentionally raises a ZeroDivisionError by attempting to divide 1 by 0. It's part of a function named 'a' in a file used for testing Loguru's exception handling capabilities.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/message_formatting_with_context_manager.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n1 / 0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Loguru's Enhanced Exception Traceback in Python\nDESCRIPTION: This snippet showcases Loguru's capability to produce a rich, colorized exception traceback. It includes detailed information about the error, file locations, and variable states at the time of the exception.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/attributes.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfoo()\n\n# In function foo:\n... + 1 + bar(a).b + a.forbidden + a.nope.a + x.__bool__ or a. b .isdigit() and .3 + ...\n```\n\n----------------------------------------\n\nTITLE: Python Exception Traceback with Loguru\nDESCRIPTION: Shows a debug level (10) log output containing a ZeroDivisionError traceback from a division by zero operation. The error occurs in the file 'tests/exceptions/source/others/level_name.py' at line 13 in function 'a'.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/level_name.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDEBUG | 10\nTraceback (most recent call last):\n  File \"tests/exceptions/source/others/level_name.py\", line 13, in a\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Exceptions with Re-raising in Python\nDESCRIPTION: Demonstrates a chain of function calls (baz->bar->foo) where a ZeroDivisionError occurs and is re-raised as ValueError. Shows both standard Python traceback and enhanced debugging with variable values.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/nested_with_reraise.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef foo(a, b):\n    a / b\n\ndef bar(x, y):\n    try:\n        f = foo(x, y)\n    except Exception as e:\n        raise ValueError from e\n\ndef baz():\n    bar(1, 0)\n\nbaz()\n```\n\n----------------------------------------\n\nTITLE: Generating Complex Exception Traceback in Python with Loguru\nDESCRIPTION: This code snippet demonstrates a series of nested function calls that ultimately lead to a ZeroDivisionError. It showcases Loguru's advanced exception handling and traceback formatting capabilities, including colorized output and detailed variable inspection.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/parenthesis.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ne()\n\ndef e():\n    ) + d(()) + a\n\ndef d():\n    ; z = (x * y); y = (j or xyz.val * c() \\\n\ndef c():\n    x.val += 456 and b()\n\ndef b():\n    foo[(\"baz\")] = bar() + (a(5, baz))\n\ndef a(a, b):\n    (a, b, x.val,) = 12, 15 / c, 17\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Function with Nested Loops in Python\nDESCRIPTION: This snippet defines a recursive function 'recursive' that takes two parameters 'outer' and 'inner'. It calls itself with decremented values until a base case is reached, then raises a ValueError. The function is called with initial values of 10 for both parameters.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/repeated_lines.txt#2025-04-05_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef recursive(outer, inner):\n    if outer <= 0:\n        raise ValueError(\"End of recursion\")\n    recursive(outer=outer - 1, inner=outer - 1)\n    recursive(outer=outer, inner=inner - 1)\n\nrecursive(10, 10)\n```\n\n----------------------------------------\n\nTITLE: Python Exception Traceback with Keyword Arguments\nDESCRIPTION: Example showing a ZeroDivisionError traceback with highlighted variable values. The error occurs when attempting division by zero using keyword arguments in function calls.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/keyword_argument.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nf(x=y)\n│   └ 0\n└ <function f at 0xDEADBEEF>\n\nreturn 1 / x\n           └ 0\n```\n\nLANGUAGE: python\nCODE:\n```\nf(x=x)\n│   └ 0\n└ <function f at 0xDEADBEEF>\n\nreturn 1 / x\n           └ 0\n```\n\n----------------------------------------\n\nTITLE: Raising ValueError in Foo.__repr__ (Python)\nDESCRIPTION: This snippet shows a traceback for a ValueError raised in the __repr__ method of a Foo object. The exception occurs when attempting to get the string representation of the object.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/broken_but_decorated_repr.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n\n> File \"tests/exceptions/source/others/broken_but_decorated_repr.py\", line 25, in <module>\n    repr(foo)\n         └ <unprintable Foo object>\n\n  File \"tests/exceptions/source/others/broken_but_decorated_repr.py\", line 12, in __repr__\n    raise ValueError(\"Something went wrong (Foo)\")\n\nValueError: Something went wrong (Foo)\n```\n\n----------------------------------------\n\nTITLE: Enhanced Python Traceback for ZeroDivisionError\nDESCRIPTION: This snippet presents an enhanced Python traceback for the same ZeroDivisionError. It includes additional details such as function objects and variable values, along with visual formatting using ASCII characters for improved readability.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/sys_tracebacklimit.txt#2025-04-05_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nTraceback (most recent call last):\n\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 33, in f\n    g()\n    └ <function g at 0xDEADBEEF>\n\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 37, in g\n    h()\n    └ <function h at 0xDEADBEEF>\n\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 41, in h\n    i()\n    └ <function i at 0xDEADBEEF>\n\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 45, in i\n    j(1, 0)\n    └ <function j at 0xDEADBEEF>\n\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 49, in j\n    a / b\n    │   └ 0\n    └ 1\n\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Nested Python Function Calls Leading to ZeroDivisionError\nDESCRIPTION: A series of nested function calls (e → d → c → b → a) that ultimately results in a ZeroDivisionError. Each function contains various Python syntax elements that are highlighted in the traceback output, demonstrating Loguru's syntax highlighting capabilities for exception diagnostics.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/syntax_highlighting.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ne(0)\n\n# Function e definition\nx in [1], x in (1,), x in {1}, x in {1: 1}, d()\n\n# Function d definition\nmin(range(1, 10)), list(), dict(), c(), ...\n\n# Function c definition\n1, 2.5, 3.0, 0.4, \"str\", r\"rrr\", rb\"binary\", b()\n\n# Function b definition\na() or False == None != True\n\n# Function a definition\n1 / 0 + 1 * 0 - 1 % 0 // 1**0 @ 1  # Error\n```\n\n----------------------------------------\n\nTITLE: ANSI-Colored Error Message Output\nDESCRIPTION: Terminal output showing a ZeroDivisionError message formatted with ANSI escape sequences for red color ([31m) and bold text ([1m). The message is repeated four times with reset codes ([0m) to return to default formatting.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/zerodivisionerror_without_traceback.txt#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[31m[1mZeroDivisionError[0m:[1m division by zero[0m\n```\n\n----------------------------------------\n\nTITLE: Python Exception Traceback with Color Formatting\nDESCRIPTION: A formatted exception traceback showing three levels of chained exceptions involving division by zero and value errors. The traceback includes color formatting escape codes and detailed function call information.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/chained_both.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n\nFile \"tests/exceptions/source/diagnose/chained_both.py\", line 15, in cause\n    div(x, y)\n    │   │  └ 0\n    │   └ 1\n    └ <function div at 0xDEADBEEF>\n\nFile \"tests/exceptions/source/diagnose/chained_both.py\", line 10, in div\n    x / y\n    │   └ 0\n    └ 1\n\nZeroDivisionError: division by zero\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n\nFile \"tests/exceptions/source/diagnose/chained_both.py\", line 22, in context\n    cause(x, y)\n    │     │  └ 0\n    │     └ 1\n    └ <function cause at 0xDEADBEEF>\n\nFile \"tests/exceptions/source/diagnose/chained_both.py\", line 17, in cause\n    raise ValueError(\"Division error\")\n\nValueError: Division error\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n\nFile \"tests/exceptions/source/diagnose/chained_both.py\", line 28, in <module>\n    context(1, 0)\n    └ <function context at 0xDEADBEEF>\n\nFile \"tests/exceptions/source/diagnose/chained_both.py\", line 24, in context\n    raise ValueError(\"Cause error\") from e\n\nValueError: Cause error\n```\n\n----------------------------------------\n\nTITLE: Python ZeroDivisionError Traceback via Explicit Function Call\nDESCRIPTION: Exception traceback showing a ZeroDivisionError propagating through an explicit function call chain. The error originates in function 'c', propagates through 'b_not_decorated', 'a_explicit' to the module level.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/chaining_second.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/backtrace/chaining_second.py\", line 40, in <module>\n    a_explicit()\n> File \"tests/exceptions/source/backtrace/chaining_second.py\", line 20, in a_explicit\n    b_not_decorated()\n  File \"tests/exceptions/source/backtrace/chaining_second.py\", line 31, in b_not_decorated\n    c()\n  File \"tests/exceptions/source/backtrace/chaining_second.py\", line 35, in c\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Python Assertion Error without Diagnostics\nDESCRIPTION: Example of an assertion error traceback with colorization and backtrace but without diagnostic information. Shows basic error information without variable values.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/assertion_from_local.txt#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/ownership/assertion_from_local.py\", line 22, in <module>\n    test(backtrace=True, colorize=True, diagnose=False)\n> File \"tests/exceptions/source/ownership/assertion_from_local.py\", line 15, in test\n    assert a == b\nAssertionError\n```\n\n----------------------------------------\n\nTITLE: Executing Invalid Python Code with Syntax Error\nDESCRIPTION: Example of executing a code string that contains a syntax error, where a multiplication operator (*) is used without a second operand.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/syntax_error.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\nif True:\n    a = 5\n    b = 7 *\n\n```\n\n----------------------------------------\n\nTITLE: Python Plain Assertion Error\nDESCRIPTION: Basic unformatted assertion error traceback without any Loguru enhancements, showing the default Python traceback format.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/assertion_from_local.txt#2025-04-05_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/ownership/assertion_from_local.py\", line 15, in test\n    assert a == b\nAssertionError\n```\n\n----------------------------------------\n\nTITLE: Executing Python Code with Indentation Error\nDESCRIPTION: This snippet demonstrates executing a string of Python code that contains an intentional indentation error. The code is executed using the exec() function, which raises an IndentationError due to unexpected indentation.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/indentation_error.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexec(code)\n```\n\nLANGUAGE: python\nCODE:\n```\n\nif True:\n    a = 5\n        print(\"foobar\")  #intentional faulty indentation here.\n    b = 7\n\n```\n\n----------------------------------------\n\nTITLE: Raising ZeroDivisionError in Python Function 'b'\nDESCRIPTION: This snippet demonstrates another function 'b()' that raises a ZeroDivisionError by attempting to divide 2 by 0. The traceback shows the error occurs on line 15 of the file.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/function.txt#2025-04-05_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef b():\n    2 / 0\n```\n\n----------------------------------------\n\nTITLE: Python ZeroDivisionError Traceback\nDESCRIPTION: Demonstrates a chain of function calls leading to a division by zero error. The trace shows the error propagating through multiple function calls including test(), callme(), callback(), and divide().\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/callback.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test(backtrace=True, colorize=True, diagnose=True):\n    def callback():\n        divide(1, 0)\n    callme(callback)\n\ntest(backtrace=True, colorize=True, diagnose=True)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef divide(x, y):\n    x / y\n\ndef callme(callback):\n    callback()\n```\n\n----------------------------------------\n\nTITLE: Python Division by Zero Error Example 1\nDESCRIPTION: Function bug_1 demonstrating a division by zero error in a string context\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/source_multilines.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbug_1(10)\n# Error occurs at: \"\" + n / 0\n```\n\n----------------------------------------\n\nTITLE: Python Division Function Call with ZeroDivisionError\nDESCRIPTION: A Python code snippet showing the callback function calling the divide function with arguments that will cause a division by zero error.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/catch_decorator_from_lib.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndivide(1, 0)\n```\n\n----------------------------------------\n\nTITLE: Python Division by Zero Error Example 3\nDESCRIPTION: Function bug_3 demonstrating a division by zero error with string parameter\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/source_multilines.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbug_3(string)\n, string, 20 / 0)\n```\n\n----------------------------------------\n\nTITLE: Generating ZeroDivisionError in Python with Loguru\nDESCRIPTION: This code snippet shows a Python traceback generated by Loguru when a ZeroDivisionError occurs. It demonstrates how Loguru formats and displays exception information.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/enqueue_with_others_handlers.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/enqueue_with_others_handlers.py\", line 26, in <module>\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Python Division Implementation in Library\nDESCRIPTION: The implementation of the divide function in the external library that performs division operation and raises a ZeroDivisionError when the second argument is zero.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/catch_decorator_from_lib.txt#2025-04-05_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx / y\n```\n\n----------------------------------------\n\nTITLE: Python ZeroDivisionError Traceback via Decorator Pattern\nDESCRIPTION: Exception traceback showing a ZeroDivisionError propagating through a decorated function call chain. The error originates in function 'c' with a division by zero and propagates up through 'b_decorated', 'a_decorator' to the module level.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/chaining_second.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/backtrace/chaining_second.py\", line 38, in <module>\n    a_decorator()\n> File \"tests/exceptions/source/backtrace/chaining_second.py\", line 10, in a_decorator\n    b_decorated()\n  File \"tests/exceptions/source/backtrace/chaining_second.py\", line 27, in b_decorated\n    c()\n  File \"tests/exceptions/source/backtrace/chaining_second.py\", line 35, in c\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Python Library Callback Implementation\nDESCRIPTION: Shows the implementation of a callback function in a Python library that executes a provided callback function, which leads to the exception.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/decorated_callback.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef callme(callback):\n    callback()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Python Exception Traceback with Nested Function Calls\nDESCRIPTION: This traceback shows a ZeroDivisionError occurring in a nested function call structure. The error originates in the 'bar' function, which is called by 'foo', which is in turn called by the main module.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested_decorator_catch_up.txt#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/backtrace/nested_decorator_catch_up.py\", line 20, in <module>\n    foo()\n  File \"tests/exceptions/source/backtrace/nested_decorator_catch_up.py\", line 12, in foo\n    bar()\n  File \"tests/exceptions/source/backtrace/nested_decorator_catch_up.py\", line 17, in bar\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Python Function Causing ZeroDivisionError\nDESCRIPTION: This code snippet shows the implementation of functions 'test' and 'foo', where 'foo' calls a 'divide' function that results in a ZeroDivisionError. This is used to demonstrate Loguru's exception handling capabilities.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/catch_decorator.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test(backtrace, colorize, diagnose):\n    def foo():\n        divide(1, 0)\n    foo()\n```\n\n----------------------------------------\n\nTITLE: Division Function Causing ZeroDivisionError in Python\nDESCRIPTION: This code snippet represents a division function that raises a ZeroDivisionError when attempting to divide by zero. It's part of the exception demonstration in the Loguru traceback examples.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/direct.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx / y\n```\n\n----------------------------------------\n\nTITLE: Detailed Python Exception Traceback with Line Highlighting\nDESCRIPTION: This traceback provides a more detailed view of the same ZeroDivisionError, with the addition of a '>' symbol highlighting the initial call in the main module. It shows the same nested function call structure leading to the error.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested_decorator_catch_up.txt#2025-04-05_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/nested_decorator_catch_up.py\", line 20, in <module>\n    foo()\n  File \"tests/exceptions/source/backtrace/nested_decorator_catch_up.py\", line 12, in foo\n    bar()\n  File \"tests/exceptions/source/backtrace/nested_decorator_catch_up.py\", line 17, in bar\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Division Operation Causing ZeroDivisionError in Python\nDESCRIPTION: This code shows the actual division operation that causes the ZeroDivisionError. It's extracted from the traceback and demonstrates the line where the exception occurs.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/indirect.txt#2025-04-05_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nx / y\n```\n\n----------------------------------------\n\nTITLE: Python Error Chaining with Function Calls\nDESCRIPTION: A sequence of function calls (a -> b -> c) where a division by zero error occurs in function 'a', is caught in function 'b', and then raised as a ValueError. The traceback shows both decorated and non-decorated function call paths.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/suppressed_expression_indirect.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef a(x, y):\n    x / y\n\ndef b():\n    try:\n        a(1, 0)\n    except Exception as e:\n        raise ValueError(\"NOK\") from e\n\n@decorator\ndef c_decorated():\n    b()\n\ndef c_not_decorated():\n    b()\n```\n\n----------------------------------------\n\nTITLE: Executing Test Function with Different Loguru Settings in Python\nDESCRIPTION: This snippet shows another execution of the 'test' function with different Loguru settings. It demonstrates how changing the 'diagnose' parameter affects the traceback output.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/indirect.txt#2025-04-05_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=False)\n```\n\n----------------------------------------\n\nTITLE: Executing Division by Zero in Python with Loguru Error Handling\nDESCRIPTION: This snippet shows a function call that triggers a ZeroDivisionError. It demonstrates Loguru's ability to format tracebacks with different options like backtrace, colorize, and diagnose.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/string_lib.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nexecute()\n```\n\nLANGUAGE: python\nCODE:\n```\nexec(\"divide(1, 0)\")\n```\n\nLANGUAGE: python\nCODE:\n```\nx / y\n```\n\n----------------------------------------\n\nTITLE: Showcasing a Third Nested Function Call Exception in Python\nDESCRIPTION: This traceback presents a third example of a ZeroDivisionError occurring in a nested function call. The error is triggered by dividing by zero in the 'nested' function, which is called by function 'c'.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested.txt#2025-04-05_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/backtrace/nested.py\", line 41, in <module>\n    c(0)\n> File \"tests/exceptions/source/backtrace/nested.py\", line 36, in c\n    nested(x)\n  File \"tests/exceptions/source/backtrace/nested.py\", line 33, in nested\n    1 / i\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Executing Code with Syntax Error in Python\nDESCRIPTION: This code executes a string with invalid Python syntax that causes a SyntaxError. The code attempts to assign a value to 'foo' but is missing the value after the equals sign.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/syntaxerror.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexec(\"foo =\")\n```\n\n----------------------------------------\n\nTITLE: Raising ZeroDivisionError in Python Function 'c'\nDESCRIPTION: This snippet shows a third function 'c()' that raises a ZeroDivisionError by attempting to divide 3 by 0. The traceback indicates the error occurs on line 19 of the file.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/function.txt#2025-04-05_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef c():\n    3 / 0\n```\n\n----------------------------------------\n\nTITLE: Python Library Function with Callback Execution\nDESCRIPTION: The implementation of the callme function in the external library that executes the provided callback function, which in this case leads to the ZeroDivisionError.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/catch_decorator_from_lib.txt#2025-04-05_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncallback()\n```\n\n----------------------------------------\n\nTITLE: Python Function Call Causing SyntaxError\nDESCRIPTION: This code shows the function call that triggers the SyntaxError. The 'syntaxerror()' function is called within a test function, leading to the exception being raised.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/syntaxerror.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsyntaxerror()\n```\n\n----------------------------------------\n\nTITLE: Recursive Function Chain Leading to ZeroDivisionError in Python\nDESCRIPTION: A sequence of recursive function calls that ultimately causes a division by zero exception. The traceback shows the call stack with 'c' calling 'b', then 'b' calling 'a', and finally 'a' attempting to divide by zero when the parameter 'n' reaches zero.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/frame_values_forward.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nc(k)  # From line 24\n```\n\nLANGUAGE: python\nCODE:\n```\nb(n - 1)  # From line 21\n```\n\nLANGUAGE: python\nCODE:\n```\na(n - 1)  # From line 16\n```\n\nLANGUAGE: python\nCODE:\n```\n1 / n  # From line 12, causes ZeroDivisionError when n == 0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Exception Chaining with Decorated and Non-Decorated Functions in Python\nDESCRIPTION: This code snippet shows the structure of a Python script that includes decorated and non-decorated functions, ultimately leading to a ZeroDivisionError. It demonstrates how exceptions propagate through function calls and how tracebacks are generated.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/chaining_first.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef a_decorated():\n    b()\n\ndef a_not_decorated():\n    b()\n\ndef b():\n    c()\n\ndef c():\n    1 / 0\n\na_decorated()\na_not_decorated()\na_not_decorated()\n```\n\n----------------------------------------\n\nTITLE: Recursive Function Error Demonstration in Python\nDESCRIPTION: Examples of recursive function calls that result in ZeroDivisionError exceptions. The code demonstrates three different recursive functions (a, b, c) called with different initial values (1, 2, 3), showing how the stack trace builds up during recursion before the final division by zero error.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/raising_recursion.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef a(n):\n    a(n - 1)\n    n / 0\n\ndef b(n):\n    b(n - 1)\n    n / 0\n\ndef c(n):\n    c(n - 1)\n    n / 0\n\na(1)\na(2)\na(3)\nb(1)\nb(2)\nb(3)\nc(1)\nc(2)\nc(3)\n```\n\n----------------------------------------\n\nTITLE: Python Division by Zero Error Example 4\nDESCRIPTION: Function bug_4 showing a division by zero error in a dictionary context\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/source_multilines.txt#2025-04-05_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbug_4()\n\"bar\": a / b,\n```\n\n----------------------------------------\n\nTITLE: Python ZeroDivisionError Traceback via Context Manager Pattern\nDESCRIPTION: Exception traceback showing a ZeroDivisionError propagating through a context manager call chain. The error originates in function 'c', propagates through 'b_not_decorated', 'a_context_manager' to the module level.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/chaining_second.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/backtrace/chaining_second.py\", line 39, in <module>\n    a_context_manager()\n> File \"tests/exceptions/source/backtrace/chaining_second.py\", line 15, in a_context_manager\n    b_not_decorated()\n  File \"tests/exceptions/source/backtrace/chaining_second.py\", line 31, in b_not_decorated\n    c()\n  File \"tests/exceptions/source/backtrace/chaining_second.py\", line 35, in c\n    1 / 0\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Head Recursion Function 'c' Error Trace\nDESCRIPTION: Traceback showing recursive function 'c' calling itself with decremented input until reaching zero, causing a division by zero error. Functions similarly to 'a' and 'b' with recursive descent followed by division.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/head_recursion.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    c(n - 1)\n    1 / n\n```\n\n----------------------------------------\n\nTITLE: Python Zero Division Error Example\nDESCRIPTION: A simple Python code snippet that triggers a ZeroDivisionError by attempting to divide by zero. Located in tests/exceptions/source/backtrace/enqueue.py on line 9.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/enqueue.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n1 / 0\n```\n\n----------------------------------------\n\nTITLE: Zero Division Error in Recursive Functions (Python)\nDESCRIPTION: Error tracebacks from recursive functions that attempt to divide by zero. The file shows test cases for three similar recursive functions (a, b, c) that each perform division by the parameter n and then recursively call themselves with n-1, eventually causing zero division errors when n reaches 0.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/tail_recursion.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Inferred source code from traceback:\n\ndef a(n):\n    1 / n\n    a(n - 1)\n\n\ndef b(n):\n    1 / n\n    b(n - 1)\n\n\ndef c(n):\n    1 / n\n    c(n - 1)\n\n\n# Main calls that trigger the tracebacks\na(1)\na(2)\na(3)\n\nb(1)\nb(2)\nb(3)\n\nc(1)\nc(2)\nc(3)\n```\n\n----------------------------------------\n\nTITLE: Type Checking Output from mypy\nDESCRIPTION: Output from running mypy on the above code, showing how the type checker identifies the error in the bad_filter function, where an invalid key is accessed in the Record dictionary.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/api/type_hints.rst#2025-04-05_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ mypy test.py\ntest.py:8: error: TypedDict \"Record\" has no key 'invalid'\nFound 1 error in 1 file (checked 1 source file)\n```\n\n----------------------------------------\n\nTITLE: Raising ZeroDivisionError in Python Function\nDESCRIPTION: This snippet shows a function 'a()' that raises a ZeroDivisionError by attempting to divide 1 by 0. The traceback indicates the error occurs on line 11 of the file.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/function.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef a():\n    1 / 0\n```\n\n----------------------------------------\n\nTITLE: Python Traceback for Missing Arguments in Undecorated Function Call #2\nDESCRIPTION: Error traceback showing a TypeError when a non-decorated function is called with insufficient arguments. The function requires three positional arguments but only one argument with value 3 is provided.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/not_enough_arguments.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/not_enough_arguments.py\", line 24, in <module>\n    not_decorated(3)\nTypeError: not_decorated() missing 2 required positional arguments: 'y' and 'z'\n```\n\n----------------------------------------\n\nTITLE: Illustrating Another Nested Function Call Exception in Python\nDESCRIPTION: This traceback demonstrates another instance of a ZeroDivisionError in a nested function call. The error occurs when dividing by zero in the 'nested' function, which is called by function 'b'.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested.txt#2025-04-05_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/backtrace/nested.py\", line 28, in <module>\n    b(0)\n> File \"tests/exceptions/source/backtrace/nested.py\", line 25, in b\n    nested(x)\n  File \"tests/exceptions/source/backtrace/nested.py\", line 22, in nested\n    1 / i\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: TypeError Traceback - Undecorated Function First Call\nDESCRIPTION: Error traceback showing TypeError when calling an undecorated function with two arguments when it accepts none.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/too_many_arguments.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/too_many_arguments.py\", line 21, in <module>\n    not_decorated(2)\nTypeError: not_decorated() takes 0 positional arguments but 1 was given\n```\n\n----------------------------------------\n\nTITLE: Pytest Stream Capture Example with Loguru\nDESCRIPTION: Shows how using Pytest's capsys fixture can lead to stream handling errors with Loguru.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom loguru import logger\n\nlogger.remove()\n\ndef test_1(capsys):\n    # Here, \"sys.stderr\" is actually a mock object due to usage of \"capsys\" fixture.\n    logger.add(sys.stderr, catch=False)\n    logger.info(\"Test 1\")\n\n\ndef test_2():\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Chained Exceptions in Python\nDESCRIPTION: This code snippet shows a main function calling nested functions foo and bar, where a ZeroDivisionError is raised, caught, and then re-raised. It demonstrates Python's exception chaining mechanism.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested_chained_catch_up.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    try:\n        foo()\n    except ZeroDivisionError as e:\n        raise ZeroDivisionError from e\n\ndef foo():\n    bar()\n\ndef bar():\n    1 / 0\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: TypeError Traceback - Undecorated Function Second Call\nDESCRIPTION: Error traceback showing TypeError when calling an undecorated function with three arguments when it accepts none.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/too_many_arguments.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/too_many_arguments.py\", line 24, in <module>\n    not_decorated(3)\nTypeError: not_decorated() takes 0 positional arguments but 1 was given\n```\n\n----------------------------------------\n\nTITLE: Python Direct Function Call Error Traceback - Case 3\nDESCRIPTION: Another error traceback showing a ZeroDivisionError from directly calling f(0), failing at division by zero operation.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/nested_wrapping.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/nested_wrapping.py\", line 29, in <module>\n    f(0)\n  File \"tests/exceptions/source/backtrace/nested_wrapping.py\", line 10, in f\n    1 / i\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Generating ZeroDivisionError Traceback in Python\nDESCRIPTION: This code snippet shows a Python traceback for a ZeroDivisionError. It demonstrates nested function calls leading to a division by zero, which is a common scenario for testing exception handling and logging frameworks like Loguru.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/missing_attributes_traceback_objects.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/missing_attributes_traceback_objects.py\", line 38, in <module>\n    foo()\n  File \"tests/exceptions/source/backtrace/missing_attributes_traceback_objects.py\", line 18, in foo\n    div(a, b)\n  File \"tests/exceptions/source/backtrace/missing_attributes_traceback_objects.py\", line 14, in div\n    x / y\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Runtime Type Checking for Loguru Logger (Python)\nDESCRIPTION: Shows how to perform runtime type checking for the Loguru logger by comparing with the type of the logger instance.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources/troubleshooting.rst#2025-04-05_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport loguru\nimport logging\n\ndef my_function(logger: loguru.Logger | logging.Logger):\n    if isinstance(logger, type(loguru.logger)):\n        logger.info(\"Hello, {}!\", \"World\")\n    else:\n        logger.info(\"Hello, %s!\", \"World\")\n```\n\n----------------------------------------\n\nTITLE: Displaying ZeroDivisionError Exception in Python\nDESCRIPTION: A simple Python error message showing a division by zero exception. This is a built-in Python exception that occurs when attempting to divide a number by zero.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/no_tb.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Executing Python Function with Loguru Exception Handling\nDESCRIPTION: This snippet shows a function call that triggers a ZeroDivisionError, demonstrating Loguru's enhanced exception handling and traceback formatting. It includes options for backtrace, colorization, and diagnosis.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/catch_decorator.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=True)\n```\n\n----------------------------------------\n\nTITLE: Python Traceback for Missing Arguments in Decorated Function\nDESCRIPTION: Error traceback showing a TypeError when a decorated function is called with insufficient arguments. The function requires three positional arguments (likely 'x', 'y', and 'z') but only one argument is provided.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/not_enough_arguments.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/not_enough_arguments.py\", line 18, in <module>\n    decorated(1)\nTypeError: decorated() missing 2 required positional arguments: 'y' and 'z'\n```\n\n----------------------------------------\n\nTITLE: Python Division Function Causing ZeroDivisionError\nDESCRIPTION: This snippet shows the implementation of a 'divide' function that performs division. When called with a zero denominator, it raises a ZeroDivisionError, which is then caught and formatted by Loguru.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/catch_decorator.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef divide(x, y):\n    x / y\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Syntax Error in Python Assignment\nDESCRIPTION: This code snippet shows an incomplete Python assignment statement that results in a SyntaxError. The error occurs because the assignment is not completed, leaving the interpreter expecting more input after the equals sign.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/syntaxerror_without_traceback.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfoo =\n```\n\n----------------------------------------\n\nTITLE: Python Traceback for Missing Arguments in Undecorated Function Call #1\nDESCRIPTION: Error traceback showing a TypeError when a non-decorated function is called with insufficient arguments. The function requires three positional arguments but only one argument with value 2 is provided.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/not_enough_arguments.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/not_enough_arguments.py\", line 21, in <module>\n    not_decorated(2)\nTypeError: not_decorated() missing 2 required positional arguments: 'y' and 'z'\n```\n\n----------------------------------------\n\nTITLE: Python Function Call with Error in catch_decorator_from_lib.py\nDESCRIPTION: A Python code snippet showing a test function call with a ZeroDivisionError. The test function accepts parameters for configuring traceback formatting options including backtrace, colorize, and diagnose flags.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/catch_decorator_from_lib.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=True)\n```\n\n----------------------------------------\n\nTITLE: Raising Chained Exceptions in Python\nDESCRIPTION: This snippet shows a function 'a' that raises a ZeroDivisionError, which is then caught and re-raised as a ValueError in functions 'b_decorated' and 'b_not_decorated'. The exceptions are chained using the 'raise ... from' syntax.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/suppressed_expression_direct.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef a(x, y):\n    x / y\n\n@decorator\ndef b_decorated():\n    try:\n        a(1, 0)\n    except ZeroDivisionError as e:\n        raise ValueError(\"NOK\") from e\n\ndef b_not_decorated():\n    try:\n        a(1, 0)\n    except ZeroDivisionError as e:\n        raise ValueError(\"NOK\") from e\n```\n\n----------------------------------------\n\nTITLE: Python Function with Callback Error in catch_decorator_from_lib.py\nDESCRIPTION: A Python code snippet showing the test function implementation that calls a library function with a callback, which eventually leads to a division by zero error.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/catch_decorator_from_lib.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncallme(callback)\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Configuration\nDESCRIPTION: ReStructuredText toctree directive that defines the structure and links for the help documentation section, including migration guides, troubleshooting docs and recipe guides.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/resources.rst#2025-04-05_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   resources/migration.rst\n   resources/troubleshooting.rst\n   resources/recipes.rst\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Decorators and Context Managers in Python\nDESCRIPTION: This snippet demonstrates different ways of handling exceptions using decorators and context managers. It includes functions 'c_decorator', 'c_context_manager', and 'c_explicit', each showing a different approach to exception handling.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/suppressed_expression_direct.txt#2025-04-05_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef c_decorator():\n    b_decorated()\n\ndef c_context_manager():\n    with context_manager():\n        b_not_decorated()\n\ndef c_explicit():\n    b_not_decorated()\n```\n\n----------------------------------------\n\nTITLE: Python Function Call with Different Formatting Options\nDESCRIPTION: Another test function call with different formatting options, specifically setting diagnose to False which produces a simpler traceback format.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/catch_decorator_from_lib.txt#2025-04-05_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=False)\n```\n\n----------------------------------------\n\nTITLE: TypeError Traceback - Decorated Function\nDESCRIPTION: Error traceback showing TypeError when calling a decorated function with one argument when it accepts none.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/backtrace/too_many_arguments.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/backtrace/too_many_arguments.py\", line 18, in <module>\n    decorated(1)\nTypeError: decorated() takes 0 positional arguments but 1 was given\n```\n\n----------------------------------------\n\nTITLE: Executing Division Function with Zero Divisor in Python\nDESCRIPTION: This code snippet shows the execution of a 'test' function that indirectly calls a division operation with a zero divisor, resulting in a ZeroDivisionError. The traceback is formatted and colorized by Loguru.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/indirect.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=True)\n```\n\n----------------------------------------\n\nTITLE: Executing Assertion in Python String\nDESCRIPTION: This code snippet shows a function 'foo' that executes a string containing an assertion. The assertion checks if 'abc' is greater than 10 and 'xyz' equals 60, which leads to an AssertionError.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/assertion_error_in_string.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef foo(abc, xyz):\n    exec(\"assert abc > 10 and xyz == 60\")\n\nfoo(9, 55)\n```\n\n----------------------------------------\n\nTITLE: Executing Division by Zero Test in Python\nDESCRIPTION: Test code that executes a function containing a division by zero error through string execution, with various traceback formatting options including colored output and diagnosis settings.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/string_source.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nexec(\"foo()\")\n```\n\nLANGUAGE: python\nCODE:\n```\n1 / 0\n```\n\n----------------------------------------\n\nTITLE: Python Exception Traceback with Loguru Formatting\nDESCRIPTION: Demonstrates a ZeroDivisionError with enhanced traceback formatting including variable values, line numbers, and color highlighting. Shows how Loguru provides detailed context for debugging.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/global_variable.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[33m[1mTraceback (most recent call last):[0m\n\n  File \"[32mtests/exceptions/source/diagnose/[0m[32m[1mglobal_variable.py[0m\", line [33m19[0m, in [35m<module>[0m\n    [1mfunc[0m[1m([0m[1m)[0m\n    [36m└ [0m[36m[1m<function func at 0xDEADBEEF>[0m\n\n  File \"[32mtests/exceptions/source/diagnose/[0m[32m[1mglobal_variable.py[0m\", line [33m15[0m, in [35mfunc[0m\n    [35m[1mreturn[0m [34m[1m1[0m [35m[1m/[0m [34m[1m0[0m [35m[1m+[0m [1mfoo[0m [35m[1m+[0m [1mbar[0m [35m[1m+[0m [36m[1mFalse[0m\n    [36m               │     └ [0m[36m[1mFalse[0m\n    [36m               └ [0m[36m[1mNone[0m\n\n[31m[1mZeroDivisionError[0m:[1m division by zero[0m\n```\n\n----------------------------------------\n\nTITLE: Python Exception Handling with Decorated Callback\nDESCRIPTION: Demonstrates a Python code structure causing a ZeroDivisionError through a decorated callback function. The code attempts to divide 1 by 0, showing different traceback formats with varying levels of detail and coloring.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/decorated_callback.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test(backtrace=True, colorize=True, diagnose=True):\n    def callback():\n        a = 1\n        b = 0\n        a / b\n    callme(callback)\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Operation in Python\nDESCRIPTION: Code snippet demonstrating an error case where different data types (int, bytes, and strings) are being concatenated incorrectly, resulting in a TypeError. The code attempts to add integers with bytes which is not supported in Python.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/diagnose/source_strings.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\na + b\"prefix\" + 'single' + \"\"\"triple\"\"\" + 1 + b\n```\n\n----------------------------------------\n\nTITLE: Python Assertion Error with Full Diagnostics\nDESCRIPTION: Example of a fully formatted assertion error traceback with colorization, backtrace and diagnostic information showing variable values. The test compares variables a=1 and b=2.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/assertion_from_local.txt#2025-04-05_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTraceback (most recent call last):\n\n  File \"tests/exceptions/source/ownership/assertion_from_local.py\", line 20, in <module>\n    test(backtrace=True, colorize=True, diagnose=True)\n    └ <function test at 0xDEADBEEF>\n\n> File \"tests/exceptions/source/ownership/assertion_from_local.py\", line 15, in test\n    assert a == b\n           │    └ 2\n           └ 1\n\nAssertionError: assert a == b\n```\n\n----------------------------------------\n\nTITLE: Documenting Loguru Logger Module and Class in reStructuredText\nDESCRIPTION: This snippet uses Sphinx directives to automatically generate documentation for the loguru._logger module and its Logger class. It includes all members of the Logger class in the documentation.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/api/logger.rst#2025-04-05_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``loguru.logger``\n=================\n\n.. automodule:: loguru._logger\n\n.. autoclass:: loguru._logger.Logger()\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Calling a Test Function with SyntaxError in Python\nDESCRIPTION: This code shows a call to a test function with different parameter combinations. The function triggers a SyntaxError and demonstrates Loguru's error display capabilities with various formatting options.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/ownership/syntaxerror.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=True)\n```\n\nLANGUAGE: python\nCODE:\n```\ntest(backtrace=True, colorize=True, diagnose=False)\n```\n\n----------------------------------------\n\nTITLE: Including README Content in Sphinx Documentation using reStructuredText\nDESCRIPTION: Directive for including a section of the README.md file into Sphinx documentation. The directive specifies to use myst_parser.sphinx_ for parsing markdown content and limits the inclusion to text between specific comment markers.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/overview.rst#2025-04-05_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: ../README.md\n   :parser: myst_parser.sphinx_\n   :start-after: <!-- end-of-readme-intro -->\n   :end-before: <!-- end-of-readme-usage -->\n```\n\n----------------------------------------\n\nTITLE: Calling Function with Type Hints in Python\nDESCRIPTION: This snippet shows the main function calling 'foo' with arguments and assigning the result to a variable 'bar' with a type hint.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/type_hints.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbar: Name = foo(1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Including Contributing Guidelines Document in RST\nDESCRIPTION: reStructuredText directive to include the CONTRIBUTING.rst file from two directory levels up.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/project/contributing.rst#2025-04-05_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../../CONTRIBUTING.rst\n```\n\n----------------------------------------\n\nTITLE: Python Main Function Calling Foo\nDESCRIPTION: This snippet shows the main function that calls 'foo' and assigns its result to a variable 'walrus' using the walrus operator. The function call leads to the ZeroDivisionError.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/walrus_operator.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(walrus := foo())\n```\n\n----------------------------------------\n\nTITLE: Including License File in ReStructuredText Documentation\nDESCRIPTION: This ReStructuredText snippet includes the contents of the LICENSE file from the project root. It specifies that the included content should be treated as plain text without syntax highlighting.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/project/license.rst#2025-04-05_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. literalinclude:: ../../LICENSE\n    :language: none\n```\n\n----------------------------------------\n\nTITLE: Calling Function with Mixed Argument Types in Python\nDESCRIPTION: This snippet shows how the function with positional-only arguments is called from a main function. It passes values 1 and 2 as positional arguments and 3 as a keyword argument 'c'.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/positional_only_argument.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfoo(1, 2, c=3)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Loguru Documentation\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes links to contributing guidelines, license information, and the project changelog.\nSOURCE: https://github.com/Delgan/loguru/blob/master/docs/project.rst#2025-04-05_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n\n   project/contributing.rst\n   project/license.rst\n   project/changelog.rst\n```\n\n----------------------------------------\n\nTITLE: Main Function Execution in Python\nDESCRIPTION: This snippet shows the main function being called, which in turn calls the foo function with the arguments that will result in a ZeroDivisionError.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/positional_only_argument.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmain()\n```\n\n----------------------------------------\n\nTITLE: Temporary Context Management with Loguru\nDESCRIPTION: Demonstrates using contextualize() for temporary context-local state management\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwith logger.contextualize(task=task_id):\n    do_something()\n    logger.info(\"End of task\")\n```\n\n----------------------------------------\n\nTITLE: Raising ValueError with Single Note\nDESCRIPTION: Demonstrates raising a ValueError with a single note annotation in both standard and colored traceback formats.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/notes.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nraise e  # ValueError: invalid value\n```\n\n----------------------------------------\n\nTITLE: Log Parsing with Loguru\nDESCRIPTION: Shows how to parse log files using Loguru's parse method with regex patterns\nSOURCE: https://github.com/Delgan/loguru/blob/master/README.md#2025-04-05_snippet_20\n\nLANGUAGE: python\nCODE:\n```\npattern = r\"(?P<time>.*) - (?P<level>[0-9]+) - (?P<message>.*)\"  # Regex with named groups\ncaster_dict = dict(time=dateutil.parser.parse, level=int)        # Transform matching groups\n\nfor groups in logger.parse(\"file.log\", pattern, cast=caster_dict):\n    print(\"Parsed:\", groups)\n    # {\"level\": 30, \"message\": \"Log example\", \"time\": datetime(2018, 12, 09, 11, 23, 55)}\n```\n\n----------------------------------------\n\nTITLE: Raising ValueError with Multiple Notes\nDESCRIPTION: Shows ValueError handling with multiple note annotations (Note1, Note2, Note3) in both standard and colored formats.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/notes.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nraise e  # ValueError: invalid value with multiple notes\n```\n\n----------------------------------------\n\nTITLE: Exception Group with Multiple ValueErrors\nDESCRIPTION: Demonstrates use of ExceptionGroup to group multiple ValueError exceptions with notes.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/notes.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nraise e  # ExceptionGroup with ValueError(1) and ValueError(2)\n```\n\n----------------------------------------\n\nTITLE: TabError Exception Handling\nDESCRIPTION: Shows raising and formatting of TabError with note annotation.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/notes.txt#2025-04-05_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nraise e  # TabError: tab error\n```\n\n----------------------------------------\n\nTITLE: TypeError Exception Handling\nDESCRIPTION: Shows basic TypeError exception handling and formatting.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/notes.txt#2025-04-05_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nraise e  # TypeError: type error\n```\n\n----------------------------------------\n\nTITLE: Raising and Handling Complex Exceptions in Python\nDESCRIPTION: This code snippet demonstrates raising and handling multiple exceptions, including chained exceptions and exception groups. It showcases the use of 'raise ... from' syntax and the ExceptionGroup class for grouping related exceptions.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/grouped_with_cause_and_context.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFile \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 31, in main\n    a()\nFile \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 10, in a\n    1 / 0\nZeroDivisionError: division by zero\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 34, in main\n    raise ValueError(\"Error\") from err\nValueError: Error\n\nDuring handling of the above exception, another exception occurred:\n\n  + Exception Group Traceback (most recent call last):\n  |   File \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 43, in <module>\n  |     main()\n  |   File \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 36, in main\n  |     raise ExceptionGroup(\"from_context\", [from_context, from_cause])\n  | ExceptionGroup: from_context (2 sub-exceptions)\n  +-+---------------- 1 ----------------\n    | Traceback (most recent call last):\n    |   File \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 17, in main\n    |     a()\n    |   File \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 10, in a\n    |     1 / 0\n    | ZeroDivisionError: division by zero\n    |\n    | The above exception was the direct cause of the following exception:\n    |\n    | Traceback (most recent call last):\n    |   File \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 19, in main\n    |     raise ValueError(\"ContextError\") from err\n    | ValueError: ContextError\n    +---------------- 2 ----------------\n    | Traceback (most recent call last):\n    |   File \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 24, in main\n    |     a()\n    |   File \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 10, in a\n    |     1 / 0\n    | ZeroDivisionError: division by zero\n    |\n    | During handling of the above exception, another exception occurred:\n    |\n    | Traceback (most recent call last):\n    |   File \"tests/exceptions/source/modern/grouped_with_cause_and_context.py\", line 26, in main\n    |     raise ValueError(\"CauseError\")\n    | ValueError: CauseError\n    +------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for Exception Raising in Python\nDESCRIPTION: This snippet defines two helper functions: divide_by_zero() which raises a ZeroDivisionError, and raise_value_error(value) which raises a ValueError with the given value.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/grouped_nested.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef divide_by_zero():\n    1 / 0\n\ndef raise_value_error(value):\n    raise ValueError(value)\n```\n\n----------------------------------------\n\nTITLE: Raising ExceptionGroup with Multiple ValueError Instances in Python\nDESCRIPTION: This code snippet demonstrates raising an ExceptionGroup containing 100 ValueError instances. It shows how the traceback is displayed, including file locations, line numbers, and a sample of the sub-exceptions.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/grouped_max_length.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFile \"tests/exceptions/source/modern/grouped_max_length.py\", line 15, in <module>\n    main()\nFile \"tests/exceptions/source/modern/grouped_max_length.py\", line 8, in main\n    raise ExceptionGroup(\"group\", errors)\n```\n\n----------------------------------------\n\nTITLE: Enhanced Traceback with Variable Annotations\nDESCRIPTION: Displays an enhanced traceback format with variable values and object references annotated inline, showing detailed context for the exception.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/modern/exception_formatting_async_generator.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n\n  File \"tests/exceptions/source/modern/exception_formatting_async_generator.py\", line 20, in <module>\n    f.send(None)\n    │ └ <method 'send' of 'coroutine' objects>\n    └ <coroutine object Logger.catch.<locals>.Catcher.__call__.<locals>.AsyncGenCatchWrapper.asend at 0xDEADBEEF>\n\n  File \"tests/exceptions/source/modern/exception_formatting_async_generator.py\", line 14, in foo\n    yield a / b\n          │   └ 0\n          └ 1\n\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Standard Python Traceback with Current Frame Indicator\nDESCRIPTION: A standard Python traceback with a '>' marker highlighting the current frame in the execution stack. This variation of standard tracebacks helps identify the specific point of exception origin.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/exception_formatting_function.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n> File \"tests/exceptions/source/others/exception_formatting_function.py\", line 17, in <module>\n    a(1, 0)\n  File \"tests/exceptions/source/others/exception_formatting_function.py\", line 14, in a\n    a / b\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Standard Python Traceback Format\nDESCRIPTION: Shows a standard Python traceback for a ZeroDivisionError occurring in a generator function. The error occurs when attempting division by zero within the generator.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/exception_formatting_generator.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/others/exception_formatting_generator.py\", line 20, in <module>\n    next(f)\n  File \"tests/exceptions/source/others/exception_formatting_generator.py\", line 14, in foo\n    yield a / b\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Coroutine Exception Demonstration in Python\nDESCRIPTION: A Python traceback showing a ZeroDivisionError in a coroutine. The exception occurs when dividing variable 'a' by 'b' where 'b' is zero, and is triggered when sending None to the coroutine.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/exception_formatting_coroutine.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nf.send(None)\n```\n\nLANGUAGE: python\nCODE:\n```\na / b\n```\n\n----------------------------------------\n\nTITLE: Property Implementation with ZeroDivisionError\nDESCRIPTION: The actual implementation of the property where the division by zero occurs. This is the source of the exception shown in the traceback.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/exception_in_property.txt#2025-04-05_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n1 / 0\n```\n\n----------------------------------------\n\nTITLE: Recursive Function Call Pattern in Python\nDESCRIPTION: A recursive function implementation that creates a deep call stack with two recursive patterns: decrementing the inner parameter and occasionally decrementing both outer and inner parameters. The function eventually raises a ValueError when recursion completes.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/repeated_lines.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrecursive(outer=outer, inner=inner - 1)\n```\n\nLANGUAGE: python\nCODE:\n```\nrecursive(outer=outer - 1, inner=outer - 1)\n```\n\nLANGUAGE: python\nCODE:\n```\nraise ValueError(\"End of recursion\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrecursive(10, 10)\n```\n\n----------------------------------------\n\nTITLE: Recursive Function Exception Stack Trace in Python\nDESCRIPTION: A stack trace visualization of a recursive function call pattern that terminates with a ValueError. The trace shows the parameters passed between recursive calls with variable values annotated inline, demonstrating Loguru's enhanced exception formatting capabilities.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/repeated_lines.txt#2025-04-05_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrecursive(outer=outer, inner=inner - 1)\n```\n\nLANGUAGE: python\nCODE:\n```\nrecursive(outer=outer - 1, inner=outer - 1)\n```\n\nLANGUAGE: python\nCODE:\n```\nraise ValueError(\"End of recursion\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Lambda Function with ZeroDivisionError in Python\nDESCRIPTION: This code snippet defines a recursive lambda function that divides by zero when the counter reaches zero. It demonstrates how to create a one-line recursive function that intentionally raises an exception after multiple calls.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/one_liner_recursion.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nrec = lambda r, i: 1 / 0 if i == 0 else r(r, i - 1); rec(rec, 10)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RecursionError in Python\nDESCRIPTION: This code snippet shows a recursive function that calls itself indefinitely, leading to a RecursionError when the maximum recursion depth is exceeded. The function 'recursive()' is called without any base case, causing it to recurse until the Python interpreter reaches its limit.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/recursion_error.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef recursive():\n    recursive()\n\nrecursive()\n```\n\n----------------------------------------\n\nTITLE: Standard Python Traceback for ZeroDivisionError\nDESCRIPTION: This snippet shows a standard Python traceback for a ZeroDivisionError. It demonstrates the call stack leading to the error, including file names, line numbers, and function names.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/sys_tracebacklimit.txt#2025-04-05_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nTraceback (most recent call last):\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 33, in f\n    g()\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 37, in g\n    h()\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 41, in h\n    i()\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 45, in i\n    j(1, 0)\n  File \"tests/exceptions/source/others/sys_tracebacklimit.py\", line 49, in j\n    a / b\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ZeroDivisionError Traceback in Python\nDESCRIPTION: This code snippet shows a series of nested function calls leading to a ZeroDivisionError. It illustrates how Python's traceback system works when an exception occurs, displaying the call stack and relevant line information.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/sys_tracebacklimit_none.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 55, in <module>\n    a()\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 13, in a\n    b()\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 17, in b\n    c()\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 21, in c\n    d()\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 25, in d\n    e()\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 29, in e\n    f()\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 33, in f\n    g()\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 37, in g\n    h()\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 41, in h\n    i()\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 45, in i\n    j(1, 0)\nFile \"tests/exceptions/source/others/sys_tracebacklimit_none.py\", line 49, in j\n    a / b\nZeroDivisionError: division by zero\n```\n\n----------------------------------------\n\nTITLE: Nested Function Calls Resulting in ZeroDivisionError in Python\nDESCRIPTION: A demonstration of deeply nested function calls (a to j) that eventually lead to a division by zero error. The code shows how a call chain propagates through multiple functions before encountering the error at the lowest level.\nSOURCE: https://github.com/Delgan/loguru/blob/master/tests/exceptions/output/others/sys_tracebacklimit_unset.txt#2025-04-05_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef a():\n    b()\n\ndef b():\n    c()\n\ndef c():\n    d()\n\ndef d():\n    e()\n\ndef e():\n    f()\n\ndef f():\n    g()\n\ndef g():\n    h()\n\ndef h():\n    i()\n\ndef i():\n    j(1, 0)\n\ndef j(a, b):\n    a / b\n\na()\n```"
  }
]